/**
 * OpenFEC
 * This application programming interface (API) allows you to explore the way candidates and committees fund their campaigns.    The Federal Election Commission (FEC) API is a RESTful web service supporting full-text and field-specific searches on FEC data. [Bulk downloads](https://www.fec.gov/data/advanced/?tab=bulk-data) are available on the current site. Information is tied to the underlying forms by file ID and image ID. Data is updated nightly.    There are a lot of data, and a good place to start is to use search to find interesting candidates and committees. Then, you can use their IDs to find report or line item details with the other endpoints. If you are interested in individual donors, check out contributor information in the `/schedule_a/` endpoints.    <b class=\"body\" id=\"getting_started_head\">Getting started with the openFEC API</b><br>    If you would like to use the FEC's API programmatically, you can sign up for your own API key using our form. Alternatively, you can still try out our API without an API key by using the web interface and using DEMO_KEY. Note that when you use the openFEC API you are subject to the [Terms of Service](https://github.com/fecgov/FEC/blob/master/TERMS-OF-SERVICE.md) and [Acceptable Use policy](https://github.com/fecgov/FEC/blob/master/ACCEPTABLE-USE-POLICY.md).    Signing up for an API key will enable you to place up to 1,000 calls an hour. Each call is limited to 100 results per page. You can email questions, comments or a request to get a key for 7,200 calls an hour (120 calls per minute) to <a href=\"mailto:APIinfo@fec.gov\">APIinfo@fec.gov</a>. You can also ask questions and discuss the data in a community led [group](https://groups.google.com/forum/#!forum/fec-data).    The model definitions and schema are available at [/swagger](/swagger/). This is useful for making wrappers and exploring the data.    A few restrictions limit the way you can use FEC data. For example, you canâ€™t use contributor lists for commercial purposes or to solicit donations. [Learn more here](https://www.fec.gov/updates/sale-or-use-contributor-information/).    [Inspect our source code](https://github.com/fecgov/openFEC). We welcome issues and pull requests!    <p><br></p> <h2 class=\"title\" id=\"signup_head\">Sign up for an API key</h2> <div id=\"apidatagov_signup\">Loading signup form...</div>
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAI_legal_search__get_default_response_adrs_inner.h
 *
 * 
 */

#ifndef OAI_legal_search__get_default_response_adrs_inner_H
#define OAI_legal_search__get_default_response_adrs_inner_H

#include <QJsonObject>

#include "OAIObject.h"
#include "OAI_legal_search__get_default_response_admin_fines_inner_commission_votes_inner.h"
#include "OAI_legal_search__get_default_response_admin_fines_inner_documents_inner.h"
#include "OAI_legal_search__get_default_response_adrs_inner_dispositions_inner.h"
#include "OAI_legal_search__get_default_response_adrs_inner_participants_inner.h"
#include <QDate>
#include <QList>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAI_legal_search__get_default_response_admin_fines_inner_commission_votes_inner;
class OAI_legal_search__get_default_response_adrs_inner_dispositions_inner;
class OAI_legal_search__get_default_response_admin_fines_inner_documents_inner;
class OAI_legal_search__get_default_response_adrs_inner_participants_inner;

class OAI_legal_search__get_default_response_adrs_inner : public OAIObject {
public:
    OAI_legal_search__get_default_response_adrs_inner();
    OAI_legal_search__get_default_response_adrs_inner(QString json);
    ~OAI_legal_search__get_default_response_adrs_inner() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QDate getCloseDate() const;
    void setCloseDate(const QDate &close_date);
    bool is_close_date_Set() const;
    bool is_close_date_Valid() const;

    QList<OAI_legal_search__get_default_response_admin_fines_inner_commission_votes_inner> getCommissionVotes() const;
    void setCommissionVotes(const QList<OAI_legal_search__get_default_response_admin_fines_inner_commission_votes_inner> &commission_votes);
    bool is_commission_votes_Set() const;
    bool is_commission_votes_Valid() const;

    QList<OAI_legal_search__get_default_response_adrs_inner_dispositions_inner> getDispositions() const;
    void setDispositions(const QList<OAI_legal_search__get_default_response_adrs_inner_dispositions_inner> &dispositions);
    bool is_dispositions_Set() const;
    bool is_dispositions_Valid() const;

    QString getDocId() const;
    void setDocId(const QString &doc_id);
    bool is_doc_id_Set() const;
    bool is_doc_id_Valid() const;

    OAIObject getDocumentHighlights() const;
    void setDocumentHighlights(const OAIObject &document_highlights);
    bool is_document_highlights_Set() const;
    bool is_document_highlights_Valid() const;

    QList<OAI_legal_search__get_default_response_admin_fines_inner_documents_inner> getDocuments() const;
    void setDocuments(const QList<OAI_legal_search__get_default_response_admin_fines_inner_documents_inner> &documents);
    bool is_documents_Set() const;
    bool is_documents_Valid() const;

    qint32 getElectionCycles() const;
    void setElectionCycles(const qint32 &election_cycles);
    bool is_election_cycles_Set() const;
    bool is_election_cycles_Valid() const;

    QList<QString> getHighlights() const;
    void setHighlights(const QList<QString> &highlights);
    bool is_highlights_Set() const;
    bool is_highlights_Valid() const;

    QString getName() const;
    void setName(const QString &name);
    bool is_name_Set() const;
    bool is_name_Valid() const;

    QString getRFalse() const;
    void setRFalse(const QString &r_false);
    bool is_r_false_Set() const;
    bool is_r_false_Valid() const;

    QDate getOpenDate() const;
    void setOpenDate(const QDate &open_date);
    bool is_open_date_Set() const;
    bool is_open_date_Valid() const;

    QList<OAI_legal_search__get_default_response_adrs_inner_participants_inner> getParticipants() const;
    void setParticipants(const QList<OAI_legal_search__get_default_response_adrs_inner_participants_inner> &participants);
    bool is_participants_Set() const;
    bool is_participants_Valid() const;

    QList<QString> getRespondents() const;
    void setRespondents(const QList<QString> &respondents);
    bool is_respondents_Set() const;
    bool is_respondents_Valid() const;

    QList<QString> getSubjects() const;
    void setSubjects(const QList<QString> &subjects);
    bool is_subjects_Set() const;
    bool is_subjects_Valid() const;

    QString getUrl() const;
    void setUrl(const QString &url);
    bool is_url_Set() const;
    bool is_url_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QDate m_close_date;
    bool m_close_date_isSet;
    bool m_close_date_isValid;

    QList<OAI_legal_search__get_default_response_admin_fines_inner_commission_votes_inner> m_commission_votes;
    bool m_commission_votes_isSet;
    bool m_commission_votes_isValid;

    QList<OAI_legal_search__get_default_response_adrs_inner_dispositions_inner> m_dispositions;
    bool m_dispositions_isSet;
    bool m_dispositions_isValid;

    QString m_doc_id;
    bool m_doc_id_isSet;
    bool m_doc_id_isValid;

    OAIObject m_document_highlights;
    bool m_document_highlights_isSet;
    bool m_document_highlights_isValid;

    QList<OAI_legal_search__get_default_response_admin_fines_inner_documents_inner> m_documents;
    bool m_documents_isSet;
    bool m_documents_isValid;

    qint32 m_election_cycles;
    bool m_election_cycles_isSet;
    bool m_election_cycles_isValid;

    QList<QString> m_highlights;
    bool m_highlights_isSet;
    bool m_highlights_isValid;

    QString m_name;
    bool m_name_isSet;
    bool m_name_isValid;

    QString m_r_false;
    bool m_r_false_isSet;
    bool m_r_false_isValid;

    QDate m_open_date;
    bool m_open_date_isSet;
    bool m_open_date_isValid;

    QList<OAI_legal_search__get_default_response_adrs_inner_participants_inner> m_participants;
    bool m_participants_isSet;
    bool m_participants_isValid;

    QList<QString> m_respondents;
    bool m_respondents_isSet;
    bool m_respondents_isValid;

    QList<QString> m_subjects;
    bool m_subjects_isSet;
    bool m_subjects_isValid;

    QString m_url;
    bool m_url_isSet;
    bool m_url_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAI_legal_search__get_default_response_adrs_inner)

#endif // OAI_legal_search__get_default_response_adrs_inner_H
