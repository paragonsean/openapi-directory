/**
 * OpenFEC
 * This application programming interface (API) allows you to explore the way candidates and committees fund their campaigns.    The Federal Election Commission (FEC) API is a RESTful web service supporting full-text and field-specific searches on FEC data. [Bulk downloads](https://www.fec.gov/data/advanced/?tab=bulk-data) are available on the current site. Information is tied to the underlying forms by file ID and image ID. Data is updated nightly.    There are a lot of data, and a good place to start is to use search to find interesting candidates and committees. Then, you can use their IDs to find report or line item details with the other endpoints. If you are interested in individual donors, check out contributor information in the `/schedule_a/` endpoints.    <b class=\"body\" id=\"getting_started_head\">Getting started with the openFEC API</b><br>    If you would like to use the FEC's API programmatically, you can sign up for your own API key using our form. Alternatively, you can still try out our API without an API key by using the web interface and using DEMO_KEY. Note that when you use the openFEC API you are subject to the [Terms of Service](https://github.com/fecgov/FEC/blob/master/TERMS-OF-SERVICE.md) and [Acceptable Use policy](https://github.com/fecgov/FEC/blob/master/ACCEPTABLE-USE-POLICY.md).    Signing up for an API key will enable you to place up to 1,000 calls an hour. Each call is limited to 100 results per page. You can email questions, comments or a request to get a key for 7,200 calls an hour (120 calls per minute) to <a href=\"mailto:APIinfo@fec.gov\">APIinfo@fec.gov</a>. You can also ask questions and discuss the data in a community led [group](https://groups.google.com/forum/#!forum/fec-data).    The model definitions and schema are available at [/swagger](/swagger/). This is useful for making wrappers and exploring the data.    A few restrictions limit the way you can use FEC data. For example, you canâ€™t use contributor lists for commercial purposes or to solicit donations. [Learn more here](https://www.fec.gov/updates/sale-or-use-contributor-information/).    [Inspect our source code](https://github.com/fecgov/openFEC). We welcome issues and pull requests!    <p><br></p> <h2 class=\"title\" id=\"signup_head\">Sign up for an API key</h2> <div id=\"apidatagov_signup\">Loading signup form...</div>
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIScheduleBEfile.h
 *
 * 
 */

#ifndef OAIScheduleBEfile_H
#define OAIScheduleBEfile_H

#include <QJsonObject>

#include "OAICommitteeHistory.h"
#include "OAIEFilings.h"
#include <QDate>
#include <QDateTime>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAICommitteeHistory;
class OAIEFilings;

class OAIScheduleBEfile : public OAIObject {
public:
    OAIScheduleBEfile();
    OAIScheduleBEfile(QString json);
    ~OAIScheduleBEfile() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getAmendmentIndicator() const;
    void setAmendmentIndicator(const QString &amendment_indicator);
    bool is_amendment_indicator_Set() const;
    bool is_amendment_indicator_Valid() const;

    QString getBackReferenceScheduleName() const;
    void setBackReferenceScheduleName(const QString &back_reference_schedule_name);
    bool is_back_reference_schedule_name_Set() const;
    bool is_back_reference_schedule_name_Valid() const;

    QString getBackReferenceTransactionId() const;
    void setBackReferenceTransactionId(const QString &back_reference_transaction_id);
    bool is_back_reference_transaction_id_Set() const;
    bool is_back_reference_transaction_id_Valid() const;

    QString getBeginningImageNumber() const;
    void setBeginningImageNumber(const QString &beginning_image_number);
    bool is_beginning_image_number_Set() const;
    bool is_beginning_image_number_Valid() const;

    QString getBeneficiaryCommitteeName() const;
    void setBeneficiaryCommitteeName(const QString &beneficiary_committee_name);
    bool is_beneficiary_committee_name_Set() const;
    bool is_beneficiary_committee_name_Valid() const;

    QString getCandidateOffice() const;
    void setCandidateOffice(const QString &candidate_office);
    bool is_candidate_office_Set() const;
    bool is_candidate_office_Valid() const;

    QString getCandidateOfficeDistrict() const;
    void setCandidateOfficeDistrict(const QString &candidate_office_district);
    bool is_candidate_office_district_Set() const;
    bool is_candidate_office_district_Valid() const;

    OAICommitteeHistory getCommittee() const;
    void setCommittee(const OAICommitteeHistory &committee);
    bool is_committee_Set() const;
    bool is_committee_Valid() const;

    QString getCommitteeId() const;
    void setCommitteeId(const QString &committee_id);
    bool is_committee_id_Set() const;
    bool is_committee_id_Valid() const;

    QString getCsvUrl() const;
    void setCsvUrl(const QString &csv_url);
    bool is_csv_url_Set() const;
    bool is_csv_url_Valid() const;

    double getDisbursementAmount() const;
    void setDisbursementAmount(const double &disbursement_amount);
    bool is_disbursement_amount_Set() const;
    bool is_disbursement_amount_Valid() const;

    QDate getDisbursementDate() const;
    void setDisbursementDate(const QDate &disbursement_date);
    bool is_disbursement_date_Set() const;
    bool is_disbursement_date_Valid() const;

    QString getDisbursementDescription() const;
    void setDisbursementDescription(const QString &disbursement_description);
    bool is_disbursement_description_Set() const;
    bool is_disbursement_description_Valid() const;

    QString getDisbursementType() const;
    void setDisbursementType(const QString &disbursement_type);
    bool is_disbursement_type_Set() const;
    bool is_disbursement_type_Valid() const;

    QString getEntityType() const;
    void setEntityType(const QString &entity_type);
    bool is_entity_type_Set() const;
    bool is_entity_type_Valid() const;

    QString getFecUrl() const;
    void setFecUrl(const QString &fec_url);
    bool is_fec_url_Set() const;
    bool is_fec_url_Valid() const;

    qint32 getFileNumber() const;
    void setFileNumber(const qint32 &file_number);
    bool is_file_number_Set() const;
    bool is_file_number_Valid() const;

    OAIEFilings getFiling() const;
    void setFiling(const OAIEFilings &filing);
    bool is_filing_Set() const;
    bool is_filing_Valid() const;

    QString getImageNumber() const;
    void setImageNumber(const QString &image_number);
    bool is_image_number_Set() const;
    bool is_image_number_Valid() const;

    bool isIsNotice() const;
    void setIsNotice(const bool &is_notice);
    bool is_is_notice_Set() const;
    bool is_is_notice_Valid() const;

    QString getLineNumber() const;
    void setLineNumber(const QString &line_number);
    bool is_line_number_Set() const;
    bool is_line_number_Valid() const;

    QDateTime getLoadTimestamp() const;
    void setLoadTimestamp(const QDateTime &load_timestamp);
    bool is_load_timestamp_Set() const;
    bool is_load_timestamp_Valid() const;

    QString getMemoCode() const;
    void setMemoCode(const QString &memo_code);
    bool is_memo_code_Set() const;
    bool is_memo_code_Valid() const;

    QString getMemoText() const;
    void setMemoText(const QString &memo_text);
    bool is_memo_text_Set() const;
    bool is_memo_text_Valid() const;

    QString getPayeeName() const;
    void setPayeeName(const QString &payee_name);
    bool is_payee_name_Set() const;
    bool is_payee_name_Valid() const;

    QString getPdfUrl() const;
    void setPdfUrl(const QString &pdf_url);
    bool is_pdf_url_Set() const;
    bool is_pdf_url_Valid() const;

    QString getRecipientCity() const;
    void setRecipientCity(const QString &recipient_city);
    bool is_recipient_city_Set() const;
    bool is_recipient_city_Valid() const;

    QString getRecipientName() const;
    void setRecipientName(const QString &recipient_name);
    bool is_recipient_name_Set() const;
    bool is_recipient_name_Valid() const;

    QString getRecipientPrefix() const;
    void setRecipientPrefix(const QString &recipient_prefix);
    bool is_recipient_prefix_Set() const;
    bool is_recipient_prefix_Valid() const;

    QString getRecipientState() const;
    void setRecipientState(const QString &recipient_state);
    bool is_recipient_state_Set() const;
    bool is_recipient_state_Valid() const;

    QString getRecipientSuffix() const;
    void setRecipientSuffix(const QString &recipient_suffix);
    bool is_recipient_suffix_Set() const;
    bool is_recipient_suffix_Valid() const;

    QString getRecipientZip() const;
    void setRecipientZip(const QString &recipient_zip);
    bool is_recipient_zip_Set() const;
    bool is_recipient_zip_Valid() const;

    qint32 getRelatedLineNumber() const;
    void setRelatedLineNumber(const qint32 &related_line_number);
    bool is_related_line_number_Set() const;
    bool is_related_line_number_Valid() const;

    QString getReportType() const;
    void setReportType(const QString &report_type);
    bool is_report_type_Set() const;
    bool is_report_type_Valid() const;

    qint32 getSemiAnnualBundledRefund() const;
    void setSemiAnnualBundledRefund(const qint32 &semi_annual_bundled_refund);
    bool is_semi_annual_bundled_refund_Set() const;
    bool is_semi_annual_bundled_refund_Valid() const;

    QString getTransactionId() const;
    void setTransactionId(const QString &transaction_id);
    bool is_transaction_id_Set() const;
    bool is_transaction_id_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_amendment_indicator;
    bool m_amendment_indicator_isSet;
    bool m_amendment_indicator_isValid;

    QString m_back_reference_schedule_name;
    bool m_back_reference_schedule_name_isSet;
    bool m_back_reference_schedule_name_isValid;

    QString m_back_reference_transaction_id;
    bool m_back_reference_transaction_id_isSet;
    bool m_back_reference_transaction_id_isValid;

    QString m_beginning_image_number;
    bool m_beginning_image_number_isSet;
    bool m_beginning_image_number_isValid;

    QString m_beneficiary_committee_name;
    bool m_beneficiary_committee_name_isSet;
    bool m_beneficiary_committee_name_isValid;

    QString m_candidate_office;
    bool m_candidate_office_isSet;
    bool m_candidate_office_isValid;

    QString m_candidate_office_district;
    bool m_candidate_office_district_isSet;
    bool m_candidate_office_district_isValid;

    OAICommitteeHistory m_committee;
    bool m_committee_isSet;
    bool m_committee_isValid;

    QString m_committee_id;
    bool m_committee_id_isSet;
    bool m_committee_id_isValid;

    QString m_csv_url;
    bool m_csv_url_isSet;
    bool m_csv_url_isValid;

    double m_disbursement_amount;
    bool m_disbursement_amount_isSet;
    bool m_disbursement_amount_isValid;

    QDate m_disbursement_date;
    bool m_disbursement_date_isSet;
    bool m_disbursement_date_isValid;

    QString m_disbursement_description;
    bool m_disbursement_description_isSet;
    bool m_disbursement_description_isValid;

    QString m_disbursement_type;
    bool m_disbursement_type_isSet;
    bool m_disbursement_type_isValid;

    QString m_entity_type;
    bool m_entity_type_isSet;
    bool m_entity_type_isValid;

    QString m_fec_url;
    bool m_fec_url_isSet;
    bool m_fec_url_isValid;

    qint32 m_file_number;
    bool m_file_number_isSet;
    bool m_file_number_isValid;

    OAIEFilings m_filing;
    bool m_filing_isSet;
    bool m_filing_isValid;

    QString m_image_number;
    bool m_image_number_isSet;
    bool m_image_number_isValid;

    bool m_is_notice;
    bool m_is_notice_isSet;
    bool m_is_notice_isValid;

    QString m_line_number;
    bool m_line_number_isSet;
    bool m_line_number_isValid;

    QDateTime m_load_timestamp;
    bool m_load_timestamp_isSet;
    bool m_load_timestamp_isValid;

    QString m_memo_code;
    bool m_memo_code_isSet;
    bool m_memo_code_isValid;

    QString m_memo_text;
    bool m_memo_text_isSet;
    bool m_memo_text_isValid;

    QString m_payee_name;
    bool m_payee_name_isSet;
    bool m_payee_name_isValid;

    QString m_pdf_url;
    bool m_pdf_url_isSet;
    bool m_pdf_url_isValid;

    QString m_recipient_city;
    bool m_recipient_city_isSet;
    bool m_recipient_city_isValid;

    QString m_recipient_name;
    bool m_recipient_name_isSet;
    bool m_recipient_name_isValid;

    QString m_recipient_prefix;
    bool m_recipient_prefix_isSet;
    bool m_recipient_prefix_isValid;

    QString m_recipient_state;
    bool m_recipient_state_isSet;
    bool m_recipient_state_isValid;

    QString m_recipient_suffix;
    bool m_recipient_suffix_isSet;
    bool m_recipient_suffix_isValid;

    QString m_recipient_zip;
    bool m_recipient_zip_isSet;
    bool m_recipient_zip_isValid;

    qint32 m_related_line_number;
    bool m_related_line_number_isSet;
    bool m_related_line_number_isValid;

    QString m_report_type;
    bool m_report_type_isSet;
    bool m_report_type_isValid;

    qint32 m_semi_annual_bundled_refund;
    bool m_semi_annual_bundled_refund_isSet;
    bool m_semi_annual_bundled_refund_isValid;

    QString m_transaction_id;
    bool m_transaction_id_isSet;
    bool m_transaction_id_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIScheduleBEfile)

#endif // OAIScheduleBEfile_H
