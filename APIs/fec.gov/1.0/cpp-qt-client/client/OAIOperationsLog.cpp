/**
 * OpenFEC
 * This application programming interface (API) allows you to explore the way candidates and committees fund their campaigns.    The Federal Election Commission (FEC) API is a RESTful web service supporting full-text and field-specific searches on FEC data. [Bulk downloads](https://www.fec.gov/data/advanced/?tab=bulk-data) are available on the current site. Information is tied to the underlying forms by file ID and image ID. Data is updated nightly.    There are a lot of data, and a good place to start is to use search to find interesting candidates and committees. Then, you can use their IDs to find report or line item details with the other endpoints. If you are interested in individual donors, check out contributor information in the `/schedule_a/` endpoints.    <b class=\"body\" id=\"getting_started_head\">Getting started with the openFEC API</b><br>    If you would like to use the FEC's API programmatically, you can sign up for your own API key using our form. Alternatively, you can still try out our API without an API key by using the web interface and using DEMO_KEY. Note that when you use the openFEC API you are subject to the [Terms of Service](https://github.com/fecgov/FEC/blob/master/TERMS-OF-SERVICE.md) and [Acceptable Use policy](https://github.com/fecgov/FEC/blob/master/ACCEPTABLE-USE-POLICY.md).    Signing up for an API key will enable you to place up to 1,000 calls an hour. Each call is limited to 100 results per page. You can email questions, comments or a request to get a key for 7,200 calls an hour (120 calls per minute) to <a href=\"mailto:APIinfo@fec.gov\">APIinfo@fec.gov</a>. You can also ask questions and discuss the data in a community led [group](https://groups.google.com/forum/#!forum/fec-data).    The model definitions and schema are available at [/swagger](/swagger/). This is useful for making wrappers and exploring the data.    A few restrictions limit the way you can use FEC data. For example, you canâ€™t use contributor lists for commercial purposes or to solicit donations. [Learn more here](https://www.fec.gov/updates/sale-or-use-contributor-information/).    [Inspect our source code](https://github.com/fecgov/openFEC). We welcome issues and pull requests!    <p><br></p> <h2 class=\"title\" id=\"signup_head\">Sign up for an API key</h2> <div id=\"apidatagov_signup\">Loading signup form...</div>
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIOperationsLog.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIOperationsLog::OAIOperationsLog(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIOperationsLog::OAIOperationsLog() {
    this->initializeModel();
}

OAIOperationsLog::~OAIOperationsLog() {}

void OAIOperationsLog::initializeModel() {

    m_amendment_indicator_isSet = false;
    m_amendment_indicator_isValid = false;

    m_beginning_image_number_isSet = false;
    m_beginning_image_number_isValid = false;

    m_candidate_committee_id_isSet = false;
    m_candidate_committee_id_isValid = false;

    m_coverage_end_date_isSet = false;
    m_coverage_end_date_isValid = false;

    m_coverage_start_date_isSet = false;
    m_coverage_start_date_isValid = false;

    m_ending_image_number_isSet = false;
    m_ending_image_number_isValid = false;

    m_form_type_isSet = false;
    m_form_type_isValid = false;

    m_receipt_date_isSet = false;
    m_receipt_date_isValid = false;

    m_report_type_isSet = false;
    m_report_type_isValid = false;

    m_report_year_isSet = false;
    m_report_year_isValid = false;

    m_status_num_isSet = false;
    m_status_num_isValid = false;

    m_sub_id_isSet = false;
    m_sub_id_isValid = false;

    m_summary_data_complete_date_isSet = false;
    m_summary_data_complete_date_isValid = false;

    m_summary_data_verification_date_isSet = false;
    m_summary_data_verification_date_isValid = false;

    m_transaction_data_complete_date_isSet = false;
    m_transaction_data_complete_date_isValid = false;
}

void OAIOperationsLog::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIOperationsLog::fromJsonObject(QJsonObject json) {

    m_amendment_indicator_isValid = ::OpenAPI::fromJsonValue(m_amendment_indicator, json[QString("amendment_indicator")]);
    m_amendment_indicator_isSet = !json[QString("amendment_indicator")].isNull() && m_amendment_indicator_isValid;

    m_beginning_image_number_isValid = ::OpenAPI::fromJsonValue(m_beginning_image_number, json[QString("beginning_image_number")]);
    m_beginning_image_number_isSet = !json[QString("beginning_image_number")].isNull() && m_beginning_image_number_isValid;

    m_candidate_committee_id_isValid = ::OpenAPI::fromJsonValue(m_candidate_committee_id, json[QString("candidate_committee_id")]);
    m_candidate_committee_id_isSet = !json[QString("candidate_committee_id")].isNull() && m_candidate_committee_id_isValid;

    m_coverage_end_date_isValid = ::OpenAPI::fromJsonValue(m_coverage_end_date, json[QString("coverage_end_date")]);
    m_coverage_end_date_isSet = !json[QString("coverage_end_date")].isNull() && m_coverage_end_date_isValid;

    m_coverage_start_date_isValid = ::OpenAPI::fromJsonValue(m_coverage_start_date, json[QString("coverage_start_date")]);
    m_coverage_start_date_isSet = !json[QString("coverage_start_date")].isNull() && m_coverage_start_date_isValid;

    m_ending_image_number_isValid = ::OpenAPI::fromJsonValue(m_ending_image_number, json[QString("ending_image_number")]);
    m_ending_image_number_isSet = !json[QString("ending_image_number")].isNull() && m_ending_image_number_isValid;

    m_form_type_isValid = ::OpenAPI::fromJsonValue(m_form_type, json[QString("form_type")]);
    m_form_type_isSet = !json[QString("form_type")].isNull() && m_form_type_isValid;

    m_receipt_date_isValid = ::OpenAPI::fromJsonValue(m_receipt_date, json[QString("receipt_date")]);
    m_receipt_date_isSet = !json[QString("receipt_date")].isNull() && m_receipt_date_isValid;

    m_report_type_isValid = ::OpenAPI::fromJsonValue(m_report_type, json[QString("report_type")]);
    m_report_type_isSet = !json[QString("report_type")].isNull() && m_report_type_isValid;

    m_report_year_isValid = ::OpenAPI::fromJsonValue(m_report_year, json[QString("report_year")]);
    m_report_year_isSet = !json[QString("report_year")].isNull() && m_report_year_isValid;

    m_status_num_isValid = ::OpenAPI::fromJsonValue(m_status_num, json[QString("status_num")]);
    m_status_num_isSet = !json[QString("status_num")].isNull() && m_status_num_isValid;

    m_sub_id_isValid = ::OpenAPI::fromJsonValue(m_sub_id, json[QString("sub_id")]);
    m_sub_id_isSet = !json[QString("sub_id")].isNull() && m_sub_id_isValid;

    m_summary_data_complete_date_isValid = ::OpenAPI::fromJsonValue(m_summary_data_complete_date, json[QString("summary_data_complete_date")]);
    m_summary_data_complete_date_isSet = !json[QString("summary_data_complete_date")].isNull() && m_summary_data_complete_date_isValid;

    m_summary_data_verification_date_isValid = ::OpenAPI::fromJsonValue(m_summary_data_verification_date, json[QString("summary_data_verification_date")]);
    m_summary_data_verification_date_isSet = !json[QString("summary_data_verification_date")].isNull() && m_summary_data_verification_date_isValid;

    m_transaction_data_complete_date_isValid = ::OpenAPI::fromJsonValue(m_transaction_data_complete_date, json[QString("transaction_data_complete_date")]);
    m_transaction_data_complete_date_isSet = !json[QString("transaction_data_complete_date")].isNull() && m_transaction_data_complete_date_isValid;
}

QString OAIOperationsLog::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIOperationsLog::asJsonObject() const {
    QJsonObject obj;
    if (m_amendment_indicator_isSet) {
        obj.insert(QString("amendment_indicator"), ::OpenAPI::toJsonValue(m_amendment_indicator));
    }
    if (m_beginning_image_number_isSet) {
        obj.insert(QString("beginning_image_number"), ::OpenAPI::toJsonValue(m_beginning_image_number));
    }
    if (m_candidate_committee_id_isSet) {
        obj.insert(QString("candidate_committee_id"), ::OpenAPI::toJsonValue(m_candidate_committee_id));
    }
    if (m_coverage_end_date_isSet) {
        obj.insert(QString("coverage_end_date"), ::OpenAPI::toJsonValue(m_coverage_end_date));
    }
    if (m_coverage_start_date_isSet) {
        obj.insert(QString("coverage_start_date"), ::OpenAPI::toJsonValue(m_coverage_start_date));
    }
    if (m_ending_image_number_isSet) {
        obj.insert(QString("ending_image_number"), ::OpenAPI::toJsonValue(m_ending_image_number));
    }
    if (m_form_type_isSet) {
        obj.insert(QString("form_type"), ::OpenAPI::toJsonValue(m_form_type));
    }
    if (m_receipt_date_isSet) {
        obj.insert(QString("receipt_date"), ::OpenAPI::toJsonValue(m_receipt_date));
    }
    if (m_report_type_isSet) {
        obj.insert(QString("report_type"), ::OpenAPI::toJsonValue(m_report_type));
    }
    if (m_report_year_isSet) {
        obj.insert(QString("report_year"), ::OpenAPI::toJsonValue(m_report_year));
    }
    if (m_status_num_isSet) {
        obj.insert(QString("status_num"), ::OpenAPI::toJsonValue(m_status_num));
    }
    if (m_sub_id_isSet) {
        obj.insert(QString("sub_id"), ::OpenAPI::toJsonValue(m_sub_id));
    }
    if (m_summary_data_complete_date_isSet) {
        obj.insert(QString("summary_data_complete_date"), ::OpenAPI::toJsonValue(m_summary_data_complete_date));
    }
    if (m_summary_data_verification_date_isSet) {
        obj.insert(QString("summary_data_verification_date"), ::OpenAPI::toJsonValue(m_summary_data_verification_date));
    }
    if (m_transaction_data_complete_date_isSet) {
        obj.insert(QString("transaction_data_complete_date"), ::OpenAPI::toJsonValue(m_transaction_data_complete_date));
    }
    return obj;
}

QString OAIOperationsLog::getAmendmentIndicator() const {
    return m_amendment_indicator;
}
void OAIOperationsLog::setAmendmentIndicator(const QString &amendment_indicator) {
    m_amendment_indicator = amendment_indicator;
    m_amendment_indicator_isSet = true;
}

bool OAIOperationsLog::is_amendment_indicator_Set() const{
    return m_amendment_indicator_isSet;
}

bool OAIOperationsLog::is_amendment_indicator_Valid() const{
    return m_amendment_indicator_isValid;
}

QString OAIOperationsLog::getBeginningImageNumber() const {
    return m_beginning_image_number;
}
void OAIOperationsLog::setBeginningImageNumber(const QString &beginning_image_number) {
    m_beginning_image_number = beginning_image_number;
    m_beginning_image_number_isSet = true;
}

bool OAIOperationsLog::is_beginning_image_number_Set() const{
    return m_beginning_image_number_isSet;
}

bool OAIOperationsLog::is_beginning_image_number_Valid() const{
    return m_beginning_image_number_isValid;
}

QString OAIOperationsLog::getCandidateCommitteeId() const {
    return m_candidate_committee_id;
}
void OAIOperationsLog::setCandidateCommitteeId(const QString &candidate_committee_id) {
    m_candidate_committee_id = candidate_committee_id;
    m_candidate_committee_id_isSet = true;
}

bool OAIOperationsLog::is_candidate_committee_id_Set() const{
    return m_candidate_committee_id_isSet;
}

bool OAIOperationsLog::is_candidate_committee_id_Valid() const{
    return m_candidate_committee_id_isValid;
}

QDateTime OAIOperationsLog::getCoverageEndDate() const {
    return m_coverage_end_date;
}
void OAIOperationsLog::setCoverageEndDate(const QDateTime &coverage_end_date) {
    m_coverage_end_date = coverage_end_date;
    m_coverage_end_date_isSet = true;
}

bool OAIOperationsLog::is_coverage_end_date_Set() const{
    return m_coverage_end_date_isSet;
}

bool OAIOperationsLog::is_coverage_end_date_Valid() const{
    return m_coverage_end_date_isValid;
}

QDateTime OAIOperationsLog::getCoverageStartDate() const {
    return m_coverage_start_date;
}
void OAIOperationsLog::setCoverageStartDate(const QDateTime &coverage_start_date) {
    m_coverage_start_date = coverage_start_date;
    m_coverage_start_date_isSet = true;
}

bool OAIOperationsLog::is_coverage_start_date_Set() const{
    return m_coverage_start_date_isSet;
}

bool OAIOperationsLog::is_coverage_start_date_Valid() const{
    return m_coverage_start_date_isValid;
}

QString OAIOperationsLog::getEndingImageNumber() const {
    return m_ending_image_number;
}
void OAIOperationsLog::setEndingImageNumber(const QString &ending_image_number) {
    m_ending_image_number = ending_image_number;
    m_ending_image_number_isSet = true;
}

bool OAIOperationsLog::is_ending_image_number_Set() const{
    return m_ending_image_number_isSet;
}

bool OAIOperationsLog::is_ending_image_number_Valid() const{
    return m_ending_image_number_isValid;
}

QString OAIOperationsLog::getFormType() const {
    return m_form_type;
}
void OAIOperationsLog::setFormType(const QString &form_type) {
    m_form_type = form_type;
    m_form_type_isSet = true;
}

bool OAIOperationsLog::is_form_type_Set() const{
    return m_form_type_isSet;
}

bool OAIOperationsLog::is_form_type_Valid() const{
    return m_form_type_isValid;
}

QDateTime OAIOperationsLog::getReceiptDate() const {
    return m_receipt_date;
}
void OAIOperationsLog::setReceiptDate(const QDateTime &receipt_date) {
    m_receipt_date = receipt_date;
    m_receipt_date_isSet = true;
}

bool OAIOperationsLog::is_receipt_date_Set() const{
    return m_receipt_date_isSet;
}

bool OAIOperationsLog::is_receipt_date_Valid() const{
    return m_receipt_date_isValid;
}

QString OAIOperationsLog::getReportType() const {
    return m_report_type;
}
void OAIOperationsLog::setReportType(const QString &report_type) {
    m_report_type = report_type;
    m_report_type_isSet = true;
}

bool OAIOperationsLog::is_report_type_Set() const{
    return m_report_type_isSet;
}

bool OAIOperationsLog::is_report_type_Valid() const{
    return m_report_type_isValid;
}

qint32 OAIOperationsLog::getReportYear() const {
    return m_report_year;
}
void OAIOperationsLog::setReportYear(const qint32 &report_year) {
    m_report_year = report_year;
    m_report_year_isSet = true;
}

bool OAIOperationsLog::is_report_year_Set() const{
    return m_report_year_isSet;
}

bool OAIOperationsLog::is_report_year_Valid() const{
    return m_report_year_isValid;
}

qint32 OAIOperationsLog::getStatusNum() const {
    return m_status_num;
}
void OAIOperationsLog::setStatusNum(const qint32 &status_num) {
    m_status_num = status_num;
    m_status_num_isSet = true;
}

bool OAIOperationsLog::is_status_num_Set() const{
    return m_status_num_isSet;
}

bool OAIOperationsLog::is_status_num_Valid() const{
    return m_status_num_isValid;
}

qint32 OAIOperationsLog::getSubId() const {
    return m_sub_id;
}
void OAIOperationsLog::setSubId(const qint32 &sub_id) {
    m_sub_id = sub_id;
    m_sub_id_isSet = true;
}

bool OAIOperationsLog::is_sub_id_Set() const{
    return m_sub_id_isSet;
}

bool OAIOperationsLog::is_sub_id_Valid() const{
    return m_sub_id_isValid;
}

QDateTime OAIOperationsLog::getSummaryDataCompleteDate() const {
    return m_summary_data_complete_date;
}
void OAIOperationsLog::setSummaryDataCompleteDate(const QDateTime &summary_data_complete_date) {
    m_summary_data_complete_date = summary_data_complete_date;
    m_summary_data_complete_date_isSet = true;
}

bool OAIOperationsLog::is_summary_data_complete_date_Set() const{
    return m_summary_data_complete_date_isSet;
}

bool OAIOperationsLog::is_summary_data_complete_date_Valid() const{
    return m_summary_data_complete_date_isValid;
}

QDateTime OAIOperationsLog::getSummaryDataVerificationDate() const {
    return m_summary_data_verification_date;
}
void OAIOperationsLog::setSummaryDataVerificationDate(const QDateTime &summary_data_verification_date) {
    m_summary_data_verification_date = summary_data_verification_date;
    m_summary_data_verification_date_isSet = true;
}

bool OAIOperationsLog::is_summary_data_verification_date_Set() const{
    return m_summary_data_verification_date_isSet;
}

bool OAIOperationsLog::is_summary_data_verification_date_Valid() const{
    return m_summary_data_verification_date_isValid;
}

QDate OAIOperationsLog::getTransactionDataCompleteDate() const {
    return m_transaction_data_complete_date;
}
void OAIOperationsLog::setTransactionDataCompleteDate(const QDate &transaction_data_complete_date) {
    m_transaction_data_complete_date = transaction_data_complete_date;
    m_transaction_data_complete_date_isSet = true;
}

bool OAIOperationsLog::is_transaction_data_complete_date_Set() const{
    return m_transaction_data_complete_date_isSet;
}

bool OAIOperationsLog::is_transaction_data_complete_date_Valid() const{
    return m_transaction_data_complete_date_isValid;
}

bool OAIOperationsLog::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_amendment_indicator_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_beginning_image_number_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_candidate_committee_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_coverage_end_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_coverage_start_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_ending_image_number_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_form_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_receipt_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_report_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_report_year_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status_num_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sub_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_summary_data_complete_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_summary_data_verification_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_transaction_data_complete_date_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIOperationsLog::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
