/**
 * OpenFEC
 * This application programming interface (API) allows you to explore the way candidates and committees fund their campaigns.    The Federal Election Commission (FEC) API is a RESTful web service supporting full-text and field-specific searches on FEC data. [Bulk downloads](https://www.fec.gov/data/advanced/?tab=bulk-data) are available on the current site. Information is tied to the underlying forms by file ID and image ID. Data is updated nightly.    There are a lot of data, and a good place to start is to use search to find interesting candidates and committees. Then, you can use their IDs to find report or line item details with the other endpoints. If you are interested in individual donors, check out contributor information in the `/schedule_a/` endpoints.    <b class=\"body\" id=\"getting_started_head\">Getting started with the openFEC API</b><br>    If you would like to use the FEC's API programmatically, you can sign up for your own API key using our form. Alternatively, you can still try out our API without an API key by using the web interface and using DEMO_KEY. Note that when you use the openFEC API you are subject to the [Terms of Service](https://github.com/fecgov/FEC/blob/master/TERMS-OF-SERVICE.md) and [Acceptable Use policy](https://github.com/fecgov/FEC/blob/master/ACCEPTABLE-USE-POLICY.md).    Signing up for an API key will enable you to place up to 1,000 calls an hour. Each call is limited to 100 results per page. You can email questions, comments or a request to get a key for 7,200 calls an hour (120 calls per minute) to <a href=\"mailto:APIinfo@fec.gov\">APIinfo@fec.gov</a>. You can also ask questions and discuss the data in a community led [group](https://groups.google.com/forum/#!forum/fec-data).    The model definitions and schema are available at [/swagger](/swagger/). This is useful for making wrappers and exploring the data.    A few restrictions limit the way you can use FEC data. For example, you canâ€™t use contributor lists for commercial purposes or to solicit donations. [Learn more here](https://www.fec.gov/updates/sale-or-use-contributor-information/).    [Inspect our source code](https://github.com/fecgov/openFEC). We welcome issues and pull requests!    <p><br></p> <h2 class=\"title\" id=\"signup_head\">Sign up for an API key</h2> <div id=\"apidatagov_signup\">Loading signup form...</div>
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAICommitteeApi_H
#define OAI_OAICommitteeApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAICommitteeDetailPage.h"
#include "OAICommitteeHistoryProfilePage.h"
#include "OAICommitteePage.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAICommitteeApi : public QObject {
    Q_OBJECT

public:
    OAICommitteeApi(const int timeOut = 0);
    ~OAICommitteeApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  api_key QString [required]
    * @param[in]  candidate_id QString [required]
    * @param[in]  committee_type QList<QString> [optional]
    * @param[in]  cycle QList<qint32> [optional]
    * @param[in]  sort_null_only bool [optional]
    * @param[in]  page qint32 [optional]
    * @param[in]  year QList<qint32> [optional]
    * @param[in]  sort_nulls_last bool [optional]
    * @param[in]  sort_hide_null bool [optional]
    * @param[in]  per_page qint32 [optional]
    * @param[in]  filing_frequency QList<QString> [optional]
    * @param[in]  organization_type QList<QString> [optional]
    * @param[in]  designation QList<QString> [optional]
    * @param[in]  sort QString [optional]
    */
    virtual void candidateCandidateIdCommitteesGet(const QString &api_key, const QString &candidate_id, const ::OpenAPI::OptionalParam<QList<QString>> &committee_type = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QList<qint32>> &cycle = ::OpenAPI::OptionalParam<QList<qint32>>(), const ::OpenAPI::OptionalParam<bool> &sort_null_only = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<qint32> &page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QList<qint32>> &year = ::OpenAPI::OptionalParam<QList<qint32>>(), const ::OpenAPI::OptionalParam<bool> &sort_nulls_last = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &sort_hide_null = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<qint32> &per_page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QList<QString>> &filing_frequency = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QList<QString>> &organization_type = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QList<QString>> &designation = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QString> &sort = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  api_key QString [required]
    * @param[in]  cycle qint32 [required]
    * @param[in]  candidate_id QString [required]
    * @param[in]  election_full bool [optional]
    * @param[in]  sort_nulls_last bool [optional]
    * @param[in]  page qint32 [optional]
    * @param[in]  sort_null_only bool [optional]
    * @param[in]  sort_hide_null bool [optional]
    * @param[in]  per_page qint32 [optional]
    * @param[in]  designation QList<QString> [optional]
    * @param[in]  sort QString [optional]
    */
    virtual void candidateCandidateIdCommitteesHistoryCycleGet(const QString &api_key, const qint32 &cycle, const QString &candidate_id, const ::OpenAPI::OptionalParam<bool> &election_full = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &sort_nulls_last = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<qint32> &page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<bool> &sort_null_only = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &sort_hide_null = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<qint32> &per_page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QList<QString>> &designation = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QString> &sort = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  api_key QString [required]
    * @param[in]  candidate_id QString [required]
    * @param[in]  election_full bool [optional]
    * @param[in]  sort_nulls_last bool [optional]
    * @param[in]  page qint32 [optional]
    * @param[in]  sort_null_only bool [optional]
    * @param[in]  sort_hide_null bool [optional]
    * @param[in]  per_page qint32 [optional]
    * @param[in]  designation QList<QString> [optional]
    * @param[in]  sort QString [optional]
    */
    virtual void candidateCandidateIdCommitteesHistoryGet(const QString &api_key, const QString &candidate_id, const ::OpenAPI::OptionalParam<bool> &election_full = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &sort_nulls_last = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<qint32> &page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<bool> &sort_null_only = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &sort_hide_null = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<qint32> &per_page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QList<QString>> &designation = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QString> &sort = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  api_key QString [required]
    * @param[in]  committee_id QString [required]
    * @param[in]  committee_type QList<QString> [optional]
    * @param[in]  cycle QList<qint32> [optional]
    * @param[in]  sort_null_only bool [optional]
    * @param[in]  page qint32 [optional]
    * @param[in]  year QList<qint32> [optional]
    * @param[in]  sort_nulls_last bool [optional]
    * @param[in]  sort_hide_null bool [optional]
    * @param[in]  per_page qint32 [optional]
    * @param[in]  filing_frequency QList<QString> [optional]
    * @param[in]  organization_type QList<QString> [optional]
    * @param[in]  designation QList<QString> [optional]
    * @param[in]  sort QString [optional]
    */
    virtual void committeeCommitteeIdGet(const QString &api_key, const QString &committee_id, const ::OpenAPI::OptionalParam<QList<QString>> &committee_type = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QList<qint32>> &cycle = ::OpenAPI::OptionalParam<QList<qint32>>(), const ::OpenAPI::OptionalParam<bool> &sort_null_only = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<qint32> &page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QList<qint32>> &year = ::OpenAPI::OptionalParam<QList<qint32>>(), const ::OpenAPI::OptionalParam<bool> &sort_nulls_last = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &sort_hide_null = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<qint32> &per_page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QList<QString>> &filing_frequency = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QList<QString>> &organization_type = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QList<QString>> &designation = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QString> &sort = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  api_key QString [required]
    * @param[in]  committee_id QString [required]
    * @param[in]  cycle qint32 [required]
    * @param[in]  election_full bool [optional]
    * @param[in]  sort_nulls_last bool [optional]
    * @param[in]  page qint32 [optional]
    * @param[in]  sort_null_only bool [optional]
    * @param[in]  sort_hide_null bool [optional]
    * @param[in]  per_page qint32 [optional]
    * @param[in]  designation QList<QString> [optional]
    * @param[in]  sort QString [optional]
    */
    virtual void committeeCommitteeIdHistoryCycleGet(const QString &api_key, const QString &committee_id, const qint32 &cycle, const ::OpenAPI::OptionalParam<bool> &election_full = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &sort_nulls_last = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<qint32> &page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<bool> &sort_null_only = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &sort_hide_null = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<qint32> &per_page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QList<QString>> &designation = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QString> &sort = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  api_key QString [required]
    * @param[in]  committee_id QString [required]
    * @param[in]  election_full bool [optional]
    * @param[in]  sort_nulls_last bool [optional]
    * @param[in]  page qint32 [optional]
    * @param[in]  sort_null_only bool [optional]
    * @param[in]  sort_hide_null bool [optional]
    * @param[in]  per_page qint32 [optional]
    * @param[in]  designation QList<QString> [optional]
    * @param[in]  sort QString [optional]
    */
    virtual void committeeCommitteeIdHistoryGet(const QString &api_key, const QString &committee_id, const ::OpenAPI::OptionalParam<bool> &election_full = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &sort_nulls_last = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<qint32> &page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<bool> &sort_null_only = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &sort_hide_null = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<qint32> &per_page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QList<QString>> &designation = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QString> &sort = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  api_key QString [required]
    * @param[in]  treasurer_name QList<QString> [optional]
    * @param[in]  q QList<QString> [optional]
    * @param[in]  min_first_file_date QDate [optional]
    * @param[in]  cycle QList<qint32> [optional]
    * @param[in]  sponsor_candidate_id QList<QString> [optional]
    * @param[in]  sort_null_only bool [optional]
    * @param[in]  sort_hide_null bool [optional]
    * @param[in]  candidate_id QList<QString> [optional]
    * @param[in]  per_page qint32 [optional]
    * @param[in]  filing_frequency QList<QString> [optional]
    * @param[in]  sort QString [optional]
    * @param[in]  max_first_file_date QDate [optional]
    * @param[in]  min_first_f1_date QDate [optional]
    * @param[in]  min_last_f1_date QDate [optional]
    * @param[in]  committee_type QList<QString> [optional]
    * @param[in]  party QList<QString> [optional]
    * @param[in]  sort_nulls_last bool [optional]
    * @param[in]  page qint32 [optional]
    * @param[in]  year QList<qint32> [optional]
    * @param[in]  committee_id QList<QString> [optional]
    * @param[in]  state QList<QString> [optional]
    * @param[in]  max_last_f1_date QDate [optional]
    * @param[in]  max_first_f1_date QDate [optional]
    * @param[in]  designation QList<QString> [optional]
    * @param[in]  organization_type QList<QString> [optional]
    */
    virtual void committeesGet(const QString &api_key, const ::OpenAPI::OptionalParam<QList<QString>> &treasurer_name = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QList<QString>> &q = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QDate> &min_first_file_date = ::OpenAPI::OptionalParam<QDate>(), const ::OpenAPI::OptionalParam<QList<qint32>> &cycle = ::OpenAPI::OptionalParam<QList<qint32>>(), const ::OpenAPI::OptionalParam<QList<QString>> &sponsor_candidate_id = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<bool> &sort_null_only = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &sort_hide_null = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QList<QString>> &candidate_id = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<qint32> &per_page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QList<QString>> &filing_frequency = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QString> &sort = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QDate> &max_first_file_date = ::OpenAPI::OptionalParam<QDate>(), const ::OpenAPI::OptionalParam<QDate> &min_first_f1_date = ::OpenAPI::OptionalParam<QDate>(), const ::OpenAPI::OptionalParam<QDate> &min_last_f1_date = ::OpenAPI::OptionalParam<QDate>(), const ::OpenAPI::OptionalParam<QList<QString>> &committee_type = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QList<QString>> &party = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<bool> &sort_nulls_last = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<qint32> &page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QList<qint32>> &year = ::OpenAPI::OptionalParam<QList<qint32>>(), const ::OpenAPI::OptionalParam<QList<QString>> &committee_id = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QList<QString>> &state = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QDate> &max_last_f1_date = ::OpenAPI::OptionalParam<QDate>(), const ::OpenAPI::OptionalParam<QDate> &max_first_f1_date = ::OpenAPI::OptionalParam<QDate>(), const ::OpenAPI::OptionalParam<QList<QString>> &designation = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QList<QString>> &organization_type = ::OpenAPI::OptionalParam<QList<QString>>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void candidateCandidateIdCommitteesGetCallback(OAIHttpRequestWorker *worker);
    void candidateCandidateIdCommitteesHistoryCycleGetCallback(OAIHttpRequestWorker *worker);
    void candidateCandidateIdCommitteesHistoryGetCallback(OAIHttpRequestWorker *worker);
    void committeeCommitteeIdGetCallback(OAIHttpRequestWorker *worker);
    void committeeCommitteeIdHistoryCycleGetCallback(OAIHttpRequestWorker *worker);
    void committeeCommitteeIdHistoryGetCallback(OAIHttpRequestWorker *worker);
    void committeesGetCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void candidateCandidateIdCommitteesGetSignal(OAICommitteeDetailPage summary);
    void candidateCandidateIdCommitteesHistoryCycleGetSignal(OAICommitteeHistoryProfilePage summary);
    void candidateCandidateIdCommitteesHistoryGetSignal(OAICommitteeHistoryProfilePage summary);
    void committeeCommitteeIdGetSignal(OAICommitteeDetailPage summary);
    void committeeCommitteeIdHistoryCycleGetSignal(OAICommitteeHistoryProfilePage summary);
    void committeeCommitteeIdHistoryGetSignal(OAICommitteeHistoryProfilePage summary);
    void committeesGetSignal(OAICommitteePage summary);


    void candidateCandidateIdCommitteesGetSignalFull(OAIHttpRequestWorker *worker, OAICommitteeDetailPage summary);
    void candidateCandidateIdCommitteesHistoryCycleGetSignalFull(OAIHttpRequestWorker *worker, OAICommitteeHistoryProfilePage summary);
    void candidateCandidateIdCommitteesHistoryGetSignalFull(OAIHttpRequestWorker *worker, OAICommitteeHistoryProfilePage summary);
    void committeeCommitteeIdGetSignalFull(OAIHttpRequestWorker *worker, OAICommitteeDetailPage summary);
    void committeeCommitteeIdHistoryCycleGetSignalFull(OAIHttpRequestWorker *worker, OAICommitteeHistoryProfilePage summary);
    void committeeCommitteeIdHistoryGetSignalFull(OAIHttpRequestWorker *worker, OAICommitteeHistoryProfilePage summary);
    void committeesGetSignalFull(OAIHttpRequestWorker *worker, OAICommitteePage summary);

    Q_DECL_DEPRECATED_X("Use candidateCandidateIdCommitteesGetSignalError() instead")
    void candidateCandidateIdCommitteesGetSignalE(OAICommitteeDetailPage summary, QNetworkReply::NetworkError error_type, QString error_str);
    void candidateCandidateIdCommitteesGetSignalError(OAICommitteeDetailPage summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use candidateCandidateIdCommitteesHistoryCycleGetSignalError() instead")
    void candidateCandidateIdCommitteesHistoryCycleGetSignalE(OAICommitteeHistoryProfilePage summary, QNetworkReply::NetworkError error_type, QString error_str);
    void candidateCandidateIdCommitteesHistoryCycleGetSignalError(OAICommitteeHistoryProfilePage summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use candidateCandidateIdCommitteesHistoryGetSignalError() instead")
    void candidateCandidateIdCommitteesHistoryGetSignalE(OAICommitteeHistoryProfilePage summary, QNetworkReply::NetworkError error_type, QString error_str);
    void candidateCandidateIdCommitteesHistoryGetSignalError(OAICommitteeHistoryProfilePage summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use committeeCommitteeIdGetSignalError() instead")
    void committeeCommitteeIdGetSignalE(OAICommitteeDetailPage summary, QNetworkReply::NetworkError error_type, QString error_str);
    void committeeCommitteeIdGetSignalError(OAICommitteeDetailPage summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use committeeCommitteeIdHistoryCycleGetSignalError() instead")
    void committeeCommitteeIdHistoryCycleGetSignalE(OAICommitteeHistoryProfilePage summary, QNetworkReply::NetworkError error_type, QString error_str);
    void committeeCommitteeIdHistoryCycleGetSignalError(OAICommitteeHistoryProfilePage summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use committeeCommitteeIdHistoryGetSignalError() instead")
    void committeeCommitteeIdHistoryGetSignalE(OAICommitteeHistoryProfilePage summary, QNetworkReply::NetworkError error_type, QString error_str);
    void committeeCommitteeIdHistoryGetSignalError(OAICommitteeHistoryProfilePage summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use committeesGetSignalError() instead")
    void committeesGetSignalE(OAICommitteePage summary, QNetworkReply::NetworkError error_type, QString error_str);
    void committeesGetSignalError(OAICommitteePage summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use candidateCandidateIdCommitteesGetSignalErrorFull() instead")
    void candidateCandidateIdCommitteesGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void candidateCandidateIdCommitteesGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use candidateCandidateIdCommitteesHistoryCycleGetSignalErrorFull() instead")
    void candidateCandidateIdCommitteesHistoryCycleGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void candidateCandidateIdCommitteesHistoryCycleGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use candidateCandidateIdCommitteesHistoryGetSignalErrorFull() instead")
    void candidateCandidateIdCommitteesHistoryGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void candidateCandidateIdCommitteesHistoryGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use committeeCommitteeIdGetSignalErrorFull() instead")
    void committeeCommitteeIdGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void committeeCommitteeIdGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use committeeCommitteeIdHistoryCycleGetSignalErrorFull() instead")
    void committeeCommitteeIdHistoryCycleGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void committeeCommitteeIdHistoryCycleGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use committeeCommitteeIdHistoryGetSignalErrorFull() instead")
    void committeeCommitteeIdHistoryGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void committeeCommitteeIdHistoryGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use committeesGetSignalErrorFull() instead")
    void committeesGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void committeesGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
