/**
 * OpenFEC
 * This application programming interface (API) allows you to explore the way candidates and committees fund their campaigns.    The Federal Election Commission (FEC) API is a RESTful web service supporting full-text and field-specific searches on FEC data. [Bulk downloads](https://www.fec.gov/data/advanced/?tab=bulk-data) are available on the current site. Information is tied to the underlying forms by file ID and image ID. Data is updated nightly.    There are a lot of data, and a good place to start is to use search to find interesting candidates and committees. Then, you can use their IDs to find report or line item details with the other endpoints. If you are interested in individual donors, check out contributor information in the `/schedule_a/` endpoints.    <b class=\"body\" id=\"getting_started_head\">Getting started with the openFEC API</b><br>    If you would like to use the FEC's API programmatically, you can sign up for your own API key using our form. Alternatively, you can still try out our API without an API key by using the web interface and using DEMO_KEY. Note that when you use the openFEC API you are subject to the [Terms of Service](https://github.com/fecgov/FEC/blob/master/TERMS-OF-SERVICE.md) and [Acceptable Use policy](https://github.com/fecgov/FEC/blob/master/ACCEPTABLE-USE-POLICY.md).    Signing up for an API key will enable you to place up to 1,000 calls an hour. Each call is limited to 100 results per page. You can email questions, comments or a request to get a key for 7,200 calls an hour (120 calls per minute) to <a href=\"mailto:APIinfo@fec.gov\">APIinfo@fec.gov</a>. You can also ask questions and discuss the data in a community led [group](https://groups.google.com/forum/#!forum/fec-data).    The model definitions and schema are available at [/swagger](/swagger/). This is useful for making wrappers and exploring the data.    A few restrictions limit the way you can use FEC data. For example, you canâ€™t use contributor lists for commercial purposes or to solicit donations. [Learn more here](https://www.fec.gov/updates/sale-or-use-contributor-information/).    [Inspect our source code](https://github.com/fecgov/openFEC). We welcome issues and pull requests!    <p><br></p> <h2 class=\"title\" id=\"signup_head\">Sign up for an API key</h2> <div id=\"apidatagov_signup\">Loading signup form...</div>
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIScheduleB.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIScheduleB::OAIScheduleB(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIScheduleB::OAIScheduleB() {
    this->initializeModel();
}

OAIScheduleB::~OAIScheduleB() {}

void OAIScheduleB::initializeModel() {

    m_amendment_indicator_isSet = false;
    m_amendment_indicator_isValid = false;

    m_amendment_indicator_desc_isSet = false;
    m_amendment_indicator_desc_isValid = false;

    m_back_reference_schedule_id_isSet = false;
    m_back_reference_schedule_id_isValid = false;

    m_back_reference_transaction_id_isSet = false;
    m_back_reference_transaction_id_isValid = false;

    m_beneficiary_committee_name_isSet = false;
    m_beneficiary_committee_name_isValid = false;

    m_candidate_first_name_isSet = false;
    m_candidate_first_name_isValid = false;

    m_candidate_id_isSet = false;
    m_candidate_id_isValid = false;

    m_candidate_last_name_isSet = false;
    m_candidate_last_name_isValid = false;

    m_candidate_middle_name_isSet = false;
    m_candidate_middle_name_isValid = false;

    m_candidate_name_isSet = false;
    m_candidate_name_isValid = false;

    m_candidate_office_isSet = false;
    m_candidate_office_isValid = false;

    m_candidate_office_description_isSet = false;
    m_candidate_office_description_isValid = false;

    m_candidate_office_district_isSet = false;
    m_candidate_office_district_isValid = false;

    m_candidate_office_state_isSet = false;
    m_candidate_office_state_isValid = false;

    m_candidate_office_state_full_isSet = false;
    m_candidate_office_state_full_isValid = false;

    m_candidate_prefix_isSet = false;
    m_candidate_prefix_isValid = false;

    m_candidate_suffix_isSet = false;
    m_candidate_suffix_isValid = false;

    m_category_code_isSet = false;
    m_category_code_isValid = false;

    m_category_code_full_isSet = false;
    m_category_code_full_isValid = false;

    m_comm_dt_isSet = false;
    m_comm_dt_isValid = false;

    m_committee_isSet = false;
    m_committee_isValid = false;

    m_committee_id_isSet = false;
    m_committee_id_isValid = false;

    m_conduit_committee_city_isSet = false;
    m_conduit_committee_city_isValid = false;

    m_conduit_committee_name_isSet = false;
    m_conduit_committee_name_isValid = false;

    m_conduit_committee_state_isSet = false;
    m_conduit_committee_state_isValid = false;

    m_conduit_committee_street1_isSet = false;
    m_conduit_committee_street1_isValid = false;

    m_conduit_committee_street2_isSet = false;
    m_conduit_committee_street2_isValid = false;

    m_conduit_committee_zip_isSet = false;
    m_conduit_committee_zip_isValid = false;

    m_disbursement_amount_isSet = false;
    m_disbursement_amount_isValid = false;

    m_disbursement_date_isSet = false;
    m_disbursement_date_isValid = false;

    m_disbursement_description_isSet = false;
    m_disbursement_description_isValid = false;

    m_disbursement_purpose_category_isSet = false;
    m_disbursement_purpose_category_isValid = false;

    m_disbursement_type_isSet = false;
    m_disbursement_type_isValid = false;

    m_disbursement_type_description_isSet = false;
    m_disbursement_type_description_isValid = false;

    m_election_type_isSet = false;
    m_election_type_isValid = false;

    m_election_type_full_isSet = false;
    m_election_type_full_isValid = false;

    m_entity_type_isSet = false;
    m_entity_type_isValid = false;

    m_entity_type_desc_isSet = false;
    m_entity_type_desc_isValid = false;

    m_fec_election_type_desc_isSet = false;
    m_fec_election_type_desc_isValid = false;

    m_fec_election_year_isSet = false;
    m_fec_election_year_isValid = false;

    m_file_number_isSet = false;
    m_file_number_isValid = false;

    m_filing_form_isSet = false;
    m_filing_form_isValid = false;

    m_image_number_isSet = false;
    m_image_number_isValid = false;

    m_line_number_isSet = false;
    m_line_number_isValid = false;

    m_line_number_label_isSet = false;
    m_line_number_label_isValid = false;

    m_link_id_isSet = false;
    m_link_id_isValid = false;

    m_load_date_isSet = false;
    m_load_date_isValid = false;

    m_memo_code_isSet = false;
    m_memo_code_isValid = false;

    m_memo_code_full_isSet = false;
    m_memo_code_full_isValid = false;

    m_memo_text_isSet = false;
    m_memo_text_isValid = false;

    m_memoed_subtotal_isSet = false;
    m_memoed_subtotal_isValid = false;

    m_national_committee_nonfederal_account_isSet = false;
    m_national_committee_nonfederal_account_isValid = false;

    m_original_sub_id_isSet = false;
    m_original_sub_id_isValid = false;

    m_payee_employer_isSet = false;
    m_payee_employer_isValid = false;

    m_payee_first_name_isSet = false;
    m_payee_first_name_isValid = false;

    m_payee_last_name_isSet = false;
    m_payee_last_name_isValid = false;

    m_payee_middle_name_isSet = false;
    m_payee_middle_name_isValid = false;

    m_payee_occupation_isSet = false;
    m_payee_occupation_isValid = false;

    m_payee_prefix_isSet = false;
    m_payee_prefix_isValid = false;

    m_payee_suffix_isSet = false;
    m_payee_suffix_isValid = false;

    m_pdf_url_isSet = false;
    m_pdf_url_isValid = false;

    m_recipient_city_isSet = false;
    m_recipient_city_isValid = false;

    m_recipient_committee_isSet = false;
    m_recipient_committee_isValid = false;

    m_recipient_committee_id_isSet = false;
    m_recipient_committee_id_isValid = false;

    m_recipient_name_isSet = false;
    m_recipient_name_isValid = false;

    m_recipient_state_isSet = false;
    m_recipient_state_isValid = false;

    m_recipient_zip_isSet = false;
    m_recipient_zip_isValid = false;

    m_ref_disp_excess_flg_isSet = false;
    m_ref_disp_excess_flg_isValid = false;

    m_report_type_isSet = false;
    m_report_type_isValid = false;

    m_report_year_isSet = false;
    m_report_year_isValid = false;

    m_schedule_type_isSet = false;
    m_schedule_type_isValid = false;

    m_schedule_type_full_isSet = false;
    m_schedule_type_full_isValid = false;

    m_semi_annual_bundled_refund_isSet = false;
    m_semi_annual_bundled_refund_isValid = false;

    m_spender_committee_designation_isSet = false;
    m_spender_committee_designation_isValid = false;

    m_spender_committee_org_type_isSet = false;
    m_spender_committee_org_type_isValid = false;

    m_spender_committee_type_isSet = false;
    m_spender_committee_type_isValid = false;

    m_sub_id_isSet = false;
    m_sub_id_isValid = false;

    m_transaction_id_isSet = false;
    m_transaction_id_isValid = false;

    m_two_year_transaction_period_isSet = false;
    m_two_year_transaction_period_isValid = false;

    m_unused_recipient_committee_id_isSet = false;
    m_unused_recipient_committee_id_isValid = false;
}

void OAIScheduleB::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIScheduleB::fromJsonObject(QJsonObject json) {

    m_amendment_indicator_isValid = ::OpenAPI::fromJsonValue(m_amendment_indicator, json[QString("amendment_indicator")]);
    m_amendment_indicator_isSet = !json[QString("amendment_indicator")].isNull() && m_amendment_indicator_isValid;

    m_amendment_indicator_desc_isValid = ::OpenAPI::fromJsonValue(m_amendment_indicator_desc, json[QString("amendment_indicator_desc")]);
    m_amendment_indicator_desc_isSet = !json[QString("amendment_indicator_desc")].isNull() && m_amendment_indicator_desc_isValid;

    m_back_reference_schedule_id_isValid = ::OpenAPI::fromJsonValue(m_back_reference_schedule_id, json[QString("back_reference_schedule_id")]);
    m_back_reference_schedule_id_isSet = !json[QString("back_reference_schedule_id")].isNull() && m_back_reference_schedule_id_isValid;

    m_back_reference_transaction_id_isValid = ::OpenAPI::fromJsonValue(m_back_reference_transaction_id, json[QString("back_reference_transaction_id")]);
    m_back_reference_transaction_id_isSet = !json[QString("back_reference_transaction_id")].isNull() && m_back_reference_transaction_id_isValid;

    m_beneficiary_committee_name_isValid = ::OpenAPI::fromJsonValue(m_beneficiary_committee_name, json[QString("beneficiary_committee_name")]);
    m_beneficiary_committee_name_isSet = !json[QString("beneficiary_committee_name")].isNull() && m_beneficiary_committee_name_isValid;

    m_candidate_first_name_isValid = ::OpenAPI::fromJsonValue(m_candidate_first_name, json[QString("candidate_first_name")]);
    m_candidate_first_name_isSet = !json[QString("candidate_first_name")].isNull() && m_candidate_first_name_isValid;

    m_candidate_id_isValid = ::OpenAPI::fromJsonValue(m_candidate_id, json[QString("candidate_id")]);
    m_candidate_id_isSet = !json[QString("candidate_id")].isNull() && m_candidate_id_isValid;

    m_candidate_last_name_isValid = ::OpenAPI::fromJsonValue(m_candidate_last_name, json[QString("candidate_last_name")]);
    m_candidate_last_name_isSet = !json[QString("candidate_last_name")].isNull() && m_candidate_last_name_isValid;

    m_candidate_middle_name_isValid = ::OpenAPI::fromJsonValue(m_candidate_middle_name, json[QString("candidate_middle_name")]);
    m_candidate_middle_name_isSet = !json[QString("candidate_middle_name")].isNull() && m_candidate_middle_name_isValid;

    m_candidate_name_isValid = ::OpenAPI::fromJsonValue(m_candidate_name, json[QString("candidate_name")]);
    m_candidate_name_isSet = !json[QString("candidate_name")].isNull() && m_candidate_name_isValid;

    m_candidate_office_isValid = ::OpenAPI::fromJsonValue(m_candidate_office, json[QString("candidate_office")]);
    m_candidate_office_isSet = !json[QString("candidate_office")].isNull() && m_candidate_office_isValid;

    m_candidate_office_description_isValid = ::OpenAPI::fromJsonValue(m_candidate_office_description, json[QString("candidate_office_description")]);
    m_candidate_office_description_isSet = !json[QString("candidate_office_description")].isNull() && m_candidate_office_description_isValid;

    m_candidate_office_district_isValid = ::OpenAPI::fromJsonValue(m_candidate_office_district, json[QString("candidate_office_district")]);
    m_candidate_office_district_isSet = !json[QString("candidate_office_district")].isNull() && m_candidate_office_district_isValid;

    m_candidate_office_state_isValid = ::OpenAPI::fromJsonValue(m_candidate_office_state, json[QString("candidate_office_state")]);
    m_candidate_office_state_isSet = !json[QString("candidate_office_state")].isNull() && m_candidate_office_state_isValid;

    m_candidate_office_state_full_isValid = ::OpenAPI::fromJsonValue(m_candidate_office_state_full, json[QString("candidate_office_state_full")]);
    m_candidate_office_state_full_isSet = !json[QString("candidate_office_state_full")].isNull() && m_candidate_office_state_full_isValid;

    m_candidate_prefix_isValid = ::OpenAPI::fromJsonValue(m_candidate_prefix, json[QString("candidate_prefix")]);
    m_candidate_prefix_isSet = !json[QString("candidate_prefix")].isNull() && m_candidate_prefix_isValid;

    m_candidate_suffix_isValid = ::OpenAPI::fromJsonValue(m_candidate_suffix, json[QString("candidate_suffix")]);
    m_candidate_suffix_isSet = !json[QString("candidate_suffix")].isNull() && m_candidate_suffix_isValid;

    m_category_code_isValid = ::OpenAPI::fromJsonValue(m_category_code, json[QString("category_code")]);
    m_category_code_isSet = !json[QString("category_code")].isNull() && m_category_code_isValid;

    m_category_code_full_isValid = ::OpenAPI::fromJsonValue(m_category_code_full, json[QString("category_code_full")]);
    m_category_code_full_isSet = !json[QString("category_code_full")].isNull() && m_category_code_full_isValid;

    m_comm_dt_isValid = ::OpenAPI::fromJsonValue(m_comm_dt, json[QString("comm_dt")]);
    m_comm_dt_isSet = !json[QString("comm_dt")].isNull() && m_comm_dt_isValid;

    m_committee_isValid = ::OpenAPI::fromJsonValue(m_committee, json[QString("committee")]);
    m_committee_isSet = !json[QString("committee")].isNull() && m_committee_isValid;

    m_committee_id_isValid = ::OpenAPI::fromJsonValue(m_committee_id, json[QString("committee_id")]);
    m_committee_id_isSet = !json[QString("committee_id")].isNull() && m_committee_id_isValid;

    m_conduit_committee_city_isValid = ::OpenAPI::fromJsonValue(m_conduit_committee_city, json[QString("conduit_committee_city")]);
    m_conduit_committee_city_isSet = !json[QString("conduit_committee_city")].isNull() && m_conduit_committee_city_isValid;

    m_conduit_committee_name_isValid = ::OpenAPI::fromJsonValue(m_conduit_committee_name, json[QString("conduit_committee_name")]);
    m_conduit_committee_name_isSet = !json[QString("conduit_committee_name")].isNull() && m_conduit_committee_name_isValid;

    m_conduit_committee_state_isValid = ::OpenAPI::fromJsonValue(m_conduit_committee_state, json[QString("conduit_committee_state")]);
    m_conduit_committee_state_isSet = !json[QString("conduit_committee_state")].isNull() && m_conduit_committee_state_isValid;

    m_conduit_committee_street1_isValid = ::OpenAPI::fromJsonValue(m_conduit_committee_street1, json[QString("conduit_committee_street1")]);
    m_conduit_committee_street1_isSet = !json[QString("conduit_committee_street1")].isNull() && m_conduit_committee_street1_isValid;

    m_conduit_committee_street2_isValid = ::OpenAPI::fromJsonValue(m_conduit_committee_street2, json[QString("conduit_committee_street2")]);
    m_conduit_committee_street2_isSet = !json[QString("conduit_committee_street2")].isNull() && m_conduit_committee_street2_isValid;

    m_conduit_committee_zip_isValid = ::OpenAPI::fromJsonValue(m_conduit_committee_zip, json[QString("conduit_committee_zip")]);
    m_conduit_committee_zip_isSet = !json[QString("conduit_committee_zip")].isNull() && m_conduit_committee_zip_isValid;

    m_disbursement_amount_isValid = ::OpenAPI::fromJsonValue(m_disbursement_amount, json[QString("disbursement_amount")]);
    m_disbursement_amount_isSet = !json[QString("disbursement_amount")].isNull() && m_disbursement_amount_isValid;

    m_disbursement_date_isValid = ::OpenAPI::fromJsonValue(m_disbursement_date, json[QString("disbursement_date")]);
    m_disbursement_date_isSet = !json[QString("disbursement_date")].isNull() && m_disbursement_date_isValid;

    m_disbursement_description_isValid = ::OpenAPI::fromJsonValue(m_disbursement_description, json[QString("disbursement_description")]);
    m_disbursement_description_isSet = !json[QString("disbursement_description")].isNull() && m_disbursement_description_isValid;

    m_disbursement_purpose_category_isValid = ::OpenAPI::fromJsonValue(m_disbursement_purpose_category, json[QString("disbursement_purpose_category")]);
    m_disbursement_purpose_category_isSet = !json[QString("disbursement_purpose_category")].isNull() && m_disbursement_purpose_category_isValid;

    m_disbursement_type_isValid = ::OpenAPI::fromJsonValue(m_disbursement_type, json[QString("disbursement_type")]);
    m_disbursement_type_isSet = !json[QString("disbursement_type")].isNull() && m_disbursement_type_isValid;

    m_disbursement_type_description_isValid = ::OpenAPI::fromJsonValue(m_disbursement_type_description, json[QString("disbursement_type_description")]);
    m_disbursement_type_description_isSet = !json[QString("disbursement_type_description")].isNull() && m_disbursement_type_description_isValid;

    m_election_type_isValid = ::OpenAPI::fromJsonValue(m_election_type, json[QString("election_type")]);
    m_election_type_isSet = !json[QString("election_type")].isNull() && m_election_type_isValid;

    m_election_type_full_isValid = ::OpenAPI::fromJsonValue(m_election_type_full, json[QString("election_type_full")]);
    m_election_type_full_isSet = !json[QString("election_type_full")].isNull() && m_election_type_full_isValid;

    m_entity_type_isValid = ::OpenAPI::fromJsonValue(m_entity_type, json[QString("entity_type")]);
    m_entity_type_isSet = !json[QString("entity_type")].isNull() && m_entity_type_isValid;

    m_entity_type_desc_isValid = ::OpenAPI::fromJsonValue(m_entity_type_desc, json[QString("entity_type_desc")]);
    m_entity_type_desc_isSet = !json[QString("entity_type_desc")].isNull() && m_entity_type_desc_isValid;

    m_fec_election_type_desc_isValid = ::OpenAPI::fromJsonValue(m_fec_election_type_desc, json[QString("fec_election_type_desc")]);
    m_fec_election_type_desc_isSet = !json[QString("fec_election_type_desc")].isNull() && m_fec_election_type_desc_isValid;

    m_fec_election_year_isValid = ::OpenAPI::fromJsonValue(m_fec_election_year, json[QString("fec_election_year")]);
    m_fec_election_year_isSet = !json[QString("fec_election_year")].isNull() && m_fec_election_year_isValid;

    m_file_number_isValid = ::OpenAPI::fromJsonValue(m_file_number, json[QString("file_number")]);
    m_file_number_isSet = !json[QString("file_number")].isNull() && m_file_number_isValid;

    m_filing_form_isValid = ::OpenAPI::fromJsonValue(m_filing_form, json[QString("filing_form")]);
    m_filing_form_isSet = !json[QString("filing_form")].isNull() && m_filing_form_isValid;

    m_image_number_isValid = ::OpenAPI::fromJsonValue(m_image_number, json[QString("image_number")]);
    m_image_number_isSet = !json[QString("image_number")].isNull() && m_image_number_isValid;

    m_line_number_isValid = ::OpenAPI::fromJsonValue(m_line_number, json[QString("line_number")]);
    m_line_number_isSet = !json[QString("line_number")].isNull() && m_line_number_isValid;

    m_line_number_label_isValid = ::OpenAPI::fromJsonValue(m_line_number_label, json[QString("line_number_label")]);
    m_line_number_label_isSet = !json[QString("line_number_label")].isNull() && m_line_number_label_isValid;

    m_link_id_isValid = ::OpenAPI::fromJsonValue(m_link_id, json[QString("link_id")]);
    m_link_id_isSet = !json[QString("link_id")].isNull() && m_link_id_isValid;

    m_load_date_isValid = ::OpenAPI::fromJsonValue(m_load_date, json[QString("load_date")]);
    m_load_date_isSet = !json[QString("load_date")].isNull() && m_load_date_isValid;

    m_memo_code_isValid = ::OpenAPI::fromJsonValue(m_memo_code, json[QString("memo_code")]);
    m_memo_code_isSet = !json[QString("memo_code")].isNull() && m_memo_code_isValid;

    m_memo_code_full_isValid = ::OpenAPI::fromJsonValue(m_memo_code_full, json[QString("memo_code_full")]);
    m_memo_code_full_isSet = !json[QString("memo_code_full")].isNull() && m_memo_code_full_isValid;

    m_memo_text_isValid = ::OpenAPI::fromJsonValue(m_memo_text, json[QString("memo_text")]);
    m_memo_text_isSet = !json[QString("memo_text")].isNull() && m_memo_text_isValid;

    m_memoed_subtotal_isValid = ::OpenAPI::fromJsonValue(m_memoed_subtotal, json[QString("memoed_subtotal")]);
    m_memoed_subtotal_isSet = !json[QString("memoed_subtotal")].isNull() && m_memoed_subtotal_isValid;

    m_national_committee_nonfederal_account_isValid = ::OpenAPI::fromJsonValue(m_national_committee_nonfederal_account, json[QString("national_committee_nonfederal_account")]);
    m_national_committee_nonfederal_account_isSet = !json[QString("national_committee_nonfederal_account")].isNull() && m_national_committee_nonfederal_account_isValid;

    m_original_sub_id_isValid = ::OpenAPI::fromJsonValue(m_original_sub_id, json[QString("original_sub_id")]);
    m_original_sub_id_isSet = !json[QString("original_sub_id")].isNull() && m_original_sub_id_isValid;

    m_payee_employer_isValid = ::OpenAPI::fromJsonValue(m_payee_employer, json[QString("payee_employer")]);
    m_payee_employer_isSet = !json[QString("payee_employer")].isNull() && m_payee_employer_isValid;

    m_payee_first_name_isValid = ::OpenAPI::fromJsonValue(m_payee_first_name, json[QString("payee_first_name")]);
    m_payee_first_name_isSet = !json[QString("payee_first_name")].isNull() && m_payee_first_name_isValid;

    m_payee_last_name_isValid = ::OpenAPI::fromJsonValue(m_payee_last_name, json[QString("payee_last_name")]);
    m_payee_last_name_isSet = !json[QString("payee_last_name")].isNull() && m_payee_last_name_isValid;

    m_payee_middle_name_isValid = ::OpenAPI::fromJsonValue(m_payee_middle_name, json[QString("payee_middle_name")]);
    m_payee_middle_name_isSet = !json[QString("payee_middle_name")].isNull() && m_payee_middle_name_isValid;

    m_payee_occupation_isValid = ::OpenAPI::fromJsonValue(m_payee_occupation, json[QString("payee_occupation")]);
    m_payee_occupation_isSet = !json[QString("payee_occupation")].isNull() && m_payee_occupation_isValid;

    m_payee_prefix_isValid = ::OpenAPI::fromJsonValue(m_payee_prefix, json[QString("payee_prefix")]);
    m_payee_prefix_isSet = !json[QString("payee_prefix")].isNull() && m_payee_prefix_isValid;

    m_payee_suffix_isValid = ::OpenAPI::fromJsonValue(m_payee_suffix, json[QString("payee_suffix")]);
    m_payee_suffix_isSet = !json[QString("payee_suffix")].isNull() && m_payee_suffix_isValid;

    m_pdf_url_isValid = ::OpenAPI::fromJsonValue(m_pdf_url, json[QString("pdf_url")]);
    m_pdf_url_isSet = !json[QString("pdf_url")].isNull() && m_pdf_url_isValid;

    m_recipient_city_isValid = ::OpenAPI::fromJsonValue(m_recipient_city, json[QString("recipient_city")]);
    m_recipient_city_isSet = !json[QString("recipient_city")].isNull() && m_recipient_city_isValid;

    m_recipient_committee_isValid = ::OpenAPI::fromJsonValue(m_recipient_committee, json[QString("recipient_committee")]);
    m_recipient_committee_isSet = !json[QString("recipient_committee")].isNull() && m_recipient_committee_isValid;

    m_recipient_committee_id_isValid = ::OpenAPI::fromJsonValue(m_recipient_committee_id, json[QString("recipient_committee_id")]);
    m_recipient_committee_id_isSet = !json[QString("recipient_committee_id")].isNull() && m_recipient_committee_id_isValid;

    m_recipient_name_isValid = ::OpenAPI::fromJsonValue(m_recipient_name, json[QString("recipient_name")]);
    m_recipient_name_isSet = !json[QString("recipient_name")].isNull() && m_recipient_name_isValid;

    m_recipient_state_isValid = ::OpenAPI::fromJsonValue(m_recipient_state, json[QString("recipient_state")]);
    m_recipient_state_isSet = !json[QString("recipient_state")].isNull() && m_recipient_state_isValid;

    m_recipient_zip_isValid = ::OpenAPI::fromJsonValue(m_recipient_zip, json[QString("recipient_zip")]);
    m_recipient_zip_isSet = !json[QString("recipient_zip")].isNull() && m_recipient_zip_isValid;

    m_ref_disp_excess_flg_isValid = ::OpenAPI::fromJsonValue(m_ref_disp_excess_flg, json[QString("ref_disp_excess_flg")]);
    m_ref_disp_excess_flg_isSet = !json[QString("ref_disp_excess_flg")].isNull() && m_ref_disp_excess_flg_isValid;

    m_report_type_isValid = ::OpenAPI::fromJsonValue(m_report_type, json[QString("report_type")]);
    m_report_type_isSet = !json[QString("report_type")].isNull() && m_report_type_isValid;

    m_report_year_isValid = ::OpenAPI::fromJsonValue(m_report_year, json[QString("report_year")]);
    m_report_year_isSet = !json[QString("report_year")].isNull() && m_report_year_isValid;

    m_schedule_type_isValid = ::OpenAPI::fromJsonValue(m_schedule_type, json[QString("schedule_type")]);
    m_schedule_type_isSet = !json[QString("schedule_type")].isNull() && m_schedule_type_isValid;

    m_schedule_type_full_isValid = ::OpenAPI::fromJsonValue(m_schedule_type_full, json[QString("schedule_type_full")]);
    m_schedule_type_full_isSet = !json[QString("schedule_type_full")].isNull() && m_schedule_type_full_isValid;

    m_semi_annual_bundled_refund_isValid = ::OpenAPI::fromJsonValue(m_semi_annual_bundled_refund, json[QString("semi_annual_bundled_refund")]);
    m_semi_annual_bundled_refund_isSet = !json[QString("semi_annual_bundled_refund")].isNull() && m_semi_annual_bundled_refund_isValid;

    m_spender_committee_designation_isValid = ::OpenAPI::fromJsonValue(m_spender_committee_designation, json[QString("spender_committee_designation")]);
    m_spender_committee_designation_isSet = !json[QString("spender_committee_designation")].isNull() && m_spender_committee_designation_isValid;

    m_spender_committee_org_type_isValid = ::OpenAPI::fromJsonValue(m_spender_committee_org_type, json[QString("spender_committee_org_type")]);
    m_spender_committee_org_type_isSet = !json[QString("spender_committee_org_type")].isNull() && m_spender_committee_org_type_isValid;

    m_spender_committee_type_isValid = ::OpenAPI::fromJsonValue(m_spender_committee_type, json[QString("spender_committee_type")]);
    m_spender_committee_type_isSet = !json[QString("spender_committee_type")].isNull() && m_spender_committee_type_isValid;

    m_sub_id_isValid = ::OpenAPI::fromJsonValue(m_sub_id, json[QString("sub_id")]);
    m_sub_id_isSet = !json[QString("sub_id")].isNull() && m_sub_id_isValid;

    m_transaction_id_isValid = ::OpenAPI::fromJsonValue(m_transaction_id, json[QString("transaction_id")]);
    m_transaction_id_isSet = !json[QString("transaction_id")].isNull() && m_transaction_id_isValid;

    m_two_year_transaction_period_isValid = ::OpenAPI::fromJsonValue(m_two_year_transaction_period, json[QString("two_year_transaction_period")]);
    m_two_year_transaction_period_isSet = !json[QString("two_year_transaction_period")].isNull() && m_two_year_transaction_period_isValid;

    m_unused_recipient_committee_id_isValid = ::OpenAPI::fromJsonValue(m_unused_recipient_committee_id, json[QString("unused_recipient_committee_id")]);
    m_unused_recipient_committee_id_isSet = !json[QString("unused_recipient_committee_id")].isNull() && m_unused_recipient_committee_id_isValid;
}

QString OAIScheduleB::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIScheduleB::asJsonObject() const {
    QJsonObject obj;
    if (m_amendment_indicator_isSet) {
        obj.insert(QString("amendment_indicator"), ::OpenAPI::toJsonValue(m_amendment_indicator));
    }
    if (m_amendment_indicator_desc_isSet) {
        obj.insert(QString("amendment_indicator_desc"), ::OpenAPI::toJsonValue(m_amendment_indicator_desc));
    }
    if (m_back_reference_schedule_id_isSet) {
        obj.insert(QString("back_reference_schedule_id"), ::OpenAPI::toJsonValue(m_back_reference_schedule_id));
    }
    if (m_back_reference_transaction_id_isSet) {
        obj.insert(QString("back_reference_transaction_id"), ::OpenAPI::toJsonValue(m_back_reference_transaction_id));
    }
    if (m_beneficiary_committee_name_isSet) {
        obj.insert(QString("beneficiary_committee_name"), ::OpenAPI::toJsonValue(m_beneficiary_committee_name));
    }
    if (m_candidate_first_name_isSet) {
        obj.insert(QString("candidate_first_name"), ::OpenAPI::toJsonValue(m_candidate_first_name));
    }
    if (m_candidate_id_isSet) {
        obj.insert(QString("candidate_id"), ::OpenAPI::toJsonValue(m_candidate_id));
    }
    if (m_candidate_last_name_isSet) {
        obj.insert(QString("candidate_last_name"), ::OpenAPI::toJsonValue(m_candidate_last_name));
    }
    if (m_candidate_middle_name_isSet) {
        obj.insert(QString("candidate_middle_name"), ::OpenAPI::toJsonValue(m_candidate_middle_name));
    }
    if (m_candidate_name_isSet) {
        obj.insert(QString("candidate_name"), ::OpenAPI::toJsonValue(m_candidate_name));
    }
    if (m_candidate_office_isSet) {
        obj.insert(QString("candidate_office"), ::OpenAPI::toJsonValue(m_candidate_office));
    }
    if (m_candidate_office_description_isSet) {
        obj.insert(QString("candidate_office_description"), ::OpenAPI::toJsonValue(m_candidate_office_description));
    }
    if (m_candidate_office_district_isSet) {
        obj.insert(QString("candidate_office_district"), ::OpenAPI::toJsonValue(m_candidate_office_district));
    }
    if (m_candidate_office_state_isSet) {
        obj.insert(QString("candidate_office_state"), ::OpenAPI::toJsonValue(m_candidate_office_state));
    }
    if (m_candidate_office_state_full_isSet) {
        obj.insert(QString("candidate_office_state_full"), ::OpenAPI::toJsonValue(m_candidate_office_state_full));
    }
    if (m_candidate_prefix_isSet) {
        obj.insert(QString("candidate_prefix"), ::OpenAPI::toJsonValue(m_candidate_prefix));
    }
    if (m_candidate_suffix_isSet) {
        obj.insert(QString("candidate_suffix"), ::OpenAPI::toJsonValue(m_candidate_suffix));
    }
    if (m_category_code_isSet) {
        obj.insert(QString("category_code"), ::OpenAPI::toJsonValue(m_category_code));
    }
    if (m_category_code_full_isSet) {
        obj.insert(QString("category_code_full"), ::OpenAPI::toJsonValue(m_category_code_full));
    }
    if (m_comm_dt_isSet) {
        obj.insert(QString("comm_dt"), ::OpenAPI::toJsonValue(m_comm_dt));
    }
    if (m_committee.isSet()) {
        obj.insert(QString("committee"), ::OpenAPI::toJsonValue(m_committee));
    }
    if (m_committee_id_isSet) {
        obj.insert(QString("committee_id"), ::OpenAPI::toJsonValue(m_committee_id));
    }
    if (m_conduit_committee_city_isSet) {
        obj.insert(QString("conduit_committee_city"), ::OpenAPI::toJsonValue(m_conduit_committee_city));
    }
    if (m_conduit_committee_name_isSet) {
        obj.insert(QString("conduit_committee_name"), ::OpenAPI::toJsonValue(m_conduit_committee_name));
    }
    if (m_conduit_committee_state_isSet) {
        obj.insert(QString("conduit_committee_state"), ::OpenAPI::toJsonValue(m_conduit_committee_state));
    }
    if (m_conduit_committee_street1_isSet) {
        obj.insert(QString("conduit_committee_street1"), ::OpenAPI::toJsonValue(m_conduit_committee_street1));
    }
    if (m_conduit_committee_street2_isSet) {
        obj.insert(QString("conduit_committee_street2"), ::OpenAPI::toJsonValue(m_conduit_committee_street2));
    }
    if (m_conduit_committee_zip_isSet) {
        obj.insert(QString("conduit_committee_zip"), ::OpenAPI::toJsonValue(m_conduit_committee_zip));
    }
    if (m_disbursement_amount_isSet) {
        obj.insert(QString("disbursement_amount"), ::OpenAPI::toJsonValue(m_disbursement_amount));
    }
    if (m_disbursement_date_isSet) {
        obj.insert(QString("disbursement_date"), ::OpenAPI::toJsonValue(m_disbursement_date));
    }
    if (m_disbursement_description_isSet) {
        obj.insert(QString("disbursement_description"), ::OpenAPI::toJsonValue(m_disbursement_description));
    }
    if (m_disbursement_purpose_category_isSet) {
        obj.insert(QString("disbursement_purpose_category"), ::OpenAPI::toJsonValue(m_disbursement_purpose_category));
    }
    if (m_disbursement_type_isSet) {
        obj.insert(QString("disbursement_type"), ::OpenAPI::toJsonValue(m_disbursement_type));
    }
    if (m_disbursement_type_description_isSet) {
        obj.insert(QString("disbursement_type_description"), ::OpenAPI::toJsonValue(m_disbursement_type_description));
    }
    if (m_election_type_isSet) {
        obj.insert(QString("election_type"), ::OpenAPI::toJsonValue(m_election_type));
    }
    if (m_election_type_full_isSet) {
        obj.insert(QString("election_type_full"), ::OpenAPI::toJsonValue(m_election_type_full));
    }
    if (m_entity_type_isSet) {
        obj.insert(QString("entity_type"), ::OpenAPI::toJsonValue(m_entity_type));
    }
    if (m_entity_type_desc_isSet) {
        obj.insert(QString("entity_type_desc"), ::OpenAPI::toJsonValue(m_entity_type_desc));
    }
    if (m_fec_election_type_desc_isSet) {
        obj.insert(QString("fec_election_type_desc"), ::OpenAPI::toJsonValue(m_fec_election_type_desc));
    }
    if (m_fec_election_year_isSet) {
        obj.insert(QString("fec_election_year"), ::OpenAPI::toJsonValue(m_fec_election_year));
    }
    if (m_file_number_isSet) {
        obj.insert(QString("file_number"), ::OpenAPI::toJsonValue(m_file_number));
    }
    if (m_filing_form_isSet) {
        obj.insert(QString("filing_form"), ::OpenAPI::toJsonValue(m_filing_form));
    }
    if (m_image_number_isSet) {
        obj.insert(QString("image_number"), ::OpenAPI::toJsonValue(m_image_number));
    }
    if (m_line_number_isSet) {
        obj.insert(QString("line_number"), ::OpenAPI::toJsonValue(m_line_number));
    }
    if (m_line_number_label_isSet) {
        obj.insert(QString("line_number_label"), ::OpenAPI::toJsonValue(m_line_number_label));
    }
    if (m_link_id_isSet) {
        obj.insert(QString("link_id"), ::OpenAPI::toJsonValue(m_link_id));
    }
    if (m_load_date_isSet) {
        obj.insert(QString("load_date"), ::OpenAPI::toJsonValue(m_load_date));
    }
    if (m_memo_code_isSet) {
        obj.insert(QString("memo_code"), ::OpenAPI::toJsonValue(m_memo_code));
    }
    if (m_memo_code_full_isSet) {
        obj.insert(QString("memo_code_full"), ::OpenAPI::toJsonValue(m_memo_code_full));
    }
    if (m_memo_text_isSet) {
        obj.insert(QString("memo_text"), ::OpenAPI::toJsonValue(m_memo_text));
    }
    if (m_memoed_subtotal_isSet) {
        obj.insert(QString("memoed_subtotal"), ::OpenAPI::toJsonValue(m_memoed_subtotal));
    }
    if (m_national_committee_nonfederal_account_isSet) {
        obj.insert(QString("national_committee_nonfederal_account"), ::OpenAPI::toJsonValue(m_national_committee_nonfederal_account));
    }
    if (m_original_sub_id_isSet) {
        obj.insert(QString("original_sub_id"), ::OpenAPI::toJsonValue(m_original_sub_id));
    }
    if (m_payee_employer_isSet) {
        obj.insert(QString("payee_employer"), ::OpenAPI::toJsonValue(m_payee_employer));
    }
    if (m_payee_first_name_isSet) {
        obj.insert(QString("payee_first_name"), ::OpenAPI::toJsonValue(m_payee_first_name));
    }
    if (m_payee_last_name_isSet) {
        obj.insert(QString("payee_last_name"), ::OpenAPI::toJsonValue(m_payee_last_name));
    }
    if (m_payee_middle_name_isSet) {
        obj.insert(QString("payee_middle_name"), ::OpenAPI::toJsonValue(m_payee_middle_name));
    }
    if (m_payee_occupation_isSet) {
        obj.insert(QString("payee_occupation"), ::OpenAPI::toJsonValue(m_payee_occupation));
    }
    if (m_payee_prefix_isSet) {
        obj.insert(QString("payee_prefix"), ::OpenAPI::toJsonValue(m_payee_prefix));
    }
    if (m_payee_suffix_isSet) {
        obj.insert(QString("payee_suffix"), ::OpenAPI::toJsonValue(m_payee_suffix));
    }
    if (m_pdf_url_isSet) {
        obj.insert(QString("pdf_url"), ::OpenAPI::toJsonValue(m_pdf_url));
    }
    if (m_recipient_city_isSet) {
        obj.insert(QString("recipient_city"), ::OpenAPI::toJsonValue(m_recipient_city));
    }
    if (m_recipient_committee.isSet()) {
        obj.insert(QString("recipient_committee"), ::OpenAPI::toJsonValue(m_recipient_committee));
    }
    if (m_recipient_committee_id_isSet) {
        obj.insert(QString("recipient_committee_id"), ::OpenAPI::toJsonValue(m_recipient_committee_id));
    }
    if (m_recipient_name_isSet) {
        obj.insert(QString("recipient_name"), ::OpenAPI::toJsonValue(m_recipient_name));
    }
    if (m_recipient_state_isSet) {
        obj.insert(QString("recipient_state"), ::OpenAPI::toJsonValue(m_recipient_state));
    }
    if (m_recipient_zip_isSet) {
        obj.insert(QString("recipient_zip"), ::OpenAPI::toJsonValue(m_recipient_zip));
    }
    if (m_ref_disp_excess_flg_isSet) {
        obj.insert(QString("ref_disp_excess_flg"), ::OpenAPI::toJsonValue(m_ref_disp_excess_flg));
    }
    if (m_report_type_isSet) {
        obj.insert(QString("report_type"), ::OpenAPI::toJsonValue(m_report_type));
    }
    if (m_report_year_isSet) {
        obj.insert(QString("report_year"), ::OpenAPI::toJsonValue(m_report_year));
    }
    if (m_schedule_type_isSet) {
        obj.insert(QString("schedule_type"), ::OpenAPI::toJsonValue(m_schedule_type));
    }
    if (m_schedule_type_full_isSet) {
        obj.insert(QString("schedule_type_full"), ::OpenAPI::toJsonValue(m_schedule_type_full));
    }
    if (m_semi_annual_bundled_refund_isSet) {
        obj.insert(QString("semi_annual_bundled_refund"), ::OpenAPI::toJsonValue(m_semi_annual_bundled_refund));
    }
    if (m_spender_committee_designation_isSet) {
        obj.insert(QString("spender_committee_designation"), ::OpenAPI::toJsonValue(m_spender_committee_designation));
    }
    if (m_spender_committee_org_type_isSet) {
        obj.insert(QString("spender_committee_org_type"), ::OpenAPI::toJsonValue(m_spender_committee_org_type));
    }
    if (m_spender_committee_type_isSet) {
        obj.insert(QString("spender_committee_type"), ::OpenAPI::toJsonValue(m_spender_committee_type));
    }
    if (m_sub_id_isSet) {
        obj.insert(QString("sub_id"), ::OpenAPI::toJsonValue(m_sub_id));
    }
    if (m_transaction_id_isSet) {
        obj.insert(QString("transaction_id"), ::OpenAPI::toJsonValue(m_transaction_id));
    }
    if (m_two_year_transaction_period_isSet) {
        obj.insert(QString("two_year_transaction_period"), ::OpenAPI::toJsonValue(m_two_year_transaction_period));
    }
    if (m_unused_recipient_committee_id_isSet) {
        obj.insert(QString("unused_recipient_committee_id"), ::OpenAPI::toJsonValue(m_unused_recipient_committee_id));
    }
    return obj;
}

QString OAIScheduleB::getAmendmentIndicator() const {
    return m_amendment_indicator;
}
void OAIScheduleB::setAmendmentIndicator(const QString &amendment_indicator) {
    m_amendment_indicator = amendment_indicator;
    m_amendment_indicator_isSet = true;
}

bool OAIScheduleB::is_amendment_indicator_Set() const{
    return m_amendment_indicator_isSet;
}

bool OAIScheduleB::is_amendment_indicator_Valid() const{
    return m_amendment_indicator_isValid;
}

QString OAIScheduleB::getAmendmentIndicatorDesc() const {
    return m_amendment_indicator_desc;
}
void OAIScheduleB::setAmendmentIndicatorDesc(const QString &amendment_indicator_desc) {
    m_amendment_indicator_desc = amendment_indicator_desc;
    m_amendment_indicator_desc_isSet = true;
}

bool OAIScheduleB::is_amendment_indicator_desc_Set() const{
    return m_amendment_indicator_desc_isSet;
}

bool OAIScheduleB::is_amendment_indicator_desc_Valid() const{
    return m_amendment_indicator_desc_isValid;
}

QString OAIScheduleB::getBackReferenceScheduleId() const {
    return m_back_reference_schedule_id;
}
void OAIScheduleB::setBackReferenceScheduleId(const QString &back_reference_schedule_id) {
    m_back_reference_schedule_id = back_reference_schedule_id;
    m_back_reference_schedule_id_isSet = true;
}

bool OAIScheduleB::is_back_reference_schedule_id_Set() const{
    return m_back_reference_schedule_id_isSet;
}

bool OAIScheduleB::is_back_reference_schedule_id_Valid() const{
    return m_back_reference_schedule_id_isValid;
}

QString OAIScheduleB::getBackReferenceTransactionId() const {
    return m_back_reference_transaction_id;
}
void OAIScheduleB::setBackReferenceTransactionId(const QString &back_reference_transaction_id) {
    m_back_reference_transaction_id = back_reference_transaction_id;
    m_back_reference_transaction_id_isSet = true;
}

bool OAIScheduleB::is_back_reference_transaction_id_Set() const{
    return m_back_reference_transaction_id_isSet;
}

bool OAIScheduleB::is_back_reference_transaction_id_Valid() const{
    return m_back_reference_transaction_id_isValid;
}

QString OAIScheduleB::getBeneficiaryCommitteeName() const {
    return m_beneficiary_committee_name;
}
void OAIScheduleB::setBeneficiaryCommitteeName(const QString &beneficiary_committee_name) {
    m_beneficiary_committee_name = beneficiary_committee_name;
    m_beneficiary_committee_name_isSet = true;
}

bool OAIScheduleB::is_beneficiary_committee_name_Set() const{
    return m_beneficiary_committee_name_isSet;
}

bool OAIScheduleB::is_beneficiary_committee_name_Valid() const{
    return m_beneficiary_committee_name_isValid;
}

QString OAIScheduleB::getCandidateFirstName() const {
    return m_candidate_first_name;
}
void OAIScheduleB::setCandidateFirstName(const QString &candidate_first_name) {
    m_candidate_first_name = candidate_first_name;
    m_candidate_first_name_isSet = true;
}

bool OAIScheduleB::is_candidate_first_name_Set() const{
    return m_candidate_first_name_isSet;
}

bool OAIScheduleB::is_candidate_first_name_Valid() const{
    return m_candidate_first_name_isValid;
}

QString OAIScheduleB::getCandidateId() const {
    return m_candidate_id;
}
void OAIScheduleB::setCandidateId(const QString &candidate_id) {
    m_candidate_id = candidate_id;
    m_candidate_id_isSet = true;
}

bool OAIScheduleB::is_candidate_id_Set() const{
    return m_candidate_id_isSet;
}

bool OAIScheduleB::is_candidate_id_Valid() const{
    return m_candidate_id_isValid;
}

QString OAIScheduleB::getCandidateLastName() const {
    return m_candidate_last_name;
}
void OAIScheduleB::setCandidateLastName(const QString &candidate_last_name) {
    m_candidate_last_name = candidate_last_name;
    m_candidate_last_name_isSet = true;
}

bool OAIScheduleB::is_candidate_last_name_Set() const{
    return m_candidate_last_name_isSet;
}

bool OAIScheduleB::is_candidate_last_name_Valid() const{
    return m_candidate_last_name_isValid;
}

QString OAIScheduleB::getCandidateMiddleName() const {
    return m_candidate_middle_name;
}
void OAIScheduleB::setCandidateMiddleName(const QString &candidate_middle_name) {
    m_candidate_middle_name = candidate_middle_name;
    m_candidate_middle_name_isSet = true;
}

bool OAIScheduleB::is_candidate_middle_name_Set() const{
    return m_candidate_middle_name_isSet;
}

bool OAIScheduleB::is_candidate_middle_name_Valid() const{
    return m_candidate_middle_name_isValid;
}

QString OAIScheduleB::getCandidateName() const {
    return m_candidate_name;
}
void OAIScheduleB::setCandidateName(const QString &candidate_name) {
    m_candidate_name = candidate_name;
    m_candidate_name_isSet = true;
}

bool OAIScheduleB::is_candidate_name_Set() const{
    return m_candidate_name_isSet;
}

bool OAIScheduleB::is_candidate_name_Valid() const{
    return m_candidate_name_isValid;
}

QString OAIScheduleB::getCandidateOffice() const {
    return m_candidate_office;
}
void OAIScheduleB::setCandidateOffice(const QString &candidate_office) {
    m_candidate_office = candidate_office;
    m_candidate_office_isSet = true;
}

bool OAIScheduleB::is_candidate_office_Set() const{
    return m_candidate_office_isSet;
}

bool OAIScheduleB::is_candidate_office_Valid() const{
    return m_candidate_office_isValid;
}

QString OAIScheduleB::getCandidateOfficeDescription() const {
    return m_candidate_office_description;
}
void OAIScheduleB::setCandidateOfficeDescription(const QString &candidate_office_description) {
    m_candidate_office_description = candidate_office_description;
    m_candidate_office_description_isSet = true;
}

bool OAIScheduleB::is_candidate_office_description_Set() const{
    return m_candidate_office_description_isSet;
}

bool OAIScheduleB::is_candidate_office_description_Valid() const{
    return m_candidate_office_description_isValid;
}

QString OAIScheduleB::getCandidateOfficeDistrict() const {
    return m_candidate_office_district;
}
void OAIScheduleB::setCandidateOfficeDistrict(const QString &candidate_office_district) {
    m_candidate_office_district = candidate_office_district;
    m_candidate_office_district_isSet = true;
}

bool OAIScheduleB::is_candidate_office_district_Set() const{
    return m_candidate_office_district_isSet;
}

bool OAIScheduleB::is_candidate_office_district_Valid() const{
    return m_candidate_office_district_isValid;
}

QString OAIScheduleB::getCandidateOfficeState() const {
    return m_candidate_office_state;
}
void OAIScheduleB::setCandidateOfficeState(const QString &candidate_office_state) {
    m_candidate_office_state = candidate_office_state;
    m_candidate_office_state_isSet = true;
}

bool OAIScheduleB::is_candidate_office_state_Set() const{
    return m_candidate_office_state_isSet;
}

bool OAIScheduleB::is_candidate_office_state_Valid() const{
    return m_candidate_office_state_isValid;
}

QString OAIScheduleB::getCandidateOfficeStateFull() const {
    return m_candidate_office_state_full;
}
void OAIScheduleB::setCandidateOfficeStateFull(const QString &candidate_office_state_full) {
    m_candidate_office_state_full = candidate_office_state_full;
    m_candidate_office_state_full_isSet = true;
}

bool OAIScheduleB::is_candidate_office_state_full_Set() const{
    return m_candidate_office_state_full_isSet;
}

bool OAIScheduleB::is_candidate_office_state_full_Valid() const{
    return m_candidate_office_state_full_isValid;
}

QString OAIScheduleB::getCandidatePrefix() const {
    return m_candidate_prefix;
}
void OAIScheduleB::setCandidatePrefix(const QString &candidate_prefix) {
    m_candidate_prefix = candidate_prefix;
    m_candidate_prefix_isSet = true;
}

bool OAIScheduleB::is_candidate_prefix_Set() const{
    return m_candidate_prefix_isSet;
}

bool OAIScheduleB::is_candidate_prefix_Valid() const{
    return m_candidate_prefix_isValid;
}

QString OAIScheduleB::getCandidateSuffix() const {
    return m_candidate_suffix;
}
void OAIScheduleB::setCandidateSuffix(const QString &candidate_suffix) {
    m_candidate_suffix = candidate_suffix;
    m_candidate_suffix_isSet = true;
}

bool OAIScheduleB::is_candidate_suffix_Set() const{
    return m_candidate_suffix_isSet;
}

bool OAIScheduleB::is_candidate_suffix_Valid() const{
    return m_candidate_suffix_isValid;
}

QString OAIScheduleB::getCategoryCode() const {
    return m_category_code;
}
void OAIScheduleB::setCategoryCode(const QString &category_code) {
    m_category_code = category_code;
    m_category_code_isSet = true;
}

bool OAIScheduleB::is_category_code_Set() const{
    return m_category_code_isSet;
}

bool OAIScheduleB::is_category_code_Valid() const{
    return m_category_code_isValid;
}

QString OAIScheduleB::getCategoryCodeFull() const {
    return m_category_code_full;
}
void OAIScheduleB::setCategoryCodeFull(const QString &category_code_full) {
    m_category_code_full = category_code_full;
    m_category_code_full_isSet = true;
}

bool OAIScheduleB::is_category_code_full_Set() const{
    return m_category_code_full_isSet;
}

bool OAIScheduleB::is_category_code_full_Valid() const{
    return m_category_code_full_isValid;
}

QDate OAIScheduleB::getCommDt() const {
    return m_comm_dt;
}
void OAIScheduleB::setCommDt(const QDate &comm_dt) {
    m_comm_dt = comm_dt;
    m_comm_dt_isSet = true;
}

bool OAIScheduleB::is_comm_dt_Set() const{
    return m_comm_dt_isSet;
}

bool OAIScheduleB::is_comm_dt_Valid() const{
    return m_comm_dt_isValid;
}

OAICommitteeHistory OAIScheduleB::getCommittee() const {
    return m_committee;
}
void OAIScheduleB::setCommittee(const OAICommitteeHistory &committee) {
    m_committee = committee;
    m_committee_isSet = true;
}

bool OAIScheduleB::is_committee_Set() const{
    return m_committee_isSet;
}

bool OAIScheduleB::is_committee_Valid() const{
    return m_committee_isValid;
}

QString OAIScheduleB::getCommitteeId() const {
    return m_committee_id;
}
void OAIScheduleB::setCommitteeId(const QString &committee_id) {
    m_committee_id = committee_id;
    m_committee_id_isSet = true;
}

bool OAIScheduleB::is_committee_id_Set() const{
    return m_committee_id_isSet;
}

bool OAIScheduleB::is_committee_id_Valid() const{
    return m_committee_id_isValid;
}

QString OAIScheduleB::getConduitCommitteeCity() const {
    return m_conduit_committee_city;
}
void OAIScheduleB::setConduitCommitteeCity(const QString &conduit_committee_city) {
    m_conduit_committee_city = conduit_committee_city;
    m_conduit_committee_city_isSet = true;
}

bool OAIScheduleB::is_conduit_committee_city_Set() const{
    return m_conduit_committee_city_isSet;
}

bool OAIScheduleB::is_conduit_committee_city_Valid() const{
    return m_conduit_committee_city_isValid;
}

QString OAIScheduleB::getConduitCommitteeName() const {
    return m_conduit_committee_name;
}
void OAIScheduleB::setConduitCommitteeName(const QString &conduit_committee_name) {
    m_conduit_committee_name = conduit_committee_name;
    m_conduit_committee_name_isSet = true;
}

bool OAIScheduleB::is_conduit_committee_name_Set() const{
    return m_conduit_committee_name_isSet;
}

bool OAIScheduleB::is_conduit_committee_name_Valid() const{
    return m_conduit_committee_name_isValid;
}

QString OAIScheduleB::getConduitCommitteeState() const {
    return m_conduit_committee_state;
}
void OAIScheduleB::setConduitCommitteeState(const QString &conduit_committee_state) {
    m_conduit_committee_state = conduit_committee_state;
    m_conduit_committee_state_isSet = true;
}

bool OAIScheduleB::is_conduit_committee_state_Set() const{
    return m_conduit_committee_state_isSet;
}

bool OAIScheduleB::is_conduit_committee_state_Valid() const{
    return m_conduit_committee_state_isValid;
}

QString OAIScheduleB::getConduitCommitteeStreet1() const {
    return m_conduit_committee_street1;
}
void OAIScheduleB::setConduitCommitteeStreet1(const QString &conduit_committee_street1) {
    m_conduit_committee_street1 = conduit_committee_street1;
    m_conduit_committee_street1_isSet = true;
}

bool OAIScheduleB::is_conduit_committee_street1_Set() const{
    return m_conduit_committee_street1_isSet;
}

bool OAIScheduleB::is_conduit_committee_street1_Valid() const{
    return m_conduit_committee_street1_isValid;
}

QString OAIScheduleB::getConduitCommitteeStreet2() const {
    return m_conduit_committee_street2;
}
void OAIScheduleB::setConduitCommitteeStreet2(const QString &conduit_committee_street2) {
    m_conduit_committee_street2 = conduit_committee_street2;
    m_conduit_committee_street2_isSet = true;
}

bool OAIScheduleB::is_conduit_committee_street2_Set() const{
    return m_conduit_committee_street2_isSet;
}

bool OAIScheduleB::is_conduit_committee_street2_Valid() const{
    return m_conduit_committee_street2_isValid;
}

qint32 OAIScheduleB::getConduitCommitteeZip() const {
    return m_conduit_committee_zip;
}
void OAIScheduleB::setConduitCommitteeZip(const qint32 &conduit_committee_zip) {
    m_conduit_committee_zip = conduit_committee_zip;
    m_conduit_committee_zip_isSet = true;
}

bool OAIScheduleB::is_conduit_committee_zip_Set() const{
    return m_conduit_committee_zip_isSet;
}

bool OAIScheduleB::is_conduit_committee_zip_Valid() const{
    return m_conduit_committee_zip_isValid;
}

double OAIScheduleB::getDisbursementAmount() const {
    return m_disbursement_amount;
}
void OAIScheduleB::setDisbursementAmount(const double &disbursement_amount) {
    m_disbursement_amount = disbursement_amount;
    m_disbursement_amount_isSet = true;
}

bool OAIScheduleB::is_disbursement_amount_Set() const{
    return m_disbursement_amount_isSet;
}

bool OAIScheduleB::is_disbursement_amount_Valid() const{
    return m_disbursement_amount_isValid;
}

QDate OAIScheduleB::getDisbursementDate() const {
    return m_disbursement_date;
}
void OAIScheduleB::setDisbursementDate(const QDate &disbursement_date) {
    m_disbursement_date = disbursement_date;
    m_disbursement_date_isSet = true;
}

bool OAIScheduleB::is_disbursement_date_Set() const{
    return m_disbursement_date_isSet;
}

bool OAIScheduleB::is_disbursement_date_Valid() const{
    return m_disbursement_date_isValid;
}

QString OAIScheduleB::getDisbursementDescription() const {
    return m_disbursement_description;
}
void OAIScheduleB::setDisbursementDescription(const QString &disbursement_description) {
    m_disbursement_description = disbursement_description;
    m_disbursement_description_isSet = true;
}

bool OAIScheduleB::is_disbursement_description_Set() const{
    return m_disbursement_description_isSet;
}

bool OAIScheduleB::is_disbursement_description_Valid() const{
    return m_disbursement_description_isValid;
}

QString OAIScheduleB::getDisbursementPurposeCategory() const {
    return m_disbursement_purpose_category;
}
void OAIScheduleB::setDisbursementPurposeCategory(const QString &disbursement_purpose_category) {
    m_disbursement_purpose_category = disbursement_purpose_category;
    m_disbursement_purpose_category_isSet = true;
}

bool OAIScheduleB::is_disbursement_purpose_category_Set() const{
    return m_disbursement_purpose_category_isSet;
}

bool OAIScheduleB::is_disbursement_purpose_category_Valid() const{
    return m_disbursement_purpose_category_isValid;
}

QString OAIScheduleB::getDisbursementType() const {
    return m_disbursement_type;
}
void OAIScheduleB::setDisbursementType(const QString &disbursement_type) {
    m_disbursement_type = disbursement_type;
    m_disbursement_type_isSet = true;
}

bool OAIScheduleB::is_disbursement_type_Set() const{
    return m_disbursement_type_isSet;
}

bool OAIScheduleB::is_disbursement_type_Valid() const{
    return m_disbursement_type_isValid;
}

QString OAIScheduleB::getDisbursementTypeDescription() const {
    return m_disbursement_type_description;
}
void OAIScheduleB::setDisbursementTypeDescription(const QString &disbursement_type_description) {
    m_disbursement_type_description = disbursement_type_description;
    m_disbursement_type_description_isSet = true;
}

bool OAIScheduleB::is_disbursement_type_description_Set() const{
    return m_disbursement_type_description_isSet;
}

bool OAIScheduleB::is_disbursement_type_description_Valid() const{
    return m_disbursement_type_description_isValid;
}

QString OAIScheduleB::getElectionType() const {
    return m_election_type;
}
void OAIScheduleB::setElectionType(const QString &election_type) {
    m_election_type = election_type;
    m_election_type_isSet = true;
}

bool OAIScheduleB::is_election_type_Set() const{
    return m_election_type_isSet;
}

bool OAIScheduleB::is_election_type_Valid() const{
    return m_election_type_isValid;
}

QString OAIScheduleB::getElectionTypeFull() const {
    return m_election_type_full;
}
void OAIScheduleB::setElectionTypeFull(const QString &election_type_full) {
    m_election_type_full = election_type_full;
    m_election_type_full_isSet = true;
}

bool OAIScheduleB::is_election_type_full_Set() const{
    return m_election_type_full_isSet;
}

bool OAIScheduleB::is_election_type_full_Valid() const{
    return m_election_type_full_isValid;
}

QString OAIScheduleB::getEntityType() const {
    return m_entity_type;
}
void OAIScheduleB::setEntityType(const QString &entity_type) {
    m_entity_type = entity_type;
    m_entity_type_isSet = true;
}

bool OAIScheduleB::is_entity_type_Set() const{
    return m_entity_type_isSet;
}

bool OAIScheduleB::is_entity_type_Valid() const{
    return m_entity_type_isValid;
}

QString OAIScheduleB::getEntityTypeDesc() const {
    return m_entity_type_desc;
}
void OAIScheduleB::setEntityTypeDesc(const QString &entity_type_desc) {
    m_entity_type_desc = entity_type_desc;
    m_entity_type_desc_isSet = true;
}

bool OAIScheduleB::is_entity_type_desc_Set() const{
    return m_entity_type_desc_isSet;
}

bool OAIScheduleB::is_entity_type_desc_Valid() const{
    return m_entity_type_desc_isValid;
}

QString OAIScheduleB::getFecElectionTypeDesc() const {
    return m_fec_election_type_desc;
}
void OAIScheduleB::setFecElectionTypeDesc(const QString &fec_election_type_desc) {
    m_fec_election_type_desc = fec_election_type_desc;
    m_fec_election_type_desc_isSet = true;
}

bool OAIScheduleB::is_fec_election_type_desc_Set() const{
    return m_fec_election_type_desc_isSet;
}

bool OAIScheduleB::is_fec_election_type_desc_Valid() const{
    return m_fec_election_type_desc_isValid;
}

QString OAIScheduleB::getFecElectionYear() const {
    return m_fec_election_year;
}
void OAIScheduleB::setFecElectionYear(const QString &fec_election_year) {
    m_fec_election_year = fec_election_year;
    m_fec_election_year_isSet = true;
}

bool OAIScheduleB::is_fec_election_year_Set() const{
    return m_fec_election_year_isSet;
}

bool OAIScheduleB::is_fec_election_year_Valid() const{
    return m_fec_election_year_isValid;
}

qint32 OAIScheduleB::getFileNumber() const {
    return m_file_number;
}
void OAIScheduleB::setFileNumber(const qint32 &file_number) {
    m_file_number = file_number;
    m_file_number_isSet = true;
}

bool OAIScheduleB::is_file_number_Set() const{
    return m_file_number_isSet;
}

bool OAIScheduleB::is_file_number_Valid() const{
    return m_file_number_isValid;
}

QString OAIScheduleB::getFilingForm() const {
    return m_filing_form;
}
void OAIScheduleB::setFilingForm(const QString &filing_form) {
    m_filing_form = filing_form;
    m_filing_form_isSet = true;
}

bool OAIScheduleB::is_filing_form_Set() const{
    return m_filing_form_isSet;
}

bool OAIScheduleB::is_filing_form_Valid() const{
    return m_filing_form_isValid;
}

QString OAIScheduleB::getImageNumber() const {
    return m_image_number;
}
void OAIScheduleB::setImageNumber(const QString &image_number) {
    m_image_number = image_number;
    m_image_number_isSet = true;
}

bool OAIScheduleB::is_image_number_Set() const{
    return m_image_number_isSet;
}

bool OAIScheduleB::is_image_number_Valid() const{
    return m_image_number_isValid;
}

QString OAIScheduleB::getLineNumber() const {
    return m_line_number;
}
void OAIScheduleB::setLineNumber(const QString &line_number) {
    m_line_number = line_number;
    m_line_number_isSet = true;
}

bool OAIScheduleB::is_line_number_Set() const{
    return m_line_number_isSet;
}

bool OAIScheduleB::is_line_number_Valid() const{
    return m_line_number_isValid;
}

QString OAIScheduleB::getLineNumberLabel() const {
    return m_line_number_label;
}
void OAIScheduleB::setLineNumberLabel(const QString &line_number_label) {
    m_line_number_label = line_number_label;
    m_line_number_label_isSet = true;
}

bool OAIScheduleB::is_line_number_label_Set() const{
    return m_line_number_label_isSet;
}

bool OAIScheduleB::is_line_number_label_Valid() const{
    return m_line_number_label_isValid;
}

qint32 OAIScheduleB::getLinkId() const {
    return m_link_id;
}
void OAIScheduleB::setLinkId(const qint32 &link_id) {
    m_link_id = link_id;
    m_link_id_isSet = true;
}

bool OAIScheduleB::is_link_id_Set() const{
    return m_link_id_isSet;
}

bool OAIScheduleB::is_link_id_Valid() const{
    return m_link_id_isValid;
}

QDateTime OAIScheduleB::getLoadDate() const {
    return m_load_date;
}
void OAIScheduleB::setLoadDate(const QDateTime &load_date) {
    m_load_date = load_date;
    m_load_date_isSet = true;
}

bool OAIScheduleB::is_load_date_Set() const{
    return m_load_date_isSet;
}

bool OAIScheduleB::is_load_date_Valid() const{
    return m_load_date_isValid;
}

QString OAIScheduleB::getMemoCode() const {
    return m_memo_code;
}
void OAIScheduleB::setMemoCode(const QString &memo_code) {
    m_memo_code = memo_code;
    m_memo_code_isSet = true;
}

bool OAIScheduleB::is_memo_code_Set() const{
    return m_memo_code_isSet;
}

bool OAIScheduleB::is_memo_code_Valid() const{
    return m_memo_code_isValid;
}

QString OAIScheduleB::getMemoCodeFull() const {
    return m_memo_code_full;
}
void OAIScheduleB::setMemoCodeFull(const QString &memo_code_full) {
    m_memo_code_full = memo_code_full;
    m_memo_code_full_isSet = true;
}

bool OAIScheduleB::is_memo_code_full_Set() const{
    return m_memo_code_full_isSet;
}

bool OAIScheduleB::is_memo_code_full_Valid() const{
    return m_memo_code_full_isValid;
}

QString OAIScheduleB::getMemoText() const {
    return m_memo_text;
}
void OAIScheduleB::setMemoText(const QString &memo_text) {
    m_memo_text = memo_text;
    m_memo_text_isSet = true;
}

bool OAIScheduleB::is_memo_text_Set() const{
    return m_memo_text_isSet;
}

bool OAIScheduleB::is_memo_text_Valid() const{
    return m_memo_text_isValid;
}

bool OAIScheduleB::isMemoedSubtotal() const {
    return m_memoed_subtotal;
}
void OAIScheduleB::setMemoedSubtotal(const bool &memoed_subtotal) {
    m_memoed_subtotal = memoed_subtotal;
    m_memoed_subtotal_isSet = true;
}

bool OAIScheduleB::is_memoed_subtotal_Set() const{
    return m_memoed_subtotal_isSet;
}

bool OAIScheduleB::is_memoed_subtotal_Valid() const{
    return m_memoed_subtotal_isValid;
}

QString OAIScheduleB::getNationalCommitteeNonfederalAccount() const {
    return m_national_committee_nonfederal_account;
}
void OAIScheduleB::setNationalCommitteeNonfederalAccount(const QString &national_committee_nonfederal_account) {
    m_national_committee_nonfederal_account = national_committee_nonfederal_account;
    m_national_committee_nonfederal_account_isSet = true;
}

bool OAIScheduleB::is_national_committee_nonfederal_account_Set() const{
    return m_national_committee_nonfederal_account_isSet;
}

bool OAIScheduleB::is_national_committee_nonfederal_account_Valid() const{
    return m_national_committee_nonfederal_account_isValid;
}

QString OAIScheduleB::getOriginalSubId() const {
    return m_original_sub_id;
}
void OAIScheduleB::setOriginalSubId(const QString &original_sub_id) {
    m_original_sub_id = original_sub_id;
    m_original_sub_id_isSet = true;
}

bool OAIScheduleB::is_original_sub_id_Set() const{
    return m_original_sub_id_isSet;
}

bool OAIScheduleB::is_original_sub_id_Valid() const{
    return m_original_sub_id_isValid;
}

QString OAIScheduleB::getPayeeEmployer() const {
    return m_payee_employer;
}
void OAIScheduleB::setPayeeEmployer(const QString &payee_employer) {
    m_payee_employer = payee_employer;
    m_payee_employer_isSet = true;
}

bool OAIScheduleB::is_payee_employer_Set() const{
    return m_payee_employer_isSet;
}

bool OAIScheduleB::is_payee_employer_Valid() const{
    return m_payee_employer_isValid;
}

QString OAIScheduleB::getPayeeFirstName() const {
    return m_payee_first_name;
}
void OAIScheduleB::setPayeeFirstName(const QString &payee_first_name) {
    m_payee_first_name = payee_first_name;
    m_payee_first_name_isSet = true;
}

bool OAIScheduleB::is_payee_first_name_Set() const{
    return m_payee_first_name_isSet;
}

bool OAIScheduleB::is_payee_first_name_Valid() const{
    return m_payee_first_name_isValid;
}

QString OAIScheduleB::getPayeeLastName() const {
    return m_payee_last_name;
}
void OAIScheduleB::setPayeeLastName(const QString &payee_last_name) {
    m_payee_last_name = payee_last_name;
    m_payee_last_name_isSet = true;
}

bool OAIScheduleB::is_payee_last_name_Set() const{
    return m_payee_last_name_isSet;
}

bool OAIScheduleB::is_payee_last_name_Valid() const{
    return m_payee_last_name_isValid;
}

QString OAIScheduleB::getPayeeMiddleName() const {
    return m_payee_middle_name;
}
void OAIScheduleB::setPayeeMiddleName(const QString &payee_middle_name) {
    m_payee_middle_name = payee_middle_name;
    m_payee_middle_name_isSet = true;
}

bool OAIScheduleB::is_payee_middle_name_Set() const{
    return m_payee_middle_name_isSet;
}

bool OAIScheduleB::is_payee_middle_name_Valid() const{
    return m_payee_middle_name_isValid;
}

QString OAIScheduleB::getPayeeOccupation() const {
    return m_payee_occupation;
}
void OAIScheduleB::setPayeeOccupation(const QString &payee_occupation) {
    m_payee_occupation = payee_occupation;
    m_payee_occupation_isSet = true;
}

bool OAIScheduleB::is_payee_occupation_Set() const{
    return m_payee_occupation_isSet;
}

bool OAIScheduleB::is_payee_occupation_Valid() const{
    return m_payee_occupation_isValid;
}

QString OAIScheduleB::getPayeePrefix() const {
    return m_payee_prefix;
}
void OAIScheduleB::setPayeePrefix(const QString &payee_prefix) {
    m_payee_prefix = payee_prefix;
    m_payee_prefix_isSet = true;
}

bool OAIScheduleB::is_payee_prefix_Set() const{
    return m_payee_prefix_isSet;
}

bool OAIScheduleB::is_payee_prefix_Valid() const{
    return m_payee_prefix_isValid;
}

QString OAIScheduleB::getPayeeSuffix() const {
    return m_payee_suffix;
}
void OAIScheduleB::setPayeeSuffix(const QString &payee_suffix) {
    m_payee_suffix = payee_suffix;
    m_payee_suffix_isSet = true;
}

bool OAIScheduleB::is_payee_suffix_Set() const{
    return m_payee_suffix_isSet;
}

bool OAIScheduleB::is_payee_suffix_Valid() const{
    return m_payee_suffix_isValid;
}

QString OAIScheduleB::getPdfUrl() const {
    return m_pdf_url;
}
void OAIScheduleB::setPdfUrl(const QString &pdf_url) {
    m_pdf_url = pdf_url;
    m_pdf_url_isSet = true;
}

bool OAIScheduleB::is_pdf_url_Set() const{
    return m_pdf_url_isSet;
}

bool OAIScheduleB::is_pdf_url_Valid() const{
    return m_pdf_url_isValid;
}

QString OAIScheduleB::getRecipientCity() const {
    return m_recipient_city;
}
void OAIScheduleB::setRecipientCity(const QString &recipient_city) {
    m_recipient_city = recipient_city;
    m_recipient_city_isSet = true;
}

bool OAIScheduleB::is_recipient_city_Set() const{
    return m_recipient_city_isSet;
}

bool OAIScheduleB::is_recipient_city_Valid() const{
    return m_recipient_city_isValid;
}

OAICommitteeHistory OAIScheduleB::getRecipientCommittee() const {
    return m_recipient_committee;
}
void OAIScheduleB::setRecipientCommittee(const OAICommitteeHistory &recipient_committee) {
    m_recipient_committee = recipient_committee;
    m_recipient_committee_isSet = true;
}

bool OAIScheduleB::is_recipient_committee_Set() const{
    return m_recipient_committee_isSet;
}

bool OAIScheduleB::is_recipient_committee_Valid() const{
    return m_recipient_committee_isValid;
}

QString OAIScheduleB::getRecipientCommitteeId() const {
    return m_recipient_committee_id;
}
void OAIScheduleB::setRecipientCommitteeId(const QString &recipient_committee_id) {
    m_recipient_committee_id = recipient_committee_id;
    m_recipient_committee_id_isSet = true;
}

bool OAIScheduleB::is_recipient_committee_id_Set() const{
    return m_recipient_committee_id_isSet;
}

bool OAIScheduleB::is_recipient_committee_id_Valid() const{
    return m_recipient_committee_id_isValid;
}

QString OAIScheduleB::getRecipientName() const {
    return m_recipient_name;
}
void OAIScheduleB::setRecipientName(const QString &recipient_name) {
    m_recipient_name = recipient_name;
    m_recipient_name_isSet = true;
}

bool OAIScheduleB::is_recipient_name_Set() const{
    return m_recipient_name_isSet;
}

bool OAIScheduleB::is_recipient_name_Valid() const{
    return m_recipient_name_isValid;
}

QString OAIScheduleB::getRecipientState() const {
    return m_recipient_state;
}
void OAIScheduleB::setRecipientState(const QString &recipient_state) {
    m_recipient_state = recipient_state;
    m_recipient_state_isSet = true;
}

bool OAIScheduleB::is_recipient_state_Set() const{
    return m_recipient_state_isSet;
}

bool OAIScheduleB::is_recipient_state_Valid() const{
    return m_recipient_state_isValid;
}

QString OAIScheduleB::getRecipientZip() const {
    return m_recipient_zip;
}
void OAIScheduleB::setRecipientZip(const QString &recipient_zip) {
    m_recipient_zip = recipient_zip;
    m_recipient_zip_isSet = true;
}

bool OAIScheduleB::is_recipient_zip_Set() const{
    return m_recipient_zip_isSet;
}

bool OAIScheduleB::is_recipient_zip_Valid() const{
    return m_recipient_zip_isValid;
}

QString OAIScheduleB::getRefDispExcessFlg() const {
    return m_ref_disp_excess_flg;
}
void OAIScheduleB::setRefDispExcessFlg(const QString &ref_disp_excess_flg) {
    m_ref_disp_excess_flg = ref_disp_excess_flg;
    m_ref_disp_excess_flg_isSet = true;
}

bool OAIScheduleB::is_ref_disp_excess_flg_Set() const{
    return m_ref_disp_excess_flg_isSet;
}

bool OAIScheduleB::is_ref_disp_excess_flg_Valid() const{
    return m_ref_disp_excess_flg_isValid;
}

QString OAIScheduleB::getReportType() const {
    return m_report_type;
}
void OAIScheduleB::setReportType(const QString &report_type) {
    m_report_type = report_type;
    m_report_type_isSet = true;
}

bool OAIScheduleB::is_report_type_Set() const{
    return m_report_type_isSet;
}

bool OAIScheduleB::is_report_type_Valid() const{
    return m_report_type_isValid;
}

qint32 OAIScheduleB::getReportYear() const {
    return m_report_year;
}
void OAIScheduleB::setReportYear(const qint32 &report_year) {
    m_report_year = report_year;
    m_report_year_isSet = true;
}

bool OAIScheduleB::is_report_year_Set() const{
    return m_report_year_isSet;
}

bool OAIScheduleB::is_report_year_Valid() const{
    return m_report_year_isValid;
}

QString OAIScheduleB::getScheduleType() const {
    return m_schedule_type;
}
void OAIScheduleB::setScheduleType(const QString &schedule_type) {
    m_schedule_type = schedule_type;
    m_schedule_type_isSet = true;
}

bool OAIScheduleB::is_schedule_type_Set() const{
    return m_schedule_type_isSet;
}

bool OAIScheduleB::is_schedule_type_Valid() const{
    return m_schedule_type_isValid;
}

QString OAIScheduleB::getScheduleTypeFull() const {
    return m_schedule_type_full;
}
void OAIScheduleB::setScheduleTypeFull(const QString &schedule_type_full) {
    m_schedule_type_full = schedule_type_full;
    m_schedule_type_full_isSet = true;
}

bool OAIScheduleB::is_schedule_type_full_Set() const{
    return m_schedule_type_full_isSet;
}

bool OAIScheduleB::is_schedule_type_full_Valid() const{
    return m_schedule_type_full_isValid;
}

double OAIScheduleB::getSemiAnnualBundledRefund() const {
    return m_semi_annual_bundled_refund;
}
void OAIScheduleB::setSemiAnnualBundledRefund(const double &semi_annual_bundled_refund) {
    m_semi_annual_bundled_refund = semi_annual_bundled_refund;
    m_semi_annual_bundled_refund_isSet = true;
}

bool OAIScheduleB::is_semi_annual_bundled_refund_Set() const{
    return m_semi_annual_bundled_refund_isSet;
}

bool OAIScheduleB::is_semi_annual_bundled_refund_Valid() const{
    return m_semi_annual_bundled_refund_isValid;
}

QString OAIScheduleB::getSpenderCommitteeDesignation() const {
    return m_spender_committee_designation;
}
void OAIScheduleB::setSpenderCommitteeDesignation(const QString &spender_committee_designation) {
    m_spender_committee_designation = spender_committee_designation;
    m_spender_committee_designation_isSet = true;
}

bool OAIScheduleB::is_spender_committee_designation_Set() const{
    return m_spender_committee_designation_isSet;
}

bool OAIScheduleB::is_spender_committee_designation_Valid() const{
    return m_spender_committee_designation_isValid;
}

QString OAIScheduleB::getSpenderCommitteeOrgType() const {
    return m_spender_committee_org_type;
}
void OAIScheduleB::setSpenderCommitteeOrgType(const QString &spender_committee_org_type) {
    m_spender_committee_org_type = spender_committee_org_type;
    m_spender_committee_org_type_isSet = true;
}

bool OAIScheduleB::is_spender_committee_org_type_Set() const{
    return m_spender_committee_org_type_isSet;
}

bool OAIScheduleB::is_spender_committee_org_type_Valid() const{
    return m_spender_committee_org_type_isValid;
}

QString OAIScheduleB::getSpenderCommitteeType() const {
    return m_spender_committee_type;
}
void OAIScheduleB::setSpenderCommitteeType(const QString &spender_committee_type) {
    m_spender_committee_type = spender_committee_type;
    m_spender_committee_type_isSet = true;
}

bool OAIScheduleB::is_spender_committee_type_Set() const{
    return m_spender_committee_type_isSet;
}

bool OAIScheduleB::is_spender_committee_type_Valid() const{
    return m_spender_committee_type_isValid;
}

QString OAIScheduleB::getSubId() const {
    return m_sub_id;
}
void OAIScheduleB::setSubId(const QString &sub_id) {
    m_sub_id = sub_id;
    m_sub_id_isSet = true;
}

bool OAIScheduleB::is_sub_id_Set() const{
    return m_sub_id_isSet;
}

bool OAIScheduleB::is_sub_id_Valid() const{
    return m_sub_id_isValid;
}

QString OAIScheduleB::getTransactionId() const {
    return m_transaction_id;
}
void OAIScheduleB::setTransactionId(const QString &transaction_id) {
    m_transaction_id = transaction_id;
    m_transaction_id_isSet = true;
}

bool OAIScheduleB::is_transaction_id_Set() const{
    return m_transaction_id_isSet;
}

bool OAIScheduleB::is_transaction_id_Valid() const{
    return m_transaction_id_isValid;
}

qint32 OAIScheduleB::getTwoYearTransactionPeriod() const {
    return m_two_year_transaction_period;
}
void OAIScheduleB::setTwoYearTransactionPeriod(const qint32 &two_year_transaction_period) {
    m_two_year_transaction_period = two_year_transaction_period;
    m_two_year_transaction_period_isSet = true;
}

bool OAIScheduleB::is_two_year_transaction_period_Set() const{
    return m_two_year_transaction_period_isSet;
}

bool OAIScheduleB::is_two_year_transaction_period_Valid() const{
    return m_two_year_transaction_period_isValid;
}

QString OAIScheduleB::getUnusedRecipientCommitteeId() const {
    return m_unused_recipient_committee_id;
}
void OAIScheduleB::setUnusedRecipientCommitteeId(const QString &unused_recipient_committee_id) {
    m_unused_recipient_committee_id = unused_recipient_committee_id;
    m_unused_recipient_committee_id_isSet = true;
}

bool OAIScheduleB::is_unused_recipient_committee_id_Set() const{
    return m_unused_recipient_committee_id_isSet;
}

bool OAIScheduleB::is_unused_recipient_committee_id_Valid() const{
    return m_unused_recipient_committee_id_isValid;
}

bool OAIScheduleB::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_amendment_indicator_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_amendment_indicator_desc_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_back_reference_schedule_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_back_reference_transaction_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_beneficiary_committee_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_candidate_first_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_candidate_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_candidate_last_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_candidate_middle_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_candidate_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_candidate_office_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_candidate_office_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_candidate_office_district_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_candidate_office_state_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_candidate_office_state_full_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_candidate_prefix_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_candidate_suffix_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_category_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_category_code_full_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_comm_dt_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_committee.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_committee_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_conduit_committee_city_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_conduit_committee_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_conduit_committee_state_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_conduit_committee_street1_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_conduit_committee_street2_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_conduit_committee_zip_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_disbursement_amount_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_disbursement_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_disbursement_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_disbursement_purpose_category_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_disbursement_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_disbursement_type_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_election_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_election_type_full_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_entity_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_entity_type_desc_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_fec_election_type_desc_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_fec_election_year_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_file_number_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_filing_form_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_image_number_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_line_number_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_line_number_label_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_link_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_load_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_memo_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_memo_code_full_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_memo_text_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_memoed_subtotal_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_national_committee_nonfederal_account_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_original_sub_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_payee_employer_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_payee_first_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_payee_last_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_payee_middle_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_payee_occupation_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_payee_prefix_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_payee_suffix_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_pdf_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_recipient_city_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_recipient_committee.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_recipient_committee_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_recipient_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_recipient_state_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_recipient_zip_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_ref_disp_excess_flg_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_report_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_report_year_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_schedule_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_schedule_type_full_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_semi_annual_bundled_refund_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_spender_committee_designation_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_spender_committee_org_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_spender_committee_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sub_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_transaction_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_two_year_transaction_period_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_unused_recipient_committee_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIScheduleB::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
