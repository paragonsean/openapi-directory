/**
 * OpenFEC
 * This application programming interface (API) allows you to explore the way candidates and committees fund their campaigns.    The Federal Election Commission (FEC) API is a RESTful web service supporting full-text and field-specific searches on FEC data. [Bulk downloads](https://www.fec.gov/data/advanced/?tab=bulk-data) are available on the current site. Information is tied to the underlying forms by file ID and image ID. Data is updated nightly.    There are a lot of data, and a good place to start is to use search to find interesting candidates and committees. Then, you can use their IDs to find report or line item details with the other endpoints. If you are interested in individual donors, check out contributor information in the `/schedule_a/` endpoints.    <b class=\"body\" id=\"getting_started_head\">Getting started with the openFEC API</b><br>    If you would like to use the FEC's API programmatically, you can sign up for your own API key using our form. Alternatively, you can still try out our API without an API key by using the web interface and using DEMO_KEY. Note that when you use the openFEC API you are subject to the [Terms of Service](https://github.com/fecgov/FEC/blob/master/TERMS-OF-SERVICE.md) and [Acceptable Use policy](https://github.com/fecgov/FEC/blob/master/ACCEPTABLE-USE-POLICY.md).    Signing up for an API key will enable you to place up to 1,000 calls an hour. Each call is limited to 100 results per page. You can email questions, comments or a request to get a key for 7,200 calls an hour (120 calls per minute) to <a href=\"mailto:APIinfo@fec.gov\">APIinfo@fec.gov</a>. You can also ask questions and discuss the data in a community led [group](https://groups.google.com/forum/#!forum/fec-data).    The model definitions and schema are available at [/swagger](/swagger/). This is useful for making wrappers and exploring the data.    A few restrictions limit the way you can use FEC data. For example, you canâ€™t use contributor lists for commercial purposes or to solicit donations. [Learn more here](https://www.fec.gov/updates/sale-or-use-contributor-information/).    [Inspect our source code](https://github.com/fecgov/openFEC). We welcome issues and pull requests!    <p><br></p> <h2 class=\"title\" id=\"signup_head\">Sign up for an API key</h2> <div id=\"apidatagov_signup\">Loading signup form...</div>
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICommitteeHistoryProfile.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICommitteeHistoryProfile::OAICommitteeHistoryProfile(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICommitteeHistoryProfile::OAICommitteeHistoryProfile() {
    this->initializeModel();
}

OAICommitteeHistoryProfile::~OAICommitteeHistoryProfile() {}

void OAICommitteeHistoryProfile::initializeModel() {

    m_affiliated_committee_name_isSet = false;
    m_affiliated_committee_name_isValid = false;

    m_candidate_ids_isSet = false;
    m_candidate_ids_isValid = false;

    m_city_isSet = false;
    m_city_isValid = false;

    m_committee_id_isSet = false;
    m_committee_id_isValid = false;

    m_committee_label_isSet = false;
    m_committee_label_isValid = false;

    m_committee_type_isSet = false;
    m_committee_type_isValid = false;

    m_committee_type_full_isSet = false;
    m_committee_type_full_isValid = false;

    m_convert_to_pac_flag_isSet = false;
    m_convert_to_pac_flag_isValid = false;

    m_cycle_isSet = false;
    m_cycle_isValid = false;

    m_cycles_isSet = false;
    m_cycles_isValid = false;

    m_cycles_has_activity_isSet = false;
    m_cycles_has_activity_isValid = false;

    m_cycles_has_financial_isSet = false;
    m_cycles_has_financial_isValid = false;

    m_designation_isSet = false;
    m_designation_isValid = false;

    m_designation_full_isSet = false;
    m_designation_full_isValid = false;

    m_filing_frequency_isSet = false;
    m_filing_frequency_isValid = false;

    m_first_f1_date_isSet = false;
    m_first_f1_date_isValid = false;

    m_first_file_date_isSet = false;
    m_first_file_date_isValid = false;

    m_former_candidate_election_year_isSet = false;
    m_former_candidate_election_year_isValid = false;

    m_former_candidate_id_isSet = false;
    m_former_candidate_id_isValid = false;

    m_former_candidate_name_isSet = false;
    m_former_candidate_name_isValid = false;

    m_former_committee_name_isSet = false;
    m_former_committee_name_isValid = false;

    m_is_active_isSet = false;
    m_is_active_isValid = false;

    m_jfc_committee_isSet = false;
    m_jfc_committee_isValid = false;

    m_last_cycle_has_activity_isSet = false;
    m_last_cycle_has_activity_isValid = false;

    m_last_cycle_has_financial_isSet = false;
    m_last_cycle_has_financial_isValid = false;

    m_last_f1_date_isSet = false;
    m_last_f1_date_isValid = false;

    m_last_file_date_isSet = false;
    m_last_file_date_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_organization_type_isSet = false;
    m_organization_type_isValid = false;

    m_organization_type_full_isSet = false;
    m_organization_type_full_isValid = false;

    m_party_isSet = false;
    m_party_isValid = false;

    m_party_full_isSet = false;
    m_party_full_isValid = false;

    m_sponsor_candidate_ids_isSet = false;
    m_sponsor_candidate_ids_isValid = false;

    m_state_isSet = false;
    m_state_isValid = false;

    m_state_full_isSet = false;
    m_state_full_isValid = false;

    m_street_1_isSet = false;
    m_street_1_isValid = false;

    m_street_2_isSet = false;
    m_street_2_isValid = false;

    m_treasurer_name_isSet = false;
    m_treasurer_name_isValid = false;

    m_zip_isSet = false;
    m_zip_isValid = false;
}

void OAICommitteeHistoryProfile::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICommitteeHistoryProfile::fromJsonObject(QJsonObject json) {

    m_affiliated_committee_name_isValid = ::OpenAPI::fromJsonValue(m_affiliated_committee_name, json[QString("affiliated_committee_name")]);
    m_affiliated_committee_name_isSet = !json[QString("affiliated_committee_name")].isNull() && m_affiliated_committee_name_isValid;

    m_candidate_ids_isValid = ::OpenAPI::fromJsonValue(m_candidate_ids, json[QString("candidate_ids")]);
    m_candidate_ids_isSet = !json[QString("candidate_ids")].isNull() && m_candidate_ids_isValid;

    m_city_isValid = ::OpenAPI::fromJsonValue(m_city, json[QString("city")]);
    m_city_isSet = !json[QString("city")].isNull() && m_city_isValid;

    m_committee_id_isValid = ::OpenAPI::fromJsonValue(m_committee_id, json[QString("committee_id")]);
    m_committee_id_isSet = !json[QString("committee_id")].isNull() && m_committee_id_isValid;

    m_committee_label_isValid = ::OpenAPI::fromJsonValue(m_committee_label, json[QString("committee_label")]);
    m_committee_label_isSet = !json[QString("committee_label")].isNull() && m_committee_label_isValid;

    m_committee_type_isValid = ::OpenAPI::fromJsonValue(m_committee_type, json[QString("committee_type")]);
    m_committee_type_isSet = !json[QString("committee_type")].isNull() && m_committee_type_isValid;

    m_committee_type_full_isValid = ::OpenAPI::fromJsonValue(m_committee_type_full, json[QString("committee_type_full")]);
    m_committee_type_full_isSet = !json[QString("committee_type_full")].isNull() && m_committee_type_full_isValid;

    m_convert_to_pac_flag_isValid = ::OpenAPI::fromJsonValue(m_convert_to_pac_flag, json[QString("convert_to_pac_flag")]);
    m_convert_to_pac_flag_isSet = !json[QString("convert_to_pac_flag")].isNull() && m_convert_to_pac_flag_isValid;

    m_cycle_isValid = ::OpenAPI::fromJsonValue(m_cycle, json[QString("cycle")]);
    m_cycle_isSet = !json[QString("cycle")].isNull() && m_cycle_isValid;

    m_cycles_isValid = ::OpenAPI::fromJsonValue(m_cycles, json[QString("cycles")]);
    m_cycles_isSet = !json[QString("cycles")].isNull() && m_cycles_isValid;

    m_cycles_has_activity_isValid = ::OpenAPI::fromJsonValue(m_cycles_has_activity, json[QString("cycles_has_activity")]);
    m_cycles_has_activity_isSet = !json[QString("cycles_has_activity")].isNull() && m_cycles_has_activity_isValid;

    m_cycles_has_financial_isValid = ::OpenAPI::fromJsonValue(m_cycles_has_financial, json[QString("cycles_has_financial")]);
    m_cycles_has_financial_isSet = !json[QString("cycles_has_financial")].isNull() && m_cycles_has_financial_isValid;

    m_designation_isValid = ::OpenAPI::fromJsonValue(m_designation, json[QString("designation")]);
    m_designation_isSet = !json[QString("designation")].isNull() && m_designation_isValid;

    m_designation_full_isValid = ::OpenAPI::fromJsonValue(m_designation_full, json[QString("designation_full")]);
    m_designation_full_isSet = !json[QString("designation_full")].isNull() && m_designation_full_isValid;

    m_filing_frequency_isValid = ::OpenAPI::fromJsonValue(m_filing_frequency, json[QString("filing_frequency")]);
    m_filing_frequency_isSet = !json[QString("filing_frequency")].isNull() && m_filing_frequency_isValid;

    m_first_f1_date_isValid = ::OpenAPI::fromJsonValue(m_first_f1_date, json[QString("first_f1_date")]);
    m_first_f1_date_isSet = !json[QString("first_f1_date")].isNull() && m_first_f1_date_isValid;

    m_first_file_date_isValid = ::OpenAPI::fromJsonValue(m_first_file_date, json[QString("first_file_date")]);
    m_first_file_date_isSet = !json[QString("first_file_date")].isNull() && m_first_file_date_isValid;

    m_former_candidate_election_year_isValid = ::OpenAPI::fromJsonValue(m_former_candidate_election_year, json[QString("former_candidate_election_year")]);
    m_former_candidate_election_year_isSet = !json[QString("former_candidate_election_year")].isNull() && m_former_candidate_election_year_isValid;

    m_former_candidate_id_isValid = ::OpenAPI::fromJsonValue(m_former_candidate_id, json[QString("former_candidate_id")]);
    m_former_candidate_id_isSet = !json[QString("former_candidate_id")].isNull() && m_former_candidate_id_isValid;

    m_former_candidate_name_isValid = ::OpenAPI::fromJsonValue(m_former_candidate_name, json[QString("former_candidate_name")]);
    m_former_candidate_name_isSet = !json[QString("former_candidate_name")].isNull() && m_former_candidate_name_isValid;

    m_former_committee_name_isValid = ::OpenAPI::fromJsonValue(m_former_committee_name, json[QString("former_committee_name")]);
    m_former_committee_name_isSet = !json[QString("former_committee_name")].isNull() && m_former_committee_name_isValid;

    m_is_active_isValid = ::OpenAPI::fromJsonValue(m_is_active, json[QString("is_active")]);
    m_is_active_isSet = !json[QString("is_active")].isNull() && m_is_active_isValid;

    m_jfc_committee_isValid = ::OpenAPI::fromJsonValue(m_jfc_committee, json[QString("jfc_committee")]);
    m_jfc_committee_isSet = !json[QString("jfc_committee")].isNull() && m_jfc_committee_isValid;

    m_last_cycle_has_activity_isValid = ::OpenAPI::fromJsonValue(m_last_cycle_has_activity, json[QString("last_cycle_has_activity")]);
    m_last_cycle_has_activity_isSet = !json[QString("last_cycle_has_activity")].isNull() && m_last_cycle_has_activity_isValid;

    m_last_cycle_has_financial_isValid = ::OpenAPI::fromJsonValue(m_last_cycle_has_financial, json[QString("last_cycle_has_financial")]);
    m_last_cycle_has_financial_isSet = !json[QString("last_cycle_has_financial")].isNull() && m_last_cycle_has_financial_isValid;

    m_last_f1_date_isValid = ::OpenAPI::fromJsonValue(m_last_f1_date, json[QString("last_f1_date")]);
    m_last_f1_date_isSet = !json[QString("last_f1_date")].isNull() && m_last_f1_date_isValid;

    m_last_file_date_isValid = ::OpenAPI::fromJsonValue(m_last_file_date, json[QString("last_file_date")]);
    m_last_file_date_isSet = !json[QString("last_file_date")].isNull() && m_last_file_date_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_organization_type_isValid = ::OpenAPI::fromJsonValue(m_organization_type, json[QString("organization_type")]);
    m_organization_type_isSet = !json[QString("organization_type")].isNull() && m_organization_type_isValid;

    m_organization_type_full_isValid = ::OpenAPI::fromJsonValue(m_organization_type_full, json[QString("organization_type_full")]);
    m_organization_type_full_isSet = !json[QString("organization_type_full")].isNull() && m_organization_type_full_isValid;

    m_party_isValid = ::OpenAPI::fromJsonValue(m_party, json[QString("party")]);
    m_party_isSet = !json[QString("party")].isNull() && m_party_isValid;

    m_party_full_isValid = ::OpenAPI::fromJsonValue(m_party_full, json[QString("party_full")]);
    m_party_full_isSet = !json[QString("party_full")].isNull() && m_party_full_isValid;

    m_sponsor_candidate_ids_isValid = ::OpenAPI::fromJsonValue(m_sponsor_candidate_ids, json[QString("sponsor_candidate_ids")]);
    m_sponsor_candidate_ids_isSet = !json[QString("sponsor_candidate_ids")].isNull() && m_sponsor_candidate_ids_isValid;

    m_state_isValid = ::OpenAPI::fromJsonValue(m_state, json[QString("state")]);
    m_state_isSet = !json[QString("state")].isNull() && m_state_isValid;

    m_state_full_isValid = ::OpenAPI::fromJsonValue(m_state_full, json[QString("state_full")]);
    m_state_full_isSet = !json[QString("state_full")].isNull() && m_state_full_isValid;

    m_street_1_isValid = ::OpenAPI::fromJsonValue(m_street_1, json[QString("street_1")]);
    m_street_1_isSet = !json[QString("street_1")].isNull() && m_street_1_isValid;

    m_street_2_isValid = ::OpenAPI::fromJsonValue(m_street_2, json[QString("street_2")]);
    m_street_2_isSet = !json[QString("street_2")].isNull() && m_street_2_isValid;

    m_treasurer_name_isValid = ::OpenAPI::fromJsonValue(m_treasurer_name, json[QString("treasurer_name")]);
    m_treasurer_name_isSet = !json[QString("treasurer_name")].isNull() && m_treasurer_name_isValid;

    m_zip_isValid = ::OpenAPI::fromJsonValue(m_zip, json[QString("zip")]);
    m_zip_isSet = !json[QString("zip")].isNull() && m_zip_isValid;
}

QString OAICommitteeHistoryProfile::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICommitteeHistoryProfile::asJsonObject() const {
    QJsonObject obj;
    if (m_affiliated_committee_name_isSet) {
        obj.insert(QString("affiliated_committee_name"), ::OpenAPI::toJsonValue(m_affiliated_committee_name));
    }
    if (m_candidate_ids.size() > 0) {
        obj.insert(QString("candidate_ids"), ::OpenAPI::toJsonValue(m_candidate_ids));
    }
    if (m_city_isSet) {
        obj.insert(QString("city"), ::OpenAPI::toJsonValue(m_city));
    }
    if (m_committee_id_isSet) {
        obj.insert(QString("committee_id"), ::OpenAPI::toJsonValue(m_committee_id));
    }
    if (m_committee_label_isSet) {
        obj.insert(QString("committee_label"), ::OpenAPI::toJsonValue(m_committee_label));
    }
    if (m_committee_type_isSet) {
        obj.insert(QString("committee_type"), ::OpenAPI::toJsonValue(m_committee_type));
    }
    if (m_committee_type_full_isSet) {
        obj.insert(QString("committee_type_full"), ::OpenAPI::toJsonValue(m_committee_type_full));
    }
    if (m_convert_to_pac_flag_isSet) {
        obj.insert(QString("convert_to_pac_flag"), ::OpenAPI::toJsonValue(m_convert_to_pac_flag));
    }
    if (m_cycle_isSet) {
        obj.insert(QString("cycle"), ::OpenAPI::toJsonValue(m_cycle));
    }
    if (m_cycles.size() > 0) {
        obj.insert(QString("cycles"), ::OpenAPI::toJsonValue(m_cycles));
    }
    if (m_cycles_has_activity.size() > 0) {
        obj.insert(QString("cycles_has_activity"), ::OpenAPI::toJsonValue(m_cycles_has_activity));
    }
    if (m_cycles_has_financial.size() > 0) {
        obj.insert(QString("cycles_has_financial"), ::OpenAPI::toJsonValue(m_cycles_has_financial));
    }
    if (m_designation_isSet) {
        obj.insert(QString("designation"), ::OpenAPI::toJsonValue(m_designation));
    }
    if (m_designation_full_isSet) {
        obj.insert(QString("designation_full"), ::OpenAPI::toJsonValue(m_designation_full));
    }
    if (m_filing_frequency_isSet) {
        obj.insert(QString("filing_frequency"), ::OpenAPI::toJsonValue(m_filing_frequency));
    }
    if (m_first_f1_date_isSet) {
        obj.insert(QString("first_f1_date"), ::OpenAPI::toJsonValue(m_first_f1_date));
    }
    if (m_first_file_date_isSet) {
        obj.insert(QString("first_file_date"), ::OpenAPI::toJsonValue(m_first_file_date));
    }
    if (m_former_candidate_election_year_isSet) {
        obj.insert(QString("former_candidate_election_year"), ::OpenAPI::toJsonValue(m_former_candidate_election_year));
    }
    if (m_former_candidate_id_isSet) {
        obj.insert(QString("former_candidate_id"), ::OpenAPI::toJsonValue(m_former_candidate_id));
    }
    if (m_former_candidate_name_isSet) {
        obj.insert(QString("former_candidate_name"), ::OpenAPI::toJsonValue(m_former_candidate_name));
    }
    if (m_former_committee_name_isSet) {
        obj.insert(QString("former_committee_name"), ::OpenAPI::toJsonValue(m_former_committee_name));
    }
    if (m_is_active_isSet) {
        obj.insert(QString("is_active"), ::OpenAPI::toJsonValue(m_is_active));
    }
    if (m_jfc_committee.size() > 0) {
        obj.insert(QString("jfc_committee"), ::OpenAPI::toJsonValue(m_jfc_committee));
    }
    if (m_last_cycle_has_activity_isSet) {
        obj.insert(QString("last_cycle_has_activity"), ::OpenAPI::toJsonValue(m_last_cycle_has_activity));
    }
    if (m_last_cycle_has_financial_isSet) {
        obj.insert(QString("last_cycle_has_financial"), ::OpenAPI::toJsonValue(m_last_cycle_has_financial));
    }
    if (m_last_f1_date_isSet) {
        obj.insert(QString("last_f1_date"), ::OpenAPI::toJsonValue(m_last_f1_date));
    }
    if (m_last_file_date_isSet) {
        obj.insert(QString("last_file_date"), ::OpenAPI::toJsonValue(m_last_file_date));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_organization_type_isSet) {
        obj.insert(QString("organization_type"), ::OpenAPI::toJsonValue(m_organization_type));
    }
    if (m_organization_type_full_isSet) {
        obj.insert(QString("organization_type_full"), ::OpenAPI::toJsonValue(m_organization_type_full));
    }
    if (m_party_isSet) {
        obj.insert(QString("party"), ::OpenAPI::toJsonValue(m_party));
    }
    if (m_party_full_isSet) {
        obj.insert(QString("party_full"), ::OpenAPI::toJsonValue(m_party_full));
    }
    if (m_sponsor_candidate_ids.size() > 0) {
        obj.insert(QString("sponsor_candidate_ids"), ::OpenAPI::toJsonValue(m_sponsor_candidate_ids));
    }
    if (m_state_isSet) {
        obj.insert(QString("state"), ::OpenAPI::toJsonValue(m_state));
    }
    if (m_state_full_isSet) {
        obj.insert(QString("state_full"), ::OpenAPI::toJsonValue(m_state_full));
    }
    if (m_street_1_isSet) {
        obj.insert(QString("street_1"), ::OpenAPI::toJsonValue(m_street_1));
    }
    if (m_street_2_isSet) {
        obj.insert(QString("street_2"), ::OpenAPI::toJsonValue(m_street_2));
    }
    if (m_treasurer_name_isSet) {
        obj.insert(QString("treasurer_name"), ::OpenAPI::toJsonValue(m_treasurer_name));
    }
    if (m_zip_isSet) {
        obj.insert(QString("zip"), ::OpenAPI::toJsonValue(m_zip));
    }
    return obj;
}

QString OAICommitteeHistoryProfile::getAffiliatedCommitteeName() const {
    return m_affiliated_committee_name;
}
void OAICommitteeHistoryProfile::setAffiliatedCommitteeName(const QString &affiliated_committee_name) {
    m_affiliated_committee_name = affiliated_committee_name;
    m_affiliated_committee_name_isSet = true;
}

bool OAICommitteeHistoryProfile::is_affiliated_committee_name_Set() const{
    return m_affiliated_committee_name_isSet;
}

bool OAICommitteeHistoryProfile::is_affiliated_committee_name_Valid() const{
    return m_affiliated_committee_name_isValid;
}

QList<QString> OAICommitteeHistoryProfile::getCandidateIds() const {
    return m_candidate_ids;
}
void OAICommitteeHistoryProfile::setCandidateIds(const QList<QString> &candidate_ids) {
    m_candidate_ids = candidate_ids;
    m_candidate_ids_isSet = true;
}

bool OAICommitteeHistoryProfile::is_candidate_ids_Set() const{
    return m_candidate_ids_isSet;
}

bool OAICommitteeHistoryProfile::is_candidate_ids_Valid() const{
    return m_candidate_ids_isValid;
}

QString OAICommitteeHistoryProfile::getCity() const {
    return m_city;
}
void OAICommitteeHistoryProfile::setCity(const QString &city) {
    m_city = city;
    m_city_isSet = true;
}

bool OAICommitteeHistoryProfile::is_city_Set() const{
    return m_city_isSet;
}

bool OAICommitteeHistoryProfile::is_city_Valid() const{
    return m_city_isValid;
}

QString OAICommitteeHistoryProfile::getCommitteeId() const {
    return m_committee_id;
}
void OAICommitteeHistoryProfile::setCommitteeId(const QString &committee_id) {
    m_committee_id = committee_id;
    m_committee_id_isSet = true;
}

bool OAICommitteeHistoryProfile::is_committee_id_Set() const{
    return m_committee_id_isSet;
}

bool OAICommitteeHistoryProfile::is_committee_id_Valid() const{
    return m_committee_id_isValid;
}

QString OAICommitteeHistoryProfile::getCommitteeLabel() const {
    return m_committee_label;
}
void OAICommitteeHistoryProfile::setCommitteeLabel(const QString &committee_label) {
    m_committee_label = committee_label;
    m_committee_label_isSet = true;
}

bool OAICommitteeHistoryProfile::is_committee_label_Set() const{
    return m_committee_label_isSet;
}

bool OAICommitteeHistoryProfile::is_committee_label_Valid() const{
    return m_committee_label_isValid;
}

QString OAICommitteeHistoryProfile::getCommitteeType() const {
    return m_committee_type;
}
void OAICommitteeHistoryProfile::setCommitteeType(const QString &committee_type) {
    m_committee_type = committee_type;
    m_committee_type_isSet = true;
}

bool OAICommitteeHistoryProfile::is_committee_type_Set() const{
    return m_committee_type_isSet;
}

bool OAICommitteeHistoryProfile::is_committee_type_Valid() const{
    return m_committee_type_isValid;
}

QString OAICommitteeHistoryProfile::getCommitteeTypeFull() const {
    return m_committee_type_full;
}
void OAICommitteeHistoryProfile::setCommitteeTypeFull(const QString &committee_type_full) {
    m_committee_type_full = committee_type_full;
    m_committee_type_full_isSet = true;
}

bool OAICommitteeHistoryProfile::is_committee_type_full_Set() const{
    return m_committee_type_full_isSet;
}

bool OAICommitteeHistoryProfile::is_committee_type_full_Valid() const{
    return m_committee_type_full_isValid;
}

bool OAICommitteeHistoryProfile::isConvertToPacFlag() const {
    return m_convert_to_pac_flag;
}
void OAICommitteeHistoryProfile::setConvertToPacFlag(const bool &convert_to_pac_flag) {
    m_convert_to_pac_flag = convert_to_pac_flag;
    m_convert_to_pac_flag_isSet = true;
}

bool OAICommitteeHistoryProfile::is_convert_to_pac_flag_Set() const{
    return m_convert_to_pac_flag_isSet;
}

bool OAICommitteeHistoryProfile::is_convert_to_pac_flag_Valid() const{
    return m_convert_to_pac_flag_isValid;
}

qint32 OAICommitteeHistoryProfile::getCycle() const {
    return m_cycle;
}
void OAICommitteeHistoryProfile::setCycle(const qint32 &cycle) {
    m_cycle = cycle;
    m_cycle_isSet = true;
}

bool OAICommitteeHistoryProfile::is_cycle_Set() const{
    return m_cycle_isSet;
}

bool OAICommitteeHistoryProfile::is_cycle_Valid() const{
    return m_cycle_isValid;
}

QList<qint32> OAICommitteeHistoryProfile::getCycles() const {
    return m_cycles;
}
void OAICommitteeHistoryProfile::setCycles(const QList<qint32> &cycles) {
    m_cycles = cycles;
    m_cycles_isSet = true;
}

bool OAICommitteeHistoryProfile::is_cycles_Set() const{
    return m_cycles_isSet;
}

bool OAICommitteeHistoryProfile::is_cycles_Valid() const{
    return m_cycles_isValid;
}

QList<qint32> OAICommitteeHistoryProfile::getCyclesHasActivity() const {
    return m_cycles_has_activity;
}
void OAICommitteeHistoryProfile::setCyclesHasActivity(const QList<qint32> &cycles_has_activity) {
    m_cycles_has_activity = cycles_has_activity;
    m_cycles_has_activity_isSet = true;
}

bool OAICommitteeHistoryProfile::is_cycles_has_activity_Set() const{
    return m_cycles_has_activity_isSet;
}

bool OAICommitteeHistoryProfile::is_cycles_has_activity_Valid() const{
    return m_cycles_has_activity_isValid;
}

QList<qint32> OAICommitteeHistoryProfile::getCyclesHasFinancial() const {
    return m_cycles_has_financial;
}
void OAICommitteeHistoryProfile::setCyclesHasFinancial(const QList<qint32> &cycles_has_financial) {
    m_cycles_has_financial = cycles_has_financial;
    m_cycles_has_financial_isSet = true;
}

bool OAICommitteeHistoryProfile::is_cycles_has_financial_Set() const{
    return m_cycles_has_financial_isSet;
}

bool OAICommitteeHistoryProfile::is_cycles_has_financial_Valid() const{
    return m_cycles_has_financial_isValid;
}

QString OAICommitteeHistoryProfile::getDesignation() const {
    return m_designation;
}
void OAICommitteeHistoryProfile::setDesignation(const QString &designation) {
    m_designation = designation;
    m_designation_isSet = true;
}

bool OAICommitteeHistoryProfile::is_designation_Set() const{
    return m_designation_isSet;
}

bool OAICommitteeHistoryProfile::is_designation_Valid() const{
    return m_designation_isValid;
}

QString OAICommitteeHistoryProfile::getDesignationFull() const {
    return m_designation_full;
}
void OAICommitteeHistoryProfile::setDesignationFull(const QString &designation_full) {
    m_designation_full = designation_full;
    m_designation_full_isSet = true;
}

bool OAICommitteeHistoryProfile::is_designation_full_Set() const{
    return m_designation_full_isSet;
}

bool OAICommitteeHistoryProfile::is_designation_full_Valid() const{
    return m_designation_full_isValid;
}

QString OAICommitteeHistoryProfile::getFilingFrequency() const {
    return m_filing_frequency;
}
void OAICommitteeHistoryProfile::setFilingFrequency(const QString &filing_frequency) {
    m_filing_frequency = filing_frequency;
    m_filing_frequency_isSet = true;
}

bool OAICommitteeHistoryProfile::is_filing_frequency_Set() const{
    return m_filing_frequency_isSet;
}

bool OAICommitteeHistoryProfile::is_filing_frequency_Valid() const{
    return m_filing_frequency_isValid;
}

QDate OAICommitteeHistoryProfile::getFirstF1Date() const {
    return m_first_f1_date;
}
void OAICommitteeHistoryProfile::setFirstF1Date(const QDate &first_f1_date) {
    m_first_f1_date = first_f1_date;
    m_first_f1_date_isSet = true;
}

bool OAICommitteeHistoryProfile::is_first_f1_date_Set() const{
    return m_first_f1_date_isSet;
}

bool OAICommitteeHistoryProfile::is_first_f1_date_Valid() const{
    return m_first_f1_date_isValid;
}

QDate OAICommitteeHistoryProfile::getFirstFileDate() const {
    return m_first_file_date;
}
void OAICommitteeHistoryProfile::setFirstFileDate(const QDate &first_file_date) {
    m_first_file_date = first_file_date;
    m_first_file_date_isSet = true;
}

bool OAICommitteeHistoryProfile::is_first_file_date_Set() const{
    return m_first_file_date_isSet;
}

bool OAICommitteeHistoryProfile::is_first_file_date_Valid() const{
    return m_first_file_date_isValid;
}

qint32 OAICommitteeHistoryProfile::getFormerCandidateElectionYear() const {
    return m_former_candidate_election_year;
}
void OAICommitteeHistoryProfile::setFormerCandidateElectionYear(const qint32 &former_candidate_election_year) {
    m_former_candidate_election_year = former_candidate_election_year;
    m_former_candidate_election_year_isSet = true;
}

bool OAICommitteeHistoryProfile::is_former_candidate_election_year_Set() const{
    return m_former_candidate_election_year_isSet;
}

bool OAICommitteeHistoryProfile::is_former_candidate_election_year_Valid() const{
    return m_former_candidate_election_year_isValid;
}

QString OAICommitteeHistoryProfile::getFormerCandidateId() const {
    return m_former_candidate_id;
}
void OAICommitteeHistoryProfile::setFormerCandidateId(const QString &former_candidate_id) {
    m_former_candidate_id = former_candidate_id;
    m_former_candidate_id_isSet = true;
}

bool OAICommitteeHistoryProfile::is_former_candidate_id_Set() const{
    return m_former_candidate_id_isSet;
}

bool OAICommitteeHistoryProfile::is_former_candidate_id_Valid() const{
    return m_former_candidate_id_isValid;
}

QString OAICommitteeHistoryProfile::getFormerCandidateName() const {
    return m_former_candidate_name;
}
void OAICommitteeHistoryProfile::setFormerCandidateName(const QString &former_candidate_name) {
    m_former_candidate_name = former_candidate_name;
    m_former_candidate_name_isSet = true;
}

bool OAICommitteeHistoryProfile::is_former_candidate_name_Set() const{
    return m_former_candidate_name_isSet;
}

bool OAICommitteeHistoryProfile::is_former_candidate_name_Valid() const{
    return m_former_candidate_name_isValid;
}

QString OAICommitteeHistoryProfile::getFormerCommitteeName() const {
    return m_former_committee_name;
}
void OAICommitteeHistoryProfile::setFormerCommitteeName(const QString &former_committee_name) {
    m_former_committee_name = former_committee_name;
    m_former_committee_name_isSet = true;
}

bool OAICommitteeHistoryProfile::is_former_committee_name_Set() const{
    return m_former_committee_name_isSet;
}

bool OAICommitteeHistoryProfile::is_former_committee_name_Valid() const{
    return m_former_committee_name_isValid;
}

bool OAICommitteeHistoryProfile::isIsActive() const {
    return m_is_active;
}
void OAICommitteeHistoryProfile::setIsActive(const bool &is_active) {
    m_is_active = is_active;
    m_is_active_isSet = true;
}

bool OAICommitteeHistoryProfile::is_is_active_Set() const{
    return m_is_active_isSet;
}

bool OAICommitteeHistoryProfile::is_is_active_Valid() const{
    return m_is_active_isValid;
}

QList<OAICommitteeDetail_jfc_committee_inner> OAICommitteeHistoryProfile::getJfcCommittee() const {
    return m_jfc_committee;
}
void OAICommitteeHistoryProfile::setJfcCommittee(const QList<OAICommitteeDetail_jfc_committee_inner> &jfc_committee) {
    m_jfc_committee = jfc_committee;
    m_jfc_committee_isSet = true;
}

bool OAICommitteeHistoryProfile::is_jfc_committee_Set() const{
    return m_jfc_committee_isSet;
}

bool OAICommitteeHistoryProfile::is_jfc_committee_Valid() const{
    return m_jfc_committee_isValid;
}

qint32 OAICommitteeHistoryProfile::getLastCycleHasActivity() const {
    return m_last_cycle_has_activity;
}
void OAICommitteeHistoryProfile::setLastCycleHasActivity(const qint32 &last_cycle_has_activity) {
    m_last_cycle_has_activity = last_cycle_has_activity;
    m_last_cycle_has_activity_isSet = true;
}

bool OAICommitteeHistoryProfile::is_last_cycle_has_activity_Set() const{
    return m_last_cycle_has_activity_isSet;
}

bool OAICommitteeHistoryProfile::is_last_cycle_has_activity_Valid() const{
    return m_last_cycle_has_activity_isValid;
}

qint32 OAICommitteeHistoryProfile::getLastCycleHasFinancial() const {
    return m_last_cycle_has_financial;
}
void OAICommitteeHistoryProfile::setLastCycleHasFinancial(const qint32 &last_cycle_has_financial) {
    m_last_cycle_has_financial = last_cycle_has_financial;
    m_last_cycle_has_financial_isSet = true;
}

bool OAICommitteeHistoryProfile::is_last_cycle_has_financial_Set() const{
    return m_last_cycle_has_financial_isSet;
}

bool OAICommitteeHistoryProfile::is_last_cycle_has_financial_Valid() const{
    return m_last_cycle_has_financial_isValid;
}

QDate OAICommitteeHistoryProfile::getLastF1Date() const {
    return m_last_f1_date;
}
void OAICommitteeHistoryProfile::setLastF1Date(const QDate &last_f1_date) {
    m_last_f1_date = last_f1_date;
    m_last_f1_date_isSet = true;
}

bool OAICommitteeHistoryProfile::is_last_f1_date_Set() const{
    return m_last_f1_date_isSet;
}

bool OAICommitteeHistoryProfile::is_last_f1_date_Valid() const{
    return m_last_f1_date_isValid;
}

QDate OAICommitteeHistoryProfile::getLastFileDate() const {
    return m_last_file_date;
}
void OAICommitteeHistoryProfile::setLastFileDate(const QDate &last_file_date) {
    m_last_file_date = last_file_date;
    m_last_file_date_isSet = true;
}

bool OAICommitteeHistoryProfile::is_last_file_date_Set() const{
    return m_last_file_date_isSet;
}

bool OAICommitteeHistoryProfile::is_last_file_date_Valid() const{
    return m_last_file_date_isValid;
}

QString OAICommitteeHistoryProfile::getName() const {
    return m_name;
}
void OAICommitteeHistoryProfile::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAICommitteeHistoryProfile::is_name_Set() const{
    return m_name_isSet;
}

bool OAICommitteeHistoryProfile::is_name_Valid() const{
    return m_name_isValid;
}

QString OAICommitteeHistoryProfile::getOrganizationType() const {
    return m_organization_type;
}
void OAICommitteeHistoryProfile::setOrganizationType(const QString &organization_type) {
    m_organization_type = organization_type;
    m_organization_type_isSet = true;
}

bool OAICommitteeHistoryProfile::is_organization_type_Set() const{
    return m_organization_type_isSet;
}

bool OAICommitteeHistoryProfile::is_organization_type_Valid() const{
    return m_organization_type_isValid;
}

QString OAICommitteeHistoryProfile::getOrganizationTypeFull() const {
    return m_organization_type_full;
}
void OAICommitteeHistoryProfile::setOrganizationTypeFull(const QString &organization_type_full) {
    m_organization_type_full = organization_type_full;
    m_organization_type_full_isSet = true;
}

bool OAICommitteeHistoryProfile::is_organization_type_full_Set() const{
    return m_organization_type_full_isSet;
}

bool OAICommitteeHistoryProfile::is_organization_type_full_Valid() const{
    return m_organization_type_full_isValid;
}

QString OAICommitteeHistoryProfile::getParty() const {
    return m_party;
}
void OAICommitteeHistoryProfile::setParty(const QString &party) {
    m_party = party;
    m_party_isSet = true;
}

bool OAICommitteeHistoryProfile::is_party_Set() const{
    return m_party_isSet;
}

bool OAICommitteeHistoryProfile::is_party_Valid() const{
    return m_party_isValid;
}

QString OAICommitteeHistoryProfile::getPartyFull() const {
    return m_party_full;
}
void OAICommitteeHistoryProfile::setPartyFull(const QString &party_full) {
    m_party_full = party_full;
    m_party_full_isSet = true;
}

bool OAICommitteeHistoryProfile::is_party_full_Set() const{
    return m_party_full_isSet;
}

bool OAICommitteeHistoryProfile::is_party_full_Valid() const{
    return m_party_full_isValid;
}

QList<QString> OAICommitteeHistoryProfile::getSponsorCandidateIds() const {
    return m_sponsor_candidate_ids;
}
void OAICommitteeHistoryProfile::setSponsorCandidateIds(const QList<QString> &sponsor_candidate_ids) {
    m_sponsor_candidate_ids = sponsor_candidate_ids;
    m_sponsor_candidate_ids_isSet = true;
}

bool OAICommitteeHistoryProfile::is_sponsor_candidate_ids_Set() const{
    return m_sponsor_candidate_ids_isSet;
}

bool OAICommitteeHistoryProfile::is_sponsor_candidate_ids_Valid() const{
    return m_sponsor_candidate_ids_isValid;
}

QString OAICommitteeHistoryProfile::getState() const {
    return m_state;
}
void OAICommitteeHistoryProfile::setState(const QString &state) {
    m_state = state;
    m_state_isSet = true;
}

bool OAICommitteeHistoryProfile::is_state_Set() const{
    return m_state_isSet;
}

bool OAICommitteeHistoryProfile::is_state_Valid() const{
    return m_state_isValid;
}

QString OAICommitteeHistoryProfile::getStateFull() const {
    return m_state_full;
}
void OAICommitteeHistoryProfile::setStateFull(const QString &state_full) {
    m_state_full = state_full;
    m_state_full_isSet = true;
}

bool OAICommitteeHistoryProfile::is_state_full_Set() const{
    return m_state_full_isSet;
}

bool OAICommitteeHistoryProfile::is_state_full_Valid() const{
    return m_state_full_isValid;
}

QString OAICommitteeHistoryProfile::getStreet1() const {
    return m_street_1;
}
void OAICommitteeHistoryProfile::setStreet1(const QString &street_1) {
    m_street_1 = street_1;
    m_street_1_isSet = true;
}

bool OAICommitteeHistoryProfile::is_street_1_Set() const{
    return m_street_1_isSet;
}

bool OAICommitteeHistoryProfile::is_street_1_Valid() const{
    return m_street_1_isValid;
}

QString OAICommitteeHistoryProfile::getStreet2() const {
    return m_street_2;
}
void OAICommitteeHistoryProfile::setStreet2(const QString &street_2) {
    m_street_2 = street_2;
    m_street_2_isSet = true;
}

bool OAICommitteeHistoryProfile::is_street_2_Set() const{
    return m_street_2_isSet;
}

bool OAICommitteeHistoryProfile::is_street_2_Valid() const{
    return m_street_2_isValid;
}

QString OAICommitteeHistoryProfile::getTreasurerName() const {
    return m_treasurer_name;
}
void OAICommitteeHistoryProfile::setTreasurerName(const QString &treasurer_name) {
    m_treasurer_name = treasurer_name;
    m_treasurer_name_isSet = true;
}

bool OAICommitteeHistoryProfile::is_treasurer_name_Set() const{
    return m_treasurer_name_isSet;
}

bool OAICommitteeHistoryProfile::is_treasurer_name_Valid() const{
    return m_treasurer_name_isValid;
}

QString OAICommitteeHistoryProfile::getZip() const {
    return m_zip;
}
void OAICommitteeHistoryProfile::setZip(const QString &zip) {
    m_zip = zip;
    m_zip_isSet = true;
}

bool OAICommitteeHistoryProfile::is_zip_Set() const{
    return m_zip_isSet;
}

bool OAICommitteeHistoryProfile::is_zip_Valid() const{
    return m_zip_isValid;
}

bool OAICommitteeHistoryProfile::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_affiliated_committee_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_candidate_ids.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_city_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_committee_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_committee_label_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_committee_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_committee_type_full_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_convert_to_pac_flag_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_cycle_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_cycles.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_cycles_has_activity.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_cycles_has_financial.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_designation_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_designation_full_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_filing_frequency_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_first_f1_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_first_file_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_former_candidate_election_year_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_former_candidate_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_former_candidate_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_former_committee_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_active_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_jfc_committee.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_cycle_has_activity_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_cycle_has_financial_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_f1_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_file_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_organization_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_organization_type_full_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_party_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_party_full_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sponsor_candidate_ids.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_state_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_state_full_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_street_1_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_street_2_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_treasurer_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_zip_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICommitteeHistoryProfile::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_committee_id_isValid && m_cycle_isValid && true;
}

} // namespace OpenAPI
