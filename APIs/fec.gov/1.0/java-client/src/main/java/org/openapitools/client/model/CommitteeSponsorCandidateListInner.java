/*
 * OpenFEC
 * This application programming interface (API) allows you to explore the way candidates and committees fund their campaigns.    The Federal Election Commission (FEC) API is a RESTful web service supporting full-text and field-specific searches on FEC data. [Bulk downloads](https://www.fec.gov/data/advanced/?tab=bulk-data) are available on the current site. Information is tied to the underlying forms by file ID and image ID. Data is updated nightly.    There are a lot of data, and a good place to start is to use search to find interesting candidates and committees. Then, you can use their IDs to find report or line item details with the other endpoints. If you are interested in individual donors, check out contributor information in the `/schedule_a/` endpoints.    <b class=\"body\" id=\"getting_started_head\">Getting started with the openFEC API</b><br>    If you would like to use the FEC's API programmatically, you can sign up for your own API key using our form. Alternatively, you can still try out our API without an API key by using the web interface and using DEMO_KEY. Note that when you use the openFEC API you are subject to the [Terms of Service](https://github.com/fecgov/FEC/blob/master/TERMS-OF-SERVICE.md) and [Acceptable Use policy](https://github.com/fecgov/FEC/blob/master/ACCEPTABLE-USE-POLICY.md).    Signing up for an API key will enable you to place up to 1,000 calls an hour. Each call is limited to 100 results per page. You can email questions, comments or a request to get a key for 7,200 calls an hour (120 calls per minute) to <a href=\"mailto:APIinfo@fec.gov\">APIinfo@fec.gov</a>. You can also ask questions and discuss the data in a community led [group](https://groups.google.com/forum/#!forum/fec-data).    The model definitions and schema are available at [/swagger](/swagger/). This is useful for making wrappers and exploring the data.    A few restrictions limit the way you can use FEC data. For example, you canâ€™t use contributor lists for commercial purposes or to solicit donations. [Learn more here](https://www.fec.gov/updates/sale-or-use-contributor-information/).    [Inspect our source code](https://github.com/fecgov/openFEC). We welcome issues and pull requests!    <p><br></p> <h2 class=\"title\" id=\"signup_head\">Sign up for an API key</h2> <div id=\"apidatagov_signup\">Loading signup form...</div>
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * CommitteeSponsorCandidateListInner
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:02:12.812386-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class CommitteeSponsorCandidateListInner {
  public static final String SERIALIZED_NAME_SPONSOR_CANDIDATE_ID = "sponsor_candidate_id";
  @SerializedName(SERIALIZED_NAME_SPONSOR_CANDIDATE_ID)
  private String sponsorCandidateId;

  public static final String SERIALIZED_NAME_SPONSOR_CANDIDATE_NAME = "sponsor_candidate_name";
  @SerializedName(SERIALIZED_NAME_SPONSOR_CANDIDATE_NAME)
  private String sponsorCandidateName;

  public CommitteeSponsorCandidateListInner() {
  }

  public CommitteeSponsorCandidateListInner sponsorCandidateId(String sponsorCandidateId) {
    this.sponsorCandidateId = sponsorCandidateId;
    return this;
  }

  /**
   *  A unique identifier assigned to each candidate registered with the FEC. If a person runs for several offices, that person will have separate candidate IDs for each office. First character indicates office - [P]residential, [H]ouse, [S]enate]. Second character is the last digit of the two-year period the ID was created. Third and fourth is the candidate state. Presidential IDs don&#39;t have state. Fifth and sixth is the district when the candidate first ran. This does not change if the candidate/member&#39;s district changes during re-districting. Presidential IDs don&#39;t have districts. The rest is sequence. 
   * @return sponsorCandidateId
   */
  @javax.annotation.Nullable
  public String getSponsorCandidateId() {
    return sponsorCandidateId;
  }

  public void setSponsorCandidateId(String sponsorCandidateId) {
    this.sponsorCandidateId = sponsorCandidateId;
  }


  public CommitteeSponsorCandidateListInner sponsorCandidateName(String sponsorCandidateName) {
    this.sponsorCandidateName = sponsorCandidateName;
    return this;
  }

  /**
   * Name of candidate running for office
   * @return sponsorCandidateName
   */
  @javax.annotation.Nullable
  public String getSponsorCandidateName() {
    return sponsorCandidateName;
  }

  public void setSponsorCandidateName(String sponsorCandidateName) {
    this.sponsorCandidateName = sponsorCandidateName;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CommitteeSponsorCandidateListInner committeeSponsorCandidateListInner = (CommitteeSponsorCandidateListInner) o;
    return Objects.equals(this.sponsorCandidateId, committeeSponsorCandidateListInner.sponsorCandidateId) &&
        Objects.equals(this.sponsorCandidateName, committeeSponsorCandidateListInner.sponsorCandidateName);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(sponsorCandidateId, sponsorCandidateName);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CommitteeSponsorCandidateListInner {\n");
    sb.append("    sponsorCandidateId: ").append(toIndentedString(sponsorCandidateId)).append("\n");
    sb.append("    sponsorCandidateName: ").append(toIndentedString(sponsorCandidateName)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("sponsor_candidate_id");
    openapiFields.add("sponsor_candidate_name");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to CommitteeSponsorCandidateListInner
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!CommitteeSponsorCandidateListInner.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CommitteeSponsorCandidateListInner is not found in the empty JSON string", CommitteeSponsorCandidateListInner.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!CommitteeSponsorCandidateListInner.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CommitteeSponsorCandidateListInner` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("sponsor_candidate_id") != null && !jsonObj.get("sponsor_candidate_id").isJsonNull()) && !jsonObj.get("sponsor_candidate_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `sponsor_candidate_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("sponsor_candidate_id").toString()));
      }
      if ((jsonObj.get("sponsor_candidate_name") != null && !jsonObj.get("sponsor_candidate_name").isJsonNull()) && !jsonObj.get("sponsor_candidate_name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `sponsor_candidate_name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("sponsor_candidate_name").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CommitteeSponsorCandidateListInner.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CommitteeSponsorCandidateListInner' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CommitteeSponsorCandidateListInner> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CommitteeSponsorCandidateListInner.class));

       return (TypeAdapter<T>) new TypeAdapter<CommitteeSponsorCandidateListInner>() {
           @Override
           public void write(JsonWriter out, CommitteeSponsorCandidateListInner value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CommitteeSponsorCandidateListInner read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of CommitteeSponsorCandidateListInner given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of CommitteeSponsorCandidateListInner
   * @throws IOException if the JSON string is invalid with respect to CommitteeSponsorCandidateListInner
   */
  public static CommitteeSponsorCandidateListInner fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CommitteeSponsorCandidateListInner.class);
  }

  /**
   * Convert an instance of CommitteeSponsorCandidateListInner to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

