/*
 * OpenFEC
 * This application programming interface (API) allows you to explore the way candidates and committees fund their campaigns.    The Federal Election Commission (FEC) API is a RESTful web service supporting full-text and field-specific searches on FEC data. [Bulk downloads](https://www.fec.gov/data/advanced/?tab=bulk-data) are available on the current site. Information is tied to the underlying forms by file ID and image ID. Data is updated nightly.    There are a lot of data, and a good place to start is to use search to find interesting candidates and committees. Then, you can use their IDs to find report or line item details with the other endpoints. If you are interested in individual donors, check out contributor information in the `/schedule_a/` endpoints.    <b class=\"body\" id=\"getting_started_head\">Getting started with the openFEC API</b><br>    If you would like to use the FEC's API programmatically, you can sign up for your own API key using our form. Alternatively, you can still try out our API without an API key by using the web interface and using DEMO_KEY. Note that when you use the openFEC API you are subject to the [Terms of Service](https://github.com/fecgov/FEC/blob/master/TERMS-OF-SERVICE.md) and [Acceptable Use policy](https://github.com/fecgov/FEC/blob/master/ACCEPTABLE-USE-POLICY.md).    Signing up for an API key will enable you to place up to 1,000 calls an hour. Each call is limited to 100 results per page. You can email questions, comments or a request to get a key for 7,200 calls an hour (120 calls per minute) to <a href=\"mailto:APIinfo@fec.gov\">APIinfo@fec.gov</a>. You can also ask questions and discuss the data in a community led [group](https://groups.google.com/forum/#!forum/fec-data).    The model definitions and schema are available at [/swagger](/swagger/). This is useful for making wrappers and exploring the data.    A few restrictions limit the way you can use FEC data. For example, you canâ€™t use contributor lists for commercial purposes or to solicit donations. [Learn more here](https://www.fec.gov/updates/sale-or-use-contributor-information/).    [Inspect our source code](https://github.com/fecgov/openFEC). We welcome issues and pull requests!    <p><br></p> <h2 class=\"title\" id=\"signup_head\">Sign up for an API key</h2> <div id=\"apidatagov_signup\">Loading signup form...</div>
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.AuditCandidateSearchList;
import org.openapitools.client.model.AuditCasePage;
import org.openapitools.client.model.AuditCategoryPage;
import org.openapitools.client.model.AuditCommitteeSearchList;
import org.openapitools.client.model.AuditPrimaryCategoryPage;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class AuditApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public AuditApi() {
        this(Configuration.getDefaultApiClient());
    }

    public AuditApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for auditCaseGet
     * @param apiKey  API key for https://api.data.gov. Get one at https://api.data.gov/signup.  (required)
     * @param maxElectionCycle  Filter records to only those that are applicable to a given two-year period. This cycle follows the traditional House election cycle and subdivides the presidential and Senate elections into comparable two-year blocks. The cycle begins with an odd year and is named for its ending, even year.  (optional)
     * @param q The name of the committee. If a committee changes its name,     the most recent name will be shown. Committee names are not unique. Use committee_id     for looking up records. (optional)
     * @param subCategoryId  The finding id of an audit. Finding are a category of broader issues. Each category has an unique ID.  (optional, default to all)
     * @param cycle  Filter records to only those that are applicable to a given two-year period. This cycle follows the traditional House election cycle and subdivides the presidential and Senate elections into comparable two-year blocks. The cycle begins with an odd year and is named for its ending, even year.  (optional)
     * @param sortNullOnly Toggle that filters out all rows having sort column that is non-null (optional, default to false)
     * @param auditCaseId  Primary/foreign key for audit tables  (optional)
     * @param sortHideNull Hide null values on sorted column(s). (optional, default to false)
     * @param candidateId  A unique identifier assigned to each candidate registered with the FEC. If a person runs for several offices, that person will have separate candidate IDs for each office. First character indicates office - [P]residential, [H]ouse, [S]enate]. Second character is the last digit of the two-year period the ID was created. Third and fourth is the candidate state. Presidential IDs don&#39;t have state. Fifth and sixth is the district when the candidate first ran. This does not change if the candidate/member&#39;s district changes during re-districting. Presidential IDs don&#39;t have districts. The rest is sequence.  (optional)
     * @param qq Name of candidate running for office (optional)
     * @param perPage The number of results returned per page. Defaults to 20. (optional, default to 20)
     * @param sort  Provide a field to sort by. Use &#x60;-&#x60; for descending order. ex: &#x60;-case_no&#x60;  (optional)
     * @param minElectionCycle  Filter records to only those that are applicable to a given two-year period. This cycle follows the traditional House election cycle and subdivides the presidential and Senate elections into comparable two-year blocks. The cycle begins with an odd year and is named for its ending, even year.  (optional)
     * @param auditId  The audit issue. Each subcategory has an unique ID  (optional)
     * @param committeeDesignation Type of committee:         - H or S - Congressional         - P - Presidential         - X or Y or Z - Party         - N or Q - PAC         - I - Independent expenditure         - O - Super PAC   (optional)
     * @param committeeType The one-letter type code of the organization:         - C communication cost         - D delegate         - E electioneering communication         - H House         - I independent expenditure filer (not a committee)         - N PAC - nonqualified         - O independent expenditure-only (super PACs)         - P presidential         - Q PAC - qualified         - S Senate         - U single candidate independent expenditure         - V PAC with non-contribution account, nonqualified         - W PAC with non-contribution account, qualified         - X party, nonqualified         - Y party, qualified         - Z national party non-federal account  (optional)
     * @param sortNullsLast Toggle that sorts null values last (optional, default to false)
     * @param page For paginating through results, starting at page 1 (optional, default to 1)
     * @param committeeId  A unique identifier assigned to each committee or filer registered with the FEC. In general committee id&#39;s begin with the letter C which is followed by eight digits.  (optional)
     * @param primaryCategoryId  Audit category ID (table PK)  (optional, default to all)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call auditCaseGetCall(String apiKey, Integer maxElectionCycle, List<String> q, String subCategoryId, List<Integer> cycle, Boolean sortNullOnly, List<String> auditCaseId, Boolean sortHideNull, List<String> candidateId, List<String> qq, Integer perPage, List<String> sort, Integer minElectionCycle, List<Integer> auditId, String committeeDesignation, List<String> committeeType, Boolean sortNullsLast, Integer page, List<String> committeeId, String primaryCategoryId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/audit-case/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (maxElectionCycle != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("max_election_cycle", maxElectionCycle));
        }

        if (q != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "q", q));
        }

        if (subCategoryId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sub_category_id", subCategoryId));
        }

        if (cycle != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "cycle", cycle));
        }

        if (sortNullOnly != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort_null_only", sortNullOnly));
        }

        if (auditCaseId != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "audit_case_id", auditCaseId));
        }

        if (sortHideNull != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort_hide_null", sortHideNull));
        }

        if (candidateId != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "candidate_id", candidateId));
        }

        if (qq != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "qq", qq));
        }

        if (perPage != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("per_page", perPage));
        }

        if (sort != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "sort", sort));
        }

        if (minElectionCycle != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("min_election_cycle", minElectionCycle));
        }

        if (auditId != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "audit_id", auditId));
        }

        if (committeeDesignation != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("committee_designation", committeeDesignation));
        }

        if (apiKey != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api_key", apiKey));
        }

        if (committeeType != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "committee_type", committeeType));
        }

        if (sortNullsLast != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort_nulls_last", sortNullsLast));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (committeeId != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "committee_id", committeeId));
        }

        if (primaryCategoryId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("primary_category_id", primaryCategoryId));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKeyHeaderAuth", "ApiKeyQueryAuth", "apiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call auditCaseGetValidateBeforeCall(String apiKey, Integer maxElectionCycle, List<String> q, String subCategoryId, List<Integer> cycle, Boolean sortNullOnly, List<String> auditCaseId, Boolean sortHideNull, List<String> candidateId, List<String> qq, Integer perPage, List<String> sort, Integer minElectionCycle, List<Integer> auditId, String committeeDesignation, List<String> committeeType, Boolean sortNullsLast, Integer page, List<String> committeeId, String primaryCategoryId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'apiKey' is set
        if (apiKey == null) {
            throw new ApiException("Missing the required parameter 'apiKey' when calling auditCaseGet(Async)");
        }

        return auditCaseGetCall(apiKey, maxElectionCycle, q, subCategoryId, cycle, sortNullOnly, auditCaseId, sortHideNull, candidateId, qq, perPage, sort, minElectionCycle, auditId, committeeDesignation, committeeType, sortNullsLast, page, committeeId, primaryCategoryId, _callback);

    }

    /**
     * 
     *  This endpoint contains Final Audit Reports approved by the Commission since inception. The search can be based on information about the audited committee (Name, FEC ID Number, Type,  Election Cycle) or the issues covered in the report. 
     * @param apiKey  API key for https://api.data.gov. Get one at https://api.data.gov/signup.  (required)
     * @param maxElectionCycle  Filter records to only those that are applicable to a given two-year period. This cycle follows the traditional House election cycle and subdivides the presidential and Senate elections into comparable two-year blocks. The cycle begins with an odd year and is named for its ending, even year.  (optional)
     * @param q The name of the committee. If a committee changes its name,     the most recent name will be shown. Committee names are not unique. Use committee_id     for looking up records. (optional)
     * @param subCategoryId  The finding id of an audit. Finding are a category of broader issues. Each category has an unique ID.  (optional, default to all)
     * @param cycle  Filter records to only those that are applicable to a given two-year period. This cycle follows the traditional House election cycle and subdivides the presidential and Senate elections into comparable two-year blocks. The cycle begins with an odd year and is named for its ending, even year.  (optional)
     * @param sortNullOnly Toggle that filters out all rows having sort column that is non-null (optional, default to false)
     * @param auditCaseId  Primary/foreign key for audit tables  (optional)
     * @param sortHideNull Hide null values on sorted column(s). (optional, default to false)
     * @param candidateId  A unique identifier assigned to each candidate registered with the FEC. If a person runs for several offices, that person will have separate candidate IDs for each office. First character indicates office - [P]residential, [H]ouse, [S]enate]. Second character is the last digit of the two-year period the ID was created. Third and fourth is the candidate state. Presidential IDs don&#39;t have state. Fifth and sixth is the district when the candidate first ran. This does not change if the candidate/member&#39;s district changes during re-districting. Presidential IDs don&#39;t have districts. The rest is sequence.  (optional)
     * @param qq Name of candidate running for office (optional)
     * @param perPage The number of results returned per page. Defaults to 20. (optional, default to 20)
     * @param sort  Provide a field to sort by. Use &#x60;-&#x60; for descending order. ex: &#x60;-case_no&#x60;  (optional)
     * @param minElectionCycle  Filter records to only those that are applicable to a given two-year period. This cycle follows the traditional House election cycle and subdivides the presidential and Senate elections into comparable two-year blocks. The cycle begins with an odd year and is named for its ending, even year.  (optional)
     * @param auditId  The audit issue. Each subcategory has an unique ID  (optional)
     * @param committeeDesignation Type of committee:         - H or S - Congressional         - P - Presidential         - X or Y or Z - Party         - N or Q - PAC         - I - Independent expenditure         - O - Super PAC   (optional)
     * @param committeeType The one-letter type code of the organization:         - C communication cost         - D delegate         - E electioneering communication         - H House         - I independent expenditure filer (not a committee)         - N PAC - nonqualified         - O independent expenditure-only (super PACs)         - P presidential         - Q PAC - qualified         - S Senate         - U single candidate independent expenditure         - V PAC with non-contribution account, nonqualified         - W PAC with non-contribution account, qualified         - X party, nonqualified         - Y party, qualified         - Z national party non-federal account  (optional)
     * @param sortNullsLast Toggle that sorts null values last (optional, default to false)
     * @param page For paginating through results, starting at page 1 (optional, default to 1)
     * @param committeeId  A unique identifier assigned to each committee or filer registered with the FEC. In general committee id&#39;s begin with the letter C which is followed by eight digits.  (optional)
     * @param primaryCategoryId  Audit category ID (table PK)  (optional, default to all)
     * @return AuditCasePage
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public AuditCasePage auditCaseGet(String apiKey, Integer maxElectionCycle, List<String> q, String subCategoryId, List<Integer> cycle, Boolean sortNullOnly, List<String> auditCaseId, Boolean sortHideNull, List<String> candidateId, List<String> qq, Integer perPage, List<String> sort, Integer minElectionCycle, List<Integer> auditId, String committeeDesignation, List<String> committeeType, Boolean sortNullsLast, Integer page, List<String> committeeId, String primaryCategoryId) throws ApiException {
        ApiResponse<AuditCasePage> localVarResp = auditCaseGetWithHttpInfo(apiKey, maxElectionCycle, q, subCategoryId, cycle, sortNullOnly, auditCaseId, sortHideNull, candidateId, qq, perPage, sort, minElectionCycle, auditId, committeeDesignation, committeeType, sortNullsLast, page, committeeId, primaryCategoryId);
        return localVarResp.getData();
    }

    /**
     * 
     *  This endpoint contains Final Audit Reports approved by the Commission since inception. The search can be based on information about the audited committee (Name, FEC ID Number, Type,  Election Cycle) or the issues covered in the report. 
     * @param apiKey  API key for https://api.data.gov. Get one at https://api.data.gov/signup.  (required)
     * @param maxElectionCycle  Filter records to only those that are applicable to a given two-year period. This cycle follows the traditional House election cycle and subdivides the presidential and Senate elections into comparable two-year blocks. The cycle begins with an odd year and is named for its ending, even year.  (optional)
     * @param q The name of the committee. If a committee changes its name,     the most recent name will be shown. Committee names are not unique. Use committee_id     for looking up records. (optional)
     * @param subCategoryId  The finding id of an audit. Finding are a category of broader issues. Each category has an unique ID.  (optional, default to all)
     * @param cycle  Filter records to only those that are applicable to a given two-year period. This cycle follows the traditional House election cycle and subdivides the presidential and Senate elections into comparable two-year blocks. The cycle begins with an odd year and is named for its ending, even year.  (optional)
     * @param sortNullOnly Toggle that filters out all rows having sort column that is non-null (optional, default to false)
     * @param auditCaseId  Primary/foreign key for audit tables  (optional)
     * @param sortHideNull Hide null values on sorted column(s). (optional, default to false)
     * @param candidateId  A unique identifier assigned to each candidate registered with the FEC. If a person runs for several offices, that person will have separate candidate IDs for each office. First character indicates office - [P]residential, [H]ouse, [S]enate]. Second character is the last digit of the two-year period the ID was created. Third and fourth is the candidate state. Presidential IDs don&#39;t have state. Fifth and sixth is the district when the candidate first ran. This does not change if the candidate/member&#39;s district changes during re-districting. Presidential IDs don&#39;t have districts. The rest is sequence.  (optional)
     * @param qq Name of candidate running for office (optional)
     * @param perPage The number of results returned per page. Defaults to 20. (optional, default to 20)
     * @param sort  Provide a field to sort by. Use &#x60;-&#x60; for descending order. ex: &#x60;-case_no&#x60;  (optional)
     * @param minElectionCycle  Filter records to only those that are applicable to a given two-year period. This cycle follows the traditional House election cycle and subdivides the presidential and Senate elections into comparable two-year blocks. The cycle begins with an odd year and is named for its ending, even year.  (optional)
     * @param auditId  The audit issue. Each subcategory has an unique ID  (optional)
     * @param committeeDesignation Type of committee:         - H or S - Congressional         - P - Presidential         - X or Y or Z - Party         - N or Q - PAC         - I - Independent expenditure         - O - Super PAC   (optional)
     * @param committeeType The one-letter type code of the organization:         - C communication cost         - D delegate         - E electioneering communication         - H House         - I independent expenditure filer (not a committee)         - N PAC - nonqualified         - O independent expenditure-only (super PACs)         - P presidential         - Q PAC - qualified         - S Senate         - U single candidate independent expenditure         - V PAC with non-contribution account, nonqualified         - W PAC with non-contribution account, qualified         - X party, nonqualified         - Y party, qualified         - Z national party non-federal account  (optional)
     * @param sortNullsLast Toggle that sorts null values last (optional, default to false)
     * @param page For paginating through results, starting at page 1 (optional, default to 1)
     * @param committeeId  A unique identifier assigned to each committee or filer registered with the FEC. In general committee id&#39;s begin with the letter C which is followed by eight digits.  (optional)
     * @param primaryCategoryId  Audit category ID (table PK)  (optional, default to all)
     * @return ApiResponse&lt;AuditCasePage&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AuditCasePage> auditCaseGetWithHttpInfo(String apiKey, Integer maxElectionCycle, List<String> q, String subCategoryId, List<Integer> cycle, Boolean sortNullOnly, List<String> auditCaseId, Boolean sortHideNull, List<String> candidateId, List<String> qq, Integer perPage, List<String> sort, Integer minElectionCycle, List<Integer> auditId, String committeeDesignation, List<String> committeeType, Boolean sortNullsLast, Integer page, List<String> committeeId, String primaryCategoryId) throws ApiException {
        okhttp3.Call localVarCall = auditCaseGetValidateBeforeCall(apiKey, maxElectionCycle, q, subCategoryId, cycle, sortNullOnly, auditCaseId, sortHideNull, candidateId, qq, perPage, sort, minElectionCycle, auditId, committeeDesignation, committeeType, sortNullsLast, page, committeeId, primaryCategoryId, null);
        Type localVarReturnType = new TypeToken<AuditCasePage>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     *  This endpoint contains Final Audit Reports approved by the Commission since inception. The search can be based on information about the audited committee (Name, FEC ID Number, Type,  Election Cycle) or the issues covered in the report. 
     * @param apiKey  API key for https://api.data.gov. Get one at https://api.data.gov/signup.  (required)
     * @param maxElectionCycle  Filter records to only those that are applicable to a given two-year period. This cycle follows the traditional House election cycle and subdivides the presidential and Senate elections into comparable two-year blocks. The cycle begins with an odd year and is named for its ending, even year.  (optional)
     * @param q The name of the committee. If a committee changes its name,     the most recent name will be shown. Committee names are not unique. Use committee_id     for looking up records. (optional)
     * @param subCategoryId  The finding id of an audit. Finding are a category of broader issues. Each category has an unique ID.  (optional, default to all)
     * @param cycle  Filter records to only those that are applicable to a given two-year period. This cycle follows the traditional House election cycle and subdivides the presidential and Senate elections into comparable two-year blocks. The cycle begins with an odd year and is named for its ending, even year.  (optional)
     * @param sortNullOnly Toggle that filters out all rows having sort column that is non-null (optional, default to false)
     * @param auditCaseId  Primary/foreign key for audit tables  (optional)
     * @param sortHideNull Hide null values on sorted column(s). (optional, default to false)
     * @param candidateId  A unique identifier assigned to each candidate registered with the FEC. If a person runs for several offices, that person will have separate candidate IDs for each office. First character indicates office - [P]residential, [H]ouse, [S]enate]. Second character is the last digit of the two-year period the ID was created. Third and fourth is the candidate state. Presidential IDs don&#39;t have state. Fifth and sixth is the district when the candidate first ran. This does not change if the candidate/member&#39;s district changes during re-districting. Presidential IDs don&#39;t have districts. The rest is sequence.  (optional)
     * @param qq Name of candidate running for office (optional)
     * @param perPage The number of results returned per page. Defaults to 20. (optional, default to 20)
     * @param sort  Provide a field to sort by. Use &#x60;-&#x60; for descending order. ex: &#x60;-case_no&#x60;  (optional)
     * @param minElectionCycle  Filter records to only those that are applicable to a given two-year period. This cycle follows the traditional House election cycle and subdivides the presidential and Senate elections into comparable two-year blocks. The cycle begins with an odd year and is named for its ending, even year.  (optional)
     * @param auditId  The audit issue. Each subcategory has an unique ID  (optional)
     * @param committeeDesignation Type of committee:         - H or S - Congressional         - P - Presidential         - X or Y or Z - Party         - N or Q - PAC         - I - Independent expenditure         - O - Super PAC   (optional)
     * @param committeeType The one-letter type code of the organization:         - C communication cost         - D delegate         - E electioneering communication         - H House         - I independent expenditure filer (not a committee)         - N PAC - nonqualified         - O independent expenditure-only (super PACs)         - P presidential         - Q PAC - qualified         - S Senate         - U single candidate independent expenditure         - V PAC with non-contribution account, nonqualified         - W PAC with non-contribution account, qualified         - X party, nonqualified         - Y party, qualified         - Z national party non-federal account  (optional)
     * @param sortNullsLast Toggle that sorts null values last (optional, default to false)
     * @param page For paginating through results, starting at page 1 (optional, default to 1)
     * @param committeeId  A unique identifier assigned to each committee or filer registered with the FEC. In general committee id&#39;s begin with the letter C which is followed by eight digits.  (optional)
     * @param primaryCategoryId  Audit category ID (table PK)  (optional, default to all)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call auditCaseGetAsync(String apiKey, Integer maxElectionCycle, List<String> q, String subCategoryId, List<Integer> cycle, Boolean sortNullOnly, List<String> auditCaseId, Boolean sortHideNull, List<String> candidateId, List<String> qq, Integer perPage, List<String> sort, Integer minElectionCycle, List<Integer> auditId, String committeeDesignation, List<String> committeeType, Boolean sortNullsLast, Integer page, List<String> committeeId, String primaryCategoryId, final ApiCallback<AuditCasePage> _callback) throws ApiException {

        okhttp3.Call localVarCall = auditCaseGetValidateBeforeCall(apiKey, maxElectionCycle, q, subCategoryId, cycle, sortNullOnly, auditCaseId, sortHideNull, candidateId, qq, perPage, sort, minElectionCycle, auditId, committeeDesignation, committeeType, sortNullsLast, page, committeeId, primaryCategoryId, _callback);
        Type localVarReturnType = new TypeToken<AuditCasePage>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for auditCategoryGet
     * @param apiKey  API key for https://api.data.gov. Get one at https://api.data.gov/signup.  (required)
     * @param sortNullsLast Toggle that sorts null values last (optional, default to false)
     * @param page For paginating through results, starting at page 1 (optional, default to 1)
     * @param sortNullOnly Toggle that filters out all rows having sort column that is non-null (optional, default to false)
     * @param sortHideNull Hide null values on sorted column(s). (optional, default to false)
     * @param perPage The number of results returned per page. Defaults to 20. (optional, default to 20)
     * @param primaryCategoryId  Audit category ID (table PK)  (optional)
     * @param sort Provide a field to sort by. Use &#x60;-&#x60; for descending order.  (optional, default to primary_category_name)
     * @param primaryCategoryName Primary Audit Category     - No Findings or Issues/Not a Committee     - Net Outstanding Campaign/Convention Expenditures/Obligations     - Payments/Disgorgements     - Allocation Issues     - Prohibited Contributions     - Disclosure     - Recordkeeping     - Repayment to US Treasury     - Other     - Misstatement of Financial Activity     - Excessive Contributions     - Failure to File Reports/Schedules/Notices     - Loans     - Referred Findings Not Listed  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call auditCategoryGetCall(String apiKey, Boolean sortNullsLast, Integer page, Boolean sortNullOnly, Boolean sortHideNull, Integer perPage, List<String> primaryCategoryId, String sort, List<String> primaryCategoryName, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/audit-category/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiKey != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api_key", apiKey));
        }

        if (sortNullsLast != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort_nulls_last", sortNullsLast));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (sortNullOnly != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort_null_only", sortNullOnly));
        }

        if (sortHideNull != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort_hide_null", sortHideNull));
        }

        if (perPage != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("per_page", perPage));
        }

        if (primaryCategoryId != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "primary_category_id", primaryCategoryId));
        }

        if (sort != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort", sort));
        }

        if (primaryCategoryName != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "primary_category_name", primaryCategoryName));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKeyHeaderAuth", "ApiKeyQueryAuth", "apiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call auditCategoryGetValidateBeforeCall(String apiKey, Boolean sortNullsLast, Integer page, Boolean sortNullOnly, Boolean sortHideNull, Integer perPage, List<String> primaryCategoryId, String sort, List<String> primaryCategoryName, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'apiKey' is set
        if (apiKey == null) {
            throw new ApiException("Missing the required parameter 'apiKey' when calling auditCategoryGet(Async)");
        }

        return auditCategoryGetCall(apiKey, sortNullsLast, page, sortNullOnly, sortHideNull, perPage, primaryCategoryId, sort, primaryCategoryName, _callback);

    }

    /**
     * 
     *  This lists the options for the categories and subcategories available in the /audit-search/ endpoint. 
     * @param apiKey  API key for https://api.data.gov. Get one at https://api.data.gov/signup.  (required)
     * @param sortNullsLast Toggle that sorts null values last (optional, default to false)
     * @param page For paginating through results, starting at page 1 (optional, default to 1)
     * @param sortNullOnly Toggle that filters out all rows having sort column that is non-null (optional, default to false)
     * @param sortHideNull Hide null values on sorted column(s). (optional, default to false)
     * @param perPage The number of results returned per page. Defaults to 20. (optional, default to 20)
     * @param primaryCategoryId  Audit category ID (table PK)  (optional)
     * @param sort Provide a field to sort by. Use &#x60;-&#x60; for descending order.  (optional, default to primary_category_name)
     * @param primaryCategoryName Primary Audit Category     - No Findings or Issues/Not a Committee     - Net Outstanding Campaign/Convention Expenditures/Obligations     - Payments/Disgorgements     - Allocation Issues     - Prohibited Contributions     - Disclosure     - Recordkeeping     - Repayment to US Treasury     - Other     - Misstatement of Financial Activity     - Excessive Contributions     - Failure to File Reports/Schedules/Notices     - Loans     - Referred Findings Not Listed  (optional)
     * @return AuditCategoryPage
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public AuditCategoryPage auditCategoryGet(String apiKey, Boolean sortNullsLast, Integer page, Boolean sortNullOnly, Boolean sortHideNull, Integer perPage, List<String> primaryCategoryId, String sort, List<String> primaryCategoryName) throws ApiException {
        ApiResponse<AuditCategoryPage> localVarResp = auditCategoryGetWithHttpInfo(apiKey, sortNullsLast, page, sortNullOnly, sortHideNull, perPage, primaryCategoryId, sort, primaryCategoryName);
        return localVarResp.getData();
    }

    /**
     * 
     *  This lists the options for the categories and subcategories available in the /audit-search/ endpoint. 
     * @param apiKey  API key for https://api.data.gov. Get one at https://api.data.gov/signup.  (required)
     * @param sortNullsLast Toggle that sorts null values last (optional, default to false)
     * @param page For paginating through results, starting at page 1 (optional, default to 1)
     * @param sortNullOnly Toggle that filters out all rows having sort column that is non-null (optional, default to false)
     * @param sortHideNull Hide null values on sorted column(s). (optional, default to false)
     * @param perPage The number of results returned per page. Defaults to 20. (optional, default to 20)
     * @param primaryCategoryId  Audit category ID (table PK)  (optional)
     * @param sort Provide a field to sort by. Use &#x60;-&#x60; for descending order.  (optional, default to primary_category_name)
     * @param primaryCategoryName Primary Audit Category     - No Findings or Issues/Not a Committee     - Net Outstanding Campaign/Convention Expenditures/Obligations     - Payments/Disgorgements     - Allocation Issues     - Prohibited Contributions     - Disclosure     - Recordkeeping     - Repayment to US Treasury     - Other     - Misstatement of Financial Activity     - Excessive Contributions     - Failure to File Reports/Schedules/Notices     - Loans     - Referred Findings Not Listed  (optional)
     * @return ApiResponse&lt;AuditCategoryPage&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AuditCategoryPage> auditCategoryGetWithHttpInfo(String apiKey, Boolean sortNullsLast, Integer page, Boolean sortNullOnly, Boolean sortHideNull, Integer perPage, List<String> primaryCategoryId, String sort, List<String> primaryCategoryName) throws ApiException {
        okhttp3.Call localVarCall = auditCategoryGetValidateBeforeCall(apiKey, sortNullsLast, page, sortNullOnly, sortHideNull, perPage, primaryCategoryId, sort, primaryCategoryName, null);
        Type localVarReturnType = new TypeToken<AuditCategoryPage>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     *  This lists the options for the categories and subcategories available in the /audit-search/ endpoint. 
     * @param apiKey  API key for https://api.data.gov. Get one at https://api.data.gov/signup.  (required)
     * @param sortNullsLast Toggle that sorts null values last (optional, default to false)
     * @param page For paginating through results, starting at page 1 (optional, default to 1)
     * @param sortNullOnly Toggle that filters out all rows having sort column that is non-null (optional, default to false)
     * @param sortHideNull Hide null values on sorted column(s). (optional, default to false)
     * @param perPage The number of results returned per page. Defaults to 20. (optional, default to 20)
     * @param primaryCategoryId  Audit category ID (table PK)  (optional)
     * @param sort Provide a field to sort by. Use &#x60;-&#x60; for descending order.  (optional, default to primary_category_name)
     * @param primaryCategoryName Primary Audit Category     - No Findings or Issues/Not a Committee     - Net Outstanding Campaign/Convention Expenditures/Obligations     - Payments/Disgorgements     - Allocation Issues     - Prohibited Contributions     - Disclosure     - Recordkeeping     - Repayment to US Treasury     - Other     - Misstatement of Financial Activity     - Excessive Contributions     - Failure to File Reports/Schedules/Notices     - Loans     - Referred Findings Not Listed  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call auditCategoryGetAsync(String apiKey, Boolean sortNullsLast, Integer page, Boolean sortNullOnly, Boolean sortHideNull, Integer perPage, List<String> primaryCategoryId, String sort, List<String> primaryCategoryName, final ApiCallback<AuditCategoryPage> _callback) throws ApiException {

        okhttp3.Call localVarCall = auditCategoryGetValidateBeforeCall(apiKey, sortNullsLast, page, sortNullOnly, sortHideNull, perPage, primaryCategoryId, sort, primaryCategoryName, _callback);
        Type localVarReturnType = new TypeToken<AuditCategoryPage>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for auditPrimaryCategoryGet
     * @param apiKey  API key for https://api.data.gov. Get one at https://api.data.gov/signup.  (required)
     * @param sortNullsLast Toggle that sorts null values last (optional, default to false)
     * @param page For paginating through results, starting at page 1 (optional, default to 1)
     * @param sortNullOnly Toggle that filters out all rows having sort column that is non-null (optional, default to false)
     * @param sortHideNull Hide null values on sorted column(s). (optional, default to false)
     * @param perPage The number of results returned per page. Defaults to 20. (optional, default to 20)
     * @param primaryCategoryId  Audit category ID (table PK)  (optional)
     * @param sort Provide a field to sort by. Use &#x60;-&#x60; for descending order.  (optional, default to primary_category_name)
     * @param primaryCategoryName Primary Audit Category     - No Findings or Issues/Not a Committee     - Net Outstanding Campaign/Convention Expenditures/Obligations     - Payments/Disgorgements     - Allocation Issues     - Prohibited Contributions     - Disclosure     - Recordkeeping     - Repayment to US Treasury     - Other     - Misstatement of Financial Activity     - Excessive Contributions     - Failure to File Reports/Schedules/Notices     - Loans     - Referred Findings Not Listed  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call auditPrimaryCategoryGetCall(String apiKey, Boolean sortNullsLast, Integer page, Boolean sortNullOnly, Boolean sortHideNull, Integer perPage, List<String> primaryCategoryId, String sort, List<String> primaryCategoryName, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/audit-primary-category/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiKey != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api_key", apiKey));
        }

        if (sortNullsLast != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort_nulls_last", sortNullsLast));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (sortNullOnly != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort_null_only", sortNullOnly));
        }

        if (sortHideNull != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort_hide_null", sortHideNull));
        }

        if (perPage != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("per_page", perPage));
        }

        if (primaryCategoryId != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "primary_category_id", primaryCategoryId));
        }

        if (sort != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort", sort));
        }

        if (primaryCategoryName != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "primary_category_name", primaryCategoryName));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKeyHeaderAuth", "ApiKeyQueryAuth", "apiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call auditPrimaryCategoryGetValidateBeforeCall(String apiKey, Boolean sortNullsLast, Integer page, Boolean sortNullOnly, Boolean sortHideNull, Integer perPage, List<String> primaryCategoryId, String sort, List<String> primaryCategoryName, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'apiKey' is set
        if (apiKey == null) {
            throw new ApiException("Missing the required parameter 'apiKey' when calling auditPrimaryCategoryGet(Async)");
        }

        return auditPrimaryCategoryGetCall(apiKey, sortNullsLast, page, sortNullOnly, sortHideNull, perPage, primaryCategoryId, sort, primaryCategoryName, _callback);

    }

    /**
     * 
     *  This lists the options for the primary categories available in the /audit-search/ endpoint. 
     * @param apiKey  API key for https://api.data.gov. Get one at https://api.data.gov/signup.  (required)
     * @param sortNullsLast Toggle that sorts null values last (optional, default to false)
     * @param page For paginating through results, starting at page 1 (optional, default to 1)
     * @param sortNullOnly Toggle that filters out all rows having sort column that is non-null (optional, default to false)
     * @param sortHideNull Hide null values on sorted column(s). (optional, default to false)
     * @param perPage The number of results returned per page. Defaults to 20. (optional, default to 20)
     * @param primaryCategoryId  Audit category ID (table PK)  (optional)
     * @param sort Provide a field to sort by. Use &#x60;-&#x60; for descending order.  (optional, default to primary_category_name)
     * @param primaryCategoryName Primary Audit Category     - No Findings or Issues/Not a Committee     - Net Outstanding Campaign/Convention Expenditures/Obligations     - Payments/Disgorgements     - Allocation Issues     - Prohibited Contributions     - Disclosure     - Recordkeeping     - Repayment to US Treasury     - Other     - Misstatement of Financial Activity     - Excessive Contributions     - Failure to File Reports/Schedules/Notices     - Loans     - Referred Findings Not Listed  (optional)
     * @return AuditPrimaryCategoryPage
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public AuditPrimaryCategoryPage auditPrimaryCategoryGet(String apiKey, Boolean sortNullsLast, Integer page, Boolean sortNullOnly, Boolean sortHideNull, Integer perPage, List<String> primaryCategoryId, String sort, List<String> primaryCategoryName) throws ApiException {
        ApiResponse<AuditPrimaryCategoryPage> localVarResp = auditPrimaryCategoryGetWithHttpInfo(apiKey, sortNullsLast, page, sortNullOnly, sortHideNull, perPage, primaryCategoryId, sort, primaryCategoryName);
        return localVarResp.getData();
    }

    /**
     * 
     *  This lists the options for the primary categories available in the /audit-search/ endpoint. 
     * @param apiKey  API key for https://api.data.gov. Get one at https://api.data.gov/signup.  (required)
     * @param sortNullsLast Toggle that sorts null values last (optional, default to false)
     * @param page For paginating through results, starting at page 1 (optional, default to 1)
     * @param sortNullOnly Toggle that filters out all rows having sort column that is non-null (optional, default to false)
     * @param sortHideNull Hide null values on sorted column(s). (optional, default to false)
     * @param perPage The number of results returned per page. Defaults to 20. (optional, default to 20)
     * @param primaryCategoryId  Audit category ID (table PK)  (optional)
     * @param sort Provide a field to sort by. Use &#x60;-&#x60; for descending order.  (optional, default to primary_category_name)
     * @param primaryCategoryName Primary Audit Category     - No Findings or Issues/Not a Committee     - Net Outstanding Campaign/Convention Expenditures/Obligations     - Payments/Disgorgements     - Allocation Issues     - Prohibited Contributions     - Disclosure     - Recordkeeping     - Repayment to US Treasury     - Other     - Misstatement of Financial Activity     - Excessive Contributions     - Failure to File Reports/Schedules/Notices     - Loans     - Referred Findings Not Listed  (optional)
     * @return ApiResponse&lt;AuditPrimaryCategoryPage&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AuditPrimaryCategoryPage> auditPrimaryCategoryGetWithHttpInfo(String apiKey, Boolean sortNullsLast, Integer page, Boolean sortNullOnly, Boolean sortHideNull, Integer perPage, List<String> primaryCategoryId, String sort, List<String> primaryCategoryName) throws ApiException {
        okhttp3.Call localVarCall = auditPrimaryCategoryGetValidateBeforeCall(apiKey, sortNullsLast, page, sortNullOnly, sortHideNull, perPage, primaryCategoryId, sort, primaryCategoryName, null);
        Type localVarReturnType = new TypeToken<AuditPrimaryCategoryPage>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     *  This lists the options for the primary categories available in the /audit-search/ endpoint. 
     * @param apiKey  API key for https://api.data.gov. Get one at https://api.data.gov/signup.  (required)
     * @param sortNullsLast Toggle that sorts null values last (optional, default to false)
     * @param page For paginating through results, starting at page 1 (optional, default to 1)
     * @param sortNullOnly Toggle that filters out all rows having sort column that is non-null (optional, default to false)
     * @param sortHideNull Hide null values on sorted column(s). (optional, default to false)
     * @param perPage The number of results returned per page. Defaults to 20. (optional, default to 20)
     * @param primaryCategoryId  Audit category ID (table PK)  (optional)
     * @param sort Provide a field to sort by. Use &#x60;-&#x60; for descending order.  (optional, default to primary_category_name)
     * @param primaryCategoryName Primary Audit Category     - No Findings or Issues/Not a Committee     - Net Outstanding Campaign/Convention Expenditures/Obligations     - Payments/Disgorgements     - Allocation Issues     - Prohibited Contributions     - Disclosure     - Recordkeeping     - Repayment to US Treasury     - Other     - Misstatement of Financial Activity     - Excessive Contributions     - Failure to File Reports/Schedules/Notices     - Loans     - Referred Findings Not Listed  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call auditPrimaryCategoryGetAsync(String apiKey, Boolean sortNullsLast, Integer page, Boolean sortNullOnly, Boolean sortHideNull, Integer perPage, List<String> primaryCategoryId, String sort, List<String> primaryCategoryName, final ApiCallback<AuditPrimaryCategoryPage> _callback) throws ApiException {

        okhttp3.Call localVarCall = auditPrimaryCategoryGetValidateBeforeCall(apiKey, sortNullsLast, page, sortNullOnly, sortHideNull, perPage, primaryCategoryId, sort, primaryCategoryName, _callback);
        Type localVarReturnType = new TypeToken<AuditPrimaryCategoryPage>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for namesAuditCandidatesGet
     * @param apiKey  API key for https://api.data.gov. Get one at https://api.data.gov/signup.  (required)
     * @param q Name (candidate or committee) to search for (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call namesAuditCandidatesGetCall(String apiKey, List<String> q, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/names/audit_candidates/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiKey != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api_key", apiKey));
        }

        if (q != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "q", q));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKeyHeaderAuth", "ApiKeyQueryAuth", "apiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call namesAuditCandidatesGetValidateBeforeCall(String apiKey, List<String> q, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'apiKey' is set
        if (apiKey == null) {
            throw new ApiException("Missing the required parameter 'apiKey' when calling namesAuditCandidatesGet(Async)");
        }

        // verify the required parameter 'q' is set
        if (q == null) {
            throw new ApiException("Missing the required parameter 'q' when calling namesAuditCandidatesGet(Async)");
        }

        return namesAuditCandidatesGetCall(apiKey, q, _callback);

    }

    /**
     * 
     *  Search for candidates or committees by name. If you&#39;re looking for information on a particular person or group, using a name to find the &#x60;candidate_id&#x60; or &#x60;committee_id&#x60; on this endpoint can be a helpful first step. 
     * @param apiKey  API key for https://api.data.gov. Get one at https://api.data.gov/signup.  (required)
     * @param q Name (candidate or committee) to search for (required)
     * @return AuditCandidateSearchList
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public AuditCandidateSearchList namesAuditCandidatesGet(String apiKey, List<String> q) throws ApiException {
        ApiResponse<AuditCandidateSearchList> localVarResp = namesAuditCandidatesGetWithHttpInfo(apiKey, q);
        return localVarResp.getData();
    }

    /**
     * 
     *  Search for candidates or committees by name. If you&#39;re looking for information on a particular person or group, using a name to find the &#x60;candidate_id&#x60; or &#x60;committee_id&#x60; on this endpoint can be a helpful first step. 
     * @param apiKey  API key for https://api.data.gov. Get one at https://api.data.gov/signup.  (required)
     * @param q Name (candidate or committee) to search for (required)
     * @return ApiResponse&lt;AuditCandidateSearchList&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AuditCandidateSearchList> namesAuditCandidatesGetWithHttpInfo(String apiKey, List<String> q) throws ApiException {
        okhttp3.Call localVarCall = namesAuditCandidatesGetValidateBeforeCall(apiKey, q, null);
        Type localVarReturnType = new TypeToken<AuditCandidateSearchList>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     *  Search for candidates or committees by name. If you&#39;re looking for information on a particular person or group, using a name to find the &#x60;candidate_id&#x60; or &#x60;committee_id&#x60; on this endpoint can be a helpful first step. 
     * @param apiKey  API key for https://api.data.gov. Get one at https://api.data.gov/signup.  (required)
     * @param q Name (candidate or committee) to search for (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call namesAuditCandidatesGetAsync(String apiKey, List<String> q, final ApiCallback<AuditCandidateSearchList> _callback) throws ApiException {

        okhttp3.Call localVarCall = namesAuditCandidatesGetValidateBeforeCall(apiKey, q, _callback);
        Type localVarReturnType = new TypeToken<AuditCandidateSearchList>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for namesAuditCommitteesGet
     * @param apiKey  API key for https://api.data.gov. Get one at https://api.data.gov/signup.  (required)
     * @param q Name (candidate or committee) to search for (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call namesAuditCommitteesGetCall(String apiKey, List<String> q, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/names/audit_committees/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiKey != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api_key", apiKey));
        }

        if (q != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "q", q));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKeyHeaderAuth", "ApiKeyQueryAuth", "apiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call namesAuditCommitteesGetValidateBeforeCall(String apiKey, List<String> q, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'apiKey' is set
        if (apiKey == null) {
            throw new ApiException("Missing the required parameter 'apiKey' when calling namesAuditCommitteesGet(Async)");
        }

        // verify the required parameter 'q' is set
        if (q == null) {
            throw new ApiException("Missing the required parameter 'q' when calling namesAuditCommitteesGet(Async)");
        }

        return namesAuditCommitteesGetCall(apiKey, q, _callback);

    }

    /**
     * 
     *  Search for candidates or committees by name. If you&#39;re looking for information on a particular person or group, using a name to find the &#x60;candidate_id&#x60; or &#x60;committee_id&#x60; on this endpoint can be a helpful first step. 
     * @param apiKey  API key for https://api.data.gov. Get one at https://api.data.gov/signup.  (required)
     * @param q Name (candidate or committee) to search for (required)
     * @return AuditCommitteeSearchList
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public AuditCommitteeSearchList namesAuditCommitteesGet(String apiKey, List<String> q) throws ApiException {
        ApiResponse<AuditCommitteeSearchList> localVarResp = namesAuditCommitteesGetWithHttpInfo(apiKey, q);
        return localVarResp.getData();
    }

    /**
     * 
     *  Search for candidates or committees by name. If you&#39;re looking for information on a particular person or group, using a name to find the &#x60;candidate_id&#x60; or &#x60;committee_id&#x60; on this endpoint can be a helpful first step. 
     * @param apiKey  API key for https://api.data.gov. Get one at https://api.data.gov/signup.  (required)
     * @param q Name (candidate or committee) to search for (required)
     * @return ApiResponse&lt;AuditCommitteeSearchList&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AuditCommitteeSearchList> namesAuditCommitteesGetWithHttpInfo(String apiKey, List<String> q) throws ApiException {
        okhttp3.Call localVarCall = namesAuditCommitteesGetValidateBeforeCall(apiKey, q, null);
        Type localVarReturnType = new TypeToken<AuditCommitteeSearchList>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     *  Search for candidates or committees by name. If you&#39;re looking for information on a particular person or group, using a name to find the &#x60;candidate_id&#x60; or &#x60;committee_id&#x60; on this endpoint can be a helpful first step. 
     * @param apiKey  API key for https://api.data.gov. Get one at https://api.data.gov/signup.  (required)
     * @param q Name (candidate or committee) to search for (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call namesAuditCommitteesGetAsync(String apiKey, List<String> q, final ApiCallback<AuditCommitteeSearchList> _callback) throws ApiException {

        okhttp3.Call localVarCall = namesAuditCommitteesGetValidateBeforeCall(apiKey, q, _callback);
        Type localVarReturnType = new TypeToken<AuditCommitteeSearchList>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
