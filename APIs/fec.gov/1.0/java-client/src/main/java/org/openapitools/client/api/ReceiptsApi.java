/*
 * OpenFEC
 * This application programming interface (API) allows you to explore the way candidates and committees fund their campaigns.    The Federal Election Commission (FEC) API is a RESTful web service supporting full-text and field-specific searches on FEC data. [Bulk downloads](https://www.fec.gov/data/advanced/?tab=bulk-data) are available on the current site. Information is tied to the underlying forms by file ID and image ID. Data is updated nightly.    There are a lot of data, and a good place to start is to use search to find interesting candidates and committees. Then, you can use their IDs to find report or line item details with the other endpoints. If you are interested in individual donors, check out contributor information in the `/schedule_a/` endpoints.    <b class=\"body\" id=\"getting_started_head\">Getting started with the openFEC API</b><br>    If you would like to use the FEC's API programmatically, you can sign up for your own API key using our form. Alternatively, you can still try out our API without an API key by using the web interface and using DEMO_KEY. Note that when you use the openFEC API you are subject to the [Terms of Service](https://github.com/fecgov/FEC/blob/master/TERMS-OF-SERVICE.md) and [Acceptable Use policy](https://github.com/fecgov/FEC/blob/master/ACCEPTABLE-USE-POLICY.md).    Signing up for an API key will enable you to place up to 1,000 calls an hour. Each call is limited to 100 results per page. You can email questions, comments or a request to get a key for 7,200 calls an hour (120 calls per minute) to <a href=\"mailto:APIinfo@fec.gov\">APIinfo@fec.gov</a>. You can also ask questions and discuss the data in a community led [group](https://groups.google.com/forum/#!forum/fec-data).    The model definitions and schema are available at [/swagger](/swagger/). This is useful for making wrappers and exploring the data.    A few restrictions limit the way you can use FEC data. For example, you can’t use contributor lists for commercial purposes or to solicit donations. [Learn more here](https://www.fec.gov/updates/sale-or-use-contributor-information/).    [Inspect our source code](https://github.com/fecgov/openFEC). We welcome issues and pull requests!    <p><br></p> <h2 class=\"title\" id=\"signup_head\">Sign up for an API key</h2> <div id=\"apidatagov_signup\">Loading signup form...</div>
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import java.time.LocalDate;
import org.openapitools.client.model.ScheduleAByEmployerPage;
import org.openapitools.client.model.ScheduleAByOccupationPage;
import org.openapitools.client.model.ScheduleABySizeCandidatePage;
import org.openapitools.client.model.ScheduleABySizePage;
import org.openapitools.client.model.ScheduleAByStateCandidatePage;
import org.openapitools.client.model.ScheduleAByStatePage;
import org.openapitools.client.model.ScheduleAByStateRecipientTotalsPage;
import org.openapitools.client.model.ScheduleAByZipPage;
import org.openapitools.client.model.ScheduleAEfilePage;
import org.openapitools.client.model.ScheduleAPage;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class ReceiptsApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public ReceiptsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public ReceiptsApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for schedulesScheduleAByEmployerGet
     * @param apiKey  API key for https://api.data.gov. Get one at https://api.data.gov/signup.  (required)
     * @param cycle  Filter records to only those that were applicable to a given two-year period.The cycle begins with an odd year and is named for its ending, even year.  (optional)
     * @param sortNullsLast Toggle that sorts null values last (optional, default to false)
     * @param page For paginating through results, starting at page 1 (optional, default to 1)
     * @param committeeId  A unique identifier assigned to each committee or filer registered with the FEC. In general committee id&#39;s begin with the letter C which is followed by eight digits.  (optional)
     * @param sortNullOnly Toggle that filters out all rows having sort column that is non-null (optional, default to false)
     * @param sortHideNull Hide null values on sorted column(s). (optional, default to false)
     * @param employer Employer of contributor as reported on the committee&#39;s filing (optional)
     * @param perPage The number of results returned per page. Defaults to 20. (optional, default to 20)
     * @param sort Provide a field to sort by. Use &#x60;-&#x60; for descending order.  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call schedulesScheduleAByEmployerGetCall(String apiKey, List<Integer> cycle, Boolean sortNullsLast, Integer page, List<String> committeeId, Boolean sortNullOnly, Boolean sortHideNull, List<String> employer, Integer perPage, String sort, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/schedules/schedule_a/by_employer/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiKey != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api_key", apiKey));
        }

        if (cycle != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "cycle", cycle));
        }

        if (sortNullsLast != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort_nulls_last", sortNullsLast));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (committeeId != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "committee_id", committeeId));
        }

        if (sortNullOnly != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort_null_only", sortNullOnly));
        }

        if (sortHideNull != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort_hide_null", sortHideNull));
        }

        if (employer != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "employer", employer));
        }

        if (perPage != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("per_page", perPage));
        }

        if (sort != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort", sort));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKeyHeaderAuth", "ApiKeyQueryAuth", "apiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call schedulesScheduleAByEmployerGetValidateBeforeCall(String apiKey, List<Integer> cycle, Boolean sortNullsLast, Integer page, List<String> committeeId, Boolean sortNullOnly, Boolean sortHideNull, List<String> employer, Integer perPage, String sort, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'apiKey' is set
        if (apiKey == null) {
            throw new ApiException("Missing the required parameter 'apiKey' when calling schedulesScheduleAByEmployerGet(Async)");
        }

        return schedulesScheduleAByEmployerGetCall(apiKey, cycle, sortNullsLast, page, committeeId, sortNullOnly, sortHideNull, employer, perPage, sort, _callback);

    }

    /**
     * 
     *  This endpoint provides itemized individual contributions received by a committee, aggregated by the contributor’s employer name. If you are interested in our “is_individual” methodology, review the [methodology page](https://www.fec.gov/campaign-finance-data/about-campaign-finance-data/methodology). Unitemized individual contributions are not included. 
     * @param apiKey  API key for https://api.data.gov. Get one at https://api.data.gov/signup.  (required)
     * @param cycle  Filter records to only those that were applicable to a given two-year period.The cycle begins with an odd year and is named for its ending, even year.  (optional)
     * @param sortNullsLast Toggle that sorts null values last (optional, default to false)
     * @param page For paginating through results, starting at page 1 (optional, default to 1)
     * @param committeeId  A unique identifier assigned to each committee or filer registered with the FEC. In general committee id&#39;s begin with the letter C which is followed by eight digits.  (optional)
     * @param sortNullOnly Toggle that filters out all rows having sort column that is non-null (optional, default to false)
     * @param sortHideNull Hide null values on sorted column(s). (optional, default to false)
     * @param employer Employer of contributor as reported on the committee&#39;s filing (optional)
     * @param perPage The number of results returned per page. Defaults to 20. (optional, default to 20)
     * @param sort Provide a field to sort by. Use &#x60;-&#x60; for descending order.  (optional)
     * @return ScheduleAByEmployerPage
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ScheduleAByEmployerPage schedulesScheduleAByEmployerGet(String apiKey, List<Integer> cycle, Boolean sortNullsLast, Integer page, List<String> committeeId, Boolean sortNullOnly, Boolean sortHideNull, List<String> employer, Integer perPage, String sort) throws ApiException {
        ApiResponse<ScheduleAByEmployerPage> localVarResp = schedulesScheduleAByEmployerGetWithHttpInfo(apiKey, cycle, sortNullsLast, page, committeeId, sortNullOnly, sortHideNull, employer, perPage, sort);
        return localVarResp.getData();
    }

    /**
     * 
     *  This endpoint provides itemized individual contributions received by a committee, aggregated by the contributor’s employer name. If you are interested in our “is_individual” methodology, review the [methodology page](https://www.fec.gov/campaign-finance-data/about-campaign-finance-data/methodology). Unitemized individual contributions are not included. 
     * @param apiKey  API key for https://api.data.gov. Get one at https://api.data.gov/signup.  (required)
     * @param cycle  Filter records to only those that were applicable to a given two-year period.The cycle begins with an odd year and is named for its ending, even year.  (optional)
     * @param sortNullsLast Toggle that sorts null values last (optional, default to false)
     * @param page For paginating through results, starting at page 1 (optional, default to 1)
     * @param committeeId  A unique identifier assigned to each committee or filer registered with the FEC. In general committee id&#39;s begin with the letter C which is followed by eight digits.  (optional)
     * @param sortNullOnly Toggle that filters out all rows having sort column that is non-null (optional, default to false)
     * @param sortHideNull Hide null values on sorted column(s). (optional, default to false)
     * @param employer Employer of contributor as reported on the committee&#39;s filing (optional)
     * @param perPage The number of results returned per page. Defaults to 20. (optional, default to 20)
     * @param sort Provide a field to sort by. Use &#x60;-&#x60; for descending order.  (optional)
     * @return ApiResponse&lt;ScheduleAByEmployerPage&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ScheduleAByEmployerPage> schedulesScheduleAByEmployerGetWithHttpInfo(String apiKey, List<Integer> cycle, Boolean sortNullsLast, Integer page, List<String> committeeId, Boolean sortNullOnly, Boolean sortHideNull, List<String> employer, Integer perPage, String sort) throws ApiException {
        okhttp3.Call localVarCall = schedulesScheduleAByEmployerGetValidateBeforeCall(apiKey, cycle, sortNullsLast, page, committeeId, sortNullOnly, sortHideNull, employer, perPage, sort, null);
        Type localVarReturnType = new TypeToken<ScheduleAByEmployerPage>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     *  This endpoint provides itemized individual contributions received by a committee, aggregated by the contributor’s employer name. If you are interested in our “is_individual” methodology, review the [methodology page](https://www.fec.gov/campaign-finance-data/about-campaign-finance-data/methodology). Unitemized individual contributions are not included. 
     * @param apiKey  API key for https://api.data.gov. Get one at https://api.data.gov/signup.  (required)
     * @param cycle  Filter records to only those that were applicable to a given two-year period.The cycle begins with an odd year and is named for its ending, even year.  (optional)
     * @param sortNullsLast Toggle that sorts null values last (optional, default to false)
     * @param page For paginating through results, starting at page 1 (optional, default to 1)
     * @param committeeId  A unique identifier assigned to each committee or filer registered with the FEC. In general committee id&#39;s begin with the letter C which is followed by eight digits.  (optional)
     * @param sortNullOnly Toggle that filters out all rows having sort column that is non-null (optional, default to false)
     * @param sortHideNull Hide null values on sorted column(s). (optional, default to false)
     * @param employer Employer of contributor as reported on the committee&#39;s filing (optional)
     * @param perPage The number of results returned per page. Defaults to 20. (optional, default to 20)
     * @param sort Provide a field to sort by. Use &#x60;-&#x60; for descending order.  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call schedulesScheduleAByEmployerGetAsync(String apiKey, List<Integer> cycle, Boolean sortNullsLast, Integer page, List<String> committeeId, Boolean sortNullOnly, Boolean sortHideNull, List<String> employer, Integer perPage, String sort, final ApiCallback<ScheduleAByEmployerPage> _callback) throws ApiException {

        okhttp3.Call localVarCall = schedulesScheduleAByEmployerGetValidateBeforeCall(apiKey, cycle, sortNullsLast, page, committeeId, sortNullOnly, sortHideNull, employer, perPage, sort, _callback);
        Type localVarReturnType = new TypeToken<ScheduleAByEmployerPage>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for schedulesScheduleAByOccupationGet
     * @param apiKey  API key for https://api.data.gov. Get one at https://api.data.gov/signup.  (required)
     * @param cycle  Filter records to only those that were applicable to a given two-year period.The cycle begins with an odd year and is named for its ending, even year.  (optional)
     * @param sortNullsLast Toggle that sorts null values last (optional, default to false)
     * @param page For paginating through results, starting at page 1 (optional, default to 1)
     * @param committeeId  A unique identifier assigned to each committee or filer registered with the FEC. In general committee id&#39;s begin with the letter C which is followed by eight digits.  (optional)
     * @param sortNullOnly Toggle that filters out all rows having sort column that is non-null (optional, default to false)
     * @param occupation Occupation of contributor as reported on the committee&#39;s filing (optional)
     * @param sortHideNull Hide null values on sorted column(s). (optional, default to false)
     * @param perPage The number of results returned per page. Defaults to 20. (optional, default to 20)
     * @param sort Provide a field to sort by. Use &#x60;-&#x60; for descending order.  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call schedulesScheduleAByOccupationGetCall(String apiKey, List<Integer> cycle, Boolean sortNullsLast, Integer page, List<String> committeeId, Boolean sortNullOnly, List<String> occupation, Boolean sortHideNull, Integer perPage, String sort, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/schedules/schedule_a/by_occupation/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiKey != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api_key", apiKey));
        }

        if (cycle != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "cycle", cycle));
        }

        if (sortNullsLast != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort_nulls_last", sortNullsLast));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (committeeId != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "committee_id", committeeId));
        }

        if (sortNullOnly != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort_null_only", sortNullOnly));
        }

        if (occupation != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "occupation", occupation));
        }

        if (sortHideNull != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort_hide_null", sortHideNull));
        }

        if (perPage != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("per_page", perPage));
        }

        if (sort != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort", sort));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKeyHeaderAuth", "ApiKeyQueryAuth", "apiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call schedulesScheduleAByOccupationGetValidateBeforeCall(String apiKey, List<Integer> cycle, Boolean sortNullsLast, Integer page, List<String> committeeId, Boolean sortNullOnly, List<String> occupation, Boolean sortHideNull, Integer perPage, String sort, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'apiKey' is set
        if (apiKey == null) {
            throw new ApiException("Missing the required parameter 'apiKey' when calling schedulesScheduleAByOccupationGet(Async)");
        }

        return schedulesScheduleAByOccupationGetCall(apiKey, cycle, sortNullsLast, page, committeeId, sortNullOnly, occupation, sortHideNull, perPage, sort, _callback);

    }

    /**
     * 
     *  This endpoint provides itemized individual contributions received by a committee, aggregated by the contributor’s occupation. If you are interested in our “is_individual” methodology, review the [methodology page](https://www.fec.gov/campaign-finance-data/about-campaign-finance-data/methodology). Unitemized individual contributions are not included. 
     * @param apiKey  API key for https://api.data.gov. Get one at https://api.data.gov/signup.  (required)
     * @param cycle  Filter records to only those that were applicable to a given two-year period.The cycle begins with an odd year and is named for its ending, even year.  (optional)
     * @param sortNullsLast Toggle that sorts null values last (optional, default to false)
     * @param page For paginating through results, starting at page 1 (optional, default to 1)
     * @param committeeId  A unique identifier assigned to each committee or filer registered with the FEC. In general committee id&#39;s begin with the letter C which is followed by eight digits.  (optional)
     * @param sortNullOnly Toggle that filters out all rows having sort column that is non-null (optional, default to false)
     * @param occupation Occupation of contributor as reported on the committee&#39;s filing (optional)
     * @param sortHideNull Hide null values on sorted column(s). (optional, default to false)
     * @param perPage The number of results returned per page. Defaults to 20. (optional, default to 20)
     * @param sort Provide a field to sort by. Use &#x60;-&#x60; for descending order.  (optional)
     * @return ScheduleAByOccupationPage
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ScheduleAByOccupationPage schedulesScheduleAByOccupationGet(String apiKey, List<Integer> cycle, Boolean sortNullsLast, Integer page, List<String> committeeId, Boolean sortNullOnly, List<String> occupation, Boolean sortHideNull, Integer perPage, String sort) throws ApiException {
        ApiResponse<ScheduleAByOccupationPage> localVarResp = schedulesScheduleAByOccupationGetWithHttpInfo(apiKey, cycle, sortNullsLast, page, committeeId, sortNullOnly, occupation, sortHideNull, perPage, sort);
        return localVarResp.getData();
    }

    /**
     * 
     *  This endpoint provides itemized individual contributions received by a committee, aggregated by the contributor’s occupation. If you are interested in our “is_individual” methodology, review the [methodology page](https://www.fec.gov/campaign-finance-data/about-campaign-finance-data/methodology). Unitemized individual contributions are not included. 
     * @param apiKey  API key for https://api.data.gov. Get one at https://api.data.gov/signup.  (required)
     * @param cycle  Filter records to only those that were applicable to a given two-year period.The cycle begins with an odd year and is named for its ending, even year.  (optional)
     * @param sortNullsLast Toggle that sorts null values last (optional, default to false)
     * @param page For paginating through results, starting at page 1 (optional, default to 1)
     * @param committeeId  A unique identifier assigned to each committee or filer registered with the FEC. In general committee id&#39;s begin with the letter C which is followed by eight digits.  (optional)
     * @param sortNullOnly Toggle that filters out all rows having sort column that is non-null (optional, default to false)
     * @param occupation Occupation of contributor as reported on the committee&#39;s filing (optional)
     * @param sortHideNull Hide null values on sorted column(s). (optional, default to false)
     * @param perPage The number of results returned per page. Defaults to 20. (optional, default to 20)
     * @param sort Provide a field to sort by. Use &#x60;-&#x60; for descending order.  (optional)
     * @return ApiResponse&lt;ScheduleAByOccupationPage&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ScheduleAByOccupationPage> schedulesScheduleAByOccupationGetWithHttpInfo(String apiKey, List<Integer> cycle, Boolean sortNullsLast, Integer page, List<String> committeeId, Boolean sortNullOnly, List<String> occupation, Boolean sortHideNull, Integer perPage, String sort) throws ApiException {
        okhttp3.Call localVarCall = schedulesScheduleAByOccupationGetValidateBeforeCall(apiKey, cycle, sortNullsLast, page, committeeId, sortNullOnly, occupation, sortHideNull, perPage, sort, null);
        Type localVarReturnType = new TypeToken<ScheduleAByOccupationPage>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     *  This endpoint provides itemized individual contributions received by a committee, aggregated by the contributor’s occupation. If you are interested in our “is_individual” methodology, review the [methodology page](https://www.fec.gov/campaign-finance-data/about-campaign-finance-data/methodology). Unitemized individual contributions are not included. 
     * @param apiKey  API key for https://api.data.gov. Get one at https://api.data.gov/signup.  (required)
     * @param cycle  Filter records to only those that were applicable to a given two-year period.The cycle begins with an odd year and is named for its ending, even year.  (optional)
     * @param sortNullsLast Toggle that sorts null values last (optional, default to false)
     * @param page For paginating through results, starting at page 1 (optional, default to 1)
     * @param committeeId  A unique identifier assigned to each committee or filer registered with the FEC. In general committee id&#39;s begin with the letter C which is followed by eight digits.  (optional)
     * @param sortNullOnly Toggle that filters out all rows having sort column that is non-null (optional, default to false)
     * @param occupation Occupation of contributor as reported on the committee&#39;s filing (optional)
     * @param sortHideNull Hide null values on sorted column(s). (optional, default to false)
     * @param perPage The number of results returned per page. Defaults to 20. (optional, default to 20)
     * @param sort Provide a field to sort by. Use &#x60;-&#x60; for descending order.  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call schedulesScheduleAByOccupationGetAsync(String apiKey, List<Integer> cycle, Boolean sortNullsLast, Integer page, List<String> committeeId, Boolean sortNullOnly, List<String> occupation, Boolean sortHideNull, Integer perPage, String sort, final ApiCallback<ScheduleAByOccupationPage> _callback) throws ApiException {

        okhttp3.Call localVarCall = schedulesScheduleAByOccupationGetValidateBeforeCall(apiKey, cycle, sortNullsLast, page, committeeId, sortNullOnly, occupation, sortHideNull, perPage, sort, _callback);
        Type localVarReturnType = new TypeToken<ScheduleAByOccupationPage>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for schedulesScheduleABySizeByCandidateGet
     * @param apiKey  API key for https://api.data.gov. Get one at https://api.data.gov/signup.  (required)
     * @param cycle  Filter records to only those that were applicable to a given two-year period.The cycle begins with an odd year and is named for its ending, even year.  (required)
     * @param candidateId  A unique identifier assigned to each candidate registered with the FEC. If a person runs for several offices, that person will have separate candidate IDs for each office. First character indicates office - [P]residential, [H]ouse, [S]enate]. Second character is the last digit of the two-year period the ID was created. Third and fourth is the candidate state. Presidential IDs don&#39;t have state. Fifth and sixth is the district when the candidate first ran. This does not change if the candidate/member&#39;s district changes during re-districting. Presidential IDs don&#39;t have districts. The rest is sequence.  (required)
     * @param electionFull &#x60;True&#x60; indicates that full election period of a candidate. &#x60;False&#x60; indicates that two year election cycle. (optional, default to true)
     * @param sortNullOnly Toggle that filters out all rows having sort column that is non-null (optional, default to false)
     * @param sortNullsLast Toggle that sorts null values last (optional, default to false)
     * @param page For paginating through results, starting at page 1 (optional, default to 1)
     * @param sortHideNull Hide null values on sorted column(s). (optional, default to false)
     * @param perPage The number of results returned per page. Defaults to 20. (optional, default to 20)
     * @param sort Provide a field to sort by. Use &#x60;-&#x60; for descending order.  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call schedulesScheduleABySizeByCandidateGetCall(String apiKey, List<Integer> cycle, List<String> candidateId, Boolean electionFull, Boolean sortNullOnly, Boolean sortNullsLast, Integer page, Boolean sortHideNull, Integer perPage, String sort, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/schedules/schedule_a/by_size/by_candidate/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiKey != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api_key", apiKey));
        }

        if (electionFull != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("election_full", electionFull));
        }

        if (cycle != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "cycle", cycle));
        }

        if (sortNullOnly != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort_null_only", sortNullOnly));
        }

        if (sortNullsLast != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort_nulls_last", sortNullsLast));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (sortHideNull != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort_hide_null", sortHideNull));
        }

        if (candidateId != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "candidate_id", candidateId));
        }

        if (perPage != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("per_page", perPage));
        }

        if (sort != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort", sort));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKeyHeaderAuth", "ApiKeyQueryAuth", "apiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call schedulesScheduleABySizeByCandidateGetValidateBeforeCall(String apiKey, List<Integer> cycle, List<String> candidateId, Boolean electionFull, Boolean sortNullOnly, Boolean sortNullsLast, Integer page, Boolean sortHideNull, Integer perPage, String sort, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'apiKey' is set
        if (apiKey == null) {
            throw new ApiException("Missing the required parameter 'apiKey' when calling schedulesScheduleABySizeByCandidateGet(Async)");
        }

        // verify the required parameter 'cycle' is set
        if (cycle == null) {
            throw new ApiException("Missing the required parameter 'cycle' when calling schedulesScheduleABySizeByCandidateGet(Async)");
        }

        // verify the required parameter 'candidateId' is set
        if (candidateId == null) {
            throw new ApiException("Missing the required parameter 'candidateId' when calling schedulesScheduleABySizeByCandidateGet(Async)");
        }

        return schedulesScheduleABySizeByCandidateGetCall(apiKey, cycle, candidateId, electionFull, sortNullOnly, sortNullsLast, page, sortHideNull, perPage, sort, _callback);

    }

    /**
     * 
     *  This endpoint provides itemized individual contributions received by a committee, aggregated by size of contribution and candidate. If you are interested in our “is_individual” methodology, review the [methodology page](https://www.fec.gov/campaign-finance-data/about-campaign-finance-data/methodology). Unitemized individual contributions are not included. 
     * @param apiKey  API key for https://api.data.gov. Get one at https://api.data.gov/signup.  (required)
     * @param cycle  Filter records to only those that were applicable to a given two-year period.The cycle begins with an odd year and is named for its ending, even year.  (required)
     * @param candidateId  A unique identifier assigned to each candidate registered with the FEC. If a person runs for several offices, that person will have separate candidate IDs for each office. First character indicates office - [P]residential, [H]ouse, [S]enate]. Second character is the last digit of the two-year period the ID was created. Third and fourth is the candidate state. Presidential IDs don&#39;t have state. Fifth and sixth is the district when the candidate first ran. This does not change if the candidate/member&#39;s district changes during re-districting. Presidential IDs don&#39;t have districts. The rest is sequence.  (required)
     * @param electionFull &#x60;True&#x60; indicates that full election period of a candidate. &#x60;False&#x60; indicates that two year election cycle. (optional, default to true)
     * @param sortNullOnly Toggle that filters out all rows having sort column that is non-null (optional, default to false)
     * @param sortNullsLast Toggle that sorts null values last (optional, default to false)
     * @param page For paginating through results, starting at page 1 (optional, default to 1)
     * @param sortHideNull Hide null values on sorted column(s). (optional, default to false)
     * @param perPage The number of results returned per page. Defaults to 20. (optional, default to 20)
     * @param sort Provide a field to sort by. Use &#x60;-&#x60; for descending order.  (optional)
     * @return ScheduleABySizeCandidatePage
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ScheduleABySizeCandidatePage schedulesScheduleABySizeByCandidateGet(String apiKey, List<Integer> cycle, List<String> candidateId, Boolean electionFull, Boolean sortNullOnly, Boolean sortNullsLast, Integer page, Boolean sortHideNull, Integer perPage, String sort) throws ApiException {
        ApiResponse<ScheduleABySizeCandidatePage> localVarResp = schedulesScheduleABySizeByCandidateGetWithHttpInfo(apiKey, cycle, candidateId, electionFull, sortNullOnly, sortNullsLast, page, sortHideNull, perPage, sort);
        return localVarResp.getData();
    }

    /**
     * 
     *  This endpoint provides itemized individual contributions received by a committee, aggregated by size of contribution and candidate. If you are interested in our “is_individual” methodology, review the [methodology page](https://www.fec.gov/campaign-finance-data/about-campaign-finance-data/methodology). Unitemized individual contributions are not included. 
     * @param apiKey  API key for https://api.data.gov. Get one at https://api.data.gov/signup.  (required)
     * @param cycle  Filter records to only those that were applicable to a given two-year period.The cycle begins with an odd year and is named for its ending, even year.  (required)
     * @param candidateId  A unique identifier assigned to each candidate registered with the FEC. If a person runs for several offices, that person will have separate candidate IDs for each office. First character indicates office - [P]residential, [H]ouse, [S]enate]. Second character is the last digit of the two-year period the ID was created. Third and fourth is the candidate state. Presidential IDs don&#39;t have state. Fifth and sixth is the district when the candidate first ran. This does not change if the candidate/member&#39;s district changes during re-districting. Presidential IDs don&#39;t have districts. The rest is sequence.  (required)
     * @param electionFull &#x60;True&#x60; indicates that full election period of a candidate. &#x60;False&#x60; indicates that two year election cycle. (optional, default to true)
     * @param sortNullOnly Toggle that filters out all rows having sort column that is non-null (optional, default to false)
     * @param sortNullsLast Toggle that sorts null values last (optional, default to false)
     * @param page For paginating through results, starting at page 1 (optional, default to 1)
     * @param sortHideNull Hide null values on sorted column(s). (optional, default to false)
     * @param perPage The number of results returned per page. Defaults to 20. (optional, default to 20)
     * @param sort Provide a field to sort by. Use &#x60;-&#x60; for descending order.  (optional)
     * @return ApiResponse&lt;ScheduleABySizeCandidatePage&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ScheduleABySizeCandidatePage> schedulesScheduleABySizeByCandidateGetWithHttpInfo(String apiKey, List<Integer> cycle, List<String> candidateId, Boolean electionFull, Boolean sortNullOnly, Boolean sortNullsLast, Integer page, Boolean sortHideNull, Integer perPage, String sort) throws ApiException {
        okhttp3.Call localVarCall = schedulesScheduleABySizeByCandidateGetValidateBeforeCall(apiKey, cycle, candidateId, electionFull, sortNullOnly, sortNullsLast, page, sortHideNull, perPage, sort, null);
        Type localVarReturnType = new TypeToken<ScheduleABySizeCandidatePage>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     *  This endpoint provides itemized individual contributions received by a committee, aggregated by size of contribution and candidate. If you are interested in our “is_individual” methodology, review the [methodology page](https://www.fec.gov/campaign-finance-data/about-campaign-finance-data/methodology). Unitemized individual contributions are not included. 
     * @param apiKey  API key for https://api.data.gov. Get one at https://api.data.gov/signup.  (required)
     * @param cycle  Filter records to only those that were applicable to a given two-year period.The cycle begins with an odd year and is named for its ending, even year.  (required)
     * @param candidateId  A unique identifier assigned to each candidate registered with the FEC. If a person runs for several offices, that person will have separate candidate IDs for each office. First character indicates office - [P]residential, [H]ouse, [S]enate]. Second character is the last digit of the two-year period the ID was created. Third and fourth is the candidate state. Presidential IDs don&#39;t have state. Fifth and sixth is the district when the candidate first ran. This does not change if the candidate/member&#39;s district changes during re-districting. Presidential IDs don&#39;t have districts. The rest is sequence.  (required)
     * @param electionFull &#x60;True&#x60; indicates that full election period of a candidate. &#x60;False&#x60; indicates that two year election cycle. (optional, default to true)
     * @param sortNullOnly Toggle that filters out all rows having sort column that is non-null (optional, default to false)
     * @param sortNullsLast Toggle that sorts null values last (optional, default to false)
     * @param page For paginating through results, starting at page 1 (optional, default to 1)
     * @param sortHideNull Hide null values on sorted column(s). (optional, default to false)
     * @param perPage The number of results returned per page. Defaults to 20. (optional, default to 20)
     * @param sort Provide a field to sort by. Use &#x60;-&#x60; for descending order.  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call schedulesScheduleABySizeByCandidateGetAsync(String apiKey, List<Integer> cycle, List<String> candidateId, Boolean electionFull, Boolean sortNullOnly, Boolean sortNullsLast, Integer page, Boolean sortHideNull, Integer perPage, String sort, final ApiCallback<ScheduleABySizeCandidatePage> _callback) throws ApiException {

        okhttp3.Call localVarCall = schedulesScheduleABySizeByCandidateGetValidateBeforeCall(apiKey, cycle, candidateId, electionFull, sortNullOnly, sortNullsLast, page, sortHideNull, perPage, sort, _callback);
        Type localVarReturnType = new TypeToken<ScheduleABySizeCandidatePage>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for schedulesScheduleABySizeGet
     * @param apiKey  API key for https://api.data.gov. Get one at https://api.data.gov/signup.  (required)
     * @param cycle  Filter records to only those that were applicable to a given two-year period.The cycle begins with an odd year and is named for its ending, even year.  (optional)
     * @param sortNullsLast Toggle that sorts null values last (optional, default to false)
     * @param page For paginating through results, starting at page 1 (optional, default to 1)
     * @param committeeId  A unique identifier assigned to each committee or filer registered with the FEC. In general committee id&#39;s begin with the letter C which is followed by eight digits.  (optional)
     * @param sortNullOnly Toggle that filters out all rows having sort column that is non-null (optional, default to false)
     * @param size  The total all contributions in the following ranges: &#x60;&#x60;&#x60;   -0    $200 and under   -200  $200.01 - $499.99   -500  $500 - $999.99   -1000 $1000 - $1999.99   -2000 $2000 + &#x60;&#x60;&#x60; Unitemized contributions are included in the &#x60;0&#x60; category.  (optional)
     * @param sortHideNull Hide null values on sorted column(s). (optional, default to false)
     * @param perPage The number of results returned per page. Defaults to 20. (optional, default to 20)
     * @param sort Provide a field to sort by. Use &#x60;-&#x60; for descending order.  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call schedulesScheduleABySizeGetCall(String apiKey, List<Integer> cycle, Boolean sortNullsLast, Integer page, List<String> committeeId, Boolean sortNullOnly, List<Integer> size, Boolean sortHideNull, Integer perPage, String sort, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/schedules/schedule_a/by_size/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiKey != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api_key", apiKey));
        }

        if (cycle != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "cycle", cycle));
        }

        if (sortNullsLast != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort_nulls_last", sortNullsLast));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (committeeId != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "committee_id", committeeId));
        }

        if (sortNullOnly != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort_null_only", sortNullOnly));
        }

        if (size != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "size", size));
        }

        if (sortHideNull != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort_hide_null", sortHideNull));
        }

        if (perPage != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("per_page", perPage));
        }

        if (sort != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort", sort));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKeyHeaderAuth", "ApiKeyQueryAuth", "apiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call schedulesScheduleABySizeGetValidateBeforeCall(String apiKey, List<Integer> cycle, Boolean sortNullsLast, Integer page, List<String> committeeId, Boolean sortNullOnly, List<Integer> size, Boolean sortHideNull, Integer perPage, String sort, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'apiKey' is set
        if (apiKey == null) {
            throw new ApiException("Missing the required parameter 'apiKey' when calling schedulesScheduleABySizeGet(Async)");
        }

        return schedulesScheduleABySizeGetCall(apiKey, cycle, sortNullsLast, page, committeeId, sortNullOnly, size, sortHideNull, perPage, sort, _callback);

    }

    /**
     * 
     *  This endpoint provides individual contributions received by a committee, aggregated by size:  &#x60;&#x60;&#x60;  - $200 and under  - $200.01 - $499.99  - $500 - $999.99  - $1000 - $1999.99  - $2000 + &#x60;&#x60;&#x60;  The $200.00 and under category includes contributions of $200 or less combined with unitemized individual contributions. 
     * @param apiKey  API key for https://api.data.gov. Get one at https://api.data.gov/signup.  (required)
     * @param cycle  Filter records to only those that were applicable to a given two-year period.The cycle begins with an odd year and is named for its ending, even year.  (optional)
     * @param sortNullsLast Toggle that sorts null values last (optional, default to false)
     * @param page For paginating through results, starting at page 1 (optional, default to 1)
     * @param committeeId  A unique identifier assigned to each committee or filer registered with the FEC. In general committee id&#39;s begin with the letter C which is followed by eight digits.  (optional)
     * @param sortNullOnly Toggle that filters out all rows having sort column that is non-null (optional, default to false)
     * @param size  The total all contributions in the following ranges: &#x60;&#x60;&#x60;   -0    $200 and under   -200  $200.01 - $499.99   -500  $500 - $999.99   -1000 $1000 - $1999.99   -2000 $2000 + &#x60;&#x60;&#x60; Unitemized contributions are included in the &#x60;0&#x60; category.  (optional)
     * @param sortHideNull Hide null values on sorted column(s). (optional, default to false)
     * @param perPage The number of results returned per page. Defaults to 20. (optional, default to 20)
     * @param sort Provide a field to sort by. Use &#x60;-&#x60; for descending order.  (optional)
     * @return ScheduleABySizePage
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ScheduleABySizePage schedulesScheduleABySizeGet(String apiKey, List<Integer> cycle, Boolean sortNullsLast, Integer page, List<String> committeeId, Boolean sortNullOnly, List<Integer> size, Boolean sortHideNull, Integer perPage, String sort) throws ApiException {
        ApiResponse<ScheduleABySizePage> localVarResp = schedulesScheduleABySizeGetWithHttpInfo(apiKey, cycle, sortNullsLast, page, committeeId, sortNullOnly, size, sortHideNull, perPage, sort);
        return localVarResp.getData();
    }

    /**
     * 
     *  This endpoint provides individual contributions received by a committee, aggregated by size:  &#x60;&#x60;&#x60;  - $200 and under  - $200.01 - $499.99  - $500 - $999.99  - $1000 - $1999.99  - $2000 + &#x60;&#x60;&#x60;  The $200.00 and under category includes contributions of $200 or less combined with unitemized individual contributions. 
     * @param apiKey  API key for https://api.data.gov. Get one at https://api.data.gov/signup.  (required)
     * @param cycle  Filter records to only those that were applicable to a given two-year period.The cycle begins with an odd year and is named for its ending, even year.  (optional)
     * @param sortNullsLast Toggle that sorts null values last (optional, default to false)
     * @param page For paginating through results, starting at page 1 (optional, default to 1)
     * @param committeeId  A unique identifier assigned to each committee or filer registered with the FEC. In general committee id&#39;s begin with the letter C which is followed by eight digits.  (optional)
     * @param sortNullOnly Toggle that filters out all rows having sort column that is non-null (optional, default to false)
     * @param size  The total all contributions in the following ranges: &#x60;&#x60;&#x60;   -0    $200 and under   -200  $200.01 - $499.99   -500  $500 - $999.99   -1000 $1000 - $1999.99   -2000 $2000 + &#x60;&#x60;&#x60; Unitemized contributions are included in the &#x60;0&#x60; category.  (optional)
     * @param sortHideNull Hide null values on sorted column(s). (optional, default to false)
     * @param perPage The number of results returned per page. Defaults to 20. (optional, default to 20)
     * @param sort Provide a field to sort by. Use &#x60;-&#x60; for descending order.  (optional)
     * @return ApiResponse&lt;ScheduleABySizePage&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ScheduleABySizePage> schedulesScheduleABySizeGetWithHttpInfo(String apiKey, List<Integer> cycle, Boolean sortNullsLast, Integer page, List<String> committeeId, Boolean sortNullOnly, List<Integer> size, Boolean sortHideNull, Integer perPage, String sort) throws ApiException {
        okhttp3.Call localVarCall = schedulesScheduleABySizeGetValidateBeforeCall(apiKey, cycle, sortNullsLast, page, committeeId, sortNullOnly, size, sortHideNull, perPage, sort, null);
        Type localVarReturnType = new TypeToken<ScheduleABySizePage>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     *  This endpoint provides individual contributions received by a committee, aggregated by size:  &#x60;&#x60;&#x60;  - $200 and under  - $200.01 - $499.99  - $500 - $999.99  - $1000 - $1999.99  - $2000 + &#x60;&#x60;&#x60;  The $200.00 and under category includes contributions of $200 or less combined with unitemized individual contributions. 
     * @param apiKey  API key for https://api.data.gov. Get one at https://api.data.gov/signup.  (required)
     * @param cycle  Filter records to only those that were applicable to a given two-year period.The cycle begins with an odd year and is named for its ending, even year.  (optional)
     * @param sortNullsLast Toggle that sorts null values last (optional, default to false)
     * @param page For paginating through results, starting at page 1 (optional, default to 1)
     * @param committeeId  A unique identifier assigned to each committee or filer registered with the FEC. In general committee id&#39;s begin with the letter C which is followed by eight digits.  (optional)
     * @param sortNullOnly Toggle that filters out all rows having sort column that is non-null (optional, default to false)
     * @param size  The total all contributions in the following ranges: &#x60;&#x60;&#x60;   -0    $200 and under   -200  $200.01 - $499.99   -500  $500 - $999.99   -1000 $1000 - $1999.99   -2000 $2000 + &#x60;&#x60;&#x60; Unitemized contributions are included in the &#x60;0&#x60; category.  (optional)
     * @param sortHideNull Hide null values on sorted column(s). (optional, default to false)
     * @param perPage The number of results returned per page. Defaults to 20. (optional, default to 20)
     * @param sort Provide a field to sort by. Use &#x60;-&#x60; for descending order.  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call schedulesScheduleABySizeGetAsync(String apiKey, List<Integer> cycle, Boolean sortNullsLast, Integer page, List<String> committeeId, Boolean sortNullOnly, List<Integer> size, Boolean sortHideNull, Integer perPage, String sort, final ApiCallback<ScheduleABySizePage> _callback) throws ApiException {

        okhttp3.Call localVarCall = schedulesScheduleABySizeGetValidateBeforeCall(apiKey, cycle, sortNullsLast, page, committeeId, sortNullOnly, size, sortHideNull, perPage, sort, _callback);
        Type localVarReturnType = new TypeToken<ScheduleABySizePage>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for schedulesScheduleAByStateByCandidateGet
     * @param apiKey  API key for https://api.data.gov. Get one at https://api.data.gov/signup.  (required)
     * @param cycle  Filter records to only those that were applicable to a given two-year period.The cycle begins with an odd year and is named for its ending, even year.  (required)
     * @param candidateId  A unique identifier assigned to each candidate registered with the FEC. If a person runs for several offices, that person will have separate candidate IDs for each office. First character indicates office - [P]residential, [H]ouse, [S]enate]. Second character is the last digit of the two-year period the ID was created. Third and fourth is the candidate state. Presidential IDs don&#39;t have state. Fifth and sixth is the district when the candidate first ran. This does not change if the candidate/member&#39;s district changes during re-districting. Presidential IDs don&#39;t have districts. The rest is sequence.  (required)
     * @param electionFull &#x60;True&#x60; indicates that full election period of a candidate. &#x60;False&#x60; indicates that two year election cycle. (optional, default to true)
     * @param sortNullOnly Toggle that filters out all rows having sort column that is non-null (optional, default to false)
     * @param sortNullsLast Toggle that sorts null values last (optional, default to false)
     * @param page For paginating through results, starting at page 1 (optional, default to 1)
     * @param sortHideNull Hide null values on sorted column(s). (optional, default to false)
     * @param perPage The number of results returned per page. Defaults to 20. (optional, default to 20)
     * @param sort Provide a field to sort by. Use &#x60;-&#x60; for descending order.  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call schedulesScheduleAByStateByCandidateGetCall(String apiKey, List<Integer> cycle, List<String> candidateId, Boolean electionFull, Boolean sortNullOnly, Boolean sortNullsLast, Integer page, Boolean sortHideNull, Integer perPage, String sort, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/schedules/schedule_a/by_state/by_candidate/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiKey != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api_key", apiKey));
        }

        if (electionFull != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("election_full", electionFull));
        }

        if (cycle != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "cycle", cycle));
        }

        if (sortNullOnly != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort_null_only", sortNullOnly));
        }

        if (sortNullsLast != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort_nulls_last", sortNullsLast));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (sortHideNull != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort_hide_null", sortHideNull));
        }

        if (candidateId != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "candidate_id", candidateId));
        }

        if (perPage != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("per_page", perPage));
        }

        if (sort != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort", sort));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKeyHeaderAuth", "ApiKeyQueryAuth", "apiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call schedulesScheduleAByStateByCandidateGetValidateBeforeCall(String apiKey, List<Integer> cycle, List<String> candidateId, Boolean electionFull, Boolean sortNullOnly, Boolean sortNullsLast, Integer page, Boolean sortHideNull, Integer perPage, String sort, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'apiKey' is set
        if (apiKey == null) {
            throw new ApiException("Missing the required parameter 'apiKey' when calling schedulesScheduleAByStateByCandidateGet(Async)");
        }

        // verify the required parameter 'cycle' is set
        if (cycle == null) {
            throw new ApiException("Missing the required parameter 'cycle' when calling schedulesScheduleAByStateByCandidateGet(Async)");
        }

        // verify the required parameter 'candidateId' is set
        if (candidateId == null) {
            throw new ApiException("Missing the required parameter 'candidateId' when calling schedulesScheduleAByStateByCandidateGet(Async)");
        }

        return schedulesScheduleAByStateByCandidateGetCall(apiKey, cycle, candidateId, electionFull, sortNullOnly, sortNullsLast, page, sortHideNull, perPage, sort, _callback);

    }

    /**
     * 
     *  This endpoint provides itemized individual contributions received by a committee, aggregated by contributor’s state and candidate. If you are interested in our “is_individual” methodology, review the [methodology page](https://www.fec.gov/campaign-finance-data/about-campaign-finance-data/methodology). Unitemized individual contributions are not included. 
     * @param apiKey  API key for https://api.data.gov. Get one at https://api.data.gov/signup.  (required)
     * @param cycle  Filter records to only those that were applicable to a given two-year period.The cycle begins with an odd year and is named for its ending, even year.  (required)
     * @param candidateId  A unique identifier assigned to each candidate registered with the FEC. If a person runs for several offices, that person will have separate candidate IDs for each office. First character indicates office - [P]residential, [H]ouse, [S]enate]. Second character is the last digit of the two-year period the ID was created. Third and fourth is the candidate state. Presidential IDs don&#39;t have state. Fifth and sixth is the district when the candidate first ran. This does not change if the candidate/member&#39;s district changes during re-districting. Presidential IDs don&#39;t have districts. The rest is sequence.  (required)
     * @param electionFull &#x60;True&#x60; indicates that full election period of a candidate. &#x60;False&#x60; indicates that two year election cycle. (optional, default to true)
     * @param sortNullOnly Toggle that filters out all rows having sort column that is non-null (optional, default to false)
     * @param sortNullsLast Toggle that sorts null values last (optional, default to false)
     * @param page For paginating through results, starting at page 1 (optional, default to 1)
     * @param sortHideNull Hide null values on sorted column(s). (optional, default to false)
     * @param perPage The number of results returned per page. Defaults to 20. (optional, default to 20)
     * @param sort Provide a field to sort by. Use &#x60;-&#x60; for descending order.  (optional)
     * @return ScheduleAByStateCandidatePage
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ScheduleAByStateCandidatePage schedulesScheduleAByStateByCandidateGet(String apiKey, List<Integer> cycle, List<String> candidateId, Boolean electionFull, Boolean sortNullOnly, Boolean sortNullsLast, Integer page, Boolean sortHideNull, Integer perPage, String sort) throws ApiException {
        ApiResponse<ScheduleAByStateCandidatePage> localVarResp = schedulesScheduleAByStateByCandidateGetWithHttpInfo(apiKey, cycle, candidateId, electionFull, sortNullOnly, sortNullsLast, page, sortHideNull, perPage, sort);
        return localVarResp.getData();
    }

    /**
     * 
     *  This endpoint provides itemized individual contributions received by a committee, aggregated by contributor’s state and candidate. If you are interested in our “is_individual” methodology, review the [methodology page](https://www.fec.gov/campaign-finance-data/about-campaign-finance-data/methodology). Unitemized individual contributions are not included. 
     * @param apiKey  API key for https://api.data.gov. Get one at https://api.data.gov/signup.  (required)
     * @param cycle  Filter records to only those that were applicable to a given two-year period.The cycle begins with an odd year and is named for its ending, even year.  (required)
     * @param candidateId  A unique identifier assigned to each candidate registered with the FEC. If a person runs for several offices, that person will have separate candidate IDs for each office. First character indicates office - [P]residential, [H]ouse, [S]enate]. Second character is the last digit of the two-year period the ID was created. Third and fourth is the candidate state. Presidential IDs don&#39;t have state. Fifth and sixth is the district when the candidate first ran. This does not change if the candidate/member&#39;s district changes during re-districting. Presidential IDs don&#39;t have districts. The rest is sequence.  (required)
     * @param electionFull &#x60;True&#x60; indicates that full election period of a candidate. &#x60;False&#x60; indicates that two year election cycle. (optional, default to true)
     * @param sortNullOnly Toggle that filters out all rows having sort column that is non-null (optional, default to false)
     * @param sortNullsLast Toggle that sorts null values last (optional, default to false)
     * @param page For paginating through results, starting at page 1 (optional, default to 1)
     * @param sortHideNull Hide null values on sorted column(s). (optional, default to false)
     * @param perPage The number of results returned per page. Defaults to 20. (optional, default to 20)
     * @param sort Provide a field to sort by. Use &#x60;-&#x60; for descending order.  (optional)
     * @return ApiResponse&lt;ScheduleAByStateCandidatePage&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ScheduleAByStateCandidatePage> schedulesScheduleAByStateByCandidateGetWithHttpInfo(String apiKey, List<Integer> cycle, List<String> candidateId, Boolean electionFull, Boolean sortNullOnly, Boolean sortNullsLast, Integer page, Boolean sortHideNull, Integer perPage, String sort) throws ApiException {
        okhttp3.Call localVarCall = schedulesScheduleAByStateByCandidateGetValidateBeforeCall(apiKey, cycle, candidateId, electionFull, sortNullOnly, sortNullsLast, page, sortHideNull, perPage, sort, null);
        Type localVarReturnType = new TypeToken<ScheduleAByStateCandidatePage>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     *  This endpoint provides itemized individual contributions received by a committee, aggregated by contributor’s state and candidate. If you are interested in our “is_individual” methodology, review the [methodology page](https://www.fec.gov/campaign-finance-data/about-campaign-finance-data/methodology). Unitemized individual contributions are not included. 
     * @param apiKey  API key for https://api.data.gov. Get one at https://api.data.gov/signup.  (required)
     * @param cycle  Filter records to only those that were applicable to a given two-year period.The cycle begins with an odd year and is named for its ending, even year.  (required)
     * @param candidateId  A unique identifier assigned to each candidate registered with the FEC. If a person runs for several offices, that person will have separate candidate IDs for each office. First character indicates office - [P]residential, [H]ouse, [S]enate]. Second character is the last digit of the two-year period the ID was created. Third and fourth is the candidate state. Presidential IDs don&#39;t have state. Fifth and sixth is the district when the candidate first ran. This does not change if the candidate/member&#39;s district changes during re-districting. Presidential IDs don&#39;t have districts. The rest is sequence.  (required)
     * @param electionFull &#x60;True&#x60; indicates that full election period of a candidate. &#x60;False&#x60; indicates that two year election cycle. (optional, default to true)
     * @param sortNullOnly Toggle that filters out all rows having sort column that is non-null (optional, default to false)
     * @param sortNullsLast Toggle that sorts null values last (optional, default to false)
     * @param page For paginating through results, starting at page 1 (optional, default to 1)
     * @param sortHideNull Hide null values on sorted column(s). (optional, default to false)
     * @param perPage The number of results returned per page. Defaults to 20. (optional, default to 20)
     * @param sort Provide a field to sort by. Use &#x60;-&#x60; for descending order.  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call schedulesScheduleAByStateByCandidateGetAsync(String apiKey, List<Integer> cycle, List<String> candidateId, Boolean electionFull, Boolean sortNullOnly, Boolean sortNullsLast, Integer page, Boolean sortHideNull, Integer perPage, String sort, final ApiCallback<ScheduleAByStateCandidatePage> _callback) throws ApiException {

        okhttp3.Call localVarCall = schedulesScheduleAByStateByCandidateGetValidateBeforeCall(apiKey, cycle, candidateId, electionFull, sortNullOnly, sortNullsLast, page, sortHideNull, perPage, sort, _callback);
        Type localVarReturnType = new TypeToken<ScheduleAByStateCandidatePage>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for schedulesScheduleAByStateByCandidateTotalsGet
     * @param apiKey  API key for https://api.data.gov. Get one at https://api.data.gov/signup.  (required)
     * @param cycle  Filter records to only those that were applicable to a given two-year period.The cycle begins with an odd year and is named for its ending, even year.  (required)
     * @param candidateId  A unique identifier assigned to each candidate registered with the FEC. If a person runs for several offices, that person will have separate candidate IDs for each office. First character indicates office - [P]residential, [H]ouse, [S]enate]. Second character is the last digit of the two-year period the ID was created. Third and fourth is the candidate state. Presidential IDs don&#39;t have state. Fifth and sixth is the district when the candidate first ran. This does not change if the candidate/member&#39;s district changes during re-districting. Presidential IDs don&#39;t have districts. The rest is sequence.  (required)
     * @param electionFull &#x60;True&#x60; indicates that full election period of a candidate. &#x60;False&#x60; indicates that two year election cycle. (optional, default to true)
     * @param sortNullOnly Toggle that filters out all rows having sort column that is non-null (optional, default to false)
     * @param sortNullsLast Toggle that sorts null values last (optional, default to false)
     * @param page For paginating through results, starting at page 1 (optional, default to 1)
     * @param sortHideNull Hide null values on sorted column(s). (optional, default to false)
     * @param perPage The number of results returned per page. Defaults to 20. (optional, default to 20)
     * @param sort Provide a field to sort by. Use &#x60;-&#x60; for descending order.  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call schedulesScheduleAByStateByCandidateTotalsGetCall(String apiKey, List<Integer> cycle, List<String> candidateId, Boolean electionFull, Boolean sortNullOnly, Boolean sortNullsLast, Integer page, Boolean sortHideNull, Integer perPage, String sort, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/schedules/schedule_a/by_state/by_candidate/totals/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiKey != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api_key", apiKey));
        }

        if (electionFull != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("election_full", electionFull));
        }

        if (cycle != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "cycle", cycle));
        }

        if (sortNullOnly != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort_null_only", sortNullOnly));
        }

        if (sortNullsLast != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort_nulls_last", sortNullsLast));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (sortHideNull != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort_hide_null", sortHideNull));
        }

        if (candidateId != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "candidate_id", candidateId));
        }

        if (perPage != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("per_page", perPage));
        }

        if (sort != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort", sort));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKeyHeaderAuth", "ApiKeyQueryAuth", "apiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call schedulesScheduleAByStateByCandidateTotalsGetValidateBeforeCall(String apiKey, List<Integer> cycle, List<String> candidateId, Boolean electionFull, Boolean sortNullOnly, Boolean sortNullsLast, Integer page, Boolean sortHideNull, Integer perPage, String sort, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'apiKey' is set
        if (apiKey == null) {
            throw new ApiException("Missing the required parameter 'apiKey' when calling schedulesScheduleAByStateByCandidateTotalsGet(Async)");
        }

        // verify the required parameter 'cycle' is set
        if (cycle == null) {
            throw new ApiException("Missing the required parameter 'cycle' when calling schedulesScheduleAByStateByCandidateTotalsGet(Async)");
        }

        // verify the required parameter 'candidateId' is set
        if (candidateId == null) {
            throw new ApiException("Missing the required parameter 'candidateId' when calling schedulesScheduleAByStateByCandidateTotalsGet(Async)");
        }

        return schedulesScheduleAByStateByCandidateTotalsGetCall(apiKey, cycle, candidateId, electionFull, sortNullOnly, sortNullsLast, page, sortHideNull, perPage, sort, _callback);

    }

    /**
     * 
     *  Itemized individual contributions aggregated by contributor’s state, candidate, committee type and cycle. If you are interested in our “is_individual” methodology, review the [methodology page](https://www.fec.gov/campaign-finance-data/about-campaign-finance-data/methodology). Unitemized individual contributions are not included.  
     * @param apiKey  API key for https://api.data.gov. Get one at https://api.data.gov/signup.  (required)
     * @param cycle  Filter records to only those that were applicable to a given two-year period.The cycle begins with an odd year and is named for its ending, even year.  (required)
     * @param candidateId  A unique identifier assigned to each candidate registered with the FEC. If a person runs for several offices, that person will have separate candidate IDs for each office. First character indicates office - [P]residential, [H]ouse, [S]enate]. Second character is the last digit of the two-year period the ID was created. Third and fourth is the candidate state. Presidential IDs don&#39;t have state. Fifth and sixth is the district when the candidate first ran. This does not change if the candidate/member&#39;s district changes during re-districting. Presidential IDs don&#39;t have districts. The rest is sequence.  (required)
     * @param electionFull &#x60;True&#x60; indicates that full election period of a candidate. &#x60;False&#x60; indicates that two year election cycle. (optional, default to true)
     * @param sortNullOnly Toggle that filters out all rows having sort column that is non-null (optional, default to false)
     * @param sortNullsLast Toggle that sorts null values last (optional, default to false)
     * @param page For paginating through results, starting at page 1 (optional, default to 1)
     * @param sortHideNull Hide null values on sorted column(s). (optional, default to false)
     * @param perPage The number of results returned per page. Defaults to 20. (optional, default to 20)
     * @param sort Provide a field to sort by. Use &#x60;-&#x60; for descending order.  (optional)
     * @return ScheduleAByStateCandidatePage
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ScheduleAByStateCandidatePage schedulesScheduleAByStateByCandidateTotalsGet(String apiKey, List<Integer> cycle, List<String> candidateId, Boolean electionFull, Boolean sortNullOnly, Boolean sortNullsLast, Integer page, Boolean sortHideNull, Integer perPage, String sort) throws ApiException {
        ApiResponse<ScheduleAByStateCandidatePage> localVarResp = schedulesScheduleAByStateByCandidateTotalsGetWithHttpInfo(apiKey, cycle, candidateId, electionFull, sortNullOnly, sortNullsLast, page, sortHideNull, perPage, sort);
        return localVarResp.getData();
    }

    /**
     * 
     *  Itemized individual contributions aggregated by contributor’s state, candidate, committee type and cycle. If you are interested in our “is_individual” methodology, review the [methodology page](https://www.fec.gov/campaign-finance-data/about-campaign-finance-data/methodology). Unitemized individual contributions are not included.  
     * @param apiKey  API key for https://api.data.gov. Get one at https://api.data.gov/signup.  (required)
     * @param cycle  Filter records to only those that were applicable to a given two-year period.The cycle begins with an odd year and is named for its ending, even year.  (required)
     * @param candidateId  A unique identifier assigned to each candidate registered with the FEC. If a person runs for several offices, that person will have separate candidate IDs for each office. First character indicates office - [P]residential, [H]ouse, [S]enate]. Second character is the last digit of the two-year period the ID was created. Third and fourth is the candidate state. Presidential IDs don&#39;t have state. Fifth and sixth is the district when the candidate first ran. This does not change if the candidate/member&#39;s district changes during re-districting. Presidential IDs don&#39;t have districts. The rest is sequence.  (required)
     * @param electionFull &#x60;True&#x60; indicates that full election period of a candidate. &#x60;False&#x60; indicates that two year election cycle. (optional, default to true)
     * @param sortNullOnly Toggle that filters out all rows having sort column that is non-null (optional, default to false)
     * @param sortNullsLast Toggle that sorts null values last (optional, default to false)
     * @param page For paginating through results, starting at page 1 (optional, default to 1)
     * @param sortHideNull Hide null values on sorted column(s). (optional, default to false)
     * @param perPage The number of results returned per page. Defaults to 20. (optional, default to 20)
     * @param sort Provide a field to sort by. Use &#x60;-&#x60; for descending order.  (optional)
     * @return ApiResponse&lt;ScheduleAByStateCandidatePage&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ScheduleAByStateCandidatePage> schedulesScheduleAByStateByCandidateTotalsGetWithHttpInfo(String apiKey, List<Integer> cycle, List<String> candidateId, Boolean electionFull, Boolean sortNullOnly, Boolean sortNullsLast, Integer page, Boolean sortHideNull, Integer perPage, String sort) throws ApiException {
        okhttp3.Call localVarCall = schedulesScheduleAByStateByCandidateTotalsGetValidateBeforeCall(apiKey, cycle, candidateId, electionFull, sortNullOnly, sortNullsLast, page, sortHideNull, perPage, sort, null);
        Type localVarReturnType = new TypeToken<ScheduleAByStateCandidatePage>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     *  Itemized individual contributions aggregated by contributor’s state, candidate, committee type and cycle. If you are interested in our “is_individual” methodology, review the [methodology page](https://www.fec.gov/campaign-finance-data/about-campaign-finance-data/methodology). Unitemized individual contributions are not included.  
     * @param apiKey  API key for https://api.data.gov. Get one at https://api.data.gov/signup.  (required)
     * @param cycle  Filter records to only those that were applicable to a given two-year period.The cycle begins with an odd year and is named for its ending, even year.  (required)
     * @param candidateId  A unique identifier assigned to each candidate registered with the FEC. If a person runs for several offices, that person will have separate candidate IDs for each office. First character indicates office - [P]residential, [H]ouse, [S]enate]. Second character is the last digit of the two-year period the ID was created. Third and fourth is the candidate state. Presidential IDs don&#39;t have state. Fifth and sixth is the district when the candidate first ran. This does not change if the candidate/member&#39;s district changes during re-districting. Presidential IDs don&#39;t have districts. The rest is sequence.  (required)
     * @param electionFull &#x60;True&#x60; indicates that full election period of a candidate. &#x60;False&#x60; indicates that two year election cycle. (optional, default to true)
     * @param sortNullOnly Toggle that filters out all rows having sort column that is non-null (optional, default to false)
     * @param sortNullsLast Toggle that sorts null values last (optional, default to false)
     * @param page For paginating through results, starting at page 1 (optional, default to 1)
     * @param sortHideNull Hide null values on sorted column(s). (optional, default to false)
     * @param perPage The number of results returned per page. Defaults to 20. (optional, default to 20)
     * @param sort Provide a field to sort by. Use &#x60;-&#x60; for descending order.  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call schedulesScheduleAByStateByCandidateTotalsGetAsync(String apiKey, List<Integer> cycle, List<String> candidateId, Boolean electionFull, Boolean sortNullOnly, Boolean sortNullsLast, Integer page, Boolean sortHideNull, Integer perPage, String sort, final ApiCallback<ScheduleAByStateCandidatePage> _callback) throws ApiException {

        okhttp3.Call localVarCall = schedulesScheduleAByStateByCandidateTotalsGetValidateBeforeCall(apiKey, cycle, candidateId, electionFull, sortNullOnly, sortNullsLast, page, sortHideNull, perPage, sort, _callback);
        Type localVarReturnType = new TypeToken<ScheduleAByStateCandidatePage>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for schedulesScheduleAByStateGet
     * @param apiKey  API key for https://api.data.gov. Get one at https://api.data.gov/signup.  (required)
     * @param hideNull Exclude values with missing state (optional, default to false)
     * @param cycle  Filter records to only those that were applicable to a given two-year period.The cycle begins with an odd year and is named for its ending, even year.  (optional)
     * @param sortNullOnly Toggle that filters out all rows having sort column that is non-null (optional, default to false)
     * @param page For paginating through results, starting at page 1 (optional, default to 1)
     * @param state State of contributor (optional)
     * @param committeeId  A unique identifier assigned to each committee or filer registered with the FEC. In general committee id&#39;s begin with the letter C which is followed by eight digits.  (optional)
     * @param sortNullsLast Toggle that sorts null values last (optional, default to false)
     * @param sortHideNull Hide null values on sorted column(s). (optional, default to false)
     * @param perPage The number of results returned per page. Defaults to 20. (optional, default to 20)
     * @param sort Provide a field to sort by. Use &#x60;-&#x60; for descending order.  (optional, default to -total)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call schedulesScheduleAByStateGetCall(String apiKey, Boolean hideNull, List<Integer> cycle, Boolean sortNullOnly, Integer page, List<String> state, List<String> committeeId, Boolean sortNullsLast, Boolean sortHideNull, Integer perPage, String sort, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/schedules/schedule_a/by_state/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiKey != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api_key", apiKey));
        }

        if (hideNull != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("hide_null", hideNull));
        }

        if (cycle != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "cycle", cycle));
        }

        if (sortNullOnly != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort_null_only", sortNullOnly));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (state != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "state", state));
        }

        if (committeeId != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "committee_id", committeeId));
        }

        if (sortNullsLast != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort_nulls_last", sortNullsLast));
        }

        if (sortHideNull != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort_hide_null", sortHideNull));
        }

        if (perPage != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("per_page", perPage));
        }

        if (sort != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort", sort));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKeyHeaderAuth", "ApiKeyQueryAuth", "apiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call schedulesScheduleAByStateGetValidateBeforeCall(String apiKey, Boolean hideNull, List<Integer> cycle, Boolean sortNullOnly, Integer page, List<String> state, List<String> committeeId, Boolean sortNullsLast, Boolean sortHideNull, Integer perPage, String sort, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'apiKey' is set
        if (apiKey == null) {
            throw new ApiException("Missing the required parameter 'apiKey' when calling schedulesScheduleAByStateGet(Async)");
        }

        return schedulesScheduleAByStateGetCall(apiKey, hideNull, cycle, sortNullOnly, page, state, committeeId, sortNullsLast, sortHideNull, perPage, sort, _callback);

    }

    /**
     * 
     *  This endpoint provides itemized individual contributions received by a committee, aggregated by the contributor’s state. If you are interested in our “is_individual” methodology, review the [methodology page](https://www.fec.gov/campaign-finance-data/about-campaign-finance-data/methodology). Unitemized individual contributions are not included. 
     * @param apiKey  API key for https://api.data.gov. Get one at https://api.data.gov/signup.  (required)
     * @param hideNull Exclude values with missing state (optional, default to false)
     * @param cycle  Filter records to only those that were applicable to a given two-year period.The cycle begins with an odd year and is named for its ending, even year.  (optional)
     * @param sortNullOnly Toggle that filters out all rows having sort column that is non-null (optional, default to false)
     * @param page For paginating through results, starting at page 1 (optional, default to 1)
     * @param state State of contributor (optional)
     * @param committeeId  A unique identifier assigned to each committee or filer registered with the FEC. In general committee id&#39;s begin with the letter C which is followed by eight digits.  (optional)
     * @param sortNullsLast Toggle that sorts null values last (optional, default to false)
     * @param sortHideNull Hide null values on sorted column(s). (optional, default to false)
     * @param perPage The number of results returned per page. Defaults to 20. (optional, default to 20)
     * @param sort Provide a field to sort by. Use &#x60;-&#x60; for descending order.  (optional, default to -total)
     * @return ScheduleAByStatePage
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ScheduleAByStatePage schedulesScheduleAByStateGet(String apiKey, Boolean hideNull, List<Integer> cycle, Boolean sortNullOnly, Integer page, List<String> state, List<String> committeeId, Boolean sortNullsLast, Boolean sortHideNull, Integer perPage, String sort) throws ApiException {
        ApiResponse<ScheduleAByStatePage> localVarResp = schedulesScheduleAByStateGetWithHttpInfo(apiKey, hideNull, cycle, sortNullOnly, page, state, committeeId, sortNullsLast, sortHideNull, perPage, sort);
        return localVarResp.getData();
    }

    /**
     * 
     *  This endpoint provides itemized individual contributions received by a committee, aggregated by the contributor’s state. If you are interested in our “is_individual” methodology, review the [methodology page](https://www.fec.gov/campaign-finance-data/about-campaign-finance-data/methodology). Unitemized individual contributions are not included. 
     * @param apiKey  API key for https://api.data.gov. Get one at https://api.data.gov/signup.  (required)
     * @param hideNull Exclude values with missing state (optional, default to false)
     * @param cycle  Filter records to only those that were applicable to a given two-year period.The cycle begins with an odd year and is named for its ending, even year.  (optional)
     * @param sortNullOnly Toggle that filters out all rows having sort column that is non-null (optional, default to false)
     * @param page For paginating through results, starting at page 1 (optional, default to 1)
     * @param state State of contributor (optional)
     * @param committeeId  A unique identifier assigned to each committee or filer registered with the FEC. In general committee id&#39;s begin with the letter C which is followed by eight digits.  (optional)
     * @param sortNullsLast Toggle that sorts null values last (optional, default to false)
     * @param sortHideNull Hide null values on sorted column(s). (optional, default to false)
     * @param perPage The number of results returned per page. Defaults to 20. (optional, default to 20)
     * @param sort Provide a field to sort by. Use &#x60;-&#x60; for descending order.  (optional, default to -total)
     * @return ApiResponse&lt;ScheduleAByStatePage&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ScheduleAByStatePage> schedulesScheduleAByStateGetWithHttpInfo(String apiKey, Boolean hideNull, List<Integer> cycle, Boolean sortNullOnly, Integer page, List<String> state, List<String> committeeId, Boolean sortNullsLast, Boolean sortHideNull, Integer perPage, String sort) throws ApiException {
        okhttp3.Call localVarCall = schedulesScheduleAByStateGetValidateBeforeCall(apiKey, hideNull, cycle, sortNullOnly, page, state, committeeId, sortNullsLast, sortHideNull, perPage, sort, null);
        Type localVarReturnType = new TypeToken<ScheduleAByStatePage>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     *  This endpoint provides itemized individual contributions received by a committee, aggregated by the contributor’s state. If you are interested in our “is_individual” methodology, review the [methodology page](https://www.fec.gov/campaign-finance-data/about-campaign-finance-data/methodology). Unitemized individual contributions are not included. 
     * @param apiKey  API key for https://api.data.gov. Get one at https://api.data.gov/signup.  (required)
     * @param hideNull Exclude values with missing state (optional, default to false)
     * @param cycle  Filter records to only those that were applicable to a given two-year period.The cycle begins with an odd year and is named for its ending, even year.  (optional)
     * @param sortNullOnly Toggle that filters out all rows having sort column that is non-null (optional, default to false)
     * @param page For paginating through results, starting at page 1 (optional, default to 1)
     * @param state State of contributor (optional)
     * @param committeeId  A unique identifier assigned to each committee or filer registered with the FEC. In general committee id&#39;s begin with the letter C which is followed by eight digits.  (optional)
     * @param sortNullsLast Toggle that sorts null values last (optional, default to false)
     * @param sortHideNull Hide null values on sorted column(s). (optional, default to false)
     * @param perPage The number of results returned per page. Defaults to 20. (optional, default to 20)
     * @param sort Provide a field to sort by. Use &#x60;-&#x60; for descending order.  (optional, default to -total)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call schedulesScheduleAByStateGetAsync(String apiKey, Boolean hideNull, List<Integer> cycle, Boolean sortNullOnly, Integer page, List<String> state, List<String> committeeId, Boolean sortNullsLast, Boolean sortHideNull, Integer perPage, String sort, final ApiCallback<ScheduleAByStatePage> _callback) throws ApiException {

        okhttp3.Call localVarCall = schedulesScheduleAByStateGetValidateBeforeCall(apiKey, hideNull, cycle, sortNullOnly, page, state, committeeId, sortNullsLast, sortHideNull, perPage, sort, _callback);
        Type localVarReturnType = new TypeToken<ScheduleAByStatePage>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for schedulesScheduleAByStateTotalsGet
     * @param apiKey  API key for https://api.data.gov. Get one at https://api.data.gov/signup.  (required)
     * @param committeeType The one-letter type code of the organization:         - C communication cost         - D delegate         - E electioneering communication         - H House         - I independent expenditure filer (not a committee)         - N PAC - nonqualified         - O independent expenditure-only (super PACs)         - P presidential         - Q PAC - qualified         - S Senate         - U single candidate independent expenditure         - V PAC with non-contribution account, nonqualified         - W PAC with non-contribution account, qualified         - X party, nonqualified         - Y party, qualified         - Z national party non-federal account         - all All Committee Types         - all_candidates All Candidate Committee Types (H, S, P)         - all_pacs All PAC Committee Types (N, O, Q, V, W)  (optional)
     * @param cycle  Filter records to only those that were applicable to a given two-year period.The cycle begins with an odd year and is named for its ending, even year.  (optional)
     * @param sortNullOnly Toggle that filters out all rows having sort column that is non-null (optional, default to false)
     * @param page For paginating through results, starting at page 1 (optional, default to 1)
     * @param state US state or territory (optional)
     * @param sortNullsLast Toggle that sorts null values last (optional, default to false)
     * @param sortHideNull Hide null values on sorted column(s). (optional, default to false)
     * @param perPage The number of results returned per page. Defaults to 20. (optional, default to 20)
     * @param sort Provide a field to sort by. Use &#x60;-&#x60; for descending order.  (optional, default to cycle)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call schedulesScheduleAByStateTotalsGetCall(String apiKey, List<String> committeeType, List<Integer> cycle, Boolean sortNullOnly, Integer page, List<String> state, Boolean sortNullsLast, Boolean sortHideNull, Integer perPage, String sort, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/schedules/schedule_a/by_state/totals/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiKey != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api_key", apiKey));
        }

        if (committeeType != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "committee_type", committeeType));
        }

        if (cycle != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "cycle", cycle));
        }

        if (sortNullOnly != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort_null_only", sortNullOnly));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (state != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "state", state));
        }

        if (sortNullsLast != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort_nulls_last", sortNullsLast));
        }

        if (sortHideNull != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort_hide_null", sortHideNull));
        }

        if (perPage != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("per_page", perPage));
        }

        if (sort != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort", sort));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKeyHeaderAuth", "ApiKeyQueryAuth", "apiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call schedulesScheduleAByStateTotalsGetValidateBeforeCall(String apiKey, List<String> committeeType, List<Integer> cycle, Boolean sortNullOnly, Integer page, List<String> state, Boolean sortNullsLast, Boolean sortHideNull, Integer perPage, String sort, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'apiKey' is set
        if (apiKey == null) {
            throw new ApiException("Missing the required parameter 'apiKey' when calling schedulesScheduleAByStateTotalsGet(Async)");
        }

        return schedulesScheduleAByStateTotalsGetCall(apiKey, committeeType, cycle, sortNullOnly, page, state, sortNullsLast, sortHideNull, perPage, sort, _callback);

    }

    /**
     * 
     *  This endpoint provides itemized individual contributions received by a committee, aggregated by contributor’s state, committee type and cycle. If you are interested in our “is_individual” methodology, review the [methodology page](https://www.fec.gov/campaign-finance-data/about-campaign-finance-data/methodology). Unitemized individual contributions are not included. 
     * @param apiKey  API key for https://api.data.gov. Get one at https://api.data.gov/signup.  (required)
     * @param committeeType The one-letter type code of the organization:         - C communication cost         - D delegate         - E electioneering communication         - H House         - I independent expenditure filer (not a committee)         - N PAC - nonqualified         - O independent expenditure-only (super PACs)         - P presidential         - Q PAC - qualified         - S Senate         - U single candidate independent expenditure         - V PAC with non-contribution account, nonqualified         - W PAC with non-contribution account, qualified         - X party, nonqualified         - Y party, qualified         - Z national party non-federal account         - all All Committee Types         - all_candidates All Candidate Committee Types (H, S, P)         - all_pacs All PAC Committee Types (N, O, Q, V, W)  (optional)
     * @param cycle  Filter records to only those that were applicable to a given two-year period.The cycle begins with an odd year and is named for its ending, even year.  (optional)
     * @param sortNullOnly Toggle that filters out all rows having sort column that is non-null (optional, default to false)
     * @param page For paginating through results, starting at page 1 (optional, default to 1)
     * @param state US state or territory (optional)
     * @param sortNullsLast Toggle that sorts null values last (optional, default to false)
     * @param sortHideNull Hide null values on sorted column(s). (optional, default to false)
     * @param perPage The number of results returned per page. Defaults to 20. (optional, default to 20)
     * @param sort Provide a field to sort by. Use &#x60;-&#x60; for descending order.  (optional, default to cycle)
     * @return ScheduleAByStateRecipientTotalsPage
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ScheduleAByStateRecipientTotalsPage schedulesScheduleAByStateTotalsGet(String apiKey, List<String> committeeType, List<Integer> cycle, Boolean sortNullOnly, Integer page, List<String> state, Boolean sortNullsLast, Boolean sortHideNull, Integer perPage, String sort) throws ApiException {
        ApiResponse<ScheduleAByStateRecipientTotalsPage> localVarResp = schedulesScheduleAByStateTotalsGetWithHttpInfo(apiKey, committeeType, cycle, sortNullOnly, page, state, sortNullsLast, sortHideNull, perPage, sort);
        return localVarResp.getData();
    }

    /**
     * 
     *  This endpoint provides itemized individual contributions received by a committee, aggregated by contributor’s state, committee type and cycle. If you are interested in our “is_individual” methodology, review the [methodology page](https://www.fec.gov/campaign-finance-data/about-campaign-finance-data/methodology). Unitemized individual contributions are not included. 
     * @param apiKey  API key for https://api.data.gov. Get one at https://api.data.gov/signup.  (required)
     * @param committeeType The one-letter type code of the organization:         - C communication cost         - D delegate         - E electioneering communication         - H House         - I independent expenditure filer (not a committee)         - N PAC - nonqualified         - O independent expenditure-only (super PACs)         - P presidential         - Q PAC - qualified         - S Senate         - U single candidate independent expenditure         - V PAC with non-contribution account, nonqualified         - W PAC with non-contribution account, qualified         - X party, nonqualified         - Y party, qualified         - Z national party non-federal account         - all All Committee Types         - all_candidates All Candidate Committee Types (H, S, P)         - all_pacs All PAC Committee Types (N, O, Q, V, W)  (optional)
     * @param cycle  Filter records to only those that were applicable to a given two-year period.The cycle begins with an odd year and is named for its ending, even year.  (optional)
     * @param sortNullOnly Toggle that filters out all rows having sort column that is non-null (optional, default to false)
     * @param page For paginating through results, starting at page 1 (optional, default to 1)
     * @param state US state or territory (optional)
     * @param sortNullsLast Toggle that sorts null values last (optional, default to false)
     * @param sortHideNull Hide null values on sorted column(s). (optional, default to false)
     * @param perPage The number of results returned per page. Defaults to 20. (optional, default to 20)
     * @param sort Provide a field to sort by. Use &#x60;-&#x60; for descending order.  (optional, default to cycle)
     * @return ApiResponse&lt;ScheduleAByStateRecipientTotalsPage&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ScheduleAByStateRecipientTotalsPage> schedulesScheduleAByStateTotalsGetWithHttpInfo(String apiKey, List<String> committeeType, List<Integer> cycle, Boolean sortNullOnly, Integer page, List<String> state, Boolean sortNullsLast, Boolean sortHideNull, Integer perPage, String sort) throws ApiException {
        okhttp3.Call localVarCall = schedulesScheduleAByStateTotalsGetValidateBeforeCall(apiKey, committeeType, cycle, sortNullOnly, page, state, sortNullsLast, sortHideNull, perPage, sort, null);
        Type localVarReturnType = new TypeToken<ScheduleAByStateRecipientTotalsPage>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     *  This endpoint provides itemized individual contributions received by a committee, aggregated by contributor’s state, committee type and cycle. If you are interested in our “is_individual” methodology, review the [methodology page](https://www.fec.gov/campaign-finance-data/about-campaign-finance-data/methodology). Unitemized individual contributions are not included. 
     * @param apiKey  API key for https://api.data.gov. Get one at https://api.data.gov/signup.  (required)
     * @param committeeType The one-letter type code of the organization:         - C communication cost         - D delegate         - E electioneering communication         - H House         - I independent expenditure filer (not a committee)         - N PAC - nonqualified         - O independent expenditure-only (super PACs)         - P presidential         - Q PAC - qualified         - S Senate         - U single candidate independent expenditure         - V PAC with non-contribution account, nonqualified         - W PAC with non-contribution account, qualified         - X party, nonqualified         - Y party, qualified         - Z national party non-federal account         - all All Committee Types         - all_candidates All Candidate Committee Types (H, S, P)         - all_pacs All PAC Committee Types (N, O, Q, V, W)  (optional)
     * @param cycle  Filter records to only those that were applicable to a given two-year period.The cycle begins with an odd year and is named for its ending, even year.  (optional)
     * @param sortNullOnly Toggle that filters out all rows having sort column that is non-null (optional, default to false)
     * @param page For paginating through results, starting at page 1 (optional, default to 1)
     * @param state US state or territory (optional)
     * @param sortNullsLast Toggle that sorts null values last (optional, default to false)
     * @param sortHideNull Hide null values on sorted column(s). (optional, default to false)
     * @param perPage The number of results returned per page. Defaults to 20. (optional, default to 20)
     * @param sort Provide a field to sort by. Use &#x60;-&#x60; for descending order.  (optional, default to cycle)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call schedulesScheduleAByStateTotalsGetAsync(String apiKey, List<String> committeeType, List<Integer> cycle, Boolean sortNullOnly, Integer page, List<String> state, Boolean sortNullsLast, Boolean sortHideNull, Integer perPage, String sort, final ApiCallback<ScheduleAByStateRecipientTotalsPage> _callback) throws ApiException {

        okhttp3.Call localVarCall = schedulesScheduleAByStateTotalsGetValidateBeforeCall(apiKey, committeeType, cycle, sortNullOnly, page, state, sortNullsLast, sortHideNull, perPage, sort, _callback);
        Type localVarReturnType = new TypeToken<ScheduleAByStateRecipientTotalsPage>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for schedulesScheduleAByZipGet
     * @param apiKey  API key for https://api.data.gov. Get one at https://api.data.gov/signup.  (required)
     * @param zip Zip code of contributor (optional)
     * @param cycle  Filter records to only those that were applicable to a given two-year period.The cycle begins with an odd year and is named for its ending, even year.  (optional)
     * @param sortNullOnly Toggle that filters out all rows having sort column that is non-null (optional, default to false)
     * @param page For paginating through results, starting at page 1 (optional, default to 1)
     * @param state State of contributor (optional)
     * @param committeeId  A unique identifier assigned to each committee or filer registered with the FEC. In general committee id&#39;s begin with the letter C which is followed by eight digits.  (optional)
     * @param sortNullsLast Toggle that sorts null values last (optional, default to false)
     * @param sortHideNull Hide null values on sorted column(s). (optional, default to false)
     * @param perPage The number of results returned per page. Defaults to 20. (optional, default to 20)
     * @param sort Provide a field to sort by. Use &#x60;-&#x60; for descending order.  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call schedulesScheduleAByZipGetCall(String apiKey, List<String> zip, List<Integer> cycle, Boolean sortNullOnly, Integer page, List<String> state, List<String> committeeId, Boolean sortNullsLast, Boolean sortHideNull, Integer perPage, String sort, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/schedules/schedule_a/by_zip/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (zip != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "zip", zip));
        }

        if (apiKey != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api_key", apiKey));
        }

        if (cycle != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "cycle", cycle));
        }

        if (sortNullOnly != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort_null_only", sortNullOnly));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (state != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "state", state));
        }

        if (committeeId != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "committee_id", committeeId));
        }

        if (sortNullsLast != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort_nulls_last", sortNullsLast));
        }

        if (sortHideNull != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort_hide_null", sortHideNull));
        }

        if (perPage != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("per_page", perPage));
        }

        if (sort != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort", sort));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKeyHeaderAuth", "ApiKeyQueryAuth", "apiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call schedulesScheduleAByZipGetValidateBeforeCall(String apiKey, List<String> zip, List<Integer> cycle, Boolean sortNullOnly, Integer page, List<String> state, List<String> committeeId, Boolean sortNullsLast, Boolean sortHideNull, Integer perPage, String sort, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'apiKey' is set
        if (apiKey == null) {
            throw new ApiException("Missing the required parameter 'apiKey' when calling schedulesScheduleAByZipGet(Async)");
        }

        return schedulesScheduleAByZipGetCall(apiKey, zip, cycle, sortNullOnly, page, state, committeeId, sortNullsLast, sortHideNull, perPage, sort, _callback);

    }

    /**
     * 
     *  This endpoint provides itemized individual contributions received by a committee, aggregated by the contributor’s ZIP code. If you are interested in our “is_individual” methodology, review the [methodology page](https://www.fec.gov/campaign-finance-data/about-campaign-finance-data/methodology). Unitemized individual contributions are not included. 
     * @param apiKey  API key for https://api.data.gov. Get one at https://api.data.gov/signup.  (required)
     * @param zip Zip code of contributor (optional)
     * @param cycle  Filter records to only those that were applicable to a given two-year period.The cycle begins with an odd year and is named for its ending, even year.  (optional)
     * @param sortNullOnly Toggle that filters out all rows having sort column that is non-null (optional, default to false)
     * @param page For paginating through results, starting at page 1 (optional, default to 1)
     * @param state State of contributor (optional)
     * @param committeeId  A unique identifier assigned to each committee or filer registered with the FEC. In general committee id&#39;s begin with the letter C which is followed by eight digits.  (optional)
     * @param sortNullsLast Toggle that sorts null values last (optional, default to false)
     * @param sortHideNull Hide null values on sorted column(s). (optional, default to false)
     * @param perPage The number of results returned per page. Defaults to 20. (optional, default to 20)
     * @param sort Provide a field to sort by. Use &#x60;-&#x60; for descending order.  (optional)
     * @return ScheduleAByZipPage
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ScheduleAByZipPage schedulesScheduleAByZipGet(String apiKey, List<String> zip, List<Integer> cycle, Boolean sortNullOnly, Integer page, List<String> state, List<String> committeeId, Boolean sortNullsLast, Boolean sortHideNull, Integer perPage, String sort) throws ApiException {
        ApiResponse<ScheduleAByZipPage> localVarResp = schedulesScheduleAByZipGetWithHttpInfo(apiKey, zip, cycle, sortNullOnly, page, state, committeeId, sortNullsLast, sortHideNull, perPage, sort);
        return localVarResp.getData();
    }

    /**
     * 
     *  This endpoint provides itemized individual contributions received by a committee, aggregated by the contributor’s ZIP code. If you are interested in our “is_individual” methodology, review the [methodology page](https://www.fec.gov/campaign-finance-data/about-campaign-finance-data/methodology). Unitemized individual contributions are not included. 
     * @param apiKey  API key for https://api.data.gov. Get one at https://api.data.gov/signup.  (required)
     * @param zip Zip code of contributor (optional)
     * @param cycle  Filter records to only those that were applicable to a given two-year period.The cycle begins with an odd year and is named for its ending, even year.  (optional)
     * @param sortNullOnly Toggle that filters out all rows having sort column that is non-null (optional, default to false)
     * @param page For paginating through results, starting at page 1 (optional, default to 1)
     * @param state State of contributor (optional)
     * @param committeeId  A unique identifier assigned to each committee or filer registered with the FEC. In general committee id&#39;s begin with the letter C which is followed by eight digits.  (optional)
     * @param sortNullsLast Toggle that sorts null values last (optional, default to false)
     * @param sortHideNull Hide null values on sorted column(s). (optional, default to false)
     * @param perPage The number of results returned per page. Defaults to 20. (optional, default to 20)
     * @param sort Provide a field to sort by. Use &#x60;-&#x60; for descending order.  (optional)
     * @return ApiResponse&lt;ScheduleAByZipPage&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ScheduleAByZipPage> schedulesScheduleAByZipGetWithHttpInfo(String apiKey, List<String> zip, List<Integer> cycle, Boolean sortNullOnly, Integer page, List<String> state, List<String> committeeId, Boolean sortNullsLast, Boolean sortHideNull, Integer perPage, String sort) throws ApiException {
        okhttp3.Call localVarCall = schedulesScheduleAByZipGetValidateBeforeCall(apiKey, zip, cycle, sortNullOnly, page, state, committeeId, sortNullsLast, sortHideNull, perPage, sort, null);
        Type localVarReturnType = new TypeToken<ScheduleAByZipPage>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     *  This endpoint provides itemized individual contributions received by a committee, aggregated by the contributor’s ZIP code. If you are interested in our “is_individual” methodology, review the [methodology page](https://www.fec.gov/campaign-finance-data/about-campaign-finance-data/methodology). Unitemized individual contributions are not included. 
     * @param apiKey  API key for https://api.data.gov. Get one at https://api.data.gov/signup.  (required)
     * @param zip Zip code of contributor (optional)
     * @param cycle  Filter records to only those that were applicable to a given two-year period.The cycle begins with an odd year and is named for its ending, even year.  (optional)
     * @param sortNullOnly Toggle that filters out all rows having sort column that is non-null (optional, default to false)
     * @param page For paginating through results, starting at page 1 (optional, default to 1)
     * @param state State of contributor (optional)
     * @param committeeId  A unique identifier assigned to each committee or filer registered with the FEC. In general committee id&#39;s begin with the letter C which is followed by eight digits.  (optional)
     * @param sortNullsLast Toggle that sorts null values last (optional, default to false)
     * @param sortHideNull Hide null values on sorted column(s). (optional, default to false)
     * @param perPage The number of results returned per page. Defaults to 20. (optional, default to 20)
     * @param sort Provide a field to sort by. Use &#x60;-&#x60; for descending order.  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call schedulesScheduleAByZipGetAsync(String apiKey, List<String> zip, List<Integer> cycle, Boolean sortNullOnly, Integer page, List<String> state, List<String> committeeId, Boolean sortNullsLast, Boolean sortHideNull, Integer perPage, String sort, final ApiCallback<ScheduleAByZipPage> _callback) throws ApiException {

        okhttp3.Call localVarCall = schedulesScheduleAByZipGetValidateBeforeCall(apiKey, zip, cycle, sortNullOnly, page, state, committeeId, sortNullsLast, sortHideNull, perPage, sort, _callback);
        Type localVarReturnType = new TypeToken<ScheduleAByZipPage>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for schedulesScheduleAEfileGet
     * @param apiKey  API key for https://api.data.gov. Get one at https://api.data.gov/signup.  (required)
     * @param minDate Minimum date (optional)
     * @param maxImageNumber Maxium image number of the page where the schedule item is reported (optional)
     * @param contributorEmployer Employer of contributor, filers need to make an effort to gather this information (optional)
     * @param minImageNumber Minium image number of the page where the schedule item is reported (optional)
     * @param sortNullOnly Toggle that filters out all rows having sort column that is non-null (optional, default to false)
     * @param sortHideNull Hide null values on sorted column(s). (optional, default to false)
     * @param contributorName Name of contributor (optional)
     * @param minAmount Filter for all amounts greater than a value. (optional)
     * @param perPage The number of results returned per page. Defaults to 20. (optional, default to 20)
     * @param contributorState State of contributor (optional)
     * @param sort Provide a field to sort by. Use &#x60;-&#x60; for descending order.  (optional, default to -contribution_receipt_date)
     * @param lineNumber Filter for form and line number using the following format: &#x60;FORM-LINENUMBER&#x60;.  For example an argument such as &#x60;F3X-16&#x60; would filter down to all entries from form &#x60;F3X&#x60; line number &#x60;16&#x60;. (optional)
     * @param contributorOccupation Occupation of contributor, filers need to make an effort to gather this information (optional)
     * @param contributorCity City of contributor (optional)
     * @param sortNullsLast Toggle that sorts null values last (optional, default to false)
     * @param page For paginating through results, starting at page 1 (optional, default to 1)
     * @param committeeId  A unique identifier assigned to each committee or filer registered with the FEC. In general committee id&#39;s begin with the letter C which is followed by eight digits.  (optional)
     * @param imageNumber  An unique identifier for each page where the electronic or paper filing is reported.  (optional)
     * @param maxDate Maximum date (optional)
     * @param maxAmount Filter for all amounts less than a value. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call schedulesScheduleAEfileGetCall(String apiKey, LocalDate minDate, String maxImageNumber, List<String> contributorEmployer, String minImageNumber, Boolean sortNullOnly, Boolean sortHideNull, List<String> contributorName, String minAmount, Integer perPage, List<String> contributorState, String sort, String lineNumber, List<String> contributorOccupation, List<String> contributorCity, Boolean sortNullsLast, Integer page, List<String> committeeId, List<String> imageNumber, LocalDate maxDate, String maxAmount, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/schedules/schedule_a/efile/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (minDate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("min_date", minDate));
        }

        if (maxImageNumber != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("max_image_number", maxImageNumber));
        }

        if (contributorEmployer != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "contributor_employer", contributorEmployer));
        }

        if (minImageNumber != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("min_image_number", minImageNumber));
        }

        if (sortNullOnly != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort_null_only", sortNullOnly));
        }

        if (sortHideNull != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort_hide_null", sortHideNull));
        }

        if (contributorName != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "contributor_name", contributorName));
        }

        if (minAmount != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("min_amount", minAmount));
        }

        if (perPage != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("per_page", perPage));
        }

        if (contributorState != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "contributor_state", contributorState));
        }

        if (sort != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort", sort));
        }

        if (lineNumber != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("line_number", lineNumber));
        }

        if (apiKey != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api_key", apiKey));
        }

        if (contributorOccupation != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "contributor_occupation", contributorOccupation));
        }

        if (contributorCity != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "contributor_city", contributorCity));
        }

        if (sortNullsLast != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort_nulls_last", sortNullsLast));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (committeeId != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "committee_id", committeeId));
        }

        if (imageNumber != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "image_number", imageNumber));
        }

        if (maxDate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("max_date", maxDate));
        }

        if (maxAmount != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("max_amount", maxAmount));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKeyHeaderAuth", "ApiKeyQueryAuth", "apiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call schedulesScheduleAEfileGetValidateBeforeCall(String apiKey, LocalDate minDate, String maxImageNumber, List<String> contributorEmployer, String minImageNumber, Boolean sortNullOnly, Boolean sortHideNull, List<String> contributorName, String minAmount, Integer perPage, List<String> contributorState, String sort, String lineNumber, List<String> contributorOccupation, List<String> contributorCity, Boolean sortNullsLast, Integer page, List<String> committeeId, List<String> imageNumber, LocalDate maxDate, String maxAmount, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'apiKey' is set
        if (apiKey == null) {
            throw new ApiException("Missing the required parameter 'apiKey' when calling schedulesScheduleAEfileGet(Async)");
        }

        return schedulesScheduleAEfileGetCall(apiKey, minDate, maxImageNumber, contributorEmployer, minImageNumber, sortNullOnly, sortHideNull, contributorName, minAmount, perPage, contributorState, sort, lineNumber, contributorOccupation, contributorCity, sortNullsLast, page, committeeId, imageNumber, maxDate, maxAmount, _callback);

    }

    /**
     * 
     *  Efiling endpoints provide real-time campaign finance data received from electronic filers. Efiling endpoints only contain the most recent four months of data and don&#39;t contain the processed and coded data that you can find on other endpoints. 
     * @param apiKey  API key for https://api.data.gov. Get one at https://api.data.gov/signup.  (required)
     * @param minDate Minimum date (optional)
     * @param maxImageNumber Maxium image number of the page where the schedule item is reported (optional)
     * @param contributorEmployer Employer of contributor, filers need to make an effort to gather this information (optional)
     * @param minImageNumber Minium image number of the page where the schedule item is reported (optional)
     * @param sortNullOnly Toggle that filters out all rows having sort column that is non-null (optional, default to false)
     * @param sortHideNull Hide null values on sorted column(s). (optional, default to false)
     * @param contributorName Name of contributor (optional)
     * @param minAmount Filter for all amounts greater than a value. (optional)
     * @param perPage The number of results returned per page. Defaults to 20. (optional, default to 20)
     * @param contributorState State of contributor (optional)
     * @param sort Provide a field to sort by. Use &#x60;-&#x60; for descending order.  (optional, default to -contribution_receipt_date)
     * @param lineNumber Filter for form and line number using the following format: &#x60;FORM-LINENUMBER&#x60;.  For example an argument such as &#x60;F3X-16&#x60; would filter down to all entries from form &#x60;F3X&#x60; line number &#x60;16&#x60;. (optional)
     * @param contributorOccupation Occupation of contributor, filers need to make an effort to gather this information (optional)
     * @param contributorCity City of contributor (optional)
     * @param sortNullsLast Toggle that sorts null values last (optional, default to false)
     * @param page For paginating through results, starting at page 1 (optional, default to 1)
     * @param committeeId  A unique identifier assigned to each committee or filer registered with the FEC. In general committee id&#39;s begin with the letter C which is followed by eight digits.  (optional)
     * @param imageNumber  An unique identifier for each page where the electronic or paper filing is reported.  (optional)
     * @param maxDate Maximum date (optional)
     * @param maxAmount Filter for all amounts less than a value. (optional)
     * @return ScheduleAEfilePage
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ScheduleAEfilePage schedulesScheduleAEfileGet(String apiKey, LocalDate minDate, String maxImageNumber, List<String> contributorEmployer, String minImageNumber, Boolean sortNullOnly, Boolean sortHideNull, List<String> contributorName, String minAmount, Integer perPage, List<String> contributorState, String sort, String lineNumber, List<String> contributorOccupation, List<String> contributorCity, Boolean sortNullsLast, Integer page, List<String> committeeId, List<String> imageNumber, LocalDate maxDate, String maxAmount) throws ApiException {
        ApiResponse<ScheduleAEfilePage> localVarResp = schedulesScheduleAEfileGetWithHttpInfo(apiKey, minDate, maxImageNumber, contributorEmployer, minImageNumber, sortNullOnly, sortHideNull, contributorName, minAmount, perPage, contributorState, sort, lineNumber, contributorOccupation, contributorCity, sortNullsLast, page, committeeId, imageNumber, maxDate, maxAmount);
        return localVarResp.getData();
    }

    /**
     * 
     *  Efiling endpoints provide real-time campaign finance data received from electronic filers. Efiling endpoints only contain the most recent four months of data and don&#39;t contain the processed and coded data that you can find on other endpoints. 
     * @param apiKey  API key for https://api.data.gov. Get one at https://api.data.gov/signup.  (required)
     * @param minDate Minimum date (optional)
     * @param maxImageNumber Maxium image number of the page where the schedule item is reported (optional)
     * @param contributorEmployer Employer of contributor, filers need to make an effort to gather this information (optional)
     * @param minImageNumber Minium image number of the page where the schedule item is reported (optional)
     * @param sortNullOnly Toggle that filters out all rows having sort column that is non-null (optional, default to false)
     * @param sortHideNull Hide null values on sorted column(s). (optional, default to false)
     * @param contributorName Name of contributor (optional)
     * @param minAmount Filter for all amounts greater than a value. (optional)
     * @param perPage The number of results returned per page. Defaults to 20. (optional, default to 20)
     * @param contributorState State of contributor (optional)
     * @param sort Provide a field to sort by. Use &#x60;-&#x60; for descending order.  (optional, default to -contribution_receipt_date)
     * @param lineNumber Filter for form and line number using the following format: &#x60;FORM-LINENUMBER&#x60;.  For example an argument such as &#x60;F3X-16&#x60; would filter down to all entries from form &#x60;F3X&#x60; line number &#x60;16&#x60;. (optional)
     * @param contributorOccupation Occupation of contributor, filers need to make an effort to gather this information (optional)
     * @param contributorCity City of contributor (optional)
     * @param sortNullsLast Toggle that sorts null values last (optional, default to false)
     * @param page For paginating through results, starting at page 1 (optional, default to 1)
     * @param committeeId  A unique identifier assigned to each committee or filer registered with the FEC. In general committee id&#39;s begin with the letter C which is followed by eight digits.  (optional)
     * @param imageNumber  An unique identifier for each page where the electronic or paper filing is reported.  (optional)
     * @param maxDate Maximum date (optional)
     * @param maxAmount Filter for all amounts less than a value. (optional)
     * @return ApiResponse&lt;ScheduleAEfilePage&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ScheduleAEfilePage> schedulesScheduleAEfileGetWithHttpInfo(String apiKey, LocalDate minDate, String maxImageNumber, List<String> contributorEmployer, String minImageNumber, Boolean sortNullOnly, Boolean sortHideNull, List<String> contributorName, String minAmount, Integer perPage, List<String> contributorState, String sort, String lineNumber, List<String> contributorOccupation, List<String> contributorCity, Boolean sortNullsLast, Integer page, List<String> committeeId, List<String> imageNumber, LocalDate maxDate, String maxAmount) throws ApiException {
        okhttp3.Call localVarCall = schedulesScheduleAEfileGetValidateBeforeCall(apiKey, minDate, maxImageNumber, contributorEmployer, minImageNumber, sortNullOnly, sortHideNull, contributorName, minAmount, perPage, contributorState, sort, lineNumber, contributorOccupation, contributorCity, sortNullsLast, page, committeeId, imageNumber, maxDate, maxAmount, null);
        Type localVarReturnType = new TypeToken<ScheduleAEfilePage>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     *  Efiling endpoints provide real-time campaign finance data received from electronic filers. Efiling endpoints only contain the most recent four months of data and don&#39;t contain the processed and coded data that you can find on other endpoints. 
     * @param apiKey  API key for https://api.data.gov. Get one at https://api.data.gov/signup.  (required)
     * @param minDate Minimum date (optional)
     * @param maxImageNumber Maxium image number of the page where the schedule item is reported (optional)
     * @param contributorEmployer Employer of contributor, filers need to make an effort to gather this information (optional)
     * @param minImageNumber Minium image number of the page where the schedule item is reported (optional)
     * @param sortNullOnly Toggle that filters out all rows having sort column that is non-null (optional, default to false)
     * @param sortHideNull Hide null values on sorted column(s). (optional, default to false)
     * @param contributorName Name of contributor (optional)
     * @param minAmount Filter for all amounts greater than a value. (optional)
     * @param perPage The number of results returned per page. Defaults to 20. (optional, default to 20)
     * @param contributorState State of contributor (optional)
     * @param sort Provide a field to sort by. Use &#x60;-&#x60; for descending order.  (optional, default to -contribution_receipt_date)
     * @param lineNumber Filter for form and line number using the following format: &#x60;FORM-LINENUMBER&#x60;.  For example an argument such as &#x60;F3X-16&#x60; would filter down to all entries from form &#x60;F3X&#x60; line number &#x60;16&#x60;. (optional)
     * @param contributorOccupation Occupation of contributor, filers need to make an effort to gather this information (optional)
     * @param contributorCity City of contributor (optional)
     * @param sortNullsLast Toggle that sorts null values last (optional, default to false)
     * @param page For paginating through results, starting at page 1 (optional, default to 1)
     * @param committeeId  A unique identifier assigned to each committee or filer registered with the FEC. In general committee id&#39;s begin with the letter C which is followed by eight digits.  (optional)
     * @param imageNumber  An unique identifier for each page where the electronic or paper filing is reported.  (optional)
     * @param maxDate Maximum date (optional)
     * @param maxAmount Filter for all amounts less than a value. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call schedulesScheduleAEfileGetAsync(String apiKey, LocalDate minDate, String maxImageNumber, List<String> contributorEmployer, String minImageNumber, Boolean sortNullOnly, Boolean sortHideNull, List<String> contributorName, String minAmount, Integer perPage, List<String> contributorState, String sort, String lineNumber, List<String> contributorOccupation, List<String> contributorCity, Boolean sortNullsLast, Integer page, List<String> committeeId, List<String> imageNumber, LocalDate maxDate, String maxAmount, final ApiCallback<ScheduleAEfilePage> _callback) throws ApiException {

        okhttp3.Call localVarCall = schedulesScheduleAEfileGetValidateBeforeCall(apiKey, minDate, maxImageNumber, contributorEmployer, minImageNumber, sortNullOnly, sortHideNull, contributorName, minAmount, perPage, contributorState, sort, lineNumber, contributorOccupation, contributorCity, sortNullsLast, page, committeeId, imageNumber, maxDate, maxAmount, _callback);
        Type localVarReturnType = new TypeToken<ScheduleAEfilePage>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for schedulesScheduleAGet
     * @param apiKey  API key for https://api.data.gov. Get one at https://api.data.gov/signup.  (required)
     * @param isIndividual Restrict to non-earmarked individual contributions where memo code is true. Filtering individuals is useful to make sure contributions are not double reported and in creating breakdowns of the amount of money coming from individuals. (optional)
     * @param minDate Minimum date (optional)
     * @param maxImageNumber Maxium image number of the page where the schedule item is reported (optional)
     * @param minImageNumber Minium image number of the page where the schedule item is reported (optional)
     * @param contributorType Filters individual or committee contributions based on line number (optional)
     * @param contributorId The FEC identifier should be represented here if the contributor is registered with the FEC. (optional)
     * @param recipientCommitteeOrgType The one-letter code for the kind for organization:         - C corporation         - L labor organization         - M membership organization         - T trade association         - V cooperative         - W corporation without capital stock  (optional)
     * @param contributorEmployer Employer of contributor, filers need to make an effort to gather this information (optional)
     * @param sortNullOnly Toggle that filters out all rows having sort column that is non-null (optional, default to false)
     * @param lastIndex Index of last result from previous page (optional)
     * @param contributorName Name of contributor (optional)
     * @param minAmount Filter for all amounts greater than a value. (optional)
     * @param sortHideNull Hide null values on sorted column(s). (optional, default to false)
     * @param recipientCommitteeDesignation The one-letter designation code of the organization:          - A authorized by a candidate          - J joint fundraising committee          - P principal campaign committee of a candidate          - U unauthorized          - B lobbyist/registrant PAC          - D leadership PAC  (optional)
     * @param maxLoadDate Maximum load date (optional)
     * @param recipientCommitteeType The one-letter type code of the organization:         - C communication cost         - D delegate         - E electioneering communication         - H House         - I independent expenditure filer (not a committee)         - N PAC - nonqualified         - O independent expenditure-only (super PACs)         - P presidential         - Q PAC - qualified         - S Senate         - U single candidate independent expenditure         - V PAC with non-contribution account, nonqualified         - W PAC with non-contribution account, qualified         - X party, nonqualified         - Y party, qualified         - Z national party non-federal account  (optional)
     * @param sort Provide a field to sort by. Use &#x60;-&#x60; for descending order.  (optional, default to -contribution_receipt_date)
     * @param lastContributionReceiptDate When sorting by &#x60;contribution_receipt_date&#x60;, this is populated with the         &#x60;contribution_receipt_date&#x60; of the last result. However, you will need to pass the index         of that last result to &#x60;last_index&#x60; to get the next page. (optional)
     * @param lastContributionReceiptAmount When sorting by &#x60;contribution_receipt_amount&#x60;, this is populated with the         &#x60;contribution_receipt_amount&#x60; of the last result. However, you will need to pass the index         of that last result to &#x60;last_index&#x60; to get the next page. (optional)
     * @param lineNumber Filter for form and line number using the following format: &#x60;FORM-LINENUMBER&#x60;.  For example an argument such as &#x60;F3X-16&#x60; would filter down to all entries from form &#x60;F3X&#x60; line number &#x60;16&#x60;. (optional)
     * @param contributorState State of contributor (optional)
     * @param perPage The number of results returned per page. Defaults to 20. (optional, default to 20)
     * @param twoYearTransactionPeriod  This is a two-year period that is derived from the year a transaction took place in the Itemized Schedule A and Schedule B tables. In cases where we have the date of the transaction (contribution_receipt_date in schedules/schedule_a, disbursement_date in schedules/schedule_b) the two_year_transaction_period is named after the ending, even-numbered year. If we do not have the date  of the transaction, we fall back to using the report year (report_year in both tables) instead,  making the same cycle adjustment as necessary. If no transaction year is specified, the results default to the most current cycle.  (optional)
     * @param contributorZip Zip code of contributor (optional)
     * @param minLoadDate Minimum load date (optional)
     * @param contributorOccupation Occupation of contributor, filers need to make an effort to gather this information (optional)
     * @param contributorCity City of contributor (optional)
     * @param committeeId  A unique identifier assigned to each committee or filer registered with the FEC. In general committee id&#39;s begin with the letter C which is followed by eight digits.  (optional)
     * @param imageNumber  An unique identifier for each page where the electronic or paper filing is reported.  (optional)
     * @param maxDate Maximum date (optional)
     * @param maxAmount Filter for all amounts less than a value. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call schedulesScheduleAGetCall(String apiKey, Boolean isIndividual, LocalDate minDate, String maxImageNumber, String minImageNumber, List<String> contributorType, List<String> contributorId, List<String> recipientCommitteeOrgType, List<String> contributorEmployer, Boolean sortNullOnly, Integer lastIndex, List<String> contributorName, String minAmount, Boolean sortHideNull, List<String> recipientCommitteeDesignation, LocalDate maxLoadDate, List<String> recipientCommitteeType, String sort, LocalDate lastContributionReceiptDate, Float lastContributionReceiptAmount, String lineNumber, List<String> contributorState, Integer perPage, List<Integer> twoYearTransactionPeriod, List<String> contributorZip, LocalDate minLoadDate, List<String> contributorOccupation, List<String> contributorCity, List<String> committeeId, List<String> imageNumber, LocalDate maxDate, String maxAmount, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/schedules/schedule_a/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (isIndividual != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("is_individual", isIndividual));
        }

        if (minDate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("min_date", minDate));
        }

        if (maxImageNumber != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("max_image_number", maxImageNumber));
        }

        if (minImageNumber != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("min_image_number", minImageNumber));
        }

        if (contributorType != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "contributor_type", contributorType));
        }

        if (contributorId != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "contributor_id", contributorId));
        }

        if (recipientCommitteeOrgType != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "recipient_committee_org_type", recipientCommitteeOrgType));
        }

        if (contributorEmployer != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "contributor_employer", contributorEmployer));
        }

        if (sortNullOnly != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort_null_only", sortNullOnly));
        }

        if (lastIndex != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("last_index", lastIndex));
        }

        if (contributorName != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "contributor_name", contributorName));
        }

        if (minAmount != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("min_amount", minAmount));
        }

        if (sortHideNull != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort_hide_null", sortHideNull));
        }

        if (recipientCommitteeDesignation != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "recipient_committee_designation", recipientCommitteeDesignation));
        }

        if (maxLoadDate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("max_load_date", maxLoadDate));
        }

        if (recipientCommitteeType != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "recipient_committee_type", recipientCommitteeType));
        }

        if (sort != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort", sort));
        }

        if (lastContributionReceiptDate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("last_contribution_receipt_date", lastContributionReceiptDate));
        }

        if (lastContributionReceiptAmount != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("last_contribution_receipt_amount", lastContributionReceiptAmount));
        }

        if (lineNumber != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("line_number", lineNumber));
        }

        if (contributorState != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "contributor_state", contributorState));
        }

        if (perPage != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("per_page", perPage));
        }

        if (apiKey != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api_key", apiKey));
        }

        if (twoYearTransactionPeriod != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "two_year_transaction_period", twoYearTransactionPeriod));
        }

        if (contributorZip != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "contributor_zip", contributorZip));
        }

        if (minLoadDate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("min_load_date", minLoadDate));
        }

        if (contributorOccupation != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "contributor_occupation", contributorOccupation));
        }

        if (contributorCity != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "contributor_city", contributorCity));
        }

        if (committeeId != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "committee_id", committeeId));
        }

        if (imageNumber != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "image_number", imageNumber));
        }

        if (maxDate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("max_date", maxDate));
        }

        if (maxAmount != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("max_amount", maxAmount));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKeyHeaderAuth", "ApiKeyQueryAuth", "apiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call schedulesScheduleAGetValidateBeforeCall(String apiKey, Boolean isIndividual, LocalDate minDate, String maxImageNumber, String minImageNumber, List<String> contributorType, List<String> contributorId, List<String> recipientCommitteeOrgType, List<String> contributorEmployer, Boolean sortNullOnly, Integer lastIndex, List<String> contributorName, String minAmount, Boolean sortHideNull, List<String> recipientCommitteeDesignation, LocalDate maxLoadDate, List<String> recipientCommitteeType, String sort, LocalDate lastContributionReceiptDate, Float lastContributionReceiptAmount, String lineNumber, List<String> contributorState, Integer perPage, List<Integer> twoYearTransactionPeriod, List<String> contributorZip, LocalDate minLoadDate, List<String> contributorOccupation, List<String> contributorCity, List<String> committeeId, List<String> imageNumber, LocalDate maxDate, String maxAmount, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'apiKey' is set
        if (apiKey == null) {
            throw new ApiException("Missing the required parameter 'apiKey' when calling schedulesScheduleAGet(Async)");
        }

        return schedulesScheduleAGetCall(apiKey, isIndividual, minDate, maxImageNumber, minImageNumber, contributorType, contributorId, recipientCommitteeOrgType, contributorEmployer, sortNullOnly, lastIndex, contributorName, minAmount, sortHideNull, recipientCommitteeDesignation, maxLoadDate, recipientCommitteeType, sort, lastContributionReceiptDate, lastContributionReceiptAmount, lineNumber, contributorState, perPage, twoYearTransactionPeriod, contributorZip, minLoadDate, contributorOccupation, contributorCity, committeeId, imageNumber, maxDate, maxAmount, _callback);

    }

    /**
     * 
     *  This description is for both ​&#x60;/schedules​/schedule_a​/&#x60; and ​ &#x60;/schedules​/schedule_a​/{sub_id}​/&#x60;.  This endpoint provides itemized receipts. Schedule A records describe itemized receipts, including contributions from individuals. If you are interested in contributions from an individual, use the &#x60;/schedules/schedule_a/&#x60; endpoint. For a more complete description of all Schedule A records visit [About receipts data](https://www.fec.gov/campaign-finance-data/about-campaign-finance-data/about-receipts-data/). If you are interested in our \&quot;is_individual\&quot; methodology visit our [methodology page](https://www.fec.gov/campaign-finance-data/about-campaign-finance-data/methodology/).  ​The &#x60;/schedules​/schedule_a​/&#x60; endpoint is not paginated by page number. This endpoint uses keyset pagination to improve query performance and these indices are required to properly page through this large dataset. To request the next page, you should append the values found in the &#x60;last_indexes&#x60; object from pagination to the URL of your last request as additional parameters.  For example, when sorting by &#x60;contribution_receipt_date&#x60;, you might receive a page of results with the two scenarios of following pagination information:  case #1: &#x60;&#x60;&#x60; pagination: {     pages: 2152643,     per_page: 20,     count: 43052850,     last_indexes: {         last_index: \&quot;230880619\&quot;,         last_contribution_receipt_date: \&quot;2014-01-01\&quot;     } } &#x60;&#x60;&#x60; &lt;br/&gt; case #2 (results which include contribution_receipt_date &#x3D; NULL):  &#x60;&#x60;&#x60; pagination: {     pages: 2152644,     per_page: 20,     count: 43052850,     last_indexes: {         last_index: \&quot;230880639\&quot;,         sort_null_only: True     } } &#x60;&#x60;&#x60; To fetch the next page of sorted results, append &#x60;last_index&#x3D;230880619&#x60; and &#x60;last_contribution_receipt_date&#x3D;2014-01-01&#x60; to the URL and when reaching &#x60;contribution_receipt_date&#x3D;NULL&#x60;, append &#x60;last_index&#x3D;230880639&#x60; and &#x60;sort_null_only&#x3D;True&#x60;. We strongly advise paging through these results using sort indices. The default sort is acending by &#x60;contribution_receipt_date&#x60; (&#x60;deprecated&#x60;, will be descending). If you do not page using sort indices, some transactions may be unintentionally filtered out.  Calls to ​&#x60;/schedules​/schedule_a​/&#x60; may return many records. For large result sets, the record counts found in the pagination object are approximate; you will need to page through the records until no records are returned.  To avoid throwing the \&quot;out of range\&quot; exception on the last page, one recommandation is to use total count and &#x60;per_page&#x60; to control the traverse loop of results.  ​The &#x60;/schedules​/schedule_a​/{sub_id}​/&#x60; endpoint returns a single transaction, but it does include a pagination object class. Please ignore the information in that object class.  
     * @param apiKey  API key for https://api.data.gov. Get one at https://api.data.gov/signup.  (required)
     * @param isIndividual Restrict to non-earmarked individual contributions where memo code is true. Filtering individuals is useful to make sure contributions are not double reported and in creating breakdowns of the amount of money coming from individuals. (optional)
     * @param minDate Minimum date (optional)
     * @param maxImageNumber Maxium image number of the page where the schedule item is reported (optional)
     * @param minImageNumber Minium image number of the page where the schedule item is reported (optional)
     * @param contributorType Filters individual or committee contributions based on line number (optional)
     * @param contributorId The FEC identifier should be represented here if the contributor is registered with the FEC. (optional)
     * @param recipientCommitteeOrgType The one-letter code for the kind for organization:         - C corporation         - L labor organization         - M membership organization         - T trade association         - V cooperative         - W corporation without capital stock  (optional)
     * @param contributorEmployer Employer of contributor, filers need to make an effort to gather this information (optional)
     * @param sortNullOnly Toggle that filters out all rows having sort column that is non-null (optional, default to false)
     * @param lastIndex Index of last result from previous page (optional)
     * @param contributorName Name of contributor (optional)
     * @param minAmount Filter for all amounts greater than a value. (optional)
     * @param sortHideNull Hide null values on sorted column(s). (optional, default to false)
     * @param recipientCommitteeDesignation The one-letter designation code of the organization:          - A authorized by a candidate          - J joint fundraising committee          - P principal campaign committee of a candidate          - U unauthorized          - B lobbyist/registrant PAC          - D leadership PAC  (optional)
     * @param maxLoadDate Maximum load date (optional)
     * @param recipientCommitteeType The one-letter type code of the organization:         - C communication cost         - D delegate         - E electioneering communication         - H House         - I independent expenditure filer (not a committee)         - N PAC - nonqualified         - O independent expenditure-only (super PACs)         - P presidential         - Q PAC - qualified         - S Senate         - U single candidate independent expenditure         - V PAC with non-contribution account, nonqualified         - W PAC with non-contribution account, qualified         - X party, nonqualified         - Y party, qualified         - Z national party non-federal account  (optional)
     * @param sort Provide a field to sort by. Use &#x60;-&#x60; for descending order.  (optional, default to -contribution_receipt_date)
     * @param lastContributionReceiptDate When sorting by &#x60;contribution_receipt_date&#x60;, this is populated with the         &#x60;contribution_receipt_date&#x60; of the last result. However, you will need to pass the index         of that last result to &#x60;last_index&#x60; to get the next page. (optional)
     * @param lastContributionReceiptAmount When sorting by &#x60;contribution_receipt_amount&#x60;, this is populated with the         &#x60;contribution_receipt_amount&#x60; of the last result. However, you will need to pass the index         of that last result to &#x60;last_index&#x60; to get the next page. (optional)
     * @param lineNumber Filter for form and line number using the following format: &#x60;FORM-LINENUMBER&#x60;.  For example an argument such as &#x60;F3X-16&#x60; would filter down to all entries from form &#x60;F3X&#x60; line number &#x60;16&#x60;. (optional)
     * @param contributorState State of contributor (optional)
     * @param perPage The number of results returned per page. Defaults to 20. (optional, default to 20)
     * @param twoYearTransactionPeriod  This is a two-year period that is derived from the year a transaction took place in the Itemized Schedule A and Schedule B tables. In cases where we have the date of the transaction (contribution_receipt_date in schedules/schedule_a, disbursement_date in schedules/schedule_b) the two_year_transaction_period is named after the ending, even-numbered year. If we do not have the date  of the transaction, we fall back to using the report year (report_year in both tables) instead,  making the same cycle adjustment as necessary. If no transaction year is specified, the results default to the most current cycle.  (optional)
     * @param contributorZip Zip code of contributor (optional)
     * @param minLoadDate Minimum load date (optional)
     * @param contributorOccupation Occupation of contributor, filers need to make an effort to gather this information (optional)
     * @param contributorCity City of contributor (optional)
     * @param committeeId  A unique identifier assigned to each committee or filer registered with the FEC. In general committee id&#39;s begin with the letter C which is followed by eight digits.  (optional)
     * @param imageNumber  An unique identifier for each page where the electronic or paper filing is reported.  (optional)
     * @param maxDate Maximum date (optional)
     * @param maxAmount Filter for all amounts less than a value. (optional)
     * @return ScheduleAPage
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ScheduleAPage schedulesScheduleAGet(String apiKey, Boolean isIndividual, LocalDate minDate, String maxImageNumber, String minImageNumber, List<String> contributorType, List<String> contributorId, List<String> recipientCommitteeOrgType, List<String> contributorEmployer, Boolean sortNullOnly, Integer lastIndex, List<String> contributorName, String minAmount, Boolean sortHideNull, List<String> recipientCommitteeDesignation, LocalDate maxLoadDate, List<String> recipientCommitteeType, String sort, LocalDate lastContributionReceiptDate, Float lastContributionReceiptAmount, String lineNumber, List<String> contributorState, Integer perPage, List<Integer> twoYearTransactionPeriod, List<String> contributorZip, LocalDate minLoadDate, List<String> contributorOccupation, List<String> contributorCity, List<String> committeeId, List<String> imageNumber, LocalDate maxDate, String maxAmount) throws ApiException {
        ApiResponse<ScheduleAPage> localVarResp = schedulesScheduleAGetWithHttpInfo(apiKey, isIndividual, minDate, maxImageNumber, minImageNumber, contributorType, contributorId, recipientCommitteeOrgType, contributorEmployer, sortNullOnly, lastIndex, contributorName, minAmount, sortHideNull, recipientCommitteeDesignation, maxLoadDate, recipientCommitteeType, sort, lastContributionReceiptDate, lastContributionReceiptAmount, lineNumber, contributorState, perPage, twoYearTransactionPeriod, contributorZip, minLoadDate, contributorOccupation, contributorCity, committeeId, imageNumber, maxDate, maxAmount);
        return localVarResp.getData();
    }

    /**
     * 
     *  This description is for both ​&#x60;/schedules​/schedule_a​/&#x60; and ​ &#x60;/schedules​/schedule_a​/{sub_id}​/&#x60;.  This endpoint provides itemized receipts. Schedule A records describe itemized receipts, including contributions from individuals. If you are interested in contributions from an individual, use the &#x60;/schedules/schedule_a/&#x60; endpoint. For a more complete description of all Schedule A records visit [About receipts data](https://www.fec.gov/campaign-finance-data/about-campaign-finance-data/about-receipts-data/). If you are interested in our \&quot;is_individual\&quot; methodology visit our [methodology page](https://www.fec.gov/campaign-finance-data/about-campaign-finance-data/methodology/).  ​The &#x60;/schedules​/schedule_a​/&#x60; endpoint is not paginated by page number. This endpoint uses keyset pagination to improve query performance and these indices are required to properly page through this large dataset. To request the next page, you should append the values found in the &#x60;last_indexes&#x60; object from pagination to the URL of your last request as additional parameters.  For example, when sorting by &#x60;contribution_receipt_date&#x60;, you might receive a page of results with the two scenarios of following pagination information:  case #1: &#x60;&#x60;&#x60; pagination: {     pages: 2152643,     per_page: 20,     count: 43052850,     last_indexes: {         last_index: \&quot;230880619\&quot;,         last_contribution_receipt_date: \&quot;2014-01-01\&quot;     } } &#x60;&#x60;&#x60; &lt;br/&gt; case #2 (results which include contribution_receipt_date &#x3D; NULL):  &#x60;&#x60;&#x60; pagination: {     pages: 2152644,     per_page: 20,     count: 43052850,     last_indexes: {         last_index: \&quot;230880639\&quot;,         sort_null_only: True     } } &#x60;&#x60;&#x60; To fetch the next page of sorted results, append &#x60;last_index&#x3D;230880619&#x60; and &#x60;last_contribution_receipt_date&#x3D;2014-01-01&#x60; to the URL and when reaching &#x60;contribution_receipt_date&#x3D;NULL&#x60;, append &#x60;last_index&#x3D;230880639&#x60; and &#x60;sort_null_only&#x3D;True&#x60;. We strongly advise paging through these results using sort indices. The default sort is acending by &#x60;contribution_receipt_date&#x60; (&#x60;deprecated&#x60;, will be descending). If you do not page using sort indices, some transactions may be unintentionally filtered out.  Calls to ​&#x60;/schedules​/schedule_a​/&#x60; may return many records. For large result sets, the record counts found in the pagination object are approximate; you will need to page through the records until no records are returned.  To avoid throwing the \&quot;out of range\&quot; exception on the last page, one recommandation is to use total count and &#x60;per_page&#x60; to control the traverse loop of results.  ​The &#x60;/schedules​/schedule_a​/{sub_id}​/&#x60; endpoint returns a single transaction, but it does include a pagination object class. Please ignore the information in that object class.  
     * @param apiKey  API key for https://api.data.gov. Get one at https://api.data.gov/signup.  (required)
     * @param isIndividual Restrict to non-earmarked individual contributions where memo code is true. Filtering individuals is useful to make sure contributions are not double reported and in creating breakdowns of the amount of money coming from individuals. (optional)
     * @param minDate Minimum date (optional)
     * @param maxImageNumber Maxium image number of the page where the schedule item is reported (optional)
     * @param minImageNumber Minium image number of the page where the schedule item is reported (optional)
     * @param contributorType Filters individual or committee contributions based on line number (optional)
     * @param contributorId The FEC identifier should be represented here if the contributor is registered with the FEC. (optional)
     * @param recipientCommitteeOrgType The one-letter code for the kind for organization:         - C corporation         - L labor organization         - M membership organization         - T trade association         - V cooperative         - W corporation without capital stock  (optional)
     * @param contributorEmployer Employer of contributor, filers need to make an effort to gather this information (optional)
     * @param sortNullOnly Toggle that filters out all rows having sort column that is non-null (optional, default to false)
     * @param lastIndex Index of last result from previous page (optional)
     * @param contributorName Name of contributor (optional)
     * @param minAmount Filter for all amounts greater than a value. (optional)
     * @param sortHideNull Hide null values on sorted column(s). (optional, default to false)
     * @param recipientCommitteeDesignation The one-letter designation code of the organization:          - A authorized by a candidate          - J joint fundraising committee          - P principal campaign committee of a candidate          - U unauthorized          - B lobbyist/registrant PAC          - D leadership PAC  (optional)
     * @param maxLoadDate Maximum load date (optional)
     * @param recipientCommitteeType The one-letter type code of the organization:         - C communication cost         - D delegate         - E electioneering communication         - H House         - I independent expenditure filer (not a committee)         - N PAC - nonqualified         - O independent expenditure-only (super PACs)         - P presidential         - Q PAC - qualified         - S Senate         - U single candidate independent expenditure         - V PAC with non-contribution account, nonqualified         - W PAC with non-contribution account, qualified         - X party, nonqualified         - Y party, qualified         - Z national party non-federal account  (optional)
     * @param sort Provide a field to sort by. Use &#x60;-&#x60; for descending order.  (optional, default to -contribution_receipt_date)
     * @param lastContributionReceiptDate When sorting by &#x60;contribution_receipt_date&#x60;, this is populated with the         &#x60;contribution_receipt_date&#x60; of the last result. However, you will need to pass the index         of that last result to &#x60;last_index&#x60; to get the next page. (optional)
     * @param lastContributionReceiptAmount When sorting by &#x60;contribution_receipt_amount&#x60;, this is populated with the         &#x60;contribution_receipt_amount&#x60; of the last result. However, you will need to pass the index         of that last result to &#x60;last_index&#x60; to get the next page. (optional)
     * @param lineNumber Filter for form and line number using the following format: &#x60;FORM-LINENUMBER&#x60;.  For example an argument such as &#x60;F3X-16&#x60; would filter down to all entries from form &#x60;F3X&#x60; line number &#x60;16&#x60;. (optional)
     * @param contributorState State of contributor (optional)
     * @param perPage The number of results returned per page. Defaults to 20. (optional, default to 20)
     * @param twoYearTransactionPeriod  This is a two-year period that is derived from the year a transaction took place in the Itemized Schedule A and Schedule B tables. In cases where we have the date of the transaction (contribution_receipt_date in schedules/schedule_a, disbursement_date in schedules/schedule_b) the two_year_transaction_period is named after the ending, even-numbered year. If we do not have the date  of the transaction, we fall back to using the report year (report_year in both tables) instead,  making the same cycle adjustment as necessary. If no transaction year is specified, the results default to the most current cycle.  (optional)
     * @param contributorZip Zip code of contributor (optional)
     * @param minLoadDate Minimum load date (optional)
     * @param contributorOccupation Occupation of contributor, filers need to make an effort to gather this information (optional)
     * @param contributorCity City of contributor (optional)
     * @param committeeId  A unique identifier assigned to each committee or filer registered with the FEC. In general committee id&#39;s begin with the letter C which is followed by eight digits.  (optional)
     * @param imageNumber  An unique identifier for each page where the electronic or paper filing is reported.  (optional)
     * @param maxDate Maximum date (optional)
     * @param maxAmount Filter for all amounts less than a value. (optional)
     * @return ApiResponse&lt;ScheduleAPage&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ScheduleAPage> schedulesScheduleAGetWithHttpInfo(String apiKey, Boolean isIndividual, LocalDate minDate, String maxImageNumber, String minImageNumber, List<String> contributorType, List<String> contributorId, List<String> recipientCommitteeOrgType, List<String> contributorEmployer, Boolean sortNullOnly, Integer lastIndex, List<String> contributorName, String minAmount, Boolean sortHideNull, List<String> recipientCommitteeDesignation, LocalDate maxLoadDate, List<String> recipientCommitteeType, String sort, LocalDate lastContributionReceiptDate, Float lastContributionReceiptAmount, String lineNumber, List<String> contributorState, Integer perPage, List<Integer> twoYearTransactionPeriod, List<String> contributorZip, LocalDate minLoadDate, List<String> contributorOccupation, List<String> contributorCity, List<String> committeeId, List<String> imageNumber, LocalDate maxDate, String maxAmount) throws ApiException {
        okhttp3.Call localVarCall = schedulesScheduleAGetValidateBeforeCall(apiKey, isIndividual, minDate, maxImageNumber, minImageNumber, contributorType, contributorId, recipientCommitteeOrgType, contributorEmployer, sortNullOnly, lastIndex, contributorName, minAmount, sortHideNull, recipientCommitteeDesignation, maxLoadDate, recipientCommitteeType, sort, lastContributionReceiptDate, lastContributionReceiptAmount, lineNumber, contributorState, perPage, twoYearTransactionPeriod, contributorZip, minLoadDate, contributorOccupation, contributorCity, committeeId, imageNumber, maxDate, maxAmount, null);
        Type localVarReturnType = new TypeToken<ScheduleAPage>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     *  This description is for both ​&#x60;/schedules​/schedule_a​/&#x60; and ​ &#x60;/schedules​/schedule_a​/{sub_id}​/&#x60;.  This endpoint provides itemized receipts. Schedule A records describe itemized receipts, including contributions from individuals. If you are interested in contributions from an individual, use the &#x60;/schedules/schedule_a/&#x60; endpoint. For a more complete description of all Schedule A records visit [About receipts data](https://www.fec.gov/campaign-finance-data/about-campaign-finance-data/about-receipts-data/). If you are interested in our \&quot;is_individual\&quot; methodology visit our [methodology page](https://www.fec.gov/campaign-finance-data/about-campaign-finance-data/methodology/).  ​The &#x60;/schedules​/schedule_a​/&#x60; endpoint is not paginated by page number. This endpoint uses keyset pagination to improve query performance and these indices are required to properly page through this large dataset. To request the next page, you should append the values found in the &#x60;last_indexes&#x60; object from pagination to the URL of your last request as additional parameters.  For example, when sorting by &#x60;contribution_receipt_date&#x60;, you might receive a page of results with the two scenarios of following pagination information:  case #1: &#x60;&#x60;&#x60; pagination: {     pages: 2152643,     per_page: 20,     count: 43052850,     last_indexes: {         last_index: \&quot;230880619\&quot;,         last_contribution_receipt_date: \&quot;2014-01-01\&quot;     } } &#x60;&#x60;&#x60; &lt;br/&gt; case #2 (results which include contribution_receipt_date &#x3D; NULL):  &#x60;&#x60;&#x60; pagination: {     pages: 2152644,     per_page: 20,     count: 43052850,     last_indexes: {         last_index: \&quot;230880639\&quot;,         sort_null_only: True     } } &#x60;&#x60;&#x60; To fetch the next page of sorted results, append &#x60;last_index&#x3D;230880619&#x60; and &#x60;last_contribution_receipt_date&#x3D;2014-01-01&#x60; to the URL and when reaching &#x60;contribution_receipt_date&#x3D;NULL&#x60;, append &#x60;last_index&#x3D;230880639&#x60; and &#x60;sort_null_only&#x3D;True&#x60;. We strongly advise paging through these results using sort indices. The default sort is acending by &#x60;contribution_receipt_date&#x60; (&#x60;deprecated&#x60;, will be descending). If you do not page using sort indices, some transactions may be unintentionally filtered out.  Calls to ​&#x60;/schedules​/schedule_a​/&#x60; may return many records. For large result sets, the record counts found in the pagination object are approximate; you will need to page through the records until no records are returned.  To avoid throwing the \&quot;out of range\&quot; exception on the last page, one recommandation is to use total count and &#x60;per_page&#x60; to control the traverse loop of results.  ​The &#x60;/schedules​/schedule_a​/{sub_id}​/&#x60; endpoint returns a single transaction, but it does include a pagination object class. Please ignore the information in that object class.  
     * @param apiKey  API key for https://api.data.gov. Get one at https://api.data.gov/signup.  (required)
     * @param isIndividual Restrict to non-earmarked individual contributions where memo code is true. Filtering individuals is useful to make sure contributions are not double reported and in creating breakdowns of the amount of money coming from individuals. (optional)
     * @param minDate Minimum date (optional)
     * @param maxImageNumber Maxium image number of the page where the schedule item is reported (optional)
     * @param minImageNumber Minium image number of the page where the schedule item is reported (optional)
     * @param contributorType Filters individual or committee contributions based on line number (optional)
     * @param contributorId The FEC identifier should be represented here if the contributor is registered with the FEC. (optional)
     * @param recipientCommitteeOrgType The one-letter code for the kind for organization:         - C corporation         - L labor organization         - M membership organization         - T trade association         - V cooperative         - W corporation without capital stock  (optional)
     * @param contributorEmployer Employer of contributor, filers need to make an effort to gather this information (optional)
     * @param sortNullOnly Toggle that filters out all rows having sort column that is non-null (optional, default to false)
     * @param lastIndex Index of last result from previous page (optional)
     * @param contributorName Name of contributor (optional)
     * @param minAmount Filter for all amounts greater than a value. (optional)
     * @param sortHideNull Hide null values on sorted column(s). (optional, default to false)
     * @param recipientCommitteeDesignation The one-letter designation code of the organization:          - A authorized by a candidate          - J joint fundraising committee          - P principal campaign committee of a candidate          - U unauthorized          - B lobbyist/registrant PAC          - D leadership PAC  (optional)
     * @param maxLoadDate Maximum load date (optional)
     * @param recipientCommitteeType The one-letter type code of the organization:         - C communication cost         - D delegate         - E electioneering communication         - H House         - I independent expenditure filer (not a committee)         - N PAC - nonqualified         - O independent expenditure-only (super PACs)         - P presidential         - Q PAC - qualified         - S Senate         - U single candidate independent expenditure         - V PAC with non-contribution account, nonqualified         - W PAC with non-contribution account, qualified         - X party, nonqualified         - Y party, qualified         - Z national party non-federal account  (optional)
     * @param sort Provide a field to sort by. Use &#x60;-&#x60; for descending order.  (optional, default to -contribution_receipt_date)
     * @param lastContributionReceiptDate When sorting by &#x60;contribution_receipt_date&#x60;, this is populated with the         &#x60;contribution_receipt_date&#x60; of the last result. However, you will need to pass the index         of that last result to &#x60;last_index&#x60; to get the next page. (optional)
     * @param lastContributionReceiptAmount When sorting by &#x60;contribution_receipt_amount&#x60;, this is populated with the         &#x60;contribution_receipt_amount&#x60; of the last result. However, you will need to pass the index         of that last result to &#x60;last_index&#x60; to get the next page. (optional)
     * @param lineNumber Filter for form and line number using the following format: &#x60;FORM-LINENUMBER&#x60;.  For example an argument such as &#x60;F3X-16&#x60; would filter down to all entries from form &#x60;F3X&#x60; line number &#x60;16&#x60;. (optional)
     * @param contributorState State of contributor (optional)
     * @param perPage The number of results returned per page. Defaults to 20. (optional, default to 20)
     * @param twoYearTransactionPeriod  This is a two-year period that is derived from the year a transaction took place in the Itemized Schedule A and Schedule B tables. In cases where we have the date of the transaction (contribution_receipt_date in schedules/schedule_a, disbursement_date in schedules/schedule_b) the two_year_transaction_period is named after the ending, even-numbered year. If we do not have the date  of the transaction, we fall back to using the report year (report_year in both tables) instead,  making the same cycle adjustment as necessary. If no transaction year is specified, the results default to the most current cycle.  (optional)
     * @param contributorZip Zip code of contributor (optional)
     * @param minLoadDate Minimum load date (optional)
     * @param contributorOccupation Occupation of contributor, filers need to make an effort to gather this information (optional)
     * @param contributorCity City of contributor (optional)
     * @param committeeId  A unique identifier assigned to each committee or filer registered with the FEC. In general committee id&#39;s begin with the letter C which is followed by eight digits.  (optional)
     * @param imageNumber  An unique identifier for each page where the electronic or paper filing is reported.  (optional)
     * @param maxDate Maximum date (optional)
     * @param maxAmount Filter for all amounts less than a value. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call schedulesScheduleAGetAsync(String apiKey, Boolean isIndividual, LocalDate minDate, String maxImageNumber, String minImageNumber, List<String> contributorType, List<String> contributorId, List<String> recipientCommitteeOrgType, List<String> contributorEmployer, Boolean sortNullOnly, Integer lastIndex, List<String> contributorName, String minAmount, Boolean sortHideNull, List<String> recipientCommitteeDesignation, LocalDate maxLoadDate, List<String> recipientCommitteeType, String sort, LocalDate lastContributionReceiptDate, Float lastContributionReceiptAmount, String lineNumber, List<String> contributorState, Integer perPage, List<Integer> twoYearTransactionPeriod, List<String> contributorZip, LocalDate minLoadDate, List<String> contributorOccupation, List<String> contributorCity, List<String> committeeId, List<String> imageNumber, LocalDate maxDate, String maxAmount, final ApiCallback<ScheduleAPage> _callback) throws ApiException {

        okhttp3.Call localVarCall = schedulesScheduleAGetValidateBeforeCall(apiKey, isIndividual, minDate, maxImageNumber, minImageNumber, contributorType, contributorId, recipientCommitteeOrgType, contributorEmployer, sortNullOnly, lastIndex, contributorName, minAmount, sortHideNull, recipientCommitteeDesignation, maxLoadDate, recipientCommitteeType, sort, lastContributionReceiptDate, lastContributionReceiptAmount, lineNumber, contributorState, perPage, twoYearTransactionPeriod, contributorZip, minLoadDate, contributorOccupation, contributorCity, committeeId, imageNumber, maxDate, maxAmount, _callback);
        Type localVarReturnType = new TypeToken<ScheduleAPage>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for schedulesScheduleASubIdGet
     * @param apiKey  API key for https://api.data.gov. Get one at https://api.data.gov/signup.  (required)
     * @param subId  (required)
     * @param isIndividual Restrict to non-earmarked individual contributions where memo code is true. Filtering individuals is useful to make sure contributions are not double reported and in creating breakdowns of the amount of money coming from individuals. (optional)
     * @param minDate Minimum date (optional)
     * @param maxImageNumber Maxium image number of the page where the schedule item is reported (optional)
     * @param minImageNumber Minium image number of the page where the schedule item is reported (optional)
     * @param contributorType Filters individual or committee contributions based on line number (optional)
     * @param contributorId The FEC identifier should be represented here if the contributor is registered with the FEC. (optional)
     * @param recipientCommitteeOrgType The one-letter code for the kind for organization:         - C corporation         - L labor organization         - M membership organization         - T trade association         - V cooperative         - W corporation without capital stock  (optional)
     * @param contributorEmployer Employer of contributor, filers need to make an effort to gather this information (optional)
     * @param sortNullOnly Toggle that filters out all rows having sort column that is non-null (optional, default to false)
     * @param lastIndex Index of last result from previous page (optional)
     * @param contributorName Name of contributor (optional)
     * @param minAmount Filter for all amounts greater than a value. (optional)
     * @param sortHideNull Hide null values on sorted column(s). (optional, default to false)
     * @param recipientCommitteeDesignation The one-letter designation code of the organization:          - A authorized by a candidate          - J joint fundraising committee          - P principal campaign committee of a candidate          - U unauthorized          - B lobbyist/registrant PAC          - D leadership PAC  (optional)
     * @param maxLoadDate Maximum load date (optional)
     * @param recipientCommitteeType The one-letter type code of the organization:         - C communication cost         - D delegate         - E electioneering communication         - H House         - I independent expenditure filer (not a committee)         - N PAC - nonqualified         - O independent expenditure-only (super PACs)         - P presidential         - Q PAC - qualified         - S Senate         - U single candidate independent expenditure         - V PAC with non-contribution account, nonqualified         - W PAC with non-contribution account, qualified         - X party, nonqualified         - Y party, qualified         - Z national party non-federal account  (optional)
     * @param sort Provide a field to sort by. Use &#x60;-&#x60; for descending order.  (optional, default to -contribution_receipt_date)
     * @param lastContributionReceiptDate When sorting by &#x60;contribution_receipt_date&#x60;, this is populated with the         &#x60;contribution_receipt_date&#x60; of the last result. However, you will need to pass the index         of that last result to &#x60;last_index&#x60; to get the next page. (optional)
     * @param lastContributionReceiptAmount When sorting by &#x60;contribution_receipt_amount&#x60;, this is populated with the         &#x60;contribution_receipt_amount&#x60; of the last result. However, you will need to pass the index         of that last result to &#x60;last_index&#x60; to get the next page. (optional)
     * @param lineNumber Filter for form and line number using the following format: &#x60;FORM-LINENUMBER&#x60;.  For example an argument such as &#x60;F3X-16&#x60; would filter down to all entries from form &#x60;F3X&#x60; line number &#x60;16&#x60;. (optional)
     * @param contributorState State of contributor (optional)
     * @param perPage The number of results returned per page. Defaults to 20. (optional, default to 20)
     * @param twoYearTransactionPeriod  This is a two-year period that is derived from the year a transaction took place in the Itemized Schedule A and Schedule B tables. In cases where we have the date of the transaction (contribution_receipt_date in schedules/schedule_a, disbursement_date in schedules/schedule_b) the two_year_transaction_period is named after the ending, even-numbered year. If we do not have the date  of the transaction, we fall back to using the report year (report_year in both tables) instead,  making the same cycle adjustment as necessary. If no transaction year is specified, the results default to the most current cycle.  (optional)
     * @param contributorZip Zip code of contributor (optional)
     * @param minLoadDate Minimum load date (optional)
     * @param contributorOccupation Occupation of contributor, filers need to make an effort to gather this information (optional)
     * @param contributorCity City of contributor (optional)
     * @param committeeId  A unique identifier assigned to each committee or filer registered with the FEC. In general committee id&#39;s begin with the letter C which is followed by eight digits.  (optional)
     * @param imageNumber  An unique identifier for each page where the electronic or paper filing is reported.  (optional)
     * @param maxDate Maximum date (optional)
     * @param maxAmount Filter for all amounts less than a value. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call schedulesScheduleASubIdGetCall(String apiKey, String subId, Boolean isIndividual, LocalDate minDate, String maxImageNumber, String minImageNumber, List<String> contributorType, List<String> contributorId, List<String> recipientCommitteeOrgType, List<String> contributorEmployer, Boolean sortNullOnly, Integer lastIndex, List<String> contributorName, String minAmount, Boolean sortHideNull, List<String> recipientCommitteeDesignation, LocalDate maxLoadDate, List<String> recipientCommitteeType, String sort, LocalDate lastContributionReceiptDate, Float lastContributionReceiptAmount, String lineNumber, List<String> contributorState, Integer perPage, List<Integer> twoYearTransactionPeriod, List<String> contributorZip, LocalDate minLoadDate, List<String> contributorOccupation, List<String> contributorCity, List<String> committeeId, List<String> imageNumber, LocalDate maxDate, String maxAmount, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/schedules/schedule_a/{sub_id}/"
            .replace("{" + "sub_id" + "}", localVarApiClient.escapeString(subId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (isIndividual != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("is_individual", isIndividual));
        }

        if (minDate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("min_date", minDate));
        }

        if (maxImageNumber != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("max_image_number", maxImageNumber));
        }

        if (minImageNumber != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("min_image_number", minImageNumber));
        }

        if (contributorType != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "contributor_type", contributorType));
        }

        if (contributorId != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "contributor_id", contributorId));
        }

        if (recipientCommitteeOrgType != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "recipient_committee_org_type", recipientCommitteeOrgType));
        }

        if (contributorEmployer != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "contributor_employer", contributorEmployer));
        }

        if (sortNullOnly != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort_null_only", sortNullOnly));
        }

        if (lastIndex != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("last_index", lastIndex));
        }

        if (contributorName != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "contributor_name", contributorName));
        }

        if (minAmount != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("min_amount", minAmount));
        }

        if (sortHideNull != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort_hide_null", sortHideNull));
        }

        if (recipientCommitteeDesignation != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "recipient_committee_designation", recipientCommitteeDesignation));
        }

        if (maxLoadDate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("max_load_date", maxLoadDate));
        }

        if (recipientCommitteeType != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "recipient_committee_type", recipientCommitteeType));
        }

        if (sort != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort", sort));
        }

        if (lastContributionReceiptDate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("last_contribution_receipt_date", lastContributionReceiptDate));
        }

        if (lastContributionReceiptAmount != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("last_contribution_receipt_amount", lastContributionReceiptAmount));
        }

        if (lineNumber != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("line_number", lineNumber));
        }

        if (contributorState != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "contributor_state", contributorState));
        }

        if (perPage != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("per_page", perPage));
        }

        if (apiKey != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api_key", apiKey));
        }

        if (twoYearTransactionPeriod != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "two_year_transaction_period", twoYearTransactionPeriod));
        }

        if (contributorZip != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "contributor_zip", contributorZip));
        }

        if (minLoadDate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("min_load_date", minLoadDate));
        }

        if (contributorOccupation != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "contributor_occupation", contributorOccupation));
        }

        if (contributorCity != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "contributor_city", contributorCity));
        }

        if (committeeId != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "committee_id", committeeId));
        }

        if (imageNumber != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "image_number", imageNumber));
        }

        if (maxDate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("max_date", maxDate));
        }

        if (maxAmount != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("max_amount", maxAmount));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKeyHeaderAuth", "ApiKeyQueryAuth", "apiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call schedulesScheduleASubIdGetValidateBeforeCall(String apiKey, String subId, Boolean isIndividual, LocalDate minDate, String maxImageNumber, String minImageNumber, List<String> contributorType, List<String> contributorId, List<String> recipientCommitteeOrgType, List<String> contributorEmployer, Boolean sortNullOnly, Integer lastIndex, List<String> contributorName, String minAmount, Boolean sortHideNull, List<String> recipientCommitteeDesignation, LocalDate maxLoadDate, List<String> recipientCommitteeType, String sort, LocalDate lastContributionReceiptDate, Float lastContributionReceiptAmount, String lineNumber, List<String> contributorState, Integer perPage, List<Integer> twoYearTransactionPeriod, List<String> contributorZip, LocalDate minLoadDate, List<String> contributorOccupation, List<String> contributorCity, List<String> committeeId, List<String> imageNumber, LocalDate maxDate, String maxAmount, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'apiKey' is set
        if (apiKey == null) {
            throw new ApiException("Missing the required parameter 'apiKey' when calling schedulesScheduleASubIdGet(Async)");
        }

        // verify the required parameter 'subId' is set
        if (subId == null) {
            throw new ApiException("Missing the required parameter 'subId' when calling schedulesScheduleASubIdGet(Async)");
        }

        return schedulesScheduleASubIdGetCall(apiKey, subId, isIndividual, minDate, maxImageNumber, minImageNumber, contributorType, contributorId, recipientCommitteeOrgType, contributorEmployer, sortNullOnly, lastIndex, contributorName, minAmount, sortHideNull, recipientCommitteeDesignation, maxLoadDate, recipientCommitteeType, sort, lastContributionReceiptDate, lastContributionReceiptAmount, lineNumber, contributorState, perPage, twoYearTransactionPeriod, contributorZip, minLoadDate, contributorOccupation, contributorCity, committeeId, imageNumber, maxDate, maxAmount, _callback);

    }

    /**
     * 
     *  This description is for both ​&#x60;/schedules​/schedule_a​/&#x60; and ​ &#x60;/schedules​/schedule_a​/{sub_id}​/&#x60;.  This endpoint provides itemized receipts. Schedule A records describe itemized receipts, including contributions from individuals. If you are interested in contributions from an individual, use the &#x60;/schedules/schedule_a/&#x60; endpoint. For a more complete description of all Schedule A records visit [About receipts data](https://www.fec.gov/campaign-finance-data/about-campaign-finance-data/about-receipts-data/). If you are interested in our \&quot;is_individual\&quot; methodology visit our [methodology page](https://www.fec.gov/campaign-finance-data/about-campaign-finance-data/methodology/).  ​The &#x60;/schedules​/schedule_a​/&#x60; endpoint is not paginated by page number. This endpoint uses keyset pagination to improve query performance and these indices are required to properly page through this large dataset. To request the next page, you should append the values found in the &#x60;last_indexes&#x60; object from pagination to the URL of your last request as additional parameters.  For example, when sorting by &#x60;contribution_receipt_date&#x60;, you might receive a page of results with the two scenarios of following pagination information:  case #1: &#x60;&#x60;&#x60; pagination: {     pages: 2152643,     per_page: 20,     count: 43052850,     last_indexes: {         last_index: \&quot;230880619\&quot;,         last_contribution_receipt_date: \&quot;2014-01-01\&quot;     } } &#x60;&#x60;&#x60; &lt;br/&gt; case #2 (results which include contribution_receipt_date &#x3D; NULL):  &#x60;&#x60;&#x60; pagination: {     pages: 2152644,     per_page: 20,     count: 43052850,     last_indexes: {         last_index: \&quot;230880639\&quot;,         sort_null_only: True     } } &#x60;&#x60;&#x60; To fetch the next page of sorted results, append &#x60;last_index&#x3D;230880619&#x60; and &#x60;last_contribution_receipt_date&#x3D;2014-01-01&#x60; to the URL and when reaching &#x60;contribution_receipt_date&#x3D;NULL&#x60;, append &#x60;last_index&#x3D;230880639&#x60; and &#x60;sort_null_only&#x3D;True&#x60;. We strongly advise paging through these results using sort indices. The default sort is acending by &#x60;contribution_receipt_date&#x60; (&#x60;deprecated&#x60;, will be descending). If you do not page using sort indices, some transactions may be unintentionally filtered out.  Calls to ​&#x60;/schedules​/schedule_a​/&#x60; may return many records. For large result sets, the record counts found in the pagination object are approximate; you will need to page through the records until no records are returned.  To avoid throwing the \&quot;out of range\&quot; exception on the last page, one recommandation is to use total count and &#x60;per_page&#x60; to control the traverse loop of results.  ​The &#x60;/schedules​/schedule_a​/{sub_id}​/&#x60; endpoint returns a single transaction, but it does include a pagination object class. Please ignore the information in that object class.  
     * @param apiKey  API key for https://api.data.gov. Get one at https://api.data.gov/signup.  (required)
     * @param subId  (required)
     * @param isIndividual Restrict to non-earmarked individual contributions where memo code is true. Filtering individuals is useful to make sure contributions are not double reported and in creating breakdowns of the amount of money coming from individuals. (optional)
     * @param minDate Minimum date (optional)
     * @param maxImageNumber Maxium image number of the page where the schedule item is reported (optional)
     * @param minImageNumber Minium image number of the page where the schedule item is reported (optional)
     * @param contributorType Filters individual or committee contributions based on line number (optional)
     * @param contributorId The FEC identifier should be represented here if the contributor is registered with the FEC. (optional)
     * @param recipientCommitteeOrgType The one-letter code for the kind for organization:         - C corporation         - L labor organization         - M membership organization         - T trade association         - V cooperative         - W corporation without capital stock  (optional)
     * @param contributorEmployer Employer of contributor, filers need to make an effort to gather this information (optional)
     * @param sortNullOnly Toggle that filters out all rows having sort column that is non-null (optional, default to false)
     * @param lastIndex Index of last result from previous page (optional)
     * @param contributorName Name of contributor (optional)
     * @param minAmount Filter for all amounts greater than a value. (optional)
     * @param sortHideNull Hide null values on sorted column(s). (optional, default to false)
     * @param recipientCommitteeDesignation The one-letter designation code of the organization:          - A authorized by a candidate          - J joint fundraising committee          - P principal campaign committee of a candidate          - U unauthorized          - B lobbyist/registrant PAC          - D leadership PAC  (optional)
     * @param maxLoadDate Maximum load date (optional)
     * @param recipientCommitteeType The one-letter type code of the organization:         - C communication cost         - D delegate         - E electioneering communication         - H House         - I independent expenditure filer (not a committee)         - N PAC - nonqualified         - O independent expenditure-only (super PACs)         - P presidential         - Q PAC - qualified         - S Senate         - U single candidate independent expenditure         - V PAC with non-contribution account, nonqualified         - W PAC with non-contribution account, qualified         - X party, nonqualified         - Y party, qualified         - Z national party non-federal account  (optional)
     * @param sort Provide a field to sort by. Use &#x60;-&#x60; for descending order.  (optional, default to -contribution_receipt_date)
     * @param lastContributionReceiptDate When sorting by &#x60;contribution_receipt_date&#x60;, this is populated with the         &#x60;contribution_receipt_date&#x60; of the last result. However, you will need to pass the index         of that last result to &#x60;last_index&#x60; to get the next page. (optional)
     * @param lastContributionReceiptAmount When sorting by &#x60;contribution_receipt_amount&#x60;, this is populated with the         &#x60;contribution_receipt_amount&#x60; of the last result. However, you will need to pass the index         of that last result to &#x60;last_index&#x60; to get the next page. (optional)
     * @param lineNumber Filter for form and line number using the following format: &#x60;FORM-LINENUMBER&#x60;.  For example an argument such as &#x60;F3X-16&#x60; would filter down to all entries from form &#x60;F3X&#x60; line number &#x60;16&#x60;. (optional)
     * @param contributorState State of contributor (optional)
     * @param perPage The number of results returned per page. Defaults to 20. (optional, default to 20)
     * @param twoYearTransactionPeriod  This is a two-year period that is derived from the year a transaction took place in the Itemized Schedule A and Schedule B tables. In cases where we have the date of the transaction (contribution_receipt_date in schedules/schedule_a, disbursement_date in schedules/schedule_b) the two_year_transaction_period is named after the ending, even-numbered year. If we do not have the date  of the transaction, we fall back to using the report year (report_year in both tables) instead,  making the same cycle adjustment as necessary. If no transaction year is specified, the results default to the most current cycle.  (optional)
     * @param contributorZip Zip code of contributor (optional)
     * @param minLoadDate Minimum load date (optional)
     * @param contributorOccupation Occupation of contributor, filers need to make an effort to gather this information (optional)
     * @param contributorCity City of contributor (optional)
     * @param committeeId  A unique identifier assigned to each committee or filer registered with the FEC. In general committee id&#39;s begin with the letter C which is followed by eight digits.  (optional)
     * @param imageNumber  An unique identifier for each page where the electronic or paper filing is reported.  (optional)
     * @param maxDate Maximum date (optional)
     * @param maxAmount Filter for all amounts less than a value. (optional)
     * @return ScheduleAPage
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ScheduleAPage schedulesScheduleASubIdGet(String apiKey, String subId, Boolean isIndividual, LocalDate minDate, String maxImageNumber, String minImageNumber, List<String> contributorType, List<String> contributorId, List<String> recipientCommitteeOrgType, List<String> contributorEmployer, Boolean sortNullOnly, Integer lastIndex, List<String> contributorName, String minAmount, Boolean sortHideNull, List<String> recipientCommitteeDesignation, LocalDate maxLoadDate, List<String> recipientCommitteeType, String sort, LocalDate lastContributionReceiptDate, Float lastContributionReceiptAmount, String lineNumber, List<String> contributorState, Integer perPage, List<Integer> twoYearTransactionPeriod, List<String> contributorZip, LocalDate minLoadDate, List<String> contributorOccupation, List<String> contributorCity, List<String> committeeId, List<String> imageNumber, LocalDate maxDate, String maxAmount) throws ApiException {
        ApiResponse<ScheduleAPage> localVarResp = schedulesScheduleASubIdGetWithHttpInfo(apiKey, subId, isIndividual, minDate, maxImageNumber, minImageNumber, contributorType, contributorId, recipientCommitteeOrgType, contributorEmployer, sortNullOnly, lastIndex, contributorName, minAmount, sortHideNull, recipientCommitteeDesignation, maxLoadDate, recipientCommitteeType, sort, lastContributionReceiptDate, lastContributionReceiptAmount, lineNumber, contributorState, perPage, twoYearTransactionPeriod, contributorZip, minLoadDate, contributorOccupation, contributorCity, committeeId, imageNumber, maxDate, maxAmount);
        return localVarResp.getData();
    }

    /**
     * 
     *  This description is for both ​&#x60;/schedules​/schedule_a​/&#x60; and ​ &#x60;/schedules​/schedule_a​/{sub_id}​/&#x60;.  This endpoint provides itemized receipts. Schedule A records describe itemized receipts, including contributions from individuals. If you are interested in contributions from an individual, use the &#x60;/schedules/schedule_a/&#x60; endpoint. For a more complete description of all Schedule A records visit [About receipts data](https://www.fec.gov/campaign-finance-data/about-campaign-finance-data/about-receipts-data/). If you are interested in our \&quot;is_individual\&quot; methodology visit our [methodology page](https://www.fec.gov/campaign-finance-data/about-campaign-finance-data/methodology/).  ​The &#x60;/schedules​/schedule_a​/&#x60; endpoint is not paginated by page number. This endpoint uses keyset pagination to improve query performance and these indices are required to properly page through this large dataset. To request the next page, you should append the values found in the &#x60;last_indexes&#x60; object from pagination to the URL of your last request as additional parameters.  For example, when sorting by &#x60;contribution_receipt_date&#x60;, you might receive a page of results with the two scenarios of following pagination information:  case #1: &#x60;&#x60;&#x60; pagination: {     pages: 2152643,     per_page: 20,     count: 43052850,     last_indexes: {         last_index: \&quot;230880619\&quot;,         last_contribution_receipt_date: \&quot;2014-01-01\&quot;     } } &#x60;&#x60;&#x60; &lt;br/&gt; case #2 (results which include contribution_receipt_date &#x3D; NULL):  &#x60;&#x60;&#x60; pagination: {     pages: 2152644,     per_page: 20,     count: 43052850,     last_indexes: {         last_index: \&quot;230880639\&quot;,         sort_null_only: True     } } &#x60;&#x60;&#x60; To fetch the next page of sorted results, append &#x60;last_index&#x3D;230880619&#x60; and &#x60;last_contribution_receipt_date&#x3D;2014-01-01&#x60; to the URL and when reaching &#x60;contribution_receipt_date&#x3D;NULL&#x60;, append &#x60;last_index&#x3D;230880639&#x60; and &#x60;sort_null_only&#x3D;True&#x60;. We strongly advise paging through these results using sort indices. The default sort is acending by &#x60;contribution_receipt_date&#x60; (&#x60;deprecated&#x60;, will be descending). If you do not page using sort indices, some transactions may be unintentionally filtered out.  Calls to ​&#x60;/schedules​/schedule_a​/&#x60; may return many records. For large result sets, the record counts found in the pagination object are approximate; you will need to page through the records until no records are returned.  To avoid throwing the \&quot;out of range\&quot; exception on the last page, one recommandation is to use total count and &#x60;per_page&#x60; to control the traverse loop of results.  ​The &#x60;/schedules​/schedule_a​/{sub_id}​/&#x60; endpoint returns a single transaction, but it does include a pagination object class. Please ignore the information in that object class.  
     * @param apiKey  API key for https://api.data.gov. Get one at https://api.data.gov/signup.  (required)
     * @param subId  (required)
     * @param isIndividual Restrict to non-earmarked individual contributions where memo code is true. Filtering individuals is useful to make sure contributions are not double reported and in creating breakdowns of the amount of money coming from individuals. (optional)
     * @param minDate Minimum date (optional)
     * @param maxImageNumber Maxium image number of the page where the schedule item is reported (optional)
     * @param minImageNumber Minium image number of the page where the schedule item is reported (optional)
     * @param contributorType Filters individual or committee contributions based on line number (optional)
     * @param contributorId The FEC identifier should be represented here if the contributor is registered with the FEC. (optional)
     * @param recipientCommitteeOrgType The one-letter code for the kind for organization:         - C corporation         - L labor organization         - M membership organization         - T trade association         - V cooperative         - W corporation without capital stock  (optional)
     * @param contributorEmployer Employer of contributor, filers need to make an effort to gather this information (optional)
     * @param sortNullOnly Toggle that filters out all rows having sort column that is non-null (optional, default to false)
     * @param lastIndex Index of last result from previous page (optional)
     * @param contributorName Name of contributor (optional)
     * @param minAmount Filter for all amounts greater than a value. (optional)
     * @param sortHideNull Hide null values on sorted column(s). (optional, default to false)
     * @param recipientCommitteeDesignation The one-letter designation code of the organization:          - A authorized by a candidate          - J joint fundraising committee          - P principal campaign committee of a candidate          - U unauthorized          - B lobbyist/registrant PAC          - D leadership PAC  (optional)
     * @param maxLoadDate Maximum load date (optional)
     * @param recipientCommitteeType The one-letter type code of the organization:         - C communication cost         - D delegate         - E electioneering communication         - H House         - I independent expenditure filer (not a committee)         - N PAC - nonqualified         - O independent expenditure-only (super PACs)         - P presidential         - Q PAC - qualified         - S Senate         - U single candidate independent expenditure         - V PAC with non-contribution account, nonqualified         - W PAC with non-contribution account, qualified         - X party, nonqualified         - Y party, qualified         - Z national party non-federal account  (optional)
     * @param sort Provide a field to sort by. Use &#x60;-&#x60; for descending order.  (optional, default to -contribution_receipt_date)
     * @param lastContributionReceiptDate When sorting by &#x60;contribution_receipt_date&#x60;, this is populated with the         &#x60;contribution_receipt_date&#x60; of the last result. However, you will need to pass the index         of that last result to &#x60;last_index&#x60; to get the next page. (optional)
     * @param lastContributionReceiptAmount When sorting by &#x60;contribution_receipt_amount&#x60;, this is populated with the         &#x60;contribution_receipt_amount&#x60; of the last result. However, you will need to pass the index         of that last result to &#x60;last_index&#x60; to get the next page. (optional)
     * @param lineNumber Filter for form and line number using the following format: &#x60;FORM-LINENUMBER&#x60;.  For example an argument such as &#x60;F3X-16&#x60; would filter down to all entries from form &#x60;F3X&#x60; line number &#x60;16&#x60;. (optional)
     * @param contributorState State of contributor (optional)
     * @param perPage The number of results returned per page. Defaults to 20. (optional, default to 20)
     * @param twoYearTransactionPeriod  This is a two-year period that is derived from the year a transaction took place in the Itemized Schedule A and Schedule B tables. In cases where we have the date of the transaction (contribution_receipt_date in schedules/schedule_a, disbursement_date in schedules/schedule_b) the two_year_transaction_period is named after the ending, even-numbered year. If we do not have the date  of the transaction, we fall back to using the report year (report_year in both tables) instead,  making the same cycle adjustment as necessary. If no transaction year is specified, the results default to the most current cycle.  (optional)
     * @param contributorZip Zip code of contributor (optional)
     * @param minLoadDate Minimum load date (optional)
     * @param contributorOccupation Occupation of contributor, filers need to make an effort to gather this information (optional)
     * @param contributorCity City of contributor (optional)
     * @param committeeId  A unique identifier assigned to each committee or filer registered with the FEC. In general committee id&#39;s begin with the letter C which is followed by eight digits.  (optional)
     * @param imageNumber  An unique identifier for each page where the electronic or paper filing is reported.  (optional)
     * @param maxDate Maximum date (optional)
     * @param maxAmount Filter for all amounts less than a value. (optional)
     * @return ApiResponse&lt;ScheduleAPage&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ScheduleAPage> schedulesScheduleASubIdGetWithHttpInfo(String apiKey, String subId, Boolean isIndividual, LocalDate minDate, String maxImageNumber, String minImageNumber, List<String> contributorType, List<String> contributorId, List<String> recipientCommitteeOrgType, List<String> contributorEmployer, Boolean sortNullOnly, Integer lastIndex, List<String> contributorName, String minAmount, Boolean sortHideNull, List<String> recipientCommitteeDesignation, LocalDate maxLoadDate, List<String> recipientCommitteeType, String sort, LocalDate lastContributionReceiptDate, Float lastContributionReceiptAmount, String lineNumber, List<String> contributorState, Integer perPage, List<Integer> twoYearTransactionPeriod, List<String> contributorZip, LocalDate minLoadDate, List<String> contributorOccupation, List<String> contributorCity, List<String> committeeId, List<String> imageNumber, LocalDate maxDate, String maxAmount) throws ApiException {
        okhttp3.Call localVarCall = schedulesScheduleASubIdGetValidateBeforeCall(apiKey, subId, isIndividual, minDate, maxImageNumber, minImageNumber, contributorType, contributorId, recipientCommitteeOrgType, contributorEmployer, sortNullOnly, lastIndex, contributorName, minAmount, sortHideNull, recipientCommitteeDesignation, maxLoadDate, recipientCommitteeType, sort, lastContributionReceiptDate, lastContributionReceiptAmount, lineNumber, contributorState, perPage, twoYearTransactionPeriod, contributorZip, minLoadDate, contributorOccupation, contributorCity, committeeId, imageNumber, maxDate, maxAmount, null);
        Type localVarReturnType = new TypeToken<ScheduleAPage>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     *  This description is for both ​&#x60;/schedules​/schedule_a​/&#x60; and ​ &#x60;/schedules​/schedule_a​/{sub_id}​/&#x60;.  This endpoint provides itemized receipts. Schedule A records describe itemized receipts, including contributions from individuals. If you are interested in contributions from an individual, use the &#x60;/schedules/schedule_a/&#x60; endpoint. For a more complete description of all Schedule A records visit [About receipts data](https://www.fec.gov/campaign-finance-data/about-campaign-finance-data/about-receipts-data/). If you are interested in our \&quot;is_individual\&quot; methodology visit our [methodology page](https://www.fec.gov/campaign-finance-data/about-campaign-finance-data/methodology/).  ​The &#x60;/schedules​/schedule_a​/&#x60; endpoint is not paginated by page number. This endpoint uses keyset pagination to improve query performance and these indices are required to properly page through this large dataset. To request the next page, you should append the values found in the &#x60;last_indexes&#x60; object from pagination to the URL of your last request as additional parameters.  For example, when sorting by &#x60;contribution_receipt_date&#x60;, you might receive a page of results with the two scenarios of following pagination information:  case #1: &#x60;&#x60;&#x60; pagination: {     pages: 2152643,     per_page: 20,     count: 43052850,     last_indexes: {         last_index: \&quot;230880619\&quot;,         last_contribution_receipt_date: \&quot;2014-01-01\&quot;     } } &#x60;&#x60;&#x60; &lt;br/&gt; case #2 (results which include contribution_receipt_date &#x3D; NULL):  &#x60;&#x60;&#x60; pagination: {     pages: 2152644,     per_page: 20,     count: 43052850,     last_indexes: {         last_index: \&quot;230880639\&quot;,         sort_null_only: True     } } &#x60;&#x60;&#x60; To fetch the next page of sorted results, append &#x60;last_index&#x3D;230880619&#x60; and &#x60;last_contribution_receipt_date&#x3D;2014-01-01&#x60; to the URL and when reaching &#x60;contribution_receipt_date&#x3D;NULL&#x60;, append &#x60;last_index&#x3D;230880639&#x60; and &#x60;sort_null_only&#x3D;True&#x60;. We strongly advise paging through these results using sort indices. The default sort is acending by &#x60;contribution_receipt_date&#x60; (&#x60;deprecated&#x60;, will be descending). If you do not page using sort indices, some transactions may be unintentionally filtered out.  Calls to ​&#x60;/schedules​/schedule_a​/&#x60; may return many records. For large result sets, the record counts found in the pagination object are approximate; you will need to page through the records until no records are returned.  To avoid throwing the \&quot;out of range\&quot; exception on the last page, one recommandation is to use total count and &#x60;per_page&#x60; to control the traverse loop of results.  ​The &#x60;/schedules​/schedule_a​/{sub_id}​/&#x60; endpoint returns a single transaction, but it does include a pagination object class. Please ignore the information in that object class.  
     * @param apiKey  API key for https://api.data.gov. Get one at https://api.data.gov/signup.  (required)
     * @param subId  (required)
     * @param isIndividual Restrict to non-earmarked individual contributions where memo code is true. Filtering individuals is useful to make sure contributions are not double reported and in creating breakdowns of the amount of money coming from individuals. (optional)
     * @param minDate Minimum date (optional)
     * @param maxImageNumber Maxium image number of the page where the schedule item is reported (optional)
     * @param minImageNumber Minium image number of the page where the schedule item is reported (optional)
     * @param contributorType Filters individual or committee contributions based on line number (optional)
     * @param contributorId The FEC identifier should be represented here if the contributor is registered with the FEC. (optional)
     * @param recipientCommitteeOrgType The one-letter code for the kind for organization:         - C corporation         - L labor organization         - M membership organization         - T trade association         - V cooperative         - W corporation without capital stock  (optional)
     * @param contributorEmployer Employer of contributor, filers need to make an effort to gather this information (optional)
     * @param sortNullOnly Toggle that filters out all rows having sort column that is non-null (optional, default to false)
     * @param lastIndex Index of last result from previous page (optional)
     * @param contributorName Name of contributor (optional)
     * @param minAmount Filter for all amounts greater than a value. (optional)
     * @param sortHideNull Hide null values on sorted column(s). (optional, default to false)
     * @param recipientCommitteeDesignation The one-letter designation code of the organization:          - A authorized by a candidate          - J joint fundraising committee          - P principal campaign committee of a candidate          - U unauthorized          - B lobbyist/registrant PAC          - D leadership PAC  (optional)
     * @param maxLoadDate Maximum load date (optional)
     * @param recipientCommitteeType The one-letter type code of the organization:         - C communication cost         - D delegate         - E electioneering communication         - H House         - I independent expenditure filer (not a committee)         - N PAC - nonqualified         - O independent expenditure-only (super PACs)         - P presidential         - Q PAC - qualified         - S Senate         - U single candidate independent expenditure         - V PAC with non-contribution account, nonqualified         - W PAC with non-contribution account, qualified         - X party, nonqualified         - Y party, qualified         - Z national party non-federal account  (optional)
     * @param sort Provide a field to sort by. Use &#x60;-&#x60; for descending order.  (optional, default to -contribution_receipt_date)
     * @param lastContributionReceiptDate When sorting by &#x60;contribution_receipt_date&#x60;, this is populated with the         &#x60;contribution_receipt_date&#x60; of the last result. However, you will need to pass the index         of that last result to &#x60;last_index&#x60; to get the next page. (optional)
     * @param lastContributionReceiptAmount When sorting by &#x60;contribution_receipt_amount&#x60;, this is populated with the         &#x60;contribution_receipt_amount&#x60; of the last result. However, you will need to pass the index         of that last result to &#x60;last_index&#x60; to get the next page. (optional)
     * @param lineNumber Filter for form and line number using the following format: &#x60;FORM-LINENUMBER&#x60;.  For example an argument such as &#x60;F3X-16&#x60; would filter down to all entries from form &#x60;F3X&#x60; line number &#x60;16&#x60;. (optional)
     * @param contributorState State of contributor (optional)
     * @param perPage The number of results returned per page. Defaults to 20. (optional, default to 20)
     * @param twoYearTransactionPeriod  This is a two-year period that is derived from the year a transaction took place in the Itemized Schedule A and Schedule B tables. In cases where we have the date of the transaction (contribution_receipt_date in schedules/schedule_a, disbursement_date in schedules/schedule_b) the two_year_transaction_period is named after the ending, even-numbered year. If we do not have the date  of the transaction, we fall back to using the report year (report_year in both tables) instead,  making the same cycle adjustment as necessary. If no transaction year is specified, the results default to the most current cycle.  (optional)
     * @param contributorZip Zip code of contributor (optional)
     * @param minLoadDate Minimum load date (optional)
     * @param contributorOccupation Occupation of contributor, filers need to make an effort to gather this information (optional)
     * @param contributorCity City of contributor (optional)
     * @param committeeId  A unique identifier assigned to each committee or filer registered with the FEC. In general committee id&#39;s begin with the letter C which is followed by eight digits.  (optional)
     * @param imageNumber  An unique identifier for each page where the electronic or paper filing is reported.  (optional)
     * @param maxDate Maximum date (optional)
     * @param maxAmount Filter for all amounts less than a value. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call schedulesScheduleASubIdGetAsync(String apiKey, String subId, Boolean isIndividual, LocalDate minDate, String maxImageNumber, String minImageNumber, List<String> contributorType, List<String> contributorId, List<String> recipientCommitteeOrgType, List<String> contributorEmployer, Boolean sortNullOnly, Integer lastIndex, List<String> contributorName, String minAmount, Boolean sortHideNull, List<String> recipientCommitteeDesignation, LocalDate maxLoadDate, List<String> recipientCommitteeType, String sort, LocalDate lastContributionReceiptDate, Float lastContributionReceiptAmount, String lineNumber, List<String> contributorState, Integer perPage, List<Integer> twoYearTransactionPeriod, List<String> contributorZip, LocalDate minLoadDate, List<String> contributorOccupation, List<String> contributorCity, List<String> committeeId, List<String> imageNumber, LocalDate maxDate, String maxAmount, final ApiCallback<ScheduleAPage> _callback) throws ApiException {

        okhttp3.Call localVarCall = schedulesScheduleASubIdGetValidateBeforeCall(apiKey, subId, isIndividual, minDate, maxImageNumber, minImageNumber, contributorType, contributorId, recipientCommitteeOrgType, contributorEmployer, sortNullOnly, lastIndex, contributorName, minAmount, sortHideNull, recipientCommitteeDesignation, maxLoadDate, recipientCommitteeType, sort, lastContributionReceiptDate, lastContributionReceiptAmount, lineNumber, contributorState, perPage, twoYearTransactionPeriod, contributorZip, minLoadDate, contributorOccupation, contributorCity, committeeId, imageNumber, maxDate, maxAmount, _callback);
        Type localVarReturnType = new TypeToken<ScheduleAPage>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
