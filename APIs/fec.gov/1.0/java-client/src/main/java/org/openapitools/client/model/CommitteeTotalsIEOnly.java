/*
 * OpenFEC
 * This application programming interface (API) allows you to explore the way candidates and committees fund their campaigns.    The Federal Election Commission (FEC) API is a RESTful web service supporting full-text and field-specific searches on FEC data. [Bulk downloads](https://www.fec.gov/data/advanced/?tab=bulk-data) are available on the current site. Information is tied to the underlying forms by file ID and image ID. Data is updated nightly.    There are a lot of data, and a good place to start is to use search to find interesting candidates and committees. Then, you can use their IDs to find report or line item details with the other endpoints. If you are interested in individual donors, check out contributor information in the `/schedule_a/` endpoints.    <b class=\"body\" id=\"getting_started_head\">Getting started with the openFEC API</b><br>    If you would like to use the FEC's API programmatically, you can sign up for your own API key using our form. Alternatively, you can still try out our API without an API key by using the web interface and using DEMO_KEY. Note that when you use the openFEC API you are subject to the [Terms of Service](https://github.com/fecgov/FEC/blob/master/TERMS-OF-SERVICE.md) and [Acceptable Use policy](https://github.com/fecgov/FEC/blob/master/ACCEPTABLE-USE-POLICY.md).    Signing up for an API key will enable you to place up to 1,000 calls an hour. Each call is limited to 100 results per page. You can email questions, comments or a request to get a key for 7,200 calls an hour (120 calls per minute) to <a href=\"mailto:APIinfo@fec.gov\">APIinfo@fec.gov</a>. You can also ask questions and discuss the data in a community led [group](https://groups.google.com/forum/#!forum/fec-data).    The model definitions and schema are available at [/swagger](/swagger/). This is useful for making wrappers and exploring the data.    A few restrictions limit the way you can use FEC data. For example, you canâ€™t use contributor lists for commercial purposes or to solicit donations. [Learn more here](https://www.fec.gov/updates/sale-or-use-contributor-information/).    [Inspect our source code](https://github.com/fecgov/openFEC). We welcome issues and pull requests!    <p><br></p> <h2 class=\"title\" id=\"signup_head\">Sign up for an API key</h2> <div id=\"apidatagov_signup\">Loading signup form...</div>
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.math.BigDecimal;
import java.time.LocalDate;
import java.time.OffsetDateTime;
import java.util.Arrays;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * CommitteeTotalsIEOnly
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:02:12.812386-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class CommitteeTotalsIEOnly {
  public static final String SERIALIZED_NAME_COMMITTEE_ID = "committee_id";
  @SerializedName(SERIALIZED_NAME_COMMITTEE_ID)
  private String committeeId;

  public static final String SERIALIZED_NAME_COMMITTEE_STATE = "committee_state";
  @SerializedName(SERIALIZED_NAME_COMMITTEE_STATE)
  private String committeeState;

  public static final String SERIALIZED_NAME_CONTRIBUTIONS_IE_AND_PARTY_EXPENDITURES_MADE_PERCENT = "contributions_ie_and_party_expenditures_made_percent";
  @SerializedName(SERIALIZED_NAME_CONTRIBUTIONS_IE_AND_PARTY_EXPENDITURES_MADE_PERCENT)
  private BigDecimal contributionsIeAndPartyExpendituresMadePercent;

  public static final String SERIALIZED_NAME_COVERAGE_END_DATE = "coverage_end_date";
  @SerializedName(SERIALIZED_NAME_COVERAGE_END_DATE)
  private OffsetDateTime coverageEndDate;

  public static final String SERIALIZED_NAME_COVERAGE_START_DATE = "coverage_start_date";
  @SerializedName(SERIALIZED_NAME_COVERAGE_START_DATE)
  private OffsetDateTime coverageStartDate;

  public static final String SERIALIZED_NAME_CYCLE = "cycle";
  @SerializedName(SERIALIZED_NAME_CYCLE)
  private Integer cycle;

  public static final String SERIALIZED_NAME_FILING_FREQUENCY = "filing_frequency";
  @SerializedName(SERIALIZED_NAME_FILING_FREQUENCY)
  private String filingFrequency;

  public static final String SERIALIZED_NAME_FILING_FREQUENCY_FULL = "filing_frequency_full";
  @SerializedName(SERIALIZED_NAME_FILING_FREQUENCY_FULL)
  private String filingFrequencyFull;

  public static final String SERIALIZED_NAME_FIRST_FILE_DATE = "first_file_date";
  @SerializedName(SERIALIZED_NAME_FIRST_FILE_DATE)
  private LocalDate firstFileDate;

  public static final String SERIALIZED_NAME_INDIVIDUAL_CONTRIBUTIONS_PERCENT = "individual_contributions_percent";
  @SerializedName(SERIALIZED_NAME_INDIVIDUAL_CONTRIBUTIONS_PERCENT)
  private BigDecimal individualContributionsPercent;

  public static final String SERIALIZED_NAME_LAST_BEGINNING_IMAGE_NUMBER = "last_beginning_image_number";
  @SerializedName(SERIALIZED_NAME_LAST_BEGINNING_IMAGE_NUMBER)
  private String lastBeginningImageNumber;

  public static final String SERIALIZED_NAME_LAST_CASH_ON_HAND_END_PERIOD = "last_cash_on_hand_end_period";
  @SerializedName(SERIALIZED_NAME_LAST_CASH_ON_HAND_END_PERIOD)
  private BigDecimal lastCashOnHandEndPeriod;

  public static final String SERIALIZED_NAME_OPERATING_EXPENDITURES_PERCENT = "operating_expenditures_percent";
  @SerializedName(SERIALIZED_NAME_OPERATING_EXPENDITURES_PERCENT)
  private BigDecimal operatingExpendituresPercent;

  public static final String SERIALIZED_NAME_PARTY_AND_OTHER_COMMITTEE_CONTRIBUTIONS_PERCENT = "party_and_other_committee_contributions_percent";
  @SerializedName(SERIALIZED_NAME_PARTY_AND_OTHER_COMMITTEE_CONTRIBUTIONS_PERCENT)
  private BigDecimal partyAndOtherCommitteeContributionsPercent;

  public static final String SERIALIZED_NAME_PDF_URL = "pdf_url";
  @SerializedName(SERIALIZED_NAME_PDF_URL)
  private String pdfUrl;

  public static final String SERIALIZED_NAME_REPORT_FORM = "report_form";
  @SerializedName(SERIALIZED_NAME_REPORT_FORM)
  private String reportForm;

  public static final String SERIALIZED_NAME_TOTAL_INDEPENDENT_CONTRIBUTIONS = "total_independent_contributions";
  @SerializedName(SERIALIZED_NAME_TOTAL_INDEPENDENT_CONTRIBUTIONS)
  private BigDecimal totalIndependentContributions;

  public static final String SERIALIZED_NAME_TOTAL_INDEPENDENT_EXPENDITURES = "total_independent_expenditures";
  @SerializedName(SERIALIZED_NAME_TOTAL_INDEPENDENT_EXPENDITURES)
  private BigDecimal totalIndependentExpenditures;

  public static final String SERIALIZED_NAME_TRANSACTION_COVERAGE_DATE = "transaction_coverage_date";
  @SerializedName(SERIALIZED_NAME_TRANSACTION_COVERAGE_DATE)
  private LocalDate transactionCoverageDate;

  public CommitteeTotalsIEOnly() {
  }

  public CommitteeTotalsIEOnly committeeId(String committeeId) {
    this.committeeId = committeeId;
    return this;
  }

  /**
   *  A unique identifier assigned to each committee or filer registered with the FEC. In general committee id&#39;s begin with the letter C which is followed by eight digits. 
   * @return committeeId
   */
  @javax.annotation.Nullable
  public String getCommitteeId() {
    return committeeId;
  }

  public void setCommitteeId(String committeeId) {
    this.committeeId = committeeId;
  }


  public CommitteeTotalsIEOnly committeeState(String committeeState) {
    this.committeeState = committeeState;
    return this;
  }

  /**
   *  State of the committee&#39;s address as filed on the Form 1 
   * @return committeeState
   */
  @javax.annotation.Nullable
  public String getCommitteeState() {
    return committeeState;
  }

  public void setCommitteeState(String committeeState) {
    this.committeeState = committeeState;
  }


  public CommitteeTotalsIEOnly contributionsIeAndPartyExpendituresMadePercent(BigDecimal contributionsIeAndPartyExpendituresMadePercent) {
    this.contributionsIeAndPartyExpendituresMadePercent = contributionsIeAndPartyExpendituresMadePercent;
    return this;
  }

  /**
   * Get contributionsIeAndPartyExpendituresMadePercent
   * @return contributionsIeAndPartyExpendituresMadePercent
   */
  @javax.annotation.Nullable
  public BigDecimal getContributionsIeAndPartyExpendituresMadePercent() {
    return contributionsIeAndPartyExpendituresMadePercent;
  }

  public void setContributionsIeAndPartyExpendituresMadePercent(BigDecimal contributionsIeAndPartyExpendituresMadePercent) {
    this.contributionsIeAndPartyExpendituresMadePercent = contributionsIeAndPartyExpendituresMadePercent;
  }


  public CommitteeTotalsIEOnly coverageEndDate(OffsetDateTime coverageEndDate) {
    this.coverageEndDate = coverageEndDate;
    return this;
  }

  /**
   * Ending date of the reporting period
   * @return coverageEndDate
   */
  @javax.annotation.Nullable
  public OffsetDateTime getCoverageEndDate() {
    return coverageEndDate;
  }

  public void setCoverageEndDate(OffsetDateTime coverageEndDate) {
    this.coverageEndDate = coverageEndDate;
  }


  public CommitteeTotalsIEOnly coverageStartDate(OffsetDateTime coverageStartDate) {
    this.coverageStartDate = coverageStartDate;
    return this;
  }

  /**
   * Beginning date of the reporting period
   * @return coverageStartDate
   */
  @javax.annotation.Nullable
  public OffsetDateTime getCoverageStartDate() {
    return coverageStartDate;
  }

  public void setCoverageStartDate(OffsetDateTime coverageStartDate) {
    this.coverageStartDate = coverageStartDate;
  }


  public CommitteeTotalsIEOnly cycle(Integer cycle) {
    this.cycle = cycle;
    return this;
  }

  /**
   *  Filter records to only those that are applicable to a given two-year period. This cycle follows the traditional House election cycle and subdivides the presidential and Senate elections into comparable two-year blocks. The cycle begins with an odd year and is named for its ending, even year. 
   * @return cycle
   */
  @javax.annotation.Nullable
  public Integer getCycle() {
    return cycle;
  }

  public void setCycle(Integer cycle) {
    this.cycle = cycle;
  }


  public CommitteeTotalsIEOnly filingFrequency(String filingFrequency) {
    this.filingFrequency = filingFrequency;
    return this;
  }

  /**
   * The one-letter      code of the filing frequency:          - A Administratively terminated          - D Debt          - M Monthly filer          - Q Quarterly filer          - T Terminated          - W Waived 
   * @return filingFrequency
   */
  @javax.annotation.Nullable
  public String getFilingFrequency() {
    return filingFrequency;
  }

  public void setFilingFrequency(String filingFrequency) {
    this.filingFrequency = filingFrequency;
  }


  public CommitteeTotalsIEOnly filingFrequencyFull(String filingFrequencyFull) {
    this.filingFrequencyFull = filingFrequencyFull;
    return this;
  }

  /**
   * The one-letter      code of the filing frequency:          - A Administratively terminated          - D Debt          - M Monthly filer          - Q Quarterly filer          - T Terminated          - W Waived 
   * @return filingFrequencyFull
   */
  @javax.annotation.Nullable
  public String getFilingFrequencyFull() {
    return filingFrequencyFull;
  }

  public void setFilingFrequencyFull(String filingFrequencyFull) {
    this.filingFrequencyFull = filingFrequencyFull;
  }


  public CommitteeTotalsIEOnly firstFileDate(LocalDate firstFileDate) {
    this.firstFileDate = firstFileDate;
    return this;
  }

  /**
   * The day the FEC received the committee&#39;s first filing. This is usually a Form 1 committee registration.
   * @return firstFileDate
   */
  @javax.annotation.Nullable
  public LocalDate getFirstFileDate() {
    return firstFileDate;
  }

  public void setFirstFileDate(LocalDate firstFileDate) {
    this.firstFileDate = firstFileDate;
  }


  public CommitteeTotalsIEOnly individualContributionsPercent(BigDecimal individualContributionsPercent) {
    this.individualContributionsPercent = individualContributionsPercent;
    return this;
  }

  /**
   * Get individualContributionsPercent
   * @return individualContributionsPercent
   */
  @javax.annotation.Nullable
  public BigDecimal getIndividualContributionsPercent() {
    return individualContributionsPercent;
  }

  public void setIndividualContributionsPercent(BigDecimal individualContributionsPercent) {
    this.individualContributionsPercent = individualContributionsPercent;
  }


  public CommitteeTotalsIEOnly lastBeginningImageNumber(String lastBeginningImageNumber) {
    this.lastBeginningImageNumber = lastBeginningImageNumber;
    return this;
  }

  /**
   * Get lastBeginningImageNumber
   * @return lastBeginningImageNumber
   */
  @javax.annotation.Nullable
  public String getLastBeginningImageNumber() {
    return lastBeginningImageNumber;
  }

  public void setLastBeginningImageNumber(String lastBeginningImageNumber) {
    this.lastBeginningImageNumber = lastBeginningImageNumber;
  }


  public CommitteeTotalsIEOnly lastCashOnHandEndPeriod(BigDecimal lastCashOnHandEndPeriod) {
    this.lastCashOnHandEndPeriod = lastCashOnHandEndPeriod;
    return this;
  }

  /**
   * Get lastCashOnHandEndPeriod
   * @return lastCashOnHandEndPeriod
   */
  @javax.annotation.Nullable
  public BigDecimal getLastCashOnHandEndPeriod() {
    return lastCashOnHandEndPeriod;
  }

  public void setLastCashOnHandEndPeriod(BigDecimal lastCashOnHandEndPeriod) {
    this.lastCashOnHandEndPeriod = lastCashOnHandEndPeriod;
  }


  public CommitteeTotalsIEOnly operatingExpendituresPercent(BigDecimal operatingExpendituresPercent) {
    this.operatingExpendituresPercent = operatingExpendituresPercent;
    return this;
  }

  /**
   * Get operatingExpendituresPercent
   * @return operatingExpendituresPercent
   */
  @javax.annotation.Nullable
  public BigDecimal getOperatingExpendituresPercent() {
    return operatingExpendituresPercent;
  }

  public void setOperatingExpendituresPercent(BigDecimal operatingExpendituresPercent) {
    this.operatingExpendituresPercent = operatingExpendituresPercent;
  }


  public CommitteeTotalsIEOnly partyAndOtherCommitteeContributionsPercent(BigDecimal partyAndOtherCommitteeContributionsPercent) {
    this.partyAndOtherCommitteeContributionsPercent = partyAndOtherCommitteeContributionsPercent;
    return this;
  }

  /**
   * Get partyAndOtherCommitteeContributionsPercent
   * @return partyAndOtherCommitteeContributionsPercent
   */
  @javax.annotation.Nullable
  public BigDecimal getPartyAndOtherCommitteeContributionsPercent() {
    return partyAndOtherCommitteeContributionsPercent;
  }

  public void setPartyAndOtherCommitteeContributionsPercent(BigDecimal partyAndOtherCommitteeContributionsPercent) {
    this.partyAndOtherCommitteeContributionsPercent = partyAndOtherCommitteeContributionsPercent;
  }


  public CommitteeTotalsIEOnly pdfUrl(String pdfUrl) {
    this.pdfUrl = pdfUrl;
    return this;
  }

  /**
   * Get pdfUrl
   * @return pdfUrl
   */
  @javax.annotation.Nullable
  public String getPdfUrl() {
    return pdfUrl;
  }

  public void setPdfUrl(String pdfUrl) {
    this.pdfUrl = pdfUrl;
  }


  public CommitteeTotalsIEOnly reportForm(String reportForm) {
    this.reportForm = reportForm;
    return this;
  }

  /**
   * Get reportForm
   * @return reportForm
   */
  @javax.annotation.Nullable
  public String getReportForm() {
    return reportForm;
  }

  public void setReportForm(String reportForm) {
    this.reportForm = reportForm;
  }


  public CommitteeTotalsIEOnly totalIndependentContributions(BigDecimal totalIndependentContributions) {
    this.totalIndependentContributions = totalIndependentContributions;
    return this;
  }

  /**
   * Get totalIndependentContributions
   * @return totalIndependentContributions
   */
  @javax.annotation.Nullable
  public BigDecimal getTotalIndependentContributions() {
    return totalIndependentContributions;
  }

  public void setTotalIndependentContributions(BigDecimal totalIndependentContributions) {
    this.totalIndependentContributions = totalIndependentContributions;
  }


  public CommitteeTotalsIEOnly totalIndependentExpenditures(BigDecimal totalIndependentExpenditures) {
    this.totalIndependentExpenditures = totalIndependentExpenditures;
    return this;
  }

  /**
   * Get totalIndependentExpenditures
   * @return totalIndependentExpenditures
   */
  @javax.annotation.Nullable
  public BigDecimal getTotalIndependentExpenditures() {
    return totalIndependentExpenditures;
  }

  public void setTotalIndependentExpenditures(BigDecimal totalIndependentExpenditures) {
    this.totalIndependentExpenditures = totalIndependentExpenditures;
  }


  public CommitteeTotalsIEOnly transactionCoverageDate(LocalDate transactionCoverageDate) {
    this.transactionCoverageDate = transactionCoverageDate;
    return this;
  }

  /**
   * Get transactionCoverageDate
   * @return transactionCoverageDate
   */
  @javax.annotation.Nullable
  public LocalDate getTransactionCoverageDate() {
    return transactionCoverageDate;
  }

  public void setTransactionCoverageDate(LocalDate transactionCoverageDate) {
    this.transactionCoverageDate = transactionCoverageDate;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CommitteeTotalsIEOnly committeeTotalsIEOnly = (CommitteeTotalsIEOnly) o;
    return Objects.equals(this.committeeId, committeeTotalsIEOnly.committeeId) &&
        Objects.equals(this.committeeState, committeeTotalsIEOnly.committeeState) &&
        Objects.equals(this.contributionsIeAndPartyExpendituresMadePercent, committeeTotalsIEOnly.contributionsIeAndPartyExpendituresMadePercent) &&
        Objects.equals(this.coverageEndDate, committeeTotalsIEOnly.coverageEndDate) &&
        Objects.equals(this.coverageStartDate, committeeTotalsIEOnly.coverageStartDate) &&
        Objects.equals(this.cycle, committeeTotalsIEOnly.cycle) &&
        Objects.equals(this.filingFrequency, committeeTotalsIEOnly.filingFrequency) &&
        Objects.equals(this.filingFrequencyFull, committeeTotalsIEOnly.filingFrequencyFull) &&
        Objects.equals(this.firstFileDate, committeeTotalsIEOnly.firstFileDate) &&
        Objects.equals(this.individualContributionsPercent, committeeTotalsIEOnly.individualContributionsPercent) &&
        Objects.equals(this.lastBeginningImageNumber, committeeTotalsIEOnly.lastBeginningImageNumber) &&
        Objects.equals(this.lastCashOnHandEndPeriod, committeeTotalsIEOnly.lastCashOnHandEndPeriod) &&
        Objects.equals(this.operatingExpendituresPercent, committeeTotalsIEOnly.operatingExpendituresPercent) &&
        Objects.equals(this.partyAndOtherCommitteeContributionsPercent, committeeTotalsIEOnly.partyAndOtherCommitteeContributionsPercent) &&
        Objects.equals(this.pdfUrl, committeeTotalsIEOnly.pdfUrl) &&
        Objects.equals(this.reportForm, committeeTotalsIEOnly.reportForm) &&
        Objects.equals(this.totalIndependentContributions, committeeTotalsIEOnly.totalIndependentContributions) &&
        Objects.equals(this.totalIndependentExpenditures, committeeTotalsIEOnly.totalIndependentExpenditures) &&
        Objects.equals(this.transactionCoverageDate, committeeTotalsIEOnly.transactionCoverageDate);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(committeeId, committeeState, contributionsIeAndPartyExpendituresMadePercent, coverageEndDate, coverageStartDate, cycle, filingFrequency, filingFrequencyFull, firstFileDate, individualContributionsPercent, lastBeginningImageNumber, lastCashOnHandEndPeriod, operatingExpendituresPercent, partyAndOtherCommitteeContributionsPercent, pdfUrl, reportForm, totalIndependentContributions, totalIndependentExpenditures, transactionCoverageDate);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CommitteeTotalsIEOnly {\n");
    sb.append("    committeeId: ").append(toIndentedString(committeeId)).append("\n");
    sb.append("    committeeState: ").append(toIndentedString(committeeState)).append("\n");
    sb.append("    contributionsIeAndPartyExpendituresMadePercent: ").append(toIndentedString(contributionsIeAndPartyExpendituresMadePercent)).append("\n");
    sb.append("    coverageEndDate: ").append(toIndentedString(coverageEndDate)).append("\n");
    sb.append("    coverageStartDate: ").append(toIndentedString(coverageStartDate)).append("\n");
    sb.append("    cycle: ").append(toIndentedString(cycle)).append("\n");
    sb.append("    filingFrequency: ").append(toIndentedString(filingFrequency)).append("\n");
    sb.append("    filingFrequencyFull: ").append(toIndentedString(filingFrequencyFull)).append("\n");
    sb.append("    firstFileDate: ").append(toIndentedString(firstFileDate)).append("\n");
    sb.append("    individualContributionsPercent: ").append(toIndentedString(individualContributionsPercent)).append("\n");
    sb.append("    lastBeginningImageNumber: ").append(toIndentedString(lastBeginningImageNumber)).append("\n");
    sb.append("    lastCashOnHandEndPeriod: ").append(toIndentedString(lastCashOnHandEndPeriod)).append("\n");
    sb.append("    operatingExpendituresPercent: ").append(toIndentedString(operatingExpendituresPercent)).append("\n");
    sb.append("    partyAndOtherCommitteeContributionsPercent: ").append(toIndentedString(partyAndOtherCommitteeContributionsPercent)).append("\n");
    sb.append("    pdfUrl: ").append(toIndentedString(pdfUrl)).append("\n");
    sb.append("    reportForm: ").append(toIndentedString(reportForm)).append("\n");
    sb.append("    totalIndependentContributions: ").append(toIndentedString(totalIndependentContributions)).append("\n");
    sb.append("    totalIndependentExpenditures: ").append(toIndentedString(totalIndependentExpenditures)).append("\n");
    sb.append("    transactionCoverageDate: ").append(toIndentedString(transactionCoverageDate)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("committee_id");
    openapiFields.add("committee_state");
    openapiFields.add("contributions_ie_and_party_expenditures_made_percent");
    openapiFields.add("coverage_end_date");
    openapiFields.add("coverage_start_date");
    openapiFields.add("cycle");
    openapiFields.add("filing_frequency");
    openapiFields.add("filing_frequency_full");
    openapiFields.add("first_file_date");
    openapiFields.add("individual_contributions_percent");
    openapiFields.add("last_beginning_image_number");
    openapiFields.add("last_cash_on_hand_end_period");
    openapiFields.add("operating_expenditures_percent");
    openapiFields.add("party_and_other_committee_contributions_percent");
    openapiFields.add("pdf_url");
    openapiFields.add("report_form");
    openapiFields.add("total_independent_contributions");
    openapiFields.add("total_independent_expenditures");
    openapiFields.add("transaction_coverage_date");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to CommitteeTotalsIEOnly
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!CommitteeTotalsIEOnly.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CommitteeTotalsIEOnly is not found in the empty JSON string", CommitteeTotalsIEOnly.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!CommitteeTotalsIEOnly.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CommitteeTotalsIEOnly` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("committee_id") != null && !jsonObj.get("committee_id").isJsonNull()) && !jsonObj.get("committee_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `committee_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("committee_id").toString()));
      }
      if ((jsonObj.get("committee_state") != null && !jsonObj.get("committee_state").isJsonNull()) && !jsonObj.get("committee_state").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `committee_state` to be a primitive type in the JSON string but got `%s`", jsonObj.get("committee_state").toString()));
      }
      if ((jsonObj.get("filing_frequency") != null && !jsonObj.get("filing_frequency").isJsonNull()) && !jsonObj.get("filing_frequency").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `filing_frequency` to be a primitive type in the JSON string but got `%s`", jsonObj.get("filing_frequency").toString()));
      }
      if ((jsonObj.get("filing_frequency_full") != null && !jsonObj.get("filing_frequency_full").isJsonNull()) && !jsonObj.get("filing_frequency_full").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `filing_frequency_full` to be a primitive type in the JSON string but got `%s`", jsonObj.get("filing_frequency_full").toString()));
      }
      if ((jsonObj.get("last_beginning_image_number") != null && !jsonObj.get("last_beginning_image_number").isJsonNull()) && !jsonObj.get("last_beginning_image_number").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `last_beginning_image_number` to be a primitive type in the JSON string but got `%s`", jsonObj.get("last_beginning_image_number").toString()));
      }
      if ((jsonObj.get("pdf_url") != null && !jsonObj.get("pdf_url").isJsonNull()) && !jsonObj.get("pdf_url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `pdf_url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("pdf_url").toString()));
      }
      if ((jsonObj.get("report_form") != null && !jsonObj.get("report_form").isJsonNull()) && !jsonObj.get("report_form").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `report_form` to be a primitive type in the JSON string but got `%s`", jsonObj.get("report_form").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CommitteeTotalsIEOnly.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CommitteeTotalsIEOnly' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CommitteeTotalsIEOnly> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CommitteeTotalsIEOnly.class));

       return (TypeAdapter<T>) new TypeAdapter<CommitteeTotalsIEOnly>() {
           @Override
           public void write(JsonWriter out, CommitteeTotalsIEOnly value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CommitteeTotalsIEOnly read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of CommitteeTotalsIEOnly given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of CommitteeTotalsIEOnly
   * @throws IOException if the JSON string is invalid with respect to CommitteeTotalsIEOnly
   */
  public static CommitteeTotalsIEOnly fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CommitteeTotalsIEOnly.class);
  }

  /**
   * Convert an instance of CommitteeTotalsIEOnly to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

