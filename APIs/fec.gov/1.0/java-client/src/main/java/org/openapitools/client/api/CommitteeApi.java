/*
 * OpenFEC
 * This application programming interface (API) allows you to explore the way candidates and committees fund their campaigns.    The Federal Election Commission (FEC) API is a RESTful web service supporting full-text and field-specific searches on FEC data. [Bulk downloads](https://www.fec.gov/data/advanced/?tab=bulk-data) are available on the current site. Information is tied to the underlying forms by file ID and image ID. Data is updated nightly.    There are a lot of data, and a good place to start is to use search to find interesting candidates and committees. Then, you can use their IDs to find report or line item details with the other endpoints. If you are interested in individual donors, check out contributor information in the `/schedule_a/` endpoints.    <b class=\"body\" id=\"getting_started_head\">Getting started with the openFEC API</b><br>    If you would like to use the FEC's API programmatically, you can sign up for your own API key using our form. Alternatively, you can still try out our API without an API key by using the web interface and using DEMO_KEY. Note that when you use the openFEC API you are subject to the [Terms of Service](https://github.com/fecgov/FEC/blob/master/TERMS-OF-SERVICE.md) and [Acceptable Use policy](https://github.com/fecgov/FEC/blob/master/ACCEPTABLE-USE-POLICY.md).    Signing up for an API key will enable you to place up to 1,000 calls an hour. Each call is limited to 100 results per page. You can email questions, comments or a request to get a key for 7,200 calls an hour (120 calls per minute) to <a href=\"mailto:APIinfo@fec.gov\">APIinfo@fec.gov</a>. You can also ask questions and discuss the data in a community led [group](https://groups.google.com/forum/#!forum/fec-data).    The model definitions and schema are available at [/swagger](/swagger/). This is useful for making wrappers and exploring the data.    A few restrictions limit the way you can use FEC data. For example, you can’t use contributor lists for commercial purposes or to solicit donations. [Learn more here](https://www.fec.gov/updates/sale-or-use-contributor-information/).    [Inspect our source code](https://github.com/fecgov/openFEC). We welcome issues and pull requests!    <p><br></p> <h2 class=\"title\" id=\"signup_head\">Sign up for an API key</h2> <div id=\"apidatagov_signup\">Loading signup form...</div>
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.CommitteeDetailPage;
import org.openapitools.client.model.CommitteeHistoryProfilePage;
import org.openapitools.client.model.CommitteePage;
import java.time.LocalDate;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class CommitteeApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public CommitteeApi() {
        this(Configuration.getDefaultApiClient());
    }

    public CommitteeApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for candidateCandidateIdCommitteesGet
     * @param apiKey  API key for https://api.data.gov. Get one at https://api.data.gov/signup.  (required)
     * @param candidateId  A unique identifier assigned to each candidate registered with the FEC. If a person runs for several offices, that person will have separate candidate IDs for each office. First character indicates office - [P]residential, [H]ouse, [S]enate]. Second character is the last digit of the two-year period the ID was created. Third and fourth is the candidate state. Presidential IDs don&#39;t have state. Fifth and sixth is the district when the candidate first ran. This does not change if the candidate/member&#39;s district changes during re-districting. Presidential IDs don&#39;t have districts. The rest is sequence.  (required)
     * @param committeeType The one-letter type code of the organization:         - C communication cost         - D delegate         - E electioneering communication         - H House         - I independent expenditure filer (not a committee)         - N PAC - nonqualified         - O independent expenditure-only (super PACs)         - P presidential         - Q PAC - qualified         - S Senate         - U single candidate independent expenditure         - V PAC with non-contribution account, nonqualified         - W PAC with non-contribution account, qualified         - X party, nonqualified         - Y party, qualified         - Z national party non-federal account  (optional)
     * @param cycle  A two year election cycle that the committee was active- (after original registration date but before expiration date in Form 1s) The cycle begins with an odd year and is named for its ending, even year.  (optional)
     * @param sortNullOnly Toggle that filters out all rows having sort column that is non-null (optional, default to false)
     * @param page For paginating through results, starting at page 1 (optional, default to 1)
     * @param year A year that the committee was active— (after original registration date     or filing but before expiration date) (optional)
     * @param sortNullsLast Toggle that sorts null values last (optional, default to false)
     * @param sortHideNull Hide null values on sorted column(s). (optional, default to false)
     * @param perPage The number of results returned per page. Defaults to 20. (optional, default to 20)
     * @param filingFrequency The one-letter      code of the filing frequency:          - A Administratively terminated          - D Debt          - M Monthly filer          - Q Quarterly filer          - T Terminated          - W Waived  (optional)
     * @param organizationType The one-letter code for the kind for organization:         - C corporation         - L labor organization         - M membership organization         - T trade association         - V cooperative         - W corporation without capital stock  (optional)
     * @param designation The one-letter designation code of the organization:          - A authorized by a candidate          - J joint fundraising committee          - P principal campaign committee of a candidate          - U unauthorized          - B lobbyist/registrant PAC          - D leadership PAC  (optional)
     * @param sort Provide a field to sort by. Use &#x60;-&#x60; for descending order.  (optional, default to name)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call candidateCandidateIdCommitteesGetCall(String apiKey, String candidateId, List<String> committeeType, List<Integer> cycle, Boolean sortNullOnly, Integer page, List<Integer> year, Boolean sortNullsLast, Boolean sortHideNull, Integer perPage, List<String> filingFrequency, List<String> organizationType, List<String> designation, String sort, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/candidate/{candidate_id}/committees/"
            .replace("{" + "candidate_id" + "}", localVarApiClient.escapeString(candidateId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiKey != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api_key", apiKey));
        }

        if (committeeType != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "committee_type", committeeType));
        }

        if (cycle != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "cycle", cycle));
        }

        if (sortNullOnly != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort_null_only", sortNullOnly));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (year != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "year", year));
        }

        if (sortNullsLast != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort_nulls_last", sortNullsLast));
        }

        if (sortHideNull != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort_hide_null", sortHideNull));
        }

        if (perPage != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("per_page", perPage));
        }

        if (filingFrequency != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "filing_frequency", filingFrequency));
        }

        if (organizationType != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "organization_type", organizationType));
        }

        if (designation != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "designation", designation));
        }

        if (sort != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort", sort));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKeyHeaderAuth", "ApiKeyQueryAuth", "apiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call candidateCandidateIdCommitteesGetValidateBeforeCall(String apiKey, String candidateId, List<String> committeeType, List<Integer> cycle, Boolean sortNullOnly, Integer page, List<Integer> year, Boolean sortNullsLast, Boolean sortHideNull, Integer perPage, List<String> filingFrequency, List<String> organizationType, List<String> designation, String sort, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'apiKey' is set
        if (apiKey == null) {
            throw new ApiException("Missing the required parameter 'apiKey' when calling candidateCandidateIdCommitteesGet(Async)");
        }

        // verify the required parameter 'candidateId' is set
        if (candidateId == null) {
            throw new ApiException("Missing the required parameter 'candidateId' when calling candidateCandidateIdCommitteesGet(Async)");
        }

        return candidateCandidateIdCommitteesGetCall(apiKey, candidateId, committeeType, cycle, sortNullOnly, page, year, sortNullsLast, sortHideNull, perPage, filingFrequency, organizationType, designation, sort, _callback);

    }

    /**
     * 
     *  This endpoint is useful for finding detailed information about a particular committee or filer. Use the &#x60;committee_id&#x60; to find the most recent information about the committee. 
     * @param apiKey  API key for https://api.data.gov. Get one at https://api.data.gov/signup.  (required)
     * @param candidateId  A unique identifier assigned to each candidate registered with the FEC. If a person runs for several offices, that person will have separate candidate IDs for each office. First character indicates office - [P]residential, [H]ouse, [S]enate]. Second character is the last digit of the two-year period the ID was created. Third and fourth is the candidate state. Presidential IDs don&#39;t have state. Fifth and sixth is the district when the candidate first ran. This does not change if the candidate/member&#39;s district changes during re-districting. Presidential IDs don&#39;t have districts. The rest is sequence.  (required)
     * @param committeeType The one-letter type code of the organization:         - C communication cost         - D delegate         - E electioneering communication         - H House         - I independent expenditure filer (not a committee)         - N PAC - nonqualified         - O independent expenditure-only (super PACs)         - P presidential         - Q PAC - qualified         - S Senate         - U single candidate independent expenditure         - V PAC with non-contribution account, nonqualified         - W PAC with non-contribution account, qualified         - X party, nonqualified         - Y party, qualified         - Z national party non-federal account  (optional)
     * @param cycle  A two year election cycle that the committee was active- (after original registration date but before expiration date in Form 1s) The cycle begins with an odd year and is named for its ending, even year.  (optional)
     * @param sortNullOnly Toggle that filters out all rows having sort column that is non-null (optional, default to false)
     * @param page For paginating through results, starting at page 1 (optional, default to 1)
     * @param year A year that the committee was active— (after original registration date     or filing but before expiration date) (optional)
     * @param sortNullsLast Toggle that sorts null values last (optional, default to false)
     * @param sortHideNull Hide null values on sorted column(s). (optional, default to false)
     * @param perPage The number of results returned per page. Defaults to 20. (optional, default to 20)
     * @param filingFrequency The one-letter      code of the filing frequency:          - A Administratively terminated          - D Debt          - M Monthly filer          - Q Quarterly filer          - T Terminated          - W Waived  (optional)
     * @param organizationType The one-letter code for the kind for organization:         - C corporation         - L labor organization         - M membership organization         - T trade association         - V cooperative         - W corporation without capital stock  (optional)
     * @param designation The one-letter designation code of the organization:          - A authorized by a candidate          - J joint fundraising committee          - P principal campaign committee of a candidate          - U unauthorized          - B lobbyist/registrant PAC          - D leadership PAC  (optional)
     * @param sort Provide a field to sort by. Use &#x60;-&#x60; for descending order.  (optional, default to name)
     * @return CommitteeDetailPage
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public CommitteeDetailPage candidateCandidateIdCommitteesGet(String apiKey, String candidateId, List<String> committeeType, List<Integer> cycle, Boolean sortNullOnly, Integer page, List<Integer> year, Boolean sortNullsLast, Boolean sortHideNull, Integer perPage, List<String> filingFrequency, List<String> organizationType, List<String> designation, String sort) throws ApiException {
        ApiResponse<CommitteeDetailPage> localVarResp = candidateCandidateIdCommitteesGetWithHttpInfo(apiKey, candidateId, committeeType, cycle, sortNullOnly, page, year, sortNullsLast, sortHideNull, perPage, filingFrequency, organizationType, designation, sort);
        return localVarResp.getData();
    }

    /**
     * 
     *  This endpoint is useful for finding detailed information about a particular committee or filer. Use the &#x60;committee_id&#x60; to find the most recent information about the committee. 
     * @param apiKey  API key for https://api.data.gov. Get one at https://api.data.gov/signup.  (required)
     * @param candidateId  A unique identifier assigned to each candidate registered with the FEC. If a person runs for several offices, that person will have separate candidate IDs for each office. First character indicates office - [P]residential, [H]ouse, [S]enate]. Second character is the last digit of the two-year period the ID was created. Third and fourth is the candidate state. Presidential IDs don&#39;t have state. Fifth and sixth is the district when the candidate first ran. This does not change if the candidate/member&#39;s district changes during re-districting. Presidential IDs don&#39;t have districts. The rest is sequence.  (required)
     * @param committeeType The one-letter type code of the organization:         - C communication cost         - D delegate         - E electioneering communication         - H House         - I independent expenditure filer (not a committee)         - N PAC - nonqualified         - O independent expenditure-only (super PACs)         - P presidential         - Q PAC - qualified         - S Senate         - U single candidate independent expenditure         - V PAC with non-contribution account, nonqualified         - W PAC with non-contribution account, qualified         - X party, nonqualified         - Y party, qualified         - Z national party non-federal account  (optional)
     * @param cycle  A two year election cycle that the committee was active- (after original registration date but before expiration date in Form 1s) The cycle begins with an odd year and is named for its ending, even year.  (optional)
     * @param sortNullOnly Toggle that filters out all rows having sort column that is non-null (optional, default to false)
     * @param page For paginating through results, starting at page 1 (optional, default to 1)
     * @param year A year that the committee was active— (after original registration date     or filing but before expiration date) (optional)
     * @param sortNullsLast Toggle that sorts null values last (optional, default to false)
     * @param sortHideNull Hide null values on sorted column(s). (optional, default to false)
     * @param perPage The number of results returned per page. Defaults to 20. (optional, default to 20)
     * @param filingFrequency The one-letter      code of the filing frequency:          - A Administratively terminated          - D Debt          - M Monthly filer          - Q Quarterly filer          - T Terminated          - W Waived  (optional)
     * @param organizationType The one-letter code for the kind for organization:         - C corporation         - L labor organization         - M membership organization         - T trade association         - V cooperative         - W corporation without capital stock  (optional)
     * @param designation The one-letter designation code of the organization:          - A authorized by a candidate          - J joint fundraising committee          - P principal campaign committee of a candidate          - U unauthorized          - B lobbyist/registrant PAC          - D leadership PAC  (optional)
     * @param sort Provide a field to sort by. Use &#x60;-&#x60; for descending order.  (optional, default to name)
     * @return ApiResponse&lt;CommitteeDetailPage&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CommitteeDetailPage> candidateCandidateIdCommitteesGetWithHttpInfo(String apiKey, String candidateId, List<String> committeeType, List<Integer> cycle, Boolean sortNullOnly, Integer page, List<Integer> year, Boolean sortNullsLast, Boolean sortHideNull, Integer perPage, List<String> filingFrequency, List<String> organizationType, List<String> designation, String sort) throws ApiException {
        okhttp3.Call localVarCall = candidateCandidateIdCommitteesGetValidateBeforeCall(apiKey, candidateId, committeeType, cycle, sortNullOnly, page, year, sortNullsLast, sortHideNull, perPage, filingFrequency, organizationType, designation, sort, null);
        Type localVarReturnType = new TypeToken<CommitteeDetailPage>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     *  This endpoint is useful for finding detailed information about a particular committee or filer. Use the &#x60;committee_id&#x60; to find the most recent information about the committee. 
     * @param apiKey  API key for https://api.data.gov. Get one at https://api.data.gov/signup.  (required)
     * @param candidateId  A unique identifier assigned to each candidate registered with the FEC. If a person runs for several offices, that person will have separate candidate IDs for each office. First character indicates office - [P]residential, [H]ouse, [S]enate]. Second character is the last digit of the two-year period the ID was created. Third and fourth is the candidate state. Presidential IDs don&#39;t have state. Fifth and sixth is the district when the candidate first ran. This does not change if the candidate/member&#39;s district changes during re-districting. Presidential IDs don&#39;t have districts. The rest is sequence.  (required)
     * @param committeeType The one-letter type code of the organization:         - C communication cost         - D delegate         - E electioneering communication         - H House         - I independent expenditure filer (not a committee)         - N PAC - nonqualified         - O independent expenditure-only (super PACs)         - P presidential         - Q PAC - qualified         - S Senate         - U single candidate independent expenditure         - V PAC with non-contribution account, nonqualified         - W PAC with non-contribution account, qualified         - X party, nonqualified         - Y party, qualified         - Z national party non-federal account  (optional)
     * @param cycle  A two year election cycle that the committee was active- (after original registration date but before expiration date in Form 1s) The cycle begins with an odd year and is named for its ending, even year.  (optional)
     * @param sortNullOnly Toggle that filters out all rows having sort column that is non-null (optional, default to false)
     * @param page For paginating through results, starting at page 1 (optional, default to 1)
     * @param year A year that the committee was active— (after original registration date     or filing but before expiration date) (optional)
     * @param sortNullsLast Toggle that sorts null values last (optional, default to false)
     * @param sortHideNull Hide null values on sorted column(s). (optional, default to false)
     * @param perPage The number of results returned per page. Defaults to 20. (optional, default to 20)
     * @param filingFrequency The one-letter      code of the filing frequency:          - A Administratively terminated          - D Debt          - M Monthly filer          - Q Quarterly filer          - T Terminated          - W Waived  (optional)
     * @param organizationType The one-letter code for the kind for organization:         - C corporation         - L labor organization         - M membership organization         - T trade association         - V cooperative         - W corporation without capital stock  (optional)
     * @param designation The one-letter designation code of the organization:          - A authorized by a candidate          - J joint fundraising committee          - P principal campaign committee of a candidate          - U unauthorized          - B lobbyist/registrant PAC          - D leadership PAC  (optional)
     * @param sort Provide a field to sort by. Use &#x60;-&#x60; for descending order.  (optional, default to name)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call candidateCandidateIdCommitteesGetAsync(String apiKey, String candidateId, List<String> committeeType, List<Integer> cycle, Boolean sortNullOnly, Integer page, List<Integer> year, Boolean sortNullsLast, Boolean sortHideNull, Integer perPage, List<String> filingFrequency, List<String> organizationType, List<String> designation, String sort, final ApiCallback<CommitteeDetailPage> _callback) throws ApiException {

        okhttp3.Call localVarCall = candidateCandidateIdCommitteesGetValidateBeforeCall(apiKey, candidateId, committeeType, cycle, sortNullOnly, page, year, sortNullsLast, sortHideNull, perPage, filingFrequency, organizationType, designation, sort, _callback);
        Type localVarReturnType = new TypeToken<CommitteeDetailPage>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for candidateCandidateIdCommitteesHistoryCycleGet
     * @param apiKey  API key for https://api.data.gov. Get one at https://api.data.gov/signup.  (required)
     * @param cycle  A two year election cycle that the committee was active- (after original registration date but before expiration date in Form 1s) The cycle begins with an odd year and is named for its ending, even year.  (required)
     * @param candidateId  A unique identifier assigned to each candidate registered with the FEC. If a person runs for several offices, that person will have separate candidate IDs for each office. First character indicates office - [P]residential, [H]ouse, [S]enate]. Second character is the last digit of the two-year period the ID was created. Third and fourth is the candidate state. Presidential IDs don&#39;t have state. Fifth and sixth is the district when the candidate first ran. This does not change if the candidate/member&#39;s district changes during re-districting. Presidential IDs don&#39;t have districts. The rest is sequence.  (required)
     * @param electionFull &#x60;True&#x60; indicates that full election period of a candidate. &#x60;False&#x60; indicates that two year election cycle. (optional, default to true)
     * @param sortNullsLast Toggle that sorts null values last (optional, default to false)
     * @param page For paginating through results, starting at page 1 (optional, default to 1)
     * @param sortNullOnly Toggle that filters out all rows having sort column that is non-null (optional, default to false)
     * @param sortHideNull Hide null values on sorted column(s). (optional, default to false)
     * @param perPage The number of results returned per page. Defaults to 20. (optional, default to 20)
     * @param designation The one-letter designation code of the organization:          - A authorized by a candidate          - J joint fundraising committee          - P principal campaign committee of a candidate          - U unauthorized          - B lobbyist/registrant PAC          - D leadership PAC  (optional)
     * @param sort Provide a field to sort by. Use &#x60;-&#x60; for descending order.  (optional, default to -cycle)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call candidateCandidateIdCommitteesHistoryCycleGetCall(String apiKey, Integer cycle, String candidateId, Boolean electionFull, Boolean sortNullsLast, Integer page, Boolean sortNullOnly, Boolean sortHideNull, Integer perPage, List<String> designation, String sort, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/candidate/{candidate_id}/committees/history/{cycle}/"
            .replace("{" + "cycle" + "}", localVarApiClient.escapeString(cycle.toString()))
            .replace("{" + "candidate_id" + "}", localVarApiClient.escapeString(candidateId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiKey != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api_key", apiKey));
        }

        if (electionFull != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("election_full", electionFull));
        }

        if (sortNullsLast != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort_nulls_last", sortNullsLast));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (sortNullOnly != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort_null_only", sortNullOnly));
        }

        if (sortHideNull != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort_hide_null", sortHideNull));
        }

        if (perPage != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("per_page", perPage));
        }

        if (designation != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "designation", designation));
        }

        if (sort != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort", sort));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKeyHeaderAuth", "ApiKeyQueryAuth", "apiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call candidateCandidateIdCommitteesHistoryCycleGetValidateBeforeCall(String apiKey, Integer cycle, String candidateId, Boolean electionFull, Boolean sortNullsLast, Integer page, Boolean sortNullOnly, Boolean sortHideNull, Integer perPage, List<String> designation, String sort, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'apiKey' is set
        if (apiKey == null) {
            throw new ApiException("Missing the required parameter 'apiKey' when calling candidateCandidateIdCommitteesHistoryCycleGet(Async)");
        }

        // verify the required parameter 'cycle' is set
        if (cycle == null) {
            throw new ApiException("Missing the required parameter 'cycle' when calling candidateCandidateIdCommitteesHistoryCycleGet(Async)");
        }

        // verify the required parameter 'candidateId' is set
        if (candidateId == null) {
            throw new ApiException("Missing the required parameter 'candidateId' when calling candidateCandidateIdCommitteesHistoryCycleGet(Async)");
        }

        return candidateCandidateIdCommitteesHistoryCycleGetCall(apiKey, cycle, candidateId, electionFull, sortNullsLast, page, sortNullOnly, sortHideNull, perPage, designation, sort, _callback);

    }

    /**
     * 
     *  Explore a filer&#39;s characteristics over time. This can be particularly useful if the committees change treasurers, designation, or &#x60;committee_type&#x60;. 
     * @param apiKey  API key for https://api.data.gov. Get one at https://api.data.gov/signup.  (required)
     * @param cycle  A two year election cycle that the committee was active- (after original registration date but before expiration date in Form 1s) The cycle begins with an odd year and is named for its ending, even year.  (required)
     * @param candidateId  A unique identifier assigned to each candidate registered with the FEC. If a person runs for several offices, that person will have separate candidate IDs for each office. First character indicates office - [P]residential, [H]ouse, [S]enate]. Second character is the last digit of the two-year period the ID was created. Third and fourth is the candidate state. Presidential IDs don&#39;t have state. Fifth and sixth is the district when the candidate first ran. This does not change if the candidate/member&#39;s district changes during re-districting. Presidential IDs don&#39;t have districts. The rest is sequence.  (required)
     * @param electionFull &#x60;True&#x60; indicates that full election period of a candidate. &#x60;False&#x60; indicates that two year election cycle. (optional, default to true)
     * @param sortNullsLast Toggle that sorts null values last (optional, default to false)
     * @param page For paginating through results, starting at page 1 (optional, default to 1)
     * @param sortNullOnly Toggle that filters out all rows having sort column that is non-null (optional, default to false)
     * @param sortHideNull Hide null values on sorted column(s). (optional, default to false)
     * @param perPage The number of results returned per page. Defaults to 20. (optional, default to 20)
     * @param designation The one-letter designation code of the organization:          - A authorized by a candidate          - J joint fundraising committee          - P principal campaign committee of a candidate          - U unauthorized          - B lobbyist/registrant PAC          - D leadership PAC  (optional)
     * @param sort Provide a field to sort by. Use &#x60;-&#x60; for descending order.  (optional, default to -cycle)
     * @return CommitteeHistoryProfilePage
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public CommitteeHistoryProfilePage candidateCandidateIdCommitteesHistoryCycleGet(String apiKey, Integer cycle, String candidateId, Boolean electionFull, Boolean sortNullsLast, Integer page, Boolean sortNullOnly, Boolean sortHideNull, Integer perPage, List<String> designation, String sort) throws ApiException {
        ApiResponse<CommitteeHistoryProfilePage> localVarResp = candidateCandidateIdCommitteesHistoryCycleGetWithHttpInfo(apiKey, cycle, candidateId, electionFull, sortNullsLast, page, sortNullOnly, sortHideNull, perPage, designation, sort);
        return localVarResp.getData();
    }

    /**
     * 
     *  Explore a filer&#39;s characteristics over time. This can be particularly useful if the committees change treasurers, designation, or &#x60;committee_type&#x60;. 
     * @param apiKey  API key for https://api.data.gov. Get one at https://api.data.gov/signup.  (required)
     * @param cycle  A two year election cycle that the committee was active- (after original registration date but before expiration date in Form 1s) The cycle begins with an odd year and is named for its ending, even year.  (required)
     * @param candidateId  A unique identifier assigned to each candidate registered with the FEC. If a person runs for several offices, that person will have separate candidate IDs for each office. First character indicates office - [P]residential, [H]ouse, [S]enate]. Second character is the last digit of the two-year period the ID was created. Third and fourth is the candidate state. Presidential IDs don&#39;t have state. Fifth and sixth is the district when the candidate first ran. This does not change if the candidate/member&#39;s district changes during re-districting. Presidential IDs don&#39;t have districts. The rest is sequence.  (required)
     * @param electionFull &#x60;True&#x60; indicates that full election period of a candidate. &#x60;False&#x60; indicates that two year election cycle. (optional, default to true)
     * @param sortNullsLast Toggle that sorts null values last (optional, default to false)
     * @param page For paginating through results, starting at page 1 (optional, default to 1)
     * @param sortNullOnly Toggle that filters out all rows having sort column that is non-null (optional, default to false)
     * @param sortHideNull Hide null values on sorted column(s). (optional, default to false)
     * @param perPage The number of results returned per page. Defaults to 20. (optional, default to 20)
     * @param designation The one-letter designation code of the organization:          - A authorized by a candidate          - J joint fundraising committee          - P principal campaign committee of a candidate          - U unauthorized          - B lobbyist/registrant PAC          - D leadership PAC  (optional)
     * @param sort Provide a field to sort by. Use &#x60;-&#x60; for descending order.  (optional, default to -cycle)
     * @return ApiResponse&lt;CommitteeHistoryProfilePage&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CommitteeHistoryProfilePage> candidateCandidateIdCommitteesHistoryCycleGetWithHttpInfo(String apiKey, Integer cycle, String candidateId, Boolean electionFull, Boolean sortNullsLast, Integer page, Boolean sortNullOnly, Boolean sortHideNull, Integer perPage, List<String> designation, String sort) throws ApiException {
        okhttp3.Call localVarCall = candidateCandidateIdCommitteesHistoryCycleGetValidateBeforeCall(apiKey, cycle, candidateId, electionFull, sortNullsLast, page, sortNullOnly, sortHideNull, perPage, designation, sort, null);
        Type localVarReturnType = new TypeToken<CommitteeHistoryProfilePage>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     *  Explore a filer&#39;s characteristics over time. This can be particularly useful if the committees change treasurers, designation, or &#x60;committee_type&#x60;. 
     * @param apiKey  API key for https://api.data.gov. Get one at https://api.data.gov/signup.  (required)
     * @param cycle  A two year election cycle that the committee was active- (after original registration date but before expiration date in Form 1s) The cycle begins with an odd year and is named for its ending, even year.  (required)
     * @param candidateId  A unique identifier assigned to each candidate registered with the FEC. If a person runs for several offices, that person will have separate candidate IDs for each office. First character indicates office - [P]residential, [H]ouse, [S]enate]. Second character is the last digit of the two-year period the ID was created. Third and fourth is the candidate state. Presidential IDs don&#39;t have state. Fifth and sixth is the district when the candidate first ran. This does not change if the candidate/member&#39;s district changes during re-districting. Presidential IDs don&#39;t have districts. The rest is sequence.  (required)
     * @param electionFull &#x60;True&#x60; indicates that full election period of a candidate. &#x60;False&#x60; indicates that two year election cycle. (optional, default to true)
     * @param sortNullsLast Toggle that sorts null values last (optional, default to false)
     * @param page For paginating through results, starting at page 1 (optional, default to 1)
     * @param sortNullOnly Toggle that filters out all rows having sort column that is non-null (optional, default to false)
     * @param sortHideNull Hide null values on sorted column(s). (optional, default to false)
     * @param perPage The number of results returned per page. Defaults to 20. (optional, default to 20)
     * @param designation The one-letter designation code of the organization:          - A authorized by a candidate          - J joint fundraising committee          - P principal campaign committee of a candidate          - U unauthorized          - B lobbyist/registrant PAC          - D leadership PAC  (optional)
     * @param sort Provide a field to sort by. Use &#x60;-&#x60; for descending order.  (optional, default to -cycle)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call candidateCandidateIdCommitteesHistoryCycleGetAsync(String apiKey, Integer cycle, String candidateId, Boolean electionFull, Boolean sortNullsLast, Integer page, Boolean sortNullOnly, Boolean sortHideNull, Integer perPage, List<String> designation, String sort, final ApiCallback<CommitteeHistoryProfilePage> _callback) throws ApiException {

        okhttp3.Call localVarCall = candidateCandidateIdCommitteesHistoryCycleGetValidateBeforeCall(apiKey, cycle, candidateId, electionFull, sortNullsLast, page, sortNullOnly, sortHideNull, perPage, designation, sort, _callback);
        Type localVarReturnType = new TypeToken<CommitteeHistoryProfilePage>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for candidateCandidateIdCommitteesHistoryGet
     * @param apiKey  API key for https://api.data.gov. Get one at https://api.data.gov/signup.  (required)
     * @param candidateId  A unique identifier assigned to each candidate registered with the FEC. If a person runs for several offices, that person will have separate candidate IDs for each office. First character indicates office - [P]residential, [H]ouse, [S]enate]. Second character is the last digit of the two-year period the ID was created. Third and fourth is the candidate state. Presidential IDs don&#39;t have state. Fifth and sixth is the district when the candidate first ran. This does not change if the candidate/member&#39;s district changes during re-districting. Presidential IDs don&#39;t have districts. The rest is sequence.  (required)
     * @param electionFull &#x60;True&#x60; indicates that full election period of a candidate. &#x60;False&#x60; indicates that two year election cycle. (optional, default to true)
     * @param sortNullsLast Toggle that sorts null values last (optional, default to false)
     * @param page For paginating through results, starting at page 1 (optional, default to 1)
     * @param sortNullOnly Toggle that filters out all rows having sort column that is non-null (optional, default to false)
     * @param sortHideNull Hide null values on sorted column(s). (optional, default to false)
     * @param perPage The number of results returned per page. Defaults to 20. (optional, default to 20)
     * @param designation The one-letter designation code of the organization:          - A authorized by a candidate          - J joint fundraising committee          - P principal campaign committee of a candidate          - U unauthorized          - B lobbyist/registrant PAC          - D leadership PAC  (optional)
     * @param sort Provide a field to sort by. Use &#x60;-&#x60; for descending order.  (optional, default to -cycle)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call candidateCandidateIdCommitteesHistoryGetCall(String apiKey, String candidateId, Boolean electionFull, Boolean sortNullsLast, Integer page, Boolean sortNullOnly, Boolean sortHideNull, Integer perPage, List<String> designation, String sort, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/candidate/{candidate_id}/committees/history/"
            .replace("{" + "candidate_id" + "}", localVarApiClient.escapeString(candidateId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiKey != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api_key", apiKey));
        }

        if (electionFull != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("election_full", electionFull));
        }

        if (sortNullsLast != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort_nulls_last", sortNullsLast));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (sortNullOnly != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort_null_only", sortNullOnly));
        }

        if (sortHideNull != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort_hide_null", sortHideNull));
        }

        if (perPage != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("per_page", perPage));
        }

        if (designation != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "designation", designation));
        }

        if (sort != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort", sort));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKeyHeaderAuth", "ApiKeyQueryAuth", "apiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call candidateCandidateIdCommitteesHistoryGetValidateBeforeCall(String apiKey, String candidateId, Boolean electionFull, Boolean sortNullsLast, Integer page, Boolean sortNullOnly, Boolean sortHideNull, Integer perPage, List<String> designation, String sort, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'apiKey' is set
        if (apiKey == null) {
            throw new ApiException("Missing the required parameter 'apiKey' when calling candidateCandidateIdCommitteesHistoryGet(Async)");
        }

        // verify the required parameter 'candidateId' is set
        if (candidateId == null) {
            throw new ApiException("Missing the required parameter 'candidateId' when calling candidateCandidateIdCommitteesHistoryGet(Async)");
        }

        return candidateCandidateIdCommitteesHistoryGetCall(apiKey, candidateId, electionFull, sortNullsLast, page, sortNullOnly, sortHideNull, perPage, designation, sort, _callback);

    }

    /**
     * 
     *  Explore a filer&#39;s characteristics over time. This can be particularly useful if the committees change treasurers, designation, or &#x60;committee_type&#x60;. 
     * @param apiKey  API key for https://api.data.gov. Get one at https://api.data.gov/signup.  (required)
     * @param candidateId  A unique identifier assigned to each candidate registered with the FEC. If a person runs for several offices, that person will have separate candidate IDs for each office. First character indicates office - [P]residential, [H]ouse, [S]enate]. Second character is the last digit of the two-year period the ID was created. Third and fourth is the candidate state. Presidential IDs don&#39;t have state. Fifth and sixth is the district when the candidate first ran. This does not change if the candidate/member&#39;s district changes during re-districting. Presidential IDs don&#39;t have districts. The rest is sequence.  (required)
     * @param electionFull &#x60;True&#x60; indicates that full election period of a candidate. &#x60;False&#x60; indicates that two year election cycle. (optional, default to true)
     * @param sortNullsLast Toggle that sorts null values last (optional, default to false)
     * @param page For paginating through results, starting at page 1 (optional, default to 1)
     * @param sortNullOnly Toggle that filters out all rows having sort column that is non-null (optional, default to false)
     * @param sortHideNull Hide null values on sorted column(s). (optional, default to false)
     * @param perPage The number of results returned per page. Defaults to 20. (optional, default to 20)
     * @param designation The one-letter designation code of the organization:          - A authorized by a candidate          - J joint fundraising committee          - P principal campaign committee of a candidate          - U unauthorized          - B lobbyist/registrant PAC          - D leadership PAC  (optional)
     * @param sort Provide a field to sort by. Use &#x60;-&#x60; for descending order.  (optional, default to -cycle)
     * @return CommitteeHistoryProfilePage
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public CommitteeHistoryProfilePage candidateCandidateIdCommitteesHistoryGet(String apiKey, String candidateId, Boolean electionFull, Boolean sortNullsLast, Integer page, Boolean sortNullOnly, Boolean sortHideNull, Integer perPage, List<String> designation, String sort) throws ApiException {
        ApiResponse<CommitteeHistoryProfilePage> localVarResp = candidateCandidateIdCommitteesHistoryGetWithHttpInfo(apiKey, candidateId, electionFull, sortNullsLast, page, sortNullOnly, sortHideNull, perPage, designation, sort);
        return localVarResp.getData();
    }

    /**
     * 
     *  Explore a filer&#39;s characteristics over time. This can be particularly useful if the committees change treasurers, designation, or &#x60;committee_type&#x60;. 
     * @param apiKey  API key for https://api.data.gov. Get one at https://api.data.gov/signup.  (required)
     * @param candidateId  A unique identifier assigned to each candidate registered with the FEC. If a person runs for several offices, that person will have separate candidate IDs for each office. First character indicates office - [P]residential, [H]ouse, [S]enate]. Second character is the last digit of the two-year period the ID was created. Third and fourth is the candidate state. Presidential IDs don&#39;t have state. Fifth and sixth is the district when the candidate first ran. This does not change if the candidate/member&#39;s district changes during re-districting. Presidential IDs don&#39;t have districts. The rest is sequence.  (required)
     * @param electionFull &#x60;True&#x60; indicates that full election period of a candidate. &#x60;False&#x60; indicates that two year election cycle. (optional, default to true)
     * @param sortNullsLast Toggle that sorts null values last (optional, default to false)
     * @param page For paginating through results, starting at page 1 (optional, default to 1)
     * @param sortNullOnly Toggle that filters out all rows having sort column that is non-null (optional, default to false)
     * @param sortHideNull Hide null values on sorted column(s). (optional, default to false)
     * @param perPage The number of results returned per page. Defaults to 20. (optional, default to 20)
     * @param designation The one-letter designation code of the organization:          - A authorized by a candidate          - J joint fundraising committee          - P principal campaign committee of a candidate          - U unauthorized          - B lobbyist/registrant PAC          - D leadership PAC  (optional)
     * @param sort Provide a field to sort by. Use &#x60;-&#x60; for descending order.  (optional, default to -cycle)
     * @return ApiResponse&lt;CommitteeHistoryProfilePage&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CommitteeHistoryProfilePage> candidateCandidateIdCommitteesHistoryGetWithHttpInfo(String apiKey, String candidateId, Boolean electionFull, Boolean sortNullsLast, Integer page, Boolean sortNullOnly, Boolean sortHideNull, Integer perPage, List<String> designation, String sort) throws ApiException {
        okhttp3.Call localVarCall = candidateCandidateIdCommitteesHistoryGetValidateBeforeCall(apiKey, candidateId, electionFull, sortNullsLast, page, sortNullOnly, sortHideNull, perPage, designation, sort, null);
        Type localVarReturnType = new TypeToken<CommitteeHistoryProfilePage>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     *  Explore a filer&#39;s characteristics over time. This can be particularly useful if the committees change treasurers, designation, or &#x60;committee_type&#x60;. 
     * @param apiKey  API key for https://api.data.gov. Get one at https://api.data.gov/signup.  (required)
     * @param candidateId  A unique identifier assigned to each candidate registered with the FEC. If a person runs for several offices, that person will have separate candidate IDs for each office. First character indicates office - [P]residential, [H]ouse, [S]enate]. Second character is the last digit of the two-year period the ID was created. Third and fourth is the candidate state. Presidential IDs don&#39;t have state. Fifth and sixth is the district when the candidate first ran. This does not change if the candidate/member&#39;s district changes during re-districting. Presidential IDs don&#39;t have districts. The rest is sequence.  (required)
     * @param electionFull &#x60;True&#x60; indicates that full election period of a candidate. &#x60;False&#x60; indicates that two year election cycle. (optional, default to true)
     * @param sortNullsLast Toggle that sorts null values last (optional, default to false)
     * @param page For paginating through results, starting at page 1 (optional, default to 1)
     * @param sortNullOnly Toggle that filters out all rows having sort column that is non-null (optional, default to false)
     * @param sortHideNull Hide null values on sorted column(s). (optional, default to false)
     * @param perPage The number of results returned per page. Defaults to 20. (optional, default to 20)
     * @param designation The one-letter designation code of the organization:          - A authorized by a candidate          - J joint fundraising committee          - P principal campaign committee of a candidate          - U unauthorized          - B lobbyist/registrant PAC          - D leadership PAC  (optional)
     * @param sort Provide a field to sort by. Use &#x60;-&#x60; for descending order.  (optional, default to -cycle)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call candidateCandidateIdCommitteesHistoryGetAsync(String apiKey, String candidateId, Boolean electionFull, Boolean sortNullsLast, Integer page, Boolean sortNullOnly, Boolean sortHideNull, Integer perPage, List<String> designation, String sort, final ApiCallback<CommitteeHistoryProfilePage> _callback) throws ApiException {

        okhttp3.Call localVarCall = candidateCandidateIdCommitteesHistoryGetValidateBeforeCall(apiKey, candidateId, electionFull, sortNullsLast, page, sortNullOnly, sortHideNull, perPage, designation, sort, _callback);
        Type localVarReturnType = new TypeToken<CommitteeHistoryProfilePage>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for committeeCommitteeIdGet
     * @param apiKey  API key for https://api.data.gov. Get one at https://api.data.gov/signup.  (required)
     * @param committeeId  A unique identifier assigned to each committee or filer registered with the FEC. In general committee id&#39;s begin with the letter C which is followed by eight digits.  (required)
     * @param committeeType The one-letter type code of the organization:         - C communication cost         - D delegate         - E electioneering communication         - H House         - I independent expenditure filer (not a committee)         - N PAC - nonqualified         - O independent expenditure-only (super PACs)         - P presidential         - Q PAC - qualified         - S Senate         - U single candidate independent expenditure         - V PAC with non-contribution account, nonqualified         - W PAC with non-contribution account, qualified         - X party, nonqualified         - Y party, qualified         - Z national party non-federal account  (optional)
     * @param cycle  A two year election cycle that the committee was active- (after original registration date but before expiration date in Form 1s) The cycle begins with an odd year and is named for its ending, even year.  (optional)
     * @param sortNullOnly Toggle that filters out all rows having sort column that is non-null (optional, default to false)
     * @param page For paginating through results, starting at page 1 (optional, default to 1)
     * @param year A year that the committee was active— (after original registration date     or filing but before expiration date) (optional)
     * @param sortNullsLast Toggle that sorts null values last (optional, default to false)
     * @param sortHideNull Hide null values on sorted column(s). (optional, default to false)
     * @param perPage The number of results returned per page. Defaults to 20. (optional, default to 20)
     * @param filingFrequency The one-letter      code of the filing frequency:          - A Administratively terminated          - D Debt          - M Monthly filer          - Q Quarterly filer          - T Terminated          - W Waived  (optional)
     * @param organizationType The one-letter code for the kind for organization:         - C corporation         - L labor organization         - M membership organization         - T trade association         - V cooperative         - W corporation without capital stock  (optional)
     * @param designation The one-letter designation code of the organization:          - A authorized by a candidate          - J joint fundraising committee          - P principal campaign committee of a candidate          - U unauthorized          - B lobbyist/registrant PAC          - D leadership PAC  (optional)
     * @param sort Provide a field to sort by. Use &#x60;-&#x60; for descending order.  (optional, default to name)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call committeeCommitteeIdGetCall(String apiKey, String committeeId, List<String> committeeType, List<Integer> cycle, Boolean sortNullOnly, Integer page, List<Integer> year, Boolean sortNullsLast, Boolean sortHideNull, Integer perPage, List<String> filingFrequency, List<String> organizationType, List<String> designation, String sort, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/committee/{committee_id}/"
            .replace("{" + "committee_id" + "}", localVarApiClient.escapeString(committeeId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiKey != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api_key", apiKey));
        }

        if (committeeType != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "committee_type", committeeType));
        }

        if (cycle != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "cycle", cycle));
        }

        if (sortNullOnly != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort_null_only", sortNullOnly));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (year != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "year", year));
        }

        if (sortNullsLast != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort_nulls_last", sortNullsLast));
        }

        if (sortHideNull != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort_hide_null", sortHideNull));
        }

        if (perPage != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("per_page", perPage));
        }

        if (filingFrequency != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "filing_frequency", filingFrequency));
        }

        if (organizationType != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "organization_type", organizationType));
        }

        if (designation != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "designation", designation));
        }

        if (sort != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort", sort));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKeyHeaderAuth", "ApiKeyQueryAuth", "apiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call committeeCommitteeIdGetValidateBeforeCall(String apiKey, String committeeId, List<String> committeeType, List<Integer> cycle, Boolean sortNullOnly, Integer page, List<Integer> year, Boolean sortNullsLast, Boolean sortHideNull, Integer perPage, List<String> filingFrequency, List<String> organizationType, List<String> designation, String sort, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'apiKey' is set
        if (apiKey == null) {
            throw new ApiException("Missing the required parameter 'apiKey' when calling committeeCommitteeIdGet(Async)");
        }

        // verify the required parameter 'committeeId' is set
        if (committeeId == null) {
            throw new ApiException("Missing the required parameter 'committeeId' when calling committeeCommitteeIdGet(Async)");
        }

        return committeeCommitteeIdGetCall(apiKey, committeeId, committeeType, cycle, sortNullOnly, page, year, sortNullsLast, sortHideNull, perPage, filingFrequency, organizationType, designation, sort, _callback);

    }

    /**
     * 
     *  This endpoint is useful for finding detailed information about a particular committee or filer. Use the &#x60;committee_id&#x60; to find the most recent information about the committee. 
     * @param apiKey  API key for https://api.data.gov. Get one at https://api.data.gov/signup.  (required)
     * @param committeeId  A unique identifier assigned to each committee or filer registered with the FEC. In general committee id&#39;s begin with the letter C which is followed by eight digits.  (required)
     * @param committeeType The one-letter type code of the organization:         - C communication cost         - D delegate         - E electioneering communication         - H House         - I independent expenditure filer (not a committee)         - N PAC - nonqualified         - O independent expenditure-only (super PACs)         - P presidential         - Q PAC - qualified         - S Senate         - U single candidate independent expenditure         - V PAC with non-contribution account, nonqualified         - W PAC with non-contribution account, qualified         - X party, nonqualified         - Y party, qualified         - Z national party non-federal account  (optional)
     * @param cycle  A two year election cycle that the committee was active- (after original registration date but before expiration date in Form 1s) The cycle begins with an odd year and is named for its ending, even year.  (optional)
     * @param sortNullOnly Toggle that filters out all rows having sort column that is non-null (optional, default to false)
     * @param page For paginating through results, starting at page 1 (optional, default to 1)
     * @param year A year that the committee was active— (after original registration date     or filing but before expiration date) (optional)
     * @param sortNullsLast Toggle that sorts null values last (optional, default to false)
     * @param sortHideNull Hide null values on sorted column(s). (optional, default to false)
     * @param perPage The number of results returned per page. Defaults to 20. (optional, default to 20)
     * @param filingFrequency The one-letter      code of the filing frequency:          - A Administratively terminated          - D Debt          - M Monthly filer          - Q Quarterly filer          - T Terminated          - W Waived  (optional)
     * @param organizationType The one-letter code for the kind for organization:         - C corporation         - L labor organization         - M membership organization         - T trade association         - V cooperative         - W corporation without capital stock  (optional)
     * @param designation The one-letter designation code of the organization:          - A authorized by a candidate          - J joint fundraising committee          - P principal campaign committee of a candidate          - U unauthorized          - B lobbyist/registrant PAC          - D leadership PAC  (optional)
     * @param sort Provide a field to sort by. Use &#x60;-&#x60; for descending order.  (optional, default to name)
     * @return CommitteeDetailPage
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public CommitteeDetailPage committeeCommitteeIdGet(String apiKey, String committeeId, List<String> committeeType, List<Integer> cycle, Boolean sortNullOnly, Integer page, List<Integer> year, Boolean sortNullsLast, Boolean sortHideNull, Integer perPage, List<String> filingFrequency, List<String> organizationType, List<String> designation, String sort) throws ApiException {
        ApiResponse<CommitteeDetailPage> localVarResp = committeeCommitteeIdGetWithHttpInfo(apiKey, committeeId, committeeType, cycle, sortNullOnly, page, year, sortNullsLast, sortHideNull, perPage, filingFrequency, organizationType, designation, sort);
        return localVarResp.getData();
    }

    /**
     * 
     *  This endpoint is useful for finding detailed information about a particular committee or filer. Use the &#x60;committee_id&#x60; to find the most recent information about the committee. 
     * @param apiKey  API key for https://api.data.gov. Get one at https://api.data.gov/signup.  (required)
     * @param committeeId  A unique identifier assigned to each committee or filer registered with the FEC. In general committee id&#39;s begin with the letter C which is followed by eight digits.  (required)
     * @param committeeType The one-letter type code of the organization:         - C communication cost         - D delegate         - E electioneering communication         - H House         - I independent expenditure filer (not a committee)         - N PAC - nonqualified         - O independent expenditure-only (super PACs)         - P presidential         - Q PAC - qualified         - S Senate         - U single candidate independent expenditure         - V PAC with non-contribution account, nonqualified         - W PAC with non-contribution account, qualified         - X party, nonqualified         - Y party, qualified         - Z national party non-federal account  (optional)
     * @param cycle  A two year election cycle that the committee was active- (after original registration date but before expiration date in Form 1s) The cycle begins with an odd year and is named for its ending, even year.  (optional)
     * @param sortNullOnly Toggle that filters out all rows having sort column that is non-null (optional, default to false)
     * @param page For paginating through results, starting at page 1 (optional, default to 1)
     * @param year A year that the committee was active— (after original registration date     or filing but before expiration date) (optional)
     * @param sortNullsLast Toggle that sorts null values last (optional, default to false)
     * @param sortHideNull Hide null values on sorted column(s). (optional, default to false)
     * @param perPage The number of results returned per page. Defaults to 20. (optional, default to 20)
     * @param filingFrequency The one-letter      code of the filing frequency:          - A Administratively terminated          - D Debt          - M Monthly filer          - Q Quarterly filer          - T Terminated          - W Waived  (optional)
     * @param organizationType The one-letter code for the kind for organization:         - C corporation         - L labor organization         - M membership organization         - T trade association         - V cooperative         - W corporation without capital stock  (optional)
     * @param designation The one-letter designation code of the organization:          - A authorized by a candidate          - J joint fundraising committee          - P principal campaign committee of a candidate          - U unauthorized          - B lobbyist/registrant PAC          - D leadership PAC  (optional)
     * @param sort Provide a field to sort by. Use &#x60;-&#x60; for descending order.  (optional, default to name)
     * @return ApiResponse&lt;CommitteeDetailPage&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CommitteeDetailPage> committeeCommitteeIdGetWithHttpInfo(String apiKey, String committeeId, List<String> committeeType, List<Integer> cycle, Boolean sortNullOnly, Integer page, List<Integer> year, Boolean sortNullsLast, Boolean sortHideNull, Integer perPage, List<String> filingFrequency, List<String> organizationType, List<String> designation, String sort) throws ApiException {
        okhttp3.Call localVarCall = committeeCommitteeIdGetValidateBeforeCall(apiKey, committeeId, committeeType, cycle, sortNullOnly, page, year, sortNullsLast, sortHideNull, perPage, filingFrequency, organizationType, designation, sort, null);
        Type localVarReturnType = new TypeToken<CommitteeDetailPage>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     *  This endpoint is useful for finding detailed information about a particular committee or filer. Use the &#x60;committee_id&#x60; to find the most recent information about the committee. 
     * @param apiKey  API key for https://api.data.gov. Get one at https://api.data.gov/signup.  (required)
     * @param committeeId  A unique identifier assigned to each committee or filer registered with the FEC. In general committee id&#39;s begin with the letter C which is followed by eight digits.  (required)
     * @param committeeType The one-letter type code of the organization:         - C communication cost         - D delegate         - E electioneering communication         - H House         - I independent expenditure filer (not a committee)         - N PAC - nonqualified         - O independent expenditure-only (super PACs)         - P presidential         - Q PAC - qualified         - S Senate         - U single candidate independent expenditure         - V PAC with non-contribution account, nonqualified         - W PAC with non-contribution account, qualified         - X party, nonqualified         - Y party, qualified         - Z national party non-federal account  (optional)
     * @param cycle  A two year election cycle that the committee was active- (after original registration date but before expiration date in Form 1s) The cycle begins with an odd year and is named for its ending, even year.  (optional)
     * @param sortNullOnly Toggle that filters out all rows having sort column that is non-null (optional, default to false)
     * @param page For paginating through results, starting at page 1 (optional, default to 1)
     * @param year A year that the committee was active— (after original registration date     or filing but before expiration date) (optional)
     * @param sortNullsLast Toggle that sorts null values last (optional, default to false)
     * @param sortHideNull Hide null values on sorted column(s). (optional, default to false)
     * @param perPage The number of results returned per page. Defaults to 20. (optional, default to 20)
     * @param filingFrequency The one-letter      code of the filing frequency:          - A Administratively terminated          - D Debt          - M Monthly filer          - Q Quarterly filer          - T Terminated          - W Waived  (optional)
     * @param organizationType The one-letter code for the kind for organization:         - C corporation         - L labor organization         - M membership organization         - T trade association         - V cooperative         - W corporation without capital stock  (optional)
     * @param designation The one-letter designation code of the organization:          - A authorized by a candidate          - J joint fundraising committee          - P principal campaign committee of a candidate          - U unauthorized          - B lobbyist/registrant PAC          - D leadership PAC  (optional)
     * @param sort Provide a field to sort by. Use &#x60;-&#x60; for descending order.  (optional, default to name)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call committeeCommitteeIdGetAsync(String apiKey, String committeeId, List<String> committeeType, List<Integer> cycle, Boolean sortNullOnly, Integer page, List<Integer> year, Boolean sortNullsLast, Boolean sortHideNull, Integer perPage, List<String> filingFrequency, List<String> organizationType, List<String> designation, String sort, final ApiCallback<CommitteeDetailPage> _callback) throws ApiException {

        okhttp3.Call localVarCall = committeeCommitteeIdGetValidateBeforeCall(apiKey, committeeId, committeeType, cycle, sortNullOnly, page, year, sortNullsLast, sortHideNull, perPage, filingFrequency, organizationType, designation, sort, _callback);
        Type localVarReturnType = new TypeToken<CommitteeDetailPage>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for committeeCommitteeIdHistoryCycleGet
     * @param apiKey  API key for https://api.data.gov. Get one at https://api.data.gov/signup.  (required)
     * @param committeeId  A unique identifier assigned to each committee or filer registered with the FEC. In general committee id&#39;s begin with the letter C which is followed by eight digits.  (required)
     * @param cycle  A two year election cycle that the committee was active- (after original registration date but before expiration date in Form 1s) The cycle begins with an odd year and is named for its ending, even year.  (required)
     * @param electionFull &#x60;True&#x60; indicates that full election period of a candidate. &#x60;False&#x60; indicates that two year election cycle. (optional, default to true)
     * @param sortNullsLast Toggle that sorts null values last (optional, default to false)
     * @param page For paginating through results, starting at page 1 (optional, default to 1)
     * @param sortNullOnly Toggle that filters out all rows having sort column that is non-null (optional, default to false)
     * @param sortHideNull Hide null values on sorted column(s). (optional, default to false)
     * @param perPage The number of results returned per page. Defaults to 20. (optional, default to 20)
     * @param designation The one-letter designation code of the organization:          - A authorized by a candidate          - J joint fundraising committee          - P principal campaign committee of a candidate          - U unauthorized          - B lobbyist/registrant PAC          - D leadership PAC  (optional)
     * @param sort Provide a field to sort by. Use &#x60;-&#x60; for descending order.  (optional, default to -cycle)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call committeeCommitteeIdHistoryCycleGetCall(String apiKey, String committeeId, Integer cycle, Boolean electionFull, Boolean sortNullsLast, Integer page, Boolean sortNullOnly, Boolean sortHideNull, Integer perPage, List<String> designation, String sort, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/committee/{committee_id}/history/{cycle}/"
            .replace("{" + "committee_id" + "}", localVarApiClient.escapeString(committeeId.toString()))
            .replace("{" + "cycle" + "}", localVarApiClient.escapeString(cycle.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiKey != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api_key", apiKey));
        }

        if (electionFull != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("election_full", electionFull));
        }

        if (sortNullsLast != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort_nulls_last", sortNullsLast));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (sortNullOnly != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort_null_only", sortNullOnly));
        }

        if (sortHideNull != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort_hide_null", sortHideNull));
        }

        if (perPage != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("per_page", perPage));
        }

        if (designation != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "designation", designation));
        }

        if (sort != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort", sort));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKeyHeaderAuth", "ApiKeyQueryAuth", "apiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call committeeCommitteeIdHistoryCycleGetValidateBeforeCall(String apiKey, String committeeId, Integer cycle, Boolean electionFull, Boolean sortNullsLast, Integer page, Boolean sortNullOnly, Boolean sortHideNull, Integer perPage, List<String> designation, String sort, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'apiKey' is set
        if (apiKey == null) {
            throw new ApiException("Missing the required parameter 'apiKey' when calling committeeCommitteeIdHistoryCycleGet(Async)");
        }

        // verify the required parameter 'committeeId' is set
        if (committeeId == null) {
            throw new ApiException("Missing the required parameter 'committeeId' when calling committeeCommitteeIdHistoryCycleGet(Async)");
        }

        // verify the required parameter 'cycle' is set
        if (cycle == null) {
            throw new ApiException("Missing the required parameter 'cycle' when calling committeeCommitteeIdHistoryCycleGet(Async)");
        }

        return committeeCommitteeIdHistoryCycleGetCall(apiKey, committeeId, cycle, electionFull, sortNullsLast, page, sortNullOnly, sortHideNull, perPage, designation, sort, _callback);

    }

    /**
     * 
     *  Explore a filer&#39;s characteristics over time. This can be particularly useful if the committees change treasurers, designation, or &#x60;committee_type&#x60;. 
     * @param apiKey  API key for https://api.data.gov. Get one at https://api.data.gov/signup.  (required)
     * @param committeeId  A unique identifier assigned to each committee or filer registered with the FEC. In general committee id&#39;s begin with the letter C which is followed by eight digits.  (required)
     * @param cycle  A two year election cycle that the committee was active- (after original registration date but before expiration date in Form 1s) The cycle begins with an odd year and is named for its ending, even year.  (required)
     * @param electionFull &#x60;True&#x60; indicates that full election period of a candidate. &#x60;False&#x60; indicates that two year election cycle. (optional, default to true)
     * @param sortNullsLast Toggle that sorts null values last (optional, default to false)
     * @param page For paginating through results, starting at page 1 (optional, default to 1)
     * @param sortNullOnly Toggle that filters out all rows having sort column that is non-null (optional, default to false)
     * @param sortHideNull Hide null values on sorted column(s). (optional, default to false)
     * @param perPage The number of results returned per page. Defaults to 20. (optional, default to 20)
     * @param designation The one-letter designation code of the organization:          - A authorized by a candidate          - J joint fundraising committee          - P principal campaign committee of a candidate          - U unauthorized          - B lobbyist/registrant PAC          - D leadership PAC  (optional)
     * @param sort Provide a field to sort by. Use &#x60;-&#x60; for descending order.  (optional, default to -cycle)
     * @return CommitteeHistoryProfilePage
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public CommitteeHistoryProfilePage committeeCommitteeIdHistoryCycleGet(String apiKey, String committeeId, Integer cycle, Boolean electionFull, Boolean sortNullsLast, Integer page, Boolean sortNullOnly, Boolean sortHideNull, Integer perPage, List<String> designation, String sort) throws ApiException {
        ApiResponse<CommitteeHistoryProfilePage> localVarResp = committeeCommitteeIdHistoryCycleGetWithHttpInfo(apiKey, committeeId, cycle, electionFull, sortNullsLast, page, sortNullOnly, sortHideNull, perPage, designation, sort);
        return localVarResp.getData();
    }

    /**
     * 
     *  Explore a filer&#39;s characteristics over time. This can be particularly useful if the committees change treasurers, designation, or &#x60;committee_type&#x60;. 
     * @param apiKey  API key for https://api.data.gov. Get one at https://api.data.gov/signup.  (required)
     * @param committeeId  A unique identifier assigned to each committee or filer registered with the FEC. In general committee id&#39;s begin with the letter C which is followed by eight digits.  (required)
     * @param cycle  A two year election cycle that the committee was active- (after original registration date but before expiration date in Form 1s) The cycle begins with an odd year and is named for its ending, even year.  (required)
     * @param electionFull &#x60;True&#x60; indicates that full election period of a candidate. &#x60;False&#x60; indicates that two year election cycle. (optional, default to true)
     * @param sortNullsLast Toggle that sorts null values last (optional, default to false)
     * @param page For paginating through results, starting at page 1 (optional, default to 1)
     * @param sortNullOnly Toggle that filters out all rows having sort column that is non-null (optional, default to false)
     * @param sortHideNull Hide null values on sorted column(s). (optional, default to false)
     * @param perPage The number of results returned per page. Defaults to 20. (optional, default to 20)
     * @param designation The one-letter designation code of the organization:          - A authorized by a candidate          - J joint fundraising committee          - P principal campaign committee of a candidate          - U unauthorized          - B lobbyist/registrant PAC          - D leadership PAC  (optional)
     * @param sort Provide a field to sort by. Use &#x60;-&#x60; for descending order.  (optional, default to -cycle)
     * @return ApiResponse&lt;CommitteeHistoryProfilePage&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CommitteeHistoryProfilePage> committeeCommitteeIdHistoryCycleGetWithHttpInfo(String apiKey, String committeeId, Integer cycle, Boolean electionFull, Boolean sortNullsLast, Integer page, Boolean sortNullOnly, Boolean sortHideNull, Integer perPage, List<String> designation, String sort) throws ApiException {
        okhttp3.Call localVarCall = committeeCommitteeIdHistoryCycleGetValidateBeforeCall(apiKey, committeeId, cycle, electionFull, sortNullsLast, page, sortNullOnly, sortHideNull, perPage, designation, sort, null);
        Type localVarReturnType = new TypeToken<CommitteeHistoryProfilePage>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     *  Explore a filer&#39;s characteristics over time. This can be particularly useful if the committees change treasurers, designation, or &#x60;committee_type&#x60;. 
     * @param apiKey  API key for https://api.data.gov. Get one at https://api.data.gov/signup.  (required)
     * @param committeeId  A unique identifier assigned to each committee or filer registered with the FEC. In general committee id&#39;s begin with the letter C which is followed by eight digits.  (required)
     * @param cycle  A two year election cycle that the committee was active- (after original registration date but before expiration date in Form 1s) The cycle begins with an odd year and is named for its ending, even year.  (required)
     * @param electionFull &#x60;True&#x60; indicates that full election period of a candidate. &#x60;False&#x60; indicates that two year election cycle. (optional, default to true)
     * @param sortNullsLast Toggle that sorts null values last (optional, default to false)
     * @param page For paginating through results, starting at page 1 (optional, default to 1)
     * @param sortNullOnly Toggle that filters out all rows having sort column that is non-null (optional, default to false)
     * @param sortHideNull Hide null values on sorted column(s). (optional, default to false)
     * @param perPage The number of results returned per page. Defaults to 20. (optional, default to 20)
     * @param designation The one-letter designation code of the organization:          - A authorized by a candidate          - J joint fundraising committee          - P principal campaign committee of a candidate          - U unauthorized          - B lobbyist/registrant PAC          - D leadership PAC  (optional)
     * @param sort Provide a field to sort by. Use &#x60;-&#x60; for descending order.  (optional, default to -cycle)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call committeeCommitteeIdHistoryCycleGetAsync(String apiKey, String committeeId, Integer cycle, Boolean electionFull, Boolean sortNullsLast, Integer page, Boolean sortNullOnly, Boolean sortHideNull, Integer perPage, List<String> designation, String sort, final ApiCallback<CommitteeHistoryProfilePage> _callback) throws ApiException {

        okhttp3.Call localVarCall = committeeCommitteeIdHistoryCycleGetValidateBeforeCall(apiKey, committeeId, cycle, electionFull, sortNullsLast, page, sortNullOnly, sortHideNull, perPage, designation, sort, _callback);
        Type localVarReturnType = new TypeToken<CommitteeHistoryProfilePage>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for committeeCommitteeIdHistoryGet
     * @param apiKey  API key for https://api.data.gov. Get one at https://api.data.gov/signup.  (required)
     * @param committeeId  A unique identifier assigned to each committee or filer registered with the FEC. In general committee id&#39;s begin with the letter C which is followed by eight digits.  (required)
     * @param electionFull &#x60;True&#x60; indicates that full election period of a candidate. &#x60;False&#x60; indicates that two year election cycle. (optional, default to true)
     * @param sortNullsLast Toggle that sorts null values last (optional, default to false)
     * @param page For paginating through results, starting at page 1 (optional, default to 1)
     * @param sortNullOnly Toggle that filters out all rows having sort column that is non-null (optional, default to false)
     * @param sortHideNull Hide null values on sorted column(s). (optional, default to false)
     * @param perPage The number of results returned per page. Defaults to 20. (optional, default to 20)
     * @param designation The one-letter designation code of the organization:          - A authorized by a candidate          - J joint fundraising committee          - P principal campaign committee of a candidate          - U unauthorized          - B lobbyist/registrant PAC          - D leadership PAC  (optional)
     * @param sort Provide a field to sort by. Use &#x60;-&#x60; for descending order.  (optional, default to -cycle)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call committeeCommitteeIdHistoryGetCall(String apiKey, String committeeId, Boolean electionFull, Boolean sortNullsLast, Integer page, Boolean sortNullOnly, Boolean sortHideNull, Integer perPage, List<String> designation, String sort, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/committee/{committee_id}/history/"
            .replace("{" + "committee_id" + "}", localVarApiClient.escapeString(committeeId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiKey != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api_key", apiKey));
        }

        if (electionFull != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("election_full", electionFull));
        }

        if (sortNullsLast != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort_nulls_last", sortNullsLast));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (sortNullOnly != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort_null_only", sortNullOnly));
        }

        if (sortHideNull != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort_hide_null", sortHideNull));
        }

        if (perPage != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("per_page", perPage));
        }

        if (designation != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "designation", designation));
        }

        if (sort != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort", sort));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKeyHeaderAuth", "ApiKeyQueryAuth", "apiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call committeeCommitteeIdHistoryGetValidateBeforeCall(String apiKey, String committeeId, Boolean electionFull, Boolean sortNullsLast, Integer page, Boolean sortNullOnly, Boolean sortHideNull, Integer perPage, List<String> designation, String sort, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'apiKey' is set
        if (apiKey == null) {
            throw new ApiException("Missing the required parameter 'apiKey' when calling committeeCommitteeIdHistoryGet(Async)");
        }

        // verify the required parameter 'committeeId' is set
        if (committeeId == null) {
            throw new ApiException("Missing the required parameter 'committeeId' when calling committeeCommitteeIdHistoryGet(Async)");
        }

        return committeeCommitteeIdHistoryGetCall(apiKey, committeeId, electionFull, sortNullsLast, page, sortNullOnly, sortHideNull, perPage, designation, sort, _callback);

    }

    /**
     * 
     *  Explore a filer&#39;s characteristics over time. This can be particularly useful if the committees change treasurers, designation, or &#x60;committee_type&#x60;. 
     * @param apiKey  API key for https://api.data.gov. Get one at https://api.data.gov/signup.  (required)
     * @param committeeId  A unique identifier assigned to each committee or filer registered with the FEC. In general committee id&#39;s begin with the letter C which is followed by eight digits.  (required)
     * @param electionFull &#x60;True&#x60; indicates that full election period of a candidate. &#x60;False&#x60; indicates that two year election cycle. (optional, default to true)
     * @param sortNullsLast Toggle that sorts null values last (optional, default to false)
     * @param page For paginating through results, starting at page 1 (optional, default to 1)
     * @param sortNullOnly Toggle that filters out all rows having sort column that is non-null (optional, default to false)
     * @param sortHideNull Hide null values on sorted column(s). (optional, default to false)
     * @param perPage The number of results returned per page. Defaults to 20. (optional, default to 20)
     * @param designation The one-letter designation code of the organization:          - A authorized by a candidate          - J joint fundraising committee          - P principal campaign committee of a candidate          - U unauthorized          - B lobbyist/registrant PAC          - D leadership PAC  (optional)
     * @param sort Provide a field to sort by. Use &#x60;-&#x60; for descending order.  (optional, default to -cycle)
     * @return CommitteeHistoryProfilePage
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public CommitteeHistoryProfilePage committeeCommitteeIdHistoryGet(String apiKey, String committeeId, Boolean electionFull, Boolean sortNullsLast, Integer page, Boolean sortNullOnly, Boolean sortHideNull, Integer perPage, List<String> designation, String sort) throws ApiException {
        ApiResponse<CommitteeHistoryProfilePage> localVarResp = committeeCommitteeIdHistoryGetWithHttpInfo(apiKey, committeeId, electionFull, sortNullsLast, page, sortNullOnly, sortHideNull, perPage, designation, sort);
        return localVarResp.getData();
    }

    /**
     * 
     *  Explore a filer&#39;s characteristics over time. This can be particularly useful if the committees change treasurers, designation, or &#x60;committee_type&#x60;. 
     * @param apiKey  API key for https://api.data.gov. Get one at https://api.data.gov/signup.  (required)
     * @param committeeId  A unique identifier assigned to each committee or filer registered with the FEC. In general committee id&#39;s begin with the letter C which is followed by eight digits.  (required)
     * @param electionFull &#x60;True&#x60; indicates that full election period of a candidate. &#x60;False&#x60; indicates that two year election cycle. (optional, default to true)
     * @param sortNullsLast Toggle that sorts null values last (optional, default to false)
     * @param page For paginating through results, starting at page 1 (optional, default to 1)
     * @param sortNullOnly Toggle that filters out all rows having sort column that is non-null (optional, default to false)
     * @param sortHideNull Hide null values on sorted column(s). (optional, default to false)
     * @param perPage The number of results returned per page. Defaults to 20. (optional, default to 20)
     * @param designation The one-letter designation code of the organization:          - A authorized by a candidate          - J joint fundraising committee          - P principal campaign committee of a candidate          - U unauthorized          - B lobbyist/registrant PAC          - D leadership PAC  (optional)
     * @param sort Provide a field to sort by. Use &#x60;-&#x60; for descending order.  (optional, default to -cycle)
     * @return ApiResponse&lt;CommitteeHistoryProfilePage&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CommitteeHistoryProfilePage> committeeCommitteeIdHistoryGetWithHttpInfo(String apiKey, String committeeId, Boolean electionFull, Boolean sortNullsLast, Integer page, Boolean sortNullOnly, Boolean sortHideNull, Integer perPage, List<String> designation, String sort) throws ApiException {
        okhttp3.Call localVarCall = committeeCommitteeIdHistoryGetValidateBeforeCall(apiKey, committeeId, electionFull, sortNullsLast, page, sortNullOnly, sortHideNull, perPage, designation, sort, null);
        Type localVarReturnType = new TypeToken<CommitteeHistoryProfilePage>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     *  Explore a filer&#39;s characteristics over time. This can be particularly useful if the committees change treasurers, designation, or &#x60;committee_type&#x60;. 
     * @param apiKey  API key for https://api.data.gov. Get one at https://api.data.gov/signup.  (required)
     * @param committeeId  A unique identifier assigned to each committee or filer registered with the FEC. In general committee id&#39;s begin with the letter C which is followed by eight digits.  (required)
     * @param electionFull &#x60;True&#x60; indicates that full election period of a candidate. &#x60;False&#x60; indicates that two year election cycle. (optional, default to true)
     * @param sortNullsLast Toggle that sorts null values last (optional, default to false)
     * @param page For paginating through results, starting at page 1 (optional, default to 1)
     * @param sortNullOnly Toggle that filters out all rows having sort column that is non-null (optional, default to false)
     * @param sortHideNull Hide null values on sorted column(s). (optional, default to false)
     * @param perPage The number of results returned per page. Defaults to 20. (optional, default to 20)
     * @param designation The one-letter designation code of the organization:          - A authorized by a candidate          - J joint fundraising committee          - P principal campaign committee of a candidate          - U unauthorized          - B lobbyist/registrant PAC          - D leadership PAC  (optional)
     * @param sort Provide a field to sort by. Use &#x60;-&#x60; for descending order.  (optional, default to -cycle)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call committeeCommitteeIdHistoryGetAsync(String apiKey, String committeeId, Boolean electionFull, Boolean sortNullsLast, Integer page, Boolean sortNullOnly, Boolean sortHideNull, Integer perPage, List<String> designation, String sort, final ApiCallback<CommitteeHistoryProfilePage> _callback) throws ApiException {

        okhttp3.Call localVarCall = committeeCommitteeIdHistoryGetValidateBeforeCall(apiKey, committeeId, electionFull, sortNullsLast, page, sortNullOnly, sortHideNull, perPage, designation, sort, _callback);
        Type localVarReturnType = new TypeToken<CommitteeHistoryProfilePage>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for committeesGet
     * @param apiKey  API key for https://api.data.gov. Get one at https://api.data.gov/signup.  (required)
     * @param treasurerName Name of the Committee&#39;s treasurer. If multiple treasurers for the committee, the most recent treasurer will be shown. (optional)
     * @param q The name of the committee. If a committee changes its name,     the most recent name will be shown. Committee names are not unique. Use committee_id     for looking up records. (optional)
     * @param minFirstFileDate Filter for committees whose first filing was received on or after this date. (optional)
     * @param cycle  A two year election cycle that the committee was active- (after original registration date but before expiration date in Form 1s) The cycle begins with an odd year and is named for its ending, even year.  (optional)
     * @param sponsorCandidateId  A unique identifier assigned to each candidate registered with the FEC. If a person runs for several offices, that person will have separate candidate IDs for each office. This is a filter for Leadership PAC sponsor.  (optional)
     * @param sortNullOnly Toggle that filters out all rows having sort column that is non-null (optional, default to false)
     * @param sortHideNull Hide null values on sorted column(s). (optional, default to false)
     * @param candidateId  A unique identifier assigned to each candidate registered with the FEC. If a person runs for several offices, that person will have separate candidate IDs for each office. First character indicates office - [P]residential, [H]ouse, [S]enate]. Second character is the last digit of the two-year period the ID was created. Third and fourth is the candidate state. Presidential IDs don&#39;t have state. Fifth and sixth is the district when the candidate first ran. This does not change if the candidate/member&#39;s district changes during re-districting. Presidential IDs don&#39;t have districts. The rest is sequence.  (optional)
     * @param perPage The number of results returned per page. Defaults to 20. (optional, default to 20)
     * @param filingFrequency The one-letter      code of the filing frequency:          - A Administratively terminated          - D Debt          - M Monthly filer          - Q Quarterly filer          - T Terminated          - W Waived  (optional)
     * @param sort Provide a field to sort by. Use &#x60;-&#x60; for descending order.  (optional, default to name)
     * @param maxFirstFileDate Filter for committees whose first filing was received on or before this date. (optional)
     * @param minFirstF1Date Filter for committees whose first Form 1 was received on or after this date. (optional)
     * @param minLastF1Date Filter for committees whose latest Form 1 was received on or after this date. (optional)
     * @param committeeType The one-letter type code of the organization:         - C communication cost         - D delegate         - E electioneering communication         - H House         - I independent expenditure filer (not a committee)         - N PAC - nonqualified         - O independent expenditure-only (super PACs)         - P presidential         - Q PAC - qualified         - S Senate         - U single candidate independent expenditure         - V PAC with non-contribution account, nonqualified         - W PAC with non-contribution account, qualified         - X party, nonqualified         - Y party, qualified         - Z national party non-federal account  (optional)
     * @param party Three-letter code for the party affiliated with a candidate or committee. For example, DEM for Democratic Party and REP for Republican Party. (optional)
     * @param sortNullsLast Toggle that sorts null values last (optional, default to false)
     * @param page For paginating through results, starting at page 1 (optional, default to 1)
     * @param year A year that the committee was active— (after original registration date     or filing but before expiration date) (optional)
     * @param committeeId  A unique identifier assigned to each committee or filer registered with the FEC. In general committee id&#39;s begin with the letter C which is followed by eight digits.  (optional)
     * @param state US state or territory (optional)
     * @param maxLastF1Date Filter for committees whose latest Form 1 was received on or before this date. (optional)
     * @param maxFirstF1Date Filter for committees whose first Form 1 was received on or before this date. (optional)
     * @param designation The one-letter designation code of the organization:          - A authorized by a candidate          - J joint fundraising committee          - P principal campaign committee of a candidate          - U unauthorized          - B lobbyist/registrant PAC          - D leadership PAC  (optional)
     * @param organizationType The one-letter code for the kind for organization:         - C corporation         - L labor organization         - M membership organization         - T trade association         - V cooperative         - W corporation without capital stock  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call committeesGetCall(String apiKey, List<String> treasurerName, List<String> q, LocalDate minFirstFileDate, List<Integer> cycle, List<String> sponsorCandidateId, Boolean sortNullOnly, Boolean sortHideNull, List<String> candidateId, Integer perPage, List<String> filingFrequency, String sort, LocalDate maxFirstFileDate, LocalDate minFirstF1Date, LocalDate minLastF1Date, List<String> committeeType, List<String> party, Boolean sortNullsLast, Integer page, List<Integer> year, List<String> committeeId, List<String> state, LocalDate maxLastF1Date, LocalDate maxFirstF1Date, List<String> designation, List<String> organizationType, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/committees/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (treasurerName != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "treasurer_name", treasurerName));
        }

        if (q != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "q", q));
        }

        if (minFirstFileDate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("min_first_file_date", minFirstFileDate));
        }

        if (cycle != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "cycle", cycle));
        }

        if (sponsorCandidateId != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "sponsor_candidate_id", sponsorCandidateId));
        }

        if (sortNullOnly != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort_null_only", sortNullOnly));
        }

        if (sortHideNull != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort_hide_null", sortHideNull));
        }

        if (candidateId != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "candidate_id", candidateId));
        }

        if (perPage != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("per_page", perPage));
        }

        if (filingFrequency != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "filing_frequency", filingFrequency));
        }

        if (sort != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort", sort));
        }

        if (maxFirstFileDate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("max_first_file_date", maxFirstFileDate));
        }

        if (minFirstF1Date != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("min_first_f1_date", minFirstF1Date));
        }

        if (apiKey != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api_key", apiKey));
        }

        if (minLastF1Date != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("min_last_f1_date", minLastF1Date));
        }

        if (committeeType != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "committee_type", committeeType));
        }

        if (party != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "party", party));
        }

        if (sortNullsLast != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort_nulls_last", sortNullsLast));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (year != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "year", year));
        }

        if (committeeId != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "committee_id", committeeId));
        }

        if (state != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "state", state));
        }

        if (maxLastF1Date != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("max_last_f1_date", maxLastF1Date));
        }

        if (maxFirstF1Date != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("max_first_f1_date", maxFirstF1Date));
        }

        if (designation != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "designation", designation));
        }

        if (organizationType != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "organization_type", organizationType));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKeyHeaderAuth", "ApiKeyQueryAuth", "apiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call committeesGetValidateBeforeCall(String apiKey, List<String> treasurerName, List<String> q, LocalDate minFirstFileDate, List<Integer> cycle, List<String> sponsorCandidateId, Boolean sortNullOnly, Boolean sortHideNull, List<String> candidateId, Integer perPage, List<String> filingFrequency, String sort, LocalDate maxFirstFileDate, LocalDate minFirstF1Date, LocalDate minLastF1Date, List<String> committeeType, List<String> party, Boolean sortNullsLast, Integer page, List<Integer> year, List<String> committeeId, List<String> state, LocalDate maxLastF1Date, LocalDate maxFirstF1Date, List<String> designation, List<String> organizationType, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'apiKey' is set
        if (apiKey == null) {
            throw new ApiException("Missing the required parameter 'apiKey' when calling committeesGet(Async)");
        }

        return committeesGetCall(apiKey, treasurerName, q, minFirstFileDate, cycle, sponsorCandidateId, sortNullOnly, sortHideNull, candidateId, perPage, filingFrequency, sort, maxFirstFileDate, minFirstF1Date, minLastF1Date, committeeType, party, sortNullsLast, page, year, committeeId, state, maxLastF1Date, maxFirstF1Date, designation, organizationType, _callback);

    }

    /**
     * 
     *  Fetch basic information about committees and filers. Use parameters to filter for particular characteristics.  
     * @param apiKey  API key for https://api.data.gov. Get one at https://api.data.gov/signup.  (required)
     * @param treasurerName Name of the Committee&#39;s treasurer. If multiple treasurers for the committee, the most recent treasurer will be shown. (optional)
     * @param q The name of the committee. If a committee changes its name,     the most recent name will be shown. Committee names are not unique. Use committee_id     for looking up records. (optional)
     * @param minFirstFileDate Filter for committees whose first filing was received on or after this date. (optional)
     * @param cycle  A two year election cycle that the committee was active- (after original registration date but before expiration date in Form 1s) The cycle begins with an odd year and is named for its ending, even year.  (optional)
     * @param sponsorCandidateId  A unique identifier assigned to each candidate registered with the FEC. If a person runs for several offices, that person will have separate candidate IDs for each office. This is a filter for Leadership PAC sponsor.  (optional)
     * @param sortNullOnly Toggle that filters out all rows having sort column that is non-null (optional, default to false)
     * @param sortHideNull Hide null values on sorted column(s). (optional, default to false)
     * @param candidateId  A unique identifier assigned to each candidate registered with the FEC. If a person runs for several offices, that person will have separate candidate IDs for each office. First character indicates office - [P]residential, [H]ouse, [S]enate]. Second character is the last digit of the two-year period the ID was created. Third and fourth is the candidate state. Presidential IDs don&#39;t have state. Fifth and sixth is the district when the candidate first ran. This does not change if the candidate/member&#39;s district changes during re-districting. Presidential IDs don&#39;t have districts. The rest is sequence.  (optional)
     * @param perPage The number of results returned per page. Defaults to 20. (optional, default to 20)
     * @param filingFrequency The one-letter      code of the filing frequency:          - A Administratively terminated          - D Debt          - M Monthly filer          - Q Quarterly filer          - T Terminated          - W Waived  (optional)
     * @param sort Provide a field to sort by. Use &#x60;-&#x60; for descending order.  (optional, default to name)
     * @param maxFirstFileDate Filter for committees whose first filing was received on or before this date. (optional)
     * @param minFirstF1Date Filter for committees whose first Form 1 was received on or after this date. (optional)
     * @param minLastF1Date Filter for committees whose latest Form 1 was received on or after this date. (optional)
     * @param committeeType The one-letter type code of the organization:         - C communication cost         - D delegate         - E electioneering communication         - H House         - I independent expenditure filer (not a committee)         - N PAC - nonqualified         - O independent expenditure-only (super PACs)         - P presidential         - Q PAC - qualified         - S Senate         - U single candidate independent expenditure         - V PAC with non-contribution account, nonqualified         - W PAC with non-contribution account, qualified         - X party, nonqualified         - Y party, qualified         - Z national party non-federal account  (optional)
     * @param party Three-letter code for the party affiliated with a candidate or committee. For example, DEM for Democratic Party and REP for Republican Party. (optional)
     * @param sortNullsLast Toggle that sorts null values last (optional, default to false)
     * @param page For paginating through results, starting at page 1 (optional, default to 1)
     * @param year A year that the committee was active— (after original registration date     or filing but before expiration date) (optional)
     * @param committeeId  A unique identifier assigned to each committee or filer registered with the FEC. In general committee id&#39;s begin with the letter C which is followed by eight digits.  (optional)
     * @param state US state or territory (optional)
     * @param maxLastF1Date Filter for committees whose latest Form 1 was received on or before this date. (optional)
     * @param maxFirstF1Date Filter for committees whose first Form 1 was received on or before this date. (optional)
     * @param designation The one-letter designation code of the organization:          - A authorized by a candidate          - J joint fundraising committee          - P principal campaign committee of a candidate          - U unauthorized          - B lobbyist/registrant PAC          - D leadership PAC  (optional)
     * @param organizationType The one-letter code for the kind for organization:         - C corporation         - L labor organization         - M membership organization         - T trade association         - V cooperative         - W corporation without capital stock  (optional)
     * @return CommitteePage
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public CommitteePage committeesGet(String apiKey, List<String> treasurerName, List<String> q, LocalDate minFirstFileDate, List<Integer> cycle, List<String> sponsorCandidateId, Boolean sortNullOnly, Boolean sortHideNull, List<String> candidateId, Integer perPage, List<String> filingFrequency, String sort, LocalDate maxFirstFileDate, LocalDate minFirstF1Date, LocalDate minLastF1Date, List<String> committeeType, List<String> party, Boolean sortNullsLast, Integer page, List<Integer> year, List<String> committeeId, List<String> state, LocalDate maxLastF1Date, LocalDate maxFirstF1Date, List<String> designation, List<String> organizationType) throws ApiException {
        ApiResponse<CommitteePage> localVarResp = committeesGetWithHttpInfo(apiKey, treasurerName, q, minFirstFileDate, cycle, sponsorCandidateId, sortNullOnly, sortHideNull, candidateId, perPage, filingFrequency, sort, maxFirstFileDate, minFirstF1Date, minLastF1Date, committeeType, party, sortNullsLast, page, year, committeeId, state, maxLastF1Date, maxFirstF1Date, designation, organizationType);
        return localVarResp.getData();
    }

    /**
     * 
     *  Fetch basic information about committees and filers. Use parameters to filter for particular characteristics.  
     * @param apiKey  API key for https://api.data.gov. Get one at https://api.data.gov/signup.  (required)
     * @param treasurerName Name of the Committee&#39;s treasurer. If multiple treasurers for the committee, the most recent treasurer will be shown. (optional)
     * @param q The name of the committee. If a committee changes its name,     the most recent name will be shown. Committee names are not unique. Use committee_id     for looking up records. (optional)
     * @param minFirstFileDate Filter for committees whose first filing was received on or after this date. (optional)
     * @param cycle  A two year election cycle that the committee was active- (after original registration date but before expiration date in Form 1s) The cycle begins with an odd year and is named for its ending, even year.  (optional)
     * @param sponsorCandidateId  A unique identifier assigned to each candidate registered with the FEC. If a person runs for several offices, that person will have separate candidate IDs for each office. This is a filter for Leadership PAC sponsor.  (optional)
     * @param sortNullOnly Toggle that filters out all rows having sort column that is non-null (optional, default to false)
     * @param sortHideNull Hide null values on sorted column(s). (optional, default to false)
     * @param candidateId  A unique identifier assigned to each candidate registered with the FEC. If a person runs for several offices, that person will have separate candidate IDs for each office. First character indicates office - [P]residential, [H]ouse, [S]enate]. Second character is the last digit of the two-year period the ID was created. Third and fourth is the candidate state. Presidential IDs don&#39;t have state. Fifth and sixth is the district when the candidate first ran. This does not change if the candidate/member&#39;s district changes during re-districting. Presidential IDs don&#39;t have districts. The rest is sequence.  (optional)
     * @param perPage The number of results returned per page. Defaults to 20. (optional, default to 20)
     * @param filingFrequency The one-letter      code of the filing frequency:          - A Administratively terminated          - D Debt          - M Monthly filer          - Q Quarterly filer          - T Terminated          - W Waived  (optional)
     * @param sort Provide a field to sort by. Use &#x60;-&#x60; for descending order.  (optional, default to name)
     * @param maxFirstFileDate Filter for committees whose first filing was received on or before this date. (optional)
     * @param minFirstF1Date Filter for committees whose first Form 1 was received on or after this date. (optional)
     * @param minLastF1Date Filter for committees whose latest Form 1 was received on or after this date. (optional)
     * @param committeeType The one-letter type code of the organization:         - C communication cost         - D delegate         - E electioneering communication         - H House         - I independent expenditure filer (not a committee)         - N PAC - nonqualified         - O independent expenditure-only (super PACs)         - P presidential         - Q PAC - qualified         - S Senate         - U single candidate independent expenditure         - V PAC with non-contribution account, nonqualified         - W PAC with non-contribution account, qualified         - X party, nonqualified         - Y party, qualified         - Z national party non-federal account  (optional)
     * @param party Three-letter code for the party affiliated with a candidate or committee. For example, DEM for Democratic Party and REP for Republican Party. (optional)
     * @param sortNullsLast Toggle that sorts null values last (optional, default to false)
     * @param page For paginating through results, starting at page 1 (optional, default to 1)
     * @param year A year that the committee was active— (after original registration date     or filing but before expiration date) (optional)
     * @param committeeId  A unique identifier assigned to each committee or filer registered with the FEC. In general committee id&#39;s begin with the letter C which is followed by eight digits.  (optional)
     * @param state US state or territory (optional)
     * @param maxLastF1Date Filter for committees whose latest Form 1 was received on or before this date. (optional)
     * @param maxFirstF1Date Filter for committees whose first Form 1 was received on or before this date. (optional)
     * @param designation The one-letter designation code of the organization:          - A authorized by a candidate          - J joint fundraising committee          - P principal campaign committee of a candidate          - U unauthorized          - B lobbyist/registrant PAC          - D leadership PAC  (optional)
     * @param organizationType The one-letter code for the kind for organization:         - C corporation         - L labor organization         - M membership organization         - T trade association         - V cooperative         - W corporation without capital stock  (optional)
     * @return ApiResponse&lt;CommitteePage&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CommitteePage> committeesGetWithHttpInfo(String apiKey, List<String> treasurerName, List<String> q, LocalDate minFirstFileDate, List<Integer> cycle, List<String> sponsorCandidateId, Boolean sortNullOnly, Boolean sortHideNull, List<String> candidateId, Integer perPage, List<String> filingFrequency, String sort, LocalDate maxFirstFileDate, LocalDate minFirstF1Date, LocalDate minLastF1Date, List<String> committeeType, List<String> party, Boolean sortNullsLast, Integer page, List<Integer> year, List<String> committeeId, List<String> state, LocalDate maxLastF1Date, LocalDate maxFirstF1Date, List<String> designation, List<String> organizationType) throws ApiException {
        okhttp3.Call localVarCall = committeesGetValidateBeforeCall(apiKey, treasurerName, q, minFirstFileDate, cycle, sponsorCandidateId, sortNullOnly, sortHideNull, candidateId, perPage, filingFrequency, sort, maxFirstFileDate, minFirstF1Date, minLastF1Date, committeeType, party, sortNullsLast, page, year, committeeId, state, maxLastF1Date, maxFirstF1Date, designation, organizationType, null);
        Type localVarReturnType = new TypeToken<CommitteePage>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     *  Fetch basic information about committees and filers. Use parameters to filter for particular characteristics.  
     * @param apiKey  API key for https://api.data.gov. Get one at https://api.data.gov/signup.  (required)
     * @param treasurerName Name of the Committee&#39;s treasurer. If multiple treasurers for the committee, the most recent treasurer will be shown. (optional)
     * @param q The name of the committee. If a committee changes its name,     the most recent name will be shown. Committee names are not unique. Use committee_id     for looking up records. (optional)
     * @param minFirstFileDate Filter for committees whose first filing was received on or after this date. (optional)
     * @param cycle  A two year election cycle that the committee was active- (after original registration date but before expiration date in Form 1s) The cycle begins with an odd year and is named for its ending, even year.  (optional)
     * @param sponsorCandidateId  A unique identifier assigned to each candidate registered with the FEC. If a person runs for several offices, that person will have separate candidate IDs for each office. This is a filter for Leadership PAC sponsor.  (optional)
     * @param sortNullOnly Toggle that filters out all rows having sort column that is non-null (optional, default to false)
     * @param sortHideNull Hide null values on sorted column(s). (optional, default to false)
     * @param candidateId  A unique identifier assigned to each candidate registered with the FEC. If a person runs for several offices, that person will have separate candidate IDs for each office. First character indicates office - [P]residential, [H]ouse, [S]enate]. Second character is the last digit of the two-year period the ID was created. Third and fourth is the candidate state. Presidential IDs don&#39;t have state. Fifth and sixth is the district when the candidate first ran. This does not change if the candidate/member&#39;s district changes during re-districting. Presidential IDs don&#39;t have districts. The rest is sequence.  (optional)
     * @param perPage The number of results returned per page. Defaults to 20. (optional, default to 20)
     * @param filingFrequency The one-letter      code of the filing frequency:          - A Administratively terminated          - D Debt          - M Monthly filer          - Q Quarterly filer          - T Terminated          - W Waived  (optional)
     * @param sort Provide a field to sort by. Use &#x60;-&#x60; for descending order.  (optional, default to name)
     * @param maxFirstFileDate Filter for committees whose first filing was received on or before this date. (optional)
     * @param minFirstF1Date Filter for committees whose first Form 1 was received on or after this date. (optional)
     * @param minLastF1Date Filter for committees whose latest Form 1 was received on or after this date. (optional)
     * @param committeeType The one-letter type code of the organization:         - C communication cost         - D delegate         - E electioneering communication         - H House         - I independent expenditure filer (not a committee)         - N PAC - nonqualified         - O independent expenditure-only (super PACs)         - P presidential         - Q PAC - qualified         - S Senate         - U single candidate independent expenditure         - V PAC with non-contribution account, nonqualified         - W PAC with non-contribution account, qualified         - X party, nonqualified         - Y party, qualified         - Z national party non-federal account  (optional)
     * @param party Three-letter code for the party affiliated with a candidate or committee. For example, DEM for Democratic Party and REP for Republican Party. (optional)
     * @param sortNullsLast Toggle that sorts null values last (optional, default to false)
     * @param page For paginating through results, starting at page 1 (optional, default to 1)
     * @param year A year that the committee was active— (after original registration date     or filing but before expiration date) (optional)
     * @param committeeId  A unique identifier assigned to each committee or filer registered with the FEC. In general committee id&#39;s begin with the letter C which is followed by eight digits.  (optional)
     * @param state US state or territory (optional)
     * @param maxLastF1Date Filter for committees whose latest Form 1 was received on or before this date. (optional)
     * @param maxFirstF1Date Filter for committees whose first Form 1 was received on or before this date. (optional)
     * @param designation The one-letter designation code of the organization:          - A authorized by a candidate          - J joint fundraising committee          - P principal campaign committee of a candidate          - U unauthorized          - B lobbyist/registrant PAC          - D leadership PAC  (optional)
     * @param organizationType The one-letter code for the kind for organization:         - C corporation         - L labor organization         - M membership organization         - T trade association         - V cooperative         - W corporation without capital stock  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call committeesGetAsync(String apiKey, List<String> treasurerName, List<String> q, LocalDate minFirstFileDate, List<Integer> cycle, List<String> sponsorCandidateId, Boolean sortNullOnly, Boolean sortHideNull, List<String> candidateId, Integer perPage, List<String> filingFrequency, String sort, LocalDate maxFirstFileDate, LocalDate minFirstF1Date, LocalDate minLastF1Date, List<String> committeeType, List<String> party, Boolean sortNullsLast, Integer page, List<Integer> year, List<String> committeeId, List<String> state, LocalDate maxLastF1Date, LocalDate maxFirstF1Date, List<String> designation, List<String> organizationType, final ApiCallback<CommitteePage> _callback) throws ApiException {

        okhttp3.Call localVarCall = committeesGetValidateBeforeCall(apiKey, treasurerName, q, minFirstFileDate, cycle, sponsorCandidateId, sortNullOnly, sortHideNull, candidateId, perPage, filingFrequency, sort, maxFirstFileDate, minFirstF1Date, minLastF1Date, committeeType, party, sortNullsLast, page, year, committeeId, state, maxLastF1Date, maxFirstF1Date, designation, organizationType, _callback);
        Type localVarReturnType = new TypeToken<CommitteePage>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
