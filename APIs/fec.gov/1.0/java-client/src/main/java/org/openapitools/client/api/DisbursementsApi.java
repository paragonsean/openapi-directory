/*
 * OpenFEC
 * This application programming interface (API) allows you to explore the way candidates and committees fund their campaigns.    The Federal Election Commission (FEC) API is a RESTful web service supporting full-text and field-specific searches on FEC data. [Bulk downloads](https://www.fec.gov/data/advanced/?tab=bulk-data) are available on the current site. Information is tied to the underlying forms by file ID and image ID. Data is updated nightly.    There are a lot of data, and a good place to start is to use search to find interesting candidates and committees. Then, you can use their IDs to find report or line item details with the other endpoints. If you are interested in individual donors, check out contributor information in the `/schedule_a/` endpoints.    <b class=\"body\" id=\"getting_started_head\">Getting started with the openFEC API</b><br>    If you would like to use the FEC's API programmatically, you can sign up for your own API key using our form. Alternatively, you can still try out our API without an API key by using the web interface and using DEMO_KEY. Note that when you use the openFEC API you are subject to the [Terms of Service](https://github.com/fecgov/FEC/blob/master/TERMS-OF-SERVICE.md) and [Acceptable Use policy](https://github.com/fecgov/FEC/blob/master/ACCEPTABLE-USE-POLICY.md).    Signing up for an API key will enable you to place up to 1,000 calls an hour. Each call is limited to 100 results per page. You can email questions, comments or a request to get a key for 7,200 calls an hour (120 calls per minute) to <a href=\"mailto:APIinfo@fec.gov\">APIinfo@fec.gov</a>. You can also ask questions and discuss the data in a community led [group](https://groups.google.com/forum/#!forum/fec-data).    The model definitions and schema are available at [/swagger](/swagger/). This is useful for making wrappers and exploring the data.    A few restrictions limit the way you can use FEC data. For example, you canâ€™t use contributor lists for commercial purposes or to solicit donations. [Learn more here](https://www.fec.gov/updates/sale-or-use-contributor-information/).    [Inspect our source code](https://github.com/fecgov/openFEC). We welcome issues and pull requests!    <p><br></p> <h2 class=\"title\" id=\"signup_head\">Sign up for an API key</h2> <div id=\"apidatagov_signup\">Loading signup form...</div>
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import java.time.LocalDate;
import org.openapitools.client.model.ScheduleBByPurposePage;
import org.openapitools.client.model.ScheduleBByRecipientIDPage;
import org.openapitools.client.model.ScheduleBByRecipientPage;
import org.openapitools.client.model.ScheduleBEfilePage;
import org.openapitools.client.model.ScheduleBPage;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class DisbursementsApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public DisbursementsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public DisbursementsApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for schedulesScheduleBByPurposeGet
     * @param apiKey  API key for https://api.data.gov. Get one at https://api.data.gov/signup.  (required)
     * @param purpose Disbursement purpose category (optional)
     * @param cycle  Filter records to only those that were applicable to a given two-year period.The cycle begins with an odd year and is named for its ending, even year.  (optional)
     * @param sortNullOnly Toggle that filters out all rows having sort column that is non-null (optional, default to false)
     * @param page For paginating through results, starting at page 1 (optional, default to 1)
     * @param committeeId  A unique identifier assigned to each committee or filer registered with the FEC. In general committee id&#39;s begin with the letter C which is followed by eight digits.  (optional)
     * @param sortNullsLast Toggle that sorts null values last (optional, default to false)
     * @param sortHideNull Hide null values on sorted column(s). (optional, default to false)
     * @param perPage The number of results returned per page. Defaults to 20. (optional, default to 20)
     * @param sort Provide a field to sort by. Use &#x60;-&#x60; for descending order.  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call schedulesScheduleBByPurposeGetCall(String apiKey, List<String> purpose, List<Integer> cycle, Boolean sortNullOnly, Integer page, List<String> committeeId, Boolean sortNullsLast, Boolean sortHideNull, Integer perPage, String sort, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/schedules/schedule_b/by_purpose/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiKey != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api_key", apiKey));
        }

        if (purpose != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "purpose", purpose));
        }

        if (cycle != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "cycle", cycle));
        }

        if (sortNullOnly != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort_null_only", sortNullOnly));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (committeeId != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "committee_id", committeeId));
        }

        if (sortNullsLast != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort_nulls_last", sortNullsLast));
        }

        if (sortHideNull != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort_hide_null", sortHideNull));
        }

        if (perPage != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("per_page", perPage));
        }

        if (sort != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort", sort));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKeyHeaderAuth", "ApiKeyQueryAuth", "apiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call schedulesScheduleBByPurposeGetValidateBeforeCall(String apiKey, List<String> purpose, List<Integer> cycle, Boolean sortNullOnly, Integer page, List<String> committeeId, Boolean sortNullsLast, Boolean sortHideNull, Integer perPage, String sort, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'apiKey' is set
        if (apiKey == null) {
            throw new ApiException("Missing the required parameter 'apiKey' when calling schedulesScheduleBByPurposeGet(Async)");
        }

        return schedulesScheduleBByPurposeGetCall(apiKey, purpose, cycle, sortNullOnly, page, committeeId, sortNullsLast, sortHideNull, perPage, sort, _callback);

    }

    /**
     * 
     *  Schedule B disbursements aggregated by disbursement purpose category. To avoid double counting, memoed items are not included. Purpose is a combination of transaction codes, category codes and disbursement description. Inspect the &#x60;disbursement_purpose&#x60; sql function within the migrations for more details. 
     * @param apiKey  API key for https://api.data.gov. Get one at https://api.data.gov/signup.  (required)
     * @param purpose Disbursement purpose category (optional)
     * @param cycle  Filter records to only those that were applicable to a given two-year period.The cycle begins with an odd year and is named for its ending, even year.  (optional)
     * @param sortNullOnly Toggle that filters out all rows having sort column that is non-null (optional, default to false)
     * @param page For paginating through results, starting at page 1 (optional, default to 1)
     * @param committeeId  A unique identifier assigned to each committee or filer registered with the FEC. In general committee id&#39;s begin with the letter C which is followed by eight digits.  (optional)
     * @param sortNullsLast Toggle that sorts null values last (optional, default to false)
     * @param sortHideNull Hide null values on sorted column(s). (optional, default to false)
     * @param perPage The number of results returned per page. Defaults to 20. (optional, default to 20)
     * @param sort Provide a field to sort by. Use &#x60;-&#x60; for descending order.  (optional)
     * @return ScheduleBByPurposePage
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ScheduleBByPurposePage schedulesScheduleBByPurposeGet(String apiKey, List<String> purpose, List<Integer> cycle, Boolean sortNullOnly, Integer page, List<String> committeeId, Boolean sortNullsLast, Boolean sortHideNull, Integer perPage, String sort) throws ApiException {
        ApiResponse<ScheduleBByPurposePage> localVarResp = schedulesScheduleBByPurposeGetWithHttpInfo(apiKey, purpose, cycle, sortNullOnly, page, committeeId, sortNullsLast, sortHideNull, perPage, sort);
        return localVarResp.getData();
    }

    /**
     * 
     *  Schedule B disbursements aggregated by disbursement purpose category. To avoid double counting, memoed items are not included. Purpose is a combination of transaction codes, category codes and disbursement description. Inspect the &#x60;disbursement_purpose&#x60; sql function within the migrations for more details. 
     * @param apiKey  API key for https://api.data.gov. Get one at https://api.data.gov/signup.  (required)
     * @param purpose Disbursement purpose category (optional)
     * @param cycle  Filter records to only those that were applicable to a given two-year period.The cycle begins with an odd year and is named for its ending, even year.  (optional)
     * @param sortNullOnly Toggle that filters out all rows having sort column that is non-null (optional, default to false)
     * @param page For paginating through results, starting at page 1 (optional, default to 1)
     * @param committeeId  A unique identifier assigned to each committee or filer registered with the FEC. In general committee id&#39;s begin with the letter C which is followed by eight digits.  (optional)
     * @param sortNullsLast Toggle that sorts null values last (optional, default to false)
     * @param sortHideNull Hide null values on sorted column(s). (optional, default to false)
     * @param perPage The number of results returned per page. Defaults to 20. (optional, default to 20)
     * @param sort Provide a field to sort by. Use &#x60;-&#x60; for descending order.  (optional)
     * @return ApiResponse&lt;ScheduleBByPurposePage&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ScheduleBByPurposePage> schedulesScheduleBByPurposeGetWithHttpInfo(String apiKey, List<String> purpose, List<Integer> cycle, Boolean sortNullOnly, Integer page, List<String> committeeId, Boolean sortNullsLast, Boolean sortHideNull, Integer perPage, String sort) throws ApiException {
        okhttp3.Call localVarCall = schedulesScheduleBByPurposeGetValidateBeforeCall(apiKey, purpose, cycle, sortNullOnly, page, committeeId, sortNullsLast, sortHideNull, perPage, sort, null);
        Type localVarReturnType = new TypeToken<ScheduleBByPurposePage>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     *  Schedule B disbursements aggregated by disbursement purpose category. To avoid double counting, memoed items are not included. Purpose is a combination of transaction codes, category codes and disbursement description. Inspect the &#x60;disbursement_purpose&#x60; sql function within the migrations for more details. 
     * @param apiKey  API key for https://api.data.gov. Get one at https://api.data.gov/signup.  (required)
     * @param purpose Disbursement purpose category (optional)
     * @param cycle  Filter records to only those that were applicable to a given two-year period.The cycle begins with an odd year and is named for its ending, even year.  (optional)
     * @param sortNullOnly Toggle that filters out all rows having sort column that is non-null (optional, default to false)
     * @param page For paginating through results, starting at page 1 (optional, default to 1)
     * @param committeeId  A unique identifier assigned to each committee or filer registered with the FEC. In general committee id&#39;s begin with the letter C which is followed by eight digits.  (optional)
     * @param sortNullsLast Toggle that sorts null values last (optional, default to false)
     * @param sortHideNull Hide null values on sorted column(s). (optional, default to false)
     * @param perPage The number of results returned per page. Defaults to 20. (optional, default to 20)
     * @param sort Provide a field to sort by. Use &#x60;-&#x60; for descending order.  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call schedulesScheduleBByPurposeGetAsync(String apiKey, List<String> purpose, List<Integer> cycle, Boolean sortNullOnly, Integer page, List<String> committeeId, Boolean sortNullsLast, Boolean sortHideNull, Integer perPage, String sort, final ApiCallback<ScheduleBByPurposePage> _callback) throws ApiException {

        okhttp3.Call localVarCall = schedulesScheduleBByPurposeGetValidateBeforeCall(apiKey, purpose, cycle, sortNullOnly, page, committeeId, sortNullsLast, sortHideNull, perPage, sort, _callback);
        Type localVarReturnType = new TypeToken<ScheduleBByPurposePage>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for schedulesScheduleBByRecipientGet
     * @param apiKey  API key for https://api.data.gov. Get one at https://api.data.gov/signup.  (required)
     * @param recipientName Name of the entity receiving the disbursement (optional)
     * @param cycle  Filter records to only those that were applicable to a given two-year period.The cycle begins with an odd year and is named for its ending, even year.  (optional)
     * @param sortNullOnly Toggle that filters out all rows having sort column that is non-null (optional, default to false)
     * @param page For paginating through results, starting at page 1 (optional, default to 1)
     * @param committeeId  A unique identifier assigned to each committee or filer registered with the FEC. In general committee id&#39;s begin with the letter C which is followed by eight digits.  (optional)
     * @param sortNullsLast Toggle that sorts null values last (optional, default to false)
     * @param sortHideNull Hide null values on sorted column(s). (optional, default to false)
     * @param perPage The number of results returned per page. Defaults to 20. (optional, default to 20)
     * @param sort Provide a field to sort by. Use &#x60;-&#x60; for descending order.  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call schedulesScheduleBByRecipientGetCall(String apiKey, List<String> recipientName, List<Integer> cycle, Boolean sortNullOnly, Integer page, List<String> committeeId, Boolean sortNullsLast, Boolean sortHideNull, Integer perPage, String sort, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/schedules/schedule_b/by_recipient/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiKey != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api_key", apiKey));
        }

        if (recipientName != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "recipient_name", recipientName));
        }

        if (cycle != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "cycle", cycle));
        }

        if (sortNullOnly != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort_null_only", sortNullOnly));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (committeeId != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "committee_id", committeeId));
        }

        if (sortNullsLast != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort_nulls_last", sortNullsLast));
        }

        if (sortHideNull != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort_hide_null", sortHideNull));
        }

        if (perPage != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("per_page", perPage));
        }

        if (sort != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort", sort));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKeyHeaderAuth", "ApiKeyQueryAuth", "apiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call schedulesScheduleBByRecipientGetValidateBeforeCall(String apiKey, List<String> recipientName, List<Integer> cycle, Boolean sortNullOnly, Integer page, List<String> committeeId, Boolean sortNullsLast, Boolean sortHideNull, Integer perPage, String sort, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'apiKey' is set
        if (apiKey == null) {
            throw new ApiException("Missing the required parameter 'apiKey' when calling schedulesScheduleBByRecipientGet(Async)");
        }

        return schedulesScheduleBByRecipientGetCall(apiKey, recipientName, cycle, sortNullOnly, page, committeeId, sortNullsLast, sortHideNull, perPage, sort, _callback);

    }

    /**
     * 
     *  Schedule B disbursements aggregated by recipient name. To avoid double counting, memoed items are not included. 
     * @param apiKey  API key for https://api.data.gov. Get one at https://api.data.gov/signup.  (required)
     * @param recipientName Name of the entity receiving the disbursement (optional)
     * @param cycle  Filter records to only those that were applicable to a given two-year period.The cycle begins with an odd year and is named for its ending, even year.  (optional)
     * @param sortNullOnly Toggle that filters out all rows having sort column that is non-null (optional, default to false)
     * @param page For paginating through results, starting at page 1 (optional, default to 1)
     * @param committeeId  A unique identifier assigned to each committee or filer registered with the FEC. In general committee id&#39;s begin with the letter C which is followed by eight digits.  (optional)
     * @param sortNullsLast Toggle that sorts null values last (optional, default to false)
     * @param sortHideNull Hide null values on sorted column(s). (optional, default to false)
     * @param perPage The number of results returned per page. Defaults to 20. (optional, default to 20)
     * @param sort Provide a field to sort by. Use &#x60;-&#x60; for descending order.  (optional)
     * @return ScheduleBByRecipientPage
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ScheduleBByRecipientPage schedulesScheduleBByRecipientGet(String apiKey, List<String> recipientName, List<Integer> cycle, Boolean sortNullOnly, Integer page, List<String> committeeId, Boolean sortNullsLast, Boolean sortHideNull, Integer perPage, String sort) throws ApiException {
        ApiResponse<ScheduleBByRecipientPage> localVarResp = schedulesScheduleBByRecipientGetWithHttpInfo(apiKey, recipientName, cycle, sortNullOnly, page, committeeId, sortNullsLast, sortHideNull, perPage, sort);
        return localVarResp.getData();
    }

    /**
     * 
     *  Schedule B disbursements aggregated by recipient name. To avoid double counting, memoed items are not included. 
     * @param apiKey  API key for https://api.data.gov. Get one at https://api.data.gov/signup.  (required)
     * @param recipientName Name of the entity receiving the disbursement (optional)
     * @param cycle  Filter records to only those that were applicable to a given two-year period.The cycle begins with an odd year and is named for its ending, even year.  (optional)
     * @param sortNullOnly Toggle that filters out all rows having sort column that is non-null (optional, default to false)
     * @param page For paginating through results, starting at page 1 (optional, default to 1)
     * @param committeeId  A unique identifier assigned to each committee or filer registered with the FEC. In general committee id&#39;s begin with the letter C which is followed by eight digits.  (optional)
     * @param sortNullsLast Toggle that sorts null values last (optional, default to false)
     * @param sortHideNull Hide null values on sorted column(s). (optional, default to false)
     * @param perPage The number of results returned per page. Defaults to 20. (optional, default to 20)
     * @param sort Provide a field to sort by. Use &#x60;-&#x60; for descending order.  (optional)
     * @return ApiResponse&lt;ScheduleBByRecipientPage&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ScheduleBByRecipientPage> schedulesScheduleBByRecipientGetWithHttpInfo(String apiKey, List<String> recipientName, List<Integer> cycle, Boolean sortNullOnly, Integer page, List<String> committeeId, Boolean sortNullsLast, Boolean sortHideNull, Integer perPage, String sort) throws ApiException {
        okhttp3.Call localVarCall = schedulesScheduleBByRecipientGetValidateBeforeCall(apiKey, recipientName, cycle, sortNullOnly, page, committeeId, sortNullsLast, sortHideNull, perPage, sort, null);
        Type localVarReturnType = new TypeToken<ScheduleBByRecipientPage>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     *  Schedule B disbursements aggregated by recipient name. To avoid double counting, memoed items are not included. 
     * @param apiKey  API key for https://api.data.gov. Get one at https://api.data.gov/signup.  (required)
     * @param recipientName Name of the entity receiving the disbursement (optional)
     * @param cycle  Filter records to only those that were applicable to a given two-year period.The cycle begins with an odd year and is named for its ending, even year.  (optional)
     * @param sortNullOnly Toggle that filters out all rows having sort column that is non-null (optional, default to false)
     * @param page For paginating through results, starting at page 1 (optional, default to 1)
     * @param committeeId  A unique identifier assigned to each committee or filer registered with the FEC. In general committee id&#39;s begin with the letter C which is followed by eight digits.  (optional)
     * @param sortNullsLast Toggle that sorts null values last (optional, default to false)
     * @param sortHideNull Hide null values on sorted column(s). (optional, default to false)
     * @param perPage The number of results returned per page. Defaults to 20. (optional, default to 20)
     * @param sort Provide a field to sort by. Use &#x60;-&#x60; for descending order.  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call schedulesScheduleBByRecipientGetAsync(String apiKey, List<String> recipientName, List<Integer> cycle, Boolean sortNullOnly, Integer page, List<String> committeeId, Boolean sortNullsLast, Boolean sortHideNull, Integer perPage, String sort, final ApiCallback<ScheduleBByRecipientPage> _callback) throws ApiException {

        okhttp3.Call localVarCall = schedulesScheduleBByRecipientGetValidateBeforeCall(apiKey, recipientName, cycle, sortNullOnly, page, committeeId, sortNullsLast, sortHideNull, perPage, sort, _callback);
        Type localVarReturnType = new TypeToken<ScheduleBByRecipientPage>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for schedulesScheduleBByRecipientIdGet
     * @param apiKey  API key for https://api.data.gov. Get one at https://api.data.gov/signup.  (required)
     * @param cycle  Filter records to only those that were applicable to a given two-year period.The cycle begins with an odd year and is named for its ending, even year.  (optional)
     * @param sortNullsLast Toggle that sorts null values last (optional, default to false)
     * @param page For paginating through results, starting at page 1 (optional, default to 1)
     * @param committeeId  A unique identifier assigned to each committee or filer registered with the FEC. In general committee id&#39;s begin with the letter C which is followed by eight digits.  (optional)
     * @param sortNullOnly Toggle that filters out all rows having sort column that is non-null (optional, default to false)
     * @param recipientId The FEC identifier should be represented here if the entity receiving the disbursement is registered with the FEC. (optional)
     * @param sortHideNull Hide null values on sorted column(s). (optional, default to false)
     * @param perPage The number of results returned per page. Defaults to 20. (optional, default to 20)
     * @param sort Provide a field to sort by. Use &#x60;-&#x60; for descending order.  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call schedulesScheduleBByRecipientIdGetCall(String apiKey, List<Integer> cycle, Boolean sortNullsLast, Integer page, List<String> committeeId, Boolean sortNullOnly, List<String> recipientId, Boolean sortHideNull, Integer perPage, String sort, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/schedules/schedule_b/by_recipient_id/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiKey != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api_key", apiKey));
        }

        if (cycle != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "cycle", cycle));
        }

        if (sortNullsLast != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort_nulls_last", sortNullsLast));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (committeeId != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "committee_id", committeeId));
        }

        if (sortNullOnly != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort_null_only", sortNullOnly));
        }

        if (recipientId != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "recipient_id", recipientId));
        }

        if (sortHideNull != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort_hide_null", sortHideNull));
        }

        if (perPage != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("per_page", perPage));
        }

        if (sort != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort", sort));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKeyHeaderAuth", "ApiKeyQueryAuth", "apiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call schedulesScheduleBByRecipientIdGetValidateBeforeCall(String apiKey, List<Integer> cycle, Boolean sortNullsLast, Integer page, List<String> committeeId, Boolean sortNullOnly, List<String> recipientId, Boolean sortHideNull, Integer perPage, String sort, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'apiKey' is set
        if (apiKey == null) {
            throw new ApiException("Missing the required parameter 'apiKey' when calling schedulesScheduleBByRecipientIdGet(Async)");
        }

        return schedulesScheduleBByRecipientIdGetCall(apiKey, cycle, sortNullsLast, page, committeeId, sortNullOnly, recipientId, sortHideNull, perPage, sort, _callback);

    }

    /**
     * 
     *  Schedule B disbursements aggregated by recipient committee ID, if applicable. To avoid double counting, memoed items are not included. 
     * @param apiKey  API key for https://api.data.gov. Get one at https://api.data.gov/signup.  (required)
     * @param cycle  Filter records to only those that were applicable to a given two-year period.The cycle begins with an odd year and is named for its ending, even year.  (optional)
     * @param sortNullsLast Toggle that sorts null values last (optional, default to false)
     * @param page For paginating through results, starting at page 1 (optional, default to 1)
     * @param committeeId  A unique identifier assigned to each committee or filer registered with the FEC. In general committee id&#39;s begin with the letter C which is followed by eight digits.  (optional)
     * @param sortNullOnly Toggle that filters out all rows having sort column that is non-null (optional, default to false)
     * @param recipientId The FEC identifier should be represented here if the entity receiving the disbursement is registered with the FEC. (optional)
     * @param sortHideNull Hide null values on sorted column(s). (optional, default to false)
     * @param perPage The number of results returned per page. Defaults to 20. (optional, default to 20)
     * @param sort Provide a field to sort by. Use &#x60;-&#x60; for descending order.  (optional)
     * @return ScheduleBByRecipientIDPage
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ScheduleBByRecipientIDPage schedulesScheduleBByRecipientIdGet(String apiKey, List<Integer> cycle, Boolean sortNullsLast, Integer page, List<String> committeeId, Boolean sortNullOnly, List<String> recipientId, Boolean sortHideNull, Integer perPage, String sort) throws ApiException {
        ApiResponse<ScheduleBByRecipientIDPage> localVarResp = schedulesScheduleBByRecipientIdGetWithHttpInfo(apiKey, cycle, sortNullsLast, page, committeeId, sortNullOnly, recipientId, sortHideNull, perPage, sort);
        return localVarResp.getData();
    }

    /**
     * 
     *  Schedule B disbursements aggregated by recipient committee ID, if applicable. To avoid double counting, memoed items are not included. 
     * @param apiKey  API key for https://api.data.gov. Get one at https://api.data.gov/signup.  (required)
     * @param cycle  Filter records to only those that were applicable to a given two-year period.The cycle begins with an odd year and is named for its ending, even year.  (optional)
     * @param sortNullsLast Toggle that sorts null values last (optional, default to false)
     * @param page For paginating through results, starting at page 1 (optional, default to 1)
     * @param committeeId  A unique identifier assigned to each committee or filer registered with the FEC. In general committee id&#39;s begin with the letter C which is followed by eight digits.  (optional)
     * @param sortNullOnly Toggle that filters out all rows having sort column that is non-null (optional, default to false)
     * @param recipientId The FEC identifier should be represented here if the entity receiving the disbursement is registered with the FEC. (optional)
     * @param sortHideNull Hide null values on sorted column(s). (optional, default to false)
     * @param perPage The number of results returned per page. Defaults to 20. (optional, default to 20)
     * @param sort Provide a field to sort by. Use &#x60;-&#x60; for descending order.  (optional)
     * @return ApiResponse&lt;ScheduleBByRecipientIDPage&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ScheduleBByRecipientIDPage> schedulesScheduleBByRecipientIdGetWithHttpInfo(String apiKey, List<Integer> cycle, Boolean sortNullsLast, Integer page, List<String> committeeId, Boolean sortNullOnly, List<String> recipientId, Boolean sortHideNull, Integer perPage, String sort) throws ApiException {
        okhttp3.Call localVarCall = schedulesScheduleBByRecipientIdGetValidateBeforeCall(apiKey, cycle, sortNullsLast, page, committeeId, sortNullOnly, recipientId, sortHideNull, perPage, sort, null);
        Type localVarReturnType = new TypeToken<ScheduleBByRecipientIDPage>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     *  Schedule B disbursements aggregated by recipient committee ID, if applicable. To avoid double counting, memoed items are not included. 
     * @param apiKey  API key for https://api.data.gov. Get one at https://api.data.gov/signup.  (required)
     * @param cycle  Filter records to only those that were applicable to a given two-year period.The cycle begins with an odd year and is named for its ending, even year.  (optional)
     * @param sortNullsLast Toggle that sorts null values last (optional, default to false)
     * @param page For paginating through results, starting at page 1 (optional, default to 1)
     * @param committeeId  A unique identifier assigned to each committee or filer registered with the FEC. In general committee id&#39;s begin with the letter C which is followed by eight digits.  (optional)
     * @param sortNullOnly Toggle that filters out all rows having sort column that is non-null (optional, default to false)
     * @param recipientId The FEC identifier should be represented here if the entity receiving the disbursement is registered with the FEC. (optional)
     * @param sortHideNull Hide null values on sorted column(s). (optional, default to false)
     * @param perPage The number of results returned per page. Defaults to 20. (optional, default to 20)
     * @param sort Provide a field to sort by. Use &#x60;-&#x60; for descending order.  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call schedulesScheduleBByRecipientIdGetAsync(String apiKey, List<Integer> cycle, Boolean sortNullsLast, Integer page, List<String> committeeId, Boolean sortNullOnly, List<String> recipientId, Boolean sortHideNull, Integer perPage, String sort, final ApiCallback<ScheduleBByRecipientIDPage> _callback) throws ApiException {

        okhttp3.Call localVarCall = schedulesScheduleBByRecipientIdGetValidateBeforeCall(apiKey, cycle, sortNullsLast, page, committeeId, sortNullOnly, recipientId, sortHideNull, perPage, sort, _callback);
        Type localVarReturnType = new TypeToken<ScheduleBByRecipientIDPage>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for schedulesScheduleBEfileGet
     * @param apiKey  API key for https://api.data.gov. Get one at https://api.data.gov/signup.  (required)
     * @param minDate When sorting by &#x60;disbursement_date&#x60;, this is populated with the         &#x60;disbursement_date&#x60; of the last result. However, you will need to pass the index         of that last result to &#x60;last_index&#x60; to get the next page. (optional)
     * @param disbursementDescription Description of disbursement (optional)
     * @param sortNullOnly Toggle that filters out all rows having sort column that is non-null (optional, default to false)
     * @param page For paginating through results, starting at page 1 (optional, default to 1)
     * @param committeeId  A unique identifier assigned to each committee or filer registered with the FEC. In general committee id&#39;s begin with the letter C which is followed by eight digits.  (optional)
     * @param sortNullsLast Toggle that sorts null values last (optional, default to false)
     * @param imageNumber  An unique identifier for each page where the electronic or paper filing is reported.  (optional)
     * @param sortHideNull Hide null values on sorted column(s). (optional, default to false)
     * @param maxDate When sorting by &#x60;disbursement_date&#x60;, this is populated with the         &#x60;disbursement_date&#x60; of the last result. However, you will need to pass the index         of that last result to &#x60;last_index&#x60; to get the next page. (optional)
     * @param perPage The number of results returned per page. Defaults to 20. (optional, default to 20)
     * @param minAmount Filter for all amounts less than a value. (optional)
     * @param maxAmount Filter for all amounts less than a value. (optional)
     * @param sort Provide a field to sort by. Use &#x60;-&#x60; for descending order.  (optional, default to -disbursement_date)
     * @param recipientCity City of recipient (optional)
     * @param recipientState State of recipient (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call schedulesScheduleBEfileGetCall(String apiKey, LocalDate minDate, List<String> disbursementDescription, Boolean sortNullOnly, Integer page, List<String> committeeId, Boolean sortNullsLast, List<String> imageNumber, Boolean sortHideNull, LocalDate maxDate, Integer perPage, String minAmount, String maxAmount, String sort, List<String> recipientCity, List<String> recipientState, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/schedules/schedule_b/efile/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (minDate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("min_date", minDate));
        }

        if (apiKey != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api_key", apiKey));
        }

        if (disbursementDescription != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "disbursement_description", disbursementDescription));
        }

        if (sortNullOnly != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort_null_only", sortNullOnly));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (committeeId != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "committee_id", committeeId));
        }

        if (sortNullsLast != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort_nulls_last", sortNullsLast));
        }

        if (imageNumber != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "image_number", imageNumber));
        }

        if (sortHideNull != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort_hide_null", sortHideNull));
        }

        if (maxDate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("max_date", maxDate));
        }

        if (perPage != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("per_page", perPage));
        }

        if (minAmount != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("min_amount", minAmount));
        }

        if (maxAmount != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("max_amount", maxAmount));
        }

        if (sort != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort", sort));
        }

        if (recipientCity != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "recipient_city", recipientCity));
        }

        if (recipientState != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "recipient_state", recipientState));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKeyHeaderAuth", "ApiKeyQueryAuth", "apiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call schedulesScheduleBEfileGetValidateBeforeCall(String apiKey, LocalDate minDate, List<String> disbursementDescription, Boolean sortNullOnly, Integer page, List<String> committeeId, Boolean sortNullsLast, List<String> imageNumber, Boolean sortHideNull, LocalDate maxDate, Integer perPage, String minAmount, String maxAmount, String sort, List<String> recipientCity, List<String> recipientState, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'apiKey' is set
        if (apiKey == null) {
            throw new ApiException("Missing the required parameter 'apiKey' when calling schedulesScheduleBEfileGet(Async)");
        }

        return schedulesScheduleBEfileGetCall(apiKey, minDate, disbursementDescription, sortNullOnly, page, committeeId, sortNullsLast, imageNumber, sortHideNull, maxDate, perPage, minAmount, maxAmount, sort, recipientCity, recipientState, _callback);

    }

    /**
     * 
     *  Efiling endpoints provide real-time campaign finance data received from electronic filers. Efiling endpoints only contain the most recent four months of data and don&#39;t contain the processed and coded data that you can find on other endpoints. 
     * @param apiKey  API key for https://api.data.gov. Get one at https://api.data.gov/signup.  (required)
     * @param minDate When sorting by &#x60;disbursement_date&#x60;, this is populated with the         &#x60;disbursement_date&#x60; of the last result. However, you will need to pass the index         of that last result to &#x60;last_index&#x60; to get the next page. (optional)
     * @param disbursementDescription Description of disbursement (optional)
     * @param sortNullOnly Toggle that filters out all rows having sort column that is non-null (optional, default to false)
     * @param page For paginating through results, starting at page 1 (optional, default to 1)
     * @param committeeId  A unique identifier assigned to each committee or filer registered with the FEC. In general committee id&#39;s begin with the letter C which is followed by eight digits.  (optional)
     * @param sortNullsLast Toggle that sorts null values last (optional, default to false)
     * @param imageNumber  An unique identifier for each page where the electronic or paper filing is reported.  (optional)
     * @param sortHideNull Hide null values on sorted column(s). (optional, default to false)
     * @param maxDate When sorting by &#x60;disbursement_date&#x60;, this is populated with the         &#x60;disbursement_date&#x60; of the last result. However, you will need to pass the index         of that last result to &#x60;last_index&#x60; to get the next page. (optional)
     * @param perPage The number of results returned per page. Defaults to 20. (optional, default to 20)
     * @param minAmount Filter for all amounts less than a value. (optional)
     * @param maxAmount Filter for all amounts less than a value. (optional)
     * @param sort Provide a field to sort by. Use &#x60;-&#x60; for descending order.  (optional, default to -disbursement_date)
     * @param recipientCity City of recipient (optional)
     * @param recipientState State of recipient (optional)
     * @return ScheduleBEfilePage
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ScheduleBEfilePage schedulesScheduleBEfileGet(String apiKey, LocalDate minDate, List<String> disbursementDescription, Boolean sortNullOnly, Integer page, List<String> committeeId, Boolean sortNullsLast, List<String> imageNumber, Boolean sortHideNull, LocalDate maxDate, Integer perPage, String minAmount, String maxAmount, String sort, List<String> recipientCity, List<String> recipientState) throws ApiException {
        ApiResponse<ScheduleBEfilePage> localVarResp = schedulesScheduleBEfileGetWithHttpInfo(apiKey, minDate, disbursementDescription, sortNullOnly, page, committeeId, sortNullsLast, imageNumber, sortHideNull, maxDate, perPage, minAmount, maxAmount, sort, recipientCity, recipientState);
        return localVarResp.getData();
    }

    /**
     * 
     *  Efiling endpoints provide real-time campaign finance data received from electronic filers. Efiling endpoints only contain the most recent four months of data and don&#39;t contain the processed and coded data that you can find on other endpoints. 
     * @param apiKey  API key for https://api.data.gov. Get one at https://api.data.gov/signup.  (required)
     * @param minDate When sorting by &#x60;disbursement_date&#x60;, this is populated with the         &#x60;disbursement_date&#x60; of the last result. However, you will need to pass the index         of that last result to &#x60;last_index&#x60; to get the next page. (optional)
     * @param disbursementDescription Description of disbursement (optional)
     * @param sortNullOnly Toggle that filters out all rows having sort column that is non-null (optional, default to false)
     * @param page For paginating through results, starting at page 1 (optional, default to 1)
     * @param committeeId  A unique identifier assigned to each committee or filer registered with the FEC. In general committee id&#39;s begin with the letter C which is followed by eight digits.  (optional)
     * @param sortNullsLast Toggle that sorts null values last (optional, default to false)
     * @param imageNumber  An unique identifier for each page where the electronic or paper filing is reported.  (optional)
     * @param sortHideNull Hide null values on sorted column(s). (optional, default to false)
     * @param maxDate When sorting by &#x60;disbursement_date&#x60;, this is populated with the         &#x60;disbursement_date&#x60; of the last result. However, you will need to pass the index         of that last result to &#x60;last_index&#x60; to get the next page. (optional)
     * @param perPage The number of results returned per page. Defaults to 20. (optional, default to 20)
     * @param minAmount Filter for all amounts less than a value. (optional)
     * @param maxAmount Filter for all amounts less than a value. (optional)
     * @param sort Provide a field to sort by. Use &#x60;-&#x60; for descending order.  (optional, default to -disbursement_date)
     * @param recipientCity City of recipient (optional)
     * @param recipientState State of recipient (optional)
     * @return ApiResponse&lt;ScheduleBEfilePage&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ScheduleBEfilePage> schedulesScheduleBEfileGetWithHttpInfo(String apiKey, LocalDate minDate, List<String> disbursementDescription, Boolean sortNullOnly, Integer page, List<String> committeeId, Boolean sortNullsLast, List<String> imageNumber, Boolean sortHideNull, LocalDate maxDate, Integer perPage, String minAmount, String maxAmount, String sort, List<String> recipientCity, List<String> recipientState) throws ApiException {
        okhttp3.Call localVarCall = schedulesScheduleBEfileGetValidateBeforeCall(apiKey, minDate, disbursementDescription, sortNullOnly, page, committeeId, sortNullsLast, imageNumber, sortHideNull, maxDate, perPage, minAmount, maxAmount, sort, recipientCity, recipientState, null);
        Type localVarReturnType = new TypeToken<ScheduleBEfilePage>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     *  Efiling endpoints provide real-time campaign finance data received from electronic filers. Efiling endpoints only contain the most recent four months of data and don&#39;t contain the processed and coded data that you can find on other endpoints. 
     * @param apiKey  API key for https://api.data.gov. Get one at https://api.data.gov/signup.  (required)
     * @param minDate When sorting by &#x60;disbursement_date&#x60;, this is populated with the         &#x60;disbursement_date&#x60; of the last result. However, you will need to pass the index         of that last result to &#x60;last_index&#x60; to get the next page. (optional)
     * @param disbursementDescription Description of disbursement (optional)
     * @param sortNullOnly Toggle that filters out all rows having sort column that is non-null (optional, default to false)
     * @param page For paginating through results, starting at page 1 (optional, default to 1)
     * @param committeeId  A unique identifier assigned to each committee or filer registered with the FEC. In general committee id&#39;s begin with the letter C which is followed by eight digits.  (optional)
     * @param sortNullsLast Toggle that sorts null values last (optional, default to false)
     * @param imageNumber  An unique identifier for each page where the electronic or paper filing is reported.  (optional)
     * @param sortHideNull Hide null values on sorted column(s). (optional, default to false)
     * @param maxDate When sorting by &#x60;disbursement_date&#x60;, this is populated with the         &#x60;disbursement_date&#x60; of the last result. However, you will need to pass the index         of that last result to &#x60;last_index&#x60; to get the next page. (optional)
     * @param perPage The number of results returned per page. Defaults to 20. (optional, default to 20)
     * @param minAmount Filter for all amounts less than a value. (optional)
     * @param maxAmount Filter for all amounts less than a value. (optional)
     * @param sort Provide a field to sort by. Use &#x60;-&#x60; for descending order.  (optional, default to -disbursement_date)
     * @param recipientCity City of recipient (optional)
     * @param recipientState State of recipient (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call schedulesScheduleBEfileGetAsync(String apiKey, LocalDate minDate, List<String> disbursementDescription, Boolean sortNullOnly, Integer page, List<String> committeeId, Boolean sortNullsLast, List<String> imageNumber, Boolean sortHideNull, LocalDate maxDate, Integer perPage, String minAmount, String maxAmount, String sort, List<String> recipientCity, List<String> recipientState, final ApiCallback<ScheduleBEfilePage> _callback) throws ApiException {

        okhttp3.Call localVarCall = schedulesScheduleBEfileGetValidateBeforeCall(apiKey, minDate, disbursementDescription, sortNullOnly, page, committeeId, sortNullsLast, imageNumber, sortHideNull, maxDate, perPage, minAmount, maxAmount, sort, recipientCity, recipientState, _callback);
        Type localVarReturnType = new TypeToken<ScheduleBEfilePage>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for schedulesScheduleBGet
     * @param apiKey  API key for https://api.data.gov. Get one at https://api.data.gov/signup.  (required)
     * @param minDate Minimum date (optional)
     * @param spenderCommitteeDesignation The one-letter designation code of the organization:          - A authorized by a candidate          - J joint fundraising committee          - P principal campaign committee of a candidate          - U unauthorized          - B lobbyist/registrant PAC          - D leadership PAC  (optional)
     * @param recipientCommitteeId The FEC identifier should be represented here if the contributor is registered with the FEC. (optional)
     * @param lastDisbursementDate When sorting by &#x60;disbursement_date&#x60;, this is populated with the &#x60;disbursement_date&#x60; of the last result. However, you will need to pass the index of that last result to &#x60;last_index&#x60; to get the next page. (optional)
     * @param maxImageNumber Maxium image number of the page where the schedule item is reported (optional)
     * @param disbursementDescription Description of disbursement (optional)
     * @param disbursementPurposeCategory Disbursement purpose category (optional)
     * @param minImageNumber Minium image number of the page where the schedule item is reported (optional)
     * @param sortNullOnly Toggle that filters out all rows having sort column that is non-null (optional, default to false)
     * @param lastIndex Index of last result from previous page (optional)
     * @param sortHideNull Hide null values on sorted column(s). (optional, default to false)
     * @param minAmount Filter for all amounts greater than a value. (optional)
     * @param perPage The number of results returned per page. Defaults to 20. (optional, default to 20)
     * @param lineNumber Filter for form and line number using the following format: &#x60;FORM-LINENUMBER&#x60;.  For example an argument such as &#x60;F3X-16&#x60; would filter down to all entries from form &#x60;F3X&#x60; line number &#x60;16&#x60;. (optional)
     * @param sort Provide a field to sort by. Use &#x60;-&#x60; for descending order.  (optional, default to -disbursement_date)
     * @param recipientCity City of recipient (optional)
     * @param spenderCommitteeType The one-letter type code of the organization:         - C communication cost         - D delegate         - E electioneering communication         - H House         - I independent expenditure filer (not a committee)         - N PAC - nonqualified         - O independent expenditure-only (super PACs)         - P presidential         - Q PAC - qualified         - S Senate         - U single candidate independent expenditure         - V PAC with non-contribution account, nonqualified         - W PAC with non-contribution account, qualified         - X party, nonqualified         - Y party, qualified         - Z national party non-federal account  (optional)
     * @param lastDisbursementAmount When sorting by &#x60;disbursement_amount&#x60;, this is populated with the &#x60;disbursement_amount&#x60; of the last result.  However, you will need to pass the index of that last result to &#x60;last_index&#x60; to get the next page. (optional)
     * @param spenderCommitteeOrgType The one-letter code for the kind for organization:         - C corporation         - L labor organization         - M membership organization         - T trade association         - V cooperative         - W corporation without capital stock  (optional)
     * @param twoYearTransactionPeriod  This is a two-year period that is derived from the year a transaction took place in the Itemized Schedule A and Schedule B tables. In cases where we have the date of the transaction (contribution_receipt_date in schedules/schedule_a, disbursement_date in schedules/schedule_b) the two_year_transaction_period is named after the ending, even-numbered year. If we do not have the date  of the transaction, we fall back to using the report year (report_year in both tables) instead,  making the same cycle adjustment as necessary. If no transaction year is specified, the results default to the most current cycle.  (optional)
     * @param committeeId  A unique identifier assigned to each committee or filer registered with the FEC. In general committee id&#39;s begin with the letter C which is followed by eight digits.  (optional)
     * @param imageNumber  An unique identifier for each page where the electronic or paper filing is reported.  (optional)
     * @param maxDate Maximum date (optional)
     * @param recipientName Name of the entity receiving the disbursement (optional)
     * @param maxAmount Filter for all amounts less than a value. (optional)
     * @param recipientState State of recipient (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call schedulesScheduleBGetCall(String apiKey, LocalDate minDate, List<String> spenderCommitteeDesignation, List<String> recipientCommitteeId, LocalDate lastDisbursementDate, String maxImageNumber, List<String> disbursementDescription, List<String> disbursementPurposeCategory, String minImageNumber, Boolean sortNullOnly, Integer lastIndex, Boolean sortHideNull, String minAmount, Integer perPage, String lineNumber, String sort, List<String> recipientCity, List<String> spenderCommitteeType, Float lastDisbursementAmount, List<String> spenderCommitteeOrgType, List<Integer> twoYearTransactionPeriod, List<String> committeeId, List<String> imageNumber, LocalDate maxDate, List<String> recipientName, String maxAmount, List<String> recipientState, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/schedules/schedule_b/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (minDate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("min_date", minDate));
        }

        if (spenderCommitteeDesignation != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "spender_committee_designation", spenderCommitteeDesignation));
        }

        if (recipientCommitteeId != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "recipient_committee_id", recipientCommitteeId));
        }

        if (lastDisbursementDate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("last_disbursement_date", lastDisbursementDate));
        }

        if (maxImageNumber != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("max_image_number", maxImageNumber));
        }

        if (disbursementDescription != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "disbursement_description", disbursementDescription));
        }

        if (disbursementPurposeCategory != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "disbursement_purpose_category", disbursementPurposeCategory));
        }

        if (minImageNumber != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("min_image_number", minImageNumber));
        }

        if (sortNullOnly != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort_null_only", sortNullOnly));
        }

        if (lastIndex != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("last_index", lastIndex));
        }

        if (sortHideNull != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort_hide_null", sortHideNull));
        }

        if (minAmount != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("min_amount", minAmount));
        }

        if (perPage != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("per_page", perPage));
        }

        if (lineNumber != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("line_number", lineNumber));
        }

        if (sort != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort", sort));
        }

        if (recipientCity != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "recipient_city", recipientCity));
        }

        if (spenderCommitteeType != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "spender_committee_type", spenderCommitteeType));
        }

        if (lastDisbursementAmount != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("last_disbursement_amount", lastDisbursementAmount));
        }

        if (spenderCommitteeOrgType != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "spender_committee_org_type", spenderCommitteeOrgType));
        }

        if (apiKey != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api_key", apiKey));
        }

        if (twoYearTransactionPeriod != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "two_year_transaction_period", twoYearTransactionPeriod));
        }

        if (committeeId != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "committee_id", committeeId));
        }

        if (imageNumber != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "image_number", imageNumber));
        }

        if (maxDate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("max_date", maxDate));
        }

        if (recipientName != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "recipient_name", recipientName));
        }

        if (maxAmount != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("max_amount", maxAmount));
        }

        if (recipientState != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "recipient_state", recipientState));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKeyHeaderAuth", "ApiKeyQueryAuth", "apiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call schedulesScheduleBGetValidateBeforeCall(String apiKey, LocalDate minDate, List<String> spenderCommitteeDesignation, List<String> recipientCommitteeId, LocalDate lastDisbursementDate, String maxImageNumber, List<String> disbursementDescription, List<String> disbursementPurposeCategory, String minImageNumber, Boolean sortNullOnly, Integer lastIndex, Boolean sortHideNull, String minAmount, Integer perPage, String lineNumber, String sort, List<String> recipientCity, List<String> spenderCommitteeType, Float lastDisbursementAmount, List<String> spenderCommitteeOrgType, List<Integer> twoYearTransactionPeriod, List<String> committeeId, List<String> imageNumber, LocalDate maxDate, List<String> recipientName, String maxAmount, List<String> recipientState, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'apiKey' is set
        if (apiKey == null) {
            throw new ApiException("Missing the required parameter 'apiKey' when calling schedulesScheduleBGet(Async)");
        }

        return schedulesScheduleBGetCall(apiKey, minDate, spenderCommitteeDesignation, recipientCommitteeId, lastDisbursementDate, maxImageNumber, disbursementDescription, disbursementPurposeCategory, minImageNumber, sortNullOnly, lastIndex, sortHideNull, minAmount, perPage, lineNumber, sort, recipientCity, spenderCommitteeType, lastDisbursementAmount, spenderCommitteeOrgType, twoYearTransactionPeriod, committeeId, imageNumber, maxDate, recipientName, maxAmount, recipientState, _callback);

    }

    /**
     * 
     *  Schedule B filings describe itemized disbursements. This data explains how committees and other filers spend their money. These figures are reported as part of forms F3, F3X and F3P.  The data is divided in two-year periods, called &#x60;two_year_transaction_period&#x60;, which is derived from the &#x60;report_year&#x60; submitted of the corresponding form. If no value is supplied, the results will default to the most recent two-year period that is named after the ending, even-numbered year.  Due to the large quantity of Schedule B filings, this endpoint is not paginated by page number. Instead, you can request the next page of results by adding the values in the &#x60;last_indexes&#x60; object from &#x60;pagination&#x60; to the URL of your last request. For example, when sorting by &#x60;disbursement_date&#x60;, you might receive a page of results with the following pagination information:  &#x60;&#x60;&#x60; pagination: {     pages: 965191,     per_page: 20,     count: 19303814,     last_indexes: {         last_index: \&quot;230906248\&quot;,         last_disbursement_date: \&quot;2014-07-04\&quot;     } } &#x60;&#x60;&#x60;  To fetch the next page of sorted results, append &#x60;last_index&#x3D;230906248&#x60; and &#x60;last_disbursement_date&#x3D;2014-07-04&#x60; to the URL.  We strongly advise paging through these results by using the sort indices (defaults to sort by disbursement date, e.g. &#x60;last_disbursement_date&#x60;), otherwise some resources may be unintentionally filtered out. This resource uses keyset pagination to improve query performance and these indices are required to properly page through this large dataset.  Note: because the Schedule B data includes many records, counts for large result sets are approximate; you will want to page through the records until no records are returned. 
     * @param apiKey  API key for https://api.data.gov. Get one at https://api.data.gov/signup.  (required)
     * @param minDate Minimum date (optional)
     * @param spenderCommitteeDesignation The one-letter designation code of the organization:          - A authorized by a candidate          - J joint fundraising committee          - P principal campaign committee of a candidate          - U unauthorized          - B lobbyist/registrant PAC          - D leadership PAC  (optional)
     * @param recipientCommitteeId The FEC identifier should be represented here if the contributor is registered with the FEC. (optional)
     * @param lastDisbursementDate When sorting by &#x60;disbursement_date&#x60;, this is populated with the &#x60;disbursement_date&#x60; of the last result. However, you will need to pass the index of that last result to &#x60;last_index&#x60; to get the next page. (optional)
     * @param maxImageNumber Maxium image number of the page where the schedule item is reported (optional)
     * @param disbursementDescription Description of disbursement (optional)
     * @param disbursementPurposeCategory Disbursement purpose category (optional)
     * @param minImageNumber Minium image number of the page where the schedule item is reported (optional)
     * @param sortNullOnly Toggle that filters out all rows having sort column that is non-null (optional, default to false)
     * @param lastIndex Index of last result from previous page (optional)
     * @param sortHideNull Hide null values on sorted column(s). (optional, default to false)
     * @param minAmount Filter for all amounts greater than a value. (optional)
     * @param perPage The number of results returned per page. Defaults to 20. (optional, default to 20)
     * @param lineNumber Filter for form and line number using the following format: &#x60;FORM-LINENUMBER&#x60;.  For example an argument such as &#x60;F3X-16&#x60; would filter down to all entries from form &#x60;F3X&#x60; line number &#x60;16&#x60;. (optional)
     * @param sort Provide a field to sort by. Use &#x60;-&#x60; for descending order.  (optional, default to -disbursement_date)
     * @param recipientCity City of recipient (optional)
     * @param spenderCommitteeType The one-letter type code of the organization:         - C communication cost         - D delegate         - E electioneering communication         - H House         - I independent expenditure filer (not a committee)         - N PAC - nonqualified         - O independent expenditure-only (super PACs)         - P presidential         - Q PAC - qualified         - S Senate         - U single candidate independent expenditure         - V PAC with non-contribution account, nonqualified         - W PAC with non-contribution account, qualified         - X party, nonqualified         - Y party, qualified         - Z national party non-federal account  (optional)
     * @param lastDisbursementAmount When sorting by &#x60;disbursement_amount&#x60;, this is populated with the &#x60;disbursement_amount&#x60; of the last result.  However, you will need to pass the index of that last result to &#x60;last_index&#x60; to get the next page. (optional)
     * @param spenderCommitteeOrgType The one-letter code for the kind for organization:         - C corporation         - L labor organization         - M membership organization         - T trade association         - V cooperative         - W corporation without capital stock  (optional)
     * @param twoYearTransactionPeriod  This is a two-year period that is derived from the year a transaction took place in the Itemized Schedule A and Schedule B tables. In cases where we have the date of the transaction (contribution_receipt_date in schedules/schedule_a, disbursement_date in schedules/schedule_b) the two_year_transaction_period is named after the ending, even-numbered year. If we do not have the date  of the transaction, we fall back to using the report year (report_year in both tables) instead,  making the same cycle adjustment as necessary. If no transaction year is specified, the results default to the most current cycle.  (optional)
     * @param committeeId  A unique identifier assigned to each committee or filer registered with the FEC. In general committee id&#39;s begin with the letter C which is followed by eight digits.  (optional)
     * @param imageNumber  An unique identifier for each page where the electronic or paper filing is reported.  (optional)
     * @param maxDate Maximum date (optional)
     * @param recipientName Name of the entity receiving the disbursement (optional)
     * @param maxAmount Filter for all amounts less than a value. (optional)
     * @param recipientState State of recipient (optional)
     * @return ScheduleBPage
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ScheduleBPage schedulesScheduleBGet(String apiKey, LocalDate minDate, List<String> spenderCommitteeDesignation, List<String> recipientCommitteeId, LocalDate lastDisbursementDate, String maxImageNumber, List<String> disbursementDescription, List<String> disbursementPurposeCategory, String minImageNumber, Boolean sortNullOnly, Integer lastIndex, Boolean sortHideNull, String minAmount, Integer perPage, String lineNumber, String sort, List<String> recipientCity, List<String> spenderCommitteeType, Float lastDisbursementAmount, List<String> spenderCommitteeOrgType, List<Integer> twoYearTransactionPeriod, List<String> committeeId, List<String> imageNumber, LocalDate maxDate, List<String> recipientName, String maxAmount, List<String> recipientState) throws ApiException {
        ApiResponse<ScheduleBPage> localVarResp = schedulesScheduleBGetWithHttpInfo(apiKey, minDate, spenderCommitteeDesignation, recipientCommitteeId, lastDisbursementDate, maxImageNumber, disbursementDescription, disbursementPurposeCategory, minImageNumber, sortNullOnly, lastIndex, sortHideNull, minAmount, perPage, lineNumber, sort, recipientCity, spenderCommitteeType, lastDisbursementAmount, spenderCommitteeOrgType, twoYearTransactionPeriod, committeeId, imageNumber, maxDate, recipientName, maxAmount, recipientState);
        return localVarResp.getData();
    }

    /**
     * 
     *  Schedule B filings describe itemized disbursements. This data explains how committees and other filers spend their money. These figures are reported as part of forms F3, F3X and F3P.  The data is divided in two-year periods, called &#x60;two_year_transaction_period&#x60;, which is derived from the &#x60;report_year&#x60; submitted of the corresponding form. If no value is supplied, the results will default to the most recent two-year period that is named after the ending, even-numbered year.  Due to the large quantity of Schedule B filings, this endpoint is not paginated by page number. Instead, you can request the next page of results by adding the values in the &#x60;last_indexes&#x60; object from &#x60;pagination&#x60; to the URL of your last request. For example, when sorting by &#x60;disbursement_date&#x60;, you might receive a page of results with the following pagination information:  &#x60;&#x60;&#x60; pagination: {     pages: 965191,     per_page: 20,     count: 19303814,     last_indexes: {         last_index: \&quot;230906248\&quot;,         last_disbursement_date: \&quot;2014-07-04\&quot;     } } &#x60;&#x60;&#x60;  To fetch the next page of sorted results, append &#x60;last_index&#x3D;230906248&#x60; and &#x60;last_disbursement_date&#x3D;2014-07-04&#x60; to the URL.  We strongly advise paging through these results by using the sort indices (defaults to sort by disbursement date, e.g. &#x60;last_disbursement_date&#x60;), otherwise some resources may be unintentionally filtered out. This resource uses keyset pagination to improve query performance and these indices are required to properly page through this large dataset.  Note: because the Schedule B data includes many records, counts for large result sets are approximate; you will want to page through the records until no records are returned. 
     * @param apiKey  API key for https://api.data.gov. Get one at https://api.data.gov/signup.  (required)
     * @param minDate Minimum date (optional)
     * @param spenderCommitteeDesignation The one-letter designation code of the organization:          - A authorized by a candidate          - J joint fundraising committee          - P principal campaign committee of a candidate          - U unauthorized          - B lobbyist/registrant PAC          - D leadership PAC  (optional)
     * @param recipientCommitteeId The FEC identifier should be represented here if the contributor is registered with the FEC. (optional)
     * @param lastDisbursementDate When sorting by &#x60;disbursement_date&#x60;, this is populated with the &#x60;disbursement_date&#x60; of the last result. However, you will need to pass the index of that last result to &#x60;last_index&#x60; to get the next page. (optional)
     * @param maxImageNumber Maxium image number of the page where the schedule item is reported (optional)
     * @param disbursementDescription Description of disbursement (optional)
     * @param disbursementPurposeCategory Disbursement purpose category (optional)
     * @param minImageNumber Minium image number of the page where the schedule item is reported (optional)
     * @param sortNullOnly Toggle that filters out all rows having sort column that is non-null (optional, default to false)
     * @param lastIndex Index of last result from previous page (optional)
     * @param sortHideNull Hide null values on sorted column(s). (optional, default to false)
     * @param minAmount Filter for all amounts greater than a value. (optional)
     * @param perPage The number of results returned per page. Defaults to 20. (optional, default to 20)
     * @param lineNumber Filter for form and line number using the following format: &#x60;FORM-LINENUMBER&#x60;.  For example an argument such as &#x60;F3X-16&#x60; would filter down to all entries from form &#x60;F3X&#x60; line number &#x60;16&#x60;. (optional)
     * @param sort Provide a field to sort by. Use &#x60;-&#x60; for descending order.  (optional, default to -disbursement_date)
     * @param recipientCity City of recipient (optional)
     * @param spenderCommitteeType The one-letter type code of the organization:         - C communication cost         - D delegate         - E electioneering communication         - H House         - I independent expenditure filer (not a committee)         - N PAC - nonqualified         - O independent expenditure-only (super PACs)         - P presidential         - Q PAC - qualified         - S Senate         - U single candidate independent expenditure         - V PAC with non-contribution account, nonqualified         - W PAC with non-contribution account, qualified         - X party, nonqualified         - Y party, qualified         - Z national party non-federal account  (optional)
     * @param lastDisbursementAmount When sorting by &#x60;disbursement_amount&#x60;, this is populated with the &#x60;disbursement_amount&#x60; of the last result.  However, you will need to pass the index of that last result to &#x60;last_index&#x60; to get the next page. (optional)
     * @param spenderCommitteeOrgType The one-letter code for the kind for organization:         - C corporation         - L labor organization         - M membership organization         - T trade association         - V cooperative         - W corporation without capital stock  (optional)
     * @param twoYearTransactionPeriod  This is a two-year period that is derived from the year a transaction took place in the Itemized Schedule A and Schedule B tables. In cases where we have the date of the transaction (contribution_receipt_date in schedules/schedule_a, disbursement_date in schedules/schedule_b) the two_year_transaction_period is named after the ending, even-numbered year. If we do not have the date  of the transaction, we fall back to using the report year (report_year in both tables) instead,  making the same cycle adjustment as necessary. If no transaction year is specified, the results default to the most current cycle.  (optional)
     * @param committeeId  A unique identifier assigned to each committee or filer registered with the FEC. In general committee id&#39;s begin with the letter C which is followed by eight digits.  (optional)
     * @param imageNumber  An unique identifier for each page where the electronic or paper filing is reported.  (optional)
     * @param maxDate Maximum date (optional)
     * @param recipientName Name of the entity receiving the disbursement (optional)
     * @param maxAmount Filter for all amounts less than a value. (optional)
     * @param recipientState State of recipient (optional)
     * @return ApiResponse&lt;ScheduleBPage&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ScheduleBPage> schedulesScheduleBGetWithHttpInfo(String apiKey, LocalDate minDate, List<String> spenderCommitteeDesignation, List<String> recipientCommitteeId, LocalDate lastDisbursementDate, String maxImageNumber, List<String> disbursementDescription, List<String> disbursementPurposeCategory, String minImageNumber, Boolean sortNullOnly, Integer lastIndex, Boolean sortHideNull, String minAmount, Integer perPage, String lineNumber, String sort, List<String> recipientCity, List<String> spenderCommitteeType, Float lastDisbursementAmount, List<String> spenderCommitteeOrgType, List<Integer> twoYearTransactionPeriod, List<String> committeeId, List<String> imageNumber, LocalDate maxDate, List<String> recipientName, String maxAmount, List<String> recipientState) throws ApiException {
        okhttp3.Call localVarCall = schedulesScheduleBGetValidateBeforeCall(apiKey, minDate, spenderCommitteeDesignation, recipientCommitteeId, lastDisbursementDate, maxImageNumber, disbursementDescription, disbursementPurposeCategory, minImageNumber, sortNullOnly, lastIndex, sortHideNull, minAmount, perPage, lineNumber, sort, recipientCity, spenderCommitteeType, lastDisbursementAmount, spenderCommitteeOrgType, twoYearTransactionPeriod, committeeId, imageNumber, maxDate, recipientName, maxAmount, recipientState, null);
        Type localVarReturnType = new TypeToken<ScheduleBPage>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     *  Schedule B filings describe itemized disbursements. This data explains how committees and other filers spend their money. These figures are reported as part of forms F3, F3X and F3P.  The data is divided in two-year periods, called &#x60;two_year_transaction_period&#x60;, which is derived from the &#x60;report_year&#x60; submitted of the corresponding form. If no value is supplied, the results will default to the most recent two-year period that is named after the ending, even-numbered year.  Due to the large quantity of Schedule B filings, this endpoint is not paginated by page number. Instead, you can request the next page of results by adding the values in the &#x60;last_indexes&#x60; object from &#x60;pagination&#x60; to the URL of your last request. For example, when sorting by &#x60;disbursement_date&#x60;, you might receive a page of results with the following pagination information:  &#x60;&#x60;&#x60; pagination: {     pages: 965191,     per_page: 20,     count: 19303814,     last_indexes: {         last_index: \&quot;230906248\&quot;,         last_disbursement_date: \&quot;2014-07-04\&quot;     } } &#x60;&#x60;&#x60;  To fetch the next page of sorted results, append &#x60;last_index&#x3D;230906248&#x60; and &#x60;last_disbursement_date&#x3D;2014-07-04&#x60; to the URL.  We strongly advise paging through these results by using the sort indices (defaults to sort by disbursement date, e.g. &#x60;last_disbursement_date&#x60;), otherwise some resources may be unintentionally filtered out. This resource uses keyset pagination to improve query performance and these indices are required to properly page through this large dataset.  Note: because the Schedule B data includes many records, counts for large result sets are approximate; you will want to page through the records until no records are returned. 
     * @param apiKey  API key for https://api.data.gov. Get one at https://api.data.gov/signup.  (required)
     * @param minDate Minimum date (optional)
     * @param spenderCommitteeDesignation The one-letter designation code of the organization:          - A authorized by a candidate          - J joint fundraising committee          - P principal campaign committee of a candidate          - U unauthorized          - B lobbyist/registrant PAC          - D leadership PAC  (optional)
     * @param recipientCommitteeId The FEC identifier should be represented here if the contributor is registered with the FEC. (optional)
     * @param lastDisbursementDate When sorting by &#x60;disbursement_date&#x60;, this is populated with the &#x60;disbursement_date&#x60; of the last result. However, you will need to pass the index of that last result to &#x60;last_index&#x60; to get the next page. (optional)
     * @param maxImageNumber Maxium image number of the page where the schedule item is reported (optional)
     * @param disbursementDescription Description of disbursement (optional)
     * @param disbursementPurposeCategory Disbursement purpose category (optional)
     * @param minImageNumber Minium image number of the page where the schedule item is reported (optional)
     * @param sortNullOnly Toggle that filters out all rows having sort column that is non-null (optional, default to false)
     * @param lastIndex Index of last result from previous page (optional)
     * @param sortHideNull Hide null values on sorted column(s). (optional, default to false)
     * @param minAmount Filter for all amounts greater than a value. (optional)
     * @param perPage The number of results returned per page. Defaults to 20. (optional, default to 20)
     * @param lineNumber Filter for form and line number using the following format: &#x60;FORM-LINENUMBER&#x60;.  For example an argument such as &#x60;F3X-16&#x60; would filter down to all entries from form &#x60;F3X&#x60; line number &#x60;16&#x60;. (optional)
     * @param sort Provide a field to sort by. Use &#x60;-&#x60; for descending order.  (optional, default to -disbursement_date)
     * @param recipientCity City of recipient (optional)
     * @param spenderCommitteeType The one-letter type code of the organization:         - C communication cost         - D delegate         - E electioneering communication         - H House         - I independent expenditure filer (not a committee)         - N PAC - nonqualified         - O independent expenditure-only (super PACs)         - P presidential         - Q PAC - qualified         - S Senate         - U single candidate independent expenditure         - V PAC with non-contribution account, nonqualified         - W PAC with non-contribution account, qualified         - X party, nonqualified         - Y party, qualified         - Z national party non-federal account  (optional)
     * @param lastDisbursementAmount When sorting by &#x60;disbursement_amount&#x60;, this is populated with the &#x60;disbursement_amount&#x60; of the last result.  However, you will need to pass the index of that last result to &#x60;last_index&#x60; to get the next page. (optional)
     * @param spenderCommitteeOrgType The one-letter code for the kind for organization:         - C corporation         - L labor organization         - M membership organization         - T trade association         - V cooperative         - W corporation without capital stock  (optional)
     * @param twoYearTransactionPeriod  This is a two-year period that is derived from the year a transaction took place in the Itemized Schedule A and Schedule B tables. In cases where we have the date of the transaction (contribution_receipt_date in schedules/schedule_a, disbursement_date in schedules/schedule_b) the two_year_transaction_period is named after the ending, even-numbered year. If we do not have the date  of the transaction, we fall back to using the report year (report_year in both tables) instead,  making the same cycle adjustment as necessary. If no transaction year is specified, the results default to the most current cycle.  (optional)
     * @param committeeId  A unique identifier assigned to each committee or filer registered with the FEC. In general committee id&#39;s begin with the letter C which is followed by eight digits.  (optional)
     * @param imageNumber  An unique identifier for each page where the electronic or paper filing is reported.  (optional)
     * @param maxDate Maximum date (optional)
     * @param recipientName Name of the entity receiving the disbursement (optional)
     * @param maxAmount Filter for all amounts less than a value. (optional)
     * @param recipientState State of recipient (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call schedulesScheduleBGetAsync(String apiKey, LocalDate minDate, List<String> spenderCommitteeDesignation, List<String> recipientCommitteeId, LocalDate lastDisbursementDate, String maxImageNumber, List<String> disbursementDescription, List<String> disbursementPurposeCategory, String minImageNumber, Boolean sortNullOnly, Integer lastIndex, Boolean sortHideNull, String minAmount, Integer perPage, String lineNumber, String sort, List<String> recipientCity, List<String> spenderCommitteeType, Float lastDisbursementAmount, List<String> spenderCommitteeOrgType, List<Integer> twoYearTransactionPeriod, List<String> committeeId, List<String> imageNumber, LocalDate maxDate, List<String> recipientName, String maxAmount, List<String> recipientState, final ApiCallback<ScheduleBPage> _callback) throws ApiException {

        okhttp3.Call localVarCall = schedulesScheduleBGetValidateBeforeCall(apiKey, minDate, spenderCommitteeDesignation, recipientCommitteeId, lastDisbursementDate, maxImageNumber, disbursementDescription, disbursementPurposeCategory, minImageNumber, sortNullOnly, lastIndex, sortHideNull, minAmount, perPage, lineNumber, sort, recipientCity, spenderCommitteeType, lastDisbursementAmount, spenderCommitteeOrgType, twoYearTransactionPeriod, committeeId, imageNumber, maxDate, recipientName, maxAmount, recipientState, _callback);
        Type localVarReturnType = new TypeToken<ScheduleBPage>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for schedulesScheduleBSubIdGet
     * @param apiKey  API key for https://api.data.gov. Get one at https://api.data.gov/signup.  (required)
     * @param subId  (required)
     * @param minDate Minimum date (optional)
     * @param spenderCommitteeDesignation The one-letter designation code of the organization:          - A authorized by a candidate          - J joint fundraising committee          - P principal campaign committee of a candidate          - U unauthorized          - B lobbyist/registrant PAC          - D leadership PAC  (optional)
     * @param recipientCommitteeId The FEC identifier should be represented here if the contributor is registered with the FEC. (optional)
     * @param lastDisbursementDate When sorting by &#x60;disbursement_date&#x60;, this is populated with the &#x60;disbursement_date&#x60; of the last result. However, you will need to pass the index of that last result to &#x60;last_index&#x60; to get the next page. (optional)
     * @param maxImageNumber Maxium image number of the page where the schedule item is reported (optional)
     * @param disbursementDescription Description of disbursement (optional)
     * @param disbursementPurposeCategory Disbursement purpose category (optional)
     * @param minImageNumber Minium image number of the page where the schedule item is reported (optional)
     * @param sortNullOnly Toggle that filters out all rows having sort column that is non-null (optional, default to false)
     * @param lastIndex Index of last result from previous page (optional)
     * @param sortHideNull Hide null values on sorted column(s). (optional, default to false)
     * @param minAmount Filter for all amounts greater than a value. (optional)
     * @param perPage The number of results returned per page. Defaults to 20. (optional, default to 20)
     * @param lineNumber Filter for form and line number using the following format: &#x60;FORM-LINENUMBER&#x60;.  For example an argument such as &#x60;F3X-16&#x60; would filter down to all entries from form &#x60;F3X&#x60; line number &#x60;16&#x60;. (optional)
     * @param sort Provide a field to sort by. Use &#x60;-&#x60; for descending order.  (optional, default to -disbursement_date)
     * @param recipientCity City of recipient (optional)
     * @param spenderCommitteeType The one-letter type code of the organization:         - C communication cost         - D delegate         - E electioneering communication         - H House         - I independent expenditure filer (not a committee)         - N PAC - nonqualified         - O independent expenditure-only (super PACs)         - P presidential         - Q PAC - qualified         - S Senate         - U single candidate independent expenditure         - V PAC with non-contribution account, nonqualified         - W PAC with non-contribution account, qualified         - X party, nonqualified         - Y party, qualified         - Z national party non-federal account  (optional)
     * @param lastDisbursementAmount When sorting by &#x60;disbursement_amount&#x60;, this is populated with the &#x60;disbursement_amount&#x60; of the last result.  However, you will need to pass the index of that last result to &#x60;last_index&#x60; to get the next page. (optional)
     * @param spenderCommitteeOrgType The one-letter code for the kind for organization:         - C corporation         - L labor organization         - M membership organization         - T trade association         - V cooperative         - W corporation without capital stock  (optional)
     * @param twoYearTransactionPeriod  This is a two-year period that is derived from the year a transaction took place in the Itemized Schedule A and Schedule B tables. In cases where we have the date of the transaction (contribution_receipt_date in schedules/schedule_a, disbursement_date in schedules/schedule_b) the two_year_transaction_period is named after the ending, even-numbered year. If we do not have the date  of the transaction, we fall back to using the report year (report_year in both tables) instead,  making the same cycle adjustment as necessary. If no transaction year is specified, the results default to the most current cycle.  (optional)
     * @param committeeId  A unique identifier assigned to each committee or filer registered with the FEC. In general committee id&#39;s begin with the letter C which is followed by eight digits.  (optional)
     * @param imageNumber  An unique identifier for each page where the electronic or paper filing is reported.  (optional)
     * @param maxDate Maximum date (optional)
     * @param recipientName Name of the entity receiving the disbursement (optional)
     * @param maxAmount Filter for all amounts less than a value. (optional)
     * @param recipientState State of recipient (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call schedulesScheduleBSubIdGetCall(String apiKey, String subId, LocalDate minDate, List<String> spenderCommitteeDesignation, List<String> recipientCommitteeId, LocalDate lastDisbursementDate, String maxImageNumber, List<String> disbursementDescription, List<String> disbursementPurposeCategory, String minImageNumber, Boolean sortNullOnly, Integer lastIndex, Boolean sortHideNull, String minAmount, Integer perPage, String lineNumber, String sort, List<String> recipientCity, List<String> spenderCommitteeType, Float lastDisbursementAmount, List<String> spenderCommitteeOrgType, List<Integer> twoYearTransactionPeriod, List<String> committeeId, List<String> imageNumber, LocalDate maxDate, List<String> recipientName, String maxAmount, List<String> recipientState, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/schedules/schedule_b/{sub_id}/"
            .replace("{" + "sub_id" + "}", localVarApiClient.escapeString(subId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (minDate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("min_date", minDate));
        }

        if (spenderCommitteeDesignation != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "spender_committee_designation", spenderCommitteeDesignation));
        }

        if (recipientCommitteeId != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "recipient_committee_id", recipientCommitteeId));
        }

        if (lastDisbursementDate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("last_disbursement_date", lastDisbursementDate));
        }

        if (maxImageNumber != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("max_image_number", maxImageNumber));
        }

        if (disbursementDescription != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "disbursement_description", disbursementDescription));
        }

        if (disbursementPurposeCategory != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "disbursement_purpose_category", disbursementPurposeCategory));
        }

        if (minImageNumber != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("min_image_number", minImageNumber));
        }

        if (sortNullOnly != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort_null_only", sortNullOnly));
        }

        if (lastIndex != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("last_index", lastIndex));
        }

        if (sortHideNull != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort_hide_null", sortHideNull));
        }

        if (minAmount != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("min_amount", minAmount));
        }

        if (perPage != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("per_page", perPage));
        }

        if (lineNumber != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("line_number", lineNumber));
        }

        if (sort != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort", sort));
        }

        if (recipientCity != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "recipient_city", recipientCity));
        }

        if (spenderCommitteeType != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "spender_committee_type", spenderCommitteeType));
        }

        if (lastDisbursementAmount != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("last_disbursement_amount", lastDisbursementAmount));
        }

        if (spenderCommitteeOrgType != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "spender_committee_org_type", spenderCommitteeOrgType));
        }

        if (apiKey != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api_key", apiKey));
        }

        if (twoYearTransactionPeriod != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "two_year_transaction_period", twoYearTransactionPeriod));
        }

        if (committeeId != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "committee_id", committeeId));
        }

        if (imageNumber != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "image_number", imageNumber));
        }

        if (maxDate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("max_date", maxDate));
        }

        if (recipientName != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "recipient_name", recipientName));
        }

        if (maxAmount != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("max_amount", maxAmount));
        }

        if (recipientState != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "recipient_state", recipientState));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKeyHeaderAuth", "ApiKeyQueryAuth", "apiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call schedulesScheduleBSubIdGetValidateBeforeCall(String apiKey, String subId, LocalDate minDate, List<String> spenderCommitteeDesignation, List<String> recipientCommitteeId, LocalDate lastDisbursementDate, String maxImageNumber, List<String> disbursementDescription, List<String> disbursementPurposeCategory, String minImageNumber, Boolean sortNullOnly, Integer lastIndex, Boolean sortHideNull, String minAmount, Integer perPage, String lineNumber, String sort, List<String> recipientCity, List<String> spenderCommitteeType, Float lastDisbursementAmount, List<String> spenderCommitteeOrgType, List<Integer> twoYearTransactionPeriod, List<String> committeeId, List<String> imageNumber, LocalDate maxDate, List<String> recipientName, String maxAmount, List<String> recipientState, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'apiKey' is set
        if (apiKey == null) {
            throw new ApiException("Missing the required parameter 'apiKey' when calling schedulesScheduleBSubIdGet(Async)");
        }

        // verify the required parameter 'subId' is set
        if (subId == null) {
            throw new ApiException("Missing the required parameter 'subId' when calling schedulesScheduleBSubIdGet(Async)");
        }

        return schedulesScheduleBSubIdGetCall(apiKey, subId, minDate, spenderCommitteeDesignation, recipientCommitteeId, lastDisbursementDate, maxImageNumber, disbursementDescription, disbursementPurposeCategory, minImageNumber, sortNullOnly, lastIndex, sortHideNull, minAmount, perPage, lineNumber, sort, recipientCity, spenderCommitteeType, lastDisbursementAmount, spenderCommitteeOrgType, twoYearTransactionPeriod, committeeId, imageNumber, maxDate, recipientName, maxAmount, recipientState, _callback);

    }

    /**
     * 
     *  Schedule B filings describe itemized disbursements. This data explains how committees and other filers spend their money. These figures are reported as part of forms F3, F3X and F3P.  The data is divided in two-year periods, called &#x60;two_year_transaction_period&#x60;, which is derived from the &#x60;report_year&#x60; submitted of the corresponding form. If no value is supplied, the results will default to the most recent two-year period that is named after the ending, even-numbered year.  Due to the large quantity of Schedule B filings, this endpoint is not paginated by page number. Instead, you can request the next page of results by adding the values in the &#x60;last_indexes&#x60; object from &#x60;pagination&#x60; to the URL of your last request. For example, when sorting by &#x60;disbursement_date&#x60;, you might receive a page of results with the following pagination information:  &#x60;&#x60;&#x60; pagination: {     pages: 965191,     per_page: 20,     count: 19303814,     last_indexes: {         last_index: \&quot;230906248\&quot;,         last_disbursement_date: \&quot;2014-07-04\&quot;     } } &#x60;&#x60;&#x60;  To fetch the next page of sorted results, append &#x60;last_index&#x3D;230906248&#x60; and &#x60;last_disbursement_date&#x3D;2014-07-04&#x60; to the URL.  We strongly advise paging through these results by using the sort indices (defaults to sort by disbursement date, e.g. &#x60;last_disbursement_date&#x60;), otherwise some resources may be unintentionally filtered out. This resource uses keyset pagination to improve query performance and these indices are required to properly page through this large dataset.  Note: because the Schedule B data includes many records, counts for large result sets are approximate; you will want to page through the records until no records are returned. 
     * @param apiKey  API key for https://api.data.gov. Get one at https://api.data.gov/signup.  (required)
     * @param subId  (required)
     * @param minDate Minimum date (optional)
     * @param spenderCommitteeDesignation The one-letter designation code of the organization:          - A authorized by a candidate          - J joint fundraising committee          - P principal campaign committee of a candidate          - U unauthorized          - B lobbyist/registrant PAC          - D leadership PAC  (optional)
     * @param recipientCommitteeId The FEC identifier should be represented here if the contributor is registered with the FEC. (optional)
     * @param lastDisbursementDate When sorting by &#x60;disbursement_date&#x60;, this is populated with the &#x60;disbursement_date&#x60; of the last result. However, you will need to pass the index of that last result to &#x60;last_index&#x60; to get the next page. (optional)
     * @param maxImageNumber Maxium image number of the page where the schedule item is reported (optional)
     * @param disbursementDescription Description of disbursement (optional)
     * @param disbursementPurposeCategory Disbursement purpose category (optional)
     * @param minImageNumber Minium image number of the page where the schedule item is reported (optional)
     * @param sortNullOnly Toggle that filters out all rows having sort column that is non-null (optional, default to false)
     * @param lastIndex Index of last result from previous page (optional)
     * @param sortHideNull Hide null values on sorted column(s). (optional, default to false)
     * @param minAmount Filter for all amounts greater than a value. (optional)
     * @param perPage The number of results returned per page. Defaults to 20. (optional, default to 20)
     * @param lineNumber Filter for form and line number using the following format: &#x60;FORM-LINENUMBER&#x60;.  For example an argument such as &#x60;F3X-16&#x60; would filter down to all entries from form &#x60;F3X&#x60; line number &#x60;16&#x60;. (optional)
     * @param sort Provide a field to sort by. Use &#x60;-&#x60; for descending order.  (optional, default to -disbursement_date)
     * @param recipientCity City of recipient (optional)
     * @param spenderCommitteeType The one-letter type code of the organization:         - C communication cost         - D delegate         - E electioneering communication         - H House         - I independent expenditure filer (not a committee)         - N PAC - nonqualified         - O independent expenditure-only (super PACs)         - P presidential         - Q PAC - qualified         - S Senate         - U single candidate independent expenditure         - V PAC with non-contribution account, nonqualified         - W PAC with non-contribution account, qualified         - X party, nonqualified         - Y party, qualified         - Z national party non-federal account  (optional)
     * @param lastDisbursementAmount When sorting by &#x60;disbursement_amount&#x60;, this is populated with the &#x60;disbursement_amount&#x60; of the last result.  However, you will need to pass the index of that last result to &#x60;last_index&#x60; to get the next page. (optional)
     * @param spenderCommitteeOrgType The one-letter code for the kind for organization:         - C corporation         - L labor organization         - M membership organization         - T trade association         - V cooperative         - W corporation without capital stock  (optional)
     * @param twoYearTransactionPeriod  This is a two-year period that is derived from the year a transaction took place in the Itemized Schedule A and Schedule B tables. In cases where we have the date of the transaction (contribution_receipt_date in schedules/schedule_a, disbursement_date in schedules/schedule_b) the two_year_transaction_period is named after the ending, even-numbered year. If we do not have the date  of the transaction, we fall back to using the report year (report_year in both tables) instead,  making the same cycle adjustment as necessary. If no transaction year is specified, the results default to the most current cycle.  (optional)
     * @param committeeId  A unique identifier assigned to each committee or filer registered with the FEC. In general committee id&#39;s begin with the letter C which is followed by eight digits.  (optional)
     * @param imageNumber  An unique identifier for each page where the electronic or paper filing is reported.  (optional)
     * @param maxDate Maximum date (optional)
     * @param recipientName Name of the entity receiving the disbursement (optional)
     * @param maxAmount Filter for all amounts less than a value. (optional)
     * @param recipientState State of recipient (optional)
     * @return ScheduleBPage
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ScheduleBPage schedulesScheduleBSubIdGet(String apiKey, String subId, LocalDate minDate, List<String> spenderCommitteeDesignation, List<String> recipientCommitteeId, LocalDate lastDisbursementDate, String maxImageNumber, List<String> disbursementDescription, List<String> disbursementPurposeCategory, String minImageNumber, Boolean sortNullOnly, Integer lastIndex, Boolean sortHideNull, String minAmount, Integer perPage, String lineNumber, String sort, List<String> recipientCity, List<String> spenderCommitteeType, Float lastDisbursementAmount, List<String> spenderCommitteeOrgType, List<Integer> twoYearTransactionPeriod, List<String> committeeId, List<String> imageNumber, LocalDate maxDate, List<String> recipientName, String maxAmount, List<String> recipientState) throws ApiException {
        ApiResponse<ScheduleBPage> localVarResp = schedulesScheduleBSubIdGetWithHttpInfo(apiKey, subId, minDate, spenderCommitteeDesignation, recipientCommitteeId, lastDisbursementDate, maxImageNumber, disbursementDescription, disbursementPurposeCategory, minImageNumber, sortNullOnly, lastIndex, sortHideNull, minAmount, perPage, lineNumber, sort, recipientCity, spenderCommitteeType, lastDisbursementAmount, spenderCommitteeOrgType, twoYearTransactionPeriod, committeeId, imageNumber, maxDate, recipientName, maxAmount, recipientState);
        return localVarResp.getData();
    }

    /**
     * 
     *  Schedule B filings describe itemized disbursements. This data explains how committees and other filers spend their money. These figures are reported as part of forms F3, F3X and F3P.  The data is divided in two-year periods, called &#x60;two_year_transaction_period&#x60;, which is derived from the &#x60;report_year&#x60; submitted of the corresponding form. If no value is supplied, the results will default to the most recent two-year period that is named after the ending, even-numbered year.  Due to the large quantity of Schedule B filings, this endpoint is not paginated by page number. Instead, you can request the next page of results by adding the values in the &#x60;last_indexes&#x60; object from &#x60;pagination&#x60; to the URL of your last request. For example, when sorting by &#x60;disbursement_date&#x60;, you might receive a page of results with the following pagination information:  &#x60;&#x60;&#x60; pagination: {     pages: 965191,     per_page: 20,     count: 19303814,     last_indexes: {         last_index: \&quot;230906248\&quot;,         last_disbursement_date: \&quot;2014-07-04\&quot;     } } &#x60;&#x60;&#x60;  To fetch the next page of sorted results, append &#x60;last_index&#x3D;230906248&#x60; and &#x60;last_disbursement_date&#x3D;2014-07-04&#x60; to the URL.  We strongly advise paging through these results by using the sort indices (defaults to sort by disbursement date, e.g. &#x60;last_disbursement_date&#x60;), otherwise some resources may be unintentionally filtered out. This resource uses keyset pagination to improve query performance and these indices are required to properly page through this large dataset.  Note: because the Schedule B data includes many records, counts for large result sets are approximate; you will want to page through the records until no records are returned. 
     * @param apiKey  API key for https://api.data.gov. Get one at https://api.data.gov/signup.  (required)
     * @param subId  (required)
     * @param minDate Minimum date (optional)
     * @param spenderCommitteeDesignation The one-letter designation code of the organization:          - A authorized by a candidate          - J joint fundraising committee          - P principal campaign committee of a candidate          - U unauthorized          - B lobbyist/registrant PAC          - D leadership PAC  (optional)
     * @param recipientCommitteeId The FEC identifier should be represented here if the contributor is registered with the FEC. (optional)
     * @param lastDisbursementDate When sorting by &#x60;disbursement_date&#x60;, this is populated with the &#x60;disbursement_date&#x60; of the last result. However, you will need to pass the index of that last result to &#x60;last_index&#x60; to get the next page. (optional)
     * @param maxImageNumber Maxium image number of the page where the schedule item is reported (optional)
     * @param disbursementDescription Description of disbursement (optional)
     * @param disbursementPurposeCategory Disbursement purpose category (optional)
     * @param minImageNumber Minium image number of the page where the schedule item is reported (optional)
     * @param sortNullOnly Toggle that filters out all rows having sort column that is non-null (optional, default to false)
     * @param lastIndex Index of last result from previous page (optional)
     * @param sortHideNull Hide null values on sorted column(s). (optional, default to false)
     * @param minAmount Filter for all amounts greater than a value. (optional)
     * @param perPage The number of results returned per page. Defaults to 20. (optional, default to 20)
     * @param lineNumber Filter for form and line number using the following format: &#x60;FORM-LINENUMBER&#x60;.  For example an argument such as &#x60;F3X-16&#x60; would filter down to all entries from form &#x60;F3X&#x60; line number &#x60;16&#x60;. (optional)
     * @param sort Provide a field to sort by. Use &#x60;-&#x60; for descending order.  (optional, default to -disbursement_date)
     * @param recipientCity City of recipient (optional)
     * @param spenderCommitteeType The one-letter type code of the organization:         - C communication cost         - D delegate         - E electioneering communication         - H House         - I independent expenditure filer (not a committee)         - N PAC - nonqualified         - O independent expenditure-only (super PACs)         - P presidential         - Q PAC - qualified         - S Senate         - U single candidate independent expenditure         - V PAC with non-contribution account, nonqualified         - W PAC with non-contribution account, qualified         - X party, nonqualified         - Y party, qualified         - Z national party non-federal account  (optional)
     * @param lastDisbursementAmount When sorting by &#x60;disbursement_amount&#x60;, this is populated with the &#x60;disbursement_amount&#x60; of the last result.  However, you will need to pass the index of that last result to &#x60;last_index&#x60; to get the next page. (optional)
     * @param spenderCommitteeOrgType The one-letter code for the kind for organization:         - C corporation         - L labor organization         - M membership organization         - T trade association         - V cooperative         - W corporation without capital stock  (optional)
     * @param twoYearTransactionPeriod  This is a two-year period that is derived from the year a transaction took place in the Itemized Schedule A and Schedule B tables. In cases where we have the date of the transaction (contribution_receipt_date in schedules/schedule_a, disbursement_date in schedules/schedule_b) the two_year_transaction_period is named after the ending, even-numbered year. If we do not have the date  of the transaction, we fall back to using the report year (report_year in both tables) instead,  making the same cycle adjustment as necessary. If no transaction year is specified, the results default to the most current cycle.  (optional)
     * @param committeeId  A unique identifier assigned to each committee or filer registered with the FEC. In general committee id&#39;s begin with the letter C which is followed by eight digits.  (optional)
     * @param imageNumber  An unique identifier for each page where the electronic or paper filing is reported.  (optional)
     * @param maxDate Maximum date (optional)
     * @param recipientName Name of the entity receiving the disbursement (optional)
     * @param maxAmount Filter for all amounts less than a value. (optional)
     * @param recipientState State of recipient (optional)
     * @return ApiResponse&lt;ScheduleBPage&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ScheduleBPage> schedulesScheduleBSubIdGetWithHttpInfo(String apiKey, String subId, LocalDate minDate, List<String> spenderCommitteeDesignation, List<String> recipientCommitteeId, LocalDate lastDisbursementDate, String maxImageNumber, List<String> disbursementDescription, List<String> disbursementPurposeCategory, String minImageNumber, Boolean sortNullOnly, Integer lastIndex, Boolean sortHideNull, String minAmount, Integer perPage, String lineNumber, String sort, List<String> recipientCity, List<String> spenderCommitteeType, Float lastDisbursementAmount, List<String> spenderCommitteeOrgType, List<Integer> twoYearTransactionPeriod, List<String> committeeId, List<String> imageNumber, LocalDate maxDate, List<String> recipientName, String maxAmount, List<String> recipientState) throws ApiException {
        okhttp3.Call localVarCall = schedulesScheduleBSubIdGetValidateBeforeCall(apiKey, subId, minDate, spenderCommitteeDesignation, recipientCommitteeId, lastDisbursementDate, maxImageNumber, disbursementDescription, disbursementPurposeCategory, minImageNumber, sortNullOnly, lastIndex, sortHideNull, minAmount, perPage, lineNumber, sort, recipientCity, spenderCommitteeType, lastDisbursementAmount, spenderCommitteeOrgType, twoYearTransactionPeriod, committeeId, imageNumber, maxDate, recipientName, maxAmount, recipientState, null);
        Type localVarReturnType = new TypeToken<ScheduleBPage>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     *  Schedule B filings describe itemized disbursements. This data explains how committees and other filers spend their money. These figures are reported as part of forms F3, F3X and F3P.  The data is divided in two-year periods, called &#x60;two_year_transaction_period&#x60;, which is derived from the &#x60;report_year&#x60; submitted of the corresponding form. If no value is supplied, the results will default to the most recent two-year period that is named after the ending, even-numbered year.  Due to the large quantity of Schedule B filings, this endpoint is not paginated by page number. Instead, you can request the next page of results by adding the values in the &#x60;last_indexes&#x60; object from &#x60;pagination&#x60; to the URL of your last request. For example, when sorting by &#x60;disbursement_date&#x60;, you might receive a page of results with the following pagination information:  &#x60;&#x60;&#x60; pagination: {     pages: 965191,     per_page: 20,     count: 19303814,     last_indexes: {         last_index: \&quot;230906248\&quot;,         last_disbursement_date: \&quot;2014-07-04\&quot;     } } &#x60;&#x60;&#x60;  To fetch the next page of sorted results, append &#x60;last_index&#x3D;230906248&#x60; and &#x60;last_disbursement_date&#x3D;2014-07-04&#x60; to the URL.  We strongly advise paging through these results by using the sort indices (defaults to sort by disbursement date, e.g. &#x60;last_disbursement_date&#x60;), otherwise some resources may be unintentionally filtered out. This resource uses keyset pagination to improve query performance and these indices are required to properly page through this large dataset.  Note: because the Schedule B data includes many records, counts for large result sets are approximate; you will want to page through the records until no records are returned. 
     * @param apiKey  API key for https://api.data.gov. Get one at https://api.data.gov/signup.  (required)
     * @param subId  (required)
     * @param minDate Minimum date (optional)
     * @param spenderCommitteeDesignation The one-letter designation code of the organization:          - A authorized by a candidate          - J joint fundraising committee          - P principal campaign committee of a candidate          - U unauthorized          - B lobbyist/registrant PAC          - D leadership PAC  (optional)
     * @param recipientCommitteeId The FEC identifier should be represented here if the contributor is registered with the FEC. (optional)
     * @param lastDisbursementDate When sorting by &#x60;disbursement_date&#x60;, this is populated with the &#x60;disbursement_date&#x60; of the last result. However, you will need to pass the index of that last result to &#x60;last_index&#x60; to get the next page. (optional)
     * @param maxImageNumber Maxium image number of the page where the schedule item is reported (optional)
     * @param disbursementDescription Description of disbursement (optional)
     * @param disbursementPurposeCategory Disbursement purpose category (optional)
     * @param minImageNumber Minium image number of the page where the schedule item is reported (optional)
     * @param sortNullOnly Toggle that filters out all rows having sort column that is non-null (optional, default to false)
     * @param lastIndex Index of last result from previous page (optional)
     * @param sortHideNull Hide null values on sorted column(s). (optional, default to false)
     * @param minAmount Filter for all amounts greater than a value. (optional)
     * @param perPage The number of results returned per page. Defaults to 20. (optional, default to 20)
     * @param lineNumber Filter for form and line number using the following format: &#x60;FORM-LINENUMBER&#x60;.  For example an argument such as &#x60;F3X-16&#x60; would filter down to all entries from form &#x60;F3X&#x60; line number &#x60;16&#x60;. (optional)
     * @param sort Provide a field to sort by. Use &#x60;-&#x60; for descending order.  (optional, default to -disbursement_date)
     * @param recipientCity City of recipient (optional)
     * @param spenderCommitteeType The one-letter type code of the organization:         - C communication cost         - D delegate         - E electioneering communication         - H House         - I independent expenditure filer (not a committee)         - N PAC - nonqualified         - O independent expenditure-only (super PACs)         - P presidential         - Q PAC - qualified         - S Senate         - U single candidate independent expenditure         - V PAC with non-contribution account, nonqualified         - W PAC with non-contribution account, qualified         - X party, nonqualified         - Y party, qualified         - Z national party non-federal account  (optional)
     * @param lastDisbursementAmount When sorting by &#x60;disbursement_amount&#x60;, this is populated with the &#x60;disbursement_amount&#x60; of the last result.  However, you will need to pass the index of that last result to &#x60;last_index&#x60; to get the next page. (optional)
     * @param spenderCommitteeOrgType The one-letter code for the kind for organization:         - C corporation         - L labor organization         - M membership organization         - T trade association         - V cooperative         - W corporation without capital stock  (optional)
     * @param twoYearTransactionPeriod  This is a two-year period that is derived from the year a transaction took place in the Itemized Schedule A and Schedule B tables. In cases where we have the date of the transaction (contribution_receipt_date in schedules/schedule_a, disbursement_date in schedules/schedule_b) the two_year_transaction_period is named after the ending, even-numbered year. If we do not have the date  of the transaction, we fall back to using the report year (report_year in both tables) instead,  making the same cycle adjustment as necessary. If no transaction year is specified, the results default to the most current cycle.  (optional)
     * @param committeeId  A unique identifier assigned to each committee or filer registered with the FEC. In general committee id&#39;s begin with the letter C which is followed by eight digits.  (optional)
     * @param imageNumber  An unique identifier for each page where the electronic or paper filing is reported.  (optional)
     * @param maxDate Maximum date (optional)
     * @param recipientName Name of the entity receiving the disbursement (optional)
     * @param maxAmount Filter for all amounts less than a value. (optional)
     * @param recipientState State of recipient (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call schedulesScheduleBSubIdGetAsync(String apiKey, String subId, LocalDate minDate, List<String> spenderCommitteeDesignation, List<String> recipientCommitteeId, LocalDate lastDisbursementDate, String maxImageNumber, List<String> disbursementDescription, List<String> disbursementPurposeCategory, String minImageNumber, Boolean sortNullOnly, Integer lastIndex, Boolean sortHideNull, String minAmount, Integer perPage, String lineNumber, String sort, List<String> recipientCity, List<String> spenderCommitteeType, Float lastDisbursementAmount, List<String> spenderCommitteeOrgType, List<Integer> twoYearTransactionPeriod, List<String> committeeId, List<String> imageNumber, LocalDate maxDate, List<String> recipientName, String maxAmount, List<String> recipientState, final ApiCallback<ScheduleBPage> _callback) throws ApiException {

        okhttp3.Call localVarCall = schedulesScheduleBSubIdGetValidateBeforeCall(apiKey, subId, minDate, spenderCommitteeDesignation, recipientCommitteeId, lastDisbursementDate, maxImageNumber, disbursementDescription, disbursementPurposeCategory, minImageNumber, sortNullOnly, lastIndex, sortHideNull, minAmount, perPage, lineNumber, sort, recipientCity, spenderCommitteeType, lastDisbursementAmount, spenderCommitteeOrgType, twoYearTransactionPeriod, committeeId, imageNumber, maxDate, recipientName, maxAmount, recipientState, _callback);
        Type localVarReturnType = new TypeToken<ScheduleBPage>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
