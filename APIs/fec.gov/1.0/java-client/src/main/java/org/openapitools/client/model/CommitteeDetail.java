/*
 * OpenFEC
 * This application programming interface (API) allows you to explore the way candidates and committees fund their campaigns.    The Federal Election Commission (FEC) API is a RESTful web service supporting full-text and field-specific searches on FEC data. [Bulk downloads](https://www.fec.gov/data/advanced/?tab=bulk-data) are available on the current site. Information is tied to the underlying forms by file ID and image ID. Data is updated nightly.    There are a lot of data, and a good place to start is to use search to find interesting candidates and committees. Then, you can use their IDs to find report or line item details with the other endpoints. If you are interested in individual donors, check out contributor information in the `/schedule_a/` endpoints.    <b class=\"body\" id=\"getting_started_head\">Getting started with the openFEC API</b><br>    If you would like to use the FEC's API programmatically, you can sign up for your own API key using our form. Alternatively, you can still try out our API without an API key by using the web interface and using DEMO_KEY. Note that when you use the openFEC API you are subject to the [Terms of Service](https://github.com/fecgov/FEC/blob/master/TERMS-OF-SERVICE.md) and [Acceptable Use policy](https://github.com/fecgov/FEC/blob/master/ACCEPTABLE-USE-POLICY.md).    Signing up for an API key will enable you to place up to 1,000 calls an hour. Each call is limited to 100 results per page. You can email questions, comments or a request to get a key for 7,200 calls an hour (120 calls per minute) to <a href=\"mailto:APIinfo@fec.gov\">APIinfo@fec.gov</a>. You can also ask questions and discuss the data in a community led [group](https://groups.google.com/forum/#!forum/fec-data).    The model definitions and schema are available at [/swagger](/swagger/). This is useful for making wrappers and exploring the data.    A few restrictions limit the way you can use FEC data. For example, you canâ€™t use contributor lists for commercial purposes or to solicit donations. [Learn more here](https://www.fec.gov/updates/sale-or-use-contributor-information/).    [Inspect our source code](https://github.com/fecgov/openFEC). We welcome issues and pull requests!    <p><br></p> <h2 class=\"title\" id=\"signup_head\">Sign up for an API key</h2> <div id=\"apidatagov_signup\">Loading signup form...</div>
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.LocalDate;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.CommitteeDetailJfcCommitteeInner;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * CommitteeDetail
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:02:12.812386-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class CommitteeDetail {
  public static final String SERIALIZED_NAME_AFFILIATED_COMMITTEE_NAME = "affiliated_committee_name";
  @SerializedName(SERIALIZED_NAME_AFFILIATED_COMMITTEE_NAME)
  private String affiliatedCommitteeName;

  public static final String SERIALIZED_NAME_CANDIDATE_IDS = "candidate_ids";
  @SerializedName(SERIALIZED_NAME_CANDIDATE_IDS)
  private List<String> candidateIds;

  public static final String SERIALIZED_NAME_CITY = "city";
  @SerializedName(SERIALIZED_NAME_CITY)
  private String city;

  public static final String SERIALIZED_NAME_COMMITTEE_ID = "committee_id";
  @SerializedName(SERIALIZED_NAME_COMMITTEE_ID)
  private String committeeId;

  public static final String SERIALIZED_NAME_COMMITTEE_TYPE = "committee_type";
  @SerializedName(SERIALIZED_NAME_COMMITTEE_TYPE)
  private String committeeType;

  public static final String SERIALIZED_NAME_COMMITTEE_TYPE_FULL = "committee_type_full";
  @SerializedName(SERIALIZED_NAME_COMMITTEE_TYPE_FULL)
  private String committeeTypeFull;

  public static final String SERIALIZED_NAME_CUSTODIAN_CITY = "custodian_city";
  @SerializedName(SERIALIZED_NAME_CUSTODIAN_CITY)
  private String custodianCity;

  public static final String SERIALIZED_NAME_CUSTODIAN_NAME1 = "custodian_name_1";
  @SerializedName(SERIALIZED_NAME_CUSTODIAN_NAME1)
  private String custodianName1;

  public static final String SERIALIZED_NAME_CUSTODIAN_NAME2 = "custodian_name_2";
  @SerializedName(SERIALIZED_NAME_CUSTODIAN_NAME2)
  private String custodianName2;

  public static final String SERIALIZED_NAME_CUSTODIAN_NAME_FULL = "custodian_name_full";
  @SerializedName(SERIALIZED_NAME_CUSTODIAN_NAME_FULL)
  private String custodianNameFull;

  public static final String SERIALIZED_NAME_CUSTODIAN_NAME_MIDDLE = "custodian_name_middle";
  @SerializedName(SERIALIZED_NAME_CUSTODIAN_NAME_MIDDLE)
  private String custodianNameMiddle;

  public static final String SERIALIZED_NAME_CUSTODIAN_NAME_PREFIX = "custodian_name_prefix";
  @SerializedName(SERIALIZED_NAME_CUSTODIAN_NAME_PREFIX)
  private String custodianNamePrefix;

  public static final String SERIALIZED_NAME_CUSTODIAN_NAME_SUFFIX = "custodian_name_suffix";
  @SerializedName(SERIALIZED_NAME_CUSTODIAN_NAME_SUFFIX)
  private String custodianNameSuffix;

  public static final String SERIALIZED_NAME_CUSTODIAN_NAME_TITLE = "custodian_name_title";
  @SerializedName(SERIALIZED_NAME_CUSTODIAN_NAME_TITLE)
  private String custodianNameTitle;

  public static final String SERIALIZED_NAME_CUSTODIAN_PHONE = "custodian_phone";
  @SerializedName(SERIALIZED_NAME_CUSTODIAN_PHONE)
  private String custodianPhone;

  public static final String SERIALIZED_NAME_CUSTODIAN_STATE = "custodian_state";
  @SerializedName(SERIALIZED_NAME_CUSTODIAN_STATE)
  private String custodianState;

  public static final String SERIALIZED_NAME_CUSTODIAN_STREET1 = "custodian_street_1";
  @SerializedName(SERIALIZED_NAME_CUSTODIAN_STREET1)
  private String custodianStreet1;

  public static final String SERIALIZED_NAME_CUSTODIAN_STREET2 = "custodian_street_2";
  @SerializedName(SERIALIZED_NAME_CUSTODIAN_STREET2)
  private String custodianStreet2;

  public static final String SERIALIZED_NAME_CUSTODIAN_ZIP = "custodian_zip";
  @SerializedName(SERIALIZED_NAME_CUSTODIAN_ZIP)
  private String custodianZip;

  public static final String SERIALIZED_NAME_CYCLES = "cycles";
  @SerializedName(SERIALIZED_NAME_CYCLES)
  private List<Integer> cycles;

  public static final String SERIALIZED_NAME_DESIGNATION = "designation";
  @SerializedName(SERIALIZED_NAME_DESIGNATION)
  private String designation;

  public static final String SERIALIZED_NAME_DESIGNATION_FULL = "designation_full";
  @SerializedName(SERIALIZED_NAME_DESIGNATION_FULL)
  private String designationFull;

  public static final String SERIALIZED_NAME_EMAIL = "email";
  @SerializedName(SERIALIZED_NAME_EMAIL)
  private String email;

  public static final String SERIALIZED_NAME_FAX = "fax";
  @SerializedName(SERIALIZED_NAME_FAX)
  private String fax;

  public static final String SERIALIZED_NAME_FILING_FREQUENCY = "filing_frequency";
  @SerializedName(SERIALIZED_NAME_FILING_FREQUENCY)
  private String filingFrequency;

  public static final String SERIALIZED_NAME_FIRST_F1_DATE = "first_f1_date";
  @SerializedName(SERIALIZED_NAME_FIRST_F1_DATE)
  private LocalDate firstF1Date;

  public static final String SERIALIZED_NAME_FIRST_FILE_DATE = "first_file_date";
  @SerializedName(SERIALIZED_NAME_FIRST_FILE_DATE)
  private LocalDate firstFileDate;

  public static final String SERIALIZED_NAME_FORM_TYPE = "form_type";
  @SerializedName(SERIALIZED_NAME_FORM_TYPE)
  private String formType;

  public static final String SERIALIZED_NAME_JFC_COMMITTEE = "jfc_committee";
  @SerializedName(SERIALIZED_NAME_JFC_COMMITTEE)
  private List<CommitteeDetailJfcCommitteeInner> jfcCommittee = new ArrayList<>();

  public static final String SERIALIZED_NAME_LAST_F1_DATE = "last_f1_date";
  @SerializedName(SERIALIZED_NAME_LAST_F1_DATE)
  private LocalDate lastF1Date;

  public static final String SERIALIZED_NAME_LAST_FILE_DATE = "last_file_date";
  @SerializedName(SERIALIZED_NAME_LAST_FILE_DATE)
  private LocalDate lastFileDate;

  public static final String SERIALIZED_NAME_LEADERSHIP_PAC = "leadership_pac";
  @SerializedName(SERIALIZED_NAME_LEADERSHIP_PAC)
  private String leadershipPac;

  public static final String SERIALIZED_NAME_LOBBYIST_REGISTRANT_PAC = "lobbyist_registrant_pac";
  @SerializedName(SERIALIZED_NAME_LOBBYIST_REGISTRANT_PAC)
  private String lobbyistRegistrantPac;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_ORGANIZATION_TYPE = "organization_type";
  @SerializedName(SERIALIZED_NAME_ORGANIZATION_TYPE)
  private String organizationType;

  public static final String SERIALIZED_NAME_ORGANIZATION_TYPE_FULL = "organization_type_full";
  @SerializedName(SERIALIZED_NAME_ORGANIZATION_TYPE_FULL)
  private String organizationTypeFull;

  public static final String SERIALIZED_NAME_PARTY = "party";
  @SerializedName(SERIALIZED_NAME_PARTY)
  private String party;

  public static final String SERIALIZED_NAME_PARTY_FULL = "party_full";
  @SerializedName(SERIALIZED_NAME_PARTY_FULL)
  private String partyFull;

  public static final String SERIALIZED_NAME_PARTY_TYPE = "party_type";
  @SerializedName(SERIALIZED_NAME_PARTY_TYPE)
  private String partyType;

  public static final String SERIALIZED_NAME_PARTY_TYPE_FULL = "party_type_full";
  @SerializedName(SERIALIZED_NAME_PARTY_TYPE_FULL)
  private String partyTypeFull;

  public static final String SERIALIZED_NAME_SPONSOR_CANDIDATE_IDS = "sponsor_candidate_ids";
  @SerializedName(SERIALIZED_NAME_SPONSOR_CANDIDATE_IDS)
  private List<String> sponsorCandidateIds;

  public static final String SERIALIZED_NAME_STATE = "state";
  @SerializedName(SERIALIZED_NAME_STATE)
  private String state;

  public static final String SERIALIZED_NAME_STATE_FULL = "state_full";
  @SerializedName(SERIALIZED_NAME_STATE_FULL)
  private String stateFull;

  public static final String SERIALIZED_NAME_STREET1 = "street_1";
  @SerializedName(SERIALIZED_NAME_STREET1)
  private String street1;

  public static final String SERIALIZED_NAME_STREET2 = "street_2";
  @SerializedName(SERIALIZED_NAME_STREET2)
  private String street2;

  public static final String SERIALIZED_NAME_TREASURER_CITY = "treasurer_city";
  @SerializedName(SERIALIZED_NAME_TREASURER_CITY)
  private String treasurerCity;

  public static final String SERIALIZED_NAME_TREASURER_NAME = "treasurer_name";
  @SerializedName(SERIALIZED_NAME_TREASURER_NAME)
  private String treasurerName;

  public static final String SERIALIZED_NAME_TREASURER_NAME1 = "treasurer_name_1";
  @SerializedName(SERIALIZED_NAME_TREASURER_NAME1)
  private String treasurerName1;

  public static final String SERIALIZED_NAME_TREASURER_NAME2 = "treasurer_name_2";
  @SerializedName(SERIALIZED_NAME_TREASURER_NAME2)
  private String treasurerName2;

  public static final String SERIALIZED_NAME_TREASURER_NAME_MIDDLE = "treasurer_name_middle";
  @SerializedName(SERIALIZED_NAME_TREASURER_NAME_MIDDLE)
  private String treasurerNameMiddle;

  public static final String SERIALIZED_NAME_TREASURER_NAME_PREFIX = "treasurer_name_prefix";
  @SerializedName(SERIALIZED_NAME_TREASURER_NAME_PREFIX)
  private String treasurerNamePrefix;

  public static final String SERIALIZED_NAME_TREASURER_NAME_SUFFIX = "treasurer_name_suffix";
  @SerializedName(SERIALIZED_NAME_TREASURER_NAME_SUFFIX)
  private String treasurerNameSuffix;

  public static final String SERIALIZED_NAME_TREASURER_NAME_TITLE = "treasurer_name_title";
  @SerializedName(SERIALIZED_NAME_TREASURER_NAME_TITLE)
  private String treasurerNameTitle;

  public static final String SERIALIZED_NAME_TREASURER_PHONE = "treasurer_phone";
  @SerializedName(SERIALIZED_NAME_TREASURER_PHONE)
  private String treasurerPhone;

  public static final String SERIALIZED_NAME_TREASURER_STATE = "treasurer_state";
  @SerializedName(SERIALIZED_NAME_TREASURER_STATE)
  private String treasurerState;

  public static final String SERIALIZED_NAME_TREASURER_STREET1 = "treasurer_street_1";
  @SerializedName(SERIALIZED_NAME_TREASURER_STREET1)
  private String treasurerStreet1;

  public static final String SERIALIZED_NAME_TREASURER_STREET2 = "treasurer_street_2";
  @SerializedName(SERIALIZED_NAME_TREASURER_STREET2)
  private String treasurerStreet2;

  public static final String SERIALIZED_NAME_TREASURER_ZIP = "treasurer_zip";
  @SerializedName(SERIALIZED_NAME_TREASURER_ZIP)
  private String treasurerZip;

  public static final String SERIALIZED_NAME_WEBSITE = "website";
  @SerializedName(SERIALIZED_NAME_WEBSITE)
  private String website;

  public static final String SERIALIZED_NAME_ZIP = "zip";
  @SerializedName(SERIALIZED_NAME_ZIP)
  private String zip;

  public CommitteeDetail() {
  }

  public CommitteeDetail affiliatedCommitteeName(String affiliatedCommitteeName) {
    this.affiliatedCommitteeName = affiliatedCommitteeName;
    return this;
  }

  /**
   *  Affiliated committee or connected organization 
   * @return affiliatedCommitteeName
   */
  @javax.annotation.Nullable
  public String getAffiliatedCommitteeName() {
    return affiliatedCommitteeName;
  }

  public void setAffiliatedCommitteeName(String affiliatedCommitteeName) {
    this.affiliatedCommitteeName = affiliatedCommitteeName;
  }


  public CommitteeDetail candidateIds(List<String> candidateIds) {
    this.candidateIds = candidateIds;
    return this;
  }

  public CommitteeDetail addCandidateIdsItem(String candidateIdsItem) {
    if (this.candidateIds == null) {
      this.candidateIds = new ArrayList<>();
    }
    this.candidateIds.add(candidateIdsItem);
    return this;
  }

  /**
   *  A unique identifier assigned to each candidate registered with the FEC. If a person runs for several offices, that person will have separate candidate IDs for each office. First character indicates office - [P]residential, [H]ouse, [S]enate]. Second character is the last digit of the two-year period the ID was created. Third and fourth is the candidate state. Presidential IDs don&#39;t have state. Fifth and sixth is the district when the candidate first ran. This does not change if the candidate/member&#39;s district changes during re-districting. Presidential IDs don&#39;t have districts. The rest is sequence. 
   * @return candidateIds
   */
  @javax.annotation.Nullable
  public List<String> getCandidateIds() {
    return candidateIds;
  }

  public void setCandidateIds(List<String> candidateIds) {
    this.candidateIds = candidateIds;
  }


  public CommitteeDetail city(String city) {
    this.city = city;
    return this;
  }

  /**
   *  City of committee as reported on the Form 1 
   * @return city
   */
  @javax.annotation.Nullable
  public String getCity() {
    return city;
  }

  public void setCity(String city) {
    this.city = city;
  }


  public CommitteeDetail committeeId(String committeeId) {
    this.committeeId = committeeId;
    return this;
  }

  /**
   *  A unique identifier assigned to each committee or filer registered with the FEC. In general committee id&#39;s begin with the letter C which is followed by eight digits. 
   * @return committeeId
   */
  @javax.annotation.Nonnull
  public String getCommitteeId() {
    return committeeId;
  }

  public void setCommitteeId(String committeeId) {
    this.committeeId = committeeId;
  }


  public CommitteeDetail committeeType(String committeeType) {
    this.committeeType = committeeType;
    return this;
  }

  /**
   * The one-letter type code of the organization:         - C communication cost         - D delegate         - E electioneering communication         - H House         - I independent expenditure filer (not a committee)         - N PAC - nonqualified         - O independent expenditure-only (super PACs)         - P presidential         - Q PAC - qualified         - S Senate         - U single candidate independent expenditure         - V PAC with non-contribution account, nonqualified         - W PAC with non-contribution account, qualified         - X party, nonqualified         - Y party, qualified         - Z national party non-federal account 
   * @return committeeType
   */
  @javax.annotation.Nullable
  public String getCommitteeType() {
    return committeeType;
  }

  public void setCommitteeType(String committeeType) {
    this.committeeType = committeeType;
  }


  public CommitteeDetail committeeTypeFull(String committeeTypeFull) {
    this.committeeTypeFull = committeeTypeFull;
    return this;
  }

  /**
   * The one-letter type code of the organization:         - C communication cost         - D delegate         - E electioneering communication         - H House         - I independent expenditure filer (not a committee)         - N PAC - nonqualified         - O independent expenditure-only (super PACs)         - P presidential         - Q PAC - qualified         - S Senate         - U single candidate independent expenditure         - V PAC with non-contribution account, nonqualified         - W PAC with non-contribution account, qualified         - X party, nonqualified         - Y party, qualified         - Z national party non-federal account 
   * @return committeeTypeFull
   */
  @javax.annotation.Nullable
  public String getCommitteeTypeFull() {
    return committeeTypeFull;
  }

  public void setCommitteeTypeFull(String committeeTypeFull) {
    this.committeeTypeFull = committeeTypeFull;
  }


  public CommitteeDetail custodianCity(String custodianCity) {
    this.custodianCity = custodianCity;
    return this;
  }

  /**
   *  City of committee custodian as reported on the Form 1 
   * @return custodianCity
   */
  @javax.annotation.Nullable
  public String getCustodianCity() {
    return custodianCity;
  }

  public void setCustodianCity(String custodianCity) {
    this.custodianCity = custodianCity;
  }


  public CommitteeDetail custodianName1(String custodianName1) {
    this.custodianName1 = custodianName1;
    return this;
  }

  /**
   *  Name 1 of committee custodian as reported on the Form 1 
   * @return custodianName1
   */
  @javax.annotation.Nullable
  public String getCustodianName1() {
    return custodianName1;
  }

  public void setCustodianName1(String custodianName1) {
    this.custodianName1 = custodianName1;
  }


  public CommitteeDetail custodianName2(String custodianName2) {
    this.custodianName2 = custodianName2;
    return this;
  }

  /**
   *  Name 2 of committee custodian as reported on the Form 1 
   * @return custodianName2
   */
  @javax.annotation.Nullable
  public String getCustodianName2() {
    return custodianName2;
  }

  public void setCustodianName2(String custodianName2) {
    this.custodianName2 = custodianName2;
  }


  public CommitteeDetail custodianNameFull(String custodianNameFull) {
    this.custodianNameFull = custodianNameFull;
    return this;
  }

  /**
   *  Full name of committee custodian as reported on the Form 1 
   * @return custodianNameFull
   */
  @javax.annotation.Nullable
  public String getCustodianNameFull() {
    return custodianNameFull;
  }

  public void setCustodianNameFull(String custodianNameFull) {
    this.custodianNameFull = custodianNameFull;
  }


  public CommitteeDetail custodianNameMiddle(String custodianNameMiddle) {
    this.custodianNameMiddle = custodianNameMiddle;
    return this;
  }

  /**
   *  Middle name of committee custodian as reported on the Form 1 
   * @return custodianNameMiddle
   */
  @javax.annotation.Nullable
  public String getCustodianNameMiddle() {
    return custodianNameMiddle;
  }

  public void setCustodianNameMiddle(String custodianNameMiddle) {
    this.custodianNameMiddle = custodianNameMiddle;
  }


  public CommitteeDetail custodianNamePrefix(String custodianNamePrefix) {
    this.custodianNamePrefix = custodianNamePrefix;
    return this;
  }

  /**
   *  Name prefix of committee custodian as reported on the Form 1 
   * @return custodianNamePrefix
   */
  @javax.annotation.Nullable
  public String getCustodianNamePrefix() {
    return custodianNamePrefix;
  }

  public void setCustodianNamePrefix(String custodianNamePrefix) {
    this.custodianNamePrefix = custodianNamePrefix;
  }


  public CommitteeDetail custodianNameSuffix(String custodianNameSuffix) {
    this.custodianNameSuffix = custodianNameSuffix;
    return this;
  }

  /**
   *  Suffix name of the committee custodian as reported on the Form 1 
   * @return custodianNameSuffix
   */
  @javax.annotation.Nullable
  public String getCustodianNameSuffix() {
    return custodianNameSuffix;
  }

  public void setCustodianNameSuffix(String custodianNameSuffix) {
    this.custodianNameSuffix = custodianNameSuffix;
  }


  public CommitteeDetail custodianNameTitle(String custodianNameTitle) {
    this.custodianNameTitle = custodianNameTitle;
    return this;
  }

  /**
   *  Name title of the committee custodian as reported on the Form 1 
   * @return custodianNameTitle
   */
  @javax.annotation.Nullable
  public String getCustodianNameTitle() {
    return custodianNameTitle;
  }

  public void setCustodianNameTitle(String custodianNameTitle) {
    this.custodianNameTitle = custodianNameTitle;
  }


  public CommitteeDetail custodianPhone(String custodianPhone) {
    this.custodianPhone = custodianPhone;
    return this;
  }

  /**
   *  Phone number of committee custodian as reported on the Form 1 
   * @return custodianPhone
   */
  @javax.annotation.Nullable
  public String getCustodianPhone() {
    return custodianPhone;
  }

  public void setCustodianPhone(String custodianPhone) {
    this.custodianPhone = custodianPhone;
  }


  public CommitteeDetail custodianState(String custodianState) {
    this.custodianState = custodianState;
    return this;
  }

  /**
   *  State of committee custodian as reported on the Form 1 
   * @return custodianState
   */
  @javax.annotation.Nullable
  public String getCustodianState() {
    return custodianState;
  }

  public void setCustodianState(String custodianState) {
    this.custodianState = custodianState;
  }


  public CommitteeDetail custodianStreet1(String custodianStreet1) {
    this.custodianStreet1 = custodianStreet1;
    return this;
  }

  /**
   *  Street address of the committee custodian as reported on the Form 1 
   * @return custodianStreet1
   */
  @javax.annotation.Nullable
  public String getCustodianStreet1() {
    return custodianStreet1;
  }

  public void setCustodianStreet1(String custodianStreet1) {
    this.custodianStreet1 = custodianStreet1;
  }


  public CommitteeDetail custodianStreet2(String custodianStreet2) {
    this.custodianStreet2 = custodianStreet2;
    return this;
  }

  /**
   *  Second line of the street address of the committee custodian as reported on the Form 1 
   * @return custodianStreet2
   */
  @javax.annotation.Nullable
  public String getCustodianStreet2() {
    return custodianStreet2;
  }

  public void setCustodianStreet2(String custodianStreet2) {
    this.custodianStreet2 = custodianStreet2;
  }


  public CommitteeDetail custodianZip(String custodianZip) {
    this.custodianZip = custodianZip;
    return this;
  }

  /**
   *  Zip code of the committee custodian as reported on the Form 1 
   * @return custodianZip
   */
  @javax.annotation.Nullable
  public String getCustodianZip() {
    return custodianZip;
  }

  public void setCustodianZip(String custodianZip) {
    this.custodianZip = custodianZip;
  }


  public CommitteeDetail cycles(List<Integer> cycles) {
    this.cycles = cycles;
    return this;
  }

  public CommitteeDetail addCyclesItem(Integer cyclesItem) {
    if (this.cycles == null) {
      this.cycles = new ArrayList<>();
    }
    this.cycles.add(cyclesItem);
    return this;
  }

  /**
   *  A two year election cycle that the committee was active- (after original registration date but before expiration date in Form 1s) The cycle begins with an odd year and is named for its ending, even year. 
   * @return cycles
   */
  @javax.annotation.Nullable
  public List<Integer> getCycles() {
    return cycles;
  }

  public void setCycles(List<Integer> cycles) {
    this.cycles = cycles;
  }


  public CommitteeDetail designation(String designation) {
    this.designation = designation;
    return this;
  }

  /**
   * The one-letter designation code of the organization:          - A authorized by a candidate          - J joint fundraising committee          - P principal campaign committee of a candidate          - U unauthorized          - B lobbyist/registrant PAC          - D leadership PAC 
   * @return designation
   */
  @javax.annotation.Nullable
  public String getDesignation() {
    return designation;
  }

  public void setDesignation(String designation) {
    this.designation = designation;
  }


  public CommitteeDetail designationFull(String designationFull) {
    this.designationFull = designationFull;
    return this;
  }

  /**
   * The one-letter designation code of the organization:          - A authorized by a candidate          - J joint fundraising committee          - P principal campaign committee of a candidate          - U unauthorized          - B lobbyist/registrant PAC          - D leadership PAC 
   * @return designationFull
   */
  @javax.annotation.Nullable
  public String getDesignationFull() {
    return designationFull;
  }

  public void setDesignationFull(String designationFull) {
    this.designationFull = designationFull;
  }


  public CommitteeDetail email(String email) {
    this.email = email;
    return this;
  }

  /**
   *  Email as reported on the Form 1 
   * @return email
   */
  @javax.annotation.Nullable
  public String getEmail() {
    return email;
  }

  public void setEmail(String email) {
    this.email = email;
  }


  public CommitteeDetail fax(String fax) {
    this.fax = fax;
    return this;
  }

  /**
   *  Fax as reported on the Form 1 
   * @return fax
   */
  @javax.annotation.Nullable
  public String getFax() {
    return fax;
  }

  public void setFax(String fax) {
    this.fax = fax;
  }


  public CommitteeDetail filingFrequency(String filingFrequency) {
    this.filingFrequency = filingFrequency;
    return this;
  }

  /**
   * The one-letter      code of the filing frequency:          - A Administratively terminated          - D Debt          - M Monthly filer          - Q Quarterly filer          - T Terminated          - W Waived 
   * @return filingFrequency
   */
  @javax.annotation.Nullable
  public String getFilingFrequency() {
    return filingFrequency;
  }

  public void setFilingFrequency(String filingFrequency) {
    this.filingFrequency = filingFrequency;
  }


  public CommitteeDetail firstF1Date(LocalDate firstF1Date) {
    this.firstF1Date = firstF1Date;
    return this;
  }

  /**
   * The day the FEC received the committee&#39;s first Form 1
   * @return firstF1Date
   */
  @javax.annotation.Nullable
  public LocalDate getFirstF1Date() {
    return firstF1Date;
  }

  public void setFirstF1Date(LocalDate firstF1Date) {
    this.firstF1Date = firstF1Date;
  }


  public CommitteeDetail firstFileDate(LocalDate firstFileDate) {
    this.firstFileDate = firstFileDate;
    return this;
  }

  /**
   * The day the FEC received the committee&#39;s first filing. This is usually a Form 1 committee registration.
   * @return firstFileDate
   */
  @javax.annotation.Nullable
  public LocalDate getFirstFileDate() {
    return firstFileDate;
  }

  public void setFirstFileDate(LocalDate firstFileDate) {
    this.firstFileDate = firstFileDate;
  }


  public CommitteeDetail formType(String formType) {
    this.formType = formType;
    return this;
  }

  /**
   * The form where the underlying data comes from, for example, Form 1 would appear as F1:     - F1   Statement of Organization     - F1M  Notification of Multicandidate Status     - F2   Statement of Candidacy     - F3   Report of Receipts and Disbursements for an Authorized Committee     - F3P  Report of Receipts and Disbursements by an Authorized Committee of a Candidate for     The Office of President or Vice President     - F3L  Report of Contributions Bundled by Lobbyists/Registrants and Lobbyist/Registrant PACs     - F3X  Report of Receipts and Disbursements for other than an Authorized Committee     - F4   Report of Receipts and Disbursements for a Committee or Organization Supporting a Nomination Convention     - F5   Report of Independent Expenditures Made and Contributions Received     - F6   48 Hour Notice of Contributions/Loans Received     - F7   Report of Communication Costs by Corporations and Membership Organizations     - F8   Debt Settlement Plan     - F9   24 Hour Notice of Disbursements for Electioneering Communications     - F13  Report of Donations Accepted for Inaugural Committee     - F99  Miscellaneous Text     - FRQ  Request for Additional Information 
   * @return formType
   */
  @javax.annotation.Nullable
  public String getFormType() {
    return formType;
  }

  public void setFormType(String formType) {
    this.formType = formType;
  }


  public CommitteeDetail jfcCommittee(List<CommitteeDetailJfcCommitteeInner> jfcCommittee) {
    this.jfcCommittee = jfcCommittee;
    return this;
  }

  public CommitteeDetail addJfcCommitteeItem(CommitteeDetailJfcCommitteeInner jfcCommitteeItem) {
    if (this.jfcCommittee == null) {
      this.jfcCommittee = new ArrayList<>();
    }
    this.jfcCommittee.add(jfcCommitteeItem);
    return this;
  }

  /**
   * Get jfcCommittee
   * @return jfcCommittee
   */
  @javax.annotation.Nullable
  public List<CommitteeDetailJfcCommitteeInner> getJfcCommittee() {
    return jfcCommittee;
  }

  public void setJfcCommittee(List<CommitteeDetailJfcCommitteeInner> jfcCommittee) {
    this.jfcCommittee = jfcCommittee;
  }


  public CommitteeDetail lastF1Date(LocalDate lastF1Date) {
    this.lastF1Date = lastF1Date;
    return this;
  }

  /**
   * The day the FEC received the committee&#39;s most recent Form 1
   * @return lastF1Date
   */
  @javax.annotation.Nullable
  public LocalDate getLastF1Date() {
    return lastF1Date;
  }

  public void setLastF1Date(LocalDate lastF1Date) {
    this.lastF1Date = lastF1Date;
  }


  public CommitteeDetail lastFileDate(LocalDate lastFileDate) {
    this.lastFileDate = lastFileDate;
    return this;
  }

  /**
   * The day the FEC received the committee&#39;s most recent filing
   * @return lastFileDate
   */
  @javax.annotation.Nullable
  public LocalDate getLastFileDate() {
    return lastFileDate;
  }

  public void setLastFileDate(LocalDate lastFileDate) {
    this.lastFileDate = lastFileDate;
  }


  public CommitteeDetail leadershipPac(String leadershipPac) {
    this.leadershipPac = leadershipPac;
    return this;
  }

  /**
   *  Indicates if the committee is a leadership PAC 
   * @return leadershipPac
   */
  @javax.annotation.Nullable
  public String getLeadershipPac() {
    return leadershipPac;
  }

  public void setLeadershipPac(String leadershipPac) {
    this.leadershipPac = leadershipPac;
  }


  public CommitteeDetail lobbyistRegistrantPac(String lobbyistRegistrantPac) {
    this.lobbyistRegistrantPac = lobbyistRegistrantPac;
    return this;
  }

  /**
   *  Indicates if the committee is a lobbyist registrant PAC 
   * @return lobbyistRegistrantPac
   */
  @javax.annotation.Nullable
  public String getLobbyistRegistrantPac() {
    return lobbyistRegistrantPac;
  }

  public void setLobbyistRegistrantPac(String lobbyistRegistrantPac) {
    this.lobbyistRegistrantPac = lobbyistRegistrantPac;
  }


  public CommitteeDetail name(String name) {
    this.name = name;
    return this;
  }

  /**
   * The name of the committee. If a committee changes its name,     the most recent name will be shown. Committee names are not unique. Use committee_id     for looking up records.
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public CommitteeDetail organizationType(String organizationType) {
    this.organizationType = organizationType;
    return this;
  }

  /**
   * The one-letter code for the kind for organization:         - C corporation         - L labor organization         - M membership organization         - T trade association         - V cooperative         - W corporation without capital stock 
   * @return organizationType
   */
  @javax.annotation.Nullable
  public String getOrganizationType() {
    return organizationType;
  }

  public void setOrganizationType(String organizationType) {
    this.organizationType = organizationType;
  }


  public CommitteeDetail organizationTypeFull(String organizationTypeFull) {
    this.organizationTypeFull = organizationTypeFull;
    return this;
  }

  /**
   * The one-letter code for the kind for organization:         - C corporation         - L labor organization         - M membership organization         - T trade association         - V cooperative         - W corporation without capital stock 
   * @return organizationTypeFull
   */
  @javax.annotation.Nullable
  public String getOrganizationTypeFull() {
    return organizationTypeFull;
  }

  public void setOrganizationTypeFull(String organizationTypeFull) {
    this.organizationTypeFull = organizationTypeFull;
  }


  public CommitteeDetail party(String party) {
    this.party = party;
    return this;
  }

  /**
   * Three-letter code for the party affiliated with a candidate or committee. For example, DEM for Democratic Party and REP for Republican Party.
   * @return party
   */
  @javax.annotation.Nullable
  public String getParty() {
    return party;
  }

  public void setParty(String party) {
    this.party = party;
  }


  public CommitteeDetail partyFull(String partyFull) {
    this.partyFull = partyFull;
    return this;
  }

  /**
   * Three-letter code for the party affiliated with a candidate or committee. For example, DEM for Democratic Party and REP for Republican Party.
   * @return partyFull
   */
  @javax.annotation.Nullable
  public String getPartyFull() {
    return partyFull;
  }

  public void setPartyFull(String partyFull) {
    this.partyFull = partyFull;
  }


  public CommitteeDetail partyType(String partyType) {
    this.partyType = partyType;
    return this;
  }

  /**
   *  Code for the type of party the committee is, only if applicable 
   * @return partyType
   */
  @javax.annotation.Nullable
  public String getPartyType() {
    return partyType;
  }

  public void setPartyType(String partyType) {
    this.partyType = partyType;
  }


  public CommitteeDetail partyTypeFull(String partyTypeFull) {
    this.partyTypeFull = partyTypeFull;
    return this;
  }

  /**
   *  Description of the type of party the committee is, only if applicable 
   * @return partyTypeFull
   */
  @javax.annotation.Nullable
  public String getPartyTypeFull() {
    return partyTypeFull;
  }

  public void setPartyTypeFull(String partyTypeFull) {
    this.partyTypeFull = partyTypeFull;
  }


  public CommitteeDetail sponsorCandidateIds(List<String> sponsorCandidateIds) {
    this.sponsorCandidateIds = sponsorCandidateIds;
    return this;
  }

  public CommitteeDetail addSponsorCandidateIdsItem(String sponsorCandidateIdsItem) {
    if (this.sponsorCandidateIds == null) {
      this.sponsorCandidateIds = new ArrayList<>();
    }
    this.sponsorCandidateIds.add(sponsorCandidateIdsItem);
    return this;
  }

  /**
   *  A unique identifier assigned to each candidate registered with the FEC. If a person runs for several offices, that person will have separate candidate IDs for each office. This is a filter for Leadership PAC sponsor. 
   * @return sponsorCandidateIds
   */
  @javax.annotation.Nullable
  public List<String> getSponsorCandidateIds() {
    return sponsorCandidateIds;
  }

  public void setSponsorCandidateIds(List<String> sponsorCandidateIds) {
    this.sponsorCandidateIds = sponsorCandidateIds;
  }


  public CommitteeDetail state(String state) {
    this.state = state;
    return this;
  }

  /**
   *  State of the committee&#39;s address as filed on the Form 1 
   * @return state
   */
  @javax.annotation.Nullable
  public String getState() {
    return state;
  }

  public void setState(String state) {
    this.state = state;
  }


  public CommitteeDetail stateFull(String stateFull) {
    this.stateFull = stateFull;
    return this;
  }

  /**
   *  State of committee as reported on the Form 1 
   * @return stateFull
   */
  @javax.annotation.Nullable
  public String getStateFull() {
    return stateFull;
  }

  public void setStateFull(String stateFull) {
    this.stateFull = stateFull;
  }


  public CommitteeDetail street1(String street1) {
    this.street1 = street1;
    return this;
  }

  /**
   *  Street address of committee as reported on the Form 1 
   * @return street1
   */
  @javax.annotation.Nullable
  public String getStreet1() {
    return street1;
  }

  public void setStreet1(String street1) {
    this.street1 = street1;
  }


  public CommitteeDetail street2(String street2) {
    this.street2 = street2;
    return this;
  }

  /**
   *  Second line of street address of committee as reported on the Form 1 
   * @return street2
   */
  @javax.annotation.Nullable
  public String getStreet2() {
    return street2;
  }

  public void setStreet2(String street2) {
    this.street2 = street2;
  }


  public CommitteeDetail treasurerCity(String treasurerCity) {
    this.treasurerCity = treasurerCity;
    return this;
  }

  /**
   *  City of committee treasurer as reported on the Form 1 
   * @return treasurerCity
   */
  @javax.annotation.Nullable
  public String getTreasurerCity() {
    return treasurerCity;
  }

  public void setTreasurerCity(String treasurerCity) {
    this.treasurerCity = treasurerCity;
  }


  public CommitteeDetail treasurerName(String treasurerName) {
    this.treasurerName = treasurerName;
    return this;
  }

  /**
   * Name of the Committee&#39;s treasurer. If multiple treasurers for the committee, the most recent treasurer will be shown.
   * @return treasurerName
   */
  @javax.annotation.Nullable
  public String getTreasurerName() {
    return treasurerName;
  }

  public void setTreasurerName(String treasurerName) {
    this.treasurerName = treasurerName;
  }


  public CommitteeDetail treasurerName1(String treasurerName1) {
    this.treasurerName1 = treasurerName1;
    return this;
  }

  /**
   *  Name 1 of committee treasurer as reported on the Form 1 
   * @return treasurerName1
   */
  @javax.annotation.Nullable
  public String getTreasurerName1() {
    return treasurerName1;
  }

  public void setTreasurerName1(String treasurerName1) {
    this.treasurerName1 = treasurerName1;
  }


  public CommitteeDetail treasurerName2(String treasurerName2) {
    this.treasurerName2 = treasurerName2;
    return this;
  }

  /**
   *  Name 2 of committee treasurer as reported on the Form 1 
   * @return treasurerName2
   */
  @javax.annotation.Nullable
  public String getTreasurerName2() {
    return treasurerName2;
  }

  public void setTreasurerName2(String treasurerName2) {
    this.treasurerName2 = treasurerName2;
  }


  public CommitteeDetail treasurerNameMiddle(String treasurerNameMiddle) {
    this.treasurerNameMiddle = treasurerNameMiddle;
    return this;
  }

  /**
   *  Middle name of committee treasurer as reported on the Form 1 
   * @return treasurerNameMiddle
   */
  @javax.annotation.Nullable
  public String getTreasurerNameMiddle() {
    return treasurerNameMiddle;
  }

  public void setTreasurerNameMiddle(String treasurerNameMiddle) {
    this.treasurerNameMiddle = treasurerNameMiddle;
  }


  public CommitteeDetail treasurerNamePrefix(String treasurerNamePrefix) {
    this.treasurerNamePrefix = treasurerNamePrefix;
    return this;
  }

  /**
   *  Name Prefix of committee treasurer as reported on the Form 1 
   * @return treasurerNamePrefix
   */
  @javax.annotation.Nullable
  public String getTreasurerNamePrefix() {
    return treasurerNamePrefix;
  }

  public void setTreasurerNamePrefix(String treasurerNamePrefix) {
    this.treasurerNamePrefix = treasurerNamePrefix;
  }


  public CommitteeDetail treasurerNameSuffix(String treasurerNameSuffix) {
    this.treasurerNameSuffix = treasurerNameSuffix;
    return this;
  }

  /**
   *  Name suffix of committee treasurer as reported on the Form 1 
   * @return treasurerNameSuffix
   */
  @javax.annotation.Nullable
  public String getTreasurerNameSuffix() {
    return treasurerNameSuffix;
  }

  public void setTreasurerNameSuffix(String treasurerNameSuffix) {
    this.treasurerNameSuffix = treasurerNameSuffix;
  }


  public CommitteeDetail treasurerNameTitle(String treasurerNameTitle) {
    this.treasurerNameTitle = treasurerNameTitle;
    return this;
  }

  /**
   *  Name title of committee treasurer as reported on the Form 1 
   * @return treasurerNameTitle
   */
  @javax.annotation.Nullable
  public String getTreasurerNameTitle() {
    return treasurerNameTitle;
  }

  public void setTreasurerNameTitle(String treasurerNameTitle) {
    this.treasurerNameTitle = treasurerNameTitle;
  }


  public CommitteeDetail treasurerPhone(String treasurerPhone) {
    this.treasurerPhone = treasurerPhone;
    return this;
  }

  /**
   *  Phone of committee treasurer as reported on the Form 1 
   * @return treasurerPhone
   */
  @javax.annotation.Nullable
  public String getTreasurerPhone() {
    return treasurerPhone;
  }

  public void setTreasurerPhone(String treasurerPhone) {
    this.treasurerPhone = treasurerPhone;
  }


  public CommitteeDetail treasurerState(String treasurerState) {
    this.treasurerState = treasurerState;
    return this;
  }

  /**
   *  State of committee treasurer as reported on the Form 1 
   * @return treasurerState
   */
  @javax.annotation.Nullable
  public String getTreasurerState() {
    return treasurerState;
  }

  public void setTreasurerState(String treasurerState) {
    this.treasurerState = treasurerState;
  }


  public CommitteeDetail treasurerStreet1(String treasurerStreet1) {
    this.treasurerStreet1 = treasurerStreet1;
    return this;
  }

  /**
   *  Street of committee treasurer as reported on the Form 1 
   * @return treasurerStreet1
   */
  @javax.annotation.Nullable
  public String getTreasurerStreet1() {
    return treasurerStreet1;
  }

  public void setTreasurerStreet1(String treasurerStreet1) {
    this.treasurerStreet1 = treasurerStreet1;
  }


  public CommitteeDetail treasurerStreet2(String treasurerStreet2) {
    this.treasurerStreet2 = treasurerStreet2;
    return this;
  }

  /**
   *  Second line of the street of committee treasurer as reported on the Form 1 
   * @return treasurerStreet2
   */
  @javax.annotation.Nullable
  public String getTreasurerStreet2() {
    return treasurerStreet2;
  }

  public void setTreasurerStreet2(String treasurerStreet2) {
    this.treasurerStreet2 = treasurerStreet2;
  }


  public CommitteeDetail treasurerZip(String treasurerZip) {
    this.treasurerZip = treasurerZip;
    return this;
  }

  /**
   *  Zip code of committee treasurer as reported on the Form 1 
   * @return treasurerZip
   */
  @javax.annotation.Nullable
  public String getTreasurerZip() {
    return treasurerZip;
  }

  public void setTreasurerZip(String treasurerZip) {
    this.treasurerZip = treasurerZip;
  }


  public CommitteeDetail website(String website) {
    this.website = website;
    return this;
  }

  /**
   *  Website url as reported on the Form 1 
   * @return website
   */
  @javax.annotation.Nullable
  public String getWebsite() {
    return website;
  }

  public void setWebsite(String website) {
    this.website = website;
  }


  public CommitteeDetail zip(String zip) {
    this.zip = zip;
    return this;
  }

  /**
   *  Zip code of committee as reported on the Form 1 
   * @return zip
   */
  @javax.annotation.Nullable
  public String getZip() {
    return zip;
  }

  public void setZip(String zip) {
    this.zip = zip;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CommitteeDetail committeeDetail = (CommitteeDetail) o;
    return Objects.equals(this.affiliatedCommitteeName, committeeDetail.affiliatedCommitteeName) &&
        Objects.equals(this.candidateIds, committeeDetail.candidateIds) &&
        Objects.equals(this.city, committeeDetail.city) &&
        Objects.equals(this.committeeId, committeeDetail.committeeId) &&
        Objects.equals(this.committeeType, committeeDetail.committeeType) &&
        Objects.equals(this.committeeTypeFull, committeeDetail.committeeTypeFull) &&
        Objects.equals(this.custodianCity, committeeDetail.custodianCity) &&
        Objects.equals(this.custodianName1, committeeDetail.custodianName1) &&
        Objects.equals(this.custodianName2, committeeDetail.custodianName2) &&
        Objects.equals(this.custodianNameFull, committeeDetail.custodianNameFull) &&
        Objects.equals(this.custodianNameMiddle, committeeDetail.custodianNameMiddle) &&
        Objects.equals(this.custodianNamePrefix, committeeDetail.custodianNamePrefix) &&
        Objects.equals(this.custodianNameSuffix, committeeDetail.custodianNameSuffix) &&
        Objects.equals(this.custodianNameTitle, committeeDetail.custodianNameTitle) &&
        Objects.equals(this.custodianPhone, committeeDetail.custodianPhone) &&
        Objects.equals(this.custodianState, committeeDetail.custodianState) &&
        Objects.equals(this.custodianStreet1, committeeDetail.custodianStreet1) &&
        Objects.equals(this.custodianStreet2, committeeDetail.custodianStreet2) &&
        Objects.equals(this.custodianZip, committeeDetail.custodianZip) &&
        Objects.equals(this.cycles, committeeDetail.cycles) &&
        Objects.equals(this.designation, committeeDetail.designation) &&
        Objects.equals(this.designationFull, committeeDetail.designationFull) &&
        Objects.equals(this.email, committeeDetail.email) &&
        Objects.equals(this.fax, committeeDetail.fax) &&
        Objects.equals(this.filingFrequency, committeeDetail.filingFrequency) &&
        Objects.equals(this.firstF1Date, committeeDetail.firstF1Date) &&
        Objects.equals(this.firstFileDate, committeeDetail.firstFileDate) &&
        Objects.equals(this.formType, committeeDetail.formType) &&
        Objects.equals(this.jfcCommittee, committeeDetail.jfcCommittee) &&
        Objects.equals(this.lastF1Date, committeeDetail.lastF1Date) &&
        Objects.equals(this.lastFileDate, committeeDetail.lastFileDate) &&
        Objects.equals(this.leadershipPac, committeeDetail.leadershipPac) &&
        Objects.equals(this.lobbyistRegistrantPac, committeeDetail.lobbyistRegistrantPac) &&
        Objects.equals(this.name, committeeDetail.name) &&
        Objects.equals(this.organizationType, committeeDetail.organizationType) &&
        Objects.equals(this.organizationTypeFull, committeeDetail.organizationTypeFull) &&
        Objects.equals(this.party, committeeDetail.party) &&
        Objects.equals(this.partyFull, committeeDetail.partyFull) &&
        Objects.equals(this.partyType, committeeDetail.partyType) &&
        Objects.equals(this.partyTypeFull, committeeDetail.partyTypeFull) &&
        Objects.equals(this.sponsorCandidateIds, committeeDetail.sponsorCandidateIds) &&
        Objects.equals(this.state, committeeDetail.state) &&
        Objects.equals(this.stateFull, committeeDetail.stateFull) &&
        Objects.equals(this.street1, committeeDetail.street1) &&
        Objects.equals(this.street2, committeeDetail.street2) &&
        Objects.equals(this.treasurerCity, committeeDetail.treasurerCity) &&
        Objects.equals(this.treasurerName, committeeDetail.treasurerName) &&
        Objects.equals(this.treasurerName1, committeeDetail.treasurerName1) &&
        Objects.equals(this.treasurerName2, committeeDetail.treasurerName2) &&
        Objects.equals(this.treasurerNameMiddle, committeeDetail.treasurerNameMiddle) &&
        Objects.equals(this.treasurerNamePrefix, committeeDetail.treasurerNamePrefix) &&
        Objects.equals(this.treasurerNameSuffix, committeeDetail.treasurerNameSuffix) &&
        Objects.equals(this.treasurerNameTitle, committeeDetail.treasurerNameTitle) &&
        Objects.equals(this.treasurerPhone, committeeDetail.treasurerPhone) &&
        Objects.equals(this.treasurerState, committeeDetail.treasurerState) &&
        Objects.equals(this.treasurerStreet1, committeeDetail.treasurerStreet1) &&
        Objects.equals(this.treasurerStreet2, committeeDetail.treasurerStreet2) &&
        Objects.equals(this.treasurerZip, committeeDetail.treasurerZip) &&
        Objects.equals(this.website, committeeDetail.website) &&
        Objects.equals(this.zip, committeeDetail.zip);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(affiliatedCommitteeName, candidateIds, city, committeeId, committeeType, committeeTypeFull, custodianCity, custodianName1, custodianName2, custodianNameFull, custodianNameMiddle, custodianNamePrefix, custodianNameSuffix, custodianNameTitle, custodianPhone, custodianState, custodianStreet1, custodianStreet2, custodianZip, cycles, designation, designationFull, email, fax, filingFrequency, firstF1Date, firstFileDate, formType, jfcCommittee, lastF1Date, lastFileDate, leadershipPac, lobbyistRegistrantPac, name, organizationType, organizationTypeFull, party, partyFull, partyType, partyTypeFull, sponsorCandidateIds, state, stateFull, street1, street2, treasurerCity, treasurerName, treasurerName1, treasurerName2, treasurerNameMiddle, treasurerNamePrefix, treasurerNameSuffix, treasurerNameTitle, treasurerPhone, treasurerState, treasurerStreet1, treasurerStreet2, treasurerZip, website, zip);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CommitteeDetail {\n");
    sb.append("    affiliatedCommitteeName: ").append(toIndentedString(affiliatedCommitteeName)).append("\n");
    sb.append("    candidateIds: ").append(toIndentedString(candidateIds)).append("\n");
    sb.append("    city: ").append(toIndentedString(city)).append("\n");
    sb.append("    committeeId: ").append(toIndentedString(committeeId)).append("\n");
    sb.append("    committeeType: ").append(toIndentedString(committeeType)).append("\n");
    sb.append("    committeeTypeFull: ").append(toIndentedString(committeeTypeFull)).append("\n");
    sb.append("    custodianCity: ").append(toIndentedString(custodianCity)).append("\n");
    sb.append("    custodianName1: ").append(toIndentedString(custodianName1)).append("\n");
    sb.append("    custodianName2: ").append(toIndentedString(custodianName2)).append("\n");
    sb.append("    custodianNameFull: ").append(toIndentedString(custodianNameFull)).append("\n");
    sb.append("    custodianNameMiddle: ").append(toIndentedString(custodianNameMiddle)).append("\n");
    sb.append("    custodianNamePrefix: ").append(toIndentedString(custodianNamePrefix)).append("\n");
    sb.append("    custodianNameSuffix: ").append(toIndentedString(custodianNameSuffix)).append("\n");
    sb.append("    custodianNameTitle: ").append(toIndentedString(custodianNameTitle)).append("\n");
    sb.append("    custodianPhone: ").append(toIndentedString(custodianPhone)).append("\n");
    sb.append("    custodianState: ").append(toIndentedString(custodianState)).append("\n");
    sb.append("    custodianStreet1: ").append(toIndentedString(custodianStreet1)).append("\n");
    sb.append("    custodianStreet2: ").append(toIndentedString(custodianStreet2)).append("\n");
    sb.append("    custodianZip: ").append(toIndentedString(custodianZip)).append("\n");
    sb.append("    cycles: ").append(toIndentedString(cycles)).append("\n");
    sb.append("    designation: ").append(toIndentedString(designation)).append("\n");
    sb.append("    designationFull: ").append(toIndentedString(designationFull)).append("\n");
    sb.append("    email: ").append(toIndentedString(email)).append("\n");
    sb.append("    fax: ").append(toIndentedString(fax)).append("\n");
    sb.append("    filingFrequency: ").append(toIndentedString(filingFrequency)).append("\n");
    sb.append("    firstF1Date: ").append(toIndentedString(firstF1Date)).append("\n");
    sb.append("    firstFileDate: ").append(toIndentedString(firstFileDate)).append("\n");
    sb.append("    formType: ").append(toIndentedString(formType)).append("\n");
    sb.append("    jfcCommittee: ").append(toIndentedString(jfcCommittee)).append("\n");
    sb.append("    lastF1Date: ").append(toIndentedString(lastF1Date)).append("\n");
    sb.append("    lastFileDate: ").append(toIndentedString(lastFileDate)).append("\n");
    sb.append("    leadershipPac: ").append(toIndentedString(leadershipPac)).append("\n");
    sb.append("    lobbyistRegistrantPac: ").append(toIndentedString(lobbyistRegistrantPac)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    organizationType: ").append(toIndentedString(organizationType)).append("\n");
    sb.append("    organizationTypeFull: ").append(toIndentedString(organizationTypeFull)).append("\n");
    sb.append("    party: ").append(toIndentedString(party)).append("\n");
    sb.append("    partyFull: ").append(toIndentedString(partyFull)).append("\n");
    sb.append("    partyType: ").append(toIndentedString(partyType)).append("\n");
    sb.append("    partyTypeFull: ").append(toIndentedString(partyTypeFull)).append("\n");
    sb.append("    sponsorCandidateIds: ").append(toIndentedString(sponsorCandidateIds)).append("\n");
    sb.append("    state: ").append(toIndentedString(state)).append("\n");
    sb.append("    stateFull: ").append(toIndentedString(stateFull)).append("\n");
    sb.append("    street1: ").append(toIndentedString(street1)).append("\n");
    sb.append("    street2: ").append(toIndentedString(street2)).append("\n");
    sb.append("    treasurerCity: ").append(toIndentedString(treasurerCity)).append("\n");
    sb.append("    treasurerName: ").append(toIndentedString(treasurerName)).append("\n");
    sb.append("    treasurerName1: ").append(toIndentedString(treasurerName1)).append("\n");
    sb.append("    treasurerName2: ").append(toIndentedString(treasurerName2)).append("\n");
    sb.append("    treasurerNameMiddle: ").append(toIndentedString(treasurerNameMiddle)).append("\n");
    sb.append("    treasurerNamePrefix: ").append(toIndentedString(treasurerNamePrefix)).append("\n");
    sb.append("    treasurerNameSuffix: ").append(toIndentedString(treasurerNameSuffix)).append("\n");
    sb.append("    treasurerNameTitle: ").append(toIndentedString(treasurerNameTitle)).append("\n");
    sb.append("    treasurerPhone: ").append(toIndentedString(treasurerPhone)).append("\n");
    sb.append("    treasurerState: ").append(toIndentedString(treasurerState)).append("\n");
    sb.append("    treasurerStreet1: ").append(toIndentedString(treasurerStreet1)).append("\n");
    sb.append("    treasurerStreet2: ").append(toIndentedString(treasurerStreet2)).append("\n");
    sb.append("    treasurerZip: ").append(toIndentedString(treasurerZip)).append("\n");
    sb.append("    website: ").append(toIndentedString(website)).append("\n");
    sb.append("    zip: ").append(toIndentedString(zip)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("affiliated_committee_name");
    openapiFields.add("candidate_ids");
    openapiFields.add("city");
    openapiFields.add("committee_id");
    openapiFields.add("committee_type");
    openapiFields.add("committee_type_full");
    openapiFields.add("custodian_city");
    openapiFields.add("custodian_name_1");
    openapiFields.add("custodian_name_2");
    openapiFields.add("custodian_name_full");
    openapiFields.add("custodian_name_middle");
    openapiFields.add("custodian_name_prefix");
    openapiFields.add("custodian_name_suffix");
    openapiFields.add("custodian_name_title");
    openapiFields.add("custodian_phone");
    openapiFields.add("custodian_state");
    openapiFields.add("custodian_street_1");
    openapiFields.add("custodian_street_2");
    openapiFields.add("custodian_zip");
    openapiFields.add("cycles");
    openapiFields.add("designation");
    openapiFields.add("designation_full");
    openapiFields.add("email");
    openapiFields.add("fax");
    openapiFields.add("filing_frequency");
    openapiFields.add("first_f1_date");
    openapiFields.add("first_file_date");
    openapiFields.add("form_type");
    openapiFields.add("jfc_committee");
    openapiFields.add("last_f1_date");
    openapiFields.add("last_file_date");
    openapiFields.add("leadership_pac");
    openapiFields.add("lobbyist_registrant_pac");
    openapiFields.add("name");
    openapiFields.add("organization_type");
    openapiFields.add("organization_type_full");
    openapiFields.add("party");
    openapiFields.add("party_full");
    openapiFields.add("party_type");
    openapiFields.add("party_type_full");
    openapiFields.add("sponsor_candidate_ids");
    openapiFields.add("state");
    openapiFields.add("state_full");
    openapiFields.add("street_1");
    openapiFields.add("street_2");
    openapiFields.add("treasurer_city");
    openapiFields.add("treasurer_name");
    openapiFields.add("treasurer_name_1");
    openapiFields.add("treasurer_name_2");
    openapiFields.add("treasurer_name_middle");
    openapiFields.add("treasurer_name_prefix");
    openapiFields.add("treasurer_name_suffix");
    openapiFields.add("treasurer_name_title");
    openapiFields.add("treasurer_phone");
    openapiFields.add("treasurer_state");
    openapiFields.add("treasurer_street_1");
    openapiFields.add("treasurer_street_2");
    openapiFields.add("treasurer_zip");
    openapiFields.add("website");
    openapiFields.add("zip");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("committee_id");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to CommitteeDetail
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!CommitteeDetail.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CommitteeDetail is not found in the empty JSON string", CommitteeDetail.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!CommitteeDetail.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CommitteeDetail` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : CommitteeDetail.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("affiliated_committee_name") != null && !jsonObj.get("affiliated_committee_name").isJsonNull()) && !jsonObj.get("affiliated_committee_name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `affiliated_committee_name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("affiliated_committee_name").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("candidate_ids") != null && !jsonObj.get("candidate_ids").isJsonNull() && !jsonObj.get("candidate_ids").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `candidate_ids` to be an array in the JSON string but got `%s`", jsonObj.get("candidate_ids").toString()));
      }
      if ((jsonObj.get("city") != null && !jsonObj.get("city").isJsonNull()) && !jsonObj.get("city").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `city` to be a primitive type in the JSON string but got `%s`", jsonObj.get("city").toString()));
      }
      if (!jsonObj.get("committee_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `committee_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("committee_id").toString()));
      }
      if ((jsonObj.get("committee_type") != null && !jsonObj.get("committee_type").isJsonNull()) && !jsonObj.get("committee_type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `committee_type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("committee_type").toString()));
      }
      if ((jsonObj.get("committee_type_full") != null && !jsonObj.get("committee_type_full").isJsonNull()) && !jsonObj.get("committee_type_full").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `committee_type_full` to be a primitive type in the JSON string but got `%s`", jsonObj.get("committee_type_full").toString()));
      }
      if ((jsonObj.get("custodian_city") != null && !jsonObj.get("custodian_city").isJsonNull()) && !jsonObj.get("custodian_city").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `custodian_city` to be a primitive type in the JSON string but got `%s`", jsonObj.get("custodian_city").toString()));
      }
      if ((jsonObj.get("custodian_name_1") != null && !jsonObj.get("custodian_name_1").isJsonNull()) && !jsonObj.get("custodian_name_1").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `custodian_name_1` to be a primitive type in the JSON string but got `%s`", jsonObj.get("custodian_name_1").toString()));
      }
      if ((jsonObj.get("custodian_name_2") != null && !jsonObj.get("custodian_name_2").isJsonNull()) && !jsonObj.get("custodian_name_2").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `custodian_name_2` to be a primitive type in the JSON string but got `%s`", jsonObj.get("custodian_name_2").toString()));
      }
      if ((jsonObj.get("custodian_name_full") != null && !jsonObj.get("custodian_name_full").isJsonNull()) && !jsonObj.get("custodian_name_full").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `custodian_name_full` to be a primitive type in the JSON string but got `%s`", jsonObj.get("custodian_name_full").toString()));
      }
      if ((jsonObj.get("custodian_name_middle") != null && !jsonObj.get("custodian_name_middle").isJsonNull()) && !jsonObj.get("custodian_name_middle").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `custodian_name_middle` to be a primitive type in the JSON string but got `%s`", jsonObj.get("custodian_name_middle").toString()));
      }
      if ((jsonObj.get("custodian_name_prefix") != null && !jsonObj.get("custodian_name_prefix").isJsonNull()) && !jsonObj.get("custodian_name_prefix").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `custodian_name_prefix` to be a primitive type in the JSON string but got `%s`", jsonObj.get("custodian_name_prefix").toString()));
      }
      if ((jsonObj.get("custodian_name_suffix") != null && !jsonObj.get("custodian_name_suffix").isJsonNull()) && !jsonObj.get("custodian_name_suffix").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `custodian_name_suffix` to be a primitive type in the JSON string but got `%s`", jsonObj.get("custodian_name_suffix").toString()));
      }
      if ((jsonObj.get("custodian_name_title") != null && !jsonObj.get("custodian_name_title").isJsonNull()) && !jsonObj.get("custodian_name_title").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `custodian_name_title` to be a primitive type in the JSON string but got `%s`", jsonObj.get("custodian_name_title").toString()));
      }
      if ((jsonObj.get("custodian_phone") != null && !jsonObj.get("custodian_phone").isJsonNull()) && !jsonObj.get("custodian_phone").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `custodian_phone` to be a primitive type in the JSON string but got `%s`", jsonObj.get("custodian_phone").toString()));
      }
      if ((jsonObj.get("custodian_state") != null && !jsonObj.get("custodian_state").isJsonNull()) && !jsonObj.get("custodian_state").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `custodian_state` to be a primitive type in the JSON string but got `%s`", jsonObj.get("custodian_state").toString()));
      }
      if ((jsonObj.get("custodian_street_1") != null && !jsonObj.get("custodian_street_1").isJsonNull()) && !jsonObj.get("custodian_street_1").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `custodian_street_1` to be a primitive type in the JSON string but got `%s`", jsonObj.get("custodian_street_1").toString()));
      }
      if ((jsonObj.get("custodian_street_2") != null && !jsonObj.get("custodian_street_2").isJsonNull()) && !jsonObj.get("custodian_street_2").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `custodian_street_2` to be a primitive type in the JSON string but got `%s`", jsonObj.get("custodian_street_2").toString()));
      }
      if ((jsonObj.get("custodian_zip") != null && !jsonObj.get("custodian_zip").isJsonNull()) && !jsonObj.get("custodian_zip").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `custodian_zip` to be a primitive type in the JSON string but got `%s`", jsonObj.get("custodian_zip").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("cycles") != null && !jsonObj.get("cycles").isJsonNull() && !jsonObj.get("cycles").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `cycles` to be an array in the JSON string but got `%s`", jsonObj.get("cycles").toString()));
      }
      if ((jsonObj.get("designation") != null && !jsonObj.get("designation").isJsonNull()) && !jsonObj.get("designation").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `designation` to be a primitive type in the JSON string but got `%s`", jsonObj.get("designation").toString()));
      }
      if ((jsonObj.get("designation_full") != null && !jsonObj.get("designation_full").isJsonNull()) && !jsonObj.get("designation_full").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `designation_full` to be a primitive type in the JSON string but got `%s`", jsonObj.get("designation_full").toString()));
      }
      if ((jsonObj.get("email") != null && !jsonObj.get("email").isJsonNull()) && !jsonObj.get("email").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `email` to be a primitive type in the JSON string but got `%s`", jsonObj.get("email").toString()));
      }
      if ((jsonObj.get("fax") != null && !jsonObj.get("fax").isJsonNull()) && !jsonObj.get("fax").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `fax` to be a primitive type in the JSON string but got `%s`", jsonObj.get("fax").toString()));
      }
      if ((jsonObj.get("filing_frequency") != null && !jsonObj.get("filing_frequency").isJsonNull()) && !jsonObj.get("filing_frequency").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `filing_frequency` to be a primitive type in the JSON string but got `%s`", jsonObj.get("filing_frequency").toString()));
      }
      if ((jsonObj.get("form_type") != null && !jsonObj.get("form_type").isJsonNull()) && !jsonObj.get("form_type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `form_type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("form_type").toString()));
      }
      if (jsonObj.get("jfc_committee") != null && !jsonObj.get("jfc_committee").isJsonNull()) {
        JsonArray jsonArrayjfcCommittee = jsonObj.getAsJsonArray("jfc_committee");
        if (jsonArrayjfcCommittee != null) {
          // ensure the json data is an array
          if (!jsonObj.get("jfc_committee").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `jfc_committee` to be an array in the JSON string but got `%s`", jsonObj.get("jfc_committee").toString()));
          }

          // validate the optional field `jfc_committee` (array)
          for (int i = 0; i < jsonArrayjfcCommittee.size(); i++) {
            CommitteeDetailJfcCommitteeInner.validateJsonElement(jsonArrayjfcCommittee.get(i));
          };
        }
      }
      if ((jsonObj.get("leadership_pac") != null && !jsonObj.get("leadership_pac").isJsonNull()) && !jsonObj.get("leadership_pac").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `leadership_pac` to be a primitive type in the JSON string but got `%s`", jsonObj.get("leadership_pac").toString()));
      }
      if ((jsonObj.get("lobbyist_registrant_pac") != null && !jsonObj.get("lobbyist_registrant_pac").isJsonNull()) && !jsonObj.get("lobbyist_registrant_pac").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `lobbyist_registrant_pac` to be a primitive type in the JSON string but got `%s`", jsonObj.get("lobbyist_registrant_pac").toString()));
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if ((jsonObj.get("organization_type") != null && !jsonObj.get("organization_type").isJsonNull()) && !jsonObj.get("organization_type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `organization_type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("organization_type").toString()));
      }
      if ((jsonObj.get("organization_type_full") != null && !jsonObj.get("organization_type_full").isJsonNull()) && !jsonObj.get("organization_type_full").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `organization_type_full` to be a primitive type in the JSON string but got `%s`", jsonObj.get("organization_type_full").toString()));
      }
      if ((jsonObj.get("party") != null && !jsonObj.get("party").isJsonNull()) && !jsonObj.get("party").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `party` to be a primitive type in the JSON string but got `%s`", jsonObj.get("party").toString()));
      }
      if ((jsonObj.get("party_full") != null && !jsonObj.get("party_full").isJsonNull()) && !jsonObj.get("party_full").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `party_full` to be a primitive type in the JSON string but got `%s`", jsonObj.get("party_full").toString()));
      }
      if ((jsonObj.get("party_type") != null && !jsonObj.get("party_type").isJsonNull()) && !jsonObj.get("party_type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `party_type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("party_type").toString()));
      }
      if ((jsonObj.get("party_type_full") != null && !jsonObj.get("party_type_full").isJsonNull()) && !jsonObj.get("party_type_full").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `party_type_full` to be a primitive type in the JSON string but got `%s`", jsonObj.get("party_type_full").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("sponsor_candidate_ids") != null && !jsonObj.get("sponsor_candidate_ids").isJsonNull() && !jsonObj.get("sponsor_candidate_ids").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `sponsor_candidate_ids` to be an array in the JSON string but got `%s`", jsonObj.get("sponsor_candidate_ids").toString()));
      }
      if ((jsonObj.get("state") != null && !jsonObj.get("state").isJsonNull()) && !jsonObj.get("state").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `state` to be a primitive type in the JSON string but got `%s`", jsonObj.get("state").toString()));
      }
      if ((jsonObj.get("state_full") != null && !jsonObj.get("state_full").isJsonNull()) && !jsonObj.get("state_full").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `state_full` to be a primitive type in the JSON string but got `%s`", jsonObj.get("state_full").toString()));
      }
      if ((jsonObj.get("street_1") != null && !jsonObj.get("street_1").isJsonNull()) && !jsonObj.get("street_1").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `street_1` to be a primitive type in the JSON string but got `%s`", jsonObj.get("street_1").toString()));
      }
      if ((jsonObj.get("street_2") != null && !jsonObj.get("street_2").isJsonNull()) && !jsonObj.get("street_2").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `street_2` to be a primitive type in the JSON string but got `%s`", jsonObj.get("street_2").toString()));
      }
      if ((jsonObj.get("treasurer_city") != null && !jsonObj.get("treasurer_city").isJsonNull()) && !jsonObj.get("treasurer_city").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `treasurer_city` to be a primitive type in the JSON string but got `%s`", jsonObj.get("treasurer_city").toString()));
      }
      if ((jsonObj.get("treasurer_name") != null && !jsonObj.get("treasurer_name").isJsonNull()) && !jsonObj.get("treasurer_name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `treasurer_name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("treasurer_name").toString()));
      }
      if ((jsonObj.get("treasurer_name_1") != null && !jsonObj.get("treasurer_name_1").isJsonNull()) && !jsonObj.get("treasurer_name_1").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `treasurer_name_1` to be a primitive type in the JSON string but got `%s`", jsonObj.get("treasurer_name_1").toString()));
      }
      if ((jsonObj.get("treasurer_name_2") != null && !jsonObj.get("treasurer_name_2").isJsonNull()) && !jsonObj.get("treasurer_name_2").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `treasurer_name_2` to be a primitive type in the JSON string but got `%s`", jsonObj.get("treasurer_name_2").toString()));
      }
      if ((jsonObj.get("treasurer_name_middle") != null && !jsonObj.get("treasurer_name_middle").isJsonNull()) && !jsonObj.get("treasurer_name_middle").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `treasurer_name_middle` to be a primitive type in the JSON string but got `%s`", jsonObj.get("treasurer_name_middle").toString()));
      }
      if ((jsonObj.get("treasurer_name_prefix") != null && !jsonObj.get("treasurer_name_prefix").isJsonNull()) && !jsonObj.get("treasurer_name_prefix").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `treasurer_name_prefix` to be a primitive type in the JSON string but got `%s`", jsonObj.get("treasurer_name_prefix").toString()));
      }
      if ((jsonObj.get("treasurer_name_suffix") != null && !jsonObj.get("treasurer_name_suffix").isJsonNull()) && !jsonObj.get("treasurer_name_suffix").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `treasurer_name_suffix` to be a primitive type in the JSON string but got `%s`", jsonObj.get("treasurer_name_suffix").toString()));
      }
      if ((jsonObj.get("treasurer_name_title") != null && !jsonObj.get("treasurer_name_title").isJsonNull()) && !jsonObj.get("treasurer_name_title").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `treasurer_name_title` to be a primitive type in the JSON string but got `%s`", jsonObj.get("treasurer_name_title").toString()));
      }
      if ((jsonObj.get("treasurer_phone") != null && !jsonObj.get("treasurer_phone").isJsonNull()) && !jsonObj.get("treasurer_phone").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `treasurer_phone` to be a primitive type in the JSON string but got `%s`", jsonObj.get("treasurer_phone").toString()));
      }
      if ((jsonObj.get("treasurer_state") != null && !jsonObj.get("treasurer_state").isJsonNull()) && !jsonObj.get("treasurer_state").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `treasurer_state` to be a primitive type in the JSON string but got `%s`", jsonObj.get("treasurer_state").toString()));
      }
      if ((jsonObj.get("treasurer_street_1") != null && !jsonObj.get("treasurer_street_1").isJsonNull()) && !jsonObj.get("treasurer_street_1").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `treasurer_street_1` to be a primitive type in the JSON string but got `%s`", jsonObj.get("treasurer_street_1").toString()));
      }
      if ((jsonObj.get("treasurer_street_2") != null && !jsonObj.get("treasurer_street_2").isJsonNull()) && !jsonObj.get("treasurer_street_2").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `treasurer_street_2` to be a primitive type in the JSON string but got `%s`", jsonObj.get("treasurer_street_2").toString()));
      }
      if ((jsonObj.get("treasurer_zip") != null && !jsonObj.get("treasurer_zip").isJsonNull()) && !jsonObj.get("treasurer_zip").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `treasurer_zip` to be a primitive type in the JSON string but got `%s`", jsonObj.get("treasurer_zip").toString()));
      }
      if ((jsonObj.get("website") != null && !jsonObj.get("website").isJsonNull()) && !jsonObj.get("website").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `website` to be a primitive type in the JSON string but got `%s`", jsonObj.get("website").toString()));
      }
      if ((jsonObj.get("zip") != null && !jsonObj.get("zip").isJsonNull()) && !jsonObj.get("zip").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `zip` to be a primitive type in the JSON string but got `%s`", jsonObj.get("zip").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CommitteeDetail.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CommitteeDetail' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CommitteeDetail> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CommitteeDetail.class));

       return (TypeAdapter<T>) new TypeAdapter<CommitteeDetail>() {
           @Override
           public void write(JsonWriter out, CommitteeDetail value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CommitteeDetail read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of CommitteeDetail given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of CommitteeDetail
   * @throws IOException if the JSON string is invalid with respect to CommitteeDetail
   */
  public static CommitteeDetail fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CommitteeDetail.class);
  }

  /**
   * Convert an instance of CommitteeDetail to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

