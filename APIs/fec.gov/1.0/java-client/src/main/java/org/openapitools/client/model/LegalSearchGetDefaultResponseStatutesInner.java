/*
 * OpenFEC
 * This application programming interface (API) allows you to explore the way candidates and committees fund their campaigns.    The Federal Election Commission (FEC) API is a RESTful web service supporting full-text and field-specific searches on FEC data. [Bulk downloads](https://www.fec.gov/data/advanced/?tab=bulk-data) are available on the current site. Information is tied to the underlying forms by file ID and image ID. Data is updated nightly.    There are a lot of data, and a good place to start is to use search to find interesting candidates and committees. Then, you can use their IDs to find report or line item details with the other endpoints. If you are interested in individual donors, check out contributor information in the `/schedule_a/` endpoints.    <b class=\"body\" id=\"getting_started_head\">Getting started with the openFEC API</b><br>    If you would like to use the FEC's API programmatically, you can sign up for your own API key using our form. Alternatively, you can still try out our API without an API key by using the web interface and using DEMO_KEY. Note that when you use the openFEC API you are subject to the [Terms of Service](https://github.com/fecgov/FEC/blob/master/TERMS-OF-SERVICE.md) and [Acceptable Use policy](https://github.com/fecgov/FEC/blob/master/ACCEPTABLE-USE-POLICY.md).    Signing up for an API key will enable you to place up to 1,000 calls an hour. Each call is limited to 100 results per page. You can email questions, comments or a request to get a key for 7,200 calls an hour (120 calls per minute) to <a href=\"mailto:APIinfo@fec.gov\">APIinfo@fec.gov</a>. You can also ask questions and discuss the data in a community led [group](https://groups.google.com/forum/#!forum/fec-data).    The model definitions and schema are available at [/swagger](/swagger/). This is useful for making wrappers and exploring the data.    A few restrictions limit the way you can use FEC data. For example, you canâ€™t use contributor lists for commercial purposes or to solicit donations. [Learn more here](https://www.fec.gov/updates/sale-or-use-contributor-information/).    [Inspect our source code](https://github.com/fecgov/openFEC). We welcome issues and pull requests!    <p><br></p> <h2 class=\"title\" id=\"signup_head\">Sign up for an API key</h2> <div id=\"apidatagov_signup\">Loading signup form...</div>
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * LegalSearchGetDefaultResponseStatutesInner
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:02:12.812386-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class LegalSearchGetDefaultResponseStatutesInner {
  public static final String SERIALIZED_NAME_CHAPTER = "chapter";
  @SerializedName(SERIALIZED_NAME_CHAPTER)
  private String chapter;

  public static final String SERIALIZED_NAME_DOC_ID = "doc_id";
  @SerializedName(SERIALIZED_NAME_DOC_ID)
  private String docId;

  public static final String SERIALIZED_NAME_DOCUMENT_HIGHLIGHTS = "document_highlights";
  @SerializedName(SERIALIZED_NAME_DOCUMENT_HIGHLIGHTS)
  private Object documentHighlights;

  public static final String SERIALIZED_NAME_HIGHLIGHTS = "highlights";
  @SerializedName(SERIALIZED_NAME_HIGHLIGHTS)
  private List<String> highlights = new ArrayList<>();

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_FALSE = "false";
  @SerializedName(SERIALIZED_NAME_FALSE)
  private String false;

  public static final String SERIALIZED_NAME_TITLE = "title";
  @SerializedName(SERIALIZED_NAME_TITLE)
  private String title;

  public static final String SERIALIZED_NAME_URL = "url";
  @SerializedName(SERIALIZED_NAME_URL)
  private String url;

  public LegalSearchGetDefaultResponseStatutesInner() {
  }

  public LegalSearchGetDefaultResponseStatutesInner chapter(String chapter) {
    this.chapter = chapter;
    return this;
  }

  /**
   * Get chapter
   * @return chapter
   */
  @javax.annotation.Nullable
  public String getChapter() {
    return chapter;
  }

  public void setChapter(String chapter) {
    this.chapter = chapter;
  }


  public LegalSearchGetDefaultResponseStatutesInner docId(String docId) {
    this.docId = docId;
    return this;
  }

  /**
   * Get docId
   * @return docId
   */
  @javax.annotation.Nullable
  public String getDocId() {
    return docId;
  }

  public void setDocId(String docId) {
    this.docId = docId;
  }


  public LegalSearchGetDefaultResponseStatutesInner documentHighlights(Object documentHighlights) {
    this.documentHighlights = documentHighlights;
    return this;
  }

  /**
   * Get documentHighlights
   * @return documentHighlights
   */
  @javax.annotation.Nullable
  public Object getDocumentHighlights() {
    return documentHighlights;
  }

  public void setDocumentHighlights(Object documentHighlights) {
    this.documentHighlights = documentHighlights;
  }


  public LegalSearchGetDefaultResponseStatutesInner highlights(List<String> highlights) {
    this.highlights = highlights;
    return this;
  }

  public LegalSearchGetDefaultResponseStatutesInner addHighlightsItem(String highlightsItem) {
    if (this.highlights == null) {
      this.highlights = new ArrayList<>();
    }
    this.highlights.add(highlightsItem);
    return this;
  }

  /**
   * Get highlights
   * @return highlights
   */
  @javax.annotation.Nullable
  public List<String> getHighlights() {
    return highlights;
  }

  public void setHighlights(List<String> highlights) {
    this.highlights = highlights;
  }


  public LegalSearchGetDefaultResponseStatutesInner name(String name) {
    this.name = name;
    return this;
  }

  /**
   * Get name
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public LegalSearchGetDefaultResponseStatutesInner false(String false) {
    this.false = false;
    return this;
  }

  /**
   * Get false
   * @return false
   */
  @javax.annotation.Nullable
  public String getFalse() {
    return false;
  }

  public void setFalse(String false) {
    this.false = false;
  }


  public LegalSearchGetDefaultResponseStatutesInner title(String title) {
    this.title = title;
    return this;
  }

  /**
   * Get title
   * @return title
   */
  @javax.annotation.Nullable
  public String getTitle() {
    return title;
  }

  public void setTitle(String title) {
    this.title = title;
  }


  public LegalSearchGetDefaultResponseStatutesInner url(String url) {
    this.url = url;
    return this;
  }

  /**
   * Get url
   * @return url
   */
  @javax.annotation.Nullable
  public String getUrl() {
    return url;
  }

  public void setUrl(String url) {
    this.url = url;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    LegalSearchGetDefaultResponseStatutesInner legalSearchGetDefaultResponseStatutesInner = (LegalSearchGetDefaultResponseStatutesInner) o;
    return Objects.equals(this.chapter, legalSearchGetDefaultResponseStatutesInner.chapter) &&
        Objects.equals(this.docId, legalSearchGetDefaultResponseStatutesInner.docId) &&
        Objects.equals(this.documentHighlights, legalSearchGetDefaultResponseStatutesInner.documentHighlights) &&
        Objects.equals(this.highlights, legalSearchGetDefaultResponseStatutesInner.highlights) &&
        Objects.equals(this.name, legalSearchGetDefaultResponseStatutesInner.name) &&
        Objects.equals(this.false, legalSearchGetDefaultResponseStatutesInner.false) &&
        Objects.equals(this.title, legalSearchGetDefaultResponseStatutesInner.title) &&
        Objects.equals(this.url, legalSearchGetDefaultResponseStatutesInner.url);
  }

  @Override
  public int hashCode() {
    return Objects.hash(chapter, docId, documentHighlights, highlights, name, false, title, url);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class LegalSearchGetDefaultResponseStatutesInner {\n");
    sb.append("    chapter: ").append(toIndentedString(chapter)).append("\n");
    sb.append("    docId: ").append(toIndentedString(docId)).append("\n");
    sb.append("    documentHighlights: ").append(toIndentedString(documentHighlights)).append("\n");
    sb.append("    highlights: ").append(toIndentedString(highlights)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    false: ").append(toIndentedString(false)).append("\n");
    sb.append("    title: ").append(toIndentedString(title)).append("\n");
    sb.append("    url: ").append(toIndentedString(url)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("chapter");
    openapiFields.add("doc_id");
    openapiFields.add("document_highlights");
    openapiFields.add("highlights");
    openapiFields.add("name");
    openapiFields.add("false");
    openapiFields.add("title");
    openapiFields.add("url");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to LegalSearchGetDefaultResponseStatutesInner
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!LegalSearchGetDefaultResponseStatutesInner.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in LegalSearchGetDefaultResponseStatutesInner is not found in the empty JSON string", LegalSearchGetDefaultResponseStatutesInner.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!LegalSearchGetDefaultResponseStatutesInner.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `LegalSearchGetDefaultResponseStatutesInner` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("chapter") != null && !jsonObj.get("chapter").isJsonNull()) && !jsonObj.get("chapter").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `chapter` to be a primitive type in the JSON string but got `%s`", jsonObj.get("chapter").toString()));
      }
      if ((jsonObj.get("doc_id") != null && !jsonObj.get("doc_id").isJsonNull()) && !jsonObj.get("doc_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `doc_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("doc_id").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("highlights") != null && !jsonObj.get("highlights").isJsonNull() && !jsonObj.get("highlights").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `highlights` to be an array in the JSON string but got `%s`", jsonObj.get("highlights").toString()));
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if ((jsonObj.get("false") != null && !jsonObj.get("false").isJsonNull()) && !jsonObj.get("false").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `false` to be a primitive type in the JSON string but got `%s`", jsonObj.get("false").toString()));
      }
      if ((jsonObj.get("title") != null && !jsonObj.get("title").isJsonNull()) && !jsonObj.get("title").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `title` to be a primitive type in the JSON string but got `%s`", jsonObj.get("title").toString()));
      }
      if ((jsonObj.get("url") != null && !jsonObj.get("url").isJsonNull()) && !jsonObj.get("url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("url").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!LegalSearchGetDefaultResponseStatutesInner.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'LegalSearchGetDefaultResponseStatutesInner' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<LegalSearchGetDefaultResponseStatutesInner> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(LegalSearchGetDefaultResponseStatutesInner.class));

       return (TypeAdapter<T>) new TypeAdapter<LegalSearchGetDefaultResponseStatutesInner>() {
           @Override
           public void write(JsonWriter out, LegalSearchGetDefaultResponseStatutesInner value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public LegalSearchGetDefaultResponseStatutesInner read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of LegalSearchGetDefaultResponseStatutesInner given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of LegalSearchGetDefaultResponseStatutesInner
   * @throws IOException if the JSON string is invalid with respect to LegalSearchGetDefaultResponseStatutesInner
   */
  public static LegalSearchGetDefaultResponseStatutesInner fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, LegalSearchGetDefaultResponseStatutesInner.class);
  }

  /**
   * Convert an instance of LegalSearchGetDefaultResponseStatutesInner to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

