/*
 * OpenFEC
 * This application programming interface (API) allows you to explore the way candidates and committees fund their campaigns.    The Federal Election Commission (FEC) API is a RESTful web service supporting full-text and field-specific searches on FEC data. [Bulk downloads](https://www.fec.gov/data/advanced/?tab=bulk-data) are available on the current site. Information is tied to the underlying forms by file ID and image ID. Data is updated nightly.    There are a lot of data, and a good place to start is to use search to find interesting candidates and committees. Then, you can use their IDs to find report or line item details with the other endpoints. If you are interested in individual donors, check out contributor information in the `/schedule_a/` endpoints.    <b class=\"body\" id=\"getting_started_head\">Getting started with the openFEC API</b><br>    If you would like to use the FEC's API programmatically, you can sign up for your own API key using our form. Alternatively, you can still try out our API without an API key by using the web interface and using DEMO_KEY. Note that when you use the openFEC API you are subject to the [Terms of Service](https://github.com/fecgov/FEC/blob/master/TERMS-OF-SERVICE.md) and [Acceptable Use policy](https://github.com/fecgov/FEC/blob/master/ACCEPTABLE-USE-POLICY.md).    Signing up for an API key will enable you to place up to 1,000 calls an hour. Each call is limited to 100 results per page. You can email questions, comments or a request to get a key for 7,200 calls an hour (120 calls per minute) to <a href=\"mailto:APIinfo@fec.gov\">APIinfo@fec.gov</a>. You can also ask questions and discuss the data in a community led [group](https://groups.google.com/forum/#!forum/fec-data).    The model definitions and schema are available at [/swagger](/swagger/). This is useful for making wrappers and exploring the data.    A few restrictions limit the way you can use FEC data. For example, you canâ€™t use contributor lists for commercial purposes or to solicit donations. [Learn more here](https://www.fec.gov/updates/sale-or-use-contributor-information/).    [Inspect our source code](https://github.com/fecgov/openFEC). We welcome issues and pull requests!    <p><br></p> <h2 class=\"title\" id=\"signup_head\">Sign up for an API key</h2> <div id=\"apidatagov_signup\">Loading signup form...</div>
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.math.BigDecimal;
import java.time.LocalDate;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Election
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:02:12.812386-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Election {
  public static final String SERIALIZED_NAME_CANDIDATE_ELECTION_YEAR = "candidate_election_year";
  @SerializedName(SERIALIZED_NAME_CANDIDATE_ELECTION_YEAR)
  private Integer candidateElectionYear;

  public static final String SERIALIZED_NAME_CANDIDATE_ID = "candidate_id";
  @SerializedName(SERIALIZED_NAME_CANDIDATE_ID)
  private String candidateId;

  public static final String SERIALIZED_NAME_CANDIDATE_NAME = "candidate_name";
  @SerializedName(SERIALIZED_NAME_CANDIDATE_NAME)
  private String candidateName;

  public static final String SERIALIZED_NAME_CANDIDATE_PCC_ID = "candidate_pcc_id";
  @SerializedName(SERIALIZED_NAME_CANDIDATE_PCC_ID)
  private String candidatePccId;

  public static final String SERIALIZED_NAME_CANDIDATE_PCC_NAME = "candidate_pcc_name";
  @SerializedName(SERIALIZED_NAME_CANDIDATE_PCC_NAME)
  private String candidatePccName;

  public static final String SERIALIZED_NAME_CASH_ON_HAND_END_PERIOD = "cash_on_hand_end_period";
  @SerializedName(SERIALIZED_NAME_CASH_ON_HAND_END_PERIOD)
  private BigDecimal cashOnHandEndPeriod;

  public static final String SERIALIZED_NAME_COMMITTEE_IDS = "committee_ids";
  @SerializedName(SERIALIZED_NAME_COMMITTEE_IDS)
  private List<String> committeeIds = new ArrayList<>();

  public static final String SERIALIZED_NAME_COVERAGE_END_DATE = "coverage_end_date";
  @SerializedName(SERIALIZED_NAME_COVERAGE_END_DATE)
  private LocalDate coverageEndDate;

  public static final String SERIALIZED_NAME_INCUMBENT_CHALLENGE_FULL = "incumbent_challenge_full";
  @SerializedName(SERIALIZED_NAME_INCUMBENT_CHALLENGE_FULL)
  private String incumbentChallengeFull;

  public static final String SERIALIZED_NAME_PARTY_FULL = "party_full";
  @SerializedName(SERIALIZED_NAME_PARTY_FULL)
  private String partyFull;

  public static final String SERIALIZED_NAME_TOTAL_DISBURSEMENTS = "total_disbursements";
  @SerializedName(SERIALIZED_NAME_TOTAL_DISBURSEMENTS)
  private BigDecimal totalDisbursements;

  public static final String SERIALIZED_NAME_TOTAL_RECEIPTS = "total_receipts";
  @SerializedName(SERIALIZED_NAME_TOTAL_RECEIPTS)
  private BigDecimal totalReceipts;

  public Election() {
  }

  public Election candidateElectionYear(Integer candidateElectionYear) {
    this.candidateElectionYear = candidateElectionYear;
    return this;
  }

  /**
   * Get candidateElectionYear
   * @return candidateElectionYear
   */
  @javax.annotation.Nullable
  public Integer getCandidateElectionYear() {
    return candidateElectionYear;
  }

  public void setCandidateElectionYear(Integer candidateElectionYear) {
    this.candidateElectionYear = candidateElectionYear;
  }


  public Election candidateId(String candidateId) {
    this.candidateId = candidateId;
    return this;
  }

  /**
   * Get candidateId
   * @return candidateId
   */
  @javax.annotation.Nullable
  public String getCandidateId() {
    return candidateId;
  }

  public void setCandidateId(String candidateId) {
    this.candidateId = candidateId;
  }


  public Election candidateName(String candidateName) {
    this.candidateName = candidateName;
    return this;
  }

  /**
   * Get candidateName
   * @return candidateName
   */
  @javax.annotation.Nullable
  public String getCandidateName() {
    return candidateName;
  }

  public void setCandidateName(String candidateName) {
    this.candidateName = candidateName;
  }


  public Election candidatePccId(String candidatePccId) {
    this.candidatePccId = candidatePccId;
    return this;
  }

  /**
   * Get candidatePccId
   * @return candidatePccId
   */
  @javax.annotation.Nullable
  public String getCandidatePccId() {
    return candidatePccId;
  }

  public void setCandidatePccId(String candidatePccId) {
    this.candidatePccId = candidatePccId;
  }


  public Election candidatePccName(String candidatePccName) {
    this.candidatePccName = candidatePccName;
    return this;
  }

  /**
   * Get candidatePccName
   * @return candidatePccName
   */
  @javax.annotation.Nullable
  public String getCandidatePccName() {
    return candidatePccName;
  }

  public void setCandidatePccName(String candidatePccName) {
    this.candidatePccName = candidatePccName;
  }


  public Election cashOnHandEndPeriod(BigDecimal cashOnHandEndPeriod) {
    this.cashOnHandEndPeriod = cashOnHandEndPeriod;
    return this;
  }

  /**
   * Get cashOnHandEndPeriod
   * @return cashOnHandEndPeriod
   */
  @javax.annotation.Nullable
  public BigDecimal getCashOnHandEndPeriod() {
    return cashOnHandEndPeriod;
  }

  public void setCashOnHandEndPeriod(BigDecimal cashOnHandEndPeriod) {
    this.cashOnHandEndPeriod = cashOnHandEndPeriod;
  }


  public Election committeeIds(List<String> committeeIds) {
    this.committeeIds = committeeIds;
    return this;
  }

  public Election addCommitteeIdsItem(String committeeIdsItem) {
    if (this.committeeIds == null) {
      this.committeeIds = new ArrayList<>();
    }
    this.committeeIds.add(committeeIdsItem);
    return this;
  }

  /**
   * Get committeeIds
   * @return committeeIds
   */
  @javax.annotation.Nullable
  public List<String> getCommitteeIds() {
    return committeeIds;
  }

  public void setCommitteeIds(List<String> committeeIds) {
    this.committeeIds = committeeIds;
  }


  public Election coverageEndDate(LocalDate coverageEndDate) {
    this.coverageEndDate = coverageEndDate;
    return this;
  }

  /**
   * Get coverageEndDate
   * @return coverageEndDate
   */
  @javax.annotation.Nullable
  public LocalDate getCoverageEndDate() {
    return coverageEndDate;
  }

  public void setCoverageEndDate(LocalDate coverageEndDate) {
    this.coverageEndDate = coverageEndDate;
  }


  public Election incumbentChallengeFull(String incumbentChallengeFull) {
    this.incumbentChallengeFull = incumbentChallengeFull;
    return this;
  }

  /**
   * Get incumbentChallengeFull
   * @return incumbentChallengeFull
   */
  @javax.annotation.Nullable
  public String getIncumbentChallengeFull() {
    return incumbentChallengeFull;
  }

  public void setIncumbentChallengeFull(String incumbentChallengeFull) {
    this.incumbentChallengeFull = incumbentChallengeFull;
  }


  public Election partyFull(String partyFull) {
    this.partyFull = partyFull;
    return this;
  }

  /**
   * Get partyFull
   * @return partyFull
   */
  @javax.annotation.Nullable
  public String getPartyFull() {
    return partyFull;
  }

  public void setPartyFull(String partyFull) {
    this.partyFull = partyFull;
  }


  public Election totalDisbursements(BigDecimal totalDisbursements) {
    this.totalDisbursements = totalDisbursements;
    return this;
  }

  /**
   * Get totalDisbursements
   * @return totalDisbursements
   */
  @javax.annotation.Nullable
  public BigDecimal getTotalDisbursements() {
    return totalDisbursements;
  }

  public void setTotalDisbursements(BigDecimal totalDisbursements) {
    this.totalDisbursements = totalDisbursements;
  }


  public Election totalReceipts(BigDecimal totalReceipts) {
    this.totalReceipts = totalReceipts;
    return this;
  }

  /**
   * Get totalReceipts
   * @return totalReceipts
   */
  @javax.annotation.Nullable
  public BigDecimal getTotalReceipts() {
    return totalReceipts;
  }

  public void setTotalReceipts(BigDecimal totalReceipts) {
    this.totalReceipts = totalReceipts;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Election election = (Election) o;
    return Objects.equals(this.candidateElectionYear, election.candidateElectionYear) &&
        Objects.equals(this.candidateId, election.candidateId) &&
        Objects.equals(this.candidateName, election.candidateName) &&
        Objects.equals(this.candidatePccId, election.candidatePccId) &&
        Objects.equals(this.candidatePccName, election.candidatePccName) &&
        Objects.equals(this.cashOnHandEndPeriod, election.cashOnHandEndPeriod) &&
        Objects.equals(this.committeeIds, election.committeeIds) &&
        Objects.equals(this.coverageEndDate, election.coverageEndDate) &&
        Objects.equals(this.incumbentChallengeFull, election.incumbentChallengeFull) &&
        Objects.equals(this.partyFull, election.partyFull) &&
        Objects.equals(this.totalDisbursements, election.totalDisbursements) &&
        Objects.equals(this.totalReceipts, election.totalReceipts);
  }

  @Override
  public int hashCode() {
    return Objects.hash(candidateElectionYear, candidateId, candidateName, candidatePccId, candidatePccName, cashOnHandEndPeriod, committeeIds, coverageEndDate, incumbentChallengeFull, partyFull, totalDisbursements, totalReceipts);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Election {\n");
    sb.append("    candidateElectionYear: ").append(toIndentedString(candidateElectionYear)).append("\n");
    sb.append("    candidateId: ").append(toIndentedString(candidateId)).append("\n");
    sb.append("    candidateName: ").append(toIndentedString(candidateName)).append("\n");
    sb.append("    candidatePccId: ").append(toIndentedString(candidatePccId)).append("\n");
    sb.append("    candidatePccName: ").append(toIndentedString(candidatePccName)).append("\n");
    sb.append("    cashOnHandEndPeriod: ").append(toIndentedString(cashOnHandEndPeriod)).append("\n");
    sb.append("    committeeIds: ").append(toIndentedString(committeeIds)).append("\n");
    sb.append("    coverageEndDate: ").append(toIndentedString(coverageEndDate)).append("\n");
    sb.append("    incumbentChallengeFull: ").append(toIndentedString(incumbentChallengeFull)).append("\n");
    sb.append("    partyFull: ").append(toIndentedString(partyFull)).append("\n");
    sb.append("    totalDisbursements: ").append(toIndentedString(totalDisbursements)).append("\n");
    sb.append("    totalReceipts: ").append(toIndentedString(totalReceipts)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("candidate_election_year");
    openapiFields.add("candidate_id");
    openapiFields.add("candidate_name");
    openapiFields.add("candidate_pcc_id");
    openapiFields.add("candidate_pcc_name");
    openapiFields.add("cash_on_hand_end_period");
    openapiFields.add("committee_ids");
    openapiFields.add("coverage_end_date");
    openapiFields.add("incumbent_challenge_full");
    openapiFields.add("party_full");
    openapiFields.add("total_disbursements");
    openapiFields.add("total_receipts");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Election
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Election.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Election is not found in the empty JSON string", Election.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Election.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Election` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("candidate_id") != null && !jsonObj.get("candidate_id").isJsonNull()) && !jsonObj.get("candidate_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `candidate_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("candidate_id").toString()));
      }
      if ((jsonObj.get("candidate_name") != null && !jsonObj.get("candidate_name").isJsonNull()) && !jsonObj.get("candidate_name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `candidate_name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("candidate_name").toString()));
      }
      if ((jsonObj.get("candidate_pcc_id") != null && !jsonObj.get("candidate_pcc_id").isJsonNull()) && !jsonObj.get("candidate_pcc_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `candidate_pcc_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("candidate_pcc_id").toString()));
      }
      if ((jsonObj.get("candidate_pcc_name") != null && !jsonObj.get("candidate_pcc_name").isJsonNull()) && !jsonObj.get("candidate_pcc_name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `candidate_pcc_name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("candidate_pcc_name").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("committee_ids") != null && !jsonObj.get("committee_ids").isJsonNull() && !jsonObj.get("committee_ids").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `committee_ids` to be an array in the JSON string but got `%s`", jsonObj.get("committee_ids").toString()));
      }
      if ((jsonObj.get("incumbent_challenge_full") != null && !jsonObj.get("incumbent_challenge_full").isJsonNull()) && !jsonObj.get("incumbent_challenge_full").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `incumbent_challenge_full` to be a primitive type in the JSON string but got `%s`", jsonObj.get("incumbent_challenge_full").toString()));
      }
      if ((jsonObj.get("party_full") != null && !jsonObj.get("party_full").isJsonNull()) && !jsonObj.get("party_full").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `party_full` to be a primitive type in the JSON string but got `%s`", jsonObj.get("party_full").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Election.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Election' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Election> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Election.class));

       return (TypeAdapter<T>) new TypeAdapter<Election>() {
           @Override
           public void write(JsonWriter out, Election value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Election read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Election given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Election
   * @throws IOException if the JSON string is invalid with respect to Election
   */
  public static Election fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Election.class);
  }

  /**
   * Convert an instance of Election to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

