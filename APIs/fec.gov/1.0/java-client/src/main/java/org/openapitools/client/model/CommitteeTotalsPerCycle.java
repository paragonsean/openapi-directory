/*
 * OpenFEC
 * This application programming interface (API) allows you to explore the way candidates and committees fund their campaigns.    The Federal Election Commission (FEC) API is a RESTful web service supporting full-text and field-specific searches on FEC data. [Bulk downloads](https://www.fec.gov/data/advanced/?tab=bulk-data) are available on the current site. Information is tied to the underlying forms by file ID and image ID. Data is updated nightly.    There are a lot of data, and a good place to start is to use search to find interesting candidates and committees. Then, you can use their IDs to find report or line item details with the other endpoints. If you are interested in individual donors, check out contributor information in the `/schedule_a/` endpoints.    <b class=\"body\" id=\"getting_started_head\">Getting started with the openFEC API</b><br>    If you would like to use the FEC's API programmatically, you can sign up for your own API key using our form. Alternatively, you can still try out our API without an API key by using the web interface and using DEMO_KEY. Note that when you use the openFEC API you are subject to the [Terms of Service](https://github.com/fecgov/FEC/blob/master/TERMS-OF-SERVICE.md) and [Acceptable Use policy](https://github.com/fecgov/FEC/blob/master/ACCEPTABLE-USE-POLICY.md).    Signing up for an API key will enable you to place up to 1,000 calls an hour. Each call is limited to 100 results per page. You can email questions, comments or a request to get a key for 7,200 calls an hour (120 calls per minute) to <a href=\"mailto:APIinfo@fec.gov\">APIinfo@fec.gov</a>. You can also ask questions and discuss the data in a community led [group](https://groups.google.com/forum/#!forum/fec-data).    The model definitions and schema are available at [/swagger](/swagger/). This is useful for making wrappers and exploring the data.    A few restrictions limit the way you can use FEC data. For example, you canâ€™t use contributor lists for commercial purposes or to solicit donations. [Learn more here](https://www.fec.gov/updates/sale-or-use-contributor-information/).    [Inspect our source code](https://github.com/fecgov/openFEC). We welcome issues and pull requests!    <p><br></p> <h2 class=\"title\" id=\"signup_head\">Sign up for an API key</h2> <div id=\"apidatagov_signup\">Loading signup form...</div>
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.math.BigDecimal;
import java.time.LocalDate;
import java.time.OffsetDateTime;
import java.util.Arrays;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * CommitteeTotalsPerCycle
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:02:12.812386-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class CommitteeTotalsPerCycle {
  public static final String SERIALIZED_NAME_CANDIDATE_CONTRIBUTION = "candidate_contribution";
  @SerializedName(SERIALIZED_NAME_CANDIDATE_CONTRIBUTION)
  private BigDecimal candidateContribution;

  public static final String SERIALIZED_NAME_CASH_ON_HAND_BEGINNING_PERIOD = "cash_on_hand_beginning_period";
  @SerializedName(SERIALIZED_NAME_CASH_ON_HAND_BEGINNING_PERIOD)
  private BigDecimal cashOnHandBeginningPeriod;

  public static final String SERIALIZED_NAME_COMMITTEE_DESIGNATION = "committee_designation";
  @SerializedName(SERIALIZED_NAME_COMMITTEE_DESIGNATION)
  private String committeeDesignation;

  public static final String SERIALIZED_NAME_COMMITTEE_DESIGNATION_FULL = "committee_designation_full";
  @SerializedName(SERIALIZED_NAME_COMMITTEE_DESIGNATION_FULL)
  private String committeeDesignationFull;

  public static final String SERIALIZED_NAME_COMMITTEE_ID = "committee_id";
  @SerializedName(SERIALIZED_NAME_COMMITTEE_ID)
  private String committeeId;

  public static final String SERIALIZED_NAME_COMMITTEE_NAME = "committee_name";
  @SerializedName(SERIALIZED_NAME_COMMITTEE_NAME)
  private String committeeName;

  public static final String SERIALIZED_NAME_COMMITTEE_STATE = "committee_state";
  @SerializedName(SERIALIZED_NAME_COMMITTEE_STATE)
  private String committeeState;

  public static final String SERIALIZED_NAME_COMMITTEE_TYPE = "committee_type";
  @SerializedName(SERIALIZED_NAME_COMMITTEE_TYPE)
  private String committeeType;

  public static final String SERIALIZED_NAME_COMMITTEE_TYPE_FULL = "committee_type_full";
  @SerializedName(SERIALIZED_NAME_COMMITTEE_TYPE_FULL)
  private String committeeTypeFull;

  public static final String SERIALIZED_NAME_CONTRIBUTION_REFUNDS = "contribution_refunds";
  @SerializedName(SERIALIZED_NAME_CONTRIBUTION_REFUNDS)
  private BigDecimal contributionRefunds;

  public static final String SERIALIZED_NAME_CONTRIBUTIONS = "contributions";
  @SerializedName(SERIALIZED_NAME_CONTRIBUTIONS)
  private BigDecimal contributions;

  public static final String SERIALIZED_NAME_CONTRIBUTIONS_IE_AND_PARTY_EXPENDITURES_MADE_PERCENT = "contributions_ie_and_party_expenditures_made_percent";
  @SerializedName(SERIALIZED_NAME_CONTRIBUTIONS_IE_AND_PARTY_EXPENDITURES_MADE_PERCENT)
  private BigDecimal contributionsIeAndPartyExpendituresMadePercent;

  public static final String SERIALIZED_NAME_COVERAGE_END_DATE = "coverage_end_date";
  @SerializedName(SERIALIZED_NAME_COVERAGE_END_DATE)
  private OffsetDateTime coverageEndDate;

  public static final String SERIALIZED_NAME_COVERAGE_START_DATE = "coverage_start_date";
  @SerializedName(SERIALIZED_NAME_COVERAGE_START_DATE)
  private OffsetDateTime coverageStartDate;

  public static final String SERIALIZED_NAME_CYCLE = "cycle";
  @SerializedName(SERIALIZED_NAME_CYCLE)
  private Integer cycle;

  public static final String SERIALIZED_NAME_DISBURSEMENTS = "disbursements";
  @SerializedName(SERIALIZED_NAME_DISBURSEMENTS)
  private BigDecimal disbursements;

  public static final String SERIALIZED_NAME_EXEMPT_LEGAL_ACCOUNTING_DISBURSEMENT = "exempt_legal_accounting_disbursement";
  @SerializedName(SERIALIZED_NAME_EXEMPT_LEGAL_ACCOUNTING_DISBURSEMENT)
  private BigDecimal exemptLegalAccountingDisbursement;

  public static final String SERIALIZED_NAME_FEDERAL_FUNDS = "federal_funds";
  @SerializedName(SERIALIZED_NAME_FEDERAL_FUNDS)
  private BigDecimal federalFunds;

  public static final String SERIALIZED_NAME_FILING_FREQUENCY = "filing_frequency";
  @SerializedName(SERIALIZED_NAME_FILING_FREQUENCY)
  private String filingFrequency;

  public static final String SERIALIZED_NAME_FILING_FREQUENCY_FULL = "filing_frequency_full";
  @SerializedName(SERIALIZED_NAME_FILING_FREQUENCY_FULL)
  private String filingFrequencyFull;

  public static final String SERIALIZED_NAME_FIRST_F1_DATE = "first_f1_date";
  @SerializedName(SERIALIZED_NAME_FIRST_F1_DATE)
  private LocalDate firstF1Date;

  public static final String SERIALIZED_NAME_FIRST_FILE_DATE = "first_file_date";
  @SerializedName(SERIALIZED_NAME_FIRST_FILE_DATE)
  private LocalDate firstFileDate;

  public static final String SERIALIZED_NAME_FUNDRAISING_DISBURSEMENTS = "fundraising_disbursements";
  @SerializedName(SERIALIZED_NAME_FUNDRAISING_DISBURSEMENTS)
  private BigDecimal fundraisingDisbursements;

  public static final String SERIALIZED_NAME_INDIVIDUAL_CONTRIBUTIONS = "individual_contributions";
  @SerializedName(SERIALIZED_NAME_INDIVIDUAL_CONTRIBUTIONS)
  private BigDecimal individualContributions;

  public static final String SERIALIZED_NAME_INDIVIDUAL_CONTRIBUTIONS_PERCENT = "individual_contributions_percent";
  @SerializedName(SERIALIZED_NAME_INDIVIDUAL_CONTRIBUTIONS_PERCENT)
  private BigDecimal individualContributionsPercent;

  public static final String SERIALIZED_NAME_INDIVIDUAL_ITEMIZED_CONTRIBUTIONS = "individual_itemized_contributions";
  @SerializedName(SERIALIZED_NAME_INDIVIDUAL_ITEMIZED_CONTRIBUTIONS)
  private BigDecimal individualItemizedContributions;

  public static final String SERIALIZED_NAME_INDIVIDUAL_UNITEMIZED_CONTRIBUTIONS = "individual_unitemized_contributions";
  @SerializedName(SERIALIZED_NAME_INDIVIDUAL_UNITEMIZED_CONTRIBUTIONS)
  private BigDecimal individualUnitemizedContributions;

  public static final String SERIALIZED_NAME_LAST_BEGINNING_IMAGE_NUMBER = "last_beginning_image_number";
  @SerializedName(SERIALIZED_NAME_LAST_BEGINNING_IMAGE_NUMBER)
  private String lastBeginningImageNumber;

  public static final String SERIALIZED_NAME_LAST_CASH_ON_HAND_END_PERIOD = "last_cash_on_hand_end_period";
  @SerializedName(SERIALIZED_NAME_LAST_CASH_ON_HAND_END_PERIOD)
  private BigDecimal lastCashOnHandEndPeriod;

  public static final String SERIALIZED_NAME_LAST_DEBTS_OWED_BY_COMMITTEE = "last_debts_owed_by_committee";
  @SerializedName(SERIALIZED_NAME_LAST_DEBTS_OWED_BY_COMMITTEE)
  private BigDecimal lastDebtsOwedByCommittee;

  public static final String SERIALIZED_NAME_LAST_DEBTS_OWED_TO_COMMITTEE = "last_debts_owed_to_committee";
  @SerializedName(SERIALIZED_NAME_LAST_DEBTS_OWED_TO_COMMITTEE)
  private BigDecimal lastDebtsOwedToCommittee;

  public static final String SERIALIZED_NAME_LAST_REPORT_TYPE_FULL = "last_report_type_full";
  @SerializedName(SERIALIZED_NAME_LAST_REPORT_TYPE_FULL)
  private String lastReportTypeFull;

  public static final String SERIALIZED_NAME_LAST_REPORT_YEAR = "last_report_year";
  @SerializedName(SERIALIZED_NAME_LAST_REPORT_YEAR)
  private Integer lastReportYear;

  public static final String SERIALIZED_NAME_LOAN_REPAYMENTS_MADE = "loan_repayments_made";
  @SerializedName(SERIALIZED_NAME_LOAN_REPAYMENTS_MADE)
  private BigDecimal loanRepaymentsMade;

  public static final String SERIALIZED_NAME_LOANS_RECEIVED = "loans_received";
  @SerializedName(SERIALIZED_NAME_LOANS_RECEIVED)
  private BigDecimal loansReceived;

  public static final String SERIALIZED_NAME_LOANS_RECEIVED_FROM_CANDIDATE = "loans_received_from_candidate";
  @SerializedName(SERIALIZED_NAME_LOANS_RECEIVED_FROM_CANDIDATE)
  private BigDecimal loansReceivedFromCandidate;

  public static final String SERIALIZED_NAME_NET_CONTRIBUTIONS = "net_contributions";
  @SerializedName(SERIALIZED_NAME_NET_CONTRIBUTIONS)
  private BigDecimal netContributions;

  public static final String SERIALIZED_NAME_NET_OPERATING_EXPENDITURES = "net_operating_expenditures";
  @SerializedName(SERIALIZED_NAME_NET_OPERATING_EXPENDITURES)
  private BigDecimal netOperatingExpenditures;

  public static final String SERIALIZED_NAME_OFFSETS_TO_FUNDRAISING_EXPENDITURES = "offsets_to_fundraising_expenditures";
  @SerializedName(SERIALIZED_NAME_OFFSETS_TO_FUNDRAISING_EXPENDITURES)
  private BigDecimal offsetsToFundraisingExpenditures;

  public static final String SERIALIZED_NAME_OFFSETS_TO_LEGAL_ACCOUNTING = "offsets_to_legal_accounting";
  @SerializedName(SERIALIZED_NAME_OFFSETS_TO_LEGAL_ACCOUNTING)
  private BigDecimal offsetsToLegalAccounting;

  public static final String SERIALIZED_NAME_OFFSETS_TO_OPERATING_EXPENDITURES = "offsets_to_operating_expenditures";
  @SerializedName(SERIALIZED_NAME_OFFSETS_TO_OPERATING_EXPENDITURES)
  private BigDecimal offsetsToOperatingExpenditures;

  public static final String SERIALIZED_NAME_OPERATING_EXPENDITURES = "operating_expenditures";
  @SerializedName(SERIALIZED_NAME_OPERATING_EXPENDITURES)
  private BigDecimal operatingExpenditures;

  public static final String SERIALIZED_NAME_OPERATING_EXPENDITURES_PERCENT = "operating_expenditures_percent";
  @SerializedName(SERIALIZED_NAME_OPERATING_EXPENDITURES_PERCENT)
  private BigDecimal operatingExpendituresPercent;

  public static final String SERIALIZED_NAME_ORGANIZATION_TYPE = "organization_type";
  @SerializedName(SERIALIZED_NAME_ORGANIZATION_TYPE)
  private String organizationType;

  public static final String SERIALIZED_NAME_ORGANIZATION_TYPE_FULL = "organization_type_full";
  @SerializedName(SERIALIZED_NAME_ORGANIZATION_TYPE_FULL)
  private String organizationTypeFull;

  public static final String SERIALIZED_NAME_OTHER_DISBURSEMENTS = "other_disbursements";
  @SerializedName(SERIALIZED_NAME_OTHER_DISBURSEMENTS)
  private BigDecimal otherDisbursements;

  public static final String SERIALIZED_NAME_OTHER_LOANS_RECEIVED = "other_loans_received";
  @SerializedName(SERIALIZED_NAME_OTHER_LOANS_RECEIVED)
  private BigDecimal otherLoansReceived;

  public static final String SERIALIZED_NAME_OTHER_POLITICAL_COMMITTEE_CONTRIBUTIONS = "other_political_committee_contributions";
  @SerializedName(SERIALIZED_NAME_OTHER_POLITICAL_COMMITTEE_CONTRIBUTIONS)
  private BigDecimal otherPoliticalCommitteeContributions;

  public static final String SERIALIZED_NAME_OTHER_RECEIPTS = "other_receipts";
  @SerializedName(SERIALIZED_NAME_OTHER_RECEIPTS)
  private BigDecimal otherReceipts;

  public static final String SERIALIZED_NAME_PARTY_AND_OTHER_COMMITTEE_CONTRIBUTIONS_PERCENT = "party_and_other_committee_contributions_percent";
  @SerializedName(SERIALIZED_NAME_PARTY_AND_OTHER_COMMITTEE_CONTRIBUTIONS_PERCENT)
  private BigDecimal partyAndOtherCommitteeContributionsPercent;

  public static final String SERIALIZED_NAME_PARTY_FULL = "party_full";
  @SerializedName(SERIALIZED_NAME_PARTY_FULL)
  private String partyFull;

  public static final String SERIALIZED_NAME_PDF_URL = "pdf_url";
  @SerializedName(SERIALIZED_NAME_PDF_URL)
  private String pdfUrl;

  public static final String SERIALIZED_NAME_POLITICAL_PARTY_COMMITTEE_CONTRIBUTIONS = "political_party_committee_contributions";
  @SerializedName(SERIALIZED_NAME_POLITICAL_PARTY_COMMITTEE_CONTRIBUTIONS)
  private BigDecimal politicalPartyCommitteeContributions;

  public static final String SERIALIZED_NAME_RECEIPTS = "receipts";
  @SerializedName(SERIALIZED_NAME_RECEIPTS)
  private BigDecimal receipts;

  public static final String SERIALIZED_NAME_REFUNDED_INDIVIDUAL_CONTRIBUTIONS = "refunded_individual_contributions";
  @SerializedName(SERIALIZED_NAME_REFUNDED_INDIVIDUAL_CONTRIBUTIONS)
  private BigDecimal refundedIndividualContributions;

  public static final String SERIALIZED_NAME_REFUNDED_OTHER_POLITICAL_COMMITTEE_CONTRIBUTIONS = "refunded_other_political_committee_contributions";
  @SerializedName(SERIALIZED_NAME_REFUNDED_OTHER_POLITICAL_COMMITTEE_CONTRIBUTIONS)
  private BigDecimal refundedOtherPoliticalCommitteeContributions;

  public static final String SERIALIZED_NAME_REFUNDED_POLITICAL_PARTY_COMMITTEE_CONTRIBUTIONS = "refunded_political_party_committee_contributions";
  @SerializedName(SERIALIZED_NAME_REFUNDED_POLITICAL_PARTY_COMMITTEE_CONTRIBUTIONS)
  private BigDecimal refundedPoliticalPartyCommitteeContributions;

  public static final String SERIALIZED_NAME_REPAYMENTS_LOANS_MADE_BY_CANDIDATE = "repayments_loans_made_by_candidate";
  @SerializedName(SERIALIZED_NAME_REPAYMENTS_LOANS_MADE_BY_CANDIDATE)
  private BigDecimal repaymentsLoansMadeByCandidate;

  public static final String SERIALIZED_NAME_REPAYMENTS_OTHER_LOANS = "repayments_other_loans";
  @SerializedName(SERIALIZED_NAME_REPAYMENTS_OTHER_LOANS)
  private BigDecimal repaymentsOtherLoans;

  public static final String SERIALIZED_NAME_REPORT_FORM = "report_form";
  @SerializedName(SERIALIZED_NAME_REPORT_FORM)
  private String reportForm;

  public static final String SERIALIZED_NAME_TOTAL_OFFSETS_TO_OPERATING_EXPENDITURES = "total_offsets_to_operating_expenditures";
  @SerializedName(SERIALIZED_NAME_TOTAL_OFFSETS_TO_OPERATING_EXPENDITURES)
  private BigDecimal totalOffsetsToOperatingExpenditures;

  public static final String SERIALIZED_NAME_TRANSACTION_COVERAGE_DATE = "transaction_coverage_date";
  @SerializedName(SERIALIZED_NAME_TRANSACTION_COVERAGE_DATE)
  private LocalDate transactionCoverageDate;

  public static final String SERIALIZED_NAME_TRANSFERS_FROM_AFFILIATED_COMMITTEE = "transfers_from_affiliated_committee";
  @SerializedName(SERIALIZED_NAME_TRANSFERS_FROM_AFFILIATED_COMMITTEE)
  private BigDecimal transfersFromAffiliatedCommittee;

  public static final String SERIALIZED_NAME_TRANSFERS_TO_OTHER_AUTHORIZED_COMMITTEE = "transfers_to_other_authorized_committee";
  @SerializedName(SERIALIZED_NAME_TRANSFERS_TO_OTHER_AUTHORIZED_COMMITTEE)
  private BigDecimal transfersToOtherAuthorizedCommittee;

  public static final String SERIALIZED_NAME_TREASURER_NAME = "treasurer_name";
  @SerializedName(SERIALIZED_NAME_TREASURER_NAME)
  private String treasurerName;

  public CommitteeTotalsPerCycle() {
  }

  public CommitteeTotalsPerCycle candidateContribution(BigDecimal candidateContribution) {
    this.candidateContribution = candidateContribution;
    return this;
  }

  /**
   * Get candidateContribution
   * @return candidateContribution
   */
  @javax.annotation.Nullable
  public BigDecimal getCandidateContribution() {
    return candidateContribution;
  }

  public void setCandidateContribution(BigDecimal candidateContribution) {
    this.candidateContribution = candidateContribution;
  }


  public CommitteeTotalsPerCycle cashOnHandBeginningPeriod(BigDecimal cashOnHandBeginningPeriod) {
    this.cashOnHandBeginningPeriod = cashOnHandBeginningPeriod;
    return this;
  }

  /**
   * Get cashOnHandBeginningPeriod
   * @return cashOnHandBeginningPeriod
   */
  @javax.annotation.Nullable
  public BigDecimal getCashOnHandBeginningPeriod() {
    return cashOnHandBeginningPeriod;
  }

  public void setCashOnHandBeginningPeriod(BigDecimal cashOnHandBeginningPeriod) {
    this.cashOnHandBeginningPeriod = cashOnHandBeginningPeriod;
  }


  public CommitteeTotalsPerCycle committeeDesignation(String committeeDesignation) {
    this.committeeDesignation = committeeDesignation;
    return this;
  }

  /**
   * The one-letter designation code of the organization:          - A authorized by a candidate          - J joint fundraising committee          - P principal campaign committee of a candidate          - U unauthorized          - B lobbyist/registrant PAC          - D leadership PAC 
   * @return committeeDesignation
   */
  @javax.annotation.Nullable
  public String getCommitteeDesignation() {
    return committeeDesignation;
  }

  public void setCommitteeDesignation(String committeeDesignation) {
    this.committeeDesignation = committeeDesignation;
  }


  public CommitteeTotalsPerCycle committeeDesignationFull(String committeeDesignationFull) {
    this.committeeDesignationFull = committeeDesignationFull;
    return this;
  }

  /**
   * The one-letter designation code of the organization:          - A authorized by a candidate          - J joint fundraising committee          - P principal campaign committee of a candidate          - U unauthorized          - B lobbyist/registrant PAC          - D leadership PAC 
   * @return committeeDesignationFull
   */
  @javax.annotation.Nullable
  public String getCommitteeDesignationFull() {
    return committeeDesignationFull;
  }

  public void setCommitteeDesignationFull(String committeeDesignationFull) {
    this.committeeDesignationFull = committeeDesignationFull;
  }


  public CommitteeTotalsPerCycle committeeId(String committeeId) {
    this.committeeId = committeeId;
    return this;
  }

  /**
   *  A unique identifier assigned to each committee or filer registered with the FEC. In general committee id&#39;s begin with the letter C which is followed by eight digits. 
   * @return committeeId
   */
  @javax.annotation.Nullable
  public String getCommitteeId() {
    return committeeId;
  }

  public void setCommitteeId(String committeeId) {
    this.committeeId = committeeId;
  }


  public CommitteeTotalsPerCycle committeeName(String committeeName) {
    this.committeeName = committeeName;
    return this;
  }

  /**
   * The name of the committee. If a committee changes its name,     the most recent name will be shown. Committee names are not unique. Use committee_id     for looking up records.
   * @return committeeName
   */
  @javax.annotation.Nullable
  public String getCommitteeName() {
    return committeeName;
  }

  public void setCommitteeName(String committeeName) {
    this.committeeName = committeeName;
  }


  public CommitteeTotalsPerCycle committeeState(String committeeState) {
    this.committeeState = committeeState;
    return this;
  }

  /**
   *  State of the committee&#39;s address as filed on the Form 1 
   * @return committeeState
   */
  @javax.annotation.Nullable
  public String getCommitteeState() {
    return committeeState;
  }

  public void setCommitteeState(String committeeState) {
    this.committeeState = committeeState;
  }


  public CommitteeTotalsPerCycle committeeType(String committeeType) {
    this.committeeType = committeeType;
    return this;
  }

  /**
   * The one-letter type code of the organization:         - C communication cost         - D delegate         - E electioneering communication         - H House         - I independent expenditure filer (not a committee)         - N PAC - nonqualified         - O independent expenditure-only (super PACs)         - P presidential         - Q PAC - qualified         - S Senate         - U single candidate independent expenditure         - V PAC with non-contribution account, nonqualified         - W PAC with non-contribution account, qualified         - X party, nonqualified         - Y party, qualified         - Z national party non-federal account 
   * @return committeeType
   */
  @javax.annotation.Nullable
  public String getCommitteeType() {
    return committeeType;
  }

  public void setCommitteeType(String committeeType) {
    this.committeeType = committeeType;
  }


  public CommitteeTotalsPerCycle committeeTypeFull(String committeeTypeFull) {
    this.committeeTypeFull = committeeTypeFull;
    return this;
  }

  /**
   * The one-letter type code of the organization:         - C communication cost         - D delegate         - E electioneering communication         - H House         - I independent expenditure filer (not a committee)         - N PAC - nonqualified         - O independent expenditure-only (super PACs)         - P presidential         - Q PAC - qualified         - S Senate         - U single candidate independent expenditure         - V PAC with non-contribution account, nonqualified         - W PAC with non-contribution account, qualified         - X party, nonqualified         - Y party, qualified         - Z national party non-federal account 
   * @return committeeTypeFull
   */
  @javax.annotation.Nullable
  public String getCommitteeTypeFull() {
    return committeeTypeFull;
  }

  public void setCommitteeTypeFull(String committeeTypeFull) {
    this.committeeTypeFull = committeeTypeFull;
  }


  public CommitteeTotalsPerCycle contributionRefunds(BigDecimal contributionRefunds) {
    this.contributionRefunds = contributionRefunds;
    return this;
  }

  /**
   * Get contributionRefunds
   * @return contributionRefunds
   */
  @javax.annotation.Nullable
  public BigDecimal getContributionRefunds() {
    return contributionRefunds;
  }

  public void setContributionRefunds(BigDecimal contributionRefunds) {
    this.contributionRefunds = contributionRefunds;
  }


  public CommitteeTotalsPerCycle contributions(BigDecimal contributions) {
    this.contributions = contributions;
    return this;
  }

  /**
   * Contribution
   * @return contributions
   */
  @javax.annotation.Nullable
  public BigDecimal getContributions() {
    return contributions;
  }

  public void setContributions(BigDecimal contributions) {
    this.contributions = contributions;
  }


  public CommitteeTotalsPerCycle contributionsIeAndPartyExpendituresMadePercent(BigDecimal contributionsIeAndPartyExpendituresMadePercent) {
    this.contributionsIeAndPartyExpendituresMadePercent = contributionsIeAndPartyExpendituresMadePercent;
    return this;
  }

  /**
   * Get contributionsIeAndPartyExpendituresMadePercent
   * @return contributionsIeAndPartyExpendituresMadePercent
   */
  @javax.annotation.Nullable
  public BigDecimal getContributionsIeAndPartyExpendituresMadePercent() {
    return contributionsIeAndPartyExpendituresMadePercent;
  }

  public void setContributionsIeAndPartyExpendituresMadePercent(BigDecimal contributionsIeAndPartyExpendituresMadePercent) {
    this.contributionsIeAndPartyExpendituresMadePercent = contributionsIeAndPartyExpendituresMadePercent;
  }


  public CommitteeTotalsPerCycle coverageEndDate(OffsetDateTime coverageEndDate) {
    this.coverageEndDate = coverageEndDate;
    return this;
  }

  /**
   * Get coverageEndDate
   * @return coverageEndDate
   */
  @javax.annotation.Nullable
  public OffsetDateTime getCoverageEndDate() {
    return coverageEndDate;
  }

  public void setCoverageEndDate(OffsetDateTime coverageEndDate) {
    this.coverageEndDate = coverageEndDate;
  }


  public CommitteeTotalsPerCycle coverageStartDate(OffsetDateTime coverageStartDate) {
    this.coverageStartDate = coverageStartDate;
    return this;
  }

  /**
   * Get coverageStartDate
   * @return coverageStartDate
   */
  @javax.annotation.Nullable
  public OffsetDateTime getCoverageStartDate() {
    return coverageStartDate;
  }

  public void setCoverageStartDate(OffsetDateTime coverageStartDate) {
    this.coverageStartDate = coverageStartDate;
  }


  public CommitteeTotalsPerCycle cycle(Integer cycle) {
    this.cycle = cycle;
    return this;
  }

  /**
   *  Filter records to only those that are applicable to a given two-year period. This cycle follows the traditional House election cycle and subdivides the presidential and Senate elections into comparable two-year blocks. The cycle begins with an odd year and is named for its ending, even year. 
   * @return cycle
   */
  @javax.annotation.Nonnull
  public Integer getCycle() {
    return cycle;
  }

  public void setCycle(Integer cycle) {
    this.cycle = cycle;
  }


  public CommitteeTotalsPerCycle disbursements(BigDecimal disbursements) {
    this.disbursements = disbursements;
    return this;
  }

  /**
   * Disbursements
   * @return disbursements
   */
  @javax.annotation.Nullable
  public BigDecimal getDisbursements() {
    return disbursements;
  }

  public void setDisbursements(BigDecimal disbursements) {
    this.disbursements = disbursements;
  }


  public CommitteeTotalsPerCycle exemptLegalAccountingDisbursement(BigDecimal exemptLegalAccountingDisbursement) {
    this.exemptLegalAccountingDisbursement = exemptLegalAccountingDisbursement;
    return this;
  }

  /**
   * Get exemptLegalAccountingDisbursement
   * @return exemptLegalAccountingDisbursement
   */
  @javax.annotation.Nullable
  public BigDecimal getExemptLegalAccountingDisbursement() {
    return exemptLegalAccountingDisbursement;
  }

  public void setExemptLegalAccountingDisbursement(BigDecimal exemptLegalAccountingDisbursement) {
    this.exemptLegalAccountingDisbursement = exemptLegalAccountingDisbursement;
  }


  public CommitteeTotalsPerCycle federalFunds(BigDecimal federalFunds) {
    this.federalFunds = federalFunds;
    return this;
  }

  /**
   * Get federalFunds
   * @return federalFunds
   */
  @javax.annotation.Nullable
  public BigDecimal getFederalFunds() {
    return federalFunds;
  }

  public void setFederalFunds(BigDecimal federalFunds) {
    this.federalFunds = federalFunds;
  }


  public CommitteeTotalsPerCycle filingFrequency(String filingFrequency) {
    this.filingFrequency = filingFrequency;
    return this;
  }

  /**
   * The one-letter      code of the filing frequency:          - A Administratively terminated          - D Debt          - M Monthly filer          - Q Quarterly filer          - T Terminated          - W Waived 
   * @return filingFrequency
   */
  @javax.annotation.Nullable
  public String getFilingFrequency() {
    return filingFrequency;
  }

  public void setFilingFrequency(String filingFrequency) {
    this.filingFrequency = filingFrequency;
  }


  public CommitteeTotalsPerCycle filingFrequencyFull(String filingFrequencyFull) {
    this.filingFrequencyFull = filingFrequencyFull;
    return this;
  }

  /**
   * The one-letter      code of the filing frequency:          - A Administratively terminated          - D Debt          - M Monthly filer          - Q Quarterly filer          - T Terminated          - W Waived 
   * @return filingFrequencyFull
   */
  @javax.annotation.Nullable
  public String getFilingFrequencyFull() {
    return filingFrequencyFull;
  }

  public void setFilingFrequencyFull(String filingFrequencyFull) {
    this.filingFrequencyFull = filingFrequencyFull;
  }


  public CommitteeTotalsPerCycle firstF1Date(LocalDate firstF1Date) {
    this.firstF1Date = firstF1Date;
    return this;
  }

  /**
   * The day the FEC received the committee&#39;s first Form 1
   * @return firstF1Date
   */
  @javax.annotation.Nullable
  public LocalDate getFirstF1Date() {
    return firstF1Date;
  }

  public void setFirstF1Date(LocalDate firstF1Date) {
    this.firstF1Date = firstF1Date;
  }


  public CommitteeTotalsPerCycle firstFileDate(LocalDate firstFileDate) {
    this.firstFileDate = firstFileDate;
    return this;
  }

  /**
   * The day the FEC received the committee&#39;s first filing. This is usually a Form 1 committee registration.
   * @return firstFileDate
   */
  @javax.annotation.Nullable
  public LocalDate getFirstFileDate() {
    return firstFileDate;
  }

  public void setFirstFileDate(LocalDate firstFileDate) {
    this.firstFileDate = firstFileDate;
  }


  public CommitteeTotalsPerCycle fundraisingDisbursements(BigDecimal fundraisingDisbursements) {
    this.fundraisingDisbursements = fundraisingDisbursements;
    return this;
  }

  /**
   * Get fundraisingDisbursements
   * @return fundraisingDisbursements
   */
  @javax.annotation.Nullable
  public BigDecimal getFundraisingDisbursements() {
    return fundraisingDisbursements;
  }

  public void setFundraisingDisbursements(BigDecimal fundraisingDisbursements) {
    this.fundraisingDisbursements = fundraisingDisbursements;
  }


  public CommitteeTotalsPerCycle individualContributions(BigDecimal individualContributions) {
    this.individualContributions = individualContributions;
    return this;
  }

  /**
   * Get individualContributions
   * @return individualContributions
   */
  @javax.annotation.Nullable
  public BigDecimal getIndividualContributions() {
    return individualContributions;
  }

  public void setIndividualContributions(BigDecimal individualContributions) {
    this.individualContributions = individualContributions;
  }


  public CommitteeTotalsPerCycle individualContributionsPercent(BigDecimal individualContributionsPercent) {
    this.individualContributionsPercent = individualContributionsPercent;
    return this;
  }

  /**
   * Get individualContributionsPercent
   * @return individualContributionsPercent
   */
  @javax.annotation.Nullable
  public BigDecimal getIndividualContributionsPercent() {
    return individualContributionsPercent;
  }

  public void setIndividualContributionsPercent(BigDecimal individualContributionsPercent) {
    this.individualContributionsPercent = individualContributionsPercent;
  }


  public CommitteeTotalsPerCycle individualItemizedContributions(BigDecimal individualItemizedContributions) {
    this.individualItemizedContributions = individualItemizedContributions;
    return this;
  }

  /**
   * Individual itemized contributions are from individuals whose aggregate contributions total over $200 per individual per year. Be aware, some filers choose to itemize donations $200 or less.
   * @return individualItemizedContributions
   */
  @javax.annotation.Nullable
  public BigDecimal getIndividualItemizedContributions() {
    return individualItemizedContributions;
  }

  public void setIndividualItemizedContributions(BigDecimal individualItemizedContributions) {
    this.individualItemizedContributions = individualItemizedContributions;
  }


  public CommitteeTotalsPerCycle individualUnitemizedContributions(BigDecimal individualUnitemizedContributions) {
    this.individualUnitemizedContributions = individualUnitemizedContributions;
    return this;
  }

  /**
   * Unitemized contributions are made individuals whose aggregate contributions total $200 or less per individual per year. Be aware, some filers choose to itemize donations $200 or less and in that case those donations will appear in the itemized total.
   * @return individualUnitemizedContributions
   */
  @javax.annotation.Nullable
  public BigDecimal getIndividualUnitemizedContributions() {
    return individualUnitemizedContributions;
  }

  public void setIndividualUnitemizedContributions(BigDecimal individualUnitemizedContributions) {
    this.individualUnitemizedContributions = individualUnitemizedContributions;
  }


  public CommitteeTotalsPerCycle lastBeginningImageNumber(String lastBeginningImageNumber) {
    this.lastBeginningImageNumber = lastBeginningImageNumber;
    return this;
  }

  /**
   * Get lastBeginningImageNumber
   * @return lastBeginningImageNumber
   */
  @javax.annotation.Nullable
  public String getLastBeginningImageNumber() {
    return lastBeginningImageNumber;
  }

  public void setLastBeginningImageNumber(String lastBeginningImageNumber) {
    this.lastBeginningImageNumber = lastBeginningImageNumber;
  }


  public CommitteeTotalsPerCycle lastCashOnHandEndPeriod(BigDecimal lastCashOnHandEndPeriod) {
    this.lastCashOnHandEndPeriod = lastCashOnHandEndPeriod;
    return this;
  }

  /**
   * Get lastCashOnHandEndPeriod
   * @return lastCashOnHandEndPeriod
   */
  @javax.annotation.Nullable
  public BigDecimal getLastCashOnHandEndPeriod() {
    return lastCashOnHandEndPeriod;
  }

  public void setLastCashOnHandEndPeriod(BigDecimal lastCashOnHandEndPeriod) {
    this.lastCashOnHandEndPeriod = lastCashOnHandEndPeriod;
  }


  public CommitteeTotalsPerCycle lastDebtsOwedByCommittee(BigDecimal lastDebtsOwedByCommittee) {
    this.lastDebtsOwedByCommittee = lastDebtsOwedByCommittee;
    return this;
  }

  /**
   * Get lastDebtsOwedByCommittee
   * @return lastDebtsOwedByCommittee
   */
  @javax.annotation.Nullable
  public BigDecimal getLastDebtsOwedByCommittee() {
    return lastDebtsOwedByCommittee;
  }

  public void setLastDebtsOwedByCommittee(BigDecimal lastDebtsOwedByCommittee) {
    this.lastDebtsOwedByCommittee = lastDebtsOwedByCommittee;
  }


  public CommitteeTotalsPerCycle lastDebtsOwedToCommittee(BigDecimal lastDebtsOwedToCommittee) {
    this.lastDebtsOwedToCommittee = lastDebtsOwedToCommittee;
    return this;
  }

  /**
   * Get lastDebtsOwedToCommittee
   * @return lastDebtsOwedToCommittee
   */
  @javax.annotation.Nullable
  public BigDecimal getLastDebtsOwedToCommittee() {
    return lastDebtsOwedToCommittee;
  }

  public void setLastDebtsOwedToCommittee(BigDecimal lastDebtsOwedToCommittee) {
    this.lastDebtsOwedToCommittee = lastDebtsOwedToCommittee;
  }


  public CommitteeTotalsPerCycle lastReportTypeFull(String lastReportTypeFull) {
    this.lastReportTypeFull = lastReportTypeFull;
    return this;
  }

  /**
   * Get lastReportTypeFull
   * @return lastReportTypeFull
   */
  @javax.annotation.Nullable
  public String getLastReportTypeFull() {
    return lastReportTypeFull;
  }

  public void setLastReportTypeFull(String lastReportTypeFull) {
    this.lastReportTypeFull = lastReportTypeFull;
  }


  public CommitteeTotalsPerCycle lastReportYear(Integer lastReportYear) {
    this.lastReportYear = lastReportYear;
    return this;
  }

  /**
   * Get lastReportYear
   * @return lastReportYear
   */
  @javax.annotation.Nullable
  public Integer getLastReportYear() {
    return lastReportYear;
  }

  public void setLastReportYear(Integer lastReportYear) {
    this.lastReportYear = lastReportYear;
  }


  public CommitteeTotalsPerCycle loanRepaymentsMade(BigDecimal loanRepaymentsMade) {
    this.loanRepaymentsMade = loanRepaymentsMade;
    return this;
  }

  /**
   * Get loanRepaymentsMade
   * @return loanRepaymentsMade
   */
  @javax.annotation.Nullable
  public BigDecimal getLoanRepaymentsMade() {
    return loanRepaymentsMade;
  }

  public void setLoanRepaymentsMade(BigDecimal loanRepaymentsMade) {
    this.loanRepaymentsMade = loanRepaymentsMade;
  }


  public CommitteeTotalsPerCycle loansReceived(BigDecimal loansReceived) {
    this.loansReceived = loansReceived;
    return this;
  }

  /**
   * Get loansReceived
   * @return loansReceived
   */
  @javax.annotation.Nullable
  public BigDecimal getLoansReceived() {
    return loansReceived;
  }

  public void setLoansReceived(BigDecimal loansReceived) {
    this.loansReceived = loansReceived;
  }


  public CommitteeTotalsPerCycle loansReceivedFromCandidate(BigDecimal loansReceivedFromCandidate) {
    this.loansReceivedFromCandidate = loansReceivedFromCandidate;
    return this;
  }

  /**
   * Get loansReceivedFromCandidate
   * @return loansReceivedFromCandidate
   */
  @javax.annotation.Nullable
  public BigDecimal getLoansReceivedFromCandidate() {
    return loansReceivedFromCandidate;
  }

  public void setLoansReceivedFromCandidate(BigDecimal loansReceivedFromCandidate) {
    this.loansReceivedFromCandidate = loansReceivedFromCandidate;
  }


  public CommitteeTotalsPerCycle netContributions(BigDecimal netContributions) {
    this.netContributions = netContributions;
    return this;
  }

  /**
   * Get netContributions
   * @return netContributions
   */
  @javax.annotation.Nullable
  public BigDecimal getNetContributions() {
    return netContributions;
  }

  public void setNetContributions(BigDecimal netContributions) {
    this.netContributions = netContributions;
  }


  public CommitteeTotalsPerCycle netOperatingExpenditures(BigDecimal netOperatingExpenditures) {
    this.netOperatingExpenditures = netOperatingExpenditures;
    return this;
  }

  /**
   * Get netOperatingExpenditures
   * @return netOperatingExpenditures
   */
  @javax.annotation.Nullable
  public BigDecimal getNetOperatingExpenditures() {
    return netOperatingExpenditures;
  }

  public void setNetOperatingExpenditures(BigDecimal netOperatingExpenditures) {
    this.netOperatingExpenditures = netOperatingExpenditures;
  }


  public CommitteeTotalsPerCycle offsetsToFundraisingExpenditures(BigDecimal offsetsToFundraisingExpenditures) {
    this.offsetsToFundraisingExpenditures = offsetsToFundraisingExpenditures;
    return this;
  }

  /**
   * Get offsetsToFundraisingExpenditures
   * @return offsetsToFundraisingExpenditures
   */
  @javax.annotation.Nullable
  public BigDecimal getOffsetsToFundraisingExpenditures() {
    return offsetsToFundraisingExpenditures;
  }

  public void setOffsetsToFundraisingExpenditures(BigDecimal offsetsToFundraisingExpenditures) {
    this.offsetsToFundraisingExpenditures = offsetsToFundraisingExpenditures;
  }


  public CommitteeTotalsPerCycle offsetsToLegalAccounting(BigDecimal offsetsToLegalAccounting) {
    this.offsetsToLegalAccounting = offsetsToLegalAccounting;
    return this;
  }

  /**
   * Get offsetsToLegalAccounting
   * @return offsetsToLegalAccounting
   */
  @javax.annotation.Nullable
  public BigDecimal getOffsetsToLegalAccounting() {
    return offsetsToLegalAccounting;
  }

  public void setOffsetsToLegalAccounting(BigDecimal offsetsToLegalAccounting) {
    this.offsetsToLegalAccounting = offsetsToLegalAccounting;
  }


  public CommitteeTotalsPerCycle offsetsToOperatingExpenditures(BigDecimal offsetsToOperatingExpenditures) {
    this.offsetsToOperatingExpenditures = offsetsToOperatingExpenditures;
    return this;
  }

  /**
   * Get offsetsToOperatingExpenditures
   * @return offsetsToOperatingExpenditures
   */
  @javax.annotation.Nullable
  public BigDecimal getOffsetsToOperatingExpenditures() {
    return offsetsToOperatingExpenditures;
  }

  public void setOffsetsToOperatingExpenditures(BigDecimal offsetsToOperatingExpenditures) {
    this.offsetsToOperatingExpenditures = offsetsToOperatingExpenditures;
  }


  public CommitteeTotalsPerCycle operatingExpenditures(BigDecimal operatingExpenditures) {
    this.operatingExpenditures = operatingExpenditures;
    return this;
  }

  /**
   * Get operatingExpenditures
   * @return operatingExpenditures
   */
  @javax.annotation.Nullable
  public BigDecimal getOperatingExpenditures() {
    return operatingExpenditures;
  }

  public void setOperatingExpenditures(BigDecimal operatingExpenditures) {
    this.operatingExpenditures = operatingExpenditures;
  }


  public CommitteeTotalsPerCycle operatingExpendituresPercent(BigDecimal operatingExpendituresPercent) {
    this.operatingExpendituresPercent = operatingExpendituresPercent;
    return this;
  }

  /**
   * Get operatingExpendituresPercent
   * @return operatingExpendituresPercent
   */
  @javax.annotation.Nullable
  public BigDecimal getOperatingExpendituresPercent() {
    return operatingExpendituresPercent;
  }

  public void setOperatingExpendituresPercent(BigDecimal operatingExpendituresPercent) {
    this.operatingExpendituresPercent = operatingExpendituresPercent;
  }


  public CommitteeTotalsPerCycle organizationType(String organizationType) {
    this.organizationType = organizationType;
    return this;
  }

  /**
   * The one-letter code for the kind for organization:         - C corporation         - L labor organization         - M membership organization         - T trade association         - V cooperative         - W corporation without capital stock 
   * @return organizationType
   */
  @javax.annotation.Nullable
  public String getOrganizationType() {
    return organizationType;
  }

  public void setOrganizationType(String organizationType) {
    this.organizationType = organizationType;
  }


  public CommitteeTotalsPerCycle organizationTypeFull(String organizationTypeFull) {
    this.organizationTypeFull = organizationTypeFull;
    return this;
  }

  /**
   * The one-letter code for the kind for organization:         - C corporation         - L labor organization         - M membership organization         - T trade association         - V cooperative         - W corporation without capital stock 
   * @return organizationTypeFull
   */
  @javax.annotation.Nullable
  public String getOrganizationTypeFull() {
    return organizationTypeFull;
  }

  public void setOrganizationTypeFull(String organizationTypeFull) {
    this.organizationTypeFull = organizationTypeFull;
  }


  public CommitteeTotalsPerCycle otherDisbursements(BigDecimal otherDisbursements) {
    this.otherDisbursements = otherDisbursements;
    return this;
  }

  /**
   * Get otherDisbursements
   * @return otherDisbursements
   */
  @javax.annotation.Nullable
  public BigDecimal getOtherDisbursements() {
    return otherDisbursements;
  }

  public void setOtherDisbursements(BigDecimal otherDisbursements) {
    this.otherDisbursements = otherDisbursements;
  }


  public CommitteeTotalsPerCycle otherLoansReceived(BigDecimal otherLoansReceived) {
    this.otherLoansReceived = otherLoansReceived;
    return this;
  }

  /**
   * Get otherLoansReceived
   * @return otherLoansReceived
   */
  @javax.annotation.Nullable
  public BigDecimal getOtherLoansReceived() {
    return otherLoansReceived;
  }

  public void setOtherLoansReceived(BigDecimal otherLoansReceived) {
    this.otherLoansReceived = otherLoansReceived;
  }


  public CommitteeTotalsPerCycle otherPoliticalCommitteeContributions(BigDecimal otherPoliticalCommitteeContributions) {
    this.otherPoliticalCommitteeContributions = otherPoliticalCommitteeContributions;
    return this;
  }

  /**
   * Get otherPoliticalCommitteeContributions
   * @return otherPoliticalCommitteeContributions
   */
  @javax.annotation.Nullable
  public BigDecimal getOtherPoliticalCommitteeContributions() {
    return otherPoliticalCommitteeContributions;
  }

  public void setOtherPoliticalCommitteeContributions(BigDecimal otherPoliticalCommitteeContributions) {
    this.otherPoliticalCommitteeContributions = otherPoliticalCommitteeContributions;
  }


  public CommitteeTotalsPerCycle otherReceipts(BigDecimal otherReceipts) {
    this.otherReceipts = otherReceipts;
    return this;
  }

  /**
   * Get otherReceipts
   * @return otherReceipts
   */
  @javax.annotation.Nullable
  public BigDecimal getOtherReceipts() {
    return otherReceipts;
  }

  public void setOtherReceipts(BigDecimal otherReceipts) {
    this.otherReceipts = otherReceipts;
  }


  public CommitteeTotalsPerCycle partyAndOtherCommitteeContributionsPercent(BigDecimal partyAndOtherCommitteeContributionsPercent) {
    this.partyAndOtherCommitteeContributionsPercent = partyAndOtherCommitteeContributionsPercent;
    return this;
  }

  /**
   * Get partyAndOtherCommitteeContributionsPercent
   * @return partyAndOtherCommitteeContributionsPercent
   */
  @javax.annotation.Nullable
  public BigDecimal getPartyAndOtherCommitteeContributionsPercent() {
    return partyAndOtherCommitteeContributionsPercent;
  }

  public void setPartyAndOtherCommitteeContributionsPercent(BigDecimal partyAndOtherCommitteeContributionsPercent) {
    this.partyAndOtherCommitteeContributionsPercent = partyAndOtherCommitteeContributionsPercent;
  }


  public CommitteeTotalsPerCycle partyFull(String partyFull) {
    this.partyFull = partyFull;
    return this;
  }

  /**
   * Party affiliated with a candidate or committee
   * @return partyFull
   */
  @javax.annotation.Nullable
  public String getPartyFull() {
    return partyFull;
  }

  public void setPartyFull(String partyFull) {
    this.partyFull = partyFull;
  }


  public CommitteeTotalsPerCycle pdfUrl(String pdfUrl) {
    this.pdfUrl = pdfUrl;
    return this;
  }

  /**
   * Get pdfUrl
   * @return pdfUrl
   */
  @javax.annotation.Nullable
  public String getPdfUrl() {
    return pdfUrl;
  }

  public void setPdfUrl(String pdfUrl) {
    this.pdfUrl = pdfUrl;
  }


  public CommitteeTotalsPerCycle politicalPartyCommitteeContributions(BigDecimal politicalPartyCommitteeContributions) {
    this.politicalPartyCommitteeContributions = politicalPartyCommitteeContributions;
    return this;
  }

  /**
   * Get politicalPartyCommitteeContributions
   * @return politicalPartyCommitteeContributions
   */
  @javax.annotation.Nullable
  public BigDecimal getPoliticalPartyCommitteeContributions() {
    return politicalPartyCommitteeContributions;
  }

  public void setPoliticalPartyCommitteeContributions(BigDecimal politicalPartyCommitteeContributions) {
    this.politicalPartyCommitteeContributions = politicalPartyCommitteeContributions;
  }


  public CommitteeTotalsPerCycle receipts(BigDecimal receipts) {
    this.receipts = receipts;
    return this;
  }

  /**
   * Get receipts
   * @return receipts
   */
  @javax.annotation.Nullable
  public BigDecimal getReceipts() {
    return receipts;
  }

  public void setReceipts(BigDecimal receipts) {
    this.receipts = receipts;
  }


  public CommitteeTotalsPerCycle refundedIndividualContributions(BigDecimal refundedIndividualContributions) {
    this.refundedIndividualContributions = refundedIndividualContributions;
    return this;
  }

  /**
   * Get refundedIndividualContributions
   * @return refundedIndividualContributions
   */
  @javax.annotation.Nullable
  public BigDecimal getRefundedIndividualContributions() {
    return refundedIndividualContributions;
  }

  public void setRefundedIndividualContributions(BigDecimal refundedIndividualContributions) {
    this.refundedIndividualContributions = refundedIndividualContributions;
  }


  public CommitteeTotalsPerCycle refundedOtherPoliticalCommitteeContributions(BigDecimal refundedOtherPoliticalCommitteeContributions) {
    this.refundedOtherPoliticalCommitteeContributions = refundedOtherPoliticalCommitteeContributions;
    return this;
  }

  /**
   * Get refundedOtherPoliticalCommitteeContributions
   * @return refundedOtherPoliticalCommitteeContributions
   */
  @javax.annotation.Nullable
  public BigDecimal getRefundedOtherPoliticalCommitteeContributions() {
    return refundedOtherPoliticalCommitteeContributions;
  }

  public void setRefundedOtherPoliticalCommitteeContributions(BigDecimal refundedOtherPoliticalCommitteeContributions) {
    this.refundedOtherPoliticalCommitteeContributions = refundedOtherPoliticalCommitteeContributions;
  }


  public CommitteeTotalsPerCycle refundedPoliticalPartyCommitteeContributions(BigDecimal refundedPoliticalPartyCommitteeContributions) {
    this.refundedPoliticalPartyCommitteeContributions = refundedPoliticalPartyCommitteeContributions;
    return this;
  }

  /**
   * Get refundedPoliticalPartyCommitteeContributions
   * @return refundedPoliticalPartyCommitteeContributions
   */
  @javax.annotation.Nullable
  public BigDecimal getRefundedPoliticalPartyCommitteeContributions() {
    return refundedPoliticalPartyCommitteeContributions;
  }

  public void setRefundedPoliticalPartyCommitteeContributions(BigDecimal refundedPoliticalPartyCommitteeContributions) {
    this.refundedPoliticalPartyCommitteeContributions = refundedPoliticalPartyCommitteeContributions;
  }


  public CommitteeTotalsPerCycle repaymentsLoansMadeByCandidate(BigDecimal repaymentsLoansMadeByCandidate) {
    this.repaymentsLoansMadeByCandidate = repaymentsLoansMadeByCandidate;
    return this;
  }

  /**
   * Get repaymentsLoansMadeByCandidate
   * @return repaymentsLoansMadeByCandidate
   */
  @javax.annotation.Nullable
  public BigDecimal getRepaymentsLoansMadeByCandidate() {
    return repaymentsLoansMadeByCandidate;
  }

  public void setRepaymentsLoansMadeByCandidate(BigDecimal repaymentsLoansMadeByCandidate) {
    this.repaymentsLoansMadeByCandidate = repaymentsLoansMadeByCandidate;
  }


  public CommitteeTotalsPerCycle repaymentsOtherLoans(BigDecimal repaymentsOtherLoans) {
    this.repaymentsOtherLoans = repaymentsOtherLoans;
    return this;
  }

  /**
   * Get repaymentsOtherLoans
   * @return repaymentsOtherLoans
   */
  @javax.annotation.Nullable
  public BigDecimal getRepaymentsOtherLoans() {
    return repaymentsOtherLoans;
  }

  public void setRepaymentsOtherLoans(BigDecimal repaymentsOtherLoans) {
    this.repaymentsOtherLoans = repaymentsOtherLoans;
  }


  public CommitteeTotalsPerCycle reportForm(String reportForm) {
    this.reportForm = reportForm;
    return this;
  }

  /**
   * Get reportForm
   * @return reportForm
   */
  @javax.annotation.Nullable
  public String getReportForm() {
    return reportForm;
  }

  public void setReportForm(String reportForm) {
    this.reportForm = reportForm;
  }


  public CommitteeTotalsPerCycle totalOffsetsToOperatingExpenditures(BigDecimal totalOffsetsToOperatingExpenditures) {
    this.totalOffsetsToOperatingExpenditures = totalOffsetsToOperatingExpenditures;
    return this;
  }

  /**
   * Get totalOffsetsToOperatingExpenditures
   * @return totalOffsetsToOperatingExpenditures
   */
  @javax.annotation.Nullable
  public BigDecimal getTotalOffsetsToOperatingExpenditures() {
    return totalOffsetsToOperatingExpenditures;
  }

  public void setTotalOffsetsToOperatingExpenditures(BigDecimal totalOffsetsToOperatingExpenditures) {
    this.totalOffsetsToOperatingExpenditures = totalOffsetsToOperatingExpenditures;
  }


  public CommitteeTotalsPerCycle transactionCoverageDate(LocalDate transactionCoverageDate) {
    this.transactionCoverageDate = transactionCoverageDate;
    return this;
  }

  /**
   * Get transactionCoverageDate
   * @return transactionCoverageDate
   */
  @javax.annotation.Nullable
  public LocalDate getTransactionCoverageDate() {
    return transactionCoverageDate;
  }

  public void setTransactionCoverageDate(LocalDate transactionCoverageDate) {
    this.transactionCoverageDate = transactionCoverageDate;
  }


  public CommitteeTotalsPerCycle transfersFromAffiliatedCommittee(BigDecimal transfersFromAffiliatedCommittee) {
    this.transfersFromAffiliatedCommittee = transfersFromAffiliatedCommittee;
    return this;
  }

  /**
   * Get transfersFromAffiliatedCommittee
   * @return transfersFromAffiliatedCommittee
   */
  @javax.annotation.Nullable
  public BigDecimal getTransfersFromAffiliatedCommittee() {
    return transfersFromAffiliatedCommittee;
  }

  public void setTransfersFromAffiliatedCommittee(BigDecimal transfersFromAffiliatedCommittee) {
    this.transfersFromAffiliatedCommittee = transfersFromAffiliatedCommittee;
  }


  public CommitteeTotalsPerCycle transfersToOtherAuthorizedCommittee(BigDecimal transfersToOtherAuthorizedCommittee) {
    this.transfersToOtherAuthorizedCommittee = transfersToOtherAuthorizedCommittee;
    return this;
  }

  /**
   * Get transfersToOtherAuthorizedCommittee
   * @return transfersToOtherAuthorizedCommittee
   */
  @javax.annotation.Nullable
  public BigDecimal getTransfersToOtherAuthorizedCommittee() {
    return transfersToOtherAuthorizedCommittee;
  }

  public void setTransfersToOtherAuthorizedCommittee(BigDecimal transfersToOtherAuthorizedCommittee) {
    this.transfersToOtherAuthorizedCommittee = transfersToOtherAuthorizedCommittee;
  }


  public CommitteeTotalsPerCycle treasurerName(String treasurerName) {
    this.treasurerName = treasurerName;
    return this;
  }

  /**
   * Name of the Committee&#39;s treasurer. If multiple treasurers for the committee, the most recent treasurer will be shown.
   * @return treasurerName
   */
  @javax.annotation.Nullable
  public String getTreasurerName() {
    return treasurerName;
  }

  public void setTreasurerName(String treasurerName) {
    this.treasurerName = treasurerName;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CommitteeTotalsPerCycle committeeTotalsPerCycle = (CommitteeTotalsPerCycle) o;
    return Objects.equals(this.candidateContribution, committeeTotalsPerCycle.candidateContribution) &&
        Objects.equals(this.cashOnHandBeginningPeriod, committeeTotalsPerCycle.cashOnHandBeginningPeriod) &&
        Objects.equals(this.committeeDesignation, committeeTotalsPerCycle.committeeDesignation) &&
        Objects.equals(this.committeeDesignationFull, committeeTotalsPerCycle.committeeDesignationFull) &&
        Objects.equals(this.committeeId, committeeTotalsPerCycle.committeeId) &&
        Objects.equals(this.committeeName, committeeTotalsPerCycle.committeeName) &&
        Objects.equals(this.committeeState, committeeTotalsPerCycle.committeeState) &&
        Objects.equals(this.committeeType, committeeTotalsPerCycle.committeeType) &&
        Objects.equals(this.committeeTypeFull, committeeTotalsPerCycle.committeeTypeFull) &&
        Objects.equals(this.contributionRefunds, committeeTotalsPerCycle.contributionRefunds) &&
        Objects.equals(this.contributions, committeeTotalsPerCycle.contributions) &&
        Objects.equals(this.contributionsIeAndPartyExpendituresMadePercent, committeeTotalsPerCycle.contributionsIeAndPartyExpendituresMadePercent) &&
        Objects.equals(this.coverageEndDate, committeeTotalsPerCycle.coverageEndDate) &&
        Objects.equals(this.coverageStartDate, committeeTotalsPerCycle.coverageStartDate) &&
        Objects.equals(this.cycle, committeeTotalsPerCycle.cycle) &&
        Objects.equals(this.disbursements, committeeTotalsPerCycle.disbursements) &&
        Objects.equals(this.exemptLegalAccountingDisbursement, committeeTotalsPerCycle.exemptLegalAccountingDisbursement) &&
        Objects.equals(this.federalFunds, committeeTotalsPerCycle.federalFunds) &&
        Objects.equals(this.filingFrequency, committeeTotalsPerCycle.filingFrequency) &&
        Objects.equals(this.filingFrequencyFull, committeeTotalsPerCycle.filingFrequencyFull) &&
        Objects.equals(this.firstF1Date, committeeTotalsPerCycle.firstF1Date) &&
        Objects.equals(this.firstFileDate, committeeTotalsPerCycle.firstFileDate) &&
        Objects.equals(this.fundraisingDisbursements, committeeTotalsPerCycle.fundraisingDisbursements) &&
        Objects.equals(this.individualContributions, committeeTotalsPerCycle.individualContributions) &&
        Objects.equals(this.individualContributionsPercent, committeeTotalsPerCycle.individualContributionsPercent) &&
        Objects.equals(this.individualItemizedContributions, committeeTotalsPerCycle.individualItemizedContributions) &&
        Objects.equals(this.individualUnitemizedContributions, committeeTotalsPerCycle.individualUnitemizedContributions) &&
        Objects.equals(this.lastBeginningImageNumber, committeeTotalsPerCycle.lastBeginningImageNumber) &&
        Objects.equals(this.lastCashOnHandEndPeriod, committeeTotalsPerCycle.lastCashOnHandEndPeriod) &&
        Objects.equals(this.lastDebtsOwedByCommittee, committeeTotalsPerCycle.lastDebtsOwedByCommittee) &&
        Objects.equals(this.lastDebtsOwedToCommittee, committeeTotalsPerCycle.lastDebtsOwedToCommittee) &&
        Objects.equals(this.lastReportTypeFull, committeeTotalsPerCycle.lastReportTypeFull) &&
        Objects.equals(this.lastReportYear, committeeTotalsPerCycle.lastReportYear) &&
        Objects.equals(this.loanRepaymentsMade, committeeTotalsPerCycle.loanRepaymentsMade) &&
        Objects.equals(this.loansReceived, committeeTotalsPerCycle.loansReceived) &&
        Objects.equals(this.loansReceivedFromCandidate, committeeTotalsPerCycle.loansReceivedFromCandidate) &&
        Objects.equals(this.netContributions, committeeTotalsPerCycle.netContributions) &&
        Objects.equals(this.netOperatingExpenditures, committeeTotalsPerCycle.netOperatingExpenditures) &&
        Objects.equals(this.offsetsToFundraisingExpenditures, committeeTotalsPerCycle.offsetsToFundraisingExpenditures) &&
        Objects.equals(this.offsetsToLegalAccounting, committeeTotalsPerCycle.offsetsToLegalAccounting) &&
        Objects.equals(this.offsetsToOperatingExpenditures, committeeTotalsPerCycle.offsetsToOperatingExpenditures) &&
        Objects.equals(this.operatingExpenditures, committeeTotalsPerCycle.operatingExpenditures) &&
        Objects.equals(this.operatingExpendituresPercent, committeeTotalsPerCycle.operatingExpendituresPercent) &&
        Objects.equals(this.organizationType, committeeTotalsPerCycle.organizationType) &&
        Objects.equals(this.organizationTypeFull, committeeTotalsPerCycle.organizationTypeFull) &&
        Objects.equals(this.otherDisbursements, committeeTotalsPerCycle.otherDisbursements) &&
        Objects.equals(this.otherLoansReceived, committeeTotalsPerCycle.otherLoansReceived) &&
        Objects.equals(this.otherPoliticalCommitteeContributions, committeeTotalsPerCycle.otherPoliticalCommitteeContributions) &&
        Objects.equals(this.otherReceipts, committeeTotalsPerCycle.otherReceipts) &&
        Objects.equals(this.partyAndOtherCommitteeContributionsPercent, committeeTotalsPerCycle.partyAndOtherCommitteeContributionsPercent) &&
        Objects.equals(this.partyFull, committeeTotalsPerCycle.partyFull) &&
        Objects.equals(this.pdfUrl, committeeTotalsPerCycle.pdfUrl) &&
        Objects.equals(this.politicalPartyCommitteeContributions, committeeTotalsPerCycle.politicalPartyCommitteeContributions) &&
        Objects.equals(this.receipts, committeeTotalsPerCycle.receipts) &&
        Objects.equals(this.refundedIndividualContributions, committeeTotalsPerCycle.refundedIndividualContributions) &&
        Objects.equals(this.refundedOtherPoliticalCommitteeContributions, committeeTotalsPerCycle.refundedOtherPoliticalCommitteeContributions) &&
        Objects.equals(this.refundedPoliticalPartyCommitteeContributions, committeeTotalsPerCycle.refundedPoliticalPartyCommitteeContributions) &&
        Objects.equals(this.repaymentsLoansMadeByCandidate, committeeTotalsPerCycle.repaymentsLoansMadeByCandidate) &&
        Objects.equals(this.repaymentsOtherLoans, committeeTotalsPerCycle.repaymentsOtherLoans) &&
        Objects.equals(this.reportForm, committeeTotalsPerCycle.reportForm) &&
        Objects.equals(this.totalOffsetsToOperatingExpenditures, committeeTotalsPerCycle.totalOffsetsToOperatingExpenditures) &&
        Objects.equals(this.transactionCoverageDate, committeeTotalsPerCycle.transactionCoverageDate) &&
        Objects.equals(this.transfersFromAffiliatedCommittee, committeeTotalsPerCycle.transfersFromAffiliatedCommittee) &&
        Objects.equals(this.transfersToOtherAuthorizedCommittee, committeeTotalsPerCycle.transfersToOtherAuthorizedCommittee) &&
        Objects.equals(this.treasurerName, committeeTotalsPerCycle.treasurerName);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(candidateContribution, cashOnHandBeginningPeriod, committeeDesignation, committeeDesignationFull, committeeId, committeeName, committeeState, committeeType, committeeTypeFull, contributionRefunds, contributions, contributionsIeAndPartyExpendituresMadePercent, coverageEndDate, coverageStartDate, cycle, disbursements, exemptLegalAccountingDisbursement, federalFunds, filingFrequency, filingFrequencyFull, firstF1Date, firstFileDate, fundraisingDisbursements, individualContributions, individualContributionsPercent, individualItemizedContributions, individualUnitemizedContributions, lastBeginningImageNumber, lastCashOnHandEndPeriod, lastDebtsOwedByCommittee, lastDebtsOwedToCommittee, lastReportTypeFull, lastReportYear, loanRepaymentsMade, loansReceived, loansReceivedFromCandidate, netContributions, netOperatingExpenditures, offsetsToFundraisingExpenditures, offsetsToLegalAccounting, offsetsToOperatingExpenditures, operatingExpenditures, operatingExpendituresPercent, organizationType, organizationTypeFull, otherDisbursements, otherLoansReceived, otherPoliticalCommitteeContributions, otherReceipts, partyAndOtherCommitteeContributionsPercent, partyFull, pdfUrl, politicalPartyCommitteeContributions, receipts, refundedIndividualContributions, refundedOtherPoliticalCommitteeContributions, refundedPoliticalPartyCommitteeContributions, repaymentsLoansMadeByCandidate, repaymentsOtherLoans, reportForm, totalOffsetsToOperatingExpenditures, transactionCoverageDate, transfersFromAffiliatedCommittee, transfersToOtherAuthorizedCommittee, treasurerName);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CommitteeTotalsPerCycle {\n");
    sb.append("    candidateContribution: ").append(toIndentedString(candidateContribution)).append("\n");
    sb.append("    cashOnHandBeginningPeriod: ").append(toIndentedString(cashOnHandBeginningPeriod)).append("\n");
    sb.append("    committeeDesignation: ").append(toIndentedString(committeeDesignation)).append("\n");
    sb.append("    committeeDesignationFull: ").append(toIndentedString(committeeDesignationFull)).append("\n");
    sb.append("    committeeId: ").append(toIndentedString(committeeId)).append("\n");
    sb.append("    committeeName: ").append(toIndentedString(committeeName)).append("\n");
    sb.append("    committeeState: ").append(toIndentedString(committeeState)).append("\n");
    sb.append("    committeeType: ").append(toIndentedString(committeeType)).append("\n");
    sb.append("    committeeTypeFull: ").append(toIndentedString(committeeTypeFull)).append("\n");
    sb.append("    contributionRefunds: ").append(toIndentedString(contributionRefunds)).append("\n");
    sb.append("    contributions: ").append(toIndentedString(contributions)).append("\n");
    sb.append("    contributionsIeAndPartyExpendituresMadePercent: ").append(toIndentedString(contributionsIeAndPartyExpendituresMadePercent)).append("\n");
    sb.append("    coverageEndDate: ").append(toIndentedString(coverageEndDate)).append("\n");
    sb.append("    coverageStartDate: ").append(toIndentedString(coverageStartDate)).append("\n");
    sb.append("    cycle: ").append(toIndentedString(cycle)).append("\n");
    sb.append("    disbursements: ").append(toIndentedString(disbursements)).append("\n");
    sb.append("    exemptLegalAccountingDisbursement: ").append(toIndentedString(exemptLegalAccountingDisbursement)).append("\n");
    sb.append("    federalFunds: ").append(toIndentedString(federalFunds)).append("\n");
    sb.append("    filingFrequency: ").append(toIndentedString(filingFrequency)).append("\n");
    sb.append("    filingFrequencyFull: ").append(toIndentedString(filingFrequencyFull)).append("\n");
    sb.append("    firstF1Date: ").append(toIndentedString(firstF1Date)).append("\n");
    sb.append("    firstFileDate: ").append(toIndentedString(firstFileDate)).append("\n");
    sb.append("    fundraisingDisbursements: ").append(toIndentedString(fundraisingDisbursements)).append("\n");
    sb.append("    individualContributions: ").append(toIndentedString(individualContributions)).append("\n");
    sb.append("    individualContributionsPercent: ").append(toIndentedString(individualContributionsPercent)).append("\n");
    sb.append("    individualItemizedContributions: ").append(toIndentedString(individualItemizedContributions)).append("\n");
    sb.append("    individualUnitemizedContributions: ").append(toIndentedString(individualUnitemizedContributions)).append("\n");
    sb.append("    lastBeginningImageNumber: ").append(toIndentedString(lastBeginningImageNumber)).append("\n");
    sb.append("    lastCashOnHandEndPeriod: ").append(toIndentedString(lastCashOnHandEndPeriod)).append("\n");
    sb.append("    lastDebtsOwedByCommittee: ").append(toIndentedString(lastDebtsOwedByCommittee)).append("\n");
    sb.append("    lastDebtsOwedToCommittee: ").append(toIndentedString(lastDebtsOwedToCommittee)).append("\n");
    sb.append("    lastReportTypeFull: ").append(toIndentedString(lastReportTypeFull)).append("\n");
    sb.append("    lastReportYear: ").append(toIndentedString(lastReportYear)).append("\n");
    sb.append("    loanRepaymentsMade: ").append(toIndentedString(loanRepaymentsMade)).append("\n");
    sb.append("    loansReceived: ").append(toIndentedString(loansReceived)).append("\n");
    sb.append("    loansReceivedFromCandidate: ").append(toIndentedString(loansReceivedFromCandidate)).append("\n");
    sb.append("    netContributions: ").append(toIndentedString(netContributions)).append("\n");
    sb.append("    netOperatingExpenditures: ").append(toIndentedString(netOperatingExpenditures)).append("\n");
    sb.append("    offsetsToFundraisingExpenditures: ").append(toIndentedString(offsetsToFundraisingExpenditures)).append("\n");
    sb.append("    offsetsToLegalAccounting: ").append(toIndentedString(offsetsToLegalAccounting)).append("\n");
    sb.append("    offsetsToOperatingExpenditures: ").append(toIndentedString(offsetsToOperatingExpenditures)).append("\n");
    sb.append("    operatingExpenditures: ").append(toIndentedString(operatingExpenditures)).append("\n");
    sb.append("    operatingExpendituresPercent: ").append(toIndentedString(operatingExpendituresPercent)).append("\n");
    sb.append("    organizationType: ").append(toIndentedString(organizationType)).append("\n");
    sb.append("    organizationTypeFull: ").append(toIndentedString(organizationTypeFull)).append("\n");
    sb.append("    otherDisbursements: ").append(toIndentedString(otherDisbursements)).append("\n");
    sb.append("    otherLoansReceived: ").append(toIndentedString(otherLoansReceived)).append("\n");
    sb.append("    otherPoliticalCommitteeContributions: ").append(toIndentedString(otherPoliticalCommitteeContributions)).append("\n");
    sb.append("    otherReceipts: ").append(toIndentedString(otherReceipts)).append("\n");
    sb.append("    partyAndOtherCommitteeContributionsPercent: ").append(toIndentedString(partyAndOtherCommitteeContributionsPercent)).append("\n");
    sb.append("    partyFull: ").append(toIndentedString(partyFull)).append("\n");
    sb.append("    pdfUrl: ").append(toIndentedString(pdfUrl)).append("\n");
    sb.append("    politicalPartyCommitteeContributions: ").append(toIndentedString(politicalPartyCommitteeContributions)).append("\n");
    sb.append("    receipts: ").append(toIndentedString(receipts)).append("\n");
    sb.append("    refundedIndividualContributions: ").append(toIndentedString(refundedIndividualContributions)).append("\n");
    sb.append("    refundedOtherPoliticalCommitteeContributions: ").append(toIndentedString(refundedOtherPoliticalCommitteeContributions)).append("\n");
    sb.append("    refundedPoliticalPartyCommitteeContributions: ").append(toIndentedString(refundedPoliticalPartyCommitteeContributions)).append("\n");
    sb.append("    repaymentsLoansMadeByCandidate: ").append(toIndentedString(repaymentsLoansMadeByCandidate)).append("\n");
    sb.append("    repaymentsOtherLoans: ").append(toIndentedString(repaymentsOtherLoans)).append("\n");
    sb.append("    reportForm: ").append(toIndentedString(reportForm)).append("\n");
    sb.append("    totalOffsetsToOperatingExpenditures: ").append(toIndentedString(totalOffsetsToOperatingExpenditures)).append("\n");
    sb.append("    transactionCoverageDate: ").append(toIndentedString(transactionCoverageDate)).append("\n");
    sb.append("    transfersFromAffiliatedCommittee: ").append(toIndentedString(transfersFromAffiliatedCommittee)).append("\n");
    sb.append("    transfersToOtherAuthorizedCommittee: ").append(toIndentedString(transfersToOtherAuthorizedCommittee)).append("\n");
    sb.append("    treasurerName: ").append(toIndentedString(treasurerName)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("candidate_contribution");
    openapiFields.add("cash_on_hand_beginning_period");
    openapiFields.add("committee_designation");
    openapiFields.add("committee_designation_full");
    openapiFields.add("committee_id");
    openapiFields.add("committee_name");
    openapiFields.add("committee_state");
    openapiFields.add("committee_type");
    openapiFields.add("committee_type_full");
    openapiFields.add("contribution_refunds");
    openapiFields.add("contributions");
    openapiFields.add("contributions_ie_and_party_expenditures_made_percent");
    openapiFields.add("coverage_end_date");
    openapiFields.add("coverage_start_date");
    openapiFields.add("cycle");
    openapiFields.add("disbursements");
    openapiFields.add("exempt_legal_accounting_disbursement");
    openapiFields.add("federal_funds");
    openapiFields.add("filing_frequency");
    openapiFields.add("filing_frequency_full");
    openapiFields.add("first_f1_date");
    openapiFields.add("first_file_date");
    openapiFields.add("fundraising_disbursements");
    openapiFields.add("individual_contributions");
    openapiFields.add("individual_contributions_percent");
    openapiFields.add("individual_itemized_contributions");
    openapiFields.add("individual_unitemized_contributions");
    openapiFields.add("last_beginning_image_number");
    openapiFields.add("last_cash_on_hand_end_period");
    openapiFields.add("last_debts_owed_by_committee");
    openapiFields.add("last_debts_owed_to_committee");
    openapiFields.add("last_report_type_full");
    openapiFields.add("last_report_year");
    openapiFields.add("loan_repayments_made");
    openapiFields.add("loans_received");
    openapiFields.add("loans_received_from_candidate");
    openapiFields.add("net_contributions");
    openapiFields.add("net_operating_expenditures");
    openapiFields.add("offsets_to_fundraising_expenditures");
    openapiFields.add("offsets_to_legal_accounting");
    openapiFields.add("offsets_to_operating_expenditures");
    openapiFields.add("operating_expenditures");
    openapiFields.add("operating_expenditures_percent");
    openapiFields.add("organization_type");
    openapiFields.add("organization_type_full");
    openapiFields.add("other_disbursements");
    openapiFields.add("other_loans_received");
    openapiFields.add("other_political_committee_contributions");
    openapiFields.add("other_receipts");
    openapiFields.add("party_and_other_committee_contributions_percent");
    openapiFields.add("party_full");
    openapiFields.add("pdf_url");
    openapiFields.add("political_party_committee_contributions");
    openapiFields.add("receipts");
    openapiFields.add("refunded_individual_contributions");
    openapiFields.add("refunded_other_political_committee_contributions");
    openapiFields.add("refunded_political_party_committee_contributions");
    openapiFields.add("repayments_loans_made_by_candidate");
    openapiFields.add("repayments_other_loans");
    openapiFields.add("report_form");
    openapiFields.add("total_offsets_to_operating_expenditures");
    openapiFields.add("transaction_coverage_date");
    openapiFields.add("transfers_from_affiliated_committee");
    openapiFields.add("transfers_to_other_authorized_committee");
    openapiFields.add("treasurer_name");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("cycle");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to CommitteeTotalsPerCycle
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!CommitteeTotalsPerCycle.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CommitteeTotalsPerCycle is not found in the empty JSON string", CommitteeTotalsPerCycle.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!CommitteeTotalsPerCycle.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CommitteeTotalsPerCycle` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : CommitteeTotalsPerCycle.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("committee_designation") != null && !jsonObj.get("committee_designation").isJsonNull()) && !jsonObj.get("committee_designation").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `committee_designation` to be a primitive type in the JSON string but got `%s`", jsonObj.get("committee_designation").toString()));
      }
      if ((jsonObj.get("committee_designation_full") != null && !jsonObj.get("committee_designation_full").isJsonNull()) && !jsonObj.get("committee_designation_full").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `committee_designation_full` to be a primitive type in the JSON string but got `%s`", jsonObj.get("committee_designation_full").toString()));
      }
      if ((jsonObj.get("committee_id") != null && !jsonObj.get("committee_id").isJsonNull()) && !jsonObj.get("committee_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `committee_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("committee_id").toString()));
      }
      if ((jsonObj.get("committee_name") != null && !jsonObj.get("committee_name").isJsonNull()) && !jsonObj.get("committee_name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `committee_name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("committee_name").toString()));
      }
      if ((jsonObj.get("committee_state") != null && !jsonObj.get("committee_state").isJsonNull()) && !jsonObj.get("committee_state").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `committee_state` to be a primitive type in the JSON string but got `%s`", jsonObj.get("committee_state").toString()));
      }
      if ((jsonObj.get("committee_type") != null && !jsonObj.get("committee_type").isJsonNull()) && !jsonObj.get("committee_type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `committee_type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("committee_type").toString()));
      }
      if ((jsonObj.get("committee_type_full") != null && !jsonObj.get("committee_type_full").isJsonNull()) && !jsonObj.get("committee_type_full").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `committee_type_full` to be a primitive type in the JSON string but got `%s`", jsonObj.get("committee_type_full").toString()));
      }
      if ((jsonObj.get("filing_frequency") != null && !jsonObj.get("filing_frequency").isJsonNull()) && !jsonObj.get("filing_frequency").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `filing_frequency` to be a primitive type in the JSON string but got `%s`", jsonObj.get("filing_frequency").toString()));
      }
      if ((jsonObj.get("filing_frequency_full") != null && !jsonObj.get("filing_frequency_full").isJsonNull()) && !jsonObj.get("filing_frequency_full").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `filing_frequency_full` to be a primitive type in the JSON string but got `%s`", jsonObj.get("filing_frequency_full").toString()));
      }
      if ((jsonObj.get("last_beginning_image_number") != null && !jsonObj.get("last_beginning_image_number").isJsonNull()) && !jsonObj.get("last_beginning_image_number").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `last_beginning_image_number` to be a primitive type in the JSON string but got `%s`", jsonObj.get("last_beginning_image_number").toString()));
      }
      if ((jsonObj.get("last_report_type_full") != null && !jsonObj.get("last_report_type_full").isJsonNull()) && !jsonObj.get("last_report_type_full").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `last_report_type_full` to be a primitive type in the JSON string but got `%s`", jsonObj.get("last_report_type_full").toString()));
      }
      if ((jsonObj.get("organization_type") != null && !jsonObj.get("organization_type").isJsonNull()) && !jsonObj.get("organization_type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `organization_type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("organization_type").toString()));
      }
      if ((jsonObj.get("organization_type_full") != null && !jsonObj.get("organization_type_full").isJsonNull()) && !jsonObj.get("organization_type_full").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `organization_type_full` to be a primitive type in the JSON string but got `%s`", jsonObj.get("organization_type_full").toString()));
      }
      if ((jsonObj.get("party_full") != null && !jsonObj.get("party_full").isJsonNull()) && !jsonObj.get("party_full").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `party_full` to be a primitive type in the JSON string but got `%s`", jsonObj.get("party_full").toString()));
      }
      if ((jsonObj.get("pdf_url") != null && !jsonObj.get("pdf_url").isJsonNull()) && !jsonObj.get("pdf_url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `pdf_url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("pdf_url").toString()));
      }
      if ((jsonObj.get("report_form") != null && !jsonObj.get("report_form").isJsonNull()) && !jsonObj.get("report_form").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `report_form` to be a primitive type in the JSON string but got `%s`", jsonObj.get("report_form").toString()));
      }
      if ((jsonObj.get("treasurer_name") != null && !jsonObj.get("treasurer_name").isJsonNull()) && !jsonObj.get("treasurer_name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `treasurer_name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("treasurer_name").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CommitteeTotalsPerCycle.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CommitteeTotalsPerCycle' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CommitteeTotalsPerCycle> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CommitteeTotalsPerCycle.class));

       return (TypeAdapter<T>) new TypeAdapter<CommitteeTotalsPerCycle>() {
           @Override
           public void write(JsonWriter out, CommitteeTotalsPerCycle value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CommitteeTotalsPerCycle read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of CommitteeTotalsPerCycle given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of CommitteeTotalsPerCycle
   * @throws IOException if the JSON string is invalid with respect to CommitteeTotalsPerCycle
   */
  public static CommitteeTotalsPerCycle fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CommitteeTotalsPerCycle.class);
  }

  /**
   * Convert an instance of CommitteeTotalsPerCycle to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

