/*
 * OpenFEC
 * This application programming interface (API) allows you to explore the way candidates and committees fund their campaigns.    The Federal Election Commission (FEC) API is a RESTful web service supporting full-text and field-specific searches on FEC data. [Bulk downloads](https://www.fec.gov/data/advanced/?tab=bulk-data) are available on the current site. Information is tied to the underlying forms by file ID and image ID. Data is updated nightly.    There are a lot of data, and a good place to start is to use search to find interesting candidates and committees. Then, you can use their IDs to find report or line item details with the other endpoints. If you are interested in individual donors, check out contributor information in the `/schedule_a/` endpoints.    <b class=\"body\" id=\"getting_started_head\">Getting started with the openFEC API</b><br>    If you would like to use the FEC's API programmatically, you can sign up for your own API key using our form. Alternatively, you can still try out our API without an API key by using the web interface and using DEMO_KEY. Note that when you use the openFEC API you are subject to the [Terms of Service](https://github.com/fecgov/FEC/blob/master/TERMS-OF-SERVICE.md) and [Acceptable Use policy](https://github.com/fecgov/FEC/blob/master/ACCEPTABLE-USE-POLICY.md).    Signing up for an API key will enable you to place up to 1,000 calls an hour. Each call is limited to 100 results per page. You can email questions, comments or a request to get a key for 7,200 calls an hour (120 calls per minute) to <a href=\"mailto:APIinfo@fec.gov\">APIinfo@fec.gov</a>. You can also ask questions and discuss the data in a community led [group](https://groups.google.com/forum/#!forum/fec-data).    The model definitions and schema are available at [/swagger](/swagger/). This is useful for making wrappers and exploring the data.    A few restrictions limit the way you can use FEC data. For example, you canâ€™t use contributor lists for commercial purposes or to solicit donations. [Learn more here](https://www.fec.gov/updates/sale-or-use-contributor-information/).    [Inspect our source code](https://github.com/fecgov/openFEC). We welcome issues and pull requests!    <p><br></p> <h2 class=\"title\" id=\"signup_head\">Sign up for an API key</h2> <div id=\"apidatagov_signup\">Loading signup form...</div>
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.LocalDate;
import java.util.Arrays;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * EntityReceiptDisbursementTotals
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:02:12.812386-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class EntityReceiptDisbursementTotals {
  public static final String SERIALIZED_NAME_CUMULATIVE_CANDIDATE_DISBURSEMENTS = "cumulative_candidate_disbursements";
  @SerializedName(SERIALIZED_NAME_CUMULATIVE_CANDIDATE_DISBURSEMENTS)
  private Float cumulativeCandidateDisbursements;

  public static final String SERIALIZED_NAME_CUMULATIVE_CANDIDATE_RECEIPTS = "cumulative_candidate_receipts";
  @SerializedName(SERIALIZED_NAME_CUMULATIVE_CANDIDATE_RECEIPTS)
  private Float cumulativeCandidateReceipts;

  public static final String SERIALIZED_NAME_CUMULATIVE_PAC_DISBURSEMENTS = "cumulative_pac_disbursements";
  @SerializedName(SERIALIZED_NAME_CUMULATIVE_PAC_DISBURSEMENTS)
  private Float cumulativePacDisbursements;

  public static final String SERIALIZED_NAME_CUMULATIVE_PAC_RECEIPTS = "cumulative_pac_receipts";
  @SerializedName(SERIALIZED_NAME_CUMULATIVE_PAC_RECEIPTS)
  private Float cumulativePacReceipts;

  public static final String SERIALIZED_NAME_CUMULATIVE_PARTY_DISBURSEMENTS = "cumulative_party_disbursements";
  @SerializedName(SERIALIZED_NAME_CUMULATIVE_PARTY_DISBURSEMENTS)
  private Float cumulativePartyDisbursements;

  public static final String SERIALIZED_NAME_CUMULATIVE_PARTY_RECEIPTS = "cumulative_party_receipts";
  @SerializedName(SERIALIZED_NAME_CUMULATIVE_PARTY_RECEIPTS)
  private Float cumulativePartyReceipts;

  public static final String SERIALIZED_NAME_CYCLE = "cycle";
  @SerializedName(SERIALIZED_NAME_CYCLE)
  private Integer cycle;

  public static final String SERIALIZED_NAME_END_DATE = "end_date";
  @SerializedName(SERIALIZED_NAME_END_DATE)
  private LocalDate endDate;

  public EntityReceiptDisbursementTotals() {
  }

  public EntityReceiptDisbursementTotals cumulativeCandidateDisbursements(Float cumulativeCandidateDisbursements) {
    this.cumulativeCandidateDisbursements = cumulativeCandidateDisbursements;
    return this;
  }

  /**
   * Cumulative candidate disbursements in a two year period, adjusted to avoid double counting.
   * @return cumulativeCandidateDisbursements
   */
  @javax.annotation.Nullable
  public Float getCumulativeCandidateDisbursements() {
    return cumulativeCandidateDisbursements;
  }

  public void setCumulativeCandidateDisbursements(Float cumulativeCandidateDisbursements) {
    this.cumulativeCandidateDisbursements = cumulativeCandidateDisbursements;
  }


  public EntityReceiptDisbursementTotals cumulativeCandidateReceipts(Float cumulativeCandidateReceipts) {
    this.cumulativeCandidateReceipts = cumulativeCandidateReceipts;
    return this;
  }

  /**
   * Cumulative candidate receipts in a two year period, adjusted to avoid double counting.
   * @return cumulativeCandidateReceipts
   */
  @javax.annotation.Nullable
  public Float getCumulativeCandidateReceipts() {
    return cumulativeCandidateReceipts;
  }

  public void setCumulativeCandidateReceipts(Float cumulativeCandidateReceipts) {
    this.cumulativeCandidateReceipts = cumulativeCandidateReceipts;
  }


  public EntityReceiptDisbursementTotals cumulativePacDisbursements(Float cumulativePacDisbursements) {
    this.cumulativePacDisbursements = cumulativePacDisbursements;
    return this;
  }

  /**
   * Cumulative PAC disbursements in a two year period, adjusted to avoid double counting.
   * @return cumulativePacDisbursements
   */
  @javax.annotation.Nullable
  public Float getCumulativePacDisbursements() {
    return cumulativePacDisbursements;
  }

  public void setCumulativePacDisbursements(Float cumulativePacDisbursements) {
    this.cumulativePacDisbursements = cumulativePacDisbursements;
  }


  public EntityReceiptDisbursementTotals cumulativePacReceipts(Float cumulativePacReceipts) {
    this.cumulativePacReceipts = cumulativePacReceipts;
    return this;
  }

  /**
   * Cumulative PAC recipts in a two year period, adjusted to avoid double counting.
   * @return cumulativePacReceipts
   */
  @javax.annotation.Nullable
  public Float getCumulativePacReceipts() {
    return cumulativePacReceipts;
  }

  public void setCumulativePacReceipts(Float cumulativePacReceipts) {
    this.cumulativePacReceipts = cumulativePacReceipts;
  }


  public EntityReceiptDisbursementTotals cumulativePartyDisbursements(Float cumulativePartyDisbursements) {
    this.cumulativePartyDisbursements = cumulativePartyDisbursements;
    return this;
  }

  /**
   * Cumulative party disbursements in a two year period, adjusted to avoid double counting.
   * @return cumulativePartyDisbursements
   */
  @javax.annotation.Nullable
  public Float getCumulativePartyDisbursements() {
    return cumulativePartyDisbursements;
  }

  public void setCumulativePartyDisbursements(Float cumulativePartyDisbursements) {
    this.cumulativePartyDisbursements = cumulativePartyDisbursements;
  }


  public EntityReceiptDisbursementTotals cumulativePartyReceipts(Float cumulativePartyReceipts) {
    this.cumulativePartyReceipts = cumulativePartyReceipts;
    return this;
  }

  /**
   * Cumulative party receipts in a two year period, adjusted to avoid double counting.
   * @return cumulativePartyReceipts
   */
  @javax.annotation.Nullable
  public Float getCumulativePartyReceipts() {
    return cumulativePartyReceipts;
  }

  public void setCumulativePartyReceipts(Float cumulativePartyReceipts) {
    this.cumulativePartyReceipts = cumulativePartyReceipts;
  }


  public EntityReceiptDisbursementTotals cycle(Integer cycle) {
    this.cycle = cycle;
    return this;
  }

  /**
   *  Filter records to only those that were applicable to a given two-year period.The cycle begins with an odd year and is named for its ending, even year. 
   * @return cycle
   */
  @javax.annotation.Nullable
  public Integer getCycle() {
    return cycle;
  }

  public void setCycle(Integer cycle) {
    this.cycle = cycle;
  }


  public EntityReceiptDisbursementTotals endDate(LocalDate endDate) {
    this.endDate = endDate;
    return this;
  }

  /**
   * Get endDate
   * @return endDate
   */
  @javax.annotation.Nullable
  public LocalDate getEndDate() {
    return endDate;
  }

  public void setEndDate(LocalDate endDate) {
    this.endDate = endDate;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    EntityReceiptDisbursementTotals entityReceiptDisbursementTotals = (EntityReceiptDisbursementTotals) o;
    return Objects.equals(this.cumulativeCandidateDisbursements, entityReceiptDisbursementTotals.cumulativeCandidateDisbursements) &&
        Objects.equals(this.cumulativeCandidateReceipts, entityReceiptDisbursementTotals.cumulativeCandidateReceipts) &&
        Objects.equals(this.cumulativePacDisbursements, entityReceiptDisbursementTotals.cumulativePacDisbursements) &&
        Objects.equals(this.cumulativePacReceipts, entityReceiptDisbursementTotals.cumulativePacReceipts) &&
        Objects.equals(this.cumulativePartyDisbursements, entityReceiptDisbursementTotals.cumulativePartyDisbursements) &&
        Objects.equals(this.cumulativePartyReceipts, entityReceiptDisbursementTotals.cumulativePartyReceipts) &&
        Objects.equals(this.cycle, entityReceiptDisbursementTotals.cycle) &&
        Objects.equals(this.endDate, entityReceiptDisbursementTotals.endDate);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(cumulativeCandidateDisbursements, cumulativeCandidateReceipts, cumulativePacDisbursements, cumulativePacReceipts, cumulativePartyDisbursements, cumulativePartyReceipts, cycle, endDate);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class EntityReceiptDisbursementTotals {\n");
    sb.append("    cumulativeCandidateDisbursements: ").append(toIndentedString(cumulativeCandidateDisbursements)).append("\n");
    sb.append("    cumulativeCandidateReceipts: ").append(toIndentedString(cumulativeCandidateReceipts)).append("\n");
    sb.append("    cumulativePacDisbursements: ").append(toIndentedString(cumulativePacDisbursements)).append("\n");
    sb.append("    cumulativePacReceipts: ").append(toIndentedString(cumulativePacReceipts)).append("\n");
    sb.append("    cumulativePartyDisbursements: ").append(toIndentedString(cumulativePartyDisbursements)).append("\n");
    sb.append("    cumulativePartyReceipts: ").append(toIndentedString(cumulativePartyReceipts)).append("\n");
    sb.append("    cycle: ").append(toIndentedString(cycle)).append("\n");
    sb.append("    endDate: ").append(toIndentedString(endDate)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("cumulative_candidate_disbursements");
    openapiFields.add("cumulative_candidate_receipts");
    openapiFields.add("cumulative_pac_disbursements");
    openapiFields.add("cumulative_pac_receipts");
    openapiFields.add("cumulative_party_disbursements");
    openapiFields.add("cumulative_party_receipts");
    openapiFields.add("cycle");
    openapiFields.add("end_date");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to EntityReceiptDisbursementTotals
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!EntityReceiptDisbursementTotals.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in EntityReceiptDisbursementTotals is not found in the empty JSON string", EntityReceiptDisbursementTotals.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!EntityReceiptDisbursementTotals.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `EntityReceiptDisbursementTotals` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!EntityReceiptDisbursementTotals.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'EntityReceiptDisbursementTotals' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<EntityReceiptDisbursementTotals> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(EntityReceiptDisbursementTotals.class));

       return (TypeAdapter<T>) new TypeAdapter<EntityReceiptDisbursementTotals>() {
           @Override
           public void write(JsonWriter out, EntityReceiptDisbursementTotals value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public EntityReceiptDisbursementTotals read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of EntityReceiptDisbursementTotals given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of EntityReceiptDisbursementTotals
   * @throws IOException if the JSON string is invalid with respect to EntityReceiptDisbursementTotals
   */
  public static EntityReceiptDisbursementTotals fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, EntityReceiptDisbursementTotals.class);
  }

  /**
   * Convert an instance of EntityReceiptDisbursementTotals to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

