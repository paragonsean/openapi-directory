/*
 * OpenFEC
 * This application programming interface (API) allows you to explore the way candidates and committees fund their campaigns.    The Federal Election Commission (FEC) API is a RESTful web service supporting full-text and field-specific searches on FEC data. [Bulk downloads](https://www.fec.gov/data/advanced/?tab=bulk-data) are available on the current site. Information is tied to the underlying forms by file ID and image ID. Data is updated nightly.    There are a lot of data, and a good place to start is to use search to find interesting candidates and committees. Then, you can use their IDs to find report or line item details with the other endpoints. If you are interested in individual donors, check out contributor information in the `/schedule_a/` endpoints.    <b class=\"body\" id=\"getting_started_head\">Getting started with the openFEC API</b><br>    If you would like to use the FEC's API programmatically, you can sign up for your own API key using our form. Alternatively, you can still try out our API without an API key by using the web interface and using DEMO_KEY. Note that when you use the openFEC API you are subject to the [Terms of Service](https://github.com/fecgov/FEC/blob/master/TERMS-OF-SERVICE.md) and [Acceptable Use policy](https://github.com/fecgov/FEC/blob/master/ACCEPTABLE-USE-POLICY.md).    Signing up for an API key will enable you to place up to 1,000 calls an hour. Each call is limited to 100 results per page. You can email questions, comments or a request to get a key for 7,200 calls an hour (120 calls per minute) to <a href=\"mailto:APIinfo@fec.gov\">APIinfo@fec.gov</a>. You can also ask questions and discuss the data in a community led [group](https://groups.google.com/forum/#!forum/fec-data).    The model definitions and schema are available at [/swagger](/swagger/). This is useful for making wrappers and exploring the data.    A few restrictions limit the way you can use FEC data. For example, you canâ€™t use contributor lists for commercial purposes or to solicit donations. [Learn more here](https://www.fec.gov/updates/sale-or-use-contributor-information/).    [Inspect our source code](https://github.com/fecgov/openFEC). We welcome issues and pull requests!    <p><br></p> <h2 class=\"title\" id=\"signup_head\">Sign up for an API key</h2> <div id=\"apidatagov_signup\">Loading signup form...</div>
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.PresidentialByCandidatePage;
import org.openapitools.client.model.PresidentialBySizePage;
import org.openapitools.client.model.PresidentialByStatePage;
import org.openapitools.client.model.PresidentialCoveragePage;
import org.openapitools.client.model.PresidentialSummaryPage;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class PresidentialApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public PresidentialApi() {
        this(Configuration.getDefaultApiClient());
    }

    public PresidentialApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for presidentialContributionsByCandidateGet
     * @param apiKey  API key for https://api.data.gov. Get one at https://api.data.gov/signup.  (required)
     * @param sortNullsLast Toggle that sorts null values last (optional, default to false)
     * @param page For paginating through results, starting at page 1 (optional, default to 1)
     * @param sortNullOnly Toggle that filters out all rows having sort column that is non-null (optional, default to false)
     * @param sortHideNull Hide null values on sorted column(s). (optional, default to false)
     * @param perPage The number of results returned per page. Defaults to 20. (optional, default to 20)
     * @param electionYear Year of election (optional)
     * @param contributorState State of contributor (optional)
     * @param sort Provide a field to sort by. Use &#x60;-&#x60; for descending order.  (optional, default to -net_receipts)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call presidentialContributionsByCandidateGetCall(String apiKey, Boolean sortNullsLast, Integer page, Boolean sortNullOnly, Boolean sortHideNull, Integer perPage, List<Integer> electionYear, List<String> contributorState, String sort, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/presidential/contributions/by_candidate/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiKey != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api_key", apiKey));
        }

        if (sortNullsLast != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort_nulls_last", sortNullsLast));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (sortNullOnly != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort_null_only", sortNullOnly));
        }

        if (sortHideNull != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort_hide_null", sortHideNull));
        }

        if (perPage != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("per_page", perPage));
        }

        if (electionYear != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "election_year", electionYear));
        }

        if (contributorState != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "contributor_state", contributorState));
        }

        if (sort != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort", sort));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKeyHeaderAuth", "ApiKeyQueryAuth", "apiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call presidentialContributionsByCandidateGetValidateBeforeCall(String apiKey, Boolean sortNullsLast, Integer page, Boolean sortNullOnly, Boolean sortHideNull, Integer perPage, List<Integer> electionYear, List<String> contributorState, String sort, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'apiKey' is set
        if (apiKey == null) {
            throw new ApiException("Missing the required parameter 'apiKey' when calling presidentialContributionsByCandidateGet(Async)");
        }

        return presidentialContributionsByCandidateGetCall(apiKey, sortNullsLast, page, sortNullOnly, sortHideNull, perPage, electionYear, contributorState, sort, _callback);

    }

    /**
     * 
     *  Net receipts per candidate.  Filter with &#x60;contributor_state&#x3D;&#39;US&#39;&#x60; for national totals 
     * @param apiKey  API key for https://api.data.gov. Get one at https://api.data.gov/signup.  (required)
     * @param sortNullsLast Toggle that sorts null values last (optional, default to false)
     * @param page For paginating through results, starting at page 1 (optional, default to 1)
     * @param sortNullOnly Toggle that filters out all rows having sort column that is non-null (optional, default to false)
     * @param sortHideNull Hide null values on sorted column(s). (optional, default to false)
     * @param perPage The number of results returned per page. Defaults to 20. (optional, default to 20)
     * @param electionYear Year of election (optional)
     * @param contributorState State of contributor (optional)
     * @param sort Provide a field to sort by. Use &#x60;-&#x60; for descending order.  (optional, default to -net_receipts)
     * @return PresidentialByCandidatePage
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public PresidentialByCandidatePage presidentialContributionsByCandidateGet(String apiKey, Boolean sortNullsLast, Integer page, Boolean sortNullOnly, Boolean sortHideNull, Integer perPage, List<Integer> electionYear, List<String> contributorState, String sort) throws ApiException {
        ApiResponse<PresidentialByCandidatePage> localVarResp = presidentialContributionsByCandidateGetWithHttpInfo(apiKey, sortNullsLast, page, sortNullOnly, sortHideNull, perPage, electionYear, contributorState, sort);
        return localVarResp.getData();
    }

    /**
     * 
     *  Net receipts per candidate.  Filter with &#x60;contributor_state&#x3D;&#39;US&#39;&#x60; for national totals 
     * @param apiKey  API key for https://api.data.gov. Get one at https://api.data.gov/signup.  (required)
     * @param sortNullsLast Toggle that sorts null values last (optional, default to false)
     * @param page For paginating through results, starting at page 1 (optional, default to 1)
     * @param sortNullOnly Toggle that filters out all rows having sort column that is non-null (optional, default to false)
     * @param sortHideNull Hide null values on sorted column(s). (optional, default to false)
     * @param perPage The number of results returned per page. Defaults to 20. (optional, default to 20)
     * @param electionYear Year of election (optional)
     * @param contributorState State of contributor (optional)
     * @param sort Provide a field to sort by. Use &#x60;-&#x60; for descending order.  (optional, default to -net_receipts)
     * @return ApiResponse&lt;PresidentialByCandidatePage&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PresidentialByCandidatePage> presidentialContributionsByCandidateGetWithHttpInfo(String apiKey, Boolean sortNullsLast, Integer page, Boolean sortNullOnly, Boolean sortHideNull, Integer perPage, List<Integer> electionYear, List<String> contributorState, String sort) throws ApiException {
        okhttp3.Call localVarCall = presidentialContributionsByCandidateGetValidateBeforeCall(apiKey, sortNullsLast, page, sortNullOnly, sortHideNull, perPage, electionYear, contributorState, sort, null);
        Type localVarReturnType = new TypeToken<PresidentialByCandidatePage>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     *  Net receipts per candidate.  Filter with &#x60;contributor_state&#x3D;&#39;US&#39;&#x60; for national totals 
     * @param apiKey  API key for https://api.data.gov. Get one at https://api.data.gov/signup.  (required)
     * @param sortNullsLast Toggle that sorts null values last (optional, default to false)
     * @param page For paginating through results, starting at page 1 (optional, default to 1)
     * @param sortNullOnly Toggle that filters out all rows having sort column that is non-null (optional, default to false)
     * @param sortHideNull Hide null values on sorted column(s). (optional, default to false)
     * @param perPage The number of results returned per page. Defaults to 20. (optional, default to 20)
     * @param electionYear Year of election (optional)
     * @param contributorState State of contributor (optional)
     * @param sort Provide a field to sort by. Use &#x60;-&#x60; for descending order.  (optional, default to -net_receipts)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call presidentialContributionsByCandidateGetAsync(String apiKey, Boolean sortNullsLast, Integer page, Boolean sortNullOnly, Boolean sortHideNull, Integer perPage, List<Integer> electionYear, List<String> contributorState, String sort, final ApiCallback<PresidentialByCandidatePage> _callback) throws ApiException {

        okhttp3.Call localVarCall = presidentialContributionsByCandidateGetValidateBeforeCall(apiKey, sortNullsLast, page, sortNullOnly, sortHideNull, perPage, electionYear, contributorState, sort, _callback);
        Type localVarReturnType = new TypeToken<PresidentialByCandidatePage>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for presidentialContributionsBySizeGet
     * @param apiKey  API key for https://api.data.gov. Get one at https://api.data.gov/signup.  (required)
     * @param sortNullsLast Toggle that sorts null values last (optional, default to false)
     * @param page For paginating through results, starting at page 1 (optional, default to 1)
     * @param sortNullOnly Toggle that filters out all rows having sort column that is non-null (optional, default to false)
     * @param size  The total all contributions in the following ranges: &#x60;&#x60;&#x60;   -0    $200 and under   -200  $200.01 - $499.99   -500  $500 - $999.99   -1000 $1000 - $1999.99   -2000 $2000 + &#x60;&#x60;&#x60; Unitemized contributions are included in the &#x60;0&#x60; category.  (optional)
     * @param sortHideNull Hide null values on sorted column(s). (optional, default to false)
     * @param candidateId  A unique identifier assigned to each candidate registered with the FEC. If a person runs for several offices, that person will have separate candidate IDs for each office. First character indicates office - [P]residential, [H]ouse, [S]enate]. Second character is the last digit of the two-year period the ID was created. Third and fourth is the candidate state. Presidential IDs don&#39;t have state. Fifth and sixth is the district when the candidate first ran. This does not change if the candidate/member&#39;s district changes during re-districting. Presidential IDs don&#39;t have districts. The rest is sequence.   -P00000001    All candidates   -P00000002    Democrasts   -P00000003    Republicans  (optional)
     * @param perPage The number of results returned per page. Defaults to 20. (optional, default to 20)
     * @param electionYear Year of election (optional)
     * @param sort Provide a field to sort by. Use &#x60;-&#x60; for descending order.  (optional, default to size)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call presidentialContributionsBySizeGetCall(String apiKey, Boolean sortNullsLast, Integer page, Boolean sortNullOnly, List<Integer> size, Boolean sortHideNull, List<String> candidateId, Integer perPage, List<Integer> electionYear, String sort, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/presidential/contributions/by_size/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiKey != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api_key", apiKey));
        }

        if (sortNullsLast != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort_nulls_last", sortNullsLast));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (sortNullOnly != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort_null_only", sortNullOnly));
        }

        if (size != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "size", size));
        }

        if (sortHideNull != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort_hide_null", sortHideNull));
        }

        if (candidateId != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "candidate_id", candidateId));
        }

        if (perPage != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("per_page", perPage));
        }

        if (electionYear != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "election_year", electionYear));
        }

        if (sort != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort", sort));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKeyHeaderAuth", "ApiKeyQueryAuth", "apiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call presidentialContributionsBySizeGetValidateBeforeCall(String apiKey, Boolean sortNullsLast, Integer page, Boolean sortNullOnly, List<Integer> size, Boolean sortHideNull, List<String> candidateId, Integer perPage, List<Integer> electionYear, String sort, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'apiKey' is set
        if (apiKey == null) {
            throw new ApiException("Missing the required parameter 'apiKey' when calling presidentialContributionsBySizeGet(Async)");
        }

        return presidentialContributionsBySizeGetCall(apiKey, sortNullsLast, page, sortNullOnly, size, sortHideNull, candidateId, perPage, electionYear, sort, _callback);

    }

    /**
     * 
     *  Contribution receipts by size per candidate.  Filter by candidate_id, election_year and/or size 
     * @param apiKey  API key for https://api.data.gov. Get one at https://api.data.gov/signup.  (required)
     * @param sortNullsLast Toggle that sorts null values last (optional, default to false)
     * @param page For paginating through results, starting at page 1 (optional, default to 1)
     * @param sortNullOnly Toggle that filters out all rows having sort column that is non-null (optional, default to false)
     * @param size  The total all contributions in the following ranges: &#x60;&#x60;&#x60;   -0    $200 and under   -200  $200.01 - $499.99   -500  $500 - $999.99   -1000 $1000 - $1999.99   -2000 $2000 + &#x60;&#x60;&#x60; Unitemized contributions are included in the &#x60;0&#x60; category.  (optional)
     * @param sortHideNull Hide null values on sorted column(s). (optional, default to false)
     * @param candidateId  A unique identifier assigned to each candidate registered with the FEC. If a person runs for several offices, that person will have separate candidate IDs for each office. First character indicates office - [P]residential, [H]ouse, [S]enate]. Second character is the last digit of the two-year period the ID was created. Third and fourth is the candidate state. Presidential IDs don&#39;t have state. Fifth and sixth is the district when the candidate first ran. This does not change if the candidate/member&#39;s district changes during re-districting. Presidential IDs don&#39;t have districts. The rest is sequence.   -P00000001    All candidates   -P00000002    Democrasts   -P00000003    Republicans  (optional)
     * @param perPage The number of results returned per page. Defaults to 20. (optional, default to 20)
     * @param electionYear Year of election (optional)
     * @param sort Provide a field to sort by. Use &#x60;-&#x60; for descending order.  (optional, default to size)
     * @return PresidentialBySizePage
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public PresidentialBySizePage presidentialContributionsBySizeGet(String apiKey, Boolean sortNullsLast, Integer page, Boolean sortNullOnly, List<Integer> size, Boolean sortHideNull, List<String> candidateId, Integer perPage, List<Integer> electionYear, String sort) throws ApiException {
        ApiResponse<PresidentialBySizePage> localVarResp = presidentialContributionsBySizeGetWithHttpInfo(apiKey, sortNullsLast, page, sortNullOnly, size, sortHideNull, candidateId, perPage, electionYear, sort);
        return localVarResp.getData();
    }

    /**
     * 
     *  Contribution receipts by size per candidate.  Filter by candidate_id, election_year and/or size 
     * @param apiKey  API key for https://api.data.gov. Get one at https://api.data.gov/signup.  (required)
     * @param sortNullsLast Toggle that sorts null values last (optional, default to false)
     * @param page For paginating through results, starting at page 1 (optional, default to 1)
     * @param sortNullOnly Toggle that filters out all rows having sort column that is non-null (optional, default to false)
     * @param size  The total all contributions in the following ranges: &#x60;&#x60;&#x60;   -0    $200 and under   -200  $200.01 - $499.99   -500  $500 - $999.99   -1000 $1000 - $1999.99   -2000 $2000 + &#x60;&#x60;&#x60; Unitemized contributions are included in the &#x60;0&#x60; category.  (optional)
     * @param sortHideNull Hide null values on sorted column(s). (optional, default to false)
     * @param candidateId  A unique identifier assigned to each candidate registered with the FEC. If a person runs for several offices, that person will have separate candidate IDs for each office. First character indicates office - [P]residential, [H]ouse, [S]enate]. Second character is the last digit of the two-year period the ID was created. Third and fourth is the candidate state. Presidential IDs don&#39;t have state. Fifth and sixth is the district when the candidate first ran. This does not change if the candidate/member&#39;s district changes during re-districting. Presidential IDs don&#39;t have districts. The rest is sequence.   -P00000001    All candidates   -P00000002    Democrasts   -P00000003    Republicans  (optional)
     * @param perPage The number of results returned per page. Defaults to 20. (optional, default to 20)
     * @param electionYear Year of election (optional)
     * @param sort Provide a field to sort by. Use &#x60;-&#x60; for descending order.  (optional, default to size)
     * @return ApiResponse&lt;PresidentialBySizePage&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PresidentialBySizePage> presidentialContributionsBySizeGetWithHttpInfo(String apiKey, Boolean sortNullsLast, Integer page, Boolean sortNullOnly, List<Integer> size, Boolean sortHideNull, List<String> candidateId, Integer perPage, List<Integer> electionYear, String sort) throws ApiException {
        okhttp3.Call localVarCall = presidentialContributionsBySizeGetValidateBeforeCall(apiKey, sortNullsLast, page, sortNullOnly, size, sortHideNull, candidateId, perPage, electionYear, sort, null);
        Type localVarReturnType = new TypeToken<PresidentialBySizePage>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     *  Contribution receipts by size per candidate.  Filter by candidate_id, election_year and/or size 
     * @param apiKey  API key for https://api.data.gov. Get one at https://api.data.gov/signup.  (required)
     * @param sortNullsLast Toggle that sorts null values last (optional, default to false)
     * @param page For paginating through results, starting at page 1 (optional, default to 1)
     * @param sortNullOnly Toggle that filters out all rows having sort column that is non-null (optional, default to false)
     * @param size  The total all contributions in the following ranges: &#x60;&#x60;&#x60;   -0    $200 and under   -200  $200.01 - $499.99   -500  $500 - $999.99   -1000 $1000 - $1999.99   -2000 $2000 + &#x60;&#x60;&#x60; Unitemized contributions are included in the &#x60;0&#x60; category.  (optional)
     * @param sortHideNull Hide null values on sorted column(s). (optional, default to false)
     * @param candidateId  A unique identifier assigned to each candidate registered with the FEC. If a person runs for several offices, that person will have separate candidate IDs for each office. First character indicates office - [P]residential, [H]ouse, [S]enate]. Second character is the last digit of the two-year period the ID was created. Third and fourth is the candidate state. Presidential IDs don&#39;t have state. Fifth and sixth is the district when the candidate first ran. This does not change if the candidate/member&#39;s district changes during re-districting. Presidential IDs don&#39;t have districts. The rest is sequence.   -P00000001    All candidates   -P00000002    Democrasts   -P00000003    Republicans  (optional)
     * @param perPage The number of results returned per page. Defaults to 20. (optional, default to 20)
     * @param electionYear Year of election (optional)
     * @param sort Provide a field to sort by. Use &#x60;-&#x60; for descending order.  (optional, default to size)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call presidentialContributionsBySizeGetAsync(String apiKey, Boolean sortNullsLast, Integer page, Boolean sortNullOnly, List<Integer> size, Boolean sortHideNull, List<String> candidateId, Integer perPage, List<Integer> electionYear, String sort, final ApiCallback<PresidentialBySizePage> _callback) throws ApiException {

        okhttp3.Call localVarCall = presidentialContributionsBySizeGetValidateBeforeCall(apiKey, sortNullsLast, page, sortNullOnly, size, sortHideNull, candidateId, perPage, electionYear, sort, _callback);
        Type localVarReturnType = new TypeToken<PresidentialBySizePage>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for presidentialContributionsByStateGet
     * @param apiKey  API key for https://api.data.gov. Get one at https://api.data.gov/signup.  (required)
     * @param sortNullsLast Toggle that sorts null values last (optional, default to false)
     * @param page For paginating through results, starting at page 1 (optional, default to 1)
     * @param sortNullOnly Toggle that filters out all rows having sort column that is non-null (optional, default to false)
     * @param sortHideNull Hide null values on sorted column(s). (optional, default to false)
     * @param candidateId  A unique identifier assigned to each candidate registered with the FEC. If a person runs for several offices, that person will have separate candidate IDs for each office. First character indicates office - [P]residential, [H]ouse, [S]enate]. Second character is the last digit of the two-year period the ID was created. Third and fourth is the candidate state. Presidential IDs don&#39;t have state. Fifth and sixth is the district when the candidate first ran. This does not change if the candidate/member&#39;s district changes during re-districting. Presidential IDs don&#39;t have districts. The rest is sequence.   -P00000001    All candidates   -P00000002    Democrasts   -P00000003    Republicans  (optional)
     * @param perPage The number of results returned per page. Defaults to 20. (optional, default to 20)
     * @param electionYear Year of election (optional)
     * @param sort Provide a field to sort by. Use &#x60;-&#x60; for descending order.  (optional, default to -contribution_receipt_amount)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call presidentialContributionsByStateGetCall(String apiKey, Boolean sortNullsLast, Integer page, Boolean sortNullOnly, Boolean sortHideNull, List<String> candidateId, Integer perPage, List<Integer> electionYear, String sort, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/presidential/contributions/by_state/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiKey != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api_key", apiKey));
        }

        if (sortNullsLast != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort_nulls_last", sortNullsLast));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (sortNullOnly != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort_null_only", sortNullOnly));
        }

        if (sortHideNull != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort_hide_null", sortHideNull));
        }

        if (candidateId != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "candidate_id", candidateId));
        }

        if (perPage != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("per_page", perPage));
        }

        if (electionYear != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "election_year", electionYear));
        }

        if (sort != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort", sort));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKeyHeaderAuth", "ApiKeyQueryAuth", "apiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call presidentialContributionsByStateGetValidateBeforeCall(String apiKey, Boolean sortNullsLast, Integer page, Boolean sortNullOnly, Boolean sortHideNull, List<String> candidateId, Integer perPage, List<Integer> electionYear, String sort, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'apiKey' is set
        if (apiKey == null) {
            throw new ApiException("Missing the required parameter 'apiKey' when calling presidentialContributionsByStateGet(Async)");
        }

        return presidentialContributionsByStateGetCall(apiKey, sortNullsLast, page, sortNullOnly, sortHideNull, candidateId, perPage, electionYear, sort, _callback);

    }

    /**
     * 
     *  Contribution receipts by state per candidate.  Filter by candidate_id and/or election_year 
     * @param apiKey  API key for https://api.data.gov. Get one at https://api.data.gov/signup.  (required)
     * @param sortNullsLast Toggle that sorts null values last (optional, default to false)
     * @param page For paginating through results, starting at page 1 (optional, default to 1)
     * @param sortNullOnly Toggle that filters out all rows having sort column that is non-null (optional, default to false)
     * @param sortHideNull Hide null values on sorted column(s). (optional, default to false)
     * @param candidateId  A unique identifier assigned to each candidate registered with the FEC. If a person runs for several offices, that person will have separate candidate IDs for each office. First character indicates office - [P]residential, [H]ouse, [S]enate]. Second character is the last digit of the two-year period the ID was created. Third and fourth is the candidate state. Presidential IDs don&#39;t have state. Fifth and sixth is the district when the candidate first ran. This does not change if the candidate/member&#39;s district changes during re-districting. Presidential IDs don&#39;t have districts. The rest is sequence.   -P00000001    All candidates   -P00000002    Democrasts   -P00000003    Republicans  (optional)
     * @param perPage The number of results returned per page. Defaults to 20. (optional, default to 20)
     * @param electionYear Year of election (optional)
     * @param sort Provide a field to sort by. Use &#x60;-&#x60; for descending order.  (optional, default to -contribution_receipt_amount)
     * @return PresidentialByStatePage
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public PresidentialByStatePage presidentialContributionsByStateGet(String apiKey, Boolean sortNullsLast, Integer page, Boolean sortNullOnly, Boolean sortHideNull, List<String> candidateId, Integer perPage, List<Integer> electionYear, String sort) throws ApiException {
        ApiResponse<PresidentialByStatePage> localVarResp = presidentialContributionsByStateGetWithHttpInfo(apiKey, sortNullsLast, page, sortNullOnly, sortHideNull, candidateId, perPage, electionYear, sort);
        return localVarResp.getData();
    }

    /**
     * 
     *  Contribution receipts by state per candidate.  Filter by candidate_id and/or election_year 
     * @param apiKey  API key for https://api.data.gov. Get one at https://api.data.gov/signup.  (required)
     * @param sortNullsLast Toggle that sorts null values last (optional, default to false)
     * @param page For paginating through results, starting at page 1 (optional, default to 1)
     * @param sortNullOnly Toggle that filters out all rows having sort column that is non-null (optional, default to false)
     * @param sortHideNull Hide null values on sorted column(s). (optional, default to false)
     * @param candidateId  A unique identifier assigned to each candidate registered with the FEC. If a person runs for several offices, that person will have separate candidate IDs for each office. First character indicates office - [P]residential, [H]ouse, [S]enate]. Second character is the last digit of the two-year period the ID was created. Third and fourth is the candidate state. Presidential IDs don&#39;t have state. Fifth and sixth is the district when the candidate first ran. This does not change if the candidate/member&#39;s district changes during re-districting. Presidential IDs don&#39;t have districts. The rest is sequence.   -P00000001    All candidates   -P00000002    Democrasts   -P00000003    Republicans  (optional)
     * @param perPage The number of results returned per page. Defaults to 20. (optional, default to 20)
     * @param electionYear Year of election (optional)
     * @param sort Provide a field to sort by. Use &#x60;-&#x60; for descending order.  (optional, default to -contribution_receipt_amount)
     * @return ApiResponse&lt;PresidentialByStatePage&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PresidentialByStatePage> presidentialContributionsByStateGetWithHttpInfo(String apiKey, Boolean sortNullsLast, Integer page, Boolean sortNullOnly, Boolean sortHideNull, List<String> candidateId, Integer perPage, List<Integer> electionYear, String sort) throws ApiException {
        okhttp3.Call localVarCall = presidentialContributionsByStateGetValidateBeforeCall(apiKey, sortNullsLast, page, sortNullOnly, sortHideNull, candidateId, perPage, electionYear, sort, null);
        Type localVarReturnType = new TypeToken<PresidentialByStatePage>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     *  Contribution receipts by state per candidate.  Filter by candidate_id and/or election_year 
     * @param apiKey  API key for https://api.data.gov. Get one at https://api.data.gov/signup.  (required)
     * @param sortNullsLast Toggle that sorts null values last (optional, default to false)
     * @param page For paginating through results, starting at page 1 (optional, default to 1)
     * @param sortNullOnly Toggle that filters out all rows having sort column that is non-null (optional, default to false)
     * @param sortHideNull Hide null values on sorted column(s). (optional, default to false)
     * @param candidateId  A unique identifier assigned to each candidate registered with the FEC. If a person runs for several offices, that person will have separate candidate IDs for each office. First character indicates office - [P]residential, [H]ouse, [S]enate]. Second character is the last digit of the two-year period the ID was created. Third and fourth is the candidate state. Presidential IDs don&#39;t have state. Fifth and sixth is the district when the candidate first ran. This does not change if the candidate/member&#39;s district changes during re-districting. Presidential IDs don&#39;t have districts. The rest is sequence.   -P00000001    All candidates   -P00000002    Democrasts   -P00000003    Republicans  (optional)
     * @param perPage The number of results returned per page. Defaults to 20. (optional, default to 20)
     * @param electionYear Year of election (optional)
     * @param sort Provide a field to sort by. Use &#x60;-&#x60; for descending order.  (optional, default to -contribution_receipt_amount)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call presidentialContributionsByStateGetAsync(String apiKey, Boolean sortNullsLast, Integer page, Boolean sortNullOnly, Boolean sortHideNull, List<String> candidateId, Integer perPage, List<Integer> electionYear, String sort, final ApiCallback<PresidentialByStatePage> _callback) throws ApiException {

        okhttp3.Call localVarCall = presidentialContributionsByStateGetValidateBeforeCall(apiKey, sortNullsLast, page, sortNullOnly, sortHideNull, candidateId, perPage, electionYear, sort, _callback);
        Type localVarReturnType = new TypeToken<PresidentialByStatePage>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for presidentialCoverageEndDateGet
     * @param apiKey  API key for https://api.data.gov. Get one at https://api.data.gov/signup.  (required)
     * @param sortNullsLast Toggle that sorts null values last (optional, default to false)
     * @param page For paginating through results, starting at page 1 (optional, default to 1)
     * @param sortNullOnly Toggle that filters out all rows having sort column that is non-null (optional, default to false)
     * @param sortHideNull Hide null values on sorted column(s). (optional, default to false)
     * @param candidateId  A unique identifier assigned to each candidate registered with the FEC. If a person runs for several offices, that person will have separate candidate IDs for each office. First character indicates office - [P]residential, [H]ouse, [S]enate]. Second character is the last digit of the two-year period the ID was created. Third and fourth is the candidate state. Presidential IDs don&#39;t have state. Fifth and sixth is the district when the candidate first ran. This does not change if the candidate/member&#39;s district changes during re-districting. Presidential IDs don&#39;t have districts. The rest is sequence.   -P00000001    All candidates   -P00000002    Democrasts   -P00000003    Republicans  (optional)
     * @param perPage The number of results returned per page. Defaults to 20. (optional, default to 20)
     * @param electionYear Year of election (optional)
     * @param sort Provide a field to sort by. Use &#x60;-&#x60; for descending order.  (optional, default to candidate_id)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call presidentialCoverageEndDateGetCall(String apiKey, Boolean sortNullsLast, Integer page, Boolean sortNullOnly, Boolean sortHideNull, List<String> candidateId, Integer perPage, List<Integer> electionYear, String sort, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/presidential/coverage_end_date/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiKey != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api_key", apiKey));
        }

        if (sortNullsLast != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort_nulls_last", sortNullsLast));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (sortNullOnly != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort_null_only", sortNullOnly));
        }

        if (sortHideNull != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort_hide_null", sortHideNull));
        }

        if (candidateId != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "candidate_id", candidateId));
        }

        if (perPage != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("per_page", perPage));
        }

        if (electionYear != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "election_year", electionYear));
        }

        if (sort != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort", sort));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKeyHeaderAuth", "ApiKeyQueryAuth", "apiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call presidentialCoverageEndDateGetValidateBeforeCall(String apiKey, Boolean sortNullsLast, Integer page, Boolean sortNullOnly, Boolean sortHideNull, List<String> candidateId, Integer perPage, List<Integer> electionYear, String sort, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'apiKey' is set
        if (apiKey == null) {
            throw new ApiException("Missing the required parameter 'apiKey' when calling presidentialCoverageEndDateGet(Async)");
        }

        return presidentialCoverageEndDateGetCall(apiKey, sortNullsLast, page, sortNullOnly, sortHideNull, candidateId, perPage, electionYear, sort, _callback);

    }

    /**
     * 
     *  Coverage end date per candidate.  Filter by candidate_id and/or election_year 
     * @param apiKey  API key for https://api.data.gov. Get one at https://api.data.gov/signup.  (required)
     * @param sortNullsLast Toggle that sorts null values last (optional, default to false)
     * @param page For paginating through results, starting at page 1 (optional, default to 1)
     * @param sortNullOnly Toggle that filters out all rows having sort column that is non-null (optional, default to false)
     * @param sortHideNull Hide null values on sorted column(s). (optional, default to false)
     * @param candidateId  A unique identifier assigned to each candidate registered with the FEC. If a person runs for several offices, that person will have separate candidate IDs for each office. First character indicates office - [P]residential, [H]ouse, [S]enate]. Second character is the last digit of the two-year period the ID was created. Third and fourth is the candidate state. Presidential IDs don&#39;t have state. Fifth and sixth is the district when the candidate first ran. This does not change if the candidate/member&#39;s district changes during re-districting. Presidential IDs don&#39;t have districts. The rest is sequence.   -P00000001    All candidates   -P00000002    Democrasts   -P00000003    Republicans  (optional)
     * @param perPage The number of results returned per page. Defaults to 20. (optional, default to 20)
     * @param electionYear Year of election (optional)
     * @param sort Provide a field to sort by. Use &#x60;-&#x60; for descending order.  (optional, default to candidate_id)
     * @return PresidentialCoveragePage
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public PresidentialCoveragePage presidentialCoverageEndDateGet(String apiKey, Boolean sortNullsLast, Integer page, Boolean sortNullOnly, Boolean sortHideNull, List<String> candidateId, Integer perPage, List<Integer> electionYear, String sort) throws ApiException {
        ApiResponse<PresidentialCoveragePage> localVarResp = presidentialCoverageEndDateGetWithHttpInfo(apiKey, sortNullsLast, page, sortNullOnly, sortHideNull, candidateId, perPage, electionYear, sort);
        return localVarResp.getData();
    }

    /**
     * 
     *  Coverage end date per candidate.  Filter by candidate_id and/or election_year 
     * @param apiKey  API key for https://api.data.gov. Get one at https://api.data.gov/signup.  (required)
     * @param sortNullsLast Toggle that sorts null values last (optional, default to false)
     * @param page For paginating through results, starting at page 1 (optional, default to 1)
     * @param sortNullOnly Toggle that filters out all rows having sort column that is non-null (optional, default to false)
     * @param sortHideNull Hide null values on sorted column(s). (optional, default to false)
     * @param candidateId  A unique identifier assigned to each candidate registered with the FEC. If a person runs for several offices, that person will have separate candidate IDs for each office. First character indicates office - [P]residential, [H]ouse, [S]enate]. Second character is the last digit of the two-year period the ID was created. Third and fourth is the candidate state. Presidential IDs don&#39;t have state. Fifth and sixth is the district when the candidate first ran. This does not change if the candidate/member&#39;s district changes during re-districting. Presidential IDs don&#39;t have districts. The rest is sequence.   -P00000001    All candidates   -P00000002    Democrasts   -P00000003    Republicans  (optional)
     * @param perPage The number of results returned per page. Defaults to 20. (optional, default to 20)
     * @param electionYear Year of election (optional)
     * @param sort Provide a field to sort by. Use &#x60;-&#x60; for descending order.  (optional, default to candidate_id)
     * @return ApiResponse&lt;PresidentialCoveragePage&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PresidentialCoveragePage> presidentialCoverageEndDateGetWithHttpInfo(String apiKey, Boolean sortNullsLast, Integer page, Boolean sortNullOnly, Boolean sortHideNull, List<String> candidateId, Integer perPage, List<Integer> electionYear, String sort) throws ApiException {
        okhttp3.Call localVarCall = presidentialCoverageEndDateGetValidateBeforeCall(apiKey, sortNullsLast, page, sortNullOnly, sortHideNull, candidateId, perPage, electionYear, sort, null);
        Type localVarReturnType = new TypeToken<PresidentialCoveragePage>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     *  Coverage end date per candidate.  Filter by candidate_id and/or election_year 
     * @param apiKey  API key for https://api.data.gov. Get one at https://api.data.gov/signup.  (required)
     * @param sortNullsLast Toggle that sorts null values last (optional, default to false)
     * @param page For paginating through results, starting at page 1 (optional, default to 1)
     * @param sortNullOnly Toggle that filters out all rows having sort column that is non-null (optional, default to false)
     * @param sortHideNull Hide null values on sorted column(s). (optional, default to false)
     * @param candidateId  A unique identifier assigned to each candidate registered with the FEC. If a person runs for several offices, that person will have separate candidate IDs for each office. First character indicates office - [P]residential, [H]ouse, [S]enate]. Second character is the last digit of the two-year period the ID was created. Third and fourth is the candidate state. Presidential IDs don&#39;t have state. Fifth and sixth is the district when the candidate first ran. This does not change if the candidate/member&#39;s district changes during re-districting. Presidential IDs don&#39;t have districts. The rest is sequence.   -P00000001    All candidates   -P00000002    Democrasts   -P00000003    Republicans  (optional)
     * @param perPage The number of results returned per page. Defaults to 20. (optional, default to 20)
     * @param electionYear Year of election (optional)
     * @param sort Provide a field to sort by. Use &#x60;-&#x60; for descending order.  (optional, default to candidate_id)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call presidentialCoverageEndDateGetAsync(String apiKey, Boolean sortNullsLast, Integer page, Boolean sortNullOnly, Boolean sortHideNull, List<String> candidateId, Integer perPage, List<Integer> electionYear, String sort, final ApiCallback<PresidentialCoveragePage> _callback) throws ApiException {

        okhttp3.Call localVarCall = presidentialCoverageEndDateGetValidateBeforeCall(apiKey, sortNullsLast, page, sortNullOnly, sortHideNull, candidateId, perPage, electionYear, sort, _callback);
        Type localVarReturnType = new TypeToken<PresidentialCoveragePage>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for presidentialFinancialSummaryGet
     * @param apiKey  API key for https://api.data.gov. Get one at https://api.data.gov/signup.  (required)
     * @param sortNullsLast Toggle that sorts null values last (optional, default to false)
     * @param page For paginating through results, starting at page 1 (optional, default to 1)
     * @param sortNullOnly Toggle that filters out all rows having sort column that is non-null (optional, default to false)
     * @param sortHideNull Hide null values on sorted column(s). (optional, default to false)
     * @param candidateId  A unique identifier assigned to each candidate registered with the FEC. If a person runs for several offices, that person will have separate candidate IDs for each office. First character indicates office - [P]residential, [H]ouse, [S]enate]. Second character is the last digit of the two-year period the ID was created. Third and fourth is the candidate state. Presidential IDs don&#39;t have state. Fifth and sixth is the district when the candidate first ran. This does not change if the candidate/member&#39;s district changes during re-districting. Presidential IDs don&#39;t have districts. The rest is sequence.   -P00000001    All candidates   -P00000002    Democrasts   -P00000003    Republicans  (optional)
     * @param perPage The number of results returned per page. Defaults to 20. (optional, default to 20)
     * @param electionYear Year of election (optional)
     * @param sort Provide a field to sort by. Use &#x60;-&#x60; for descending order.  (optional, default to -net_receipts)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call presidentialFinancialSummaryGetCall(String apiKey, Boolean sortNullsLast, Integer page, Boolean sortNullOnly, Boolean sortHideNull, List<String> candidateId, Integer perPage, List<Integer> electionYear, String sort, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/presidential/financial_summary/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiKey != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api_key", apiKey));
        }

        if (sortNullsLast != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort_nulls_last", sortNullsLast));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (sortNullOnly != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort_null_only", sortNullOnly));
        }

        if (sortHideNull != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort_hide_null", sortHideNull));
        }

        if (candidateId != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "candidate_id", candidateId));
        }

        if (perPage != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("per_page", perPage));
        }

        if (electionYear != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "election_year", electionYear));
        }

        if (sort != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort", sort));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKeyHeaderAuth", "ApiKeyQueryAuth", "apiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call presidentialFinancialSummaryGetValidateBeforeCall(String apiKey, Boolean sortNullsLast, Integer page, Boolean sortNullOnly, Boolean sortHideNull, List<String> candidateId, Integer perPage, List<Integer> electionYear, String sort, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'apiKey' is set
        if (apiKey == null) {
            throw new ApiException("Missing the required parameter 'apiKey' when calling presidentialFinancialSummaryGet(Async)");
        }

        return presidentialFinancialSummaryGetCall(apiKey, sortNullsLast, page, sortNullOnly, sortHideNull, candidateId, perPage, electionYear, sort, _callback);

    }

    /**
     * 
     *  Financial summary per candidate.  Filter by candidate_id and/or election_year 
     * @param apiKey  API key for https://api.data.gov. Get one at https://api.data.gov/signup.  (required)
     * @param sortNullsLast Toggle that sorts null values last (optional, default to false)
     * @param page For paginating through results, starting at page 1 (optional, default to 1)
     * @param sortNullOnly Toggle that filters out all rows having sort column that is non-null (optional, default to false)
     * @param sortHideNull Hide null values on sorted column(s). (optional, default to false)
     * @param candidateId  A unique identifier assigned to each candidate registered with the FEC. If a person runs for several offices, that person will have separate candidate IDs for each office. First character indicates office - [P]residential, [H]ouse, [S]enate]. Second character is the last digit of the two-year period the ID was created. Third and fourth is the candidate state. Presidential IDs don&#39;t have state. Fifth and sixth is the district when the candidate first ran. This does not change if the candidate/member&#39;s district changes during re-districting. Presidential IDs don&#39;t have districts. The rest is sequence.   -P00000001    All candidates   -P00000002    Democrasts   -P00000003    Republicans  (optional)
     * @param perPage The number of results returned per page. Defaults to 20. (optional, default to 20)
     * @param electionYear Year of election (optional)
     * @param sort Provide a field to sort by. Use &#x60;-&#x60; for descending order.  (optional, default to -net_receipts)
     * @return PresidentialSummaryPage
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public PresidentialSummaryPage presidentialFinancialSummaryGet(String apiKey, Boolean sortNullsLast, Integer page, Boolean sortNullOnly, Boolean sortHideNull, List<String> candidateId, Integer perPage, List<Integer> electionYear, String sort) throws ApiException {
        ApiResponse<PresidentialSummaryPage> localVarResp = presidentialFinancialSummaryGetWithHttpInfo(apiKey, sortNullsLast, page, sortNullOnly, sortHideNull, candidateId, perPage, electionYear, sort);
        return localVarResp.getData();
    }

    /**
     * 
     *  Financial summary per candidate.  Filter by candidate_id and/or election_year 
     * @param apiKey  API key for https://api.data.gov. Get one at https://api.data.gov/signup.  (required)
     * @param sortNullsLast Toggle that sorts null values last (optional, default to false)
     * @param page For paginating through results, starting at page 1 (optional, default to 1)
     * @param sortNullOnly Toggle that filters out all rows having sort column that is non-null (optional, default to false)
     * @param sortHideNull Hide null values on sorted column(s). (optional, default to false)
     * @param candidateId  A unique identifier assigned to each candidate registered with the FEC. If a person runs for several offices, that person will have separate candidate IDs for each office. First character indicates office - [P]residential, [H]ouse, [S]enate]. Second character is the last digit of the two-year period the ID was created. Third and fourth is the candidate state. Presidential IDs don&#39;t have state. Fifth and sixth is the district when the candidate first ran. This does not change if the candidate/member&#39;s district changes during re-districting. Presidential IDs don&#39;t have districts. The rest is sequence.   -P00000001    All candidates   -P00000002    Democrasts   -P00000003    Republicans  (optional)
     * @param perPage The number of results returned per page. Defaults to 20. (optional, default to 20)
     * @param electionYear Year of election (optional)
     * @param sort Provide a field to sort by. Use &#x60;-&#x60; for descending order.  (optional, default to -net_receipts)
     * @return ApiResponse&lt;PresidentialSummaryPage&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PresidentialSummaryPage> presidentialFinancialSummaryGetWithHttpInfo(String apiKey, Boolean sortNullsLast, Integer page, Boolean sortNullOnly, Boolean sortHideNull, List<String> candidateId, Integer perPage, List<Integer> electionYear, String sort) throws ApiException {
        okhttp3.Call localVarCall = presidentialFinancialSummaryGetValidateBeforeCall(apiKey, sortNullsLast, page, sortNullOnly, sortHideNull, candidateId, perPage, electionYear, sort, null);
        Type localVarReturnType = new TypeToken<PresidentialSummaryPage>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     *  Financial summary per candidate.  Filter by candidate_id and/or election_year 
     * @param apiKey  API key for https://api.data.gov. Get one at https://api.data.gov/signup.  (required)
     * @param sortNullsLast Toggle that sorts null values last (optional, default to false)
     * @param page For paginating through results, starting at page 1 (optional, default to 1)
     * @param sortNullOnly Toggle that filters out all rows having sort column that is non-null (optional, default to false)
     * @param sortHideNull Hide null values on sorted column(s). (optional, default to false)
     * @param candidateId  A unique identifier assigned to each candidate registered with the FEC. If a person runs for several offices, that person will have separate candidate IDs for each office. First character indicates office - [P]residential, [H]ouse, [S]enate]. Second character is the last digit of the two-year period the ID was created. Third and fourth is the candidate state. Presidential IDs don&#39;t have state. Fifth and sixth is the district when the candidate first ran. This does not change if the candidate/member&#39;s district changes during re-districting. Presidential IDs don&#39;t have districts. The rest is sequence.   -P00000001    All candidates   -P00000002    Democrasts   -P00000003    Republicans  (optional)
     * @param perPage The number of results returned per page. Defaults to 20. (optional, default to 20)
     * @param electionYear Year of election (optional)
     * @param sort Provide a field to sort by. Use &#x60;-&#x60; for descending order.  (optional, default to -net_receipts)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call presidentialFinancialSummaryGetAsync(String apiKey, Boolean sortNullsLast, Integer page, Boolean sortNullOnly, Boolean sortHideNull, List<String> candidateId, Integer perPage, List<Integer> electionYear, String sort, final ApiCallback<PresidentialSummaryPage> _callback) throws ApiException {

        okhttp3.Call localVarCall = presidentialFinancialSummaryGetValidateBeforeCall(apiKey, sortNullsLast, page, sortNullOnly, sortHideNull, candidateId, perPage, electionYear, sort, _callback);
        Type localVarReturnType = new TypeToken<PresidentialSummaryPage>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
