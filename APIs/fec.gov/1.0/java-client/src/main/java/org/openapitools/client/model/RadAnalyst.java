/*
 * OpenFEC
 * This application programming interface (API) allows you to explore the way candidates and committees fund their campaigns.    The Federal Election Commission (FEC) API is a RESTful web service supporting full-text and field-specific searches on FEC data. [Bulk downloads](https://www.fec.gov/data/advanced/?tab=bulk-data) are available on the current site. Information is tied to the underlying forms by file ID and image ID. Data is updated nightly.    There are a lot of data, and a good place to start is to use search to find interesting candidates and committees. Then, you can use their IDs to find report or line item details with the other endpoints. If you are interested in individual donors, check out contributor information in the `/schedule_a/` endpoints.    <b class=\"body\" id=\"getting_started_head\">Getting started with the openFEC API</b><br>    If you would like to use the FEC's API programmatically, you can sign up for your own API key using our form. Alternatively, you can still try out our API without an API key by using the web interface and using DEMO_KEY. Note that when you use the openFEC API you are subject to the [Terms of Service](https://github.com/fecgov/FEC/blob/master/TERMS-OF-SERVICE.md) and [Acceptable Use policy](https://github.com/fecgov/FEC/blob/master/ACCEPTABLE-USE-POLICY.md).    Signing up for an API key will enable you to place up to 1,000 calls an hour. Each call is limited to 100 results per page. You can email questions, comments or a request to get a key for 7,200 calls an hour (120 calls per minute) to <a href=\"mailto:APIinfo@fec.gov\">APIinfo@fec.gov</a>. You can also ask questions and discuss the data in a community led [group](https://groups.google.com/forum/#!forum/fec-data).    The model definitions and schema are available at [/swagger](/swagger/). This is useful for making wrappers and exploring the data.    A few restrictions limit the way you can use FEC data. For example, you canâ€™t use contributor lists for commercial purposes or to solicit donations. [Learn more here](https://www.fec.gov/updates/sale-or-use-contributor-information/).    [Inspect our source code](https://github.com/fecgov/openFEC). We welcome issues and pull requests!    <p><br></p> <h2 class=\"title\" id=\"signup_head\">Sign up for an API key</h2> <div id=\"apidatagov_signup\">Loading signup form...</div>
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.math.BigDecimal;
import java.time.LocalDate;
import java.util.Arrays;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * RadAnalyst
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:02:12.812386-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class RadAnalyst {
  public static final String SERIALIZED_NAME_ANALYST_ID = "analyst_id";
  @SerializedName(SERIALIZED_NAME_ANALYST_ID)
  private BigDecimal analystId;

  public static final String SERIALIZED_NAME_ANALYST_SHORT_ID = "analyst_short_id";
  @SerializedName(SERIALIZED_NAME_ANALYST_SHORT_ID)
  private BigDecimal analystShortId;

  public static final String SERIALIZED_NAME_ASSIGNMENT_UPDATE_DATE = "assignment_update_date";
  @SerializedName(SERIALIZED_NAME_ASSIGNMENT_UPDATE_DATE)
  private LocalDate assignmentUpdateDate;

  public static final String SERIALIZED_NAME_COMMITTEE_ID = "committee_id";
  @SerializedName(SERIALIZED_NAME_COMMITTEE_ID)
  private String committeeId;

  public static final String SERIALIZED_NAME_COMMITTEE_NAME = "committee_name";
  @SerializedName(SERIALIZED_NAME_COMMITTEE_NAME)
  private String committeeName;

  public static final String SERIALIZED_NAME_EMAIL = "email";
  @SerializedName(SERIALIZED_NAME_EMAIL)
  private String email;

  public static final String SERIALIZED_NAME_FIRST_NAME = "first_name";
  @SerializedName(SERIALIZED_NAME_FIRST_NAME)
  private String firstName;

  public static final String SERIALIZED_NAME_LAST_NAME = "last_name";
  @SerializedName(SERIALIZED_NAME_LAST_NAME)
  private String lastName;

  public static final String SERIALIZED_NAME_RAD_BRANCH = "rad_branch";
  @SerializedName(SERIALIZED_NAME_RAD_BRANCH)
  private String radBranch;

  public static final String SERIALIZED_NAME_TELEPHONE_EXT = "telephone_ext";
  @SerializedName(SERIALIZED_NAME_TELEPHONE_EXT)
  private BigDecimal telephoneExt;

  public static final String SERIALIZED_NAME_TITLE = "title";
  @SerializedName(SERIALIZED_NAME_TITLE)
  private String title;

  public RadAnalyst() {
  }

  public RadAnalyst analystId(BigDecimal analystId) {
    this.analystId = analystId;
    return this;
  }

  /**
   * ID of RAD analyst.
   * @return analystId
   */
  @javax.annotation.Nullable
  public BigDecimal getAnalystId() {
    return analystId;
  }

  public void setAnalystId(BigDecimal analystId) {
    this.analystId = analystId;
  }


  public RadAnalyst analystShortId(BigDecimal analystShortId) {
    this.analystShortId = analystShortId;
    return this;
  }

  /**
   * Short ID of RAD analyst.
   * @return analystShortId
   */
  @javax.annotation.Nullable
  public BigDecimal getAnalystShortId() {
    return analystShortId;
  }

  public void setAnalystShortId(BigDecimal analystShortId) {
    this.analystShortId = analystShortId;
  }


  public RadAnalyst assignmentUpdateDate(LocalDate assignmentUpdateDate) {
    this.assignmentUpdateDate = assignmentUpdateDate;
    return this;
  }

  /**
   * Date of most recent RAD analyst assignment change
   * @return assignmentUpdateDate
   */
  @javax.annotation.Nullable
  public LocalDate getAssignmentUpdateDate() {
    return assignmentUpdateDate;
  }

  public void setAssignmentUpdateDate(LocalDate assignmentUpdateDate) {
    this.assignmentUpdateDate = assignmentUpdateDate;
  }


  public RadAnalyst committeeId(String committeeId) {
    this.committeeId = committeeId;
    return this;
  }

  /**
   *  A unique identifier assigned to each committee or filer registered with the FEC. In general committee id&#39;s begin with the letter C which is followed by eight digits. 
   * @return committeeId
   */
  @javax.annotation.Nonnull
  public String getCommitteeId() {
    return committeeId;
  }

  public void setCommitteeId(String committeeId) {
    this.committeeId = committeeId;
  }


  public RadAnalyst committeeName(String committeeName) {
    this.committeeName = committeeName;
    return this;
  }

  /**
   * The name of the committee. If a committee changes its name,     the most recent name will be shown. Committee names are not unique. Use committee_id     for looking up records.
   * @return committeeName
   */
  @javax.annotation.Nullable
  public String getCommitteeName() {
    return committeeName;
  }

  public void setCommitteeName(String committeeName) {
    this.committeeName = committeeName;
  }


  public RadAnalyst email(String email) {
    this.email = email;
    return this;
  }

  /**
   * Email of RAD analyst
   * @return email
   */
  @javax.annotation.Nullable
  public String getEmail() {
    return email;
  }

  public void setEmail(String email) {
    this.email = email;
  }


  public RadAnalyst firstName(String firstName) {
    this.firstName = firstName;
    return this;
  }

  /**
   * Fist name of RAD analyst
   * @return firstName
   */
  @javax.annotation.Nullable
  public String getFirstName() {
    return firstName;
  }

  public void setFirstName(String firstName) {
    this.firstName = firstName;
  }


  public RadAnalyst lastName(String lastName) {
    this.lastName = lastName;
    return this;
  }

  /**
   * Last name of RAD analyst
   * @return lastName
   */
  @javax.annotation.Nullable
  public String getLastName() {
    return lastName;
  }

  public void setLastName(String lastName) {
    this.lastName = lastName;
  }


  public RadAnalyst radBranch(String radBranch) {
    this.radBranch = radBranch;
    return this;
  }

  /**
   * Branch of RAD analyst
   * @return radBranch
   */
  @javax.annotation.Nullable
  public String getRadBranch() {
    return radBranch;
  }

  public void setRadBranch(String radBranch) {
    this.radBranch = radBranch;
  }


  public RadAnalyst telephoneExt(BigDecimal telephoneExt) {
    this.telephoneExt = telephoneExt;
    return this;
  }

  /**
   * Telephone extension of RAD analyst
   * @return telephoneExt
   */
  @javax.annotation.Nullable
  public BigDecimal getTelephoneExt() {
    return telephoneExt;
  }

  public void setTelephoneExt(BigDecimal telephoneExt) {
    this.telephoneExt = telephoneExt;
  }


  public RadAnalyst title(String title) {
    this.title = title;
    return this;
  }

  /**
   * Title of RAD analyst
   * @return title
   */
  @javax.annotation.Nullable
  public String getTitle() {
    return title;
  }

  public void setTitle(String title) {
    this.title = title;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    RadAnalyst radAnalyst = (RadAnalyst) o;
    return Objects.equals(this.analystId, radAnalyst.analystId) &&
        Objects.equals(this.analystShortId, radAnalyst.analystShortId) &&
        Objects.equals(this.assignmentUpdateDate, radAnalyst.assignmentUpdateDate) &&
        Objects.equals(this.committeeId, radAnalyst.committeeId) &&
        Objects.equals(this.committeeName, radAnalyst.committeeName) &&
        Objects.equals(this.email, radAnalyst.email) &&
        Objects.equals(this.firstName, radAnalyst.firstName) &&
        Objects.equals(this.lastName, radAnalyst.lastName) &&
        Objects.equals(this.radBranch, radAnalyst.radBranch) &&
        Objects.equals(this.telephoneExt, radAnalyst.telephoneExt) &&
        Objects.equals(this.title, radAnalyst.title);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(analystId, analystShortId, assignmentUpdateDate, committeeId, committeeName, email, firstName, lastName, radBranch, telephoneExt, title);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class RadAnalyst {\n");
    sb.append("    analystId: ").append(toIndentedString(analystId)).append("\n");
    sb.append("    analystShortId: ").append(toIndentedString(analystShortId)).append("\n");
    sb.append("    assignmentUpdateDate: ").append(toIndentedString(assignmentUpdateDate)).append("\n");
    sb.append("    committeeId: ").append(toIndentedString(committeeId)).append("\n");
    sb.append("    committeeName: ").append(toIndentedString(committeeName)).append("\n");
    sb.append("    email: ").append(toIndentedString(email)).append("\n");
    sb.append("    firstName: ").append(toIndentedString(firstName)).append("\n");
    sb.append("    lastName: ").append(toIndentedString(lastName)).append("\n");
    sb.append("    radBranch: ").append(toIndentedString(radBranch)).append("\n");
    sb.append("    telephoneExt: ").append(toIndentedString(telephoneExt)).append("\n");
    sb.append("    title: ").append(toIndentedString(title)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("analyst_id");
    openapiFields.add("analyst_short_id");
    openapiFields.add("assignment_update_date");
    openapiFields.add("committee_id");
    openapiFields.add("committee_name");
    openapiFields.add("email");
    openapiFields.add("first_name");
    openapiFields.add("last_name");
    openapiFields.add("rad_branch");
    openapiFields.add("telephone_ext");
    openapiFields.add("title");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("committee_id");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to RadAnalyst
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!RadAnalyst.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in RadAnalyst is not found in the empty JSON string", RadAnalyst.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!RadAnalyst.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `RadAnalyst` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : RadAnalyst.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("committee_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `committee_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("committee_id").toString()));
      }
      if ((jsonObj.get("committee_name") != null && !jsonObj.get("committee_name").isJsonNull()) && !jsonObj.get("committee_name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `committee_name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("committee_name").toString()));
      }
      if ((jsonObj.get("email") != null && !jsonObj.get("email").isJsonNull()) && !jsonObj.get("email").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `email` to be a primitive type in the JSON string but got `%s`", jsonObj.get("email").toString()));
      }
      if ((jsonObj.get("first_name") != null && !jsonObj.get("first_name").isJsonNull()) && !jsonObj.get("first_name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `first_name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("first_name").toString()));
      }
      if ((jsonObj.get("last_name") != null && !jsonObj.get("last_name").isJsonNull()) && !jsonObj.get("last_name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `last_name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("last_name").toString()));
      }
      if ((jsonObj.get("rad_branch") != null && !jsonObj.get("rad_branch").isJsonNull()) && !jsonObj.get("rad_branch").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `rad_branch` to be a primitive type in the JSON string but got `%s`", jsonObj.get("rad_branch").toString()));
      }
      if ((jsonObj.get("title") != null && !jsonObj.get("title").isJsonNull()) && !jsonObj.get("title").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `title` to be a primitive type in the JSON string but got `%s`", jsonObj.get("title").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!RadAnalyst.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'RadAnalyst' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<RadAnalyst> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(RadAnalyst.class));

       return (TypeAdapter<T>) new TypeAdapter<RadAnalyst>() {
           @Override
           public void write(JsonWriter out, RadAnalyst value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public RadAnalyst read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of RadAnalyst given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of RadAnalyst
   * @throws IOException if the JSON string is invalid with respect to RadAnalyst
   */
  public static RadAnalyst fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, RadAnalyst.class);
  }

  /**
   * Convert an instance of RadAnalyst to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

