/*
 * OpenFEC
 * This application programming interface (API) allows you to explore the way candidates and committees fund their campaigns.    The Federal Election Commission (FEC) API is a RESTful web service supporting full-text and field-specific searches on FEC data. [Bulk downloads](https://www.fec.gov/data/advanced/?tab=bulk-data) are available on the current site. Information is tied to the underlying forms by file ID and image ID. Data is updated nightly.    There are a lot of data, and a good place to start is to use search to find interesting candidates and committees. Then, you can use their IDs to find report or line item details with the other endpoints. If you are interested in individual donors, check out contributor information in the `/schedule_a/` endpoints.    <b class=\"body\" id=\"getting_started_head\">Getting started with the openFEC API</b><br>    If you would like to use the FEC's API programmatically, you can sign up for your own API key using our form. Alternatively, you can still try out our API without an API key by using the web interface and using DEMO_KEY. Note that when you use the openFEC API you are subject to the [Terms of Service](https://github.com/fecgov/FEC/blob/master/TERMS-OF-SERVICE.md) and [Acceptable Use policy](https://github.com/fecgov/FEC/blob/master/ACCEPTABLE-USE-POLICY.md).    Signing up for an API key will enable you to place up to 1,000 calls an hour. Each call is limited to 100 results per page. You can email questions, comments or a request to get a key for 7,200 calls an hour (120 calls per minute) to <a href=\"mailto:APIinfo@fec.gov\">APIinfo@fec.gov</a>. You can also ask questions and discuss the data in a community led [group](https://groups.google.com/forum/#!forum/fec-data).    The model definitions and schema are available at [/swagger](/swagger/). This is useful for making wrappers and exploring the data.    A few restrictions limit the way you can use FEC data. For example, you canâ€™t use contributor lists for commercial purposes or to solicit donations. [Learn more here](https://www.fec.gov/updates/sale-or-use-contributor-information/).    [Inspect our source code](https://github.com/fecgov/openFEC). We welcome issues and pull requests!    <p><br></p> <h2 class=\"title\" id=\"signup_head\">Sign up for an API key</h2> <div id=\"apidatagov_signup\">Loading signup form...</div>
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.CommitteeReportsPage;
import org.openapitools.client.model.CommitteeTotalsPage;
import org.openapitools.client.model.ElectionPage;
import org.openapitools.client.model.ElectionSummary;
import org.openapitools.client.model.ElectionsListPage;
import org.openapitools.client.model.EntityReceiptDisbursementTotalsPage;
import org.openapitools.client.model.InauguralDonationsPage;
import java.time.LocalDate;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class FinancialApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public FinancialApi() {
        this(Configuration.getDefaultApiClient());
    }

    public FinancialApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for committeeCommitteeIdReportsGet
     * @param apiKey  API key for https://api.data.gov. Get one at https://api.data.gov/signup.  (required)
     * @param committeeId  A unique identifier assigned to each committee or filer registered with the FEC. In general committee id&#39;s begin with the letter C which is followed by eight digits.  (required)
     * @param minPartyCoordinatedExpenditures  Filter for all amounts greater than a value.  (optional)
     * @param isAmended  False indicates that a report is the most recent. True indicates that the report has been superseded by an amendment.  (optional)
     * @param maxPartyCoordinatedExpenditures  Filter for all amounts less than a value.  (optional)
     * @param maxCashOnHandEndPeriodAmount  Filter for all amounts less than a value.  (optional)
     * @param maxDisbursementsAmount  Filter for all amounts less than a value.  (optional)
     * @param maxDebtsOwedExpenditures  Filter for all amounts less than a value.  (optional)
     * @param minReceiptsAmount  Filter for all amounts greater than a value.  (optional)
     * @param cycle  Filter records to only those that were applicable to a given two-year period.The cycle begins with an odd year and is named for its ending, even year.  (optional)
     * @param sortNullOnly Toggle that filters out all rows having sort column that is non-null (optional, default to false)
     * @param minDebtsOwedAmount  Filter for all amounts greater than a value.  (optional)
     * @param sortHideNull Hide null values on sorted column(s). (optional, default to false)
     * @param candidateId  A unique identifier assigned to each candidate registered with the FEC. If a person runs for several offices, that person will have separate candidate IDs for each office. First character indicates office - [P]residential, [H]ouse, [S]enate]. Second character is the last digit of the two-year period the ID was created. Third and fourth is the candidate state. Presidential IDs don&#39;t have state. Fifth and sixth is the district when the candidate first ran. This does not change if the candidate/member&#39;s district changes during re-districting. Presidential IDs don&#39;t have districts. The rest is sequence.  (optional)
     * @param minIndependentExpenditures  Filter for all amounts greater than a value.  (optional)
     * @param perPage The number of results returned per page. Defaults to 20. (optional, default to 20)
     * @param sort  Provide a field to sort by. Use &#x60;-&#x60; for descending order. ex: &#x60;-case_no&#x60;  (optional)
     * @param maxReceiptsAmount  Filter for all amounts less than a value.  (optional)
     * @param reportType Report type; prefix with \&quot;-\&quot; to exclude. Name of report where the underlying data comes from:     - 10D Pre-Election     - 10G Pre-General     - 10P Pre-Primary     - 10R Pre-Run-Off     - 10S Pre-Special     - 12C Pre-Convention     - 12G Pre-General     - 12P Pre-Primary     - 12R Pre-Run-Off     - 12S Pre-Special     - 30D Post-Election     - 30G Post-General     - 30P Post-Primary     - 30R Post-Run-Off     - 30S Post-Special     - 60D Post-Convention     - M1  January Monthly     - M10 October Monthly     - M11 November Monthly     - M12 December Monthly     - M2  February Monthly     - M3  March Monthly     - M4  April Monthly     - M5  May Monthly     - M6  June Monthly     - M7  July Monthly     - M8  August Monthly     - M9  September Monthly     - MY  Mid-Year Report     - Q1  April Quarterly     - Q2  July Quarterly     - Q3  October Quarterly     - TER Termination Report     - YE  Year-End     - ADJ COMP ADJUST AMEND     - CA  COMPREHENSIVE AMEND  (optional)
     * @param maxTotalContributions  Filter for all amounts less than a value.  (optional)
     * @param sortNullsLast Toggle that sorts null values last (optional, default to false)
     * @param page For paginating through results, starting at page 1 (optional, default to 1)
     * @param year  Forms with coverage date -      year from the coverage ending date. Forms without coverage date -      year from the receipt date.  (optional)
     * @param maxIndependentExpenditures  Filter for all amounts less than a value.  (optional)
     * @param type The one-letter type code of the organization:         - C communication cost         - D delegate         - E electioneering communication         - H House         - I independent expenditure filer (not a committee)         - N PAC - nonqualified         - O independent expenditure-only (super PACs)         - P presidential         - Q PAC - qualified         - S Senate         - U single candidate independent expenditure         - V PAC with non-contribution account, nonqualified         - W PAC with non-contribution account, qualified         - X party, nonqualified         - Y party, qualified         - Z national party non-federal account  (optional)
     * @param minCashOnHandEndPeriodAmount  Filter for all amounts greater than a value.  (optional)
     * @param minDisbursementsAmount  Filter for all amounts greater than a value.  (optional)
     * @param minTotalContributions  Filter for all amounts greater than a value.  (optional)
     * @param beginningImageNumber  Unique identifier for the electronic or paper report. This number is used to construct PDF URLs to the original document.  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call committeeCommitteeIdReportsGetCall(String apiKey, String committeeId, String minPartyCoordinatedExpenditures, Boolean isAmended, String maxPartyCoordinatedExpenditures, String maxCashOnHandEndPeriodAmount, String maxDisbursementsAmount, String maxDebtsOwedExpenditures, String minReceiptsAmount, List<Integer> cycle, Boolean sortNullOnly, String minDebtsOwedAmount, Boolean sortHideNull, String candidateId, String minIndependentExpenditures, Integer perPage, List<String> sort, String maxReceiptsAmount, List<String> reportType, String maxTotalContributions, Boolean sortNullsLast, Integer page, List<Integer> year, String maxIndependentExpenditures, List<String> type, String minCashOnHandEndPeriodAmount, String minDisbursementsAmount, String minTotalContributions, List<String> beginningImageNumber, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/committee/{committee_id}/reports/"
            .replace("{" + "committee_id" + "}", localVarApiClient.escapeString(committeeId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (minPartyCoordinatedExpenditures != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("min_party_coordinated_expenditures", minPartyCoordinatedExpenditures));
        }

        if (isAmended != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("is_amended", isAmended));
        }

        if (maxPartyCoordinatedExpenditures != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("max_party_coordinated_expenditures", maxPartyCoordinatedExpenditures));
        }

        if (maxCashOnHandEndPeriodAmount != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("max_cash_on_hand_end_period_amount", maxCashOnHandEndPeriodAmount));
        }

        if (maxDisbursementsAmount != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("max_disbursements_amount", maxDisbursementsAmount));
        }

        if (maxDebtsOwedExpenditures != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("max_debts_owed_expenditures", maxDebtsOwedExpenditures));
        }

        if (minReceiptsAmount != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("min_receipts_amount", minReceiptsAmount));
        }

        if (cycle != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "cycle", cycle));
        }

        if (sortNullOnly != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort_null_only", sortNullOnly));
        }

        if (minDebtsOwedAmount != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("min_debts_owed_amount", minDebtsOwedAmount));
        }

        if (sortHideNull != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort_hide_null", sortHideNull));
        }

        if (candidateId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("candidate_id", candidateId));
        }

        if (minIndependentExpenditures != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("min_independent_expenditures", minIndependentExpenditures));
        }

        if (perPage != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("per_page", perPage));
        }

        if (sort != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "sort", sort));
        }

        if (apiKey != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api_key", apiKey));
        }

        if (maxReceiptsAmount != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("max_receipts_amount", maxReceiptsAmount));
        }

        if (reportType != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "report_type", reportType));
        }

        if (maxTotalContributions != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("max_total_contributions", maxTotalContributions));
        }

        if (sortNullsLast != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort_nulls_last", sortNullsLast));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (year != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "year", year));
        }

        if (maxIndependentExpenditures != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("max_independent_expenditures", maxIndependentExpenditures));
        }

        if (type != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "type", type));
        }

        if (minCashOnHandEndPeriodAmount != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("min_cash_on_hand_end_period_amount", minCashOnHandEndPeriodAmount));
        }

        if (minDisbursementsAmount != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("min_disbursements_amount", minDisbursementsAmount));
        }

        if (minTotalContributions != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("min_total_contributions", minTotalContributions));
        }

        if (beginningImageNumber != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "beginning_image_number", beginningImageNumber));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKeyHeaderAuth", "ApiKeyQueryAuth", "apiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call committeeCommitteeIdReportsGetValidateBeforeCall(String apiKey, String committeeId, String minPartyCoordinatedExpenditures, Boolean isAmended, String maxPartyCoordinatedExpenditures, String maxCashOnHandEndPeriodAmount, String maxDisbursementsAmount, String maxDebtsOwedExpenditures, String minReceiptsAmount, List<Integer> cycle, Boolean sortNullOnly, String minDebtsOwedAmount, Boolean sortHideNull, String candidateId, String minIndependentExpenditures, Integer perPage, List<String> sort, String maxReceiptsAmount, List<String> reportType, String maxTotalContributions, Boolean sortNullsLast, Integer page, List<Integer> year, String maxIndependentExpenditures, List<String> type, String minCashOnHandEndPeriodAmount, String minDisbursementsAmount, String minTotalContributions, List<String> beginningImageNumber, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'apiKey' is set
        if (apiKey == null) {
            throw new ApiException("Missing the required parameter 'apiKey' when calling committeeCommitteeIdReportsGet(Async)");
        }

        // verify the required parameter 'committeeId' is set
        if (committeeId == null) {
            throw new ApiException("Missing the required parameter 'committeeId' when calling committeeCommitteeIdReportsGet(Async)");
        }

        return committeeCommitteeIdReportsGetCall(apiKey, committeeId, minPartyCoordinatedExpenditures, isAmended, maxPartyCoordinatedExpenditures, maxCashOnHandEndPeriodAmount, maxDisbursementsAmount, maxDebtsOwedExpenditures, minReceiptsAmount, cycle, sortNullOnly, minDebtsOwedAmount, sortHideNull, candidateId, minIndependentExpenditures, perPage, sort, maxReceiptsAmount, reportType, maxTotalContributions, sortNullsLast, page, year, maxIndependentExpenditures, type, minCashOnHandEndPeriodAmount, minDisbursementsAmount, minTotalContributions, beginningImageNumber, _callback);

    }

    /**
     * 
     *  Each report represents the summary information from Form 3, Form 3X and Form 3P. These reports have key statistics that illuminate the financial status of a given committee. Things like cash on hand, debts owed by committee, total receipts, and total disbursements are especially helpful for understanding a committee&#39;s financial dealings.  By default, this endpoint includes both amended and final versions of each report. To restrict to only the final versions of each report, use &#x60;is_amended&#x3D;false&#x60;; to retrieve only reports that have been amended, use &#x60;is_amended&#x3D;true&#x60;.  Several different reporting structures exist, depending on the type of organization that submits financial information. To see an example of these reporting requirements, look at the summary and detailed summary pages of Form 3, Form 3X, and Form 3P.  DISCLAIMER: The field labels contained within this resource are subject to change.  We are attempting to succinctly label these fields while conveying clear meaning to ensure accessibility for all users. 
     * @param apiKey  API key for https://api.data.gov. Get one at https://api.data.gov/signup.  (required)
     * @param committeeId  A unique identifier assigned to each committee or filer registered with the FEC. In general committee id&#39;s begin with the letter C which is followed by eight digits.  (required)
     * @param minPartyCoordinatedExpenditures  Filter for all amounts greater than a value.  (optional)
     * @param isAmended  False indicates that a report is the most recent. True indicates that the report has been superseded by an amendment.  (optional)
     * @param maxPartyCoordinatedExpenditures  Filter for all amounts less than a value.  (optional)
     * @param maxCashOnHandEndPeriodAmount  Filter for all amounts less than a value.  (optional)
     * @param maxDisbursementsAmount  Filter for all amounts less than a value.  (optional)
     * @param maxDebtsOwedExpenditures  Filter for all amounts less than a value.  (optional)
     * @param minReceiptsAmount  Filter for all amounts greater than a value.  (optional)
     * @param cycle  Filter records to only those that were applicable to a given two-year period.The cycle begins with an odd year and is named for its ending, even year.  (optional)
     * @param sortNullOnly Toggle that filters out all rows having sort column that is non-null (optional, default to false)
     * @param minDebtsOwedAmount  Filter for all amounts greater than a value.  (optional)
     * @param sortHideNull Hide null values on sorted column(s). (optional, default to false)
     * @param candidateId  A unique identifier assigned to each candidate registered with the FEC. If a person runs for several offices, that person will have separate candidate IDs for each office. First character indicates office - [P]residential, [H]ouse, [S]enate]. Second character is the last digit of the two-year period the ID was created. Third and fourth is the candidate state. Presidential IDs don&#39;t have state. Fifth and sixth is the district when the candidate first ran. This does not change if the candidate/member&#39;s district changes during re-districting. Presidential IDs don&#39;t have districts. The rest is sequence.  (optional)
     * @param minIndependentExpenditures  Filter for all amounts greater than a value.  (optional)
     * @param perPage The number of results returned per page. Defaults to 20. (optional, default to 20)
     * @param sort  Provide a field to sort by. Use &#x60;-&#x60; for descending order. ex: &#x60;-case_no&#x60;  (optional)
     * @param maxReceiptsAmount  Filter for all amounts less than a value.  (optional)
     * @param reportType Report type; prefix with \&quot;-\&quot; to exclude. Name of report where the underlying data comes from:     - 10D Pre-Election     - 10G Pre-General     - 10P Pre-Primary     - 10R Pre-Run-Off     - 10S Pre-Special     - 12C Pre-Convention     - 12G Pre-General     - 12P Pre-Primary     - 12R Pre-Run-Off     - 12S Pre-Special     - 30D Post-Election     - 30G Post-General     - 30P Post-Primary     - 30R Post-Run-Off     - 30S Post-Special     - 60D Post-Convention     - M1  January Monthly     - M10 October Monthly     - M11 November Monthly     - M12 December Monthly     - M2  February Monthly     - M3  March Monthly     - M4  April Monthly     - M5  May Monthly     - M6  June Monthly     - M7  July Monthly     - M8  August Monthly     - M9  September Monthly     - MY  Mid-Year Report     - Q1  April Quarterly     - Q2  July Quarterly     - Q3  October Quarterly     - TER Termination Report     - YE  Year-End     - ADJ COMP ADJUST AMEND     - CA  COMPREHENSIVE AMEND  (optional)
     * @param maxTotalContributions  Filter for all amounts less than a value.  (optional)
     * @param sortNullsLast Toggle that sorts null values last (optional, default to false)
     * @param page For paginating through results, starting at page 1 (optional, default to 1)
     * @param year  Forms with coverage date -      year from the coverage ending date. Forms without coverage date -      year from the receipt date.  (optional)
     * @param maxIndependentExpenditures  Filter for all amounts less than a value.  (optional)
     * @param type The one-letter type code of the organization:         - C communication cost         - D delegate         - E electioneering communication         - H House         - I independent expenditure filer (not a committee)         - N PAC - nonqualified         - O independent expenditure-only (super PACs)         - P presidential         - Q PAC - qualified         - S Senate         - U single candidate independent expenditure         - V PAC with non-contribution account, nonqualified         - W PAC with non-contribution account, qualified         - X party, nonqualified         - Y party, qualified         - Z national party non-federal account  (optional)
     * @param minCashOnHandEndPeriodAmount  Filter for all amounts greater than a value.  (optional)
     * @param minDisbursementsAmount  Filter for all amounts greater than a value.  (optional)
     * @param minTotalContributions  Filter for all amounts greater than a value.  (optional)
     * @param beginningImageNumber  Unique identifier for the electronic or paper report. This number is used to construct PDF URLs to the original document.  (optional)
     * @return CommitteeReportsPage
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public CommitteeReportsPage committeeCommitteeIdReportsGet(String apiKey, String committeeId, String minPartyCoordinatedExpenditures, Boolean isAmended, String maxPartyCoordinatedExpenditures, String maxCashOnHandEndPeriodAmount, String maxDisbursementsAmount, String maxDebtsOwedExpenditures, String minReceiptsAmount, List<Integer> cycle, Boolean sortNullOnly, String minDebtsOwedAmount, Boolean sortHideNull, String candidateId, String minIndependentExpenditures, Integer perPage, List<String> sort, String maxReceiptsAmount, List<String> reportType, String maxTotalContributions, Boolean sortNullsLast, Integer page, List<Integer> year, String maxIndependentExpenditures, List<String> type, String minCashOnHandEndPeriodAmount, String minDisbursementsAmount, String minTotalContributions, List<String> beginningImageNumber) throws ApiException {
        ApiResponse<CommitteeReportsPage> localVarResp = committeeCommitteeIdReportsGetWithHttpInfo(apiKey, committeeId, minPartyCoordinatedExpenditures, isAmended, maxPartyCoordinatedExpenditures, maxCashOnHandEndPeriodAmount, maxDisbursementsAmount, maxDebtsOwedExpenditures, minReceiptsAmount, cycle, sortNullOnly, minDebtsOwedAmount, sortHideNull, candidateId, minIndependentExpenditures, perPage, sort, maxReceiptsAmount, reportType, maxTotalContributions, sortNullsLast, page, year, maxIndependentExpenditures, type, minCashOnHandEndPeriodAmount, minDisbursementsAmount, minTotalContributions, beginningImageNumber);
        return localVarResp.getData();
    }

    /**
     * 
     *  Each report represents the summary information from Form 3, Form 3X and Form 3P. These reports have key statistics that illuminate the financial status of a given committee. Things like cash on hand, debts owed by committee, total receipts, and total disbursements are especially helpful for understanding a committee&#39;s financial dealings.  By default, this endpoint includes both amended and final versions of each report. To restrict to only the final versions of each report, use &#x60;is_amended&#x3D;false&#x60;; to retrieve only reports that have been amended, use &#x60;is_amended&#x3D;true&#x60;.  Several different reporting structures exist, depending on the type of organization that submits financial information. To see an example of these reporting requirements, look at the summary and detailed summary pages of Form 3, Form 3X, and Form 3P.  DISCLAIMER: The field labels contained within this resource are subject to change.  We are attempting to succinctly label these fields while conveying clear meaning to ensure accessibility for all users. 
     * @param apiKey  API key for https://api.data.gov. Get one at https://api.data.gov/signup.  (required)
     * @param committeeId  A unique identifier assigned to each committee or filer registered with the FEC. In general committee id&#39;s begin with the letter C which is followed by eight digits.  (required)
     * @param minPartyCoordinatedExpenditures  Filter for all amounts greater than a value.  (optional)
     * @param isAmended  False indicates that a report is the most recent. True indicates that the report has been superseded by an amendment.  (optional)
     * @param maxPartyCoordinatedExpenditures  Filter for all amounts less than a value.  (optional)
     * @param maxCashOnHandEndPeriodAmount  Filter for all amounts less than a value.  (optional)
     * @param maxDisbursementsAmount  Filter for all amounts less than a value.  (optional)
     * @param maxDebtsOwedExpenditures  Filter for all amounts less than a value.  (optional)
     * @param minReceiptsAmount  Filter for all amounts greater than a value.  (optional)
     * @param cycle  Filter records to only those that were applicable to a given two-year period.The cycle begins with an odd year and is named for its ending, even year.  (optional)
     * @param sortNullOnly Toggle that filters out all rows having sort column that is non-null (optional, default to false)
     * @param minDebtsOwedAmount  Filter for all amounts greater than a value.  (optional)
     * @param sortHideNull Hide null values on sorted column(s). (optional, default to false)
     * @param candidateId  A unique identifier assigned to each candidate registered with the FEC. If a person runs for several offices, that person will have separate candidate IDs for each office. First character indicates office - [P]residential, [H]ouse, [S]enate]. Second character is the last digit of the two-year period the ID was created. Third and fourth is the candidate state. Presidential IDs don&#39;t have state. Fifth and sixth is the district when the candidate first ran. This does not change if the candidate/member&#39;s district changes during re-districting. Presidential IDs don&#39;t have districts. The rest is sequence.  (optional)
     * @param minIndependentExpenditures  Filter for all amounts greater than a value.  (optional)
     * @param perPage The number of results returned per page. Defaults to 20. (optional, default to 20)
     * @param sort  Provide a field to sort by. Use &#x60;-&#x60; for descending order. ex: &#x60;-case_no&#x60;  (optional)
     * @param maxReceiptsAmount  Filter for all amounts less than a value.  (optional)
     * @param reportType Report type; prefix with \&quot;-\&quot; to exclude. Name of report where the underlying data comes from:     - 10D Pre-Election     - 10G Pre-General     - 10P Pre-Primary     - 10R Pre-Run-Off     - 10S Pre-Special     - 12C Pre-Convention     - 12G Pre-General     - 12P Pre-Primary     - 12R Pre-Run-Off     - 12S Pre-Special     - 30D Post-Election     - 30G Post-General     - 30P Post-Primary     - 30R Post-Run-Off     - 30S Post-Special     - 60D Post-Convention     - M1  January Monthly     - M10 October Monthly     - M11 November Monthly     - M12 December Monthly     - M2  February Monthly     - M3  March Monthly     - M4  April Monthly     - M5  May Monthly     - M6  June Monthly     - M7  July Monthly     - M8  August Monthly     - M9  September Monthly     - MY  Mid-Year Report     - Q1  April Quarterly     - Q2  July Quarterly     - Q3  October Quarterly     - TER Termination Report     - YE  Year-End     - ADJ COMP ADJUST AMEND     - CA  COMPREHENSIVE AMEND  (optional)
     * @param maxTotalContributions  Filter for all amounts less than a value.  (optional)
     * @param sortNullsLast Toggle that sorts null values last (optional, default to false)
     * @param page For paginating through results, starting at page 1 (optional, default to 1)
     * @param year  Forms with coverage date -      year from the coverage ending date. Forms without coverage date -      year from the receipt date.  (optional)
     * @param maxIndependentExpenditures  Filter for all amounts less than a value.  (optional)
     * @param type The one-letter type code of the organization:         - C communication cost         - D delegate         - E electioneering communication         - H House         - I independent expenditure filer (not a committee)         - N PAC - nonqualified         - O independent expenditure-only (super PACs)         - P presidential         - Q PAC - qualified         - S Senate         - U single candidate independent expenditure         - V PAC with non-contribution account, nonqualified         - W PAC with non-contribution account, qualified         - X party, nonqualified         - Y party, qualified         - Z national party non-federal account  (optional)
     * @param minCashOnHandEndPeriodAmount  Filter for all amounts greater than a value.  (optional)
     * @param minDisbursementsAmount  Filter for all amounts greater than a value.  (optional)
     * @param minTotalContributions  Filter for all amounts greater than a value.  (optional)
     * @param beginningImageNumber  Unique identifier for the electronic or paper report. This number is used to construct PDF URLs to the original document.  (optional)
     * @return ApiResponse&lt;CommitteeReportsPage&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CommitteeReportsPage> committeeCommitteeIdReportsGetWithHttpInfo(String apiKey, String committeeId, String minPartyCoordinatedExpenditures, Boolean isAmended, String maxPartyCoordinatedExpenditures, String maxCashOnHandEndPeriodAmount, String maxDisbursementsAmount, String maxDebtsOwedExpenditures, String minReceiptsAmount, List<Integer> cycle, Boolean sortNullOnly, String minDebtsOwedAmount, Boolean sortHideNull, String candidateId, String minIndependentExpenditures, Integer perPage, List<String> sort, String maxReceiptsAmount, List<String> reportType, String maxTotalContributions, Boolean sortNullsLast, Integer page, List<Integer> year, String maxIndependentExpenditures, List<String> type, String minCashOnHandEndPeriodAmount, String minDisbursementsAmount, String minTotalContributions, List<String> beginningImageNumber) throws ApiException {
        okhttp3.Call localVarCall = committeeCommitteeIdReportsGetValidateBeforeCall(apiKey, committeeId, minPartyCoordinatedExpenditures, isAmended, maxPartyCoordinatedExpenditures, maxCashOnHandEndPeriodAmount, maxDisbursementsAmount, maxDebtsOwedExpenditures, minReceiptsAmount, cycle, sortNullOnly, minDebtsOwedAmount, sortHideNull, candidateId, minIndependentExpenditures, perPage, sort, maxReceiptsAmount, reportType, maxTotalContributions, sortNullsLast, page, year, maxIndependentExpenditures, type, minCashOnHandEndPeriodAmount, minDisbursementsAmount, minTotalContributions, beginningImageNumber, null);
        Type localVarReturnType = new TypeToken<CommitteeReportsPage>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     *  Each report represents the summary information from Form 3, Form 3X and Form 3P. These reports have key statistics that illuminate the financial status of a given committee. Things like cash on hand, debts owed by committee, total receipts, and total disbursements are especially helpful for understanding a committee&#39;s financial dealings.  By default, this endpoint includes both amended and final versions of each report. To restrict to only the final versions of each report, use &#x60;is_amended&#x3D;false&#x60;; to retrieve only reports that have been amended, use &#x60;is_amended&#x3D;true&#x60;.  Several different reporting structures exist, depending on the type of organization that submits financial information. To see an example of these reporting requirements, look at the summary and detailed summary pages of Form 3, Form 3X, and Form 3P.  DISCLAIMER: The field labels contained within this resource are subject to change.  We are attempting to succinctly label these fields while conveying clear meaning to ensure accessibility for all users. 
     * @param apiKey  API key for https://api.data.gov. Get one at https://api.data.gov/signup.  (required)
     * @param committeeId  A unique identifier assigned to each committee or filer registered with the FEC. In general committee id&#39;s begin with the letter C which is followed by eight digits.  (required)
     * @param minPartyCoordinatedExpenditures  Filter for all amounts greater than a value.  (optional)
     * @param isAmended  False indicates that a report is the most recent. True indicates that the report has been superseded by an amendment.  (optional)
     * @param maxPartyCoordinatedExpenditures  Filter for all amounts less than a value.  (optional)
     * @param maxCashOnHandEndPeriodAmount  Filter for all amounts less than a value.  (optional)
     * @param maxDisbursementsAmount  Filter for all amounts less than a value.  (optional)
     * @param maxDebtsOwedExpenditures  Filter for all amounts less than a value.  (optional)
     * @param minReceiptsAmount  Filter for all amounts greater than a value.  (optional)
     * @param cycle  Filter records to only those that were applicable to a given two-year period.The cycle begins with an odd year and is named for its ending, even year.  (optional)
     * @param sortNullOnly Toggle that filters out all rows having sort column that is non-null (optional, default to false)
     * @param minDebtsOwedAmount  Filter for all amounts greater than a value.  (optional)
     * @param sortHideNull Hide null values on sorted column(s). (optional, default to false)
     * @param candidateId  A unique identifier assigned to each candidate registered with the FEC. If a person runs for several offices, that person will have separate candidate IDs for each office. First character indicates office - [P]residential, [H]ouse, [S]enate]. Second character is the last digit of the two-year period the ID was created. Third and fourth is the candidate state. Presidential IDs don&#39;t have state. Fifth and sixth is the district when the candidate first ran. This does not change if the candidate/member&#39;s district changes during re-districting. Presidential IDs don&#39;t have districts. The rest is sequence.  (optional)
     * @param minIndependentExpenditures  Filter for all amounts greater than a value.  (optional)
     * @param perPage The number of results returned per page. Defaults to 20. (optional, default to 20)
     * @param sort  Provide a field to sort by. Use &#x60;-&#x60; for descending order. ex: &#x60;-case_no&#x60;  (optional)
     * @param maxReceiptsAmount  Filter for all amounts less than a value.  (optional)
     * @param reportType Report type; prefix with \&quot;-\&quot; to exclude. Name of report where the underlying data comes from:     - 10D Pre-Election     - 10G Pre-General     - 10P Pre-Primary     - 10R Pre-Run-Off     - 10S Pre-Special     - 12C Pre-Convention     - 12G Pre-General     - 12P Pre-Primary     - 12R Pre-Run-Off     - 12S Pre-Special     - 30D Post-Election     - 30G Post-General     - 30P Post-Primary     - 30R Post-Run-Off     - 30S Post-Special     - 60D Post-Convention     - M1  January Monthly     - M10 October Monthly     - M11 November Monthly     - M12 December Monthly     - M2  February Monthly     - M3  March Monthly     - M4  April Monthly     - M5  May Monthly     - M6  June Monthly     - M7  July Monthly     - M8  August Monthly     - M9  September Monthly     - MY  Mid-Year Report     - Q1  April Quarterly     - Q2  July Quarterly     - Q3  October Quarterly     - TER Termination Report     - YE  Year-End     - ADJ COMP ADJUST AMEND     - CA  COMPREHENSIVE AMEND  (optional)
     * @param maxTotalContributions  Filter for all amounts less than a value.  (optional)
     * @param sortNullsLast Toggle that sorts null values last (optional, default to false)
     * @param page For paginating through results, starting at page 1 (optional, default to 1)
     * @param year  Forms with coverage date -      year from the coverage ending date. Forms without coverage date -      year from the receipt date.  (optional)
     * @param maxIndependentExpenditures  Filter for all amounts less than a value.  (optional)
     * @param type The one-letter type code of the organization:         - C communication cost         - D delegate         - E electioneering communication         - H House         - I independent expenditure filer (not a committee)         - N PAC - nonqualified         - O independent expenditure-only (super PACs)         - P presidential         - Q PAC - qualified         - S Senate         - U single candidate independent expenditure         - V PAC with non-contribution account, nonqualified         - W PAC with non-contribution account, qualified         - X party, nonqualified         - Y party, qualified         - Z national party non-federal account  (optional)
     * @param minCashOnHandEndPeriodAmount  Filter for all amounts greater than a value.  (optional)
     * @param minDisbursementsAmount  Filter for all amounts greater than a value.  (optional)
     * @param minTotalContributions  Filter for all amounts greater than a value.  (optional)
     * @param beginningImageNumber  Unique identifier for the electronic or paper report. This number is used to construct PDF URLs to the original document.  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call committeeCommitteeIdReportsGetAsync(String apiKey, String committeeId, String minPartyCoordinatedExpenditures, Boolean isAmended, String maxPartyCoordinatedExpenditures, String maxCashOnHandEndPeriodAmount, String maxDisbursementsAmount, String maxDebtsOwedExpenditures, String minReceiptsAmount, List<Integer> cycle, Boolean sortNullOnly, String minDebtsOwedAmount, Boolean sortHideNull, String candidateId, String minIndependentExpenditures, Integer perPage, List<String> sort, String maxReceiptsAmount, List<String> reportType, String maxTotalContributions, Boolean sortNullsLast, Integer page, List<Integer> year, String maxIndependentExpenditures, List<String> type, String minCashOnHandEndPeriodAmount, String minDisbursementsAmount, String minTotalContributions, List<String> beginningImageNumber, final ApiCallback<CommitteeReportsPage> _callback) throws ApiException {

        okhttp3.Call localVarCall = committeeCommitteeIdReportsGetValidateBeforeCall(apiKey, committeeId, minPartyCoordinatedExpenditures, isAmended, maxPartyCoordinatedExpenditures, maxCashOnHandEndPeriodAmount, maxDisbursementsAmount, maxDebtsOwedExpenditures, minReceiptsAmount, cycle, sortNullOnly, minDebtsOwedAmount, sortHideNull, candidateId, minIndependentExpenditures, perPage, sort, maxReceiptsAmount, reportType, maxTotalContributions, sortNullsLast, page, year, maxIndependentExpenditures, type, minCashOnHandEndPeriodAmount, minDisbursementsAmount, minTotalContributions, beginningImageNumber, _callback);
        Type localVarReturnType = new TypeToken<CommitteeReportsPage>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for committeeCommitteeIdTotalsGet
     * @param apiKey  API key for https://api.data.gov. Get one at https://api.data.gov/signup.  (required)
     * @param committeeId  A unique identifier assigned to each committee or filer registered with the FEC. In general committee id&#39;s begin with the letter C which is followed by eight digits.  (required)
     * @param page For paginating through results, starting at page 1 (optional, default to 1)
     * @param sortHideNull Hide null values on sorted column(s). (optional, default to false)
     * @param perPage The number of results returned per page. Defaults to 20. (optional, default to 20)
     * @param sortNullsLast Toggle that sorts null values last (optional, default to false)
     * @param sort Provide a field to sort by. Use &#x60;-&#x60; for descending order.  (optional, default to -cycle)
     * @param cycle  Filter records to only those that were applicable to a given two-year period.The cycle begins with an odd year and is named for its ending, even year.  (optional)
     * @param sortNullOnly Toggle that filters out all rows having sort column that is non-null (optional, default to false)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call committeeCommitteeIdTotalsGetCall(String apiKey, String committeeId, Integer page, Boolean sortHideNull, Integer perPage, Boolean sortNullsLast, String sort, List<Integer> cycle, Boolean sortNullOnly, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/committee/{committee_id}/totals/"
            .replace("{" + "committee_id" + "}", localVarApiClient.escapeString(committeeId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (apiKey != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api_key", apiKey));
        }

        if (sortHideNull != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort_hide_null", sortHideNull));
        }

        if (perPage != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("per_page", perPage));
        }

        if (sortNullsLast != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort_nulls_last", sortNullsLast));
        }

        if (sort != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort", sort));
        }

        if (cycle != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "cycle", cycle));
        }

        if (sortNullOnly != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort_null_only", sortNullOnly));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKeyHeaderAuth", "ApiKeyQueryAuth", "apiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call committeeCommitteeIdTotalsGetValidateBeforeCall(String apiKey, String committeeId, Integer page, Boolean sortHideNull, Integer perPage, Boolean sortNullsLast, String sort, List<Integer> cycle, Boolean sortNullOnly, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'apiKey' is set
        if (apiKey == null) {
            throw new ApiException("Missing the required parameter 'apiKey' when calling committeeCommitteeIdTotalsGet(Async)");
        }

        // verify the required parameter 'committeeId' is set
        if (committeeId == null) {
            throw new ApiException("Missing the required parameter 'committeeId' when calling committeeCommitteeIdTotalsGet(Async)");
        }

        return committeeCommitteeIdTotalsGetCall(apiKey, committeeId, page, sortHideNull, perPage, sortNullsLast, sort, cycle, sortNullOnly, _callback);

    }

    /**
     * 
     *  This endpoint provides information about a committee&#39;s Form 3, Form 3X, or Form 3P financial reports, which are aggregated by two-year period. We refer to two-year periods as a &#x60;cycle&#x60;.  The cycle is named after the even-numbered year and includes the year before it. To obtain totals from 2013 and 2014, you would use 2014. In odd-numbered years, the current cycle is the next year â€” for example, in 2015, the current cycle is 2016.  For presidential and Senate candidates, multiple two-year cycles exist between elections.  
     * @param apiKey  API key for https://api.data.gov. Get one at https://api.data.gov/signup.  (required)
     * @param committeeId  A unique identifier assigned to each committee or filer registered with the FEC. In general committee id&#39;s begin with the letter C which is followed by eight digits.  (required)
     * @param page For paginating through results, starting at page 1 (optional, default to 1)
     * @param sortHideNull Hide null values on sorted column(s). (optional, default to false)
     * @param perPage The number of results returned per page. Defaults to 20. (optional, default to 20)
     * @param sortNullsLast Toggle that sorts null values last (optional, default to false)
     * @param sort Provide a field to sort by. Use &#x60;-&#x60; for descending order.  (optional, default to -cycle)
     * @param cycle  Filter records to only those that were applicable to a given two-year period.The cycle begins with an odd year and is named for its ending, even year.  (optional)
     * @param sortNullOnly Toggle that filters out all rows having sort column that is non-null (optional, default to false)
     * @return CommitteeTotalsPage
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public CommitteeTotalsPage committeeCommitteeIdTotalsGet(String apiKey, String committeeId, Integer page, Boolean sortHideNull, Integer perPage, Boolean sortNullsLast, String sort, List<Integer> cycle, Boolean sortNullOnly) throws ApiException {
        ApiResponse<CommitteeTotalsPage> localVarResp = committeeCommitteeIdTotalsGetWithHttpInfo(apiKey, committeeId, page, sortHideNull, perPage, sortNullsLast, sort, cycle, sortNullOnly);
        return localVarResp.getData();
    }

    /**
     * 
     *  This endpoint provides information about a committee&#39;s Form 3, Form 3X, or Form 3P financial reports, which are aggregated by two-year period. We refer to two-year periods as a &#x60;cycle&#x60;.  The cycle is named after the even-numbered year and includes the year before it. To obtain totals from 2013 and 2014, you would use 2014. In odd-numbered years, the current cycle is the next year â€” for example, in 2015, the current cycle is 2016.  For presidential and Senate candidates, multiple two-year cycles exist between elections.  
     * @param apiKey  API key for https://api.data.gov. Get one at https://api.data.gov/signup.  (required)
     * @param committeeId  A unique identifier assigned to each committee or filer registered with the FEC. In general committee id&#39;s begin with the letter C which is followed by eight digits.  (required)
     * @param page For paginating through results, starting at page 1 (optional, default to 1)
     * @param sortHideNull Hide null values on sorted column(s). (optional, default to false)
     * @param perPage The number of results returned per page. Defaults to 20. (optional, default to 20)
     * @param sortNullsLast Toggle that sorts null values last (optional, default to false)
     * @param sort Provide a field to sort by. Use &#x60;-&#x60; for descending order.  (optional, default to -cycle)
     * @param cycle  Filter records to only those that were applicable to a given two-year period.The cycle begins with an odd year and is named for its ending, even year.  (optional)
     * @param sortNullOnly Toggle that filters out all rows having sort column that is non-null (optional, default to false)
     * @return ApiResponse&lt;CommitteeTotalsPage&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CommitteeTotalsPage> committeeCommitteeIdTotalsGetWithHttpInfo(String apiKey, String committeeId, Integer page, Boolean sortHideNull, Integer perPage, Boolean sortNullsLast, String sort, List<Integer> cycle, Boolean sortNullOnly) throws ApiException {
        okhttp3.Call localVarCall = committeeCommitteeIdTotalsGetValidateBeforeCall(apiKey, committeeId, page, sortHideNull, perPage, sortNullsLast, sort, cycle, sortNullOnly, null);
        Type localVarReturnType = new TypeToken<CommitteeTotalsPage>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     *  This endpoint provides information about a committee&#39;s Form 3, Form 3X, or Form 3P financial reports, which are aggregated by two-year period. We refer to two-year periods as a &#x60;cycle&#x60;.  The cycle is named after the even-numbered year and includes the year before it. To obtain totals from 2013 and 2014, you would use 2014. In odd-numbered years, the current cycle is the next year â€” for example, in 2015, the current cycle is 2016.  For presidential and Senate candidates, multiple two-year cycles exist between elections.  
     * @param apiKey  API key for https://api.data.gov. Get one at https://api.data.gov/signup.  (required)
     * @param committeeId  A unique identifier assigned to each committee or filer registered with the FEC. In general committee id&#39;s begin with the letter C which is followed by eight digits.  (required)
     * @param page For paginating through results, starting at page 1 (optional, default to 1)
     * @param sortHideNull Hide null values on sorted column(s). (optional, default to false)
     * @param perPage The number of results returned per page. Defaults to 20. (optional, default to 20)
     * @param sortNullsLast Toggle that sorts null values last (optional, default to false)
     * @param sort Provide a field to sort by. Use &#x60;-&#x60; for descending order.  (optional, default to -cycle)
     * @param cycle  Filter records to only those that were applicable to a given two-year period.The cycle begins with an odd year and is named for its ending, even year.  (optional)
     * @param sortNullOnly Toggle that filters out all rows having sort column that is non-null (optional, default to false)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call committeeCommitteeIdTotalsGetAsync(String apiKey, String committeeId, Integer page, Boolean sortHideNull, Integer perPage, Boolean sortNullsLast, String sort, List<Integer> cycle, Boolean sortNullOnly, final ApiCallback<CommitteeTotalsPage> _callback) throws ApiException {

        okhttp3.Call localVarCall = committeeCommitteeIdTotalsGetValidateBeforeCall(apiKey, committeeId, page, sortHideNull, perPage, sortNullsLast, sort, cycle, sortNullOnly, _callback);
        Type localVarReturnType = new TypeToken<CommitteeTotalsPage>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for electionsGet
     * @param apiKey  API key for https://api.data.gov. Get one at https://api.data.gov/signup.  (required)
     * @param cycle  Two-year election cycle in which a candidate runs for office. Calculated from Form 2. The cycle begins with an odd year and is named for its ending, even year. This cycle follows the traditional house election cycle and subdivides the presidential and Senate elections into comparable two-year blocks. To retrieve data for the entire four years of a presidential term or six years of a senatorial term, you will need the &#x60;election_full&#x60; flag.  (required)
     * @param office Federal office candidate runs for: H, S or P (required)
     * @param district Two-digit US House distirict of the office the candidate is running for. Presidential, Senate and House at-large candidates will have District 00. (optional)
     * @param electionFull &#x60;True&#x60; indicates that full election period of a candidate. &#x60;False&#x60; indicates that two year election cycle. (optional, default to true)
     * @param sortNullOnly Toggle that filters out all rows having sort column that is non-null (optional, default to false)
     * @param page For paginating through results, starting at page 1 (optional, default to 1)
     * @param state US state or territory where a candidate runs for office (optional)
     * @param sortNullsLast Toggle that sorts null values last (optional, default to false)
     * @param sortHideNull Hide null values on sorted column(s). (optional, default to false)
     * @param perPage The number of results returned per page. Defaults to 20. (optional, default to 20)
     * @param sort Provide a field to sort by. Use &#x60;-&#x60; for descending order.  (optional, default to -total_receipts)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call electionsGetCall(String apiKey, Integer cycle, String office, String district, Boolean electionFull, Boolean sortNullOnly, Integer page, String state, Boolean sortNullsLast, Boolean sortHideNull, Integer perPage, String sort, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/elections/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (district != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("district", district));
        }

        if (apiKey != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api_key", apiKey));
        }

        if (electionFull != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("election_full", electionFull));
        }

        if (cycle != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("cycle", cycle));
        }

        if (sortNullOnly != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort_null_only", sortNullOnly));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (state != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("state", state));
        }

        if (sortNullsLast != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort_nulls_last", sortNullsLast));
        }

        if (sortHideNull != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort_hide_null", sortHideNull));
        }

        if (perPage != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("per_page", perPage));
        }

        if (office != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("office", office));
        }

        if (sort != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort", sort));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKeyHeaderAuth", "ApiKeyQueryAuth", "apiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call electionsGetValidateBeforeCall(String apiKey, Integer cycle, String office, String district, Boolean electionFull, Boolean sortNullOnly, Integer page, String state, Boolean sortNullsLast, Boolean sortHideNull, Integer perPage, String sort, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'apiKey' is set
        if (apiKey == null) {
            throw new ApiException("Missing the required parameter 'apiKey' when calling electionsGet(Async)");
        }

        // verify the required parameter 'cycle' is set
        if (cycle == null) {
            throw new ApiException("Missing the required parameter 'cycle' when calling electionsGet(Async)");
        }

        // verify the required parameter 'office' is set
        if (office == null) {
            throw new ApiException("Missing the required parameter 'office' when calling electionsGet(Async)");
        }

        return electionsGetCall(apiKey, cycle, office, district, electionFull, sortNullOnly, page, state, sortNullsLast, sortHideNull, perPage, sort, _callback);

    }

    /**
     * 
     *  Look at the top-level financial information for all candidates running for the same office.  Choose a 2-year cycle, and &#x60;house&#x60;, &#x60;senate&#x60; or &#x60;presidential&#x60;.  If you are looking for a Senate seat, you will need to select the state using a two-letter abbreviation.  House races require state and a two-digit district number.  Since this endpoint reflects financial information, it will only have candidates once they file financial reporting forms. Query the &#x60;/candidates&#x60; endpoint to retrieve an-up-to-date list of all the candidates that filed to run for a particular seat. 
     * @param apiKey  API key for https://api.data.gov. Get one at https://api.data.gov/signup.  (required)
     * @param cycle  Two-year election cycle in which a candidate runs for office. Calculated from Form 2. The cycle begins with an odd year and is named for its ending, even year. This cycle follows the traditional house election cycle and subdivides the presidential and Senate elections into comparable two-year blocks. To retrieve data for the entire four years of a presidential term or six years of a senatorial term, you will need the &#x60;election_full&#x60; flag.  (required)
     * @param office Federal office candidate runs for: H, S or P (required)
     * @param district Two-digit US House distirict of the office the candidate is running for. Presidential, Senate and House at-large candidates will have District 00. (optional)
     * @param electionFull &#x60;True&#x60; indicates that full election period of a candidate. &#x60;False&#x60; indicates that two year election cycle. (optional, default to true)
     * @param sortNullOnly Toggle that filters out all rows having sort column that is non-null (optional, default to false)
     * @param page For paginating through results, starting at page 1 (optional, default to 1)
     * @param state US state or territory where a candidate runs for office (optional)
     * @param sortNullsLast Toggle that sorts null values last (optional, default to false)
     * @param sortHideNull Hide null values on sorted column(s). (optional, default to false)
     * @param perPage The number of results returned per page. Defaults to 20. (optional, default to 20)
     * @param sort Provide a field to sort by. Use &#x60;-&#x60; for descending order.  (optional, default to -total_receipts)
     * @return ElectionPage
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ElectionPage electionsGet(String apiKey, Integer cycle, String office, String district, Boolean electionFull, Boolean sortNullOnly, Integer page, String state, Boolean sortNullsLast, Boolean sortHideNull, Integer perPage, String sort) throws ApiException {
        ApiResponse<ElectionPage> localVarResp = electionsGetWithHttpInfo(apiKey, cycle, office, district, electionFull, sortNullOnly, page, state, sortNullsLast, sortHideNull, perPage, sort);
        return localVarResp.getData();
    }

    /**
     * 
     *  Look at the top-level financial information for all candidates running for the same office.  Choose a 2-year cycle, and &#x60;house&#x60;, &#x60;senate&#x60; or &#x60;presidential&#x60;.  If you are looking for a Senate seat, you will need to select the state using a two-letter abbreviation.  House races require state and a two-digit district number.  Since this endpoint reflects financial information, it will only have candidates once they file financial reporting forms. Query the &#x60;/candidates&#x60; endpoint to retrieve an-up-to-date list of all the candidates that filed to run for a particular seat. 
     * @param apiKey  API key for https://api.data.gov. Get one at https://api.data.gov/signup.  (required)
     * @param cycle  Two-year election cycle in which a candidate runs for office. Calculated from Form 2. The cycle begins with an odd year and is named for its ending, even year. This cycle follows the traditional house election cycle and subdivides the presidential and Senate elections into comparable two-year blocks. To retrieve data for the entire four years of a presidential term or six years of a senatorial term, you will need the &#x60;election_full&#x60; flag.  (required)
     * @param office Federal office candidate runs for: H, S or P (required)
     * @param district Two-digit US House distirict of the office the candidate is running for. Presidential, Senate and House at-large candidates will have District 00. (optional)
     * @param electionFull &#x60;True&#x60; indicates that full election period of a candidate. &#x60;False&#x60; indicates that two year election cycle. (optional, default to true)
     * @param sortNullOnly Toggle that filters out all rows having sort column that is non-null (optional, default to false)
     * @param page For paginating through results, starting at page 1 (optional, default to 1)
     * @param state US state or territory where a candidate runs for office (optional)
     * @param sortNullsLast Toggle that sorts null values last (optional, default to false)
     * @param sortHideNull Hide null values on sorted column(s). (optional, default to false)
     * @param perPage The number of results returned per page. Defaults to 20. (optional, default to 20)
     * @param sort Provide a field to sort by. Use &#x60;-&#x60; for descending order.  (optional, default to -total_receipts)
     * @return ApiResponse&lt;ElectionPage&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ElectionPage> electionsGetWithHttpInfo(String apiKey, Integer cycle, String office, String district, Boolean electionFull, Boolean sortNullOnly, Integer page, String state, Boolean sortNullsLast, Boolean sortHideNull, Integer perPage, String sort) throws ApiException {
        okhttp3.Call localVarCall = electionsGetValidateBeforeCall(apiKey, cycle, office, district, electionFull, sortNullOnly, page, state, sortNullsLast, sortHideNull, perPage, sort, null);
        Type localVarReturnType = new TypeToken<ElectionPage>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     *  Look at the top-level financial information for all candidates running for the same office.  Choose a 2-year cycle, and &#x60;house&#x60;, &#x60;senate&#x60; or &#x60;presidential&#x60;.  If you are looking for a Senate seat, you will need to select the state using a two-letter abbreviation.  House races require state and a two-digit district number.  Since this endpoint reflects financial information, it will only have candidates once they file financial reporting forms. Query the &#x60;/candidates&#x60; endpoint to retrieve an-up-to-date list of all the candidates that filed to run for a particular seat. 
     * @param apiKey  API key for https://api.data.gov. Get one at https://api.data.gov/signup.  (required)
     * @param cycle  Two-year election cycle in which a candidate runs for office. Calculated from Form 2. The cycle begins with an odd year and is named for its ending, even year. This cycle follows the traditional house election cycle and subdivides the presidential and Senate elections into comparable two-year blocks. To retrieve data for the entire four years of a presidential term or six years of a senatorial term, you will need the &#x60;election_full&#x60; flag.  (required)
     * @param office Federal office candidate runs for: H, S or P (required)
     * @param district Two-digit US House distirict of the office the candidate is running for. Presidential, Senate and House at-large candidates will have District 00. (optional)
     * @param electionFull &#x60;True&#x60; indicates that full election period of a candidate. &#x60;False&#x60; indicates that two year election cycle. (optional, default to true)
     * @param sortNullOnly Toggle that filters out all rows having sort column that is non-null (optional, default to false)
     * @param page For paginating through results, starting at page 1 (optional, default to 1)
     * @param state US state or territory where a candidate runs for office (optional)
     * @param sortNullsLast Toggle that sorts null values last (optional, default to false)
     * @param sortHideNull Hide null values on sorted column(s). (optional, default to false)
     * @param perPage The number of results returned per page. Defaults to 20. (optional, default to 20)
     * @param sort Provide a field to sort by. Use &#x60;-&#x60; for descending order.  (optional, default to -total_receipts)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call electionsGetAsync(String apiKey, Integer cycle, String office, String district, Boolean electionFull, Boolean sortNullOnly, Integer page, String state, Boolean sortNullsLast, Boolean sortHideNull, Integer perPage, String sort, final ApiCallback<ElectionPage> _callback) throws ApiException {

        okhttp3.Call localVarCall = electionsGetValidateBeforeCall(apiKey, cycle, office, district, electionFull, sortNullOnly, page, state, sortNullsLast, sortHideNull, perPage, sort, _callback);
        Type localVarReturnType = new TypeToken<ElectionPage>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for electionsSearchGet
     * @param apiKey  API key for https://api.data.gov. Get one at https://api.data.gov/signup.  (required)
     * @param zip Zip code (optional)
     * @param district Two-digit US House distirict of the office the candidate is running for. Presidential, Senate and House at-large candidates will have District 00. (optional)
     * @param cycle  Two-year election cycle in which a candidate runs for office. Calculated from Form 2. The cycle begins with an odd year and is named for its ending, even year. This cycle follows the traditional house election cycle and subdivides the presidential and Senate elections into comparable two-year blocks. To retrieve data for the entire four years of a presidential term or six years of a senatorial term, you will need the &#x60;election_full&#x60; flag.  (optional)
     * @param sortNullOnly Toggle that filters out all rows having sort column that is non-null (optional, default to false)
     * @param sortNullsLast Toggle that sorts null values last (optional, default to false)
     * @param page For paginating through results, starting at page 1 (optional, default to 1)
     * @param state US state or territory where a candidate runs for office (optional)
     * @param sortHideNull Hide null values on sorted column(s). (optional, default to false)
     * @param perPage The number of results returned per page. Defaults to 20. (optional, default to 20)
     * @param office  (optional)
     * @param sort  Provide a field to sort by. Use &#x60;-&#x60; for descending order. ex: &#x60;-case_no&#x60;  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call electionsSearchGetCall(String apiKey, List<Integer> zip, List<String> district, List<Integer> cycle, Boolean sortNullOnly, Boolean sortNullsLast, Integer page, List<String> state, Boolean sortHideNull, Integer perPage, List<String> office, List<String> sort, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/elections/search/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (zip != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "zip", zip));
        }

        if (district != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "district", district));
        }

        if (apiKey != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api_key", apiKey));
        }

        if (cycle != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "cycle", cycle));
        }

        if (sortNullOnly != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort_null_only", sortNullOnly));
        }

        if (sortNullsLast != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort_nulls_last", sortNullsLast));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (state != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "state", state));
        }

        if (sortHideNull != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort_hide_null", sortHideNull));
        }

        if (perPage != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("per_page", perPage));
        }

        if (office != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "office", office));
        }

        if (sort != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "sort", sort));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKeyHeaderAuth", "ApiKeyQueryAuth", "apiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call electionsSearchGetValidateBeforeCall(String apiKey, List<Integer> zip, List<String> district, List<Integer> cycle, Boolean sortNullOnly, Boolean sortNullsLast, Integer page, List<String> state, Boolean sortHideNull, Integer perPage, List<String> office, List<String> sort, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'apiKey' is set
        if (apiKey == null) {
            throw new ApiException("Missing the required parameter 'apiKey' when calling electionsSearchGet(Async)");
        }

        return electionsSearchGetCall(apiKey, zip, district, cycle, sortNullOnly, sortNullsLast, page, state, sortHideNull, perPage, office, sort, _callback);

    }

    /**
     * 
     *  List elections by cycle, office, state, and district. 
     * @param apiKey  API key for https://api.data.gov. Get one at https://api.data.gov/signup.  (required)
     * @param zip Zip code (optional)
     * @param district Two-digit US House distirict of the office the candidate is running for. Presidential, Senate and House at-large candidates will have District 00. (optional)
     * @param cycle  Two-year election cycle in which a candidate runs for office. Calculated from Form 2. The cycle begins with an odd year and is named for its ending, even year. This cycle follows the traditional house election cycle and subdivides the presidential and Senate elections into comparable two-year blocks. To retrieve data for the entire four years of a presidential term or six years of a senatorial term, you will need the &#x60;election_full&#x60; flag.  (optional)
     * @param sortNullOnly Toggle that filters out all rows having sort column that is non-null (optional, default to false)
     * @param sortNullsLast Toggle that sorts null values last (optional, default to false)
     * @param page For paginating through results, starting at page 1 (optional, default to 1)
     * @param state US state or territory where a candidate runs for office (optional)
     * @param sortHideNull Hide null values on sorted column(s). (optional, default to false)
     * @param perPage The number of results returned per page. Defaults to 20. (optional, default to 20)
     * @param office  (optional)
     * @param sort  Provide a field to sort by. Use &#x60;-&#x60; for descending order. ex: &#x60;-case_no&#x60;  (optional)
     * @return ElectionsListPage
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ElectionsListPage electionsSearchGet(String apiKey, List<Integer> zip, List<String> district, List<Integer> cycle, Boolean sortNullOnly, Boolean sortNullsLast, Integer page, List<String> state, Boolean sortHideNull, Integer perPage, List<String> office, List<String> sort) throws ApiException {
        ApiResponse<ElectionsListPage> localVarResp = electionsSearchGetWithHttpInfo(apiKey, zip, district, cycle, sortNullOnly, sortNullsLast, page, state, sortHideNull, perPage, office, sort);
        return localVarResp.getData();
    }

    /**
     * 
     *  List elections by cycle, office, state, and district. 
     * @param apiKey  API key for https://api.data.gov. Get one at https://api.data.gov/signup.  (required)
     * @param zip Zip code (optional)
     * @param district Two-digit US House distirict of the office the candidate is running for. Presidential, Senate and House at-large candidates will have District 00. (optional)
     * @param cycle  Two-year election cycle in which a candidate runs for office. Calculated from Form 2. The cycle begins with an odd year and is named for its ending, even year. This cycle follows the traditional house election cycle and subdivides the presidential and Senate elections into comparable two-year blocks. To retrieve data for the entire four years of a presidential term or six years of a senatorial term, you will need the &#x60;election_full&#x60; flag.  (optional)
     * @param sortNullOnly Toggle that filters out all rows having sort column that is non-null (optional, default to false)
     * @param sortNullsLast Toggle that sorts null values last (optional, default to false)
     * @param page For paginating through results, starting at page 1 (optional, default to 1)
     * @param state US state or territory where a candidate runs for office (optional)
     * @param sortHideNull Hide null values on sorted column(s). (optional, default to false)
     * @param perPage The number of results returned per page. Defaults to 20. (optional, default to 20)
     * @param office  (optional)
     * @param sort  Provide a field to sort by. Use &#x60;-&#x60; for descending order. ex: &#x60;-case_no&#x60;  (optional)
     * @return ApiResponse&lt;ElectionsListPage&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ElectionsListPage> electionsSearchGetWithHttpInfo(String apiKey, List<Integer> zip, List<String> district, List<Integer> cycle, Boolean sortNullOnly, Boolean sortNullsLast, Integer page, List<String> state, Boolean sortHideNull, Integer perPage, List<String> office, List<String> sort) throws ApiException {
        okhttp3.Call localVarCall = electionsSearchGetValidateBeforeCall(apiKey, zip, district, cycle, sortNullOnly, sortNullsLast, page, state, sortHideNull, perPage, office, sort, null);
        Type localVarReturnType = new TypeToken<ElectionsListPage>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     *  List elections by cycle, office, state, and district. 
     * @param apiKey  API key for https://api.data.gov. Get one at https://api.data.gov/signup.  (required)
     * @param zip Zip code (optional)
     * @param district Two-digit US House distirict of the office the candidate is running for. Presidential, Senate and House at-large candidates will have District 00. (optional)
     * @param cycle  Two-year election cycle in which a candidate runs for office. Calculated from Form 2. The cycle begins with an odd year and is named for its ending, even year. This cycle follows the traditional house election cycle and subdivides the presidential and Senate elections into comparable two-year blocks. To retrieve data for the entire four years of a presidential term or six years of a senatorial term, you will need the &#x60;election_full&#x60; flag.  (optional)
     * @param sortNullOnly Toggle that filters out all rows having sort column that is non-null (optional, default to false)
     * @param sortNullsLast Toggle that sorts null values last (optional, default to false)
     * @param page For paginating through results, starting at page 1 (optional, default to 1)
     * @param state US state or territory where a candidate runs for office (optional)
     * @param sortHideNull Hide null values on sorted column(s). (optional, default to false)
     * @param perPage The number of results returned per page. Defaults to 20. (optional, default to 20)
     * @param office  (optional)
     * @param sort  Provide a field to sort by. Use &#x60;-&#x60; for descending order. ex: &#x60;-case_no&#x60;  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call electionsSearchGetAsync(String apiKey, List<Integer> zip, List<String> district, List<Integer> cycle, Boolean sortNullOnly, Boolean sortNullsLast, Integer page, List<String> state, Boolean sortHideNull, Integer perPage, List<String> office, List<String> sort, final ApiCallback<ElectionsListPage> _callback) throws ApiException {

        okhttp3.Call localVarCall = electionsSearchGetValidateBeforeCall(apiKey, zip, district, cycle, sortNullOnly, sortNullsLast, page, state, sortHideNull, perPage, office, sort, _callback);
        Type localVarReturnType = new TypeToken<ElectionsListPage>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for electionsSummaryGet
     * @param apiKey  API key for https://api.data.gov. Get one at https://api.data.gov/signup.  (required)
     * @param office Federal office candidate runs for: H, S or P (required)
     * @param cycle  Two-year election cycle in which a candidate runs for office. Calculated from Form 2. The cycle begins with an odd year and is named for its ending, even year. This cycle follows the traditional house election cycle and subdivides the presidential and Senate elections into comparable two-year blocks. To retrieve data for the entire four years of a presidential term or six years of a senatorial term, you will need the &#x60;election_full&#x60; flag.  (required)
     * @param state US state or territory where a candidate runs for office (optional)
     * @param district Two-digit US House distirict of the office the candidate is running for. Presidential, Senate and House at-large candidates will have District 00. (optional)
     * @param electionFull &#x60;True&#x60; indicates that full election period of a candidate. &#x60;False&#x60; indicates that two year election cycle. (optional, default to true)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call electionsSummaryGetCall(String apiKey, String office, Integer cycle, String state, String district, Boolean electionFull, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/elections/summary/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (state != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("state", state));
        }

        if (district != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("district", district));
        }

        if (apiKey != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api_key", apiKey));
        }

        if (electionFull != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("election_full", electionFull));
        }

        if (office != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("office", office));
        }

        if (cycle != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("cycle", cycle));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKeyHeaderAuth", "ApiKeyQueryAuth", "apiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call electionsSummaryGetValidateBeforeCall(String apiKey, String office, Integer cycle, String state, String district, Boolean electionFull, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'apiKey' is set
        if (apiKey == null) {
            throw new ApiException("Missing the required parameter 'apiKey' when calling electionsSummaryGet(Async)");
        }

        // verify the required parameter 'office' is set
        if (office == null) {
            throw new ApiException("Missing the required parameter 'office' when calling electionsSummaryGet(Async)");
        }

        // verify the required parameter 'cycle' is set
        if (cycle == null) {
            throw new ApiException("Missing the required parameter 'cycle' when calling electionsSummaryGet(Async)");
        }

        return electionsSummaryGetCall(apiKey, office, cycle, state, district, electionFull, _callback);

    }

    /**
     * 
     *  List elections by cycle, office, state, and district. 
     * @param apiKey  API key for https://api.data.gov. Get one at https://api.data.gov/signup.  (required)
     * @param office Federal office candidate runs for: H, S or P (required)
     * @param cycle  Two-year election cycle in which a candidate runs for office. Calculated from Form 2. The cycle begins with an odd year and is named for its ending, even year. This cycle follows the traditional house election cycle and subdivides the presidential and Senate elections into comparable two-year blocks. To retrieve data for the entire four years of a presidential term or six years of a senatorial term, you will need the &#x60;election_full&#x60; flag.  (required)
     * @param state US state or territory where a candidate runs for office (optional)
     * @param district Two-digit US House distirict of the office the candidate is running for. Presidential, Senate and House at-large candidates will have District 00. (optional)
     * @param electionFull &#x60;True&#x60; indicates that full election period of a candidate. &#x60;False&#x60; indicates that two year election cycle. (optional, default to true)
     * @return ElectionSummary
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ElectionSummary electionsSummaryGet(String apiKey, String office, Integer cycle, String state, String district, Boolean electionFull) throws ApiException {
        ApiResponse<ElectionSummary> localVarResp = electionsSummaryGetWithHttpInfo(apiKey, office, cycle, state, district, electionFull);
        return localVarResp.getData();
    }

    /**
     * 
     *  List elections by cycle, office, state, and district. 
     * @param apiKey  API key for https://api.data.gov. Get one at https://api.data.gov/signup.  (required)
     * @param office Federal office candidate runs for: H, S or P (required)
     * @param cycle  Two-year election cycle in which a candidate runs for office. Calculated from Form 2. The cycle begins with an odd year and is named for its ending, even year. This cycle follows the traditional house election cycle and subdivides the presidential and Senate elections into comparable two-year blocks. To retrieve data for the entire four years of a presidential term or six years of a senatorial term, you will need the &#x60;election_full&#x60; flag.  (required)
     * @param state US state or territory where a candidate runs for office (optional)
     * @param district Two-digit US House distirict of the office the candidate is running for. Presidential, Senate and House at-large candidates will have District 00. (optional)
     * @param electionFull &#x60;True&#x60; indicates that full election period of a candidate. &#x60;False&#x60; indicates that two year election cycle. (optional, default to true)
     * @return ApiResponse&lt;ElectionSummary&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ElectionSummary> electionsSummaryGetWithHttpInfo(String apiKey, String office, Integer cycle, String state, String district, Boolean electionFull) throws ApiException {
        okhttp3.Call localVarCall = electionsSummaryGetValidateBeforeCall(apiKey, office, cycle, state, district, electionFull, null);
        Type localVarReturnType = new TypeToken<ElectionSummary>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     *  List elections by cycle, office, state, and district. 
     * @param apiKey  API key for https://api.data.gov. Get one at https://api.data.gov/signup.  (required)
     * @param office Federal office candidate runs for: H, S or P (required)
     * @param cycle  Two-year election cycle in which a candidate runs for office. Calculated from Form 2. The cycle begins with an odd year and is named for its ending, even year. This cycle follows the traditional house election cycle and subdivides the presidential and Senate elections into comparable two-year blocks. To retrieve data for the entire four years of a presidential term or six years of a senatorial term, you will need the &#x60;election_full&#x60; flag.  (required)
     * @param state US state or territory where a candidate runs for office (optional)
     * @param district Two-digit US House distirict of the office the candidate is running for. Presidential, Senate and House at-large candidates will have District 00. (optional)
     * @param electionFull &#x60;True&#x60; indicates that full election period of a candidate. &#x60;False&#x60; indicates that two year election cycle. (optional, default to true)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call electionsSummaryGetAsync(String apiKey, String office, Integer cycle, String state, String district, Boolean electionFull, final ApiCallback<ElectionSummary> _callback) throws ApiException {

        okhttp3.Call localVarCall = electionsSummaryGetValidateBeforeCall(apiKey, office, cycle, state, district, electionFull, _callback);
        Type localVarReturnType = new TypeToken<ElectionSummary>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for reportsEntityTypeGet
     * @param apiKey  API key for https://api.data.gov. Get one at https://api.data.gov/signup.  (required)
     * @param entityType Committee groupings based on FEC filing form.                 Choose one of: &#x60;presidential&#x60;, &#x60;pac-party&#x60;, &#x60;house-senate&#x60;, or &#x60;ie-only&#x60; (required)
     * @param maxPartyCoordinatedExpenditures  Filter for all amounts less than a value.  (optional)
     * @param maxDebtsOwedExpenditures  Filter for all amounts less than a value.  (optional)
     * @param minReceiptsAmount  Filter for all amounts greater than a value.  (optional)
     * @param minDebtsOwedAmount  Filter for all amounts greater than a value.  (optional)
     * @param maxReceiptDate  Selects all items received by FEC before this date(MM/DD/YYYY or YYYY-MM-DD)  (optional)
     * @param sortHideNull Hide null values on sorted column(s). (optional, default to false)
     * @param candidateId  A unique identifier assigned to each candidate registered with the FEC. If a person runs for several offices, that person will have separate candidate IDs for each office. First character indicates office - [P]residential, [H]ouse, [S]enate]. Second character is the last digit of the two-year period the ID was created. Third and fourth is the candidate state. Presidential IDs don&#39;t have state. Fifth and sixth is the district when the candidate first ran. This does not change if the candidate/member&#39;s district changes during re-districting. Presidential IDs don&#39;t have districts. The rest is sequence.  (optional)
     * @param sort  Provide a field to sort by. Use &#x60;-&#x60; for descending order. ex: &#x60;-case_no&#x60;  (optional)
     * @param qSpender  Keyword search for spender name or ID  (optional)
     * @param maxReceiptsAmount  Filter for all amounts less than a value.  (optional)
     * @param filerType The method used to file with the FEC, either electronic or on paper. (optional)
     * @param reportType Report type; prefix with \&quot;-\&quot; to exclude. Name of report where the underlying data comes from:     - 10D Pre-Election     - 10G Pre-General     - 10P Pre-Primary     - 10R Pre-Run-Off     - 10S Pre-Special     - 12C Pre-Convention     - 12G Pre-General     - 12P Pre-Primary     - 12R Pre-Run-Off     - 12S Pre-Special     - 30D Post-Election     - 30G Post-General     - 30P Post-Primary     - 30R Post-Run-Off     - 30S Post-Special     - 60D Post-Convention     - M1  January Monthly     - M10 October Monthly     - M11 November Monthly     - M12 December Monthly     - M2  February Monthly     - M3  March Monthly     - M4  April Monthly     - M5  May Monthly     - M6  June Monthly     - M7  July Monthly     - M8  August Monthly     - M9  September Monthly     - MY  Mid-Year Report     - Q1  April Quarterly     - Q2  July Quarterly     - Q3  October Quarterly     - TER Termination Report     - YE  Year-End     - ADJ COMP ADJUST AMEND     - CA  COMPREHENSIVE AMEND  (optional)
     * @param maxTotalContributions  Filter for all amounts less than a value.  (optional)
     * @param sortNullsLast Toggle that sorts null values last (optional, default to false)
     * @param maxIndependentExpenditures  Filter for all amounts less than a value.  (optional)
     * @param minTotalContributions  Filter for all amounts greater than a value.  (optional)
     * @param minPartyCoordinatedExpenditures  Filter for all amounts greater than a value.  (optional)
     * @param beginningImageNumber  Unique identifier for the electronic or paper report. This number is used to construct PDF URLs to the original document.  (optional)
     * @param minReceiptDate  Selects all items received by FEC after this date(MM/DD/YYYY or YYYY-MM-DD)  (optional)
     * @param isAmended  False indicates that a report is the most recent. True indicates that the report has been superseded by an amendment.  (optional)
     * @param maxDisbursementsAmount  Filter for all amounts less than a value.  (optional)
     * @param maxCashOnHandEndPeriodAmount  Filter for all amounts less than a value.  (optional)
     * @param amendmentIndicator Amendent types:     -N   new     -A   amendment     -T   terminated     -C   consolidated     -M   multi-candidate     -S   secondary  NULL might be new or amendment. If amendment indicator is null and the filings is the first or first in a chain treat it as if it was a new. If it is not the first or first in a chain then treat the filing as an amendment.  (optional)
     * @param cycle  Filter records to only those that were applicable to a given two-year period.The cycle begins with an odd year and is named for its ending, even year.  (optional)
     * @param sortNullOnly Toggle that filters out all rows having sort column that is non-null (optional, default to false)
     * @param minIndependentExpenditures  Filter for all amounts greater than a value.  (optional)
     * @param perPage The number of results returned per page. Defaults to 20. (optional, default to 20)
     * @param qFiler  Keyword search for filer name or ID  (optional)
     * @param committeeType The one-letter type code of the organization:         - C communication cost         - D delegate         - E electioneering communication         - H House         - I independent expenditure filer (not a committee)         - N PAC - nonqualified         - O independent expenditure-only (super PACs)         - P presidential         - Q PAC - qualified         - S Senate         - U single candidate independent expenditure         - V PAC with non-contribution account, nonqualified         - W PAC with non-contribution account, qualified         - X party, nonqualified         - Y party, qualified         - Z national party non-federal account  (optional)
     * @param page For paginating through results, starting at page 1 (optional, default to 1)
     * @param year  Forms with coverage date -      year from the coverage ending date. Forms without coverage date -      year from the receipt date.  (optional)
     * @param committeeId  A unique identifier assigned to each committee or filer registered with the FEC. In general committee id&#39;s begin with the letter C which is followed by eight digits.  (optional)
     * @param minCashOnHandEndPeriodAmount  Filter for all amounts greater than a value.  (optional)
     * @param minDisbursementsAmount  Filter for all amounts greater than a value.  (optional)
     * @param mostRecent  Report is either new or is the most-recently filed amendment  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call reportsEntityTypeGetCall(String apiKey, String entityType, String maxPartyCoordinatedExpenditures, String maxDebtsOwedExpenditures, String minReceiptsAmount, String minDebtsOwedAmount, LocalDate maxReceiptDate, Boolean sortHideNull, String candidateId, List<String> sort, List<String> qSpender, String maxReceiptsAmount, String filerType, List<String> reportType, String maxTotalContributions, Boolean sortNullsLast, String maxIndependentExpenditures, String minTotalContributions, String minPartyCoordinatedExpenditures, List<String> beginningImageNumber, LocalDate minReceiptDate, Boolean isAmended, String maxDisbursementsAmount, String maxCashOnHandEndPeriodAmount, List<String> amendmentIndicator, List<Integer> cycle, Boolean sortNullOnly, String minIndependentExpenditures, Integer perPage, List<String> qFiler, List<String> committeeType, Integer page, List<Integer> year, List<String> committeeId, String minCashOnHandEndPeriodAmount, String minDisbursementsAmount, Boolean mostRecent, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/reports/{entity_type}/"
            .replace("{" + "entity_type" + "}", localVarApiClient.escapeString(entityType.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (maxPartyCoordinatedExpenditures != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("max_party_coordinated_expenditures", maxPartyCoordinatedExpenditures));
        }

        if (maxDebtsOwedExpenditures != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("max_debts_owed_expenditures", maxDebtsOwedExpenditures));
        }

        if (minReceiptsAmount != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("min_receipts_amount", minReceiptsAmount));
        }

        if (minDebtsOwedAmount != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("min_debts_owed_amount", minDebtsOwedAmount));
        }

        if (maxReceiptDate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("max_receipt_date", maxReceiptDate));
        }

        if (sortHideNull != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort_hide_null", sortHideNull));
        }

        if (candidateId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("candidate_id", candidateId));
        }

        if (sort != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "sort", sort));
        }

        if (qSpender != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "q_spender", qSpender));
        }

        if (maxReceiptsAmount != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("max_receipts_amount", maxReceiptsAmount));
        }

        if (filerType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("filer_type", filerType));
        }

        if (reportType != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "report_type", reportType));
        }

        if (maxTotalContributions != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("max_total_contributions", maxTotalContributions));
        }

        if (sortNullsLast != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort_nulls_last", sortNullsLast));
        }

        if (maxIndependentExpenditures != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("max_independent_expenditures", maxIndependentExpenditures));
        }

        if (minTotalContributions != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("min_total_contributions", minTotalContributions));
        }

        if (minPartyCoordinatedExpenditures != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("min_party_coordinated_expenditures", minPartyCoordinatedExpenditures));
        }

        if (beginningImageNumber != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "beginning_image_number", beginningImageNumber));
        }

        if (minReceiptDate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("min_receipt_date", minReceiptDate));
        }

        if (isAmended != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("is_amended", isAmended));
        }

        if (maxDisbursementsAmount != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("max_disbursements_amount", maxDisbursementsAmount));
        }

        if (maxCashOnHandEndPeriodAmount != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("max_cash_on_hand_end_period_amount", maxCashOnHandEndPeriodAmount));
        }

        if (amendmentIndicator != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "amendment_indicator", amendmentIndicator));
        }

        if (cycle != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "cycle", cycle));
        }

        if (sortNullOnly != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort_null_only", sortNullOnly));
        }

        if (minIndependentExpenditures != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("min_independent_expenditures", minIndependentExpenditures));
        }

        if (perPage != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("per_page", perPage));
        }

        if (qFiler != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "q_filer", qFiler));
        }

        if (apiKey != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api_key", apiKey));
        }

        if (committeeType != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "committee_type", committeeType));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (year != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "year", year));
        }

        if (committeeId != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "committee_id", committeeId));
        }

        if (minCashOnHandEndPeriodAmount != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("min_cash_on_hand_end_period_amount", minCashOnHandEndPeriodAmount));
        }

        if (minDisbursementsAmount != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("min_disbursements_amount", minDisbursementsAmount));
        }

        if (mostRecent != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("most_recent", mostRecent));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKeyHeaderAuth", "ApiKeyQueryAuth", "apiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call reportsEntityTypeGetValidateBeforeCall(String apiKey, String entityType, String maxPartyCoordinatedExpenditures, String maxDebtsOwedExpenditures, String minReceiptsAmount, String minDebtsOwedAmount, LocalDate maxReceiptDate, Boolean sortHideNull, String candidateId, List<String> sort, List<String> qSpender, String maxReceiptsAmount, String filerType, List<String> reportType, String maxTotalContributions, Boolean sortNullsLast, String maxIndependentExpenditures, String minTotalContributions, String minPartyCoordinatedExpenditures, List<String> beginningImageNumber, LocalDate minReceiptDate, Boolean isAmended, String maxDisbursementsAmount, String maxCashOnHandEndPeriodAmount, List<String> amendmentIndicator, List<Integer> cycle, Boolean sortNullOnly, String minIndependentExpenditures, Integer perPage, List<String> qFiler, List<String> committeeType, Integer page, List<Integer> year, List<String> committeeId, String minCashOnHandEndPeriodAmount, String minDisbursementsAmount, Boolean mostRecent, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'apiKey' is set
        if (apiKey == null) {
            throw new ApiException("Missing the required parameter 'apiKey' when calling reportsEntityTypeGet(Async)");
        }

        // verify the required parameter 'entityType' is set
        if (entityType == null) {
            throw new ApiException("Missing the required parameter 'entityType' when calling reportsEntityTypeGet(Async)");
        }

        return reportsEntityTypeGetCall(apiKey, entityType, maxPartyCoordinatedExpenditures, maxDebtsOwedExpenditures, minReceiptsAmount, minDebtsOwedAmount, maxReceiptDate, sortHideNull, candidateId, sort, qSpender, maxReceiptsAmount, filerType, reportType, maxTotalContributions, sortNullsLast, maxIndependentExpenditures, minTotalContributions, minPartyCoordinatedExpenditures, beginningImageNumber, minReceiptDate, isAmended, maxDisbursementsAmount, maxCashOnHandEndPeriodAmount, amendmentIndicator, cycle, sortNullOnly, minIndependentExpenditures, perPage, qFiler, committeeType, page, year, committeeId, minCashOnHandEndPeriodAmount, minDisbursementsAmount, mostRecent, _callback);

    }

    /**
     * 
     *  Each report represents the summary information from Form 3, Form 3X and Form 3P. These reports have key statistics that illuminate the financial status of a given committee. Things like cash on hand, debts owed by committee, total receipts, and total disbursements are especially helpful for understanding a committee&#39;s financial dealings.  By default, this endpoint includes both amended and final versions of each report. To restrict to only the final versions of each report, use &#x60;is_amended&#x3D;false&#x60;; to retrieve only reports that have been amended, use &#x60;is_amended&#x3D;true&#x60;.  Several different reporting structures exist, depending on the type of organization that submits financial information. To see an example of these reporting requirements, look at the summary and detailed summary pages of Form 3, Form 3X, and Form 3P.  DISCLAIMER: The field labels contained within this resource are subject to change.  We are attempting to succinctly label these fields while conveying clear meaning to ensure accessibility for all users. 
     * @param apiKey  API key for https://api.data.gov. Get one at https://api.data.gov/signup.  (required)
     * @param entityType Committee groupings based on FEC filing form.                 Choose one of: &#x60;presidential&#x60;, &#x60;pac-party&#x60;, &#x60;house-senate&#x60;, or &#x60;ie-only&#x60; (required)
     * @param maxPartyCoordinatedExpenditures  Filter for all amounts less than a value.  (optional)
     * @param maxDebtsOwedExpenditures  Filter for all amounts less than a value.  (optional)
     * @param minReceiptsAmount  Filter for all amounts greater than a value.  (optional)
     * @param minDebtsOwedAmount  Filter for all amounts greater than a value.  (optional)
     * @param maxReceiptDate  Selects all items received by FEC before this date(MM/DD/YYYY or YYYY-MM-DD)  (optional)
     * @param sortHideNull Hide null values on sorted column(s). (optional, default to false)
     * @param candidateId  A unique identifier assigned to each candidate registered with the FEC. If a person runs for several offices, that person will have separate candidate IDs for each office. First character indicates office - [P]residential, [H]ouse, [S]enate]. Second character is the last digit of the two-year period the ID was created. Third and fourth is the candidate state. Presidential IDs don&#39;t have state. Fifth and sixth is the district when the candidate first ran. This does not change if the candidate/member&#39;s district changes during re-districting. Presidential IDs don&#39;t have districts. The rest is sequence.  (optional)
     * @param sort  Provide a field to sort by. Use &#x60;-&#x60; for descending order. ex: &#x60;-case_no&#x60;  (optional)
     * @param qSpender  Keyword search for spender name or ID  (optional)
     * @param maxReceiptsAmount  Filter for all amounts less than a value.  (optional)
     * @param filerType The method used to file with the FEC, either electronic or on paper. (optional)
     * @param reportType Report type; prefix with \&quot;-\&quot; to exclude. Name of report where the underlying data comes from:     - 10D Pre-Election     - 10G Pre-General     - 10P Pre-Primary     - 10R Pre-Run-Off     - 10S Pre-Special     - 12C Pre-Convention     - 12G Pre-General     - 12P Pre-Primary     - 12R Pre-Run-Off     - 12S Pre-Special     - 30D Post-Election     - 30G Post-General     - 30P Post-Primary     - 30R Post-Run-Off     - 30S Post-Special     - 60D Post-Convention     - M1  January Monthly     - M10 October Monthly     - M11 November Monthly     - M12 December Monthly     - M2  February Monthly     - M3  March Monthly     - M4  April Monthly     - M5  May Monthly     - M6  June Monthly     - M7  July Monthly     - M8  August Monthly     - M9  September Monthly     - MY  Mid-Year Report     - Q1  April Quarterly     - Q2  July Quarterly     - Q3  October Quarterly     - TER Termination Report     - YE  Year-End     - ADJ COMP ADJUST AMEND     - CA  COMPREHENSIVE AMEND  (optional)
     * @param maxTotalContributions  Filter for all amounts less than a value.  (optional)
     * @param sortNullsLast Toggle that sorts null values last (optional, default to false)
     * @param maxIndependentExpenditures  Filter for all amounts less than a value.  (optional)
     * @param minTotalContributions  Filter for all amounts greater than a value.  (optional)
     * @param minPartyCoordinatedExpenditures  Filter for all amounts greater than a value.  (optional)
     * @param beginningImageNumber  Unique identifier for the electronic or paper report. This number is used to construct PDF URLs to the original document.  (optional)
     * @param minReceiptDate  Selects all items received by FEC after this date(MM/DD/YYYY or YYYY-MM-DD)  (optional)
     * @param isAmended  False indicates that a report is the most recent. True indicates that the report has been superseded by an amendment.  (optional)
     * @param maxDisbursementsAmount  Filter for all amounts less than a value.  (optional)
     * @param maxCashOnHandEndPeriodAmount  Filter for all amounts less than a value.  (optional)
     * @param amendmentIndicator Amendent types:     -N   new     -A   amendment     -T   terminated     -C   consolidated     -M   multi-candidate     -S   secondary  NULL might be new or amendment. If amendment indicator is null and the filings is the first or first in a chain treat it as if it was a new. If it is not the first or first in a chain then treat the filing as an amendment.  (optional)
     * @param cycle  Filter records to only those that were applicable to a given two-year period.The cycle begins with an odd year and is named for its ending, even year.  (optional)
     * @param sortNullOnly Toggle that filters out all rows having sort column that is non-null (optional, default to false)
     * @param minIndependentExpenditures  Filter for all amounts greater than a value.  (optional)
     * @param perPage The number of results returned per page. Defaults to 20. (optional, default to 20)
     * @param qFiler  Keyword search for filer name or ID  (optional)
     * @param committeeType The one-letter type code of the organization:         - C communication cost         - D delegate         - E electioneering communication         - H House         - I independent expenditure filer (not a committee)         - N PAC - nonqualified         - O independent expenditure-only (super PACs)         - P presidential         - Q PAC - qualified         - S Senate         - U single candidate independent expenditure         - V PAC with non-contribution account, nonqualified         - W PAC with non-contribution account, qualified         - X party, nonqualified         - Y party, qualified         - Z national party non-federal account  (optional)
     * @param page For paginating through results, starting at page 1 (optional, default to 1)
     * @param year  Forms with coverage date -      year from the coverage ending date. Forms without coverage date -      year from the receipt date.  (optional)
     * @param committeeId  A unique identifier assigned to each committee or filer registered with the FEC. In general committee id&#39;s begin with the letter C which is followed by eight digits.  (optional)
     * @param minCashOnHandEndPeriodAmount  Filter for all amounts greater than a value.  (optional)
     * @param minDisbursementsAmount  Filter for all amounts greater than a value.  (optional)
     * @param mostRecent  Report is either new or is the most-recently filed amendment  (optional)
     * @return CommitteeReportsPage
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public CommitteeReportsPage reportsEntityTypeGet(String apiKey, String entityType, String maxPartyCoordinatedExpenditures, String maxDebtsOwedExpenditures, String minReceiptsAmount, String minDebtsOwedAmount, LocalDate maxReceiptDate, Boolean sortHideNull, String candidateId, List<String> sort, List<String> qSpender, String maxReceiptsAmount, String filerType, List<String> reportType, String maxTotalContributions, Boolean sortNullsLast, String maxIndependentExpenditures, String minTotalContributions, String minPartyCoordinatedExpenditures, List<String> beginningImageNumber, LocalDate minReceiptDate, Boolean isAmended, String maxDisbursementsAmount, String maxCashOnHandEndPeriodAmount, List<String> amendmentIndicator, List<Integer> cycle, Boolean sortNullOnly, String minIndependentExpenditures, Integer perPage, List<String> qFiler, List<String> committeeType, Integer page, List<Integer> year, List<String> committeeId, String minCashOnHandEndPeriodAmount, String minDisbursementsAmount, Boolean mostRecent) throws ApiException {
        ApiResponse<CommitteeReportsPage> localVarResp = reportsEntityTypeGetWithHttpInfo(apiKey, entityType, maxPartyCoordinatedExpenditures, maxDebtsOwedExpenditures, minReceiptsAmount, minDebtsOwedAmount, maxReceiptDate, sortHideNull, candidateId, sort, qSpender, maxReceiptsAmount, filerType, reportType, maxTotalContributions, sortNullsLast, maxIndependentExpenditures, minTotalContributions, minPartyCoordinatedExpenditures, beginningImageNumber, minReceiptDate, isAmended, maxDisbursementsAmount, maxCashOnHandEndPeriodAmount, amendmentIndicator, cycle, sortNullOnly, minIndependentExpenditures, perPage, qFiler, committeeType, page, year, committeeId, minCashOnHandEndPeriodAmount, minDisbursementsAmount, mostRecent);
        return localVarResp.getData();
    }

    /**
     * 
     *  Each report represents the summary information from Form 3, Form 3X and Form 3P. These reports have key statistics that illuminate the financial status of a given committee. Things like cash on hand, debts owed by committee, total receipts, and total disbursements are especially helpful for understanding a committee&#39;s financial dealings.  By default, this endpoint includes both amended and final versions of each report. To restrict to only the final versions of each report, use &#x60;is_amended&#x3D;false&#x60;; to retrieve only reports that have been amended, use &#x60;is_amended&#x3D;true&#x60;.  Several different reporting structures exist, depending on the type of organization that submits financial information. To see an example of these reporting requirements, look at the summary and detailed summary pages of Form 3, Form 3X, and Form 3P.  DISCLAIMER: The field labels contained within this resource are subject to change.  We are attempting to succinctly label these fields while conveying clear meaning to ensure accessibility for all users. 
     * @param apiKey  API key for https://api.data.gov. Get one at https://api.data.gov/signup.  (required)
     * @param entityType Committee groupings based on FEC filing form.                 Choose one of: &#x60;presidential&#x60;, &#x60;pac-party&#x60;, &#x60;house-senate&#x60;, or &#x60;ie-only&#x60; (required)
     * @param maxPartyCoordinatedExpenditures  Filter for all amounts less than a value.  (optional)
     * @param maxDebtsOwedExpenditures  Filter for all amounts less than a value.  (optional)
     * @param minReceiptsAmount  Filter for all amounts greater than a value.  (optional)
     * @param minDebtsOwedAmount  Filter for all amounts greater than a value.  (optional)
     * @param maxReceiptDate  Selects all items received by FEC before this date(MM/DD/YYYY or YYYY-MM-DD)  (optional)
     * @param sortHideNull Hide null values on sorted column(s). (optional, default to false)
     * @param candidateId  A unique identifier assigned to each candidate registered with the FEC. If a person runs for several offices, that person will have separate candidate IDs for each office. First character indicates office - [P]residential, [H]ouse, [S]enate]. Second character is the last digit of the two-year period the ID was created. Third and fourth is the candidate state. Presidential IDs don&#39;t have state. Fifth and sixth is the district when the candidate first ran. This does not change if the candidate/member&#39;s district changes during re-districting. Presidential IDs don&#39;t have districts. The rest is sequence.  (optional)
     * @param sort  Provide a field to sort by. Use &#x60;-&#x60; for descending order. ex: &#x60;-case_no&#x60;  (optional)
     * @param qSpender  Keyword search for spender name or ID  (optional)
     * @param maxReceiptsAmount  Filter for all amounts less than a value.  (optional)
     * @param filerType The method used to file with the FEC, either electronic or on paper. (optional)
     * @param reportType Report type; prefix with \&quot;-\&quot; to exclude. Name of report where the underlying data comes from:     - 10D Pre-Election     - 10G Pre-General     - 10P Pre-Primary     - 10R Pre-Run-Off     - 10S Pre-Special     - 12C Pre-Convention     - 12G Pre-General     - 12P Pre-Primary     - 12R Pre-Run-Off     - 12S Pre-Special     - 30D Post-Election     - 30G Post-General     - 30P Post-Primary     - 30R Post-Run-Off     - 30S Post-Special     - 60D Post-Convention     - M1  January Monthly     - M10 October Monthly     - M11 November Monthly     - M12 December Monthly     - M2  February Monthly     - M3  March Monthly     - M4  April Monthly     - M5  May Monthly     - M6  June Monthly     - M7  July Monthly     - M8  August Monthly     - M9  September Monthly     - MY  Mid-Year Report     - Q1  April Quarterly     - Q2  July Quarterly     - Q3  October Quarterly     - TER Termination Report     - YE  Year-End     - ADJ COMP ADJUST AMEND     - CA  COMPREHENSIVE AMEND  (optional)
     * @param maxTotalContributions  Filter for all amounts less than a value.  (optional)
     * @param sortNullsLast Toggle that sorts null values last (optional, default to false)
     * @param maxIndependentExpenditures  Filter for all amounts less than a value.  (optional)
     * @param minTotalContributions  Filter for all amounts greater than a value.  (optional)
     * @param minPartyCoordinatedExpenditures  Filter for all amounts greater than a value.  (optional)
     * @param beginningImageNumber  Unique identifier for the electronic or paper report. This number is used to construct PDF URLs to the original document.  (optional)
     * @param minReceiptDate  Selects all items received by FEC after this date(MM/DD/YYYY or YYYY-MM-DD)  (optional)
     * @param isAmended  False indicates that a report is the most recent. True indicates that the report has been superseded by an amendment.  (optional)
     * @param maxDisbursementsAmount  Filter for all amounts less than a value.  (optional)
     * @param maxCashOnHandEndPeriodAmount  Filter for all amounts less than a value.  (optional)
     * @param amendmentIndicator Amendent types:     -N   new     -A   amendment     -T   terminated     -C   consolidated     -M   multi-candidate     -S   secondary  NULL might be new or amendment. If amendment indicator is null and the filings is the first or first in a chain treat it as if it was a new. If it is not the first or first in a chain then treat the filing as an amendment.  (optional)
     * @param cycle  Filter records to only those that were applicable to a given two-year period.The cycle begins with an odd year and is named for its ending, even year.  (optional)
     * @param sortNullOnly Toggle that filters out all rows having sort column that is non-null (optional, default to false)
     * @param minIndependentExpenditures  Filter for all amounts greater than a value.  (optional)
     * @param perPage The number of results returned per page. Defaults to 20. (optional, default to 20)
     * @param qFiler  Keyword search for filer name or ID  (optional)
     * @param committeeType The one-letter type code of the organization:         - C communication cost         - D delegate         - E electioneering communication         - H House         - I independent expenditure filer (not a committee)         - N PAC - nonqualified         - O independent expenditure-only (super PACs)         - P presidential         - Q PAC - qualified         - S Senate         - U single candidate independent expenditure         - V PAC with non-contribution account, nonqualified         - W PAC with non-contribution account, qualified         - X party, nonqualified         - Y party, qualified         - Z national party non-federal account  (optional)
     * @param page For paginating through results, starting at page 1 (optional, default to 1)
     * @param year  Forms with coverage date -      year from the coverage ending date. Forms without coverage date -      year from the receipt date.  (optional)
     * @param committeeId  A unique identifier assigned to each committee or filer registered with the FEC. In general committee id&#39;s begin with the letter C which is followed by eight digits.  (optional)
     * @param minCashOnHandEndPeriodAmount  Filter for all amounts greater than a value.  (optional)
     * @param minDisbursementsAmount  Filter for all amounts greater than a value.  (optional)
     * @param mostRecent  Report is either new or is the most-recently filed amendment  (optional)
     * @return ApiResponse&lt;CommitteeReportsPage&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CommitteeReportsPage> reportsEntityTypeGetWithHttpInfo(String apiKey, String entityType, String maxPartyCoordinatedExpenditures, String maxDebtsOwedExpenditures, String minReceiptsAmount, String minDebtsOwedAmount, LocalDate maxReceiptDate, Boolean sortHideNull, String candidateId, List<String> sort, List<String> qSpender, String maxReceiptsAmount, String filerType, List<String> reportType, String maxTotalContributions, Boolean sortNullsLast, String maxIndependentExpenditures, String minTotalContributions, String minPartyCoordinatedExpenditures, List<String> beginningImageNumber, LocalDate minReceiptDate, Boolean isAmended, String maxDisbursementsAmount, String maxCashOnHandEndPeriodAmount, List<String> amendmentIndicator, List<Integer> cycle, Boolean sortNullOnly, String minIndependentExpenditures, Integer perPage, List<String> qFiler, List<String> committeeType, Integer page, List<Integer> year, List<String> committeeId, String minCashOnHandEndPeriodAmount, String minDisbursementsAmount, Boolean mostRecent) throws ApiException {
        okhttp3.Call localVarCall = reportsEntityTypeGetValidateBeforeCall(apiKey, entityType, maxPartyCoordinatedExpenditures, maxDebtsOwedExpenditures, minReceiptsAmount, minDebtsOwedAmount, maxReceiptDate, sortHideNull, candidateId, sort, qSpender, maxReceiptsAmount, filerType, reportType, maxTotalContributions, sortNullsLast, maxIndependentExpenditures, minTotalContributions, minPartyCoordinatedExpenditures, beginningImageNumber, minReceiptDate, isAmended, maxDisbursementsAmount, maxCashOnHandEndPeriodAmount, amendmentIndicator, cycle, sortNullOnly, minIndependentExpenditures, perPage, qFiler, committeeType, page, year, committeeId, minCashOnHandEndPeriodAmount, minDisbursementsAmount, mostRecent, null);
        Type localVarReturnType = new TypeToken<CommitteeReportsPage>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     *  Each report represents the summary information from Form 3, Form 3X and Form 3P. These reports have key statistics that illuminate the financial status of a given committee. Things like cash on hand, debts owed by committee, total receipts, and total disbursements are especially helpful for understanding a committee&#39;s financial dealings.  By default, this endpoint includes both amended and final versions of each report. To restrict to only the final versions of each report, use &#x60;is_amended&#x3D;false&#x60;; to retrieve only reports that have been amended, use &#x60;is_amended&#x3D;true&#x60;.  Several different reporting structures exist, depending on the type of organization that submits financial information. To see an example of these reporting requirements, look at the summary and detailed summary pages of Form 3, Form 3X, and Form 3P.  DISCLAIMER: The field labels contained within this resource are subject to change.  We are attempting to succinctly label these fields while conveying clear meaning to ensure accessibility for all users. 
     * @param apiKey  API key for https://api.data.gov. Get one at https://api.data.gov/signup.  (required)
     * @param entityType Committee groupings based on FEC filing form.                 Choose one of: &#x60;presidential&#x60;, &#x60;pac-party&#x60;, &#x60;house-senate&#x60;, or &#x60;ie-only&#x60; (required)
     * @param maxPartyCoordinatedExpenditures  Filter for all amounts less than a value.  (optional)
     * @param maxDebtsOwedExpenditures  Filter for all amounts less than a value.  (optional)
     * @param minReceiptsAmount  Filter for all amounts greater than a value.  (optional)
     * @param minDebtsOwedAmount  Filter for all amounts greater than a value.  (optional)
     * @param maxReceiptDate  Selects all items received by FEC before this date(MM/DD/YYYY or YYYY-MM-DD)  (optional)
     * @param sortHideNull Hide null values on sorted column(s). (optional, default to false)
     * @param candidateId  A unique identifier assigned to each candidate registered with the FEC. If a person runs for several offices, that person will have separate candidate IDs for each office. First character indicates office - [P]residential, [H]ouse, [S]enate]. Second character is the last digit of the two-year period the ID was created. Third and fourth is the candidate state. Presidential IDs don&#39;t have state. Fifth and sixth is the district when the candidate first ran. This does not change if the candidate/member&#39;s district changes during re-districting. Presidential IDs don&#39;t have districts. The rest is sequence.  (optional)
     * @param sort  Provide a field to sort by. Use &#x60;-&#x60; for descending order. ex: &#x60;-case_no&#x60;  (optional)
     * @param qSpender  Keyword search for spender name or ID  (optional)
     * @param maxReceiptsAmount  Filter for all amounts less than a value.  (optional)
     * @param filerType The method used to file with the FEC, either electronic or on paper. (optional)
     * @param reportType Report type; prefix with \&quot;-\&quot; to exclude. Name of report where the underlying data comes from:     - 10D Pre-Election     - 10G Pre-General     - 10P Pre-Primary     - 10R Pre-Run-Off     - 10S Pre-Special     - 12C Pre-Convention     - 12G Pre-General     - 12P Pre-Primary     - 12R Pre-Run-Off     - 12S Pre-Special     - 30D Post-Election     - 30G Post-General     - 30P Post-Primary     - 30R Post-Run-Off     - 30S Post-Special     - 60D Post-Convention     - M1  January Monthly     - M10 October Monthly     - M11 November Monthly     - M12 December Monthly     - M2  February Monthly     - M3  March Monthly     - M4  April Monthly     - M5  May Monthly     - M6  June Monthly     - M7  July Monthly     - M8  August Monthly     - M9  September Monthly     - MY  Mid-Year Report     - Q1  April Quarterly     - Q2  July Quarterly     - Q3  October Quarterly     - TER Termination Report     - YE  Year-End     - ADJ COMP ADJUST AMEND     - CA  COMPREHENSIVE AMEND  (optional)
     * @param maxTotalContributions  Filter for all amounts less than a value.  (optional)
     * @param sortNullsLast Toggle that sorts null values last (optional, default to false)
     * @param maxIndependentExpenditures  Filter for all amounts less than a value.  (optional)
     * @param minTotalContributions  Filter for all amounts greater than a value.  (optional)
     * @param minPartyCoordinatedExpenditures  Filter for all amounts greater than a value.  (optional)
     * @param beginningImageNumber  Unique identifier for the electronic or paper report. This number is used to construct PDF URLs to the original document.  (optional)
     * @param minReceiptDate  Selects all items received by FEC after this date(MM/DD/YYYY or YYYY-MM-DD)  (optional)
     * @param isAmended  False indicates that a report is the most recent. True indicates that the report has been superseded by an amendment.  (optional)
     * @param maxDisbursementsAmount  Filter for all amounts less than a value.  (optional)
     * @param maxCashOnHandEndPeriodAmount  Filter for all amounts less than a value.  (optional)
     * @param amendmentIndicator Amendent types:     -N   new     -A   amendment     -T   terminated     -C   consolidated     -M   multi-candidate     -S   secondary  NULL might be new or amendment. If amendment indicator is null and the filings is the first or first in a chain treat it as if it was a new. If it is not the first or first in a chain then treat the filing as an amendment.  (optional)
     * @param cycle  Filter records to only those that were applicable to a given two-year period.The cycle begins with an odd year and is named for its ending, even year.  (optional)
     * @param sortNullOnly Toggle that filters out all rows having sort column that is non-null (optional, default to false)
     * @param minIndependentExpenditures  Filter for all amounts greater than a value.  (optional)
     * @param perPage The number of results returned per page. Defaults to 20. (optional, default to 20)
     * @param qFiler  Keyword search for filer name or ID  (optional)
     * @param committeeType The one-letter type code of the organization:         - C communication cost         - D delegate         - E electioneering communication         - H House         - I independent expenditure filer (not a committee)         - N PAC - nonqualified         - O independent expenditure-only (super PACs)         - P presidential         - Q PAC - qualified         - S Senate         - U single candidate independent expenditure         - V PAC with non-contribution account, nonqualified         - W PAC with non-contribution account, qualified         - X party, nonqualified         - Y party, qualified         - Z national party non-federal account  (optional)
     * @param page For paginating through results, starting at page 1 (optional, default to 1)
     * @param year  Forms with coverage date -      year from the coverage ending date. Forms without coverage date -      year from the receipt date.  (optional)
     * @param committeeId  A unique identifier assigned to each committee or filer registered with the FEC. In general committee id&#39;s begin with the letter C which is followed by eight digits.  (optional)
     * @param minCashOnHandEndPeriodAmount  Filter for all amounts greater than a value.  (optional)
     * @param minDisbursementsAmount  Filter for all amounts greater than a value.  (optional)
     * @param mostRecent  Report is either new or is the most-recently filed amendment  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call reportsEntityTypeGetAsync(String apiKey, String entityType, String maxPartyCoordinatedExpenditures, String maxDebtsOwedExpenditures, String minReceiptsAmount, String minDebtsOwedAmount, LocalDate maxReceiptDate, Boolean sortHideNull, String candidateId, List<String> sort, List<String> qSpender, String maxReceiptsAmount, String filerType, List<String> reportType, String maxTotalContributions, Boolean sortNullsLast, String maxIndependentExpenditures, String minTotalContributions, String minPartyCoordinatedExpenditures, List<String> beginningImageNumber, LocalDate minReceiptDate, Boolean isAmended, String maxDisbursementsAmount, String maxCashOnHandEndPeriodAmount, List<String> amendmentIndicator, List<Integer> cycle, Boolean sortNullOnly, String minIndependentExpenditures, Integer perPage, List<String> qFiler, List<String> committeeType, Integer page, List<Integer> year, List<String> committeeId, String minCashOnHandEndPeriodAmount, String minDisbursementsAmount, Boolean mostRecent, final ApiCallback<CommitteeReportsPage> _callback) throws ApiException {

        okhttp3.Call localVarCall = reportsEntityTypeGetValidateBeforeCall(apiKey, entityType, maxPartyCoordinatedExpenditures, maxDebtsOwedExpenditures, minReceiptsAmount, minDebtsOwedAmount, maxReceiptDate, sortHideNull, candidateId, sort, qSpender, maxReceiptsAmount, filerType, reportType, maxTotalContributions, sortNullsLast, maxIndependentExpenditures, minTotalContributions, minPartyCoordinatedExpenditures, beginningImageNumber, minReceiptDate, isAmended, maxDisbursementsAmount, maxCashOnHandEndPeriodAmount, amendmentIndicator, cycle, sortNullOnly, minIndependentExpenditures, perPage, qFiler, committeeType, page, year, committeeId, minCashOnHandEndPeriodAmount, minDisbursementsAmount, mostRecent, _callback);
        Type localVarReturnType = new TypeToken<CommitteeReportsPage>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for totalsByEntityGet
     * @param apiKey  API key for https://api.data.gov. Get one at https://api.data.gov/signup.  (required)
     * @param cycle  Filter records to only those that were applicable to a given two-year period.The cycle begins with an odd year and is named for its ending, even year.  (required)
     * @param page For paginating through results, starting at page 1 (optional, default to 1)
     * @param sortHideNull Hide null values on sorted column(s). (optional, default to false)
     * @param perPage The number of results returned per page. Defaults to 20. (optional, default to 20)
     * @param sortNullOnly Toggle that filters out all rows having sort column that is non-null (optional, default to false)
     * @param sort Provide a field to sort by. Use &#x60;-&#x60; for descending order.  (optional, default to end_date)
     * @param sortNullsLast Toggle that sorts null values last (optional, default to false)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call totalsByEntityGetCall(String apiKey, Integer cycle, Integer page, Boolean sortHideNull, Integer perPage, Boolean sortNullOnly, String sort, Boolean sortNullsLast, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/totals/by_entity/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (apiKey != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api_key", apiKey));
        }

        if (sortHideNull != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort_hide_null", sortHideNull));
        }

        if (perPage != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("per_page", perPage));
        }

        if (sortNullOnly != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort_null_only", sortNullOnly));
        }

        if (sort != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort", sort));
        }

        if (cycle != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("cycle", cycle));
        }

        if (sortNullsLast != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort_nulls_last", sortNullsLast));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKeyHeaderAuth", "ApiKeyQueryAuth", "apiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call totalsByEntityGetValidateBeforeCall(String apiKey, Integer cycle, Integer page, Boolean sortHideNull, Integer perPage, Boolean sortNullOnly, String sort, Boolean sortNullsLast, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'apiKey' is set
        if (apiKey == null) {
            throw new ApiException("Missing the required parameter 'apiKey' when calling totalsByEntityGet(Async)");
        }

        // verify the required parameter 'cycle' is set
        if (cycle == null) {
            throw new ApiException("Missing the required parameter 'cycle' when calling totalsByEntityGet(Async)");
        }

        return totalsByEntityGetCall(apiKey, cycle, page, sortHideNull, perPage, sortNullOnly, sort, sortNullsLast, _callback);

    }

    /**
     * 
     *  Provides cumulative receipt totals by entity type, over a two year cycle. Totals are adjusted to avoid double counting.  This is [the sql](https://github.com/fecgov/openFEC/blob/develop/data/migrations/V41__large_aggregates.sql) that creates these calculations. 
     * @param apiKey  API key for https://api.data.gov. Get one at https://api.data.gov/signup.  (required)
     * @param cycle  Filter records to only those that were applicable to a given two-year period.The cycle begins with an odd year and is named for its ending, even year.  (required)
     * @param page For paginating through results, starting at page 1 (optional, default to 1)
     * @param sortHideNull Hide null values on sorted column(s). (optional, default to false)
     * @param perPage The number of results returned per page. Defaults to 20. (optional, default to 20)
     * @param sortNullOnly Toggle that filters out all rows having sort column that is non-null (optional, default to false)
     * @param sort Provide a field to sort by. Use &#x60;-&#x60; for descending order.  (optional, default to end_date)
     * @param sortNullsLast Toggle that sorts null values last (optional, default to false)
     * @return EntityReceiptDisbursementTotalsPage
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public EntityReceiptDisbursementTotalsPage totalsByEntityGet(String apiKey, Integer cycle, Integer page, Boolean sortHideNull, Integer perPage, Boolean sortNullOnly, String sort, Boolean sortNullsLast) throws ApiException {
        ApiResponse<EntityReceiptDisbursementTotalsPage> localVarResp = totalsByEntityGetWithHttpInfo(apiKey, cycle, page, sortHideNull, perPage, sortNullOnly, sort, sortNullsLast);
        return localVarResp.getData();
    }

    /**
     * 
     *  Provides cumulative receipt totals by entity type, over a two year cycle. Totals are adjusted to avoid double counting.  This is [the sql](https://github.com/fecgov/openFEC/blob/develop/data/migrations/V41__large_aggregates.sql) that creates these calculations. 
     * @param apiKey  API key for https://api.data.gov. Get one at https://api.data.gov/signup.  (required)
     * @param cycle  Filter records to only those that were applicable to a given two-year period.The cycle begins with an odd year and is named for its ending, even year.  (required)
     * @param page For paginating through results, starting at page 1 (optional, default to 1)
     * @param sortHideNull Hide null values on sorted column(s). (optional, default to false)
     * @param perPage The number of results returned per page. Defaults to 20. (optional, default to 20)
     * @param sortNullOnly Toggle that filters out all rows having sort column that is non-null (optional, default to false)
     * @param sort Provide a field to sort by. Use &#x60;-&#x60; for descending order.  (optional, default to end_date)
     * @param sortNullsLast Toggle that sorts null values last (optional, default to false)
     * @return ApiResponse&lt;EntityReceiptDisbursementTotalsPage&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<EntityReceiptDisbursementTotalsPage> totalsByEntityGetWithHttpInfo(String apiKey, Integer cycle, Integer page, Boolean sortHideNull, Integer perPage, Boolean sortNullOnly, String sort, Boolean sortNullsLast) throws ApiException {
        okhttp3.Call localVarCall = totalsByEntityGetValidateBeforeCall(apiKey, cycle, page, sortHideNull, perPage, sortNullOnly, sort, sortNullsLast, null);
        Type localVarReturnType = new TypeToken<EntityReceiptDisbursementTotalsPage>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     *  Provides cumulative receipt totals by entity type, over a two year cycle. Totals are adjusted to avoid double counting.  This is [the sql](https://github.com/fecgov/openFEC/blob/develop/data/migrations/V41__large_aggregates.sql) that creates these calculations. 
     * @param apiKey  API key for https://api.data.gov. Get one at https://api.data.gov/signup.  (required)
     * @param cycle  Filter records to only those that were applicable to a given two-year period.The cycle begins with an odd year and is named for its ending, even year.  (required)
     * @param page For paginating through results, starting at page 1 (optional, default to 1)
     * @param sortHideNull Hide null values on sorted column(s). (optional, default to false)
     * @param perPage The number of results returned per page. Defaults to 20. (optional, default to 20)
     * @param sortNullOnly Toggle that filters out all rows having sort column that is non-null (optional, default to false)
     * @param sort Provide a field to sort by. Use &#x60;-&#x60; for descending order.  (optional, default to end_date)
     * @param sortNullsLast Toggle that sorts null values last (optional, default to false)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call totalsByEntityGetAsync(String apiKey, Integer cycle, Integer page, Boolean sortHideNull, Integer perPage, Boolean sortNullOnly, String sort, Boolean sortNullsLast, final ApiCallback<EntityReceiptDisbursementTotalsPage> _callback) throws ApiException {

        okhttp3.Call localVarCall = totalsByEntityGetValidateBeforeCall(apiKey, cycle, page, sortHideNull, perPage, sortNullOnly, sort, sortNullsLast, _callback);
        Type localVarReturnType = new TypeToken<EntityReceiptDisbursementTotalsPage>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for totalsEntityTypeGet
     * @param apiKey  API key for https://api.data.gov. Get one at https://api.data.gov/signup.  (required)
     * @param entityType Committee groupings based on FEC filing form.                 Choose one of: &#x60;presidential&#x60;, &#x60;pac&#x60;, &#x60;party&#x60;, &#x60;pac-party&#x60;,                 &#x60;house-senate&#x60;, or &#x60;ie-only&#x60; (required)
     * @param treasurerName Name of the Committee&#39;s treasurer. If multiple treasurers for the committee, the most recent treasurer will be shown. (optional)
     * @param maxDisbursements  Filter for all amounts less than a value.  (optional)
     * @param committeeState US state or territory (optional)
     * @param cycle  Filter records to only those that were applicable to a given two-year period.The cycle begins with an odd year and is named for its ending, even year.  (optional)
     * @param sortNullOnly Toggle that filters out all rows having sort column that is non-null (optional, default to false)
     * @param sponsorCandidateId  A unique identifier assigned to each candidate registered with the FEC. If a person runs for several offices, that person will have separate candidate IDs for each office. This is a filter for Leadership PAC sponsor.  (optional)
     * @param minDisbursements  Filter for all amounts greater than a value.  (optional)
     * @param minLastCashOnHandEndPeriod  Filter for all amounts greater than a value.  (optional)
     * @param maxLastCashOnHandEndPeriod  Filter for all amounts less than a value.  (optional)
     * @param sortHideNull Hide null values on sorted column(s). (optional, default to false)
     * @param perPage The number of results returned per page. Defaults to 20. (optional, default to 20)
     * @param filingFrequency The one-letter      code of the filing frequency:          - A Administratively terminated          - D Debt          - M Monthly filer          - Q Quarterly filer          - T Terminated          - W Waived  (optional)
     * @param sort Provide a field to sort by. Use &#x60;-&#x60; for descending order.  (optional, default to -cycle)
     * @param maxLastDebtsOwedByCommittee  Filter for all amounts less than a value.  (optional)
     * @param minFirstF1Date Filter for committees whose first Form 1 was received on or after this date. (optional)
     * @param committeeDesignation The one-letter designation code of the organization:          - A authorized by a candidate          - J joint fundraising committee          - P principal campaign committee of a candidate          - U unauthorized          - B lobbyist/registrant PAC          - D leadership PAC  (optional)
     * @param maxReceipts  Filter for all amounts less than a value.  (optional)
     * @param committeeType The one-letter type code of the organization:         - C communication cost         - D delegate         - E electioneering communication         - H House         - I independent expenditure filer (not a committee)         - N PAC - nonqualified         - O independent expenditure-only (super PACs)         - P presidential         - Q PAC - qualified         - S Senate         - U single candidate independent expenditure         - V PAC with non-contribution account, nonqualified         - W PAC with non-contribution account, qualified         - X party, nonqualified         - Y party, qualified         - Z national party non-federal account  (optional)
     * @param sortNullsLast Toggle that sorts null values last (optional, default to false)
     * @param page For paginating through results, starting at page 1 (optional, default to 1)
     * @param committeeId  A unique identifier assigned to each committee or filer registered with the FEC. In general committee id&#39;s begin with the letter C which is followed by eight digits.  (optional)
     * @param minLastDebtsOwedByCommittee  Filter for all amounts greater than a value.  (optional)
     * @param maxFirstF1Date Filter for committees whose first Form 1 was received on or before this date. (optional)
     * @param organizationType The one-letter code for the kind for organization:         - C corporation         - L labor organization         - M membership organization         - T trade association         - V cooperative         - W corporation without capital stock  (optional)
     * @param minReceipts  Filter for all amounts greater than a value.  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call totalsEntityTypeGetCall(String apiKey, String entityType, List<String> treasurerName, String maxDisbursements, List<String> committeeState, List<Integer> cycle, Boolean sortNullOnly, List<String> sponsorCandidateId, String minDisbursements, String minLastCashOnHandEndPeriod, String maxLastCashOnHandEndPeriod, Boolean sortHideNull, Integer perPage, List<String> filingFrequency, String sort, String maxLastDebtsOwedByCommittee, LocalDate minFirstF1Date, List<String> committeeDesignation, String maxReceipts, List<String> committeeType, Boolean sortNullsLast, Integer page, List<String> committeeId, String minLastDebtsOwedByCommittee, LocalDate maxFirstF1Date, List<String> organizationType, String minReceipts, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/totals/{entity_type}/"
            .replace("{" + "entity_type" + "}", localVarApiClient.escapeString(entityType.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (treasurerName != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "treasurer_name", treasurerName));
        }

        if (maxDisbursements != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("max_disbursements", maxDisbursements));
        }

        if (committeeState != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "committee_state", committeeState));
        }

        if (cycle != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "cycle", cycle));
        }

        if (sortNullOnly != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort_null_only", sortNullOnly));
        }

        if (sponsorCandidateId != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "sponsor_candidate_id", sponsorCandidateId));
        }

        if (minDisbursements != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("min_disbursements", minDisbursements));
        }

        if (minLastCashOnHandEndPeriod != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("min_last_cash_on_hand_end_period", minLastCashOnHandEndPeriod));
        }

        if (maxLastCashOnHandEndPeriod != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("max_last_cash_on_hand_end_period", maxLastCashOnHandEndPeriod));
        }

        if (sortHideNull != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort_hide_null", sortHideNull));
        }

        if (perPage != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("per_page", perPage));
        }

        if (filingFrequency != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "filing_frequency", filingFrequency));
        }

        if (sort != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort", sort));
        }

        if (maxLastDebtsOwedByCommittee != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("max_last_debts_owed_by_committee", maxLastDebtsOwedByCommittee));
        }

        if (minFirstF1Date != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("min_first_f1_date", minFirstF1Date));
        }

        if (committeeDesignation != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "committee_designation", committeeDesignation));
        }

        if (apiKey != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api_key", apiKey));
        }

        if (maxReceipts != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("max_receipts", maxReceipts));
        }

        if (committeeType != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "committee_type", committeeType));
        }

        if (sortNullsLast != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort_nulls_last", sortNullsLast));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (committeeId != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "committee_id", committeeId));
        }

        if (minLastDebtsOwedByCommittee != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("min_last_debts_owed_by_committee", minLastDebtsOwedByCommittee));
        }

        if (maxFirstF1Date != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("max_first_f1_date", maxFirstF1Date));
        }

        if (organizationType != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "organization_type", organizationType));
        }

        if (minReceipts != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("min_receipts", minReceipts));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKeyHeaderAuth", "ApiKeyQueryAuth", "apiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call totalsEntityTypeGetValidateBeforeCall(String apiKey, String entityType, List<String> treasurerName, String maxDisbursements, List<String> committeeState, List<Integer> cycle, Boolean sortNullOnly, List<String> sponsorCandidateId, String minDisbursements, String minLastCashOnHandEndPeriod, String maxLastCashOnHandEndPeriod, Boolean sortHideNull, Integer perPage, List<String> filingFrequency, String sort, String maxLastDebtsOwedByCommittee, LocalDate minFirstF1Date, List<String> committeeDesignation, String maxReceipts, List<String> committeeType, Boolean sortNullsLast, Integer page, List<String> committeeId, String minLastDebtsOwedByCommittee, LocalDate maxFirstF1Date, List<String> organizationType, String minReceipts, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'apiKey' is set
        if (apiKey == null) {
            throw new ApiException("Missing the required parameter 'apiKey' when calling totalsEntityTypeGet(Async)");
        }

        // verify the required parameter 'entityType' is set
        if (entityType == null) {
            throw new ApiException("Missing the required parameter 'entityType' when calling totalsEntityTypeGet(Async)");
        }

        return totalsEntityTypeGetCall(apiKey, entityType, treasurerName, maxDisbursements, committeeState, cycle, sortNullOnly, sponsorCandidateId, minDisbursements, minLastCashOnHandEndPeriod, maxLastCashOnHandEndPeriod, sortHideNull, perPage, filingFrequency, sort, maxLastDebtsOwedByCommittee, minFirstF1Date, committeeDesignation, maxReceipts, committeeType, sortNullsLast, page, committeeId, minLastDebtsOwedByCommittee, maxFirstF1Date, organizationType, minReceipts, _callback);

    }

    /**
     * 
     *  This endpoint provides information about a committee&#39;s Form 3, Form 3X, or Form 3P financial reports, which are aggregated by two-year period. We refer to two-year periods as a &#x60;cycle&#x60;.  The cycle is named after the even-numbered year and includes the year before it. To obtain totals from 2013 and 2014, you would use 2014. In odd-numbered years, the current cycle is the next year â€” for example, in 2015, the current cycle is 2016.  For presidential and Senate candidates, multiple two-year cycles exist between elections.  
     * @param apiKey  API key for https://api.data.gov. Get one at https://api.data.gov/signup.  (required)
     * @param entityType Committee groupings based on FEC filing form.                 Choose one of: &#x60;presidential&#x60;, &#x60;pac&#x60;, &#x60;party&#x60;, &#x60;pac-party&#x60;,                 &#x60;house-senate&#x60;, or &#x60;ie-only&#x60; (required)
     * @param treasurerName Name of the Committee&#39;s treasurer. If multiple treasurers for the committee, the most recent treasurer will be shown. (optional)
     * @param maxDisbursements  Filter for all amounts less than a value.  (optional)
     * @param committeeState US state or territory (optional)
     * @param cycle  Filter records to only those that were applicable to a given two-year period.The cycle begins with an odd year and is named for its ending, even year.  (optional)
     * @param sortNullOnly Toggle that filters out all rows having sort column that is non-null (optional, default to false)
     * @param sponsorCandidateId  A unique identifier assigned to each candidate registered with the FEC. If a person runs for several offices, that person will have separate candidate IDs for each office. This is a filter for Leadership PAC sponsor.  (optional)
     * @param minDisbursements  Filter for all amounts greater than a value.  (optional)
     * @param minLastCashOnHandEndPeriod  Filter for all amounts greater than a value.  (optional)
     * @param maxLastCashOnHandEndPeriod  Filter for all amounts less than a value.  (optional)
     * @param sortHideNull Hide null values on sorted column(s). (optional, default to false)
     * @param perPage The number of results returned per page. Defaults to 20. (optional, default to 20)
     * @param filingFrequency The one-letter      code of the filing frequency:          - A Administratively terminated          - D Debt          - M Monthly filer          - Q Quarterly filer          - T Terminated          - W Waived  (optional)
     * @param sort Provide a field to sort by. Use &#x60;-&#x60; for descending order.  (optional, default to -cycle)
     * @param maxLastDebtsOwedByCommittee  Filter for all amounts less than a value.  (optional)
     * @param minFirstF1Date Filter for committees whose first Form 1 was received on or after this date. (optional)
     * @param committeeDesignation The one-letter designation code of the organization:          - A authorized by a candidate          - J joint fundraising committee          - P principal campaign committee of a candidate          - U unauthorized          - B lobbyist/registrant PAC          - D leadership PAC  (optional)
     * @param maxReceipts  Filter for all amounts less than a value.  (optional)
     * @param committeeType The one-letter type code of the organization:         - C communication cost         - D delegate         - E electioneering communication         - H House         - I independent expenditure filer (not a committee)         - N PAC - nonqualified         - O independent expenditure-only (super PACs)         - P presidential         - Q PAC - qualified         - S Senate         - U single candidate independent expenditure         - V PAC with non-contribution account, nonqualified         - W PAC with non-contribution account, qualified         - X party, nonqualified         - Y party, qualified         - Z national party non-federal account  (optional)
     * @param sortNullsLast Toggle that sorts null values last (optional, default to false)
     * @param page For paginating through results, starting at page 1 (optional, default to 1)
     * @param committeeId  A unique identifier assigned to each committee or filer registered with the FEC. In general committee id&#39;s begin with the letter C which is followed by eight digits.  (optional)
     * @param minLastDebtsOwedByCommittee  Filter for all amounts greater than a value.  (optional)
     * @param maxFirstF1Date Filter for committees whose first Form 1 was received on or before this date. (optional)
     * @param organizationType The one-letter code for the kind for organization:         - C corporation         - L labor organization         - M membership organization         - T trade association         - V cooperative         - W corporation without capital stock  (optional)
     * @param minReceipts  Filter for all amounts greater than a value.  (optional)
     * @return CommitteeTotalsPage
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public CommitteeTotalsPage totalsEntityTypeGet(String apiKey, String entityType, List<String> treasurerName, String maxDisbursements, List<String> committeeState, List<Integer> cycle, Boolean sortNullOnly, List<String> sponsorCandidateId, String minDisbursements, String minLastCashOnHandEndPeriod, String maxLastCashOnHandEndPeriod, Boolean sortHideNull, Integer perPage, List<String> filingFrequency, String sort, String maxLastDebtsOwedByCommittee, LocalDate minFirstF1Date, List<String> committeeDesignation, String maxReceipts, List<String> committeeType, Boolean sortNullsLast, Integer page, List<String> committeeId, String minLastDebtsOwedByCommittee, LocalDate maxFirstF1Date, List<String> organizationType, String minReceipts) throws ApiException {
        ApiResponse<CommitteeTotalsPage> localVarResp = totalsEntityTypeGetWithHttpInfo(apiKey, entityType, treasurerName, maxDisbursements, committeeState, cycle, sortNullOnly, sponsorCandidateId, minDisbursements, minLastCashOnHandEndPeriod, maxLastCashOnHandEndPeriod, sortHideNull, perPage, filingFrequency, sort, maxLastDebtsOwedByCommittee, minFirstF1Date, committeeDesignation, maxReceipts, committeeType, sortNullsLast, page, committeeId, minLastDebtsOwedByCommittee, maxFirstF1Date, organizationType, minReceipts);
        return localVarResp.getData();
    }

    /**
     * 
     *  This endpoint provides information about a committee&#39;s Form 3, Form 3X, or Form 3P financial reports, which are aggregated by two-year period. We refer to two-year periods as a &#x60;cycle&#x60;.  The cycle is named after the even-numbered year and includes the year before it. To obtain totals from 2013 and 2014, you would use 2014. In odd-numbered years, the current cycle is the next year â€” for example, in 2015, the current cycle is 2016.  For presidential and Senate candidates, multiple two-year cycles exist between elections.  
     * @param apiKey  API key for https://api.data.gov. Get one at https://api.data.gov/signup.  (required)
     * @param entityType Committee groupings based on FEC filing form.                 Choose one of: &#x60;presidential&#x60;, &#x60;pac&#x60;, &#x60;party&#x60;, &#x60;pac-party&#x60;,                 &#x60;house-senate&#x60;, or &#x60;ie-only&#x60; (required)
     * @param treasurerName Name of the Committee&#39;s treasurer. If multiple treasurers for the committee, the most recent treasurer will be shown. (optional)
     * @param maxDisbursements  Filter for all amounts less than a value.  (optional)
     * @param committeeState US state or territory (optional)
     * @param cycle  Filter records to only those that were applicable to a given two-year period.The cycle begins with an odd year and is named for its ending, even year.  (optional)
     * @param sortNullOnly Toggle that filters out all rows having sort column that is non-null (optional, default to false)
     * @param sponsorCandidateId  A unique identifier assigned to each candidate registered with the FEC. If a person runs for several offices, that person will have separate candidate IDs for each office. This is a filter for Leadership PAC sponsor.  (optional)
     * @param minDisbursements  Filter for all amounts greater than a value.  (optional)
     * @param minLastCashOnHandEndPeriod  Filter for all amounts greater than a value.  (optional)
     * @param maxLastCashOnHandEndPeriod  Filter for all amounts less than a value.  (optional)
     * @param sortHideNull Hide null values on sorted column(s). (optional, default to false)
     * @param perPage The number of results returned per page. Defaults to 20. (optional, default to 20)
     * @param filingFrequency The one-letter      code of the filing frequency:          - A Administratively terminated          - D Debt          - M Monthly filer          - Q Quarterly filer          - T Terminated          - W Waived  (optional)
     * @param sort Provide a field to sort by. Use &#x60;-&#x60; for descending order.  (optional, default to -cycle)
     * @param maxLastDebtsOwedByCommittee  Filter for all amounts less than a value.  (optional)
     * @param minFirstF1Date Filter for committees whose first Form 1 was received on or after this date. (optional)
     * @param committeeDesignation The one-letter designation code of the organization:          - A authorized by a candidate          - J joint fundraising committee          - P principal campaign committee of a candidate          - U unauthorized          - B lobbyist/registrant PAC          - D leadership PAC  (optional)
     * @param maxReceipts  Filter for all amounts less than a value.  (optional)
     * @param committeeType The one-letter type code of the organization:         - C communication cost         - D delegate         - E electioneering communication         - H House         - I independent expenditure filer (not a committee)         - N PAC - nonqualified         - O independent expenditure-only (super PACs)         - P presidential         - Q PAC - qualified         - S Senate         - U single candidate independent expenditure         - V PAC with non-contribution account, nonqualified         - W PAC with non-contribution account, qualified         - X party, nonqualified         - Y party, qualified         - Z national party non-federal account  (optional)
     * @param sortNullsLast Toggle that sorts null values last (optional, default to false)
     * @param page For paginating through results, starting at page 1 (optional, default to 1)
     * @param committeeId  A unique identifier assigned to each committee or filer registered with the FEC. In general committee id&#39;s begin with the letter C which is followed by eight digits.  (optional)
     * @param minLastDebtsOwedByCommittee  Filter for all amounts greater than a value.  (optional)
     * @param maxFirstF1Date Filter for committees whose first Form 1 was received on or before this date. (optional)
     * @param organizationType The one-letter code for the kind for organization:         - C corporation         - L labor organization         - M membership organization         - T trade association         - V cooperative         - W corporation without capital stock  (optional)
     * @param minReceipts  Filter for all amounts greater than a value.  (optional)
     * @return ApiResponse&lt;CommitteeTotalsPage&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CommitteeTotalsPage> totalsEntityTypeGetWithHttpInfo(String apiKey, String entityType, List<String> treasurerName, String maxDisbursements, List<String> committeeState, List<Integer> cycle, Boolean sortNullOnly, List<String> sponsorCandidateId, String minDisbursements, String minLastCashOnHandEndPeriod, String maxLastCashOnHandEndPeriod, Boolean sortHideNull, Integer perPage, List<String> filingFrequency, String sort, String maxLastDebtsOwedByCommittee, LocalDate minFirstF1Date, List<String> committeeDesignation, String maxReceipts, List<String> committeeType, Boolean sortNullsLast, Integer page, List<String> committeeId, String minLastDebtsOwedByCommittee, LocalDate maxFirstF1Date, List<String> organizationType, String minReceipts) throws ApiException {
        okhttp3.Call localVarCall = totalsEntityTypeGetValidateBeforeCall(apiKey, entityType, treasurerName, maxDisbursements, committeeState, cycle, sortNullOnly, sponsorCandidateId, minDisbursements, minLastCashOnHandEndPeriod, maxLastCashOnHandEndPeriod, sortHideNull, perPage, filingFrequency, sort, maxLastDebtsOwedByCommittee, minFirstF1Date, committeeDesignation, maxReceipts, committeeType, sortNullsLast, page, committeeId, minLastDebtsOwedByCommittee, maxFirstF1Date, organizationType, minReceipts, null);
        Type localVarReturnType = new TypeToken<CommitteeTotalsPage>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     *  This endpoint provides information about a committee&#39;s Form 3, Form 3X, or Form 3P financial reports, which are aggregated by two-year period. We refer to two-year periods as a &#x60;cycle&#x60;.  The cycle is named after the even-numbered year and includes the year before it. To obtain totals from 2013 and 2014, you would use 2014. In odd-numbered years, the current cycle is the next year â€” for example, in 2015, the current cycle is 2016.  For presidential and Senate candidates, multiple two-year cycles exist between elections.  
     * @param apiKey  API key for https://api.data.gov. Get one at https://api.data.gov/signup.  (required)
     * @param entityType Committee groupings based on FEC filing form.                 Choose one of: &#x60;presidential&#x60;, &#x60;pac&#x60;, &#x60;party&#x60;, &#x60;pac-party&#x60;,                 &#x60;house-senate&#x60;, or &#x60;ie-only&#x60; (required)
     * @param treasurerName Name of the Committee&#39;s treasurer. If multiple treasurers for the committee, the most recent treasurer will be shown. (optional)
     * @param maxDisbursements  Filter for all amounts less than a value.  (optional)
     * @param committeeState US state or territory (optional)
     * @param cycle  Filter records to only those that were applicable to a given two-year period.The cycle begins with an odd year and is named for its ending, even year.  (optional)
     * @param sortNullOnly Toggle that filters out all rows having sort column that is non-null (optional, default to false)
     * @param sponsorCandidateId  A unique identifier assigned to each candidate registered with the FEC. If a person runs for several offices, that person will have separate candidate IDs for each office. This is a filter for Leadership PAC sponsor.  (optional)
     * @param minDisbursements  Filter for all amounts greater than a value.  (optional)
     * @param minLastCashOnHandEndPeriod  Filter for all amounts greater than a value.  (optional)
     * @param maxLastCashOnHandEndPeriod  Filter for all amounts less than a value.  (optional)
     * @param sortHideNull Hide null values on sorted column(s). (optional, default to false)
     * @param perPage The number of results returned per page. Defaults to 20. (optional, default to 20)
     * @param filingFrequency The one-letter      code of the filing frequency:          - A Administratively terminated          - D Debt          - M Monthly filer          - Q Quarterly filer          - T Terminated          - W Waived  (optional)
     * @param sort Provide a field to sort by. Use &#x60;-&#x60; for descending order.  (optional, default to -cycle)
     * @param maxLastDebtsOwedByCommittee  Filter for all amounts less than a value.  (optional)
     * @param minFirstF1Date Filter for committees whose first Form 1 was received on or after this date. (optional)
     * @param committeeDesignation The one-letter designation code of the organization:          - A authorized by a candidate          - J joint fundraising committee          - P principal campaign committee of a candidate          - U unauthorized          - B lobbyist/registrant PAC          - D leadership PAC  (optional)
     * @param maxReceipts  Filter for all amounts less than a value.  (optional)
     * @param committeeType The one-letter type code of the organization:         - C communication cost         - D delegate         - E electioneering communication         - H House         - I independent expenditure filer (not a committee)         - N PAC - nonqualified         - O independent expenditure-only (super PACs)         - P presidential         - Q PAC - qualified         - S Senate         - U single candidate independent expenditure         - V PAC with non-contribution account, nonqualified         - W PAC with non-contribution account, qualified         - X party, nonqualified         - Y party, qualified         - Z national party non-federal account  (optional)
     * @param sortNullsLast Toggle that sorts null values last (optional, default to false)
     * @param page For paginating through results, starting at page 1 (optional, default to 1)
     * @param committeeId  A unique identifier assigned to each committee or filer registered with the FEC. In general committee id&#39;s begin with the letter C which is followed by eight digits.  (optional)
     * @param minLastDebtsOwedByCommittee  Filter for all amounts greater than a value.  (optional)
     * @param maxFirstF1Date Filter for committees whose first Form 1 was received on or before this date. (optional)
     * @param organizationType The one-letter code for the kind for organization:         - C corporation         - L labor organization         - M membership organization         - T trade association         - V cooperative         - W corporation without capital stock  (optional)
     * @param minReceipts  Filter for all amounts greater than a value.  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call totalsEntityTypeGetAsync(String apiKey, String entityType, List<String> treasurerName, String maxDisbursements, List<String> committeeState, List<Integer> cycle, Boolean sortNullOnly, List<String> sponsorCandidateId, String minDisbursements, String minLastCashOnHandEndPeriod, String maxLastCashOnHandEndPeriod, Boolean sortHideNull, Integer perPage, List<String> filingFrequency, String sort, String maxLastDebtsOwedByCommittee, LocalDate minFirstF1Date, List<String> committeeDesignation, String maxReceipts, List<String> committeeType, Boolean sortNullsLast, Integer page, List<String> committeeId, String minLastDebtsOwedByCommittee, LocalDate maxFirstF1Date, List<String> organizationType, String minReceipts, final ApiCallback<CommitteeTotalsPage> _callback) throws ApiException {

        okhttp3.Call localVarCall = totalsEntityTypeGetValidateBeforeCall(apiKey, entityType, treasurerName, maxDisbursements, committeeState, cycle, sortNullOnly, sponsorCandidateId, minDisbursements, minLastCashOnHandEndPeriod, maxLastCashOnHandEndPeriod, sortHideNull, perPage, filingFrequency, sort, maxLastDebtsOwedByCommittee, minFirstF1Date, committeeDesignation, maxReceipts, committeeType, sortNullsLast, page, committeeId, minLastDebtsOwedByCommittee, maxFirstF1Date, organizationType, minReceipts, _callback);
        Type localVarReturnType = new TypeToken<CommitteeTotalsPage>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for totalsInauguralCommitteesByContributorGet
     * @param apiKey  API key for https://api.data.gov. Get one at https://api.data.gov/signup.  (required)
     * @param cycle  A two year election cycle that the committee was active- (after original registration date but before expiration date in Form 1s) The cycle begins with an odd year and is named for its ending, even year.  (optional)
     * @param sortNullsLast Toggle that sorts null values last (optional, default to false)
     * @param page For paginating through results, starting at page 1 (optional, default to 1)
     * @param committeeId  A unique identifier assigned to each committee or filer registered with the FEC. In general committee id&#39;s begin with the letter C which is followed by eight digits.  (optional)
     * @param sortNullOnly Toggle that filters out all rows having sort column that is non-null (optional, default to false)
     * @param contributorName Name of contributor (optional)
     * @param sortHideNull Hide null values on sorted column(s). (optional, default to false)
     * @param perPage The number of results returned per page. Defaults to 20. (optional, default to 20)
     * @param sort  Provide a field to sort by. Use &#x60;-&#x60; for descending order. ex: &#x60;-case_no&#x60;  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call totalsInauguralCommitteesByContributorGetCall(String apiKey, List<Integer> cycle, Boolean sortNullsLast, Integer page, List<String> committeeId, Boolean sortNullOnly, List<String> contributorName, Boolean sortHideNull, Integer perPage, List<String> sort, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/totals/inaugural_committees/by_contributor/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiKey != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api_key", apiKey));
        }

        if (cycle != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "cycle", cycle));
        }

        if (sortNullsLast != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort_nulls_last", sortNullsLast));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (committeeId != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "committee_id", committeeId));
        }

        if (sortNullOnly != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort_null_only", sortNullOnly));
        }

        if (contributorName != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "contributor_name", contributorName));
        }

        if (sortHideNull != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort_hide_null", sortHideNull));
        }

        if (perPage != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("per_page", perPage));
        }

        if (sort != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "sort", sort));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKeyHeaderAuth", "ApiKeyQueryAuth", "apiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call totalsInauguralCommitteesByContributorGetValidateBeforeCall(String apiKey, List<Integer> cycle, Boolean sortNullsLast, Integer page, List<String> committeeId, Boolean sortNullOnly, List<String> contributorName, Boolean sortHideNull, Integer perPage, List<String> sort, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'apiKey' is set
        if (apiKey == null) {
            throw new ApiException("Missing the required parameter 'apiKey' when calling totalsInauguralCommitteesByContributorGet(Async)");
        }

        return totalsInauguralCommitteesByContributorGetCall(apiKey, cycle, sortNullsLast, page, committeeId, sortNullOnly, contributorName, sortHideNull, perPage, sort, _callback);

    }

    /**
     * 
     *  This endpoint provides information about an inaugural committee&#39;s Form 13 report of donations accepted. The data is aggregated by the contributor and the two-year period. We refer to two-year periods as a &#x60;cycle&#x60;.  
     * @param apiKey  API key for https://api.data.gov. Get one at https://api.data.gov/signup.  (required)
     * @param cycle  A two year election cycle that the committee was active- (after original registration date but before expiration date in Form 1s) The cycle begins with an odd year and is named for its ending, even year.  (optional)
     * @param sortNullsLast Toggle that sorts null values last (optional, default to false)
     * @param page For paginating through results, starting at page 1 (optional, default to 1)
     * @param committeeId  A unique identifier assigned to each committee or filer registered with the FEC. In general committee id&#39;s begin with the letter C which is followed by eight digits.  (optional)
     * @param sortNullOnly Toggle that filters out all rows having sort column that is non-null (optional, default to false)
     * @param contributorName Name of contributor (optional)
     * @param sortHideNull Hide null values on sorted column(s). (optional, default to false)
     * @param perPage The number of results returned per page. Defaults to 20. (optional, default to 20)
     * @param sort  Provide a field to sort by. Use &#x60;-&#x60; for descending order. ex: &#x60;-case_no&#x60;  (optional)
     * @return InauguralDonationsPage
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public InauguralDonationsPage totalsInauguralCommitteesByContributorGet(String apiKey, List<Integer> cycle, Boolean sortNullsLast, Integer page, List<String> committeeId, Boolean sortNullOnly, List<String> contributorName, Boolean sortHideNull, Integer perPage, List<String> sort) throws ApiException {
        ApiResponse<InauguralDonationsPage> localVarResp = totalsInauguralCommitteesByContributorGetWithHttpInfo(apiKey, cycle, sortNullsLast, page, committeeId, sortNullOnly, contributorName, sortHideNull, perPage, sort);
        return localVarResp.getData();
    }

    /**
     * 
     *  This endpoint provides information about an inaugural committee&#39;s Form 13 report of donations accepted. The data is aggregated by the contributor and the two-year period. We refer to two-year periods as a &#x60;cycle&#x60;.  
     * @param apiKey  API key for https://api.data.gov. Get one at https://api.data.gov/signup.  (required)
     * @param cycle  A two year election cycle that the committee was active- (after original registration date but before expiration date in Form 1s) The cycle begins with an odd year and is named for its ending, even year.  (optional)
     * @param sortNullsLast Toggle that sorts null values last (optional, default to false)
     * @param page For paginating through results, starting at page 1 (optional, default to 1)
     * @param committeeId  A unique identifier assigned to each committee or filer registered with the FEC. In general committee id&#39;s begin with the letter C which is followed by eight digits.  (optional)
     * @param sortNullOnly Toggle that filters out all rows having sort column that is non-null (optional, default to false)
     * @param contributorName Name of contributor (optional)
     * @param sortHideNull Hide null values on sorted column(s). (optional, default to false)
     * @param perPage The number of results returned per page. Defaults to 20. (optional, default to 20)
     * @param sort  Provide a field to sort by. Use &#x60;-&#x60; for descending order. ex: &#x60;-case_no&#x60;  (optional)
     * @return ApiResponse&lt;InauguralDonationsPage&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<InauguralDonationsPage> totalsInauguralCommitteesByContributorGetWithHttpInfo(String apiKey, List<Integer> cycle, Boolean sortNullsLast, Integer page, List<String> committeeId, Boolean sortNullOnly, List<String> contributorName, Boolean sortHideNull, Integer perPage, List<String> sort) throws ApiException {
        okhttp3.Call localVarCall = totalsInauguralCommitteesByContributorGetValidateBeforeCall(apiKey, cycle, sortNullsLast, page, committeeId, sortNullOnly, contributorName, sortHideNull, perPage, sort, null);
        Type localVarReturnType = new TypeToken<InauguralDonationsPage>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     *  This endpoint provides information about an inaugural committee&#39;s Form 13 report of donations accepted. The data is aggregated by the contributor and the two-year period. We refer to two-year periods as a &#x60;cycle&#x60;.  
     * @param apiKey  API key for https://api.data.gov. Get one at https://api.data.gov/signup.  (required)
     * @param cycle  A two year election cycle that the committee was active- (after original registration date but before expiration date in Form 1s) The cycle begins with an odd year and is named for its ending, even year.  (optional)
     * @param sortNullsLast Toggle that sorts null values last (optional, default to false)
     * @param page For paginating through results, starting at page 1 (optional, default to 1)
     * @param committeeId  A unique identifier assigned to each committee or filer registered with the FEC. In general committee id&#39;s begin with the letter C which is followed by eight digits.  (optional)
     * @param sortNullOnly Toggle that filters out all rows having sort column that is non-null (optional, default to false)
     * @param contributorName Name of contributor (optional)
     * @param sortHideNull Hide null values on sorted column(s). (optional, default to false)
     * @param perPage The number of results returned per page. Defaults to 20. (optional, default to 20)
     * @param sort  Provide a field to sort by. Use &#x60;-&#x60; for descending order. ex: &#x60;-case_no&#x60;  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call totalsInauguralCommitteesByContributorGetAsync(String apiKey, List<Integer> cycle, Boolean sortNullsLast, Integer page, List<String> committeeId, Boolean sortNullOnly, List<String> contributorName, Boolean sortHideNull, Integer perPage, List<String> sort, final ApiCallback<InauguralDonationsPage> _callback) throws ApiException {

        okhttp3.Call localVarCall = totalsInauguralCommitteesByContributorGetValidateBeforeCall(apiKey, cycle, sortNullsLast, page, committeeId, sortNullOnly, contributorName, sortHideNull, perPage, sort, _callback);
        Type localVarReturnType = new TypeToken<InauguralDonationsPage>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
