/*
 * OpenFEC
 * This application programming interface (API) allows you to explore the way candidates and committees fund their campaigns.    The Federal Election Commission (FEC) API is a RESTful web service supporting full-text and field-specific searches on FEC data. [Bulk downloads](https://www.fec.gov/data/advanced/?tab=bulk-data) are available on the current site. Information is tied to the underlying forms by file ID and image ID. Data is updated nightly.    There are a lot of data, and a good place to start is to use search to find interesting candidates and committees. Then, you can use their IDs to find report or line item details with the other endpoints. If you are interested in individual donors, check out contributor information in the `/schedule_a/` endpoints.    <b class=\"body\" id=\"getting_started_head\">Getting started with the openFEC API</b><br>    If you would like to use the FEC's API programmatically, you can sign up for your own API key using our form. Alternatively, you can still try out our API without an API key by using the web interface and using DEMO_KEY. Note that when you use the openFEC API you are subject to the [Terms of Service](https://github.com/fecgov/FEC/blob/master/TERMS-OF-SERVICE.md) and [Acceptable Use policy](https://github.com/fecgov/FEC/blob/master/ACCEPTABLE-USE-POLICY.md).    Signing up for an API key will enable you to place up to 1,000 calls an hour. Each call is limited to 100 results per page. You can email questions, comments or a request to get a key for 7,200 calls an hour (120 calls per minute) to <a href=\"mailto:APIinfo@fec.gov\">APIinfo@fec.gov</a>. You can also ask questions and discuss the data in a community led [group](https://groups.google.com/forum/#!forum/fec-data).    The model definitions and schema are available at [/swagger](/swagger/). This is useful for making wrappers and exploring the data.    A few restrictions limit the way you can use FEC data. For example, you canâ€™t use contributor lists for commercial purposes or to solicit donations. [Learn more here](https://www.fec.gov/updates/sale-or-use-contributor-information/).    [Inspect our source code](https://github.com/fecgov/openFEC). We welcome issues and pull requests!    <p><br></p> <h2 class=\"title\" id=\"signup_head\">Sign up for an API key</h2> <div id=\"apidatagov_signup\">Loading signup form...</div>
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.math.BigDecimal;
import java.time.OffsetDateTime;
import java.util.Arrays;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * CandidateCommitteeTotalsPresidential
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:02:12.812386-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class CandidateCommitteeTotalsPresidential {
  public static final String SERIALIZED_NAME_CANDIDATE_CONTRIBUTION = "candidate_contribution";
  @SerializedName(SERIALIZED_NAME_CANDIDATE_CONTRIBUTION)
  private BigDecimal candidateContribution;

  public static final String SERIALIZED_NAME_CANDIDATE_ELECTION_YEAR = "candidate_election_year";
  @SerializedName(SERIALIZED_NAME_CANDIDATE_ELECTION_YEAR)
  private Integer candidateElectionYear;

  public static final String SERIALIZED_NAME_CANDIDATE_ID = "candidate_id";
  @SerializedName(SERIALIZED_NAME_CANDIDATE_ID)
  private String candidateId;

  public static final String SERIALIZED_NAME_CONTRIBUTION_REFUNDS = "contribution_refunds";
  @SerializedName(SERIALIZED_NAME_CONTRIBUTION_REFUNDS)
  private BigDecimal contributionRefunds;

  public static final String SERIALIZED_NAME_CONTRIBUTIONS = "contributions";
  @SerializedName(SERIALIZED_NAME_CONTRIBUTIONS)
  private BigDecimal contributions;

  public static final String SERIALIZED_NAME_COVERAGE_END_DATE = "coverage_end_date";
  @SerializedName(SERIALIZED_NAME_COVERAGE_END_DATE)
  private OffsetDateTime coverageEndDate;

  public static final String SERIALIZED_NAME_COVERAGE_START_DATE = "coverage_start_date";
  @SerializedName(SERIALIZED_NAME_COVERAGE_START_DATE)
  private OffsetDateTime coverageStartDate;

  public static final String SERIALIZED_NAME_CYCLE = "cycle";
  @SerializedName(SERIALIZED_NAME_CYCLE)
  private Integer cycle;

  public static final String SERIALIZED_NAME_DISBURSEMENTS = "disbursements";
  @SerializedName(SERIALIZED_NAME_DISBURSEMENTS)
  private BigDecimal disbursements;

  public static final String SERIALIZED_NAME_ELECTION_FULL = "election_full";
  @SerializedName(SERIALIZED_NAME_ELECTION_FULL)
  private Boolean electionFull;

  public static final String SERIALIZED_NAME_EXEMPT_LEGAL_ACCOUNTING_DISBURSEMENT = "exempt_legal_accounting_disbursement";
  @SerializedName(SERIALIZED_NAME_EXEMPT_LEGAL_ACCOUNTING_DISBURSEMENT)
  private BigDecimal exemptLegalAccountingDisbursement;

  public static final String SERIALIZED_NAME_FEDERAL_FUNDS = "federal_funds";
  @SerializedName(SERIALIZED_NAME_FEDERAL_FUNDS)
  private BigDecimal federalFunds;

  public static final String SERIALIZED_NAME_FUNDRAISING_DISBURSEMENTS = "fundraising_disbursements";
  @SerializedName(SERIALIZED_NAME_FUNDRAISING_DISBURSEMENTS)
  private BigDecimal fundraisingDisbursements;

  public static final String SERIALIZED_NAME_INDIVIDUAL_CONTRIBUTIONS = "individual_contributions";
  @SerializedName(SERIALIZED_NAME_INDIVIDUAL_CONTRIBUTIONS)
  private BigDecimal individualContributions;

  public static final String SERIALIZED_NAME_INDIVIDUAL_ITEMIZED_CONTRIBUTIONS = "individual_itemized_contributions";
  @SerializedName(SERIALIZED_NAME_INDIVIDUAL_ITEMIZED_CONTRIBUTIONS)
  private BigDecimal individualItemizedContributions;

  public static final String SERIALIZED_NAME_INDIVIDUAL_UNITEMIZED_CONTRIBUTIONS = "individual_unitemized_contributions";
  @SerializedName(SERIALIZED_NAME_INDIVIDUAL_UNITEMIZED_CONTRIBUTIONS)
  private BigDecimal individualUnitemizedContributions;

  public static final String SERIALIZED_NAME_LAST_BEGINNING_IMAGE_NUMBER = "last_beginning_image_number";
  @SerializedName(SERIALIZED_NAME_LAST_BEGINNING_IMAGE_NUMBER)
  private String lastBeginningImageNumber;

  public static final String SERIALIZED_NAME_LAST_CASH_ON_HAND_END_PERIOD = "last_cash_on_hand_end_period";
  @SerializedName(SERIALIZED_NAME_LAST_CASH_ON_HAND_END_PERIOD)
  private BigDecimal lastCashOnHandEndPeriod;

  public static final String SERIALIZED_NAME_LAST_DEBTS_OWED_BY_COMMITTEE = "last_debts_owed_by_committee";
  @SerializedName(SERIALIZED_NAME_LAST_DEBTS_OWED_BY_COMMITTEE)
  private BigDecimal lastDebtsOwedByCommittee;

  public static final String SERIALIZED_NAME_LAST_DEBTS_OWED_TO_COMMITTEE = "last_debts_owed_to_committee";
  @SerializedName(SERIALIZED_NAME_LAST_DEBTS_OWED_TO_COMMITTEE)
  private BigDecimal lastDebtsOwedToCommittee;

  public static final String SERIALIZED_NAME_LAST_REPORT_TYPE_FULL = "last_report_type_full";
  @SerializedName(SERIALIZED_NAME_LAST_REPORT_TYPE_FULL)
  private String lastReportTypeFull;

  public static final String SERIALIZED_NAME_LAST_REPORT_YEAR = "last_report_year";
  @SerializedName(SERIALIZED_NAME_LAST_REPORT_YEAR)
  private Integer lastReportYear;

  public static final String SERIALIZED_NAME_LOAN_REPAYMENTS_MADE = "loan_repayments_made";
  @SerializedName(SERIALIZED_NAME_LOAN_REPAYMENTS_MADE)
  private BigDecimal loanRepaymentsMade;

  public static final String SERIALIZED_NAME_LOANS_RECEIVED = "loans_received";
  @SerializedName(SERIALIZED_NAME_LOANS_RECEIVED)
  private BigDecimal loansReceived;

  public static final String SERIALIZED_NAME_LOANS_RECEIVED_FROM_CANDIDATE = "loans_received_from_candidate";
  @SerializedName(SERIALIZED_NAME_LOANS_RECEIVED_FROM_CANDIDATE)
  private BigDecimal loansReceivedFromCandidate;

  public static final String SERIALIZED_NAME_NET_CONTRIBUTIONS = "net_contributions";
  @SerializedName(SERIALIZED_NAME_NET_CONTRIBUTIONS)
  private BigDecimal netContributions;

  public static final String SERIALIZED_NAME_NET_OPERATING_EXPENDITURES = "net_operating_expenditures";
  @SerializedName(SERIALIZED_NAME_NET_OPERATING_EXPENDITURES)
  private BigDecimal netOperatingExpenditures;

  public static final String SERIALIZED_NAME_OFFSETS_TO_FUNDRAISING_EXPENDITURES = "offsets_to_fundraising_expenditures";
  @SerializedName(SERIALIZED_NAME_OFFSETS_TO_FUNDRAISING_EXPENDITURES)
  private BigDecimal offsetsToFundraisingExpenditures;

  public static final String SERIALIZED_NAME_OFFSETS_TO_LEGAL_ACCOUNTING = "offsets_to_legal_accounting";
  @SerializedName(SERIALIZED_NAME_OFFSETS_TO_LEGAL_ACCOUNTING)
  private BigDecimal offsetsToLegalAccounting;

  public static final String SERIALIZED_NAME_OFFSETS_TO_OPERATING_EXPENDITURES = "offsets_to_operating_expenditures";
  @SerializedName(SERIALIZED_NAME_OFFSETS_TO_OPERATING_EXPENDITURES)
  private BigDecimal offsetsToOperatingExpenditures;

  public static final String SERIALIZED_NAME_OPERATING_EXPENDITURES = "operating_expenditures";
  @SerializedName(SERIALIZED_NAME_OPERATING_EXPENDITURES)
  private BigDecimal operatingExpenditures;

  public static final String SERIALIZED_NAME_OTHER_DISBURSEMENTS = "other_disbursements";
  @SerializedName(SERIALIZED_NAME_OTHER_DISBURSEMENTS)
  private BigDecimal otherDisbursements;

  public static final String SERIALIZED_NAME_OTHER_LOANS_RECEIVED = "other_loans_received";
  @SerializedName(SERIALIZED_NAME_OTHER_LOANS_RECEIVED)
  private BigDecimal otherLoansReceived;

  public static final String SERIALIZED_NAME_OTHER_POLITICAL_COMMITTEE_CONTRIBUTIONS = "other_political_committee_contributions";
  @SerializedName(SERIALIZED_NAME_OTHER_POLITICAL_COMMITTEE_CONTRIBUTIONS)
  private BigDecimal otherPoliticalCommitteeContributions;

  public static final String SERIALIZED_NAME_OTHER_RECEIPTS = "other_receipts";
  @SerializedName(SERIALIZED_NAME_OTHER_RECEIPTS)
  private BigDecimal otherReceipts;

  public static final String SERIALIZED_NAME_POLITICAL_PARTY_COMMITTEE_CONTRIBUTIONS = "political_party_committee_contributions";
  @SerializedName(SERIALIZED_NAME_POLITICAL_PARTY_COMMITTEE_CONTRIBUTIONS)
  private BigDecimal politicalPartyCommitteeContributions;

  public static final String SERIALIZED_NAME_RECEIPTS = "receipts";
  @SerializedName(SERIALIZED_NAME_RECEIPTS)
  private BigDecimal receipts;

  public static final String SERIALIZED_NAME_REFUNDED_INDIVIDUAL_CONTRIBUTIONS = "refunded_individual_contributions";
  @SerializedName(SERIALIZED_NAME_REFUNDED_INDIVIDUAL_CONTRIBUTIONS)
  private BigDecimal refundedIndividualContributions;

  public static final String SERIALIZED_NAME_REFUNDED_OTHER_POLITICAL_COMMITTEE_CONTRIBUTIONS = "refunded_other_political_committee_contributions";
  @SerializedName(SERIALIZED_NAME_REFUNDED_OTHER_POLITICAL_COMMITTEE_CONTRIBUTIONS)
  private BigDecimal refundedOtherPoliticalCommitteeContributions;

  public static final String SERIALIZED_NAME_REFUNDED_POLITICAL_PARTY_COMMITTEE_CONTRIBUTIONS = "refunded_political_party_committee_contributions";
  @SerializedName(SERIALIZED_NAME_REFUNDED_POLITICAL_PARTY_COMMITTEE_CONTRIBUTIONS)
  private BigDecimal refundedPoliticalPartyCommitteeContributions;

  public static final String SERIALIZED_NAME_REPAYMENTS_LOANS_MADE_BY_CANDIDATE = "repayments_loans_made_by_candidate";
  @SerializedName(SERIALIZED_NAME_REPAYMENTS_LOANS_MADE_BY_CANDIDATE)
  private BigDecimal repaymentsLoansMadeByCandidate;

  public static final String SERIALIZED_NAME_REPAYMENTS_OTHER_LOANS = "repayments_other_loans";
  @SerializedName(SERIALIZED_NAME_REPAYMENTS_OTHER_LOANS)
  private BigDecimal repaymentsOtherLoans;

  public static final String SERIALIZED_NAME_TOTAL_OFFSETS_TO_OPERATING_EXPENDITURES = "total_offsets_to_operating_expenditures";
  @SerializedName(SERIALIZED_NAME_TOTAL_OFFSETS_TO_OPERATING_EXPENDITURES)
  private BigDecimal totalOffsetsToOperatingExpenditures;

  public static final String SERIALIZED_NAME_TRANSACTION_COVERAGE_DATE = "transaction_coverage_date";
  @SerializedName(SERIALIZED_NAME_TRANSACTION_COVERAGE_DATE)
  private OffsetDateTime transactionCoverageDate;

  public static final String SERIALIZED_NAME_TRANSFERS_FROM_AFFILIATED_COMMITTEE = "transfers_from_affiliated_committee";
  @SerializedName(SERIALIZED_NAME_TRANSFERS_FROM_AFFILIATED_COMMITTEE)
  private BigDecimal transfersFromAffiliatedCommittee;

  public static final String SERIALIZED_NAME_TRANSFERS_TO_OTHER_AUTHORIZED_COMMITTEE = "transfers_to_other_authorized_committee";
  @SerializedName(SERIALIZED_NAME_TRANSFERS_TO_OTHER_AUTHORIZED_COMMITTEE)
  private BigDecimal transfersToOtherAuthorizedCommittee;

  public CandidateCommitteeTotalsPresidential() {
  }

  public CandidateCommitteeTotalsPresidential candidateContribution(BigDecimal candidateContribution) {
    this.candidateContribution = candidateContribution;
    return this;
  }

  /**
   * Get candidateContribution
   * @return candidateContribution
   */
  @javax.annotation.Nullable
  public BigDecimal getCandidateContribution() {
    return candidateContribution;
  }

  public void setCandidateContribution(BigDecimal candidateContribution) {
    this.candidateContribution = candidateContribution;
  }


  public CandidateCommitteeTotalsPresidential candidateElectionYear(Integer candidateElectionYear) {
    this.candidateElectionYear = candidateElectionYear;
    return this;
  }

  /**
   *  Filter records to only those that are applicable to a given two-year period. This cycle follows the traditional House election cycle and subdivides the presidential and Senate elections into comparable two-year blocks. The cycle begins with an odd year and is named for its ending, even year. 
   * @return candidateElectionYear
   */
  @javax.annotation.Nonnull
  public Integer getCandidateElectionYear() {
    return candidateElectionYear;
  }

  public void setCandidateElectionYear(Integer candidateElectionYear) {
    this.candidateElectionYear = candidateElectionYear;
  }


  public CandidateCommitteeTotalsPresidential candidateId(String candidateId) {
    this.candidateId = candidateId;
    return this;
  }

  /**
   *  A unique identifier assigned to each candidate registered with the FEC. If a person runs for several offices, that person will have separate candidate IDs for each office. First character indicates office - [P]residential, [H]ouse, [S]enate]. Second character is the last digit of the two-year period the ID was created. Third and fourth is the candidate state. Presidential IDs don&#39;t have state. Fifth and sixth is the district when the candidate first ran. This does not change if the candidate/member&#39;s district changes during re-districting. Presidential IDs don&#39;t have districts. The rest is sequence. 
   * @return candidateId
   */
  @javax.annotation.Nonnull
  public String getCandidateId() {
    return candidateId;
  }

  public void setCandidateId(String candidateId) {
    this.candidateId = candidateId;
  }


  public CandidateCommitteeTotalsPresidential contributionRefunds(BigDecimal contributionRefunds) {
    this.contributionRefunds = contributionRefunds;
    return this;
  }

  /**
   * Get contributionRefunds
   * @return contributionRefunds
   */
  @javax.annotation.Nullable
  public BigDecimal getContributionRefunds() {
    return contributionRefunds;
  }

  public void setContributionRefunds(BigDecimal contributionRefunds) {
    this.contributionRefunds = contributionRefunds;
  }


  public CandidateCommitteeTotalsPresidential contributions(BigDecimal contributions) {
    this.contributions = contributions;
    return this;
  }

  /**
   * Contribution
   * @return contributions
   */
  @javax.annotation.Nullable
  public BigDecimal getContributions() {
    return contributions;
  }

  public void setContributions(BigDecimal contributions) {
    this.contributions = contributions;
  }


  public CandidateCommitteeTotalsPresidential coverageEndDate(OffsetDateTime coverageEndDate) {
    this.coverageEndDate = coverageEndDate;
    return this;
  }

  /**
   * Get coverageEndDate
   * @return coverageEndDate
   */
  @javax.annotation.Nullable
  public OffsetDateTime getCoverageEndDate() {
    return coverageEndDate;
  }

  public void setCoverageEndDate(OffsetDateTime coverageEndDate) {
    this.coverageEndDate = coverageEndDate;
  }


  public CandidateCommitteeTotalsPresidential coverageStartDate(OffsetDateTime coverageStartDate) {
    this.coverageStartDate = coverageStartDate;
    return this;
  }

  /**
   * Get coverageStartDate
   * @return coverageStartDate
   */
  @javax.annotation.Nullable
  public OffsetDateTime getCoverageStartDate() {
    return coverageStartDate;
  }

  public void setCoverageStartDate(OffsetDateTime coverageStartDate) {
    this.coverageStartDate = coverageStartDate;
  }


  public CandidateCommitteeTotalsPresidential cycle(Integer cycle) {
    this.cycle = cycle;
    return this;
  }

  /**
   *  Filter records to only those that are applicable to a given two-year period. This cycle follows the traditional House election cycle and subdivides the presidential and Senate elections into comparable two-year blocks. The cycle begins with an odd year and is named for its ending, even year. 
   * @return cycle
   */
  @javax.annotation.Nonnull
  public Integer getCycle() {
    return cycle;
  }

  public void setCycle(Integer cycle) {
    this.cycle = cycle;
  }


  public CandidateCommitteeTotalsPresidential disbursements(BigDecimal disbursements) {
    this.disbursements = disbursements;
    return this;
  }

  /**
   * Disbursements
   * @return disbursements
   */
  @javax.annotation.Nullable
  public BigDecimal getDisbursements() {
    return disbursements;
  }

  public void setDisbursements(BigDecimal disbursements) {
    this.disbursements = disbursements;
  }


  public CandidateCommitteeTotalsPresidential electionFull(Boolean electionFull) {
    this.electionFull = electionFull;
    return this;
  }

  /**
   * Get electionFull
   * @return electionFull
   */
  @javax.annotation.Nonnull
  public Boolean getElectionFull() {
    return electionFull;
  }

  public void setElectionFull(Boolean electionFull) {
    this.electionFull = electionFull;
  }


  public CandidateCommitteeTotalsPresidential exemptLegalAccountingDisbursement(BigDecimal exemptLegalAccountingDisbursement) {
    this.exemptLegalAccountingDisbursement = exemptLegalAccountingDisbursement;
    return this;
  }

  /**
   * Get exemptLegalAccountingDisbursement
   * @return exemptLegalAccountingDisbursement
   */
  @javax.annotation.Nullable
  public BigDecimal getExemptLegalAccountingDisbursement() {
    return exemptLegalAccountingDisbursement;
  }

  public void setExemptLegalAccountingDisbursement(BigDecimal exemptLegalAccountingDisbursement) {
    this.exemptLegalAccountingDisbursement = exemptLegalAccountingDisbursement;
  }


  public CandidateCommitteeTotalsPresidential federalFunds(BigDecimal federalFunds) {
    this.federalFunds = federalFunds;
    return this;
  }

  /**
   * Get federalFunds
   * @return federalFunds
   */
  @javax.annotation.Nullable
  public BigDecimal getFederalFunds() {
    return federalFunds;
  }

  public void setFederalFunds(BigDecimal federalFunds) {
    this.federalFunds = federalFunds;
  }


  public CandidateCommitteeTotalsPresidential fundraisingDisbursements(BigDecimal fundraisingDisbursements) {
    this.fundraisingDisbursements = fundraisingDisbursements;
    return this;
  }

  /**
   * Get fundraisingDisbursements
   * @return fundraisingDisbursements
   */
  @javax.annotation.Nullable
  public BigDecimal getFundraisingDisbursements() {
    return fundraisingDisbursements;
  }

  public void setFundraisingDisbursements(BigDecimal fundraisingDisbursements) {
    this.fundraisingDisbursements = fundraisingDisbursements;
  }


  public CandidateCommitteeTotalsPresidential individualContributions(BigDecimal individualContributions) {
    this.individualContributions = individualContributions;
    return this;
  }

  /**
   * Get individualContributions
   * @return individualContributions
   */
  @javax.annotation.Nullable
  public BigDecimal getIndividualContributions() {
    return individualContributions;
  }

  public void setIndividualContributions(BigDecimal individualContributions) {
    this.individualContributions = individualContributions;
  }


  public CandidateCommitteeTotalsPresidential individualItemizedContributions(BigDecimal individualItemizedContributions) {
    this.individualItemizedContributions = individualItemizedContributions;
    return this;
  }

  /**
   * Individual itemized contributions are from individuals whose aggregate contributions total over $200 per individual per year. Be aware, some filers choose to itemize donations $200 or less.
   * @return individualItemizedContributions
   */
  @javax.annotation.Nullable
  public BigDecimal getIndividualItemizedContributions() {
    return individualItemizedContributions;
  }

  public void setIndividualItemizedContributions(BigDecimal individualItemizedContributions) {
    this.individualItemizedContributions = individualItemizedContributions;
  }


  public CandidateCommitteeTotalsPresidential individualUnitemizedContributions(BigDecimal individualUnitemizedContributions) {
    this.individualUnitemizedContributions = individualUnitemizedContributions;
    return this;
  }

  /**
   * Unitemized contributions are made individuals whose aggregate contributions total $200 or less per individual per year. Be aware, some filers choose to itemize donations $200 or less and in that case those donations will appear in the itemized total.
   * @return individualUnitemizedContributions
   */
  @javax.annotation.Nullable
  public BigDecimal getIndividualUnitemizedContributions() {
    return individualUnitemizedContributions;
  }

  public void setIndividualUnitemizedContributions(BigDecimal individualUnitemizedContributions) {
    this.individualUnitemizedContributions = individualUnitemizedContributions;
  }


  public CandidateCommitteeTotalsPresidential lastBeginningImageNumber(String lastBeginningImageNumber) {
    this.lastBeginningImageNumber = lastBeginningImageNumber;
    return this;
  }

  /**
   * Get lastBeginningImageNumber
   * @return lastBeginningImageNumber
   */
  @javax.annotation.Nullable
  public String getLastBeginningImageNumber() {
    return lastBeginningImageNumber;
  }

  public void setLastBeginningImageNumber(String lastBeginningImageNumber) {
    this.lastBeginningImageNumber = lastBeginningImageNumber;
  }


  public CandidateCommitteeTotalsPresidential lastCashOnHandEndPeriod(BigDecimal lastCashOnHandEndPeriod) {
    this.lastCashOnHandEndPeriod = lastCashOnHandEndPeriod;
    return this;
  }

  /**
   * Get lastCashOnHandEndPeriod
   * @return lastCashOnHandEndPeriod
   */
  @javax.annotation.Nullable
  public BigDecimal getLastCashOnHandEndPeriod() {
    return lastCashOnHandEndPeriod;
  }

  public void setLastCashOnHandEndPeriod(BigDecimal lastCashOnHandEndPeriod) {
    this.lastCashOnHandEndPeriod = lastCashOnHandEndPeriod;
  }


  public CandidateCommitteeTotalsPresidential lastDebtsOwedByCommittee(BigDecimal lastDebtsOwedByCommittee) {
    this.lastDebtsOwedByCommittee = lastDebtsOwedByCommittee;
    return this;
  }

  /**
   * Get lastDebtsOwedByCommittee
   * @return lastDebtsOwedByCommittee
   */
  @javax.annotation.Nullable
  public BigDecimal getLastDebtsOwedByCommittee() {
    return lastDebtsOwedByCommittee;
  }

  public void setLastDebtsOwedByCommittee(BigDecimal lastDebtsOwedByCommittee) {
    this.lastDebtsOwedByCommittee = lastDebtsOwedByCommittee;
  }


  public CandidateCommitteeTotalsPresidential lastDebtsOwedToCommittee(BigDecimal lastDebtsOwedToCommittee) {
    this.lastDebtsOwedToCommittee = lastDebtsOwedToCommittee;
    return this;
  }

  /**
   * Get lastDebtsOwedToCommittee
   * @return lastDebtsOwedToCommittee
   */
  @javax.annotation.Nullable
  public BigDecimal getLastDebtsOwedToCommittee() {
    return lastDebtsOwedToCommittee;
  }

  public void setLastDebtsOwedToCommittee(BigDecimal lastDebtsOwedToCommittee) {
    this.lastDebtsOwedToCommittee = lastDebtsOwedToCommittee;
  }


  public CandidateCommitteeTotalsPresidential lastReportTypeFull(String lastReportTypeFull) {
    this.lastReportTypeFull = lastReportTypeFull;
    return this;
  }

  /**
   * Get lastReportTypeFull
   * @return lastReportTypeFull
   */
  @javax.annotation.Nullable
  public String getLastReportTypeFull() {
    return lastReportTypeFull;
  }

  public void setLastReportTypeFull(String lastReportTypeFull) {
    this.lastReportTypeFull = lastReportTypeFull;
  }


  public CandidateCommitteeTotalsPresidential lastReportYear(Integer lastReportYear) {
    this.lastReportYear = lastReportYear;
    return this;
  }

  /**
   * Get lastReportYear
   * @return lastReportYear
   */
  @javax.annotation.Nullable
  public Integer getLastReportYear() {
    return lastReportYear;
  }

  public void setLastReportYear(Integer lastReportYear) {
    this.lastReportYear = lastReportYear;
  }


  public CandidateCommitteeTotalsPresidential loanRepaymentsMade(BigDecimal loanRepaymentsMade) {
    this.loanRepaymentsMade = loanRepaymentsMade;
    return this;
  }

  /**
   * Get loanRepaymentsMade
   * @return loanRepaymentsMade
   */
  @javax.annotation.Nullable
  public BigDecimal getLoanRepaymentsMade() {
    return loanRepaymentsMade;
  }

  public void setLoanRepaymentsMade(BigDecimal loanRepaymentsMade) {
    this.loanRepaymentsMade = loanRepaymentsMade;
  }


  public CandidateCommitteeTotalsPresidential loansReceived(BigDecimal loansReceived) {
    this.loansReceived = loansReceived;
    return this;
  }

  /**
   * Get loansReceived
   * @return loansReceived
   */
  @javax.annotation.Nullable
  public BigDecimal getLoansReceived() {
    return loansReceived;
  }

  public void setLoansReceived(BigDecimal loansReceived) {
    this.loansReceived = loansReceived;
  }


  public CandidateCommitteeTotalsPresidential loansReceivedFromCandidate(BigDecimal loansReceivedFromCandidate) {
    this.loansReceivedFromCandidate = loansReceivedFromCandidate;
    return this;
  }

  /**
   * Get loansReceivedFromCandidate
   * @return loansReceivedFromCandidate
   */
  @javax.annotation.Nullable
  public BigDecimal getLoansReceivedFromCandidate() {
    return loansReceivedFromCandidate;
  }

  public void setLoansReceivedFromCandidate(BigDecimal loansReceivedFromCandidate) {
    this.loansReceivedFromCandidate = loansReceivedFromCandidate;
  }


  public CandidateCommitteeTotalsPresidential netContributions(BigDecimal netContributions) {
    this.netContributions = netContributions;
    return this;
  }

  /**
   * Get netContributions
   * @return netContributions
   */
  @javax.annotation.Nullable
  public BigDecimal getNetContributions() {
    return netContributions;
  }

  public void setNetContributions(BigDecimal netContributions) {
    this.netContributions = netContributions;
  }


  public CandidateCommitteeTotalsPresidential netOperatingExpenditures(BigDecimal netOperatingExpenditures) {
    this.netOperatingExpenditures = netOperatingExpenditures;
    return this;
  }

  /**
   * Get netOperatingExpenditures
   * @return netOperatingExpenditures
   */
  @javax.annotation.Nullable
  public BigDecimal getNetOperatingExpenditures() {
    return netOperatingExpenditures;
  }

  public void setNetOperatingExpenditures(BigDecimal netOperatingExpenditures) {
    this.netOperatingExpenditures = netOperatingExpenditures;
  }


  public CandidateCommitteeTotalsPresidential offsetsToFundraisingExpenditures(BigDecimal offsetsToFundraisingExpenditures) {
    this.offsetsToFundraisingExpenditures = offsetsToFundraisingExpenditures;
    return this;
  }

  /**
   * Get offsetsToFundraisingExpenditures
   * @return offsetsToFundraisingExpenditures
   */
  @javax.annotation.Nullable
  public BigDecimal getOffsetsToFundraisingExpenditures() {
    return offsetsToFundraisingExpenditures;
  }

  public void setOffsetsToFundraisingExpenditures(BigDecimal offsetsToFundraisingExpenditures) {
    this.offsetsToFundraisingExpenditures = offsetsToFundraisingExpenditures;
  }


  public CandidateCommitteeTotalsPresidential offsetsToLegalAccounting(BigDecimal offsetsToLegalAccounting) {
    this.offsetsToLegalAccounting = offsetsToLegalAccounting;
    return this;
  }

  /**
   * Get offsetsToLegalAccounting
   * @return offsetsToLegalAccounting
   */
  @javax.annotation.Nullable
  public BigDecimal getOffsetsToLegalAccounting() {
    return offsetsToLegalAccounting;
  }

  public void setOffsetsToLegalAccounting(BigDecimal offsetsToLegalAccounting) {
    this.offsetsToLegalAccounting = offsetsToLegalAccounting;
  }


  public CandidateCommitteeTotalsPresidential offsetsToOperatingExpenditures(BigDecimal offsetsToOperatingExpenditures) {
    this.offsetsToOperatingExpenditures = offsetsToOperatingExpenditures;
    return this;
  }

  /**
   * Get offsetsToOperatingExpenditures
   * @return offsetsToOperatingExpenditures
   */
  @javax.annotation.Nullable
  public BigDecimal getOffsetsToOperatingExpenditures() {
    return offsetsToOperatingExpenditures;
  }

  public void setOffsetsToOperatingExpenditures(BigDecimal offsetsToOperatingExpenditures) {
    this.offsetsToOperatingExpenditures = offsetsToOperatingExpenditures;
  }


  public CandidateCommitteeTotalsPresidential operatingExpenditures(BigDecimal operatingExpenditures) {
    this.operatingExpenditures = operatingExpenditures;
    return this;
  }

  /**
   * Get operatingExpenditures
   * @return operatingExpenditures
   */
  @javax.annotation.Nullable
  public BigDecimal getOperatingExpenditures() {
    return operatingExpenditures;
  }

  public void setOperatingExpenditures(BigDecimal operatingExpenditures) {
    this.operatingExpenditures = operatingExpenditures;
  }


  public CandidateCommitteeTotalsPresidential otherDisbursements(BigDecimal otherDisbursements) {
    this.otherDisbursements = otherDisbursements;
    return this;
  }

  /**
   * Get otherDisbursements
   * @return otherDisbursements
   */
  @javax.annotation.Nullable
  public BigDecimal getOtherDisbursements() {
    return otherDisbursements;
  }

  public void setOtherDisbursements(BigDecimal otherDisbursements) {
    this.otherDisbursements = otherDisbursements;
  }


  public CandidateCommitteeTotalsPresidential otherLoansReceived(BigDecimal otherLoansReceived) {
    this.otherLoansReceived = otherLoansReceived;
    return this;
  }

  /**
   * Get otherLoansReceived
   * @return otherLoansReceived
   */
  @javax.annotation.Nullable
  public BigDecimal getOtherLoansReceived() {
    return otherLoansReceived;
  }

  public void setOtherLoansReceived(BigDecimal otherLoansReceived) {
    this.otherLoansReceived = otherLoansReceived;
  }


  public CandidateCommitteeTotalsPresidential otherPoliticalCommitteeContributions(BigDecimal otherPoliticalCommitteeContributions) {
    this.otherPoliticalCommitteeContributions = otherPoliticalCommitteeContributions;
    return this;
  }

  /**
   * Get otherPoliticalCommitteeContributions
   * @return otherPoliticalCommitteeContributions
   */
  @javax.annotation.Nullable
  public BigDecimal getOtherPoliticalCommitteeContributions() {
    return otherPoliticalCommitteeContributions;
  }

  public void setOtherPoliticalCommitteeContributions(BigDecimal otherPoliticalCommitteeContributions) {
    this.otherPoliticalCommitteeContributions = otherPoliticalCommitteeContributions;
  }


  public CandidateCommitteeTotalsPresidential otherReceipts(BigDecimal otherReceipts) {
    this.otherReceipts = otherReceipts;
    return this;
  }

  /**
   * Get otherReceipts
   * @return otherReceipts
   */
  @javax.annotation.Nullable
  public BigDecimal getOtherReceipts() {
    return otherReceipts;
  }

  public void setOtherReceipts(BigDecimal otherReceipts) {
    this.otherReceipts = otherReceipts;
  }


  public CandidateCommitteeTotalsPresidential politicalPartyCommitteeContributions(BigDecimal politicalPartyCommitteeContributions) {
    this.politicalPartyCommitteeContributions = politicalPartyCommitteeContributions;
    return this;
  }

  /**
   * Get politicalPartyCommitteeContributions
   * @return politicalPartyCommitteeContributions
   */
  @javax.annotation.Nullable
  public BigDecimal getPoliticalPartyCommitteeContributions() {
    return politicalPartyCommitteeContributions;
  }

  public void setPoliticalPartyCommitteeContributions(BigDecimal politicalPartyCommitteeContributions) {
    this.politicalPartyCommitteeContributions = politicalPartyCommitteeContributions;
  }


  public CandidateCommitteeTotalsPresidential receipts(BigDecimal receipts) {
    this.receipts = receipts;
    return this;
  }

  /**
   * Get receipts
   * @return receipts
   */
  @javax.annotation.Nullable
  public BigDecimal getReceipts() {
    return receipts;
  }

  public void setReceipts(BigDecimal receipts) {
    this.receipts = receipts;
  }


  public CandidateCommitteeTotalsPresidential refundedIndividualContributions(BigDecimal refundedIndividualContributions) {
    this.refundedIndividualContributions = refundedIndividualContributions;
    return this;
  }

  /**
   * Get refundedIndividualContributions
   * @return refundedIndividualContributions
   */
  @javax.annotation.Nullable
  public BigDecimal getRefundedIndividualContributions() {
    return refundedIndividualContributions;
  }

  public void setRefundedIndividualContributions(BigDecimal refundedIndividualContributions) {
    this.refundedIndividualContributions = refundedIndividualContributions;
  }


  public CandidateCommitteeTotalsPresidential refundedOtherPoliticalCommitteeContributions(BigDecimal refundedOtherPoliticalCommitteeContributions) {
    this.refundedOtherPoliticalCommitteeContributions = refundedOtherPoliticalCommitteeContributions;
    return this;
  }

  /**
   * Get refundedOtherPoliticalCommitteeContributions
   * @return refundedOtherPoliticalCommitteeContributions
   */
  @javax.annotation.Nullable
  public BigDecimal getRefundedOtherPoliticalCommitteeContributions() {
    return refundedOtherPoliticalCommitteeContributions;
  }

  public void setRefundedOtherPoliticalCommitteeContributions(BigDecimal refundedOtherPoliticalCommitteeContributions) {
    this.refundedOtherPoliticalCommitteeContributions = refundedOtherPoliticalCommitteeContributions;
  }


  public CandidateCommitteeTotalsPresidential refundedPoliticalPartyCommitteeContributions(BigDecimal refundedPoliticalPartyCommitteeContributions) {
    this.refundedPoliticalPartyCommitteeContributions = refundedPoliticalPartyCommitteeContributions;
    return this;
  }

  /**
   * Get refundedPoliticalPartyCommitteeContributions
   * @return refundedPoliticalPartyCommitteeContributions
   */
  @javax.annotation.Nullable
  public BigDecimal getRefundedPoliticalPartyCommitteeContributions() {
    return refundedPoliticalPartyCommitteeContributions;
  }

  public void setRefundedPoliticalPartyCommitteeContributions(BigDecimal refundedPoliticalPartyCommitteeContributions) {
    this.refundedPoliticalPartyCommitteeContributions = refundedPoliticalPartyCommitteeContributions;
  }


  public CandidateCommitteeTotalsPresidential repaymentsLoansMadeByCandidate(BigDecimal repaymentsLoansMadeByCandidate) {
    this.repaymentsLoansMadeByCandidate = repaymentsLoansMadeByCandidate;
    return this;
  }

  /**
   * Get repaymentsLoansMadeByCandidate
   * @return repaymentsLoansMadeByCandidate
   */
  @javax.annotation.Nullable
  public BigDecimal getRepaymentsLoansMadeByCandidate() {
    return repaymentsLoansMadeByCandidate;
  }

  public void setRepaymentsLoansMadeByCandidate(BigDecimal repaymentsLoansMadeByCandidate) {
    this.repaymentsLoansMadeByCandidate = repaymentsLoansMadeByCandidate;
  }


  public CandidateCommitteeTotalsPresidential repaymentsOtherLoans(BigDecimal repaymentsOtherLoans) {
    this.repaymentsOtherLoans = repaymentsOtherLoans;
    return this;
  }

  /**
   * Get repaymentsOtherLoans
   * @return repaymentsOtherLoans
   */
  @javax.annotation.Nullable
  public BigDecimal getRepaymentsOtherLoans() {
    return repaymentsOtherLoans;
  }

  public void setRepaymentsOtherLoans(BigDecimal repaymentsOtherLoans) {
    this.repaymentsOtherLoans = repaymentsOtherLoans;
  }


  public CandidateCommitteeTotalsPresidential totalOffsetsToOperatingExpenditures(BigDecimal totalOffsetsToOperatingExpenditures) {
    this.totalOffsetsToOperatingExpenditures = totalOffsetsToOperatingExpenditures;
    return this;
  }

  /**
   * Get totalOffsetsToOperatingExpenditures
   * @return totalOffsetsToOperatingExpenditures
   */
  @javax.annotation.Nullable
  public BigDecimal getTotalOffsetsToOperatingExpenditures() {
    return totalOffsetsToOperatingExpenditures;
  }

  public void setTotalOffsetsToOperatingExpenditures(BigDecimal totalOffsetsToOperatingExpenditures) {
    this.totalOffsetsToOperatingExpenditures = totalOffsetsToOperatingExpenditures;
  }


  public CandidateCommitteeTotalsPresidential transactionCoverageDate(OffsetDateTime transactionCoverageDate) {
    this.transactionCoverageDate = transactionCoverageDate;
    return this;
  }

  /**
   * Get transactionCoverageDate
   * @return transactionCoverageDate
   */
  @javax.annotation.Nullable
  public OffsetDateTime getTransactionCoverageDate() {
    return transactionCoverageDate;
  }

  public void setTransactionCoverageDate(OffsetDateTime transactionCoverageDate) {
    this.transactionCoverageDate = transactionCoverageDate;
  }


  public CandidateCommitteeTotalsPresidential transfersFromAffiliatedCommittee(BigDecimal transfersFromAffiliatedCommittee) {
    this.transfersFromAffiliatedCommittee = transfersFromAffiliatedCommittee;
    return this;
  }

  /**
   * Get transfersFromAffiliatedCommittee
   * @return transfersFromAffiliatedCommittee
   */
  @javax.annotation.Nullable
  public BigDecimal getTransfersFromAffiliatedCommittee() {
    return transfersFromAffiliatedCommittee;
  }

  public void setTransfersFromAffiliatedCommittee(BigDecimal transfersFromAffiliatedCommittee) {
    this.transfersFromAffiliatedCommittee = transfersFromAffiliatedCommittee;
  }


  public CandidateCommitteeTotalsPresidential transfersToOtherAuthorizedCommittee(BigDecimal transfersToOtherAuthorizedCommittee) {
    this.transfersToOtherAuthorizedCommittee = transfersToOtherAuthorizedCommittee;
    return this;
  }

  /**
   * Get transfersToOtherAuthorizedCommittee
   * @return transfersToOtherAuthorizedCommittee
   */
  @javax.annotation.Nullable
  public BigDecimal getTransfersToOtherAuthorizedCommittee() {
    return transfersToOtherAuthorizedCommittee;
  }

  public void setTransfersToOtherAuthorizedCommittee(BigDecimal transfersToOtherAuthorizedCommittee) {
    this.transfersToOtherAuthorizedCommittee = transfersToOtherAuthorizedCommittee;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CandidateCommitteeTotalsPresidential candidateCommitteeTotalsPresidential = (CandidateCommitteeTotalsPresidential) o;
    return Objects.equals(this.candidateContribution, candidateCommitteeTotalsPresidential.candidateContribution) &&
        Objects.equals(this.candidateElectionYear, candidateCommitteeTotalsPresidential.candidateElectionYear) &&
        Objects.equals(this.candidateId, candidateCommitteeTotalsPresidential.candidateId) &&
        Objects.equals(this.contributionRefunds, candidateCommitteeTotalsPresidential.contributionRefunds) &&
        Objects.equals(this.contributions, candidateCommitteeTotalsPresidential.contributions) &&
        Objects.equals(this.coverageEndDate, candidateCommitteeTotalsPresidential.coverageEndDate) &&
        Objects.equals(this.coverageStartDate, candidateCommitteeTotalsPresidential.coverageStartDate) &&
        Objects.equals(this.cycle, candidateCommitteeTotalsPresidential.cycle) &&
        Objects.equals(this.disbursements, candidateCommitteeTotalsPresidential.disbursements) &&
        Objects.equals(this.electionFull, candidateCommitteeTotalsPresidential.electionFull) &&
        Objects.equals(this.exemptLegalAccountingDisbursement, candidateCommitteeTotalsPresidential.exemptLegalAccountingDisbursement) &&
        Objects.equals(this.federalFunds, candidateCommitteeTotalsPresidential.federalFunds) &&
        Objects.equals(this.fundraisingDisbursements, candidateCommitteeTotalsPresidential.fundraisingDisbursements) &&
        Objects.equals(this.individualContributions, candidateCommitteeTotalsPresidential.individualContributions) &&
        Objects.equals(this.individualItemizedContributions, candidateCommitteeTotalsPresidential.individualItemizedContributions) &&
        Objects.equals(this.individualUnitemizedContributions, candidateCommitteeTotalsPresidential.individualUnitemizedContributions) &&
        Objects.equals(this.lastBeginningImageNumber, candidateCommitteeTotalsPresidential.lastBeginningImageNumber) &&
        Objects.equals(this.lastCashOnHandEndPeriod, candidateCommitteeTotalsPresidential.lastCashOnHandEndPeriod) &&
        Objects.equals(this.lastDebtsOwedByCommittee, candidateCommitteeTotalsPresidential.lastDebtsOwedByCommittee) &&
        Objects.equals(this.lastDebtsOwedToCommittee, candidateCommitteeTotalsPresidential.lastDebtsOwedToCommittee) &&
        Objects.equals(this.lastReportTypeFull, candidateCommitteeTotalsPresidential.lastReportTypeFull) &&
        Objects.equals(this.lastReportYear, candidateCommitteeTotalsPresidential.lastReportYear) &&
        Objects.equals(this.loanRepaymentsMade, candidateCommitteeTotalsPresidential.loanRepaymentsMade) &&
        Objects.equals(this.loansReceived, candidateCommitteeTotalsPresidential.loansReceived) &&
        Objects.equals(this.loansReceivedFromCandidate, candidateCommitteeTotalsPresidential.loansReceivedFromCandidate) &&
        Objects.equals(this.netContributions, candidateCommitteeTotalsPresidential.netContributions) &&
        Objects.equals(this.netOperatingExpenditures, candidateCommitteeTotalsPresidential.netOperatingExpenditures) &&
        Objects.equals(this.offsetsToFundraisingExpenditures, candidateCommitteeTotalsPresidential.offsetsToFundraisingExpenditures) &&
        Objects.equals(this.offsetsToLegalAccounting, candidateCommitteeTotalsPresidential.offsetsToLegalAccounting) &&
        Objects.equals(this.offsetsToOperatingExpenditures, candidateCommitteeTotalsPresidential.offsetsToOperatingExpenditures) &&
        Objects.equals(this.operatingExpenditures, candidateCommitteeTotalsPresidential.operatingExpenditures) &&
        Objects.equals(this.otherDisbursements, candidateCommitteeTotalsPresidential.otherDisbursements) &&
        Objects.equals(this.otherLoansReceived, candidateCommitteeTotalsPresidential.otherLoansReceived) &&
        Objects.equals(this.otherPoliticalCommitteeContributions, candidateCommitteeTotalsPresidential.otherPoliticalCommitteeContributions) &&
        Objects.equals(this.otherReceipts, candidateCommitteeTotalsPresidential.otherReceipts) &&
        Objects.equals(this.politicalPartyCommitteeContributions, candidateCommitteeTotalsPresidential.politicalPartyCommitteeContributions) &&
        Objects.equals(this.receipts, candidateCommitteeTotalsPresidential.receipts) &&
        Objects.equals(this.refundedIndividualContributions, candidateCommitteeTotalsPresidential.refundedIndividualContributions) &&
        Objects.equals(this.refundedOtherPoliticalCommitteeContributions, candidateCommitteeTotalsPresidential.refundedOtherPoliticalCommitteeContributions) &&
        Objects.equals(this.refundedPoliticalPartyCommitteeContributions, candidateCommitteeTotalsPresidential.refundedPoliticalPartyCommitteeContributions) &&
        Objects.equals(this.repaymentsLoansMadeByCandidate, candidateCommitteeTotalsPresidential.repaymentsLoansMadeByCandidate) &&
        Objects.equals(this.repaymentsOtherLoans, candidateCommitteeTotalsPresidential.repaymentsOtherLoans) &&
        Objects.equals(this.totalOffsetsToOperatingExpenditures, candidateCommitteeTotalsPresidential.totalOffsetsToOperatingExpenditures) &&
        Objects.equals(this.transactionCoverageDate, candidateCommitteeTotalsPresidential.transactionCoverageDate) &&
        Objects.equals(this.transfersFromAffiliatedCommittee, candidateCommitteeTotalsPresidential.transfersFromAffiliatedCommittee) &&
        Objects.equals(this.transfersToOtherAuthorizedCommittee, candidateCommitteeTotalsPresidential.transfersToOtherAuthorizedCommittee);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(candidateContribution, candidateElectionYear, candidateId, contributionRefunds, contributions, coverageEndDate, coverageStartDate, cycle, disbursements, electionFull, exemptLegalAccountingDisbursement, federalFunds, fundraisingDisbursements, individualContributions, individualItemizedContributions, individualUnitemizedContributions, lastBeginningImageNumber, lastCashOnHandEndPeriod, lastDebtsOwedByCommittee, lastDebtsOwedToCommittee, lastReportTypeFull, lastReportYear, loanRepaymentsMade, loansReceived, loansReceivedFromCandidate, netContributions, netOperatingExpenditures, offsetsToFundraisingExpenditures, offsetsToLegalAccounting, offsetsToOperatingExpenditures, operatingExpenditures, otherDisbursements, otherLoansReceived, otherPoliticalCommitteeContributions, otherReceipts, politicalPartyCommitteeContributions, receipts, refundedIndividualContributions, refundedOtherPoliticalCommitteeContributions, refundedPoliticalPartyCommitteeContributions, repaymentsLoansMadeByCandidate, repaymentsOtherLoans, totalOffsetsToOperatingExpenditures, transactionCoverageDate, transfersFromAffiliatedCommittee, transfersToOtherAuthorizedCommittee);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CandidateCommitteeTotalsPresidential {\n");
    sb.append("    candidateContribution: ").append(toIndentedString(candidateContribution)).append("\n");
    sb.append("    candidateElectionYear: ").append(toIndentedString(candidateElectionYear)).append("\n");
    sb.append("    candidateId: ").append(toIndentedString(candidateId)).append("\n");
    sb.append("    contributionRefunds: ").append(toIndentedString(contributionRefunds)).append("\n");
    sb.append("    contributions: ").append(toIndentedString(contributions)).append("\n");
    sb.append("    coverageEndDate: ").append(toIndentedString(coverageEndDate)).append("\n");
    sb.append("    coverageStartDate: ").append(toIndentedString(coverageStartDate)).append("\n");
    sb.append("    cycle: ").append(toIndentedString(cycle)).append("\n");
    sb.append("    disbursements: ").append(toIndentedString(disbursements)).append("\n");
    sb.append("    electionFull: ").append(toIndentedString(electionFull)).append("\n");
    sb.append("    exemptLegalAccountingDisbursement: ").append(toIndentedString(exemptLegalAccountingDisbursement)).append("\n");
    sb.append("    federalFunds: ").append(toIndentedString(federalFunds)).append("\n");
    sb.append("    fundraisingDisbursements: ").append(toIndentedString(fundraisingDisbursements)).append("\n");
    sb.append("    individualContributions: ").append(toIndentedString(individualContributions)).append("\n");
    sb.append("    individualItemizedContributions: ").append(toIndentedString(individualItemizedContributions)).append("\n");
    sb.append("    individualUnitemizedContributions: ").append(toIndentedString(individualUnitemizedContributions)).append("\n");
    sb.append("    lastBeginningImageNumber: ").append(toIndentedString(lastBeginningImageNumber)).append("\n");
    sb.append("    lastCashOnHandEndPeriod: ").append(toIndentedString(lastCashOnHandEndPeriod)).append("\n");
    sb.append("    lastDebtsOwedByCommittee: ").append(toIndentedString(lastDebtsOwedByCommittee)).append("\n");
    sb.append("    lastDebtsOwedToCommittee: ").append(toIndentedString(lastDebtsOwedToCommittee)).append("\n");
    sb.append("    lastReportTypeFull: ").append(toIndentedString(lastReportTypeFull)).append("\n");
    sb.append("    lastReportYear: ").append(toIndentedString(lastReportYear)).append("\n");
    sb.append("    loanRepaymentsMade: ").append(toIndentedString(loanRepaymentsMade)).append("\n");
    sb.append("    loansReceived: ").append(toIndentedString(loansReceived)).append("\n");
    sb.append("    loansReceivedFromCandidate: ").append(toIndentedString(loansReceivedFromCandidate)).append("\n");
    sb.append("    netContributions: ").append(toIndentedString(netContributions)).append("\n");
    sb.append("    netOperatingExpenditures: ").append(toIndentedString(netOperatingExpenditures)).append("\n");
    sb.append("    offsetsToFundraisingExpenditures: ").append(toIndentedString(offsetsToFundraisingExpenditures)).append("\n");
    sb.append("    offsetsToLegalAccounting: ").append(toIndentedString(offsetsToLegalAccounting)).append("\n");
    sb.append("    offsetsToOperatingExpenditures: ").append(toIndentedString(offsetsToOperatingExpenditures)).append("\n");
    sb.append("    operatingExpenditures: ").append(toIndentedString(operatingExpenditures)).append("\n");
    sb.append("    otherDisbursements: ").append(toIndentedString(otherDisbursements)).append("\n");
    sb.append("    otherLoansReceived: ").append(toIndentedString(otherLoansReceived)).append("\n");
    sb.append("    otherPoliticalCommitteeContributions: ").append(toIndentedString(otherPoliticalCommitteeContributions)).append("\n");
    sb.append("    otherReceipts: ").append(toIndentedString(otherReceipts)).append("\n");
    sb.append("    politicalPartyCommitteeContributions: ").append(toIndentedString(politicalPartyCommitteeContributions)).append("\n");
    sb.append("    receipts: ").append(toIndentedString(receipts)).append("\n");
    sb.append("    refundedIndividualContributions: ").append(toIndentedString(refundedIndividualContributions)).append("\n");
    sb.append("    refundedOtherPoliticalCommitteeContributions: ").append(toIndentedString(refundedOtherPoliticalCommitteeContributions)).append("\n");
    sb.append("    refundedPoliticalPartyCommitteeContributions: ").append(toIndentedString(refundedPoliticalPartyCommitteeContributions)).append("\n");
    sb.append("    repaymentsLoansMadeByCandidate: ").append(toIndentedString(repaymentsLoansMadeByCandidate)).append("\n");
    sb.append("    repaymentsOtherLoans: ").append(toIndentedString(repaymentsOtherLoans)).append("\n");
    sb.append("    totalOffsetsToOperatingExpenditures: ").append(toIndentedString(totalOffsetsToOperatingExpenditures)).append("\n");
    sb.append("    transactionCoverageDate: ").append(toIndentedString(transactionCoverageDate)).append("\n");
    sb.append("    transfersFromAffiliatedCommittee: ").append(toIndentedString(transfersFromAffiliatedCommittee)).append("\n");
    sb.append("    transfersToOtherAuthorizedCommittee: ").append(toIndentedString(transfersToOtherAuthorizedCommittee)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("candidate_contribution");
    openapiFields.add("candidate_election_year");
    openapiFields.add("candidate_id");
    openapiFields.add("contribution_refunds");
    openapiFields.add("contributions");
    openapiFields.add("coverage_end_date");
    openapiFields.add("coverage_start_date");
    openapiFields.add("cycle");
    openapiFields.add("disbursements");
    openapiFields.add("election_full");
    openapiFields.add("exempt_legal_accounting_disbursement");
    openapiFields.add("federal_funds");
    openapiFields.add("fundraising_disbursements");
    openapiFields.add("individual_contributions");
    openapiFields.add("individual_itemized_contributions");
    openapiFields.add("individual_unitemized_contributions");
    openapiFields.add("last_beginning_image_number");
    openapiFields.add("last_cash_on_hand_end_period");
    openapiFields.add("last_debts_owed_by_committee");
    openapiFields.add("last_debts_owed_to_committee");
    openapiFields.add("last_report_type_full");
    openapiFields.add("last_report_year");
    openapiFields.add("loan_repayments_made");
    openapiFields.add("loans_received");
    openapiFields.add("loans_received_from_candidate");
    openapiFields.add("net_contributions");
    openapiFields.add("net_operating_expenditures");
    openapiFields.add("offsets_to_fundraising_expenditures");
    openapiFields.add("offsets_to_legal_accounting");
    openapiFields.add("offsets_to_operating_expenditures");
    openapiFields.add("operating_expenditures");
    openapiFields.add("other_disbursements");
    openapiFields.add("other_loans_received");
    openapiFields.add("other_political_committee_contributions");
    openapiFields.add("other_receipts");
    openapiFields.add("political_party_committee_contributions");
    openapiFields.add("receipts");
    openapiFields.add("refunded_individual_contributions");
    openapiFields.add("refunded_other_political_committee_contributions");
    openapiFields.add("refunded_political_party_committee_contributions");
    openapiFields.add("repayments_loans_made_by_candidate");
    openapiFields.add("repayments_other_loans");
    openapiFields.add("total_offsets_to_operating_expenditures");
    openapiFields.add("transaction_coverage_date");
    openapiFields.add("transfers_from_affiliated_committee");
    openapiFields.add("transfers_to_other_authorized_committee");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("candidate_election_year");
    openapiRequiredFields.add("candidate_id");
    openapiRequiredFields.add("cycle");
    openapiRequiredFields.add("election_full");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to CandidateCommitteeTotalsPresidential
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!CandidateCommitteeTotalsPresidential.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CandidateCommitteeTotalsPresidential is not found in the empty JSON string", CandidateCommitteeTotalsPresidential.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!CandidateCommitteeTotalsPresidential.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CandidateCommitteeTotalsPresidential` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : CandidateCommitteeTotalsPresidential.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("candidate_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `candidate_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("candidate_id").toString()));
      }
      if ((jsonObj.get("last_beginning_image_number") != null && !jsonObj.get("last_beginning_image_number").isJsonNull()) && !jsonObj.get("last_beginning_image_number").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `last_beginning_image_number` to be a primitive type in the JSON string but got `%s`", jsonObj.get("last_beginning_image_number").toString()));
      }
      if ((jsonObj.get("last_report_type_full") != null && !jsonObj.get("last_report_type_full").isJsonNull()) && !jsonObj.get("last_report_type_full").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `last_report_type_full` to be a primitive type in the JSON string but got `%s`", jsonObj.get("last_report_type_full").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CandidateCommitteeTotalsPresidential.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CandidateCommitteeTotalsPresidential' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CandidateCommitteeTotalsPresidential> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CandidateCommitteeTotalsPresidential.class));

       return (TypeAdapter<T>) new TypeAdapter<CandidateCommitteeTotalsPresidential>() {
           @Override
           public void write(JsonWriter out, CandidateCommitteeTotalsPresidential value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CandidateCommitteeTotalsPresidential read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of CandidateCommitteeTotalsPresidential given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of CandidateCommitteeTotalsPresidential
   * @throws IOException if the JSON string is invalid with respect to CandidateCommitteeTotalsPresidential
   */
  public static CandidateCommitteeTotalsPresidential fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CandidateCommitteeTotalsPresidential.class);
  }

  /**
   * Convert an instance of CandidateCommitteeTotalsPresidential to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

