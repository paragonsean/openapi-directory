/*
 * OpenFEC
 * This application programming interface (API) allows you to explore the way candidates and committees fund their campaigns.    The Federal Election Commission (FEC) API is a RESTful web service supporting full-text and field-specific searches on FEC data. [Bulk downloads](https://www.fec.gov/data/advanced/?tab=bulk-data) are available on the current site. Information is tied to the underlying forms by file ID and image ID. Data is updated nightly.    There are a lot of data, and a good place to start is to use search to find interesting candidates and committees. Then, you can use their IDs to find report or line item details with the other endpoints. If you are interested in individual donors, check out contributor information in the `/schedule_a/` endpoints.    <b class=\"body\" id=\"getting_started_head\">Getting started with the openFEC API</b><br>    If you would like to use the FEC's API programmatically, you can sign up for your own API key using our form. Alternatively, you can still try out our API without an API key by using the web interface and using DEMO_KEY. Note that when you use the openFEC API you are subject to the [Terms of Service](https://github.com/fecgov/FEC/blob/master/TERMS-OF-SERVICE.md) and [Acceptable Use policy](https://github.com/fecgov/FEC/blob/master/ACCEPTABLE-USE-POLICY.md).    Signing up for an API key will enable you to place up to 1,000 calls an hour. Each call is limited to 100 results per page. You can email questions, comments or a request to get a key for 7,200 calls an hour (120 calls per minute) to <a href=\"mailto:APIinfo@fec.gov\">APIinfo@fec.gov</a>. You can also ask questions and discuss the data in a community led [group](https://groups.google.com/forum/#!forum/fec-data).    The model definitions and schema are available at [/swagger](/swagger/). This is useful for making wrappers and exploring the data.    A few restrictions limit the way you can use FEC data. For example, you canâ€™t use contributor lists for commercial purposes or to solicit donations. [Learn more here](https://www.fec.gov/updates/sale-or-use-contributor-information/).    [Inspect our source code](https://github.com/fecgov/openFEC). We welcome issues and pull requests!    <p><br></p> <h2 class=\"title\" id=\"signup_head\">Sign up for an API key</h2> <div id=\"apidatagov_signup\">Loading signup form...</div>
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.CandidateDetailPage;
import org.openapitools.client.model.CandidateHistoryPage;
import org.openapitools.client.model.CandidateHistoryTotalPage;
import org.openapitools.client.model.CandidatePage;
import org.openapitools.client.model.CandidateTotalAggregatePage;
import org.openapitools.client.model.CommitteeTotalsPage;
import java.time.LocalDate;
import org.openapitools.client.model.TotalByOfficeByPartyPage;
import org.openapitools.client.model.TotalByOfficePage;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class CandidateApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public CandidateApi() {
        this(Configuration.getDefaultApiClient());
    }

    public CandidateApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for candidateCandidateIdGet
     * @param apiKey  API key for https://api.data.gov. Get one at https://api.data.gov/signup.  (required)
     * @param candidateId  A unique identifier assigned to each candidate registered with the FEC. If a person runs for several offices, that person will have separate candidate IDs for each office. First character indicates office - [P]residential, [H]ouse, [S]enate]. Second character is the last digit of the two-year period the ID was created. Third and fourth is the candidate state. Presidential IDs don&#39;t have state. Fifth and sixth is the district when the candidate first ran. This does not change if the candidate/member&#39;s district changes during re-districting. Presidential IDs don&#39;t have districts. The rest is sequence.  (required)
     * @param incumbentChallenge One-letter code (&#39;I&#39;, &#39;C&#39;, &#39;O&#39;) explaining if the candidate is an incumbent, a challenger, or if the seat is open. (optional)
     * @param cycle  Two-year election cycle in which a candidate runs for office. Calculated from Form 2. The cycle begins with an odd year and is named for its ending, even year. This cycle follows the traditional house election cycle and subdivides the presidential and Senate elections into comparable two-year blocks. To retrieve data for the entire four years of a presidential term or six years of a senatorial term, you will need the &#x60;election_full&#x60; flag.  (optional)
     * @param sortNullOnly Toggle that filters out all rows having sort column that is non-null (optional, default to false)
     * @param federalFundsFlag A boolean the describes if a presidential candidate has accepted federal funds. The flag will be false for House and Senate candidates. (optional)
     * @param sortHideNull Hide null values on sorted column(s). (optional, default to false)
     * @param name Name (candidate or committee) to search for. Alias for &#39;q&#39;. (optional)
     * @param perPage The number of results returned per page. Defaults to 20. (optional, default to 20)
     * @param electionYear Year of election (optional)
     * @param office Federal office candidate runs for: H, S or P (optional)
     * @param sort Provide a field to sort by. Use &#x60;-&#x60; for descending order.  (optional, default to name)
     * @param candidateStatus One-letter code explaining if the candidate is:         - C present candidate         - F future candidate         - N not yet a candidate         - P prior candidate  (optional)
     * @param district Two-digit US House distirict of the office the candidate is running for. Presidential, Senate and House at-large candidates will have District 00. (optional)
     * @param hasRaisedFunds A boolean that describes if a candidate&#39;s committee has ever received any receipts for their campaign for this particular office. (Candidates have separate candidate IDs for each office.) (optional)
     * @param party Three-letter code for the party affiliated with a candidate or committee. For example, DEM for Democratic Party and REP for Republican Party. (optional)
     * @param sortNullsLast Toggle that sorts null values last (optional, default to false)
     * @param page For paginating through results, starting at page 1 (optional, default to 1)
     * @param state US state or territory where a candidate runs for office (optional)
     * @param year Retrieve records pertaining to a particular election year. The list of election years is based on a candidate filing a statement of candidacy (F2) for that year. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call candidateCandidateIdGetCall(String apiKey, String candidateId, List<String> incumbentChallenge, List<Integer> cycle, Boolean sortNullOnly, Boolean federalFundsFlag, Boolean sortHideNull, List<String> name, Integer perPage, List<Integer> electionYear, List<String> office, String sort, List<String> candidateStatus, List<String> district, Boolean hasRaisedFunds, List<String> party, Boolean sortNullsLast, Integer page, List<String> state, String year, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/candidate/{candidate_id}/"
            .replace("{" + "candidate_id" + "}", localVarApiClient.escapeString(candidateId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (incumbentChallenge != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "incumbent_challenge", incumbentChallenge));
        }

        if (cycle != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "cycle", cycle));
        }

        if (sortNullOnly != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort_null_only", sortNullOnly));
        }

        if (federalFundsFlag != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("federal_funds_flag", federalFundsFlag));
        }

        if (sortHideNull != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort_hide_null", sortHideNull));
        }

        if (name != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "name", name));
        }

        if (perPage != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("per_page", perPage));
        }

        if (electionYear != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "election_year", electionYear));
        }

        if (office != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "office", office));
        }

        if (sort != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort", sort));
        }

        if (candidateStatus != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "candidate_status", candidateStatus));
        }

        if (district != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "district", district));
        }

        if (apiKey != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api_key", apiKey));
        }

        if (hasRaisedFunds != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("has_raised_funds", hasRaisedFunds));
        }

        if (party != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "party", party));
        }

        if (sortNullsLast != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort_nulls_last", sortNullsLast));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (state != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "state", state));
        }

        if (year != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("year", year));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKeyHeaderAuth", "ApiKeyQueryAuth", "apiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call candidateCandidateIdGetValidateBeforeCall(String apiKey, String candidateId, List<String> incumbentChallenge, List<Integer> cycle, Boolean sortNullOnly, Boolean federalFundsFlag, Boolean sortHideNull, List<String> name, Integer perPage, List<Integer> electionYear, List<String> office, String sort, List<String> candidateStatus, List<String> district, Boolean hasRaisedFunds, List<String> party, Boolean sortNullsLast, Integer page, List<String> state, String year, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'apiKey' is set
        if (apiKey == null) {
            throw new ApiException("Missing the required parameter 'apiKey' when calling candidateCandidateIdGet(Async)");
        }

        // verify the required parameter 'candidateId' is set
        if (candidateId == null) {
            throw new ApiException("Missing the required parameter 'candidateId' when calling candidateCandidateIdGet(Async)");
        }

        return candidateCandidateIdGetCall(apiKey, candidateId, incumbentChallenge, cycle, sortNullOnly, federalFundsFlag, sortHideNull, name, perPage, electionYear, office, sort, candidateStatus, district, hasRaisedFunds, party, sortNullsLast, page, state, year, _callback);

    }

    /**
     * 
     *  This endpoint is useful for finding detailed information about a particular candidate. Use the &#x60;candidate_id&#x60; to find the most recent information about that candidate. 
     * @param apiKey  API key for https://api.data.gov. Get one at https://api.data.gov/signup.  (required)
     * @param candidateId  A unique identifier assigned to each candidate registered with the FEC. If a person runs for several offices, that person will have separate candidate IDs for each office. First character indicates office - [P]residential, [H]ouse, [S]enate]. Second character is the last digit of the two-year period the ID was created. Third and fourth is the candidate state. Presidential IDs don&#39;t have state. Fifth and sixth is the district when the candidate first ran. This does not change if the candidate/member&#39;s district changes during re-districting. Presidential IDs don&#39;t have districts. The rest is sequence.  (required)
     * @param incumbentChallenge One-letter code (&#39;I&#39;, &#39;C&#39;, &#39;O&#39;) explaining if the candidate is an incumbent, a challenger, or if the seat is open. (optional)
     * @param cycle  Two-year election cycle in which a candidate runs for office. Calculated from Form 2. The cycle begins with an odd year and is named for its ending, even year. This cycle follows the traditional house election cycle and subdivides the presidential and Senate elections into comparable two-year blocks. To retrieve data for the entire four years of a presidential term or six years of a senatorial term, you will need the &#x60;election_full&#x60; flag.  (optional)
     * @param sortNullOnly Toggle that filters out all rows having sort column that is non-null (optional, default to false)
     * @param federalFundsFlag A boolean the describes if a presidential candidate has accepted federal funds. The flag will be false for House and Senate candidates. (optional)
     * @param sortHideNull Hide null values on sorted column(s). (optional, default to false)
     * @param name Name (candidate or committee) to search for. Alias for &#39;q&#39;. (optional)
     * @param perPage The number of results returned per page. Defaults to 20. (optional, default to 20)
     * @param electionYear Year of election (optional)
     * @param office Federal office candidate runs for: H, S or P (optional)
     * @param sort Provide a field to sort by. Use &#x60;-&#x60; for descending order.  (optional, default to name)
     * @param candidateStatus One-letter code explaining if the candidate is:         - C present candidate         - F future candidate         - N not yet a candidate         - P prior candidate  (optional)
     * @param district Two-digit US House distirict of the office the candidate is running for. Presidential, Senate and House at-large candidates will have District 00. (optional)
     * @param hasRaisedFunds A boolean that describes if a candidate&#39;s committee has ever received any receipts for their campaign for this particular office. (Candidates have separate candidate IDs for each office.) (optional)
     * @param party Three-letter code for the party affiliated with a candidate or committee. For example, DEM for Democratic Party and REP for Republican Party. (optional)
     * @param sortNullsLast Toggle that sorts null values last (optional, default to false)
     * @param page For paginating through results, starting at page 1 (optional, default to 1)
     * @param state US state or territory where a candidate runs for office (optional)
     * @param year Retrieve records pertaining to a particular election year. The list of election years is based on a candidate filing a statement of candidacy (F2) for that year. (optional)
     * @return CandidateDetailPage
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public CandidateDetailPage candidateCandidateIdGet(String apiKey, String candidateId, List<String> incumbentChallenge, List<Integer> cycle, Boolean sortNullOnly, Boolean federalFundsFlag, Boolean sortHideNull, List<String> name, Integer perPage, List<Integer> electionYear, List<String> office, String sort, List<String> candidateStatus, List<String> district, Boolean hasRaisedFunds, List<String> party, Boolean sortNullsLast, Integer page, List<String> state, String year) throws ApiException {
        ApiResponse<CandidateDetailPage> localVarResp = candidateCandidateIdGetWithHttpInfo(apiKey, candidateId, incumbentChallenge, cycle, sortNullOnly, federalFundsFlag, sortHideNull, name, perPage, electionYear, office, sort, candidateStatus, district, hasRaisedFunds, party, sortNullsLast, page, state, year);
        return localVarResp.getData();
    }

    /**
     * 
     *  This endpoint is useful for finding detailed information about a particular candidate. Use the &#x60;candidate_id&#x60; to find the most recent information about that candidate. 
     * @param apiKey  API key for https://api.data.gov. Get one at https://api.data.gov/signup.  (required)
     * @param candidateId  A unique identifier assigned to each candidate registered with the FEC. If a person runs for several offices, that person will have separate candidate IDs for each office. First character indicates office - [P]residential, [H]ouse, [S]enate]. Second character is the last digit of the two-year period the ID was created. Third and fourth is the candidate state. Presidential IDs don&#39;t have state. Fifth and sixth is the district when the candidate first ran. This does not change if the candidate/member&#39;s district changes during re-districting. Presidential IDs don&#39;t have districts. The rest is sequence.  (required)
     * @param incumbentChallenge One-letter code (&#39;I&#39;, &#39;C&#39;, &#39;O&#39;) explaining if the candidate is an incumbent, a challenger, or if the seat is open. (optional)
     * @param cycle  Two-year election cycle in which a candidate runs for office. Calculated from Form 2. The cycle begins with an odd year and is named for its ending, even year. This cycle follows the traditional house election cycle and subdivides the presidential and Senate elections into comparable two-year blocks. To retrieve data for the entire four years of a presidential term or six years of a senatorial term, you will need the &#x60;election_full&#x60; flag.  (optional)
     * @param sortNullOnly Toggle that filters out all rows having sort column that is non-null (optional, default to false)
     * @param federalFundsFlag A boolean the describes if a presidential candidate has accepted federal funds. The flag will be false for House and Senate candidates. (optional)
     * @param sortHideNull Hide null values on sorted column(s). (optional, default to false)
     * @param name Name (candidate or committee) to search for. Alias for &#39;q&#39;. (optional)
     * @param perPage The number of results returned per page. Defaults to 20. (optional, default to 20)
     * @param electionYear Year of election (optional)
     * @param office Federal office candidate runs for: H, S or P (optional)
     * @param sort Provide a field to sort by. Use &#x60;-&#x60; for descending order.  (optional, default to name)
     * @param candidateStatus One-letter code explaining if the candidate is:         - C present candidate         - F future candidate         - N not yet a candidate         - P prior candidate  (optional)
     * @param district Two-digit US House distirict of the office the candidate is running for. Presidential, Senate and House at-large candidates will have District 00. (optional)
     * @param hasRaisedFunds A boolean that describes if a candidate&#39;s committee has ever received any receipts for their campaign for this particular office. (Candidates have separate candidate IDs for each office.) (optional)
     * @param party Three-letter code for the party affiliated with a candidate or committee. For example, DEM for Democratic Party and REP for Republican Party. (optional)
     * @param sortNullsLast Toggle that sorts null values last (optional, default to false)
     * @param page For paginating through results, starting at page 1 (optional, default to 1)
     * @param state US state or territory where a candidate runs for office (optional)
     * @param year Retrieve records pertaining to a particular election year. The list of election years is based on a candidate filing a statement of candidacy (F2) for that year. (optional)
     * @return ApiResponse&lt;CandidateDetailPage&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CandidateDetailPage> candidateCandidateIdGetWithHttpInfo(String apiKey, String candidateId, List<String> incumbentChallenge, List<Integer> cycle, Boolean sortNullOnly, Boolean federalFundsFlag, Boolean sortHideNull, List<String> name, Integer perPage, List<Integer> electionYear, List<String> office, String sort, List<String> candidateStatus, List<String> district, Boolean hasRaisedFunds, List<String> party, Boolean sortNullsLast, Integer page, List<String> state, String year) throws ApiException {
        okhttp3.Call localVarCall = candidateCandidateIdGetValidateBeforeCall(apiKey, candidateId, incumbentChallenge, cycle, sortNullOnly, federalFundsFlag, sortHideNull, name, perPage, electionYear, office, sort, candidateStatus, district, hasRaisedFunds, party, sortNullsLast, page, state, year, null);
        Type localVarReturnType = new TypeToken<CandidateDetailPage>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     *  This endpoint is useful for finding detailed information about a particular candidate. Use the &#x60;candidate_id&#x60; to find the most recent information about that candidate. 
     * @param apiKey  API key for https://api.data.gov. Get one at https://api.data.gov/signup.  (required)
     * @param candidateId  A unique identifier assigned to each candidate registered with the FEC. If a person runs for several offices, that person will have separate candidate IDs for each office. First character indicates office - [P]residential, [H]ouse, [S]enate]. Second character is the last digit of the two-year period the ID was created. Third and fourth is the candidate state. Presidential IDs don&#39;t have state. Fifth and sixth is the district when the candidate first ran. This does not change if the candidate/member&#39;s district changes during re-districting. Presidential IDs don&#39;t have districts. The rest is sequence.  (required)
     * @param incumbentChallenge One-letter code (&#39;I&#39;, &#39;C&#39;, &#39;O&#39;) explaining if the candidate is an incumbent, a challenger, or if the seat is open. (optional)
     * @param cycle  Two-year election cycle in which a candidate runs for office. Calculated from Form 2. The cycle begins with an odd year and is named for its ending, even year. This cycle follows the traditional house election cycle and subdivides the presidential and Senate elections into comparable two-year blocks. To retrieve data for the entire four years of a presidential term or six years of a senatorial term, you will need the &#x60;election_full&#x60; flag.  (optional)
     * @param sortNullOnly Toggle that filters out all rows having sort column that is non-null (optional, default to false)
     * @param federalFundsFlag A boolean the describes if a presidential candidate has accepted federal funds. The flag will be false for House and Senate candidates. (optional)
     * @param sortHideNull Hide null values on sorted column(s). (optional, default to false)
     * @param name Name (candidate or committee) to search for. Alias for &#39;q&#39;. (optional)
     * @param perPage The number of results returned per page. Defaults to 20. (optional, default to 20)
     * @param electionYear Year of election (optional)
     * @param office Federal office candidate runs for: H, S or P (optional)
     * @param sort Provide a field to sort by. Use &#x60;-&#x60; for descending order.  (optional, default to name)
     * @param candidateStatus One-letter code explaining if the candidate is:         - C present candidate         - F future candidate         - N not yet a candidate         - P prior candidate  (optional)
     * @param district Two-digit US House distirict of the office the candidate is running for. Presidential, Senate and House at-large candidates will have District 00. (optional)
     * @param hasRaisedFunds A boolean that describes if a candidate&#39;s committee has ever received any receipts for their campaign for this particular office. (Candidates have separate candidate IDs for each office.) (optional)
     * @param party Three-letter code for the party affiliated with a candidate or committee. For example, DEM for Democratic Party and REP for Republican Party. (optional)
     * @param sortNullsLast Toggle that sorts null values last (optional, default to false)
     * @param page For paginating through results, starting at page 1 (optional, default to 1)
     * @param state US state or territory where a candidate runs for office (optional)
     * @param year Retrieve records pertaining to a particular election year. The list of election years is based on a candidate filing a statement of candidacy (F2) for that year. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call candidateCandidateIdGetAsync(String apiKey, String candidateId, List<String> incumbentChallenge, List<Integer> cycle, Boolean sortNullOnly, Boolean federalFundsFlag, Boolean sortHideNull, List<String> name, Integer perPage, List<Integer> electionYear, List<String> office, String sort, List<String> candidateStatus, List<String> district, Boolean hasRaisedFunds, List<String> party, Boolean sortNullsLast, Integer page, List<String> state, String year, final ApiCallback<CandidateDetailPage> _callback) throws ApiException {

        okhttp3.Call localVarCall = candidateCandidateIdGetValidateBeforeCall(apiKey, candidateId, incumbentChallenge, cycle, sortNullOnly, federalFundsFlag, sortHideNull, name, perPage, electionYear, office, sort, candidateStatus, district, hasRaisedFunds, party, sortNullsLast, page, state, year, _callback);
        Type localVarReturnType = new TypeToken<CandidateDetailPage>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for candidateCandidateIdHistoryCycleGet
     * @param apiKey  API key for https://api.data.gov. Get one at https://api.data.gov/signup.  (required)
     * @param cycle  Two-year election cycle in which a candidate runs for office. Calculated from Form 2. The cycle begins with an odd year and is named for its ending, even year. This cycle follows the traditional house election cycle and subdivides the presidential and Senate elections into comparable two-year blocks. To retrieve data for the entire four years of a presidential term or six years of a senatorial term, you will need the &#x60;election_full&#x60; flag.  (required)
     * @param candidateId  A unique identifier assigned to each candidate registered with the FEC. If a person runs for several offices, that person will have separate candidate IDs for each office. First character indicates office - [P]residential, [H]ouse, [S]enate]. Second character is the last digit of the two-year period the ID was created. Third and fourth is the candidate state. Presidential IDs don&#39;t have state. Fifth and sixth is the district when the candidate first ran. This does not change if the candidate/member&#39;s district changes during re-districting. Presidential IDs don&#39;t have districts. The rest is sequence.  (required)
     * @param page For paginating through results, starting at page 1 (optional, default to 1)
     * @param sortHideNull Hide null values on sorted column(s). (optional, default to false)
     * @param electionFull &#x60;True&#x60; indicates that full election period of a candidate. &#x60;False&#x60; indicates that two year election cycle. (optional, default to true)
     * @param perPage The number of results returned per page. Defaults to 20. (optional, default to 20)
     * @param sortNullOnly Toggle that filters out all rows having sort column that is non-null (optional, default to false)
     * @param sort Provide a field to sort by. Use &#x60;-&#x60; for descending order.  (optional, default to -two_year_period)
     * @param sortNullsLast Toggle that sorts null values last (optional, default to false)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call candidateCandidateIdHistoryCycleGetCall(String apiKey, Integer cycle, String candidateId, Integer page, Boolean sortHideNull, Boolean electionFull, Integer perPage, Boolean sortNullOnly, String sort, Boolean sortNullsLast, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/candidate/{candidate_id}/history/{cycle}/"
            .replace("{" + "cycle" + "}", localVarApiClient.escapeString(cycle.toString()))
            .replace("{" + "candidate_id" + "}", localVarApiClient.escapeString(candidateId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (apiKey != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api_key", apiKey));
        }

        if (sortHideNull != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort_hide_null", sortHideNull));
        }

        if (electionFull != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("election_full", electionFull));
        }

        if (perPage != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("per_page", perPage));
        }

        if (sortNullOnly != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort_null_only", sortNullOnly));
        }

        if (sort != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort", sort));
        }

        if (sortNullsLast != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort_nulls_last", sortNullsLast));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKeyHeaderAuth", "ApiKeyQueryAuth", "apiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call candidateCandidateIdHistoryCycleGetValidateBeforeCall(String apiKey, Integer cycle, String candidateId, Integer page, Boolean sortHideNull, Boolean electionFull, Integer perPage, Boolean sortNullOnly, String sort, Boolean sortNullsLast, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'apiKey' is set
        if (apiKey == null) {
            throw new ApiException("Missing the required parameter 'apiKey' when calling candidateCandidateIdHistoryCycleGet(Async)");
        }

        // verify the required parameter 'cycle' is set
        if (cycle == null) {
            throw new ApiException("Missing the required parameter 'cycle' when calling candidateCandidateIdHistoryCycleGet(Async)");
        }

        // verify the required parameter 'candidateId' is set
        if (candidateId == null) {
            throw new ApiException("Missing the required parameter 'candidateId' when calling candidateCandidateIdHistoryCycleGet(Async)");
        }

        return candidateCandidateIdHistoryCycleGetCall(apiKey, cycle, candidateId, page, sortHideNull, electionFull, perPage, sortNullOnly, sort, sortNullsLast, _callback);

    }

    /**
     * 
     *  Find out a candidate&#39;s characteristics over time. This is particularly useful if the candidate runs for the same office in different districts or you want to know more about a candidate&#39;s previous races.  This information is organized by &#x60;candidate_id&#x60;, so it won&#39;t help you find a candidate who ran for different offices over time; candidates get a new ID for each office. 
     * @param apiKey  API key for https://api.data.gov. Get one at https://api.data.gov/signup.  (required)
     * @param cycle  Two-year election cycle in which a candidate runs for office. Calculated from Form 2. The cycle begins with an odd year and is named for its ending, even year. This cycle follows the traditional house election cycle and subdivides the presidential and Senate elections into comparable two-year blocks. To retrieve data for the entire four years of a presidential term or six years of a senatorial term, you will need the &#x60;election_full&#x60; flag.  (required)
     * @param candidateId  A unique identifier assigned to each candidate registered with the FEC. If a person runs for several offices, that person will have separate candidate IDs for each office. First character indicates office - [P]residential, [H]ouse, [S]enate]. Second character is the last digit of the two-year period the ID was created. Third and fourth is the candidate state. Presidential IDs don&#39;t have state. Fifth and sixth is the district when the candidate first ran. This does not change if the candidate/member&#39;s district changes during re-districting. Presidential IDs don&#39;t have districts. The rest is sequence.  (required)
     * @param page For paginating through results, starting at page 1 (optional, default to 1)
     * @param sortHideNull Hide null values on sorted column(s). (optional, default to false)
     * @param electionFull &#x60;True&#x60; indicates that full election period of a candidate. &#x60;False&#x60; indicates that two year election cycle. (optional, default to true)
     * @param perPage The number of results returned per page. Defaults to 20. (optional, default to 20)
     * @param sortNullOnly Toggle that filters out all rows having sort column that is non-null (optional, default to false)
     * @param sort Provide a field to sort by. Use &#x60;-&#x60; for descending order.  (optional, default to -two_year_period)
     * @param sortNullsLast Toggle that sorts null values last (optional, default to false)
     * @return CandidateHistoryPage
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public CandidateHistoryPage candidateCandidateIdHistoryCycleGet(String apiKey, Integer cycle, String candidateId, Integer page, Boolean sortHideNull, Boolean electionFull, Integer perPage, Boolean sortNullOnly, String sort, Boolean sortNullsLast) throws ApiException {
        ApiResponse<CandidateHistoryPage> localVarResp = candidateCandidateIdHistoryCycleGetWithHttpInfo(apiKey, cycle, candidateId, page, sortHideNull, electionFull, perPage, sortNullOnly, sort, sortNullsLast);
        return localVarResp.getData();
    }

    /**
     * 
     *  Find out a candidate&#39;s characteristics over time. This is particularly useful if the candidate runs for the same office in different districts or you want to know more about a candidate&#39;s previous races.  This information is organized by &#x60;candidate_id&#x60;, so it won&#39;t help you find a candidate who ran for different offices over time; candidates get a new ID for each office. 
     * @param apiKey  API key for https://api.data.gov. Get one at https://api.data.gov/signup.  (required)
     * @param cycle  Two-year election cycle in which a candidate runs for office. Calculated from Form 2. The cycle begins with an odd year and is named for its ending, even year. This cycle follows the traditional house election cycle and subdivides the presidential and Senate elections into comparable two-year blocks. To retrieve data for the entire four years of a presidential term or six years of a senatorial term, you will need the &#x60;election_full&#x60; flag.  (required)
     * @param candidateId  A unique identifier assigned to each candidate registered with the FEC. If a person runs for several offices, that person will have separate candidate IDs for each office. First character indicates office - [P]residential, [H]ouse, [S]enate]. Second character is the last digit of the two-year period the ID was created. Third and fourth is the candidate state. Presidential IDs don&#39;t have state. Fifth and sixth is the district when the candidate first ran. This does not change if the candidate/member&#39;s district changes during re-districting. Presidential IDs don&#39;t have districts. The rest is sequence.  (required)
     * @param page For paginating through results, starting at page 1 (optional, default to 1)
     * @param sortHideNull Hide null values on sorted column(s). (optional, default to false)
     * @param electionFull &#x60;True&#x60; indicates that full election period of a candidate. &#x60;False&#x60; indicates that two year election cycle. (optional, default to true)
     * @param perPage The number of results returned per page. Defaults to 20. (optional, default to 20)
     * @param sortNullOnly Toggle that filters out all rows having sort column that is non-null (optional, default to false)
     * @param sort Provide a field to sort by. Use &#x60;-&#x60; for descending order.  (optional, default to -two_year_period)
     * @param sortNullsLast Toggle that sorts null values last (optional, default to false)
     * @return ApiResponse&lt;CandidateHistoryPage&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CandidateHistoryPage> candidateCandidateIdHistoryCycleGetWithHttpInfo(String apiKey, Integer cycle, String candidateId, Integer page, Boolean sortHideNull, Boolean electionFull, Integer perPage, Boolean sortNullOnly, String sort, Boolean sortNullsLast) throws ApiException {
        okhttp3.Call localVarCall = candidateCandidateIdHistoryCycleGetValidateBeforeCall(apiKey, cycle, candidateId, page, sortHideNull, electionFull, perPage, sortNullOnly, sort, sortNullsLast, null);
        Type localVarReturnType = new TypeToken<CandidateHistoryPage>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     *  Find out a candidate&#39;s characteristics over time. This is particularly useful if the candidate runs for the same office in different districts or you want to know more about a candidate&#39;s previous races.  This information is organized by &#x60;candidate_id&#x60;, so it won&#39;t help you find a candidate who ran for different offices over time; candidates get a new ID for each office. 
     * @param apiKey  API key for https://api.data.gov. Get one at https://api.data.gov/signup.  (required)
     * @param cycle  Two-year election cycle in which a candidate runs for office. Calculated from Form 2. The cycle begins with an odd year and is named for its ending, even year. This cycle follows the traditional house election cycle and subdivides the presidential and Senate elections into comparable two-year blocks. To retrieve data for the entire four years of a presidential term or six years of a senatorial term, you will need the &#x60;election_full&#x60; flag.  (required)
     * @param candidateId  A unique identifier assigned to each candidate registered with the FEC. If a person runs for several offices, that person will have separate candidate IDs for each office. First character indicates office - [P]residential, [H]ouse, [S]enate]. Second character is the last digit of the two-year period the ID was created. Third and fourth is the candidate state. Presidential IDs don&#39;t have state. Fifth and sixth is the district when the candidate first ran. This does not change if the candidate/member&#39;s district changes during re-districting. Presidential IDs don&#39;t have districts. The rest is sequence.  (required)
     * @param page For paginating through results, starting at page 1 (optional, default to 1)
     * @param sortHideNull Hide null values on sorted column(s). (optional, default to false)
     * @param electionFull &#x60;True&#x60; indicates that full election period of a candidate. &#x60;False&#x60; indicates that two year election cycle. (optional, default to true)
     * @param perPage The number of results returned per page. Defaults to 20. (optional, default to 20)
     * @param sortNullOnly Toggle that filters out all rows having sort column that is non-null (optional, default to false)
     * @param sort Provide a field to sort by. Use &#x60;-&#x60; for descending order.  (optional, default to -two_year_period)
     * @param sortNullsLast Toggle that sorts null values last (optional, default to false)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call candidateCandidateIdHistoryCycleGetAsync(String apiKey, Integer cycle, String candidateId, Integer page, Boolean sortHideNull, Boolean electionFull, Integer perPage, Boolean sortNullOnly, String sort, Boolean sortNullsLast, final ApiCallback<CandidateHistoryPage> _callback) throws ApiException {

        okhttp3.Call localVarCall = candidateCandidateIdHistoryCycleGetValidateBeforeCall(apiKey, cycle, candidateId, page, sortHideNull, electionFull, perPage, sortNullOnly, sort, sortNullsLast, _callback);
        Type localVarReturnType = new TypeToken<CandidateHistoryPage>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for candidateCandidateIdHistoryGet
     * @param apiKey  API key for https://api.data.gov. Get one at https://api.data.gov/signup.  (required)
     * @param candidateId  A unique identifier assigned to each candidate registered with the FEC. If a person runs for several offices, that person will have separate candidate IDs for each office. First character indicates office - [P]residential, [H]ouse, [S]enate]. Second character is the last digit of the two-year period the ID was created. Third and fourth is the candidate state. Presidential IDs don&#39;t have state. Fifth and sixth is the district when the candidate first ran. This does not change if the candidate/member&#39;s district changes during re-districting. Presidential IDs don&#39;t have districts. The rest is sequence.  (required)
     * @param page For paginating through results, starting at page 1 (optional, default to 1)
     * @param sortHideNull Hide null values on sorted column(s). (optional, default to false)
     * @param electionFull &#x60;True&#x60; indicates that full election period of a candidate. &#x60;False&#x60; indicates that two year election cycle. (optional, default to true)
     * @param perPage The number of results returned per page. Defaults to 20. (optional, default to 20)
     * @param sortNullOnly Toggle that filters out all rows having sort column that is non-null (optional, default to false)
     * @param sort Provide a field to sort by. Use &#x60;-&#x60; for descending order.  (optional, default to -two_year_period)
     * @param sortNullsLast Toggle that sorts null values last (optional, default to false)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call candidateCandidateIdHistoryGetCall(String apiKey, String candidateId, Integer page, Boolean sortHideNull, Boolean electionFull, Integer perPage, Boolean sortNullOnly, String sort, Boolean sortNullsLast, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/candidate/{candidate_id}/history/"
            .replace("{" + "candidate_id" + "}", localVarApiClient.escapeString(candidateId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (apiKey != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api_key", apiKey));
        }

        if (sortHideNull != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort_hide_null", sortHideNull));
        }

        if (electionFull != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("election_full", electionFull));
        }

        if (perPage != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("per_page", perPage));
        }

        if (sortNullOnly != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort_null_only", sortNullOnly));
        }

        if (sort != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort", sort));
        }

        if (sortNullsLast != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort_nulls_last", sortNullsLast));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKeyHeaderAuth", "ApiKeyQueryAuth", "apiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call candidateCandidateIdHistoryGetValidateBeforeCall(String apiKey, String candidateId, Integer page, Boolean sortHideNull, Boolean electionFull, Integer perPage, Boolean sortNullOnly, String sort, Boolean sortNullsLast, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'apiKey' is set
        if (apiKey == null) {
            throw new ApiException("Missing the required parameter 'apiKey' when calling candidateCandidateIdHistoryGet(Async)");
        }

        // verify the required parameter 'candidateId' is set
        if (candidateId == null) {
            throw new ApiException("Missing the required parameter 'candidateId' when calling candidateCandidateIdHistoryGet(Async)");
        }

        return candidateCandidateIdHistoryGetCall(apiKey, candidateId, page, sortHideNull, electionFull, perPage, sortNullOnly, sort, sortNullsLast, _callback);

    }

    /**
     * 
     *  Find out a candidate&#39;s characteristics over time. This is particularly useful if the candidate runs for the same office in different districts or you want to know more about a candidate&#39;s previous races.  This information is organized by &#x60;candidate_id&#x60;, so it won&#39;t help you find a candidate who ran for different offices over time; candidates get a new ID for each office. 
     * @param apiKey  API key for https://api.data.gov. Get one at https://api.data.gov/signup.  (required)
     * @param candidateId  A unique identifier assigned to each candidate registered with the FEC. If a person runs for several offices, that person will have separate candidate IDs for each office. First character indicates office - [P]residential, [H]ouse, [S]enate]. Second character is the last digit of the two-year period the ID was created. Third and fourth is the candidate state. Presidential IDs don&#39;t have state. Fifth and sixth is the district when the candidate first ran. This does not change if the candidate/member&#39;s district changes during re-districting. Presidential IDs don&#39;t have districts. The rest is sequence.  (required)
     * @param page For paginating through results, starting at page 1 (optional, default to 1)
     * @param sortHideNull Hide null values on sorted column(s). (optional, default to false)
     * @param electionFull &#x60;True&#x60; indicates that full election period of a candidate. &#x60;False&#x60; indicates that two year election cycle. (optional, default to true)
     * @param perPage The number of results returned per page. Defaults to 20. (optional, default to 20)
     * @param sortNullOnly Toggle that filters out all rows having sort column that is non-null (optional, default to false)
     * @param sort Provide a field to sort by. Use &#x60;-&#x60; for descending order.  (optional, default to -two_year_period)
     * @param sortNullsLast Toggle that sorts null values last (optional, default to false)
     * @return CandidateHistoryPage
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public CandidateHistoryPage candidateCandidateIdHistoryGet(String apiKey, String candidateId, Integer page, Boolean sortHideNull, Boolean electionFull, Integer perPage, Boolean sortNullOnly, String sort, Boolean sortNullsLast) throws ApiException {
        ApiResponse<CandidateHistoryPage> localVarResp = candidateCandidateIdHistoryGetWithHttpInfo(apiKey, candidateId, page, sortHideNull, electionFull, perPage, sortNullOnly, sort, sortNullsLast);
        return localVarResp.getData();
    }

    /**
     * 
     *  Find out a candidate&#39;s characteristics over time. This is particularly useful if the candidate runs for the same office in different districts or you want to know more about a candidate&#39;s previous races.  This information is organized by &#x60;candidate_id&#x60;, so it won&#39;t help you find a candidate who ran for different offices over time; candidates get a new ID for each office. 
     * @param apiKey  API key for https://api.data.gov. Get one at https://api.data.gov/signup.  (required)
     * @param candidateId  A unique identifier assigned to each candidate registered with the FEC. If a person runs for several offices, that person will have separate candidate IDs for each office. First character indicates office - [P]residential, [H]ouse, [S]enate]. Second character is the last digit of the two-year period the ID was created. Third and fourth is the candidate state. Presidential IDs don&#39;t have state. Fifth and sixth is the district when the candidate first ran. This does not change if the candidate/member&#39;s district changes during re-districting. Presidential IDs don&#39;t have districts. The rest is sequence.  (required)
     * @param page For paginating through results, starting at page 1 (optional, default to 1)
     * @param sortHideNull Hide null values on sorted column(s). (optional, default to false)
     * @param electionFull &#x60;True&#x60; indicates that full election period of a candidate. &#x60;False&#x60; indicates that two year election cycle. (optional, default to true)
     * @param perPage The number of results returned per page. Defaults to 20. (optional, default to 20)
     * @param sortNullOnly Toggle that filters out all rows having sort column that is non-null (optional, default to false)
     * @param sort Provide a field to sort by. Use &#x60;-&#x60; for descending order.  (optional, default to -two_year_period)
     * @param sortNullsLast Toggle that sorts null values last (optional, default to false)
     * @return ApiResponse&lt;CandidateHistoryPage&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CandidateHistoryPage> candidateCandidateIdHistoryGetWithHttpInfo(String apiKey, String candidateId, Integer page, Boolean sortHideNull, Boolean electionFull, Integer perPage, Boolean sortNullOnly, String sort, Boolean sortNullsLast) throws ApiException {
        okhttp3.Call localVarCall = candidateCandidateIdHistoryGetValidateBeforeCall(apiKey, candidateId, page, sortHideNull, electionFull, perPage, sortNullOnly, sort, sortNullsLast, null);
        Type localVarReturnType = new TypeToken<CandidateHistoryPage>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     *  Find out a candidate&#39;s characteristics over time. This is particularly useful if the candidate runs for the same office in different districts or you want to know more about a candidate&#39;s previous races.  This information is organized by &#x60;candidate_id&#x60;, so it won&#39;t help you find a candidate who ran for different offices over time; candidates get a new ID for each office. 
     * @param apiKey  API key for https://api.data.gov. Get one at https://api.data.gov/signup.  (required)
     * @param candidateId  A unique identifier assigned to each candidate registered with the FEC. If a person runs for several offices, that person will have separate candidate IDs for each office. First character indicates office - [P]residential, [H]ouse, [S]enate]. Second character is the last digit of the two-year period the ID was created. Third and fourth is the candidate state. Presidential IDs don&#39;t have state. Fifth and sixth is the district when the candidate first ran. This does not change if the candidate/member&#39;s district changes during re-districting. Presidential IDs don&#39;t have districts. The rest is sequence.  (required)
     * @param page For paginating through results, starting at page 1 (optional, default to 1)
     * @param sortHideNull Hide null values on sorted column(s). (optional, default to false)
     * @param electionFull &#x60;True&#x60; indicates that full election period of a candidate. &#x60;False&#x60; indicates that two year election cycle. (optional, default to true)
     * @param perPage The number of results returned per page. Defaults to 20. (optional, default to 20)
     * @param sortNullOnly Toggle that filters out all rows having sort column that is non-null (optional, default to false)
     * @param sort Provide a field to sort by. Use &#x60;-&#x60; for descending order.  (optional, default to -two_year_period)
     * @param sortNullsLast Toggle that sorts null values last (optional, default to false)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call candidateCandidateIdHistoryGetAsync(String apiKey, String candidateId, Integer page, Boolean sortHideNull, Boolean electionFull, Integer perPage, Boolean sortNullOnly, String sort, Boolean sortNullsLast, final ApiCallback<CandidateHistoryPage> _callback) throws ApiException {

        okhttp3.Call localVarCall = candidateCandidateIdHistoryGetValidateBeforeCall(apiKey, candidateId, page, sortHideNull, electionFull, perPage, sortNullOnly, sort, sortNullsLast, _callback);
        Type localVarReturnType = new TypeToken<CandidateHistoryPage>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for candidateCandidateIdTotalsGet
     * @param apiKey  API key for https://api.data.gov. Get one at https://api.data.gov/signup.  (required)
     * @param candidateId  A unique identifier assigned to each candidate registered with the FEC. If a person runs for several offices, that person will have separate candidate IDs for each office. First character indicates office - [P]residential, [H]ouse, [S]enate]. Second character is the last digit of the two-year period the ID was created. Third and fourth is the candidate state. Presidential IDs don&#39;t have state. Fifth and sixth is the district when the candidate first ran. This does not change if the candidate/member&#39;s district changes during re-districting. Presidential IDs don&#39;t have districts. The rest is sequence.  (required)
     * @param electionFull &#x60;True&#x60; indicates that full election period of a candidate. &#x60;False&#x60; indicates that two year election cycle. (optional)
     * @param cycle  Filter records to only those that were applicable to a given two-year period.The cycle begins with an odd year and is named for its ending, even year.  (optional)
     * @param sortNullsLast Toggle that sorts null values last (optional, default to false)
     * @param page For paginating through results, starting at page 1 (optional, default to 1)
     * @param sortNullOnly Toggle that filters out all rows having sort column that is non-null (optional, default to false)
     * @param sortHideNull Hide null values on sorted column(s). (optional, default to false)
     * @param perPage The number of results returned per page. Defaults to 20. (optional, default to 20)
     * @param sort Provide a field to sort by. Use &#x60;-&#x60; for descending order.  (optional, default to -cycle)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call candidateCandidateIdTotalsGetCall(String apiKey, String candidateId, Boolean electionFull, List<Integer> cycle, Boolean sortNullsLast, Integer page, Boolean sortNullOnly, Boolean sortHideNull, Integer perPage, String sort, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/candidate/{candidate_id}/totals/"
            .replace("{" + "candidate_id" + "}", localVarApiClient.escapeString(candidateId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiKey != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api_key", apiKey));
        }

        if (electionFull != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("election_full", electionFull));
        }

        if (cycle != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "cycle", cycle));
        }

        if (sortNullsLast != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort_nulls_last", sortNullsLast));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (sortNullOnly != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort_null_only", sortNullOnly));
        }

        if (sortHideNull != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort_hide_null", sortHideNull));
        }

        if (perPage != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("per_page", perPage));
        }

        if (sort != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort", sort));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKeyHeaderAuth", "ApiKeyQueryAuth", "apiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call candidateCandidateIdTotalsGetValidateBeforeCall(String apiKey, String candidateId, Boolean electionFull, List<Integer> cycle, Boolean sortNullsLast, Integer page, Boolean sortNullOnly, Boolean sortHideNull, Integer perPage, String sort, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'apiKey' is set
        if (apiKey == null) {
            throw new ApiException("Missing the required parameter 'apiKey' when calling candidateCandidateIdTotalsGet(Async)");
        }

        // verify the required parameter 'candidateId' is set
        if (candidateId == null) {
            throw new ApiException("Missing the required parameter 'candidateId' when calling candidateCandidateIdTotalsGet(Async)");
        }

        return candidateCandidateIdTotalsGetCall(apiKey, candidateId, electionFull, cycle, sortNullsLast, page, sortNullOnly, sortHideNull, perPage, sort, _callback);

    }

    /**
     * 
     *  This endpoint provides information about a committee&#39;s Form 3, Form 3X, or Form 3P financial reports, which are aggregated by two-year period. We refer to two-year periods as a &#x60;cycle&#x60;.  The cycle is named after the even-numbered year and includes the year before it. To obtain totals from 2013 and 2014, you would use 2014. In odd-numbered years, the current cycle is the next year â€” for example, in 2015, the current cycle is 2016.  For presidential and Senate candidates, multiple two-year cycles exist between elections.  
     * @param apiKey  API key for https://api.data.gov. Get one at https://api.data.gov/signup.  (required)
     * @param candidateId  A unique identifier assigned to each candidate registered with the FEC. If a person runs for several offices, that person will have separate candidate IDs for each office. First character indicates office - [P]residential, [H]ouse, [S]enate]. Second character is the last digit of the two-year period the ID was created. Third and fourth is the candidate state. Presidential IDs don&#39;t have state. Fifth and sixth is the district when the candidate first ran. This does not change if the candidate/member&#39;s district changes during re-districting. Presidential IDs don&#39;t have districts. The rest is sequence.  (required)
     * @param electionFull &#x60;True&#x60; indicates that full election period of a candidate. &#x60;False&#x60; indicates that two year election cycle. (optional)
     * @param cycle  Filter records to only those that were applicable to a given two-year period.The cycle begins with an odd year and is named for its ending, even year.  (optional)
     * @param sortNullsLast Toggle that sorts null values last (optional, default to false)
     * @param page For paginating through results, starting at page 1 (optional, default to 1)
     * @param sortNullOnly Toggle that filters out all rows having sort column that is non-null (optional, default to false)
     * @param sortHideNull Hide null values on sorted column(s). (optional, default to false)
     * @param perPage The number of results returned per page. Defaults to 20. (optional, default to 20)
     * @param sort Provide a field to sort by. Use &#x60;-&#x60; for descending order.  (optional, default to -cycle)
     * @return CommitteeTotalsPage
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public CommitteeTotalsPage candidateCandidateIdTotalsGet(String apiKey, String candidateId, Boolean electionFull, List<Integer> cycle, Boolean sortNullsLast, Integer page, Boolean sortNullOnly, Boolean sortHideNull, Integer perPage, String sort) throws ApiException {
        ApiResponse<CommitteeTotalsPage> localVarResp = candidateCandidateIdTotalsGetWithHttpInfo(apiKey, candidateId, electionFull, cycle, sortNullsLast, page, sortNullOnly, sortHideNull, perPage, sort);
        return localVarResp.getData();
    }

    /**
     * 
     *  This endpoint provides information about a committee&#39;s Form 3, Form 3X, or Form 3P financial reports, which are aggregated by two-year period. We refer to two-year periods as a &#x60;cycle&#x60;.  The cycle is named after the even-numbered year and includes the year before it. To obtain totals from 2013 and 2014, you would use 2014. In odd-numbered years, the current cycle is the next year â€” for example, in 2015, the current cycle is 2016.  For presidential and Senate candidates, multiple two-year cycles exist between elections.  
     * @param apiKey  API key for https://api.data.gov. Get one at https://api.data.gov/signup.  (required)
     * @param candidateId  A unique identifier assigned to each candidate registered with the FEC. If a person runs for several offices, that person will have separate candidate IDs for each office. First character indicates office - [P]residential, [H]ouse, [S]enate]. Second character is the last digit of the two-year period the ID was created. Third and fourth is the candidate state. Presidential IDs don&#39;t have state. Fifth and sixth is the district when the candidate first ran. This does not change if the candidate/member&#39;s district changes during re-districting. Presidential IDs don&#39;t have districts. The rest is sequence.  (required)
     * @param electionFull &#x60;True&#x60; indicates that full election period of a candidate. &#x60;False&#x60; indicates that two year election cycle. (optional)
     * @param cycle  Filter records to only those that were applicable to a given two-year period.The cycle begins with an odd year and is named for its ending, even year.  (optional)
     * @param sortNullsLast Toggle that sorts null values last (optional, default to false)
     * @param page For paginating through results, starting at page 1 (optional, default to 1)
     * @param sortNullOnly Toggle that filters out all rows having sort column that is non-null (optional, default to false)
     * @param sortHideNull Hide null values on sorted column(s). (optional, default to false)
     * @param perPage The number of results returned per page. Defaults to 20. (optional, default to 20)
     * @param sort Provide a field to sort by. Use &#x60;-&#x60; for descending order.  (optional, default to -cycle)
     * @return ApiResponse&lt;CommitteeTotalsPage&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CommitteeTotalsPage> candidateCandidateIdTotalsGetWithHttpInfo(String apiKey, String candidateId, Boolean electionFull, List<Integer> cycle, Boolean sortNullsLast, Integer page, Boolean sortNullOnly, Boolean sortHideNull, Integer perPage, String sort) throws ApiException {
        okhttp3.Call localVarCall = candidateCandidateIdTotalsGetValidateBeforeCall(apiKey, candidateId, electionFull, cycle, sortNullsLast, page, sortNullOnly, sortHideNull, perPage, sort, null);
        Type localVarReturnType = new TypeToken<CommitteeTotalsPage>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     *  This endpoint provides information about a committee&#39;s Form 3, Form 3X, or Form 3P financial reports, which are aggregated by two-year period. We refer to two-year periods as a &#x60;cycle&#x60;.  The cycle is named after the even-numbered year and includes the year before it. To obtain totals from 2013 and 2014, you would use 2014. In odd-numbered years, the current cycle is the next year â€” for example, in 2015, the current cycle is 2016.  For presidential and Senate candidates, multiple two-year cycles exist between elections.  
     * @param apiKey  API key for https://api.data.gov. Get one at https://api.data.gov/signup.  (required)
     * @param candidateId  A unique identifier assigned to each candidate registered with the FEC. If a person runs for several offices, that person will have separate candidate IDs for each office. First character indicates office - [P]residential, [H]ouse, [S]enate]. Second character is the last digit of the two-year period the ID was created. Third and fourth is the candidate state. Presidential IDs don&#39;t have state. Fifth and sixth is the district when the candidate first ran. This does not change if the candidate/member&#39;s district changes during re-districting. Presidential IDs don&#39;t have districts. The rest is sequence.  (required)
     * @param electionFull &#x60;True&#x60; indicates that full election period of a candidate. &#x60;False&#x60; indicates that two year election cycle. (optional)
     * @param cycle  Filter records to only those that were applicable to a given two-year period.The cycle begins with an odd year and is named for its ending, even year.  (optional)
     * @param sortNullsLast Toggle that sorts null values last (optional, default to false)
     * @param page For paginating through results, starting at page 1 (optional, default to 1)
     * @param sortNullOnly Toggle that filters out all rows having sort column that is non-null (optional, default to false)
     * @param sortHideNull Hide null values on sorted column(s). (optional, default to false)
     * @param perPage The number of results returned per page. Defaults to 20. (optional, default to 20)
     * @param sort Provide a field to sort by. Use &#x60;-&#x60; for descending order.  (optional, default to -cycle)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call candidateCandidateIdTotalsGetAsync(String apiKey, String candidateId, Boolean electionFull, List<Integer> cycle, Boolean sortNullsLast, Integer page, Boolean sortNullOnly, Boolean sortHideNull, Integer perPage, String sort, final ApiCallback<CommitteeTotalsPage> _callback) throws ApiException {

        okhttp3.Call localVarCall = candidateCandidateIdTotalsGetValidateBeforeCall(apiKey, candidateId, electionFull, cycle, sortNullsLast, page, sortNullOnly, sortHideNull, perPage, sort, _callback);
        Type localVarReturnType = new TypeToken<CommitteeTotalsPage>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for candidatesGet
     * @param apiKey  API key for https://api.data.gov. Get one at https://api.data.gov/signup.  (required)
     * @param incumbentChallenge One-letter code (&#39;I&#39;, &#39;C&#39;, &#39;O&#39;) explaining if the candidate is an incumbent, a challenger, or if the seat is open. (optional)
     * @param minFirstFileDate Selects all candidates whose first filing was received by the FEC after this date. (optional)
     * @param q Name of candidate running for office (optional)
     * @param cycle  Two-year election cycle in which a candidate runs for office. Calculated from Form 2. The cycle begins with an odd year and is named for its ending, even year. This cycle follows the traditional house election cycle and subdivides the presidential and Senate elections into comparable two-year blocks. To retrieve data for the entire four years of a presidential term or six years of a senatorial term, you will need the &#x60;election_full&#x60; flag.  (optional)
     * @param sortNullOnly Toggle that filters out all rows having sort column that is non-null (optional, default to false)
     * @param federalFundsFlag A boolean the describes if a presidential candidate has accepted federal funds. The flag will be false for House and Senate candidates. (optional)
     * @param sortHideNull Hide null values on sorted column(s). (optional, default to false)
     * @param candidateId  A unique identifier assigned to each candidate registered with the FEC. If a person runs for several offices, that person will have separate candidate IDs for each office. First character indicates office - [P]residential, [H]ouse, [S]enate]. Second character is the last digit of the two-year period the ID was created. Third and fourth is the candidate state. Presidential IDs don&#39;t have state. Fifth and sixth is the district when the candidate first ran. This does not change if the candidate/member&#39;s district changes during re-districting. Presidential IDs don&#39;t have districts. The rest is sequence.  (optional)
     * @param name Name (candidate or committee) to search for. Alias for &#39;q&#39;. (optional)
     * @param perPage The number of results returned per page. Defaults to 20. (optional, default to 20)
     * @param electionYear Year of election (optional)
     * @param office Federal office candidate runs for: H, S or P (optional)
     * @param sort Provide a field to sort by. Use &#x60;-&#x60; for descending order.  (optional, default to name)
     * @param candidateStatus One-letter code explaining if the candidate is:         - C present candidate         - F future candidate         - N not yet a candidate         - P prior candidate  (optional)
     * @param maxFirstFileDate Selects all candidates whose first filing was received by the FEC before this date. (optional)
     * @param district Two-digit US House distirict of the office the candidate is running for. Presidential, Senate and House at-large candidates will have District 00. (optional)
     * @param hasRaisedFunds A boolean that describes if a candidate&#39;s committee has ever received any receipts for their campaign for this particular office. (Candidates have separate candidate IDs for each office.) (optional)
     * @param party Three-letter code for the party affiliated with a candidate or committee. For example, DEM for Democratic Party and REP for Republican Party. (optional)
     * @param sortNullsLast Toggle that sorts null values last (optional, default to false)
     * @param isActiveCandidate  Candidates who are actively seeking office. If no value is specified, all candidates are returned. When True is specified, only active candidates are returned. When False is specified, only inactive candidates are returned.  (optional)
     * @param page For paginating through results, starting at page 1 (optional, default to 1)
     * @param state US state or territory where a candidate runs for office (optional)
     * @param year Retrieve records pertaining to a particular election year. The list of election years is based on a candidate filing a statement of candidacy (F2) for that year. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call candidatesGetCall(String apiKey, List<String> incumbentChallenge, LocalDate minFirstFileDate, List<String> q, List<Integer> cycle, Boolean sortNullOnly, Boolean federalFundsFlag, Boolean sortHideNull, List<String> candidateId, List<String> name, Integer perPage, List<Integer> electionYear, List<String> office, String sort, List<String> candidateStatus, LocalDate maxFirstFileDate, List<String> district, Boolean hasRaisedFunds, List<String> party, Boolean sortNullsLast, Boolean isActiveCandidate, Integer page, List<String> state, String year, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/candidates/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (incumbentChallenge != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "incumbent_challenge", incumbentChallenge));
        }

        if (minFirstFileDate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("min_first_file_date", minFirstFileDate));
        }

        if (q != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "q", q));
        }

        if (cycle != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "cycle", cycle));
        }

        if (sortNullOnly != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort_null_only", sortNullOnly));
        }

        if (federalFundsFlag != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("federal_funds_flag", federalFundsFlag));
        }

        if (sortHideNull != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort_hide_null", sortHideNull));
        }

        if (candidateId != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "candidate_id", candidateId));
        }

        if (name != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "name", name));
        }

        if (perPage != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("per_page", perPage));
        }

        if (electionYear != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "election_year", electionYear));
        }

        if (office != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "office", office));
        }

        if (sort != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort", sort));
        }

        if (candidateStatus != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "candidate_status", candidateStatus));
        }

        if (maxFirstFileDate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("max_first_file_date", maxFirstFileDate));
        }

        if (district != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "district", district));
        }

        if (apiKey != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api_key", apiKey));
        }

        if (hasRaisedFunds != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("has_raised_funds", hasRaisedFunds));
        }

        if (party != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "party", party));
        }

        if (sortNullsLast != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort_nulls_last", sortNullsLast));
        }

        if (isActiveCandidate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("is_active_candidate", isActiveCandidate));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (state != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "state", state));
        }

        if (year != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("year", year));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKeyHeaderAuth", "ApiKeyQueryAuth", "apiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call candidatesGetValidateBeforeCall(String apiKey, List<String> incumbentChallenge, LocalDate minFirstFileDate, List<String> q, List<Integer> cycle, Boolean sortNullOnly, Boolean federalFundsFlag, Boolean sortHideNull, List<String> candidateId, List<String> name, Integer perPage, List<Integer> electionYear, List<String> office, String sort, List<String> candidateStatus, LocalDate maxFirstFileDate, List<String> district, Boolean hasRaisedFunds, List<String> party, Boolean sortNullsLast, Boolean isActiveCandidate, Integer page, List<String> state, String year, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'apiKey' is set
        if (apiKey == null) {
            throw new ApiException("Missing the required parameter 'apiKey' when calling candidatesGet(Async)");
        }

        return candidatesGetCall(apiKey, incumbentChallenge, minFirstFileDate, q, cycle, sortNullOnly, federalFundsFlag, sortHideNull, candidateId, name, perPage, electionYear, office, sort, candidateStatus, maxFirstFileDate, district, hasRaisedFunds, party, sortNullsLast, isActiveCandidate, page, state, year, _callback);

    }

    /**
     * 
     *  Fetch basic information about candidates, and use parameters to filter results to the candidates you&#39;re looking for.  Each result reflects a unique FEC candidate ID. That ID is particular to the candidate for a particular office sought. If a candidate runs for the same office multiple times, the ID stays the same. If the same person runs for another office â€” for example, a House candidate runs for a Senate office â€” that candidate will get a unique ID for each office. 
     * @param apiKey  API key for https://api.data.gov. Get one at https://api.data.gov/signup.  (required)
     * @param incumbentChallenge One-letter code (&#39;I&#39;, &#39;C&#39;, &#39;O&#39;) explaining if the candidate is an incumbent, a challenger, or if the seat is open. (optional)
     * @param minFirstFileDate Selects all candidates whose first filing was received by the FEC after this date. (optional)
     * @param q Name of candidate running for office (optional)
     * @param cycle  Two-year election cycle in which a candidate runs for office. Calculated from Form 2. The cycle begins with an odd year and is named for its ending, even year. This cycle follows the traditional house election cycle and subdivides the presidential and Senate elections into comparable two-year blocks. To retrieve data for the entire four years of a presidential term or six years of a senatorial term, you will need the &#x60;election_full&#x60; flag.  (optional)
     * @param sortNullOnly Toggle that filters out all rows having sort column that is non-null (optional, default to false)
     * @param federalFundsFlag A boolean the describes if a presidential candidate has accepted federal funds. The flag will be false for House and Senate candidates. (optional)
     * @param sortHideNull Hide null values on sorted column(s). (optional, default to false)
     * @param candidateId  A unique identifier assigned to each candidate registered with the FEC. If a person runs for several offices, that person will have separate candidate IDs for each office. First character indicates office - [P]residential, [H]ouse, [S]enate]. Second character is the last digit of the two-year period the ID was created. Third and fourth is the candidate state. Presidential IDs don&#39;t have state. Fifth and sixth is the district when the candidate first ran. This does not change if the candidate/member&#39;s district changes during re-districting. Presidential IDs don&#39;t have districts. The rest is sequence.  (optional)
     * @param name Name (candidate or committee) to search for. Alias for &#39;q&#39;. (optional)
     * @param perPage The number of results returned per page. Defaults to 20. (optional, default to 20)
     * @param electionYear Year of election (optional)
     * @param office Federal office candidate runs for: H, S or P (optional)
     * @param sort Provide a field to sort by. Use &#x60;-&#x60; for descending order.  (optional, default to name)
     * @param candidateStatus One-letter code explaining if the candidate is:         - C present candidate         - F future candidate         - N not yet a candidate         - P prior candidate  (optional)
     * @param maxFirstFileDate Selects all candidates whose first filing was received by the FEC before this date. (optional)
     * @param district Two-digit US House distirict of the office the candidate is running for. Presidential, Senate and House at-large candidates will have District 00. (optional)
     * @param hasRaisedFunds A boolean that describes if a candidate&#39;s committee has ever received any receipts for their campaign for this particular office. (Candidates have separate candidate IDs for each office.) (optional)
     * @param party Three-letter code for the party affiliated with a candidate or committee. For example, DEM for Democratic Party and REP for Republican Party. (optional)
     * @param sortNullsLast Toggle that sorts null values last (optional, default to false)
     * @param isActiveCandidate  Candidates who are actively seeking office. If no value is specified, all candidates are returned. When True is specified, only active candidates are returned. When False is specified, only inactive candidates are returned.  (optional)
     * @param page For paginating through results, starting at page 1 (optional, default to 1)
     * @param state US state or territory where a candidate runs for office (optional)
     * @param year Retrieve records pertaining to a particular election year. The list of election years is based on a candidate filing a statement of candidacy (F2) for that year. (optional)
     * @return CandidatePage
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public CandidatePage candidatesGet(String apiKey, List<String> incumbentChallenge, LocalDate minFirstFileDate, List<String> q, List<Integer> cycle, Boolean sortNullOnly, Boolean federalFundsFlag, Boolean sortHideNull, List<String> candidateId, List<String> name, Integer perPage, List<Integer> electionYear, List<String> office, String sort, List<String> candidateStatus, LocalDate maxFirstFileDate, List<String> district, Boolean hasRaisedFunds, List<String> party, Boolean sortNullsLast, Boolean isActiveCandidate, Integer page, List<String> state, String year) throws ApiException {
        ApiResponse<CandidatePage> localVarResp = candidatesGetWithHttpInfo(apiKey, incumbentChallenge, minFirstFileDate, q, cycle, sortNullOnly, federalFundsFlag, sortHideNull, candidateId, name, perPage, electionYear, office, sort, candidateStatus, maxFirstFileDate, district, hasRaisedFunds, party, sortNullsLast, isActiveCandidate, page, state, year);
        return localVarResp.getData();
    }

    /**
     * 
     *  Fetch basic information about candidates, and use parameters to filter results to the candidates you&#39;re looking for.  Each result reflects a unique FEC candidate ID. That ID is particular to the candidate for a particular office sought. If a candidate runs for the same office multiple times, the ID stays the same. If the same person runs for another office â€” for example, a House candidate runs for a Senate office â€” that candidate will get a unique ID for each office. 
     * @param apiKey  API key for https://api.data.gov. Get one at https://api.data.gov/signup.  (required)
     * @param incumbentChallenge One-letter code (&#39;I&#39;, &#39;C&#39;, &#39;O&#39;) explaining if the candidate is an incumbent, a challenger, or if the seat is open. (optional)
     * @param minFirstFileDate Selects all candidates whose first filing was received by the FEC after this date. (optional)
     * @param q Name of candidate running for office (optional)
     * @param cycle  Two-year election cycle in which a candidate runs for office. Calculated from Form 2. The cycle begins with an odd year and is named for its ending, even year. This cycle follows the traditional house election cycle and subdivides the presidential and Senate elections into comparable two-year blocks. To retrieve data for the entire four years of a presidential term or six years of a senatorial term, you will need the &#x60;election_full&#x60; flag.  (optional)
     * @param sortNullOnly Toggle that filters out all rows having sort column that is non-null (optional, default to false)
     * @param federalFundsFlag A boolean the describes if a presidential candidate has accepted federal funds. The flag will be false for House and Senate candidates. (optional)
     * @param sortHideNull Hide null values on sorted column(s). (optional, default to false)
     * @param candidateId  A unique identifier assigned to each candidate registered with the FEC. If a person runs for several offices, that person will have separate candidate IDs for each office. First character indicates office - [P]residential, [H]ouse, [S]enate]. Second character is the last digit of the two-year period the ID was created. Third and fourth is the candidate state. Presidential IDs don&#39;t have state. Fifth and sixth is the district when the candidate first ran. This does not change if the candidate/member&#39;s district changes during re-districting. Presidential IDs don&#39;t have districts. The rest is sequence.  (optional)
     * @param name Name (candidate or committee) to search for. Alias for &#39;q&#39;. (optional)
     * @param perPage The number of results returned per page. Defaults to 20. (optional, default to 20)
     * @param electionYear Year of election (optional)
     * @param office Federal office candidate runs for: H, S or P (optional)
     * @param sort Provide a field to sort by. Use &#x60;-&#x60; for descending order.  (optional, default to name)
     * @param candidateStatus One-letter code explaining if the candidate is:         - C present candidate         - F future candidate         - N not yet a candidate         - P prior candidate  (optional)
     * @param maxFirstFileDate Selects all candidates whose first filing was received by the FEC before this date. (optional)
     * @param district Two-digit US House distirict of the office the candidate is running for. Presidential, Senate and House at-large candidates will have District 00. (optional)
     * @param hasRaisedFunds A boolean that describes if a candidate&#39;s committee has ever received any receipts for their campaign for this particular office. (Candidates have separate candidate IDs for each office.) (optional)
     * @param party Three-letter code for the party affiliated with a candidate or committee. For example, DEM for Democratic Party and REP for Republican Party. (optional)
     * @param sortNullsLast Toggle that sorts null values last (optional, default to false)
     * @param isActiveCandidate  Candidates who are actively seeking office. If no value is specified, all candidates are returned. When True is specified, only active candidates are returned. When False is specified, only inactive candidates are returned.  (optional)
     * @param page For paginating through results, starting at page 1 (optional, default to 1)
     * @param state US state or territory where a candidate runs for office (optional)
     * @param year Retrieve records pertaining to a particular election year. The list of election years is based on a candidate filing a statement of candidacy (F2) for that year. (optional)
     * @return ApiResponse&lt;CandidatePage&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CandidatePage> candidatesGetWithHttpInfo(String apiKey, List<String> incumbentChallenge, LocalDate minFirstFileDate, List<String> q, List<Integer> cycle, Boolean sortNullOnly, Boolean federalFundsFlag, Boolean sortHideNull, List<String> candidateId, List<String> name, Integer perPage, List<Integer> electionYear, List<String> office, String sort, List<String> candidateStatus, LocalDate maxFirstFileDate, List<String> district, Boolean hasRaisedFunds, List<String> party, Boolean sortNullsLast, Boolean isActiveCandidate, Integer page, List<String> state, String year) throws ApiException {
        okhttp3.Call localVarCall = candidatesGetValidateBeforeCall(apiKey, incumbentChallenge, minFirstFileDate, q, cycle, sortNullOnly, federalFundsFlag, sortHideNull, candidateId, name, perPage, electionYear, office, sort, candidateStatus, maxFirstFileDate, district, hasRaisedFunds, party, sortNullsLast, isActiveCandidate, page, state, year, null);
        Type localVarReturnType = new TypeToken<CandidatePage>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     *  Fetch basic information about candidates, and use parameters to filter results to the candidates you&#39;re looking for.  Each result reflects a unique FEC candidate ID. That ID is particular to the candidate for a particular office sought. If a candidate runs for the same office multiple times, the ID stays the same. If the same person runs for another office â€” for example, a House candidate runs for a Senate office â€” that candidate will get a unique ID for each office. 
     * @param apiKey  API key for https://api.data.gov. Get one at https://api.data.gov/signup.  (required)
     * @param incumbentChallenge One-letter code (&#39;I&#39;, &#39;C&#39;, &#39;O&#39;) explaining if the candidate is an incumbent, a challenger, or if the seat is open. (optional)
     * @param minFirstFileDate Selects all candidates whose first filing was received by the FEC after this date. (optional)
     * @param q Name of candidate running for office (optional)
     * @param cycle  Two-year election cycle in which a candidate runs for office. Calculated from Form 2. The cycle begins with an odd year and is named for its ending, even year. This cycle follows the traditional house election cycle and subdivides the presidential and Senate elections into comparable two-year blocks. To retrieve data for the entire four years of a presidential term or six years of a senatorial term, you will need the &#x60;election_full&#x60; flag.  (optional)
     * @param sortNullOnly Toggle that filters out all rows having sort column that is non-null (optional, default to false)
     * @param federalFundsFlag A boolean the describes if a presidential candidate has accepted federal funds. The flag will be false for House and Senate candidates. (optional)
     * @param sortHideNull Hide null values on sorted column(s). (optional, default to false)
     * @param candidateId  A unique identifier assigned to each candidate registered with the FEC. If a person runs for several offices, that person will have separate candidate IDs for each office. First character indicates office - [P]residential, [H]ouse, [S]enate]. Second character is the last digit of the two-year period the ID was created. Third and fourth is the candidate state. Presidential IDs don&#39;t have state. Fifth and sixth is the district when the candidate first ran. This does not change if the candidate/member&#39;s district changes during re-districting. Presidential IDs don&#39;t have districts. The rest is sequence.  (optional)
     * @param name Name (candidate or committee) to search for. Alias for &#39;q&#39;. (optional)
     * @param perPage The number of results returned per page. Defaults to 20. (optional, default to 20)
     * @param electionYear Year of election (optional)
     * @param office Federal office candidate runs for: H, S or P (optional)
     * @param sort Provide a field to sort by. Use &#x60;-&#x60; for descending order.  (optional, default to name)
     * @param candidateStatus One-letter code explaining if the candidate is:         - C present candidate         - F future candidate         - N not yet a candidate         - P prior candidate  (optional)
     * @param maxFirstFileDate Selects all candidates whose first filing was received by the FEC before this date. (optional)
     * @param district Two-digit US House distirict of the office the candidate is running for. Presidential, Senate and House at-large candidates will have District 00. (optional)
     * @param hasRaisedFunds A boolean that describes if a candidate&#39;s committee has ever received any receipts for their campaign for this particular office. (Candidates have separate candidate IDs for each office.) (optional)
     * @param party Three-letter code for the party affiliated with a candidate or committee. For example, DEM for Democratic Party and REP for Republican Party. (optional)
     * @param sortNullsLast Toggle that sorts null values last (optional, default to false)
     * @param isActiveCandidate  Candidates who are actively seeking office. If no value is specified, all candidates are returned. When True is specified, only active candidates are returned. When False is specified, only inactive candidates are returned.  (optional)
     * @param page For paginating through results, starting at page 1 (optional, default to 1)
     * @param state US state or territory where a candidate runs for office (optional)
     * @param year Retrieve records pertaining to a particular election year. The list of election years is based on a candidate filing a statement of candidacy (F2) for that year. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call candidatesGetAsync(String apiKey, List<String> incumbentChallenge, LocalDate minFirstFileDate, List<String> q, List<Integer> cycle, Boolean sortNullOnly, Boolean federalFundsFlag, Boolean sortHideNull, List<String> candidateId, List<String> name, Integer perPage, List<Integer> electionYear, List<String> office, String sort, List<String> candidateStatus, LocalDate maxFirstFileDate, List<String> district, Boolean hasRaisedFunds, List<String> party, Boolean sortNullsLast, Boolean isActiveCandidate, Integer page, List<String> state, String year, final ApiCallback<CandidatePage> _callback) throws ApiException {

        okhttp3.Call localVarCall = candidatesGetValidateBeforeCall(apiKey, incumbentChallenge, minFirstFileDate, q, cycle, sortNullOnly, federalFundsFlag, sortHideNull, candidateId, name, perPage, electionYear, office, sort, candidateStatus, maxFirstFileDate, district, hasRaisedFunds, party, sortNullsLast, isActiveCandidate, page, state, year, _callback);
        Type localVarReturnType = new TypeToken<CandidatePage>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for candidatesSearchGet
     * @param apiKey  API key for https://api.data.gov. Get one at https://api.data.gov/signup.  (required)
     * @param incumbentChallenge One-letter code (&#39;I&#39;, &#39;C&#39;, &#39;O&#39;) explaining if the candidate is an incumbent, a challenger, or if the seat is open. (optional)
     * @param minFirstFileDate Selects all candidates whose first filing was received by the FEC after this date. (optional)
     * @param q Name of candidate running for office (optional)
     * @param cycle  Two-year election cycle in which a candidate runs for office. Calculated from Form 2. The cycle begins with an odd year and is named for its ending, even year. This cycle follows the traditional house election cycle and subdivides the presidential and Senate elections into comparable two-year blocks. To retrieve data for the entire four years of a presidential term or six years of a senatorial term, you will need the &#x60;election_full&#x60; flag.  (optional)
     * @param sortNullOnly Toggle that filters out all rows having sort column that is non-null (optional, default to false)
     * @param federalFundsFlag A boolean the describes if a presidential candidate has accepted federal funds. The flag will be false for House and Senate candidates. (optional)
     * @param sortHideNull Hide null values on sorted column(s). (optional, default to false)
     * @param candidateId  A unique identifier assigned to each candidate registered with the FEC. If a person runs for several offices, that person will have separate candidate IDs for each office. First character indicates office - [P]residential, [H]ouse, [S]enate]. Second character is the last digit of the two-year period the ID was created. Third and fourth is the candidate state. Presidential IDs don&#39;t have state. Fifth and sixth is the district when the candidate first ran. This does not change if the candidate/member&#39;s district changes during re-districting. Presidential IDs don&#39;t have districts. The rest is sequence.  (optional)
     * @param name Name (candidate or committee) to search for. Alias for &#39;q&#39;. (optional)
     * @param perPage The number of results returned per page. Defaults to 20. (optional, default to 20)
     * @param electionYear Year of election (optional)
     * @param office Federal office candidate runs for: H, S or P (optional)
     * @param sort Provide a field to sort by. Use &#x60;-&#x60; for descending order.  (optional, default to name)
     * @param candidateStatus One-letter code explaining if the candidate is:         - C present candidate         - F future candidate         - N not yet a candidate         - P prior candidate  (optional)
     * @param maxFirstFileDate Selects all candidates whose first filing was received by the FEC before this date. (optional)
     * @param district Two-digit US House distirict of the office the candidate is running for. Presidential, Senate and House at-large candidates will have District 00. (optional)
     * @param hasRaisedFunds A boolean that describes if a candidate&#39;s committee has ever received any receipts for their campaign for this particular office. (Candidates have separate candidate IDs for each office.) (optional)
     * @param party Three-letter code for the party affiliated with a candidate or committee. For example, DEM for Democratic Party and REP for Republican Party. (optional)
     * @param sortNullsLast Toggle that sorts null values last (optional, default to false)
     * @param isActiveCandidate  Candidates who are actively seeking office. If no value is specified, all candidates are returned. When True is specified, only active candidates are returned. When False is specified, only inactive candidates are returned.  (optional)
     * @param page For paginating through results, starting at page 1 (optional, default to 1)
     * @param state US state or territory where a candidate runs for office (optional)
     * @param year Retrieve records pertaining to a particular election year. The list of election years is based on a candidate filing a statement of candidacy (F2) for that year. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call candidatesSearchGetCall(String apiKey, List<String> incumbentChallenge, LocalDate minFirstFileDate, List<String> q, List<Integer> cycle, Boolean sortNullOnly, Boolean federalFundsFlag, Boolean sortHideNull, List<String> candidateId, List<String> name, Integer perPage, List<Integer> electionYear, List<String> office, String sort, List<String> candidateStatus, LocalDate maxFirstFileDate, List<String> district, Boolean hasRaisedFunds, List<String> party, Boolean sortNullsLast, Boolean isActiveCandidate, Integer page, List<String> state, String year, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/candidates/search/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (incumbentChallenge != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "incumbent_challenge", incumbentChallenge));
        }

        if (minFirstFileDate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("min_first_file_date", minFirstFileDate));
        }

        if (q != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "q", q));
        }

        if (cycle != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "cycle", cycle));
        }

        if (sortNullOnly != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort_null_only", sortNullOnly));
        }

        if (federalFundsFlag != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("federal_funds_flag", federalFundsFlag));
        }

        if (sortHideNull != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort_hide_null", sortHideNull));
        }

        if (candidateId != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "candidate_id", candidateId));
        }

        if (name != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "name", name));
        }

        if (perPage != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("per_page", perPage));
        }

        if (electionYear != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "election_year", electionYear));
        }

        if (office != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "office", office));
        }

        if (sort != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort", sort));
        }

        if (candidateStatus != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "candidate_status", candidateStatus));
        }

        if (maxFirstFileDate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("max_first_file_date", maxFirstFileDate));
        }

        if (district != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "district", district));
        }

        if (apiKey != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api_key", apiKey));
        }

        if (hasRaisedFunds != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("has_raised_funds", hasRaisedFunds));
        }

        if (party != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "party", party));
        }

        if (sortNullsLast != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort_nulls_last", sortNullsLast));
        }

        if (isActiveCandidate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("is_active_candidate", isActiveCandidate));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (state != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "state", state));
        }

        if (year != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("year", year));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKeyHeaderAuth", "ApiKeyQueryAuth", "apiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call candidatesSearchGetValidateBeforeCall(String apiKey, List<String> incumbentChallenge, LocalDate minFirstFileDate, List<String> q, List<Integer> cycle, Boolean sortNullOnly, Boolean federalFundsFlag, Boolean sortHideNull, List<String> candidateId, List<String> name, Integer perPage, List<Integer> electionYear, List<String> office, String sort, List<String> candidateStatus, LocalDate maxFirstFileDate, List<String> district, Boolean hasRaisedFunds, List<String> party, Boolean sortNullsLast, Boolean isActiveCandidate, Integer page, List<String> state, String year, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'apiKey' is set
        if (apiKey == null) {
            throw new ApiException("Missing the required parameter 'apiKey' when calling candidatesSearchGet(Async)");
        }

        return candidatesSearchGetCall(apiKey, incumbentChallenge, minFirstFileDate, q, cycle, sortNullOnly, federalFundsFlag, sortHideNull, candidateId, name, perPage, electionYear, office, sort, candidateStatus, maxFirstFileDate, district, hasRaisedFunds, party, sortNullsLast, isActiveCandidate, page, state, year, _callback);

    }

    /**
     * 
     *  Fetch basic information about candidates and their principal committees.  Each result reflects a unique FEC candidate ID. That ID is assigned to the candidate for a particular office sought. If a candidate runs for the same office over time, that ID stays the same. If the same person runs for multiple offices â€” for example, a House candidate runs for a Senate office â€” that candidate will get a unique ID for each office.  The candidate endpoints primarily use data from FEC registration [Form 1](https://www.fec.gov/pdf/forms/fecfrm1.pdf) for committee information and [Form 2](https://www.fec.gov/pdf/forms/fecfrm2.pdf) for candidate information. 
     * @param apiKey  API key for https://api.data.gov. Get one at https://api.data.gov/signup.  (required)
     * @param incumbentChallenge One-letter code (&#39;I&#39;, &#39;C&#39;, &#39;O&#39;) explaining if the candidate is an incumbent, a challenger, or if the seat is open. (optional)
     * @param minFirstFileDate Selects all candidates whose first filing was received by the FEC after this date. (optional)
     * @param q Name of candidate running for office (optional)
     * @param cycle  Two-year election cycle in which a candidate runs for office. Calculated from Form 2. The cycle begins with an odd year and is named for its ending, even year. This cycle follows the traditional house election cycle and subdivides the presidential and Senate elections into comparable two-year blocks. To retrieve data for the entire four years of a presidential term or six years of a senatorial term, you will need the &#x60;election_full&#x60; flag.  (optional)
     * @param sortNullOnly Toggle that filters out all rows having sort column that is non-null (optional, default to false)
     * @param federalFundsFlag A boolean the describes if a presidential candidate has accepted federal funds. The flag will be false for House and Senate candidates. (optional)
     * @param sortHideNull Hide null values on sorted column(s). (optional, default to false)
     * @param candidateId  A unique identifier assigned to each candidate registered with the FEC. If a person runs for several offices, that person will have separate candidate IDs for each office. First character indicates office - [P]residential, [H]ouse, [S]enate]. Second character is the last digit of the two-year period the ID was created. Third and fourth is the candidate state. Presidential IDs don&#39;t have state. Fifth and sixth is the district when the candidate first ran. This does not change if the candidate/member&#39;s district changes during re-districting. Presidential IDs don&#39;t have districts. The rest is sequence.  (optional)
     * @param name Name (candidate or committee) to search for. Alias for &#39;q&#39;. (optional)
     * @param perPage The number of results returned per page. Defaults to 20. (optional, default to 20)
     * @param electionYear Year of election (optional)
     * @param office Federal office candidate runs for: H, S or P (optional)
     * @param sort Provide a field to sort by. Use &#x60;-&#x60; for descending order.  (optional, default to name)
     * @param candidateStatus One-letter code explaining if the candidate is:         - C present candidate         - F future candidate         - N not yet a candidate         - P prior candidate  (optional)
     * @param maxFirstFileDate Selects all candidates whose first filing was received by the FEC before this date. (optional)
     * @param district Two-digit US House distirict of the office the candidate is running for. Presidential, Senate and House at-large candidates will have District 00. (optional)
     * @param hasRaisedFunds A boolean that describes if a candidate&#39;s committee has ever received any receipts for their campaign for this particular office. (Candidates have separate candidate IDs for each office.) (optional)
     * @param party Three-letter code for the party affiliated with a candidate or committee. For example, DEM for Democratic Party and REP for Republican Party. (optional)
     * @param sortNullsLast Toggle that sorts null values last (optional, default to false)
     * @param isActiveCandidate  Candidates who are actively seeking office. If no value is specified, all candidates are returned. When True is specified, only active candidates are returned. When False is specified, only inactive candidates are returned.  (optional)
     * @param page For paginating through results, starting at page 1 (optional, default to 1)
     * @param state US state or territory where a candidate runs for office (optional)
     * @param year Retrieve records pertaining to a particular election year. The list of election years is based on a candidate filing a statement of candidacy (F2) for that year. (optional)
     * @return CandidatePage
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public CandidatePage candidatesSearchGet(String apiKey, List<String> incumbentChallenge, LocalDate minFirstFileDate, List<String> q, List<Integer> cycle, Boolean sortNullOnly, Boolean federalFundsFlag, Boolean sortHideNull, List<String> candidateId, List<String> name, Integer perPage, List<Integer> electionYear, List<String> office, String sort, List<String> candidateStatus, LocalDate maxFirstFileDate, List<String> district, Boolean hasRaisedFunds, List<String> party, Boolean sortNullsLast, Boolean isActiveCandidate, Integer page, List<String> state, String year) throws ApiException {
        ApiResponse<CandidatePage> localVarResp = candidatesSearchGetWithHttpInfo(apiKey, incumbentChallenge, minFirstFileDate, q, cycle, sortNullOnly, federalFundsFlag, sortHideNull, candidateId, name, perPage, electionYear, office, sort, candidateStatus, maxFirstFileDate, district, hasRaisedFunds, party, sortNullsLast, isActiveCandidate, page, state, year);
        return localVarResp.getData();
    }

    /**
     * 
     *  Fetch basic information about candidates and their principal committees.  Each result reflects a unique FEC candidate ID. That ID is assigned to the candidate for a particular office sought. If a candidate runs for the same office over time, that ID stays the same. If the same person runs for multiple offices â€” for example, a House candidate runs for a Senate office â€” that candidate will get a unique ID for each office.  The candidate endpoints primarily use data from FEC registration [Form 1](https://www.fec.gov/pdf/forms/fecfrm1.pdf) for committee information and [Form 2](https://www.fec.gov/pdf/forms/fecfrm2.pdf) for candidate information. 
     * @param apiKey  API key for https://api.data.gov. Get one at https://api.data.gov/signup.  (required)
     * @param incumbentChallenge One-letter code (&#39;I&#39;, &#39;C&#39;, &#39;O&#39;) explaining if the candidate is an incumbent, a challenger, or if the seat is open. (optional)
     * @param minFirstFileDate Selects all candidates whose first filing was received by the FEC after this date. (optional)
     * @param q Name of candidate running for office (optional)
     * @param cycle  Two-year election cycle in which a candidate runs for office. Calculated from Form 2. The cycle begins with an odd year and is named for its ending, even year. This cycle follows the traditional house election cycle and subdivides the presidential and Senate elections into comparable two-year blocks. To retrieve data for the entire four years of a presidential term or six years of a senatorial term, you will need the &#x60;election_full&#x60; flag.  (optional)
     * @param sortNullOnly Toggle that filters out all rows having sort column that is non-null (optional, default to false)
     * @param federalFundsFlag A boolean the describes if a presidential candidate has accepted federal funds. The flag will be false for House and Senate candidates. (optional)
     * @param sortHideNull Hide null values on sorted column(s). (optional, default to false)
     * @param candidateId  A unique identifier assigned to each candidate registered with the FEC. If a person runs for several offices, that person will have separate candidate IDs for each office. First character indicates office - [P]residential, [H]ouse, [S]enate]. Second character is the last digit of the two-year period the ID was created. Third and fourth is the candidate state. Presidential IDs don&#39;t have state. Fifth and sixth is the district when the candidate first ran. This does not change if the candidate/member&#39;s district changes during re-districting. Presidential IDs don&#39;t have districts. The rest is sequence.  (optional)
     * @param name Name (candidate or committee) to search for. Alias for &#39;q&#39;. (optional)
     * @param perPage The number of results returned per page. Defaults to 20. (optional, default to 20)
     * @param electionYear Year of election (optional)
     * @param office Federal office candidate runs for: H, S or P (optional)
     * @param sort Provide a field to sort by. Use &#x60;-&#x60; for descending order.  (optional, default to name)
     * @param candidateStatus One-letter code explaining if the candidate is:         - C present candidate         - F future candidate         - N not yet a candidate         - P prior candidate  (optional)
     * @param maxFirstFileDate Selects all candidates whose first filing was received by the FEC before this date. (optional)
     * @param district Two-digit US House distirict of the office the candidate is running for. Presidential, Senate and House at-large candidates will have District 00. (optional)
     * @param hasRaisedFunds A boolean that describes if a candidate&#39;s committee has ever received any receipts for their campaign for this particular office. (Candidates have separate candidate IDs for each office.) (optional)
     * @param party Three-letter code for the party affiliated with a candidate or committee. For example, DEM for Democratic Party and REP for Republican Party. (optional)
     * @param sortNullsLast Toggle that sorts null values last (optional, default to false)
     * @param isActiveCandidate  Candidates who are actively seeking office. If no value is specified, all candidates are returned. When True is specified, only active candidates are returned. When False is specified, only inactive candidates are returned.  (optional)
     * @param page For paginating through results, starting at page 1 (optional, default to 1)
     * @param state US state or territory where a candidate runs for office (optional)
     * @param year Retrieve records pertaining to a particular election year. The list of election years is based on a candidate filing a statement of candidacy (F2) for that year. (optional)
     * @return ApiResponse&lt;CandidatePage&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CandidatePage> candidatesSearchGetWithHttpInfo(String apiKey, List<String> incumbentChallenge, LocalDate minFirstFileDate, List<String> q, List<Integer> cycle, Boolean sortNullOnly, Boolean federalFundsFlag, Boolean sortHideNull, List<String> candidateId, List<String> name, Integer perPage, List<Integer> electionYear, List<String> office, String sort, List<String> candidateStatus, LocalDate maxFirstFileDate, List<String> district, Boolean hasRaisedFunds, List<String> party, Boolean sortNullsLast, Boolean isActiveCandidate, Integer page, List<String> state, String year) throws ApiException {
        okhttp3.Call localVarCall = candidatesSearchGetValidateBeforeCall(apiKey, incumbentChallenge, minFirstFileDate, q, cycle, sortNullOnly, federalFundsFlag, sortHideNull, candidateId, name, perPage, electionYear, office, sort, candidateStatus, maxFirstFileDate, district, hasRaisedFunds, party, sortNullsLast, isActiveCandidate, page, state, year, null);
        Type localVarReturnType = new TypeToken<CandidatePage>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     *  Fetch basic information about candidates and their principal committees.  Each result reflects a unique FEC candidate ID. That ID is assigned to the candidate for a particular office sought. If a candidate runs for the same office over time, that ID stays the same. If the same person runs for multiple offices â€” for example, a House candidate runs for a Senate office â€” that candidate will get a unique ID for each office.  The candidate endpoints primarily use data from FEC registration [Form 1](https://www.fec.gov/pdf/forms/fecfrm1.pdf) for committee information and [Form 2](https://www.fec.gov/pdf/forms/fecfrm2.pdf) for candidate information. 
     * @param apiKey  API key for https://api.data.gov. Get one at https://api.data.gov/signup.  (required)
     * @param incumbentChallenge One-letter code (&#39;I&#39;, &#39;C&#39;, &#39;O&#39;) explaining if the candidate is an incumbent, a challenger, or if the seat is open. (optional)
     * @param minFirstFileDate Selects all candidates whose first filing was received by the FEC after this date. (optional)
     * @param q Name of candidate running for office (optional)
     * @param cycle  Two-year election cycle in which a candidate runs for office. Calculated from Form 2. The cycle begins with an odd year and is named for its ending, even year. This cycle follows the traditional house election cycle and subdivides the presidential and Senate elections into comparable two-year blocks. To retrieve data for the entire four years of a presidential term or six years of a senatorial term, you will need the &#x60;election_full&#x60; flag.  (optional)
     * @param sortNullOnly Toggle that filters out all rows having sort column that is non-null (optional, default to false)
     * @param federalFundsFlag A boolean the describes if a presidential candidate has accepted federal funds. The flag will be false for House and Senate candidates. (optional)
     * @param sortHideNull Hide null values on sorted column(s). (optional, default to false)
     * @param candidateId  A unique identifier assigned to each candidate registered with the FEC. If a person runs for several offices, that person will have separate candidate IDs for each office. First character indicates office - [P]residential, [H]ouse, [S]enate]. Second character is the last digit of the two-year period the ID was created. Third and fourth is the candidate state. Presidential IDs don&#39;t have state. Fifth and sixth is the district when the candidate first ran. This does not change if the candidate/member&#39;s district changes during re-districting. Presidential IDs don&#39;t have districts. The rest is sequence.  (optional)
     * @param name Name (candidate or committee) to search for. Alias for &#39;q&#39;. (optional)
     * @param perPage The number of results returned per page. Defaults to 20. (optional, default to 20)
     * @param electionYear Year of election (optional)
     * @param office Federal office candidate runs for: H, S or P (optional)
     * @param sort Provide a field to sort by. Use &#x60;-&#x60; for descending order.  (optional, default to name)
     * @param candidateStatus One-letter code explaining if the candidate is:         - C present candidate         - F future candidate         - N not yet a candidate         - P prior candidate  (optional)
     * @param maxFirstFileDate Selects all candidates whose first filing was received by the FEC before this date. (optional)
     * @param district Two-digit US House distirict of the office the candidate is running for. Presidential, Senate and House at-large candidates will have District 00. (optional)
     * @param hasRaisedFunds A boolean that describes if a candidate&#39;s committee has ever received any receipts for their campaign for this particular office. (Candidates have separate candidate IDs for each office.) (optional)
     * @param party Three-letter code for the party affiliated with a candidate or committee. For example, DEM for Democratic Party and REP for Republican Party. (optional)
     * @param sortNullsLast Toggle that sorts null values last (optional, default to false)
     * @param isActiveCandidate  Candidates who are actively seeking office. If no value is specified, all candidates are returned. When True is specified, only active candidates are returned. When False is specified, only inactive candidates are returned.  (optional)
     * @param page For paginating through results, starting at page 1 (optional, default to 1)
     * @param state US state or territory where a candidate runs for office (optional)
     * @param year Retrieve records pertaining to a particular election year. The list of election years is based on a candidate filing a statement of candidacy (F2) for that year. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call candidatesSearchGetAsync(String apiKey, List<String> incumbentChallenge, LocalDate minFirstFileDate, List<String> q, List<Integer> cycle, Boolean sortNullOnly, Boolean federalFundsFlag, Boolean sortHideNull, List<String> candidateId, List<String> name, Integer perPage, List<Integer> electionYear, List<String> office, String sort, List<String> candidateStatus, LocalDate maxFirstFileDate, List<String> district, Boolean hasRaisedFunds, List<String> party, Boolean sortNullsLast, Boolean isActiveCandidate, Integer page, List<String> state, String year, final ApiCallback<CandidatePage> _callback) throws ApiException {

        okhttp3.Call localVarCall = candidatesSearchGetValidateBeforeCall(apiKey, incumbentChallenge, minFirstFileDate, q, cycle, sortNullOnly, federalFundsFlag, sortHideNull, candidateId, name, perPage, electionYear, office, sort, candidateStatus, maxFirstFileDate, district, hasRaisedFunds, party, sortNullsLast, isActiveCandidate, page, state, year, _callback);
        Type localVarReturnType = new TypeToken<CandidatePage>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for candidatesTotalsAggregatesGet
     * @param apiKey  API key for https://api.data.gov. Get one at https://api.data.gov/signup.  (required)
     * @param maxElectionCycle  Filter records to only those that are applicable to a given two-year period. This cycle follows the traditional House election cycle and subdivides the presidential and Senate elections into comparable two-year blocks. The cycle begins with an odd year and is named for its ending, even year.  (optional)
     * @param sortNullOnly Toggle that filters out all rows having sort column that is non-null (optional, default to false)
     * @param sortHideNull Hide null values on sorted column(s). (optional, default to false)
     * @param perPage The number of results returned per page. Defaults to 20. (optional, default to 20)
     * @param electionYear  Filter records to only those that were applicable to a given two-year period.The cycle begins with an odd year and is named for its ending, even year.  (optional)
     * @param office Federal office candidate runs for: H, S or P (optional)
     * @param sort  Provide a field to sort by. Use &#x60;-&#x60; for descending order. ex: &#x60;-case_no&#x60;  (optional)
     * @param minElectionCycle  Filter records to only those that are applicable to a given two-year period. This cycle follows the traditional House election cycle and subdivides the presidential and Senate elections into comparable two-year blocks. The cycle begins with an odd year and is named for its ending, even year.  (optional)
     * @param district Two-digit US House distirict of the office the candidate is running for. Presidential, Senate and House at-large candidates will have District 00. (optional)
     * @param electionFull &#x60;True&#x60; indicates that full election period of a candidate. &#x60;False&#x60; indicates that two year election cycle. (optional, default to true)
     * @param party Three-letter code for the party affiliated with a candidate or committee. For example, DEM for Democratic Party and REP for Republican Party. (optional)
     * @param isActiveCandidate  Candidates who are actively seeking office. If no value is specified, all candidates are returned. When True is specified, only active candidates are returned. When False is specified, only inactive candidates are returned.  (optional)
     * @param page For paginating through results, starting at page 1 (optional, default to 1)
     * @param state US state or territory where a candidate runs for office (optional)
     * @param sortNullsLast Toggle that sorts null values last (optional, default to false)
     * @param aggregateBy Candidate totals aggregate_by (Chose one of dropdown options):         - &#39; &#39; grouped by election year         - office grouped by election year, by office         - office-state grouped by election year, by office, by state         - office-state-district grouped by election year, by office, by state, by district         - office-party grouped by election year, by office, by party  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call candidatesTotalsAggregatesGetCall(String apiKey, Integer maxElectionCycle, Boolean sortNullOnly, Boolean sortHideNull, Integer perPage, List<Integer> electionYear, String office, List<String> sort, Integer minElectionCycle, List<String> district, Boolean electionFull, String party, Boolean isActiveCandidate, Integer page, List<String> state, Boolean sortNullsLast, String aggregateBy, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/candidates/totals/aggregates/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (maxElectionCycle != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("max_election_cycle", maxElectionCycle));
        }

        if (sortNullOnly != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort_null_only", sortNullOnly));
        }

        if (sortHideNull != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort_hide_null", sortHideNull));
        }

        if (perPage != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("per_page", perPage));
        }

        if (electionYear != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "election_year", electionYear));
        }

        if (office != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("office", office));
        }

        if (sort != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "sort", sort));
        }

        if (minElectionCycle != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("min_election_cycle", minElectionCycle));
        }

        if (district != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "district", district));
        }

        if (apiKey != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api_key", apiKey));
        }

        if (electionFull != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("election_full", electionFull));
        }

        if (party != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("party", party));
        }

        if (isActiveCandidate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("is_active_candidate", isActiveCandidate));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (state != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "state", state));
        }

        if (sortNullsLast != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort_nulls_last", sortNullsLast));
        }

        if (aggregateBy != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("aggregate_by", aggregateBy));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKeyHeaderAuth", "ApiKeyQueryAuth", "apiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call candidatesTotalsAggregatesGetValidateBeforeCall(String apiKey, Integer maxElectionCycle, Boolean sortNullOnly, Boolean sortHideNull, Integer perPage, List<Integer> electionYear, String office, List<String> sort, Integer minElectionCycle, List<String> district, Boolean electionFull, String party, Boolean isActiveCandidate, Integer page, List<String> state, Boolean sortNullsLast, String aggregateBy, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'apiKey' is set
        if (apiKey == null) {
            throw new ApiException("Missing the required parameter 'apiKey' when calling candidatesTotalsAggregatesGet(Async)");
        }

        return candidatesTotalsAggregatesGetCall(apiKey, maxElectionCycle, sortNullOnly, sortHideNull, perPage, electionYear, office, sort, minElectionCycle, district, electionFull, party, isActiveCandidate, page, state, sortNullsLast, aggregateBy, _callback);

    }

    /**
     * 
     *  Candidate total receipts and disbursements aggregated by &#x60;aggregate_by&#x60;. 
     * @param apiKey  API key for https://api.data.gov. Get one at https://api.data.gov/signup.  (required)
     * @param maxElectionCycle  Filter records to only those that are applicable to a given two-year period. This cycle follows the traditional House election cycle and subdivides the presidential and Senate elections into comparable two-year blocks. The cycle begins with an odd year and is named for its ending, even year.  (optional)
     * @param sortNullOnly Toggle that filters out all rows having sort column that is non-null (optional, default to false)
     * @param sortHideNull Hide null values on sorted column(s). (optional, default to false)
     * @param perPage The number of results returned per page. Defaults to 20. (optional, default to 20)
     * @param electionYear  Filter records to only those that were applicable to a given two-year period.The cycle begins with an odd year and is named for its ending, even year.  (optional)
     * @param office Federal office candidate runs for: H, S or P (optional)
     * @param sort  Provide a field to sort by. Use &#x60;-&#x60; for descending order. ex: &#x60;-case_no&#x60;  (optional)
     * @param minElectionCycle  Filter records to only those that are applicable to a given two-year period. This cycle follows the traditional House election cycle and subdivides the presidential and Senate elections into comparable two-year blocks. The cycle begins with an odd year and is named for its ending, even year.  (optional)
     * @param district Two-digit US House distirict of the office the candidate is running for. Presidential, Senate and House at-large candidates will have District 00. (optional)
     * @param electionFull &#x60;True&#x60; indicates that full election period of a candidate. &#x60;False&#x60; indicates that two year election cycle. (optional, default to true)
     * @param party Three-letter code for the party affiliated with a candidate or committee. For example, DEM for Democratic Party and REP for Republican Party. (optional)
     * @param isActiveCandidate  Candidates who are actively seeking office. If no value is specified, all candidates are returned. When True is specified, only active candidates are returned. When False is specified, only inactive candidates are returned.  (optional)
     * @param page For paginating through results, starting at page 1 (optional, default to 1)
     * @param state US state or territory where a candidate runs for office (optional)
     * @param sortNullsLast Toggle that sorts null values last (optional, default to false)
     * @param aggregateBy Candidate totals aggregate_by (Chose one of dropdown options):         - &#39; &#39; grouped by election year         - office grouped by election year, by office         - office-state grouped by election year, by office, by state         - office-state-district grouped by election year, by office, by state, by district         - office-party grouped by election year, by office, by party  (optional)
     * @return CandidateTotalAggregatePage
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public CandidateTotalAggregatePage candidatesTotalsAggregatesGet(String apiKey, Integer maxElectionCycle, Boolean sortNullOnly, Boolean sortHideNull, Integer perPage, List<Integer> electionYear, String office, List<String> sort, Integer minElectionCycle, List<String> district, Boolean electionFull, String party, Boolean isActiveCandidate, Integer page, List<String> state, Boolean sortNullsLast, String aggregateBy) throws ApiException {
        ApiResponse<CandidateTotalAggregatePage> localVarResp = candidatesTotalsAggregatesGetWithHttpInfo(apiKey, maxElectionCycle, sortNullOnly, sortHideNull, perPage, electionYear, office, sort, minElectionCycle, district, electionFull, party, isActiveCandidate, page, state, sortNullsLast, aggregateBy);
        return localVarResp.getData();
    }

    /**
     * 
     *  Candidate total receipts and disbursements aggregated by &#x60;aggregate_by&#x60;. 
     * @param apiKey  API key for https://api.data.gov. Get one at https://api.data.gov/signup.  (required)
     * @param maxElectionCycle  Filter records to only those that are applicable to a given two-year period. This cycle follows the traditional House election cycle and subdivides the presidential and Senate elections into comparable two-year blocks. The cycle begins with an odd year and is named for its ending, even year.  (optional)
     * @param sortNullOnly Toggle that filters out all rows having sort column that is non-null (optional, default to false)
     * @param sortHideNull Hide null values on sorted column(s). (optional, default to false)
     * @param perPage The number of results returned per page. Defaults to 20. (optional, default to 20)
     * @param electionYear  Filter records to only those that were applicable to a given two-year period.The cycle begins with an odd year and is named for its ending, even year.  (optional)
     * @param office Federal office candidate runs for: H, S or P (optional)
     * @param sort  Provide a field to sort by. Use &#x60;-&#x60; for descending order. ex: &#x60;-case_no&#x60;  (optional)
     * @param minElectionCycle  Filter records to only those that are applicable to a given two-year period. This cycle follows the traditional House election cycle and subdivides the presidential and Senate elections into comparable two-year blocks. The cycle begins with an odd year and is named for its ending, even year.  (optional)
     * @param district Two-digit US House distirict of the office the candidate is running for. Presidential, Senate and House at-large candidates will have District 00. (optional)
     * @param electionFull &#x60;True&#x60; indicates that full election period of a candidate. &#x60;False&#x60; indicates that two year election cycle. (optional, default to true)
     * @param party Three-letter code for the party affiliated with a candidate or committee. For example, DEM for Democratic Party and REP for Republican Party. (optional)
     * @param isActiveCandidate  Candidates who are actively seeking office. If no value is specified, all candidates are returned. When True is specified, only active candidates are returned. When False is specified, only inactive candidates are returned.  (optional)
     * @param page For paginating through results, starting at page 1 (optional, default to 1)
     * @param state US state or territory where a candidate runs for office (optional)
     * @param sortNullsLast Toggle that sorts null values last (optional, default to false)
     * @param aggregateBy Candidate totals aggregate_by (Chose one of dropdown options):         - &#39; &#39; grouped by election year         - office grouped by election year, by office         - office-state grouped by election year, by office, by state         - office-state-district grouped by election year, by office, by state, by district         - office-party grouped by election year, by office, by party  (optional)
     * @return ApiResponse&lt;CandidateTotalAggregatePage&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CandidateTotalAggregatePage> candidatesTotalsAggregatesGetWithHttpInfo(String apiKey, Integer maxElectionCycle, Boolean sortNullOnly, Boolean sortHideNull, Integer perPage, List<Integer> electionYear, String office, List<String> sort, Integer minElectionCycle, List<String> district, Boolean electionFull, String party, Boolean isActiveCandidate, Integer page, List<String> state, Boolean sortNullsLast, String aggregateBy) throws ApiException {
        okhttp3.Call localVarCall = candidatesTotalsAggregatesGetValidateBeforeCall(apiKey, maxElectionCycle, sortNullOnly, sortHideNull, perPage, electionYear, office, sort, minElectionCycle, district, electionFull, party, isActiveCandidate, page, state, sortNullsLast, aggregateBy, null);
        Type localVarReturnType = new TypeToken<CandidateTotalAggregatePage>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     *  Candidate total receipts and disbursements aggregated by &#x60;aggregate_by&#x60;. 
     * @param apiKey  API key for https://api.data.gov. Get one at https://api.data.gov/signup.  (required)
     * @param maxElectionCycle  Filter records to only those that are applicable to a given two-year period. This cycle follows the traditional House election cycle and subdivides the presidential and Senate elections into comparable two-year blocks. The cycle begins with an odd year and is named for its ending, even year.  (optional)
     * @param sortNullOnly Toggle that filters out all rows having sort column that is non-null (optional, default to false)
     * @param sortHideNull Hide null values on sorted column(s). (optional, default to false)
     * @param perPage The number of results returned per page. Defaults to 20. (optional, default to 20)
     * @param electionYear  Filter records to only those that were applicable to a given two-year period.The cycle begins with an odd year and is named for its ending, even year.  (optional)
     * @param office Federal office candidate runs for: H, S or P (optional)
     * @param sort  Provide a field to sort by. Use &#x60;-&#x60; for descending order. ex: &#x60;-case_no&#x60;  (optional)
     * @param minElectionCycle  Filter records to only those that are applicable to a given two-year period. This cycle follows the traditional House election cycle and subdivides the presidential and Senate elections into comparable two-year blocks. The cycle begins with an odd year and is named for its ending, even year.  (optional)
     * @param district Two-digit US House distirict of the office the candidate is running for. Presidential, Senate and House at-large candidates will have District 00. (optional)
     * @param electionFull &#x60;True&#x60; indicates that full election period of a candidate. &#x60;False&#x60; indicates that two year election cycle. (optional, default to true)
     * @param party Three-letter code for the party affiliated with a candidate or committee. For example, DEM for Democratic Party and REP for Republican Party. (optional)
     * @param isActiveCandidate  Candidates who are actively seeking office. If no value is specified, all candidates are returned. When True is specified, only active candidates are returned. When False is specified, only inactive candidates are returned.  (optional)
     * @param page For paginating through results, starting at page 1 (optional, default to 1)
     * @param state US state or territory where a candidate runs for office (optional)
     * @param sortNullsLast Toggle that sorts null values last (optional, default to false)
     * @param aggregateBy Candidate totals aggregate_by (Chose one of dropdown options):         - &#39; &#39; grouped by election year         - office grouped by election year, by office         - office-state grouped by election year, by office, by state         - office-state-district grouped by election year, by office, by state, by district         - office-party grouped by election year, by office, by party  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call candidatesTotalsAggregatesGetAsync(String apiKey, Integer maxElectionCycle, Boolean sortNullOnly, Boolean sortHideNull, Integer perPage, List<Integer> electionYear, String office, List<String> sort, Integer minElectionCycle, List<String> district, Boolean electionFull, String party, Boolean isActiveCandidate, Integer page, List<String> state, Boolean sortNullsLast, String aggregateBy, final ApiCallback<CandidateTotalAggregatePage> _callback) throws ApiException {

        okhttp3.Call localVarCall = candidatesTotalsAggregatesGetValidateBeforeCall(apiKey, maxElectionCycle, sortNullOnly, sortHideNull, perPage, electionYear, office, sort, minElectionCycle, district, electionFull, party, isActiveCandidate, page, state, sortNullsLast, aggregateBy, _callback);
        Type localVarReturnType = new TypeToken<CandidateTotalAggregatePage>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for candidatesTotalsByOfficeByPartyGet
     * @param apiKey  API key for https://api.data.gov. Get one at https://api.data.gov/signup.  (required)
     * @param electionFull &#x60;True&#x60; indicates that full election period of a candidate. &#x60;False&#x60; indicates that two year election cycle. (optional, default to true)
     * @param sortNullOnly Toggle that filters out all rows having sort column that is non-null (optional, default to false)
     * @param page For paginating through results, starting at page 1 (optional, default to 1)
     * @param isActiveCandidate  Candidates who are actively seeking office. If no value is specified, all candidates are returned. When True is specified, only active candidates are returned. When False is specified, only inactive candidates are returned.  (optional)
     * @param sortNullsLast Toggle that sorts null values last (optional, default to false)
     * @param electionYear  Filter records to only those that were applicable to a given two-year period.The cycle begins with an odd year and is named for its ending, even year.  (optional)
     * @param sortHideNull Hide null values on sorted column(s). (optional, default to false)
     * @param perPage The number of results returned per page. Defaults to 20. (optional, default to 20)
     * @param office Federal office candidate runs for: H, S or P (optional)
     * @param sort Provide a field to sort by. Use &#x60;-&#x60; for descending order.  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call candidatesTotalsByOfficeByPartyGetCall(String apiKey, Boolean electionFull, Boolean sortNullOnly, Integer page, Boolean isActiveCandidate, Boolean sortNullsLast, List<Integer> electionYear, Boolean sortHideNull, Integer perPage, String office, String sort, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/candidates/totals/by_office/by_party/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiKey != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api_key", apiKey));
        }

        if (electionFull != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("election_full", electionFull));
        }

        if (sortNullOnly != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort_null_only", sortNullOnly));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (isActiveCandidate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("is_active_candidate", isActiveCandidate));
        }

        if (sortNullsLast != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort_nulls_last", sortNullsLast));
        }

        if (electionYear != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "election_year", electionYear));
        }

        if (sortHideNull != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort_hide_null", sortHideNull));
        }

        if (perPage != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("per_page", perPage));
        }

        if (office != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("office", office));
        }

        if (sort != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort", sort));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKeyHeaderAuth", "ApiKeyQueryAuth", "apiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call candidatesTotalsByOfficeByPartyGetValidateBeforeCall(String apiKey, Boolean electionFull, Boolean sortNullOnly, Integer page, Boolean isActiveCandidate, Boolean sortNullsLast, List<Integer> electionYear, Boolean sortHideNull, Integer perPage, String office, String sort, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'apiKey' is set
        if (apiKey == null) {
            throw new ApiException("Missing the required parameter 'apiKey' when calling candidatesTotalsByOfficeByPartyGet(Async)");
        }

        return candidatesTotalsByOfficeByPartyGetCall(apiKey, electionFull, sortNullOnly, page, isActiveCandidate, sortNullsLast, electionYear, sortHideNull, perPage, office, sort, _callback);

    }

    /**
     * 
     *  Aggregated candidate receipts and disbursements grouped by office by party by cycle. 
     * @param apiKey  API key for https://api.data.gov. Get one at https://api.data.gov/signup.  (required)
     * @param electionFull &#x60;True&#x60; indicates that full election period of a candidate. &#x60;False&#x60; indicates that two year election cycle. (optional, default to true)
     * @param sortNullOnly Toggle that filters out all rows having sort column that is non-null (optional, default to false)
     * @param page For paginating through results, starting at page 1 (optional, default to 1)
     * @param isActiveCandidate  Candidates who are actively seeking office. If no value is specified, all candidates are returned. When True is specified, only active candidates are returned. When False is specified, only inactive candidates are returned.  (optional)
     * @param sortNullsLast Toggle that sorts null values last (optional, default to false)
     * @param electionYear  Filter records to only those that were applicable to a given two-year period.The cycle begins with an odd year and is named for its ending, even year.  (optional)
     * @param sortHideNull Hide null values on sorted column(s). (optional, default to false)
     * @param perPage The number of results returned per page. Defaults to 20. (optional, default to 20)
     * @param office Federal office candidate runs for: H, S or P (optional)
     * @param sort Provide a field to sort by. Use &#x60;-&#x60; for descending order.  (optional)
     * @return TotalByOfficeByPartyPage
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public TotalByOfficeByPartyPage candidatesTotalsByOfficeByPartyGet(String apiKey, Boolean electionFull, Boolean sortNullOnly, Integer page, Boolean isActiveCandidate, Boolean sortNullsLast, List<Integer> electionYear, Boolean sortHideNull, Integer perPage, String office, String sort) throws ApiException {
        ApiResponse<TotalByOfficeByPartyPage> localVarResp = candidatesTotalsByOfficeByPartyGetWithHttpInfo(apiKey, electionFull, sortNullOnly, page, isActiveCandidate, sortNullsLast, electionYear, sortHideNull, perPage, office, sort);
        return localVarResp.getData();
    }

    /**
     * 
     *  Aggregated candidate receipts and disbursements grouped by office by party by cycle. 
     * @param apiKey  API key for https://api.data.gov. Get one at https://api.data.gov/signup.  (required)
     * @param electionFull &#x60;True&#x60; indicates that full election period of a candidate. &#x60;False&#x60; indicates that two year election cycle. (optional, default to true)
     * @param sortNullOnly Toggle that filters out all rows having sort column that is non-null (optional, default to false)
     * @param page For paginating through results, starting at page 1 (optional, default to 1)
     * @param isActiveCandidate  Candidates who are actively seeking office. If no value is specified, all candidates are returned. When True is specified, only active candidates are returned. When False is specified, only inactive candidates are returned.  (optional)
     * @param sortNullsLast Toggle that sorts null values last (optional, default to false)
     * @param electionYear  Filter records to only those that were applicable to a given two-year period.The cycle begins with an odd year and is named for its ending, even year.  (optional)
     * @param sortHideNull Hide null values on sorted column(s). (optional, default to false)
     * @param perPage The number of results returned per page. Defaults to 20. (optional, default to 20)
     * @param office Federal office candidate runs for: H, S or P (optional)
     * @param sort Provide a field to sort by. Use &#x60;-&#x60; for descending order.  (optional)
     * @return ApiResponse&lt;TotalByOfficeByPartyPage&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<TotalByOfficeByPartyPage> candidatesTotalsByOfficeByPartyGetWithHttpInfo(String apiKey, Boolean electionFull, Boolean sortNullOnly, Integer page, Boolean isActiveCandidate, Boolean sortNullsLast, List<Integer> electionYear, Boolean sortHideNull, Integer perPage, String office, String sort) throws ApiException {
        okhttp3.Call localVarCall = candidatesTotalsByOfficeByPartyGetValidateBeforeCall(apiKey, electionFull, sortNullOnly, page, isActiveCandidate, sortNullsLast, electionYear, sortHideNull, perPage, office, sort, null);
        Type localVarReturnType = new TypeToken<TotalByOfficeByPartyPage>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     *  Aggregated candidate receipts and disbursements grouped by office by party by cycle. 
     * @param apiKey  API key for https://api.data.gov. Get one at https://api.data.gov/signup.  (required)
     * @param electionFull &#x60;True&#x60; indicates that full election period of a candidate. &#x60;False&#x60; indicates that two year election cycle. (optional, default to true)
     * @param sortNullOnly Toggle that filters out all rows having sort column that is non-null (optional, default to false)
     * @param page For paginating through results, starting at page 1 (optional, default to 1)
     * @param isActiveCandidate  Candidates who are actively seeking office. If no value is specified, all candidates are returned. When True is specified, only active candidates are returned. When False is specified, only inactive candidates are returned.  (optional)
     * @param sortNullsLast Toggle that sorts null values last (optional, default to false)
     * @param electionYear  Filter records to only those that were applicable to a given two-year period.The cycle begins with an odd year and is named for its ending, even year.  (optional)
     * @param sortHideNull Hide null values on sorted column(s). (optional, default to false)
     * @param perPage The number of results returned per page. Defaults to 20. (optional, default to 20)
     * @param office Federal office candidate runs for: H, S or P (optional)
     * @param sort Provide a field to sort by. Use &#x60;-&#x60; for descending order.  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call candidatesTotalsByOfficeByPartyGetAsync(String apiKey, Boolean electionFull, Boolean sortNullOnly, Integer page, Boolean isActiveCandidate, Boolean sortNullsLast, List<Integer> electionYear, Boolean sortHideNull, Integer perPage, String office, String sort, final ApiCallback<TotalByOfficeByPartyPage> _callback) throws ApiException {

        okhttp3.Call localVarCall = candidatesTotalsByOfficeByPartyGetValidateBeforeCall(apiKey, electionFull, sortNullOnly, page, isActiveCandidate, sortNullsLast, electionYear, sortHideNull, perPage, office, sort, _callback);
        Type localVarReturnType = new TypeToken<TotalByOfficeByPartyPage>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for candidatesTotalsByOfficeGet
     * @param apiKey  API key for https://api.data.gov. Get one at https://api.data.gov/signup.  (required)
     * @param maxElectionCycle  Filter records to only those that are applicable to a given two-year period. This cycle follows the traditional House election cycle and subdivides the presidential and Senate elections into comparable two-year blocks. The cycle begins with an odd year and is named for its ending, even year.  (optional)
     * @param electionFull &#x60;True&#x60; indicates that full election period of a candidate. &#x60;False&#x60; indicates that two year election cycle. (optional, default to true)
     * @param isActiveCandidate  Candidates who are actively seeking office. If no value is specified, all candidates are returned. When True is specified, only active candidates are returned. When False is specified, only inactive candidates are returned.  (optional)
     * @param page For paginating through results, starting at page 1 (optional, default to 1)
     * @param sortNullOnly Toggle that filters out all rows having sort column that is non-null (optional, default to false)
     * @param sortNullsLast Toggle that sorts null values last (optional, default to false)
     * @param electionYear  Filter records to only those that were applicable to a given two-year period.The cycle begins with an odd year and is named for its ending, even year.  (optional)
     * @param sortHideNull Hide null values on sorted column(s). (optional, default to false)
     * @param perPage The number of results returned per page. Defaults to 20. (optional, default to 20)
     * @param office Federal office candidate runs for: H, S or P (optional)
     * @param sort Provide a field to sort by. Use &#x60;-&#x60; for descending order.  (optional)
     * @param minElectionCycle  Filter records to only those that are applicable to a given two-year period. This cycle follows the traditional House election cycle and subdivides the presidential and Senate elections into comparable two-year blocks. The cycle begins with an odd year and is named for its ending, even year.  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call candidatesTotalsByOfficeGetCall(String apiKey, Integer maxElectionCycle, Boolean electionFull, Boolean isActiveCandidate, Integer page, Boolean sortNullOnly, Boolean sortNullsLast, List<Integer> electionYear, Boolean sortHideNull, Integer perPage, String office, String sort, Integer minElectionCycle, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/candidates/totals/by_office/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiKey != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api_key", apiKey));
        }

        if (maxElectionCycle != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("max_election_cycle", maxElectionCycle));
        }

        if (electionFull != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("election_full", electionFull));
        }

        if (isActiveCandidate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("is_active_candidate", isActiveCandidate));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (sortNullOnly != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort_null_only", sortNullOnly));
        }

        if (sortNullsLast != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort_nulls_last", sortNullsLast));
        }

        if (electionYear != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "election_year", electionYear));
        }

        if (sortHideNull != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort_hide_null", sortHideNull));
        }

        if (perPage != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("per_page", perPage));
        }

        if (office != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("office", office));
        }

        if (sort != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort", sort));
        }

        if (minElectionCycle != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("min_election_cycle", minElectionCycle));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKeyHeaderAuth", "ApiKeyQueryAuth", "apiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call candidatesTotalsByOfficeGetValidateBeforeCall(String apiKey, Integer maxElectionCycle, Boolean electionFull, Boolean isActiveCandidate, Integer page, Boolean sortNullOnly, Boolean sortNullsLast, List<Integer> electionYear, Boolean sortHideNull, Integer perPage, String office, String sort, Integer minElectionCycle, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'apiKey' is set
        if (apiKey == null) {
            throw new ApiException("Missing the required parameter 'apiKey' when calling candidatesTotalsByOfficeGet(Async)");
        }

        return candidatesTotalsByOfficeGetCall(apiKey, maxElectionCycle, electionFull, isActiveCandidate, page, sortNullOnly, sortNullsLast, electionYear, sortHideNull, perPage, office, sort, minElectionCycle, _callback);

    }

    /**
     * 
     *  Aggregated candidate receipts and disbursements grouped by office by cycle. 
     * @param apiKey  API key for https://api.data.gov. Get one at https://api.data.gov/signup.  (required)
     * @param maxElectionCycle  Filter records to only those that are applicable to a given two-year period. This cycle follows the traditional House election cycle and subdivides the presidential and Senate elections into comparable two-year blocks. The cycle begins with an odd year and is named for its ending, even year.  (optional)
     * @param electionFull &#x60;True&#x60; indicates that full election period of a candidate. &#x60;False&#x60; indicates that two year election cycle. (optional, default to true)
     * @param isActiveCandidate  Candidates who are actively seeking office. If no value is specified, all candidates are returned. When True is specified, only active candidates are returned. When False is specified, only inactive candidates are returned.  (optional)
     * @param page For paginating through results, starting at page 1 (optional, default to 1)
     * @param sortNullOnly Toggle that filters out all rows having sort column that is non-null (optional, default to false)
     * @param sortNullsLast Toggle that sorts null values last (optional, default to false)
     * @param electionYear  Filter records to only those that were applicable to a given two-year period.The cycle begins with an odd year and is named for its ending, even year.  (optional)
     * @param sortHideNull Hide null values on sorted column(s). (optional, default to false)
     * @param perPage The number of results returned per page. Defaults to 20. (optional, default to 20)
     * @param office Federal office candidate runs for: H, S or P (optional)
     * @param sort Provide a field to sort by. Use &#x60;-&#x60; for descending order.  (optional)
     * @param minElectionCycle  Filter records to only those that are applicable to a given two-year period. This cycle follows the traditional House election cycle and subdivides the presidential and Senate elections into comparable two-year blocks. The cycle begins with an odd year and is named for its ending, even year.  (optional)
     * @return TotalByOfficePage
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public TotalByOfficePage candidatesTotalsByOfficeGet(String apiKey, Integer maxElectionCycle, Boolean electionFull, Boolean isActiveCandidate, Integer page, Boolean sortNullOnly, Boolean sortNullsLast, List<Integer> electionYear, Boolean sortHideNull, Integer perPage, String office, String sort, Integer minElectionCycle) throws ApiException {
        ApiResponse<TotalByOfficePage> localVarResp = candidatesTotalsByOfficeGetWithHttpInfo(apiKey, maxElectionCycle, electionFull, isActiveCandidate, page, sortNullOnly, sortNullsLast, electionYear, sortHideNull, perPage, office, sort, minElectionCycle);
        return localVarResp.getData();
    }

    /**
     * 
     *  Aggregated candidate receipts and disbursements grouped by office by cycle. 
     * @param apiKey  API key for https://api.data.gov. Get one at https://api.data.gov/signup.  (required)
     * @param maxElectionCycle  Filter records to only those that are applicable to a given two-year period. This cycle follows the traditional House election cycle and subdivides the presidential and Senate elections into comparable two-year blocks. The cycle begins with an odd year and is named for its ending, even year.  (optional)
     * @param electionFull &#x60;True&#x60; indicates that full election period of a candidate. &#x60;False&#x60; indicates that two year election cycle. (optional, default to true)
     * @param isActiveCandidate  Candidates who are actively seeking office. If no value is specified, all candidates are returned. When True is specified, only active candidates are returned. When False is specified, only inactive candidates are returned.  (optional)
     * @param page For paginating through results, starting at page 1 (optional, default to 1)
     * @param sortNullOnly Toggle that filters out all rows having sort column that is non-null (optional, default to false)
     * @param sortNullsLast Toggle that sorts null values last (optional, default to false)
     * @param electionYear  Filter records to only those that were applicable to a given two-year period.The cycle begins with an odd year and is named for its ending, even year.  (optional)
     * @param sortHideNull Hide null values on sorted column(s). (optional, default to false)
     * @param perPage The number of results returned per page. Defaults to 20. (optional, default to 20)
     * @param office Federal office candidate runs for: H, S or P (optional)
     * @param sort Provide a field to sort by. Use &#x60;-&#x60; for descending order.  (optional)
     * @param minElectionCycle  Filter records to only those that are applicable to a given two-year period. This cycle follows the traditional House election cycle and subdivides the presidential and Senate elections into comparable two-year blocks. The cycle begins with an odd year and is named for its ending, even year.  (optional)
     * @return ApiResponse&lt;TotalByOfficePage&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<TotalByOfficePage> candidatesTotalsByOfficeGetWithHttpInfo(String apiKey, Integer maxElectionCycle, Boolean electionFull, Boolean isActiveCandidate, Integer page, Boolean sortNullOnly, Boolean sortNullsLast, List<Integer> electionYear, Boolean sortHideNull, Integer perPage, String office, String sort, Integer minElectionCycle) throws ApiException {
        okhttp3.Call localVarCall = candidatesTotalsByOfficeGetValidateBeforeCall(apiKey, maxElectionCycle, electionFull, isActiveCandidate, page, sortNullOnly, sortNullsLast, electionYear, sortHideNull, perPage, office, sort, minElectionCycle, null);
        Type localVarReturnType = new TypeToken<TotalByOfficePage>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     *  Aggregated candidate receipts and disbursements grouped by office by cycle. 
     * @param apiKey  API key for https://api.data.gov. Get one at https://api.data.gov/signup.  (required)
     * @param maxElectionCycle  Filter records to only those that are applicable to a given two-year period. This cycle follows the traditional House election cycle and subdivides the presidential and Senate elections into comparable two-year blocks. The cycle begins with an odd year and is named for its ending, even year.  (optional)
     * @param electionFull &#x60;True&#x60; indicates that full election period of a candidate. &#x60;False&#x60; indicates that two year election cycle. (optional, default to true)
     * @param isActiveCandidate  Candidates who are actively seeking office. If no value is specified, all candidates are returned. When True is specified, only active candidates are returned. When False is specified, only inactive candidates are returned.  (optional)
     * @param page For paginating through results, starting at page 1 (optional, default to 1)
     * @param sortNullOnly Toggle that filters out all rows having sort column that is non-null (optional, default to false)
     * @param sortNullsLast Toggle that sorts null values last (optional, default to false)
     * @param electionYear  Filter records to only those that were applicable to a given two-year period.The cycle begins with an odd year and is named for its ending, even year.  (optional)
     * @param sortHideNull Hide null values on sorted column(s). (optional, default to false)
     * @param perPage The number of results returned per page. Defaults to 20. (optional, default to 20)
     * @param office Federal office candidate runs for: H, S or P (optional)
     * @param sort Provide a field to sort by. Use &#x60;-&#x60; for descending order.  (optional)
     * @param minElectionCycle  Filter records to only those that are applicable to a given two-year period. This cycle follows the traditional House election cycle and subdivides the presidential and Senate elections into comparable two-year blocks. The cycle begins with an odd year and is named for its ending, even year.  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call candidatesTotalsByOfficeGetAsync(String apiKey, Integer maxElectionCycle, Boolean electionFull, Boolean isActiveCandidate, Integer page, Boolean sortNullOnly, Boolean sortNullsLast, List<Integer> electionYear, Boolean sortHideNull, Integer perPage, String office, String sort, Integer minElectionCycle, final ApiCallback<TotalByOfficePage> _callback) throws ApiException {

        okhttp3.Call localVarCall = candidatesTotalsByOfficeGetValidateBeforeCall(apiKey, maxElectionCycle, electionFull, isActiveCandidate, page, sortNullOnly, sortNullsLast, electionYear, sortHideNull, perPage, office, sort, minElectionCycle, _callback);
        Type localVarReturnType = new TypeToken<TotalByOfficePage>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for candidatesTotalsGet
     * @param apiKey  API key for https://api.data.gov. Get one at https://api.data.gov/signup.  (required)
     * @param maxDisbursements Maximum aggregated disbursements (optional)
     * @param q Name of candidate running for office (optional)
     * @param cycle  Filter records to only those that were applicable to a given two-year period.The cycle begins with an odd year and is named for its ending, even year.  (optional)
     * @param sortNullOnly Toggle that filters out all rows having sort column that is non-null (optional, default to false)
     * @param maxCashOnHandEndPeriod Maximum cash on hand (optional)
     * @param maxDebtsOwedByCommittee Maximum debt (optional)
     * @param minDisbursements Minimum aggregated disbursements (optional)
     * @param federalFundsFlag A boolean the describes if a presidential candidate has accepted federal funds. The flag will be false for House and Senate candidates. (optional)
     * @param sortHideNull Hide null values on sorted column(s). (optional, default to false)
     * @param candidateId  A unique identifier assigned to each candidate registered with the FEC. If a person runs for several offices, that person will have separate candidate IDs for each office. First character indicates office - [P]residential, [H]ouse, [S]enate]. Second character is the last digit of the two-year period the ID was created. Third and fourth is the candidate state. Presidential IDs don&#39;t have state. Fifth and sixth is the district when the candidate first ran. This does not change if the candidate/member&#39;s district changes during re-districting. Presidential IDs don&#39;t have districts. The rest is sequence.  (optional)
     * @param perPage The number of results returned per page. Defaults to 20. (optional, default to 20)
     * @param electionYear  Filter records to only those that were applicable to a given two-year period.The cycle begins with an odd year and is named for its ending, even year.  (optional)
     * @param office Federal office candidate runs for: H, S or P (optional)
     * @param sort Provide a field to sort by. Use &#x60;-&#x60; for descending order.  (optional)
     * @param district District of candidate (optional)
     * @param electionFull &#x60;True&#x60; indicates that full election period of a candidate. &#x60;False&#x60; indicates that two year election cycle. (optional, default to true)
     * @param minDebtsOwedByCommittee Minimum debt (optional)
     * @param maxReceipts Maximum aggregated receipts (optional)
     * @param hasRaisedFunds A boolean that describes if a candidate&#39;s committee has ever received any receipts for their campaign for this particular office. (Candidates have separate candidate IDs for each office.) (optional)
     * @param party Three-letter party code (optional)
     * @param sortNullsLast Toggle that sorts null values last (optional, default to false)
     * @param isActiveCandidate  Candidates who are actively seeking office. If no value is specified, all candidates are returned. When True is specified, only active candidates are returned. When False is specified, only inactive candidates are returned.  (optional)
     * @param page For paginating through results, starting at page 1 (optional, default to 1)
     * @param state State of candidate (optional)
     * @param minCashOnHandEndPeriod Minimum cash on hand (optional)
     * @param minReceipts Minimum aggregated receipts (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call candidatesTotalsGetCall(String apiKey, String maxDisbursements, List<String> q, List<Integer> cycle, Boolean sortNullOnly, String maxCashOnHandEndPeriod, String maxDebtsOwedByCommittee, String minDisbursements, Boolean federalFundsFlag, Boolean sortHideNull, List<String> candidateId, Integer perPage, List<Integer> electionYear, List<String> office, String sort, List<String> district, Boolean electionFull, String minDebtsOwedByCommittee, String maxReceipts, Boolean hasRaisedFunds, List<String> party, Boolean sortNullsLast, Boolean isActiveCandidate, Integer page, List<String> state, String minCashOnHandEndPeriod, String minReceipts, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/candidates/totals/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (maxDisbursements != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("max_disbursements", maxDisbursements));
        }

        if (q != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "q", q));
        }

        if (cycle != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "cycle", cycle));
        }

        if (sortNullOnly != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort_null_only", sortNullOnly));
        }

        if (maxCashOnHandEndPeriod != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("max_cash_on_hand_end_period", maxCashOnHandEndPeriod));
        }

        if (maxDebtsOwedByCommittee != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("max_debts_owed_by_committee", maxDebtsOwedByCommittee));
        }

        if (minDisbursements != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("min_disbursements", minDisbursements));
        }

        if (federalFundsFlag != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("federal_funds_flag", federalFundsFlag));
        }

        if (sortHideNull != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort_hide_null", sortHideNull));
        }

        if (candidateId != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "candidate_id", candidateId));
        }

        if (perPage != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("per_page", perPage));
        }

        if (electionYear != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "election_year", electionYear));
        }

        if (office != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "office", office));
        }

        if (sort != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort", sort));
        }

        if (district != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "district", district));
        }

        if (apiKey != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api_key", apiKey));
        }

        if (electionFull != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("election_full", electionFull));
        }

        if (minDebtsOwedByCommittee != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("min_debts_owed_by_committee", minDebtsOwedByCommittee));
        }

        if (maxReceipts != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("max_receipts", maxReceipts));
        }

        if (hasRaisedFunds != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("has_raised_funds", hasRaisedFunds));
        }

        if (party != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "party", party));
        }

        if (sortNullsLast != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort_nulls_last", sortNullsLast));
        }

        if (isActiveCandidate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("is_active_candidate", isActiveCandidate));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (state != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "state", state));
        }

        if (minCashOnHandEndPeriod != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("min_cash_on_hand_end_period", minCashOnHandEndPeriod));
        }

        if (minReceipts != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("min_receipts", minReceipts));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKeyHeaderAuth", "ApiKeyQueryAuth", "apiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call candidatesTotalsGetValidateBeforeCall(String apiKey, String maxDisbursements, List<String> q, List<Integer> cycle, Boolean sortNullOnly, String maxCashOnHandEndPeriod, String maxDebtsOwedByCommittee, String minDisbursements, Boolean federalFundsFlag, Boolean sortHideNull, List<String> candidateId, Integer perPage, List<Integer> electionYear, List<String> office, String sort, List<String> district, Boolean electionFull, String minDebtsOwedByCommittee, String maxReceipts, Boolean hasRaisedFunds, List<String> party, Boolean sortNullsLast, Boolean isActiveCandidate, Integer page, List<String> state, String minCashOnHandEndPeriod, String minReceipts, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'apiKey' is set
        if (apiKey == null) {
            throw new ApiException("Missing the required parameter 'apiKey' when calling candidatesTotalsGet(Async)");
        }

        return candidatesTotalsGetCall(apiKey, maxDisbursements, q, cycle, sortNullOnly, maxCashOnHandEndPeriod, maxDebtsOwedByCommittee, minDisbursements, federalFundsFlag, sortHideNull, candidateId, perPage, electionYear, office, sort, district, electionFull, minDebtsOwedByCommittee, maxReceipts, hasRaisedFunds, party, sortNullsLast, isActiveCandidate, page, state, minCashOnHandEndPeriod, minReceipts, _callback);

    }

    /**
     * 
     *  Aggregated candidate receipts and disbursements grouped by cycle. 
     * @param apiKey  API key for https://api.data.gov. Get one at https://api.data.gov/signup.  (required)
     * @param maxDisbursements Maximum aggregated disbursements (optional)
     * @param q Name of candidate running for office (optional)
     * @param cycle  Filter records to only those that were applicable to a given two-year period.The cycle begins with an odd year and is named for its ending, even year.  (optional)
     * @param sortNullOnly Toggle that filters out all rows having sort column that is non-null (optional, default to false)
     * @param maxCashOnHandEndPeriod Maximum cash on hand (optional)
     * @param maxDebtsOwedByCommittee Maximum debt (optional)
     * @param minDisbursements Minimum aggregated disbursements (optional)
     * @param federalFundsFlag A boolean the describes if a presidential candidate has accepted federal funds. The flag will be false for House and Senate candidates. (optional)
     * @param sortHideNull Hide null values on sorted column(s). (optional, default to false)
     * @param candidateId  A unique identifier assigned to each candidate registered with the FEC. If a person runs for several offices, that person will have separate candidate IDs for each office. First character indicates office - [P]residential, [H]ouse, [S]enate]. Second character is the last digit of the two-year period the ID was created. Third and fourth is the candidate state. Presidential IDs don&#39;t have state. Fifth and sixth is the district when the candidate first ran. This does not change if the candidate/member&#39;s district changes during re-districting. Presidential IDs don&#39;t have districts. The rest is sequence.  (optional)
     * @param perPage The number of results returned per page. Defaults to 20. (optional, default to 20)
     * @param electionYear  Filter records to only those that were applicable to a given two-year period.The cycle begins with an odd year and is named for its ending, even year.  (optional)
     * @param office Federal office candidate runs for: H, S or P (optional)
     * @param sort Provide a field to sort by. Use &#x60;-&#x60; for descending order.  (optional)
     * @param district District of candidate (optional)
     * @param electionFull &#x60;True&#x60; indicates that full election period of a candidate. &#x60;False&#x60; indicates that two year election cycle. (optional, default to true)
     * @param minDebtsOwedByCommittee Minimum debt (optional)
     * @param maxReceipts Maximum aggregated receipts (optional)
     * @param hasRaisedFunds A boolean that describes if a candidate&#39;s committee has ever received any receipts for their campaign for this particular office. (Candidates have separate candidate IDs for each office.) (optional)
     * @param party Three-letter party code (optional)
     * @param sortNullsLast Toggle that sorts null values last (optional, default to false)
     * @param isActiveCandidate  Candidates who are actively seeking office. If no value is specified, all candidates are returned. When True is specified, only active candidates are returned. When False is specified, only inactive candidates are returned.  (optional)
     * @param page For paginating through results, starting at page 1 (optional, default to 1)
     * @param state State of candidate (optional)
     * @param minCashOnHandEndPeriod Minimum cash on hand (optional)
     * @param minReceipts Minimum aggregated receipts (optional)
     * @return CandidateHistoryTotalPage
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public CandidateHistoryTotalPage candidatesTotalsGet(String apiKey, String maxDisbursements, List<String> q, List<Integer> cycle, Boolean sortNullOnly, String maxCashOnHandEndPeriod, String maxDebtsOwedByCommittee, String minDisbursements, Boolean federalFundsFlag, Boolean sortHideNull, List<String> candidateId, Integer perPage, List<Integer> electionYear, List<String> office, String sort, List<String> district, Boolean electionFull, String minDebtsOwedByCommittee, String maxReceipts, Boolean hasRaisedFunds, List<String> party, Boolean sortNullsLast, Boolean isActiveCandidate, Integer page, List<String> state, String minCashOnHandEndPeriod, String minReceipts) throws ApiException {
        ApiResponse<CandidateHistoryTotalPage> localVarResp = candidatesTotalsGetWithHttpInfo(apiKey, maxDisbursements, q, cycle, sortNullOnly, maxCashOnHandEndPeriod, maxDebtsOwedByCommittee, minDisbursements, federalFundsFlag, sortHideNull, candidateId, perPage, electionYear, office, sort, district, electionFull, minDebtsOwedByCommittee, maxReceipts, hasRaisedFunds, party, sortNullsLast, isActiveCandidate, page, state, minCashOnHandEndPeriod, minReceipts);
        return localVarResp.getData();
    }

    /**
     * 
     *  Aggregated candidate receipts and disbursements grouped by cycle. 
     * @param apiKey  API key for https://api.data.gov. Get one at https://api.data.gov/signup.  (required)
     * @param maxDisbursements Maximum aggregated disbursements (optional)
     * @param q Name of candidate running for office (optional)
     * @param cycle  Filter records to only those that were applicable to a given two-year period.The cycle begins with an odd year and is named for its ending, even year.  (optional)
     * @param sortNullOnly Toggle that filters out all rows having sort column that is non-null (optional, default to false)
     * @param maxCashOnHandEndPeriod Maximum cash on hand (optional)
     * @param maxDebtsOwedByCommittee Maximum debt (optional)
     * @param minDisbursements Minimum aggregated disbursements (optional)
     * @param federalFundsFlag A boolean the describes if a presidential candidate has accepted federal funds. The flag will be false for House and Senate candidates. (optional)
     * @param sortHideNull Hide null values on sorted column(s). (optional, default to false)
     * @param candidateId  A unique identifier assigned to each candidate registered with the FEC. If a person runs for several offices, that person will have separate candidate IDs for each office. First character indicates office - [P]residential, [H]ouse, [S]enate]. Second character is the last digit of the two-year period the ID was created. Third and fourth is the candidate state. Presidential IDs don&#39;t have state. Fifth and sixth is the district when the candidate first ran. This does not change if the candidate/member&#39;s district changes during re-districting. Presidential IDs don&#39;t have districts. The rest is sequence.  (optional)
     * @param perPage The number of results returned per page. Defaults to 20. (optional, default to 20)
     * @param electionYear  Filter records to only those that were applicable to a given two-year period.The cycle begins with an odd year and is named for its ending, even year.  (optional)
     * @param office Federal office candidate runs for: H, S or P (optional)
     * @param sort Provide a field to sort by. Use &#x60;-&#x60; for descending order.  (optional)
     * @param district District of candidate (optional)
     * @param electionFull &#x60;True&#x60; indicates that full election period of a candidate. &#x60;False&#x60; indicates that two year election cycle. (optional, default to true)
     * @param minDebtsOwedByCommittee Minimum debt (optional)
     * @param maxReceipts Maximum aggregated receipts (optional)
     * @param hasRaisedFunds A boolean that describes if a candidate&#39;s committee has ever received any receipts for their campaign for this particular office. (Candidates have separate candidate IDs for each office.) (optional)
     * @param party Three-letter party code (optional)
     * @param sortNullsLast Toggle that sorts null values last (optional, default to false)
     * @param isActiveCandidate  Candidates who are actively seeking office. If no value is specified, all candidates are returned. When True is specified, only active candidates are returned. When False is specified, only inactive candidates are returned.  (optional)
     * @param page For paginating through results, starting at page 1 (optional, default to 1)
     * @param state State of candidate (optional)
     * @param minCashOnHandEndPeriod Minimum cash on hand (optional)
     * @param minReceipts Minimum aggregated receipts (optional)
     * @return ApiResponse&lt;CandidateHistoryTotalPage&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CandidateHistoryTotalPage> candidatesTotalsGetWithHttpInfo(String apiKey, String maxDisbursements, List<String> q, List<Integer> cycle, Boolean sortNullOnly, String maxCashOnHandEndPeriod, String maxDebtsOwedByCommittee, String minDisbursements, Boolean federalFundsFlag, Boolean sortHideNull, List<String> candidateId, Integer perPage, List<Integer> electionYear, List<String> office, String sort, List<String> district, Boolean electionFull, String minDebtsOwedByCommittee, String maxReceipts, Boolean hasRaisedFunds, List<String> party, Boolean sortNullsLast, Boolean isActiveCandidate, Integer page, List<String> state, String minCashOnHandEndPeriod, String minReceipts) throws ApiException {
        okhttp3.Call localVarCall = candidatesTotalsGetValidateBeforeCall(apiKey, maxDisbursements, q, cycle, sortNullOnly, maxCashOnHandEndPeriod, maxDebtsOwedByCommittee, minDisbursements, federalFundsFlag, sortHideNull, candidateId, perPage, electionYear, office, sort, district, electionFull, minDebtsOwedByCommittee, maxReceipts, hasRaisedFunds, party, sortNullsLast, isActiveCandidate, page, state, minCashOnHandEndPeriod, minReceipts, null);
        Type localVarReturnType = new TypeToken<CandidateHistoryTotalPage>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     *  Aggregated candidate receipts and disbursements grouped by cycle. 
     * @param apiKey  API key for https://api.data.gov. Get one at https://api.data.gov/signup.  (required)
     * @param maxDisbursements Maximum aggregated disbursements (optional)
     * @param q Name of candidate running for office (optional)
     * @param cycle  Filter records to only those that were applicable to a given two-year period.The cycle begins with an odd year and is named for its ending, even year.  (optional)
     * @param sortNullOnly Toggle that filters out all rows having sort column that is non-null (optional, default to false)
     * @param maxCashOnHandEndPeriod Maximum cash on hand (optional)
     * @param maxDebtsOwedByCommittee Maximum debt (optional)
     * @param minDisbursements Minimum aggregated disbursements (optional)
     * @param federalFundsFlag A boolean the describes if a presidential candidate has accepted federal funds. The flag will be false for House and Senate candidates. (optional)
     * @param sortHideNull Hide null values on sorted column(s). (optional, default to false)
     * @param candidateId  A unique identifier assigned to each candidate registered with the FEC. If a person runs for several offices, that person will have separate candidate IDs for each office. First character indicates office - [P]residential, [H]ouse, [S]enate]. Second character is the last digit of the two-year period the ID was created. Third and fourth is the candidate state. Presidential IDs don&#39;t have state. Fifth and sixth is the district when the candidate first ran. This does not change if the candidate/member&#39;s district changes during re-districting. Presidential IDs don&#39;t have districts. The rest is sequence.  (optional)
     * @param perPage The number of results returned per page. Defaults to 20. (optional, default to 20)
     * @param electionYear  Filter records to only those that were applicable to a given two-year period.The cycle begins with an odd year and is named for its ending, even year.  (optional)
     * @param office Federal office candidate runs for: H, S or P (optional)
     * @param sort Provide a field to sort by. Use &#x60;-&#x60; for descending order.  (optional)
     * @param district District of candidate (optional)
     * @param electionFull &#x60;True&#x60; indicates that full election period of a candidate. &#x60;False&#x60; indicates that two year election cycle. (optional, default to true)
     * @param minDebtsOwedByCommittee Minimum debt (optional)
     * @param maxReceipts Maximum aggregated receipts (optional)
     * @param hasRaisedFunds A boolean that describes if a candidate&#39;s committee has ever received any receipts for their campaign for this particular office. (Candidates have separate candidate IDs for each office.) (optional)
     * @param party Three-letter party code (optional)
     * @param sortNullsLast Toggle that sorts null values last (optional, default to false)
     * @param isActiveCandidate  Candidates who are actively seeking office. If no value is specified, all candidates are returned. When True is specified, only active candidates are returned. When False is specified, only inactive candidates are returned.  (optional)
     * @param page For paginating through results, starting at page 1 (optional, default to 1)
     * @param state State of candidate (optional)
     * @param minCashOnHandEndPeriod Minimum cash on hand (optional)
     * @param minReceipts Minimum aggregated receipts (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call candidatesTotalsGetAsync(String apiKey, String maxDisbursements, List<String> q, List<Integer> cycle, Boolean sortNullOnly, String maxCashOnHandEndPeriod, String maxDebtsOwedByCommittee, String minDisbursements, Boolean federalFundsFlag, Boolean sortHideNull, List<String> candidateId, Integer perPage, List<Integer> electionYear, List<String> office, String sort, List<String> district, Boolean electionFull, String minDebtsOwedByCommittee, String maxReceipts, Boolean hasRaisedFunds, List<String> party, Boolean sortNullsLast, Boolean isActiveCandidate, Integer page, List<String> state, String minCashOnHandEndPeriod, String minReceipts, final ApiCallback<CandidateHistoryTotalPage> _callback) throws ApiException {

        okhttp3.Call localVarCall = candidatesTotalsGetValidateBeforeCall(apiKey, maxDisbursements, q, cycle, sortNullOnly, maxCashOnHandEndPeriod, maxDebtsOwedByCommittee, minDisbursements, federalFundsFlag, sortHideNull, candidateId, perPage, electionYear, office, sort, district, electionFull, minDebtsOwedByCommittee, maxReceipts, hasRaisedFunds, party, sortNullsLast, isActiveCandidate, page, state, minCashOnHandEndPeriod, minReceipts, _callback);
        Type localVarReturnType = new TypeToken<CandidateHistoryTotalPage>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for committeeCommitteeIdCandidatesGet
     * @param apiKey  API key for https://api.data.gov. Get one at https://api.data.gov/signup.  (required)
     * @param committeeId  A unique identifier assigned to each committee or filer registered with the FEC. In general committee id&#39;s begin with the letter C which is followed by eight digits.  (required)
     * @param incumbentChallenge One-letter code (&#39;I&#39;, &#39;C&#39;, &#39;O&#39;) explaining if the candidate is an incumbent, a challenger, or if the seat is open. (optional)
     * @param cycle  Two-year election cycle in which a candidate runs for office. Calculated from Form 2. The cycle begins with an odd year and is named for its ending, even year. This cycle follows the traditional house election cycle and subdivides the presidential and Senate elections into comparable two-year blocks. To retrieve data for the entire four years of a presidential term or six years of a senatorial term, you will need the &#x60;election_full&#x60; flag.  (optional)
     * @param sortNullOnly Toggle that filters out all rows having sort column that is non-null (optional, default to false)
     * @param federalFundsFlag A boolean the describes if a presidential candidate has accepted federal funds. The flag will be false for House and Senate candidates. (optional)
     * @param sortHideNull Hide null values on sorted column(s). (optional, default to false)
     * @param name Name (candidate or committee) to search for. Alias for &#39;q&#39;. (optional)
     * @param perPage The number of results returned per page. Defaults to 20. (optional, default to 20)
     * @param electionYear Year of election (optional)
     * @param office Federal office candidate runs for: H, S or P (optional)
     * @param sort Provide a field to sort by. Use &#x60;-&#x60; for descending order.  (optional, default to name)
     * @param candidateStatus One-letter code explaining if the candidate is:         - C present candidate         - F future candidate         - N not yet a candidate         - P prior candidate  (optional)
     * @param district Two-digit US House distirict of the office the candidate is running for. Presidential, Senate and House at-large candidates will have District 00. (optional)
     * @param hasRaisedFunds A boolean that describes if a candidate&#39;s committee has ever received any receipts for their campaign for this particular office. (Candidates have separate candidate IDs for each office.) (optional)
     * @param party Three-letter code for the party affiliated with a candidate or committee. For example, DEM for Democratic Party and REP for Republican Party. (optional)
     * @param sortNullsLast Toggle that sorts null values last (optional, default to false)
     * @param page For paginating through results, starting at page 1 (optional, default to 1)
     * @param state US state or territory where a candidate runs for office (optional)
     * @param year Retrieve records pertaining to a particular election year. The list of election years is based on a candidate filing a statement of candidacy (F2) for that year. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call committeeCommitteeIdCandidatesGetCall(String apiKey, String committeeId, List<String> incumbentChallenge, List<Integer> cycle, Boolean sortNullOnly, Boolean federalFundsFlag, Boolean sortHideNull, List<String> name, Integer perPage, List<Integer> electionYear, List<String> office, String sort, List<String> candidateStatus, List<String> district, Boolean hasRaisedFunds, List<String> party, Boolean sortNullsLast, Integer page, List<String> state, String year, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/committee/{committee_id}/candidates/"
            .replace("{" + "committee_id" + "}", localVarApiClient.escapeString(committeeId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (incumbentChallenge != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "incumbent_challenge", incumbentChallenge));
        }

        if (cycle != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "cycle", cycle));
        }

        if (sortNullOnly != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort_null_only", sortNullOnly));
        }

        if (federalFundsFlag != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("federal_funds_flag", federalFundsFlag));
        }

        if (sortHideNull != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort_hide_null", sortHideNull));
        }

        if (name != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "name", name));
        }

        if (perPage != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("per_page", perPage));
        }

        if (electionYear != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "election_year", electionYear));
        }

        if (office != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "office", office));
        }

        if (sort != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort", sort));
        }

        if (candidateStatus != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "candidate_status", candidateStatus));
        }

        if (district != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "district", district));
        }

        if (apiKey != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api_key", apiKey));
        }

        if (hasRaisedFunds != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("has_raised_funds", hasRaisedFunds));
        }

        if (party != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "party", party));
        }

        if (sortNullsLast != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort_nulls_last", sortNullsLast));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (state != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "state", state));
        }

        if (year != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("year", year));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKeyHeaderAuth", "ApiKeyQueryAuth", "apiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call committeeCommitteeIdCandidatesGetValidateBeforeCall(String apiKey, String committeeId, List<String> incumbentChallenge, List<Integer> cycle, Boolean sortNullOnly, Boolean federalFundsFlag, Boolean sortHideNull, List<String> name, Integer perPage, List<Integer> electionYear, List<String> office, String sort, List<String> candidateStatus, List<String> district, Boolean hasRaisedFunds, List<String> party, Boolean sortNullsLast, Integer page, List<String> state, String year, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'apiKey' is set
        if (apiKey == null) {
            throw new ApiException("Missing the required parameter 'apiKey' when calling committeeCommitteeIdCandidatesGet(Async)");
        }

        // verify the required parameter 'committeeId' is set
        if (committeeId == null) {
            throw new ApiException("Missing the required parameter 'committeeId' when calling committeeCommitteeIdCandidatesGet(Async)");
        }

        return committeeCommitteeIdCandidatesGetCall(apiKey, committeeId, incumbentChallenge, cycle, sortNullOnly, federalFundsFlag, sortHideNull, name, perPage, electionYear, office, sort, candidateStatus, district, hasRaisedFunds, party, sortNullsLast, page, state, year, _callback);

    }

    /**
     * 
     *  This endpoint is useful for finding detailed information about a particular candidate. Use the &#x60;candidate_id&#x60; to find the most recent information about that candidate. 
     * @param apiKey  API key for https://api.data.gov. Get one at https://api.data.gov/signup.  (required)
     * @param committeeId  A unique identifier assigned to each committee or filer registered with the FEC. In general committee id&#39;s begin with the letter C which is followed by eight digits.  (required)
     * @param incumbentChallenge One-letter code (&#39;I&#39;, &#39;C&#39;, &#39;O&#39;) explaining if the candidate is an incumbent, a challenger, or if the seat is open. (optional)
     * @param cycle  Two-year election cycle in which a candidate runs for office. Calculated from Form 2. The cycle begins with an odd year and is named for its ending, even year. This cycle follows the traditional house election cycle and subdivides the presidential and Senate elections into comparable two-year blocks. To retrieve data for the entire four years of a presidential term or six years of a senatorial term, you will need the &#x60;election_full&#x60; flag.  (optional)
     * @param sortNullOnly Toggle that filters out all rows having sort column that is non-null (optional, default to false)
     * @param federalFundsFlag A boolean the describes if a presidential candidate has accepted federal funds. The flag will be false for House and Senate candidates. (optional)
     * @param sortHideNull Hide null values on sorted column(s). (optional, default to false)
     * @param name Name (candidate or committee) to search for. Alias for &#39;q&#39;. (optional)
     * @param perPage The number of results returned per page. Defaults to 20. (optional, default to 20)
     * @param electionYear Year of election (optional)
     * @param office Federal office candidate runs for: H, S or P (optional)
     * @param sort Provide a field to sort by. Use &#x60;-&#x60; for descending order.  (optional, default to name)
     * @param candidateStatus One-letter code explaining if the candidate is:         - C present candidate         - F future candidate         - N not yet a candidate         - P prior candidate  (optional)
     * @param district Two-digit US House distirict of the office the candidate is running for. Presidential, Senate and House at-large candidates will have District 00. (optional)
     * @param hasRaisedFunds A boolean that describes if a candidate&#39;s committee has ever received any receipts for their campaign for this particular office. (Candidates have separate candidate IDs for each office.) (optional)
     * @param party Three-letter code for the party affiliated with a candidate or committee. For example, DEM for Democratic Party and REP for Republican Party. (optional)
     * @param sortNullsLast Toggle that sorts null values last (optional, default to false)
     * @param page For paginating through results, starting at page 1 (optional, default to 1)
     * @param state US state or territory where a candidate runs for office (optional)
     * @param year Retrieve records pertaining to a particular election year. The list of election years is based on a candidate filing a statement of candidacy (F2) for that year. (optional)
     * @return CandidateDetailPage
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public CandidateDetailPage committeeCommitteeIdCandidatesGet(String apiKey, String committeeId, List<String> incumbentChallenge, List<Integer> cycle, Boolean sortNullOnly, Boolean federalFundsFlag, Boolean sortHideNull, List<String> name, Integer perPage, List<Integer> electionYear, List<String> office, String sort, List<String> candidateStatus, List<String> district, Boolean hasRaisedFunds, List<String> party, Boolean sortNullsLast, Integer page, List<String> state, String year) throws ApiException {
        ApiResponse<CandidateDetailPage> localVarResp = committeeCommitteeIdCandidatesGetWithHttpInfo(apiKey, committeeId, incumbentChallenge, cycle, sortNullOnly, federalFundsFlag, sortHideNull, name, perPage, electionYear, office, sort, candidateStatus, district, hasRaisedFunds, party, sortNullsLast, page, state, year);
        return localVarResp.getData();
    }

    /**
     * 
     *  This endpoint is useful for finding detailed information about a particular candidate. Use the &#x60;candidate_id&#x60; to find the most recent information about that candidate. 
     * @param apiKey  API key for https://api.data.gov. Get one at https://api.data.gov/signup.  (required)
     * @param committeeId  A unique identifier assigned to each committee or filer registered with the FEC. In general committee id&#39;s begin with the letter C which is followed by eight digits.  (required)
     * @param incumbentChallenge One-letter code (&#39;I&#39;, &#39;C&#39;, &#39;O&#39;) explaining if the candidate is an incumbent, a challenger, or if the seat is open. (optional)
     * @param cycle  Two-year election cycle in which a candidate runs for office. Calculated from Form 2. The cycle begins with an odd year and is named for its ending, even year. This cycle follows the traditional house election cycle and subdivides the presidential and Senate elections into comparable two-year blocks. To retrieve data for the entire four years of a presidential term or six years of a senatorial term, you will need the &#x60;election_full&#x60; flag.  (optional)
     * @param sortNullOnly Toggle that filters out all rows having sort column that is non-null (optional, default to false)
     * @param federalFundsFlag A boolean the describes if a presidential candidate has accepted federal funds. The flag will be false for House and Senate candidates. (optional)
     * @param sortHideNull Hide null values on sorted column(s). (optional, default to false)
     * @param name Name (candidate or committee) to search for. Alias for &#39;q&#39;. (optional)
     * @param perPage The number of results returned per page. Defaults to 20. (optional, default to 20)
     * @param electionYear Year of election (optional)
     * @param office Federal office candidate runs for: H, S or P (optional)
     * @param sort Provide a field to sort by. Use &#x60;-&#x60; for descending order.  (optional, default to name)
     * @param candidateStatus One-letter code explaining if the candidate is:         - C present candidate         - F future candidate         - N not yet a candidate         - P prior candidate  (optional)
     * @param district Two-digit US House distirict of the office the candidate is running for. Presidential, Senate and House at-large candidates will have District 00. (optional)
     * @param hasRaisedFunds A boolean that describes if a candidate&#39;s committee has ever received any receipts for their campaign for this particular office. (Candidates have separate candidate IDs for each office.) (optional)
     * @param party Three-letter code for the party affiliated with a candidate or committee. For example, DEM for Democratic Party and REP for Republican Party. (optional)
     * @param sortNullsLast Toggle that sorts null values last (optional, default to false)
     * @param page For paginating through results, starting at page 1 (optional, default to 1)
     * @param state US state or territory where a candidate runs for office (optional)
     * @param year Retrieve records pertaining to a particular election year. The list of election years is based on a candidate filing a statement of candidacy (F2) for that year. (optional)
     * @return ApiResponse&lt;CandidateDetailPage&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CandidateDetailPage> committeeCommitteeIdCandidatesGetWithHttpInfo(String apiKey, String committeeId, List<String> incumbentChallenge, List<Integer> cycle, Boolean sortNullOnly, Boolean federalFundsFlag, Boolean sortHideNull, List<String> name, Integer perPage, List<Integer> electionYear, List<String> office, String sort, List<String> candidateStatus, List<String> district, Boolean hasRaisedFunds, List<String> party, Boolean sortNullsLast, Integer page, List<String> state, String year) throws ApiException {
        okhttp3.Call localVarCall = committeeCommitteeIdCandidatesGetValidateBeforeCall(apiKey, committeeId, incumbentChallenge, cycle, sortNullOnly, federalFundsFlag, sortHideNull, name, perPage, electionYear, office, sort, candidateStatus, district, hasRaisedFunds, party, sortNullsLast, page, state, year, null);
        Type localVarReturnType = new TypeToken<CandidateDetailPage>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     *  This endpoint is useful for finding detailed information about a particular candidate. Use the &#x60;candidate_id&#x60; to find the most recent information about that candidate. 
     * @param apiKey  API key for https://api.data.gov. Get one at https://api.data.gov/signup.  (required)
     * @param committeeId  A unique identifier assigned to each committee or filer registered with the FEC. In general committee id&#39;s begin with the letter C which is followed by eight digits.  (required)
     * @param incumbentChallenge One-letter code (&#39;I&#39;, &#39;C&#39;, &#39;O&#39;) explaining if the candidate is an incumbent, a challenger, or if the seat is open. (optional)
     * @param cycle  Two-year election cycle in which a candidate runs for office. Calculated from Form 2. The cycle begins with an odd year and is named for its ending, even year. This cycle follows the traditional house election cycle and subdivides the presidential and Senate elections into comparable two-year blocks. To retrieve data for the entire four years of a presidential term or six years of a senatorial term, you will need the &#x60;election_full&#x60; flag.  (optional)
     * @param sortNullOnly Toggle that filters out all rows having sort column that is non-null (optional, default to false)
     * @param federalFundsFlag A boolean the describes if a presidential candidate has accepted federal funds. The flag will be false for House and Senate candidates. (optional)
     * @param sortHideNull Hide null values on sorted column(s). (optional, default to false)
     * @param name Name (candidate or committee) to search for. Alias for &#39;q&#39;. (optional)
     * @param perPage The number of results returned per page. Defaults to 20. (optional, default to 20)
     * @param electionYear Year of election (optional)
     * @param office Federal office candidate runs for: H, S or P (optional)
     * @param sort Provide a field to sort by. Use &#x60;-&#x60; for descending order.  (optional, default to name)
     * @param candidateStatus One-letter code explaining if the candidate is:         - C present candidate         - F future candidate         - N not yet a candidate         - P prior candidate  (optional)
     * @param district Two-digit US House distirict of the office the candidate is running for. Presidential, Senate and House at-large candidates will have District 00. (optional)
     * @param hasRaisedFunds A boolean that describes if a candidate&#39;s committee has ever received any receipts for their campaign for this particular office. (Candidates have separate candidate IDs for each office.) (optional)
     * @param party Three-letter code for the party affiliated with a candidate or committee. For example, DEM for Democratic Party and REP for Republican Party. (optional)
     * @param sortNullsLast Toggle that sorts null values last (optional, default to false)
     * @param page For paginating through results, starting at page 1 (optional, default to 1)
     * @param state US state or territory where a candidate runs for office (optional)
     * @param year Retrieve records pertaining to a particular election year. The list of election years is based on a candidate filing a statement of candidacy (F2) for that year. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call committeeCommitteeIdCandidatesGetAsync(String apiKey, String committeeId, List<String> incumbentChallenge, List<Integer> cycle, Boolean sortNullOnly, Boolean federalFundsFlag, Boolean sortHideNull, List<String> name, Integer perPage, List<Integer> electionYear, List<String> office, String sort, List<String> candidateStatus, List<String> district, Boolean hasRaisedFunds, List<String> party, Boolean sortNullsLast, Integer page, List<String> state, String year, final ApiCallback<CandidateDetailPage> _callback) throws ApiException {

        okhttp3.Call localVarCall = committeeCommitteeIdCandidatesGetValidateBeforeCall(apiKey, committeeId, incumbentChallenge, cycle, sortNullOnly, federalFundsFlag, sortHideNull, name, perPage, electionYear, office, sort, candidateStatus, district, hasRaisedFunds, party, sortNullsLast, page, state, year, _callback);
        Type localVarReturnType = new TypeToken<CandidateDetailPage>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for committeeCommitteeIdCandidatesHistoryCycleGet
     * @param apiKey  API key for https://api.data.gov. Get one at https://api.data.gov/signup.  (required)
     * @param committeeId  A unique identifier assigned to each committee or filer registered with the FEC. In general committee id&#39;s begin with the letter C which is followed by eight digits.  (required)
     * @param cycle  Two-year election cycle in which a candidate runs for office. Calculated from Form 2. The cycle begins with an odd year and is named for its ending, even year. This cycle follows the traditional house election cycle and subdivides the presidential and Senate elections into comparable two-year blocks. To retrieve data for the entire four years of a presidential term or six years of a senatorial term, you will need the &#x60;election_full&#x60; flag.  (required)
     * @param page For paginating through results, starting at page 1 (optional, default to 1)
     * @param sortHideNull Hide null values on sorted column(s). (optional, default to false)
     * @param electionFull &#x60;True&#x60; indicates that full election period of a candidate. &#x60;False&#x60; indicates that two year election cycle. (optional, default to true)
     * @param perPage The number of results returned per page. Defaults to 20. (optional, default to 20)
     * @param sortNullOnly Toggle that filters out all rows having sort column that is non-null (optional, default to false)
     * @param sort Provide a field to sort by. Use &#x60;-&#x60; for descending order.  (optional, default to -two_year_period)
     * @param sortNullsLast Toggle that sorts null values last (optional, default to false)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call committeeCommitteeIdCandidatesHistoryCycleGetCall(String apiKey, String committeeId, Integer cycle, Integer page, Boolean sortHideNull, Boolean electionFull, Integer perPage, Boolean sortNullOnly, String sort, Boolean sortNullsLast, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/committee/{committee_id}/candidates/history/{cycle}/"
            .replace("{" + "committee_id" + "}", localVarApiClient.escapeString(committeeId.toString()))
            .replace("{" + "cycle" + "}", localVarApiClient.escapeString(cycle.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (apiKey != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api_key", apiKey));
        }

        if (sortHideNull != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort_hide_null", sortHideNull));
        }

        if (electionFull != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("election_full", electionFull));
        }

        if (perPage != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("per_page", perPage));
        }

        if (sortNullOnly != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort_null_only", sortNullOnly));
        }

        if (sort != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort", sort));
        }

        if (sortNullsLast != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort_nulls_last", sortNullsLast));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKeyHeaderAuth", "ApiKeyQueryAuth", "apiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call committeeCommitteeIdCandidatesHistoryCycleGetValidateBeforeCall(String apiKey, String committeeId, Integer cycle, Integer page, Boolean sortHideNull, Boolean electionFull, Integer perPage, Boolean sortNullOnly, String sort, Boolean sortNullsLast, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'apiKey' is set
        if (apiKey == null) {
            throw new ApiException("Missing the required parameter 'apiKey' when calling committeeCommitteeIdCandidatesHistoryCycleGet(Async)");
        }

        // verify the required parameter 'committeeId' is set
        if (committeeId == null) {
            throw new ApiException("Missing the required parameter 'committeeId' when calling committeeCommitteeIdCandidatesHistoryCycleGet(Async)");
        }

        // verify the required parameter 'cycle' is set
        if (cycle == null) {
            throw new ApiException("Missing the required parameter 'cycle' when calling committeeCommitteeIdCandidatesHistoryCycleGet(Async)");
        }

        return committeeCommitteeIdCandidatesHistoryCycleGetCall(apiKey, committeeId, cycle, page, sortHideNull, electionFull, perPage, sortNullOnly, sort, sortNullsLast, _callback);

    }

    /**
     * 
     *  Find out a candidate&#39;s characteristics over time. This is particularly useful if the candidate runs for the same office in different districts or you want to know more about a candidate&#39;s previous races.  This information is organized by &#x60;candidate_id&#x60;, so it won&#39;t help you find a candidate who ran for different offices over time; candidates get a new ID for each office. 
     * @param apiKey  API key for https://api.data.gov. Get one at https://api.data.gov/signup.  (required)
     * @param committeeId  A unique identifier assigned to each committee or filer registered with the FEC. In general committee id&#39;s begin with the letter C which is followed by eight digits.  (required)
     * @param cycle  Two-year election cycle in which a candidate runs for office. Calculated from Form 2. The cycle begins with an odd year and is named for its ending, even year. This cycle follows the traditional house election cycle and subdivides the presidential and Senate elections into comparable two-year blocks. To retrieve data for the entire four years of a presidential term or six years of a senatorial term, you will need the &#x60;election_full&#x60; flag.  (required)
     * @param page For paginating through results, starting at page 1 (optional, default to 1)
     * @param sortHideNull Hide null values on sorted column(s). (optional, default to false)
     * @param electionFull &#x60;True&#x60; indicates that full election period of a candidate. &#x60;False&#x60; indicates that two year election cycle. (optional, default to true)
     * @param perPage The number of results returned per page. Defaults to 20. (optional, default to 20)
     * @param sortNullOnly Toggle that filters out all rows having sort column that is non-null (optional, default to false)
     * @param sort Provide a field to sort by. Use &#x60;-&#x60; for descending order.  (optional, default to -two_year_period)
     * @param sortNullsLast Toggle that sorts null values last (optional, default to false)
     * @return CandidateHistoryPage
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public CandidateHistoryPage committeeCommitteeIdCandidatesHistoryCycleGet(String apiKey, String committeeId, Integer cycle, Integer page, Boolean sortHideNull, Boolean electionFull, Integer perPage, Boolean sortNullOnly, String sort, Boolean sortNullsLast) throws ApiException {
        ApiResponse<CandidateHistoryPage> localVarResp = committeeCommitteeIdCandidatesHistoryCycleGetWithHttpInfo(apiKey, committeeId, cycle, page, sortHideNull, electionFull, perPage, sortNullOnly, sort, sortNullsLast);
        return localVarResp.getData();
    }

    /**
     * 
     *  Find out a candidate&#39;s characteristics over time. This is particularly useful if the candidate runs for the same office in different districts or you want to know more about a candidate&#39;s previous races.  This information is organized by &#x60;candidate_id&#x60;, so it won&#39;t help you find a candidate who ran for different offices over time; candidates get a new ID for each office. 
     * @param apiKey  API key for https://api.data.gov. Get one at https://api.data.gov/signup.  (required)
     * @param committeeId  A unique identifier assigned to each committee or filer registered with the FEC. In general committee id&#39;s begin with the letter C which is followed by eight digits.  (required)
     * @param cycle  Two-year election cycle in which a candidate runs for office. Calculated from Form 2. The cycle begins with an odd year and is named for its ending, even year. This cycle follows the traditional house election cycle and subdivides the presidential and Senate elections into comparable two-year blocks. To retrieve data for the entire four years of a presidential term or six years of a senatorial term, you will need the &#x60;election_full&#x60; flag.  (required)
     * @param page For paginating through results, starting at page 1 (optional, default to 1)
     * @param sortHideNull Hide null values on sorted column(s). (optional, default to false)
     * @param electionFull &#x60;True&#x60; indicates that full election period of a candidate. &#x60;False&#x60; indicates that two year election cycle. (optional, default to true)
     * @param perPage The number of results returned per page. Defaults to 20. (optional, default to 20)
     * @param sortNullOnly Toggle that filters out all rows having sort column that is non-null (optional, default to false)
     * @param sort Provide a field to sort by. Use &#x60;-&#x60; for descending order.  (optional, default to -two_year_period)
     * @param sortNullsLast Toggle that sorts null values last (optional, default to false)
     * @return ApiResponse&lt;CandidateHistoryPage&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CandidateHistoryPage> committeeCommitteeIdCandidatesHistoryCycleGetWithHttpInfo(String apiKey, String committeeId, Integer cycle, Integer page, Boolean sortHideNull, Boolean electionFull, Integer perPage, Boolean sortNullOnly, String sort, Boolean sortNullsLast) throws ApiException {
        okhttp3.Call localVarCall = committeeCommitteeIdCandidatesHistoryCycleGetValidateBeforeCall(apiKey, committeeId, cycle, page, sortHideNull, electionFull, perPage, sortNullOnly, sort, sortNullsLast, null);
        Type localVarReturnType = new TypeToken<CandidateHistoryPage>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     *  Find out a candidate&#39;s characteristics over time. This is particularly useful if the candidate runs for the same office in different districts or you want to know more about a candidate&#39;s previous races.  This information is organized by &#x60;candidate_id&#x60;, so it won&#39;t help you find a candidate who ran for different offices over time; candidates get a new ID for each office. 
     * @param apiKey  API key for https://api.data.gov. Get one at https://api.data.gov/signup.  (required)
     * @param committeeId  A unique identifier assigned to each committee or filer registered with the FEC. In general committee id&#39;s begin with the letter C which is followed by eight digits.  (required)
     * @param cycle  Two-year election cycle in which a candidate runs for office. Calculated from Form 2. The cycle begins with an odd year and is named for its ending, even year. This cycle follows the traditional house election cycle and subdivides the presidential and Senate elections into comparable two-year blocks. To retrieve data for the entire four years of a presidential term or six years of a senatorial term, you will need the &#x60;election_full&#x60; flag.  (required)
     * @param page For paginating through results, starting at page 1 (optional, default to 1)
     * @param sortHideNull Hide null values on sorted column(s). (optional, default to false)
     * @param electionFull &#x60;True&#x60; indicates that full election period of a candidate. &#x60;False&#x60; indicates that two year election cycle. (optional, default to true)
     * @param perPage The number of results returned per page. Defaults to 20. (optional, default to 20)
     * @param sortNullOnly Toggle that filters out all rows having sort column that is non-null (optional, default to false)
     * @param sort Provide a field to sort by. Use &#x60;-&#x60; for descending order.  (optional, default to -two_year_period)
     * @param sortNullsLast Toggle that sorts null values last (optional, default to false)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call committeeCommitteeIdCandidatesHistoryCycleGetAsync(String apiKey, String committeeId, Integer cycle, Integer page, Boolean sortHideNull, Boolean electionFull, Integer perPage, Boolean sortNullOnly, String sort, Boolean sortNullsLast, final ApiCallback<CandidateHistoryPage> _callback) throws ApiException {

        okhttp3.Call localVarCall = committeeCommitteeIdCandidatesHistoryCycleGetValidateBeforeCall(apiKey, committeeId, cycle, page, sortHideNull, electionFull, perPage, sortNullOnly, sort, sortNullsLast, _callback);
        Type localVarReturnType = new TypeToken<CandidateHistoryPage>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for committeeCommitteeIdCandidatesHistoryGet
     * @param apiKey  API key for https://api.data.gov. Get one at https://api.data.gov/signup.  (required)
     * @param committeeId  A unique identifier assigned to each committee or filer registered with the FEC. In general committee id&#39;s begin with the letter C which is followed by eight digits.  (required)
     * @param page For paginating through results, starting at page 1 (optional, default to 1)
     * @param sortHideNull Hide null values on sorted column(s). (optional, default to false)
     * @param electionFull &#x60;True&#x60; indicates that full election period of a candidate. &#x60;False&#x60; indicates that two year election cycle. (optional, default to true)
     * @param perPage The number of results returned per page. Defaults to 20. (optional, default to 20)
     * @param sortNullOnly Toggle that filters out all rows having sort column that is non-null (optional, default to false)
     * @param sort Provide a field to sort by. Use &#x60;-&#x60; for descending order.  (optional, default to -two_year_period)
     * @param sortNullsLast Toggle that sorts null values last (optional, default to false)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call committeeCommitteeIdCandidatesHistoryGetCall(String apiKey, String committeeId, Integer page, Boolean sortHideNull, Boolean electionFull, Integer perPage, Boolean sortNullOnly, String sort, Boolean sortNullsLast, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/committee/{committee_id}/candidates/history/"
            .replace("{" + "committee_id" + "}", localVarApiClient.escapeString(committeeId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (apiKey != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api_key", apiKey));
        }

        if (sortHideNull != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort_hide_null", sortHideNull));
        }

        if (electionFull != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("election_full", electionFull));
        }

        if (perPage != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("per_page", perPage));
        }

        if (sortNullOnly != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort_null_only", sortNullOnly));
        }

        if (sort != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort", sort));
        }

        if (sortNullsLast != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort_nulls_last", sortNullsLast));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKeyHeaderAuth", "ApiKeyQueryAuth", "apiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call committeeCommitteeIdCandidatesHistoryGetValidateBeforeCall(String apiKey, String committeeId, Integer page, Boolean sortHideNull, Boolean electionFull, Integer perPage, Boolean sortNullOnly, String sort, Boolean sortNullsLast, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'apiKey' is set
        if (apiKey == null) {
            throw new ApiException("Missing the required parameter 'apiKey' when calling committeeCommitteeIdCandidatesHistoryGet(Async)");
        }

        // verify the required parameter 'committeeId' is set
        if (committeeId == null) {
            throw new ApiException("Missing the required parameter 'committeeId' when calling committeeCommitteeIdCandidatesHistoryGet(Async)");
        }

        return committeeCommitteeIdCandidatesHistoryGetCall(apiKey, committeeId, page, sortHideNull, electionFull, perPage, sortNullOnly, sort, sortNullsLast, _callback);

    }

    /**
     * 
     *  Find out a candidate&#39;s characteristics over time. This is particularly useful if the candidate runs for the same office in different districts or you want to know more about a candidate&#39;s previous races.  This information is organized by &#x60;candidate_id&#x60;, so it won&#39;t help you find a candidate who ran for different offices over time; candidates get a new ID for each office. 
     * @param apiKey  API key for https://api.data.gov. Get one at https://api.data.gov/signup.  (required)
     * @param committeeId  A unique identifier assigned to each committee or filer registered with the FEC. In general committee id&#39;s begin with the letter C which is followed by eight digits.  (required)
     * @param page For paginating through results, starting at page 1 (optional, default to 1)
     * @param sortHideNull Hide null values on sorted column(s). (optional, default to false)
     * @param electionFull &#x60;True&#x60; indicates that full election period of a candidate. &#x60;False&#x60; indicates that two year election cycle. (optional, default to true)
     * @param perPage The number of results returned per page. Defaults to 20. (optional, default to 20)
     * @param sortNullOnly Toggle that filters out all rows having sort column that is non-null (optional, default to false)
     * @param sort Provide a field to sort by. Use &#x60;-&#x60; for descending order.  (optional, default to -two_year_period)
     * @param sortNullsLast Toggle that sorts null values last (optional, default to false)
     * @return CandidateHistoryPage
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public CandidateHistoryPage committeeCommitteeIdCandidatesHistoryGet(String apiKey, String committeeId, Integer page, Boolean sortHideNull, Boolean electionFull, Integer perPage, Boolean sortNullOnly, String sort, Boolean sortNullsLast) throws ApiException {
        ApiResponse<CandidateHistoryPage> localVarResp = committeeCommitteeIdCandidatesHistoryGetWithHttpInfo(apiKey, committeeId, page, sortHideNull, electionFull, perPage, sortNullOnly, sort, sortNullsLast);
        return localVarResp.getData();
    }

    /**
     * 
     *  Find out a candidate&#39;s characteristics over time. This is particularly useful if the candidate runs for the same office in different districts or you want to know more about a candidate&#39;s previous races.  This information is organized by &#x60;candidate_id&#x60;, so it won&#39;t help you find a candidate who ran for different offices over time; candidates get a new ID for each office. 
     * @param apiKey  API key for https://api.data.gov. Get one at https://api.data.gov/signup.  (required)
     * @param committeeId  A unique identifier assigned to each committee or filer registered with the FEC. In general committee id&#39;s begin with the letter C which is followed by eight digits.  (required)
     * @param page For paginating through results, starting at page 1 (optional, default to 1)
     * @param sortHideNull Hide null values on sorted column(s). (optional, default to false)
     * @param electionFull &#x60;True&#x60; indicates that full election period of a candidate. &#x60;False&#x60; indicates that two year election cycle. (optional, default to true)
     * @param perPage The number of results returned per page. Defaults to 20. (optional, default to 20)
     * @param sortNullOnly Toggle that filters out all rows having sort column that is non-null (optional, default to false)
     * @param sort Provide a field to sort by. Use &#x60;-&#x60; for descending order.  (optional, default to -two_year_period)
     * @param sortNullsLast Toggle that sorts null values last (optional, default to false)
     * @return ApiResponse&lt;CandidateHistoryPage&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CandidateHistoryPage> committeeCommitteeIdCandidatesHistoryGetWithHttpInfo(String apiKey, String committeeId, Integer page, Boolean sortHideNull, Boolean electionFull, Integer perPage, Boolean sortNullOnly, String sort, Boolean sortNullsLast) throws ApiException {
        okhttp3.Call localVarCall = committeeCommitteeIdCandidatesHistoryGetValidateBeforeCall(apiKey, committeeId, page, sortHideNull, electionFull, perPage, sortNullOnly, sort, sortNullsLast, null);
        Type localVarReturnType = new TypeToken<CandidateHistoryPage>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     *  Find out a candidate&#39;s characteristics over time. This is particularly useful if the candidate runs for the same office in different districts or you want to know more about a candidate&#39;s previous races.  This information is organized by &#x60;candidate_id&#x60;, so it won&#39;t help you find a candidate who ran for different offices over time; candidates get a new ID for each office. 
     * @param apiKey  API key for https://api.data.gov. Get one at https://api.data.gov/signup.  (required)
     * @param committeeId  A unique identifier assigned to each committee or filer registered with the FEC. In general committee id&#39;s begin with the letter C which is followed by eight digits.  (required)
     * @param page For paginating through results, starting at page 1 (optional, default to 1)
     * @param sortHideNull Hide null values on sorted column(s). (optional, default to false)
     * @param electionFull &#x60;True&#x60; indicates that full election period of a candidate. &#x60;False&#x60; indicates that two year election cycle. (optional, default to true)
     * @param perPage The number of results returned per page. Defaults to 20. (optional, default to 20)
     * @param sortNullOnly Toggle that filters out all rows having sort column that is non-null (optional, default to false)
     * @param sort Provide a field to sort by. Use &#x60;-&#x60; for descending order.  (optional, default to -two_year_period)
     * @param sortNullsLast Toggle that sorts null values last (optional, default to false)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call committeeCommitteeIdCandidatesHistoryGetAsync(String apiKey, String committeeId, Integer page, Boolean sortHideNull, Boolean electionFull, Integer perPage, Boolean sortNullOnly, String sort, Boolean sortNullsLast, final ApiCallback<CandidateHistoryPage> _callback) throws ApiException {

        okhttp3.Call localVarCall = committeeCommitteeIdCandidatesHistoryGetValidateBeforeCall(apiKey, committeeId, page, sortHideNull, electionFull, perPage, sortNullOnly, sort, sortNullsLast, _callback);
        Type localVarReturnType = new TypeToken<CandidateHistoryPage>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
