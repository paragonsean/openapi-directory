/*
 * OpenFEC
 * This application programming interface (API) allows you to explore the way candidates and committees fund their campaigns.    The Federal Election Commission (FEC) API is a RESTful web service supporting full-text and field-specific searches on FEC data. [Bulk downloads](https://www.fec.gov/data/advanced/?tab=bulk-data) are available on the current site. Information is tied to the underlying forms by file ID and image ID. Data is updated nightly.    There are a lot of data, and a good place to start is to use search to find interesting candidates and committees. Then, you can use their IDs to find report or line item details with the other endpoints. If you are interested in individual donors, check out contributor information in the `/schedule_a/` endpoints.    <b class=\"body\" id=\"getting_started_head\">Getting started with the openFEC API</b><br>    If you would like to use the FEC's API programmatically, you can sign up for your own API key using our form. Alternatively, you can still try out our API without an API key by using the web interface and using DEMO_KEY. Note that when you use the openFEC API you are subject to the [Terms of Service](https://github.com/fecgov/FEC/blob/master/TERMS-OF-SERVICE.md) and [Acceptable Use policy](https://github.com/fecgov/FEC/blob/master/ACCEPTABLE-USE-POLICY.md).    Signing up for an API key will enable you to place up to 1,000 calls an hour. Each call is limited to 100 results per page. You can email questions, comments or a request to get a key for 7,200 calls an hour (120 calls per minute) to <a href=\"mailto:APIinfo@fec.gov\">APIinfo@fec.gov</a>. You can also ask questions and discuss the data in a community led [group](https://groups.google.com/forum/#!forum/fec-data).    The model definitions and schema are available at [/swagger](/swagger/). This is useful for making wrappers and exploring the data.    A few restrictions limit the way you can use FEC data. For example, you canâ€™t use contributor lists for commercial purposes or to solicit donations. [Learn more here](https://www.fec.gov/updates/sale-or-use-contributor-information/).    [Inspect our source code](https://github.com/fecgov/openFEC). We welcome issues and pull requests!    <p><br></p> <h2 class=\"title\" id=\"signup_head\">Sign up for an API key</h2> <div id=\"apidatagov_signup\">Loading signup form...</div>
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.LocalDate;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.CommitteeSponsorCandidateListInner;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Committee
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:02:12.812386-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Committee {
  public static final String SERIALIZED_NAME_AFFILIATED_COMMITTEE_NAME = "affiliated_committee_name";
  @SerializedName(SERIALIZED_NAME_AFFILIATED_COMMITTEE_NAME)
  private String affiliatedCommitteeName;

  public static final String SERIALIZED_NAME_CANDIDATE_IDS = "candidate_ids";
  @SerializedName(SERIALIZED_NAME_CANDIDATE_IDS)
  private List<String> candidateIds;

  public static final String SERIALIZED_NAME_COMMITTEE_ID = "committee_id";
  @SerializedName(SERIALIZED_NAME_COMMITTEE_ID)
  private String committeeId;

  public static final String SERIALIZED_NAME_COMMITTEE_TYPE = "committee_type";
  @SerializedName(SERIALIZED_NAME_COMMITTEE_TYPE)
  private String committeeType;

  public static final String SERIALIZED_NAME_COMMITTEE_TYPE_FULL = "committee_type_full";
  @SerializedName(SERIALIZED_NAME_COMMITTEE_TYPE_FULL)
  private String committeeTypeFull;

  public static final String SERIALIZED_NAME_CYCLES = "cycles";
  @SerializedName(SERIALIZED_NAME_CYCLES)
  private List<Integer> cycles;

  public static final String SERIALIZED_NAME_DESIGNATION = "designation";
  @SerializedName(SERIALIZED_NAME_DESIGNATION)
  private String designation;

  public static final String SERIALIZED_NAME_DESIGNATION_FULL = "designation_full";
  @SerializedName(SERIALIZED_NAME_DESIGNATION_FULL)
  private String designationFull;

  public static final String SERIALIZED_NAME_FILING_FREQUENCY = "filing_frequency";
  @SerializedName(SERIALIZED_NAME_FILING_FREQUENCY)
  private String filingFrequency;

  public static final String SERIALIZED_NAME_FIRST_F1_DATE = "first_f1_date";
  @SerializedName(SERIALIZED_NAME_FIRST_F1_DATE)
  private LocalDate firstF1Date;

  public static final String SERIALIZED_NAME_FIRST_FILE_DATE = "first_file_date";
  @SerializedName(SERIALIZED_NAME_FIRST_FILE_DATE)
  private LocalDate firstFileDate;

  public static final String SERIALIZED_NAME_LAST_F1_DATE = "last_f1_date";
  @SerializedName(SERIALIZED_NAME_LAST_F1_DATE)
  private LocalDate lastF1Date;

  public static final String SERIALIZED_NAME_LAST_FILE_DATE = "last_file_date";
  @SerializedName(SERIALIZED_NAME_LAST_FILE_DATE)
  private LocalDate lastFileDate;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_ORGANIZATION_TYPE = "organization_type";
  @SerializedName(SERIALIZED_NAME_ORGANIZATION_TYPE)
  private String organizationType;

  public static final String SERIALIZED_NAME_ORGANIZATION_TYPE_FULL = "organization_type_full";
  @SerializedName(SERIALIZED_NAME_ORGANIZATION_TYPE_FULL)
  private String organizationTypeFull;

  public static final String SERIALIZED_NAME_PARTY = "party";
  @SerializedName(SERIALIZED_NAME_PARTY)
  private String party;

  public static final String SERIALIZED_NAME_PARTY_FULL = "party_full";
  @SerializedName(SERIALIZED_NAME_PARTY_FULL)
  private String partyFull;

  public static final String SERIALIZED_NAME_SPONSOR_CANDIDATE_IDS = "sponsor_candidate_ids";
  @SerializedName(SERIALIZED_NAME_SPONSOR_CANDIDATE_IDS)
  private List<String> sponsorCandidateIds;

  public static final String SERIALIZED_NAME_SPONSOR_CANDIDATE_LIST = "sponsor_candidate_list";
  @SerializedName(SERIALIZED_NAME_SPONSOR_CANDIDATE_LIST)
  private List<CommitteeSponsorCandidateListInner> sponsorCandidateList = new ArrayList<>();

  public static final String SERIALIZED_NAME_STATE = "state";
  @SerializedName(SERIALIZED_NAME_STATE)
  private String state;

  public static final String SERIALIZED_NAME_TREASURER_NAME = "treasurer_name";
  @SerializedName(SERIALIZED_NAME_TREASURER_NAME)
  private String treasurerName;

  public Committee() {
  }

  public Committee affiliatedCommitteeName(String affiliatedCommitteeName) {
    this.affiliatedCommitteeName = affiliatedCommitteeName;
    return this;
  }

  /**
   *  Affiliated committee or connected organization 
   * @return affiliatedCommitteeName
   */
  @javax.annotation.Nullable
  public String getAffiliatedCommitteeName() {
    return affiliatedCommitteeName;
  }

  public void setAffiliatedCommitteeName(String affiliatedCommitteeName) {
    this.affiliatedCommitteeName = affiliatedCommitteeName;
  }


  public Committee candidateIds(List<String> candidateIds) {
    this.candidateIds = candidateIds;
    return this;
  }

  public Committee addCandidateIdsItem(String candidateIdsItem) {
    if (this.candidateIds == null) {
      this.candidateIds = new ArrayList<>();
    }
    this.candidateIds.add(candidateIdsItem);
    return this;
  }

  /**
   *  A unique identifier assigned to each candidate registered with the FEC. If a person runs for several offices, that person will have separate candidate IDs for each office. First character indicates office - [P]residential, [H]ouse, [S]enate]. Second character is the last digit of the two-year period the ID was created. Third and fourth is the candidate state. Presidential IDs don&#39;t have state. Fifth and sixth is the district when the candidate first ran. This does not change if the candidate/member&#39;s district changes during re-districting. Presidential IDs don&#39;t have districts. The rest is sequence. 
   * @return candidateIds
   */
  @javax.annotation.Nullable
  public List<String> getCandidateIds() {
    return candidateIds;
  }

  public void setCandidateIds(List<String> candidateIds) {
    this.candidateIds = candidateIds;
  }


  public Committee committeeId(String committeeId) {
    this.committeeId = committeeId;
    return this;
  }

  /**
   *  A unique identifier assigned to each committee or filer registered with the FEC. In general committee id&#39;s begin with the letter C which is followed by eight digits. 
   * @return committeeId
   */
  @javax.annotation.Nonnull
  public String getCommitteeId() {
    return committeeId;
  }

  public void setCommitteeId(String committeeId) {
    this.committeeId = committeeId;
  }


  public Committee committeeType(String committeeType) {
    this.committeeType = committeeType;
    return this;
  }

  /**
   * The one-letter type code of the organization:         - C communication cost         - D delegate         - E electioneering communication         - H House         - I independent expenditure filer (not a committee)         - N PAC - nonqualified         - O independent expenditure-only (super PACs)         - P presidential         - Q PAC - qualified         - S Senate         - U single candidate independent expenditure         - V PAC with non-contribution account, nonqualified         - W PAC with non-contribution account, qualified         - X party, nonqualified         - Y party, qualified         - Z national party non-federal account 
   * @return committeeType
   */
  @javax.annotation.Nullable
  public String getCommitteeType() {
    return committeeType;
  }

  public void setCommitteeType(String committeeType) {
    this.committeeType = committeeType;
  }


  public Committee committeeTypeFull(String committeeTypeFull) {
    this.committeeTypeFull = committeeTypeFull;
    return this;
  }

  /**
   * The one-letter type code of the organization:         - C communication cost         - D delegate         - E electioneering communication         - H House         - I independent expenditure filer (not a committee)         - N PAC - nonqualified         - O independent expenditure-only (super PACs)         - P presidential         - Q PAC - qualified         - S Senate         - U single candidate independent expenditure         - V PAC with non-contribution account, nonqualified         - W PAC with non-contribution account, qualified         - X party, nonqualified         - Y party, qualified         - Z national party non-federal account 
   * @return committeeTypeFull
   */
  @javax.annotation.Nullable
  public String getCommitteeTypeFull() {
    return committeeTypeFull;
  }

  public void setCommitteeTypeFull(String committeeTypeFull) {
    this.committeeTypeFull = committeeTypeFull;
  }


  public Committee cycles(List<Integer> cycles) {
    this.cycles = cycles;
    return this;
  }

  public Committee addCyclesItem(Integer cyclesItem) {
    if (this.cycles == null) {
      this.cycles = new ArrayList<>();
    }
    this.cycles.add(cyclesItem);
    return this;
  }

  /**
   *  A two year election cycle that the committee was active- (after original registration date but before expiration date in Form 1s) The cycle begins with an odd year and is named for its ending, even year. 
   * @return cycles
   */
  @javax.annotation.Nullable
  public List<Integer> getCycles() {
    return cycles;
  }

  public void setCycles(List<Integer> cycles) {
    this.cycles = cycles;
  }


  public Committee designation(String designation) {
    this.designation = designation;
    return this;
  }

  /**
   * The one-letter designation code of the organization:          - A authorized by a candidate          - J joint fundraising committee          - P principal campaign committee of a candidate          - U unauthorized          - B lobbyist/registrant PAC          - D leadership PAC 
   * @return designation
   */
  @javax.annotation.Nullable
  public String getDesignation() {
    return designation;
  }

  public void setDesignation(String designation) {
    this.designation = designation;
  }


  public Committee designationFull(String designationFull) {
    this.designationFull = designationFull;
    return this;
  }

  /**
   * The one-letter designation code of the organization:          - A authorized by a candidate          - J joint fundraising committee          - P principal campaign committee of a candidate          - U unauthorized          - B lobbyist/registrant PAC          - D leadership PAC 
   * @return designationFull
   */
  @javax.annotation.Nullable
  public String getDesignationFull() {
    return designationFull;
  }

  public void setDesignationFull(String designationFull) {
    this.designationFull = designationFull;
  }


  public Committee filingFrequency(String filingFrequency) {
    this.filingFrequency = filingFrequency;
    return this;
  }

  /**
   * The one-letter      code of the filing frequency:          - A Administratively terminated          - D Debt          - M Monthly filer          - Q Quarterly filer          - T Terminated          - W Waived 
   * @return filingFrequency
   */
  @javax.annotation.Nullable
  public String getFilingFrequency() {
    return filingFrequency;
  }

  public void setFilingFrequency(String filingFrequency) {
    this.filingFrequency = filingFrequency;
  }


  public Committee firstF1Date(LocalDate firstF1Date) {
    this.firstF1Date = firstF1Date;
    return this;
  }

  /**
   * The day the FEC received the committee&#39;s first Form 1
   * @return firstF1Date
   */
  @javax.annotation.Nullable
  public LocalDate getFirstF1Date() {
    return firstF1Date;
  }

  public void setFirstF1Date(LocalDate firstF1Date) {
    this.firstF1Date = firstF1Date;
  }


  public Committee firstFileDate(LocalDate firstFileDate) {
    this.firstFileDate = firstFileDate;
    return this;
  }

  /**
   * The day the FEC received the committee&#39;s first filing. This is usually a Form 1 committee registration.
   * @return firstFileDate
   */
  @javax.annotation.Nullable
  public LocalDate getFirstFileDate() {
    return firstFileDate;
  }

  public void setFirstFileDate(LocalDate firstFileDate) {
    this.firstFileDate = firstFileDate;
  }


  public Committee lastF1Date(LocalDate lastF1Date) {
    this.lastF1Date = lastF1Date;
    return this;
  }

  /**
   * The day the FEC received the committee&#39;s most recent Form 1
   * @return lastF1Date
   */
  @javax.annotation.Nullable
  public LocalDate getLastF1Date() {
    return lastF1Date;
  }

  public void setLastF1Date(LocalDate lastF1Date) {
    this.lastF1Date = lastF1Date;
  }


  public Committee lastFileDate(LocalDate lastFileDate) {
    this.lastFileDate = lastFileDate;
    return this;
  }

  /**
   * The day the FEC received the committee&#39;s most recent filing
   * @return lastFileDate
   */
  @javax.annotation.Nullable
  public LocalDate getLastFileDate() {
    return lastFileDate;
  }

  public void setLastFileDate(LocalDate lastFileDate) {
    this.lastFileDate = lastFileDate;
  }


  public Committee name(String name) {
    this.name = name;
    return this;
  }

  /**
   * The name of the committee. If a committee changes its name,     the most recent name will be shown. Committee names are not unique. Use committee_id     for looking up records.
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public Committee organizationType(String organizationType) {
    this.organizationType = organizationType;
    return this;
  }

  /**
   * The one-letter code for the kind for organization:         - C corporation         - L labor organization         - M membership organization         - T trade association         - V cooperative         - W corporation without capital stock 
   * @return organizationType
   */
  @javax.annotation.Nullable
  public String getOrganizationType() {
    return organizationType;
  }

  public void setOrganizationType(String organizationType) {
    this.organizationType = organizationType;
  }


  public Committee organizationTypeFull(String organizationTypeFull) {
    this.organizationTypeFull = organizationTypeFull;
    return this;
  }

  /**
   * The one-letter code for the kind for organization:         - C corporation         - L labor organization         - M membership organization         - T trade association         - V cooperative         - W corporation without capital stock 
   * @return organizationTypeFull
   */
  @javax.annotation.Nullable
  public String getOrganizationTypeFull() {
    return organizationTypeFull;
  }

  public void setOrganizationTypeFull(String organizationTypeFull) {
    this.organizationTypeFull = organizationTypeFull;
  }


  public Committee party(String party) {
    this.party = party;
    return this;
  }

  /**
   * Three-letter code for the party affiliated with a candidate or committee. For example, DEM for Democratic Party and REP for Republican Party.
   * @return party
   */
  @javax.annotation.Nullable
  public String getParty() {
    return party;
  }

  public void setParty(String party) {
    this.party = party;
  }


  public Committee partyFull(String partyFull) {
    this.partyFull = partyFull;
    return this;
  }

  /**
   * Three-letter code for the party affiliated with a candidate or committee. For example, DEM for Democratic Party and REP for Republican Party.
   * @return partyFull
   */
  @javax.annotation.Nullable
  public String getPartyFull() {
    return partyFull;
  }

  public void setPartyFull(String partyFull) {
    this.partyFull = partyFull;
  }


  public Committee sponsorCandidateIds(List<String> sponsorCandidateIds) {
    this.sponsorCandidateIds = sponsorCandidateIds;
    return this;
  }

  public Committee addSponsorCandidateIdsItem(String sponsorCandidateIdsItem) {
    if (this.sponsorCandidateIds == null) {
      this.sponsorCandidateIds = new ArrayList<>();
    }
    this.sponsorCandidateIds.add(sponsorCandidateIdsItem);
    return this;
  }

  /**
   *  A unique identifier assigned to each candidate registered with the FEC. If a person runs for several offices, that person will have separate candidate IDs for each office. This is a filter for Leadership PAC sponsor. 
   * @return sponsorCandidateIds
   */
  @javax.annotation.Nullable
  public List<String> getSponsorCandidateIds() {
    return sponsorCandidateIds;
  }

  public void setSponsorCandidateIds(List<String> sponsorCandidateIds) {
    this.sponsorCandidateIds = sponsorCandidateIds;
  }


  public Committee sponsorCandidateList(List<CommitteeSponsorCandidateListInner> sponsorCandidateList) {
    this.sponsorCandidateList = sponsorCandidateList;
    return this;
  }

  public Committee addSponsorCandidateListItem(CommitteeSponsorCandidateListInner sponsorCandidateListItem) {
    if (this.sponsorCandidateList == null) {
      this.sponsorCandidateList = new ArrayList<>();
    }
    this.sponsorCandidateList.add(sponsorCandidateListItem);
    return this;
  }

  /**
   * Get sponsorCandidateList
   * @return sponsorCandidateList
   */
  @javax.annotation.Nullable
  public List<CommitteeSponsorCandidateListInner> getSponsorCandidateList() {
    return sponsorCandidateList;
  }

  public void setSponsorCandidateList(List<CommitteeSponsorCandidateListInner> sponsorCandidateList) {
    this.sponsorCandidateList = sponsorCandidateList;
  }


  public Committee state(String state) {
    this.state = state;
    return this;
  }

  /**
   *  State of the committee&#39;s address as filed on the Form 1 
   * @return state
   */
  @javax.annotation.Nullable
  public String getState() {
    return state;
  }

  public void setState(String state) {
    this.state = state;
  }


  public Committee treasurerName(String treasurerName) {
    this.treasurerName = treasurerName;
    return this;
  }

  /**
   * Name of the Committee&#39;s treasurer. If multiple treasurers for the committee, the most recent treasurer will be shown.
   * @return treasurerName
   */
  @javax.annotation.Nullable
  public String getTreasurerName() {
    return treasurerName;
  }

  public void setTreasurerName(String treasurerName) {
    this.treasurerName = treasurerName;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Committee committee = (Committee) o;
    return Objects.equals(this.affiliatedCommitteeName, committee.affiliatedCommitteeName) &&
        Objects.equals(this.candidateIds, committee.candidateIds) &&
        Objects.equals(this.committeeId, committee.committeeId) &&
        Objects.equals(this.committeeType, committee.committeeType) &&
        Objects.equals(this.committeeTypeFull, committee.committeeTypeFull) &&
        Objects.equals(this.cycles, committee.cycles) &&
        Objects.equals(this.designation, committee.designation) &&
        Objects.equals(this.designationFull, committee.designationFull) &&
        Objects.equals(this.filingFrequency, committee.filingFrequency) &&
        Objects.equals(this.firstF1Date, committee.firstF1Date) &&
        Objects.equals(this.firstFileDate, committee.firstFileDate) &&
        Objects.equals(this.lastF1Date, committee.lastF1Date) &&
        Objects.equals(this.lastFileDate, committee.lastFileDate) &&
        Objects.equals(this.name, committee.name) &&
        Objects.equals(this.organizationType, committee.organizationType) &&
        Objects.equals(this.organizationTypeFull, committee.organizationTypeFull) &&
        Objects.equals(this.party, committee.party) &&
        Objects.equals(this.partyFull, committee.partyFull) &&
        Objects.equals(this.sponsorCandidateIds, committee.sponsorCandidateIds) &&
        Objects.equals(this.sponsorCandidateList, committee.sponsorCandidateList) &&
        Objects.equals(this.state, committee.state) &&
        Objects.equals(this.treasurerName, committee.treasurerName);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(affiliatedCommitteeName, candidateIds, committeeId, committeeType, committeeTypeFull, cycles, designation, designationFull, filingFrequency, firstF1Date, firstFileDate, lastF1Date, lastFileDate, name, organizationType, organizationTypeFull, party, partyFull, sponsorCandidateIds, sponsorCandidateList, state, treasurerName);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Committee {\n");
    sb.append("    affiliatedCommitteeName: ").append(toIndentedString(affiliatedCommitteeName)).append("\n");
    sb.append("    candidateIds: ").append(toIndentedString(candidateIds)).append("\n");
    sb.append("    committeeId: ").append(toIndentedString(committeeId)).append("\n");
    sb.append("    committeeType: ").append(toIndentedString(committeeType)).append("\n");
    sb.append("    committeeTypeFull: ").append(toIndentedString(committeeTypeFull)).append("\n");
    sb.append("    cycles: ").append(toIndentedString(cycles)).append("\n");
    sb.append("    designation: ").append(toIndentedString(designation)).append("\n");
    sb.append("    designationFull: ").append(toIndentedString(designationFull)).append("\n");
    sb.append("    filingFrequency: ").append(toIndentedString(filingFrequency)).append("\n");
    sb.append("    firstF1Date: ").append(toIndentedString(firstF1Date)).append("\n");
    sb.append("    firstFileDate: ").append(toIndentedString(firstFileDate)).append("\n");
    sb.append("    lastF1Date: ").append(toIndentedString(lastF1Date)).append("\n");
    sb.append("    lastFileDate: ").append(toIndentedString(lastFileDate)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    organizationType: ").append(toIndentedString(organizationType)).append("\n");
    sb.append("    organizationTypeFull: ").append(toIndentedString(organizationTypeFull)).append("\n");
    sb.append("    party: ").append(toIndentedString(party)).append("\n");
    sb.append("    partyFull: ").append(toIndentedString(partyFull)).append("\n");
    sb.append("    sponsorCandidateIds: ").append(toIndentedString(sponsorCandidateIds)).append("\n");
    sb.append("    sponsorCandidateList: ").append(toIndentedString(sponsorCandidateList)).append("\n");
    sb.append("    state: ").append(toIndentedString(state)).append("\n");
    sb.append("    treasurerName: ").append(toIndentedString(treasurerName)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("affiliated_committee_name");
    openapiFields.add("candidate_ids");
    openapiFields.add("committee_id");
    openapiFields.add("committee_type");
    openapiFields.add("committee_type_full");
    openapiFields.add("cycles");
    openapiFields.add("designation");
    openapiFields.add("designation_full");
    openapiFields.add("filing_frequency");
    openapiFields.add("first_f1_date");
    openapiFields.add("first_file_date");
    openapiFields.add("last_f1_date");
    openapiFields.add("last_file_date");
    openapiFields.add("name");
    openapiFields.add("organization_type");
    openapiFields.add("organization_type_full");
    openapiFields.add("party");
    openapiFields.add("party_full");
    openapiFields.add("sponsor_candidate_ids");
    openapiFields.add("sponsor_candidate_list");
    openapiFields.add("state");
    openapiFields.add("treasurer_name");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("committee_id");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Committee
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Committee.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Committee is not found in the empty JSON string", Committee.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Committee.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Committee` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : Committee.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("affiliated_committee_name") != null && !jsonObj.get("affiliated_committee_name").isJsonNull()) && !jsonObj.get("affiliated_committee_name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `affiliated_committee_name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("affiliated_committee_name").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("candidate_ids") != null && !jsonObj.get("candidate_ids").isJsonNull() && !jsonObj.get("candidate_ids").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `candidate_ids` to be an array in the JSON string but got `%s`", jsonObj.get("candidate_ids").toString()));
      }
      if (!jsonObj.get("committee_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `committee_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("committee_id").toString()));
      }
      if ((jsonObj.get("committee_type") != null && !jsonObj.get("committee_type").isJsonNull()) && !jsonObj.get("committee_type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `committee_type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("committee_type").toString()));
      }
      if ((jsonObj.get("committee_type_full") != null && !jsonObj.get("committee_type_full").isJsonNull()) && !jsonObj.get("committee_type_full").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `committee_type_full` to be a primitive type in the JSON string but got `%s`", jsonObj.get("committee_type_full").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("cycles") != null && !jsonObj.get("cycles").isJsonNull() && !jsonObj.get("cycles").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `cycles` to be an array in the JSON string but got `%s`", jsonObj.get("cycles").toString()));
      }
      if ((jsonObj.get("designation") != null && !jsonObj.get("designation").isJsonNull()) && !jsonObj.get("designation").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `designation` to be a primitive type in the JSON string but got `%s`", jsonObj.get("designation").toString()));
      }
      if ((jsonObj.get("designation_full") != null && !jsonObj.get("designation_full").isJsonNull()) && !jsonObj.get("designation_full").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `designation_full` to be a primitive type in the JSON string but got `%s`", jsonObj.get("designation_full").toString()));
      }
      if ((jsonObj.get("filing_frequency") != null && !jsonObj.get("filing_frequency").isJsonNull()) && !jsonObj.get("filing_frequency").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `filing_frequency` to be a primitive type in the JSON string but got `%s`", jsonObj.get("filing_frequency").toString()));
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if ((jsonObj.get("organization_type") != null && !jsonObj.get("organization_type").isJsonNull()) && !jsonObj.get("organization_type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `organization_type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("organization_type").toString()));
      }
      if ((jsonObj.get("organization_type_full") != null && !jsonObj.get("organization_type_full").isJsonNull()) && !jsonObj.get("organization_type_full").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `organization_type_full` to be a primitive type in the JSON string but got `%s`", jsonObj.get("organization_type_full").toString()));
      }
      if ((jsonObj.get("party") != null && !jsonObj.get("party").isJsonNull()) && !jsonObj.get("party").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `party` to be a primitive type in the JSON string but got `%s`", jsonObj.get("party").toString()));
      }
      if ((jsonObj.get("party_full") != null && !jsonObj.get("party_full").isJsonNull()) && !jsonObj.get("party_full").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `party_full` to be a primitive type in the JSON string but got `%s`", jsonObj.get("party_full").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("sponsor_candidate_ids") != null && !jsonObj.get("sponsor_candidate_ids").isJsonNull() && !jsonObj.get("sponsor_candidate_ids").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `sponsor_candidate_ids` to be an array in the JSON string but got `%s`", jsonObj.get("sponsor_candidate_ids").toString()));
      }
      if (jsonObj.get("sponsor_candidate_list") != null && !jsonObj.get("sponsor_candidate_list").isJsonNull()) {
        JsonArray jsonArraysponsorCandidateList = jsonObj.getAsJsonArray("sponsor_candidate_list");
        if (jsonArraysponsorCandidateList != null) {
          // ensure the json data is an array
          if (!jsonObj.get("sponsor_candidate_list").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `sponsor_candidate_list` to be an array in the JSON string but got `%s`", jsonObj.get("sponsor_candidate_list").toString()));
          }

          // validate the optional field `sponsor_candidate_list` (array)
          for (int i = 0; i < jsonArraysponsorCandidateList.size(); i++) {
            CommitteeSponsorCandidateListInner.validateJsonElement(jsonArraysponsorCandidateList.get(i));
          };
        }
      }
      if ((jsonObj.get("state") != null && !jsonObj.get("state").isJsonNull()) && !jsonObj.get("state").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `state` to be a primitive type in the JSON string but got `%s`", jsonObj.get("state").toString()));
      }
      if ((jsonObj.get("treasurer_name") != null && !jsonObj.get("treasurer_name").isJsonNull()) && !jsonObj.get("treasurer_name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `treasurer_name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("treasurer_name").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Committee.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Committee' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Committee> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Committee.class));

       return (TypeAdapter<T>) new TypeAdapter<Committee>() {
           @Override
           public void write(JsonWriter out, Committee value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Committee read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Committee given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Committee
   * @throws IOException if the JSON string is invalid with respect to Committee
   */
  public static Committee fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Committee.class);
  }

  /**
   * Convert an instance of Committee to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

