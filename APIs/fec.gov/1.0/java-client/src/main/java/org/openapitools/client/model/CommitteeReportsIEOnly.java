/*
 * OpenFEC
 * This application programming interface (API) allows you to explore the way candidates and committees fund their campaigns.    The Federal Election Commission (FEC) API is a RESTful web service supporting full-text and field-specific searches on FEC data. [Bulk downloads](https://www.fec.gov/data/advanced/?tab=bulk-data) are available on the current site. Information is tied to the underlying forms by file ID and image ID. Data is updated nightly.    There are a lot of data, and a good place to start is to use search to find interesting candidates and committees. Then, you can use their IDs to find report or line item details with the other endpoints. If you are interested in individual donors, check out contributor information in the `/schedule_a/` endpoints.    <b class=\"body\" id=\"getting_started_head\">Getting started with the openFEC API</b><br>    If you would like to use the FEC's API programmatically, you can sign up for your own API key using our form. Alternatively, you can still try out our API without an API key by using the web interface and using DEMO_KEY. Note that when you use the openFEC API you are subject to the [Terms of Service](https://github.com/fecgov/FEC/blob/master/TERMS-OF-SERVICE.md) and [Acceptable Use policy](https://github.com/fecgov/FEC/blob/master/ACCEPTABLE-USE-POLICY.md).    Signing up for an API key will enable you to place up to 1,000 calls an hour. Each call is limited to 100 results per page. You can email questions, comments or a request to get a key for 7,200 calls an hour (120 calls per minute) to <a href=\"mailto:APIinfo@fec.gov\">APIinfo@fec.gov</a>. You can also ask questions and discuss the data in a community led [group](https://groups.google.com/forum/#!forum/fec-data).    The model definitions and schema are available at [/swagger](/swagger/). This is useful for making wrappers and exploring the data.    A few restrictions limit the way you can use FEC data. For example, you canâ€™t use contributor lists for commercial purposes or to solicit donations. [Learn more here](https://www.fec.gov/updates/sale-or-use-contributor-information/).    [Inspect our source code](https://github.com/fecgov/openFEC). We welcome issues and pull requests!    <p><br></p> <h2 class=\"title\" id=\"signup_head\">Sign up for an API key</h2> <div id=\"apidatagov_signup\">Loading signup form...</div>
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.math.BigDecimal;
import java.time.LocalDate;
import java.time.OffsetDateTime;
import java.util.Arrays;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * CommitteeReportsIEOnly
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:02:12.812386-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class CommitteeReportsIEOnly {
  public static final String SERIALIZED_NAME_BEGINNING_IMAGE_NUMBER = "beginning_image_number";
  @SerializedName(SERIALIZED_NAME_BEGINNING_IMAGE_NUMBER)
  private String beginningImageNumber;

  public static final String SERIALIZED_NAME_COMMITTEE_ID = "committee_id";
  @SerializedName(SERIALIZED_NAME_COMMITTEE_ID)
  private String committeeId;

  public static final String SERIALIZED_NAME_COMMITTEE_NAME = "committee_name";
  @SerializedName(SERIALIZED_NAME_COMMITTEE_NAME)
  private String committeeName;

  public static final String SERIALIZED_NAME_COMMITTEE_TYPE = "committee_type";
  @SerializedName(SERIALIZED_NAME_COMMITTEE_TYPE)
  private String committeeType;

  public static final String SERIALIZED_NAME_COVERAGE_END_DATE = "coverage_end_date";
  @SerializedName(SERIALIZED_NAME_COVERAGE_END_DATE)
  private OffsetDateTime coverageEndDate;

  public static final String SERIALIZED_NAME_COVERAGE_START_DATE = "coverage_start_date";
  @SerializedName(SERIALIZED_NAME_COVERAGE_START_DATE)
  private OffsetDateTime coverageStartDate;

  public static final String SERIALIZED_NAME_CSV_URL = "csv_url";
  @SerializedName(SERIALIZED_NAME_CSV_URL)
  private String csvUrl;

  public static final String SERIALIZED_NAME_CYCLE = "cycle";
  @SerializedName(SERIALIZED_NAME_CYCLE)
  private Integer cycle;

  public static final String SERIALIZED_NAME_DOCUMENT_DESCRIPTION = "document_description";
  @SerializedName(SERIALIZED_NAME_DOCUMENT_DESCRIPTION)
  private String documentDescription;

  public static final String SERIALIZED_NAME_END_IMAGE_NUMBER = "end_image_number";
  @SerializedName(SERIALIZED_NAME_END_IMAGE_NUMBER)
  private String endImageNumber;

  public static final String SERIALIZED_NAME_FEC_FILE_ID = "fec_file_id";
  @SerializedName(SERIALIZED_NAME_FEC_FILE_ID)
  private String fecFileId;

  public static final String SERIALIZED_NAME_FEC_URL = "fec_url";
  @SerializedName(SERIALIZED_NAME_FEC_URL)
  private String fecUrl;

  public static final String SERIALIZED_NAME_INDEPENDENT_CONTRIBUTIONS_PERIOD = "independent_contributions_period";
  @SerializedName(SERIALIZED_NAME_INDEPENDENT_CONTRIBUTIONS_PERIOD)
  private BigDecimal independentContributionsPeriod;

  public static final String SERIALIZED_NAME_INDEPENDENT_EXPENDITURES_PERIOD = "independent_expenditures_period";
  @SerializedName(SERIALIZED_NAME_INDEPENDENT_EXPENDITURES_PERIOD)
  private BigDecimal independentExpendituresPeriod;

  public static final String SERIALIZED_NAME_IS_AMENDED = "is_amended";
  @SerializedName(SERIALIZED_NAME_IS_AMENDED)
  private Boolean isAmended;

  public static final String SERIALIZED_NAME_MEANS_FILED = "means_filed";
  @SerializedName(SERIALIZED_NAME_MEANS_FILED)
  private String meansFiled;

  public static final String SERIALIZED_NAME_PDF_URL = "pdf_url";
  @SerializedName(SERIALIZED_NAME_PDF_URL)
  private String pdfUrl;

  public static final String SERIALIZED_NAME_RECEIPT_DATE = "receipt_date";
  @SerializedName(SERIALIZED_NAME_RECEIPT_DATE)
  private LocalDate receiptDate;

  public static final String SERIALIZED_NAME_REPORT_FORM = "report_form";
  @SerializedName(SERIALIZED_NAME_REPORT_FORM)
  private String reportForm;

  public static final String SERIALIZED_NAME_REPORT_TYPE = "report_type";
  @SerializedName(SERIALIZED_NAME_REPORT_TYPE)
  private String reportType;

  public static final String SERIALIZED_NAME_REPORT_TYPE_FULL = "report_type_full";
  @SerializedName(SERIALIZED_NAME_REPORT_TYPE_FULL)
  private String reportTypeFull;

  public static final String SERIALIZED_NAME_REPORT_YEAR = "report_year";
  @SerializedName(SERIALIZED_NAME_REPORT_YEAR)
  private Integer reportYear;

  public CommitteeReportsIEOnly() {
  }

  public CommitteeReportsIEOnly beginningImageNumber(String beginningImageNumber) {
    this.beginningImageNumber = beginningImageNumber;
    return this;
  }

  /**
   * Get beginningImageNumber
   * @return beginningImageNumber
   */
  @javax.annotation.Nullable
  public String getBeginningImageNumber() {
    return beginningImageNumber;
  }

  public void setBeginningImageNumber(String beginningImageNumber) {
    this.beginningImageNumber = beginningImageNumber;
  }


  public CommitteeReportsIEOnly committeeId(String committeeId) {
    this.committeeId = committeeId;
    return this;
  }

  /**
   * Get committeeId
   * @return committeeId
   */
  @javax.annotation.Nullable
  public String getCommitteeId() {
    return committeeId;
  }

  public void setCommitteeId(String committeeId) {
    this.committeeId = committeeId;
  }


  public CommitteeReportsIEOnly committeeName(String committeeName) {
    this.committeeName = committeeName;
    return this;
  }

  /**
   * Get committeeName
   * @return committeeName
   */
  @javax.annotation.Nullable
  public String getCommitteeName() {
    return committeeName;
  }

  public void setCommitteeName(String committeeName) {
    this.committeeName = committeeName;
  }


  public CommitteeReportsIEOnly committeeType(String committeeType) {
    this.committeeType = committeeType;
    return this;
  }

  /**
   * Get committeeType
   * @return committeeType
   */
  @javax.annotation.Nullable
  public String getCommitteeType() {
    return committeeType;
  }

  public void setCommitteeType(String committeeType) {
    this.committeeType = committeeType;
  }


  public CommitteeReportsIEOnly coverageEndDate(OffsetDateTime coverageEndDate) {
    this.coverageEndDate = coverageEndDate;
    return this;
  }

  /**
   * Get coverageEndDate
   * @return coverageEndDate
   */
  @javax.annotation.Nullable
  public OffsetDateTime getCoverageEndDate() {
    return coverageEndDate;
  }

  public void setCoverageEndDate(OffsetDateTime coverageEndDate) {
    this.coverageEndDate = coverageEndDate;
  }


  public CommitteeReportsIEOnly coverageStartDate(OffsetDateTime coverageStartDate) {
    this.coverageStartDate = coverageStartDate;
    return this;
  }

  /**
   * Get coverageStartDate
   * @return coverageStartDate
   */
  @javax.annotation.Nullable
  public OffsetDateTime getCoverageStartDate() {
    return coverageStartDate;
  }

  public void setCoverageStartDate(OffsetDateTime coverageStartDate) {
    this.coverageStartDate = coverageStartDate;
  }


  public CommitteeReportsIEOnly csvUrl(String csvUrl) {
    this.csvUrl = csvUrl;
    return this;
  }

  /**
   * Get csvUrl
   * @return csvUrl
   */
  @javax.annotation.Nullable
  public String getCsvUrl() {
    return csvUrl;
  }

  public void setCsvUrl(String csvUrl) {
    this.csvUrl = csvUrl;
  }


  public CommitteeReportsIEOnly cycle(Integer cycle) {
    this.cycle = cycle;
    return this;
  }

  /**
   * Get cycle
   * @return cycle
   */
  @javax.annotation.Nullable
  public Integer getCycle() {
    return cycle;
  }

  public void setCycle(Integer cycle) {
    this.cycle = cycle;
  }


  public CommitteeReportsIEOnly documentDescription(String documentDescription) {
    this.documentDescription = documentDescription;
    return this;
  }

  /**
   * Get documentDescription
   * @return documentDescription
   */
  @javax.annotation.Nullable
  public String getDocumentDescription() {
    return documentDescription;
  }

  public void setDocumentDescription(String documentDescription) {
    this.documentDescription = documentDescription;
  }


  public CommitteeReportsIEOnly endImageNumber(String endImageNumber) {
    this.endImageNumber = endImageNumber;
    return this;
  }

  /**
   * Get endImageNumber
   * @return endImageNumber
   */
  @javax.annotation.Nullable
  public String getEndImageNumber() {
    return endImageNumber;
  }

  public void setEndImageNumber(String endImageNumber) {
    this.endImageNumber = endImageNumber;
  }


  public CommitteeReportsIEOnly fecFileId(String fecFileId) {
    this.fecFileId = fecFileId;
    return this;
  }

  /**
   * Get fecFileId
   * @return fecFileId
   */
  @javax.annotation.Nullable
  public String getFecFileId() {
    return fecFileId;
  }

  public void setFecFileId(String fecFileId) {
    this.fecFileId = fecFileId;
  }


  public CommitteeReportsIEOnly fecUrl(String fecUrl) {
    this.fecUrl = fecUrl;
    return this;
  }

  /**
   * Get fecUrl
   * @return fecUrl
   */
  @javax.annotation.Nullable
  public String getFecUrl() {
    return fecUrl;
  }

  public void setFecUrl(String fecUrl) {
    this.fecUrl = fecUrl;
  }


  public CommitteeReportsIEOnly independentContributionsPeriod(BigDecimal independentContributionsPeriod) {
    this.independentContributionsPeriod = independentContributionsPeriod;
    return this;
  }

  /**
   * Get independentContributionsPeriod
   * @return independentContributionsPeriod
   */
  @javax.annotation.Nullable
  public BigDecimal getIndependentContributionsPeriod() {
    return independentContributionsPeriod;
  }

  public void setIndependentContributionsPeriod(BigDecimal independentContributionsPeriod) {
    this.independentContributionsPeriod = independentContributionsPeriod;
  }


  public CommitteeReportsIEOnly independentExpendituresPeriod(BigDecimal independentExpendituresPeriod) {
    this.independentExpendituresPeriod = independentExpendituresPeriod;
    return this;
  }

  /**
   * Get independentExpendituresPeriod
   * @return independentExpendituresPeriod
   */
  @javax.annotation.Nullable
  public BigDecimal getIndependentExpendituresPeriod() {
    return independentExpendituresPeriod;
  }

  public void setIndependentExpendituresPeriod(BigDecimal independentExpendituresPeriod) {
    this.independentExpendituresPeriod = independentExpendituresPeriod;
  }


  public CommitteeReportsIEOnly isAmended(Boolean isAmended) {
    this.isAmended = isAmended;
    return this;
  }

  /**
   *  False indicates that a report is the most recent. True indicates that the report has been superseded by an amendment. 
   * @return isAmended
   */
  @javax.annotation.Nullable
  public Boolean getIsAmended() {
    return isAmended;
  }

  public void setIsAmended(Boolean isAmended) {
    this.isAmended = isAmended;
  }


  public CommitteeReportsIEOnly meansFiled(String meansFiled) {
    this.meansFiled = meansFiled;
    return this;
  }

  /**
   * The method used to file with the FEC, either electronic or on paper.
   * @return meansFiled
   */
  @javax.annotation.Nullable
  public String getMeansFiled() {
    return meansFiled;
  }

  public void setMeansFiled(String meansFiled) {
    this.meansFiled = meansFiled;
  }


  public CommitteeReportsIEOnly pdfUrl(String pdfUrl) {
    this.pdfUrl = pdfUrl;
    return this;
  }

  /**
   * Get pdfUrl
   * @return pdfUrl
   */
  @javax.annotation.Nullable
  public String getPdfUrl() {
    return pdfUrl;
  }

  public void setPdfUrl(String pdfUrl) {
    this.pdfUrl = pdfUrl;
  }


  public CommitteeReportsIEOnly receiptDate(LocalDate receiptDate) {
    this.receiptDate = receiptDate;
    return this;
  }

  /**
   * Date the FEC received the electronic or paper record
   * @return receiptDate
   */
  @javax.annotation.Nullable
  public LocalDate getReceiptDate() {
    return receiptDate;
  }

  public void setReceiptDate(LocalDate receiptDate) {
    this.receiptDate = receiptDate;
  }


  public CommitteeReportsIEOnly reportForm(String reportForm) {
    this.reportForm = reportForm;
    return this;
  }

  /**
   * Get reportForm
   * @return reportForm
   */
  @javax.annotation.Nullable
  public String getReportForm() {
    return reportForm;
  }

  public void setReportForm(String reportForm) {
    this.reportForm = reportForm;
  }


  public CommitteeReportsIEOnly reportType(String reportType) {
    this.reportType = reportType;
    return this;
  }

  /**
   * Get reportType
   * @return reportType
   */
  @javax.annotation.Nullable
  public String getReportType() {
    return reportType;
  }

  public void setReportType(String reportType) {
    this.reportType = reportType;
  }


  public CommitteeReportsIEOnly reportTypeFull(String reportTypeFull) {
    this.reportTypeFull = reportTypeFull;
    return this;
  }

  /**
   * Get reportTypeFull
   * @return reportTypeFull
   */
  @javax.annotation.Nullable
  public String getReportTypeFull() {
    return reportTypeFull;
  }

  public void setReportTypeFull(String reportTypeFull) {
    this.reportTypeFull = reportTypeFull;
  }


  public CommitteeReportsIEOnly reportYear(Integer reportYear) {
    this.reportYear = reportYear;
    return this;
  }

  /**
   * Get reportYear
   * @return reportYear
   */
  @javax.annotation.Nullable
  public Integer getReportYear() {
    return reportYear;
  }

  public void setReportYear(Integer reportYear) {
    this.reportYear = reportYear;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CommitteeReportsIEOnly committeeReportsIEOnly = (CommitteeReportsIEOnly) o;
    return Objects.equals(this.beginningImageNumber, committeeReportsIEOnly.beginningImageNumber) &&
        Objects.equals(this.committeeId, committeeReportsIEOnly.committeeId) &&
        Objects.equals(this.committeeName, committeeReportsIEOnly.committeeName) &&
        Objects.equals(this.committeeType, committeeReportsIEOnly.committeeType) &&
        Objects.equals(this.coverageEndDate, committeeReportsIEOnly.coverageEndDate) &&
        Objects.equals(this.coverageStartDate, committeeReportsIEOnly.coverageStartDate) &&
        Objects.equals(this.csvUrl, committeeReportsIEOnly.csvUrl) &&
        Objects.equals(this.cycle, committeeReportsIEOnly.cycle) &&
        Objects.equals(this.documentDescription, committeeReportsIEOnly.documentDescription) &&
        Objects.equals(this.endImageNumber, committeeReportsIEOnly.endImageNumber) &&
        Objects.equals(this.fecFileId, committeeReportsIEOnly.fecFileId) &&
        Objects.equals(this.fecUrl, committeeReportsIEOnly.fecUrl) &&
        Objects.equals(this.independentContributionsPeriod, committeeReportsIEOnly.independentContributionsPeriod) &&
        Objects.equals(this.independentExpendituresPeriod, committeeReportsIEOnly.independentExpendituresPeriod) &&
        Objects.equals(this.isAmended, committeeReportsIEOnly.isAmended) &&
        Objects.equals(this.meansFiled, committeeReportsIEOnly.meansFiled) &&
        Objects.equals(this.pdfUrl, committeeReportsIEOnly.pdfUrl) &&
        Objects.equals(this.receiptDate, committeeReportsIEOnly.receiptDate) &&
        Objects.equals(this.reportForm, committeeReportsIEOnly.reportForm) &&
        Objects.equals(this.reportType, committeeReportsIEOnly.reportType) &&
        Objects.equals(this.reportTypeFull, committeeReportsIEOnly.reportTypeFull) &&
        Objects.equals(this.reportYear, committeeReportsIEOnly.reportYear);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(beginningImageNumber, committeeId, committeeName, committeeType, coverageEndDate, coverageStartDate, csvUrl, cycle, documentDescription, endImageNumber, fecFileId, fecUrl, independentContributionsPeriod, independentExpendituresPeriod, isAmended, meansFiled, pdfUrl, receiptDate, reportForm, reportType, reportTypeFull, reportYear);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CommitteeReportsIEOnly {\n");
    sb.append("    beginningImageNumber: ").append(toIndentedString(beginningImageNumber)).append("\n");
    sb.append("    committeeId: ").append(toIndentedString(committeeId)).append("\n");
    sb.append("    committeeName: ").append(toIndentedString(committeeName)).append("\n");
    sb.append("    committeeType: ").append(toIndentedString(committeeType)).append("\n");
    sb.append("    coverageEndDate: ").append(toIndentedString(coverageEndDate)).append("\n");
    sb.append("    coverageStartDate: ").append(toIndentedString(coverageStartDate)).append("\n");
    sb.append("    csvUrl: ").append(toIndentedString(csvUrl)).append("\n");
    sb.append("    cycle: ").append(toIndentedString(cycle)).append("\n");
    sb.append("    documentDescription: ").append(toIndentedString(documentDescription)).append("\n");
    sb.append("    endImageNumber: ").append(toIndentedString(endImageNumber)).append("\n");
    sb.append("    fecFileId: ").append(toIndentedString(fecFileId)).append("\n");
    sb.append("    fecUrl: ").append(toIndentedString(fecUrl)).append("\n");
    sb.append("    independentContributionsPeriod: ").append(toIndentedString(independentContributionsPeriod)).append("\n");
    sb.append("    independentExpendituresPeriod: ").append(toIndentedString(independentExpendituresPeriod)).append("\n");
    sb.append("    isAmended: ").append(toIndentedString(isAmended)).append("\n");
    sb.append("    meansFiled: ").append(toIndentedString(meansFiled)).append("\n");
    sb.append("    pdfUrl: ").append(toIndentedString(pdfUrl)).append("\n");
    sb.append("    receiptDate: ").append(toIndentedString(receiptDate)).append("\n");
    sb.append("    reportForm: ").append(toIndentedString(reportForm)).append("\n");
    sb.append("    reportType: ").append(toIndentedString(reportType)).append("\n");
    sb.append("    reportTypeFull: ").append(toIndentedString(reportTypeFull)).append("\n");
    sb.append("    reportYear: ").append(toIndentedString(reportYear)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("beginning_image_number");
    openapiFields.add("committee_id");
    openapiFields.add("committee_name");
    openapiFields.add("committee_type");
    openapiFields.add("coverage_end_date");
    openapiFields.add("coverage_start_date");
    openapiFields.add("csv_url");
    openapiFields.add("cycle");
    openapiFields.add("document_description");
    openapiFields.add("end_image_number");
    openapiFields.add("fec_file_id");
    openapiFields.add("fec_url");
    openapiFields.add("independent_contributions_period");
    openapiFields.add("independent_expenditures_period");
    openapiFields.add("is_amended");
    openapiFields.add("means_filed");
    openapiFields.add("pdf_url");
    openapiFields.add("receipt_date");
    openapiFields.add("report_form");
    openapiFields.add("report_type");
    openapiFields.add("report_type_full");
    openapiFields.add("report_year");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to CommitteeReportsIEOnly
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!CommitteeReportsIEOnly.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CommitteeReportsIEOnly is not found in the empty JSON string", CommitteeReportsIEOnly.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!CommitteeReportsIEOnly.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CommitteeReportsIEOnly` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("beginning_image_number") != null && !jsonObj.get("beginning_image_number").isJsonNull()) && !jsonObj.get("beginning_image_number").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `beginning_image_number` to be a primitive type in the JSON string but got `%s`", jsonObj.get("beginning_image_number").toString()));
      }
      if ((jsonObj.get("committee_id") != null && !jsonObj.get("committee_id").isJsonNull()) && !jsonObj.get("committee_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `committee_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("committee_id").toString()));
      }
      if ((jsonObj.get("committee_name") != null && !jsonObj.get("committee_name").isJsonNull()) && !jsonObj.get("committee_name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `committee_name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("committee_name").toString()));
      }
      if ((jsonObj.get("committee_type") != null && !jsonObj.get("committee_type").isJsonNull()) && !jsonObj.get("committee_type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `committee_type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("committee_type").toString()));
      }
      if ((jsonObj.get("csv_url") != null && !jsonObj.get("csv_url").isJsonNull()) && !jsonObj.get("csv_url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `csv_url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("csv_url").toString()));
      }
      if ((jsonObj.get("document_description") != null && !jsonObj.get("document_description").isJsonNull()) && !jsonObj.get("document_description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `document_description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("document_description").toString()));
      }
      if ((jsonObj.get("end_image_number") != null && !jsonObj.get("end_image_number").isJsonNull()) && !jsonObj.get("end_image_number").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `end_image_number` to be a primitive type in the JSON string but got `%s`", jsonObj.get("end_image_number").toString()));
      }
      if ((jsonObj.get("fec_file_id") != null && !jsonObj.get("fec_file_id").isJsonNull()) && !jsonObj.get("fec_file_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `fec_file_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("fec_file_id").toString()));
      }
      if ((jsonObj.get("fec_url") != null && !jsonObj.get("fec_url").isJsonNull()) && !jsonObj.get("fec_url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `fec_url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("fec_url").toString()));
      }
      if ((jsonObj.get("means_filed") != null && !jsonObj.get("means_filed").isJsonNull()) && !jsonObj.get("means_filed").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `means_filed` to be a primitive type in the JSON string but got `%s`", jsonObj.get("means_filed").toString()));
      }
      if ((jsonObj.get("pdf_url") != null && !jsonObj.get("pdf_url").isJsonNull()) && !jsonObj.get("pdf_url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `pdf_url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("pdf_url").toString()));
      }
      if ((jsonObj.get("report_form") != null && !jsonObj.get("report_form").isJsonNull()) && !jsonObj.get("report_form").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `report_form` to be a primitive type in the JSON string but got `%s`", jsonObj.get("report_form").toString()));
      }
      if ((jsonObj.get("report_type") != null && !jsonObj.get("report_type").isJsonNull()) && !jsonObj.get("report_type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `report_type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("report_type").toString()));
      }
      if ((jsonObj.get("report_type_full") != null && !jsonObj.get("report_type_full").isJsonNull()) && !jsonObj.get("report_type_full").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `report_type_full` to be a primitive type in the JSON string but got `%s`", jsonObj.get("report_type_full").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CommitteeReportsIEOnly.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CommitteeReportsIEOnly' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CommitteeReportsIEOnly> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CommitteeReportsIEOnly.class));

       return (TypeAdapter<T>) new TypeAdapter<CommitteeReportsIEOnly>() {
           @Override
           public void write(JsonWriter out, CommitteeReportsIEOnly value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CommitteeReportsIEOnly read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of CommitteeReportsIEOnly given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of CommitteeReportsIEOnly
   * @throws IOException if the JSON string is invalid with respect to CommitteeReportsIEOnly
   */
  public static CommitteeReportsIEOnly fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CommitteeReportsIEOnly.class);
  }

  /**
   * Convert an instance of CommitteeReportsIEOnly to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

