/*
 * OpenFEC
 * This application programming interface (API) allows you to explore the way candidates and committees fund their campaigns.    The Federal Election Commission (FEC) API is a RESTful web service supporting full-text and field-specific searches on FEC data. [Bulk downloads](https://www.fec.gov/data/advanced/?tab=bulk-data) are available on the current site. Information is tied to the underlying forms by file ID and image ID. Data is updated nightly.    There are a lot of data, and a good place to start is to use search to find interesting candidates and committees. Then, you can use their IDs to find report or line item details with the other endpoints. If you are interested in individual donors, check out contributor information in the `/schedule_a/` endpoints.    <b class=\"body\" id=\"getting_started_head\">Getting started with the openFEC API</b><br>    If you would like to use the FEC's API programmatically, you can sign up for your own API key using our form. Alternatively, you can still try out our API without an API key by using the web interface and using DEMO_KEY. Note that when you use the openFEC API you are subject to the [Terms of Service](https://github.com/fecgov/FEC/blob/master/TERMS-OF-SERVICE.md) and [Acceptable Use policy](https://github.com/fecgov/FEC/blob/master/ACCEPTABLE-USE-POLICY.md).    Signing up for an API key will enable you to place up to 1,000 calls an hour. Each call is limited to 100 results per page. You can email questions, comments or a request to get a key for 7,200 calls an hour (120 calls per minute) to <a href=\"mailto:APIinfo@fec.gov\">APIinfo@fec.gov</a>. You can also ask questions and discuss the data in a community led [group](https://groups.google.com/forum/#!forum/fec-data).    The model definitions and schema are available at [/swagger](/swagger/). This is useful for making wrappers and exploring the data.    A few restrictions limit the way you can use FEC data. For example, you canâ€™t use contributor lists for commercial purposes or to solicit donations. [Learn more here](https://www.fec.gov/updates/sale-or-use-contributor-information/).    [Inspect our source code](https://github.com/fecgov/openFEC). We welcome issues and pull requests!    <p><br></p> <h2 class=\"title\" id=\"signup_head\">Sign up for an API key</h2> <div id=\"apidatagov_signup\">Loading signup form...</div>
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.LocalDate;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * BaseF3XFiling
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:02:12.812386-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class BaseF3XFiling {
  public static final String SERIALIZED_NAME_AMEND_ADDRESS = "amend_address";
  @SerializedName(SERIALIZED_NAME_AMEND_ADDRESS)
  private String amendAddress;

  public static final String SERIALIZED_NAME_AMENDED_BY = "amended_by";
  @SerializedName(SERIALIZED_NAME_AMENDED_BY)
  private Integer amendedBy;

  public static final String SERIALIZED_NAME_AMENDMENT = "amendment";
  @SerializedName(SERIALIZED_NAME_AMENDMENT)
  private String amendment;

  public static final String SERIALIZED_NAME_AMENDMENT_CHAIN = "amendment_chain";
  @SerializedName(SERIALIZED_NAME_AMENDMENT_CHAIN)
  private List<Integer> amendmentChain = new ArrayList<>();

  public static final String SERIALIZED_NAME_BEGINNING_IMAGE_NUMBER = "beginning_image_number";
  @SerializedName(SERIALIZED_NAME_BEGINNING_IMAGE_NUMBER)
  private String beginningImageNumber;

  public static final String SERIALIZED_NAME_CITY = "city";
  @SerializedName(SERIALIZED_NAME_CITY)
  private String city;

  public static final String SERIALIZED_NAME_COMMITTEE_ID = "committee_id";
  @SerializedName(SERIALIZED_NAME_COMMITTEE_ID)
  private String committeeId;

  public static final String SERIALIZED_NAME_COMMITTEE_NAME = "committee_name";
  @SerializedName(SERIALIZED_NAME_COMMITTEE_NAME)
  private String committeeName;

  public static final String SERIALIZED_NAME_COVERAGE_END_DATE = "coverage_end_date";
  @SerializedName(SERIALIZED_NAME_COVERAGE_END_DATE)
  private LocalDate coverageEndDate;

  public static final String SERIALIZED_NAME_COVERAGE_START_DATE = "coverage_start_date";
  @SerializedName(SERIALIZED_NAME_COVERAGE_START_DATE)
  private LocalDate coverageStartDate;

  public static final String SERIALIZED_NAME_CSV_URL = "csv_url";
  @SerializedName(SERIALIZED_NAME_CSV_URL)
  private String csvUrl;

  public static final String SERIALIZED_NAME_DOCUMENT_DESCRIPTION = "document_description";
  @SerializedName(SERIALIZED_NAME_DOCUMENT_DESCRIPTION)
  private String documentDescription;

  public static final String SERIALIZED_NAME_ELECTION_DATE = "election_date";
  @SerializedName(SERIALIZED_NAME_ELECTION_DATE)
  private LocalDate electionDate;

  public static final String SERIALIZED_NAME_ELECTION_STATE = "election_state";
  @SerializedName(SERIALIZED_NAME_ELECTION_STATE)
  private String electionState;

  public static final String SERIALIZED_NAME_FEC_FILE_ID = "fec_file_id";
  @SerializedName(SERIALIZED_NAME_FEC_FILE_ID)
  private String fecFileId;

  public static final String SERIALIZED_NAME_FEC_URL = "fec_url";
  @SerializedName(SERIALIZED_NAME_FEC_URL)
  private String fecUrl;

  public static final String SERIALIZED_NAME_FILE_NUMBER = "file_number";
  @SerializedName(SERIALIZED_NAME_FILE_NUMBER)
  private Integer fileNumber;

  public static final String SERIALIZED_NAME_IS_AMENDED = "is_amended";
  @SerializedName(SERIALIZED_NAME_IS_AMENDED)
  private Boolean isAmended;

  public static final String SERIALIZED_NAME_MOST_RECENT = "most_recent";
  @SerializedName(SERIALIZED_NAME_MOST_RECENT)
  private Boolean mostRecent;

  public static final String SERIALIZED_NAME_MOST_RECENT_FILING = "most_recent_filing";
  @SerializedName(SERIALIZED_NAME_MOST_RECENT_FILING)
  private Integer mostRecentFiling;

  public static final String SERIALIZED_NAME_PDF_URL = "pdf_url";
  @SerializedName(SERIALIZED_NAME_PDF_URL)
  private String pdfUrl;

  public static final String SERIALIZED_NAME_QUALIFIED_MULTICANDIDATE_COMMITTEE = "qualified_multicandidate_committee";
  @SerializedName(SERIALIZED_NAME_QUALIFIED_MULTICANDIDATE_COMMITTEE)
  private String qualifiedMulticandidateCommittee;

  public static final String SERIALIZED_NAME_RECEIPT_DATE = "receipt_date";
  @SerializedName(SERIALIZED_NAME_RECEIPT_DATE)
  private LocalDate receiptDate;

  public static final String SERIALIZED_NAME_REPORT = "report";
  @SerializedName(SERIALIZED_NAME_REPORT)
  private String report;

  public static final String SERIALIZED_NAME_REPORT_TYPE = "report_type";
  @SerializedName(SERIALIZED_NAME_REPORT_TYPE)
  private String reportType;

  public static final String SERIALIZED_NAME_REPORT_YEAR = "report_year";
  @SerializedName(SERIALIZED_NAME_REPORT_YEAR)
  private Integer reportYear;

  public static final String SERIALIZED_NAME_RPT_PGI = "rpt_pgi";
  @SerializedName(SERIALIZED_NAME_RPT_PGI)
  private String rptPgi;

  public static final String SERIALIZED_NAME_SIGN_DATE = "sign_date";
  @SerializedName(SERIALIZED_NAME_SIGN_DATE)
  private LocalDate signDate;

  public static final String SERIALIZED_NAME_STATE = "state";
  @SerializedName(SERIALIZED_NAME_STATE)
  private String state;

  public static final String SERIALIZED_NAME_STREET1 = "street_1";
  @SerializedName(SERIALIZED_NAME_STREET1)
  private String street1;

  public static final String SERIALIZED_NAME_STREET2 = "street_2";
  @SerializedName(SERIALIZED_NAME_STREET2)
  private String street2;

  public static final String SERIALIZED_NAME_SUMMARY_LINES = "summary_lines";
  @SerializedName(SERIALIZED_NAME_SUMMARY_LINES)
  private String summaryLines;

  public static final String SERIALIZED_NAME_ZIP = "zip";
  @SerializedName(SERIALIZED_NAME_ZIP)
  private String zip;

  public BaseF3XFiling() {
  }

  public BaseF3XFiling amendAddress(String amendAddress) {
    this.amendAddress = amendAddress;
    return this;
  }

  /**
   * Get amendAddress
   * @return amendAddress
   */
  @javax.annotation.Nullable
  public String getAmendAddress() {
    return amendAddress;
  }

  public void setAmendAddress(String amendAddress) {
    this.amendAddress = amendAddress;
  }


  public BaseF3XFiling amendedBy(Integer amendedBy) {
    this.amendedBy = amendedBy;
    return this;
  }

  /**
   * Get amendedBy
   * @return amendedBy
   */
  @javax.annotation.Nullable
  public Integer getAmendedBy() {
    return amendedBy;
  }

  public void setAmendedBy(Integer amendedBy) {
    this.amendedBy = amendedBy;
  }


  public BaseF3XFiling amendment(String amendment) {
    this.amendment = amendment;
    return this;
  }

  /**
   * Get amendment
   * @return amendment
   */
  @javax.annotation.Nullable
  public String getAmendment() {
    return amendment;
  }

  public void setAmendment(String amendment) {
    this.amendment = amendment;
  }


  public BaseF3XFiling amendmentChain(List<Integer> amendmentChain) {
    this.amendmentChain = amendmentChain;
    return this;
  }

  public BaseF3XFiling addAmendmentChainItem(Integer amendmentChainItem) {
    if (this.amendmentChain == null) {
      this.amendmentChain = new ArrayList<>();
    }
    this.amendmentChain.add(amendmentChainItem);
    return this;
  }

  /**
   * Get amendmentChain
   * @return amendmentChain
   */
  @javax.annotation.Nullable
  public List<Integer> getAmendmentChain() {
    return amendmentChain;
  }

  public void setAmendmentChain(List<Integer> amendmentChain) {
    this.amendmentChain = amendmentChain;
  }


  public BaseF3XFiling beginningImageNumber(String beginningImageNumber) {
    this.beginningImageNumber = beginningImageNumber;
    return this;
  }

  /**
   * Get beginningImageNumber
   * @return beginningImageNumber
   */
  @javax.annotation.Nullable
  public String getBeginningImageNumber() {
    return beginningImageNumber;
  }

  public void setBeginningImageNumber(String beginningImageNumber) {
    this.beginningImageNumber = beginningImageNumber;
  }


  public BaseF3XFiling city(String city) {
    this.city = city;
    return this;
  }

  /**
   * Get city
   * @return city
   */
  @javax.annotation.Nullable
  public String getCity() {
    return city;
  }

  public void setCity(String city) {
    this.city = city;
  }


  public BaseF3XFiling committeeId(String committeeId) {
    this.committeeId = committeeId;
    return this;
  }

  /**
   *  A unique identifier assigned to each committee or filer registered with the FEC. In general committee id&#39;s begin with the letter C which is followed by eight digits. 
   * @return committeeId
   */
  @javax.annotation.Nullable
  public String getCommitteeId() {
    return committeeId;
  }

  public void setCommitteeId(String committeeId) {
    this.committeeId = committeeId;
  }


  public BaseF3XFiling committeeName(String committeeName) {
    this.committeeName = committeeName;
    return this;
  }

  /**
   * The name of the committee. If a committee changes its name,     the most recent name will be shown. Committee names are not unique. Use committee_id     for looking up records.
   * @return committeeName
   */
  @javax.annotation.Nullable
  public String getCommitteeName() {
    return committeeName;
  }

  public void setCommitteeName(String committeeName) {
    this.committeeName = committeeName;
  }


  public BaseF3XFiling coverageEndDate(LocalDate coverageEndDate) {
    this.coverageEndDate = coverageEndDate;
    return this;
  }

  /**
   * Get coverageEndDate
   * @return coverageEndDate
   */
  @javax.annotation.Nullable
  public LocalDate getCoverageEndDate() {
    return coverageEndDate;
  }

  public void setCoverageEndDate(LocalDate coverageEndDate) {
    this.coverageEndDate = coverageEndDate;
  }


  public BaseF3XFiling coverageStartDate(LocalDate coverageStartDate) {
    this.coverageStartDate = coverageStartDate;
    return this;
  }

  /**
   * Get coverageStartDate
   * @return coverageStartDate
   */
  @javax.annotation.Nullable
  public LocalDate getCoverageStartDate() {
    return coverageStartDate;
  }

  public void setCoverageStartDate(LocalDate coverageStartDate) {
    this.coverageStartDate = coverageStartDate;
  }


  public BaseF3XFiling csvUrl(String csvUrl) {
    this.csvUrl = csvUrl;
    return this;
  }

  /**
   * Get csvUrl
   * @return csvUrl
   */
  @javax.annotation.Nullable
  public String getCsvUrl() {
    return csvUrl;
  }

  public void setCsvUrl(String csvUrl) {
    this.csvUrl = csvUrl;
  }


  public BaseF3XFiling documentDescription(String documentDescription) {
    this.documentDescription = documentDescription;
    return this;
  }

  /**
   * Get documentDescription
   * @return documentDescription
   */
  @javax.annotation.Nullable
  public String getDocumentDescription() {
    return documentDescription;
  }

  public void setDocumentDescription(String documentDescription) {
    this.documentDescription = documentDescription;
  }


  public BaseF3XFiling electionDate(LocalDate electionDate) {
    this.electionDate = electionDate;
    return this;
  }

  /**
   * Get electionDate
   * @return electionDate
   */
  @javax.annotation.Nullable
  public LocalDate getElectionDate() {
    return electionDate;
  }

  public void setElectionDate(LocalDate electionDate) {
    this.electionDate = electionDate;
  }


  public BaseF3XFiling electionState(String electionState) {
    this.electionState = electionState;
    return this;
  }

  /**
   * Get electionState
   * @return electionState
   */
  @javax.annotation.Nullable
  public String getElectionState() {
    return electionState;
  }

  public void setElectionState(String electionState) {
    this.electionState = electionState;
  }


  public BaseF3XFiling fecFileId(String fecFileId) {
    this.fecFileId = fecFileId;
    return this;
  }

  /**
   * Get fecFileId
   * @return fecFileId
   */
  @javax.annotation.Nullable
  public String getFecFileId() {
    return fecFileId;
  }

  public void setFecFileId(String fecFileId) {
    this.fecFileId = fecFileId;
  }


  public BaseF3XFiling fecUrl(String fecUrl) {
    this.fecUrl = fecUrl;
    return this;
  }

  /**
   * Get fecUrl
   * @return fecUrl
   */
  @javax.annotation.Nullable
  public String getFecUrl() {
    return fecUrl;
  }

  public void setFecUrl(String fecUrl) {
    this.fecUrl = fecUrl;
  }


  public BaseF3XFiling fileNumber(Integer fileNumber) {
    this.fileNumber = fileNumber;
    return this;
  }

  /**
   * Get fileNumber
   * @return fileNumber
   */
  @javax.annotation.Nullable
  public Integer getFileNumber() {
    return fileNumber;
  }

  public void setFileNumber(Integer fileNumber) {
    this.fileNumber = fileNumber;
  }


  public BaseF3XFiling isAmended(Boolean isAmended) {
    this.isAmended = isAmended;
    return this;
  }

  /**
   * Get isAmended
   * @return isAmended
   */
  @javax.annotation.Nullable
  public Boolean getIsAmended() {
    return isAmended;
  }

  public void setIsAmended(Boolean isAmended) {
    this.isAmended = isAmended;
  }


  public BaseF3XFiling mostRecent(Boolean mostRecent) {
    this.mostRecent = mostRecent;
    return this;
  }

  /**
   * Get mostRecent
   * @return mostRecent
   */
  @javax.annotation.Nullable
  public Boolean getMostRecent() {
    return mostRecent;
  }

  public void setMostRecent(Boolean mostRecent) {
    this.mostRecent = mostRecent;
  }


  public BaseF3XFiling mostRecentFiling(Integer mostRecentFiling) {
    this.mostRecentFiling = mostRecentFiling;
    return this;
  }

  /**
   * Get mostRecentFiling
   * @return mostRecentFiling
   */
  @javax.annotation.Nullable
  public Integer getMostRecentFiling() {
    return mostRecentFiling;
  }

  public void setMostRecentFiling(Integer mostRecentFiling) {
    this.mostRecentFiling = mostRecentFiling;
  }


  public BaseF3XFiling pdfUrl(String pdfUrl) {
    this.pdfUrl = pdfUrl;
    return this;
  }

  /**
   * Get pdfUrl
   * @return pdfUrl
   */
  @javax.annotation.Nullable
  public String getPdfUrl() {
    return pdfUrl;
  }

  public void setPdfUrl(String pdfUrl) {
    this.pdfUrl = pdfUrl;
  }


  public BaseF3XFiling qualifiedMulticandidateCommittee(String qualifiedMulticandidateCommittee) {
    this.qualifiedMulticandidateCommittee = qualifiedMulticandidateCommittee;
    return this;
  }

  /**
   * Get qualifiedMulticandidateCommittee
   * @return qualifiedMulticandidateCommittee
   */
  @javax.annotation.Nullable
  public String getQualifiedMulticandidateCommittee() {
    return qualifiedMulticandidateCommittee;
  }

  public void setQualifiedMulticandidateCommittee(String qualifiedMulticandidateCommittee) {
    this.qualifiedMulticandidateCommittee = qualifiedMulticandidateCommittee;
  }


  public BaseF3XFiling receiptDate(LocalDate receiptDate) {
    this.receiptDate = receiptDate;
    return this;
  }

  /**
   * Get receiptDate
   * @return receiptDate
   */
  @javax.annotation.Nullable
  public LocalDate getReceiptDate() {
    return receiptDate;
  }

  public void setReceiptDate(LocalDate receiptDate) {
    this.receiptDate = receiptDate;
  }


  public BaseF3XFiling report(String report) {
    this.report = report;
    return this;
  }

  /**
   * Get report
   * @return report
   */
  @javax.annotation.Nullable
  public String getReport() {
    return report;
  }

  public void setReport(String report) {
    this.report = report;
  }


  public BaseF3XFiling reportType(String reportType) {
    this.reportType = reportType;
    return this;
  }

  /**
   * Get reportType
   * @return reportType
   */
  @javax.annotation.Nullable
  public String getReportType() {
    return reportType;
  }

  public void setReportType(String reportType) {
    this.reportType = reportType;
  }


  public BaseF3XFiling reportYear(Integer reportYear) {
    this.reportYear = reportYear;
    return this;
  }

  /**
   * Get reportYear
   * @return reportYear
   */
  @javax.annotation.Nullable
  public Integer getReportYear() {
    return reportYear;
  }

  public void setReportYear(Integer reportYear) {
    this.reportYear = reportYear;
  }


  public BaseF3XFiling rptPgi(String rptPgi) {
    this.rptPgi = rptPgi;
    return this;
  }

  /**
   * Election type  Convention, Primary, General, Special, Runoff etc. 
   * @return rptPgi
   */
  @javax.annotation.Nullable
  public String getRptPgi() {
    return rptPgi;
  }

  public void setRptPgi(String rptPgi) {
    this.rptPgi = rptPgi;
  }


  public BaseF3XFiling signDate(LocalDate signDate) {
    this.signDate = signDate;
    return this;
  }

  /**
   * Get signDate
   * @return signDate
   */
  @javax.annotation.Nullable
  public LocalDate getSignDate() {
    return signDate;
  }

  public void setSignDate(LocalDate signDate) {
    this.signDate = signDate;
  }


  public BaseF3XFiling state(String state) {
    this.state = state;
    return this;
  }

  /**
   * Get state
   * @return state
   */
  @javax.annotation.Nullable
  public String getState() {
    return state;
  }

  public void setState(String state) {
    this.state = state;
  }


  public BaseF3XFiling street1(String street1) {
    this.street1 = street1;
    return this;
  }

  /**
   * Get street1
   * @return street1
   */
  @javax.annotation.Nullable
  public String getStreet1() {
    return street1;
  }

  public void setStreet1(String street1) {
    this.street1 = street1;
  }


  public BaseF3XFiling street2(String street2) {
    this.street2 = street2;
    return this;
  }

  /**
   * Get street2
   * @return street2
   */
  @javax.annotation.Nullable
  public String getStreet2() {
    return street2;
  }

  public void setStreet2(String street2) {
    this.street2 = street2;
  }


  public BaseF3XFiling summaryLines(String summaryLines) {
    this.summaryLines = summaryLines;
    return this;
  }

  /**
   * Get summaryLines
   * @return summaryLines
   */
  @javax.annotation.Nullable
  public String getSummaryLines() {
    return summaryLines;
  }

  public void setSummaryLines(String summaryLines) {
    this.summaryLines = summaryLines;
  }


  public BaseF3XFiling zip(String zip) {
    this.zip = zip;
    return this;
  }

  /**
   * Get zip
   * @return zip
   */
  @javax.annotation.Nullable
  public String getZip() {
    return zip;
  }

  public void setZip(String zip) {
    this.zip = zip;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    BaseF3XFiling baseF3XFiling = (BaseF3XFiling) o;
    return Objects.equals(this.amendAddress, baseF3XFiling.amendAddress) &&
        Objects.equals(this.amendedBy, baseF3XFiling.amendedBy) &&
        Objects.equals(this.amendment, baseF3XFiling.amendment) &&
        Objects.equals(this.amendmentChain, baseF3XFiling.amendmentChain) &&
        Objects.equals(this.beginningImageNumber, baseF3XFiling.beginningImageNumber) &&
        Objects.equals(this.city, baseF3XFiling.city) &&
        Objects.equals(this.committeeId, baseF3XFiling.committeeId) &&
        Objects.equals(this.committeeName, baseF3XFiling.committeeName) &&
        Objects.equals(this.coverageEndDate, baseF3XFiling.coverageEndDate) &&
        Objects.equals(this.coverageStartDate, baseF3XFiling.coverageStartDate) &&
        Objects.equals(this.csvUrl, baseF3XFiling.csvUrl) &&
        Objects.equals(this.documentDescription, baseF3XFiling.documentDescription) &&
        Objects.equals(this.electionDate, baseF3XFiling.electionDate) &&
        Objects.equals(this.electionState, baseF3XFiling.electionState) &&
        Objects.equals(this.fecFileId, baseF3XFiling.fecFileId) &&
        Objects.equals(this.fecUrl, baseF3XFiling.fecUrl) &&
        Objects.equals(this.fileNumber, baseF3XFiling.fileNumber) &&
        Objects.equals(this.isAmended, baseF3XFiling.isAmended) &&
        Objects.equals(this.mostRecent, baseF3XFiling.mostRecent) &&
        Objects.equals(this.mostRecentFiling, baseF3XFiling.mostRecentFiling) &&
        Objects.equals(this.pdfUrl, baseF3XFiling.pdfUrl) &&
        Objects.equals(this.qualifiedMulticandidateCommittee, baseF3XFiling.qualifiedMulticandidateCommittee) &&
        Objects.equals(this.receiptDate, baseF3XFiling.receiptDate) &&
        Objects.equals(this.report, baseF3XFiling.report) &&
        Objects.equals(this.reportType, baseF3XFiling.reportType) &&
        Objects.equals(this.reportYear, baseF3XFiling.reportYear) &&
        Objects.equals(this.rptPgi, baseF3XFiling.rptPgi) &&
        Objects.equals(this.signDate, baseF3XFiling.signDate) &&
        Objects.equals(this.state, baseF3XFiling.state) &&
        Objects.equals(this.street1, baseF3XFiling.street1) &&
        Objects.equals(this.street2, baseF3XFiling.street2) &&
        Objects.equals(this.summaryLines, baseF3XFiling.summaryLines) &&
        Objects.equals(this.zip, baseF3XFiling.zip);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(amendAddress, amendedBy, amendment, amendmentChain, beginningImageNumber, city, committeeId, committeeName, coverageEndDate, coverageStartDate, csvUrl, documentDescription, electionDate, electionState, fecFileId, fecUrl, fileNumber, isAmended, mostRecent, mostRecentFiling, pdfUrl, qualifiedMulticandidateCommittee, receiptDate, report, reportType, reportYear, rptPgi, signDate, state, street1, street2, summaryLines, zip);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class BaseF3XFiling {\n");
    sb.append("    amendAddress: ").append(toIndentedString(amendAddress)).append("\n");
    sb.append("    amendedBy: ").append(toIndentedString(amendedBy)).append("\n");
    sb.append("    amendment: ").append(toIndentedString(amendment)).append("\n");
    sb.append("    amendmentChain: ").append(toIndentedString(amendmentChain)).append("\n");
    sb.append("    beginningImageNumber: ").append(toIndentedString(beginningImageNumber)).append("\n");
    sb.append("    city: ").append(toIndentedString(city)).append("\n");
    sb.append("    committeeId: ").append(toIndentedString(committeeId)).append("\n");
    sb.append("    committeeName: ").append(toIndentedString(committeeName)).append("\n");
    sb.append("    coverageEndDate: ").append(toIndentedString(coverageEndDate)).append("\n");
    sb.append("    coverageStartDate: ").append(toIndentedString(coverageStartDate)).append("\n");
    sb.append("    csvUrl: ").append(toIndentedString(csvUrl)).append("\n");
    sb.append("    documentDescription: ").append(toIndentedString(documentDescription)).append("\n");
    sb.append("    electionDate: ").append(toIndentedString(electionDate)).append("\n");
    sb.append("    electionState: ").append(toIndentedString(electionState)).append("\n");
    sb.append("    fecFileId: ").append(toIndentedString(fecFileId)).append("\n");
    sb.append("    fecUrl: ").append(toIndentedString(fecUrl)).append("\n");
    sb.append("    fileNumber: ").append(toIndentedString(fileNumber)).append("\n");
    sb.append("    isAmended: ").append(toIndentedString(isAmended)).append("\n");
    sb.append("    mostRecent: ").append(toIndentedString(mostRecent)).append("\n");
    sb.append("    mostRecentFiling: ").append(toIndentedString(mostRecentFiling)).append("\n");
    sb.append("    pdfUrl: ").append(toIndentedString(pdfUrl)).append("\n");
    sb.append("    qualifiedMulticandidateCommittee: ").append(toIndentedString(qualifiedMulticandidateCommittee)).append("\n");
    sb.append("    receiptDate: ").append(toIndentedString(receiptDate)).append("\n");
    sb.append("    report: ").append(toIndentedString(report)).append("\n");
    sb.append("    reportType: ").append(toIndentedString(reportType)).append("\n");
    sb.append("    reportYear: ").append(toIndentedString(reportYear)).append("\n");
    sb.append("    rptPgi: ").append(toIndentedString(rptPgi)).append("\n");
    sb.append("    signDate: ").append(toIndentedString(signDate)).append("\n");
    sb.append("    state: ").append(toIndentedString(state)).append("\n");
    sb.append("    street1: ").append(toIndentedString(street1)).append("\n");
    sb.append("    street2: ").append(toIndentedString(street2)).append("\n");
    sb.append("    summaryLines: ").append(toIndentedString(summaryLines)).append("\n");
    sb.append("    zip: ").append(toIndentedString(zip)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("amend_address");
    openapiFields.add("amended_by");
    openapiFields.add("amendment");
    openapiFields.add("amendment_chain");
    openapiFields.add("beginning_image_number");
    openapiFields.add("city");
    openapiFields.add("committee_id");
    openapiFields.add("committee_name");
    openapiFields.add("coverage_end_date");
    openapiFields.add("coverage_start_date");
    openapiFields.add("csv_url");
    openapiFields.add("document_description");
    openapiFields.add("election_date");
    openapiFields.add("election_state");
    openapiFields.add("fec_file_id");
    openapiFields.add("fec_url");
    openapiFields.add("file_number");
    openapiFields.add("is_amended");
    openapiFields.add("most_recent");
    openapiFields.add("most_recent_filing");
    openapiFields.add("pdf_url");
    openapiFields.add("qualified_multicandidate_committee");
    openapiFields.add("receipt_date");
    openapiFields.add("report");
    openapiFields.add("report_type");
    openapiFields.add("report_year");
    openapiFields.add("rpt_pgi");
    openapiFields.add("sign_date");
    openapiFields.add("state");
    openapiFields.add("street_1");
    openapiFields.add("street_2");
    openapiFields.add("summary_lines");
    openapiFields.add("zip");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to BaseF3XFiling
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!BaseF3XFiling.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in BaseF3XFiling is not found in the empty JSON string", BaseF3XFiling.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!BaseF3XFiling.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `BaseF3XFiling` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("amend_address") != null && !jsonObj.get("amend_address").isJsonNull()) && !jsonObj.get("amend_address").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `amend_address` to be a primitive type in the JSON string but got `%s`", jsonObj.get("amend_address").toString()));
      }
      if ((jsonObj.get("amendment") != null && !jsonObj.get("amendment").isJsonNull()) && !jsonObj.get("amendment").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `amendment` to be a primitive type in the JSON string but got `%s`", jsonObj.get("amendment").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("amendment_chain") != null && !jsonObj.get("amendment_chain").isJsonNull() && !jsonObj.get("amendment_chain").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `amendment_chain` to be an array in the JSON string but got `%s`", jsonObj.get("amendment_chain").toString()));
      }
      if ((jsonObj.get("beginning_image_number") != null && !jsonObj.get("beginning_image_number").isJsonNull()) && !jsonObj.get("beginning_image_number").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `beginning_image_number` to be a primitive type in the JSON string but got `%s`", jsonObj.get("beginning_image_number").toString()));
      }
      if ((jsonObj.get("city") != null && !jsonObj.get("city").isJsonNull()) && !jsonObj.get("city").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `city` to be a primitive type in the JSON string but got `%s`", jsonObj.get("city").toString()));
      }
      if ((jsonObj.get("committee_id") != null && !jsonObj.get("committee_id").isJsonNull()) && !jsonObj.get("committee_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `committee_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("committee_id").toString()));
      }
      if ((jsonObj.get("committee_name") != null && !jsonObj.get("committee_name").isJsonNull()) && !jsonObj.get("committee_name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `committee_name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("committee_name").toString()));
      }
      if ((jsonObj.get("csv_url") != null && !jsonObj.get("csv_url").isJsonNull()) && !jsonObj.get("csv_url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `csv_url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("csv_url").toString()));
      }
      if ((jsonObj.get("document_description") != null && !jsonObj.get("document_description").isJsonNull()) && !jsonObj.get("document_description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `document_description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("document_description").toString()));
      }
      if ((jsonObj.get("election_state") != null && !jsonObj.get("election_state").isJsonNull()) && !jsonObj.get("election_state").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `election_state` to be a primitive type in the JSON string but got `%s`", jsonObj.get("election_state").toString()));
      }
      if ((jsonObj.get("fec_file_id") != null && !jsonObj.get("fec_file_id").isJsonNull()) && !jsonObj.get("fec_file_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `fec_file_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("fec_file_id").toString()));
      }
      if ((jsonObj.get("fec_url") != null && !jsonObj.get("fec_url").isJsonNull()) && !jsonObj.get("fec_url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `fec_url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("fec_url").toString()));
      }
      if ((jsonObj.get("pdf_url") != null && !jsonObj.get("pdf_url").isJsonNull()) && !jsonObj.get("pdf_url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `pdf_url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("pdf_url").toString()));
      }
      if ((jsonObj.get("qualified_multicandidate_committee") != null && !jsonObj.get("qualified_multicandidate_committee").isJsonNull()) && !jsonObj.get("qualified_multicandidate_committee").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `qualified_multicandidate_committee` to be a primitive type in the JSON string but got `%s`", jsonObj.get("qualified_multicandidate_committee").toString()));
      }
      if ((jsonObj.get("report") != null && !jsonObj.get("report").isJsonNull()) && !jsonObj.get("report").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `report` to be a primitive type in the JSON string but got `%s`", jsonObj.get("report").toString()));
      }
      if ((jsonObj.get("report_type") != null && !jsonObj.get("report_type").isJsonNull()) && !jsonObj.get("report_type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `report_type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("report_type").toString()));
      }
      if ((jsonObj.get("rpt_pgi") != null && !jsonObj.get("rpt_pgi").isJsonNull()) && !jsonObj.get("rpt_pgi").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `rpt_pgi` to be a primitive type in the JSON string but got `%s`", jsonObj.get("rpt_pgi").toString()));
      }
      if ((jsonObj.get("state") != null && !jsonObj.get("state").isJsonNull()) && !jsonObj.get("state").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `state` to be a primitive type in the JSON string but got `%s`", jsonObj.get("state").toString()));
      }
      if ((jsonObj.get("street_1") != null && !jsonObj.get("street_1").isJsonNull()) && !jsonObj.get("street_1").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `street_1` to be a primitive type in the JSON string but got `%s`", jsonObj.get("street_1").toString()));
      }
      if ((jsonObj.get("street_2") != null && !jsonObj.get("street_2").isJsonNull()) && !jsonObj.get("street_2").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `street_2` to be a primitive type in the JSON string but got `%s`", jsonObj.get("street_2").toString()));
      }
      if ((jsonObj.get("summary_lines") != null && !jsonObj.get("summary_lines").isJsonNull()) && !jsonObj.get("summary_lines").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `summary_lines` to be a primitive type in the JSON string but got `%s`", jsonObj.get("summary_lines").toString()));
      }
      if ((jsonObj.get("zip") != null && !jsonObj.get("zip").isJsonNull()) && !jsonObj.get("zip").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `zip` to be a primitive type in the JSON string but got `%s`", jsonObj.get("zip").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!BaseF3XFiling.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'BaseF3XFiling' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<BaseF3XFiling> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(BaseF3XFiling.class));

       return (TypeAdapter<T>) new TypeAdapter<BaseF3XFiling>() {
           @Override
           public void write(JsonWriter out, BaseF3XFiling value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public BaseF3XFiling read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of BaseF3XFiling given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of BaseF3XFiling
   * @throws IOException if the JSON string is invalid with respect to BaseF3XFiling
   */
  public static BaseF3XFiling fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, BaseF3XFiling.class);
  }

  /**
   * Convert an instance of BaseF3XFiling to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

