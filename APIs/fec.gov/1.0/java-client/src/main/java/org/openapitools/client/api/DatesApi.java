/*
 * OpenFEC
 * This application programming interface (API) allows you to explore the way candidates and committees fund their campaigns.    The Federal Election Commission (FEC) API is a RESTful web service supporting full-text and field-specific searches on FEC data. [Bulk downloads](https://www.fec.gov/data/advanced/?tab=bulk-data) are available on the current site. Information is tied to the underlying forms by file ID and image ID. Data is updated nightly.    There are a lot of data, and a good place to start is to use search to find interesting candidates and committees. Then, you can use their IDs to find report or line item details with the other endpoints. If you are interested in individual donors, check out contributor information in the `/schedule_a/` endpoints.    <b class=\"body\" id=\"getting_started_head\">Getting started with the openFEC API</b><br>    If you would like to use the FEC's API programmatically, you can sign up for your own API key using our form. Alternatively, you can still try out our API without an API key by using the web interface and using DEMO_KEY. Note that when you use the openFEC API you are subject to the [Terms of Service](https://github.com/fecgov/FEC/blob/master/TERMS-OF-SERVICE.md) and [Acceptable Use policy](https://github.com/fecgov/FEC/blob/master/ACCEPTABLE-USE-POLICY.md).    Signing up for an API key will enable you to place up to 1,000 calls an hour. Each call is limited to 100 results per page. You can email questions, comments or a request to get a key for 7,200 calls an hour (120 calls per minute) to <a href=\"mailto:APIinfo@fec.gov\">APIinfo@fec.gov</a>. You can also ask questions and discuss the data in a community led [group](https://groups.google.com/forum/#!forum/fec-data).    The model definitions and schema are available at [/swagger](/swagger/). This is useful for making wrappers and exploring the data.    A few restrictions limit the way you can use FEC data. For example, you canâ€™t use contributor lists for commercial purposes or to solicit donations. [Learn more here](https://www.fec.gov/updates/sale-or-use-contributor-information/).    [Inspect our source code](https://github.com/fecgov/openFEC). We welcome issues and pull requests!    <p><br></p> <h2 class=\"title\" id=\"signup_head\">Sign up for an API key</h2> <div id=\"apidatagov_signup\">Loading signup form...</div>
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.CalendarDatePage;
import org.openapitools.client.model.ElectionDatesGetDefaultResponse;
import java.time.LocalDate;
import org.openapitools.client.model.ReportingDatesGetDefaultResponse;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class DatesApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public DatesApi() {
        this(Configuration.getDefaultApiClient());
    }

    public DatesApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for calendarDatesExportGet
     * @param apiKey  API key for https://api.data.gov. Get one at https://api.data.gov/signup.  (required)
     * @param calendarCategoryId  Each type of event has a calendar category with an integer id. Options are: Open Meetings: 32, Executive Sessions: 39, Public Hearings: 40, Conferences: 33, Roundtables: 34, Election Dates: 36, Federal Holidays: 37, FEA Periods: 38, Commission Meetings: 20, Reporting Deadlines: 21, Conferences and Outreach: 22, AOs and Rules: 23, Other: 24, Quarterly: 25, Monthly: 26, Pre and Post-Elections: 27, EC Periods:28, and IE Periods: 29  (optional)
     * @param description Brief description of event (optional)
     * @param sortNullsLast Toggle that sorts null values last (optional, default to false)
     * @param sortNullOnly Toggle that filters out all rows having sort column that is non-null (optional, default to false)
     * @param page For paginating through results, starting at page 1 (optional, default to 1)
     * @param maxEndDate  The maximum end date.(MM/DD/YYYY or YYYY-MM-DD)  (optional)
     * @param summary Longer description of event (optional)
     * @param minEndDate  The minimum end date.(MM/DD/YYYY or YYYY-MM-DD)  (optional)
     * @param sortHideNull Hide null values on sorted column(s). (optional, default to false)
     * @param minStartDate  The minimum start date.(MM/DD/YYYY or YYYY-MM-DD)  (optional)
     * @param perPage The number of results returned per page. Defaults to 20. (optional, default to 20)
     * @param maxStartDate  The maximum start date.(MM/DD/YYYY or YYYY-MM-DD)  (optional)
     * @param renderer  (optional, default to ics)
     * @param sort Provide a field to sort by. Use &#x60;-&#x60; for descending order.  (optional, default to -start_date)
     * @param eventId An unique ID for an event. Useful for downloading a single event to your calendar. This ID is not a permanent, persistent ID. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call calendarDatesExportGetCall(String apiKey, List<Integer> calendarCategoryId, List<String> description, Boolean sortNullsLast, Boolean sortNullOnly, Integer page, LocalDate maxEndDate, List<String> summary, LocalDate minEndDate, Boolean sortHideNull, LocalDate minStartDate, Integer perPage, LocalDate maxStartDate, String renderer, String sort, Integer eventId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/calendar-dates/export/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (calendarCategoryId != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "calendar_category_id", calendarCategoryId));
        }

        if (apiKey != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api_key", apiKey));
        }

        if (description != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "description", description));
        }

        if (sortNullsLast != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort_nulls_last", sortNullsLast));
        }

        if (sortNullOnly != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort_null_only", sortNullOnly));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (maxEndDate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("max_end_date", maxEndDate));
        }

        if (summary != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "summary", summary));
        }

        if (minEndDate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("min_end_date", minEndDate));
        }

        if (sortHideNull != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort_hide_null", sortHideNull));
        }

        if (minStartDate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("min_start_date", minStartDate));
        }

        if (perPage != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("per_page", perPage));
        }

        if (maxStartDate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("max_start_date", maxStartDate));
        }

        if (renderer != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("renderer", renderer));
        }

        if (sort != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort", sort));
        }

        if (eventId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("event_id", eventId));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKeyHeaderAuth", "ApiKeyQueryAuth", "apiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call calendarDatesExportGetValidateBeforeCall(String apiKey, List<Integer> calendarCategoryId, List<String> description, Boolean sortNullsLast, Boolean sortNullOnly, Integer page, LocalDate maxEndDate, List<String> summary, LocalDate minEndDate, Boolean sortHideNull, LocalDate minStartDate, Integer perPage, LocalDate maxStartDate, String renderer, String sort, Integer eventId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'apiKey' is set
        if (apiKey == null) {
            throw new ApiException("Missing the required parameter 'apiKey' when calling calendarDatesExportGet(Async)");
        }

        return calendarDatesExportGetCall(apiKey, calendarCategoryId, description, sortNullsLast, sortNullOnly, page, maxEndDate, summary, minEndDate, sortHideNull, minStartDate, perPage, maxStartDate, renderer, sort, eventId, _callback);

    }

    /**
     * 
     *  Returns CSV or ICS for downloading directly into calendar applications like Google, Outlook or other applications.  Combines the election and reporting dates with Commission meetings, conferences, outreach, Advisory Opinions, rules, litigation dates and other events into one calendar.  State filtering now applies to elections, reports and reporting periods.  Presidential pre-primary report due dates are not shown on even years. Filers generally opt to file monthly rather than submit over 50 pre-primary election reports. All reporting deadlines are available at /reporting-dates/ for reference.  This is [the sql function](https://github.com/fecgov/openFEC/blob/develop/data/migrations/V40__omnibus_dates.sql) that creates the calendar.  
     * @param apiKey  API key for https://api.data.gov. Get one at https://api.data.gov/signup.  (required)
     * @param calendarCategoryId  Each type of event has a calendar category with an integer id. Options are: Open Meetings: 32, Executive Sessions: 39, Public Hearings: 40, Conferences: 33, Roundtables: 34, Election Dates: 36, Federal Holidays: 37, FEA Periods: 38, Commission Meetings: 20, Reporting Deadlines: 21, Conferences and Outreach: 22, AOs and Rules: 23, Other: 24, Quarterly: 25, Monthly: 26, Pre and Post-Elections: 27, EC Periods:28, and IE Periods: 29  (optional)
     * @param description Brief description of event (optional)
     * @param sortNullsLast Toggle that sorts null values last (optional, default to false)
     * @param sortNullOnly Toggle that filters out all rows having sort column that is non-null (optional, default to false)
     * @param page For paginating through results, starting at page 1 (optional, default to 1)
     * @param maxEndDate  The maximum end date.(MM/DD/YYYY or YYYY-MM-DD)  (optional)
     * @param summary Longer description of event (optional)
     * @param minEndDate  The minimum end date.(MM/DD/YYYY or YYYY-MM-DD)  (optional)
     * @param sortHideNull Hide null values on sorted column(s). (optional, default to false)
     * @param minStartDate  The minimum start date.(MM/DD/YYYY or YYYY-MM-DD)  (optional)
     * @param perPage The number of results returned per page. Defaults to 20. (optional, default to 20)
     * @param maxStartDate  The maximum start date.(MM/DD/YYYY or YYYY-MM-DD)  (optional)
     * @param renderer  (optional, default to ics)
     * @param sort Provide a field to sort by. Use &#x60;-&#x60; for descending order.  (optional, default to -start_date)
     * @param eventId An unique ID for an event. Useful for downloading a single event to your calendar. This ID is not a permanent, persistent ID. (optional)
     * @return CalendarDatePage
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public CalendarDatePage calendarDatesExportGet(String apiKey, List<Integer> calendarCategoryId, List<String> description, Boolean sortNullsLast, Boolean sortNullOnly, Integer page, LocalDate maxEndDate, List<String> summary, LocalDate minEndDate, Boolean sortHideNull, LocalDate minStartDate, Integer perPage, LocalDate maxStartDate, String renderer, String sort, Integer eventId) throws ApiException {
        ApiResponse<CalendarDatePage> localVarResp = calendarDatesExportGetWithHttpInfo(apiKey, calendarCategoryId, description, sortNullsLast, sortNullOnly, page, maxEndDate, summary, minEndDate, sortHideNull, minStartDate, perPage, maxStartDate, renderer, sort, eventId);
        return localVarResp.getData();
    }

    /**
     * 
     *  Returns CSV or ICS for downloading directly into calendar applications like Google, Outlook or other applications.  Combines the election and reporting dates with Commission meetings, conferences, outreach, Advisory Opinions, rules, litigation dates and other events into one calendar.  State filtering now applies to elections, reports and reporting periods.  Presidential pre-primary report due dates are not shown on even years. Filers generally opt to file monthly rather than submit over 50 pre-primary election reports. All reporting deadlines are available at /reporting-dates/ for reference.  This is [the sql function](https://github.com/fecgov/openFEC/blob/develop/data/migrations/V40__omnibus_dates.sql) that creates the calendar.  
     * @param apiKey  API key for https://api.data.gov. Get one at https://api.data.gov/signup.  (required)
     * @param calendarCategoryId  Each type of event has a calendar category with an integer id. Options are: Open Meetings: 32, Executive Sessions: 39, Public Hearings: 40, Conferences: 33, Roundtables: 34, Election Dates: 36, Federal Holidays: 37, FEA Periods: 38, Commission Meetings: 20, Reporting Deadlines: 21, Conferences and Outreach: 22, AOs and Rules: 23, Other: 24, Quarterly: 25, Monthly: 26, Pre and Post-Elections: 27, EC Periods:28, and IE Periods: 29  (optional)
     * @param description Brief description of event (optional)
     * @param sortNullsLast Toggle that sorts null values last (optional, default to false)
     * @param sortNullOnly Toggle that filters out all rows having sort column that is non-null (optional, default to false)
     * @param page For paginating through results, starting at page 1 (optional, default to 1)
     * @param maxEndDate  The maximum end date.(MM/DD/YYYY or YYYY-MM-DD)  (optional)
     * @param summary Longer description of event (optional)
     * @param minEndDate  The minimum end date.(MM/DD/YYYY or YYYY-MM-DD)  (optional)
     * @param sortHideNull Hide null values on sorted column(s). (optional, default to false)
     * @param minStartDate  The minimum start date.(MM/DD/YYYY or YYYY-MM-DD)  (optional)
     * @param perPage The number of results returned per page. Defaults to 20. (optional, default to 20)
     * @param maxStartDate  The maximum start date.(MM/DD/YYYY or YYYY-MM-DD)  (optional)
     * @param renderer  (optional, default to ics)
     * @param sort Provide a field to sort by. Use &#x60;-&#x60; for descending order.  (optional, default to -start_date)
     * @param eventId An unique ID for an event. Useful for downloading a single event to your calendar. This ID is not a permanent, persistent ID. (optional)
     * @return ApiResponse&lt;CalendarDatePage&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CalendarDatePage> calendarDatesExportGetWithHttpInfo(String apiKey, List<Integer> calendarCategoryId, List<String> description, Boolean sortNullsLast, Boolean sortNullOnly, Integer page, LocalDate maxEndDate, List<String> summary, LocalDate minEndDate, Boolean sortHideNull, LocalDate minStartDate, Integer perPage, LocalDate maxStartDate, String renderer, String sort, Integer eventId) throws ApiException {
        okhttp3.Call localVarCall = calendarDatesExportGetValidateBeforeCall(apiKey, calendarCategoryId, description, sortNullsLast, sortNullOnly, page, maxEndDate, summary, minEndDate, sortHideNull, minStartDate, perPage, maxStartDate, renderer, sort, eventId, null);
        Type localVarReturnType = new TypeToken<CalendarDatePage>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     *  Returns CSV or ICS for downloading directly into calendar applications like Google, Outlook or other applications.  Combines the election and reporting dates with Commission meetings, conferences, outreach, Advisory Opinions, rules, litigation dates and other events into one calendar.  State filtering now applies to elections, reports and reporting periods.  Presidential pre-primary report due dates are not shown on even years. Filers generally opt to file monthly rather than submit over 50 pre-primary election reports. All reporting deadlines are available at /reporting-dates/ for reference.  This is [the sql function](https://github.com/fecgov/openFEC/blob/develop/data/migrations/V40__omnibus_dates.sql) that creates the calendar.  
     * @param apiKey  API key for https://api.data.gov. Get one at https://api.data.gov/signup.  (required)
     * @param calendarCategoryId  Each type of event has a calendar category with an integer id. Options are: Open Meetings: 32, Executive Sessions: 39, Public Hearings: 40, Conferences: 33, Roundtables: 34, Election Dates: 36, Federal Holidays: 37, FEA Periods: 38, Commission Meetings: 20, Reporting Deadlines: 21, Conferences and Outreach: 22, AOs and Rules: 23, Other: 24, Quarterly: 25, Monthly: 26, Pre and Post-Elections: 27, EC Periods:28, and IE Periods: 29  (optional)
     * @param description Brief description of event (optional)
     * @param sortNullsLast Toggle that sorts null values last (optional, default to false)
     * @param sortNullOnly Toggle that filters out all rows having sort column that is non-null (optional, default to false)
     * @param page For paginating through results, starting at page 1 (optional, default to 1)
     * @param maxEndDate  The maximum end date.(MM/DD/YYYY or YYYY-MM-DD)  (optional)
     * @param summary Longer description of event (optional)
     * @param minEndDate  The minimum end date.(MM/DD/YYYY or YYYY-MM-DD)  (optional)
     * @param sortHideNull Hide null values on sorted column(s). (optional, default to false)
     * @param minStartDate  The minimum start date.(MM/DD/YYYY or YYYY-MM-DD)  (optional)
     * @param perPage The number of results returned per page. Defaults to 20. (optional, default to 20)
     * @param maxStartDate  The maximum start date.(MM/DD/YYYY or YYYY-MM-DD)  (optional)
     * @param renderer  (optional, default to ics)
     * @param sort Provide a field to sort by. Use &#x60;-&#x60; for descending order.  (optional, default to -start_date)
     * @param eventId An unique ID for an event. Useful for downloading a single event to your calendar. This ID is not a permanent, persistent ID. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call calendarDatesExportGetAsync(String apiKey, List<Integer> calendarCategoryId, List<String> description, Boolean sortNullsLast, Boolean sortNullOnly, Integer page, LocalDate maxEndDate, List<String> summary, LocalDate minEndDate, Boolean sortHideNull, LocalDate minStartDate, Integer perPage, LocalDate maxStartDate, String renderer, String sort, Integer eventId, final ApiCallback<CalendarDatePage> _callback) throws ApiException {

        okhttp3.Call localVarCall = calendarDatesExportGetValidateBeforeCall(apiKey, calendarCategoryId, description, sortNullsLast, sortNullOnly, page, maxEndDate, summary, minEndDate, sortHideNull, minStartDate, perPage, maxStartDate, renderer, sort, eventId, _callback);
        Type localVarReturnType = new TypeToken<CalendarDatePage>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for calendarDatesGet
     * @param apiKey  API key for https://api.data.gov. Get one at https://api.data.gov/signup.  (required)
     * @param calendarCategoryId  Each type of event has a calendar category with an integer id. Options are: Open Meetings: 32, Executive Sessions: 39, Public Hearings: 40, Conferences: 33, Roundtables: 34, Election Dates: 36, Federal Holidays: 37, FEA Periods: 38, Commission Meetings: 20, Reporting Deadlines: 21, Conferences and Outreach: 22, AOs and Rules: 23, Other: 24, Quarterly: 25, Monthly: 26, Pre and Post-Elections: 27, EC Periods:28, and IE Periods: 29  (optional)
     * @param description Brief description of event (optional)
     * @param sortNullsLast Toggle that sorts null values last (optional, default to false)
     * @param sortNullOnly Toggle that filters out all rows having sort column that is non-null (optional, default to false)
     * @param page For paginating through results, starting at page 1 (optional, default to 1)
     * @param maxEndDate  The maximum end date.(MM/DD/YYYY or YYYY-MM-DD)  (optional)
     * @param summary Longer description of event (optional)
     * @param minEndDate  The minimum end date.(MM/DD/YYYY or YYYY-MM-DD)  (optional)
     * @param sortHideNull Hide null values on sorted column(s). (optional, default to false)
     * @param minStartDate  The minimum start date.(MM/DD/YYYY or YYYY-MM-DD)  (optional)
     * @param maxStartDate  The maximum start date.(MM/DD/YYYY or YYYY-MM-DD)  (optional)
     * @param perPage The number of results returned per page. Defaults to 20. (optional, default to 20)
     * @param sort Provide a field to sort by. Use &#x60;-&#x60; for descending order.  (optional, default to -start_date)
     * @param eventId An unique ID for an event. Useful for downloading a single event to your calendar. This ID is not a permanent, persistent ID. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call calendarDatesGetCall(String apiKey, List<Integer> calendarCategoryId, List<String> description, Boolean sortNullsLast, Boolean sortNullOnly, Integer page, LocalDate maxEndDate, List<String> summary, LocalDate minEndDate, Boolean sortHideNull, LocalDate minStartDate, LocalDate maxStartDate, Integer perPage, String sort, Integer eventId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/calendar-dates/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (calendarCategoryId != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "calendar_category_id", calendarCategoryId));
        }

        if (apiKey != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api_key", apiKey));
        }

        if (description != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "description", description));
        }

        if (sortNullsLast != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort_nulls_last", sortNullsLast));
        }

        if (sortNullOnly != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort_null_only", sortNullOnly));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (maxEndDate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("max_end_date", maxEndDate));
        }

        if (summary != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "summary", summary));
        }

        if (minEndDate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("min_end_date", minEndDate));
        }

        if (sortHideNull != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort_hide_null", sortHideNull));
        }

        if (minStartDate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("min_start_date", minStartDate));
        }

        if (maxStartDate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("max_start_date", maxStartDate));
        }

        if (perPage != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("per_page", perPage));
        }

        if (sort != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort", sort));
        }

        if (eventId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("event_id", eventId));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKeyHeaderAuth", "ApiKeyQueryAuth", "apiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call calendarDatesGetValidateBeforeCall(String apiKey, List<Integer> calendarCategoryId, List<String> description, Boolean sortNullsLast, Boolean sortNullOnly, Integer page, LocalDate maxEndDate, List<String> summary, LocalDate minEndDate, Boolean sortHideNull, LocalDate minStartDate, LocalDate maxStartDate, Integer perPage, String sort, Integer eventId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'apiKey' is set
        if (apiKey == null) {
            throw new ApiException("Missing the required parameter 'apiKey' when calling calendarDatesGet(Async)");
        }

        return calendarDatesGetCall(apiKey, calendarCategoryId, description, sortNullsLast, sortNullOnly, page, maxEndDate, summary, minEndDate, sortHideNull, minStartDate, maxStartDate, perPage, sort, eventId, _callback);

    }

    /**
     * 
     *  Combines the election and reporting dates with Commission meetings, conferences, outreach, Advisory Opinions, rules, litigation dates and other events into one calendar.  State and report type filtering is no longer available. 
     * @param apiKey  API key for https://api.data.gov. Get one at https://api.data.gov/signup.  (required)
     * @param calendarCategoryId  Each type of event has a calendar category with an integer id. Options are: Open Meetings: 32, Executive Sessions: 39, Public Hearings: 40, Conferences: 33, Roundtables: 34, Election Dates: 36, Federal Holidays: 37, FEA Periods: 38, Commission Meetings: 20, Reporting Deadlines: 21, Conferences and Outreach: 22, AOs and Rules: 23, Other: 24, Quarterly: 25, Monthly: 26, Pre and Post-Elections: 27, EC Periods:28, and IE Periods: 29  (optional)
     * @param description Brief description of event (optional)
     * @param sortNullsLast Toggle that sorts null values last (optional, default to false)
     * @param sortNullOnly Toggle that filters out all rows having sort column that is non-null (optional, default to false)
     * @param page For paginating through results, starting at page 1 (optional, default to 1)
     * @param maxEndDate  The maximum end date.(MM/DD/YYYY or YYYY-MM-DD)  (optional)
     * @param summary Longer description of event (optional)
     * @param minEndDate  The minimum end date.(MM/DD/YYYY or YYYY-MM-DD)  (optional)
     * @param sortHideNull Hide null values on sorted column(s). (optional, default to false)
     * @param minStartDate  The minimum start date.(MM/DD/YYYY or YYYY-MM-DD)  (optional)
     * @param maxStartDate  The maximum start date.(MM/DD/YYYY or YYYY-MM-DD)  (optional)
     * @param perPage The number of results returned per page. Defaults to 20. (optional, default to 20)
     * @param sort Provide a field to sort by. Use &#x60;-&#x60; for descending order.  (optional, default to -start_date)
     * @param eventId An unique ID for an event. Useful for downloading a single event to your calendar. This ID is not a permanent, persistent ID. (optional)
     * @return CalendarDatePage
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public CalendarDatePage calendarDatesGet(String apiKey, List<Integer> calendarCategoryId, List<String> description, Boolean sortNullsLast, Boolean sortNullOnly, Integer page, LocalDate maxEndDate, List<String> summary, LocalDate minEndDate, Boolean sortHideNull, LocalDate minStartDate, LocalDate maxStartDate, Integer perPage, String sort, Integer eventId) throws ApiException {
        ApiResponse<CalendarDatePage> localVarResp = calendarDatesGetWithHttpInfo(apiKey, calendarCategoryId, description, sortNullsLast, sortNullOnly, page, maxEndDate, summary, minEndDate, sortHideNull, minStartDate, maxStartDate, perPage, sort, eventId);
        return localVarResp.getData();
    }

    /**
     * 
     *  Combines the election and reporting dates with Commission meetings, conferences, outreach, Advisory Opinions, rules, litigation dates and other events into one calendar.  State and report type filtering is no longer available. 
     * @param apiKey  API key for https://api.data.gov. Get one at https://api.data.gov/signup.  (required)
     * @param calendarCategoryId  Each type of event has a calendar category with an integer id. Options are: Open Meetings: 32, Executive Sessions: 39, Public Hearings: 40, Conferences: 33, Roundtables: 34, Election Dates: 36, Federal Holidays: 37, FEA Periods: 38, Commission Meetings: 20, Reporting Deadlines: 21, Conferences and Outreach: 22, AOs and Rules: 23, Other: 24, Quarterly: 25, Monthly: 26, Pre and Post-Elections: 27, EC Periods:28, and IE Periods: 29  (optional)
     * @param description Brief description of event (optional)
     * @param sortNullsLast Toggle that sorts null values last (optional, default to false)
     * @param sortNullOnly Toggle that filters out all rows having sort column that is non-null (optional, default to false)
     * @param page For paginating through results, starting at page 1 (optional, default to 1)
     * @param maxEndDate  The maximum end date.(MM/DD/YYYY or YYYY-MM-DD)  (optional)
     * @param summary Longer description of event (optional)
     * @param minEndDate  The minimum end date.(MM/DD/YYYY or YYYY-MM-DD)  (optional)
     * @param sortHideNull Hide null values on sorted column(s). (optional, default to false)
     * @param minStartDate  The minimum start date.(MM/DD/YYYY or YYYY-MM-DD)  (optional)
     * @param maxStartDate  The maximum start date.(MM/DD/YYYY or YYYY-MM-DD)  (optional)
     * @param perPage The number of results returned per page. Defaults to 20. (optional, default to 20)
     * @param sort Provide a field to sort by. Use &#x60;-&#x60; for descending order.  (optional, default to -start_date)
     * @param eventId An unique ID for an event. Useful for downloading a single event to your calendar. This ID is not a permanent, persistent ID. (optional)
     * @return ApiResponse&lt;CalendarDatePage&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CalendarDatePage> calendarDatesGetWithHttpInfo(String apiKey, List<Integer> calendarCategoryId, List<String> description, Boolean sortNullsLast, Boolean sortNullOnly, Integer page, LocalDate maxEndDate, List<String> summary, LocalDate minEndDate, Boolean sortHideNull, LocalDate minStartDate, LocalDate maxStartDate, Integer perPage, String sort, Integer eventId) throws ApiException {
        okhttp3.Call localVarCall = calendarDatesGetValidateBeforeCall(apiKey, calendarCategoryId, description, sortNullsLast, sortNullOnly, page, maxEndDate, summary, minEndDate, sortHideNull, minStartDate, maxStartDate, perPage, sort, eventId, null);
        Type localVarReturnType = new TypeToken<CalendarDatePage>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     *  Combines the election and reporting dates with Commission meetings, conferences, outreach, Advisory Opinions, rules, litigation dates and other events into one calendar.  State and report type filtering is no longer available. 
     * @param apiKey  API key for https://api.data.gov. Get one at https://api.data.gov/signup.  (required)
     * @param calendarCategoryId  Each type of event has a calendar category with an integer id. Options are: Open Meetings: 32, Executive Sessions: 39, Public Hearings: 40, Conferences: 33, Roundtables: 34, Election Dates: 36, Federal Holidays: 37, FEA Periods: 38, Commission Meetings: 20, Reporting Deadlines: 21, Conferences and Outreach: 22, AOs and Rules: 23, Other: 24, Quarterly: 25, Monthly: 26, Pre and Post-Elections: 27, EC Periods:28, and IE Periods: 29  (optional)
     * @param description Brief description of event (optional)
     * @param sortNullsLast Toggle that sorts null values last (optional, default to false)
     * @param sortNullOnly Toggle that filters out all rows having sort column that is non-null (optional, default to false)
     * @param page For paginating through results, starting at page 1 (optional, default to 1)
     * @param maxEndDate  The maximum end date.(MM/DD/YYYY or YYYY-MM-DD)  (optional)
     * @param summary Longer description of event (optional)
     * @param minEndDate  The minimum end date.(MM/DD/YYYY or YYYY-MM-DD)  (optional)
     * @param sortHideNull Hide null values on sorted column(s). (optional, default to false)
     * @param minStartDate  The minimum start date.(MM/DD/YYYY or YYYY-MM-DD)  (optional)
     * @param maxStartDate  The maximum start date.(MM/DD/YYYY or YYYY-MM-DD)  (optional)
     * @param perPage The number of results returned per page. Defaults to 20. (optional, default to 20)
     * @param sort Provide a field to sort by. Use &#x60;-&#x60; for descending order.  (optional, default to -start_date)
     * @param eventId An unique ID for an event. Useful for downloading a single event to your calendar. This ID is not a permanent, persistent ID. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call calendarDatesGetAsync(String apiKey, List<Integer> calendarCategoryId, List<String> description, Boolean sortNullsLast, Boolean sortNullOnly, Integer page, LocalDate maxEndDate, List<String> summary, LocalDate minEndDate, Boolean sortHideNull, LocalDate minStartDate, LocalDate maxStartDate, Integer perPage, String sort, Integer eventId, final ApiCallback<CalendarDatePage> _callback) throws ApiException {

        okhttp3.Call localVarCall = calendarDatesGetValidateBeforeCall(apiKey, calendarCategoryId, description, sortNullsLast, sortNullOnly, page, maxEndDate, summary, minEndDate, sortHideNull, minStartDate, maxStartDate, perPage, sort, eventId, _callback);
        Type localVarReturnType = new TypeToken<CalendarDatePage>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for electionDatesGet
     * @param apiKey  API key for https://api.data.gov. Get one at https://api.data.gov/signup.  (required)
     * @param electionState  State or territory of the office sought.  (optional)
     * @param maxElectionDate  The maximum date of election.  (optional)
     * @param electionDistrict  House district of the office sought, if applicable.  (optional)
     * @param minUpdateDate  The minimum date this record was last updated.(MM/DD/YYYY or YYYY-MM-DD)  (optional)
     * @param sortNullOnly Toggle that filters out all rows having sort column that is non-null (optional, default to false)
     * @param sortHideNull Hide null values on sorted column(s). (optional, default to false)
     * @param maxCreateDate  The maximum date this record was added to the system.(MM/DD/YYYY or YYYY-MM-DD)  (optional)
     * @param perPage The number of results returned per page. Defaults to 20. (optional, default to 20)
     * @param electionYear Year of election (optional)
     * @param sort Provide a field to sort by. Use &#x60;-&#x60; for descending order.  (optional, default to -election_date)
     * @param minCreateDate  The minimum date this record was added to the system.(MM/DD/YYYY or YYYY-MM-DD)  (optional)
     * @param electionParty  Party, if applicable.  (optional)
     * @param officeSought  House, Senate or presidential office.  (optional)
     * @param sortNullsLast Toggle that sorts null values last (optional, default to false)
     * @param page For paginating through results, starting at page 1 (optional, default to 1)
     * @param maxUpdateDate  The maximum date this record was last updated.(MM/DD/YYYY or YYYY-MM-DD)  (optional)
     * @param electionTypeId  Election type id  (optional)
     * @param maxPrimaryGeneralDate  The maximum date of primary or general election.(MM/DD/YYYY or YYYY-MM-DD)  (optional)
     * @param minElectionDate  The minimum date of election.  (optional)
     * @param minPrimaryGeneralDate  The minimum date of primary or general election.(MM/DD/YYYY or YYYY-MM-DD)  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call electionDatesGetCall(String apiKey, List<String> electionState, LocalDate maxElectionDate, List<String> electionDistrict, LocalDate minUpdateDate, Boolean sortNullOnly, Boolean sortHideNull, LocalDate maxCreateDate, Integer perPage, List<String> electionYear, String sort, LocalDate minCreateDate, List<String> electionParty, List<String> officeSought, Boolean sortNullsLast, Integer page, LocalDate maxUpdateDate, List<String> electionTypeId, LocalDate maxPrimaryGeneralDate, LocalDate minElectionDate, LocalDate minPrimaryGeneralDate, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/election-dates/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (electionState != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "election_state", electionState));
        }

        if (maxElectionDate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("max_election_date", maxElectionDate));
        }

        if (electionDistrict != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "election_district", electionDistrict));
        }

        if (minUpdateDate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("min_update_date", minUpdateDate));
        }

        if (sortNullOnly != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort_null_only", sortNullOnly));
        }

        if (sortHideNull != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort_hide_null", sortHideNull));
        }

        if (maxCreateDate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("max_create_date", maxCreateDate));
        }

        if (perPage != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("per_page", perPage));
        }

        if (electionYear != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "election_year", electionYear));
        }

        if (sort != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort", sort));
        }

        if (minCreateDate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("min_create_date", minCreateDate));
        }

        if (apiKey != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api_key", apiKey));
        }

        if (electionParty != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "election_party", electionParty));
        }

        if (officeSought != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "office_sought", officeSought));
        }

        if (sortNullsLast != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort_nulls_last", sortNullsLast));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (maxUpdateDate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("max_update_date", maxUpdateDate));
        }

        if (electionTypeId != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "election_type_id", electionTypeId));
        }

        if (maxPrimaryGeneralDate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("max_primary_general_date", maxPrimaryGeneralDate));
        }

        if (minElectionDate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("min_election_date", minElectionDate));
        }

        if (minPrimaryGeneralDate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("min_primary_general_date", minPrimaryGeneralDate));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKeyHeaderAuth", "ApiKeyQueryAuth", "apiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call electionDatesGetValidateBeforeCall(String apiKey, List<String> electionState, LocalDate maxElectionDate, List<String> electionDistrict, LocalDate minUpdateDate, Boolean sortNullOnly, Boolean sortHideNull, LocalDate maxCreateDate, Integer perPage, List<String> electionYear, String sort, LocalDate minCreateDate, List<String> electionParty, List<String> officeSought, Boolean sortNullsLast, Integer page, LocalDate maxUpdateDate, List<String> electionTypeId, LocalDate maxPrimaryGeneralDate, LocalDate minElectionDate, LocalDate minPrimaryGeneralDate, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'apiKey' is set
        if (apiKey == null) {
            throw new ApiException("Missing the required parameter 'apiKey' when calling electionDatesGet(Async)");
        }

        return electionDatesGetCall(apiKey, electionState, maxElectionDate, electionDistrict, minUpdateDate, sortNullOnly, sortHideNull, maxCreateDate, perPage, electionYear, sort, minCreateDate, electionParty, officeSought, sortNullsLast, page, maxUpdateDate, electionTypeId, maxPrimaryGeneralDate, minElectionDate, minPrimaryGeneralDate, _callback);

    }

    /**
     * 
     *  FEC election dates since 1995. 
     * @param apiKey  API key for https://api.data.gov. Get one at https://api.data.gov/signup.  (required)
     * @param electionState  State or territory of the office sought.  (optional)
     * @param maxElectionDate  The maximum date of election.  (optional)
     * @param electionDistrict  House district of the office sought, if applicable.  (optional)
     * @param minUpdateDate  The minimum date this record was last updated.(MM/DD/YYYY or YYYY-MM-DD)  (optional)
     * @param sortNullOnly Toggle that filters out all rows having sort column that is non-null (optional, default to false)
     * @param sortHideNull Hide null values on sorted column(s). (optional, default to false)
     * @param maxCreateDate  The maximum date this record was added to the system.(MM/DD/YYYY or YYYY-MM-DD)  (optional)
     * @param perPage The number of results returned per page. Defaults to 20. (optional, default to 20)
     * @param electionYear Year of election (optional)
     * @param sort Provide a field to sort by. Use &#x60;-&#x60; for descending order.  (optional, default to -election_date)
     * @param minCreateDate  The minimum date this record was added to the system.(MM/DD/YYYY or YYYY-MM-DD)  (optional)
     * @param electionParty  Party, if applicable.  (optional)
     * @param officeSought  House, Senate or presidential office.  (optional)
     * @param sortNullsLast Toggle that sorts null values last (optional, default to false)
     * @param page For paginating through results, starting at page 1 (optional, default to 1)
     * @param maxUpdateDate  The maximum date this record was last updated.(MM/DD/YYYY or YYYY-MM-DD)  (optional)
     * @param electionTypeId  Election type id  (optional)
     * @param maxPrimaryGeneralDate  The maximum date of primary or general election.(MM/DD/YYYY or YYYY-MM-DD)  (optional)
     * @param minElectionDate  The minimum date of election.  (optional)
     * @param minPrimaryGeneralDate  The minimum date of primary or general election.(MM/DD/YYYY or YYYY-MM-DD)  (optional)
     * @return ElectionDatesGetDefaultResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ElectionDatesGetDefaultResponse electionDatesGet(String apiKey, List<String> electionState, LocalDate maxElectionDate, List<String> electionDistrict, LocalDate minUpdateDate, Boolean sortNullOnly, Boolean sortHideNull, LocalDate maxCreateDate, Integer perPage, List<String> electionYear, String sort, LocalDate minCreateDate, List<String> electionParty, List<String> officeSought, Boolean sortNullsLast, Integer page, LocalDate maxUpdateDate, List<String> electionTypeId, LocalDate maxPrimaryGeneralDate, LocalDate minElectionDate, LocalDate minPrimaryGeneralDate) throws ApiException {
        ApiResponse<ElectionDatesGetDefaultResponse> localVarResp = electionDatesGetWithHttpInfo(apiKey, electionState, maxElectionDate, electionDistrict, minUpdateDate, sortNullOnly, sortHideNull, maxCreateDate, perPage, electionYear, sort, minCreateDate, electionParty, officeSought, sortNullsLast, page, maxUpdateDate, electionTypeId, maxPrimaryGeneralDate, minElectionDate, minPrimaryGeneralDate);
        return localVarResp.getData();
    }

    /**
     * 
     *  FEC election dates since 1995. 
     * @param apiKey  API key for https://api.data.gov. Get one at https://api.data.gov/signup.  (required)
     * @param electionState  State or territory of the office sought.  (optional)
     * @param maxElectionDate  The maximum date of election.  (optional)
     * @param electionDistrict  House district of the office sought, if applicable.  (optional)
     * @param minUpdateDate  The minimum date this record was last updated.(MM/DD/YYYY or YYYY-MM-DD)  (optional)
     * @param sortNullOnly Toggle that filters out all rows having sort column that is non-null (optional, default to false)
     * @param sortHideNull Hide null values on sorted column(s). (optional, default to false)
     * @param maxCreateDate  The maximum date this record was added to the system.(MM/DD/YYYY or YYYY-MM-DD)  (optional)
     * @param perPage The number of results returned per page. Defaults to 20. (optional, default to 20)
     * @param electionYear Year of election (optional)
     * @param sort Provide a field to sort by. Use &#x60;-&#x60; for descending order.  (optional, default to -election_date)
     * @param minCreateDate  The minimum date this record was added to the system.(MM/DD/YYYY or YYYY-MM-DD)  (optional)
     * @param electionParty  Party, if applicable.  (optional)
     * @param officeSought  House, Senate or presidential office.  (optional)
     * @param sortNullsLast Toggle that sorts null values last (optional, default to false)
     * @param page For paginating through results, starting at page 1 (optional, default to 1)
     * @param maxUpdateDate  The maximum date this record was last updated.(MM/DD/YYYY or YYYY-MM-DD)  (optional)
     * @param electionTypeId  Election type id  (optional)
     * @param maxPrimaryGeneralDate  The maximum date of primary or general election.(MM/DD/YYYY or YYYY-MM-DD)  (optional)
     * @param minElectionDate  The minimum date of election.  (optional)
     * @param minPrimaryGeneralDate  The minimum date of primary or general election.(MM/DD/YYYY or YYYY-MM-DD)  (optional)
     * @return ApiResponse&lt;ElectionDatesGetDefaultResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ElectionDatesGetDefaultResponse> electionDatesGetWithHttpInfo(String apiKey, List<String> electionState, LocalDate maxElectionDate, List<String> electionDistrict, LocalDate minUpdateDate, Boolean sortNullOnly, Boolean sortHideNull, LocalDate maxCreateDate, Integer perPage, List<String> electionYear, String sort, LocalDate minCreateDate, List<String> electionParty, List<String> officeSought, Boolean sortNullsLast, Integer page, LocalDate maxUpdateDate, List<String> electionTypeId, LocalDate maxPrimaryGeneralDate, LocalDate minElectionDate, LocalDate minPrimaryGeneralDate) throws ApiException {
        okhttp3.Call localVarCall = electionDatesGetValidateBeforeCall(apiKey, electionState, maxElectionDate, electionDistrict, minUpdateDate, sortNullOnly, sortHideNull, maxCreateDate, perPage, electionYear, sort, minCreateDate, electionParty, officeSought, sortNullsLast, page, maxUpdateDate, electionTypeId, maxPrimaryGeneralDate, minElectionDate, minPrimaryGeneralDate, null);
        Type localVarReturnType = new TypeToken<ElectionDatesGetDefaultResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     *  FEC election dates since 1995. 
     * @param apiKey  API key for https://api.data.gov. Get one at https://api.data.gov/signup.  (required)
     * @param electionState  State or territory of the office sought.  (optional)
     * @param maxElectionDate  The maximum date of election.  (optional)
     * @param electionDistrict  House district of the office sought, if applicable.  (optional)
     * @param minUpdateDate  The minimum date this record was last updated.(MM/DD/YYYY or YYYY-MM-DD)  (optional)
     * @param sortNullOnly Toggle that filters out all rows having sort column that is non-null (optional, default to false)
     * @param sortHideNull Hide null values on sorted column(s). (optional, default to false)
     * @param maxCreateDate  The maximum date this record was added to the system.(MM/DD/YYYY or YYYY-MM-DD)  (optional)
     * @param perPage The number of results returned per page. Defaults to 20. (optional, default to 20)
     * @param electionYear Year of election (optional)
     * @param sort Provide a field to sort by. Use &#x60;-&#x60; for descending order.  (optional, default to -election_date)
     * @param minCreateDate  The minimum date this record was added to the system.(MM/DD/YYYY or YYYY-MM-DD)  (optional)
     * @param electionParty  Party, if applicable.  (optional)
     * @param officeSought  House, Senate or presidential office.  (optional)
     * @param sortNullsLast Toggle that sorts null values last (optional, default to false)
     * @param page For paginating through results, starting at page 1 (optional, default to 1)
     * @param maxUpdateDate  The maximum date this record was last updated.(MM/DD/YYYY or YYYY-MM-DD)  (optional)
     * @param electionTypeId  Election type id  (optional)
     * @param maxPrimaryGeneralDate  The maximum date of primary or general election.(MM/DD/YYYY or YYYY-MM-DD)  (optional)
     * @param minElectionDate  The minimum date of election.  (optional)
     * @param minPrimaryGeneralDate  The minimum date of primary or general election.(MM/DD/YYYY or YYYY-MM-DD)  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call electionDatesGetAsync(String apiKey, List<String> electionState, LocalDate maxElectionDate, List<String> electionDistrict, LocalDate minUpdateDate, Boolean sortNullOnly, Boolean sortHideNull, LocalDate maxCreateDate, Integer perPage, List<String> electionYear, String sort, LocalDate minCreateDate, List<String> electionParty, List<String> officeSought, Boolean sortNullsLast, Integer page, LocalDate maxUpdateDate, List<String> electionTypeId, LocalDate maxPrimaryGeneralDate, LocalDate minElectionDate, LocalDate minPrimaryGeneralDate, final ApiCallback<ElectionDatesGetDefaultResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = electionDatesGetValidateBeforeCall(apiKey, electionState, maxElectionDate, electionDistrict, minUpdateDate, sortNullOnly, sortHideNull, maxCreateDate, perPage, electionYear, sort, minCreateDate, electionParty, officeSought, sortNullsLast, page, maxUpdateDate, electionTypeId, maxPrimaryGeneralDate, minElectionDate, minPrimaryGeneralDate, _callback);
        Type localVarReturnType = new TypeToken<ElectionDatesGetDefaultResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for reportingDatesGet
     * @param apiKey  API key for https://api.data.gov. Get one at https://api.data.gov/signup.  (required)
     * @param minUpdateDate  The minimum date this record was last updated.(MM/DD/YYYY or YYYY-MM-DD)  (optional)
     * @param reportType Name of report where the underlying data comes from:     - 10D Pre-Election     - 10G Pre-General     - 10P Pre-Primary     - 10R Pre-Run-Off     - 10S Pre-Special     - 12C Pre-Convention     - 12G Pre-General     - 12P Pre-Primary     - 12R Pre-Run-Off     - 12S Pre-Special     - 30D Post-Election     - 30G Post-General     - 30P Post-Primary     - 30R Post-Run-Off     - 30S Post-Special     - 60D Post-Convention     - M1  January Monthly     - M10 October Monthly     - M11 November Monthly     - M12 December Monthly     - M2  February Monthly     - M3  March Monthly     - M4  April Monthly     - M5  May Monthly     - M6  June Monthly     - M7  July Monthly     - M8  August Monthly     - M9  September Monthly     - MY  Mid-Year Report     - Q1  April Quarterly     - Q2  July Quarterly     - Q3  October Quarterly     - TER Termination Report     - YE  Year-End     - ADJ COMP ADJUST AMEND     - CA  COMPREHENSIVE AMEND     - 90S Post Inaugural Supplement     - 90D Post Inaugural     - 48  48 Hour Notification     - 24  24 Hour Notification     - M7S July Monthly/Semi-Annual     - MSA Monthly Semi-Annual (MY)     - MYS Monthly Year End/Semi-Annual     - Q2S July Quarterly/Semi-Annual     - QSA Quarterly Semi-Annual (MY)     - QYS Quarterly Year End/Semi-Annual     - QYE Quarterly Semi-Annual (YE)     - QMS Quarterly Mid-Year/ Semi-Annual     - MSY Monthly Semi-Annual (YE)  (optional)
     * @param minDueDate  The minimum date the report is due.(MM/DD/YYYY or YYYY-MM-DD)  (optional)
     * @param sortNullOnly Toggle that filters out all rows having sort column that is non-null (optional, default to false)
     * @param page For paginating through results, starting at page 1 (optional, default to 1)
     * @param maxDueDate  The maximum date the report is due.(MM/DD/YYYY or YYYY-MM-DD)  (optional)
     * @param reportYear  Forms with coverage date -      year from the coverage ending date. Forms without coverage date -      year from the receipt date.  (optional)
     * @param sortNullsLast Toggle that sorts null values last (optional, default to false)
     * @param maxCreateDate  The maximum date this record was added to the system.(MM/DD/YYYY or YYYY-MM-DD)  (optional)
     * @param maxUpdateDate  The maximum date this record was last updated.(MM/DD/YYYY or YYYY-MM-DD)  (optional)
     * @param perPage The number of results returned per page. Defaults to 20. (optional, default to 20)
     * @param sortHideNull Hide null values on sorted column(s). (optional, default to false)
     * @param sort Provide a field to sort by. Use &#x60;-&#x60; for descending order.  (optional, default to -due_date)
     * @param minCreateDate  The minimum date this record was added to the system.(MM/DD/YYYY or YYYY-MM-DD)  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call reportingDatesGetCall(String apiKey, LocalDate minUpdateDate, List<String> reportType, LocalDate minDueDate, Boolean sortNullOnly, Integer page, LocalDate maxDueDate, List<Integer> reportYear, Boolean sortNullsLast, LocalDate maxCreateDate, LocalDate maxUpdateDate, Integer perPage, Boolean sortHideNull, String sort, LocalDate minCreateDate, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/reporting-dates/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiKey != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api_key", apiKey));
        }

        if (minUpdateDate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("min_update_date", minUpdateDate));
        }

        if (reportType != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "report_type", reportType));
        }

        if (minDueDate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("min_due_date", minDueDate));
        }

        if (sortNullOnly != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort_null_only", sortNullOnly));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (maxDueDate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("max_due_date", maxDueDate));
        }

        if (reportYear != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "report_year", reportYear));
        }

        if (sortNullsLast != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort_nulls_last", sortNullsLast));
        }

        if (maxCreateDate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("max_create_date", maxCreateDate));
        }

        if (maxUpdateDate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("max_update_date", maxUpdateDate));
        }

        if (perPage != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("per_page", perPage));
        }

        if (sortHideNull != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort_hide_null", sortHideNull));
        }

        if (sort != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort", sort));
        }

        if (minCreateDate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("min_create_date", minCreateDate));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKeyHeaderAuth", "ApiKeyQueryAuth", "apiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call reportingDatesGetValidateBeforeCall(String apiKey, LocalDate minUpdateDate, List<String> reportType, LocalDate minDueDate, Boolean sortNullOnly, Integer page, LocalDate maxDueDate, List<Integer> reportYear, Boolean sortNullsLast, LocalDate maxCreateDate, LocalDate maxUpdateDate, Integer perPage, Boolean sortHideNull, String sort, LocalDate minCreateDate, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'apiKey' is set
        if (apiKey == null) {
            throw new ApiException("Missing the required parameter 'apiKey' when calling reportingDatesGet(Async)");
        }

        return reportingDatesGetCall(apiKey, minUpdateDate, reportType, minDueDate, sortNullOnly, page, maxDueDate, reportYear, sortNullsLast, maxCreateDate, maxUpdateDate, perPage, sortHideNull, sort, minCreateDate, _callback);

    }

    /**
     * 
     *  FEC election dates since 1995. 
     * @param apiKey  API key for https://api.data.gov. Get one at https://api.data.gov/signup.  (required)
     * @param minUpdateDate  The minimum date this record was last updated.(MM/DD/YYYY or YYYY-MM-DD)  (optional)
     * @param reportType Name of report where the underlying data comes from:     - 10D Pre-Election     - 10G Pre-General     - 10P Pre-Primary     - 10R Pre-Run-Off     - 10S Pre-Special     - 12C Pre-Convention     - 12G Pre-General     - 12P Pre-Primary     - 12R Pre-Run-Off     - 12S Pre-Special     - 30D Post-Election     - 30G Post-General     - 30P Post-Primary     - 30R Post-Run-Off     - 30S Post-Special     - 60D Post-Convention     - M1  January Monthly     - M10 October Monthly     - M11 November Monthly     - M12 December Monthly     - M2  February Monthly     - M3  March Monthly     - M4  April Monthly     - M5  May Monthly     - M6  June Monthly     - M7  July Monthly     - M8  August Monthly     - M9  September Monthly     - MY  Mid-Year Report     - Q1  April Quarterly     - Q2  July Quarterly     - Q3  October Quarterly     - TER Termination Report     - YE  Year-End     - ADJ COMP ADJUST AMEND     - CA  COMPREHENSIVE AMEND     - 90S Post Inaugural Supplement     - 90D Post Inaugural     - 48  48 Hour Notification     - 24  24 Hour Notification     - M7S July Monthly/Semi-Annual     - MSA Monthly Semi-Annual (MY)     - MYS Monthly Year End/Semi-Annual     - Q2S July Quarterly/Semi-Annual     - QSA Quarterly Semi-Annual (MY)     - QYS Quarterly Year End/Semi-Annual     - QYE Quarterly Semi-Annual (YE)     - QMS Quarterly Mid-Year/ Semi-Annual     - MSY Monthly Semi-Annual (YE)  (optional)
     * @param minDueDate  The minimum date the report is due.(MM/DD/YYYY or YYYY-MM-DD)  (optional)
     * @param sortNullOnly Toggle that filters out all rows having sort column that is non-null (optional, default to false)
     * @param page For paginating through results, starting at page 1 (optional, default to 1)
     * @param maxDueDate  The maximum date the report is due.(MM/DD/YYYY or YYYY-MM-DD)  (optional)
     * @param reportYear  Forms with coverage date -      year from the coverage ending date. Forms without coverage date -      year from the receipt date.  (optional)
     * @param sortNullsLast Toggle that sorts null values last (optional, default to false)
     * @param maxCreateDate  The maximum date this record was added to the system.(MM/DD/YYYY or YYYY-MM-DD)  (optional)
     * @param maxUpdateDate  The maximum date this record was last updated.(MM/DD/YYYY or YYYY-MM-DD)  (optional)
     * @param perPage The number of results returned per page. Defaults to 20. (optional, default to 20)
     * @param sortHideNull Hide null values on sorted column(s). (optional, default to false)
     * @param sort Provide a field to sort by. Use &#x60;-&#x60; for descending order.  (optional, default to -due_date)
     * @param minCreateDate  The minimum date this record was added to the system.(MM/DD/YYYY or YYYY-MM-DD)  (optional)
     * @return ReportingDatesGetDefaultResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ReportingDatesGetDefaultResponse reportingDatesGet(String apiKey, LocalDate minUpdateDate, List<String> reportType, LocalDate minDueDate, Boolean sortNullOnly, Integer page, LocalDate maxDueDate, List<Integer> reportYear, Boolean sortNullsLast, LocalDate maxCreateDate, LocalDate maxUpdateDate, Integer perPage, Boolean sortHideNull, String sort, LocalDate minCreateDate) throws ApiException {
        ApiResponse<ReportingDatesGetDefaultResponse> localVarResp = reportingDatesGetWithHttpInfo(apiKey, minUpdateDate, reportType, minDueDate, sortNullOnly, page, maxDueDate, reportYear, sortNullsLast, maxCreateDate, maxUpdateDate, perPage, sortHideNull, sort, minCreateDate);
        return localVarResp.getData();
    }

    /**
     * 
     *  FEC election dates since 1995. 
     * @param apiKey  API key for https://api.data.gov. Get one at https://api.data.gov/signup.  (required)
     * @param minUpdateDate  The minimum date this record was last updated.(MM/DD/YYYY or YYYY-MM-DD)  (optional)
     * @param reportType Name of report where the underlying data comes from:     - 10D Pre-Election     - 10G Pre-General     - 10P Pre-Primary     - 10R Pre-Run-Off     - 10S Pre-Special     - 12C Pre-Convention     - 12G Pre-General     - 12P Pre-Primary     - 12R Pre-Run-Off     - 12S Pre-Special     - 30D Post-Election     - 30G Post-General     - 30P Post-Primary     - 30R Post-Run-Off     - 30S Post-Special     - 60D Post-Convention     - M1  January Monthly     - M10 October Monthly     - M11 November Monthly     - M12 December Monthly     - M2  February Monthly     - M3  March Monthly     - M4  April Monthly     - M5  May Monthly     - M6  June Monthly     - M7  July Monthly     - M8  August Monthly     - M9  September Monthly     - MY  Mid-Year Report     - Q1  April Quarterly     - Q2  July Quarterly     - Q3  October Quarterly     - TER Termination Report     - YE  Year-End     - ADJ COMP ADJUST AMEND     - CA  COMPREHENSIVE AMEND     - 90S Post Inaugural Supplement     - 90D Post Inaugural     - 48  48 Hour Notification     - 24  24 Hour Notification     - M7S July Monthly/Semi-Annual     - MSA Monthly Semi-Annual (MY)     - MYS Monthly Year End/Semi-Annual     - Q2S July Quarterly/Semi-Annual     - QSA Quarterly Semi-Annual (MY)     - QYS Quarterly Year End/Semi-Annual     - QYE Quarterly Semi-Annual (YE)     - QMS Quarterly Mid-Year/ Semi-Annual     - MSY Monthly Semi-Annual (YE)  (optional)
     * @param minDueDate  The minimum date the report is due.(MM/DD/YYYY or YYYY-MM-DD)  (optional)
     * @param sortNullOnly Toggle that filters out all rows having sort column that is non-null (optional, default to false)
     * @param page For paginating through results, starting at page 1 (optional, default to 1)
     * @param maxDueDate  The maximum date the report is due.(MM/DD/YYYY or YYYY-MM-DD)  (optional)
     * @param reportYear  Forms with coverage date -      year from the coverage ending date. Forms without coverage date -      year from the receipt date.  (optional)
     * @param sortNullsLast Toggle that sorts null values last (optional, default to false)
     * @param maxCreateDate  The maximum date this record was added to the system.(MM/DD/YYYY or YYYY-MM-DD)  (optional)
     * @param maxUpdateDate  The maximum date this record was last updated.(MM/DD/YYYY or YYYY-MM-DD)  (optional)
     * @param perPage The number of results returned per page. Defaults to 20. (optional, default to 20)
     * @param sortHideNull Hide null values on sorted column(s). (optional, default to false)
     * @param sort Provide a field to sort by. Use &#x60;-&#x60; for descending order.  (optional, default to -due_date)
     * @param minCreateDate  The minimum date this record was added to the system.(MM/DD/YYYY or YYYY-MM-DD)  (optional)
     * @return ApiResponse&lt;ReportingDatesGetDefaultResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ReportingDatesGetDefaultResponse> reportingDatesGetWithHttpInfo(String apiKey, LocalDate minUpdateDate, List<String> reportType, LocalDate minDueDate, Boolean sortNullOnly, Integer page, LocalDate maxDueDate, List<Integer> reportYear, Boolean sortNullsLast, LocalDate maxCreateDate, LocalDate maxUpdateDate, Integer perPage, Boolean sortHideNull, String sort, LocalDate minCreateDate) throws ApiException {
        okhttp3.Call localVarCall = reportingDatesGetValidateBeforeCall(apiKey, minUpdateDate, reportType, minDueDate, sortNullOnly, page, maxDueDate, reportYear, sortNullsLast, maxCreateDate, maxUpdateDate, perPage, sortHideNull, sort, minCreateDate, null);
        Type localVarReturnType = new TypeToken<ReportingDatesGetDefaultResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     *  FEC election dates since 1995. 
     * @param apiKey  API key for https://api.data.gov. Get one at https://api.data.gov/signup.  (required)
     * @param minUpdateDate  The minimum date this record was last updated.(MM/DD/YYYY or YYYY-MM-DD)  (optional)
     * @param reportType Name of report where the underlying data comes from:     - 10D Pre-Election     - 10G Pre-General     - 10P Pre-Primary     - 10R Pre-Run-Off     - 10S Pre-Special     - 12C Pre-Convention     - 12G Pre-General     - 12P Pre-Primary     - 12R Pre-Run-Off     - 12S Pre-Special     - 30D Post-Election     - 30G Post-General     - 30P Post-Primary     - 30R Post-Run-Off     - 30S Post-Special     - 60D Post-Convention     - M1  January Monthly     - M10 October Monthly     - M11 November Monthly     - M12 December Monthly     - M2  February Monthly     - M3  March Monthly     - M4  April Monthly     - M5  May Monthly     - M6  June Monthly     - M7  July Monthly     - M8  August Monthly     - M9  September Monthly     - MY  Mid-Year Report     - Q1  April Quarterly     - Q2  July Quarterly     - Q3  October Quarterly     - TER Termination Report     - YE  Year-End     - ADJ COMP ADJUST AMEND     - CA  COMPREHENSIVE AMEND     - 90S Post Inaugural Supplement     - 90D Post Inaugural     - 48  48 Hour Notification     - 24  24 Hour Notification     - M7S July Monthly/Semi-Annual     - MSA Monthly Semi-Annual (MY)     - MYS Monthly Year End/Semi-Annual     - Q2S July Quarterly/Semi-Annual     - QSA Quarterly Semi-Annual (MY)     - QYS Quarterly Year End/Semi-Annual     - QYE Quarterly Semi-Annual (YE)     - QMS Quarterly Mid-Year/ Semi-Annual     - MSY Monthly Semi-Annual (YE)  (optional)
     * @param minDueDate  The minimum date the report is due.(MM/DD/YYYY or YYYY-MM-DD)  (optional)
     * @param sortNullOnly Toggle that filters out all rows having sort column that is non-null (optional, default to false)
     * @param page For paginating through results, starting at page 1 (optional, default to 1)
     * @param maxDueDate  The maximum date the report is due.(MM/DD/YYYY or YYYY-MM-DD)  (optional)
     * @param reportYear  Forms with coverage date -      year from the coverage ending date. Forms without coverage date -      year from the receipt date.  (optional)
     * @param sortNullsLast Toggle that sorts null values last (optional, default to false)
     * @param maxCreateDate  The maximum date this record was added to the system.(MM/DD/YYYY or YYYY-MM-DD)  (optional)
     * @param maxUpdateDate  The maximum date this record was last updated.(MM/DD/YYYY or YYYY-MM-DD)  (optional)
     * @param perPage The number of results returned per page. Defaults to 20. (optional, default to 20)
     * @param sortHideNull Hide null values on sorted column(s). (optional, default to false)
     * @param sort Provide a field to sort by. Use &#x60;-&#x60; for descending order.  (optional, default to -due_date)
     * @param minCreateDate  The minimum date this record was added to the system.(MM/DD/YYYY or YYYY-MM-DD)  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call reportingDatesGetAsync(String apiKey, LocalDate minUpdateDate, List<String> reportType, LocalDate minDueDate, Boolean sortNullOnly, Integer page, LocalDate maxDueDate, List<Integer> reportYear, Boolean sortNullsLast, LocalDate maxCreateDate, LocalDate maxUpdateDate, Integer perPage, Boolean sortHideNull, String sort, LocalDate minCreateDate, final ApiCallback<ReportingDatesGetDefaultResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = reportingDatesGetValidateBeforeCall(apiKey, minUpdateDate, reportType, minDueDate, sortNullOnly, page, maxDueDate, reportYear, sortNullsLast, maxCreateDate, maxUpdateDate, perPage, sortHideNull, sort, minCreateDate, _callback);
        Type localVarReturnType = new TypeToken<ReportingDatesGetDefaultResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
