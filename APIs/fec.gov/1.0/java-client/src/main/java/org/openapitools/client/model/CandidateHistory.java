/*
 * OpenFEC
 * This application programming interface (API) allows you to explore the way candidates and committees fund their campaigns.    The Federal Election Commission (FEC) API is a RESTful web service supporting full-text and field-specific searches on FEC data. [Bulk downloads](https://www.fec.gov/data/advanced/?tab=bulk-data) are available on the current site. Information is tied to the underlying forms by file ID and image ID. Data is updated nightly.    There are a lot of data, and a good place to start is to use search to find interesting candidates and committees. Then, you can use their IDs to find report or line item details with the other endpoints. If you are interested in individual donors, check out contributor information in the `/schedule_a/` endpoints.    <b class=\"body\" id=\"getting_started_head\">Getting started with the openFEC API</b><br>    If you would like to use the FEC's API programmatically, you can sign up for your own API key using our form. Alternatively, you can still try out our API without an API key by using the web interface and using DEMO_KEY. Note that when you use the openFEC API you are subject to the [Terms of Service](https://github.com/fecgov/FEC/blob/master/TERMS-OF-SERVICE.md) and [Acceptable Use policy](https://github.com/fecgov/FEC/blob/master/ACCEPTABLE-USE-POLICY.md).    Signing up for an API key will enable you to place up to 1,000 calls an hour. Each call is limited to 100 results per page. You can email questions, comments or a request to get a key for 7,200 calls an hour (120 calls per minute) to <a href=\"mailto:APIinfo@fec.gov\">APIinfo@fec.gov</a>. You can also ask questions and discuss the data in a community led [group](https://groups.google.com/forum/#!forum/fec-data).    The model definitions and schema are available at [/swagger](/swagger/). This is useful for making wrappers and exploring the data.    A few restrictions limit the way you can use FEC data. For example, you canâ€™t use contributor lists for commercial purposes or to solicit donations. [Learn more here](https://www.fec.gov/updates/sale-or-use-contributor-information/).    [Inspect our source code](https://github.com/fecgov/openFEC). We welcome issues and pull requests!    <p><br></p> <h2 class=\"title\" id=\"signup_head\">Sign up for an API key</h2> <div id=\"apidatagov_signup\">Loading signup form...</div>
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.LocalDate;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * CandidateHistory
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:02:12.812386-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class CandidateHistory {
  public static final String SERIALIZED_NAME_ACTIVE_THROUGH = "active_through";
  @SerializedName(SERIALIZED_NAME_ACTIVE_THROUGH)
  private Integer activeThrough;

  public static final String SERIALIZED_NAME_ADDRESS_CITY = "address_city";
  @SerializedName(SERIALIZED_NAME_ADDRESS_CITY)
  private String addressCity;

  public static final String SERIALIZED_NAME_ADDRESS_STATE = "address_state";
  @SerializedName(SERIALIZED_NAME_ADDRESS_STATE)
  private String addressState;

  public static final String SERIALIZED_NAME_ADDRESS_STREET1 = "address_street_1";
  @SerializedName(SERIALIZED_NAME_ADDRESS_STREET1)
  private String addressStreet1;

  public static final String SERIALIZED_NAME_ADDRESS_STREET2 = "address_street_2";
  @SerializedName(SERIALIZED_NAME_ADDRESS_STREET2)
  private String addressStreet2;

  public static final String SERIALIZED_NAME_ADDRESS_ZIP = "address_zip";
  @SerializedName(SERIALIZED_NAME_ADDRESS_ZIP)
  private String addressZip;

  public static final String SERIALIZED_NAME_CANDIDATE_ELECTION_YEAR = "candidate_election_year";
  @SerializedName(SERIALIZED_NAME_CANDIDATE_ELECTION_YEAR)
  private Integer candidateElectionYear;

  public static final String SERIALIZED_NAME_CANDIDATE_ID = "candidate_id";
  @SerializedName(SERIALIZED_NAME_CANDIDATE_ID)
  private String candidateId;

  public static final String SERIALIZED_NAME_CANDIDATE_INACTIVE = "candidate_inactive";
  @SerializedName(SERIALIZED_NAME_CANDIDATE_INACTIVE)
  private Boolean candidateInactive;

  public static final String SERIALIZED_NAME_CANDIDATE_STATUS = "candidate_status";
  @SerializedName(SERIALIZED_NAME_CANDIDATE_STATUS)
  private String candidateStatus;

  public static final String SERIALIZED_NAME_CYCLES = "cycles";
  @SerializedName(SERIALIZED_NAME_CYCLES)
  private List<Integer> cycles;

  public static final String SERIALIZED_NAME_DISTRICT = "district";
  @SerializedName(SERIALIZED_NAME_DISTRICT)
  private String district;

  public static final String SERIALIZED_NAME_DISTRICT_NUMBER = "district_number";
  @SerializedName(SERIALIZED_NAME_DISTRICT_NUMBER)
  private Integer districtNumber;

  public static final String SERIALIZED_NAME_ELECTION_DISTRICTS = "election_districts";
  @SerializedName(SERIALIZED_NAME_ELECTION_DISTRICTS)
  private List<String> electionDistricts;

  public static final String SERIALIZED_NAME_ELECTION_YEARS = "election_years";
  @SerializedName(SERIALIZED_NAME_ELECTION_YEARS)
  private List<Integer> electionYears;

  public static final String SERIALIZED_NAME_FEC_CYCLES_IN_ELECTION = "fec_cycles_in_election";
  @SerializedName(SERIALIZED_NAME_FEC_CYCLES_IN_ELECTION)
  private List<Integer> fecCyclesInElection;

  public static final String SERIALIZED_NAME_FIRST_FILE_DATE = "first_file_date";
  @SerializedName(SERIALIZED_NAME_FIRST_FILE_DATE)
  private LocalDate firstFileDate;

  public static final String SERIALIZED_NAME_FLAGS = "flags";
  @SerializedName(SERIALIZED_NAME_FLAGS)
  private String flags;

  public static final String SERIALIZED_NAME_INCUMBENT_CHALLENGE = "incumbent_challenge";
  @SerializedName(SERIALIZED_NAME_INCUMBENT_CHALLENGE)
  private String incumbentChallenge;

  public static final String SERIALIZED_NAME_INCUMBENT_CHALLENGE_FULL = "incumbent_challenge_full";
  @SerializedName(SERIALIZED_NAME_INCUMBENT_CHALLENGE_FULL)
  private String incumbentChallengeFull;

  public static final String SERIALIZED_NAME_LAST_F2_DATE = "last_f2_date";
  @SerializedName(SERIALIZED_NAME_LAST_F2_DATE)
  private LocalDate lastF2Date;

  public static final String SERIALIZED_NAME_LAST_FILE_DATE = "last_file_date";
  @SerializedName(SERIALIZED_NAME_LAST_FILE_DATE)
  private LocalDate lastFileDate;

  public static final String SERIALIZED_NAME_LOAD_DATE = "load_date";
  @SerializedName(SERIALIZED_NAME_LOAD_DATE)
  private OffsetDateTime loadDate;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_OFFICE = "office";
  @SerializedName(SERIALIZED_NAME_OFFICE)
  private String office;

  public static final String SERIALIZED_NAME_OFFICE_FULL = "office_full";
  @SerializedName(SERIALIZED_NAME_OFFICE_FULL)
  private String officeFull;

  public static final String SERIALIZED_NAME_PARTY = "party";
  @SerializedName(SERIALIZED_NAME_PARTY)
  private String party;

  public static final String SERIALIZED_NAME_PARTY_FULL = "party_full";
  @SerializedName(SERIALIZED_NAME_PARTY_FULL)
  private String partyFull;

  public static final String SERIALIZED_NAME_ROUNDED_ELECTION_YEARS = "rounded_election_years";
  @SerializedName(SERIALIZED_NAME_ROUNDED_ELECTION_YEARS)
  private List<Integer> roundedElectionYears;

  public static final String SERIALIZED_NAME_STATE = "state";
  @SerializedName(SERIALIZED_NAME_STATE)
  private String state;

  public static final String SERIALIZED_NAME_TWO_YEAR_PERIOD = "two_year_period";
  @SerializedName(SERIALIZED_NAME_TWO_YEAR_PERIOD)
  private Integer twoYearPeriod;

  public CandidateHistory() {
  }

  public CandidateHistory activeThrough(Integer activeThrough) {
    this.activeThrough = activeThrough;
    return this;
  }

  /**
   * Last year a candidate was active. This field is specific to the candidate_id so if the same person runs for another office, there may be a different record for them.
   * @return activeThrough
   */
  @javax.annotation.Nullable
  public Integer getActiveThrough() {
    return activeThrough;
  }

  public void setActiveThrough(Integer activeThrough) {
    this.activeThrough = activeThrough;
  }


  public CandidateHistory addressCity(String addressCity) {
    this.addressCity = addressCity;
    return this;
  }

  /**
   * City of candidate&#39;s address, as reported on their Form 2.
   * @return addressCity
   */
  @javax.annotation.Nullable
  public String getAddressCity() {
    return addressCity;
  }

  public void setAddressCity(String addressCity) {
    this.addressCity = addressCity;
  }


  public CandidateHistory addressState(String addressState) {
    this.addressState = addressState;
    return this;
  }

  /**
   * State of candidate&#39;s address, as reported on their Form 2.
   * @return addressState
   */
  @javax.annotation.Nullable
  public String getAddressState() {
    return addressState;
  }

  public void setAddressState(String addressState) {
    this.addressState = addressState;
  }


  public CandidateHistory addressStreet1(String addressStreet1) {
    this.addressStreet1 = addressStreet1;
    return this;
  }

  /**
   * Street of candidate&#39;s address, as reported on their Form 2.
   * @return addressStreet1
   */
  @javax.annotation.Nullable
  public String getAddressStreet1() {
    return addressStreet1;
  }

  public void setAddressStreet1(String addressStreet1) {
    this.addressStreet1 = addressStreet1;
  }


  public CandidateHistory addressStreet2(String addressStreet2) {
    this.addressStreet2 = addressStreet2;
    return this;
  }

  /**
   * Additional street information of candidate&#39;s address, as reported on their Form 2.
   * @return addressStreet2
   */
  @javax.annotation.Nullable
  public String getAddressStreet2() {
    return addressStreet2;
  }

  public void setAddressStreet2(String addressStreet2) {
    this.addressStreet2 = addressStreet2;
  }


  public CandidateHistory addressZip(String addressZip) {
    this.addressZip = addressZip;
    return this;
  }

  /**
   * Zip code of candidate&#39;s address, as reported on their Form 2.
   * @return addressZip
   */
  @javax.annotation.Nullable
  public String getAddressZip() {
    return addressZip;
  }

  public void setAddressZip(String addressZip) {
    this.addressZip = addressZip;
  }


  public CandidateHistory candidateElectionYear(Integer candidateElectionYear) {
    this.candidateElectionYear = candidateElectionYear;
    return this;
  }

  /**
   * The last year of the cycle for this election.
   * @return candidateElectionYear
   */
  @javax.annotation.Nullable
  public Integer getCandidateElectionYear() {
    return candidateElectionYear;
  }

  public void setCandidateElectionYear(Integer candidateElectionYear) {
    this.candidateElectionYear = candidateElectionYear;
  }


  public CandidateHistory candidateId(String candidateId) {
    this.candidateId = candidateId;
    return this;
  }

  /**
   *  A unique identifier assigned to each candidate registered with the FEC. If a person runs for several offices, that person will have separate candidate IDs for each office. First character indicates office - [P]residential, [H]ouse, [S]enate]. Second character is the last digit of the two-year period the ID was created. Third and fourth is the candidate state. Presidential IDs don&#39;t have state. Fifth and sixth is the district when the candidate first ran. This does not change if the candidate/member&#39;s district changes during re-districting. Presidential IDs don&#39;t have districts. The rest is sequence. 
   * @return candidateId
   */
  @javax.annotation.Nonnull
  public String getCandidateId() {
    return candidateId;
  }

  public void setCandidateId(String candidateId) {
    this.candidateId = candidateId;
  }


  public CandidateHistory candidateInactive(Boolean candidateInactive) {
    this.candidateInactive = candidateInactive;
    return this;
  }

  /**
   *  True indicates that a candidate is inactive. 
   * @return candidateInactive
   */
  @javax.annotation.Nullable
  public Boolean getCandidateInactive() {
    return candidateInactive;
  }

  public void setCandidateInactive(Boolean candidateInactive) {
    this.candidateInactive = candidateInactive;
  }


  public CandidateHistory candidateStatus(String candidateStatus) {
    this.candidateStatus = candidateStatus;
    return this;
  }

  /**
   * One-letter code explaining if the candidate is:         - C present candidate         - F future candidate         - N not yet a candidate         - P prior candidate 
   * @return candidateStatus
   */
  @javax.annotation.Nullable
  public String getCandidateStatus() {
    return candidateStatus;
  }

  public void setCandidateStatus(String candidateStatus) {
    this.candidateStatus = candidateStatus;
  }


  public CandidateHistory cycles(List<Integer> cycles) {
    this.cycles = cycles;
    return this;
  }

  public CandidateHistory addCyclesItem(Integer cyclesItem) {
    if (this.cycles == null) {
      this.cycles = new ArrayList<>();
    }
    this.cycles.add(cyclesItem);
    return this;
  }

  /**
   *  Two-year election cycle in which a candidate runs for office. Calculated from Form 2. The cycle begins with an odd year and is named for its ending, even year. This cycle follows the traditional house election cycle and subdivides the presidential and Senate elections into comparable two-year blocks. To retrieve data for the entire four years of a presidential term or six years of a senatorial term, you will need the &#x60;election_full&#x60; flag. 
   * @return cycles
   */
  @javax.annotation.Nullable
  public List<Integer> getCycles() {
    return cycles;
  }

  public void setCycles(List<Integer> cycles) {
    this.cycles = cycles;
  }


  public CandidateHistory district(String district) {
    this.district = district;
    return this;
  }

  /**
   * Two-digit US House distirict of the office the candidate is running for. Presidential, Senate and House at-large candidates will have District 00.
   * @return district
   */
  @javax.annotation.Nullable
  public String getDistrict() {
    return district;
  }

  public void setDistrict(String district) {
    this.district = district;
  }


  public CandidateHistory districtNumber(Integer districtNumber) {
    this.districtNumber = districtNumber;
    return this;
  }

  /**
   * One-letter code explaining if the candidate is:         - C present candidate         - F future candidate         - N not yet a candidate         - P prior candidate 
   * @return districtNumber
   */
  @javax.annotation.Nullable
  public Integer getDistrictNumber() {
    return districtNumber;
  }

  public void setDistrictNumber(Integer districtNumber) {
    this.districtNumber = districtNumber;
  }


  public CandidateHistory electionDistricts(List<String> electionDistricts) {
    this.electionDistricts = electionDistricts;
    return this;
  }

  public CandidateHistory addElectionDistrictsItem(String electionDistrictsItem) {
    if (this.electionDistricts == null) {
      this.electionDistricts = new ArrayList<>();
    }
    this.electionDistricts.add(electionDistrictsItem);
    return this;
  }

  /**
   * Two-digit US House distirict of the office the candidate is running for. Presidential, Senate and House at-large candidates will have District 00.
   * @return electionDistricts
   */
  @javax.annotation.Nullable
  public List<String> getElectionDistricts() {
    return electionDistricts;
  }

  public void setElectionDistricts(List<String> electionDistricts) {
    this.electionDistricts = electionDistricts;
  }


  public CandidateHistory electionYears(List<Integer> electionYears) {
    this.electionYears = electionYears;
    return this;
  }

  public CandidateHistory addElectionYearsItem(Integer electionYearsItem) {
    if (this.electionYears == null) {
      this.electionYears = new ArrayList<>();
    }
    this.electionYears.add(electionYearsItem);
    return this;
  }

  /**
   * Years in which a candidate ran for office.
   * @return electionYears
   */
  @javax.annotation.Nullable
  public List<Integer> getElectionYears() {
    return electionYears;
  }

  public void setElectionYears(List<Integer> electionYears) {
    this.electionYears = electionYears;
  }


  public CandidateHistory fecCyclesInElection(List<Integer> fecCyclesInElection) {
    this.fecCyclesInElection = fecCyclesInElection;
    return this;
  }

  public CandidateHistory addFecCyclesInElectionItem(Integer fecCyclesInElectionItem) {
    if (this.fecCyclesInElection == null) {
      this.fecCyclesInElection = new ArrayList<>();
    }
    this.fecCyclesInElection.add(fecCyclesInElectionItem);
    return this;
  }

  /**
   * FEC cycles are included in candidate election years.
   * @return fecCyclesInElection
   */
  @javax.annotation.Nullable
  public List<Integer> getFecCyclesInElection() {
    return fecCyclesInElection;
  }

  public void setFecCyclesInElection(List<Integer> fecCyclesInElection) {
    this.fecCyclesInElection = fecCyclesInElection;
  }


  public CandidateHistory firstFileDate(LocalDate firstFileDate) {
    this.firstFileDate = firstFileDate;
    return this;
  }

  /**
   * The day the FEC received the candidate&#39;s first filing. This is a F2 candidate registration.
   * @return firstFileDate
   */
  @javax.annotation.Nullable
  public LocalDate getFirstFileDate() {
    return firstFileDate;
  }

  public void setFirstFileDate(LocalDate firstFileDate) {
    this.firstFileDate = firstFileDate;
  }


  public CandidateHistory flags(String flags) {
    this.flags = flags;
    return this;
  }

  /**
   * Get flags
   * @return flags
   */
  @javax.annotation.Nullable
  public String getFlags() {
    return flags;
  }

  public void setFlags(String flags) {
    this.flags = flags;
  }


  public CandidateHistory incumbentChallenge(String incumbentChallenge) {
    this.incumbentChallenge = incumbentChallenge;
    return this;
  }

  /**
   * One-letter code (&#39;I&#39;, &#39;C&#39;, &#39;O&#39;) explaining if the candidate is an incumbent, a challenger, or if the seat is open.
   * @return incumbentChallenge
   */
  @javax.annotation.Nullable
  public String getIncumbentChallenge() {
    return incumbentChallenge;
  }

  public void setIncumbentChallenge(String incumbentChallenge) {
    this.incumbentChallenge = incumbentChallenge;
  }


  public CandidateHistory incumbentChallengeFull(String incumbentChallengeFull) {
    this.incumbentChallengeFull = incumbentChallengeFull;
    return this;
  }

  /**
   * Explains if the candidate is an incumbent, a challenger, or if the seat is open.
   * @return incumbentChallengeFull
   */
  @javax.annotation.Nullable
  public String getIncumbentChallengeFull() {
    return incumbentChallengeFull;
  }

  public void setIncumbentChallengeFull(String incumbentChallengeFull) {
    this.incumbentChallengeFull = incumbentChallengeFull;
  }


  public CandidateHistory lastF2Date(LocalDate lastF2Date) {
    this.lastF2Date = lastF2Date;
    return this;
  }

  /**
   * The day the FEC received the candidate&#39;s most recent Form 2
   * @return lastF2Date
   */
  @javax.annotation.Nullable
  public LocalDate getLastF2Date() {
    return lastF2Date;
  }

  public void setLastF2Date(LocalDate lastF2Date) {
    this.lastF2Date = lastF2Date;
  }


  public CandidateHistory lastFileDate(LocalDate lastFileDate) {
    this.lastFileDate = lastFileDate;
    return this;
  }

  /**
   * The day the FEC received the candidate&#39;s most recent filing
   * @return lastFileDate
   */
  @javax.annotation.Nullable
  public LocalDate getLastFileDate() {
    return lastFileDate;
  }

  public void setLastFileDate(LocalDate lastFileDate) {
    this.lastFileDate = lastFileDate;
  }


  public CandidateHistory loadDate(OffsetDateTime loadDate) {
    this.loadDate = loadDate;
    return this;
  }

  /**
   * Date the information was loaded into the FEC systems. This can be affected by reseting systems and other factors, refer to receipt_date for the day that the FEC received the paper or electronic document. Keep in mind that paper filings take more time to process and there can be a lag between load_date and receipt_date. This field can be helpful to identify paper records that have been processed recently.
   * @return loadDate
   */
  @javax.annotation.Nullable
  public OffsetDateTime getLoadDate() {
    return loadDate;
  }

  public void setLoadDate(OffsetDateTime loadDate) {
    this.loadDate = loadDate;
  }


  public CandidateHistory name(String name) {
    this.name = name;
    return this;
  }

  /**
   * Name of candidate running for office
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public CandidateHistory office(String office) {
    this.office = office;
    return this;
  }

  /**
   * Federal office candidate runs for: H, S or P
   * @return office
   */
  @javax.annotation.Nullable
  public String getOffice() {
    return office;
  }

  public void setOffice(String office) {
    this.office = office;
  }


  public CandidateHistory officeFull(String officeFull) {
    this.officeFull = officeFull;
    return this;
  }

  /**
   * Federal office candidate runs for: House, Senate or presidential
   * @return officeFull
   */
  @javax.annotation.Nullable
  public String getOfficeFull() {
    return officeFull;
  }

  public void setOfficeFull(String officeFull) {
    this.officeFull = officeFull;
  }


  public CandidateHistory party(String party) {
    this.party = party;
    return this;
  }

  /**
   * Three-letter code for the party affiliated with a candidate or committee. For example, DEM for Democratic Party and REP for Republican Party.
   * @return party
   */
  @javax.annotation.Nullable
  public String getParty() {
    return party;
  }

  public void setParty(String party) {
    this.party = party;
  }


  public CandidateHistory partyFull(String partyFull) {
    this.partyFull = partyFull;
    return this;
  }

  /**
   * Party affiliated with a candidate or committee
   * @return partyFull
   */
  @javax.annotation.Nullable
  public String getPartyFull() {
    return partyFull;
  }

  public void setPartyFull(String partyFull) {
    this.partyFull = partyFull;
  }


  public CandidateHistory roundedElectionYears(List<Integer> roundedElectionYears) {
    this.roundedElectionYears = roundedElectionYears;
    return this;
  }

  public CandidateHistory addRoundedElectionYearsItem(Integer roundedElectionYearsItem) {
    if (this.roundedElectionYears == null) {
      this.roundedElectionYears = new ArrayList<>();
    }
    this.roundedElectionYears.add(roundedElectionYearsItem);
    return this;
  }

  /**
   * Rounded election years in which a candidate ran for office
   * @return roundedElectionYears
   */
  @javax.annotation.Nullable
  public List<Integer> getRoundedElectionYears() {
    return roundedElectionYears;
  }

  public void setRoundedElectionYears(List<Integer> roundedElectionYears) {
    this.roundedElectionYears = roundedElectionYears;
  }


  public CandidateHistory state(String state) {
    this.state = state;
    return this;
  }

  /**
   * US state or territory where a candidate runs for office
   * @return state
   */
  @javax.annotation.Nullable
  public String getState() {
    return state;
  }

  public void setState(String state) {
    this.state = state;
  }


  public CandidateHistory twoYearPeriod(Integer twoYearPeriod) {
    this.twoYearPeriod = twoYearPeriod;
    return this;
  }

  /**
   *  Two-year election cycle in which a candidate runs for office. Calculated from Form 2. The cycle begins with an odd year and is named for its ending, even year. This cycle follows the traditional house election cycle and subdivides the presidential and Senate elections into comparable two-year blocks. To retrieve data for the entire four years of a presidential term or six years of a senatorial term, you will need the &#x60;election_full&#x60; flag. 
   * @return twoYearPeriod
   */
  @javax.annotation.Nonnull
  public Integer getTwoYearPeriod() {
    return twoYearPeriod;
  }

  public void setTwoYearPeriod(Integer twoYearPeriod) {
    this.twoYearPeriod = twoYearPeriod;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CandidateHistory candidateHistory = (CandidateHistory) o;
    return Objects.equals(this.activeThrough, candidateHistory.activeThrough) &&
        Objects.equals(this.addressCity, candidateHistory.addressCity) &&
        Objects.equals(this.addressState, candidateHistory.addressState) &&
        Objects.equals(this.addressStreet1, candidateHistory.addressStreet1) &&
        Objects.equals(this.addressStreet2, candidateHistory.addressStreet2) &&
        Objects.equals(this.addressZip, candidateHistory.addressZip) &&
        Objects.equals(this.candidateElectionYear, candidateHistory.candidateElectionYear) &&
        Objects.equals(this.candidateId, candidateHistory.candidateId) &&
        Objects.equals(this.candidateInactive, candidateHistory.candidateInactive) &&
        Objects.equals(this.candidateStatus, candidateHistory.candidateStatus) &&
        Objects.equals(this.cycles, candidateHistory.cycles) &&
        Objects.equals(this.district, candidateHistory.district) &&
        Objects.equals(this.districtNumber, candidateHistory.districtNumber) &&
        Objects.equals(this.electionDistricts, candidateHistory.electionDistricts) &&
        Objects.equals(this.electionYears, candidateHistory.electionYears) &&
        Objects.equals(this.fecCyclesInElection, candidateHistory.fecCyclesInElection) &&
        Objects.equals(this.firstFileDate, candidateHistory.firstFileDate) &&
        Objects.equals(this.flags, candidateHistory.flags) &&
        Objects.equals(this.incumbentChallenge, candidateHistory.incumbentChallenge) &&
        Objects.equals(this.incumbentChallengeFull, candidateHistory.incumbentChallengeFull) &&
        Objects.equals(this.lastF2Date, candidateHistory.lastF2Date) &&
        Objects.equals(this.lastFileDate, candidateHistory.lastFileDate) &&
        Objects.equals(this.loadDate, candidateHistory.loadDate) &&
        Objects.equals(this.name, candidateHistory.name) &&
        Objects.equals(this.office, candidateHistory.office) &&
        Objects.equals(this.officeFull, candidateHistory.officeFull) &&
        Objects.equals(this.party, candidateHistory.party) &&
        Objects.equals(this.partyFull, candidateHistory.partyFull) &&
        Objects.equals(this.roundedElectionYears, candidateHistory.roundedElectionYears) &&
        Objects.equals(this.state, candidateHistory.state) &&
        Objects.equals(this.twoYearPeriod, candidateHistory.twoYearPeriod);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(activeThrough, addressCity, addressState, addressStreet1, addressStreet2, addressZip, candidateElectionYear, candidateId, candidateInactive, candidateStatus, cycles, district, districtNumber, electionDistricts, electionYears, fecCyclesInElection, firstFileDate, flags, incumbentChallenge, incumbentChallengeFull, lastF2Date, lastFileDate, loadDate, name, office, officeFull, party, partyFull, roundedElectionYears, state, twoYearPeriod);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CandidateHistory {\n");
    sb.append("    activeThrough: ").append(toIndentedString(activeThrough)).append("\n");
    sb.append("    addressCity: ").append(toIndentedString(addressCity)).append("\n");
    sb.append("    addressState: ").append(toIndentedString(addressState)).append("\n");
    sb.append("    addressStreet1: ").append(toIndentedString(addressStreet1)).append("\n");
    sb.append("    addressStreet2: ").append(toIndentedString(addressStreet2)).append("\n");
    sb.append("    addressZip: ").append(toIndentedString(addressZip)).append("\n");
    sb.append("    candidateElectionYear: ").append(toIndentedString(candidateElectionYear)).append("\n");
    sb.append("    candidateId: ").append(toIndentedString(candidateId)).append("\n");
    sb.append("    candidateInactive: ").append(toIndentedString(candidateInactive)).append("\n");
    sb.append("    candidateStatus: ").append(toIndentedString(candidateStatus)).append("\n");
    sb.append("    cycles: ").append(toIndentedString(cycles)).append("\n");
    sb.append("    district: ").append(toIndentedString(district)).append("\n");
    sb.append("    districtNumber: ").append(toIndentedString(districtNumber)).append("\n");
    sb.append("    electionDistricts: ").append(toIndentedString(electionDistricts)).append("\n");
    sb.append("    electionYears: ").append(toIndentedString(electionYears)).append("\n");
    sb.append("    fecCyclesInElection: ").append(toIndentedString(fecCyclesInElection)).append("\n");
    sb.append("    firstFileDate: ").append(toIndentedString(firstFileDate)).append("\n");
    sb.append("    flags: ").append(toIndentedString(flags)).append("\n");
    sb.append("    incumbentChallenge: ").append(toIndentedString(incumbentChallenge)).append("\n");
    sb.append("    incumbentChallengeFull: ").append(toIndentedString(incumbentChallengeFull)).append("\n");
    sb.append("    lastF2Date: ").append(toIndentedString(lastF2Date)).append("\n");
    sb.append("    lastFileDate: ").append(toIndentedString(lastFileDate)).append("\n");
    sb.append("    loadDate: ").append(toIndentedString(loadDate)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    office: ").append(toIndentedString(office)).append("\n");
    sb.append("    officeFull: ").append(toIndentedString(officeFull)).append("\n");
    sb.append("    party: ").append(toIndentedString(party)).append("\n");
    sb.append("    partyFull: ").append(toIndentedString(partyFull)).append("\n");
    sb.append("    roundedElectionYears: ").append(toIndentedString(roundedElectionYears)).append("\n");
    sb.append("    state: ").append(toIndentedString(state)).append("\n");
    sb.append("    twoYearPeriod: ").append(toIndentedString(twoYearPeriod)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("active_through");
    openapiFields.add("address_city");
    openapiFields.add("address_state");
    openapiFields.add("address_street_1");
    openapiFields.add("address_street_2");
    openapiFields.add("address_zip");
    openapiFields.add("candidate_election_year");
    openapiFields.add("candidate_id");
    openapiFields.add("candidate_inactive");
    openapiFields.add("candidate_status");
    openapiFields.add("cycles");
    openapiFields.add("district");
    openapiFields.add("district_number");
    openapiFields.add("election_districts");
    openapiFields.add("election_years");
    openapiFields.add("fec_cycles_in_election");
    openapiFields.add("first_file_date");
    openapiFields.add("flags");
    openapiFields.add("incumbent_challenge");
    openapiFields.add("incumbent_challenge_full");
    openapiFields.add("last_f2_date");
    openapiFields.add("last_file_date");
    openapiFields.add("load_date");
    openapiFields.add("name");
    openapiFields.add("office");
    openapiFields.add("office_full");
    openapiFields.add("party");
    openapiFields.add("party_full");
    openapiFields.add("rounded_election_years");
    openapiFields.add("state");
    openapiFields.add("two_year_period");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("candidate_id");
    openapiRequiredFields.add("two_year_period");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to CandidateHistory
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!CandidateHistory.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CandidateHistory is not found in the empty JSON string", CandidateHistory.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!CandidateHistory.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CandidateHistory` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : CandidateHistory.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("address_city") != null && !jsonObj.get("address_city").isJsonNull()) && !jsonObj.get("address_city").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `address_city` to be a primitive type in the JSON string but got `%s`", jsonObj.get("address_city").toString()));
      }
      if ((jsonObj.get("address_state") != null && !jsonObj.get("address_state").isJsonNull()) && !jsonObj.get("address_state").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `address_state` to be a primitive type in the JSON string but got `%s`", jsonObj.get("address_state").toString()));
      }
      if ((jsonObj.get("address_street_1") != null && !jsonObj.get("address_street_1").isJsonNull()) && !jsonObj.get("address_street_1").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `address_street_1` to be a primitive type in the JSON string but got `%s`", jsonObj.get("address_street_1").toString()));
      }
      if ((jsonObj.get("address_street_2") != null && !jsonObj.get("address_street_2").isJsonNull()) && !jsonObj.get("address_street_2").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `address_street_2` to be a primitive type in the JSON string but got `%s`", jsonObj.get("address_street_2").toString()));
      }
      if ((jsonObj.get("address_zip") != null && !jsonObj.get("address_zip").isJsonNull()) && !jsonObj.get("address_zip").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `address_zip` to be a primitive type in the JSON string but got `%s`", jsonObj.get("address_zip").toString()));
      }
      if (!jsonObj.get("candidate_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `candidate_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("candidate_id").toString()));
      }
      if ((jsonObj.get("candidate_status") != null && !jsonObj.get("candidate_status").isJsonNull()) && !jsonObj.get("candidate_status").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `candidate_status` to be a primitive type in the JSON string but got `%s`", jsonObj.get("candidate_status").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("cycles") != null && !jsonObj.get("cycles").isJsonNull() && !jsonObj.get("cycles").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `cycles` to be an array in the JSON string but got `%s`", jsonObj.get("cycles").toString()));
      }
      if ((jsonObj.get("district") != null && !jsonObj.get("district").isJsonNull()) && !jsonObj.get("district").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `district` to be a primitive type in the JSON string but got `%s`", jsonObj.get("district").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("election_districts") != null && !jsonObj.get("election_districts").isJsonNull() && !jsonObj.get("election_districts").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `election_districts` to be an array in the JSON string but got `%s`", jsonObj.get("election_districts").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("election_years") != null && !jsonObj.get("election_years").isJsonNull() && !jsonObj.get("election_years").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `election_years` to be an array in the JSON string but got `%s`", jsonObj.get("election_years").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("fec_cycles_in_election") != null && !jsonObj.get("fec_cycles_in_election").isJsonNull() && !jsonObj.get("fec_cycles_in_election").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `fec_cycles_in_election` to be an array in the JSON string but got `%s`", jsonObj.get("fec_cycles_in_election").toString()));
      }
      if ((jsonObj.get("flags") != null && !jsonObj.get("flags").isJsonNull()) && !jsonObj.get("flags").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `flags` to be a primitive type in the JSON string but got `%s`", jsonObj.get("flags").toString()));
      }
      if ((jsonObj.get("incumbent_challenge") != null && !jsonObj.get("incumbent_challenge").isJsonNull()) && !jsonObj.get("incumbent_challenge").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `incumbent_challenge` to be a primitive type in the JSON string but got `%s`", jsonObj.get("incumbent_challenge").toString()));
      }
      if ((jsonObj.get("incumbent_challenge_full") != null && !jsonObj.get("incumbent_challenge_full").isJsonNull()) && !jsonObj.get("incumbent_challenge_full").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `incumbent_challenge_full` to be a primitive type in the JSON string but got `%s`", jsonObj.get("incumbent_challenge_full").toString()));
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if ((jsonObj.get("office") != null && !jsonObj.get("office").isJsonNull()) && !jsonObj.get("office").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `office` to be a primitive type in the JSON string but got `%s`", jsonObj.get("office").toString()));
      }
      if ((jsonObj.get("office_full") != null && !jsonObj.get("office_full").isJsonNull()) && !jsonObj.get("office_full").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `office_full` to be a primitive type in the JSON string but got `%s`", jsonObj.get("office_full").toString()));
      }
      if ((jsonObj.get("party") != null && !jsonObj.get("party").isJsonNull()) && !jsonObj.get("party").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `party` to be a primitive type in the JSON string but got `%s`", jsonObj.get("party").toString()));
      }
      if ((jsonObj.get("party_full") != null && !jsonObj.get("party_full").isJsonNull()) && !jsonObj.get("party_full").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `party_full` to be a primitive type in the JSON string but got `%s`", jsonObj.get("party_full").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("rounded_election_years") != null && !jsonObj.get("rounded_election_years").isJsonNull() && !jsonObj.get("rounded_election_years").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `rounded_election_years` to be an array in the JSON string but got `%s`", jsonObj.get("rounded_election_years").toString()));
      }
      if ((jsonObj.get("state") != null && !jsonObj.get("state").isJsonNull()) && !jsonObj.get("state").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `state` to be a primitive type in the JSON string but got `%s`", jsonObj.get("state").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CandidateHistory.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CandidateHistory' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CandidateHistory> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CandidateHistory.class));

       return (TypeAdapter<T>) new TypeAdapter<CandidateHistory>() {
           @Override
           public void write(JsonWriter out, CandidateHistory value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CandidateHistory read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of CandidateHistory given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of CandidateHistory
   * @throws IOException if the JSON string is invalid with respect to CandidateHistory
   */
  public static CandidateHistory fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CandidateHistory.class);
  }

  /**
   * Convert an instance of CandidateHistory to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

