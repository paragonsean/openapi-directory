/*
 * OpenFEC
 * This application programming interface (API) allows you to explore the way candidates and committees fund their campaigns.    The Federal Election Commission (FEC) API is a RESTful web service supporting full-text and field-specific searches on FEC data. [Bulk downloads](https://www.fec.gov/data/advanced/?tab=bulk-data) are available on the current site. Information is tied to the underlying forms by file ID and image ID. Data is updated nightly.    There are a lot of data, and a good place to start is to use search to find interesting candidates and committees. Then, you can use their IDs to find report or line item details with the other endpoints. If you are interested in individual donors, check out contributor information in the `/schedule_a/` endpoints.    <b class=\"body\" id=\"getting_started_head\">Getting started with the openFEC API</b><br>    If you would like to use the FEC's API programmatically, you can sign up for your own API key using our form. Alternatively, you can still try out our API without an API key by using the web interface and using DEMO_KEY. Note that when you use the openFEC API you are subject to the [Terms of Service](https://github.com/fecgov/FEC/blob/master/TERMS-OF-SERVICE.md) and [Acceptable Use policy](https://github.com/fecgov/FEC/blob/master/ACCEPTABLE-USE-POLICY.md).    Signing up for an API key will enable you to place up to 1,000 calls an hour. Each call is limited to 100 results per page. You can email questions, comments or a request to get a key for 7,200 calls an hour (120 calls per minute) to <a href=\"mailto:APIinfo@fec.gov\">APIinfo@fec.gov</a>. You can also ask questions and discuss the data in a community led [group](https://groups.google.com/forum/#!forum/fec-data).    The model definitions and schema are available at [/swagger](/swagger/). This is useful for making wrappers and exploring the data.    A few restrictions limit the way you can use FEC data. For example, you canâ€™t use contributor lists for commercial purposes or to solicit donations. [Learn more here](https://www.fec.gov/updates/sale-or-use-contributor-information/).    [Inspect our source code](https://github.com/fecgov/openFEC). We welcome issues and pull requests!    <p><br></p> <h2 class=\"title\" id=\"signup_head\">Sign up for an API key</h2> <div id=\"apidatagov_signup\">Loading signup form...</div>
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.LocalDate;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.LegalSearchGetDefaultResponseAdminFinesInnerCommissionVotesInner;
import org.openapitools.client.model.LegalSearchGetDefaultResponseAdminFinesInnerDocumentsInner;
import org.openapitools.client.model.LegalSearchGetDefaultResponseAdrsInnerDispositionsInner;
import org.openapitools.client.model.LegalSearchGetDefaultResponseAdrsInnerParticipantsInner;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * LegalSearchGetDefaultResponseMursInner
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:02:12.812386-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class LegalSearchGetDefaultResponseMursInner {
  public static final String SERIALIZED_NAME_CLOSE_DATE = "close_date";
  @SerializedName(SERIALIZED_NAME_CLOSE_DATE)
  private LocalDate closeDate;

  public static final String SERIALIZED_NAME_COMMISSION_VOTES = "commission_votes";
  @SerializedName(SERIALIZED_NAME_COMMISSION_VOTES)
  private List<LegalSearchGetDefaultResponseAdminFinesInnerCommissionVotesInner> commissionVotes = new ArrayList<>();

  public static final String SERIALIZED_NAME_DISPOSITIONS = "dispositions";
  @SerializedName(SERIALIZED_NAME_DISPOSITIONS)
  private List<LegalSearchGetDefaultResponseAdrsInnerDispositionsInner> dispositions = new ArrayList<>();

  public static final String SERIALIZED_NAME_DOC_ID = "doc_id";
  @SerializedName(SERIALIZED_NAME_DOC_ID)
  private String docId;

  public static final String SERIALIZED_NAME_DOCUMENT_HIGHLIGHTS = "document_highlights";
  @SerializedName(SERIALIZED_NAME_DOCUMENT_HIGHLIGHTS)
  private Object documentHighlights;

  public static final String SERIALIZED_NAME_DOCUMENTS = "documents";
  @SerializedName(SERIALIZED_NAME_DOCUMENTS)
  private List<LegalSearchGetDefaultResponseAdminFinesInnerDocumentsInner> documents = new ArrayList<>();

  public static final String SERIALIZED_NAME_ELECTION_CYCLES = "election_cycles";
  @SerializedName(SERIALIZED_NAME_ELECTION_CYCLES)
  private Integer electionCycles;

  public static final String SERIALIZED_NAME_HIGHLIGHTS = "highlights";
  @SerializedName(SERIALIZED_NAME_HIGHLIGHTS)
  private List<String> highlights = new ArrayList<>();

  /**
   * Gets or Sets murType
   */
  @JsonAdapter(MurTypeEnum.Adapter.class)
  public enum MurTypeEnum {
    CURRENT("current"),
    
    ARCHIVED("archived");

    private String value;

    MurTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static MurTypeEnum fromValue(String value) {
      for (MurTypeEnum b : MurTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<MurTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final MurTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public MurTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return MurTypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      MurTypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_MUR_TYPE = "mur_type";
  @SerializedName(SERIALIZED_NAME_MUR_TYPE)
  private MurTypeEnum murType;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_FALSE = "false";
  @SerializedName(SERIALIZED_NAME_FALSE)
  private String false;

  public static final String SERIALIZED_NAME_OPEN_DATE = "open_date";
  @SerializedName(SERIALIZED_NAME_OPEN_DATE)
  private LocalDate openDate;

  public static final String SERIALIZED_NAME_PARTICIPANTS = "participants";
  @SerializedName(SERIALIZED_NAME_PARTICIPANTS)
  private List<LegalSearchGetDefaultResponseAdrsInnerParticipantsInner> participants = new ArrayList<>();

  public static final String SERIALIZED_NAME_RESPONDENTS = "respondents";
  @SerializedName(SERIALIZED_NAME_RESPONDENTS)
  private List<String> respondents = new ArrayList<>();

  public static final String SERIALIZED_NAME_SUBJECTS = "subjects";
  @SerializedName(SERIALIZED_NAME_SUBJECTS)
  private List<String> subjects = new ArrayList<>();

  public static final String SERIALIZED_NAME_URL = "url";
  @SerializedName(SERIALIZED_NAME_URL)
  private String url;

  public LegalSearchGetDefaultResponseMursInner() {
  }

  public LegalSearchGetDefaultResponseMursInner closeDate(LocalDate closeDate) {
    this.closeDate = closeDate;
    return this;
  }

  /**
   * Get closeDate
   * @return closeDate
   */
  @javax.annotation.Nullable
  public LocalDate getCloseDate() {
    return closeDate;
  }

  public void setCloseDate(LocalDate closeDate) {
    this.closeDate = closeDate;
  }


  public LegalSearchGetDefaultResponseMursInner commissionVotes(List<LegalSearchGetDefaultResponseAdminFinesInnerCommissionVotesInner> commissionVotes) {
    this.commissionVotes = commissionVotes;
    return this;
  }

  public LegalSearchGetDefaultResponseMursInner addCommissionVotesItem(LegalSearchGetDefaultResponseAdminFinesInnerCommissionVotesInner commissionVotesItem) {
    if (this.commissionVotes == null) {
      this.commissionVotes = new ArrayList<>();
    }
    this.commissionVotes.add(commissionVotesItem);
    return this;
  }

  /**
   * Get commissionVotes
   * @return commissionVotes
   */
  @javax.annotation.Nullable
  public List<LegalSearchGetDefaultResponseAdminFinesInnerCommissionVotesInner> getCommissionVotes() {
    return commissionVotes;
  }

  public void setCommissionVotes(List<LegalSearchGetDefaultResponseAdminFinesInnerCommissionVotesInner> commissionVotes) {
    this.commissionVotes = commissionVotes;
  }


  public LegalSearchGetDefaultResponseMursInner dispositions(List<LegalSearchGetDefaultResponseAdrsInnerDispositionsInner> dispositions) {
    this.dispositions = dispositions;
    return this;
  }

  public LegalSearchGetDefaultResponseMursInner addDispositionsItem(LegalSearchGetDefaultResponseAdrsInnerDispositionsInner dispositionsItem) {
    if (this.dispositions == null) {
      this.dispositions = new ArrayList<>();
    }
    this.dispositions.add(dispositionsItem);
    return this;
  }

  /**
   * Get dispositions
   * @return dispositions
   */
  @javax.annotation.Nullable
  public List<LegalSearchGetDefaultResponseAdrsInnerDispositionsInner> getDispositions() {
    return dispositions;
  }

  public void setDispositions(List<LegalSearchGetDefaultResponseAdrsInnerDispositionsInner> dispositions) {
    this.dispositions = dispositions;
  }


  public LegalSearchGetDefaultResponseMursInner docId(String docId) {
    this.docId = docId;
    return this;
  }

  /**
   * Get docId
   * @return docId
   */
  @javax.annotation.Nullable
  public String getDocId() {
    return docId;
  }

  public void setDocId(String docId) {
    this.docId = docId;
  }


  public LegalSearchGetDefaultResponseMursInner documentHighlights(Object documentHighlights) {
    this.documentHighlights = documentHighlights;
    return this;
  }

  /**
   * Get documentHighlights
   * @return documentHighlights
   */
  @javax.annotation.Nullable
  public Object getDocumentHighlights() {
    return documentHighlights;
  }

  public void setDocumentHighlights(Object documentHighlights) {
    this.documentHighlights = documentHighlights;
  }


  public LegalSearchGetDefaultResponseMursInner documents(List<LegalSearchGetDefaultResponseAdminFinesInnerDocumentsInner> documents) {
    this.documents = documents;
    return this;
  }

  public LegalSearchGetDefaultResponseMursInner addDocumentsItem(LegalSearchGetDefaultResponseAdminFinesInnerDocumentsInner documentsItem) {
    if (this.documents == null) {
      this.documents = new ArrayList<>();
    }
    this.documents.add(documentsItem);
    return this;
  }

  /**
   * Get documents
   * @return documents
   */
  @javax.annotation.Nullable
  public List<LegalSearchGetDefaultResponseAdminFinesInnerDocumentsInner> getDocuments() {
    return documents;
  }

  public void setDocuments(List<LegalSearchGetDefaultResponseAdminFinesInnerDocumentsInner> documents) {
    this.documents = documents;
  }


  public LegalSearchGetDefaultResponseMursInner electionCycles(Integer electionCycles) {
    this.electionCycles = electionCycles;
    return this;
  }

  /**
   * Get electionCycles
   * @return electionCycles
   */
  @javax.annotation.Nullable
  public Integer getElectionCycles() {
    return electionCycles;
  }

  public void setElectionCycles(Integer electionCycles) {
    this.electionCycles = electionCycles;
  }


  public LegalSearchGetDefaultResponseMursInner highlights(List<String> highlights) {
    this.highlights = highlights;
    return this;
  }

  public LegalSearchGetDefaultResponseMursInner addHighlightsItem(String highlightsItem) {
    if (this.highlights == null) {
      this.highlights = new ArrayList<>();
    }
    this.highlights.add(highlightsItem);
    return this;
  }

  /**
   * Get highlights
   * @return highlights
   */
  @javax.annotation.Nullable
  public List<String> getHighlights() {
    return highlights;
  }

  public void setHighlights(List<String> highlights) {
    this.highlights = highlights;
  }


  public LegalSearchGetDefaultResponseMursInner murType(MurTypeEnum murType) {
    this.murType = murType;
    return this;
  }

  /**
   * Get murType
   * @return murType
   */
  @javax.annotation.Nullable
  public MurTypeEnum getMurType() {
    return murType;
  }

  public void setMurType(MurTypeEnum murType) {
    this.murType = murType;
  }


  public LegalSearchGetDefaultResponseMursInner name(String name) {
    this.name = name;
    return this;
  }

  /**
   * Get name
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public LegalSearchGetDefaultResponseMursInner false(String false) {
    this.false = false;
    return this;
  }

  /**
   * Get false
   * @return false
   */
  @javax.annotation.Nullable
  public String getFalse() {
    return false;
  }

  public void setFalse(String false) {
    this.false = false;
  }


  public LegalSearchGetDefaultResponseMursInner openDate(LocalDate openDate) {
    this.openDate = openDate;
    return this;
  }

  /**
   * Get openDate
   * @return openDate
   */
  @javax.annotation.Nullable
  public LocalDate getOpenDate() {
    return openDate;
  }

  public void setOpenDate(LocalDate openDate) {
    this.openDate = openDate;
  }


  public LegalSearchGetDefaultResponseMursInner participants(List<LegalSearchGetDefaultResponseAdrsInnerParticipantsInner> participants) {
    this.participants = participants;
    return this;
  }

  public LegalSearchGetDefaultResponseMursInner addParticipantsItem(LegalSearchGetDefaultResponseAdrsInnerParticipantsInner participantsItem) {
    if (this.participants == null) {
      this.participants = new ArrayList<>();
    }
    this.participants.add(participantsItem);
    return this;
  }

  /**
   * Get participants
   * @return participants
   */
  @javax.annotation.Nullable
  public List<LegalSearchGetDefaultResponseAdrsInnerParticipantsInner> getParticipants() {
    return participants;
  }

  public void setParticipants(List<LegalSearchGetDefaultResponseAdrsInnerParticipantsInner> participants) {
    this.participants = participants;
  }


  public LegalSearchGetDefaultResponseMursInner respondents(List<String> respondents) {
    this.respondents = respondents;
    return this;
  }

  public LegalSearchGetDefaultResponseMursInner addRespondentsItem(String respondentsItem) {
    if (this.respondents == null) {
      this.respondents = new ArrayList<>();
    }
    this.respondents.add(respondentsItem);
    return this;
  }

  /**
   * Get respondents
   * @return respondents
   */
  @javax.annotation.Nullable
  public List<String> getRespondents() {
    return respondents;
  }

  public void setRespondents(List<String> respondents) {
    this.respondents = respondents;
  }


  public LegalSearchGetDefaultResponseMursInner subjects(List<String> subjects) {
    this.subjects = subjects;
    return this;
  }

  public LegalSearchGetDefaultResponseMursInner addSubjectsItem(String subjectsItem) {
    if (this.subjects == null) {
      this.subjects = new ArrayList<>();
    }
    this.subjects.add(subjectsItem);
    return this;
  }

  /**
   * Get subjects
   * @return subjects
   */
  @javax.annotation.Nullable
  public List<String> getSubjects() {
    return subjects;
  }

  public void setSubjects(List<String> subjects) {
    this.subjects = subjects;
  }


  public LegalSearchGetDefaultResponseMursInner url(String url) {
    this.url = url;
    return this;
  }

  /**
   * Get url
   * @return url
   */
  @javax.annotation.Nullable
  public String getUrl() {
    return url;
  }

  public void setUrl(String url) {
    this.url = url;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    LegalSearchGetDefaultResponseMursInner legalSearchGetDefaultResponseMursInner = (LegalSearchGetDefaultResponseMursInner) o;
    return Objects.equals(this.closeDate, legalSearchGetDefaultResponseMursInner.closeDate) &&
        Objects.equals(this.commissionVotes, legalSearchGetDefaultResponseMursInner.commissionVotes) &&
        Objects.equals(this.dispositions, legalSearchGetDefaultResponseMursInner.dispositions) &&
        Objects.equals(this.docId, legalSearchGetDefaultResponseMursInner.docId) &&
        Objects.equals(this.documentHighlights, legalSearchGetDefaultResponseMursInner.documentHighlights) &&
        Objects.equals(this.documents, legalSearchGetDefaultResponseMursInner.documents) &&
        Objects.equals(this.electionCycles, legalSearchGetDefaultResponseMursInner.electionCycles) &&
        Objects.equals(this.highlights, legalSearchGetDefaultResponseMursInner.highlights) &&
        Objects.equals(this.murType, legalSearchGetDefaultResponseMursInner.murType) &&
        Objects.equals(this.name, legalSearchGetDefaultResponseMursInner.name) &&
        Objects.equals(this.false, legalSearchGetDefaultResponseMursInner.false) &&
        Objects.equals(this.openDate, legalSearchGetDefaultResponseMursInner.openDate) &&
        Objects.equals(this.participants, legalSearchGetDefaultResponseMursInner.participants) &&
        Objects.equals(this.respondents, legalSearchGetDefaultResponseMursInner.respondents) &&
        Objects.equals(this.subjects, legalSearchGetDefaultResponseMursInner.subjects) &&
        Objects.equals(this.url, legalSearchGetDefaultResponseMursInner.url);
  }

  @Override
  public int hashCode() {
    return Objects.hash(closeDate, commissionVotes, dispositions, docId, documentHighlights, documents, electionCycles, highlights, murType, name, false, openDate, participants, respondents, subjects, url);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class LegalSearchGetDefaultResponseMursInner {\n");
    sb.append("    closeDate: ").append(toIndentedString(closeDate)).append("\n");
    sb.append("    commissionVotes: ").append(toIndentedString(commissionVotes)).append("\n");
    sb.append("    dispositions: ").append(toIndentedString(dispositions)).append("\n");
    sb.append("    docId: ").append(toIndentedString(docId)).append("\n");
    sb.append("    documentHighlights: ").append(toIndentedString(documentHighlights)).append("\n");
    sb.append("    documents: ").append(toIndentedString(documents)).append("\n");
    sb.append("    electionCycles: ").append(toIndentedString(electionCycles)).append("\n");
    sb.append("    highlights: ").append(toIndentedString(highlights)).append("\n");
    sb.append("    murType: ").append(toIndentedString(murType)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    false: ").append(toIndentedString(false)).append("\n");
    sb.append("    openDate: ").append(toIndentedString(openDate)).append("\n");
    sb.append("    participants: ").append(toIndentedString(participants)).append("\n");
    sb.append("    respondents: ").append(toIndentedString(respondents)).append("\n");
    sb.append("    subjects: ").append(toIndentedString(subjects)).append("\n");
    sb.append("    url: ").append(toIndentedString(url)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("close_date");
    openapiFields.add("commission_votes");
    openapiFields.add("dispositions");
    openapiFields.add("doc_id");
    openapiFields.add("document_highlights");
    openapiFields.add("documents");
    openapiFields.add("election_cycles");
    openapiFields.add("highlights");
    openapiFields.add("mur_type");
    openapiFields.add("name");
    openapiFields.add("false");
    openapiFields.add("open_date");
    openapiFields.add("participants");
    openapiFields.add("respondents");
    openapiFields.add("subjects");
    openapiFields.add("url");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to LegalSearchGetDefaultResponseMursInner
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!LegalSearchGetDefaultResponseMursInner.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in LegalSearchGetDefaultResponseMursInner is not found in the empty JSON string", LegalSearchGetDefaultResponseMursInner.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!LegalSearchGetDefaultResponseMursInner.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `LegalSearchGetDefaultResponseMursInner` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (jsonObj.get("commission_votes") != null && !jsonObj.get("commission_votes").isJsonNull()) {
        JsonArray jsonArraycommissionVotes = jsonObj.getAsJsonArray("commission_votes");
        if (jsonArraycommissionVotes != null) {
          // ensure the json data is an array
          if (!jsonObj.get("commission_votes").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `commission_votes` to be an array in the JSON string but got `%s`", jsonObj.get("commission_votes").toString()));
          }

          // validate the optional field `commission_votes` (array)
          for (int i = 0; i < jsonArraycommissionVotes.size(); i++) {
            LegalSearchGetDefaultResponseAdminFinesInnerCommissionVotesInner.validateJsonElement(jsonArraycommissionVotes.get(i));
          };
        }
      }
      if (jsonObj.get("dispositions") != null && !jsonObj.get("dispositions").isJsonNull()) {
        JsonArray jsonArraydispositions = jsonObj.getAsJsonArray("dispositions");
        if (jsonArraydispositions != null) {
          // ensure the json data is an array
          if (!jsonObj.get("dispositions").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `dispositions` to be an array in the JSON string but got `%s`", jsonObj.get("dispositions").toString()));
          }

          // validate the optional field `dispositions` (array)
          for (int i = 0; i < jsonArraydispositions.size(); i++) {
            LegalSearchGetDefaultResponseAdrsInnerDispositionsInner.validateJsonElement(jsonArraydispositions.get(i));
          };
        }
      }
      if ((jsonObj.get("doc_id") != null && !jsonObj.get("doc_id").isJsonNull()) && !jsonObj.get("doc_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `doc_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("doc_id").toString()));
      }
      if (jsonObj.get("documents") != null && !jsonObj.get("documents").isJsonNull()) {
        JsonArray jsonArraydocuments = jsonObj.getAsJsonArray("documents");
        if (jsonArraydocuments != null) {
          // ensure the json data is an array
          if (!jsonObj.get("documents").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `documents` to be an array in the JSON string but got `%s`", jsonObj.get("documents").toString()));
          }

          // validate the optional field `documents` (array)
          for (int i = 0; i < jsonArraydocuments.size(); i++) {
            LegalSearchGetDefaultResponseAdminFinesInnerDocumentsInner.validateJsonElement(jsonArraydocuments.get(i));
          };
        }
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("highlights") != null && !jsonObj.get("highlights").isJsonNull() && !jsonObj.get("highlights").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `highlights` to be an array in the JSON string but got `%s`", jsonObj.get("highlights").toString()));
      }
      if ((jsonObj.get("mur_type") != null && !jsonObj.get("mur_type").isJsonNull()) && !jsonObj.get("mur_type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `mur_type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("mur_type").toString()));
      }
      // validate the optional field `mur_type`
      if (jsonObj.get("mur_type") != null && !jsonObj.get("mur_type").isJsonNull()) {
        MurTypeEnum.validateJsonElement(jsonObj.get("mur_type"));
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if ((jsonObj.get("false") != null && !jsonObj.get("false").isJsonNull()) && !jsonObj.get("false").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `false` to be a primitive type in the JSON string but got `%s`", jsonObj.get("false").toString()));
      }
      if (jsonObj.get("participants") != null && !jsonObj.get("participants").isJsonNull()) {
        JsonArray jsonArrayparticipants = jsonObj.getAsJsonArray("participants");
        if (jsonArrayparticipants != null) {
          // ensure the json data is an array
          if (!jsonObj.get("participants").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `participants` to be an array in the JSON string but got `%s`", jsonObj.get("participants").toString()));
          }

          // validate the optional field `participants` (array)
          for (int i = 0; i < jsonArrayparticipants.size(); i++) {
            LegalSearchGetDefaultResponseAdrsInnerParticipantsInner.validateJsonElement(jsonArrayparticipants.get(i));
          };
        }
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("respondents") != null && !jsonObj.get("respondents").isJsonNull() && !jsonObj.get("respondents").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `respondents` to be an array in the JSON string but got `%s`", jsonObj.get("respondents").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("subjects") != null && !jsonObj.get("subjects").isJsonNull() && !jsonObj.get("subjects").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `subjects` to be an array in the JSON string but got `%s`", jsonObj.get("subjects").toString()));
      }
      if ((jsonObj.get("url") != null && !jsonObj.get("url").isJsonNull()) && !jsonObj.get("url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("url").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!LegalSearchGetDefaultResponseMursInner.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'LegalSearchGetDefaultResponseMursInner' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<LegalSearchGetDefaultResponseMursInner> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(LegalSearchGetDefaultResponseMursInner.class));

       return (TypeAdapter<T>) new TypeAdapter<LegalSearchGetDefaultResponseMursInner>() {
           @Override
           public void write(JsonWriter out, LegalSearchGetDefaultResponseMursInner value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public LegalSearchGetDefaultResponseMursInner read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of LegalSearchGetDefaultResponseMursInner given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of LegalSearchGetDefaultResponseMursInner
   * @throws IOException if the JSON string is invalid with respect to LegalSearchGetDefaultResponseMursInner
   */
  public static LegalSearchGetDefaultResponseMursInner fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, LegalSearchGetDefaultResponseMursInner.class);
  }

  /**
   * Convert an instance of LegalSearchGetDefaultResponseMursInner to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

