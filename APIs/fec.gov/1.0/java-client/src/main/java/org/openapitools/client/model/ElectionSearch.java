/*
 * OpenFEC
 * This application programming interface (API) allows you to explore the way candidates and committees fund their campaigns.    The Federal Election Commission (FEC) API is a RESTful web service supporting full-text and field-specific searches on FEC data. [Bulk downloads](https://www.fec.gov/data/advanced/?tab=bulk-data) are available on the current site. Information is tied to the underlying forms by file ID and image ID. Data is updated nightly.    There are a lot of data, and a good place to start is to use search to find interesting candidates and committees. Then, you can use their IDs to find report or line item details with the other endpoints. If you are interested in individual donors, check out contributor information in the `/schedule_a/` endpoints.    <b class=\"body\" id=\"getting_started_head\">Getting started with the openFEC API</b><br>    If you would like to use the FEC's API programmatically, you can sign up for your own API key using our form. Alternatively, you can still try out our API without an API key by using the web interface and using DEMO_KEY. Note that when you use the openFEC API you are subject to the [Terms of Service](https://github.com/fecgov/FEC/blob/master/TERMS-OF-SERVICE.md) and [Acceptable Use policy](https://github.com/fecgov/FEC/blob/master/ACCEPTABLE-USE-POLICY.md).    Signing up for an API key will enable you to place up to 1,000 calls an hour. Each call is limited to 100 results per page. You can email questions, comments or a request to get a key for 7,200 calls an hour (120 calls per minute) to <a href=\"mailto:APIinfo@fec.gov\">APIinfo@fec.gov</a>. You can also ask questions and discuss the data in a community led [group](https://groups.google.com/forum/#!forum/fec-data).    The model definitions and schema are available at [/swagger](/swagger/). This is useful for making wrappers and exploring the data.    A few restrictions limit the way you can use FEC data. For example, you canâ€™t use contributor lists for commercial purposes or to solicit donations. [Learn more here](https://www.fec.gov/updates/sale-or-use-contributor-information/).    [Inspect our source code](https://github.com/fecgov/openFEC). We welcome issues and pull requests!    <p><br></p> <h2 class=\"title\" id=\"signup_head\">Sign up for an API key</h2> <div id=\"apidatagov_signup\">Loading signup form...</div>
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * ElectionSearch
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:02:12.812386-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ElectionSearch {
  public static final String SERIALIZED_NAME_CANDIDATE_STATUS = "candidate_status";
  @SerializedName(SERIALIZED_NAME_CANDIDATE_STATUS)
  private String candidateStatus;

  public static final String SERIALIZED_NAME_CYCLE = "cycle";
  @SerializedName(SERIALIZED_NAME_CYCLE)
  private Integer cycle;

  public static final String SERIALIZED_NAME_DISTRICT = "district";
  @SerializedName(SERIALIZED_NAME_DISTRICT)
  private String district;

  public static final String SERIALIZED_NAME_INCUMBENT_ID = "incumbent_id";
  @SerializedName(SERIALIZED_NAME_INCUMBENT_ID)
  private String incumbentId;

  public static final String SERIALIZED_NAME_INCUMBENT_NAME = "incumbent_name";
  @SerializedName(SERIALIZED_NAME_INCUMBENT_NAME)
  private String incumbentName;

  public static final String SERIALIZED_NAME_OFFICE = "office";
  @SerializedName(SERIALIZED_NAME_OFFICE)
  private String office;

  public static final String SERIALIZED_NAME_STATE = "state";
  @SerializedName(SERIALIZED_NAME_STATE)
  private String state;

  public ElectionSearch() {
  }

  public ElectionSearch candidateStatus(String candidateStatus) {
    this.candidateStatus = candidateStatus;
    return this;
  }

  /**
   * Get candidateStatus
   * @return candidateStatus
   */
  @javax.annotation.Nullable
  public String getCandidateStatus() {
    return candidateStatus;
  }

  public void setCandidateStatus(String candidateStatus) {
    this.candidateStatus = candidateStatus;
  }


  public ElectionSearch cycle(Integer cycle) {
    this.cycle = cycle;
    return this;
  }

  /**
   * Get cycle
   * @return cycle
   */
  @javax.annotation.Nullable
  public Integer getCycle() {
    return cycle;
  }

  public void setCycle(Integer cycle) {
    this.cycle = cycle;
  }


  public ElectionSearch district(String district) {
    this.district = district;
    return this;
  }

  /**
   * Get district
   * @return district
   */
  @javax.annotation.Nullable
  public String getDistrict() {
    return district;
  }

  public void setDistrict(String district) {
    this.district = district;
  }


  public ElectionSearch incumbentId(String incumbentId) {
    this.incumbentId = incumbentId;
    return this;
  }

  /**
   * Get incumbentId
   * @return incumbentId
   */
  @javax.annotation.Nullable
  public String getIncumbentId() {
    return incumbentId;
  }

  public void setIncumbentId(String incumbentId) {
    this.incumbentId = incumbentId;
  }


  public ElectionSearch incumbentName(String incumbentName) {
    this.incumbentName = incumbentName;
    return this;
  }

  /**
   * Get incumbentName
   * @return incumbentName
   */
  @javax.annotation.Nullable
  public String getIncumbentName() {
    return incumbentName;
  }

  public void setIncumbentName(String incumbentName) {
    this.incumbentName = incumbentName;
  }


  public ElectionSearch office(String office) {
    this.office = office;
    return this;
  }

  /**
   * Get office
   * @return office
   */
  @javax.annotation.Nullable
  public String getOffice() {
    return office;
  }

  public void setOffice(String office) {
    this.office = office;
  }


  public ElectionSearch state(String state) {
    this.state = state;
    return this;
  }

  /**
   * Get state
   * @return state
   */
  @javax.annotation.Nullable
  public String getState() {
    return state;
  }

  public void setState(String state) {
    this.state = state;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ElectionSearch electionSearch = (ElectionSearch) o;
    return Objects.equals(this.candidateStatus, electionSearch.candidateStatus) &&
        Objects.equals(this.cycle, electionSearch.cycle) &&
        Objects.equals(this.district, electionSearch.district) &&
        Objects.equals(this.incumbentId, electionSearch.incumbentId) &&
        Objects.equals(this.incumbentName, electionSearch.incumbentName) &&
        Objects.equals(this.office, electionSearch.office) &&
        Objects.equals(this.state, electionSearch.state);
  }

  @Override
  public int hashCode() {
    return Objects.hash(candidateStatus, cycle, district, incumbentId, incumbentName, office, state);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ElectionSearch {\n");
    sb.append("    candidateStatus: ").append(toIndentedString(candidateStatus)).append("\n");
    sb.append("    cycle: ").append(toIndentedString(cycle)).append("\n");
    sb.append("    district: ").append(toIndentedString(district)).append("\n");
    sb.append("    incumbentId: ").append(toIndentedString(incumbentId)).append("\n");
    sb.append("    incumbentName: ").append(toIndentedString(incumbentName)).append("\n");
    sb.append("    office: ").append(toIndentedString(office)).append("\n");
    sb.append("    state: ").append(toIndentedString(state)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("candidate_status");
    openapiFields.add("cycle");
    openapiFields.add("district");
    openapiFields.add("incumbent_id");
    openapiFields.add("incumbent_name");
    openapiFields.add("office");
    openapiFields.add("state");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ElectionSearch
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ElectionSearch.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ElectionSearch is not found in the empty JSON string", ElectionSearch.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ElectionSearch.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ElectionSearch` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("candidate_status") != null && !jsonObj.get("candidate_status").isJsonNull()) && !jsonObj.get("candidate_status").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `candidate_status` to be a primitive type in the JSON string but got `%s`", jsonObj.get("candidate_status").toString()));
      }
      if ((jsonObj.get("district") != null && !jsonObj.get("district").isJsonNull()) && !jsonObj.get("district").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `district` to be a primitive type in the JSON string but got `%s`", jsonObj.get("district").toString()));
      }
      if ((jsonObj.get("incumbent_id") != null && !jsonObj.get("incumbent_id").isJsonNull()) && !jsonObj.get("incumbent_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `incumbent_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("incumbent_id").toString()));
      }
      if ((jsonObj.get("incumbent_name") != null && !jsonObj.get("incumbent_name").isJsonNull()) && !jsonObj.get("incumbent_name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `incumbent_name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("incumbent_name").toString()));
      }
      if ((jsonObj.get("office") != null && !jsonObj.get("office").isJsonNull()) && !jsonObj.get("office").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `office` to be a primitive type in the JSON string but got `%s`", jsonObj.get("office").toString()));
      }
      if ((jsonObj.get("state") != null && !jsonObj.get("state").isJsonNull()) && !jsonObj.get("state").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `state` to be a primitive type in the JSON string but got `%s`", jsonObj.get("state").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ElectionSearch.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ElectionSearch' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ElectionSearch> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ElectionSearch.class));

       return (TypeAdapter<T>) new TypeAdapter<ElectionSearch>() {
           @Override
           public void write(JsonWriter out, ElectionSearch value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ElectionSearch read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ElectionSearch given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ElectionSearch
   * @throws IOException if the JSON string is invalid with respect to ElectionSearch
   */
  public static ElectionSearch fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ElectionSearch.class);
  }

  /**
   * Convert an instance of ElectionSearch to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

