/*
 * OpenFEC
 * This application programming interface (API) allows you to explore the way candidates and committees fund their campaigns.    The Federal Election Commission (FEC) API is a RESTful web service supporting full-text and field-specific searches on FEC data. [Bulk downloads](https://www.fec.gov/data/advanced/?tab=bulk-data) are available on the current site. Information is tied to the underlying forms by file ID and image ID. Data is updated nightly.    There are a lot of data, and a good place to start is to use search to find interesting candidates and committees. Then, you can use their IDs to find report or line item details with the other endpoints. If you are interested in individual donors, check out contributor information in the `/schedule_a/` endpoints.    <b class=\"body\" id=\"getting_started_head\">Getting started with the openFEC API</b><br>    If you would like to use the FEC's API programmatically, you can sign up for your own API key using our form. Alternatively, you can still try out our API without an API key by using the web interface and using DEMO_KEY. Note that when you use the openFEC API you are subject to the [Terms of Service](https://github.com/fecgov/FEC/blob/master/TERMS-OF-SERVICE.md) and [Acceptable Use policy](https://github.com/fecgov/FEC/blob/master/ACCEPTABLE-USE-POLICY.md).    Signing up for an API key will enable you to place up to 1,000 calls an hour. Each call is limited to 100 results per page. You can email questions, comments or a request to get a key for 7,200 calls an hour (120 calls per minute) to <a href=\"mailto:APIinfo@fec.gov\">APIinfo@fec.gov</a>. You can also ask questions and discuss the data in a community led [group](https://groups.google.com/forum/#!forum/fec-data).    The model definitions and schema are available at [/swagger](/swagger/). This is useful for making wrappers and exploring the data.    A few restrictions limit the way you can use FEC data. For example, you canâ€™t use contributor lists for commercial purposes or to solicit donations. [Learn more here](https://www.fec.gov/updates/sale-or-use-contributor-information/).    [Inspect our source code](https://github.com/fecgov/openFEC). We welcome issues and pull requests!    <p><br></p> <h2 class=\"title\" id=\"signup_head\">Sign up for an API key</h2> <div id=\"apidatagov_signup\">Loading signup form...</div>
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.math.BigDecimal;
import java.time.LocalDate;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Filings
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:02:12.812386-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Filings {
  public static final String SERIALIZED_NAME_ADDITIONAL_BANK_NAMES = "additional_bank_names";
  @SerializedName(SERIALIZED_NAME_ADDITIONAL_BANK_NAMES)
  private List<String> additionalBankNames;

  public static final String SERIALIZED_NAME_AMENDMENT_CHAIN = "amendment_chain";
  @SerializedName(SERIALIZED_NAME_AMENDMENT_CHAIN)
  private List<BigDecimal> amendmentChain;

  public static final String SERIALIZED_NAME_AMENDMENT_INDICATOR = "amendment_indicator";
  @SerializedName(SERIALIZED_NAME_AMENDMENT_INDICATOR)
  private String amendmentIndicator;

  public static final String SERIALIZED_NAME_AMENDMENT_VERSION = "amendment_version";
  @SerializedName(SERIALIZED_NAME_AMENDMENT_VERSION)
  private Integer amendmentVersion;

  public static final String SERIALIZED_NAME_BANK_DEPOSITORY_CITY = "bank_depository_city";
  @SerializedName(SERIALIZED_NAME_BANK_DEPOSITORY_CITY)
  private String bankDepositoryCity;

  public static final String SERIALIZED_NAME_BANK_DEPOSITORY_NAME = "bank_depository_name";
  @SerializedName(SERIALIZED_NAME_BANK_DEPOSITORY_NAME)
  private String bankDepositoryName;

  public static final String SERIALIZED_NAME_BANK_DEPOSITORY_STATE = "bank_depository_state";
  @SerializedName(SERIALIZED_NAME_BANK_DEPOSITORY_STATE)
  private String bankDepositoryState;

  public static final String SERIALIZED_NAME_BANK_DEPOSITORY_STREET1 = "bank_depository_street_1";
  @SerializedName(SERIALIZED_NAME_BANK_DEPOSITORY_STREET1)
  private String bankDepositoryStreet1;

  public static final String SERIALIZED_NAME_BANK_DEPOSITORY_STREET2 = "bank_depository_street_2";
  @SerializedName(SERIALIZED_NAME_BANK_DEPOSITORY_STREET2)
  private String bankDepositoryStreet2;

  public static final String SERIALIZED_NAME_BANK_DEPOSITORY_ZIP = "bank_depository_zip";
  @SerializedName(SERIALIZED_NAME_BANK_DEPOSITORY_ZIP)
  private String bankDepositoryZip;

  public static final String SERIALIZED_NAME_BEGINNING_IMAGE_NUMBER = "beginning_image_number";
  @SerializedName(SERIALIZED_NAME_BEGINNING_IMAGE_NUMBER)
  private String beginningImageNumber;

  public static final String SERIALIZED_NAME_CANDIDATE_ID = "candidate_id";
  @SerializedName(SERIALIZED_NAME_CANDIDATE_ID)
  private String candidateId;

  public static final String SERIALIZED_NAME_CANDIDATE_NAME = "candidate_name";
  @SerializedName(SERIALIZED_NAME_CANDIDATE_NAME)
  private String candidateName;

  public static final String SERIALIZED_NAME_CASH_ON_HAND_BEGINNING_PERIOD = "cash_on_hand_beginning_period";
  @SerializedName(SERIALIZED_NAME_CASH_ON_HAND_BEGINNING_PERIOD)
  private BigDecimal cashOnHandBeginningPeriod;

  public static final String SERIALIZED_NAME_CASH_ON_HAND_END_PERIOD = "cash_on_hand_end_period";
  @SerializedName(SERIALIZED_NAME_CASH_ON_HAND_END_PERIOD)
  private BigDecimal cashOnHandEndPeriod;

  public static final String SERIALIZED_NAME_COMMITTEE_ID = "committee_id";
  @SerializedName(SERIALIZED_NAME_COMMITTEE_ID)
  private String committeeId;

  public static final String SERIALIZED_NAME_COMMITTEE_NAME = "committee_name";
  @SerializedName(SERIALIZED_NAME_COMMITTEE_NAME)
  private String committeeName;

  public static final String SERIALIZED_NAME_COMMITTEE_TYPE = "committee_type";
  @SerializedName(SERIALIZED_NAME_COMMITTEE_TYPE)
  private String committeeType;

  public static final String SERIALIZED_NAME_COVERAGE_END_DATE = "coverage_end_date";
  @SerializedName(SERIALIZED_NAME_COVERAGE_END_DATE)
  private LocalDate coverageEndDate;

  public static final String SERIALIZED_NAME_COVERAGE_START_DATE = "coverage_start_date";
  @SerializedName(SERIALIZED_NAME_COVERAGE_START_DATE)
  private LocalDate coverageStartDate;

  public static final String SERIALIZED_NAME_CSV_URL = "csv_url";
  @SerializedName(SERIALIZED_NAME_CSV_URL)
  private String csvUrl;

  public static final String SERIALIZED_NAME_CYCLE = "cycle";
  @SerializedName(SERIALIZED_NAME_CYCLE)
  private Integer cycle;

  public static final String SERIALIZED_NAME_DEBTS_OWED_BY_COMMITTEE = "debts_owed_by_committee";
  @SerializedName(SERIALIZED_NAME_DEBTS_OWED_BY_COMMITTEE)
  private BigDecimal debtsOwedByCommittee;

  public static final String SERIALIZED_NAME_DEBTS_OWED_TO_COMMITTEE = "debts_owed_to_committee";
  @SerializedName(SERIALIZED_NAME_DEBTS_OWED_TO_COMMITTEE)
  private BigDecimal debtsOwedToCommittee;

  public static final String SERIALIZED_NAME_DOCUMENT_DESCRIPTION = "document_description";
  @SerializedName(SERIALIZED_NAME_DOCUMENT_DESCRIPTION)
  private String documentDescription;

  public static final String SERIALIZED_NAME_DOCUMENT_TYPE = "document_type";
  @SerializedName(SERIALIZED_NAME_DOCUMENT_TYPE)
  private String documentType;

  public static final String SERIALIZED_NAME_DOCUMENT_TYPE_FULL = "document_type_full";
  @SerializedName(SERIALIZED_NAME_DOCUMENT_TYPE_FULL)
  private String documentTypeFull;

  public static final String SERIALIZED_NAME_ELECTION_YEAR = "election_year";
  @SerializedName(SERIALIZED_NAME_ELECTION_YEAR)
  private Integer electionYear;

  public static final String SERIALIZED_NAME_ENDING_IMAGE_NUMBER = "ending_image_number";
  @SerializedName(SERIALIZED_NAME_ENDING_IMAGE_NUMBER)
  private String endingImageNumber;

  public static final String SERIALIZED_NAME_FEC_FILE_ID = "fec_file_id";
  @SerializedName(SERIALIZED_NAME_FEC_FILE_ID)
  private String fecFileId;

  public static final String SERIALIZED_NAME_FEC_URL = "fec_url";
  @SerializedName(SERIALIZED_NAME_FEC_URL)
  private String fecUrl;

  public static final String SERIALIZED_NAME_FILE_NUMBER = "file_number";
  @SerializedName(SERIALIZED_NAME_FILE_NUMBER)
  private Integer fileNumber;

  public static final String SERIALIZED_NAME_FORM_CATEGORY = "form_category";
  @SerializedName(SERIALIZED_NAME_FORM_CATEGORY)
  private String formCategory;

  public static final String SERIALIZED_NAME_FORM_TYPE = "form_type";
  @SerializedName(SERIALIZED_NAME_FORM_TYPE)
  private String formType;

  public static final String SERIALIZED_NAME_HOUSE_PERSONAL_FUNDS = "house_personal_funds";
  @SerializedName(SERIALIZED_NAME_HOUSE_PERSONAL_FUNDS)
  private BigDecimal housePersonalFunds;

  public static final String SERIALIZED_NAME_HTML_URL = "html_url";
  @SerializedName(SERIALIZED_NAME_HTML_URL)
  private String htmlUrl;

  public static final String SERIALIZED_NAME_IS_AMENDED = "is_amended";
  @SerializedName(SERIALIZED_NAME_IS_AMENDED)
  private Boolean isAmended;

  public static final String SERIALIZED_NAME_MEANS_FILED = "means_filed";
  @SerializedName(SERIALIZED_NAME_MEANS_FILED)
  private String meansFiled;

  public static final String SERIALIZED_NAME_MOST_RECENT = "most_recent";
  @SerializedName(SERIALIZED_NAME_MOST_RECENT)
  private Boolean mostRecent;

  public static final String SERIALIZED_NAME_MOST_RECENT_FILE_NUMBER = "most_recent_file_number";
  @SerializedName(SERIALIZED_NAME_MOST_RECENT_FILE_NUMBER)
  private Integer mostRecentFileNumber;

  public static final String SERIALIZED_NAME_NET_DONATIONS = "net_donations";
  @SerializedName(SERIALIZED_NAME_NET_DONATIONS)
  private BigDecimal netDonations;

  public static final String SERIALIZED_NAME_OFFICE = "office";
  @SerializedName(SERIALIZED_NAME_OFFICE)
  private String office;

  public static final String SERIALIZED_NAME_OPPOSITION_PERSONAL_FUNDS = "opposition_personal_funds";
  @SerializedName(SERIALIZED_NAME_OPPOSITION_PERSONAL_FUNDS)
  private BigDecimal oppositionPersonalFunds;

  public static final String SERIALIZED_NAME_PAGES = "pages";
  @SerializedName(SERIALIZED_NAME_PAGES)
  private Integer pages;

  public static final String SERIALIZED_NAME_PARTY = "party";
  @SerializedName(SERIALIZED_NAME_PARTY)
  private String party;

  public static final String SERIALIZED_NAME_PDF_URL = "pdf_url";
  @SerializedName(SERIALIZED_NAME_PDF_URL)
  private String pdfUrl;

  public static final String SERIALIZED_NAME_PREVIOUS_FILE_NUMBER = "previous_file_number";
  @SerializedName(SERIALIZED_NAME_PREVIOUS_FILE_NUMBER)
  private Integer previousFileNumber;

  public static final String SERIALIZED_NAME_PRIMARY_GENERAL_INDICATOR = "primary_general_indicator";
  @SerializedName(SERIALIZED_NAME_PRIMARY_GENERAL_INDICATOR)
  private String primaryGeneralIndicator;

  public static final String SERIALIZED_NAME_RECEIPT_DATE = "receipt_date";
  @SerializedName(SERIALIZED_NAME_RECEIPT_DATE)
  private LocalDate receiptDate;

  public static final String SERIALIZED_NAME_REPORT_TYPE = "report_type";
  @SerializedName(SERIALIZED_NAME_REPORT_TYPE)
  private String reportType;

  public static final String SERIALIZED_NAME_REPORT_TYPE_FULL = "report_type_full";
  @SerializedName(SERIALIZED_NAME_REPORT_TYPE_FULL)
  private String reportTypeFull;

  public static final String SERIALIZED_NAME_REPORT_YEAR = "report_year";
  @SerializedName(SERIALIZED_NAME_REPORT_YEAR)
  private Integer reportYear;

  public static final String SERIALIZED_NAME_REQUEST_TYPE = "request_type";
  @SerializedName(SERIALIZED_NAME_REQUEST_TYPE)
  private String requestType;

  public static final String SERIALIZED_NAME_SENATE_PERSONAL_FUNDS = "senate_personal_funds";
  @SerializedName(SERIALIZED_NAME_SENATE_PERSONAL_FUNDS)
  private BigDecimal senatePersonalFunds;

  public static final String SERIALIZED_NAME_STATE = "state";
  @SerializedName(SERIALIZED_NAME_STATE)
  private String state;

  public static final String SERIALIZED_NAME_SUB_ID = "sub_id";
  @SerializedName(SERIALIZED_NAME_SUB_ID)
  private String subId;

  public static final String SERIALIZED_NAME_TOTAL_COMMUNICATION_COST = "total_communication_cost";
  @SerializedName(SERIALIZED_NAME_TOTAL_COMMUNICATION_COST)
  private BigDecimal totalCommunicationCost;

  public static final String SERIALIZED_NAME_TOTAL_DISBURSEMENTS = "total_disbursements";
  @SerializedName(SERIALIZED_NAME_TOTAL_DISBURSEMENTS)
  private BigDecimal totalDisbursements;

  public static final String SERIALIZED_NAME_TOTAL_INDEPENDENT_EXPENDITURES = "total_independent_expenditures";
  @SerializedName(SERIALIZED_NAME_TOTAL_INDEPENDENT_EXPENDITURES)
  private BigDecimal totalIndependentExpenditures;

  public static final String SERIALIZED_NAME_TOTAL_INDIVIDUAL_CONTRIBUTIONS = "total_individual_contributions";
  @SerializedName(SERIALIZED_NAME_TOTAL_INDIVIDUAL_CONTRIBUTIONS)
  private BigDecimal totalIndividualContributions;

  public static final String SERIALIZED_NAME_TOTAL_RECEIPTS = "total_receipts";
  @SerializedName(SERIALIZED_NAME_TOTAL_RECEIPTS)
  private BigDecimal totalReceipts;

  public static final String SERIALIZED_NAME_TREASURER_NAME = "treasurer_name";
  @SerializedName(SERIALIZED_NAME_TREASURER_NAME)
  private String treasurerName;

  public static final String SERIALIZED_NAME_UPDATE_DATE = "update_date";
  @SerializedName(SERIALIZED_NAME_UPDATE_DATE)
  private LocalDate updateDate;

  public Filings() {
  }

  public Filings additionalBankNames(List<String> additionalBankNames) {
    this.additionalBankNames = additionalBankNames;
    return this;
  }

  public Filings addAdditionalBankNamesItem(String additionalBankNamesItem) {
    if (this.additionalBankNames == null) {
      this.additionalBankNames = new ArrayList<>();
    }
    this.additionalBankNames.add(additionalBankNamesItem);
    return this;
  }

  /**
   *  Additional banks or depositories in which the committee deposits funds, holds accounts, rents safety deposit boxes or maintains funds. 
   * @return additionalBankNames
   */
  @javax.annotation.Nullable
  public List<String> getAdditionalBankNames() {
    return additionalBankNames;
  }

  public void setAdditionalBankNames(List<String> additionalBankNames) {
    this.additionalBankNames = additionalBankNames;
  }


  public Filings amendmentChain(List<BigDecimal> amendmentChain) {
    this.amendmentChain = amendmentChain;
    return this;
  }

  public Filings addAmendmentChainItem(BigDecimal amendmentChainItem) {
    if (this.amendmentChain == null) {
      this.amendmentChain = new ArrayList<>();
    }
    this.amendmentChain.add(amendmentChainItem);
    return this;
  }

  /**
   *  The first value in the chain is the original filing.  The ordering in the chain reflects the order the amendments were filed up to the amendment being inspected. 
   * @return amendmentChain
   */
  @javax.annotation.Nullable
  public List<BigDecimal> getAmendmentChain() {
    return amendmentChain;
  }

  public void setAmendmentChain(List<BigDecimal> amendmentChain) {
    this.amendmentChain = amendmentChain;
  }


  public Filings amendmentIndicator(String amendmentIndicator) {
    this.amendmentIndicator = amendmentIndicator;
    return this;
  }

  /**
   *  The first value in the chain is the original filing.  The ordering in the chain reflects the order the amendments were filed up to the amendment being inspected. 
   * @return amendmentIndicator
   */
  @javax.annotation.Nullable
  public String getAmendmentIndicator() {
    return amendmentIndicator;
  }

  public void setAmendmentIndicator(String amendmentIndicator) {
    this.amendmentIndicator = amendmentIndicator;
  }


  public Filings amendmentVersion(Integer amendmentVersion) {
    this.amendmentVersion = amendmentVersion;
    return this;
  }

  /**
   *  Amendment version 
   * @return amendmentVersion
   */
  @javax.annotation.Nullable
  public Integer getAmendmentVersion() {
    return amendmentVersion;
  }

  public void setAmendmentVersion(Integer amendmentVersion) {
    this.amendmentVersion = amendmentVersion;
  }


  public Filings bankDepositoryCity(String bankDepositoryCity) {
    this.bankDepositoryCity = bankDepositoryCity;
    return this;
  }

  /**
   *  City of bank or depository as reported on the Form 1 
   * @return bankDepositoryCity
   */
  @javax.annotation.Nullable
  public String getBankDepositoryCity() {
    return bankDepositoryCity;
  }

  public void setBankDepositoryCity(String bankDepositoryCity) {
    this.bankDepositoryCity = bankDepositoryCity;
  }


  public Filings bankDepositoryName(String bankDepositoryName) {
    this.bankDepositoryName = bankDepositoryName;
    return this;
  }

  /**
   *  Primary bank or depository in which the committee deposits funds,holds accounts, rents safety deposit boxes or maintains funds. 
   * @return bankDepositoryName
   */
  @javax.annotation.Nullable
  public String getBankDepositoryName() {
    return bankDepositoryName;
  }

  public void setBankDepositoryName(String bankDepositoryName) {
    this.bankDepositoryName = bankDepositoryName;
  }


  public Filings bankDepositoryState(String bankDepositoryState) {
    this.bankDepositoryState = bankDepositoryState;
    return this;
  }

  /**
   *  State of bank or depository as reported on the Form 1 
   * @return bankDepositoryState
   */
  @javax.annotation.Nullable
  public String getBankDepositoryState() {
    return bankDepositoryState;
  }

  public void setBankDepositoryState(String bankDepositoryState) {
    this.bankDepositoryState = bankDepositoryState;
  }


  public Filings bankDepositoryStreet1(String bankDepositoryStreet1) {
    this.bankDepositoryStreet1 = bankDepositoryStreet1;
    return this;
  }

  /**
   *  Street of bank or depository as reported on their Form 1. 
   * @return bankDepositoryStreet1
   */
  @javax.annotation.Nullable
  public String getBankDepositoryStreet1() {
    return bankDepositoryStreet1;
  }

  public void setBankDepositoryStreet1(String bankDepositoryStreet1) {
    this.bankDepositoryStreet1 = bankDepositoryStreet1;
  }


  public Filings bankDepositoryStreet2(String bankDepositoryStreet2) {
    this.bankDepositoryStreet2 = bankDepositoryStreet2;
    return this;
  }

  /**
   *  Second line of the street of bank or depository as reported on the Form 1 
   * @return bankDepositoryStreet2
   */
  @javax.annotation.Nullable
  public String getBankDepositoryStreet2() {
    return bankDepositoryStreet2;
  }

  public void setBankDepositoryStreet2(String bankDepositoryStreet2) {
    this.bankDepositoryStreet2 = bankDepositoryStreet2;
  }


  public Filings bankDepositoryZip(String bankDepositoryZip) {
    this.bankDepositoryZip = bankDepositoryZip;
    return this;
  }

  /**
   *  Zip code of bank or depository as reported on the Form 1 
   * @return bankDepositoryZip
   */
  @javax.annotation.Nullable
  public String getBankDepositoryZip() {
    return bankDepositoryZip;
  }

  public void setBankDepositoryZip(String bankDepositoryZip) {
    this.bankDepositoryZip = bankDepositoryZip;
  }


  public Filings beginningImageNumber(String beginningImageNumber) {
    this.beginningImageNumber = beginningImageNumber;
    return this;
  }

  /**
   * Get beginningImageNumber
   * @return beginningImageNumber
   */
  @javax.annotation.Nullable
  public String getBeginningImageNumber() {
    return beginningImageNumber;
  }

  public void setBeginningImageNumber(String beginningImageNumber) {
    this.beginningImageNumber = beginningImageNumber;
  }


  public Filings candidateId(String candidateId) {
    this.candidateId = candidateId;
    return this;
  }

  /**
   *  A unique identifier assigned to each candidate registered with the FEC. If a person runs for several offices, that person will have separate candidate IDs for each office. First character indicates office - [P]residential, [H]ouse, [S]enate]. Second character is the last digit of the two-year period the ID was created. Third and fourth is the candidate state. Presidential IDs don&#39;t have state. Fifth and sixth is the district when the candidate first ran. This does not change if the candidate/member&#39;s district changes during re-districting. Presidential IDs don&#39;t have districts. The rest is sequence. 
   * @return candidateId
   */
  @javax.annotation.Nullable
  public String getCandidateId() {
    return candidateId;
  }

  public void setCandidateId(String candidateId) {
    this.candidateId = candidateId;
  }


  public Filings candidateName(String candidateName) {
    this.candidateName = candidateName;
    return this;
  }

  /**
   * Name of candidate running for office
   * @return candidateName
   */
  @javax.annotation.Nullable
  public String getCandidateName() {
    return candidateName;
  }

  public void setCandidateName(String candidateName) {
    this.candidateName = candidateName;
  }


  public Filings cashOnHandBeginningPeriod(BigDecimal cashOnHandBeginningPeriod) {
    this.cashOnHandBeginningPeriod = cashOnHandBeginningPeriod;
    return this;
  }

  /**
   * Balance for the committee at the start of the two-year period
   * @return cashOnHandBeginningPeriod
   */
  @javax.annotation.Nullable
  public BigDecimal getCashOnHandBeginningPeriod() {
    return cashOnHandBeginningPeriod;
  }

  public void setCashOnHandBeginningPeriod(BigDecimal cashOnHandBeginningPeriod) {
    this.cashOnHandBeginningPeriod = cashOnHandBeginningPeriod;
  }


  public Filings cashOnHandEndPeriod(BigDecimal cashOnHandEndPeriod) {
    this.cashOnHandEndPeriod = cashOnHandEndPeriod;
    return this;
  }

  /**
   * Ending cash balance on the most recent filing
   * @return cashOnHandEndPeriod
   */
  @javax.annotation.Nullable
  public BigDecimal getCashOnHandEndPeriod() {
    return cashOnHandEndPeriod;
  }

  public void setCashOnHandEndPeriod(BigDecimal cashOnHandEndPeriod) {
    this.cashOnHandEndPeriod = cashOnHandEndPeriod;
  }


  public Filings committeeId(String committeeId) {
    this.committeeId = committeeId;
    return this;
  }

  /**
   *  A unique identifier assigned to each committee or filer registered with the FEC. In general committee id&#39;s begin with the letter C which is followed by eight digits. 
   * @return committeeId
   */
  @javax.annotation.Nullable
  public String getCommitteeId() {
    return committeeId;
  }

  public void setCommitteeId(String committeeId) {
    this.committeeId = committeeId;
  }


  public Filings committeeName(String committeeName) {
    this.committeeName = committeeName;
    return this;
  }

  /**
   * The name of the committee. If a committee changes its name,     the most recent name will be shown. Committee names are not unique. Use committee_id     for looking up records.
   * @return committeeName
   */
  @javax.annotation.Nullable
  public String getCommitteeName() {
    return committeeName;
  }

  public void setCommitteeName(String committeeName) {
    this.committeeName = committeeName;
  }


  public Filings committeeType(String committeeType) {
    this.committeeType = committeeType;
    return this;
  }

  /**
   * The one-letter type code of the organization:         - C communication cost         - D delegate         - E electioneering communication         - H House         - I independent expenditure filer (not a committee)         - N PAC - nonqualified         - O independent expenditure-only (super PACs)         - P presidential         - Q PAC - qualified         - S Senate         - U single candidate independent expenditure         - V PAC with non-contribution account, nonqualified         - W PAC with non-contribution account, qualified         - X party, nonqualified         - Y party, qualified         - Z national party non-federal account 
   * @return committeeType
   */
  @javax.annotation.Nullable
  public String getCommitteeType() {
    return committeeType;
  }

  public void setCommitteeType(String committeeType) {
    this.committeeType = committeeType;
  }


  public Filings coverageEndDate(LocalDate coverageEndDate) {
    this.coverageEndDate = coverageEndDate;
    return this;
  }

  /**
   * Ending date of the reporting period
   * @return coverageEndDate
   */
  @javax.annotation.Nullable
  public LocalDate getCoverageEndDate() {
    return coverageEndDate;
  }

  public void setCoverageEndDate(LocalDate coverageEndDate) {
    this.coverageEndDate = coverageEndDate;
  }


  public Filings coverageStartDate(LocalDate coverageStartDate) {
    this.coverageStartDate = coverageStartDate;
    return this;
  }

  /**
   * Beginning date of the reporting period
   * @return coverageStartDate
   */
  @javax.annotation.Nullable
  public LocalDate getCoverageStartDate() {
    return coverageStartDate;
  }

  public void setCoverageStartDate(LocalDate coverageStartDate) {
    this.coverageStartDate = coverageStartDate;
  }


  public Filings csvUrl(String csvUrl) {
    this.csvUrl = csvUrl;
    return this;
  }

  /**
   * Get csvUrl
   * @return csvUrl
   */
  @javax.annotation.Nullable
  public String getCsvUrl() {
    return csvUrl;
  }

  public void setCsvUrl(String csvUrl) {
    this.csvUrl = csvUrl;
  }


  public Filings cycle(Integer cycle) {
    this.cycle = cycle;
    return this;
  }

  /**
   *  Filter records to only those that were applicable to a given two-year period.The cycle begins with an odd year and is named for its ending, even year. 
   * @return cycle
   */
  @javax.annotation.Nullable
  public Integer getCycle() {
    return cycle;
  }

  public void setCycle(Integer cycle) {
    this.cycle = cycle;
  }


  public Filings debtsOwedByCommittee(BigDecimal debtsOwedByCommittee) {
    this.debtsOwedByCommittee = debtsOwedByCommittee;
    return this;
  }

  /**
   * Debts owed by the committee
   * @return debtsOwedByCommittee
   */
  @javax.annotation.Nullable
  public BigDecimal getDebtsOwedByCommittee() {
    return debtsOwedByCommittee;
  }

  public void setDebtsOwedByCommittee(BigDecimal debtsOwedByCommittee) {
    this.debtsOwedByCommittee = debtsOwedByCommittee;
  }


  public Filings debtsOwedToCommittee(BigDecimal debtsOwedToCommittee) {
    this.debtsOwedToCommittee = debtsOwedToCommittee;
    return this;
  }

  /**
   * Debts owed to the committee
   * @return debtsOwedToCommittee
   */
  @javax.annotation.Nullable
  public BigDecimal getDebtsOwedToCommittee() {
    return debtsOwedToCommittee;
  }

  public void setDebtsOwedToCommittee(BigDecimal debtsOwedToCommittee) {
    this.debtsOwedToCommittee = debtsOwedToCommittee;
  }


  public Filings documentDescription(String documentDescription) {
    this.documentDescription = documentDescription;
    return this;
  }

  /**
   * Get documentDescription
   * @return documentDescription
   */
  @javax.annotation.Nullable
  public String getDocumentDescription() {
    return documentDescription;
  }

  public void setDocumentDescription(String documentDescription) {
    this.documentDescription = documentDescription;
  }


  public Filings documentType(String documentType) {
    this.documentType = documentType;
    return this;
  }

  /**
   *  The type of document for documents other than reports:     - 2 24 Hour Contribution Notice     - 4 48 Hour Contribution Notice     - A Debt Settlement Statement     - B Acknowledgment of Receipt of Debt Settlement Statement     - C RFAI: Debt Settlement First Notice     - D Commission Debt Settlement Review     - E Commission Response TO Debt Settlement Request     - F Administrative Termination     - G Debt Settlement Plan Amendment     - H Disavowal Notice     - I Disavowal Response     - J Conduit Report     - K Termination Approval     - L Repeat Non-Filer Notice     - M Filing Frequency Change Notice     - N Paper Amendment to Electronic Report     - O Acknowledgment of Filing Frequency Change     - S RFAI: Debt Settlement Second     - T Miscellaneous Report TO FEC     - V Repeat Violation Notice (441A OR 441B)     - P Notice of Paper Filing     - R F3L Filing Frequency Change Notice     - Q Acknowledgment of F3L Filing Frequency Change     - U Unregistered Committee Notice 
   * @return documentType
   */
  @javax.annotation.Nullable
  public String getDocumentType() {
    return documentType;
  }

  public void setDocumentType(String documentType) {
    this.documentType = documentType;
  }


  public Filings documentTypeFull(String documentTypeFull) {
    this.documentTypeFull = documentTypeFull;
    return this;
  }

  /**
   *  The type of document for documents other than reports:     - 2 24 Hour Contribution Notice     - 4 48 Hour Contribution Notice     - A Debt Settlement Statement     - B Acknowledgment of Receipt of Debt Settlement Statement     - C RFAI: Debt Settlement First Notice     - D Commission Debt Settlement Review     - E Commission Response TO Debt Settlement Request     - F Administrative Termination     - G Debt Settlement Plan Amendment     - H Disavowal Notice     - I Disavowal Response     - J Conduit Report     - K Termination Approval     - L Repeat Non-Filer Notice     - M Filing Frequency Change Notice     - N Paper Amendment to Electronic Report     - O Acknowledgment of Filing Frequency Change     - S RFAI: Debt Settlement Second     - T Miscellaneous Report TO FEC     - V Repeat Violation Notice (441A OR 441B)     - P Notice of Paper Filing     - R F3L Filing Frequency Change Notice     - Q Acknowledgment of F3L Filing Frequency Change     - U Unregistered Committee Notice 
   * @return documentTypeFull
   */
  @javax.annotation.Nullable
  public String getDocumentTypeFull() {
    return documentTypeFull;
  }

  public void setDocumentTypeFull(String documentTypeFull) {
    this.documentTypeFull = documentTypeFull;
  }


  public Filings electionYear(Integer electionYear) {
    this.electionYear = electionYear;
    return this;
  }

  /**
   * Year of election
   * @return electionYear
   */
  @javax.annotation.Nullable
  public Integer getElectionYear() {
    return electionYear;
  }

  public void setElectionYear(Integer electionYear) {
    this.electionYear = electionYear;
  }


  public Filings endingImageNumber(String endingImageNumber) {
    this.endingImageNumber = endingImageNumber;
    return this;
  }

  /**
   * Get endingImageNumber
   * @return endingImageNumber
   */
  @javax.annotation.Nullable
  public String getEndingImageNumber() {
    return endingImageNumber;
  }

  public void setEndingImageNumber(String endingImageNumber) {
    this.endingImageNumber = endingImageNumber;
  }


  public Filings fecFileId(String fecFileId) {
    this.fecFileId = fecFileId;
    return this;
  }

  /**
   * Get fecFileId
   * @return fecFileId
   */
  @javax.annotation.Nullable
  public String getFecFileId() {
    return fecFileId;
  }

  public void setFecFileId(String fecFileId) {
    this.fecFileId = fecFileId;
  }


  public Filings fecUrl(String fecUrl) {
    this.fecUrl = fecUrl;
    return this;
  }

  /**
   * Get fecUrl
   * @return fecUrl
   */
  @javax.annotation.Nullable
  public String getFecUrl() {
    return fecUrl;
  }

  public void setFecUrl(String fecUrl) {
    this.fecUrl = fecUrl;
  }


  public Filings fileNumber(Integer fileNumber) {
    this.fileNumber = fileNumber;
    return this;
  }

  /**
   * Filing ID number
   * @return fileNumber
   */
  @javax.annotation.Nullable
  public Integer getFileNumber() {
    return fileNumber;
  }

  public void setFileNumber(Integer fileNumber) {
    this.fileNumber = fileNumber;
  }


  public Filings formCategory(String formCategory) {
    this.formCategory = formCategory;
    return this;
  }

  /**
   *  The forms filed are categorized based on the nature of the filing:     - REPORT F3, F3X, F3P, F3L, F4, F5, F7, F13     - NOTICE F5, F24, F6, F9, F10, F11     - STATEMENT F1, F2     - OTHER F1M, F8, F99, F12, FRQ 
   * @return formCategory
   */
  @javax.annotation.Nullable
  public String getFormCategory() {
    return formCategory;
  }

  public void setFormCategory(String formCategory) {
    this.formCategory = formCategory;
  }


  public Filings formType(String formType) {
    this.formType = formType;
    return this;
  }

  /**
   * The form where the underlying data comes from, for example, Form 1 would appear as F1:     - F1   Statement of Organization     - F1M  Notification of Multicandidate Status     - F2   Statement of Candidacy     - F3   Report of Receipts and Disbursements for an Authorized Committee     - F3P  Report of Receipts and Disbursements by an Authorized Committee of a Candidate for     The Office of President or Vice President     - F3L  Report of Contributions Bundled by Lobbyists/Registrants and Lobbyist/Registrant PACs     - F3X  Report of Receipts and Disbursements for other than an Authorized Committee     - F4   Report of Receipts and Disbursements for a Committee or Organization Supporting a Nomination Convention     - F5   Report of Independent Expenditures Made and Contributions Received     - F6   48 Hour Notice of Contributions/Loans Received     - F7   Report of Communication Costs by Corporations and Membership Organizations     - F8   Debt Settlement Plan     - F9   24 Hour Notice of Disbursements for Electioneering Communications     - F13  Report of Donations Accepted for Inaugural Committee     - F99  Miscellaneous Text     - FRQ  Request for Additional Information 
   * @return formType
   */
  @javax.annotation.Nullable
  public String getFormType() {
    return formType;
  }

  public void setFormType(String formType) {
    this.formType = formType;
  }


  public Filings housePersonalFunds(BigDecimal housePersonalFunds) {
    this.housePersonalFunds = housePersonalFunds;
    return this;
  }

  /**
   * House personal funds
   * @return housePersonalFunds
   */
  @javax.annotation.Nullable
  public BigDecimal getHousePersonalFunds() {
    return housePersonalFunds;
  }

  public void setHousePersonalFunds(BigDecimal housePersonalFunds) {
    this.housePersonalFunds = housePersonalFunds;
  }


  public Filings htmlUrl(String htmlUrl) {
    this.htmlUrl = htmlUrl;
    return this;
  }

  /**
   *  HTML link to the filing. 
   * @return htmlUrl
   */
  @javax.annotation.Nullable
  public String getHtmlUrl() {
    return htmlUrl;
  }

  public void setHtmlUrl(String htmlUrl) {
    this.htmlUrl = htmlUrl;
  }


  public Filings isAmended(Boolean isAmended) {
    this.isAmended = isAmended;
    return this;
  }

  /**
   *  False indicates that a report is the most recent. True indicates that the report has been superseded by an amendment. 
   * @return isAmended
   */
  @javax.annotation.Nullable
  public Boolean getIsAmended() {
    return isAmended;
  }

  public void setIsAmended(Boolean isAmended) {
    this.isAmended = isAmended;
  }


  public Filings meansFiled(String meansFiled) {
    this.meansFiled = meansFiled;
    return this;
  }

  /**
   * The method used to file with the FEC, either electronic or on paper.
   * @return meansFiled
   */
  @javax.annotation.Nullable
  public String getMeansFiled() {
    return meansFiled;
  }

  public void setMeansFiled(String meansFiled) {
    this.meansFiled = meansFiled;
  }


  public Filings mostRecent(Boolean mostRecent) {
    this.mostRecent = mostRecent;
    return this;
  }

  /**
   *  Report is either new or is the most-recently filed amendment 
   * @return mostRecent
   */
  @javax.annotation.Nullable
  public Boolean getMostRecent() {
    return mostRecent;
  }

  public void setMostRecent(Boolean mostRecent) {
    this.mostRecent = mostRecent;
  }


  public Filings mostRecentFileNumber(Integer mostRecentFileNumber) {
    this.mostRecentFileNumber = mostRecentFileNumber;
    return this;
  }

  /**
   * Get mostRecentFileNumber
   * @return mostRecentFileNumber
   */
  @javax.annotation.Nullable
  public Integer getMostRecentFileNumber() {
    return mostRecentFileNumber;
  }

  public void setMostRecentFileNumber(Integer mostRecentFileNumber) {
    this.mostRecentFileNumber = mostRecentFileNumber;
  }


  public Filings netDonations(BigDecimal netDonations) {
    this.netDonations = netDonations;
    return this;
  }

  /**
   * Net donations
   * @return netDonations
   */
  @javax.annotation.Nullable
  public BigDecimal getNetDonations() {
    return netDonations;
  }

  public void setNetDonations(BigDecimal netDonations) {
    this.netDonations = netDonations;
  }


  public Filings office(String office) {
    this.office = office;
    return this;
  }

  /**
   * Federal office candidate runs for: H, S or P
   * @return office
   */
  @javax.annotation.Nullable
  public String getOffice() {
    return office;
  }

  public void setOffice(String office) {
    this.office = office;
  }


  public Filings oppositionPersonalFunds(BigDecimal oppositionPersonalFunds) {
    this.oppositionPersonalFunds = oppositionPersonalFunds;
    return this;
  }

  /**
   * Opposition personal funds
   * @return oppositionPersonalFunds
   */
  @javax.annotation.Nullable
  public BigDecimal getOppositionPersonalFunds() {
    return oppositionPersonalFunds;
  }

  public void setOppositionPersonalFunds(BigDecimal oppositionPersonalFunds) {
    this.oppositionPersonalFunds = oppositionPersonalFunds;
  }


  public Filings pages(Integer pages) {
    this.pages = pages;
    return this;
  }

  /**
   *  Number of pages in the document 
   * @return pages
   */
  @javax.annotation.Nullable
  public Integer getPages() {
    return pages;
  }

  public void setPages(Integer pages) {
    this.pages = pages;
  }


  public Filings party(String party) {
    this.party = party;
    return this;
  }

  /**
   * Three-letter code for the party affiliated with a candidate or committee. For example, DEM for Democratic Party and REP for Republican Party.
   * @return party
   */
  @javax.annotation.Nullable
  public String getParty() {
    return party;
  }

  public void setParty(String party) {
    this.party = party;
  }


  public Filings pdfUrl(String pdfUrl) {
    this.pdfUrl = pdfUrl;
    return this;
  }

  /**
   *  pdf link to the filing 
   * @return pdfUrl
   */
  @javax.annotation.Nullable
  public String getPdfUrl() {
    return pdfUrl;
  }

  public void setPdfUrl(String pdfUrl) {
    this.pdfUrl = pdfUrl;
  }


  public Filings previousFileNumber(Integer previousFileNumber) {
    this.previousFileNumber = previousFileNumber;
    return this;
  }

  /**
   *  Previous filing ID number 
   * @return previousFileNumber
   */
  @javax.annotation.Nullable
  public Integer getPreviousFileNumber() {
    return previousFileNumber;
  }

  public void setPreviousFileNumber(Integer previousFileNumber) {
    this.previousFileNumber = previousFileNumber;
  }


  public Filings primaryGeneralIndicator(String primaryGeneralIndicator) {
    this.primaryGeneralIndicator = primaryGeneralIndicator;
    return this;
  }

  /**
   *  Primary general indicator 
   * @return primaryGeneralIndicator
   */
  @javax.annotation.Nullable
  public String getPrimaryGeneralIndicator() {
    return primaryGeneralIndicator;
  }

  public void setPrimaryGeneralIndicator(String primaryGeneralIndicator) {
    this.primaryGeneralIndicator = primaryGeneralIndicator;
  }


  public Filings receiptDate(LocalDate receiptDate) {
    this.receiptDate = receiptDate;
    return this;
  }

  /**
   * Date the FEC received the electronic or paper record
   * @return receiptDate
   */
  @javax.annotation.Nullable
  public LocalDate getReceiptDate() {
    return receiptDate;
  }

  public void setReceiptDate(LocalDate receiptDate) {
    this.receiptDate = receiptDate;
  }


  public Filings reportType(String reportType) {
    this.reportType = reportType;
    return this;
  }

  /**
   * Name of report where the underlying data comes from:     - 10D Pre-Election     - 10G Pre-General     - 10P Pre-Primary     - 10R Pre-Run-Off     - 10S Pre-Special     - 12C Pre-Convention     - 12G Pre-General     - 12P Pre-Primary     - 12R Pre-Run-Off     - 12S Pre-Special     - 30D Post-Election     - 30G Post-General     - 30P Post-Primary     - 30R Post-Run-Off     - 30S Post-Special     - 60D Post-Convention     - M1  January Monthly     - M10 October Monthly     - M11 November Monthly     - M12 December Monthly     - M2  February Monthly     - M3  March Monthly     - M4  April Monthly     - M5  May Monthly     - M6  June Monthly     - M7  July Monthly     - M8  August Monthly     - M9  September Monthly     - MY  Mid-Year Report     - Q1  April Quarterly     - Q2  July Quarterly     - Q3  October Quarterly     - TER Termination Report     - YE  Year-End     - ADJ COMP ADJUST AMEND     - CA  COMPREHENSIVE AMEND     - 90S Post Inaugural Supplement     - 90D Post Inaugural     - 48  48 Hour Notification     - 24  24 Hour Notification     - M7S July Monthly/Semi-Annual     - MSA Monthly Semi-Annual (MY)     - MYS Monthly Year End/Semi-Annual     - Q2S July Quarterly/Semi-Annual     - QSA Quarterly Semi-Annual (MY)     - QYS Quarterly Year End/Semi-Annual     - QYE Quarterly Semi-Annual (YE)     - QMS Quarterly Mid-Year/ Semi-Annual     - MSY Monthly Semi-Annual (YE) 
   * @return reportType
   */
  @javax.annotation.Nullable
  public String getReportType() {
    return reportType;
  }

  public void setReportType(String reportType) {
    this.reportType = reportType;
  }


  public Filings reportTypeFull(String reportTypeFull) {
    this.reportTypeFull = reportTypeFull;
    return this;
  }

  /**
   * Get reportTypeFull
   * @return reportTypeFull
   */
  @javax.annotation.Nullable
  public String getReportTypeFull() {
    return reportTypeFull;
  }

  public void setReportTypeFull(String reportTypeFull) {
    this.reportTypeFull = reportTypeFull;
  }


  public Filings reportYear(Integer reportYear) {
    this.reportYear = reportYear;
    return this;
  }

  /**
   *  Forms with coverage date -      year from the coverage ending date. Forms without coverage date -      year from the receipt date. 
   * @return reportYear
   */
  @javax.annotation.Nullable
  public Integer getReportYear() {
    return reportYear;
  }

  public void setReportYear(Integer reportYear) {
    this.reportYear = reportYear;
  }


  public Filings requestType(String requestType) {
    this.requestType = requestType;
    return this;
  }

  /**
   *  Requests for additional information (RFAIs) sent to filers. The request type is based on the type of document filed:     - 1 Statement of Organization     - 2 Report of Receipts and Expenditures (Form 3 and 3X)     - 3 Second Notice - Reports     - 4 Request for Additional Information     - 5 Informational - Reports     - 6 Second Notice - Statement of Organization     - 7 Failure to File     - 8 From Public Disclosure     - 9 From Multi Candidate Status 
   * @return requestType
   */
  @javax.annotation.Nullable
  public String getRequestType() {
    return requestType;
  }

  public void setRequestType(String requestType) {
    this.requestType = requestType;
  }


  public Filings senatePersonalFunds(BigDecimal senatePersonalFunds) {
    this.senatePersonalFunds = senatePersonalFunds;
    return this;
  }

  /**
   * Senate personal funds
   * @return senatePersonalFunds
   */
  @javax.annotation.Nullable
  public BigDecimal getSenatePersonalFunds() {
    return senatePersonalFunds;
  }

  public void setSenatePersonalFunds(BigDecimal senatePersonalFunds) {
    this.senatePersonalFunds = senatePersonalFunds;
  }


  public Filings state(String state) {
    this.state = state;
    return this;
  }

  /**
   * US state or territory where a candidate runs for office
   * @return state
   */
  @javax.annotation.Nullable
  public String getState() {
    return state;
  }

  public void setState(String state) {
    this.state = state;
  }


  public Filings subId(String subId) {
    this.subId = subId;
    return this;
  }

  /**
   * Get subId
   * @return subId
   */
  @javax.annotation.Nullable
  public String getSubId() {
    return subId;
  }

  public void setSubId(String subId) {
    this.subId = subId;
  }


  public Filings totalCommunicationCost(BigDecimal totalCommunicationCost) {
    this.totalCommunicationCost = totalCommunicationCost;
    return this;
  }

  /**
   * Total communications cost
   * @return totalCommunicationCost
   */
  @javax.annotation.Nullable
  public BigDecimal getTotalCommunicationCost() {
    return totalCommunicationCost;
  }

  public void setTotalCommunicationCost(BigDecimal totalCommunicationCost) {
    this.totalCommunicationCost = totalCommunicationCost;
  }


  public Filings totalDisbursements(BigDecimal totalDisbursements) {
    this.totalDisbursements = totalDisbursements;
    return this;
  }

  /**
   * Total disbursements
   * @return totalDisbursements
   */
  @javax.annotation.Nullable
  public BigDecimal getTotalDisbursements() {
    return totalDisbursements;
  }

  public void setTotalDisbursements(BigDecimal totalDisbursements) {
    this.totalDisbursements = totalDisbursements;
  }


  public Filings totalIndependentExpenditures(BigDecimal totalIndependentExpenditures) {
    this.totalIndependentExpenditures = totalIndependentExpenditures;
    return this;
  }

  /**
   * Total independent expenditures
   * @return totalIndependentExpenditures
   */
  @javax.annotation.Nullable
  public BigDecimal getTotalIndependentExpenditures() {
    return totalIndependentExpenditures;
  }

  public void setTotalIndependentExpenditures(BigDecimal totalIndependentExpenditures) {
    this.totalIndependentExpenditures = totalIndependentExpenditures;
  }


  public Filings totalIndividualContributions(BigDecimal totalIndividualContributions) {
    this.totalIndividualContributions = totalIndividualContributions;
    return this;
  }

  /**
   * Total individual contributions
   * @return totalIndividualContributions
   */
  @javax.annotation.Nullable
  public BigDecimal getTotalIndividualContributions() {
    return totalIndividualContributions;
  }

  public void setTotalIndividualContributions(BigDecimal totalIndividualContributions) {
    this.totalIndividualContributions = totalIndividualContributions;
  }


  public Filings totalReceipts(BigDecimal totalReceipts) {
    this.totalReceipts = totalReceipts;
    return this;
  }

  /**
   * Total receipts
   * @return totalReceipts
   */
  @javax.annotation.Nullable
  public BigDecimal getTotalReceipts() {
    return totalReceipts;
  }

  public void setTotalReceipts(BigDecimal totalReceipts) {
    this.totalReceipts = totalReceipts;
  }


  public Filings treasurerName(String treasurerName) {
    this.treasurerName = treasurerName;
    return this;
  }

  /**
   * Name of the Committee&#39;s treasurer. If multiple treasurers for the committee, the most recent treasurer will be shown.
   * @return treasurerName
   */
  @javax.annotation.Nullable
  public String getTreasurerName() {
    return treasurerName;
  }

  public void setTreasurerName(String treasurerName) {
    this.treasurerName = treasurerName;
  }


  public Filings updateDate(LocalDate updateDate) {
    this.updateDate = updateDate;
    return this;
  }

  /**
   * Date the record was updated
   * @return updateDate
   */
  @javax.annotation.Nullable
  public LocalDate getUpdateDate() {
    return updateDate;
  }

  public void setUpdateDate(LocalDate updateDate) {
    this.updateDate = updateDate;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Filings filings = (Filings) o;
    return Objects.equals(this.additionalBankNames, filings.additionalBankNames) &&
        Objects.equals(this.amendmentChain, filings.amendmentChain) &&
        Objects.equals(this.amendmentIndicator, filings.amendmentIndicator) &&
        Objects.equals(this.amendmentVersion, filings.amendmentVersion) &&
        Objects.equals(this.bankDepositoryCity, filings.bankDepositoryCity) &&
        Objects.equals(this.bankDepositoryName, filings.bankDepositoryName) &&
        Objects.equals(this.bankDepositoryState, filings.bankDepositoryState) &&
        Objects.equals(this.bankDepositoryStreet1, filings.bankDepositoryStreet1) &&
        Objects.equals(this.bankDepositoryStreet2, filings.bankDepositoryStreet2) &&
        Objects.equals(this.bankDepositoryZip, filings.bankDepositoryZip) &&
        Objects.equals(this.beginningImageNumber, filings.beginningImageNumber) &&
        Objects.equals(this.candidateId, filings.candidateId) &&
        Objects.equals(this.candidateName, filings.candidateName) &&
        Objects.equals(this.cashOnHandBeginningPeriod, filings.cashOnHandBeginningPeriod) &&
        Objects.equals(this.cashOnHandEndPeriod, filings.cashOnHandEndPeriod) &&
        Objects.equals(this.committeeId, filings.committeeId) &&
        Objects.equals(this.committeeName, filings.committeeName) &&
        Objects.equals(this.committeeType, filings.committeeType) &&
        Objects.equals(this.coverageEndDate, filings.coverageEndDate) &&
        Objects.equals(this.coverageStartDate, filings.coverageStartDate) &&
        Objects.equals(this.csvUrl, filings.csvUrl) &&
        Objects.equals(this.cycle, filings.cycle) &&
        Objects.equals(this.debtsOwedByCommittee, filings.debtsOwedByCommittee) &&
        Objects.equals(this.debtsOwedToCommittee, filings.debtsOwedToCommittee) &&
        Objects.equals(this.documentDescription, filings.documentDescription) &&
        Objects.equals(this.documentType, filings.documentType) &&
        Objects.equals(this.documentTypeFull, filings.documentTypeFull) &&
        Objects.equals(this.electionYear, filings.electionYear) &&
        Objects.equals(this.endingImageNumber, filings.endingImageNumber) &&
        Objects.equals(this.fecFileId, filings.fecFileId) &&
        Objects.equals(this.fecUrl, filings.fecUrl) &&
        Objects.equals(this.fileNumber, filings.fileNumber) &&
        Objects.equals(this.formCategory, filings.formCategory) &&
        Objects.equals(this.formType, filings.formType) &&
        Objects.equals(this.housePersonalFunds, filings.housePersonalFunds) &&
        Objects.equals(this.htmlUrl, filings.htmlUrl) &&
        Objects.equals(this.isAmended, filings.isAmended) &&
        Objects.equals(this.meansFiled, filings.meansFiled) &&
        Objects.equals(this.mostRecent, filings.mostRecent) &&
        Objects.equals(this.mostRecentFileNumber, filings.mostRecentFileNumber) &&
        Objects.equals(this.netDonations, filings.netDonations) &&
        Objects.equals(this.office, filings.office) &&
        Objects.equals(this.oppositionPersonalFunds, filings.oppositionPersonalFunds) &&
        Objects.equals(this.pages, filings.pages) &&
        Objects.equals(this.party, filings.party) &&
        Objects.equals(this.pdfUrl, filings.pdfUrl) &&
        Objects.equals(this.previousFileNumber, filings.previousFileNumber) &&
        Objects.equals(this.primaryGeneralIndicator, filings.primaryGeneralIndicator) &&
        Objects.equals(this.receiptDate, filings.receiptDate) &&
        Objects.equals(this.reportType, filings.reportType) &&
        Objects.equals(this.reportTypeFull, filings.reportTypeFull) &&
        Objects.equals(this.reportYear, filings.reportYear) &&
        Objects.equals(this.requestType, filings.requestType) &&
        Objects.equals(this.senatePersonalFunds, filings.senatePersonalFunds) &&
        Objects.equals(this.state, filings.state) &&
        Objects.equals(this.subId, filings.subId) &&
        Objects.equals(this.totalCommunicationCost, filings.totalCommunicationCost) &&
        Objects.equals(this.totalDisbursements, filings.totalDisbursements) &&
        Objects.equals(this.totalIndependentExpenditures, filings.totalIndependentExpenditures) &&
        Objects.equals(this.totalIndividualContributions, filings.totalIndividualContributions) &&
        Objects.equals(this.totalReceipts, filings.totalReceipts) &&
        Objects.equals(this.treasurerName, filings.treasurerName) &&
        Objects.equals(this.updateDate, filings.updateDate);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(additionalBankNames, amendmentChain, amendmentIndicator, amendmentVersion, bankDepositoryCity, bankDepositoryName, bankDepositoryState, bankDepositoryStreet1, bankDepositoryStreet2, bankDepositoryZip, beginningImageNumber, candidateId, candidateName, cashOnHandBeginningPeriod, cashOnHandEndPeriod, committeeId, committeeName, committeeType, coverageEndDate, coverageStartDate, csvUrl, cycle, debtsOwedByCommittee, debtsOwedToCommittee, documentDescription, documentType, documentTypeFull, electionYear, endingImageNumber, fecFileId, fecUrl, fileNumber, formCategory, formType, housePersonalFunds, htmlUrl, isAmended, meansFiled, mostRecent, mostRecentFileNumber, netDonations, office, oppositionPersonalFunds, pages, party, pdfUrl, previousFileNumber, primaryGeneralIndicator, receiptDate, reportType, reportTypeFull, reportYear, requestType, senatePersonalFunds, state, subId, totalCommunicationCost, totalDisbursements, totalIndependentExpenditures, totalIndividualContributions, totalReceipts, treasurerName, updateDate);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Filings {\n");
    sb.append("    additionalBankNames: ").append(toIndentedString(additionalBankNames)).append("\n");
    sb.append("    amendmentChain: ").append(toIndentedString(amendmentChain)).append("\n");
    sb.append("    amendmentIndicator: ").append(toIndentedString(amendmentIndicator)).append("\n");
    sb.append("    amendmentVersion: ").append(toIndentedString(amendmentVersion)).append("\n");
    sb.append("    bankDepositoryCity: ").append(toIndentedString(bankDepositoryCity)).append("\n");
    sb.append("    bankDepositoryName: ").append(toIndentedString(bankDepositoryName)).append("\n");
    sb.append("    bankDepositoryState: ").append(toIndentedString(bankDepositoryState)).append("\n");
    sb.append("    bankDepositoryStreet1: ").append(toIndentedString(bankDepositoryStreet1)).append("\n");
    sb.append("    bankDepositoryStreet2: ").append(toIndentedString(bankDepositoryStreet2)).append("\n");
    sb.append("    bankDepositoryZip: ").append(toIndentedString(bankDepositoryZip)).append("\n");
    sb.append("    beginningImageNumber: ").append(toIndentedString(beginningImageNumber)).append("\n");
    sb.append("    candidateId: ").append(toIndentedString(candidateId)).append("\n");
    sb.append("    candidateName: ").append(toIndentedString(candidateName)).append("\n");
    sb.append("    cashOnHandBeginningPeriod: ").append(toIndentedString(cashOnHandBeginningPeriod)).append("\n");
    sb.append("    cashOnHandEndPeriod: ").append(toIndentedString(cashOnHandEndPeriod)).append("\n");
    sb.append("    committeeId: ").append(toIndentedString(committeeId)).append("\n");
    sb.append("    committeeName: ").append(toIndentedString(committeeName)).append("\n");
    sb.append("    committeeType: ").append(toIndentedString(committeeType)).append("\n");
    sb.append("    coverageEndDate: ").append(toIndentedString(coverageEndDate)).append("\n");
    sb.append("    coverageStartDate: ").append(toIndentedString(coverageStartDate)).append("\n");
    sb.append("    csvUrl: ").append(toIndentedString(csvUrl)).append("\n");
    sb.append("    cycle: ").append(toIndentedString(cycle)).append("\n");
    sb.append("    debtsOwedByCommittee: ").append(toIndentedString(debtsOwedByCommittee)).append("\n");
    sb.append("    debtsOwedToCommittee: ").append(toIndentedString(debtsOwedToCommittee)).append("\n");
    sb.append("    documentDescription: ").append(toIndentedString(documentDescription)).append("\n");
    sb.append("    documentType: ").append(toIndentedString(documentType)).append("\n");
    sb.append("    documentTypeFull: ").append(toIndentedString(documentTypeFull)).append("\n");
    sb.append("    electionYear: ").append(toIndentedString(electionYear)).append("\n");
    sb.append("    endingImageNumber: ").append(toIndentedString(endingImageNumber)).append("\n");
    sb.append("    fecFileId: ").append(toIndentedString(fecFileId)).append("\n");
    sb.append("    fecUrl: ").append(toIndentedString(fecUrl)).append("\n");
    sb.append("    fileNumber: ").append(toIndentedString(fileNumber)).append("\n");
    sb.append("    formCategory: ").append(toIndentedString(formCategory)).append("\n");
    sb.append("    formType: ").append(toIndentedString(formType)).append("\n");
    sb.append("    housePersonalFunds: ").append(toIndentedString(housePersonalFunds)).append("\n");
    sb.append("    htmlUrl: ").append(toIndentedString(htmlUrl)).append("\n");
    sb.append("    isAmended: ").append(toIndentedString(isAmended)).append("\n");
    sb.append("    meansFiled: ").append(toIndentedString(meansFiled)).append("\n");
    sb.append("    mostRecent: ").append(toIndentedString(mostRecent)).append("\n");
    sb.append("    mostRecentFileNumber: ").append(toIndentedString(mostRecentFileNumber)).append("\n");
    sb.append("    netDonations: ").append(toIndentedString(netDonations)).append("\n");
    sb.append("    office: ").append(toIndentedString(office)).append("\n");
    sb.append("    oppositionPersonalFunds: ").append(toIndentedString(oppositionPersonalFunds)).append("\n");
    sb.append("    pages: ").append(toIndentedString(pages)).append("\n");
    sb.append("    party: ").append(toIndentedString(party)).append("\n");
    sb.append("    pdfUrl: ").append(toIndentedString(pdfUrl)).append("\n");
    sb.append("    previousFileNumber: ").append(toIndentedString(previousFileNumber)).append("\n");
    sb.append("    primaryGeneralIndicator: ").append(toIndentedString(primaryGeneralIndicator)).append("\n");
    sb.append("    receiptDate: ").append(toIndentedString(receiptDate)).append("\n");
    sb.append("    reportType: ").append(toIndentedString(reportType)).append("\n");
    sb.append("    reportTypeFull: ").append(toIndentedString(reportTypeFull)).append("\n");
    sb.append("    reportYear: ").append(toIndentedString(reportYear)).append("\n");
    sb.append("    requestType: ").append(toIndentedString(requestType)).append("\n");
    sb.append("    senatePersonalFunds: ").append(toIndentedString(senatePersonalFunds)).append("\n");
    sb.append("    state: ").append(toIndentedString(state)).append("\n");
    sb.append("    subId: ").append(toIndentedString(subId)).append("\n");
    sb.append("    totalCommunicationCost: ").append(toIndentedString(totalCommunicationCost)).append("\n");
    sb.append("    totalDisbursements: ").append(toIndentedString(totalDisbursements)).append("\n");
    sb.append("    totalIndependentExpenditures: ").append(toIndentedString(totalIndependentExpenditures)).append("\n");
    sb.append("    totalIndividualContributions: ").append(toIndentedString(totalIndividualContributions)).append("\n");
    sb.append("    totalReceipts: ").append(toIndentedString(totalReceipts)).append("\n");
    sb.append("    treasurerName: ").append(toIndentedString(treasurerName)).append("\n");
    sb.append("    updateDate: ").append(toIndentedString(updateDate)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("additional_bank_names");
    openapiFields.add("amendment_chain");
    openapiFields.add("amendment_indicator");
    openapiFields.add("amendment_version");
    openapiFields.add("bank_depository_city");
    openapiFields.add("bank_depository_name");
    openapiFields.add("bank_depository_state");
    openapiFields.add("bank_depository_street_1");
    openapiFields.add("bank_depository_street_2");
    openapiFields.add("bank_depository_zip");
    openapiFields.add("beginning_image_number");
    openapiFields.add("candidate_id");
    openapiFields.add("candidate_name");
    openapiFields.add("cash_on_hand_beginning_period");
    openapiFields.add("cash_on_hand_end_period");
    openapiFields.add("committee_id");
    openapiFields.add("committee_name");
    openapiFields.add("committee_type");
    openapiFields.add("coverage_end_date");
    openapiFields.add("coverage_start_date");
    openapiFields.add("csv_url");
    openapiFields.add("cycle");
    openapiFields.add("debts_owed_by_committee");
    openapiFields.add("debts_owed_to_committee");
    openapiFields.add("document_description");
    openapiFields.add("document_type");
    openapiFields.add("document_type_full");
    openapiFields.add("election_year");
    openapiFields.add("ending_image_number");
    openapiFields.add("fec_file_id");
    openapiFields.add("fec_url");
    openapiFields.add("file_number");
    openapiFields.add("form_category");
    openapiFields.add("form_type");
    openapiFields.add("house_personal_funds");
    openapiFields.add("html_url");
    openapiFields.add("is_amended");
    openapiFields.add("means_filed");
    openapiFields.add("most_recent");
    openapiFields.add("most_recent_file_number");
    openapiFields.add("net_donations");
    openapiFields.add("office");
    openapiFields.add("opposition_personal_funds");
    openapiFields.add("pages");
    openapiFields.add("party");
    openapiFields.add("pdf_url");
    openapiFields.add("previous_file_number");
    openapiFields.add("primary_general_indicator");
    openapiFields.add("receipt_date");
    openapiFields.add("report_type");
    openapiFields.add("report_type_full");
    openapiFields.add("report_year");
    openapiFields.add("request_type");
    openapiFields.add("senate_personal_funds");
    openapiFields.add("state");
    openapiFields.add("sub_id");
    openapiFields.add("total_communication_cost");
    openapiFields.add("total_disbursements");
    openapiFields.add("total_independent_expenditures");
    openapiFields.add("total_individual_contributions");
    openapiFields.add("total_receipts");
    openapiFields.add("treasurer_name");
    openapiFields.add("update_date");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Filings
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Filings.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Filings is not found in the empty JSON string", Filings.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Filings.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Filings` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // ensure the optional json data is an array if present
      if (jsonObj.get("additional_bank_names") != null && !jsonObj.get("additional_bank_names").isJsonNull() && !jsonObj.get("additional_bank_names").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `additional_bank_names` to be an array in the JSON string but got `%s`", jsonObj.get("additional_bank_names").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("amendment_chain") != null && !jsonObj.get("amendment_chain").isJsonNull() && !jsonObj.get("amendment_chain").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `amendment_chain` to be an array in the JSON string but got `%s`", jsonObj.get("amendment_chain").toString()));
      }
      if ((jsonObj.get("amendment_indicator") != null && !jsonObj.get("amendment_indicator").isJsonNull()) && !jsonObj.get("amendment_indicator").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `amendment_indicator` to be a primitive type in the JSON string but got `%s`", jsonObj.get("amendment_indicator").toString()));
      }
      if ((jsonObj.get("bank_depository_city") != null && !jsonObj.get("bank_depository_city").isJsonNull()) && !jsonObj.get("bank_depository_city").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `bank_depository_city` to be a primitive type in the JSON string but got `%s`", jsonObj.get("bank_depository_city").toString()));
      }
      if ((jsonObj.get("bank_depository_name") != null && !jsonObj.get("bank_depository_name").isJsonNull()) && !jsonObj.get("bank_depository_name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `bank_depository_name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("bank_depository_name").toString()));
      }
      if ((jsonObj.get("bank_depository_state") != null && !jsonObj.get("bank_depository_state").isJsonNull()) && !jsonObj.get("bank_depository_state").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `bank_depository_state` to be a primitive type in the JSON string but got `%s`", jsonObj.get("bank_depository_state").toString()));
      }
      if ((jsonObj.get("bank_depository_street_1") != null && !jsonObj.get("bank_depository_street_1").isJsonNull()) && !jsonObj.get("bank_depository_street_1").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `bank_depository_street_1` to be a primitive type in the JSON string but got `%s`", jsonObj.get("bank_depository_street_1").toString()));
      }
      if ((jsonObj.get("bank_depository_street_2") != null && !jsonObj.get("bank_depository_street_2").isJsonNull()) && !jsonObj.get("bank_depository_street_2").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `bank_depository_street_2` to be a primitive type in the JSON string but got `%s`", jsonObj.get("bank_depository_street_2").toString()));
      }
      if ((jsonObj.get("bank_depository_zip") != null && !jsonObj.get("bank_depository_zip").isJsonNull()) && !jsonObj.get("bank_depository_zip").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `bank_depository_zip` to be a primitive type in the JSON string but got `%s`", jsonObj.get("bank_depository_zip").toString()));
      }
      if ((jsonObj.get("beginning_image_number") != null && !jsonObj.get("beginning_image_number").isJsonNull()) && !jsonObj.get("beginning_image_number").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `beginning_image_number` to be a primitive type in the JSON string but got `%s`", jsonObj.get("beginning_image_number").toString()));
      }
      if ((jsonObj.get("candidate_id") != null && !jsonObj.get("candidate_id").isJsonNull()) && !jsonObj.get("candidate_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `candidate_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("candidate_id").toString()));
      }
      if ((jsonObj.get("candidate_name") != null && !jsonObj.get("candidate_name").isJsonNull()) && !jsonObj.get("candidate_name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `candidate_name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("candidate_name").toString()));
      }
      if ((jsonObj.get("committee_id") != null && !jsonObj.get("committee_id").isJsonNull()) && !jsonObj.get("committee_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `committee_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("committee_id").toString()));
      }
      if ((jsonObj.get("committee_name") != null && !jsonObj.get("committee_name").isJsonNull()) && !jsonObj.get("committee_name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `committee_name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("committee_name").toString()));
      }
      if ((jsonObj.get("committee_type") != null && !jsonObj.get("committee_type").isJsonNull()) && !jsonObj.get("committee_type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `committee_type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("committee_type").toString()));
      }
      if ((jsonObj.get("csv_url") != null && !jsonObj.get("csv_url").isJsonNull()) && !jsonObj.get("csv_url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `csv_url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("csv_url").toString()));
      }
      if ((jsonObj.get("document_description") != null && !jsonObj.get("document_description").isJsonNull()) && !jsonObj.get("document_description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `document_description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("document_description").toString()));
      }
      if ((jsonObj.get("document_type") != null && !jsonObj.get("document_type").isJsonNull()) && !jsonObj.get("document_type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `document_type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("document_type").toString()));
      }
      if ((jsonObj.get("document_type_full") != null && !jsonObj.get("document_type_full").isJsonNull()) && !jsonObj.get("document_type_full").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `document_type_full` to be a primitive type in the JSON string but got `%s`", jsonObj.get("document_type_full").toString()));
      }
      if ((jsonObj.get("ending_image_number") != null && !jsonObj.get("ending_image_number").isJsonNull()) && !jsonObj.get("ending_image_number").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ending_image_number` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ending_image_number").toString()));
      }
      if ((jsonObj.get("fec_file_id") != null && !jsonObj.get("fec_file_id").isJsonNull()) && !jsonObj.get("fec_file_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `fec_file_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("fec_file_id").toString()));
      }
      if ((jsonObj.get("fec_url") != null && !jsonObj.get("fec_url").isJsonNull()) && !jsonObj.get("fec_url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `fec_url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("fec_url").toString()));
      }
      if ((jsonObj.get("form_category") != null && !jsonObj.get("form_category").isJsonNull()) && !jsonObj.get("form_category").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `form_category` to be a primitive type in the JSON string but got `%s`", jsonObj.get("form_category").toString()));
      }
      if ((jsonObj.get("form_type") != null && !jsonObj.get("form_type").isJsonNull()) && !jsonObj.get("form_type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `form_type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("form_type").toString()));
      }
      if ((jsonObj.get("html_url") != null && !jsonObj.get("html_url").isJsonNull()) && !jsonObj.get("html_url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `html_url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("html_url").toString()));
      }
      if ((jsonObj.get("means_filed") != null && !jsonObj.get("means_filed").isJsonNull()) && !jsonObj.get("means_filed").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `means_filed` to be a primitive type in the JSON string but got `%s`", jsonObj.get("means_filed").toString()));
      }
      if ((jsonObj.get("office") != null && !jsonObj.get("office").isJsonNull()) && !jsonObj.get("office").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `office` to be a primitive type in the JSON string but got `%s`", jsonObj.get("office").toString()));
      }
      if ((jsonObj.get("party") != null && !jsonObj.get("party").isJsonNull()) && !jsonObj.get("party").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `party` to be a primitive type in the JSON string but got `%s`", jsonObj.get("party").toString()));
      }
      if ((jsonObj.get("pdf_url") != null && !jsonObj.get("pdf_url").isJsonNull()) && !jsonObj.get("pdf_url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `pdf_url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("pdf_url").toString()));
      }
      if ((jsonObj.get("primary_general_indicator") != null && !jsonObj.get("primary_general_indicator").isJsonNull()) && !jsonObj.get("primary_general_indicator").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `primary_general_indicator` to be a primitive type in the JSON string but got `%s`", jsonObj.get("primary_general_indicator").toString()));
      }
      if ((jsonObj.get("report_type") != null && !jsonObj.get("report_type").isJsonNull()) && !jsonObj.get("report_type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `report_type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("report_type").toString()));
      }
      if ((jsonObj.get("report_type_full") != null && !jsonObj.get("report_type_full").isJsonNull()) && !jsonObj.get("report_type_full").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `report_type_full` to be a primitive type in the JSON string but got `%s`", jsonObj.get("report_type_full").toString()));
      }
      if ((jsonObj.get("request_type") != null && !jsonObj.get("request_type").isJsonNull()) && !jsonObj.get("request_type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `request_type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("request_type").toString()));
      }
      if ((jsonObj.get("state") != null && !jsonObj.get("state").isJsonNull()) && !jsonObj.get("state").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `state` to be a primitive type in the JSON string but got `%s`", jsonObj.get("state").toString()));
      }
      if ((jsonObj.get("sub_id") != null && !jsonObj.get("sub_id").isJsonNull()) && !jsonObj.get("sub_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `sub_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("sub_id").toString()));
      }
      if ((jsonObj.get("treasurer_name") != null && !jsonObj.get("treasurer_name").isJsonNull()) && !jsonObj.get("treasurer_name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `treasurer_name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("treasurer_name").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Filings.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Filings' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Filings> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Filings.class));

       return (TypeAdapter<T>) new TypeAdapter<Filings>() {
           @Override
           public void write(JsonWriter out, Filings value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Filings read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Filings given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Filings
   * @throws IOException if the JSON string is invalid with respect to Filings
   */
  public static Filings fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Filings.class);
  }

  /**
   * Convert an instance of Filings to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

