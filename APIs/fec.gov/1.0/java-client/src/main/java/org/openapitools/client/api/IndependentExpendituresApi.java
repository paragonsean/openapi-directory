/*
 * OpenFEC
 * This application programming interface (API) allows you to explore the way candidates and committees fund their campaigns.    The Federal Election Commission (FEC) API is a RESTful web service supporting full-text and field-specific searches on FEC data. [Bulk downloads](https://www.fec.gov/data/advanced/?tab=bulk-data) are available on the current site. Information is tied to the underlying forms by file ID and image ID. Data is updated nightly.    There are a lot of data, and a good place to start is to use search to find interesting candidates and committees. Then, you can use their IDs to find report or line item details with the other endpoints. If you are interested in individual donors, check out contributor information in the `/schedule_a/` endpoints.    <b class=\"body\" id=\"getting_started_head\">Getting started with the openFEC API</b><br>    If you would like to use the FEC's API programmatically, you can sign up for your own API key using our form. Alternatively, you can still try out our API without an API key by using the web interface and using DEMO_KEY. Note that when you use the openFEC API you are subject to the [Terms of Service](https://github.com/fecgov/FEC/blob/master/TERMS-OF-SERVICE.md) and [Acceptable Use policy](https://github.com/fecgov/FEC/blob/master/ACCEPTABLE-USE-POLICY.md).    Signing up for an API key will enable you to place up to 1,000 calls an hour. Each call is limited to 100 results per page. You can email questions, comments or a request to get a key for 7,200 calls an hour (120 calls per minute) to <a href=\"mailto:APIinfo@fec.gov\">APIinfo@fec.gov</a>. You can also ask questions and discuss the data in a community led [group](https://groups.google.com/forum/#!forum/fec-data).    The model definitions and schema are available at [/swagger](/swagger/). This is useful for making wrappers and exploring the data.    A few restrictions limit the way you can use FEC data. For example, you canâ€™t use contributor lists for commercial purposes or to solicit donations. [Learn more here](https://www.fec.gov/updates/sale-or-use-contributor-information/).    [Inspect our source code](https://github.com/fecgov/openFEC). We welcome issues and pull requests!    <p><br></p> <h2 class=\"title\" id=\"signup_head\">Sign up for an API key</h2> <div id=\"apidatagov_signup\">Loading signup form...</div>
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.IETotalsByCandidatePage;
import java.time.LocalDate;
import org.openapitools.client.model.ScheduleEByCandidatePage;
import org.openapitools.client.model.ScheduleEEfilePage;
import org.openapitools.client.model.ScheduleEPage;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class IndependentExpendituresApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public IndependentExpendituresApi() {
        this(Configuration.getDefaultApiClient());
    }

    public IndependentExpendituresApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for schedulesScheduleEByCandidateGet
     * @param apiKey  API key for https://api.data.gov. Get one at https://api.data.gov/signup.  (required)
     * @param district Two-digit US House distirict of the office the candidate is running for. Presidential, Senate and House at-large candidates will have District 00. (optional)
     * @param supportOppose Support or opposition (optional)
     * @param electionFull &#x60;True&#x60; indicates that full election period of a candidate. &#x60;False&#x60; indicates that two year election cycle. (optional, default to true)
     * @param cycle  Filter records to only those that were applicable to a given two-year period.The cycle begins with an odd year and is named for its ending, even year.  (optional)
     * @param sortNullOnly Toggle that filters out all rows having sort column that is non-null (optional, default to false)
     * @param page For paginating through results, starting at page 1 (optional, default to 1)
     * @param state US state or territory where a candidate runs for office (optional)
     * @param committeeId  A unique identifier assigned to each committee or filer registered with the FEC. In general committee id&#39;s begin with the letter C which is followed by eight digits.  (optional)
     * @param sortNullsLast Toggle that sorts null values last (optional, default to false)
     * @param sortHideNull Hide null values on sorted column(s). (optional, default to false)
     * @param candidateId  A unique identifier assigned to each candidate registered with the FEC. If a person runs for several offices, that person will have separate candidate IDs for each office. First character indicates office - [P]residential, [H]ouse, [S]enate]. Second character is the last digit of the two-year period the ID was created. Third and fourth is the candidate state. Presidential IDs don&#39;t have state. Fifth and sixth is the district when the candidate first ran. This does not change if the candidate/member&#39;s district changes during re-districting. Presidential IDs don&#39;t have districts. The rest is sequence.  (optional)
     * @param perPage The number of results returned per page. Defaults to 20. (optional, default to 20)
     * @param office Federal office candidate runs for: H, S or P (optional)
     * @param sort Provide a field to sort by. Use &#x60;-&#x60; for descending order.  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call schedulesScheduleEByCandidateGetCall(String apiKey, String district, String supportOppose, Boolean electionFull, List<Integer> cycle, Boolean sortNullOnly, Integer page, String state, List<String> committeeId, Boolean sortNullsLast, Boolean sortHideNull, List<String> candidateId, Integer perPage, String office, String sort, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/schedules/schedule_e/by_candidate/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (district != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("district", district));
        }

        if (apiKey != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api_key", apiKey));
        }

        if (supportOppose != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("support_oppose", supportOppose));
        }

        if (electionFull != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("election_full", electionFull));
        }

        if (cycle != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "cycle", cycle));
        }

        if (sortNullOnly != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort_null_only", sortNullOnly));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (state != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("state", state));
        }

        if (committeeId != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "committee_id", committeeId));
        }

        if (sortNullsLast != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort_nulls_last", sortNullsLast));
        }

        if (sortHideNull != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort_hide_null", sortHideNull));
        }

        if (candidateId != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "candidate_id", candidateId));
        }

        if (perPage != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("per_page", perPage));
        }

        if (office != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("office", office));
        }

        if (sort != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort", sort));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKeyHeaderAuth", "ApiKeyQueryAuth", "apiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call schedulesScheduleEByCandidateGetValidateBeforeCall(String apiKey, String district, String supportOppose, Boolean electionFull, List<Integer> cycle, Boolean sortNullOnly, Integer page, String state, List<String> committeeId, Boolean sortNullsLast, Boolean sortHideNull, List<String> candidateId, Integer perPage, String office, String sort, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'apiKey' is set
        if (apiKey == null) {
            throw new ApiException("Missing the required parameter 'apiKey' when calling schedulesScheduleEByCandidateGet(Async)");
        }

        return schedulesScheduleEByCandidateGetCall(apiKey, district, supportOppose, electionFull, cycle, sortNullOnly, page, state, committeeId, sortNullsLast, sortHideNull, candidateId, perPage, office, sort, _callback);

    }

    /**
     * 
     *  Schedule E receipts aggregated by recipient candidate. To avoid double counting, memoed items are not included. 
     * @param apiKey  API key for https://api.data.gov. Get one at https://api.data.gov/signup.  (required)
     * @param district Two-digit US House distirict of the office the candidate is running for. Presidential, Senate and House at-large candidates will have District 00. (optional)
     * @param supportOppose Support or opposition (optional)
     * @param electionFull &#x60;True&#x60; indicates that full election period of a candidate. &#x60;False&#x60; indicates that two year election cycle. (optional, default to true)
     * @param cycle  Filter records to only those that were applicable to a given two-year period.The cycle begins with an odd year and is named for its ending, even year.  (optional)
     * @param sortNullOnly Toggle that filters out all rows having sort column that is non-null (optional, default to false)
     * @param page For paginating through results, starting at page 1 (optional, default to 1)
     * @param state US state or territory where a candidate runs for office (optional)
     * @param committeeId  A unique identifier assigned to each committee or filer registered with the FEC. In general committee id&#39;s begin with the letter C which is followed by eight digits.  (optional)
     * @param sortNullsLast Toggle that sorts null values last (optional, default to false)
     * @param sortHideNull Hide null values on sorted column(s). (optional, default to false)
     * @param candidateId  A unique identifier assigned to each candidate registered with the FEC. If a person runs for several offices, that person will have separate candidate IDs for each office. First character indicates office - [P]residential, [H]ouse, [S]enate]. Second character is the last digit of the two-year period the ID was created. Third and fourth is the candidate state. Presidential IDs don&#39;t have state. Fifth and sixth is the district when the candidate first ran. This does not change if the candidate/member&#39;s district changes during re-districting. Presidential IDs don&#39;t have districts. The rest is sequence.  (optional)
     * @param perPage The number of results returned per page. Defaults to 20. (optional, default to 20)
     * @param office Federal office candidate runs for: H, S or P (optional)
     * @param sort Provide a field to sort by. Use &#x60;-&#x60; for descending order.  (optional)
     * @return ScheduleEByCandidatePage
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ScheduleEByCandidatePage schedulesScheduleEByCandidateGet(String apiKey, String district, String supportOppose, Boolean electionFull, List<Integer> cycle, Boolean sortNullOnly, Integer page, String state, List<String> committeeId, Boolean sortNullsLast, Boolean sortHideNull, List<String> candidateId, Integer perPage, String office, String sort) throws ApiException {
        ApiResponse<ScheduleEByCandidatePage> localVarResp = schedulesScheduleEByCandidateGetWithHttpInfo(apiKey, district, supportOppose, electionFull, cycle, sortNullOnly, page, state, committeeId, sortNullsLast, sortHideNull, candidateId, perPage, office, sort);
        return localVarResp.getData();
    }

    /**
     * 
     *  Schedule E receipts aggregated by recipient candidate. To avoid double counting, memoed items are not included. 
     * @param apiKey  API key for https://api.data.gov. Get one at https://api.data.gov/signup.  (required)
     * @param district Two-digit US House distirict of the office the candidate is running for. Presidential, Senate and House at-large candidates will have District 00. (optional)
     * @param supportOppose Support or opposition (optional)
     * @param electionFull &#x60;True&#x60; indicates that full election period of a candidate. &#x60;False&#x60; indicates that two year election cycle. (optional, default to true)
     * @param cycle  Filter records to only those that were applicable to a given two-year period.The cycle begins with an odd year and is named for its ending, even year.  (optional)
     * @param sortNullOnly Toggle that filters out all rows having sort column that is non-null (optional, default to false)
     * @param page For paginating through results, starting at page 1 (optional, default to 1)
     * @param state US state or territory where a candidate runs for office (optional)
     * @param committeeId  A unique identifier assigned to each committee or filer registered with the FEC. In general committee id&#39;s begin with the letter C which is followed by eight digits.  (optional)
     * @param sortNullsLast Toggle that sorts null values last (optional, default to false)
     * @param sortHideNull Hide null values on sorted column(s). (optional, default to false)
     * @param candidateId  A unique identifier assigned to each candidate registered with the FEC. If a person runs for several offices, that person will have separate candidate IDs for each office. First character indicates office - [P]residential, [H]ouse, [S]enate]. Second character is the last digit of the two-year period the ID was created. Third and fourth is the candidate state. Presidential IDs don&#39;t have state. Fifth and sixth is the district when the candidate first ran. This does not change if the candidate/member&#39;s district changes during re-districting. Presidential IDs don&#39;t have districts. The rest is sequence.  (optional)
     * @param perPage The number of results returned per page. Defaults to 20. (optional, default to 20)
     * @param office Federal office candidate runs for: H, S or P (optional)
     * @param sort Provide a field to sort by. Use &#x60;-&#x60; for descending order.  (optional)
     * @return ApiResponse&lt;ScheduleEByCandidatePage&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ScheduleEByCandidatePage> schedulesScheduleEByCandidateGetWithHttpInfo(String apiKey, String district, String supportOppose, Boolean electionFull, List<Integer> cycle, Boolean sortNullOnly, Integer page, String state, List<String> committeeId, Boolean sortNullsLast, Boolean sortHideNull, List<String> candidateId, Integer perPage, String office, String sort) throws ApiException {
        okhttp3.Call localVarCall = schedulesScheduleEByCandidateGetValidateBeforeCall(apiKey, district, supportOppose, electionFull, cycle, sortNullOnly, page, state, committeeId, sortNullsLast, sortHideNull, candidateId, perPage, office, sort, null);
        Type localVarReturnType = new TypeToken<ScheduleEByCandidatePage>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     *  Schedule E receipts aggregated by recipient candidate. To avoid double counting, memoed items are not included. 
     * @param apiKey  API key for https://api.data.gov. Get one at https://api.data.gov/signup.  (required)
     * @param district Two-digit US House distirict of the office the candidate is running for. Presidential, Senate and House at-large candidates will have District 00. (optional)
     * @param supportOppose Support or opposition (optional)
     * @param electionFull &#x60;True&#x60; indicates that full election period of a candidate. &#x60;False&#x60; indicates that two year election cycle. (optional, default to true)
     * @param cycle  Filter records to only those that were applicable to a given two-year period.The cycle begins with an odd year and is named for its ending, even year.  (optional)
     * @param sortNullOnly Toggle that filters out all rows having sort column that is non-null (optional, default to false)
     * @param page For paginating through results, starting at page 1 (optional, default to 1)
     * @param state US state or territory where a candidate runs for office (optional)
     * @param committeeId  A unique identifier assigned to each committee or filer registered with the FEC. In general committee id&#39;s begin with the letter C which is followed by eight digits.  (optional)
     * @param sortNullsLast Toggle that sorts null values last (optional, default to false)
     * @param sortHideNull Hide null values on sorted column(s). (optional, default to false)
     * @param candidateId  A unique identifier assigned to each candidate registered with the FEC. If a person runs for several offices, that person will have separate candidate IDs for each office. First character indicates office - [P]residential, [H]ouse, [S]enate]. Second character is the last digit of the two-year period the ID was created. Third and fourth is the candidate state. Presidential IDs don&#39;t have state. Fifth and sixth is the district when the candidate first ran. This does not change if the candidate/member&#39;s district changes during re-districting. Presidential IDs don&#39;t have districts. The rest is sequence.  (optional)
     * @param perPage The number of results returned per page. Defaults to 20. (optional, default to 20)
     * @param office Federal office candidate runs for: H, S or P (optional)
     * @param sort Provide a field to sort by. Use &#x60;-&#x60; for descending order.  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call schedulesScheduleEByCandidateGetAsync(String apiKey, String district, String supportOppose, Boolean electionFull, List<Integer> cycle, Boolean sortNullOnly, Integer page, String state, List<String> committeeId, Boolean sortNullsLast, Boolean sortHideNull, List<String> candidateId, Integer perPage, String office, String sort, final ApiCallback<ScheduleEByCandidatePage> _callback) throws ApiException {

        okhttp3.Call localVarCall = schedulesScheduleEByCandidateGetValidateBeforeCall(apiKey, district, supportOppose, electionFull, cycle, sortNullOnly, page, state, committeeId, sortNullsLast, sortHideNull, candidateId, perPage, office, sort, _callback);
        Type localVarReturnType = new TypeToken<ScheduleEByCandidatePage>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for schedulesScheduleEEfileGet
     * @param apiKey  API key for https://api.data.gov. Get one at https://api.data.gov/signup.  (required)
     * @param maxExpenditureAmount Selects all items expended by this committee less than this amount (optional)
     * @param supportOpposeIndicator Explains if the money was spent in order to support or oppose a candidate or candidates. (Coded S or O for support or oppose.) This indicator applies to independent expenditures and communication costs. (optional)
     * @param minExpenditureDate Selects all items expended by this committee after this date (optional)
     * @param filingForm The form where the underlying data comes from, for example, Form 1 would appear as F1:     - F1   Statement of Organization     - F1M  Notification of Multicandidate Status     - F2   Statement of Candidacy     - F3   Report of Receipts and Disbursements for an Authorized Committee     - F3P  Report of Receipts and Disbursements by an Authorized Committee of a Candidate for     The Office of President or Vice President     - F3L  Report of Contributions Bundled by Lobbyists/Registrants and Lobbyist/Registrant PACs     - F3X  Report of Receipts and Disbursements for other than an Authorized Committee     - F4   Report of Receipts and Disbursements for a Committee or Organization Supporting a Nomination Convention     - F5   Report of Independent Expenditures Made and Contributions Received     - F6   48 Hour Notice of Contributions/Loans Received     - F7   Report of Communication Costs by Corporations and Membership Organizations     - F8   Debt Settlement Plan     - F9   24 Hour Notice of Disbursements for Electioneering Communications     - F13  Report of Donations Accepted for Inaugural Committee     - F99  Miscellaneous Text     - FRQ  Request for Additional Information  (optional)
     * @param maxExpenditureDate Selects all items expended by this committee before this date (optional)
     * @param maxFiledDate Timestamp of electronic or paper record that FEC received (optional)
     * @param isNotice  Record filed as 24- or 48-hour notice.  (optional)
     * @param sortNullOnly Toggle that filters out all rows having sort column that is non-null (optional, default to false)
     * @param sortHideNull Hide null values on sorted column(s). (optional, default to false)
     * @param payeeName  Name of the entity that received the payment.  (optional)
     * @param candidateId  A unique identifier assigned to each candidate registered with the FEC. If a person runs for several offices, that person will have separate candidate IDs for each office. First character indicates office - [P]residential, [H]ouse, [S]enate]. Second character is the last digit of the two-year period the ID was created. Third and fourth is the candidate state. Presidential IDs don&#39;t have state. Fifth and sixth is the district when the candidate first ran. This does not change if the candidate/member&#39;s district changes during re-districting. Presidential IDs don&#39;t have districts. The rest is sequence.  (optional)
     * @param perPage The number of results returned per page. Defaults to 20. (optional, default to 20)
     * @param candidateOfficeDistrict Two-digit US House distirict of the office the candidate is running for. Presidential, Senate and House at-large candidates will have District 00. (optional)
     * @param sort Provide a field to sort by. Use &#x60;-&#x60; for descending order.  (optional, default to -expenditure_date)
     * @param minExpenditureAmount Selects all items expended by this committee greater than this amount (optional)
     * @param spenderName The name of the committee. If a committee changes its name,     the most recent name will be shown. Committee names are not unique. Use committee_id     for looking up records. (optional)
     * @param minDisseminationDate Selects all items distributed by this committee after this date (optional)
     * @param candidateOfficeState US state or territory where a candidate runs for office (optional)
     * @param sortNullsLast Toggle that sorts null values last (optional, default to false)
     * @param page For paginating through results, starting at page 1 (optional, default to 1)
     * @param committeeId  A unique identifier assigned to each committee or filer registered with the FEC. In general committee id&#39;s begin with the letter C which is followed by eight digits.  (optional)
     * @param candidateSearch  Search for candidates by candiate id or candidate first or last name  (optional)
     * @param imageNumber  An unique identifier for each page where the electronic or paper filing is reported.  (optional)
     * @param candidateParty Three-letter code for the party affiliated with a candidate or committee. For example, DEM for Democratic Party and REP for Republican Party. (optional)
     * @param minFiledDate Timestamp of electronic or paper record that FEC received (optional)
     * @param maxDisseminationDate Selects all items distributed by this committee before this date (optional)
     * @param mostRecent  The report associated with the transaction is either new or is the most-recently filed amendment. Undetermined version (&#x60;null&#x60;) is always included.  (optional)
     * @param candidateOffice Federal office candidate runs for: H, S or P (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call schedulesScheduleEEfileGetCall(String apiKey, Integer maxExpenditureAmount, List<String> supportOpposeIndicator, LocalDate minExpenditureDate, List<String> filingForm, LocalDate maxExpenditureDate, LocalDate maxFiledDate, Boolean isNotice, Boolean sortNullOnly, Boolean sortHideNull, List<String> payeeName, List<String> candidateId, Integer perPage, List<String> candidateOfficeDistrict, String sort, Integer minExpenditureAmount, List<String> spenderName, LocalDate minDisseminationDate, List<String> candidateOfficeState, Boolean sortNullsLast, Integer page, List<String> committeeId, List<String> candidateSearch, List<String> imageNumber, List<String> candidateParty, LocalDate minFiledDate, LocalDate maxDisseminationDate, Boolean mostRecent, String candidateOffice, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/schedules/schedule_e/efile/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (maxExpenditureAmount != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("max_expenditure_amount", maxExpenditureAmount));
        }

        if (supportOpposeIndicator != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "support_oppose_indicator", supportOpposeIndicator));
        }

        if (minExpenditureDate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("min_expenditure_date", minExpenditureDate));
        }

        if (filingForm != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "filing_form", filingForm));
        }

        if (maxExpenditureDate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("max_expenditure_date", maxExpenditureDate));
        }

        if (maxFiledDate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("max_filed_date", maxFiledDate));
        }

        if (isNotice != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("is_notice", isNotice));
        }

        if (sortNullOnly != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort_null_only", sortNullOnly));
        }

        if (sortHideNull != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort_hide_null", sortHideNull));
        }

        if (payeeName != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "payee_name", payeeName));
        }

        if (candidateId != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "candidate_id", candidateId));
        }

        if (perPage != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("per_page", perPage));
        }

        if (candidateOfficeDistrict != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "candidate_office_district", candidateOfficeDistrict));
        }

        if (sort != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort", sort));
        }

        if (apiKey != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api_key", apiKey));
        }

        if (minExpenditureAmount != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("min_expenditure_amount", minExpenditureAmount));
        }

        if (spenderName != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "spender_name", spenderName));
        }

        if (minDisseminationDate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("min_dissemination_date", minDisseminationDate));
        }

        if (candidateOfficeState != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "candidate_office_state", candidateOfficeState));
        }

        if (sortNullsLast != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort_nulls_last", sortNullsLast));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (committeeId != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "committee_id", committeeId));
        }

        if (candidateSearch != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "candidate_search", candidateSearch));
        }

        if (imageNumber != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "image_number", imageNumber));
        }

        if (candidateParty != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "candidate_party", candidateParty));
        }

        if (minFiledDate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("min_filed_date", minFiledDate));
        }

        if (maxDisseminationDate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("max_dissemination_date", maxDisseminationDate));
        }

        if (mostRecent != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("most_recent", mostRecent));
        }

        if (candidateOffice != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("candidate_office", candidateOffice));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKeyHeaderAuth", "ApiKeyQueryAuth", "apiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call schedulesScheduleEEfileGetValidateBeforeCall(String apiKey, Integer maxExpenditureAmount, List<String> supportOpposeIndicator, LocalDate minExpenditureDate, List<String> filingForm, LocalDate maxExpenditureDate, LocalDate maxFiledDate, Boolean isNotice, Boolean sortNullOnly, Boolean sortHideNull, List<String> payeeName, List<String> candidateId, Integer perPage, List<String> candidateOfficeDistrict, String sort, Integer minExpenditureAmount, List<String> spenderName, LocalDate minDisseminationDate, List<String> candidateOfficeState, Boolean sortNullsLast, Integer page, List<String> committeeId, List<String> candidateSearch, List<String> imageNumber, List<String> candidateParty, LocalDate minFiledDate, LocalDate maxDisseminationDate, Boolean mostRecent, String candidateOffice, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'apiKey' is set
        if (apiKey == null) {
            throw new ApiException("Missing the required parameter 'apiKey' when calling schedulesScheduleEEfileGet(Async)");
        }

        return schedulesScheduleEEfileGetCall(apiKey, maxExpenditureAmount, supportOpposeIndicator, minExpenditureDate, filingForm, maxExpenditureDate, maxFiledDate, isNotice, sortNullOnly, sortHideNull, payeeName, candidateId, perPage, candidateOfficeDistrict, sort, minExpenditureAmount, spenderName, minDisseminationDate, candidateOfficeState, sortNullsLast, page, committeeId, candidateSearch, imageNumber, candidateParty, minFiledDate, maxDisseminationDate, mostRecent, candidateOffice, _callback);

    }

    /**
     * 
     *  Efiling endpoints provide real-time campaign finance data received from electronic filers. Efiling endpoints only contain the most recent four months of data and don&#39;t contain the processed and coded data that you can find on other endpoints. 
     * @param apiKey  API key for https://api.data.gov. Get one at https://api.data.gov/signup.  (required)
     * @param maxExpenditureAmount Selects all items expended by this committee less than this amount (optional)
     * @param supportOpposeIndicator Explains if the money was spent in order to support or oppose a candidate or candidates. (Coded S or O for support or oppose.) This indicator applies to independent expenditures and communication costs. (optional)
     * @param minExpenditureDate Selects all items expended by this committee after this date (optional)
     * @param filingForm The form where the underlying data comes from, for example, Form 1 would appear as F1:     - F1   Statement of Organization     - F1M  Notification of Multicandidate Status     - F2   Statement of Candidacy     - F3   Report of Receipts and Disbursements for an Authorized Committee     - F3P  Report of Receipts and Disbursements by an Authorized Committee of a Candidate for     The Office of President or Vice President     - F3L  Report of Contributions Bundled by Lobbyists/Registrants and Lobbyist/Registrant PACs     - F3X  Report of Receipts and Disbursements for other than an Authorized Committee     - F4   Report of Receipts and Disbursements for a Committee or Organization Supporting a Nomination Convention     - F5   Report of Independent Expenditures Made and Contributions Received     - F6   48 Hour Notice of Contributions/Loans Received     - F7   Report of Communication Costs by Corporations and Membership Organizations     - F8   Debt Settlement Plan     - F9   24 Hour Notice of Disbursements for Electioneering Communications     - F13  Report of Donations Accepted for Inaugural Committee     - F99  Miscellaneous Text     - FRQ  Request for Additional Information  (optional)
     * @param maxExpenditureDate Selects all items expended by this committee before this date (optional)
     * @param maxFiledDate Timestamp of electronic or paper record that FEC received (optional)
     * @param isNotice  Record filed as 24- or 48-hour notice.  (optional)
     * @param sortNullOnly Toggle that filters out all rows having sort column that is non-null (optional, default to false)
     * @param sortHideNull Hide null values on sorted column(s). (optional, default to false)
     * @param payeeName  Name of the entity that received the payment.  (optional)
     * @param candidateId  A unique identifier assigned to each candidate registered with the FEC. If a person runs for several offices, that person will have separate candidate IDs for each office. First character indicates office - [P]residential, [H]ouse, [S]enate]. Second character is the last digit of the two-year period the ID was created. Third and fourth is the candidate state. Presidential IDs don&#39;t have state. Fifth and sixth is the district when the candidate first ran. This does not change if the candidate/member&#39;s district changes during re-districting. Presidential IDs don&#39;t have districts. The rest is sequence.  (optional)
     * @param perPage The number of results returned per page. Defaults to 20. (optional, default to 20)
     * @param candidateOfficeDistrict Two-digit US House distirict of the office the candidate is running for. Presidential, Senate and House at-large candidates will have District 00. (optional)
     * @param sort Provide a field to sort by. Use &#x60;-&#x60; for descending order.  (optional, default to -expenditure_date)
     * @param minExpenditureAmount Selects all items expended by this committee greater than this amount (optional)
     * @param spenderName The name of the committee. If a committee changes its name,     the most recent name will be shown. Committee names are not unique. Use committee_id     for looking up records. (optional)
     * @param minDisseminationDate Selects all items distributed by this committee after this date (optional)
     * @param candidateOfficeState US state or territory where a candidate runs for office (optional)
     * @param sortNullsLast Toggle that sorts null values last (optional, default to false)
     * @param page For paginating through results, starting at page 1 (optional, default to 1)
     * @param committeeId  A unique identifier assigned to each committee or filer registered with the FEC. In general committee id&#39;s begin with the letter C which is followed by eight digits.  (optional)
     * @param candidateSearch  Search for candidates by candiate id or candidate first or last name  (optional)
     * @param imageNumber  An unique identifier for each page where the electronic or paper filing is reported.  (optional)
     * @param candidateParty Three-letter code for the party affiliated with a candidate or committee. For example, DEM for Democratic Party and REP for Republican Party. (optional)
     * @param minFiledDate Timestamp of electronic or paper record that FEC received (optional)
     * @param maxDisseminationDate Selects all items distributed by this committee before this date (optional)
     * @param mostRecent  The report associated with the transaction is either new or is the most-recently filed amendment. Undetermined version (&#x60;null&#x60;) is always included.  (optional)
     * @param candidateOffice Federal office candidate runs for: H, S or P (optional)
     * @return ScheduleEEfilePage
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ScheduleEEfilePage schedulesScheduleEEfileGet(String apiKey, Integer maxExpenditureAmount, List<String> supportOpposeIndicator, LocalDate minExpenditureDate, List<String> filingForm, LocalDate maxExpenditureDate, LocalDate maxFiledDate, Boolean isNotice, Boolean sortNullOnly, Boolean sortHideNull, List<String> payeeName, List<String> candidateId, Integer perPage, List<String> candidateOfficeDistrict, String sort, Integer minExpenditureAmount, List<String> spenderName, LocalDate minDisseminationDate, List<String> candidateOfficeState, Boolean sortNullsLast, Integer page, List<String> committeeId, List<String> candidateSearch, List<String> imageNumber, List<String> candidateParty, LocalDate minFiledDate, LocalDate maxDisseminationDate, Boolean mostRecent, String candidateOffice) throws ApiException {
        ApiResponse<ScheduleEEfilePage> localVarResp = schedulesScheduleEEfileGetWithHttpInfo(apiKey, maxExpenditureAmount, supportOpposeIndicator, minExpenditureDate, filingForm, maxExpenditureDate, maxFiledDate, isNotice, sortNullOnly, sortHideNull, payeeName, candidateId, perPage, candidateOfficeDistrict, sort, minExpenditureAmount, spenderName, minDisseminationDate, candidateOfficeState, sortNullsLast, page, committeeId, candidateSearch, imageNumber, candidateParty, minFiledDate, maxDisseminationDate, mostRecent, candidateOffice);
        return localVarResp.getData();
    }

    /**
     * 
     *  Efiling endpoints provide real-time campaign finance data received from electronic filers. Efiling endpoints only contain the most recent four months of data and don&#39;t contain the processed and coded data that you can find on other endpoints. 
     * @param apiKey  API key for https://api.data.gov. Get one at https://api.data.gov/signup.  (required)
     * @param maxExpenditureAmount Selects all items expended by this committee less than this amount (optional)
     * @param supportOpposeIndicator Explains if the money was spent in order to support or oppose a candidate or candidates. (Coded S or O for support or oppose.) This indicator applies to independent expenditures and communication costs. (optional)
     * @param minExpenditureDate Selects all items expended by this committee after this date (optional)
     * @param filingForm The form where the underlying data comes from, for example, Form 1 would appear as F1:     - F1   Statement of Organization     - F1M  Notification of Multicandidate Status     - F2   Statement of Candidacy     - F3   Report of Receipts and Disbursements for an Authorized Committee     - F3P  Report of Receipts and Disbursements by an Authorized Committee of a Candidate for     The Office of President or Vice President     - F3L  Report of Contributions Bundled by Lobbyists/Registrants and Lobbyist/Registrant PACs     - F3X  Report of Receipts and Disbursements for other than an Authorized Committee     - F4   Report of Receipts and Disbursements for a Committee or Organization Supporting a Nomination Convention     - F5   Report of Independent Expenditures Made and Contributions Received     - F6   48 Hour Notice of Contributions/Loans Received     - F7   Report of Communication Costs by Corporations and Membership Organizations     - F8   Debt Settlement Plan     - F9   24 Hour Notice of Disbursements for Electioneering Communications     - F13  Report of Donations Accepted for Inaugural Committee     - F99  Miscellaneous Text     - FRQ  Request for Additional Information  (optional)
     * @param maxExpenditureDate Selects all items expended by this committee before this date (optional)
     * @param maxFiledDate Timestamp of electronic or paper record that FEC received (optional)
     * @param isNotice  Record filed as 24- or 48-hour notice.  (optional)
     * @param sortNullOnly Toggle that filters out all rows having sort column that is non-null (optional, default to false)
     * @param sortHideNull Hide null values on sorted column(s). (optional, default to false)
     * @param payeeName  Name of the entity that received the payment.  (optional)
     * @param candidateId  A unique identifier assigned to each candidate registered with the FEC. If a person runs for several offices, that person will have separate candidate IDs for each office. First character indicates office - [P]residential, [H]ouse, [S]enate]. Second character is the last digit of the two-year period the ID was created. Third and fourth is the candidate state. Presidential IDs don&#39;t have state. Fifth and sixth is the district when the candidate first ran. This does not change if the candidate/member&#39;s district changes during re-districting. Presidential IDs don&#39;t have districts. The rest is sequence.  (optional)
     * @param perPage The number of results returned per page. Defaults to 20. (optional, default to 20)
     * @param candidateOfficeDistrict Two-digit US House distirict of the office the candidate is running for. Presidential, Senate and House at-large candidates will have District 00. (optional)
     * @param sort Provide a field to sort by. Use &#x60;-&#x60; for descending order.  (optional, default to -expenditure_date)
     * @param minExpenditureAmount Selects all items expended by this committee greater than this amount (optional)
     * @param spenderName The name of the committee. If a committee changes its name,     the most recent name will be shown. Committee names are not unique. Use committee_id     for looking up records. (optional)
     * @param minDisseminationDate Selects all items distributed by this committee after this date (optional)
     * @param candidateOfficeState US state or territory where a candidate runs for office (optional)
     * @param sortNullsLast Toggle that sorts null values last (optional, default to false)
     * @param page For paginating through results, starting at page 1 (optional, default to 1)
     * @param committeeId  A unique identifier assigned to each committee or filer registered with the FEC. In general committee id&#39;s begin with the letter C which is followed by eight digits.  (optional)
     * @param candidateSearch  Search for candidates by candiate id or candidate first or last name  (optional)
     * @param imageNumber  An unique identifier for each page where the electronic or paper filing is reported.  (optional)
     * @param candidateParty Three-letter code for the party affiliated with a candidate or committee. For example, DEM for Democratic Party and REP for Republican Party. (optional)
     * @param minFiledDate Timestamp of electronic or paper record that FEC received (optional)
     * @param maxDisseminationDate Selects all items distributed by this committee before this date (optional)
     * @param mostRecent  The report associated with the transaction is either new or is the most-recently filed amendment. Undetermined version (&#x60;null&#x60;) is always included.  (optional)
     * @param candidateOffice Federal office candidate runs for: H, S or P (optional)
     * @return ApiResponse&lt;ScheduleEEfilePage&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ScheduleEEfilePage> schedulesScheduleEEfileGetWithHttpInfo(String apiKey, Integer maxExpenditureAmount, List<String> supportOpposeIndicator, LocalDate minExpenditureDate, List<String> filingForm, LocalDate maxExpenditureDate, LocalDate maxFiledDate, Boolean isNotice, Boolean sortNullOnly, Boolean sortHideNull, List<String> payeeName, List<String> candidateId, Integer perPage, List<String> candidateOfficeDistrict, String sort, Integer minExpenditureAmount, List<String> spenderName, LocalDate minDisseminationDate, List<String> candidateOfficeState, Boolean sortNullsLast, Integer page, List<String> committeeId, List<String> candidateSearch, List<String> imageNumber, List<String> candidateParty, LocalDate minFiledDate, LocalDate maxDisseminationDate, Boolean mostRecent, String candidateOffice) throws ApiException {
        okhttp3.Call localVarCall = schedulesScheduleEEfileGetValidateBeforeCall(apiKey, maxExpenditureAmount, supportOpposeIndicator, minExpenditureDate, filingForm, maxExpenditureDate, maxFiledDate, isNotice, sortNullOnly, sortHideNull, payeeName, candidateId, perPage, candidateOfficeDistrict, sort, minExpenditureAmount, spenderName, minDisseminationDate, candidateOfficeState, sortNullsLast, page, committeeId, candidateSearch, imageNumber, candidateParty, minFiledDate, maxDisseminationDate, mostRecent, candidateOffice, null);
        Type localVarReturnType = new TypeToken<ScheduleEEfilePage>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     *  Efiling endpoints provide real-time campaign finance data received from electronic filers. Efiling endpoints only contain the most recent four months of data and don&#39;t contain the processed and coded data that you can find on other endpoints. 
     * @param apiKey  API key for https://api.data.gov. Get one at https://api.data.gov/signup.  (required)
     * @param maxExpenditureAmount Selects all items expended by this committee less than this amount (optional)
     * @param supportOpposeIndicator Explains if the money was spent in order to support or oppose a candidate or candidates. (Coded S or O for support or oppose.) This indicator applies to independent expenditures and communication costs. (optional)
     * @param minExpenditureDate Selects all items expended by this committee after this date (optional)
     * @param filingForm The form where the underlying data comes from, for example, Form 1 would appear as F1:     - F1   Statement of Organization     - F1M  Notification of Multicandidate Status     - F2   Statement of Candidacy     - F3   Report of Receipts and Disbursements for an Authorized Committee     - F3P  Report of Receipts and Disbursements by an Authorized Committee of a Candidate for     The Office of President or Vice President     - F3L  Report of Contributions Bundled by Lobbyists/Registrants and Lobbyist/Registrant PACs     - F3X  Report of Receipts and Disbursements for other than an Authorized Committee     - F4   Report of Receipts and Disbursements for a Committee or Organization Supporting a Nomination Convention     - F5   Report of Independent Expenditures Made and Contributions Received     - F6   48 Hour Notice of Contributions/Loans Received     - F7   Report of Communication Costs by Corporations and Membership Organizations     - F8   Debt Settlement Plan     - F9   24 Hour Notice of Disbursements for Electioneering Communications     - F13  Report of Donations Accepted for Inaugural Committee     - F99  Miscellaneous Text     - FRQ  Request for Additional Information  (optional)
     * @param maxExpenditureDate Selects all items expended by this committee before this date (optional)
     * @param maxFiledDate Timestamp of electronic or paper record that FEC received (optional)
     * @param isNotice  Record filed as 24- or 48-hour notice.  (optional)
     * @param sortNullOnly Toggle that filters out all rows having sort column that is non-null (optional, default to false)
     * @param sortHideNull Hide null values on sorted column(s). (optional, default to false)
     * @param payeeName  Name of the entity that received the payment.  (optional)
     * @param candidateId  A unique identifier assigned to each candidate registered with the FEC. If a person runs for several offices, that person will have separate candidate IDs for each office. First character indicates office - [P]residential, [H]ouse, [S]enate]. Second character is the last digit of the two-year period the ID was created. Third and fourth is the candidate state. Presidential IDs don&#39;t have state. Fifth and sixth is the district when the candidate first ran. This does not change if the candidate/member&#39;s district changes during re-districting. Presidential IDs don&#39;t have districts. The rest is sequence.  (optional)
     * @param perPage The number of results returned per page. Defaults to 20. (optional, default to 20)
     * @param candidateOfficeDistrict Two-digit US House distirict of the office the candidate is running for. Presidential, Senate and House at-large candidates will have District 00. (optional)
     * @param sort Provide a field to sort by. Use &#x60;-&#x60; for descending order.  (optional, default to -expenditure_date)
     * @param minExpenditureAmount Selects all items expended by this committee greater than this amount (optional)
     * @param spenderName The name of the committee. If a committee changes its name,     the most recent name will be shown. Committee names are not unique. Use committee_id     for looking up records. (optional)
     * @param minDisseminationDate Selects all items distributed by this committee after this date (optional)
     * @param candidateOfficeState US state or territory where a candidate runs for office (optional)
     * @param sortNullsLast Toggle that sorts null values last (optional, default to false)
     * @param page For paginating through results, starting at page 1 (optional, default to 1)
     * @param committeeId  A unique identifier assigned to each committee or filer registered with the FEC. In general committee id&#39;s begin with the letter C which is followed by eight digits.  (optional)
     * @param candidateSearch  Search for candidates by candiate id or candidate first or last name  (optional)
     * @param imageNumber  An unique identifier for each page where the electronic or paper filing is reported.  (optional)
     * @param candidateParty Three-letter code for the party affiliated with a candidate or committee. For example, DEM for Democratic Party and REP for Republican Party. (optional)
     * @param minFiledDate Timestamp of electronic or paper record that FEC received (optional)
     * @param maxDisseminationDate Selects all items distributed by this committee before this date (optional)
     * @param mostRecent  The report associated with the transaction is either new or is the most-recently filed amendment. Undetermined version (&#x60;null&#x60;) is always included.  (optional)
     * @param candidateOffice Federal office candidate runs for: H, S or P (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call schedulesScheduleEEfileGetAsync(String apiKey, Integer maxExpenditureAmount, List<String> supportOpposeIndicator, LocalDate minExpenditureDate, List<String> filingForm, LocalDate maxExpenditureDate, LocalDate maxFiledDate, Boolean isNotice, Boolean sortNullOnly, Boolean sortHideNull, List<String> payeeName, List<String> candidateId, Integer perPage, List<String> candidateOfficeDistrict, String sort, Integer minExpenditureAmount, List<String> spenderName, LocalDate minDisseminationDate, List<String> candidateOfficeState, Boolean sortNullsLast, Integer page, List<String> committeeId, List<String> candidateSearch, List<String> imageNumber, List<String> candidateParty, LocalDate minFiledDate, LocalDate maxDisseminationDate, Boolean mostRecent, String candidateOffice, final ApiCallback<ScheduleEEfilePage> _callback) throws ApiException {

        okhttp3.Call localVarCall = schedulesScheduleEEfileGetValidateBeforeCall(apiKey, maxExpenditureAmount, supportOpposeIndicator, minExpenditureDate, filingForm, maxExpenditureDate, maxFiledDate, isNotice, sortNullOnly, sortHideNull, payeeName, candidateId, perPage, candidateOfficeDistrict, sort, minExpenditureAmount, spenderName, minDisseminationDate, candidateOfficeState, sortNullsLast, page, committeeId, candidateSearch, imageNumber, candidateParty, minFiledDate, maxDisseminationDate, mostRecent, candidateOffice, _callback);
        Type localVarReturnType = new TypeToken<ScheduleEEfilePage>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for schedulesScheduleEGet
     * @param apiKey  API key for https://api.data.gov. Get one at https://api.data.gov/signup.  (required)
     * @param lastExpenditureDate  When sorting by &#x60;expenditure_date&#x60;, this is populated with the &#x60;expenditure_date&#x60; of the last result. However, you will need to pass the index of that last result to &#x60;last_index&#x60; to get the next page.  (optional)
     * @param maxImageNumber Maxium image number of the page where the schedule item is reported (optional)
     * @param isNotice  Record filed as 24- or 48-hour notice.  (optional)
     * @param payeeName  Name of the entity that received the payment.  (optional)
     * @param minAmount Filter for all amounts greater than a value. (optional)
     * @param candidateId  A unique identifier assigned to each candidate registered with the FEC. If a person runs for several offices, that person will have separate candidate IDs for each office. First character indicates office - [P]residential, [H]ouse, [S]enate]. Second character is the last digit of the two-year period the ID was created. Third and fourth is the candidate state. Presidential IDs don&#39;t have state. Fifth and sixth is the district when the candidate first ran. This does not change if the candidate/member&#39;s district changes during re-districting. Presidential IDs don&#39;t have districts. The rest is sequence.  (optional)
     * @param sortHideNull Hide null values on sorted column(s). (optional, default to false)
     * @param lastOfficeTotalYtd  When sorting by &#x60;office_total_ytd&#x60;, this is populated with the &#x60;office_total_ytd&#x60; of the last result. However, you will need to pass the index of that last result to &#x60;last_index&#x60; to get the next page.&#39;  (optional)
     * @param sort Provide a field to sort by. Use &#x60;-&#x60; for descending order.  (optional, default to -expenditure_date)
     * @param minFilingDate  Selects all filings received after this date  (optional)
     * @param qSpender  Keyword search for spender name or ID  (optional)
     * @param minDisseminationDate Selects all items distributed by this committee after this date (optional)
     * @param candidateOfficeState US state or territory (optional)
     * @param sortNullsLast Toggle that sorts null values last (optional, default to false)
     * @param lastExpenditureAmount  When sorting by &#x60;expenditure_amount&#x60;, this is populated with the &#x60;expenditure_amount&#x60; of the last result. However, you will need to pass the index of that last result to &#x60;last_index&#x60; to get the next page.  (optional)
     * @param imageNumber  An unique identifier for each page where the electronic or paper filing is reported.  (optional)
     * @param maxDate Maximum date (optional)
     * @param maxDisseminationDate Selects all items distributed by this committee before this date (optional)
     * @param minDate Minimum date (optional)
     * @param filingForm The form where the underlying data comes from, for example, Form 1 would appear as F1:     - F1   Statement of Organization     - F1M  Notification of Multicandidate Status     - F2   Statement of Candidacy     - F3   Report of Receipts and Disbursements for an Authorized Committee     - F3P  Report of Receipts and Disbursements by an Authorized Committee of a Candidate for     The Office of President or Vice President     - F3L  Report of Contributions Bundled by Lobbyists/Registrants and Lobbyist/Registrant PACs     - F3X  Report of Receipts and Disbursements for other than an Authorized Committee     - F4   Report of Receipts and Disbursements for a Committee or Organization Supporting a Nomination Convention     - F5   Report of Independent Expenditures Made and Contributions Received     - F6   48 Hour Notice of Contributions/Loans Received     - F7   Report of Communication Costs by Corporations and Membership Organizations     - F8   Debt Settlement Plan     - F9   24 Hour Notice of Disbursements for Electioneering Communications     - F13  Report of Donations Accepted for Inaugural Committee     - F99  Miscellaneous Text     - FRQ  Request for Additional Information  (optional)
     * @param supportOpposeIndicator Explains if the money was spent in order to support or oppose a candidate or candidates. (Coded S or O for support or oppose.) This indicator applies to independent expenditures and communication costs. (optional)
     * @param minImageNumber Minium image number of the page where the schedule item is reported (optional)
     * @param cycle  Filter records to only those that were applicable to a given two-year period.The cycle begins with an odd year and is named for its ending, even year.  (optional)
     * @param maxFilingDate  Selects all filings received before this date  (optional)
     * @param sortNullOnly Toggle that filters out all rows having sort column that is non-null (optional, default to false)
     * @param lastSupportOpposeIndicator  When sorting by &#x60;support_oppose_indicator&#x60;, this is populated with the &#x60;support_oppose_indicator&#x60; of the last result. However, you will need to pass the index of that last result to &#x60;last_index&#x60; to get the next page.&#39;  (optional)
     * @param lastIndex Index of last result from previous page (optional)
     * @param perPage The number of results returned per page. Defaults to 20. (optional, default to 20)
     * @param candidateOfficeDistrict Two-digit US House distirict of the office the candidate is running for. Presidential, Senate and House at-large candidates will have District 00. (optional)
     * @param lineNumber Filter for form and line number using the following format: &#x60;FORM-LINENUMBER&#x60;.  For example an argument such as &#x60;F3X-16&#x60; would filter down to all entries from form &#x60;F3X&#x60; line number &#x60;16&#x60;. (optional)
     * @param committeeId  A unique identifier assigned to each committee or filer registered with the FEC. In general committee id&#39;s begin with the letter C which is followed by eight digits.  (optional)
     * @param candidateParty Three-letter code for the party affiliated with a candidate or committee. For example, DEM for Democratic Party and REP for Republican Party. (optional)
     * @param maxAmount Filter for all amounts less than a value. (optional)
     * @param mostRecent  The report associated with the transaction is either new or is the most-recently filed amendment. Undetermined version (&#x60;null&#x60;) is always included.  (optional)
     * @param candidateOffice Federal office candidate runs for: H, S or P (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call schedulesScheduleEGetCall(String apiKey, LocalDate lastExpenditureDate, String maxImageNumber, List<Boolean> isNotice, List<String> payeeName, String minAmount, List<String> candidateId, Boolean sortHideNull, Float lastOfficeTotalYtd, String sort, LocalDate minFilingDate, List<String> qSpender, LocalDate minDisseminationDate, List<String> candidateOfficeState, Boolean sortNullsLast, Float lastExpenditureAmount, List<String> imageNumber, LocalDate maxDate, LocalDate maxDisseminationDate, LocalDate minDate, List<String> filingForm, List<String> supportOpposeIndicator, String minImageNumber, List<Integer> cycle, LocalDate maxFilingDate, Boolean sortNullOnly, String lastSupportOpposeIndicator, Integer lastIndex, Integer perPage, List<String> candidateOfficeDistrict, String lineNumber, List<String> committeeId, List<String> candidateParty, String maxAmount, Boolean mostRecent, List<String> candidateOffice, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/schedules/schedule_e/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (lastExpenditureDate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("last_expenditure_date", lastExpenditureDate));
        }

        if (maxImageNumber != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("max_image_number", maxImageNumber));
        }

        if (isNotice != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "is_notice", isNotice));
        }

        if (payeeName != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "payee_name", payeeName));
        }

        if (minAmount != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("min_amount", minAmount));
        }

        if (candidateId != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "candidate_id", candidateId));
        }

        if (sortHideNull != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort_hide_null", sortHideNull));
        }

        if (lastOfficeTotalYtd != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("last_office_total_ytd", lastOfficeTotalYtd));
        }

        if (sort != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort", sort));
        }

        if (minFilingDate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("min_filing_date", minFilingDate));
        }

        if (qSpender != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "q_spender", qSpender));
        }

        if (minDisseminationDate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("min_dissemination_date", minDisseminationDate));
        }

        if (candidateOfficeState != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "candidate_office_state", candidateOfficeState));
        }

        if (sortNullsLast != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort_nulls_last", sortNullsLast));
        }

        if (lastExpenditureAmount != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("last_expenditure_amount", lastExpenditureAmount));
        }

        if (imageNumber != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "image_number", imageNumber));
        }

        if (maxDate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("max_date", maxDate));
        }

        if (maxDisseminationDate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("max_dissemination_date", maxDisseminationDate));
        }

        if (minDate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("min_date", minDate));
        }

        if (filingForm != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "filing_form", filingForm));
        }

        if (supportOpposeIndicator != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "support_oppose_indicator", supportOpposeIndicator));
        }

        if (minImageNumber != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("min_image_number", minImageNumber));
        }

        if (cycle != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "cycle", cycle));
        }

        if (maxFilingDate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("max_filing_date", maxFilingDate));
        }

        if (sortNullOnly != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort_null_only", sortNullOnly));
        }

        if (lastSupportOpposeIndicator != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("last_support_oppose_indicator", lastSupportOpposeIndicator));
        }

        if (lastIndex != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("last_index", lastIndex));
        }

        if (perPage != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("per_page", perPage));
        }

        if (candidateOfficeDistrict != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "candidate_office_district", candidateOfficeDistrict));
        }

        if (lineNumber != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("line_number", lineNumber));
        }

        if (apiKey != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api_key", apiKey));
        }

        if (committeeId != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "committee_id", committeeId));
        }

        if (candidateParty != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "candidate_party", candidateParty));
        }

        if (maxAmount != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("max_amount", maxAmount));
        }

        if (mostRecent != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("most_recent", mostRecent));
        }

        if (candidateOffice != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "candidate_office", candidateOffice));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKeyHeaderAuth", "ApiKeyQueryAuth", "apiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call schedulesScheduleEGetValidateBeforeCall(String apiKey, LocalDate lastExpenditureDate, String maxImageNumber, List<Boolean> isNotice, List<String> payeeName, String minAmount, List<String> candidateId, Boolean sortHideNull, Float lastOfficeTotalYtd, String sort, LocalDate minFilingDate, List<String> qSpender, LocalDate minDisseminationDate, List<String> candidateOfficeState, Boolean sortNullsLast, Float lastExpenditureAmount, List<String> imageNumber, LocalDate maxDate, LocalDate maxDisseminationDate, LocalDate minDate, List<String> filingForm, List<String> supportOpposeIndicator, String minImageNumber, List<Integer> cycle, LocalDate maxFilingDate, Boolean sortNullOnly, String lastSupportOpposeIndicator, Integer lastIndex, Integer perPage, List<String> candidateOfficeDistrict, String lineNumber, List<String> committeeId, List<String> candidateParty, String maxAmount, Boolean mostRecent, List<String> candidateOffice, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'apiKey' is set
        if (apiKey == null) {
            throw new ApiException("Missing the required parameter 'apiKey' when calling schedulesScheduleEGet(Async)");
        }

        return schedulesScheduleEGetCall(apiKey, lastExpenditureDate, maxImageNumber, isNotice, payeeName, minAmount, candidateId, sortHideNull, lastOfficeTotalYtd, sort, minFilingDate, qSpender, minDisseminationDate, candidateOfficeState, sortNullsLast, lastExpenditureAmount, imageNumber, maxDate, maxDisseminationDate, minDate, filingForm, supportOpposeIndicator, minImageNumber, cycle, maxFilingDate, sortNullOnly, lastSupportOpposeIndicator, lastIndex, perPage, candidateOfficeDistrict, lineNumber, committeeId, candidateParty, maxAmount, mostRecent, candidateOffice, _callback);

    }

    /**
     * 
     *  Schedule E covers the line item expenditures for independent expenditures. For example, if a super PAC bought ads on TV to oppose a federal candidate, each ad purchase would be recorded here with the expenditure amount, name and id of the candidate, and whether the ad supported or opposed the candidate.  An independent expenditure is an expenditure for a communication \&quot;expressly advocating the election or defeat of a clearly identified candidate that is not made in cooperation, consultation, or concert with, or at the request or suggestion of, a candidate, a candidateâ€™s authorized committee, or their agents, or a political party or its agents.\&quot;  Aggregates by candidate do not include 24 and 48 hour reports. This ensures we don&#39;t double count expenditures and the totals are more accurate. You can still find the information from 24 and 48 hour reports in &#x60;/schedule/schedule_e/&#x60;.  Due to the large quantity of Schedule E filings, this endpoint is not paginated by page number. Instead, you can request the next page of results by adding the values in the &#x60;last_indexes&#x60; object from &#x60;pagination&#x60; to the URL of your last request. For example, when sorting by &#x60;expenditure_amount&#x60;, you might receive a page of results with the following pagination information:  &#x60;&#x60;&#x60;  \&quot;pagination\&quot;: {     \&quot;count\&quot;: 152623,     \&quot;last_indexes\&quot;: {       \&quot;last_index\&quot;: \&quot;3023037\&quot;,       \&quot;last_expenditure_amount\&quot;: -17348.5     },     \&quot;per_page\&quot;: 20,     \&quot;pages\&quot;: 7632   } } &#x60;&#x60;&#x60;  To fetch the next page of sorted results, append &#x60;last_index&#x3D;3023037&#x60; and &#x60;last_expenditure_amount&#x3D;&#x60; to the URL.  We strongly advise paging through these results by using the sort indices (defaults to sort by disbursement date, e.g. &#x60;last_disbursement_date&#x60;), otherwise some resources may be unintentionally filtered out.  This resource uses keyset pagination to improve query performance and these indices are required to properly page through this large dataset.  Note: because the Schedule E data includes many records, counts for large result sets are approximate; you will want to page through the records until no records are returned. 
     * @param apiKey  API key for https://api.data.gov. Get one at https://api.data.gov/signup.  (required)
     * @param lastExpenditureDate  When sorting by &#x60;expenditure_date&#x60;, this is populated with the &#x60;expenditure_date&#x60; of the last result. However, you will need to pass the index of that last result to &#x60;last_index&#x60; to get the next page.  (optional)
     * @param maxImageNumber Maxium image number of the page where the schedule item is reported (optional)
     * @param isNotice  Record filed as 24- or 48-hour notice.  (optional)
     * @param payeeName  Name of the entity that received the payment.  (optional)
     * @param minAmount Filter for all amounts greater than a value. (optional)
     * @param candidateId  A unique identifier assigned to each candidate registered with the FEC. If a person runs for several offices, that person will have separate candidate IDs for each office. First character indicates office - [P]residential, [H]ouse, [S]enate]. Second character is the last digit of the two-year period the ID was created. Third and fourth is the candidate state. Presidential IDs don&#39;t have state. Fifth and sixth is the district when the candidate first ran. This does not change if the candidate/member&#39;s district changes during re-districting. Presidential IDs don&#39;t have districts. The rest is sequence.  (optional)
     * @param sortHideNull Hide null values on sorted column(s). (optional, default to false)
     * @param lastOfficeTotalYtd  When sorting by &#x60;office_total_ytd&#x60;, this is populated with the &#x60;office_total_ytd&#x60; of the last result. However, you will need to pass the index of that last result to &#x60;last_index&#x60; to get the next page.&#39;  (optional)
     * @param sort Provide a field to sort by. Use &#x60;-&#x60; for descending order.  (optional, default to -expenditure_date)
     * @param minFilingDate  Selects all filings received after this date  (optional)
     * @param qSpender  Keyword search for spender name or ID  (optional)
     * @param minDisseminationDate Selects all items distributed by this committee after this date (optional)
     * @param candidateOfficeState US state or territory (optional)
     * @param sortNullsLast Toggle that sorts null values last (optional, default to false)
     * @param lastExpenditureAmount  When sorting by &#x60;expenditure_amount&#x60;, this is populated with the &#x60;expenditure_amount&#x60; of the last result. However, you will need to pass the index of that last result to &#x60;last_index&#x60; to get the next page.  (optional)
     * @param imageNumber  An unique identifier for each page where the electronic or paper filing is reported.  (optional)
     * @param maxDate Maximum date (optional)
     * @param maxDisseminationDate Selects all items distributed by this committee before this date (optional)
     * @param minDate Minimum date (optional)
     * @param filingForm The form where the underlying data comes from, for example, Form 1 would appear as F1:     - F1   Statement of Organization     - F1M  Notification of Multicandidate Status     - F2   Statement of Candidacy     - F3   Report of Receipts and Disbursements for an Authorized Committee     - F3P  Report of Receipts and Disbursements by an Authorized Committee of a Candidate for     The Office of President or Vice President     - F3L  Report of Contributions Bundled by Lobbyists/Registrants and Lobbyist/Registrant PACs     - F3X  Report of Receipts and Disbursements for other than an Authorized Committee     - F4   Report of Receipts and Disbursements for a Committee or Organization Supporting a Nomination Convention     - F5   Report of Independent Expenditures Made and Contributions Received     - F6   48 Hour Notice of Contributions/Loans Received     - F7   Report of Communication Costs by Corporations and Membership Organizations     - F8   Debt Settlement Plan     - F9   24 Hour Notice of Disbursements for Electioneering Communications     - F13  Report of Donations Accepted for Inaugural Committee     - F99  Miscellaneous Text     - FRQ  Request for Additional Information  (optional)
     * @param supportOpposeIndicator Explains if the money was spent in order to support or oppose a candidate or candidates. (Coded S or O for support or oppose.) This indicator applies to independent expenditures and communication costs. (optional)
     * @param minImageNumber Minium image number of the page where the schedule item is reported (optional)
     * @param cycle  Filter records to only those that were applicable to a given two-year period.The cycle begins with an odd year and is named for its ending, even year.  (optional)
     * @param maxFilingDate  Selects all filings received before this date  (optional)
     * @param sortNullOnly Toggle that filters out all rows having sort column that is non-null (optional, default to false)
     * @param lastSupportOpposeIndicator  When sorting by &#x60;support_oppose_indicator&#x60;, this is populated with the &#x60;support_oppose_indicator&#x60; of the last result. However, you will need to pass the index of that last result to &#x60;last_index&#x60; to get the next page.&#39;  (optional)
     * @param lastIndex Index of last result from previous page (optional)
     * @param perPage The number of results returned per page. Defaults to 20. (optional, default to 20)
     * @param candidateOfficeDistrict Two-digit US House distirict of the office the candidate is running for. Presidential, Senate and House at-large candidates will have District 00. (optional)
     * @param lineNumber Filter for form and line number using the following format: &#x60;FORM-LINENUMBER&#x60;.  For example an argument such as &#x60;F3X-16&#x60; would filter down to all entries from form &#x60;F3X&#x60; line number &#x60;16&#x60;. (optional)
     * @param committeeId  A unique identifier assigned to each committee or filer registered with the FEC. In general committee id&#39;s begin with the letter C which is followed by eight digits.  (optional)
     * @param candidateParty Three-letter code for the party affiliated with a candidate or committee. For example, DEM for Democratic Party and REP for Republican Party. (optional)
     * @param maxAmount Filter for all amounts less than a value. (optional)
     * @param mostRecent  The report associated with the transaction is either new or is the most-recently filed amendment. Undetermined version (&#x60;null&#x60;) is always included.  (optional)
     * @param candidateOffice Federal office candidate runs for: H, S or P (optional)
     * @return ScheduleEPage
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ScheduleEPage schedulesScheduleEGet(String apiKey, LocalDate lastExpenditureDate, String maxImageNumber, List<Boolean> isNotice, List<String> payeeName, String minAmount, List<String> candidateId, Boolean sortHideNull, Float lastOfficeTotalYtd, String sort, LocalDate minFilingDate, List<String> qSpender, LocalDate minDisseminationDate, List<String> candidateOfficeState, Boolean sortNullsLast, Float lastExpenditureAmount, List<String> imageNumber, LocalDate maxDate, LocalDate maxDisseminationDate, LocalDate minDate, List<String> filingForm, List<String> supportOpposeIndicator, String minImageNumber, List<Integer> cycle, LocalDate maxFilingDate, Boolean sortNullOnly, String lastSupportOpposeIndicator, Integer lastIndex, Integer perPage, List<String> candidateOfficeDistrict, String lineNumber, List<String> committeeId, List<String> candidateParty, String maxAmount, Boolean mostRecent, List<String> candidateOffice) throws ApiException {
        ApiResponse<ScheduleEPage> localVarResp = schedulesScheduleEGetWithHttpInfo(apiKey, lastExpenditureDate, maxImageNumber, isNotice, payeeName, minAmount, candidateId, sortHideNull, lastOfficeTotalYtd, sort, minFilingDate, qSpender, minDisseminationDate, candidateOfficeState, sortNullsLast, lastExpenditureAmount, imageNumber, maxDate, maxDisseminationDate, minDate, filingForm, supportOpposeIndicator, minImageNumber, cycle, maxFilingDate, sortNullOnly, lastSupportOpposeIndicator, lastIndex, perPage, candidateOfficeDistrict, lineNumber, committeeId, candidateParty, maxAmount, mostRecent, candidateOffice);
        return localVarResp.getData();
    }

    /**
     * 
     *  Schedule E covers the line item expenditures for independent expenditures. For example, if a super PAC bought ads on TV to oppose a federal candidate, each ad purchase would be recorded here with the expenditure amount, name and id of the candidate, and whether the ad supported or opposed the candidate.  An independent expenditure is an expenditure for a communication \&quot;expressly advocating the election or defeat of a clearly identified candidate that is not made in cooperation, consultation, or concert with, or at the request or suggestion of, a candidate, a candidateâ€™s authorized committee, or their agents, or a political party or its agents.\&quot;  Aggregates by candidate do not include 24 and 48 hour reports. This ensures we don&#39;t double count expenditures and the totals are more accurate. You can still find the information from 24 and 48 hour reports in &#x60;/schedule/schedule_e/&#x60;.  Due to the large quantity of Schedule E filings, this endpoint is not paginated by page number. Instead, you can request the next page of results by adding the values in the &#x60;last_indexes&#x60; object from &#x60;pagination&#x60; to the URL of your last request. For example, when sorting by &#x60;expenditure_amount&#x60;, you might receive a page of results with the following pagination information:  &#x60;&#x60;&#x60;  \&quot;pagination\&quot;: {     \&quot;count\&quot;: 152623,     \&quot;last_indexes\&quot;: {       \&quot;last_index\&quot;: \&quot;3023037\&quot;,       \&quot;last_expenditure_amount\&quot;: -17348.5     },     \&quot;per_page\&quot;: 20,     \&quot;pages\&quot;: 7632   } } &#x60;&#x60;&#x60;  To fetch the next page of sorted results, append &#x60;last_index&#x3D;3023037&#x60; and &#x60;last_expenditure_amount&#x3D;&#x60; to the URL.  We strongly advise paging through these results by using the sort indices (defaults to sort by disbursement date, e.g. &#x60;last_disbursement_date&#x60;), otherwise some resources may be unintentionally filtered out.  This resource uses keyset pagination to improve query performance and these indices are required to properly page through this large dataset.  Note: because the Schedule E data includes many records, counts for large result sets are approximate; you will want to page through the records until no records are returned. 
     * @param apiKey  API key for https://api.data.gov. Get one at https://api.data.gov/signup.  (required)
     * @param lastExpenditureDate  When sorting by &#x60;expenditure_date&#x60;, this is populated with the &#x60;expenditure_date&#x60; of the last result. However, you will need to pass the index of that last result to &#x60;last_index&#x60; to get the next page.  (optional)
     * @param maxImageNumber Maxium image number of the page where the schedule item is reported (optional)
     * @param isNotice  Record filed as 24- or 48-hour notice.  (optional)
     * @param payeeName  Name of the entity that received the payment.  (optional)
     * @param minAmount Filter for all amounts greater than a value. (optional)
     * @param candidateId  A unique identifier assigned to each candidate registered with the FEC. If a person runs for several offices, that person will have separate candidate IDs for each office. First character indicates office - [P]residential, [H]ouse, [S]enate]. Second character is the last digit of the two-year period the ID was created. Third and fourth is the candidate state. Presidential IDs don&#39;t have state. Fifth and sixth is the district when the candidate first ran. This does not change if the candidate/member&#39;s district changes during re-districting. Presidential IDs don&#39;t have districts. The rest is sequence.  (optional)
     * @param sortHideNull Hide null values on sorted column(s). (optional, default to false)
     * @param lastOfficeTotalYtd  When sorting by &#x60;office_total_ytd&#x60;, this is populated with the &#x60;office_total_ytd&#x60; of the last result. However, you will need to pass the index of that last result to &#x60;last_index&#x60; to get the next page.&#39;  (optional)
     * @param sort Provide a field to sort by. Use &#x60;-&#x60; for descending order.  (optional, default to -expenditure_date)
     * @param minFilingDate  Selects all filings received after this date  (optional)
     * @param qSpender  Keyword search for spender name or ID  (optional)
     * @param minDisseminationDate Selects all items distributed by this committee after this date (optional)
     * @param candidateOfficeState US state or territory (optional)
     * @param sortNullsLast Toggle that sorts null values last (optional, default to false)
     * @param lastExpenditureAmount  When sorting by &#x60;expenditure_amount&#x60;, this is populated with the &#x60;expenditure_amount&#x60; of the last result. However, you will need to pass the index of that last result to &#x60;last_index&#x60; to get the next page.  (optional)
     * @param imageNumber  An unique identifier for each page where the electronic or paper filing is reported.  (optional)
     * @param maxDate Maximum date (optional)
     * @param maxDisseminationDate Selects all items distributed by this committee before this date (optional)
     * @param minDate Minimum date (optional)
     * @param filingForm The form where the underlying data comes from, for example, Form 1 would appear as F1:     - F1   Statement of Organization     - F1M  Notification of Multicandidate Status     - F2   Statement of Candidacy     - F3   Report of Receipts and Disbursements for an Authorized Committee     - F3P  Report of Receipts and Disbursements by an Authorized Committee of a Candidate for     The Office of President or Vice President     - F3L  Report of Contributions Bundled by Lobbyists/Registrants and Lobbyist/Registrant PACs     - F3X  Report of Receipts and Disbursements for other than an Authorized Committee     - F4   Report of Receipts and Disbursements for a Committee or Organization Supporting a Nomination Convention     - F5   Report of Independent Expenditures Made and Contributions Received     - F6   48 Hour Notice of Contributions/Loans Received     - F7   Report of Communication Costs by Corporations and Membership Organizations     - F8   Debt Settlement Plan     - F9   24 Hour Notice of Disbursements for Electioneering Communications     - F13  Report of Donations Accepted for Inaugural Committee     - F99  Miscellaneous Text     - FRQ  Request for Additional Information  (optional)
     * @param supportOpposeIndicator Explains if the money was spent in order to support or oppose a candidate or candidates. (Coded S or O for support or oppose.) This indicator applies to independent expenditures and communication costs. (optional)
     * @param minImageNumber Minium image number of the page where the schedule item is reported (optional)
     * @param cycle  Filter records to only those that were applicable to a given two-year period.The cycle begins with an odd year and is named for its ending, even year.  (optional)
     * @param maxFilingDate  Selects all filings received before this date  (optional)
     * @param sortNullOnly Toggle that filters out all rows having sort column that is non-null (optional, default to false)
     * @param lastSupportOpposeIndicator  When sorting by &#x60;support_oppose_indicator&#x60;, this is populated with the &#x60;support_oppose_indicator&#x60; of the last result. However, you will need to pass the index of that last result to &#x60;last_index&#x60; to get the next page.&#39;  (optional)
     * @param lastIndex Index of last result from previous page (optional)
     * @param perPage The number of results returned per page. Defaults to 20. (optional, default to 20)
     * @param candidateOfficeDistrict Two-digit US House distirict of the office the candidate is running for. Presidential, Senate and House at-large candidates will have District 00. (optional)
     * @param lineNumber Filter for form and line number using the following format: &#x60;FORM-LINENUMBER&#x60;.  For example an argument such as &#x60;F3X-16&#x60; would filter down to all entries from form &#x60;F3X&#x60; line number &#x60;16&#x60;. (optional)
     * @param committeeId  A unique identifier assigned to each committee or filer registered with the FEC. In general committee id&#39;s begin with the letter C which is followed by eight digits.  (optional)
     * @param candidateParty Three-letter code for the party affiliated with a candidate or committee. For example, DEM for Democratic Party and REP for Republican Party. (optional)
     * @param maxAmount Filter for all amounts less than a value. (optional)
     * @param mostRecent  The report associated with the transaction is either new or is the most-recently filed amendment. Undetermined version (&#x60;null&#x60;) is always included.  (optional)
     * @param candidateOffice Federal office candidate runs for: H, S or P (optional)
     * @return ApiResponse&lt;ScheduleEPage&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ScheduleEPage> schedulesScheduleEGetWithHttpInfo(String apiKey, LocalDate lastExpenditureDate, String maxImageNumber, List<Boolean> isNotice, List<String> payeeName, String minAmount, List<String> candidateId, Boolean sortHideNull, Float lastOfficeTotalYtd, String sort, LocalDate minFilingDate, List<String> qSpender, LocalDate minDisseminationDate, List<String> candidateOfficeState, Boolean sortNullsLast, Float lastExpenditureAmount, List<String> imageNumber, LocalDate maxDate, LocalDate maxDisseminationDate, LocalDate minDate, List<String> filingForm, List<String> supportOpposeIndicator, String minImageNumber, List<Integer> cycle, LocalDate maxFilingDate, Boolean sortNullOnly, String lastSupportOpposeIndicator, Integer lastIndex, Integer perPage, List<String> candidateOfficeDistrict, String lineNumber, List<String> committeeId, List<String> candidateParty, String maxAmount, Boolean mostRecent, List<String> candidateOffice) throws ApiException {
        okhttp3.Call localVarCall = schedulesScheduleEGetValidateBeforeCall(apiKey, lastExpenditureDate, maxImageNumber, isNotice, payeeName, minAmount, candidateId, sortHideNull, lastOfficeTotalYtd, sort, minFilingDate, qSpender, minDisseminationDate, candidateOfficeState, sortNullsLast, lastExpenditureAmount, imageNumber, maxDate, maxDisseminationDate, minDate, filingForm, supportOpposeIndicator, minImageNumber, cycle, maxFilingDate, sortNullOnly, lastSupportOpposeIndicator, lastIndex, perPage, candidateOfficeDistrict, lineNumber, committeeId, candidateParty, maxAmount, mostRecent, candidateOffice, null);
        Type localVarReturnType = new TypeToken<ScheduleEPage>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     *  Schedule E covers the line item expenditures for independent expenditures. For example, if a super PAC bought ads on TV to oppose a federal candidate, each ad purchase would be recorded here with the expenditure amount, name and id of the candidate, and whether the ad supported or opposed the candidate.  An independent expenditure is an expenditure for a communication \&quot;expressly advocating the election or defeat of a clearly identified candidate that is not made in cooperation, consultation, or concert with, or at the request or suggestion of, a candidate, a candidateâ€™s authorized committee, or their agents, or a political party or its agents.\&quot;  Aggregates by candidate do not include 24 and 48 hour reports. This ensures we don&#39;t double count expenditures and the totals are more accurate. You can still find the information from 24 and 48 hour reports in &#x60;/schedule/schedule_e/&#x60;.  Due to the large quantity of Schedule E filings, this endpoint is not paginated by page number. Instead, you can request the next page of results by adding the values in the &#x60;last_indexes&#x60; object from &#x60;pagination&#x60; to the URL of your last request. For example, when sorting by &#x60;expenditure_amount&#x60;, you might receive a page of results with the following pagination information:  &#x60;&#x60;&#x60;  \&quot;pagination\&quot;: {     \&quot;count\&quot;: 152623,     \&quot;last_indexes\&quot;: {       \&quot;last_index\&quot;: \&quot;3023037\&quot;,       \&quot;last_expenditure_amount\&quot;: -17348.5     },     \&quot;per_page\&quot;: 20,     \&quot;pages\&quot;: 7632   } } &#x60;&#x60;&#x60;  To fetch the next page of sorted results, append &#x60;last_index&#x3D;3023037&#x60; and &#x60;last_expenditure_amount&#x3D;&#x60; to the URL.  We strongly advise paging through these results by using the sort indices (defaults to sort by disbursement date, e.g. &#x60;last_disbursement_date&#x60;), otherwise some resources may be unintentionally filtered out.  This resource uses keyset pagination to improve query performance and these indices are required to properly page through this large dataset.  Note: because the Schedule E data includes many records, counts for large result sets are approximate; you will want to page through the records until no records are returned. 
     * @param apiKey  API key for https://api.data.gov. Get one at https://api.data.gov/signup.  (required)
     * @param lastExpenditureDate  When sorting by &#x60;expenditure_date&#x60;, this is populated with the &#x60;expenditure_date&#x60; of the last result. However, you will need to pass the index of that last result to &#x60;last_index&#x60; to get the next page.  (optional)
     * @param maxImageNumber Maxium image number of the page where the schedule item is reported (optional)
     * @param isNotice  Record filed as 24- or 48-hour notice.  (optional)
     * @param payeeName  Name of the entity that received the payment.  (optional)
     * @param minAmount Filter for all amounts greater than a value. (optional)
     * @param candidateId  A unique identifier assigned to each candidate registered with the FEC. If a person runs for several offices, that person will have separate candidate IDs for each office. First character indicates office - [P]residential, [H]ouse, [S]enate]. Second character is the last digit of the two-year period the ID was created. Third and fourth is the candidate state. Presidential IDs don&#39;t have state. Fifth and sixth is the district when the candidate first ran. This does not change if the candidate/member&#39;s district changes during re-districting. Presidential IDs don&#39;t have districts. The rest is sequence.  (optional)
     * @param sortHideNull Hide null values on sorted column(s). (optional, default to false)
     * @param lastOfficeTotalYtd  When sorting by &#x60;office_total_ytd&#x60;, this is populated with the &#x60;office_total_ytd&#x60; of the last result. However, you will need to pass the index of that last result to &#x60;last_index&#x60; to get the next page.&#39;  (optional)
     * @param sort Provide a field to sort by. Use &#x60;-&#x60; for descending order.  (optional, default to -expenditure_date)
     * @param minFilingDate  Selects all filings received after this date  (optional)
     * @param qSpender  Keyword search for spender name or ID  (optional)
     * @param minDisseminationDate Selects all items distributed by this committee after this date (optional)
     * @param candidateOfficeState US state or territory (optional)
     * @param sortNullsLast Toggle that sorts null values last (optional, default to false)
     * @param lastExpenditureAmount  When sorting by &#x60;expenditure_amount&#x60;, this is populated with the &#x60;expenditure_amount&#x60; of the last result. However, you will need to pass the index of that last result to &#x60;last_index&#x60; to get the next page.  (optional)
     * @param imageNumber  An unique identifier for each page where the electronic or paper filing is reported.  (optional)
     * @param maxDate Maximum date (optional)
     * @param maxDisseminationDate Selects all items distributed by this committee before this date (optional)
     * @param minDate Minimum date (optional)
     * @param filingForm The form where the underlying data comes from, for example, Form 1 would appear as F1:     - F1   Statement of Organization     - F1M  Notification of Multicandidate Status     - F2   Statement of Candidacy     - F3   Report of Receipts and Disbursements for an Authorized Committee     - F3P  Report of Receipts and Disbursements by an Authorized Committee of a Candidate for     The Office of President or Vice President     - F3L  Report of Contributions Bundled by Lobbyists/Registrants and Lobbyist/Registrant PACs     - F3X  Report of Receipts and Disbursements for other than an Authorized Committee     - F4   Report of Receipts and Disbursements for a Committee or Organization Supporting a Nomination Convention     - F5   Report of Independent Expenditures Made and Contributions Received     - F6   48 Hour Notice of Contributions/Loans Received     - F7   Report of Communication Costs by Corporations and Membership Organizations     - F8   Debt Settlement Plan     - F9   24 Hour Notice of Disbursements for Electioneering Communications     - F13  Report of Donations Accepted for Inaugural Committee     - F99  Miscellaneous Text     - FRQ  Request for Additional Information  (optional)
     * @param supportOpposeIndicator Explains if the money was spent in order to support or oppose a candidate or candidates. (Coded S or O for support or oppose.) This indicator applies to independent expenditures and communication costs. (optional)
     * @param minImageNumber Minium image number of the page where the schedule item is reported (optional)
     * @param cycle  Filter records to only those that were applicable to a given two-year period.The cycle begins with an odd year and is named for its ending, even year.  (optional)
     * @param maxFilingDate  Selects all filings received before this date  (optional)
     * @param sortNullOnly Toggle that filters out all rows having sort column that is non-null (optional, default to false)
     * @param lastSupportOpposeIndicator  When sorting by &#x60;support_oppose_indicator&#x60;, this is populated with the &#x60;support_oppose_indicator&#x60; of the last result. However, you will need to pass the index of that last result to &#x60;last_index&#x60; to get the next page.&#39;  (optional)
     * @param lastIndex Index of last result from previous page (optional)
     * @param perPage The number of results returned per page. Defaults to 20. (optional, default to 20)
     * @param candidateOfficeDistrict Two-digit US House distirict of the office the candidate is running for. Presidential, Senate and House at-large candidates will have District 00. (optional)
     * @param lineNumber Filter for form and line number using the following format: &#x60;FORM-LINENUMBER&#x60;.  For example an argument such as &#x60;F3X-16&#x60; would filter down to all entries from form &#x60;F3X&#x60; line number &#x60;16&#x60;. (optional)
     * @param committeeId  A unique identifier assigned to each committee or filer registered with the FEC. In general committee id&#39;s begin with the letter C which is followed by eight digits.  (optional)
     * @param candidateParty Three-letter code for the party affiliated with a candidate or committee. For example, DEM for Democratic Party and REP for Republican Party. (optional)
     * @param maxAmount Filter for all amounts less than a value. (optional)
     * @param mostRecent  The report associated with the transaction is either new or is the most-recently filed amendment. Undetermined version (&#x60;null&#x60;) is always included.  (optional)
     * @param candidateOffice Federal office candidate runs for: H, S or P (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call schedulesScheduleEGetAsync(String apiKey, LocalDate lastExpenditureDate, String maxImageNumber, List<Boolean> isNotice, List<String> payeeName, String minAmount, List<String> candidateId, Boolean sortHideNull, Float lastOfficeTotalYtd, String sort, LocalDate minFilingDate, List<String> qSpender, LocalDate minDisseminationDate, List<String> candidateOfficeState, Boolean sortNullsLast, Float lastExpenditureAmount, List<String> imageNumber, LocalDate maxDate, LocalDate maxDisseminationDate, LocalDate minDate, List<String> filingForm, List<String> supportOpposeIndicator, String minImageNumber, List<Integer> cycle, LocalDate maxFilingDate, Boolean sortNullOnly, String lastSupportOpposeIndicator, Integer lastIndex, Integer perPage, List<String> candidateOfficeDistrict, String lineNumber, List<String> committeeId, List<String> candidateParty, String maxAmount, Boolean mostRecent, List<String> candidateOffice, final ApiCallback<ScheduleEPage> _callback) throws ApiException {

        okhttp3.Call localVarCall = schedulesScheduleEGetValidateBeforeCall(apiKey, lastExpenditureDate, maxImageNumber, isNotice, payeeName, minAmount, candidateId, sortHideNull, lastOfficeTotalYtd, sort, minFilingDate, qSpender, minDisseminationDate, candidateOfficeState, sortNullsLast, lastExpenditureAmount, imageNumber, maxDate, maxDisseminationDate, minDate, filingForm, supportOpposeIndicator, minImageNumber, cycle, maxFilingDate, sortNullOnly, lastSupportOpposeIndicator, lastIndex, perPage, candidateOfficeDistrict, lineNumber, committeeId, candidateParty, maxAmount, mostRecent, candidateOffice, _callback);
        Type localVarReturnType = new TypeToken<ScheduleEPage>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for schedulesScheduleETotalsByCandidateGet
     * @param apiKey  API key for https://api.data.gov. Get one at https://api.data.gov/signup.  (required)
     * @param electionFull &#x60;True&#x60; indicates that full election period of a candidate. &#x60;False&#x60; indicates that two year election cycle. (optional, default to true)
     * @param cycle  Filter records to only those that were applicable to a given two-year period.The cycle begins with an odd year and is named for its ending, even year.  (optional)
     * @param sortNullsLast Toggle that sorts null values last (optional, default to false)
     * @param page For paginating through results, starting at page 1 (optional, default to 1)
     * @param sortNullOnly Toggle that filters out all rows having sort column that is non-null (optional, default to false)
     * @param sortHideNull Hide null values on sorted column(s). (optional, default to false)
     * @param candidateId  A unique identifier assigned to each candidate registered with the FEC. If a person runs for several offices, that person will have separate candidate IDs for each office. First character indicates office - [P]residential, [H]ouse, [S]enate]. Second character is the last digit of the two-year period the ID was created. Third and fourth is the candidate state. Presidential IDs don&#39;t have state. Fifth and sixth is the district when the candidate first ran. This does not change if the candidate/member&#39;s district changes during re-districting. Presidential IDs don&#39;t have districts. The rest is sequence.  (optional)
     * @param perPage The number of results returned per page. Defaults to 20. (optional, default to 20)
     * @param sort Provide a field to sort by. Use &#x60;-&#x60; for descending order.  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call schedulesScheduleETotalsByCandidateGetCall(String apiKey, Boolean electionFull, List<Integer> cycle, Boolean sortNullsLast, Integer page, Boolean sortNullOnly, Boolean sortHideNull, List<String> candidateId, Integer perPage, String sort, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/schedules/schedule_e/totals/by_candidate/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiKey != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api_key", apiKey));
        }

        if (electionFull != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("election_full", electionFull));
        }

        if (cycle != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "cycle", cycle));
        }

        if (sortNullsLast != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort_nulls_last", sortNullsLast));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (sortNullOnly != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort_null_only", sortNullOnly));
        }

        if (sortHideNull != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort_hide_null", sortHideNull));
        }

        if (candidateId != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "candidate_id", candidateId));
        }

        if (perPage != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("per_page", perPage));
        }

        if (sort != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort", sort));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKeyHeaderAuth", "ApiKeyQueryAuth", "apiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call schedulesScheduleETotalsByCandidateGetValidateBeforeCall(String apiKey, Boolean electionFull, List<Integer> cycle, Boolean sortNullsLast, Integer page, Boolean sortNullOnly, Boolean sortHideNull, List<String> candidateId, Integer perPage, String sort, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'apiKey' is set
        if (apiKey == null) {
            throw new ApiException("Missing the required parameter 'apiKey' when calling schedulesScheduleETotalsByCandidateGet(Async)");
        }

        return schedulesScheduleETotalsByCandidateGetCall(apiKey, electionFull, cycle, sortNullsLast, page, sortNullOnly, sortHideNull, candidateId, perPage, sort, _callback);

    }

    /**
     * 
     *  Total independent expenditure on supported or opposed candidates by cycle or candidate election year. 
     * @param apiKey  API key for https://api.data.gov. Get one at https://api.data.gov/signup.  (required)
     * @param electionFull &#x60;True&#x60; indicates that full election period of a candidate. &#x60;False&#x60; indicates that two year election cycle. (optional, default to true)
     * @param cycle  Filter records to only those that were applicable to a given two-year period.The cycle begins with an odd year and is named for its ending, even year.  (optional)
     * @param sortNullsLast Toggle that sorts null values last (optional, default to false)
     * @param page For paginating through results, starting at page 1 (optional, default to 1)
     * @param sortNullOnly Toggle that filters out all rows having sort column that is non-null (optional, default to false)
     * @param sortHideNull Hide null values on sorted column(s). (optional, default to false)
     * @param candidateId  A unique identifier assigned to each candidate registered with the FEC. If a person runs for several offices, that person will have separate candidate IDs for each office. First character indicates office - [P]residential, [H]ouse, [S]enate]. Second character is the last digit of the two-year period the ID was created. Third and fourth is the candidate state. Presidential IDs don&#39;t have state. Fifth and sixth is the district when the candidate first ran. This does not change if the candidate/member&#39;s district changes during re-districting. Presidential IDs don&#39;t have districts. The rest is sequence.  (optional)
     * @param perPage The number of results returned per page. Defaults to 20. (optional, default to 20)
     * @param sort Provide a field to sort by. Use &#x60;-&#x60; for descending order.  (optional)
     * @return IETotalsByCandidatePage
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public IETotalsByCandidatePage schedulesScheduleETotalsByCandidateGet(String apiKey, Boolean electionFull, List<Integer> cycle, Boolean sortNullsLast, Integer page, Boolean sortNullOnly, Boolean sortHideNull, List<String> candidateId, Integer perPage, String sort) throws ApiException {
        ApiResponse<IETotalsByCandidatePage> localVarResp = schedulesScheduleETotalsByCandidateGetWithHttpInfo(apiKey, electionFull, cycle, sortNullsLast, page, sortNullOnly, sortHideNull, candidateId, perPage, sort);
        return localVarResp.getData();
    }

    /**
     * 
     *  Total independent expenditure on supported or opposed candidates by cycle or candidate election year. 
     * @param apiKey  API key for https://api.data.gov. Get one at https://api.data.gov/signup.  (required)
     * @param electionFull &#x60;True&#x60; indicates that full election period of a candidate. &#x60;False&#x60; indicates that two year election cycle. (optional, default to true)
     * @param cycle  Filter records to only those that were applicable to a given two-year period.The cycle begins with an odd year and is named for its ending, even year.  (optional)
     * @param sortNullsLast Toggle that sorts null values last (optional, default to false)
     * @param page For paginating through results, starting at page 1 (optional, default to 1)
     * @param sortNullOnly Toggle that filters out all rows having sort column that is non-null (optional, default to false)
     * @param sortHideNull Hide null values on sorted column(s). (optional, default to false)
     * @param candidateId  A unique identifier assigned to each candidate registered with the FEC. If a person runs for several offices, that person will have separate candidate IDs for each office. First character indicates office - [P]residential, [H]ouse, [S]enate]. Second character is the last digit of the two-year period the ID was created. Third and fourth is the candidate state. Presidential IDs don&#39;t have state. Fifth and sixth is the district when the candidate first ran. This does not change if the candidate/member&#39;s district changes during re-districting. Presidential IDs don&#39;t have districts. The rest is sequence.  (optional)
     * @param perPage The number of results returned per page. Defaults to 20. (optional, default to 20)
     * @param sort Provide a field to sort by. Use &#x60;-&#x60; for descending order.  (optional)
     * @return ApiResponse&lt;IETotalsByCandidatePage&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<IETotalsByCandidatePage> schedulesScheduleETotalsByCandidateGetWithHttpInfo(String apiKey, Boolean electionFull, List<Integer> cycle, Boolean sortNullsLast, Integer page, Boolean sortNullOnly, Boolean sortHideNull, List<String> candidateId, Integer perPage, String sort) throws ApiException {
        okhttp3.Call localVarCall = schedulesScheduleETotalsByCandidateGetValidateBeforeCall(apiKey, electionFull, cycle, sortNullsLast, page, sortNullOnly, sortHideNull, candidateId, perPage, sort, null);
        Type localVarReturnType = new TypeToken<IETotalsByCandidatePage>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     *  Total independent expenditure on supported or opposed candidates by cycle or candidate election year. 
     * @param apiKey  API key for https://api.data.gov. Get one at https://api.data.gov/signup.  (required)
     * @param electionFull &#x60;True&#x60; indicates that full election period of a candidate. &#x60;False&#x60; indicates that two year election cycle. (optional, default to true)
     * @param cycle  Filter records to only those that were applicable to a given two-year period.The cycle begins with an odd year and is named for its ending, even year.  (optional)
     * @param sortNullsLast Toggle that sorts null values last (optional, default to false)
     * @param page For paginating through results, starting at page 1 (optional, default to 1)
     * @param sortNullOnly Toggle that filters out all rows having sort column that is non-null (optional, default to false)
     * @param sortHideNull Hide null values on sorted column(s). (optional, default to false)
     * @param candidateId  A unique identifier assigned to each candidate registered with the FEC. If a person runs for several offices, that person will have separate candidate IDs for each office. First character indicates office - [P]residential, [H]ouse, [S]enate]. Second character is the last digit of the two-year period the ID was created. Third and fourth is the candidate state. Presidential IDs don&#39;t have state. Fifth and sixth is the district when the candidate first ran. This does not change if the candidate/member&#39;s district changes during re-districting. Presidential IDs don&#39;t have districts. The rest is sequence.  (optional)
     * @param perPage The number of results returned per page. Defaults to 20. (optional, default to 20)
     * @param sort Provide a field to sort by. Use &#x60;-&#x60; for descending order.  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call schedulesScheduleETotalsByCandidateGetAsync(String apiKey, Boolean electionFull, List<Integer> cycle, Boolean sortNullsLast, Integer page, Boolean sortNullOnly, Boolean sortHideNull, List<String> candidateId, Integer perPage, String sort, final ApiCallback<IETotalsByCandidatePage> _callback) throws ApiException {

        okhttp3.Call localVarCall = schedulesScheduleETotalsByCandidateGetValidateBeforeCall(apiKey, electionFull, cycle, sortNullsLast, page, sortNullOnly, sortHideNull, candidateId, perPage, sort, _callback);
        Type localVarReturnType = new TypeToken<IETotalsByCandidatePage>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
