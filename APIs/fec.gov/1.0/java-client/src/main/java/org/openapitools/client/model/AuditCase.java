/*
 * OpenFEC
 * This application programming interface (API) allows you to explore the way candidates and committees fund their campaigns.    The Federal Election Commission (FEC) API is a RESTful web service supporting full-text and field-specific searches on FEC data. [Bulk downloads](https://www.fec.gov/data/advanced/?tab=bulk-data) are available on the current site. Information is tied to the underlying forms by file ID and image ID. Data is updated nightly.    There are a lot of data, and a good place to start is to use search to find interesting candidates and committees. Then, you can use their IDs to find report or line item details with the other endpoints. If you are interested in individual donors, check out contributor information in the `/schedule_a/` endpoints.    <b class=\"body\" id=\"getting_started_head\">Getting started with the openFEC API</b><br>    If you would like to use the FEC's API programmatically, you can sign up for your own API key using our form. Alternatively, you can still try out our API without an API key by using the web interface and using DEMO_KEY. Note that when you use the openFEC API you are subject to the [Terms of Service](https://github.com/fecgov/FEC/blob/master/TERMS-OF-SERVICE.md) and [Acceptable Use policy](https://github.com/fecgov/FEC/blob/master/ACCEPTABLE-USE-POLICY.md).    Signing up for an API key will enable you to place up to 1,000 calls an hour. Each call is limited to 100 results per page. You can email questions, comments or a request to get a key for 7,200 calls an hour (120 calls per minute) to <a href=\"mailto:APIinfo@fec.gov\">APIinfo@fec.gov</a>. You can also ask questions and discuss the data in a community led [group](https://groups.google.com/forum/#!forum/fec-data).    The model definitions and schema are available at [/swagger](/swagger/). This is useful for making wrappers and exploring the data.    A few restrictions limit the way you can use FEC data. For example, you canâ€™t use contributor lists for commercial purposes or to solicit donations. [Learn more here](https://www.fec.gov/updates/sale-or-use-contributor-information/).    [Inspect our source code](https://github.com/fecgov/openFEC). We welcome issues and pull requests!    <p><br></p> <h2 class=\"title\" id=\"signup_head\">Sign up for an API key</h2> <div id=\"apidatagov_signup\">Loading signup form...</div>
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.LocalDate;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.AuditCaseCategoryRelation;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * AuditCase
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:02:12.812386-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class AuditCase {
  public static final String SERIALIZED_NAME_AUDIT_CASE_ID = "audit_case_id";
  @SerializedName(SERIALIZED_NAME_AUDIT_CASE_ID)
  private String auditCaseId;

  public static final String SERIALIZED_NAME_AUDIT_ID = "audit_id";
  @SerializedName(SERIALIZED_NAME_AUDIT_ID)
  private Integer auditId;

  public static final String SERIALIZED_NAME_CANDIDATE_ID = "candidate_id";
  @SerializedName(SERIALIZED_NAME_CANDIDATE_ID)
  private String candidateId;

  public static final String SERIALIZED_NAME_CANDIDATE_NAME = "candidate_name";
  @SerializedName(SERIALIZED_NAME_CANDIDATE_NAME)
  private String candidateName;

  public static final String SERIALIZED_NAME_COMMITTEE_DESCRIPTION = "committee_description";
  @SerializedName(SERIALIZED_NAME_COMMITTEE_DESCRIPTION)
  private String committeeDescription;

  public static final String SERIALIZED_NAME_COMMITTEE_DESIGNATION = "committee_designation";
  @SerializedName(SERIALIZED_NAME_COMMITTEE_DESIGNATION)
  private String committeeDesignation;

  public static final String SERIALIZED_NAME_COMMITTEE_ID = "committee_id";
  @SerializedName(SERIALIZED_NAME_COMMITTEE_ID)
  private String committeeId;

  public static final String SERIALIZED_NAME_COMMITTEE_NAME = "committee_name";
  @SerializedName(SERIALIZED_NAME_COMMITTEE_NAME)
  private String committeeName;

  public static final String SERIALIZED_NAME_COMMITTEE_TYPE = "committee_type";
  @SerializedName(SERIALIZED_NAME_COMMITTEE_TYPE)
  private String committeeType;

  public static final String SERIALIZED_NAME_CYCLE = "cycle";
  @SerializedName(SERIALIZED_NAME_CYCLE)
  private Integer cycle;

  public static final String SERIALIZED_NAME_FAR_RELEASE_DATE = "far_release_date";
  @SerializedName(SERIALIZED_NAME_FAR_RELEASE_DATE)
  private LocalDate farReleaseDate;

  public static final String SERIALIZED_NAME_LINK_TO_REPORT = "link_to_report";
  @SerializedName(SERIALIZED_NAME_LINK_TO_REPORT)
  private String linkToReport;

  public static final String SERIALIZED_NAME_PRIMARY_CATEGORY_LIST = "primary_category_list";
  @SerializedName(SERIALIZED_NAME_PRIMARY_CATEGORY_LIST)
  private List<AuditCaseCategoryRelation> primaryCategoryList = new ArrayList<>();

  public AuditCase() {
  }

  public AuditCase auditCaseId(String auditCaseId) {
    this.auditCaseId = auditCaseId;
    return this;
  }

  /**
   * Get auditCaseId
   * @return auditCaseId
   */
  @javax.annotation.Nullable
  public String getAuditCaseId() {
    return auditCaseId;
  }

  public void setAuditCaseId(String auditCaseId) {
    this.auditCaseId = auditCaseId;
  }


  public AuditCase auditId(Integer auditId) {
    this.auditId = auditId;
    return this;
  }

  /**
   * Get auditId
   * @return auditId
   */
  @javax.annotation.Nullable
  public Integer getAuditId() {
    return auditId;
  }

  public void setAuditId(Integer auditId) {
    this.auditId = auditId;
  }


  public AuditCase candidateId(String candidateId) {
    this.candidateId = candidateId;
    return this;
  }

  /**
   * Get candidateId
   * @return candidateId
   */
  @javax.annotation.Nullable
  public String getCandidateId() {
    return candidateId;
  }

  public void setCandidateId(String candidateId) {
    this.candidateId = candidateId;
  }


  public AuditCase candidateName(String candidateName) {
    this.candidateName = candidateName;
    return this;
  }

  /**
   * Get candidateName
   * @return candidateName
   */
  @javax.annotation.Nullable
  public String getCandidateName() {
    return candidateName;
  }

  public void setCandidateName(String candidateName) {
    this.candidateName = candidateName;
  }


  public AuditCase committeeDescription(String committeeDescription) {
    this.committeeDescription = committeeDescription;
    return this;
  }

  /**
   * Get committeeDescription
   * @return committeeDescription
   */
  @javax.annotation.Nullable
  public String getCommitteeDescription() {
    return committeeDescription;
  }

  public void setCommitteeDescription(String committeeDescription) {
    this.committeeDescription = committeeDescription;
  }


  public AuditCase committeeDesignation(String committeeDesignation) {
    this.committeeDesignation = committeeDesignation;
    return this;
  }

  /**
   * Get committeeDesignation
   * @return committeeDesignation
   */
  @javax.annotation.Nullable
  public String getCommitteeDesignation() {
    return committeeDesignation;
  }

  public void setCommitteeDesignation(String committeeDesignation) {
    this.committeeDesignation = committeeDesignation;
  }


  public AuditCase committeeId(String committeeId) {
    this.committeeId = committeeId;
    return this;
  }

  /**
   * Get committeeId
   * @return committeeId
   */
  @javax.annotation.Nullable
  public String getCommitteeId() {
    return committeeId;
  }

  public void setCommitteeId(String committeeId) {
    this.committeeId = committeeId;
  }


  public AuditCase committeeName(String committeeName) {
    this.committeeName = committeeName;
    return this;
  }

  /**
   * Get committeeName
   * @return committeeName
   */
  @javax.annotation.Nullable
  public String getCommitteeName() {
    return committeeName;
  }

  public void setCommitteeName(String committeeName) {
    this.committeeName = committeeName;
  }


  public AuditCase committeeType(String committeeType) {
    this.committeeType = committeeType;
    return this;
  }

  /**
   * Get committeeType
   * @return committeeType
   */
  @javax.annotation.Nullable
  public String getCommitteeType() {
    return committeeType;
  }

  public void setCommitteeType(String committeeType) {
    this.committeeType = committeeType;
  }


  public AuditCase cycle(Integer cycle) {
    this.cycle = cycle;
    return this;
  }

  /**
   * Get cycle
   * @return cycle
   */
  @javax.annotation.Nullable
  public Integer getCycle() {
    return cycle;
  }

  public void setCycle(Integer cycle) {
    this.cycle = cycle;
  }


  public AuditCase farReleaseDate(LocalDate farReleaseDate) {
    this.farReleaseDate = farReleaseDate;
    return this;
  }

  /**
   * Get farReleaseDate
   * @return farReleaseDate
   */
  @javax.annotation.Nullable
  public LocalDate getFarReleaseDate() {
    return farReleaseDate;
  }

  public void setFarReleaseDate(LocalDate farReleaseDate) {
    this.farReleaseDate = farReleaseDate;
  }


  public AuditCase linkToReport(String linkToReport) {
    this.linkToReport = linkToReport;
    return this;
  }

  /**
   *  URL for retrieving the PDF document 
   * @return linkToReport
   */
  @javax.annotation.Nullable
  public String getLinkToReport() {
    return linkToReport;
  }

  public void setLinkToReport(String linkToReport) {
    this.linkToReport = linkToReport;
  }


  public AuditCase primaryCategoryList(List<AuditCaseCategoryRelation> primaryCategoryList) {
    this.primaryCategoryList = primaryCategoryList;
    return this;
  }

  public AuditCase addPrimaryCategoryListItem(AuditCaseCategoryRelation primaryCategoryListItem) {
    if (this.primaryCategoryList == null) {
      this.primaryCategoryList = new ArrayList<>();
    }
    this.primaryCategoryList.add(primaryCategoryListItem);
    return this;
  }

  /**
   * Get primaryCategoryList
   * @return primaryCategoryList
   */
  @javax.annotation.Nullable
  public List<AuditCaseCategoryRelation> getPrimaryCategoryList() {
    return primaryCategoryList;
  }

  public void setPrimaryCategoryList(List<AuditCaseCategoryRelation> primaryCategoryList) {
    this.primaryCategoryList = primaryCategoryList;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    AuditCase auditCase = (AuditCase) o;
    return Objects.equals(this.auditCaseId, auditCase.auditCaseId) &&
        Objects.equals(this.auditId, auditCase.auditId) &&
        Objects.equals(this.candidateId, auditCase.candidateId) &&
        Objects.equals(this.candidateName, auditCase.candidateName) &&
        Objects.equals(this.committeeDescription, auditCase.committeeDescription) &&
        Objects.equals(this.committeeDesignation, auditCase.committeeDesignation) &&
        Objects.equals(this.committeeId, auditCase.committeeId) &&
        Objects.equals(this.committeeName, auditCase.committeeName) &&
        Objects.equals(this.committeeType, auditCase.committeeType) &&
        Objects.equals(this.cycle, auditCase.cycle) &&
        Objects.equals(this.farReleaseDate, auditCase.farReleaseDate) &&
        Objects.equals(this.linkToReport, auditCase.linkToReport) &&
        Objects.equals(this.primaryCategoryList, auditCase.primaryCategoryList);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(auditCaseId, auditId, candidateId, candidateName, committeeDescription, committeeDesignation, committeeId, committeeName, committeeType, cycle, farReleaseDate, linkToReport, primaryCategoryList);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class AuditCase {\n");
    sb.append("    auditCaseId: ").append(toIndentedString(auditCaseId)).append("\n");
    sb.append("    auditId: ").append(toIndentedString(auditId)).append("\n");
    sb.append("    candidateId: ").append(toIndentedString(candidateId)).append("\n");
    sb.append("    candidateName: ").append(toIndentedString(candidateName)).append("\n");
    sb.append("    committeeDescription: ").append(toIndentedString(committeeDescription)).append("\n");
    sb.append("    committeeDesignation: ").append(toIndentedString(committeeDesignation)).append("\n");
    sb.append("    committeeId: ").append(toIndentedString(committeeId)).append("\n");
    sb.append("    committeeName: ").append(toIndentedString(committeeName)).append("\n");
    sb.append("    committeeType: ").append(toIndentedString(committeeType)).append("\n");
    sb.append("    cycle: ").append(toIndentedString(cycle)).append("\n");
    sb.append("    farReleaseDate: ").append(toIndentedString(farReleaseDate)).append("\n");
    sb.append("    linkToReport: ").append(toIndentedString(linkToReport)).append("\n");
    sb.append("    primaryCategoryList: ").append(toIndentedString(primaryCategoryList)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("audit_case_id");
    openapiFields.add("audit_id");
    openapiFields.add("candidate_id");
    openapiFields.add("candidate_name");
    openapiFields.add("committee_description");
    openapiFields.add("committee_designation");
    openapiFields.add("committee_id");
    openapiFields.add("committee_name");
    openapiFields.add("committee_type");
    openapiFields.add("cycle");
    openapiFields.add("far_release_date");
    openapiFields.add("link_to_report");
    openapiFields.add("primary_category_list");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to AuditCase
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!AuditCase.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in AuditCase is not found in the empty JSON string", AuditCase.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!AuditCase.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `AuditCase` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("audit_case_id") != null && !jsonObj.get("audit_case_id").isJsonNull()) && !jsonObj.get("audit_case_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `audit_case_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("audit_case_id").toString()));
      }
      if ((jsonObj.get("candidate_id") != null && !jsonObj.get("candidate_id").isJsonNull()) && !jsonObj.get("candidate_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `candidate_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("candidate_id").toString()));
      }
      if ((jsonObj.get("candidate_name") != null && !jsonObj.get("candidate_name").isJsonNull()) && !jsonObj.get("candidate_name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `candidate_name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("candidate_name").toString()));
      }
      if ((jsonObj.get("committee_description") != null && !jsonObj.get("committee_description").isJsonNull()) && !jsonObj.get("committee_description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `committee_description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("committee_description").toString()));
      }
      if ((jsonObj.get("committee_designation") != null && !jsonObj.get("committee_designation").isJsonNull()) && !jsonObj.get("committee_designation").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `committee_designation` to be a primitive type in the JSON string but got `%s`", jsonObj.get("committee_designation").toString()));
      }
      if ((jsonObj.get("committee_id") != null && !jsonObj.get("committee_id").isJsonNull()) && !jsonObj.get("committee_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `committee_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("committee_id").toString()));
      }
      if ((jsonObj.get("committee_name") != null && !jsonObj.get("committee_name").isJsonNull()) && !jsonObj.get("committee_name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `committee_name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("committee_name").toString()));
      }
      if ((jsonObj.get("committee_type") != null && !jsonObj.get("committee_type").isJsonNull()) && !jsonObj.get("committee_type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `committee_type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("committee_type").toString()));
      }
      if ((jsonObj.get("link_to_report") != null && !jsonObj.get("link_to_report").isJsonNull()) && !jsonObj.get("link_to_report").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `link_to_report` to be a primitive type in the JSON string but got `%s`", jsonObj.get("link_to_report").toString()));
      }
      if (jsonObj.get("primary_category_list") != null && !jsonObj.get("primary_category_list").isJsonNull()) {
        JsonArray jsonArrayprimaryCategoryList = jsonObj.getAsJsonArray("primary_category_list");
        if (jsonArrayprimaryCategoryList != null) {
          // ensure the json data is an array
          if (!jsonObj.get("primary_category_list").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `primary_category_list` to be an array in the JSON string but got `%s`", jsonObj.get("primary_category_list").toString()));
          }

          // validate the optional field `primary_category_list` (array)
          for (int i = 0; i < jsonArrayprimaryCategoryList.size(); i++) {
            AuditCaseCategoryRelation.validateJsonElement(jsonArrayprimaryCategoryList.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!AuditCase.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'AuditCase' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<AuditCase> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(AuditCase.class));

       return (TypeAdapter<T>) new TypeAdapter<AuditCase>() {
           @Override
           public void write(JsonWriter out, AuditCase value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public AuditCase read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of AuditCase given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of AuditCase
   * @throws IOException if the JSON string is invalid with respect to AuditCase
   */
  public static AuditCase fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, AuditCase.class);
  }

  /**
   * Convert an instance of AuditCase to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

