/*
 * OpenFEC
 * This application programming interface (API) allows you to explore the way candidates and committees fund their campaigns.    The Federal Election Commission (FEC) API is a RESTful web service supporting full-text and field-specific searches on FEC data. [Bulk downloads](https://www.fec.gov/data/advanced/?tab=bulk-data) are available on the current site. Information is tied to the underlying forms by file ID and image ID. Data is updated nightly.    There are a lot of data, and a good place to start is to use search to find interesting candidates and committees. Then, you can use their IDs to find report or line item details with the other endpoints. If you are interested in individual donors, check out contributor information in the `/schedule_a/` endpoints.    <b class=\"body\" id=\"getting_started_head\">Getting started with the openFEC API</b><br>    If you would like to use the FEC's API programmatically, you can sign up for your own API key using our form. Alternatively, you can still try out our API without an API key by using the web interface and using DEMO_KEY. Note that when you use the openFEC API you are subject to the [Terms of Service](https://github.com/fecgov/FEC/blob/master/TERMS-OF-SERVICE.md) and [Acceptable Use policy](https://github.com/fecgov/FEC/blob/master/ACCEPTABLE-USE-POLICY.md).    Signing up for an API key will enable you to place up to 1,000 calls an hour. Each call is limited to 100 results per page. You can email questions, comments or a request to get a key for 7,200 calls an hour (120 calls per minute) to <a href=\"mailto:APIinfo@fec.gov\">APIinfo@fec.gov</a>. You can also ask questions and discuss the data in a community led [group](https://groups.google.com/forum/#!forum/fec-data).    The model definitions and schema are available at [/swagger](/swagger/). This is useful for making wrappers and exploring the data.    A few restrictions limit the way you can use FEC data. For example, you canâ€™t use contributor lists for commercial purposes or to solicit donations. [Learn more here](https://www.fec.gov/updates/sale-or-use-contributor-information/).    [Inspect our source code](https://github.com/fecgov/openFEC). We welcome issues and pull requests!    <p><br></p> <h2 class=\"title\" id=\"signup_head\">Sign up for an API key</h2> <div id=\"apidatagov_signup\">Loading signup form...</div>
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.BaseF3FilingPage;
import org.openapitools.client.model.BaseF3PFilingPage;
import org.openapitools.client.model.BaseF3XFilingPage;
import org.openapitools.client.model.EFilingsPage;
import java.time.LocalDate;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class EfilingApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public EfilingApi() {
        this(Configuration.getDefaultApiClient());
    }

    public EfilingApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for efileFilingsGet
     * @param apiKey  API key for https://api.data.gov. Get one at https://api.data.gov/signup.  (required)
     * @param minReceiptDate  Selects all filings received after this date(MM/DD/YYYY or YYYY-MM-DD)  (optional)
     * @param sortNullsLast Toggle that sorts null values last (optional, default to false)
     * @param page For paginating through results, starting at page 1 (optional, default to 1)
     * @param committeeId  A unique identifier assigned to each committee or filer registered with the FEC. In general committee id&#39;s begin with the letter C which is followed by eight digits.  (optional)
     * @param sortNullOnly Toggle that filters out all rows having sort column that is non-null (optional, default to false)
     * @param maxReceiptDate  Selects all filings received before this date(MM/DD/YYYY or YYYY-MM-DD)  (optional)
     * @param sortHideNull Hide null values on sorted column(s). (optional, default to false)
     * @param fileNumber Filing ID number (optional)
     * @param perPage The number of results returned per page. Defaults to 20. (optional, default to 20)
     * @param sort Provide a field to sort by. Use &#x60;-&#x60; for descending order.  (optional, default to -receipt_date)
     * @param qFiler  Keyword search for filer name or ID  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call efileFilingsGetCall(String apiKey, LocalDate minReceiptDate, Boolean sortNullsLast, Integer page, List<String> committeeId, Boolean sortNullOnly, LocalDate maxReceiptDate, Boolean sortHideNull, List<Integer> fileNumber, Integer perPage, String sort, List<String> qFiler, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/efile/filings/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiKey != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api_key", apiKey));
        }

        if (minReceiptDate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("min_receipt_date", minReceiptDate));
        }

        if (sortNullsLast != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort_nulls_last", sortNullsLast));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (committeeId != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "committee_id", committeeId));
        }

        if (sortNullOnly != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort_null_only", sortNullOnly));
        }

        if (maxReceiptDate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("max_receipt_date", maxReceiptDate));
        }

        if (sortHideNull != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort_hide_null", sortHideNull));
        }

        if (fileNumber != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "file_number", fileNumber));
        }

        if (perPage != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("per_page", perPage));
        }

        if (sort != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort", sort));
        }

        if (qFiler != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "q_filer", qFiler));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKeyHeaderAuth", "ApiKeyQueryAuth", "apiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call efileFilingsGetValidateBeforeCall(String apiKey, LocalDate minReceiptDate, Boolean sortNullsLast, Integer page, List<String> committeeId, Boolean sortNullOnly, LocalDate maxReceiptDate, Boolean sortHideNull, List<Integer> fileNumber, Integer perPage, String sort, List<String> qFiler, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'apiKey' is set
        if (apiKey == null) {
            throw new ApiException("Missing the required parameter 'apiKey' when calling efileFilingsGet(Async)");
        }

        return efileFilingsGetCall(apiKey, minReceiptDate, sortNullsLast, page, committeeId, sortNullOnly, maxReceiptDate, sortHideNull, fileNumber, perPage, sort, qFiler, _callback);

    }

    /**
     * 
     * Basic information about electronic files coming into the FEC, posted as they are received.
     * @param apiKey  API key for https://api.data.gov. Get one at https://api.data.gov/signup.  (required)
     * @param minReceiptDate  Selects all filings received after this date(MM/DD/YYYY or YYYY-MM-DD)  (optional)
     * @param sortNullsLast Toggle that sorts null values last (optional, default to false)
     * @param page For paginating through results, starting at page 1 (optional, default to 1)
     * @param committeeId  A unique identifier assigned to each committee or filer registered with the FEC. In general committee id&#39;s begin with the letter C which is followed by eight digits.  (optional)
     * @param sortNullOnly Toggle that filters out all rows having sort column that is non-null (optional, default to false)
     * @param maxReceiptDate  Selects all filings received before this date(MM/DD/YYYY or YYYY-MM-DD)  (optional)
     * @param sortHideNull Hide null values on sorted column(s). (optional, default to false)
     * @param fileNumber Filing ID number (optional)
     * @param perPage The number of results returned per page. Defaults to 20. (optional, default to 20)
     * @param sort Provide a field to sort by. Use &#x60;-&#x60; for descending order.  (optional, default to -receipt_date)
     * @param qFiler  Keyword search for filer name or ID  (optional)
     * @return EFilingsPage
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public EFilingsPage efileFilingsGet(String apiKey, LocalDate minReceiptDate, Boolean sortNullsLast, Integer page, List<String> committeeId, Boolean sortNullOnly, LocalDate maxReceiptDate, Boolean sortHideNull, List<Integer> fileNumber, Integer perPage, String sort, List<String> qFiler) throws ApiException {
        ApiResponse<EFilingsPage> localVarResp = efileFilingsGetWithHttpInfo(apiKey, minReceiptDate, sortNullsLast, page, committeeId, sortNullOnly, maxReceiptDate, sortHideNull, fileNumber, perPage, sort, qFiler);
        return localVarResp.getData();
    }

    /**
     * 
     * Basic information about electronic files coming into the FEC, posted as they are received.
     * @param apiKey  API key for https://api.data.gov. Get one at https://api.data.gov/signup.  (required)
     * @param minReceiptDate  Selects all filings received after this date(MM/DD/YYYY or YYYY-MM-DD)  (optional)
     * @param sortNullsLast Toggle that sorts null values last (optional, default to false)
     * @param page For paginating through results, starting at page 1 (optional, default to 1)
     * @param committeeId  A unique identifier assigned to each committee or filer registered with the FEC. In general committee id&#39;s begin with the letter C which is followed by eight digits.  (optional)
     * @param sortNullOnly Toggle that filters out all rows having sort column that is non-null (optional, default to false)
     * @param maxReceiptDate  Selects all filings received before this date(MM/DD/YYYY or YYYY-MM-DD)  (optional)
     * @param sortHideNull Hide null values on sorted column(s). (optional, default to false)
     * @param fileNumber Filing ID number (optional)
     * @param perPage The number of results returned per page. Defaults to 20. (optional, default to 20)
     * @param sort Provide a field to sort by. Use &#x60;-&#x60; for descending order.  (optional, default to -receipt_date)
     * @param qFiler  Keyword search for filer name or ID  (optional)
     * @return ApiResponse&lt;EFilingsPage&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<EFilingsPage> efileFilingsGetWithHttpInfo(String apiKey, LocalDate minReceiptDate, Boolean sortNullsLast, Integer page, List<String> committeeId, Boolean sortNullOnly, LocalDate maxReceiptDate, Boolean sortHideNull, List<Integer> fileNumber, Integer perPage, String sort, List<String> qFiler) throws ApiException {
        okhttp3.Call localVarCall = efileFilingsGetValidateBeforeCall(apiKey, minReceiptDate, sortNullsLast, page, committeeId, sortNullOnly, maxReceiptDate, sortHideNull, fileNumber, perPage, sort, qFiler, null);
        Type localVarReturnType = new TypeToken<EFilingsPage>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Basic information about electronic files coming into the FEC, posted as they are received.
     * @param apiKey  API key for https://api.data.gov. Get one at https://api.data.gov/signup.  (required)
     * @param minReceiptDate  Selects all filings received after this date(MM/DD/YYYY or YYYY-MM-DD)  (optional)
     * @param sortNullsLast Toggle that sorts null values last (optional, default to false)
     * @param page For paginating through results, starting at page 1 (optional, default to 1)
     * @param committeeId  A unique identifier assigned to each committee or filer registered with the FEC. In general committee id&#39;s begin with the letter C which is followed by eight digits.  (optional)
     * @param sortNullOnly Toggle that filters out all rows having sort column that is non-null (optional, default to false)
     * @param maxReceiptDate  Selects all filings received before this date(MM/DD/YYYY or YYYY-MM-DD)  (optional)
     * @param sortHideNull Hide null values on sorted column(s). (optional, default to false)
     * @param fileNumber Filing ID number (optional)
     * @param perPage The number of results returned per page. Defaults to 20. (optional, default to 20)
     * @param sort Provide a field to sort by. Use &#x60;-&#x60; for descending order.  (optional, default to -receipt_date)
     * @param qFiler  Keyword search for filer name or ID  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call efileFilingsGetAsync(String apiKey, LocalDate minReceiptDate, Boolean sortNullsLast, Integer page, List<String> committeeId, Boolean sortNullOnly, LocalDate maxReceiptDate, Boolean sortHideNull, List<Integer> fileNumber, Integer perPage, String sort, List<String> qFiler, final ApiCallback<EFilingsPage> _callback) throws ApiException {

        okhttp3.Call localVarCall = efileFilingsGetValidateBeforeCall(apiKey, minReceiptDate, sortNullsLast, page, committeeId, sortNullOnly, maxReceiptDate, sortHideNull, fileNumber, perPage, sort, qFiler, _callback);
        Type localVarReturnType = new TypeToken<EFilingsPage>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for efileReportsHouseSenateGet
     * @param apiKey  API key for https://api.data.gov. Get one at https://api.data.gov/signup.  (required)
     * @param minReceiptDate  Selects all filings received after this date(MM/DD/YYYY or YYYY-MM-DD)  (optional)
     * @param sortNullsLast Toggle that sorts null values last (optional, default to false)
     * @param page For paginating through results, starting at page 1 (optional, default to 1)
     * @param committeeId  A unique identifier assigned to each committee or filer registered with the FEC. In general committee id&#39;s begin with the letter C which is followed by eight digits.  (optional)
     * @param sortNullOnly Toggle that filters out all rows having sort column that is non-null (optional, default to false)
     * @param maxReceiptDate  Selects all filings received before this date(MM/DD/YYYY or YYYY-MM-DD)  (optional)
     * @param sortHideNull Hide null values on sorted column(s). (optional, default to false)
     * @param fileNumber Filing ID number (optional)
     * @param perPage The number of results returned per page. Defaults to 20. (optional, default to 20)
     * @param sort Provide a field to sort by. Use &#x60;-&#x60; for descending order.  (optional, default to -receipt_date)
     * @param qFiler  Keyword search for filer name or ID  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call efileReportsHouseSenateGetCall(String apiKey, LocalDate minReceiptDate, Boolean sortNullsLast, Integer page, List<String> committeeId, Boolean sortNullOnly, LocalDate maxReceiptDate, Boolean sortHideNull, List<Integer> fileNumber, Integer perPage, String sort, List<String> qFiler, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/efile/reports/house-senate/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiKey != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api_key", apiKey));
        }

        if (minReceiptDate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("min_receipt_date", minReceiptDate));
        }

        if (sortNullsLast != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort_nulls_last", sortNullsLast));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (committeeId != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "committee_id", committeeId));
        }

        if (sortNullOnly != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort_null_only", sortNullOnly));
        }

        if (maxReceiptDate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("max_receipt_date", maxReceiptDate));
        }

        if (sortHideNull != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort_hide_null", sortHideNull));
        }

        if (fileNumber != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "file_number", fileNumber));
        }

        if (perPage != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("per_page", perPage));
        }

        if (sort != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort", sort));
        }

        if (qFiler != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "q_filer", qFiler));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKeyHeaderAuth", "ApiKeyQueryAuth", "apiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call efileReportsHouseSenateGetValidateBeforeCall(String apiKey, LocalDate minReceiptDate, Boolean sortNullsLast, Integer page, List<String> committeeId, Boolean sortNullOnly, LocalDate maxReceiptDate, Boolean sortHideNull, List<Integer> fileNumber, Integer perPage, String sort, List<String> qFiler, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'apiKey' is set
        if (apiKey == null) {
            throw new ApiException("Missing the required parameter 'apiKey' when calling efileReportsHouseSenateGet(Async)");
        }

        return efileReportsHouseSenateGetCall(apiKey, minReceiptDate, sortNullsLast, page, committeeId, sortNullOnly, maxReceiptDate, sortHideNull, fileNumber, perPage, sort, qFiler, _callback);

    }

    /**
     * 
     *  Key financial data reported periodically by committees as they are reported. This feed includes summary information from the the House F3 reports, the presidential F3p reports and the PAC and party F3x reports.  Generally, committees file reports on a quarterly or monthly basis, but some must also submit a report 12 days before primary elections. Therefore, during the primary season, the period covered by this file may be different for different committees. These totals also incorporate any changes made by committees, if any report covering the period is amended.  DISCLAIMER: The field labels contained within this resource are subject to change.  We are attempting to succinctly label these fields while conveying clear meaning to ensure accessibility for all users. 
     * @param apiKey  API key for https://api.data.gov. Get one at https://api.data.gov/signup.  (required)
     * @param minReceiptDate  Selects all filings received after this date(MM/DD/YYYY or YYYY-MM-DD)  (optional)
     * @param sortNullsLast Toggle that sorts null values last (optional, default to false)
     * @param page For paginating through results, starting at page 1 (optional, default to 1)
     * @param committeeId  A unique identifier assigned to each committee or filer registered with the FEC. In general committee id&#39;s begin with the letter C which is followed by eight digits.  (optional)
     * @param sortNullOnly Toggle that filters out all rows having sort column that is non-null (optional, default to false)
     * @param maxReceiptDate  Selects all filings received before this date(MM/DD/YYYY or YYYY-MM-DD)  (optional)
     * @param sortHideNull Hide null values on sorted column(s). (optional, default to false)
     * @param fileNumber Filing ID number (optional)
     * @param perPage The number of results returned per page. Defaults to 20. (optional, default to 20)
     * @param sort Provide a field to sort by. Use &#x60;-&#x60; for descending order.  (optional, default to -receipt_date)
     * @param qFiler  Keyword search for filer name or ID  (optional)
     * @return BaseF3FilingPage
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public BaseF3FilingPage efileReportsHouseSenateGet(String apiKey, LocalDate minReceiptDate, Boolean sortNullsLast, Integer page, List<String> committeeId, Boolean sortNullOnly, LocalDate maxReceiptDate, Boolean sortHideNull, List<Integer> fileNumber, Integer perPage, String sort, List<String> qFiler) throws ApiException {
        ApiResponse<BaseF3FilingPage> localVarResp = efileReportsHouseSenateGetWithHttpInfo(apiKey, minReceiptDate, sortNullsLast, page, committeeId, sortNullOnly, maxReceiptDate, sortHideNull, fileNumber, perPage, sort, qFiler);
        return localVarResp.getData();
    }

    /**
     * 
     *  Key financial data reported periodically by committees as they are reported. This feed includes summary information from the the House F3 reports, the presidential F3p reports and the PAC and party F3x reports.  Generally, committees file reports on a quarterly or monthly basis, but some must also submit a report 12 days before primary elections. Therefore, during the primary season, the period covered by this file may be different for different committees. These totals also incorporate any changes made by committees, if any report covering the period is amended.  DISCLAIMER: The field labels contained within this resource are subject to change.  We are attempting to succinctly label these fields while conveying clear meaning to ensure accessibility for all users. 
     * @param apiKey  API key for https://api.data.gov. Get one at https://api.data.gov/signup.  (required)
     * @param minReceiptDate  Selects all filings received after this date(MM/DD/YYYY or YYYY-MM-DD)  (optional)
     * @param sortNullsLast Toggle that sorts null values last (optional, default to false)
     * @param page For paginating through results, starting at page 1 (optional, default to 1)
     * @param committeeId  A unique identifier assigned to each committee or filer registered with the FEC. In general committee id&#39;s begin with the letter C which is followed by eight digits.  (optional)
     * @param sortNullOnly Toggle that filters out all rows having sort column that is non-null (optional, default to false)
     * @param maxReceiptDate  Selects all filings received before this date(MM/DD/YYYY or YYYY-MM-DD)  (optional)
     * @param sortHideNull Hide null values on sorted column(s). (optional, default to false)
     * @param fileNumber Filing ID number (optional)
     * @param perPage The number of results returned per page. Defaults to 20. (optional, default to 20)
     * @param sort Provide a field to sort by. Use &#x60;-&#x60; for descending order.  (optional, default to -receipt_date)
     * @param qFiler  Keyword search for filer name or ID  (optional)
     * @return ApiResponse&lt;BaseF3FilingPage&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<BaseF3FilingPage> efileReportsHouseSenateGetWithHttpInfo(String apiKey, LocalDate minReceiptDate, Boolean sortNullsLast, Integer page, List<String> committeeId, Boolean sortNullOnly, LocalDate maxReceiptDate, Boolean sortHideNull, List<Integer> fileNumber, Integer perPage, String sort, List<String> qFiler) throws ApiException {
        okhttp3.Call localVarCall = efileReportsHouseSenateGetValidateBeforeCall(apiKey, minReceiptDate, sortNullsLast, page, committeeId, sortNullOnly, maxReceiptDate, sortHideNull, fileNumber, perPage, sort, qFiler, null);
        Type localVarReturnType = new TypeToken<BaseF3FilingPage>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     *  Key financial data reported periodically by committees as they are reported. This feed includes summary information from the the House F3 reports, the presidential F3p reports and the PAC and party F3x reports.  Generally, committees file reports on a quarterly or monthly basis, but some must also submit a report 12 days before primary elections. Therefore, during the primary season, the period covered by this file may be different for different committees. These totals also incorporate any changes made by committees, if any report covering the period is amended.  DISCLAIMER: The field labels contained within this resource are subject to change.  We are attempting to succinctly label these fields while conveying clear meaning to ensure accessibility for all users. 
     * @param apiKey  API key for https://api.data.gov. Get one at https://api.data.gov/signup.  (required)
     * @param minReceiptDate  Selects all filings received after this date(MM/DD/YYYY or YYYY-MM-DD)  (optional)
     * @param sortNullsLast Toggle that sorts null values last (optional, default to false)
     * @param page For paginating through results, starting at page 1 (optional, default to 1)
     * @param committeeId  A unique identifier assigned to each committee or filer registered with the FEC. In general committee id&#39;s begin with the letter C which is followed by eight digits.  (optional)
     * @param sortNullOnly Toggle that filters out all rows having sort column that is non-null (optional, default to false)
     * @param maxReceiptDate  Selects all filings received before this date(MM/DD/YYYY or YYYY-MM-DD)  (optional)
     * @param sortHideNull Hide null values on sorted column(s). (optional, default to false)
     * @param fileNumber Filing ID number (optional)
     * @param perPage The number of results returned per page. Defaults to 20. (optional, default to 20)
     * @param sort Provide a field to sort by. Use &#x60;-&#x60; for descending order.  (optional, default to -receipt_date)
     * @param qFiler  Keyword search for filer name or ID  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call efileReportsHouseSenateGetAsync(String apiKey, LocalDate minReceiptDate, Boolean sortNullsLast, Integer page, List<String> committeeId, Boolean sortNullOnly, LocalDate maxReceiptDate, Boolean sortHideNull, List<Integer> fileNumber, Integer perPage, String sort, List<String> qFiler, final ApiCallback<BaseF3FilingPage> _callback) throws ApiException {

        okhttp3.Call localVarCall = efileReportsHouseSenateGetValidateBeforeCall(apiKey, minReceiptDate, sortNullsLast, page, committeeId, sortNullOnly, maxReceiptDate, sortHideNull, fileNumber, perPage, sort, qFiler, _callback);
        Type localVarReturnType = new TypeToken<BaseF3FilingPage>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for efileReportsPacPartyGet
     * @param apiKey  API key for https://api.data.gov. Get one at https://api.data.gov/signup.  (required)
     * @param minReceiptDate  Selects all filings received after this date(MM/DD/YYYY or YYYY-MM-DD)  (optional)
     * @param sortNullsLast Toggle that sorts null values last (optional, default to false)
     * @param page For paginating through results, starting at page 1 (optional, default to 1)
     * @param committeeId  A unique identifier assigned to each committee or filer registered with the FEC. In general committee id&#39;s begin with the letter C which is followed by eight digits.  (optional)
     * @param sortNullOnly Toggle that filters out all rows having sort column that is non-null (optional, default to false)
     * @param maxReceiptDate  Selects all filings received before this date(MM/DD/YYYY or YYYY-MM-DD)  (optional)
     * @param sortHideNull Hide null values on sorted column(s). (optional, default to false)
     * @param fileNumber Filing ID number (optional)
     * @param perPage The number of results returned per page. Defaults to 20. (optional, default to 20)
     * @param sort Provide a field to sort by. Use &#x60;-&#x60; for descending order.  (optional, default to -receipt_date)
     * @param qFiler  Keyword search for filer name or ID  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call efileReportsPacPartyGetCall(String apiKey, LocalDate minReceiptDate, Boolean sortNullsLast, Integer page, List<String> committeeId, Boolean sortNullOnly, LocalDate maxReceiptDate, Boolean sortHideNull, List<Integer> fileNumber, Integer perPage, String sort, List<String> qFiler, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/efile/reports/pac-party/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiKey != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api_key", apiKey));
        }

        if (minReceiptDate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("min_receipt_date", minReceiptDate));
        }

        if (sortNullsLast != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort_nulls_last", sortNullsLast));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (committeeId != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "committee_id", committeeId));
        }

        if (sortNullOnly != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort_null_only", sortNullOnly));
        }

        if (maxReceiptDate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("max_receipt_date", maxReceiptDate));
        }

        if (sortHideNull != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort_hide_null", sortHideNull));
        }

        if (fileNumber != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "file_number", fileNumber));
        }

        if (perPage != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("per_page", perPage));
        }

        if (sort != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort", sort));
        }

        if (qFiler != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "q_filer", qFiler));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKeyHeaderAuth", "ApiKeyQueryAuth", "apiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call efileReportsPacPartyGetValidateBeforeCall(String apiKey, LocalDate minReceiptDate, Boolean sortNullsLast, Integer page, List<String> committeeId, Boolean sortNullOnly, LocalDate maxReceiptDate, Boolean sortHideNull, List<Integer> fileNumber, Integer perPage, String sort, List<String> qFiler, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'apiKey' is set
        if (apiKey == null) {
            throw new ApiException("Missing the required parameter 'apiKey' when calling efileReportsPacPartyGet(Async)");
        }

        return efileReportsPacPartyGetCall(apiKey, minReceiptDate, sortNullsLast, page, committeeId, sortNullOnly, maxReceiptDate, sortHideNull, fileNumber, perPage, sort, qFiler, _callback);

    }

    /**
     * 
     *  Key financial data reported periodically by committees as they are reported. This feed includes summary information from the the House F3 reports, the presidential F3p reports and the PAC and party F3x reports.  Generally, committees file reports on a quarterly or monthly basis, but some must also submit a report 12 days before primary elections. Therefore, during the primary season, the period covered by this file may be different for different committees. These totals also incorporate any changes made by committees, if any report covering the period is amended.  DISCLAIMER: The field labels contained within this resource are subject to change.  We are attempting to succinctly label these fields while conveying clear meaning to ensure accessibility for all users. 
     * @param apiKey  API key for https://api.data.gov. Get one at https://api.data.gov/signup.  (required)
     * @param minReceiptDate  Selects all filings received after this date(MM/DD/YYYY or YYYY-MM-DD)  (optional)
     * @param sortNullsLast Toggle that sorts null values last (optional, default to false)
     * @param page For paginating through results, starting at page 1 (optional, default to 1)
     * @param committeeId  A unique identifier assigned to each committee or filer registered with the FEC. In general committee id&#39;s begin with the letter C which is followed by eight digits.  (optional)
     * @param sortNullOnly Toggle that filters out all rows having sort column that is non-null (optional, default to false)
     * @param maxReceiptDate  Selects all filings received before this date(MM/DD/YYYY or YYYY-MM-DD)  (optional)
     * @param sortHideNull Hide null values on sorted column(s). (optional, default to false)
     * @param fileNumber Filing ID number (optional)
     * @param perPage The number of results returned per page. Defaults to 20. (optional, default to 20)
     * @param sort Provide a field to sort by. Use &#x60;-&#x60; for descending order.  (optional, default to -receipt_date)
     * @param qFiler  Keyword search for filer name or ID  (optional)
     * @return BaseF3XFilingPage
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public BaseF3XFilingPage efileReportsPacPartyGet(String apiKey, LocalDate minReceiptDate, Boolean sortNullsLast, Integer page, List<String> committeeId, Boolean sortNullOnly, LocalDate maxReceiptDate, Boolean sortHideNull, List<Integer> fileNumber, Integer perPage, String sort, List<String> qFiler) throws ApiException {
        ApiResponse<BaseF3XFilingPage> localVarResp = efileReportsPacPartyGetWithHttpInfo(apiKey, minReceiptDate, sortNullsLast, page, committeeId, sortNullOnly, maxReceiptDate, sortHideNull, fileNumber, perPage, sort, qFiler);
        return localVarResp.getData();
    }

    /**
     * 
     *  Key financial data reported periodically by committees as they are reported. This feed includes summary information from the the House F3 reports, the presidential F3p reports and the PAC and party F3x reports.  Generally, committees file reports on a quarterly or monthly basis, but some must also submit a report 12 days before primary elections. Therefore, during the primary season, the period covered by this file may be different for different committees. These totals also incorporate any changes made by committees, if any report covering the period is amended.  DISCLAIMER: The field labels contained within this resource are subject to change.  We are attempting to succinctly label these fields while conveying clear meaning to ensure accessibility for all users. 
     * @param apiKey  API key for https://api.data.gov. Get one at https://api.data.gov/signup.  (required)
     * @param minReceiptDate  Selects all filings received after this date(MM/DD/YYYY or YYYY-MM-DD)  (optional)
     * @param sortNullsLast Toggle that sorts null values last (optional, default to false)
     * @param page For paginating through results, starting at page 1 (optional, default to 1)
     * @param committeeId  A unique identifier assigned to each committee or filer registered with the FEC. In general committee id&#39;s begin with the letter C which is followed by eight digits.  (optional)
     * @param sortNullOnly Toggle that filters out all rows having sort column that is non-null (optional, default to false)
     * @param maxReceiptDate  Selects all filings received before this date(MM/DD/YYYY or YYYY-MM-DD)  (optional)
     * @param sortHideNull Hide null values on sorted column(s). (optional, default to false)
     * @param fileNumber Filing ID number (optional)
     * @param perPage The number of results returned per page. Defaults to 20. (optional, default to 20)
     * @param sort Provide a field to sort by. Use &#x60;-&#x60; for descending order.  (optional, default to -receipt_date)
     * @param qFiler  Keyword search for filer name or ID  (optional)
     * @return ApiResponse&lt;BaseF3XFilingPage&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<BaseF3XFilingPage> efileReportsPacPartyGetWithHttpInfo(String apiKey, LocalDate minReceiptDate, Boolean sortNullsLast, Integer page, List<String> committeeId, Boolean sortNullOnly, LocalDate maxReceiptDate, Boolean sortHideNull, List<Integer> fileNumber, Integer perPage, String sort, List<String> qFiler) throws ApiException {
        okhttp3.Call localVarCall = efileReportsPacPartyGetValidateBeforeCall(apiKey, minReceiptDate, sortNullsLast, page, committeeId, sortNullOnly, maxReceiptDate, sortHideNull, fileNumber, perPage, sort, qFiler, null);
        Type localVarReturnType = new TypeToken<BaseF3XFilingPage>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     *  Key financial data reported periodically by committees as they are reported. This feed includes summary information from the the House F3 reports, the presidential F3p reports and the PAC and party F3x reports.  Generally, committees file reports on a quarterly or monthly basis, but some must also submit a report 12 days before primary elections. Therefore, during the primary season, the period covered by this file may be different for different committees. These totals also incorporate any changes made by committees, if any report covering the period is amended.  DISCLAIMER: The field labels contained within this resource are subject to change.  We are attempting to succinctly label these fields while conveying clear meaning to ensure accessibility for all users. 
     * @param apiKey  API key for https://api.data.gov. Get one at https://api.data.gov/signup.  (required)
     * @param minReceiptDate  Selects all filings received after this date(MM/DD/YYYY or YYYY-MM-DD)  (optional)
     * @param sortNullsLast Toggle that sorts null values last (optional, default to false)
     * @param page For paginating through results, starting at page 1 (optional, default to 1)
     * @param committeeId  A unique identifier assigned to each committee or filer registered with the FEC. In general committee id&#39;s begin with the letter C which is followed by eight digits.  (optional)
     * @param sortNullOnly Toggle that filters out all rows having sort column that is non-null (optional, default to false)
     * @param maxReceiptDate  Selects all filings received before this date(MM/DD/YYYY or YYYY-MM-DD)  (optional)
     * @param sortHideNull Hide null values on sorted column(s). (optional, default to false)
     * @param fileNumber Filing ID number (optional)
     * @param perPage The number of results returned per page. Defaults to 20. (optional, default to 20)
     * @param sort Provide a field to sort by. Use &#x60;-&#x60; for descending order.  (optional, default to -receipt_date)
     * @param qFiler  Keyword search for filer name or ID  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call efileReportsPacPartyGetAsync(String apiKey, LocalDate minReceiptDate, Boolean sortNullsLast, Integer page, List<String> committeeId, Boolean sortNullOnly, LocalDate maxReceiptDate, Boolean sortHideNull, List<Integer> fileNumber, Integer perPage, String sort, List<String> qFiler, final ApiCallback<BaseF3XFilingPage> _callback) throws ApiException {

        okhttp3.Call localVarCall = efileReportsPacPartyGetValidateBeforeCall(apiKey, minReceiptDate, sortNullsLast, page, committeeId, sortNullOnly, maxReceiptDate, sortHideNull, fileNumber, perPage, sort, qFiler, _callback);
        Type localVarReturnType = new TypeToken<BaseF3XFilingPage>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for efileReportsPresidentialGet
     * @param apiKey  API key for https://api.data.gov. Get one at https://api.data.gov/signup.  (required)
     * @param minReceiptDate  Selects all filings received after this date(MM/DD/YYYY or YYYY-MM-DD)  (optional)
     * @param sortNullsLast Toggle that sorts null values last (optional, default to false)
     * @param page For paginating through results, starting at page 1 (optional, default to 1)
     * @param committeeId  A unique identifier assigned to each committee or filer registered with the FEC. In general committee id&#39;s begin with the letter C which is followed by eight digits.  (optional)
     * @param sortNullOnly Toggle that filters out all rows having sort column that is non-null (optional, default to false)
     * @param maxReceiptDate  Selects all filings received before this date(MM/DD/YYYY or YYYY-MM-DD)  (optional)
     * @param sortHideNull Hide null values on sorted column(s). (optional, default to false)
     * @param fileNumber Filing ID number (optional)
     * @param perPage The number of results returned per page. Defaults to 20. (optional, default to 20)
     * @param sort Provide a field to sort by. Use &#x60;-&#x60; for descending order.  (optional, default to -receipt_date)
     * @param qFiler  Keyword search for filer name or ID  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call efileReportsPresidentialGetCall(String apiKey, LocalDate minReceiptDate, Boolean sortNullsLast, Integer page, List<String> committeeId, Boolean sortNullOnly, LocalDate maxReceiptDate, Boolean sortHideNull, List<Integer> fileNumber, Integer perPage, String sort, List<String> qFiler, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/efile/reports/presidential/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiKey != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api_key", apiKey));
        }

        if (minReceiptDate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("min_receipt_date", minReceiptDate));
        }

        if (sortNullsLast != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort_nulls_last", sortNullsLast));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (committeeId != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "committee_id", committeeId));
        }

        if (sortNullOnly != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort_null_only", sortNullOnly));
        }

        if (maxReceiptDate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("max_receipt_date", maxReceiptDate));
        }

        if (sortHideNull != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort_hide_null", sortHideNull));
        }

        if (fileNumber != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "file_number", fileNumber));
        }

        if (perPage != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("per_page", perPage));
        }

        if (sort != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort", sort));
        }

        if (qFiler != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "q_filer", qFiler));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKeyHeaderAuth", "ApiKeyQueryAuth", "apiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call efileReportsPresidentialGetValidateBeforeCall(String apiKey, LocalDate minReceiptDate, Boolean sortNullsLast, Integer page, List<String> committeeId, Boolean sortNullOnly, LocalDate maxReceiptDate, Boolean sortHideNull, List<Integer> fileNumber, Integer perPage, String sort, List<String> qFiler, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'apiKey' is set
        if (apiKey == null) {
            throw new ApiException("Missing the required parameter 'apiKey' when calling efileReportsPresidentialGet(Async)");
        }

        return efileReportsPresidentialGetCall(apiKey, minReceiptDate, sortNullsLast, page, committeeId, sortNullOnly, maxReceiptDate, sortHideNull, fileNumber, perPage, sort, qFiler, _callback);

    }

    /**
     * 
     *  Key financial data reported periodically by committees as they are reported. This feed includes summary information from the the House F3 reports, the presidential F3p reports and the PAC and party F3x reports.  Generally, committees file reports on a quarterly or monthly basis, but some must also submit a report 12 days before primary elections. Therefore, during the primary season, the period covered by this file may be different for different committees. These totals also incorporate any changes made by committees, if any report covering the period is amended.  DISCLAIMER: The field labels contained within this resource are subject to change.  We are attempting to succinctly label these fields while conveying clear meaning to ensure accessibility for all users. 
     * @param apiKey  API key for https://api.data.gov. Get one at https://api.data.gov/signup.  (required)
     * @param minReceiptDate  Selects all filings received after this date(MM/DD/YYYY or YYYY-MM-DD)  (optional)
     * @param sortNullsLast Toggle that sorts null values last (optional, default to false)
     * @param page For paginating through results, starting at page 1 (optional, default to 1)
     * @param committeeId  A unique identifier assigned to each committee or filer registered with the FEC. In general committee id&#39;s begin with the letter C which is followed by eight digits.  (optional)
     * @param sortNullOnly Toggle that filters out all rows having sort column that is non-null (optional, default to false)
     * @param maxReceiptDate  Selects all filings received before this date(MM/DD/YYYY or YYYY-MM-DD)  (optional)
     * @param sortHideNull Hide null values on sorted column(s). (optional, default to false)
     * @param fileNumber Filing ID number (optional)
     * @param perPage The number of results returned per page. Defaults to 20. (optional, default to 20)
     * @param sort Provide a field to sort by. Use &#x60;-&#x60; for descending order.  (optional, default to -receipt_date)
     * @param qFiler  Keyword search for filer name or ID  (optional)
     * @return BaseF3PFilingPage
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public BaseF3PFilingPage efileReportsPresidentialGet(String apiKey, LocalDate minReceiptDate, Boolean sortNullsLast, Integer page, List<String> committeeId, Boolean sortNullOnly, LocalDate maxReceiptDate, Boolean sortHideNull, List<Integer> fileNumber, Integer perPage, String sort, List<String> qFiler) throws ApiException {
        ApiResponse<BaseF3PFilingPage> localVarResp = efileReportsPresidentialGetWithHttpInfo(apiKey, minReceiptDate, sortNullsLast, page, committeeId, sortNullOnly, maxReceiptDate, sortHideNull, fileNumber, perPage, sort, qFiler);
        return localVarResp.getData();
    }

    /**
     * 
     *  Key financial data reported periodically by committees as they are reported. This feed includes summary information from the the House F3 reports, the presidential F3p reports and the PAC and party F3x reports.  Generally, committees file reports on a quarterly or monthly basis, but some must also submit a report 12 days before primary elections. Therefore, during the primary season, the period covered by this file may be different for different committees. These totals also incorporate any changes made by committees, if any report covering the period is amended.  DISCLAIMER: The field labels contained within this resource are subject to change.  We are attempting to succinctly label these fields while conveying clear meaning to ensure accessibility for all users. 
     * @param apiKey  API key for https://api.data.gov. Get one at https://api.data.gov/signup.  (required)
     * @param minReceiptDate  Selects all filings received after this date(MM/DD/YYYY or YYYY-MM-DD)  (optional)
     * @param sortNullsLast Toggle that sorts null values last (optional, default to false)
     * @param page For paginating through results, starting at page 1 (optional, default to 1)
     * @param committeeId  A unique identifier assigned to each committee or filer registered with the FEC. In general committee id&#39;s begin with the letter C which is followed by eight digits.  (optional)
     * @param sortNullOnly Toggle that filters out all rows having sort column that is non-null (optional, default to false)
     * @param maxReceiptDate  Selects all filings received before this date(MM/DD/YYYY or YYYY-MM-DD)  (optional)
     * @param sortHideNull Hide null values on sorted column(s). (optional, default to false)
     * @param fileNumber Filing ID number (optional)
     * @param perPage The number of results returned per page. Defaults to 20. (optional, default to 20)
     * @param sort Provide a field to sort by. Use &#x60;-&#x60; for descending order.  (optional, default to -receipt_date)
     * @param qFiler  Keyword search for filer name or ID  (optional)
     * @return ApiResponse&lt;BaseF3PFilingPage&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<BaseF3PFilingPage> efileReportsPresidentialGetWithHttpInfo(String apiKey, LocalDate minReceiptDate, Boolean sortNullsLast, Integer page, List<String> committeeId, Boolean sortNullOnly, LocalDate maxReceiptDate, Boolean sortHideNull, List<Integer> fileNumber, Integer perPage, String sort, List<String> qFiler) throws ApiException {
        okhttp3.Call localVarCall = efileReportsPresidentialGetValidateBeforeCall(apiKey, minReceiptDate, sortNullsLast, page, committeeId, sortNullOnly, maxReceiptDate, sortHideNull, fileNumber, perPage, sort, qFiler, null);
        Type localVarReturnType = new TypeToken<BaseF3PFilingPage>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     *  Key financial data reported periodically by committees as they are reported. This feed includes summary information from the the House F3 reports, the presidential F3p reports and the PAC and party F3x reports.  Generally, committees file reports on a quarterly or monthly basis, but some must also submit a report 12 days before primary elections. Therefore, during the primary season, the period covered by this file may be different for different committees. These totals also incorporate any changes made by committees, if any report covering the period is amended.  DISCLAIMER: The field labels contained within this resource are subject to change.  We are attempting to succinctly label these fields while conveying clear meaning to ensure accessibility for all users. 
     * @param apiKey  API key for https://api.data.gov. Get one at https://api.data.gov/signup.  (required)
     * @param minReceiptDate  Selects all filings received after this date(MM/DD/YYYY or YYYY-MM-DD)  (optional)
     * @param sortNullsLast Toggle that sorts null values last (optional, default to false)
     * @param page For paginating through results, starting at page 1 (optional, default to 1)
     * @param committeeId  A unique identifier assigned to each committee or filer registered with the FEC. In general committee id&#39;s begin with the letter C which is followed by eight digits.  (optional)
     * @param sortNullOnly Toggle that filters out all rows having sort column that is non-null (optional, default to false)
     * @param maxReceiptDate  Selects all filings received before this date(MM/DD/YYYY or YYYY-MM-DD)  (optional)
     * @param sortHideNull Hide null values on sorted column(s). (optional, default to false)
     * @param fileNumber Filing ID number (optional)
     * @param perPage The number of results returned per page. Defaults to 20. (optional, default to 20)
     * @param sort Provide a field to sort by. Use &#x60;-&#x60; for descending order.  (optional, default to -receipt_date)
     * @param qFiler  Keyword search for filer name or ID  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call efileReportsPresidentialGetAsync(String apiKey, LocalDate minReceiptDate, Boolean sortNullsLast, Integer page, List<String> committeeId, Boolean sortNullOnly, LocalDate maxReceiptDate, Boolean sortHideNull, List<Integer> fileNumber, Integer perPage, String sort, List<String> qFiler, final ApiCallback<BaseF3PFilingPage> _callback) throws ApiException {

        okhttp3.Call localVarCall = efileReportsPresidentialGetValidateBeforeCall(apiKey, minReceiptDate, sortNullsLast, page, committeeId, sortNullOnly, maxReceiptDate, sortHideNull, fileNumber, perPage, sort, qFiler, _callback);
        Type localVarReturnType = new TypeToken<BaseF3PFilingPage>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
