/*
 * OpenFEC
 * This application programming interface (API) allows you to explore the way candidates and committees fund their campaigns.    The Federal Election Commission (FEC) API is a RESTful web service supporting full-text and field-specific searches on FEC data. [Bulk downloads](https://www.fec.gov/data/advanced/?tab=bulk-data) are available on the current site. Information is tied to the underlying forms by file ID and image ID. Data is updated nightly.    There are a lot of data, and a good place to start is to use search to find interesting candidates and committees. Then, you can use their IDs to find report or line item details with the other endpoints. If you are interested in individual donors, check out contributor information in the `/schedule_a/` endpoints.    <b class=\"body\" id=\"getting_started_head\">Getting started with the openFEC API</b><br>    If you would like to use the FEC's API programmatically, you can sign up for your own API key using our form. Alternatively, you can still try out our API without an API key by using the web interface and using DEMO_KEY. Note that when you use the openFEC API you are subject to the [Terms of Service](https://github.com/fecgov/FEC/blob/master/TERMS-OF-SERVICE.md) and [Acceptable Use policy](https://github.com/fecgov/FEC/blob/master/ACCEPTABLE-USE-POLICY.md).    Signing up for an API key will enable you to place up to 1,000 calls an hour. Each call is limited to 100 results per page. You can email questions, comments or a request to get a key for 7,200 calls an hour (120 calls per minute) to <a href=\"mailto:APIinfo@fec.gov\">APIinfo@fec.gov</a>. You can also ask questions and discuss the data in a community led [group](https://groups.google.com/forum/#!forum/fec-data).    The model definitions and schema are available at [/swagger](/swagger/). This is useful for making wrappers and exploring the data.    A few restrictions limit the way you can use FEC data. For example, you canâ€™t use contributor lists for commercial purposes or to solicit donations. [Learn more here](https://www.fec.gov/updates/sale-or-use-contributor-information/).    [Inspect our source code](https://github.com/fecgov/openFEC). We welcome issues and pull requests!    <p><br></p> <h2 class=\"title\" id=\"signup_head\">Sign up for an API key</h2> <div id=\"apidatagov_signup\">Loading signup form...</div>
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.math.BigDecimal;
import java.time.LocalDate;
import java.util.Arrays;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Electioneering
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:02:12.812386-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Electioneering {
  public static final String SERIALIZED_NAME_AMENDMENT_INDICATOR = "amendment_indicator";
  @SerializedName(SERIALIZED_NAME_AMENDMENT_INDICATOR)
  private String amendmentIndicator;

  public static final String SERIALIZED_NAME_BEGINNING_IMAGE_NUMBER = "beginning_image_number";
  @SerializedName(SERIALIZED_NAME_BEGINNING_IMAGE_NUMBER)
  private String beginningImageNumber;

  public static final String SERIALIZED_NAME_CALCULATED_CANDIDATE_SHARE = "calculated_candidate_share";
  @SerializedName(SERIALIZED_NAME_CALCULATED_CANDIDATE_SHARE)
  private BigDecimal calculatedCandidateShare;

  public static final String SERIALIZED_NAME_CANDIDATE_DISTRICT = "candidate_district";
  @SerializedName(SERIALIZED_NAME_CANDIDATE_DISTRICT)
  private String candidateDistrict;

  public static final String SERIALIZED_NAME_CANDIDATE_ID = "candidate_id";
  @SerializedName(SERIALIZED_NAME_CANDIDATE_ID)
  private String candidateId;

  public static final String SERIALIZED_NAME_CANDIDATE_NAME = "candidate_name";
  @SerializedName(SERIALIZED_NAME_CANDIDATE_NAME)
  private String candidateName;

  public static final String SERIALIZED_NAME_CANDIDATE_OFFICE = "candidate_office";
  @SerializedName(SERIALIZED_NAME_CANDIDATE_OFFICE)
  private String candidateOffice;

  public static final String SERIALIZED_NAME_CANDIDATE_STATE = "candidate_state";
  @SerializedName(SERIALIZED_NAME_CANDIDATE_STATE)
  private String candidateState;

  public static final String SERIALIZED_NAME_COMMITTEE_ID = "committee_id";
  @SerializedName(SERIALIZED_NAME_COMMITTEE_ID)
  private String committeeId;

  public static final String SERIALIZED_NAME_COMMITTEE_NAME = "committee_name";
  @SerializedName(SERIALIZED_NAME_COMMITTEE_NAME)
  private String committeeName;

  public static final String SERIALIZED_NAME_COMMUNICATION_DATE = "communication_date";
  @SerializedName(SERIALIZED_NAME_COMMUNICATION_DATE)
  private LocalDate communicationDate;

  public static final String SERIALIZED_NAME_DISBURSEMENT_AMOUNT = "disbursement_amount";
  @SerializedName(SERIALIZED_NAME_DISBURSEMENT_AMOUNT)
  private BigDecimal disbursementAmount;

  public static final String SERIALIZED_NAME_DISBURSEMENT_DATE = "disbursement_date";
  @SerializedName(SERIALIZED_NAME_DISBURSEMENT_DATE)
  private LocalDate disbursementDate;

  public static final String SERIALIZED_NAME_ELECTION_TYPE = "election_type";
  @SerializedName(SERIALIZED_NAME_ELECTION_TYPE)
  private String electionType;

  public static final String SERIALIZED_NAME_FILE_NUMBER = "file_number";
  @SerializedName(SERIALIZED_NAME_FILE_NUMBER)
  private Integer fileNumber;

  public static final String SERIALIZED_NAME_LINK_ID = "link_id";
  @SerializedName(SERIALIZED_NAME_LINK_ID)
  private Integer linkId;

  public static final String SERIALIZED_NAME_NUMBER_OF_CANDIDATES = "number_of_candidates";
  @SerializedName(SERIALIZED_NAME_NUMBER_OF_CANDIDATES)
  private BigDecimal numberOfCandidates;

  public static final String SERIALIZED_NAME_PAYEE_NAME = "payee_name";
  @SerializedName(SERIALIZED_NAME_PAYEE_NAME)
  private String payeeName;

  public static final String SERIALIZED_NAME_PAYEE_STATE = "payee_state";
  @SerializedName(SERIALIZED_NAME_PAYEE_STATE)
  private String payeeState;

  public static final String SERIALIZED_NAME_PDF_URL = "pdf_url";
  @SerializedName(SERIALIZED_NAME_PDF_URL)
  private String pdfUrl;

  public static final String SERIALIZED_NAME_PUBLIC_DISTRIBUTION_DATE = "public_distribution_date";
  @SerializedName(SERIALIZED_NAME_PUBLIC_DISTRIBUTION_DATE)
  private LocalDate publicDistributionDate;

  public static final String SERIALIZED_NAME_PURPOSE_DESCRIPTION = "purpose_description";
  @SerializedName(SERIALIZED_NAME_PURPOSE_DESCRIPTION)
  private String purposeDescription;

  public static final String SERIALIZED_NAME_RECEIPT_DATE = "receipt_date";
  @SerializedName(SERIALIZED_NAME_RECEIPT_DATE)
  private LocalDate receiptDate;

  public static final String SERIALIZED_NAME_REPORT_YEAR = "report_year";
  @SerializedName(SERIALIZED_NAME_REPORT_YEAR)
  private Integer reportYear;

  public static final String SERIALIZED_NAME_SB_IMAGE_NUM = "sb_image_num";
  @SerializedName(SERIALIZED_NAME_SB_IMAGE_NUM)
  private String sbImageNum;

  public static final String SERIALIZED_NAME_SB_LINK_ID = "sb_link_id";
  @SerializedName(SERIALIZED_NAME_SB_LINK_ID)
  private String sbLinkId;

  public static final String SERIALIZED_NAME_SUB_ID = "sub_id";
  @SerializedName(SERIALIZED_NAME_SUB_ID)
  private Integer subId;

  public Electioneering() {
  }

  public Electioneering amendmentIndicator(String amendmentIndicator) {
    this.amendmentIndicator = amendmentIndicator;
    return this;
  }

  /**
   * Get amendmentIndicator
   * @return amendmentIndicator
   */
  @javax.annotation.Nullable
  public String getAmendmentIndicator() {
    return amendmentIndicator;
  }

  public void setAmendmentIndicator(String amendmentIndicator) {
    this.amendmentIndicator = amendmentIndicator;
  }


  public Electioneering beginningImageNumber(String beginningImageNumber) {
    this.beginningImageNumber = beginningImageNumber;
    return this;
  }

  /**
   * Get beginningImageNumber
   * @return beginningImageNumber
   */
  @javax.annotation.Nullable
  public String getBeginningImageNumber() {
    return beginningImageNumber;
  }

  public void setBeginningImageNumber(String beginningImageNumber) {
    this.beginningImageNumber = beginningImageNumber;
  }


  public Electioneering calculatedCandidateShare(BigDecimal calculatedCandidateShare) {
    this.calculatedCandidateShare = calculatedCandidateShare;
    return this;
  }

  /**
   *  \&quot;If an electioneering cost targets several candidates, the total cost is divided by the number of candidates. If it only mentions one candidate the full cost of the communication is listed.\&quot; 
   * @return calculatedCandidateShare
   */
  @javax.annotation.Nullable
  public BigDecimal getCalculatedCandidateShare() {
    return calculatedCandidateShare;
  }

  public void setCalculatedCandidateShare(BigDecimal calculatedCandidateShare) {
    this.calculatedCandidateShare = calculatedCandidateShare;
  }


  public Electioneering candidateDistrict(String candidateDistrict) {
    this.candidateDistrict = candidateDistrict;
    return this;
  }

  /**
   * Get candidateDistrict
   * @return candidateDistrict
   */
  @javax.annotation.Nullable
  public String getCandidateDistrict() {
    return candidateDistrict;
  }

  public void setCandidateDistrict(String candidateDistrict) {
    this.candidateDistrict = candidateDistrict;
  }


  public Electioneering candidateId(String candidateId) {
    this.candidateId = candidateId;
    return this;
  }

  /**
   * Get candidateId
   * @return candidateId
   */
  @javax.annotation.Nullable
  public String getCandidateId() {
    return candidateId;
  }

  public void setCandidateId(String candidateId) {
    this.candidateId = candidateId;
  }


  public Electioneering candidateName(String candidateName) {
    this.candidateName = candidateName;
    return this;
  }

  /**
   * Get candidateName
   * @return candidateName
   */
  @javax.annotation.Nullable
  public String getCandidateName() {
    return candidateName;
  }

  public void setCandidateName(String candidateName) {
    this.candidateName = candidateName;
  }


  public Electioneering candidateOffice(String candidateOffice) {
    this.candidateOffice = candidateOffice;
    return this;
  }

  /**
   * Get candidateOffice
   * @return candidateOffice
   */
  @javax.annotation.Nullable
  public String getCandidateOffice() {
    return candidateOffice;
  }

  public void setCandidateOffice(String candidateOffice) {
    this.candidateOffice = candidateOffice;
  }


  public Electioneering candidateState(String candidateState) {
    this.candidateState = candidateState;
    return this;
  }

  /**
   * Get candidateState
   * @return candidateState
   */
  @javax.annotation.Nullable
  public String getCandidateState() {
    return candidateState;
  }

  public void setCandidateState(String candidateState) {
    this.candidateState = candidateState;
  }


  public Electioneering committeeId(String committeeId) {
    this.committeeId = committeeId;
    return this;
  }

  /**
   * Get committeeId
   * @return committeeId
   */
  @javax.annotation.Nullable
  public String getCommitteeId() {
    return committeeId;
  }

  public void setCommitteeId(String committeeId) {
    this.committeeId = committeeId;
  }


  public Electioneering committeeName(String committeeName) {
    this.committeeName = committeeName;
    return this;
  }

  /**
   * Get committeeName
   * @return committeeName
   */
  @javax.annotation.Nullable
  public String getCommitteeName() {
    return committeeName;
  }

  public void setCommitteeName(String committeeName) {
    this.committeeName = committeeName;
  }


  public Electioneering communicationDate(LocalDate communicationDate) {
    this.communicationDate = communicationDate;
    return this;
  }

  /**
   *  It is the airing, broadcast, cablecast or other dissemination of the communication. 
   * @return communicationDate
   */
  @javax.annotation.Nullable
  public LocalDate getCommunicationDate() {
    return communicationDate;
  }

  public void setCommunicationDate(LocalDate communicationDate) {
    this.communicationDate = communicationDate;
  }


  public Electioneering disbursementAmount(BigDecimal disbursementAmount) {
    this.disbursementAmount = disbursementAmount;
    return this;
  }

  /**
   * Get disbursementAmount
   * @return disbursementAmount
   */
  @javax.annotation.Nullable
  public BigDecimal getDisbursementAmount() {
    return disbursementAmount;
  }

  public void setDisbursementAmount(BigDecimal disbursementAmount) {
    this.disbursementAmount = disbursementAmount;
  }


  public Electioneering disbursementDate(LocalDate disbursementDate) {
    this.disbursementDate = disbursementDate;
    return this;
  }

  /**
   *  Disbursement date includes actual disbursements and execution of contracts creating an obligation to make disbursements (SB date of disbursement). 
   * @return disbursementDate
   */
  @javax.annotation.Nullable
  public LocalDate getDisbursementDate() {
    return disbursementDate;
  }

  public void setDisbursementDate(LocalDate disbursementDate) {
    this.disbursementDate = disbursementDate;
  }


  public Electioneering electionType(String electionType) {
    this.electionType = electionType;
    return this;
  }

  /**
   * Get electionType
   * @return electionType
   */
  @javax.annotation.Nullable
  public String getElectionType() {
    return electionType;
  }

  public void setElectionType(String electionType) {
    this.electionType = electionType;
  }


  public Electioneering fileNumber(Integer fileNumber) {
    this.fileNumber = fileNumber;
    return this;
  }

  /**
   * Get fileNumber
   * @return fileNumber
   */
  @javax.annotation.Nullable
  public Integer getFileNumber() {
    return fileNumber;
  }

  public void setFileNumber(Integer fileNumber) {
    this.fileNumber = fileNumber;
  }


  public Electioneering linkId(Integer linkId) {
    this.linkId = linkId;
    return this;
  }

  /**
   * Get linkId
   * @return linkId
   */
  @javax.annotation.Nullable
  public Integer getLinkId() {
    return linkId;
  }

  public void setLinkId(Integer linkId) {
    this.linkId = linkId;
  }


  public Electioneering numberOfCandidates(BigDecimal numberOfCandidates) {
    this.numberOfCandidates = numberOfCandidates;
    return this;
  }

  /**
   * Get numberOfCandidates
   * @return numberOfCandidates
   */
  @javax.annotation.Nullable
  public BigDecimal getNumberOfCandidates() {
    return numberOfCandidates;
  }

  public void setNumberOfCandidates(BigDecimal numberOfCandidates) {
    this.numberOfCandidates = numberOfCandidates;
  }


  public Electioneering payeeName(String payeeName) {
    this.payeeName = payeeName;
    return this;
  }

  /**
   *  Name of the entity that received the payment. 
   * @return payeeName
   */
  @javax.annotation.Nullable
  public String getPayeeName() {
    return payeeName;
  }

  public void setPayeeName(String payeeName) {
    this.payeeName = payeeName;
  }


  public Electioneering payeeState(String payeeState) {
    this.payeeState = payeeState;
    return this;
  }

  /**
   * Get payeeState
   * @return payeeState
   */
  @javax.annotation.Nullable
  public String getPayeeState() {
    return payeeState;
  }

  public void setPayeeState(String payeeState) {
    this.payeeState = payeeState;
  }


  public Electioneering pdfUrl(String pdfUrl) {
    this.pdfUrl = pdfUrl;
    return this;
  }

  /**
   * Get pdfUrl
   * @return pdfUrl
   */
  @javax.annotation.Nullable
  public String getPdfUrl() {
    return pdfUrl;
  }

  public void setPdfUrl(String pdfUrl) {
    this.pdfUrl = pdfUrl;
  }


  public Electioneering publicDistributionDate(LocalDate publicDistributionDate) {
    this.publicDistributionDate = publicDistributionDate;
    return this;
  }

  /**
   *  The pubic distribution date is the date that triggers disclosure of the electioneering communication (date reported on page 1 of Form 9). 
   * @return publicDistributionDate
   */
  @javax.annotation.Nullable
  public LocalDate getPublicDistributionDate() {
    return publicDistributionDate;
  }

  public void setPublicDistributionDate(LocalDate publicDistributionDate) {
    this.publicDistributionDate = publicDistributionDate;
  }


  public Electioneering purposeDescription(String purposeDescription) {
    this.purposeDescription = purposeDescription;
    return this;
  }

  /**
   * Get purposeDescription
   * @return purposeDescription
   */
  @javax.annotation.Nullable
  public String getPurposeDescription() {
    return purposeDescription;
  }

  public void setPurposeDescription(String purposeDescription) {
    this.purposeDescription = purposeDescription;
  }


  public Electioneering receiptDate(LocalDate receiptDate) {
    this.receiptDate = receiptDate;
    return this;
  }

  /**
   * Get receiptDate
   * @return receiptDate
   */
  @javax.annotation.Nullable
  public LocalDate getReceiptDate() {
    return receiptDate;
  }

  public void setReceiptDate(LocalDate receiptDate) {
    this.receiptDate = receiptDate;
  }


  public Electioneering reportYear(Integer reportYear) {
    this.reportYear = reportYear;
    return this;
  }

  /**
   * Get reportYear
   * @return reportYear
   */
  @javax.annotation.Nullable
  public Integer getReportYear() {
    return reportYear;
  }

  public void setReportYear(Integer reportYear) {
    this.reportYear = reportYear;
  }


  public Electioneering sbImageNum(String sbImageNum) {
    this.sbImageNum = sbImageNum;
    return this;
  }

  /**
   * Get sbImageNum
   * @return sbImageNum
   */
  @javax.annotation.Nullable
  public String getSbImageNum() {
    return sbImageNum;
  }

  public void setSbImageNum(String sbImageNum) {
    this.sbImageNum = sbImageNum;
  }


  public Electioneering sbLinkId(String sbLinkId) {
    this.sbLinkId = sbLinkId;
    return this;
  }

  /**
   * Get sbLinkId
   * @return sbLinkId
   */
  @javax.annotation.Nullable
  public String getSbLinkId() {
    return sbLinkId;
  }

  public void setSbLinkId(String sbLinkId) {
    this.sbLinkId = sbLinkId;
  }


  public Electioneering subId(Integer subId) {
    this.subId = subId;
    return this;
  }

  /**
   *  The identifier for each electioneering record. 
   * @return subId
   */
  @javax.annotation.Nullable
  public Integer getSubId() {
    return subId;
  }

  public void setSubId(Integer subId) {
    this.subId = subId;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Electioneering electioneering = (Electioneering) o;
    return Objects.equals(this.amendmentIndicator, electioneering.amendmentIndicator) &&
        Objects.equals(this.beginningImageNumber, electioneering.beginningImageNumber) &&
        Objects.equals(this.calculatedCandidateShare, electioneering.calculatedCandidateShare) &&
        Objects.equals(this.candidateDistrict, electioneering.candidateDistrict) &&
        Objects.equals(this.candidateId, electioneering.candidateId) &&
        Objects.equals(this.candidateName, electioneering.candidateName) &&
        Objects.equals(this.candidateOffice, electioneering.candidateOffice) &&
        Objects.equals(this.candidateState, electioneering.candidateState) &&
        Objects.equals(this.committeeId, electioneering.committeeId) &&
        Objects.equals(this.committeeName, electioneering.committeeName) &&
        Objects.equals(this.communicationDate, electioneering.communicationDate) &&
        Objects.equals(this.disbursementAmount, electioneering.disbursementAmount) &&
        Objects.equals(this.disbursementDate, electioneering.disbursementDate) &&
        Objects.equals(this.electionType, electioneering.electionType) &&
        Objects.equals(this.fileNumber, electioneering.fileNumber) &&
        Objects.equals(this.linkId, electioneering.linkId) &&
        Objects.equals(this.numberOfCandidates, electioneering.numberOfCandidates) &&
        Objects.equals(this.payeeName, electioneering.payeeName) &&
        Objects.equals(this.payeeState, electioneering.payeeState) &&
        Objects.equals(this.pdfUrl, electioneering.pdfUrl) &&
        Objects.equals(this.publicDistributionDate, electioneering.publicDistributionDate) &&
        Objects.equals(this.purposeDescription, electioneering.purposeDescription) &&
        Objects.equals(this.receiptDate, electioneering.receiptDate) &&
        Objects.equals(this.reportYear, electioneering.reportYear) &&
        Objects.equals(this.sbImageNum, electioneering.sbImageNum) &&
        Objects.equals(this.sbLinkId, electioneering.sbLinkId) &&
        Objects.equals(this.subId, electioneering.subId);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(amendmentIndicator, beginningImageNumber, calculatedCandidateShare, candidateDistrict, candidateId, candidateName, candidateOffice, candidateState, committeeId, committeeName, communicationDate, disbursementAmount, disbursementDate, electionType, fileNumber, linkId, numberOfCandidates, payeeName, payeeState, pdfUrl, publicDistributionDate, purposeDescription, receiptDate, reportYear, sbImageNum, sbLinkId, subId);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Electioneering {\n");
    sb.append("    amendmentIndicator: ").append(toIndentedString(amendmentIndicator)).append("\n");
    sb.append("    beginningImageNumber: ").append(toIndentedString(beginningImageNumber)).append("\n");
    sb.append("    calculatedCandidateShare: ").append(toIndentedString(calculatedCandidateShare)).append("\n");
    sb.append("    candidateDistrict: ").append(toIndentedString(candidateDistrict)).append("\n");
    sb.append("    candidateId: ").append(toIndentedString(candidateId)).append("\n");
    sb.append("    candidateName: ").append(toIndentedString(candidateName)).append("\n");
    sb.append("    candidateOffice: ").append(toIndentedString(candidateOffice)).append("\n");
    sb.append("    candidateState: ").append(toIndentedString(candidateState)).append("\n");
    sb.append("    committeeId: ").append(toIndentedString(committeeId)).append("\n");
    sb.append("    committeeName: ").append(toIndentedString(committeeName)).append("\n");
    sb.append("    communicationDate: ").append(toIndentedString(communicationDate)).append("\n");
    sb.append("    disbursementAmount: ").append(toIndentedString(disbursementAmount)).append("\n");
    sb.append("    disbursementDate: ").append(toIndentedString(disbursementDate)).append("\n");
    sb.append("    electionType: ").append(toIndentedString(electionType)).append("\n");
    sb.append("    fileNumber: ").append(toIndentedString(fileNumber)).append("\n");
    sb.append("    linkId: ").append(toIndentedString(linkId)).append("\n");
    sb.append("    numberOfCandidates: ").append(toIndentedString(numberOfCandidates)).append("\n");
    sb.append("    payeeName: ").append(toIndentedString(payeeName)).append("\n");
    sb.append("    payeeState: ").append(toIndentedString(payeeState)).append("\n");
    sb.append("    pdfUrl: ").append(toIndentedString(pdfUrl)).append("\n");
    sb.append("    publicDistributionDate: ").append(toIndentedString(publicDistributionDate)).append("\n");
    sb.append("    purposeDescription: ").append(toIndentedString(purposeDescription)).append("\n");
    sb.append("    receiptDate: ").append(toIndentedString(receiptDate)).append("\n");
    sb.append("    reportYear: ").append(toIndentedString(reportYear)).append("\n");
    sb.append("    sbImageNum: ").append(toIndentedString(sbImageNum)).append("\n");
    sb.append("    sbLinkId: ").append(toIndentedString(sbLinkId)).append("\n");
    sb.append("    subId: ").append(toIndentedString(subId)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("amendment_indicator");
    openapiFields.add("beginning_image_number");
    openapiFields.add("calculated_candidate_share");
    openapiFields.add("candidate_district");
    openapiFields.add("candidate_id");
    openapiFields.add("candidate_name");
    openapiFields.add("candidate_office");
    openapiFields.add("candidate_state");
    openapiFields.add("committee_id");
    openapiFields.add("committee_name");
    openapiFields.add("communication_date");
    openapiFields.add("disbursement_amount");
    openapiFields.add("disbursement_date");
    openapiFields.add("election_type");
    openapiFields.add("file_number");
    openapiFields.add("link_id");
    openapiFields.add("number_of_candidates");
    openapiFields.add("payee_name");
    openapiFields.add("payee_state");
    openapiFields.add("pdf_url");
    openapiFields.add("public_distribution_date");
    openapiFields.add("purpose_description");
    openapiFields.add("receipt_date");
    openapiFields.add("report_year");
    openapiFields.add("sb_image_num");
    openapiFields.add("sb_link_id");
    openapiFields.add("sub_id");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Electioneering
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Electioneering.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Electioneering is not found in the empty JSON string", Electioneering.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Electioneering.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Electioneering` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("amendment_indicator") != null && !jsonObj.get("amendment_indicator").isJsonNull()) && !jsonObj.get("amendment_indicator").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `amendment_indicator` to be a primitive type in the JSON string but got `%s`", jsonObj.get("amendment_indicator").toString()));
      }
      if ((jsonObj.get("beginning_image_number") != null && !jsonObj.get("beginning_image_number").isJsonNull()) && !jsonObj.get("beginning_image_number").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `beginning_image_number` to be a primitive type in the JSON string but got `%s`", jsonObj.get("beginning_image_number").toString()));
      }
      if ((jsonObj.get("candidate_district") != null && !jsonObj.get("candidate_district").isJsonNull()) && !jsonObj.get("candidate_district").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `candidate_district` to be a primitive type in the JSON string but got `%s`", jsonObj.get("candidate_district").toString()));
      }
      if ((jsonObj.get("candidate_id") != null && !jsonObj.get("candidate_id").isJsonNull()) && !jsonObj.get("candidate_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `candidate_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("candidate_id").toString()));
      }
      if ((jsonObj.get("candidate_name") != null && !jsonObj.get("candidate_name").isJsonNull()) && !jsonObj.get("candidate_name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `candidate_name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("candidate_name").toString()));
      }
      if ((jsonObj.get("candidate_office") != null && !jsonObj.get("candidate_office").isJsonNull()) && !jsonObj.get("candidate_office").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `candidate_office` to be a primitive type in the JSON string but got `%s`", jsonObj.get("candidate_office").toString()));
      }
      if ((jsonObj.get("candidate_state") != null && !jsonObj.get("candidate_state").isJsonNull()) && !jsonObj.get("candidate_state").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `candidate_state` to be a primitive type in the JSON string but got `%s`", jsonObj.get("candidate_state").toString()));
      }
      if ((jsonObj.get("committee_id") != null && !jsonObj.get("committee_id").isJsonNull()) && !jsonObj.get("committee_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `committee_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("committee_id").toString()));
      }
      if ((jsonObj.get("committee_name") != null && !jsonObj.get("committee_name").isJsonNull()) && !jsonObj.get("committee_name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `committee_name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("committee_name").toString()));
      }
      if ((jsonObj.get("election_type") != null && !jsonObj.get("election_type").isJsonNull()) && !jsonObj.get("election_type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `election_type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("election_type").toString()));
      }
      if ((jsonObj.get("payee_name") != null && !jsonObj.get("payee_name").isJsonNull()) && !jsonObj.get("payee_name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `payee_name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("payee_name").toString()));
      }
      if ((jsonObj.get("payee_state") != null && !jsonObj.get("payee_state").isJsonNull()) && !jsonObj.get("payee_state").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `payee_state` to be a primitive type in the JSON string but got `%s`", jsonObj.get("payee_state").toString()));
      }
      if ((jsonObj.get("pdf_url") != null && !jsonObj.get("pdf_url").isJsonNull()) && !jsonObj.get("pdf_url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `pdf_url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("pdf_url").toString()));
      }
      if ((jsonObj.get("purpose_description") != null && !jsonObj.get("purpose_description").isJsonNull()) && !jsonObj.get("purpose_description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `purpose_description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("purpose_description").toString()));
      }
      if ((jsonObj.get("sb_image_num") != null && !jsonObj.get("sb_image_num").isJsonNull()) && !jsonObj.get("sb_image_num").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `sb_image_num` to be a primitive type in the JSON string but got `%s`", jsonObj.get("sb_image_num").toString()));
      }
      if ((jsonObj.get("sb_link_id") != null && !jsonObj.get("sb_link_id").isJsonNull()) && !jsonObj.get("sb_link_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `sb_link_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("sb_link_id").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Electioneering.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Electioneering' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Electioneering> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Electioneering.class));

       return (TypeAdapter<T>) new TypeAdapter<Electioneering>() {
           @Override
           public void write(JsonWriter out, Electioneering value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Electioneering read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Electioneering given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Electioneering
   * @throws IOException if the JSON string is invalid with respect to Electioneering
   */
  public static Electioneering fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Electioneering.class);
  }

  /**
   * Convert an instance of Electioneering to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

