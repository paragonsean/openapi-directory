/*
 * OpenFEC
 * This application programming interface (API) allows you to explore the way candidates and committees fund their campaigns.    The Federal Election Commission (FEC) API is a RESTful web service supporting full-text and field-specific searches on FEC data. [Bulk downloads](https://www.fec.gov/data/advanced/?tab=bulk-data) are available on the current site. Information is tied to the underlying forms by file ID and image ID. Data is updated nightly.    There are a lot of data, and a good place to start is to use search to find interesting candidates and committees. Then, you can use their IDs to find report or line item details with the other endpoints. If you are interested in individual donors, check out contributor information in the `/schedule_a/` endpoints.    <b class=\"body\" id=\"getting_started_head\">Getting started with the openFEC API</b><br>    If you would like to use the FEC's API programmatically, you can sign up for your own API key using our form. Alternatively, you can still try out our API without an API key by using the web interface and using DEMO_KEY. Note that when you use the openFEC API you are subject to the [Terms of Service](https://github.com/fecgov/FEC/blob/master/TERMS-OF-SERVICE.md) and [Acceptable Use policy](https://github.com/fecgov/FEC/blob/master/ACCEPTABLE-USE-POLICY.md).    Signing up for an API key will enable you to place up to 1,000 calls an hour. Each call is limited to 100 results per page. You can email questions, comments or a request to get a key for 7,200 calls an hour (120 calls per minute) to <a href=\"mailto:APIinfo@fec.gov\">APIinfo@fec.gov</a>. You can also ask questions and discuss the data in a community led [group](https://groups.google.com/forum/#!forum/fec-data).    The model definitions and schema are available at [/swagger](/swagger/). This is useful for making wrappers and exploring the data.    A few restrictions limit the way you can use FEC data. For example, you canâ€™t use contributor lists for commercial purposes or to solicit donations. [Learn more here](https://www.fec.gov/updates/sale-or-use-contributor-information/).    [Inspect our source code](https://github.com/fecgov/openFEC). We welcome issues and pull requests!    <p><br></p> <h2 class=\"title\" id=\"signup_head\">Sign up for an API key</h2> <div id=\"apidatagov_signup\">Loading signup form...</div>
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.LocalDate;
import java.time.OffsetDateTime;
import java.util.Arrays;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * OperationsLog
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:02:12.812386-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class OperationsLog {
  public static final String SERIALIZED_NAME_AMENDMENT_INDICATOR = "amendment_indicator";
  @SerializedName(SERIALIZED_NAME_AMENDMENT_INDICATOR)
  private String amendmentIndicator;

  public static final String SERIALIZED_NAME_BEGINNING_IMAGE_NUMBER = "beginning_image_number";
  @SerializedName(SERIALIZED_NAME_BEGINNING_IMAGE_NUMBER)
  private String beginningImageNumber;

  public static final String SERIALIZED_NAME_CANDIDATE_COMMITTEE_ID = "candidate_committee_id";
  @SerializedName(SERIALIZED_NAME_CANDIDATE_COMMITTEE_ID)
  private String candidateCommitteeId;

  public static final String SERIALIZED_NAME_COVERAGE_END_DATE = "coverage_end_date";
  @SerializedName(SERIALIZED_NAME_COVERAGE_END_DATE)
  private OffsetDateTime coverageEndDate;

  public static final String SERIALIZED_NAME_COVERAGE_START_DATE = "coverage_start_date";
  @SerializedName(SERIALIZED_NAME_COVERAGE_START_DATE)
  private OffsetDateTime coverageStartDate;

  public static final String SERIALIZED_NAME_ENDING_IMAGE_NUMBER = "ending_image_number";
  @SerializedName(SERIALIZED_NAME_ENDING_IMAGE_NUMBER)
  private String endingImageNumber;

  public static final String SERIALIZED_NAME_FORM_TYPE = "form_type";
  @SerializedName(SERIALIZED_NAME_FORM_TYPE)
  private String formType;

  public static final String SERIALIZED_NAME_RECEIPT_DATE = "receipt_date";
  @SerializedName(SERIALIZED_NAME_RECEIPT_DATE)
  private OffsetDateTime receiptDate;

  public static final String SERIALIZED_NAME_REPORT_TYPE = "report_type";
  @SerializedName(SERIALIZED_NAME_REPORT_TYPE)
  private String reportType;

  public static final String SERIALIZED_NAME_REPORT_YEAR = "report_year";
  @SerializedName(SERIALIZED_NAME_REPORT_YEAR)
  private Integer reportYear;

  public static final String SERIALIZED_NAME_STATUS_NUM = "status_num";
  @SerializedName(SERIALIZED_NAME_STATUS_NUM)
  private Integer statusNum;

  public static final String SERIALIZED_NAME_SUB_ID = "sub_id";
  @SerializedName(SERIALIZED_NAME_SUB_ID)
  private Integer subId;

  public static final String SERIALIZED_NAME_SUMMARY_DATA_COMPLETE_DATE = "summary_data_complete_date";
  @SerializedName(SERIALIZED_NAME_SUMMARY_DATA_COMPLETE_DATE)
  private OffsetDateTime summaryDataCompleteDate;

  public static final String SERIALIZED_NAME_SUMMARY_DATA_VERIFICATION_DATE = "summary_data_verification_date";
  @SerializedName(SERIALIZED_NAME_SUMMARY_DATA_VERIFICATION_DATE)
  private OffsetDateTime summaryDataVerificationDate;

  public static final String SERIALIZED_NAME_TRANSACTION_DATA_COMPLETE_DATE = "transaction_data_complete_date";
  @SerializedName(SERIALIZED_NAME_TRANSACTION_DATA_COMPLETE_DATE)
  private LocalDate transactionDataCompleteDate;

  public OperationsLog() {
  }

  public OperationsLog amendmentIndicator(String amendmentIndicator) {
    this.amendmentIndicator = amendmentIndicator;
    return this;
  }

  /**
   * Amendent types:     -N   new     -A   amendment     -T   terminated     -C   consolidated     -M   multi-candidate     -S   secondary  NULL might be new or amendment. If amendment indicator is null and the filings is the first or first in a chain treat it as if it was a new. If it is not the first or first in a chain then treat the filing as an amendment. 
   * @return amendmentIndicator
   */
  @javax.annotation.Nullable
  public String getAmendmentIndicator() {
    return amendmentIndicator;
  }

  public void setAmendmentIndicator(String amendmentIndicator) {
    this.amendmentIndicator = amendmentIndicator;
  }


  public OperationsLog beginningImageNumber(String beginningImageNumber) {
    this.beginningImageNumber = beginningImageNumber;
    return this;
  }

  /**
   *  Unique identifier for the electronic or paper report. This number is used to construct PDF URLs to the original document. 
   * @return beginningImageNumber
   */
  @javax.annotation.Nullable
  public String getBeginningImageNumber() {
    return beginningImageNumber;
  }

  public void setBeginningImageNumber(String beginningImageNumber) {
    this.beginningImageNumber = beginningImageNumber;
  }


  public OperationsLog candidateCommitteeId(String candidateCommitteeId) {
    this.candidateCommitteeId = candidateCommitteeId;
    return this;
  }

  /**
   *  A unique identifier of the registered filer. 
   * @return candidateCommitteeId
   */
  @javax.annotation.Nullable
  public String getCandidateCommitteeId() {
    return candidateCommitteeId;
  }

  public void setCandidateCommitteeId(String candidateCommitteeId) {
    this.candidateCommitteeId = candidateCommitteeId;
  }


  public OperationsLog coverageEndDate(OffsetDateTime coverageEndDate) {
    this.coverageEndDate = coverageEndDate;
    return this;
  }

  /**
   * Ending date of the reporting period
   * @return coverageEndDate
   */
  @javax.annotation.Nullable
  public OffsetDateTime getCoverageEndDate() {
    return coverageEndDate;
  }

  public void setCoverageEndDate(OffsetDateTime coverageEndDate) {
    this.coverageEndDate = coverageEndDate;
  }


  public OperationsLog coverageStartDate(OffsetDateTime coverageStartDate) {
    this.coverageStartDate = coverageStartDate;
    return this;
  }

  /**
   * Beginning date of the reporting period
   * @return coverageStartDate
   */
  @javax.annotation.Nullable
  public OffsetDateTime getCoverageStartDate() {
    return coverageStartDate;
  }

  public void setCoverageStartDate(OffsetDateTime coverageStartDate) {
    this.coverageStartDate = coverageStartDate;
  }


  public OperationsLog endingImageNumber(String endingImageNumber) {
    this.endingImageNumber = endingImageNumber;
    return this;
  }

  /**
   * Image number is an unique identifier for each page the electronic or paper report. The last image number corresponds to the image number for the last page of the document.
   * @return endingImageNumber
   */
  @javax.annotation.Nullable
  public String getEndingImageNumber() {
    return endingImageNumber;
  }

  public void setEndingImageNumber(String endingImageNumber) {
    this.endingImageNumber = endingImageNumber;
  }


  public OperationsLog formType(String formType) {
    this.formType = formType;
    return this;
  }

  /**
   * The form where the underlying data comes from, for example, Form 1 would appear as F1:     - F1   Statement of Organization     - F1M  Notification of Multicandidate Status     - F2   Statement of Candidacy     - F3   Report of Receipts and Disbursements for an Authorized Committee     - F3P  Report of Receipts and Disbursements by an Authorized Committee of a Candidate for     The Office of President or Vice President     - F3L  Report of Contributions Bundled by Lobbyists/Registrants and Lobbyist/Registrant PACs     - F3X  Report of Receipts and Disbursements for other than an Authorized Committee     - F4   Report of Receipts and Disbursements for a Committee or Organization Supporting a Nomination Convention     - F5   Report of Independent Expenditures Made and Contributions Received     - F6   48 Hour Notice of Contributions/Loans Received     - F7   Report of Communication Costs by Corporations and Membership Organizations     - F8   Debt Settlement Plan     - F9   24 Hour Notice of Disbursements for Electioneering Communications     - F13  Report of Donations Accepted for Inaugural Committee     - F99  Miscellaneous Text     - FRQ  Request for Additional Information 
   * @return formType
   */
  @javax.annotation.Nullable
  public String getFormType() {
    return formType;
  }

  public void setFormType(String formType) {
    this.formType = formType;
  }


  public OperationsLog receiptDate(OffsetDateTime receiptDate) {
    this.receiptDate = receiptDate;
    return this;
  }

  /**
   * Date the FEC received the electronic or paper record
   * @return receiptDate
   */
  @javax.annotation.Nullable
  public OffsetDateTime getReceiptDate() {
    return receiptDate;
  }

  public void setReceiptDate(OffsetDateTime receiptDate) {
    this.receiptDate = receiptDate;
  }


  public OperationsLog reportType(String reportType) {
    this.reportType = reportType;
    return this;
  }

  /**
   * Name of report where the underlying data comes from:     - 10D Pre-Election     - 10G Pre-General     - 10P Pre-Primary     - 10R Pre-Run-Off     - 10S Pre-Special     - 12C Pre-Convention     - 12G Pre-General     - 12P Pre-Primary     - 12R Pre-Run-Off     - 12S Pre-Special     - 30D Post-Election     - 30G Post-General     - 30P Post-Primary     - 30R Post-Run-Off     - 30S Post-Special     - 60D Post-Convention     - M1  January Monthly     - M10 October Monthly     - M11 November Monthly     - M12 December Monthly     - M2  February Monthly     - M3  March Monthly     - M4  April Monthly     - M5  May Monthly     - M6  June Monthly     - M7  July Monthly     - M8  August Monthly     - M9  September Monthly     - MY  Mid-Year Report     - Q1  April Quarterly     - Q2  July Quarterly     - Q3  October Quarterly     - TER Termination Report     - YE  Year-End     - ADJ COMP ADJUST AMEND     - CA  COMPREHENSIVE AMEND     - 90S Post Inaugural Supplement     - 90D Post Inaugural     - 48  48 Hour Notification     - 24  24 Hour Notification     - M7S July Monthly/Semi-Annual     - MSA Monthly Semi-Annual (MY)     - MYS Monthly Year End/Semi-Annual     - Q2S July Quarterly/Semi-Annual     - QSA Quarterly Semi-Annual (MY)     - QYS Quarterly Year End/Semi-Annual     - QYE Quarterly Semi-Annual (YE)     - QMS Quarterly Mid-Year/ Semi-Annual     - MSY Monthly Semi-Annual (YE) 
   * @return reportType
   */
  @javax.annotation.Nullable
  public String getReportType() {
    return reportType;
  }

  public void setReportType(String reportType) {
    this.reportType = reportType;
  }


  public OperationsLog reportYear(Integer reportYear) {
    this.reportYear = reportYear;
    return this;
  }

  /**
   *  Forms with coverage date -      year from the coverage ending date. Forms without coverage date -      year from the receipt date. 
   * @return reportYear
   */
  @javax.annotation.Nullable
  public Integer getReportYear() {
    return reportYear;
  }

  public void setReportYear(Integer reportYear) {
    this.reportYear = reportYear;
  }


  public OperationsLog statusNum(Integer statusNum) {
    this.statusNum = statusNum;
    return this;
  }

  /**
   *  Status of the transactional report.     -0- Transaction is entered            into the system.           But not verified.     -1- Transaction is verified. 
   * @return statusNum
   */
  @javax.annotation.Nullable
  public Integer getStatusNum() {
    return statusNum;
  }

  public void setStatusNum(Integer statusNum) {
    this.statusNum = statusNum;
  }


  public OperationsLog subId(Integer subId) {
    this.subId = subId;
    return this;
  }

  /**
   *  A unique identifier of the transactional report. 
   * @return subId
   */
  @javax.annotation.Nullable
  public Integer getSubId() {
    return subId;
  }

  public void setSubId(Integer subId) {
    this.subId = subId;
  }


  public OperationsLog summaryDataCompleteDate(OffsetDateTime summaryDataCompleteDate) {
    this.summaryDataCompleteDate = summaryDataCompleteDate;
    return this;
  }

  /**
   *  Date when the report is entered into the database 
   * @return summaryDataCompleteDate
   */
  @javax.annotation.Nullable
  public OffsetDateTime getSummaryDataCompleteDate() {
    return summaryDataCompleteDate;
  }

  public void setSummaryDataCompleteDate(OffsetDateTime summaryDataCompleteDate) {
    this.summaryDataCompleteDate = summaryDataCompleteDate;
  }


  public OperationsLog summaryDataVerificationDate(OffsetDateTime summaryDataVerificationDate) {
    this.summaryDataVerificationDate = summaryDataVerificationDate;
    return this;
  }

  /**
   *  Same day or a day after the report is loaded in the database 
   * @return summaryDataVerificationDate
   */
  @javax.annotation.Nullable
  public OffsetDateTime getSummaryDataVerificationDate() {
    return summaryDataVerificationDate;
  }

  public void setSummaryDataVerificationDate(OffsetDateTime summaryDataVerificationDate) {
    this.summaryDataVerificationDate = summaryDataVerificationDate;
  }


  public OperationsLog transactionDataCompleteDate(LocalDate transactionDataCompleteDate) {
    this.transactionDataCompleteDate = transactionDataCompleteDate;
    return this;
  }

  /**
   *  Date when the report is processed completely 
   * @return transactionDataCompleteDate
   */
  @javax.annotation.Nullable
  public LocalDate getTransactionDataCompleteDate() {
    return transactionDataCompleteDate;
  }

  public void setTransactionDataCompleteDate(LocalDate transactionDataCompleteDate) {
    this.transactionDataCompleteDate = transactionDataCompleteDate;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    OperationsLog operationsLog = (OperationsLog) o;
    return Objects.equals(this.amendmentIndicator, operationsLog.amendmentIndicator) &&
        Objects.equals(this.beginningImageNumber, operationsLog.beginningImageNumber) &&
        Objects.equals(this.candidateCommitteeId, operationsLog.candidateCommitteeId) &&
        Objects.equals(this.coverageEndDate, operationsLog.coverageEndDate) &&
        Objects.equals(this.coverageStartDate, operationsLog.coverageStartDate) &&
        Objects.equals(this.endingImageNumber, operationsLog.endingImageNumber) &&
        Objects.equals(this.formType, operationsLog.formType) &&
        Objects.equals(this.receiptDate, operationsLog.receiptDate) &&
        Objects.equals(this.reportType, operationsLog.reportType) &&
        Objects.equals(this.reportYear, operationsLog.reportYear) &&
        Objects.equals(this.statusNum, operationsLog.statusNum) &&
        Objects.equals(this.subId, operationsLog.subId) &&
        Objects.equals(this.summaryDataCompleteDate, operationsLog.summaryDataCompleteDate) &&
        Objects.equals(this.summaryDataVerificationDate, operationsLog.summaryDataVerificationDate) &&
        Objects.equals(this.transactionDataCompleteDate, operationsLog.transactionDataCompleteDate);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(amendmentIndicator, beginningImageNumber, candidateCommitteeId, coverageEndDate, coverageStartDate, endingImageNumber, formType, receiptDate, reportType, reportYear, statusNum, subId, summaryDataCompleteDate, summaryDataVerificationDate, transactionDataCompleteDate);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class OperationsLog {\n");
    sb.append("    amendmentIndicator: ").append(toIndentedString(amendmentIndicator)).append("\n");
    sb.append("    beginningImageNumber: ").append(toIndentedString(beginningImageNumber)).append("\n");
    sb.append("    candidateCommitteeId: ").append(toIndentedString(candidateCommitteeId)).append("\n");
    sb.append("    coverageEndDate: ").append(toIndentedString(coverageEndDate)).append("\n");
    sb.append("    coverageStartDate: ").append(toIndentedString(coverageStartDate)).append("\n");
    sb.append("    endingImageNumber: ").append(toIndentedString(endingImageNumber)).append("\n");
    sb.append("    formType: ").append(toIndentedString(formType)).append("\n");
    sb.append("    receiptDate: ").append(toIndentedString(receiptDate)).append("\n");
    sb.append("    reportType: ").append(toIndentedString(reportType)).append("\n");
    sb.append("    reportYear: ").append(toIndentedString(reportYear)).append("\n");
    sb.append("    statusNum: ").append(toIndentedString(statusNum)).append("\n");
    sb.append("    subId: ").append(toIndentedString(subId)).append("\n");
    sb.append("    summaryDataCompleteDate: ").append(toIndentedString(summaryDataCompleteDate)).append("\n");
    sb.append("    summaryDataVerificationDate: ").append(toIndentedString(summaryDataVerificationDate)).append("\n");
    sb.append("    transactionDataCompleteDate: ").append(toIndentedString(transactionDataCompleteDate)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("amendment_indicator");
    openapiFields.add("beginning_image_number");
    openapiFields.add("candidate_committee_id");
    openapiFields.add("coverage_end_date");
    openapiFields.add("coverage_start_date");
    openapiFields.add("ending_image_number");
    openapiFields.add("form_type");
    openapiFields.add("receipt_date");
    openapiFields.add("report_type");
    openapiFields.add("report_year");
    openapiFields.add("status_num");
    openapiFields.add("sub_id");
    openapiFields.add("summary_data_complete_date");
    openapiFields.add("summary_data_verification_date");
    openapiFields.add("transaction_data_complete_date");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to OperationsLog
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!OperationsLog.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in OperationsLog is not found in the empty JSON string", OperationsLog.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!OperationsLog.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `OperationsLog` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("amendment_indicator") != null && !jsonObj.get("amendment_indicator").isJsonNull()) && !jsonObj.get("amendment_indicator").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `amendment_indicator` to be a primitive type in the JSON string but got `%s`", jsonObj.get("amendment_indicator").toString()));
      }
      if ((jsonObj.get("beginning_image_number") != null && !jsonObj.get("beginning_image_number").isJsonNull()) && !jsonObj.get("beginning_image_number").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `beginning_image_number` to be a primitive type in the JSON string but got `%s`", jsonObj.get("beginning_image_number").toString()));
      }
      if ((jsonObj.get("candidate_committee_id") != null && !jsonObj.get("candidate_committee_id").isJsonNull()) && !jsonObj.get("candidate_committee_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `candidate_committee_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("candidate_committee_id").toString()));
      }
      if ((jsonObj.get("ending_image_number") != null && !jsonObj.get("ending_image_number").isJsonNull()) && !jsonObj.get("ending_image_number").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ending_image_number` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ending_image_number").toString()));
      }
      if ((jsonObj.get("form_type") != null && !jsonObj.get("form_type").isJsonNull()) && !jsonObj.get("form_type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `form_type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("form_type").toString()));
      }
      if ((jsonObj.get("report_type") != null && !jsonObj.get("report_type").isJsonNull()) && !jsonObj.get("report_type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `report_type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("report_type").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!OperationsLog.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'OperationsLog' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<OperationsLog> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(OperationsLog.class));

       return (TypeAdapter<T>) new TypeAdapter<OperationsLog>() {
           @Override
           public void write(JsonWriter out, OperationsLog value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public OperationsLog read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of OperationsLog given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of OperationsLog
   * @throws IOException if the JSON string is invalid with respect to OperationsLog
   */
  public static OperationsLog fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, OperationsLog.class);
  }

  /**
   * Convert an instance of OperationsLog to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

