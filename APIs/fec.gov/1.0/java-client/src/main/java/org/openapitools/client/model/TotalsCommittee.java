/*
 * OpenFEC
 * This application programming interface (API) allows you to explore the way candidates and committees fund their campaigns.    The Federal Election Commission (FEC) API is a RESTful web service supporting full-text and field-specific searches on FEC data. [Bulk downloads](https://www.fec.gov/data/advanced/?tab=bulk-data) are available on the current site. Information is tied to the underlying forms by file ID and image ID. Data is updated nightly.    There are a lot of data, and a good place to start is to use search to find interesting candidates and committees. Then, you can use their IDs to find report or line item details with the other endpoints. If you are interested in individual donors, check out contributor information in the `/schedule_a/` endpoints.    <b class=\"body\" id=\"getting_started_head\">Getting started with the openFEC API</b><br>    If you would like to use the FEC's API programmatically, you can sign up for your own API key using our form. Alternatively, you can still try out our API without an API key by using the web interface and using DEMO_KEY. Note that when you use the openFEC API you are subject to the [Terms of Service](https://github.com/fecgov/FEC/blob/master/TERMS-OF-SERVICE.md) and [Acceptable Use policy](https://github.com/fecgov/FEC/blob/master/ACCEPTABLE-USE-POLICY.md).    Signing up for an API key will enable you to place up to 1,000 calls an hour. Each call is limited to 100 results per page. You can email questions, comments or a request to get a key for 7,200 calls an hour (120 calls per minute) to <a href=\"mailto:APIinfo@fec.gov\">APIinfo@fec.gov</a>. You can also ask questions and discuss the data in a community led [group](https://groups.google.com/forum/#!forum/fec-data).    The model definitions and schema are available at [/swagger](/swagger/). This is useful for making wrappers and exploring the data.    A few restrictions limit the way you can use FEC data. For example, you canâ€™t use contributor lists for commercial purposes or to solicit donations. [Learn more here](https://www.fec.gov/updates/sale-or-use-contributor-information/).    [Inspect our source code](https://github.com/fecgov/openFEC). We welcome issues and pull requests!    <p><br></p> <h2 class=\"title\" id=\"signup_head\">Sign up for an API key</h2> <div id=\"apidatagov_signup\">Loading signup form...</div>
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.math.BigDecimal;
import java.time.LocalDate;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.CommitteeDetailJfcCommitteeInner;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * TotalsCommittee
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:02:12.812386-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class TotalsCommittee {
  public static final String SERIALIZED_NAME_AFFILIATED_COMMITTEE_NAME = "affiliated_committee_name";
  @SerializedName(SERIALIZED_NAME_AFFILIATED_COMMITTEE_NAME)
  private String affiliatedCommitteeName;

  public static final String SERIALIZED_NAME_CANDIDATE_IDS = "candidate_ids";
  @SerializedName(SERIALIZED_NAME_CANDIDATE_IDS)
  private List<String> candidateIds;

  public static final String SERIALIZED_NAME_CASH_ON_HAND_END_PERIOD = "cash_on_hand_end_period";
  @SerializedName(SERIALIZED_NAME_CASH_ON_HAND_END_PERIOD)
  private BigDecimal cashOnHandEndPeriod;

  public static final String SERIALIZED_NAME_CITY = "city";
  @SerializedName(SERIALIZED_NAME_CITY)
  private String city;

  public static final String SERIALIZED_NAME_COMMITTEE_ID = "committee_id";
  @SerializedName(SERIALIZED_NAME_COMMITTEE_ID)
  private String committeeId;

  public static final String SERIALIZED_NAME_COMMITTEE_TYPE = "committee_type";
  @SerializedName(SERIALIZED_NAME_COMMITTEE_TYPE)
  private String committeeType;

  public static final String SERIALIZED_NAME_COMMITTEE_TYPE_FULL = "committee_type_full";
  @SerializedName(SERIALIZED_NAME_COMMITTEE_TYPE_FULL)
  private String committeeTypeFull;

  public static final String SERIALIZED_NAME_CYCLE = "cycle";
  @SerializedName(SERIALIZED_NAME_CYCLE)
  private Integer cycle;

  public static final String SERIALIZED_NAME_CYCLES = "cycles";
  @SerializedName(SERIALIZED_NAME_CYCLES)
  private List<Integer> cycles;

  public static final String SERIALIZED_NAME_CYCLES_HAS_ACTIVITY = "cycles_has_activity";
  @SerializedName(SERIALIZED_NAME_CYCLES_HAS_ACTIVITY)
  private List<Integer> cyclesHasActivity;

  public static final String SERIALIZED_NAME_CYCLES_HAS_FINANCIAL = "cycles_has_financial";
  @SerializedName(SERIALIZED_NAME_CYCLES_HAS_FINANCIAL)
  private List<Integer> cyclesHasFinancial;

  public static final String SERIALIZED_NAME_DEBTS_OWED_BY_COMMITTEE = "debts_owed_by_committee";
  @SerializedName(SERIALIZED_NAME_DEBTS_OWED_BY_COMMITTEE)
  private BigDecimal debtsOwedByCommittee;

  public static final String SERIALIZED_NAME_DESIGNATION = "designation";
  @SerializedName(SERIALIZED_NAME_DESIGNATION)
  private String designation;

  public static final String SERIALIZED_NAME_DESIGNATION_FULL = "designation_full";
  @SerializedName(SERIALIZED_NAME_DESIGNATION_FULL)
  private String designationFull;

  public static final String SERIALIZED_NAME_DISBURSEMENTS = "disbursements";
  @SerializedName(SERIALIZED_NAME_DISBURSEMENTS)
  private BigDecimal disbursements;

  public static final String SERIALIZED_NAME_FILING_FREQUENCY = "filing_frequency";
  @SerializedName(SERIALIZED_NAME_FILING_FREQUENCY)
  private String filingFrequency;

  public static final String SERIALIZED_NAME_FIRST_F1_DATE = "first_f1_date";
  @SerializedName(SERIALIZED_NAME_FIRST_F1_DATE)
  private LocalDate firstF1Date;

  public static final String SERIALIZED_NAME_FIRST_FILE_DATE = "first_file_date";
  @SerializedName(SERIALIZED_NAME_FIRST_FILE_DATE)
  private LocalDate firstFileDate;

  public static final String SERIALIZED_NAME_INDEPENDENT_EXPENDITURES = "independent_expenditures";
  @SerializedName(SERIALIZED_NAME_INDEPENDENT_EXPENDITURES)
  private BigDecimal independentExpenditures;

  public static final String SERIALIZED_NAME_IS_ACTIVE = "is_active";
  @SerializedName(SERIALIZED_NAME_IS_ACTIVE)
  private Boolean isActive;

  public static final String SERIALIZED_NAME_JFC_COMMITTEE = "jfc_committee";
  @SerializedName(SERIALIZED_NAME_JFC_COMMITTEE)
  private List<CommitteeDetailJfcCommitteeInner> jfcCommittee = new ArrayList<>();

  public static final String SERIALIZED_NAME_LAST_CYCLE_HAS_ACTIVITY = "last_cycle_has_activity";
  @SerializedName(SERIALIZED_NAME_LAST_CYCLE_HAS_ACTIVITY)
  private Integer lastCycleHasActivity;

  public static final String SERIALIZED_NAME_LAST_CYCLE_HAS_FINANCIAL = "last_cycle_has_financial";
  @SerializedName(SERIALIZED_NAME_LAST_CYCLE_HAS_FINANCIAL)
  private Integer lastCycleHasFinancial;

  public static final String SERIALIZED_NAME_LAST_F1_DATE = "last_f1_date";
  @SerializedName(SERIALIZED_NAME_LAST_F1_DATE)
  private LocalDate lastF1Date;

  public static final String SERIALIZED_NAME_LAST_FILE_DATE = "last_file_date";
  @SerializedName(SERIALIZED_NAME_LAST_FILE_DATE)
  private LocalDate lastFileDate;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_ORGANIZATION_TYPE = "organization_type";
  @SerializedName(SERIALIZED_NAME_ORGANIZATION_TYPE)
  private String organizationType;

  public static final String SERIALIZED_NAME_ORGANIZATION_TYPE_FULL = "organization_type_full";
  @SerializedName(SERIALIZED_NAME_ORGANIZATION_TYPE_FULL)
  private String organizationTypeFull;

  public static final String SERIALIZED_NAME_PARTY = "party";
  @SerializedName(SERIALIZED_NAME_PARTY)
  private String party;

  public static final String SERIALIZED_NAME_PARTY_FULL = "party_full";
  @SerializedName(SERIALIZED_NAME_PARTY_FULL)
  private String partyFull;

  public static final String SERIALIZED_NAME_RECEIPTS = "receipts";
  @SerializedName(SERIALIZED_NAME_RECEIPTS)
  private BigDecimal receipts;

  public static final String SERIALIZED_NAME_STATE = "state";
  @SerializedName(SERIALIZED_NAME_STATE)
  private String state;

  public static final String SERIALIZED_NAME_STATE_FULL = "state_full";
  @SerializedName(SERIALIZED_NAME_STATE_FULL)
  private String stateFull;

  public static final String SERIALIZED_NAME_STREET1 = "street_1";
  @SerializedName(SERIALIZED_NAME_STREET1)
  private String street1;

  public static final String SERIALIZED_NAME_STREET2 = "street_2";
  @SerializedName(SERIALIZED_NAME_STREET2)
  private String street2;

  public static final String SERIALIZED_NAME_TREASURER_NAME = "treasurer_name";
  @SerializedName(SERIALIZED_NAME_TREASURER_NAME)
  private String treasurerName;

  public static final String SERIALIZED_NAME_ZIP = "zip";
  @SerializedName(SERIALIZED_NAME_ZIP)
  private String zip;

  public TotalsCommittee() {
  }

  public TotalsCommittee affiliatedCommitteeName(String affiliatedCommitteeName) {
    this.affiliatedCommitteeName = affiliatedCommitteeName;
    return this;
  }

  /**
   *  Affiliated committee or connected organization 
   * @return affiliatedCommitteeName
   */
  @javax.annotation.Nullable
  public String getAffiliatedCommitteeName() {
    return affiliatedCommitteeName;
  }

  public void setAffiliatedCommitteeName(String affiliatedCommitteeName) {
    this.affiliatedCommitteeName = affiliatedCommitteeName;
  }


  public TotalsCommittee candidateIds(List<String> candidateIds) {
    this.candidateIds = candidateIds;
    return this;
  }

  public TotalsCommittee addCandidateIdsItem(String candidateIdsItem) {
    if (this.candidateIds == null) {
      this.candidateIds = new ArrayList<>();
    }
    this.candidateIds.add(candidateIdsItem);
    return this;
  }

  /**
   *  A unique identifier assigned to each candidate registered with the FEC. If a person runs for several offices, that person will have separate candidate IDs for each office. First character indicates office - [P]residential, [H]ouse, [S]enate]. Second character is the last digit of the two-year period the ID was created. Third and fourth is the candidate state. Presidential IDs don&#39;t have state. Fifth and sixth is the district when the candidate first ran. This does not change if the candidate/member&#39;s district changes during re-districting. Presidential IDs don&#39;t have districts. The rest is sequence. 
   * @return candidateIds
   */
  @javax.annotation.Nullable
  public List<String> getCandidateIds() {
    return candidateIds;
  }

  public void setCandidateIds(List<String> candidateIds) {
    this.candidateIds = candidateIds;
  }


  public TotalsCommittee cashOnHandEndPeriod(BigDecimal cashOnHandEndPeriod) {
    this.cashOnHandEndPeriod = cashOnHandEndPeriod;
    return this;
  }

  /**
   * Get cashOnHandEndPeriod
   * @return cashOnHandEndPeriod
   */
  @javax.annotation.Nullable
  public BigDecimal getCashOnHandEndPeriod() {
    return cashOnHandEndPeriod;
  }

  public void setCashOnHandEndPeriod(BigDecimal cashOnHandEndPeriod) {
    this.cashOnHandEndPeriod = cashOnHandEndPeriod;
  }


  public TotalsCommittee city(String city) {
    this.city = city;
    return this;
  }

  /**
   *  City of committee as reported on the Form 1 
   * @return city
   */
  @javax.annotation.Nullable
  public String getCity() {
    return city;
  }

  public void setCity(String city) {
    this.city = city;
  }


  public TotalsCommittee committeeId(String committeeId) {
    this.committeeId = committeeId;
    return this;
  }

  /**
   *  A unique identifier assigned to each committee or filer registered with the FEC. In general committee id&#39;s begin with the letter C which is followed by eight digits. 
   * @return committeeId
   */
  @javax.annotation.Nonnull
  public String getCommitteeId() {
    return committeeId;
  }

  public void setCommitteeId(String committeeId) {
    this.committeeId = committeeId;
  }


  public TotalsCommittee committeeType(String committeeType) {
    this.committeeType = committeeType;
    return this;
  }

  /**
   * The one-letter type code of the organization:         - C communication cost         - D delegate         - E electioneering communication         - H House         - I independent expenditure filer (not a committee)         - N PAC - nonqualified         - O independent expenditure-only (super PACs)         - P presidential         - Q PAC - qualified         - S Senate         - U single candidate independent expenditure         - V PAC with non-contribution account, nonqualified         - W PAC with non-contribution account, qualified         - X party, nonqualified         - Y party, qualified         - Z national party non-federal account 
   * @return committeeType
   */
  @javax.annotation.Nullable
  public String getCommitteeType() {
    return committeeType;
  }

  public void setCommitteeType(String committeeType) {
    this.committeeType = committeeType;
  }


  public TotalsCommittee committeeTypeFull(String committeeTypeFull) {
    this.committeeTypeFull = committeeTypeFull;
    return this;
  }

  /**
   * The one-letter type code of the organization:         - C communication cost         - D delegate         - E electioneering communication         - H House         - I independent expenditure filer (not a committee)         - N PAC - nonqualified         - O independent expenditure-only (super PACs)         - P presidential         - Q PAC - qualified         - S Senate         - U single candidate independent expenditure         - V PAC with non-contribution account, nonqualified         - W PAC with non-contribution account, qualified         - X party, nonqualified         - Y party, qualified         - Z national party non-federal account 
   * @return committeeTypeFull
   */
  @javax.annotation.Nullable
  public String getCommitteeTypeFull() {
    return committeeTypeFull;
  }

  public void setCommitteeTypeFull(String committeeTypeFull) {
    this.committeeTypeFull = committeeTypeFull;
  }


  public TotalsCommittee cycle(Integer cycle) {
    this.cycle = cycle;
    return this;
  }

  /**
   *  A two year election cycle that the committee was active- (after original registration date but before expiration date in Form 1s) The cycle begins with an odd year and is named for its ending, even year. 
   * @return cycle
   */
  @javax.annotation.Nonnull
  public Integer getCycle() {
    return cycle;
  }

  public void setCycle(Integer cycle) {
    this.cycle = cycle;
  }


  public TotalsCommittee cycles(List<Integer> cycles) {
    this.cycles = cycles;
    return this;
  }

  public TotalsCommittee addCyclesItem(Integer cyclesItem) {
    if (this.cycles == null) {
      this.cycles = new ArrayList<>();
    }
    this.cycles.add(cyclesItem);
    return this;
  }

  /**
   *  A two year election cycle that the committee was active- (after original registration date but before expiration date in Form 1s) The cycle begins with an odd year and is named for its ending, even year. 
   * @return cycles
   */
  @javax.annotation.Nullable
  public List<Integer> getCycles() {
    return cycles;
  }

  public void setCycles(List<Integer> cycles) {
    this.cycles = cycles;
  }


  public TotalsCommittee cyclesHasActivity(List<Integer> cyclesHasActivity) {
    this.cyclesHasActivity = cyclesHasActivity;
    return this;
  }

  public TotalsCommittee addCyclesHasActivityItem(Integer cyclesHasActivityItem) {
    if (this.cyclesHasActivity == null) {
      this.cyclesHasActivity = new ArrayList<>();
    }
    this.cyclesHasActivity.add(cyclesHasActivityItem);
    return this;
  }

  /**
   *  A two year election cycle that the committee was active- (after original registration date but before expiration date in Form 1), and the committee has filling activity during the cycle 
   * @return cyclesHasActivity
   */
  @javax.annotation.Nullable
  public List<Integer> getCyclesHasActivity() {
    return cyclesHasActivity;
  }

  public void setCyclesHasActivity(List<Integer> cyclesHasActivity) {
    this.cyclesHasActivity = cyclesHasActivity;
  }


  public TotalsCommittee cyclesHasFinancial(List<Integer> cyclesHasFinancial) {
    this.cyclesHasFinancial = cyclesHasFinancial;
    return this;
  }

  public TotalsCommittee addCyclesHasFinancialItem(Integer cyclesHasFinancialItem) {
    if (this.cyclesHasFinancial == null) {
      this.cyclesHasFinancial = new ArrayList<>();
    }
    this.cyclesHasFinancial.add(cyclesHasFinancialItem);
    return this;
  }

  /**
   *  A two year election cycle that the committee was active- (after original registration date but before expiration date in Form 1s), and the committee files the financial reports (&#39;F3&#39;, &#39;F3X&#39;, &#39;F3P&#39;, &#39;F3L&#39;, &#39;F4&#39;, &#39;F5&#39;, &#39;F7&#39;, &#39;F13&#39;) during this cycle. 
   * @return cyclesHasFinancial
   */
  @javax.annotation.Nullable
  public List<Integer> getCyclesHasFinancial() {
    return cyclesHasFinancial;
  }

  public void setCyclesHasFinancial(List<Integer> cyclesHasFinancial) {
    this.cyclesHasFinancial = cyclesHasFinancial;
  }


  public TotalsCommittee debtsOwedByCommittee(BigDecimal debtsOwedByCommittee) {
    this.debtsOwedByCommittee = debtsOwedByCommittee;
    return this;
  }

  /**
   * Get debtsOwedByCommittee
   * @return debtsOwedByCommittee
   */
  @javax.annotation.Nullable
  public BigDecimal getDebtsOwedByCommittee() {
    return debtsOwedByCommittee;
  }

  public void setDebtsOwedByCommittee(BigDecimal debtsOwedByCommittee) {
    this.debtsOwedByCommittee = debtsOwedByCommittee;
  }


  public TotalsCommittee designation(String designation) {
    this.designation = designation;
    return this;
  }

  /**
   * The one-letter designation code of the organization:          - A authorized by a candidate          - J joint fundraising committee          - P principal campaign committee of a candidate          - U unauthorized          - B lobbyist/registrant PAC          - D leadership PAC 
   * @return designation
   */
  @javax.annotation.Nullable
  public String getDesignation() {
    return designation;
  }

  public void setDesignation(String designation) {
    this.designation = designation;
  }


  public TotalsCommittee designationFull(String designationFull) {
    this.designationFull = designationFull;
    return this;
  }

  /**
   * The one-letter designation code of the organization:          - A authorized by a candidate          - J joint fundraising committee          - P principal campaign committee of a candidate          - U unauthorized          - B lobbyist/registrant PAC          - D leadership PAC 
   * @return designationFull
   */
  @javax.annotation.Nullable
  public String getDesignationFull() {
    return designationFull;
  }

  public void setDesignationFull(String designationFull) {
    this.designationFull = designationFull;
  }


  public TotalsCommittee disbursements(BigDecimal disbursements) {
    this.disbursements = disbursements;
    return this;
  }

  /**
   * Get disbursements
   * @return disbursements
   */
  @javax.annotation.Nullable
  public BigDecimal getDisbursements() {
    return disbursements;
  }

  public void setDisbursements(BigDecimal disbursements) {
    this.disbursements = disbursements;
  }


  public TotalsCommittee filingFrequency(String filingFrequency) {
    this.filingFrequency = filingFrequency;
    return this;
  }

  /**
   * The one-letter      code of the filing frequency:          - A Administratively terminated          - D Debt          - M Monthly filer          - Q Quarterly filer          - T Terminated          - W Waived 
   * @return filingFrequency
   */
  @javax.annotation.Nullable
  public String getFilingFrequency() {
    return filingFrequency;
  }

  public void setFilingFrequency(String filingFrequency) {
    this.filingFrequency = filingFrequency;
  }


  public TotalsCommittee firstF1Date(LocalDate firstF1Date) {
    this.firstF1Date = firstF1Date;
    return this;
  }

  /**
   * The day the FEC received the committee&#39;s first Form 1
   * @return firstF1Date
   */
  @javax.annotation.Nullable
  public LocalDate getFirstF1Date() {
    return firstF1Date;
  }

  public void setFirstF1Date(LocalDate firstF1Date) {
    this.firstF1Date = firstF1Date;
  }


  public TotalsCommittee firstFileDate(LocalDate firstFileDate) {
    this.firstFileDate = firstFileDate;
    return this;
  }

  /**
   * The day the FEC received the committee&#39;s first filing. This is usually a Form 1 committee registration.
   * @return firstFileDate
   */
  @javax.annotation.Nullable
  public LocalDate getFirstFileDate() {
    return firstFileDate;
  }

  public void setFirstFileDate(LocalDate firstFileDate) {
    this.firstFileDate = firstFileDate;
  }


  public TotalsCommittee independentExpenditures(BigDecimal independentExpenditures) {
    this.independentExpenditures = independentExpenditures;
    return this;
  }

  /**
   * Get independentExpenditures
   * @return independentExpenditures
   */
  @javax.annotation.Nullable
  public BigDecimal getIndependentExpenditures() {
    return independentExpenditures;
  }

  public void setIndependentExpenditures(BigDecimal independentExpenditures) {
    this.independentExpenditures = independentExpenditures;
  }


  public TotalsCommittee isActive(Boolean isActive) {
    this.isActive = isActive;
    return this;
  }

  /**
   *  True indicates that a committee is active. 
   * @return isActive
   */
  @javax.annotation.Nullable
  public Boolean getIsActive() {
    return isActive;
  }

  public void setIsActive(Boolean isActive) {
    this.isActive = isActive;
  }


  public TotalsCommittee jfcCommittee(List<CommitteeDetailJfcCommitteeInner> jfcCommittee) {
    this.jfcCommittee = jfcCommittee;
    return this;
  }

  public TotalsCommittee addJfcCommitteeItem(CommitteeDetailJfcCommitteeInner jfcCommitteeItem) {
    if (this.jfcCommittee == null) {
      this.jfcCommittee = new ArrayList<>();
    }
    this.jfcCommittee.add(jfcCommitteeItem);
    return this;
  }

  /**
   * Get jfcCommittee
   * @return jfcCommittee
   */
  @javax.annotation.Nullable
  public List<CommitteeDetailJfcCommitteeInner> getJfcCommittee() {
    return jfcCommittee;
  }

  public void setJfcCommittee(List<CommitteeDetailJfcCommitteeInner> jfcCommittee) {
    this.jfcCommittee = jfcCommittee;
  }


  public TotalsCommittee lastCycleHasActivity(Integer lastCycleHasActivity) {
    this.lastCycleHasActivity = lastCycleHasActivity;
    return this;
  }

  /**
   *  The latest two year election cycle that the committee has filings 
   * @return lastCycleHasActivity
   */
  @javax.annotation.Nullable
  public Integer getLastCycleHasActivity() {
    return lastCycleHasActivity;
  }

  public void setLastCycleHasActivity(Integer lastCycleHasActivity) {
    this.lastCycleHasActivity = lastCycleHasActivity;
  }


  public TotalsCommittee lastCycleHasFinancial(Integer lastCycleHasFinancial) {
    this.lastCycleHasFinancial = lastCycleHasFinancial;
    return this;
  }

  /**
   *  The latest two year election cycle that the committee files the financial reports (&#39;F3&#39;, &#39;F3X&#39;, &#39;F3P&#39;, &#39;F3L&#39;, &#39;F4&#39;, &#39;F5&#39;, &#39;F7&#39;, &#39;F13&#39;). 
   * @return lastCycleHasFinancial
   */
  @javax.annotation.Nullable
  public Integer getLastCycleHasFinancial() {
    return lastCycleHasFinancial;
  }

  public void setLastCycleHasFinancial(Integer lastCycleHasFinancial) {
    this.lastCycleHasFinancial = lastCycleHasFinancial;
  }


  public TotalsCommittee lastF1Date(LocalDate lastF1Date) {
    this.lastF1Date = lastF1Date;
    return this;
  }

  /**
   * The day the FEC received the committee&#39;s most recent Form 1
   * @return lastF1Date
   */
  @javax.annotation.Nullable
  public LocalDate getLastF1Date() {
    return lastF1Date;
  }

  public void setLastF1Date(LocalDate lastF1Date) {
    this.lastF1Date = lastF1Date;
  }


  public TotalsCommittee lastFileDate(LocalDate lastFileDate) {
    this.lastFileDate = lastFileDate;
    return this;
  }

  /**
   * The day the FEC received the committee&#39;s most recent filing
   * @return lastFileDate
   */
  @javax.annotation.Nullable
  public LocalDate getLastFileDate() {
    return lastFileDate;
  }

  public void setLastFileDate(LocalDate lastFileDate) {
    this.lastFileDate = lastFileDate;
  }


  public TotalsCommittee name(String name) {
    this.name = name;
    return this;
  }

  /**
   * The name of the committee. If a committee changes its name,     the most recent name will be shown. Committee names are not unique. Use committee_id     for looking up records.
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public TotalsCommittee organizationType(String organizationType) {
    this.organizationType = organizationType;
    return this;
  }

  /**
   * The one-letter code for the kind for organization:         - C corporation         - L labor organization         - M membership organization         - T trade association         - V cooperative         - W corporation without capital stock 
   * @return organizationType
   */
  @javax.annotation.Nullable
  public String getOrganizationType() {
    return organizationType;
  }

  public void setOrganizationType(String organizationType) {
    this.organizationType = organizationType;
  }


  public TotalsCommittee organizationTypeFull(String organizationTypeFull) {
    this.organizationTypeFull = organizationTypeFull;
    return this;
  }

  /**
   * The one-letter code for the kind for organization:         - C corporation         - L labor organization         - M membership organization         - T trade association         - V cooperative         - W corporation without capital stock 
   * @return organizationTypeFull
   */
  @javax.annotation.Nullable
  public String getOrganizationTypeFull() {
    return organizationTypeFull;
  }

  public void setOrganizationTypeFull(String organizationTypeFull) {
    this.organizationTypeFull = organizationTypeFull;
  }


  public TotalsCommittee party(String party) {
    this.party = party;
    return this;
  }

  /**
   * Three-letter code for the party affiliated with a candidate or committee. For example, DEM for Democratic Party and REP for Republican Party.
   * @return party
   */
  @javax.annotation.Nullable
  public String getParty() {
    return party;
  }

  public void setParty(String party) {
    this.party = party;
  }


  public TotalsCommittee partyFull(String partyFull) {
    this.partyFull = partyFull;
    return this;
  }

  /**
   * Three-letter code for the party affiliated with a candidate or committee. For example, DEM for Democratic Party and REP for Republican Party.
   * @return partyFull
   */
  @javax.annotation.Nullable
  public String getPartyFull() {
    return partyFull;
  }

  public void setPartyFull(String partyFull) {
    this.partyFull = partyFull;
  }


  public TotalsCommittee receipts(BigDecimal receipts) {
    this.receipts = receipts;
    return this;
  }

  /**
   * Get receipts
   * @return receipts
   */
  @javax.annotation.Nullable
  public BigDecimal getReceipts() {
    return receipts;
  }

  public void setReceipts(BigDecimal receipts) {
    this.receipts = receipts;
  }


  public TotalsCommittee state(String state) {
    this.state = state;
    return this;
  }

  /**
   *  State of the committee&#39;s address as filed on the Form 1 
   * @return state
   */
  @javax.annotation.Nullable
  public String getState() {
    return state;
  }

  public void setState(String state) {
    this.state = state;
  }


  public TotalsCommittee stateFull(String stateFull) {
    this.stateFull = stateFull;
    return this;
  }

  /**
   *  State of committee as reported on the Form 1 
   * @return stateFull
   */
  @javax.annotation.Nullable
  public String getStateFull() {
    return stateFull;
  }

  public void setStateFull(String stateFull) {
    this.stateFull = stateFull;
  }


  public TotalsCommittee street1(String street1) {
    this.street1 = street1;
    return this;
  }

  /**
   *  Street address of committee as reported on the Form 1 
   * @return street1
   */
  @javax.annotation.Nullable
  public String getStreet1() {
    return street1;
  }

  public void setStreet1(String street1) {
    this.street1 = street1;
  }


  public TotalsCommittee street2(String street2) {
    this.street2 = street2;
    return this;
  }

  /**
   *  Second line of street address of committee as reported on the Form 1 
   * @return street2
   */
  @javax.annotation.Nullable
  public String getStreet2() {
    return street2;
  }

  public void setStreet2(String street2) {
    this.street2 = street2;
  }


  public TotalsCommittee treasurerName(String treasurerName) {
    this.treasurerName = treasurerName;
    return this;
  }

  /**
   * Name of the Committee&#39;s treasurer. If multiple treasurers for the committee, the most recent treasurer will be shown.
   * @return treasurerName
   */
  @javax.annotation.Nullable
  public String getTreasurerName() {
    return treasurerName;
  }

  public void setTreasurerName(String treasurerName) {
    this.treasurerName = treasurerName;
  }


  public TotalsCommittee zip(String zip) {
    this.zip = zip;
    return this;
  }

  /**
   *  Zip code of committee as reported on the Form 1 
   * @return zip
   */
  @javax.annotation.Nullable
  public String getZip() {
    return zip;
  }

  public void setZip(String zip) {
    this.zip = zip;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    TotalsCommittee totalsCommittee = (TotalsCommittee) o;
    return Objects.equals(this.affiliatedCommitteeName, totalsCommittee.affiliatedCommitteeName) &&
        Objects.equals(this.candidateIds, totalsCommittee.candidateIds) &&
        Objects.equals(this.cashOnHandEndPeriod, totalsCommittee.cashOnHandEndPeriod) &&
        Objects.equals(this.city, totalsCommittee.city) &&
        Objects.equals(this.committeeId, totalsCommittee.committeeId) &&
        Objects.equals(this.committeeType, totalsCommittee.committeeType) &&
        Objects.equals(this.committeeTypeFull, totalsCommittee.committeeTypeFull) &&
        Objects.equals(this.cycle, totalsCommittee.cycle) &&
        Objects.equals(this.cycles, totalsCommittee.cycles) &&
        Objects.equals(this.cyclesHasActivity, totalsCommittee.cyclesHasActivity) &&
        Objects.equals(this.cyclesHasFinancial, totalsCommittee.cyclesHasFinancial) &&
        Objects.equals(this.debtsOwedByCommittee, totalsCommittee.debtsOwedByCommittee) &&
        Objects.equals(this.designation, totalsCommittee.designation) &&
        Objects.equals(this.designationFull, totalsCommittee.designationFull) &&
        Objects.equals(this.disbursements, totalsCommittee.disbursements) &&
        Objects.equals(this.filingFrequency, totalsCommittee.filingFrequency) &&
        Objects.equals(this.firstF1Date, totalsCommittee.firstF1Date) &&
        Objects.equals(this.firstFileDate, totalsCommittee.firstFileDate) &&
        Objects.equals(this.independentExpenditures, totalsCommittee.independentExpenditures) &&
        Objects.equals(this.isActive, totalsCommittee.isActive) &&
        Objects.equals(this.jfcCommittee, totalsCommittee.jfcCommittee) &&
        Objects.equals(this.lastCycleHasActivity, totalsCommittee.lastCycleHasActivity) &&
        Objects.equals(this.lastCycleHasFinancial, totalsCommittee.lastCycleHasFinancial) &&
        Objects.equals(this.lastF1Date, totalsCommittee.lastF1Date) &&
        Objects.equals(this.lastFileDate, totalsCommittee.lastFileDate) &&
        Objects.equals(this.name, totalsCommittee.name) &&
        Objects.equals(this.organizationType, totalsCommittee.organizationType) &&
        Objects.equals(this.organizationTypeFull, totalsCommittee.organizationTypeFull) &&
        Objects.equals(this.party, totalsCommittee.party) &&
        Objects.equals(this.partyFull, totalsCommittee.partyFull) &&
        Objects.equals(this.receipts, totalsCommittee.receipts) &&
        Objects.equals(this.state, totalsCommittee.state) &&
        Objects.equals(this.stateFull, totalsCommittee.stateFull) &&
        Objects.equals(this.street1, totalsCommittee.street1) &&
        Objects.equals(this.street2, totalsCommittee.street2) &&
        Objects.equals(this.treasurerName, totalsCommittee.treasurerName) &&
        Objects.equals(this.zip, totalsCommittee.zip);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(affiliatedCommitteeName, candidateIds, cashOnHandEndPeriod, city, committeeId, committeeType, committeeTypeFull, cycle, cycles, cyclesHasActivity, cyclesHasFinancial, debtsOwedByCommittee, designation, designationFull, disbursements, filingFrequency, firstF1Date, firstFileDate, independentExpenditures, isActive, jfcCommittee, lastCycleHasActivity, lastCycleHasFinancial, lastF1Date, lastFileDate, name, organizationType, organizationTypeFull, party, partyFull, receipts, state, stateFull, street1, street2, treasurerName, zip);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class TotalsCommittee {\n");
    sb.append("    affiliatedCommitteeName: ").append(toIndentedString(affiliatedCommitteeName)).append("\n");
    sb.append("    candidateIds: ").append(toIndentedString(candidateIds)).append("\n");
    sb.append("    cashOnHandEndPeriod: ").append(toIndentedString(cashOnHandEndPeriod)).append("\n");
    sb.append("    city: ").append(toIndentedString(city)).append("\n");
    sb.append("    committeeId: ").append(toIndentedString(committeeId)).append("\n");
    sb.append("    committeeType: ").append(toIndentedString(committeeType)).append("\n");
    sb.append("    committeeTypeFull: ").append(toIndentedString(committeeTypeFull)).append("\n");
    sb.append("    cycle: ").append(toIndentedString(cycle)).append("\n");
    sb.append("    cycles: ").append(toIndentedString(cycles)).append("\n");
    sb.append("    cyclesHasActivity: ").append(toIndentedString(cyclesHasActivity)).append("\n");
    sb.append("    cyclesHasFinancial: ").append(toIndentedString(cyclesHasFinancial)).append("\n");
    sb.append("    debtsOwedByCommittee: ").append(toIndentedString(debtsOwedByCommittee)).append("\n");
    sb.append("    designation: ").append(toIndentedString(designation)).append("\n");
    sb.append("    designationFull: ").append(toIndentedString(designationFull)).append("\n");
    sb.append("    disbursements: ").append(toIndentedString(disbursements)).append("\n");
    sb.append("    filingFrequency: ").append(toIndentedString(filingFrequency)).append("\n");
    sb.append("    firstF1Date: ").append(toIndentedString(firstF1Date)).append("\n");
    sb.append("    firstFileDate: ").append(toIndentedString(firstFileDate)).append("\n");
    sb.append("    independentExpenditures: ").append(toIndentedString(independentExpenditures)).append("\n");
    sb.append("    isActive: ").append(toIndentedString(isActive)).append("\n");
    sb.append("    jfcCommittee: ").append(toIndentedString(jfcCommittee)).append("\n");
    sb.append("    lastCycleHasActivity: ").append(toIndentedString(lastCycleHasActivity)).append("\n");
    sb.append("    lastCycleHasFinancial: ").append(toIndentedString(lastCycleHasFinancial)).append("\n");
    sb.append("    lastF1Date: ").append(toIndentedString(lastF1Date)).append("\n");
    sb.append("    lastFileDate: ").append(toIndentedString(lastFileDate)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    organizationType: ").append(toIndentedString(organizationType)).append("\n");
    sb.append("    organizationTypeFull: ").append(toIndentedString(organizationTypeFull)).append("\n");
    sb.append("    party: ").append(toIndentedString(party)).append("\n");
    sb.append("    partyFull: ").append(toIndentedString(partyFull)).append("\n");
    sb.append("    receipts: ").append(toIndentedString(receipts)).append("\n");
    sb.append("    state: ").append(toIndentedString(state)).append("\n");
    sb.append("    stateFull: ").append(toIndentedString(stateFull)).append("\n");
    sb.append("    street1: ").append(toIndentedString(street1)).append("\n");
    sb.append("    street2: ").append(toIndentedString(street2)).append("\n");
    sb.append("    treasurerName: ").append(toIndentedString(treasurerName)).append("\n");
    sb.append("    zip: ").append(toIndentedString(zip)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("affiliated_committee_name");
    openapiFields.add("candidate_ids");
    openapiFields.add("cash_on_hand_end_period");
    openapiFields.add("city");
    openapiFields.add("committee_id");
    openapiFields.add("committee_type");
    openapiFields.add("committee_type_full");
    openapiFields.add("cycle");
    openapiFields.add("cycles");
    openapiFields.add("cycles_has_activity");
    openapiFields.add("cycles_has_financial");
    openapiFields.add("debts_owed_by_committee");
    openapiFields.add("designation");
    openapiFields.add("designation_full");
    openapiFields.add("disbursements");
    openapiFields.add("filing_frequency");
    openapiFields.add("first_f1_date");
    openapiFields.add("first_file_date");
    openapiFields.add("independent_expenditures");
    openapiFields.add("is_active");
    openapiFields.add("jfc_committee");
    openapiFields.add("last_cycle_has_activity");
    openapiFields.add("last_cycle_has_financial");
    openapiFields.add("last_f1_date");
    openapiFields.add("last_file_date");
    openapiFields.add("name");
    openapiFields.add("organization_type");
    openapiFields.add("organization_type_full");
    openapiFields.add("party");
    openapiFields.add("party_full");
    openapiFields.add("receipts");
    openapiFields.add("state");
    openapiFields.add("state_full");
    openapiFields.add("street_1");
    openapiFields.add("street_2");
    openapiFields.add("treasurer_name");
    openapiFields.add("zip");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("committee_id");
    openapiRequiredFields.add("cycle");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to TotalsCommittee
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!TotalsCommittee.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in TotalsCommittee is not found in the empty JSON string", TotalsCommittee.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!TotalsCommittee.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `TotalsCommittee` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : TotalsCommittee.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("affiliated_committee_name") != null && !jsonObj.get("affiliated_committee_name").isJsonNull()) && !jsonObj.get("affiliated_committee_name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `affiliated_committee_name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("affiliated_committee_name").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("candidate_ids") != null && !jsonObj.get("candidate_ids").isJsonNull() && !jsonObj.get("candidate_ids").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `candidate_ids` to be an array in the JSON string but got `%s`", jsonObj.get("candidate_ids").toString()));
      }
      if ((jsonObj.get("city") != null && !jsonObj.get("city").isJsonNull()) && !jsonObj.get("city").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `city` to be a primitive type in the JSON string but got `%s`", jsonObj.get("city").toString()));
      }
      if (!jsonObj.get("committee_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `committee_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("committee_id").toString()));
      }
      if ((jsonObj.get("committee_type") != null && !jsonObj.get("committee_type").isJsonNull()) && !jsonObj.get("committee_type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `committee_type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("committee_type").toString()));
      }
      if ((jsonObj.get("committee_type_full") != null && !jsonObj.get("committee_type_full").isJsonNull()) && !jsonObj.get("committee_type_full").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `committee_type_full` to be a primitive type in the JSON string but got `%s`", jsonObj.get("committee_type_full").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("cycles") != null && !jsonObj.get("cycles").isJsonNull() && !jsonObj.get("cycles").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `cycles` to be an array in the JSON string but got `%s`", jsonObj.get("cycles").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("cycles_has_activity") != null && !jsonObj.get("cycles_has_activity").isJsonNull() && !jsonObj.get("cycles_has_activity").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `cycles_has_activity` to be an array in the JSON string but got `%s`", jsonObj.get("cycles_has_activity").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("cycles_has_financial") != null && !jsonObj.get("cycles_has_financial").isJsonNull() && !jsonObj.get("cycles_has_financial").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `cycles_has_financial` to be an array in the JSON string but got `%s`", jsonObj.get("cycles_has_financial").toString()));
      }
      if ((jsonObj.get("designation") != null && !jsonObj.get("designation").isJsonNull()) && !jsonObj.get("designation").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `designation` to be a primitive type in the JSON string but got `%s`", jsonObj.get("designation").toString()));
      }
      if ((jsonObj.get("designation_full") != null && !jsonObj.get("designation_full").isJsonNull()) && !jsonObj.get("designation_full").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `designation_full` to be a primitive type in the JSON string but got `%s`", jsonObj.get("designation_full").toString()));
      }
      if ((jsonObj.get("filing_frequency") != null && !jsonObj.get("filing_frequency").isJsonNull()) && !jsonObj.get("filing_frequency").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `filing_frequency` to be a primitive type in the JSON string but got `%s`", jsonObj.get("filing_frequency").toString()));
      }
      if (jsonObj.get("jfc_committee") != null && !jsonObj.get("jfc_committee").isJsonNull()) {
        JsonArray jsonArrayjfcCommittee = jsonObj.getAsJsonArray("jfc_committee");
        if (jsonArrayjfcCommittee != null) {
          // ensure the json data is an array
          if (!jsonObj.get("jfc_committee").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `jfc_committee` to be an array in the JSON string but got `%s`", jsonObj.get("jfc_committee").toString()));
          }

          // validate the optional field `jfc_committee` (array)
          for (int i = 0; i < jsonArrayjfcCommittee.size(); i++) {
            CommitteeDetailJfcCommitteeInner.validateJsonElement(jsonArrayjfcCommittee.get(i));
          };
        }
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if ((jsonObj.get("organization_type") != null && !jsonObj.get("organization_type").isJsonNull()) && !jsonObj.get("organization_type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `organization_type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("organization_type").toString()));
      }
      if ((jsonObj.get("organization_type_full") != null && !jsonObj.get("organization_type_full").isJsonNull()) && !jsonObj.get("organization_type_full").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `organization_type_full` to be a primitive type in the JSON string but got `%s`", jsonObj.get("organization_type_full").toString()));
      }
      if ((jsonObj.get("party") != null && !jsonObj.get("party").isJsonNull()) && !jsonObj.get("party").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `party` to be a primitive type in the JSON string but got `%s`", jsonObj.get("party").toString()));
      }
      if ((jsonObj.get("party_full") != null && !jsonObj.get("party_full").isJsonNull()) && !jsonObj.get("party_full").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `party_full` to be a primitive type in the JSON string but got `%s`", jsonObj.get("party_full").toString()));
      }
      if ((jsonObj.get("state") != null && !jsonObj.get("state").isJsonNull()) && !jsonObj.get("state").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `state` to be a primitive type in the JSON string but got `%s`", jsonObj.get("state").toString()));
      }
      if ((jsonObj.get("state_full") != null && !jsonObj.get("state_full").isJsonNull()) && !jsonObj.get("state_full").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `state_full` to be a primitive type in the JSON string but got `%s`", jsonObj.get("state_full").toString()));
      }
      if ((jsonObj.get("street_1") != null && !jsonObj.get("street_1").isJsonNull()) && !jsonObj.get("street_1").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `street_1` to be a primitive type in the JSON string but got `%s`", jsonObj.get("street_1").toString()));
      }
      if ((jsonObj.get("street_2") != null && !jsonObj.get("street_2").isJsonNull()) && !jsonObj.get("street_2").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `street_2` to be a primitive type in the JSON string but got `%s`", jsonObj.get("street_2").toString()));
      }
      if ((jsonObj.get("treasurer_name") != null && !jsonObj.get("treasurer_name").isJsonNull()) && !jsonObj.get("treasurer_name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `treasurer_name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("treasurer_name").toString()));
      }
      if ((jsonObj.get("zip") != null && !jsonObj.get("zip").isJsonNull()) && !jsonObj.get("zip").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `zip` to be a primitive type in the JSON string but got `%s`", jsonObj.get("zip").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!TotalsCommittee.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'TotalsCommittee' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<TotalsCommittee> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(TotalsCommittee.class));

       return (TypeAdapter<T>) new TypeAdapter<TotalsCommittee>() {
           @Override
           public void write(JsonWriter out, TotalsCommittee value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public TotalsCommittee read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of TotalsCommittee given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of TotalsCommittee
   * @throws IOException if the JSON string is invalid with respect to TotalsCommittee
   */
  public static TotalsCommittee fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, TotalsCommittee.class);
  }

  /**
   * Convert an instance of TotalsCommittee to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

