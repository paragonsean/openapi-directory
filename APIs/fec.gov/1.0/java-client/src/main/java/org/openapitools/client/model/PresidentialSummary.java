/*
 * OpenFEC
 * This application programming interface (API) allows you to explore the way candidates and committees fund their campaigns.    The Federal Election Commission (FEC) API is a RESTful web service supporting full-text and field-specific searches on FEC data. [Bulk downloads](https://www.fec.gov/data/advanced/?tab=bulk-data) are available on the current site. Information is tied to the underlying forms by file ID and image ID. Data is updated nightly.    There are a lot of data, and a good place to start is to use search to find interesting candidates and committees. Then, you can use their IDs to find report or line item details with the other endpoints. If you are interested in individual donors, check out contributor information in the `/schedule_a/` endpoints.    <b class=\"body\" id=\"getting_started_head\">Getting started with the openFEC API</b><br>    If you would like to use the FEC's API programmatically, you can sign up for your own API key using our form. Alternatively, you can still try out our API without an API key by using the web interface and using DEMO_KEY. Note that when you use the openFEC API you are subject to the [Terms of Service](https://github.com/fecgov/FEC/blob/master/TERMS-OF-SERVICE.md) and [Acceptable Use policy](https://github.com/fecgov/FEC/blob/master/ACCEPTABLE-USE-POLICY.md).    Signing up for an API key will enable you to place up to 1,000 calls an hour. Each call is limited to 100 results per page. You can email questions, comments or a request to get a key for 7,200 calls an hour (120 calls per minute) to <a href=\"mailto:APIinfo@fec.gov\">APIinfo@fec.gov</a>. You can also ask questions and discuss the data in a community led [group](https://groups.google.com/forum/#!forum/fec-data).    The model definitions and schema are available at [/swagger](/swagger/). This is useful for making wrappers and exploring the data.    A few restrictions limit the way you can use FEC data. For example, you canâ€™t use contributor lists for commercial purposes or to solicit donations. [Learn more here](https://www.fec.gov/updates/sale-or-use-contributor-information/).    [Inspect our source code](https://github.com/fecgov/openFEC). We welcome issues and pull requests!    <p><br></p> <h2 class=\"title\" id=\"signup_head\">Sign up for an API key</h2> <div id=\"apidatagov_signup\">Loading signup form...</div>
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.math.BigDecimal;
import java.util.Arrays;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * PresidentialSummary
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:02:12.812386-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class PresidentialSummary {
  public static final String SERIALIZED_NAME_CANDIDATE_CONTRIBUTIONS_LESS_REPAYMENTS = "candidate_contributions_less_repayments";
  @SerializedName(SERIALIZED_NAME_CANDIDATE_CONTRIBUTIONS_LESS_REPAYMENTS)
  private BigDecimal candidateContributionsLessRepayments;

  public static final String SERIALIZED_NAME_CANDIDATE_ID = "candidate_id";
  @SerializedName(SERIALIZED_NAME_CANDIDATE_ID)
  private String candidateId;

  public static final String SERIALIZED_NAME_CANDIDATE_LAST_NAME = "candidate_last_name";
  @SerializedName(SERIALIZED_NAME_CANDIDATE_LAST_NAME)
  private String candidateLastName;

  public static final String SERIALIZED_NAME_CANDIDATE_NAME = "candidate_name";
  @SerializedName(SERIALIZED_NAME_CANDIDATE_NAME)
  private String candidateName;

  public static final String SERIALIZED_NAME_CANDIDATE_PARTY_AFFILIATION = "candidate_party_affiliation";
  @SerializedName(SERIALIZED_NAME_CANDIDATE_PARTY_AFFILIATION)
  private String candidatePartyAffiliation;

  public static final String SERIALIZED_NAME_CASH_ON_HAND_END = "cash_on_hand_end";
  @SerializedName(SERIALIZED_NAME_CASH_ON_HAND_END)
  private BigDecimal cashOnHandEnd;

  public static final String SERIALIZED_NAME_COMMITTEE_DESIGNATION = "committee_designation";
  @SerializedName(SERIALIZED_NAME_COMMITTEE_DESIGNATION)
  private String committeeDesignation;

  public static final String SERIALIZED_NAME_COMMITTEE_ID = "committee_id";
  @SerializedName(SERIALIZED_NAME_COMMITTEE_ID)
  private String committeeId;

  public static final String SERIALIZED_NAME_COMMITTEE_NAME = "committee_name";
  @SerializedName(SERIALIZED_NAME_COMMITTEE_NAME)
  private String committeeName;

  public static final String SERIALIZED_NAME_COMMITTEE_TYPE = "committee_type";
  @SerializedName(SERIALIZED_NAME_COMMITTEE_TYPE)
  private String committeeType;

  public static final String SERIALIZED_NAME_DEBTS_OWED_BY_COMMITTEE = "debts_owed_by_committee";
  @SerializedName(SERIALIZED_NAME_DEBTS_OWED_BY_COMMITTEE)
  private BigDecimal debtsOwedByCommittee;

  public static final String SERIALIZED_NAME_DISBURSEMENTS_LESS_OFFSETS = "disbursements_less_offsets";
  @SerializedName(SERIALIZED_NAME_DISBURSEMENTS_LESS_OFFSETS)
  private BigDecimal disbursementsLessOffsets;

  public static final String SERIALIZED_NAME_ELECTION_YEAR = "election_year";
  @SerializedName(SERIALIZED_NAME_ELECTION_YEAR)
  private Integer electionYear;

  public static final String SERIALIZED_NAME_EXEMPT_LEGAL_ACCOUNTING_DISBURSEMENT = "exempt_legal_accounting_disbursement";
  @SerializedName(SERIALIZED_NAME_EXEMPT_LEGAL_ACCOUNTING_DISBURSEMENT)
  private BigDecimal exemptLegalAccountingDisbursement;

  public static final String SERIALIZED_NAME_FEDERAL_FUNDS = "federal_funds";
  @SerializedName(SERIALIZED_NAME_FEDERAL_FUNDS)
  private BigDecimal federalFunds;

  public static final String SERIALIZED_NAME_FUNDRAISING_DISBURSEMENTS = "fundraising_disbursements";
  @SerializedName(SERIALIZED_NAME_FUNDRAISING_DISBURSEMENTS)
  private BigDecimal fundraisingDisbursements;

  public static final String SERIALIZED_NAME_INDIVIDUAL_CONTRIBUTIONS_LESS_REFUNDS = "individual_contributions_less_refunds";
  @SerializedName(SERIALIZED_NAME_INDIVIDUAL_CONTRIBUTIONS_LESS_REFUNDS)
  private BigDecimal individualContributionsLessRefunds;

  public static final String SERIALIZED_NAME_NET_RECEIPTS = "net_receipts";
  @SerializedName(SERIALIZED_NAME_NET_RECEIPTS)
  private BigDecimal netReceipts;

  public static final String SERIALIZED_NAME_OFFSETS_TO_OPERATING_EXPENDITURES = "offsets_to_operating_expenditures";
  @SerializedName(SERIALIZED_NAME_OFFSETS_TO_OPERATING_EXPENDITURES)
  private BigDecimal offsetsToOperatingExpenditures;

  public static final String SERIALIZED_NAME_OPERATING_EXPENDITURES = "operating_expenditures";
  @SerializedName(SERIALIZED_NAME_OPERATING_EXPENDITURES)
  private BigDecimal operatingExpenditures;

  public static final String SERIALIZED_NAME_OTHER_DISBURSEMENTS = "other_disbursements";
  @SerializedName(SERIALIZED_NAME_OTHER_DISBURSEMENTS)
  private BigDecimal otherDisbursements;

  public static final String SERIALIZED_NAME_PAC_CONTRIBUTIONS_LESS_REFUNDS = "pac_contributions_less_refunds";
  @SerializedName(SERIALIZED_NAME_PAC_CONTRIBUTIONS_LESS_REFUNDS)
  private BigDecimal pacContributionsLessRefunds;

  public static final String SERIALIZED_NAME_PARTY_CONTRIBUTIONS_LESS_REFUNDS = "party_contributions_less_refunds";
  @SerializedName(SERIALIZED_NAME_PARTY_CONTRIBUTIONS_LESS_REFUNDS)
  private BigDecimal partyContributionsLessRefunds;

  public static final String SERIALIZED_NAME_REPAYMENTS_LOANS_MADE_BY_CANDIDATE = "repayments_loans_made_by_candidate";
  @SerializedName(SERIALIZED_NAME_REPAYMENTS_LOANS_MADE_BY_CANDIDATE)
  private BigDecimal repaymentsLoansMadeByCandidate;

  public static final String SERIALIZED_NAME_REPAYMENTS_OTHER_LOANS = "repayments_other_loans";
  @SerializedName(SERIALIZED_NAME_REPAYMENTS_OTHER_LOANS)
  private BigDecimal repaymentsOtherLoans;

  public static final String SERIALIZED_NAME_ROUNDED_NET_RECEIPTS = "rounded_net_receipts";
  @SerializedName(SERIALIZED_NAME_ROUNDED_NET_RECEIPTS)
  private BigDecimal roundedNetReceipts;

  public static final String SERIALIZED_NAME_TOTAL_CONTRIBUTION_REFUNDS = "total_contribution_refunds";
  @SerializedName(SERIALIZED_NAME_TOTAL_CONTRIBUTION_REFUNDS)
  private BigDecimal totalContributionRefunds;

  public static final String SERIALIZED_NAME_TOTAL_LOAN_REPAYMENTS_MADE = "total_loan_repayments_made";
  @SerializedName(SERIALIZED_NAME_TOTAL_LOAN_REPAYMENTS_MADE)
  private BigDecimal totalLoanRepaymentsMade;

  public static final String SERIALIZED_NAME_TRANSFERS_FROM_AFFILIATED_COMMITTEES = "transfers_from_affiliated_committees";
  @SerializedName(SERIALIZED_NAME_TRANSFERS_FROM_AFFILIATED_COMMITTEES)
  private BigDecimal transfersFromAffiliatedCommittees;

  public static final String SERIALIZED_NAME_TRANSFERS_TO_OTHER_AUTHORIZED_COMMITTEES = "transfers_to_other_authorized_committees";
  @SerializedName(SERIALIZED_NAME_TRANSFERS_TO_OTHER_AUTHORIZED_COMMITTEES)
  private BigDecimal transfersToOtherAuthorizedCommittees;

  public PresidentialSummary() {
  }

  public PresidentialSummary candidateContributionsLessRepayments(BigDecimal candidateContributionsLessRepayments) {
    this.candidateContributionsLessRepayments = candidateContributionsLessRepayments;
    return this;
  }

  /**
   *  candidate contributions less repayments 
   * @return candidateContributionsLessRepayments
   */
  @javax.annotation.Nullable
  public BigDecimal getCandidateContributionsLessRepayments() {
    return candidateContributionsLessRepayments;
  }

  public void setCandidateContributionsLessRepayments(BigDecimal candidateContributionsLessRepayments) {
    this.candidateContributionsLessRepayments = candidateContributionsLessRepayments;
  }


  public PresidentialSummary candidateId(String candidateId) {
    this.candidateId = candidateId;
    return this;
  }

  /**
   *  A unique identifier assigned to each candidate registered with the FEC. If a person runs for several offices, that person will have separate candidate IDs for each office. First character indicates office - [P]residential, [H]ouse, [S]enate]. Second character is the last digit of the two-year period the ID was created. Third and fourth is the candidate state. Presidential IDs don&#39;t have state. Fifth and sixth is the district when the candidate first ran. This does not change if the candidate/member&#39;s district changes during re-districting. Presidential IDs don&#39;t have districts. The rest is sequence.   -P00000001    All candidates   -P00000002    Democrasts   -P00000003    Republicans 
   * @return candidateId
   */
  @javax.annotation.Nullable
  public String getCandidateId() {
    return candidateId;
  }

  public void setCandidateId(String candidateId) {
    this.candidateId = candidateId;
  }


  public PresidentialSummary candidateLastName(String candidateLastName) {
    this.candidateLastName = candidateLastName;
    return this;
  }

  /**
   *  Candidate last name 
   * @return candidateLastName
   */
  @javax.annotation.Nullable
  public String getCandidateLastName() {
    return candidateLastName;
  }

  public void setCandidateLastName(String candidateLastName) {
    this.candidateLastName = candidateLastName;
  }


  public PresidentialSummary candidateName(String candidateName) {
    this.candidateName = candidateName;
    return this;
  }

  /**
   * Name of candidate running for office
   * @return candidateName
   */
  @javax.annotation.Nullable
  public String getCandidateName() {
    return candidateName;
  }

  public void setCandidateName(String candidateName) {
    this.candidateName = candidateName;
  }


  public PresidentialSummary candidatePartyAffiliation(String candidatePartyAffiliation) {
    this.candidatePartyAffiliation = candidatePartyAffiliation;
    return this;
  }

  /**
   * Three-letter code for the party affiliated with a candidate or committee. For example, DEM for Democratic Party and REP for Republican Party.
   * @return candidatePartyAffiliation
   */
  @javax.annotation.Nullable
  public String getCandidatePartyAffiliation() {
    return candidatePartyAffiliation;
  }

  public void setCandidatePartyAffiliation(String candidatePartyAffiliation) {
    this.candidatePartyAffiliation = candidatePartyAffiliation;
  }


  public PresidentialSummary cashOnHandEnd(BigDecimal cashOnHandEnd) {
    this.cashOnHandEnd = cashOnHandEnd;
    return this;
  }

  /**
   * Ending cash balance on the most recent filing
   * @return cashOnHandEnd
   */
  @javax.annotation.Nullable
  public BigDecimal getCashOnHandEnd() {
    return cashOnHandEnd;
  }

  public void setCashOnHandEnd(BigDecimal cashOnHandEnd) {
    this.cashOnHandEnd = cashOnHandEnd;
  }


  public PresidentialSummary committeeDesignation(String committeeDesignation) {
    this.committeeDesignation = committeeDesignation;
    return this;
  }

  /**
   * The one-letter designation code of the organization:          - A authorized by a candidate          - J joint fundraising committee          - P principal campaign committee of a candidate          - U unauthorized          - B lobbyist/registrant PAC          - D leadership PAC 
   * @return committeeDesignation
   */
  @javax.annotation.Nullable
  public String getCommitteeDesignation() {
    return committeeDesignation;
  }

  public void setCommitteeDesignation(String committeeDesignation) {
    this.committeeDesignation = committeeDesignation;
  }


  public PresidentialSummary committeeId(String committeeId) {
    this.committeeId = committeeId;
    return this;
  }

  /**
   *  A unique identifier assigned to each candidate registered with the FEC. If a person runs for several offices, that person will have separate candidate IDs for each office. First character indicates office - [P]residential, [H]ouse, [S]enate]. Second character is the last digit of the two-year period the ID was created. Third and fourth is the candidate state. Presidential IDs don&#39;t have state. Fifth and sixth is the district when the candidate first ran. This does not change if the candidate/member&#39;s district changes during re-districting. Presidential IDs don&#39;t have districts. The rest is sequence. 
   * @return committeeId
   */
  @javax.annotation.Nullable
  public String getCommitteeId() {
    return committeeId;
  }

  public void setCommitteeId(String committeeId) {
    this.committeeId = committeeId;
  }


  public PresidentialSummary committeeName(String committeeName) {
    this.committeeName = committeeName;
    return this;
  }

  /**
   * The name of the committee. If a committee changes its name,     the most recent name will be shown. Committee names are not unique. Use committee_id     for looking up records.
   * @return committeeName
   */
  @javax.annotation.Nullable
  public String getCommitteeName() {
    return committeeName;
  }

  public void setCommitteeName(String committeeName) {
    this.committeeName = committeeName;
  }


  public PresidentialSummary committeeType(String committeeType) {
    this.committeeType = committeeType;
    return this;
  }

  /**
   * The one-letter type code of the organization:         - C communication cost         - D delegate         - E electioneering communication         - H House         - I independent expenditure filer (not a committee)         - N PAC - nonqualified         - O independent expenditure-only (super PACs)         - P presidential         - Q PAC - qualified         - S Senate         - U single candidate independent expenditure         - V PAC with non-contribution account, nonqualified         - W PAC with non-contribution account, qualified         - X party, nonqualified         - Y party, qualified         - Z national party non-federal account 
   * @return committeeType
   */
  @javax.annotation.Nullable
  public String getCommitteeType() {
    return committeeType;
  }

  public void setCommitteeType(String committeeType) {
    this.committeeType = committeeType;
  }


  public PresidentialSummary debtsOwedByCommittee(BigDecimal debtsOwedByCommittee) {
    this.debtsOwedByCommittee = debtsOwedByCommittee;
    return this;
  }

  /**
   * Debts owed by the committee
   * @return debtsOwedByCommittee
   */
  @javax.annotation.Nullable
  public BigDecimal getDebtsOwedByCommittee() {
    return debtsOwedByCommittee;
  }

  public void setDebtsOwedByCommittee(BigDecimal debtsOwedByCommittee) {
    this.debtsOwedByCommittee = debtsOwedByCommittee;
  }


  public PresidentialSummary disbursementsLessOffsets(BigDecimal disbursementsLessOffsets) {
    this.disbursementsLessOffsets = disbursementsLessOffsets;
    return this;
  }

  /**
   *  disbursements less offsets 
   * @return disbursementsLessOffsets
   */
  @javax.annotation.Nullable
  public BigDecimal getDisbursementsLessOffsets() {
    return disbursementsLessOffsets;
  }

  public void setDisbursementsLessOffsets(BigDecimal disbursementsLessOffsets) {
    this.disbursementsLessOffsets = disbursementsLessOffsets;
  }


  public PresidentialSummary electionYear(Integer electionYear) {
    this.electionYear = electionYear;
    return this;
  }

  /**
   * Year of election
   * @return electionYear
   */
  @javax.annotation.Nullable
  public Integer getElectionYear() {
    return electionYear;
  }

  public void setElectionYear(Integer electionYear) {
    this.electionYear = electionYear;
  }


  public PresidentialSummary exemptLegalAccountingDisbursement(BigDecimal exemptLegalAccountingDisbursement) {
    this.exemptLegalAccountingDisbursement = exemptLegalAccountingDisbursement;
    return this;
  }

  /**
   *  exempt legal accounting disbursement 
   * @return exemptLegalAccountingDisbursement
   */
  @javax.annotation.Nullable
  public BigDecimal getExemptLegalAccountingDisbursement() {
    return exemptLegalAccountingDisbursement;
  }

  public void setExemptLegalAccountingDisbursement(BigDecimal exemptLegalAccountingDisbursement) {
    this.exemptLegalAccountingDisbursement = exemptLegalAccountingDisbursement;
  }


  public PresidentialSummary federalFunds(BigDecimal federalFunds) {
    this.federalFunds = federalFunds;
    return this;
  }

  /**
   * Federal funds: Public funding of presidential elections means that qualified presidential candidates                 receive federal government funds to pay for the valid expenses of their political campaigns                 in both the primary and general elections.
   * @return federalFunds
   */
  @javax.annotation.Nullable
  public BigDecimal getFederalFunds() {
    return federalFunds;
  }

  public void setFederalFunds(BigDecimal federalFunds) {
    this.federalFunds = federalFunds;
  }


  public PresidentialSummary fundraisingDisbursements(BigDecimal fundraisingDisbursements) {
    this.fundraisingDisbursements = fundraisingDisbursements;
    return this;
  }

  /**
   *  fundraising disbursements 
   * @return fundraisingDisbursements
   */
  @javax.annotation.Nullable
  public BigDecimal getFundraisingDisbursements() {
    return fundraisingDisbursements;
  }

  public void setFundraisingDisbursements(BigDecimal fundraisingDisbursements) {
    this.fundraisingDisbursements = fundraisingDisbursements;
  }


  public PresidentialSummary individualContributionsLessRefunds(BigDecimal individualContributionsLessRefunds) {
    this.individualContributionsLessRefunds = individualContributionsLessRefunds;
    return this;
  }

  /**
   *  individual contributions less refunds 
   * @return individualContributionsLessRefunds
   */
  @javax.annotation.Nullable
  public BigDecimal getIndividualContributionsLessRefunds() {
    return individualContributionsLessRefunds;
  }

  public void setIndividualContributionsLessRefunds(BigDecimal individualContributionsLessRefunds) {
    this.individualContributionsLessRefunds = individualContributionsLessRefunds;
  }


  public PresidentialSummary netReceipts(BigDecimal netReceipts) {
    this.netReceipts = netReceipts;
    return this;
  }

  /**
   *  Contributions received 
   * @return netReceipts
   */
  @javax.annotation.Nullable
  public BigDecimal getNetReceipts() {
    return netReceipts;
  }

  public void setNetReceipts(BigDecimal netReceipts) {
    this.netReceipts = netReceipts;
  }


  public PresidentialSummary offsetsToOperatingExpenditures(BigDecimal offsetsToOperatingExpenditures) {
    this.offsetsToOperatingExpenditures = offsetsToOperatingExpenditures;
    return this;
  }

  /**
   * Offsets to operating expenditures
   * @return offsetsToOperatingExpenditures
   */
  @javax.annotation.Nullable
  public BigDecimal getOffsetsToOperatingExpenditures() {
    return offsetsToOperatingExpenditures;
  }

  public void setOffsetsToOperatingExpenditures(BigDecimal offsetsToOperatingExpenditures) {
    this.offsetsToOperatingExpenditures = offsetsToOperatingExpenditures;
  }


  public PresidentialSummary operatingExpenditures(BigDecimal operatingExpenditures) {
    this.operatingExpenditures = operatingExpenditures;
    return this;
  }

  /**
   * Total operating expenditures
   * @return operatingExpenditures
   */
  @javax.annotation.Nullable
  public BigDecimal getOperatingExpenditures() {
    return operatingExpenditures;
  }

  public void setOperatingExpenditures(BigDecimal operatingExpenditures) {
    this.operatingExpenditures = operatingExpenditures;
  }


  public PresidentialSummary otherDisbursements(BigDecimal otherDisbursements) {
    this.otherDisbursements = otherDisbursements;
    return this;
  }

  /**
   * Other disbursements
   * @return otherDisbursements
   */
  @javax.annotation.Nullable
  public BigDecimal getOtherDisbursements() {
    return otherDisbursements;
  }

  public void setOtherDisbursements(BigDecimal otherDisbursements) {
    this.otherDisbursements = otherDisbursements;
  }


  public PresidentialSummary pacContributionsLessRefunds(BigDecimal pacContributionsLessRefunds) {
    this.pacContributionsLessRefunds = pacContributionsLessRefunds;
    return this;
  }

  /**
   *  pac contributions less refunds 
   * @return pacContributionsLessRefunds
   */
  @javax.annotation.Nullable
  public BigDecimal getPacContributionsLessRefunds() {
    return pacContributionsLessRefunds;
  }

  public void setPacContributionsLessRefunds(BigDecimal pacContributionsLessRefunds) {
    this.pacContributionsLessRefunds = pacContributionsLessRefunds;
  }


  public PresidentialSummary partyContributionsLessRefunds(BigDecimal partyContributionsLessRefunds) {
    this.partyContributionsLessRefunds = partyContributionsLessRefunds;
    return this;
  }

  /**
   *  party contributions less refunds 
   * @return partyContributionsLessRefunds
   */
  @javax.annotation.Nullable
  public BigDecimal getPartyContributionsLessRefunds() {
    return partyContributionsLessRefunds;
  }

  public void setPartyContributionsLessRefunds(BigDecimal partyContributionsLessRefunds) {
    this.partyContributionsLessRefunds = partyContributionsLessRefunds;
  }


  public PresidentialSummary repaymentsLoansMadeByCandidate(BigDecimal repaymentsLoansMadeByCandidate) {
    this.repaymentsLoansMadeByCandidate = repaymentsLoansMadeByCandidate;
    return this;
  }

  /**
   *  repayments loans made by candidate 
   * @return repaymentsLoansMadeByCandidate
   */
  @javax.annotation.Nullable
  public BigDecimal getRepaymentsLoansMadeByCandidate() {
    return repaymentsLoansMadeByCandidate;
  }

  public void setRepaymentsLoansMadeByCandidate(BigDecimal repaymentsLoansMadeByCandidate) {
    this.repaymentsLoansMadeByCandidate = repaymentsLoansMadeByCandidate;
  }


  public PresidentialSummary repaymentsOtherLoans(BigDecimal repaymentsOtherLoans) {
    this.repaymentsOtherLoans = repaymentsOtherLoans;
    return this;
  }

  /**
   *  repayments other loans 
   * @return repaymentsOtherLoans
   */
  @javax.annotation.Nullable
  public BigDecimal getRepaymentsOtherLoans() {
    return repaymentsOtherLoans;
  }

  public void setRepaymentsOtherLoans(BigDecimal repaymentsOtherLoans) {
    this.repaymentsOtherLoans = repaymentsOtherLoans;
  }


  public PresidentialSummary roundedNetReceipts(BigDecimal roundedNetReceipts) {
    this.roundedNetReceipts = roundedNetReceipts;
    return this;
  }

  /**
   *  Net receipts, in millions 
   * @return roundedNetReceipts
   */
  @javax.annotation.Nullable
  public BigDecimal getRoundedNetReceipts() {
    return roundedNetReceipts;
  }

  public void setRoundedNetReceipts(BigDecimal roundedNetReceipts) {
    this.roundedNetReceipts = roundedNetReceipts;
  }


  public PresidentialSummary totalContributionRefunds(BigDecimal totalContributionRefunds) {
    this.totalContributionRefunds = totalContributionRefunds;
    return this;
  }

  /**
   *  total contribution refunds 
   * @return totalContributionRefunds
   */
  @javax.annotation.Nullable
  public BigDecimal getTotalContributionRefunds() {
    return totalContributionRefunds;
  }

  public void setTotalContributionRefunds(BigDecimal totalContributionRefunds) {
    this.totalContributionRefunds = totalContributionRefunds;
  }


  public PresidentialSummary totalLoanRepaymentsMade(BigDecimal totalLoanRepaymentsMade) {
    this.totalLoanRepaymentsMade = totalLoanRepaymentsMade;
    return this;
  }

  /**
   *  total loan repayments made 
   * @return totalLoanRepaymentsMade
   */
  @javax.annotation.Nullable
  public BigDecimal getTotalLoanRepaymentsMade() {
    return totalLoanRepaymentsMade;
  }

  public void setTotalLoanRepaymentsMade(BigDecimal totalLoanRepaymentsMade) {
    this.totalLoanRepaymentsMade = totalLoanRepaymentsMade;
  }


  public PresidentialSummary transfersFromAffiliatedCommittees(BigDecimal transfersFromAffiliatedCommittees) {
    this.transfersFromAffiliatedCommittees = transfersFromAffiliatedCommittees;
    return this;
  }

  /**
   *  transfers from affiliated committees 
   * @return transfersFromAffiliatedCommittees
   */
  @javax.annotation.Nullable
  public BigDecimal getTransfersFromAffiliatedCommittees() {
    return transfersFromAffiliatedCommittees;
  }

  public void setTransfersFromAffiliatedCommittees(BigDecimal transfersFromAffiliatedCommittees) {
    this.transfersFromAffiliatedCommittees = transfersFromAffiliatedCommittees;
  }


  public PresidentialSummary transfersToOtherAuthorizedCommittees(BigDecimal transfersToOtherAuthorizedCommittees) {
    this.transfersToOtherAuthorizedCommittees = transfersToOtherAuthorizedCommittees;
    return this;
  }

  /**
   *  transfers to other authorized committees 
   * @return transfersToOtherAuthorizedCommittees
   */
  @javax.annotation.Nullable
  public BigDecimal getTransfersToOtherAuthorizedCommittees() {
    return transfersToOtherAuthorizedCommittees;
  }

  public void setTransfersToOtherAuthorizedCommittees(BigDecimal transfersToOtherAuthorizedCommittees) {
    this.transfersToOtherAuthorizedCommittees = transfersToOtherAuthorizedCommittees;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PresidentialSummary presidentialSummary = (PresidentialSummary) o;
    return Objects.equals(this.candidateContributionsLessRepayments, presidentialSummary.candidateContributionsLessRepayments) &&
        Objects.equals(this.candidateId, presidentialSummary.candidateId) &&
        Objects.equals(this.candidateLastName, presidentialSummary.candidateLastName) &&
        Objects.equals(this.candidateName, presidentialSummary.candidateName) &&
        Objects.equals(this.candidatePartyAffiliation, presidentialSummary.candidatePartyAffiliation) &&
        Objects.equals(this.cashOnHandEnd, presidentialSummary.cashOnHandEnd) &&
        Objects.equals(this.committeeDesignation, presidentialSummary.committeeDesignation) &&
        Objects.equals(this.committeeId, presidentialSummary.committeeId) &&
        Objects.equals(this.committeeName, presidentialSummary.committeeName) &&
        Objects.equals(this.committeeType, presidentialSummary.committeeType) &&
        Objects.equals(this.debtsOwedByCommittee, presidentialSummary.debtsOwedByCommittee) &&
        Objects.equals(this.disbursementsLessOffsets, presidentialSummary.disbursementsLessOffsets) &&
        Objects.equals(this.electionYear, presidentialSummary.electionYear) &&
        Objects.equals(this.exemptLegalAccountingDisbursement, presidentialSummary.exemptLegalAccountingDisbursement) &&
        Objects.equals(this.federalFunds, presidentialSummary.federalFunds) &&
        Objects.equals(this.fundraisingDisbursements, presidentialSummary.fundraisingDisbursements) &&
        Objects.equals(this.individualContributionsLessRefunds, presidentialSummary.individualContributionsLessRefunds) &&
        Objects.equals(this.netReceipts, presidentialSummary.netReceipts) &&
        Objects.equals(this.offsetsToOperatingExpenditures, presidentialSummary.offsetsToOperatingExpenditures) &&
        Objects.equals(this.operatingExpenditures, presidentialSummary.operatingExpenditures) &&
        Objects.equals(this.otherDisbursements, presidentialSummary.otherDisbursements) &&
        Objects.equals(this.pacContributionsLessRefunds, presidentialSummary.pacContributionsLessRefunds) &&
        Objects.equals(this.partyContributionsLessRefunds, presidentialSummary.partyContributionsLessRefunds) &&
        Objects.equals(this.repaymentsLoansMadeByCandidate, presidentialSummary.repaymentsLoansMadeByCandidate) &&
        Objects.equals(this.repaymentsOtherLoans, presidentialSummary.repaymentsOtherLoans) &&
        Objects.equals(this.roundedNetReceipts, presidentialSummary.roundedNetReceipts) &&
        Objects.equals(this.totalContributionRefunds, presidentialSummary.totalContributionRefunds) &&
        Objects.equals(this.totalLoanRepaymentsMade, presidentialSummary.totalLoanRepaymentsMade) &&
        Objects.equals(this.transfersFromAffiliatedCommittees, presidentialSummary.transfersFromAffiliatedCommittees) &&
        Objects.equals(this.transfersToOtherAuthorizedCommittees, presidentialSummary.transfersToOtherAuthorizedCommittees);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(candidateContributionsLessRepayments, candidateId, candidateLastName, candidateName, candidatePartyAffiliation, cashOnHandEnd, committeeDesignation, committeeId, committeeName, committeeType, debtsOwedByCommittee, disbursementsLessOffsets, electionYear, exemptLegalAccountingDisbursement, federalFunds, fundraisingDisbursements, individualContributionsLessRefunds, netReceipts, offsetsToOperatingExpenditures, operatingExpenditures, otherDisbursements, pacContributionsLessRefunds, partyContributionsLessRefunds, repaymentsLoansMadeByCandidate, repaymentsOtherLoans, roundedNetReceipts, totalContributionRefunds, totalLoanRepaymentsMade, transfersFromAffiliatedCommittees, transfersToOtherAuthorizedCommittees);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PresidentialSummary {\n");
    sb.append("    candidateContributionsLessRepayments: ").append(toIndentedString(candidateContributionsLessRepayments)).append("\n");
    sb.append("    candidateId: ").append(toIndentedString(candidateId)).append("\n");
    sb.append("    candidateLastName: ").append(toIndentedString(candidateLastName)).append("\n");
    sb.append("    candidateName: ").append(toIndentedString(candidateName)).append("\n");
    sb.append("    candidatePartyAffiliation: ").append(toIndentedString(candidatePartyAffiliation)).append("\n");
    sb.append("    cashOnHandEnd: ").append(toIndentedString(cashOnHandEnd)).append("\n");
    sb.append("    committeeDesignation: ").append(toIndentedString(committeeDesignation)).append("\n");
    sb.append("    committeeId: ").append(toIndentedString(committeeId)).append("\n");
    sb.append("    committeeName: ").append(toIndentedString(committeeName)).append("\n");
    sb.append("    committeeType: ").append(toIndentedString(committeeType)).append("\n");
    sb.append("    debtsOwedByCommittee: ").append(toIndentedString(debtsOwedByCommittee)).append("\n");
    sb.append("    disbursementsLessOffsets: ").append(toIndentedString(disbursementsLessOffsets)).append("\n");
    sb.append("    electionYear: ").append(toIndentedString(electionYear)).append("\n");
    sb.append("    exemptLegalAccountingDisbursement: ").append(toIndentedString(exemptLegalAccountingDisbursement)).append("\n");
    sb.append("    federalFunds: ").append(toIndentedString(federalFunds)).append("\n");
    sb.append("    fundraisingDisbursements: ").append(toIndentedString(fundraisingDisbursements)).append("\n");
    sb.append("    individualContributionsLessRefunds: ").append(toIndentedString(individualContributionsLessRefunds)).append("\n");
    sb.append("    netReceipts: ").append(toIndentedString(netReceipts)).append("\n");
    sb.append("    offsetsToOperatingExpenditures: ").append(toIndentedString(offsetsToOperatingExpenditures)).append("\n");
    sb.append("    operatingExpenditures: ").append(toIndentedString(operatingExpenditures)).append("\n");
    sb.append("    otherDisbursements: ").append(toIndentedString(otherDisbursements)).append("\n");
    sb.append("    pacContributionsLessRefunds: ").append(toIndentedString(pacContributionsLessRefunds)).append("\n");
    sb.append("    partyContributionsLessRefunds: ").append(toIndentedString(partyContributionsLessRefunds)).append("\n");
    sb.append("    repaymentsLoansMadeByCandidate: ").append(toIndentedString(repaymentsLoansMadeByCandidate)).append("\n");
    sb.append("    repaymentsOtherLoans: ").append(toIndentedString(repaymentsOtherLoans)).append("\n");
    sb.append("    roundedNetReceipts: ").append(toIndentedString(roundedNetReceipts)).append("\n");
    sb.append("    totalContributionRefunds: ").append(toIndentedString(totalContributionRefunds)).append("\n");
    sb.append("    totalLoanRepaymentsMade: ").append(toIndentedString(totalLoanRepaymentsMade)).append("\n");
    sb.append("    transfersFromAffiliatedCommittees: ").append(toIndentedString(transfersFromAffiliatedCommittees)).append("\n");
    sb.append("    transfersToOtherAuthorizedCommittees: ").append(toIndentedString(transfersToOtherAuthorizedCommittees)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("candidate_contributions_less_repayments");
    openapiFields.add("candidate_id");
    openapiFields.add("candidate_last_name");
    openapiFields.add("candidate_name");
    openapiFields.add("candidate_party_affiliation");
    openapiFields.add("cash_on_hand_end");
    openapiFields.add("committee_designation");
    openapiFields.add("committee_id");
    openapiFields.add("committee_name");
    openapiFields.add("committee_type");
    openapiFields.add("debts_owed_by_committee");
    openapiFields.add("disbursements_less_offsets");
    openapiFields.add("election_year");
    openapiFields.add("exempt_legal_accounting_disbursement");
    openapiFields.add("federal_funds");
    openapiFields.add("fundraising_disbursements");
    openapiFields.add("individual_contributions_less_refunds");
    openapiFields.add("net_receipts");
    openapiFields.add("offsets_to_operating_expenditures");
    openapiFields.add("operating_expenditures");
    openapiFields.add("other_disbursements");
    openapiFields.add("pac_contributions_less_refunds");
    openapiFields.add("party_contributions_less_refunds");
    openapiFields.add("repayments_loans_made_by_candidate");
    openapiFields.add("repayments_other_loans");
    openapiFields.add("rounded_net_receipts");
    openapiFields.add("total_contribution_refunds");
    openapiFields.add("total_loan_repayments_made");
    openapiFields.add("transfers_from_affiliated_committees");
    openapiFields.add("transfers_to_other_authorized_committees");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to PresidentialSummary
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!PresidentialSummary.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in PresidentialSummary is not found in the empty JSON string", PresidentialSummary.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!PresidentialSummary.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `PresidentialSummary` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("candidate_id") != null && !jsonObj.get("candidate_id").isJsonNull()) && !jsonObj.get("candidate_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `candidate_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("candidate_id").toString()));
      }
      if ((jsonObj.get("candidate_last_name") != null && !jsonObj.get("candidate_last_name").isJsonNull()) && !jsonObj.get("candidate_last_name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `candidate_last_name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("candidate_last_name").toString()));
      }
      if ((jsonObj.get("candidate_name") != null && !jsonObj.get("candidate_name").isJsonNull()) && !jsonObj.get("candidate_name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `candidate_name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("candidate_name").toString()));
      }
      if ((jsonObj.get("candidate_party_affiliation") != null && !jsonObj.get("candidate_party_affiliation").isJsonNull()) && !jsonObj.get("candidate_party_affiliation").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `candidate_party_affiliation` to be a primitive type in the JSON string but got `%s`", jsonObj.get("candidate_party_affiliation").toString()));
      }
      if ((jsonObj.get("committee_designation") != null && !jsonObj.get("committee_designation").isJsonNull()) && !jsonObj.get("committee_designation").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `committee_designation` to be a primitive type in the JSON string but got `%s`", jsonObj.get("committee_designation").toString()));
      }
      if ((jsonObj.get("committee_id") != null && !jsonObj.get("committee_id").isJsonNull()) && !jsonObj.get("committee_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `committee_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("committee_id").toString()));
      }
      if ((jsonObj.get("committee_name") != null && !jsonObj.get("committee_name").isJsonNull()) && !jsonObj.get("committee_name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `committee_name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("committee_name").toString()));
      }
      if ((jsonObj.get("committee_type") != null && !jsonObj.get("committee_type").isJsonNull()) && !jsonObj.get("committee_type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `committee_type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("committee_type").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!PresidentialSummary.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'PresidentialSummary' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<PresidentialSummary> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(PresidentialSummary.class));

       return (TypeAdapter<T>) new TypeAdapter<PresidentialSummary>() {
           @Override
           public void write(JsonWriter out, PresidentialSummary value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public PresidentialSummary read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of PresidentialSummary given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of PresidentialSummary
   * @throws IOException if the JSON string is invalid with respect to PresidentialSummary
   */
  public static PresidentialSummary fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, PresidentialSummary.class);
  }

  /**
   * Convert an instance of PresidentialSummary to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

