/*
 * OpenFEC
 * This application programming interface (API) allows you to explore the way candidates and committees fund their campaigns.    The Federal Election Commission (FEC) API is a RESTful web service supporting full-text and field-specific searches on FEC data. [Bulk downloads](https://www.fec.gov/data/advanced/?tab=bulk-data) are available on the current site. Information is tied to the underlying forms by file ID and image ID. Data is updated nightly.    There are a lot of data, and a good place to start is to use search to find interesting candidates and committees. Then, you can use their IDs to find report or line item details with the other endpoints. If you are interested in individual donors, check out contributor information in the `/schedule_a/` endpoints.    <b class=\"body\" id=\"getting_started_head\">Getting started with the openFEC API</b><br>    If you would like to use the FEC's API programmatically, you can sign up for your own API key using our form. Alternatively, you can still try out our API without an API key by using the web interface and using DEMO_KEY. Note that when you use the openFEC API you are subject to the [Terms of Service](https://github.com/fecgov/FEC/blob/master/TERMS-OF-SERVICE.md) and [Acceptable Use policy](https://github.com/fecgov/FEC/blob/master/ACCEPTABLE-USE-POLICY.md).    Signing up for an API key will enable you to place up to 1,000 calls an hour. Each call is limited to 100 results per page. You can email questions, comments or a request to get a key for 7,200 calls an hour (120 calls per minute) to <a href=\"mailto:APIinfo@fec.gov\">APIinfo@fec.gov</a>. You can also ask questions and discuss the data in a community led [group](https://groups.google.com/forum/#!forum/fec-data).    The model definitions and schema are available at [/swagger](/swagger/). This is useful for making wrappers and exploring the data.    A few restrictions limit the way you can use FEC data. For example, you canâ€™t use contributor lists for commercial purposes or to solicit donations. [Learn more here](https://www.fec.gov/updates/sale-or-use-contributor-information/).    [Inspect our source code](https://github.com/fecgov/openFEC). We welcome issues and pull requests!    <p><br></p> <h2 class=\"title\" id=\"signup_head\">Sign up for an API key</h2> <div id=\"apidatagov_signup\">Loading signup form...</div>
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.math.BigDecimal;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * EfilingsAmendments
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:02:12.812386-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class EfilingsAmendments {
  public static final String SERIALIZED_NAME_AMENDMENT_CHAIN = "amendment_chain";
  @SerializedName(SERIALIZED_NAME_AMENDMENT_CHAIN)
  private List<BigDecimal> amendmentChain;

  public static final String SERIALIZED_NAME_DEPTH = "depth";
  @SerializedName(SERIALIZED_NAME_DEPTH)
  private BigDecimal depth;

  public static final String SERIALIZED_NAME_FILE_NUMBER = "file_number";
  @SerializedName(SERIALIZED_NAME_FILE_NUMBER)
  private Integer fileNumber;

  public static final String SERIALIZED_NAME_LAST = "last";
  @SerializedName(SERIALIZED_NAME_LAST)
  private BigDecimal last;

  public static final String SERIALIZED_NAME_LONGEST_CHAIN = "longest_chain";
  @SerializedName(SERIALIZED_NAME_LONGEST_CHAIN)
  private List<BigDecimal> longestChain;

  public static final String SERIALIZED_NAME_MOST_RECENT_FILING = "most_recent_filing";
  @SerializedName(SERIALIZED_NAME_MOST_RECENT_FILING)
  private BigDecimal mostRecentFiling;

  public static final String SERIALIZED_NAME_PREVIOUS_FILE_NUMBER = "previous_file_number";
  @SerializedName(SERIALIZED_NAME_PREVIOUS_FILE_NUMBER)
  private BigDecimal previousFileNumber;

  public EfilingsAmendments() {
  }

  public EfilingsAmendments amendmentChain(List<BigDecimal> amendmentChain) {
    this.amendmentChain = amendmentChain;
    return this;
  }

  public EfilingsAmendments addAmendmentChainItem(BigDecimal amendmentChainItem) {
    if (this.amendmentChain == null) {
      this.amendmentChain = new ArrayList<>();
    }
    this.amendmentChain.add(amendmentChainItem);
    return this;
  }

  /**
   *  The first value in the chain is the original filing.  The ordering in the chain reflects the order the amendments were filed up to the amendment being inspected. 
   * @return amendmentChain
   */
  @javax.annotation.Nullable
  public List<BigDecimal> getAmendmentChain() {
    return amendmentChain;
  }

  public void setAmendmentChain(List<BigDecimal> amendmentChain) {
    this.amendmentChain = amendmentChain;
  }


  public EfilingsAmendments depth(BigDecimal depth) {
    this.depth = depth;
    return this;
  }

  /**
   * Get depth
   * @return depth
   */
  @javax.annotation.Nullable
  public BigDecimal getDepth() {
    return depth;
  }

  public void setDepth(BigDecimal depth) {
    this.depth = depth;
  }


  public EfilingsAmendments fileNumber(Integer fileNumber) {
    this.fileNumber = fileNumber;
    return this;
  }

  /**
   * Filing ID number
   * @return fileNumber
   */
  @javax.annotation.Nullable
  public Integer getFileNumber() {
    return fileNumber;
  }

  public void setFileNumber(Integer fileNumber) {
    this.fileNumber = fileNumber;
  }


  public EfilingsAmendments last(BigDecimal last) {
    this.last = last;
    return this;
  }

  /**
   * Get last
   * @return last
   */
  @javax.annotation.Nullable
  public BigDecimal getLast() {
    return last;
  }

  public void setLast(BigDecimal last) {
    this.last = last;
  }


  public EfilingsAmendments longestChain(List<BigDecimal> longestChain) {
    this.longestChain = longestChain;
    return this;
  }

  public EfilingsAmendments addLongestChainItem(BigDecimal longestChainItem) {
    if (this.longestChain == null) {
      this.longestChain = new ArrayList<>();
    }
    this.longestChain.add(longestChainItem);
    return this;
  }

  /**
   * Get longestChain
   * @return longestChain
   */
  @javax.annotation.Nullable
  public List<BigDecimal> getLongestChain() {
    return longestChain;
  }

  public void setLongestChain(List<BigDecimal> longestChain) {
    this.longestChain = longestChain;
  }


  public EfilingsAmendments mostRecentFiling(BigDecimal mostRecentFiling) {
    this.mostRecentFiling = mostRecentFiling;
    return this;
  }

  /**
   * Get mostRecentFiling
   * @return mostRecentFiling
   */
  @javax.annotation.Nullable
  public BigDecimal getMostRecentFiling() {
    return mostRecentFiling;
  }

  public void setMostRecentFiling(BigDecimal mostRecentFiling) {
    this.mostRecentFiling = mostRecentFiling;
  }


  public EfilingsAmendments previousFileNumber(BigDecimal previousFileNumber) {
    this.previousFileNumber = previousFileNumber;
    return this;
  }

  /**
   *  Previous filing ID number 
   * @return previousFileNumber
   */
  @javax.annotation.Nullable
  public BigDecimal getPreviousFileNumber() {
    return previousFileNumber;
  }

  public void setPreviousFileNumber(BigDecimal previousFileNumber) {
    this.previousFileNumber = previousFileNumber;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    EfilingsAmendments efilingsAmendments = (EfilingsAmendments) o;
    return Objects.equals(this.amendmentChain, efilingsAmendments.amendmentChain) &&
        Objects.equals(this.depth, efilingsAmendments.depth) &&
        Objects.equals(this.fileNumber, efilingsAmendments.fileNumber) &&
        Objects.equals(this.last, efilingsAmendments.last) &&
        Objects.equals(this.longestChain, efilingsAmendments.longestChain) &&
        Objects.equals(this.mostRecentFiling, efilingsAmendments.mostRecentFiling) &&
        Objects.equals(this.previousFileNumber, efilingsAmendments.previousFileNumber);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(amendmentChain, depth, fileNumber, last, longestChain, mostRecentFiling, previousFileNumber);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class EfilingsAmendments {\n");
    sb.append("    amendmentChain: ").append(toIndentedString(amendmentChain)).append("\n");
    sb.append("    depth: ").append(toIndentedString(depth)).append("\n");
    sb.append("    fileNumber: ").append(toIndentedString(fileNumber)).append("\n");
    sb.append("    last: ").append(toIndentedString(last)).append("\n");
    sb.append("    longestChain: ").append(toIndentedString(longestChain)).append("\n");
    sb.append("    mostRecentFiling: ").append(toIndentedString(mostRecentFiling)).append("\n");
    sb.append("    previousFileNumber: ").append(toIndentedString(previousFileNumber)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("amendment_chain");
    openapiFields.add("depth");
    openapiFields.add("file_number");
    openapiFields.add("last");
    openapiFields.add("longest_chain");
    openapiFields.add("most_recent_filing");
    openapiFields.add("previous_file_number");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to EfilingsAmendments
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!EfilingsAmendments.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in EfilingsAmendments is not found in the empty JSON string", EfilingsAmendments.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!EfilingsAmendments.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `EfilingsAmendments` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // ensure the optional json data is an array if present
      if (jsonObj.get("amendment_chain") != null && !jsonObj.get("amendment_chain").isJsonNull() && !jsonObj.get("amendment_chain").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `amendment_chain` to be an array in the JSON string but got `%s`", jsonObj.get("amendment_chain").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("longest_chain") != null && !jsonObj.get("longest_chain").isJsonNull() && !jsonObj.get("longest_chain").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `longest_chain` to be an array in the JSON string but got `%s`", jsonObj.get("longest_chain").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!EfilingsAmendments.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'EfilingsAmendments' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<EfilingsAmendments> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(EfilingsAmendments.class));

       return (TypeAdapter<T>) new TypeAdapter<EfilingsAmendments>() {
           @Override
           public void write(JsonWriter out, EfilingsAmendments value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public EfilingsAmendments read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of EfilingsAmendments given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of EfilingsAmendments
   * @throws IOException if the JSON string is invalid with respect to EfilingsAmendments
   */
  public static EfilingsAmendments fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, EfilingsAmendments.class);
  }

  /**
   * Convert an instance of EfilingsAmendments to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

