/*
 * OpenFEC
 * This application programming interface (API) allows you to explore the way candidates and committees fund their campaigns.    The Federal Election Commission (FEC) API is a RESTful web service supporting full-text and field-specific searches on FEC data. [Bulk downloads](https://www.fec.gov/data/advanced/?tab=bulk-data) are available on the current site. Information is tied to the underlying forms by file ID and image ID. Data is updated nightly.    There are a lot of data, and a good place to start is to use search to find interesting candidates and committees. Then, you can use their IDs to find report or line item details with the other endpoints. If you are interested in individual donors, check out contributor information in the `/schedule_a/` endpoints.    <b class=\"body\" id=\"getting_started_head\">Getting started with the openFEC API</b><br>    If you would like to use the FEC's API programmatically, you can sign up for your own API key using our form. Alternatively, you can still try out our API without an API key by using the web interface and using DEMO_KEY. Note that when you use the openFEC API you are subject to the [Terms of Service](https://github.com/fecgov/FEC/blob/master/TERMS-OF-SERVICE.md) and [Acceptable Use policy](https://github.com/fecgov/FEC/blob/master/ACCEPTABLE-USE-POLICY.md).    Signing up for an API key will enable you to place up to 1,000 calls an hour. Each call is limited to 100 results per page. You can email questions, comments or a request to get a key for 7,200 calls an hour (120 calls per minute) to <a href=\"mailto:APIinfo@fec.gov\">APIinfo@fec.gov</a>. You can also ask questions and discuss the data in a community led [group](https://groups.google.com/forum/#!forum/fec-data).    The model definitions and schema are available at [/swagger](/swagger/). This is useful for making wrappers and exploring the data.    A few restrictions limit the way you can use FEC data. For example, you canâ€™t use contributor lists for commercial purposes or to solicit donations. [Learn more here](https://www.fec.gov/updates/sale-or-use-contributor-information/).    [Inspect our source code](https://github.com/fecgov/openFEC). We welcome issues and pull requests!    <p><br></p> <h2 class=\"title\" id=\"signup_head\">Sign up for an API key</h2> <div id=\"apidatagov_signup\">Loading signup form...</div>
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import java.time.LocalDate;
import org.openapitools.client.model.SchedulesScheduleFGetDefaultResponse;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class PartyCoordinatedExpendituresApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public PartyCoordinatedExpendituresApi() {
        this(Configuration.getDefaultApiClient());
    }

    public PartyCoordinatedExpendituresApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for schedulesScheduleFGet
     * @param apiKey  API key for https://api.data.gov. Get one at https://api.data.gov/signup.  (required)
     * @param minDate Minimum date (optional)
     * @param maxImageNumber Maxium image number of the page where the schedule item is reported (optional)
     * @param cycle  Filter records to only those that were applicable to a given two-year period.The cycle begins with an odd year and is named for its ending, even year.  (optional)
     * @param minImageNumber Minium image number of the page where the schedule item is reported (optional)
     * @param sortNullOnly Toggle that filters out all rows having sort column that is non-null (optional, default to false)
     * @param payeeName  (optional)
     * @param minAmount Filter for all amounts greater than a value. (optional)
     * @param perPage The number of results returned per page. Defaults to 20. (optional, default to 20)
     * @param candidateId  A unique identifier assigned to each candidate registered with the FEC. If a person runs for several offices, that person will have separate candidate IDs for each office. First character indicates office - [P]residential, [H]ouse, [S]enate]. Second character is the last digit of the two-year period the ID was created. Third and fourth is the candidate state. Presidential IDs don&#39;t have state. Fifth and sixth is the district when the candidate first ran. This does not change if the candidate/member&#39;s district changes during re-districting. Presidential IDs don&#39;t have districts. The rest is sequence.  (optional)
     * @param sortHideNull Hide null values on sorted column(s). (optional, default to false)
     * @param lineNumber Filter for form and line number using the following format: &#x60;FORM-LINENUMBER&#x60;.  For example an argument such as &#x60;F3X-16&#x60; would filter down to all entries from form &#x60;F3X&#x60; line number &#x60;16&#x60;. (optional)
     * @param sort Provide a field to sort by. Use &#x60;-&#x60; for descending order.  (optional, default to expenditure_date)
     * @param sortNullsLast Toggle that sorts null values last (optional, default to false)
     * @param page For paginating through results, starting at page 1 (optional, default to 1)
     * @param committeeId  A unique identifier assigned to each committee or filer registered with the FEC. In general committee id&#39;s begin with the letter C which is followed by eight digits.  (optional)
     * @param imageNumber  An unique identifier for each page where the electronic or paper filing is reported.  (optional)
     * @param maxDate Maximum date (optional)
     * @param maxAmount Filter for all amounts less than a value. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call schedulesScheduleFGetCall(String apiKey, LocalDate minDate, String maxImageNumber, List<Integer> cycle, String minImageNumber, Boolean sortNullOnly, List<String> payeeName, String minAmount, Integer perPage, List<String> candidateId, Boolean sortHideNull, String lineNumber, String sort, Boolean sortNullsLast, Integer page, List<String> committeeId, List<String> imageNumber, LocalDate maxDate, String maxAmount, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/schedules/schedule_f/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (minDate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("min_date", minDate));
        }

        if (maxImageNumber != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("max_image_number", maxImageNumber));
        }

        if (cycle != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "cycle", cycle));
        }

        if (minImageNumber != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("min_image_number", minImageNumber));
        }

        if (sortNullOnly != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort_null_only", sortNullOnly));
        }

        if (payeeName != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "payee_name", payeeName));
        }

        if (minAmount != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("min_amount", minAmount));
        }

        if (perPage != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("per_page", perPage));
        }

        if (candidateId != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "candidate_id", candidateId));
        }

        if (sortHideNull != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort_hide_null", sortHideNull));
        }

        if (lineNumber != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("line_number", lineNumber));
        }

        if (sort != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort", sort));
        }

        if (apiKey != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api_key", apiKey));
        }

        if (sortNullsLast != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort_nulls_last", sortNullsLast));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (committeeId != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "committee_id", committeeId));
        }

        if (imageNumber != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "image_number", imageNumber));
        }

        if (maxDate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("max_date", maxDate));
        }

        if (maxAmount != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("max_amount", maxAmount));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKeyHeaderAuth", "ApiKeyQueryAuth", "apiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call schedulesScheduleFGetValidateBeforeCall(String apiKey, LocalDate minDate, String maxImageNumber, List<Integer> cycle, String minImageNumber, Boolean sortNullOnly, List<String> payeeName, String minAmount, Integer perPage, List<String> candidateId, Boolean sortHideNull, String lineNumber, String sort, Boolean sortNullsLast, Integer page, List<String> committeeId, List<String> imageNumber, LocalDate maxDate, String maxAmount, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'apiKey' is set
        if (apiKey == null) {
            throw new ApiException("Missing the required parameter 'apiKey' when calling schedulesScheduleFGet(Async)");
        }

        return schedulesScheduleFGetCall(apiKey, minDate, maxImageNumber, cycle, minImageNumber, sortNullOnly, payeeName, minAmount, perPage, candidateId, sortHideNull, lineNumber, sort, sortNullsLast, page, committeeId, imageNumber, maxDate, maxAmount, _callback);

    }

    /**
     * 
     *  Schedule F, it shows all special expenditures a national or state party committee makes in connection with the general election campaigns of federal candidates.  These coordinated party expenditures do not count against the contribution limits but are subject to other limits, these limits are detailed in Chapter 7 of the FEC Campaign Guide for Political Party Committees. 
     * @param apiKey  API key for https://api.data.gov. Get one at https://api.data.gov/signup.  (required)
     * @param minDate Minimum date (optional)
     * @param maxImageNumber Maxium image number of the page where the schedule item is reported (optional)
     * @param cycle  Filter records to only those that were applicable to a given two-year period.The cycle begins with an odd year and is named for its ending, even year.  (optional)
     * @param minImageNumber Minium image number of the page where the schedule item is reported (optional)
     * @param sortNullOnly Toggle that filters out all rows having sort column that is non-null (optional, default to false)
     * @param payeeName  (optional)
     * @param minAmount Filter for all amounts greater than a value. (optional)
     * @param perPage The number of results returned per page. Defaults to 20. (optional, default to 20)
     * @param candidateId  A unique identifier assigned to each candidate registered with the FEC. If a person runs for several offices, that person will have separate candidate IDs for each office. First character indicates office - [P]residential, [H]ouse, [S]enate]. Second character is the last digit of the two-year period the ID was created. Third and fourth is the candidate state. Presidential IDs don&#39;t have state. Fifth and sixth is the district when the candidate first ran. This does not change if the candidate/member&#39;s district changes during re-districting. Presidential IDs don&#39;t have districts. The rest is sequence.  (optional)
     * @param sortHideNull Hide null values on sorted column(s). (optional, default to false)
     * @param lineNumber Filter for form and line number using the following format: &#x60;FORM-LINENUMBER&#x60;.  For example an argument such as &#x60;F3X-16&#x60; would filter down to all entries from form &#x60;F3X&#x60; line number &#x60;16&#x60;. (optional)
     * @param sort Provide a field to sort by. Use &#x60;-&#x60; for descending order.  (optional, default to expenditure_date)
     * @param sortNullsLast Toggle that sorts null values last (optional, default to false)
     * @param page For paginating through results, starting at page 1 (optional, default to 1)
     * @param committeeId  A unique identifier assigned to each committee or filer registered with the FEC. In general committee id&#39;s begin with the letter C which is followed by eight digits.  (optional)
     * @param imageNumber  An unique identifier for each page where the electronic or paper filing is reported.  (optional)
     * @param maxDate Maximum date (optional)
     * @param maxAmount Filter for all amounts less than a value. (optional)
     * @return SchedulesScheduleFGetDefaultResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public SchedulesScheduleFGetDefaultResponse schedulesScheduleFGet(String apiKey, LocalDate minDate, String maxImageNumber, List<Integer> cycle, String minImageNumber, Boolean sortNullOnly, List<String> payeeName, String minAmount, Integer perPage, List<String> candidateId, Boolean sortHideNull, String lineNumber, String sort, Boolean sortNullsLast, Integer page, List<String> committeeId, List<String> imageNumber, LocalDate maxDate, String maxAmount) throws ApiException {
        ApiResponse<SchedulesScheduleFGetDefaultResponse> localVarResp = schedulesScheduleFGetWithHttpInfo(apiKey, minDate, maxImageNumber, cycle, minImageNumber, sortNullOnly, payeeName, minAmount, perPage, candidateId, sortHideNull, lineNumber, sort, sortNullsLast, page, committeeId, imageNumber, maxDate, maxAmount);
        return localVarResp.getData();
    }

    /**
     * 
     *  Schedule F, it shows all special expenditures a national or state party committee makes in connection with the general election campaigns of federal candidates.  These coordinated party expenditures do not count against the contribution limits but are subject to other limits, these limits are detailed in Chapter 7 of the FEC Campaign Guide for Political Party Committees. 
     * @param apiKey  API key for https://api.data.gov. Get one at https://api.data.gov/signup.  (required)
     * @param minDate Minimum date (optional)
     * @param maxImageNumber Maxium image number of the page where the schedule item is reported (optional)
     * @param cycle  Filter records to only those that were applicable to a given two-year period.The cycle begins with an odd year and is named for its ending, even year.  (optional)
     * @param minImageNumber Minium image number of the page where the schedule item is reported (optional)
     * @param sortNullOnly Toggle that filters out all rows having sort column that is non-null (optional, default to false)
     * @param payeeName  (optional)
     * @param minAmount Filter for all amounts greater than a value. (optional)
     * @param perPage The number of results returned per page. Defaults to 20. (optional, default to 20)
     * @param candidateId  A unique identifier assigned to each candidate registered with the FEC. If a person runs for several offices, that person will have separate candidate IDs for each office. First character indicates office - [P]residential, [H]ouse, [S]enate]. Second character is the last digit of the two-year period the ID was created. Third and fourth is the candidate state. Presidential IDs don&#39;t have state. Fifth and sixth is the district when the candidate first ran. This does not change if the candidate/member&#39;s district changes during re-districting. Presidential IDs don&#39;t have districts. The rest is sequence.  (optional)
     * @param sortHideNull Hide null values on sorted column(s). (optional, default to false)
     * @param lineNumber Filter for form and line number using the following format: &#x60;FORM-LINENUMBER&#x60;.  For example an argument such as &#x60;F3X-16&#x60; would filter down to all entries from form &#x60;F3X&#x60; line number &#x60;16&#x60;. (optional)
     * @param sort Provide a field to sort by. Use &#x60;-&#x60; for descending order.  (optional, default to expenditure_date)
     * @param sortNullsLast Toggle that sorts null values last (optional, default to false)
     * @param page For paginating through results, starting at page 1 (optional, default to 1)
     * @param committeeId  A unique identifier assigned to each committee or filer registered with the FEC. In general committee id&#39;s begin with the letter C which is followed by eight digits.  (optional)
     * @param imageNumber  An unique identifier for each page where the electronic or paper filing is reported.  (optional)
     * @param maxDate Maximum date (optional)
     * @param maxAmount Filter for all amounts less than a value. (optional)
     * @return ApiResponse&lt;SchedulesScheduleFGetDefaultResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SchedulesScheduleFGetDefaultResponse> schedulesScheduleFGetWithHttpInfo(String apiKey, LocalDate minDate, String maxImageNumber, List<Integer> cycle, String minImageNumber, Boolean sortNullOnly, List<String> payeeName, String minAmount, Integer perPage, List<String> candidateId, Boolean sortHideNull, String lineNumber, String sort, Boolean sortNullsLast, Integer page, List<String> committeeId, List<String> imageNumber, LocalDate maxDate, String maxAmount) throws ApiException {
        okhttp3.Call localVarCall = schedulesScheduleFGetValidateBeforeCall(apiKey, minDate, maxImageNumber, cycle, minImageNumber, sortNullOnly, payeeName, minAmount, perPage, candidateId, sortHideNull, lineNumber, sort, sortNullsLast, page, committeeId, imageNumber, maxDate, maxAmount, null);
        Type localVarReturnType = new TypeToken<SchedulesScheduleFGetDefaultResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     *  Schedule F, it shows all special expenditures a national or state party committee makes in connection with the general election campaigns of federal candidates.  These coordinated party expenditures do not count against the contribution limits but are subject to other limits, these limits are detailed in Chapter 7 of the FEC Campaign Guide for Political Party Committees. 
     * @param apiKey  API key for https://api.data.gov. Get one at https://api.data.gov/signup.  (required)
     * @param minDate Minimum date (optional)
     * @param maxImageNumber Maxium image number of the page where the schedule item is reported (optional)
     * @param cycle  Filter records to only those that were applicable to a given two-year period.The cycle begins with an odd year and is named for its ending, even year.  (optional)
     * @param minImageNumber Minium image number of the page where the schedule item is reported (optional)
     * @param sortNullOnly Toggle that filters out all rows having sort column that is non-null (optional, default to false)
     * @param payeeName  (optional)
     * @param minAmount Filter for all amounts greater than a value. (optional)
     * @param perPage The number of results returned per page. Defaults to 20. (optional, default to 20)
     * @param candidateId  A unique identifier assigned to each candidate registered with the FEC. If a person runs for several offices, that person will have separate candidate IDs for each office. First character indicates office - [P]residential, [H]ouse, [S]enate]. Second character is the last digit of the two-year period the ID was created. Third and fourth is the candidate state. Presidential IDs don&#39;t have state. Fifth and sixth is the district when the candidate first ran. This does not change if the candidate/member&#39;s district changes during re-districting. Presidential IDs don&#39;t have districts. The rest is sequence.  (optional)
     * @param sortHideNull Hide null values on sorted column(s). (optional, default to false)
     * @param lineNumber Filter for form and line number using the following format: &#x60;FORM-LINENUMBER&#x60;.  For example an argument such as &#x60;F3X-16&#x60; would filter down to all entries from form &#x60;F3X&#x60; line number &#x60;16&#x60;. (optional)
     * @param sort Provide a field to sort by. Use &#x60;-&#x60; for descending order.  (optional, default to expenditure_date)
     * @param sortNullsLast Toggle that sorts null values last (optional, default to false)
     * @param page For paginating through results, starting at page 1 (optional, default to 1)
     * @param committeeId  A unique identifier assigned to each committee or filer registered with the FEC. In general committee id&#39;s begin with the letter C which is followed by eight digits.  (optional)
     * @param imageNumber  An unique identifier for each page where the electronic or paper filing is reported.  (optional)
     * @param maxDate Maximum date (optional)
     * @param maxAmount Filter for all amounts less than a value. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call schedulesScheduleFGetAsync(String apiKey, LocalDate minDate, String maxImageNumber, List<Integer> cycle, String minImageNumber, Boolean sortNullOnly, List<String> payeeName, String minAmount, Integer perPage, List<String> candidateId, Boolean sortHideNull, String lineNumber, String sort, Boolean sortNullsLast, Integer page, List<String> committeeId, List<String> imageNumber, LocalDate maxDate, String maxAmount, final ApiCallback<SchedulesScheduleFGetDefaultResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = schedulesScheduleFGetValidateBeforeCall(apiKey, minDate, maxImageNumber, cycle, minImageNumber, sortNullOnly, payeeName, minAmount, perPage, candidateId, sortHideNull, lineNumber, sort, sortNullsLast, page, committeeId, imageNumber, maxDate, maxAmount, _callback);
        Type localVarReturnType = new TypeToken<SchedulesScheduleFGetDefaultResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for schedulesScheduleFSubIdGet
     * @param apiKey  API key for https://api.data.gov. Get one at https://api.data.gov/signup.  (required)
     * @param subId  (required)
     * @param page For paginating through results, starting at page 1 (optional, default to 1)
     * @param perPage The number of results returned per page. Defaults to 20. (optional, default to 20)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call schedulesScheduleFSubIdGetCall(String apiKey, String subId, Integer page, Integer perPage, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/schedules/schedule_f/{sub_id}/"
            .replace("{" + "sub_id" + "}", localVarApiClient.escapeString(subId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (apiKey != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api_key", apiKey));
        }

        if (perPage != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("per_page", perPage));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKeyHeaderAuth", "ApiKeyQueryAuth", "apiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call schedulesScheduleFSubIdGetValidateBeforeCall(String apiKey, String subId, Integer page, Integer perPage, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'apiKey' is set
        if (apiKey == null) {
            throw new ApiException("Missing the required parameter 'apiKey' when calling schedulesScheduleFSubIdGet(Async)");
        }

        // verify the required parameter 'subId' is set
        if (subId == null) {
            throw new ApiException("Missing the required parameter 'subId' when calling schedulesScheduleFSubIdGet(Async)");
        }

        return schedulesScheduleFSubIdGetCall(apiKey, subId, page, perPage, _callback);

    }

    /**
     * 
     *  Schedule F, it shows all special expenditures a national or state party committee makes in connection with the general election campaigns of federal candidates.  These coordinated party expenditures do not count against the contribution limits but are subject to other limits, these limits are detailed in Chapter 7 of the FEC Campaign Guide for Political Party Committees. 
     * @param apiKey  API key for https://api.data.gov. Get one at https://api.data.gov/signup.  (required)
     * @param subId  (required)
     * @param page For paginating through results, starting at page 1 (optional, default to 1)
     * @param perPage The number of results returned per page. Defaults to 20. (optional, default to 20)
     * @return SchedulesScheduleFGetDefaultResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public SchedulesScheduleFGetDefaultResponse schedulesScheduleFSubIdGet(String apiKey, String subId, Integer page, Integer perPage) throws ApiException {
        ApiResponse<SchedulesScheduleFGetDefaultResponse> localVarResp = schedulesScheduleFSubIdGetWithHttpInfo(apiKey, subId, page, perPage);
        return localVarResp.getData();
    }

    /**
     * 
     *  Schedule F, it shows all special expenditures a national or state party committee makes in connection with the general election campaigns of federal candidates.  These coordinated party expenditures do not count against the contribution limits but are subject to other limits, these limits are detailed in Chapter 7 of the FEC Campaign Guide for Political Party Committees. 
     * @param apiKey  API key for https://api.data.gov. Get one at https://api.data.gov/signup.  (required)
     * @param subId  (required)
     * @param page For paginating through results, starting at page 1 (optional, default to 1)
     * @param perPage The number of results returned per page. Defaults to 20. (optional, default to 20)
     * @return ApiResponse&lt;SchedulesScheduleFGetDefaultResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SchedulesScheduleFGetDefaultResponse> schedulesScheduleFSubIdGetWithHttpInfo(String apiKey, String subId, Integer page, Integer perPage) throws ApiException {
        okhttp3.Call localVarCall = schedulesScheduleFSubIdGetValidateBeforeCall(apiKey, subId, page, perPage, null);
        Type localVarReturnType = new TypeToken<SchedulesScheduleFGetDefaultResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     *  Schedule F, it shows all special expenditures a national or state party committee makes in connection with the general election campaigns of federal candidates.  These coordinated party expenditures do not count against the contribution limits but are subject to other limits, these limits are detailed in Chapter 7 of the FEC Campaign Guide for Political Party Committees. 
     * @param apiKey  API key for https://api.data.gov. Get one at https://api.data.gov/signup.  (required)
     * @param subId  (required)
     * @param page For paginating through results, starting at page 1 (optional, default to 1)
     * @param perPage The number of results returned per page. Defaults to 20. (optional, default to 20)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call schedulesScheduleFSubIdGetAsync(String apiKey, String subId, Integer page, Integer perPage, final ApiCallback<SchedulesScheduleFGetDefaultResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = schedulesScheduleFSubIdGetValidateBeforeCall(apiKey, subId, page, perPage, _callback);
        Type localVarReturnType = new TypeToken<SchedulesScheduleFGetDefaultResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
