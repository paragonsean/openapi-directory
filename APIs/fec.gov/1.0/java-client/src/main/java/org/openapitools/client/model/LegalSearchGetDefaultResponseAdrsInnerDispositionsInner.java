/*
 * OpenFEC
 * This application programming interface (API) allows you to explore the way candidates and committees fund their campaigns.    The Federal Election Commission (FEC) API is a RESTful web service supporting full-text and field-specific searches on FEC data. [Bulk downloads](https://www.fec.gov/data/advanced/?tab=bulk-data) are available on the current site. Information is tied to the underlying forms by file ID and image ID. Data is updated nightly.    There are a lot of data, and a good place to start is to use search to find interesting candidates and committees. Then, you can use their IDs to find report or line item details with the other endpoints. If you are interested in individual donors, check out contributor information in the `/schedule_a/` endpoints.    <b class=\"body\" id=\"getting_started_head\">Getting started with the openFEC API</b><br>    If you would like to use the FEC's API programmatically, you can sign up for your own API key using our form. Alternatively, you can still try out our API without an API key by using the web interface and using DEMO_KEY. Note that when you use the openFEC API you are subject to the [Terms of Service](https://github.com/fecgov/FEC/blob/master/TERMS-OF-SERVICE.md) and [Acceptable Use policy](https://github.com/fecgov/FEC/blob/master/ACCEPTABLE-USE-POLICY.md).    Signing up for an API key will enable you to place up to 1,000 calls an hour. Each call is limited to 100 results per page. You can email questions, comments or a request to get a key for 7,200 calls an hour (120 calls per minute) to <a href=\"mailto:APIinfo@fec.gov\">APIinfo@fec.gov</a>. You can also ask questions and discuss the data in a community led [group](https://groups.google.com/forum/#!forum/fec-data).    The model definitions and schema are available at [/swagger](/swagger/). This is useful for making wrappers and exploring the data.    A few restrictions limit the way you can use FEC data. For example, you canâ€™t use contributor lists for commercial purposes or to solicit donations. [Learn more here](https://www.fec.gov/updates/sale-or-use-contributor-information/).    [Inspect our source code](https://github.com/fecgov/openFEC). We welcome issues and pull requests!    <p><br></p> <h2 class=\"title\" id=\"signup_head\">Sign up for an API key</h2> <div id=\"apidatagov_signup\">Loading signup form...</div>
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.math.BigDecimal;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.LegalSearchGetDefaultResponseAdrsInnerDispositionsInnerCitationsInner;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * LegalSearchGetDefaultResponseAdrsInnerDispositionsInner
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:02:12.812386-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class LegalSearchGetDefaultResponseAdrsInnerDispositionsInner {
  public static final String SERIALIZED_NAME_CITATIONS = "citations";
  @SerializedName(SERIALIZED_NAME_CITATIONS)
  private List<LegalSearchGetDefaultResponseAdrsInnerDispositionsInnerCitationsInner> citations = new ArrayList<>();

  public static final String SERIALIZED_NAME_DISPOSITION = "disposition";
  @SerializedName(SERIALIZED_NAME_DISPOSITION)
  private String disposition;

  public static final String SERIALIZED_NAME_PENALTY = "penalty";
  @SerializedName(SERIALIZED_NAME_PENALTY)
  private BigDecimal penalty;

  public static final String SERIALIZED_NAME_RESPONDENT = "respondent";
  @SerializedName(SERIALIZED_NAME_RESPONDENT)
  private String respondent;

  public LegalSearchGetDefaultResponseAdrsInnerDispositionsInner() {
  }

  public LegalSearchGetDefaultResponseAdrsInnerDispositionsInner citations(List<LegalSearchGetDefaultResponseAdrsInnerDispositionsInnerCitationsInner> citations) {
    this.citations = citations;
    return this;
  }

  public LegalSearchGetDefaultResponseAdrsInnerDispositionsInner addCitationsItem(LegalSearchGetDefaultResponseAdrsInnerDispositionsInnerCitationsInner citationsItem) {
    if (this.citations == null) {
      this.citations = new ArrayList<>();
    }
    this.citations.add(citationsItem);
    return this;
  }

  /**
   * Get citations
   * @return citations
   */
  @javax.annotation.Nullable
  public List<LegalSearchGetDefaultResponseAdrsInnerDispositionsInnerCitationsInner> getCitations() {
    return citations;
  }

  public void setCitations(List<LegalSearchGetDefaultResponseAdrsInnerDispositionsInnerCitationsInner> citations) {
    this.citations = citations;
  }


  public LegalSearchGetDefaultResponseAdrsInnerDispositionsInner disposition(String disposition) {
    this.disposition = disposition;
    return this;
  }

  /**
   * Get disposition
   * @return disposition
   */
  @javax.annotation.Nullable
  public String getDisposition() {
    return disposition;
  }

  public void setDisposition(String disposition) {
    this.disposition = disposition;
  }


  public LegalSearchGetDefaultResponseAdrsInnerDispositionsInner penalty(BigDecimal penalty) {
    this.penalty = penalty;
    return this;
  }

  /**
   * Get penalty
   * @return penalty
   */
  @javax.annotation.Nullable
  public BigDecimal getPenalty() {
    return penalty;
  }

  public void setPenalty(BigDecimal penalty) {
    this.penalty = penalty;
  }


  public LegalSearchGetDefaultResponseAdrsInnerDispositionsInner respondent(String respondent) {
    this.respondent = respondent;
    return this;
  }

  /**
   * Get respondent
   * @return respondent
   */
  @javax.annotation.Nullable
  public String getRespondent() {
    return respondent;
  }

  public void setRespondent(String respondent) {
    this.respondent = respondent;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    LegalSearchGetDefaultResponseAdrsInnerDispositionsInner legalSearchGetDefaultResponseAdrsInnerDispositionsInner = (LegalSearchGetDefaultResponseAdrsInnerDispositionsInner) o;
    return Objects.equals(this.citations, legalSearchGetDefaultResponseAdrsInnerDispositionsInner.citations) &&
        Objects.equals(this.disposition, legalSearchGetDefaultResponseAdrsInnerDispositionsInner.disposition) &&
        Objects.equals(this.penalty, legalSearchGetDefaultResponseAdrsInnerDispositionsInner.penalty) &&
        Objects.equals(this.respondent, legalSearchGetDefaultResponseAdrsInnerDispositionsInner.respondent);
  }

  @Override
  public int hashCode() {
    return Objects.hash(citations, disposition, penalty, respondent);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class LegalSearchGetDefaultResponseAdrsInnerDispositionsInner {\n");
    sb.append("    citations: ").append(toIndentedString(citations)).append("\n");
    sb.append("    disposition: ").append(toIndentedString(disposition)).append("\n");
    sb.append("    penalty: ").append(toIndentedString(penalty)).append("\n");
    sb.append("    respondent: ").append(toIndentedString(respondent)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("citations");
    openapiFields.add("disposition");
    openapiFields.add("penalty");
    openapiFields.add("respondent");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to LegalSearchGetDefaultResponseAdrsInnerDispositionsInner
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!LegalSearchGetDefaultResponseAdrsInnerDispositionsInner.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in LegalSearchGetDefaultResponseAdrsInnerDispositionsInner is not found in the empty JSON string", LegalSearchGetDefaultResponseAdrsInnerDispositionsInner.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!LegalSearchGetDefaultResponseAdrsInnerDispositionsInner.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `LegalSearchGetDefaultResponseAdrsInnerDispositionsInner` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (jsonObj.get("citations") != null && !jsonObj.get("citations").isJsonNull()) {
        JsonArray jsonArraycitations = jsonObj.getAsJsonArray("citations");
        if (jsonArraycitations != null) {
          // ensure the json data is an array
          if (!jsonObj.get("citations").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `citations` to be an array in the JSON string but got `%s`", jsonObj.get("citations").toString()));
          }

          // validate the optional field `citations` (array)
          for (int i = 0; i < jsonArraycitations.size(); i++) {
            LegalSearchGetDefaultResponseAdrsInnerDispositionsInnerCitationsInner.validateJsonElement(jsonArraycitations.get(i));
          };
        }
      }
      if ((jsonObj.get("disposition") != null && !jsonObj.get("disposition").isJsonNull()) && !jsonObj.get("disposition").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `disposition` to be a primitive type in the JSON string but got `%s`", jsonObj.get("disposition").toString()));
      }
      if ((jsonObj.get("respondent") != null && !jsonObj.get("respondent").isJsonNull()) && !jsonObj.get("respondent").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `respondent` to be a primitive type in the JSON string but got `%s`", jsonObj.get("respondent").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!LegalSearchGetDefaultResponseAdrsInnerDispositionsInner.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'LegalSearchGetDefaultResponseAdrsInnerDispositionsInner' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<LegalSearchGetDefaultResponseAdrsInnerDispositionsInner> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(LegalSearchGetDefaultResponseAdrsInnerDispositionsInner.class));

       return (TypeAdapter<T>) new TypeAdapter<LegalSearchGetDefaultResponseAdrsInnerDispositionsInner>() {
           @Override
           public void write(JsonWriter out, LegalSearchGetDefaultResponseAdrsInnerDispositionsInner value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public LegalSearchGetDefaultResponseAdrsInnerDispositionsInner read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of LegalSearchGetDefaultResponseAdrsInnerDispositionsInner given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of LegalSearchGetDefaultResponseAdrsInnerDispositionsInner
   * @throws IOException if the JSON string is invalid with respect to LegalSearchGetDefaultResponseAdrsInnerDispositionsInner
   */
  public static LegalSearchGetDefaultResponseAdrsInnerDispositionsInner fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, LegalSearchGetDefaultResponseAdrsInnerDispositionsInner.class);
  }

  /**
   * Convert an instance of LegalSearchGetDefaultResponseAdrsInnerDispositionsInner to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

