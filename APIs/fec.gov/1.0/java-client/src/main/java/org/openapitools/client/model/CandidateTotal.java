/*
 * OpenFEC
 * This application programming interface (API) allows you to explore the way candidates and committees fund their campaigns.    The Federal Election Commission (FEC) API is a RESTful web service supporting full-text and field-specific searches on FEC data. [Bulk downloads](https://www.fec.gov/data/advanced/?tab=bulk-data) are available on the current site. Information is tied to the underlying forms by file ID and image ID. Data is updated nightly.    There are a lot of data, and a good place to start is to use search to find interesting candidates and committees. Then, you can use their IDs to find report or line item details with the other endpoints. If you are interested in individual donors, check out contributor information in the `/schedule_a/` endpoints.    <b class=\"body\" id=\"getting_started_head\">Getting started with the openFEC API</b><br>    If you would like to use the FEC's API programmatically, you can sign up for your own API key using our form. Alternatively, you can still try out our API without an API key by using the web interface and using DEMO_KEY. Note that when you use the openFEC API you are subject to the [Terms of Service](https://github.com/fecgov/FEC/blob/master/TERMS-OF-SERVICE.md) and [Acceptable Use policy](https://github.com/fecgov/FEC/blob/master/ACCEPTABLE-USE-POLICY.md).    Signing up for an API key will enable you to place up to 1,000 calls an hour. Each call is limited to 100 results per page. You can email questions, comments or a request to get a key for 7,200 calls an hour (120 calls per minute) to <a href=\"mailto:APIinfo@fec.gov\">APIinfo@fec.gov</a>. You can also ask questions and discuss the data in a community led [group](https://groups.google.com/forum/#!forum/fec-data).    The model definitions and schema are available at [/swagger](/swagger/). This is useful for making wrappers and exploring the data.    A few restrictions limit the way you can use FEC data. For example, you canâ€™t use contributor lists for commercial purposes or to solicit donations. [Learn more here](https://www.fec.gov/updates/sale-or-use-contributor-information/).    [Inspect our source code](https://github.com/fecgov/openFEC). We welcome issues and pull requests!    <p><br></p> <h2 class=\"title\" id=\"signup_head\">Sign up for an API key</h2> <div id=\"apidatagov_signup\">Loading signup form...</div>
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.math.BigDecimal;
import java.time.LocalDate;
import java.util.Arrays;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * CandidateTotal
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:02:12.812386-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class CandidateTotal {
  public static final String SERIALIZED_NAME_CANDIDATE_ID = "candidate_id";
  @SerializedName(SERIALIZED_NAME_CANDIDATE_ID)
  private String candidateId;

  public static final String SERIALIZED_NAME_CANDIDATE_INACTIVE = "candidate_inactive";
  @SerializedName(SERIALIZED_NAME_CANDIDATE_INACTIVE)
  private Boolean candidateInactive;

  public static final String SERIALIZED_NAME_CASH_ON_HAND_END_PERIOD = "cash_on_hand_end_period";
  @SerializedName(SERIALIZED_NAME_CASH_ON_HAND_END_PERIOD)
  private BigDecimal cashOnHandEndPeriod;

  public static final String SERIALIZED_NAME_COVERAGE_END_DATE = "coverage_end_date";
  @SerializedName(SERIALIZED_NAME_COVERAGE_END_DATE)
  private LocalDate coverageEndDate;

  public static final String SERIALIZED_NAME_COVERAGE_START_DATE = "coverage_start_date";
  @SerializedName(SERIALIZED_NAME_COVERAGE_START_DATE)
  private LocalDate coverageStartDate;

  public static final String SERIALIZED_NAME_CYCLE = "cycle";
  @SerializedName(SERIALIZED_NAME_CYCLE)
  private Integer cycle;

  public static final String SERIALIZED_NAME_DEBTS_OWED_BY_COMMITTEE = "debts_owed_by_committee";
  @SerializedName(SERIALIZED_NAME_DEBTS_OWED_BY_COMMITTEE)
  private BigDecimal debtsOwedByCommittee;

  public static final String SERIALIZED_NAME_DISBURSEMENTS = "disbursements";
  @SerializedName(SERIALIZED_NAME_DISBURSEMENTS)
  private BigDecimal disbursements;

  public static final String SERIALIZED_NAME_DISTRICT = "district";
  @SerializedName(SERIALIZED_NAME_DISTRICT)
  private String district;

  public static final String SERIALIZED_NAME_DISTRICT_NUMBER = "district_number";
  @SerializedName(SERIALIZED_NAME_DISTRICT_NUMBER)
  private Integer districtNumber;

  public static final String SERIALIZED_NAME_ELECTION_YEAR = "election_year";
  @SerializedName(SERIALIZED_NAME_ELECTION_YEAR)
  private Integer electionYear;

  public static final String SERIALIZED_NAME_FEDERAL_FUNDS_FLAG = "federal_funds_flag";
  @SerializedName(SERIALIZED_NAME_FEDERAL_FUNDS_FLAG)
  private Boolean federalFundsFlag;

  public static final String SERIALIZED_NAME_HAS_RAISED_FUNDS = "has_raised_funds";
  @SerializedName(SERIALIZED_NAME_HAS_RAISED_FUNDS)
  private Boolean hasRaisedFunds;

  public static final String SERIALIZED_NAME_INDIVIDUAL_ITEMIZED_CONTRIBUTIONS = "individual_itemized_contributions";
  @SerializedName(SERIALIZED_NAME_INDIVIDUAL_ITEMIZED_CONTRIBUTIONS)
  private BigDecimal individualItemizedContributions;

  public static final String SERIALIZED_NAME_IS_ELECTION = "is_election";
  @SerializedName(SERIALIZED_NAME_IS_ELECTION)
  private Boolean isElection;

  public static final String SERIALIZED_NAME_OFFICE = "office";
  @SerializedName(SERIALIZED_NAME_OFFICE)
  private String office;

  public static final String SERIALIZED_NAME_OTHER_POLITICAL_COMMITTEE_CONTRIBUTIONS = "other_political_committee_contributions";
  @SerializedName(SERIALIZED_NAME_OTHER_POLITICAL_COMMITTEE_CONTRIBUTIONS)
  private BigDecimal otherPoliticalCommitteeContributions;

  public static final String SERIALIZED_NAME_PARTY = "party";
  @SerializedName(SERIALIZED_NAME_PARTY)
  private String party;

  public static final String SERIALIZED_NAME_RECEIPTS = "receipts";
  @SerializedName(SERIALIZED_NAME_RECEIPTS)
  private BigDecimal receipts;

  public static final String SERIALIZED_NAME_STATE = "state";
  @SerializedName(SERIALIZED_NAME_STATE)
  private String state;

  public static final String SERIALIZED_NAME_STATE_FULL = "state_full";
  @SerializedName(SERIALIZED_NAME_STATE_FULL)
  private String stateFull;

  public static final String SERIALIZED_NAME_TRANSFERS_FROM_OTHER_AUTHORIZED_COMMITTEE = "transfers_from_other_authorized_committee";
  @SerializedName(SERIALIZED_NAME_TRANSFERS_FROM_OTHER_AUTHORIZED_COMMITTEE)
  private BigDecimal transfersFromOtherAuthorizedCommittee;

  public CandidateTotal() {
  }

  public CandidateTotal candidateId(String candidateId) {
    this.candidateId = candidateId;
    return this;
  }

  /**
   *  A unique identifier assigned to each candidate registered with the FEC. If a person runs for several offices, that person will have separate candidate IDs for each office. First character indicates office - [P]residential, [H]ouse, [S]enate]. Second character is the last digit of the two-year period the ID was created. Third and fourth is the candidate state. Presidential IDs don&#39;t have state. Fifth and sixth is the district when the candidate first ran. This does not change if the candidate/member&#39;s district changes during re-districting. Presidential IDs don&#39;t have districts. The rest is sequence. 
   * @return candidateId
   */
  @javax.annotation.Nonnull
  public String getCandidateId() {
    return candidateId;
  }

  public void setCandidateId(String candidateId) {
    this.candidateId = candidateId;
  }


  public CandidateTotal candidateInactive(Boolean candidateInactive) {
    this.candidateInactive = candidateInactive;
    return this;
  }

  /**
   *  True indicates that a candidate is inactive. 
   * @return candidateInactive
   */
  @javax.annotation.Nullable
  public Boolean getCandidateInactive() {
    return candidateInactive;
  }

  public void setCandidateInactive(Boolean candidateInactive) {
    this.candidateInactive = candidateInactive;
  }


  public CandidateTotal cashOnHandEndPeriod(BigDecimal cashOnHandEndPeriod) {
    this.cashOnHandEndPeriod = cashOnHandEndPeriod;
    return this;
  }

  /**
   * Ending cash balance on the most recent filing
   * @return cashOnHandEndPeriod
   */
  @javax.annotation.Nullable
  public BigDecimal getCashOnHandEndPeriod() {
    return cashOnHandEndPeriod;
  }

  public void setCashOnHandEndPeriod(BigDecimal cashOnHandEndPeriod) {
    this.cashOnHandEndPeriod = cashOnHandEndPeriod;
  }


  public CandidateTotal coverageEndDate(LocalDate coverageEndDate) {
    this.coverageEndDate = coverageEndDate;
    return this;
  }

  /**
   * Ending date of the reporting period
   * @return coverageEndDate
   */
  @javax.annotation.Nullable
  public LocalDate getCoverageEndDate() {
    return coverageEndDate;
  }

  public void setCoverageEndDate(LocalDate coverageEndDate) {
    this.coverageEndDate = coverageEndDate;
  }


  public CandidateTotal coverageStartDate(LocalDate coverageStartDate) {
    this.coverageStartDate = coverageStartDate;
    return this;
  }

  /**
   * Beginning date of the reporting period
   * @return coverageStartDate
   */
  @javax.annotation.Nullable
  public LocalDate getCoverageStartDate() {
    return coverageStartDate;
  }

  public void setCoverageStartDate(LocalDate coverageStartDate) {
    this.coverageStartDate = coverageStartDate;
  }


  public CandidateTotal cycle(Integer cycle) {
    this.cycle = cycle;
    return this;
  }

  /**
   *  Filter records to only those that are applicable to a given two-year period. This cycle follows the traditional House election cycle and subdivides the presidential and Senate elections into comparable two-year blocks. The cycle begins with an odd year and is named for its ending, even year. 
   * @return cycle
   */
  @javax.annotation.Nonnull
  public Integer getCycle() {
    return cycle;
  }

  public void setCycle(Integer cycle) {
    this.cycle = cycle;
  }


  public CandidateTotal debtsOwedByCommittee(BigDecimal debtsOwedByCommittee) {
    this.debtsOwedByCommittee = debtsOwedByCommittee;
    return this;
  }

  /**
   * Debts owed by the committee
   * @return debtsOwedByCommittee
   */
  @javax.annotation.Nullable
  public BigDecimal getDebtsOwedByCommittee() {
    return debtsOwedByCommittee;
  }

  public void setDebtsOwedByCommittee(BigDecimal debtsOwedByCommittee) {
    this.debtsOwedByCommittee = debtsOwedByCommittee;
  }


  public CandidateTotal disbursements(BigDecimal disbursements) {
    this.disbursements = disbursements;
    return this;
  }

  /**
   * Get disbursements
   * @return disbursements
   */
  @javax.annotation.Nullable
  public BigDecimal getDisbursements() {
    return disbursements;
  }

  public void setDisbursements(BigDecimal disbursements) {
    this.disbursements = disbursements;
  }


  public CandidateTotal district(String district) {
    this.district = district;
    return this;
  }

  /**
   * Two-digit US House distirict of the office the candidate is running for. Presidential, Senate and House at-large candidates will have District 00.
   * @return district
   */
  @javax.annotation.Nullable
  public String getDistrict() {
    return district;
  }

  public void setDistrict(String district) {
    this.district = district;
  }


  public CandidateTotal districtNumber(Integer districtNumber) {
    this.districtNumber = districtNumber;
    return this;
  }

  /**
   * Two-digit US House distirict of the office the candidate is running for. Presidential, Senate and House at-large candidates will have District 00.
   * @return districtNumber
   */
  @javax.annotation.Nullable
  public Integer getDistrictNumber() {
    return districtNumber;
  }

  public void setDistrictNumber(Integer districtNumber) {
    this.districtNumber = districtNumber;
  }


  public CandidateTotal electionYear(Integer electionYear) {
    this.electionYear = electionYear;
    return this;
  }

  /**
   * Year of election
   * @return electionYear
   */
  @javax.annotation.Nullable
  public Integer getElectionYear() {
    return electionYear;
  }

  public void setElectionYear(Integer electionYear) {
    this.electionYear = electionYear;
  }


  public CandidateTotal federalFundsFlag(Boolean federalFundsFlag) {
    this.federalFundsFlag = federalFundsFlag;
    return this;
  }

  /**
   * A boolean the describes if a presidential candidate has accepted federal funds. The flag will be false for House and Senate candidates.
   * @return federalFundsFlag
   */
  @javax.annotation.Nullable
  public Boolean getFederalFundsFlag() {
    return federalFundsFlag;
  }

  public void setFederalFundsFlag(Boolean federalFundsFlag) {
    this.federalFundsFlag = federalFundsFlag;
  }


  public CandidateTotal hasRaisedFunds(Boolean hasRaisedFunds) {
    this.hasRaisedFunds = hasRaisedFunds;
    return this;
  }

  /**
   * A boolean that describes if a candidate&#39;s committee has ever received any receipts for their campaign for this particular office. (Candidates have separate candidate IDs for each office.)
   * @return hasRaisedFunds
   */
  @javax.annotation.Nullable
  public Boolean getHasRaisedFunds() {
    return hasRaisedFunds;
  }

  public void setHasRaisedFunds(Boolean hasRaisedFunds) {
    this.hasRaisedFunds = hasRaisedFunds;
  }


  public CandidateTotal individualItemizedContributions(BigDecimal individualItemizedContributions) {
    this.individualItemizedContributions = individualItemizedContributions;
    return this;
  }

  /**
   * Individual itemized contributions are from individuals whose aggregate contributions total over $200 per individual per year. Be aware, some filers choose to itemize donations $200 or less.
   * @return individualItemizedContributions
   */
  @javax.annotation.Nullable
  public BigDecimal getIndividualItemizedContributions() {
    return individualItemizedContributions;
  }

  public void setIndividualItemizedContributions(BigDecimal individualItemizedContributions) {
    this.individualItemizedContributions = individualItemizedContributions;
  }


  public CandidateTotal isElection(Boolean isElection) {
    this.isElection = isElection;
    return this;
  }

  /**
   * Get isElection
   * @return isElection
   */
  @javax.annotation.Nonnull
  public Boolean getIsElection() {
    return isElection;
  }

  public void setIsElection(Boolean isElection) {
    this.isElection = isElection;
  }


  public CandidateTotal office(String office) {
    this.office = office;
    return this;
  }

  /**
   * Federal office candidate runs for: H, S or P
   * @return office
   */
  @javax.annotation.Nullable
  public String getOffice() {
    return office;
  }

  public void setOffice(String office) {
    this.office = office;
  }


  public CandidateTotal otherPoliticalCommitteeContributions(BigDecimal otherPoliticalCommitteeContributions) {
    this.otherPoliticalCommitteeContributions = otherPoliticalCommitteeContributions;
    return this;
  }

  /**
   * Other committees contributions
   * @return otherPoliticalCommitteeContributions
   */
  @javax.annotation.Nullable
  public BigDecimal getOtherPoliticalCommitteeContributions() {
    return otherPoliticalCommitteeContributions;
  }

  public void setOtherPoliticalCommitteeContributions(BigDecimal otherPoliticalCommitteeContributions) {
    this.otherPoliticalCommitteeContributions = otherPoliticalCommitteeContributions;
  }


  public CandidateTotal party(String party) {
    this.party = party;
    return this;
  }

  /**
   * Three-letter code for the party affiliated with a candidate or committee. For example, DEM for Democratic Party and REP for Republican Party.
   * @return party
   */
  @javax.annotation.Nullable
  public String getParty() {
    return party;
  }

  public void setParty(String party) {
    this.party = party;
  }


  public CandidateTotal receipts(BigDecimal receipts) {
    this.receipts = receipts;
    return this;
  }

  /**
   * Get receipts
   * @return receipts
   */
  @javax.annotation.Nullable
  public BigDecimal getReceipts() {
    return receipts;
  }

  public void setReceipts(BigDecimal receipts) {
    this.receipts = receipts;
  }


  public CandidateTotal state(String state) {
    this.state = state;
    return this;
  }

  /**
   * US state or territory where a candidate runs for office
   * @return state
   */
  @javax.annotation.Nullable
  public String getState() {
    return state;
  }

  public void setState(String state) {
    this.state = state;
  }


  public CandidateTotal stateFull(String stateFull) {
    this.stateFull = stateFull;
    return this;
  }

  /**
   * US state or territory where a candidate runs for office
   * @return stateFull
   */
  @javax.annotation.Nullable
  public String getStateFull() {
    return stateFull;
  }

  public void setStateFull(String stateFull) {
    this.stateFull = stateFull;
  }


  public CandidateTotal transfersFromOtherAuthorizedCommittee(BigDecimal transfersFromOtherAuthorizedCommittee) {
    this.transfersFromOtherAuthorizedCommittee = transfersFromOtherAuthorizedCommittee;
    return this;
  }

  /**
   * Transfers from authorized committees
   * @return transfersFromOtherAuthorizedCommittee
   */
  @javax.annotation.Nullable
  public BigDecimal getTransfersFromOtherAuthorizedCommittee() {
    return transfersFromOtherAuthorizedCommittee;
  }

  public void setTransfersFromOtherAuthorizedCommittee(BigDecimal transfersFromOtherAuthorizedCommittee) {
    this.transfersFromOtherAuthorizedCommittee = transfersFromOtherAuthorizedCommittee;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CandidateTotal candidateTotal = (CandidateTotal) o;
    return Objects.equals(this.candidateId, candidateTotal.candidateId) &&
        Objects.equals(this.candidateInactive, candidateTotal.candidateInactive) &&
        Objects.equals(this.cashOnHandEndPeriod, candidateTotal.cashOnHandEndPeriod) &&
        Objects.equals(this.coverageEndDate, candidateTotal.coverageEndDate) &&
        Objects.equals(this.coverageStartDate, candidateTotal.coverageStartDate) &&
        Objects.equals(this.cycle, candidateTotal.cycle) &&
        Objects.equals(this.debtsOwedByCommittee, candidateTotal.debtsOwedByCommittee) &&
        Objects.equals(this.disbursements, candidateTotal.disbursements) &&
        Objects.equals(this.district, candidateTotal.district) &&
        Objects.equals(this.districtNumber, candidateTotal.districtNumber) &&
        Objects.equals(this.electionYear, candidateTotal.electionYear) &&
        Objects.equals(this.federalFundsFlag, candidateTotal.federalFundsFlag) &&
        Objects.equals(this.hasRaisedFunds, candidateTotal.hasRaisedFunds) &&
        Objects.equals(this.individualItemizedContributions, candidateTotal.individualItemizedContributions) &&
        Objects.equals(this.isElection, candidateTotal.isElection) &&
        Objects.equals(this.office, candidateTotal.office) &&
        Objects.equals(this.otherPoliticalCommitteeContributions, candidateTotal.otherPoliticalCommitteeContributions) &&
        Objects.equals(this.party, candidateTotal.party) &&
        Objects.equals(this.receipts, candidateTotal.receipts) &&
        Objects.equals(this.state, candidateTotal.state) &&
        Objects.equals(this.stateFull, candidateTotal.stateFull) &&
        Objects.equals(this.transfersFromOtherAuthorizedCommittee, candidateTotal.transfersFromOtherAuthorizedCommittee);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(candidateId, candidateInactive, cashOnHandEndPeriod, coverageEndDate, coverageStartDate, cycle, debtsOwedByCommittee, disbursements, district, districtNumber, electionYear, federalFundsFlag, hasRaisedFunds, individualItemizedContributions, isElection, office, otherPoliticalCommitteeContributions, party, receipts, state, stateFull, transfersFromOtherAuthorizedCommittee);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CandidateTotal {\n");
    sb.append("    candidateId: ").append(toIndentedString(candidateId)).append("\n");
    sb.append("    candidateInactive: ").append(toIndentedString(candidateInactive)).append("\n");
    sb.append("    cashOnHandEndPeriod: ").append(toIndentedString(cashOnHandEndPeriod)).append("\n");
    sb.append("    coverageEndDate: ").append(toIndentedString(coverageEndDate)).append("\n");
    sb.append("    coverageStartDate: ").append(toIndentedString(coverageStartDate)).append("\n");
    sb.append("    cycle: ").append(toIndentedString(cycle)).append("\n");
    sb.append("    debtsOwedByCommittee: ").append(toIndentedString(debtsOwedByCommittee)).append("\n");
    sb.append("    disbursements: ").append(toIndentedString(disbursements)).append("\n");
    sb.append("    district: ").append(toIndentedString(district)).append("\n");
    sb.append("    districtNumber: ").append(toIndentedString(districtNumber)).append("\n");
    sb.append("    electionYear: ").append(toIndentedString(electionYear)).append("\n");
    sb.append("    federalFundsFlag: ").append(toIndentedString(federalFundsFlag)).append("\n");
    sb.append("    hasRaisedFunds: ").append(toIndentedString(hasRaisedFunds)).append("\n");
    sb.append("    individualItemizedContributions: ").append(toIndentedString(individualItemizedContributions)).append("\n");
    sb.append("    isElection: ").append(toIndentedString(isElection)).append("\n");
    sb.append("    office: ").append(toIndentedString(office)).append("\n");
    sb.append("    otherPoliticalCommitteeContributions: ").append(toIndentedString(otherPoliticalCommitteeContributions)).append("\n");
    sb.append("    party: ").append(toIndentedString(party)).append("\n");
    sb.append("    receipts: ").append(toIndentedString(receipts)).append("\n");
    sb.append("    state: ").append(toIndentedString(state)).append("\n");
    sb.append("    stateFull: ").append(toIndentedString(stateFull)).append("\n");
    sb.append("    transfersFromOtherAuthorizedCommittee: ").append(toIndentedString(transfersFromOtherAuthorizedCommittee)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("candidate_id");
    openapiFields.add("candidate_inactive");
    openapiFields.add("cash_on_hand_end_period");
    openapiFields.add("coverage_end_date");
    openapiFields.add("coverage_start_date");
    openapiFields.add("cycle");
    openapiFields.add("debts_owed_by_committee");
    openapiFields.add("disbursements");
    openapiFields.add("district");
    openapiFields.add("district_number");
    openapiFields.add("election_year");
    openapiFields.add("federal_funds_flag");
    openapiFields.add("has_raised_funds");
    openapiFields.add("individual_itemized_contributions");
    openapiFields.add("is_election");
    openapiFields.add("office");
    openapiFields.add("other_political_committee_contributions");
    openapiFields.add("party");
    openapiFields.add("receipts");
    openapiFields.add("state");
    openapiFields.add("state_full");
    openapiFields.add("transfers_from_other_authorized_committee");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("candidate_id");
    openapiRequiredFields.add("cycle");
    openapiRequiredFields.add("is_election");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to CandidateTotal
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!CandidateTotal.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CandidateTotal is not found in the empty JSON string", CandidateTotal.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!CandidateTotal.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CandidateTotal` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : CandidateTotal.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("candidate_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `candidate_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("candidate_id").toString()));
      }
      if ((jsonObj.get("district") != null && !jsonObj.get("district").isJsonNull()) && !jsonObj.get("district").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `district` to be a primitive type in the JSON string but got `%s`", jsonObj.get("district").toString()));
      }
      if ((jsonObj.get("office") != null && !jsonObj.get("office").isJsonNull()) && !jsonObj.get("office").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `office` to be a primitive type in the JSON string but got `%s`", jsonObj.get("office").toString()));
      }
      if ((jsonObj.get("party") != null && !jsonObj.get("party").isJsonNull()) && !jsonObj.get("party").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `party` to be a primitive type in the JSON string but got `%s`", jsonObj.get("party").toString()));
      }
      if ((jsonObj.get("state") != null && !jsonObj.get("state").isJsonNull()) && !jsonObj.get("state").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `state` to be a primitive type in the JSON string but got `%s`", jsonObj.get("state").toString()));
      }
      if ((jsonObj.get("state_full") != null && !jsonObj.get("state_full").isJsonNull()) && !jsonObj.get("state_full").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `state_full` to be a primitive type in the JSON string but got `%s`", jsonObj.get("state_full").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CandidateTotal.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CandidateTotal' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CandidateTotal> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CandidateTotal.class));

       return (TypeAdapter<T>) new TypeAdapter<CandidateTotal>() {
           @Override
           public void write(JsonWriter out, CandidateTotal value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CandidateTotal read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of CandidateTotal given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of CandidateTotal
   * @throws IOException if the JSON string is invalid with respect to CandidateTotal
   */
  public static CandidateTotal fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CandidateTotal.class);
  }

  /**
   * Convert an instance of CandidateTotal to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

