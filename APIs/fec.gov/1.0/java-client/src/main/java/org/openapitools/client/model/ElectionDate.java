/*
 * OpenFEC
 * This application programming interface (API) allows you to explore the way candidates and committees fund their campaigns.    The Federal Election Commission (FEC) API is a RESTful web service supporting full-text and field-specific searches on FEC data. [Bulk downloads](https://www.fec.gov/data/advanced/?tab=bulk-data) are available on the current site. Information is tied to the underlying forms by file ID and image ID. Data is updated nightly.    There are a lot of data, and a good place to start is to use search to find interesting candidates and committees. Then, you can use their IDs to find report or line item details with the other endpoints. If you are interested in individual donors, check out contributor information in the `/schedule_a/` endpoints.    <b class=\"body\" id=\"getting_started_head\">Getting started with the openFEC API</b><br>    If you would like to use the FEC's API programmatically, you can sign up for your own API key using our form. Alternatively, you can still try out our API without an API key by using the web interface and using DEMO_KEY. Note that when you use the openFEC API you are subject to the [Terms of Service](https://github.com/fecgov/FEC/blob/master/TERMS-OF-SERVICE.md) and [Acceptable Use policy](https://github.com/fecgov/FEC/blob/master/ACCEPTABLE-USE-POLICY.md).    Signing up for an API key will enable you to place up to 1,000 calls an hour. Each call is limited to 100 results per page. You can email questions, comments or a request to get a key for 7,200 calls an hour (120 calls per minute) to <a href=\"mailto:APIinfo@fec.gov\">APIinfo@fec.gov</a>. You can also ask questions and discuss the data in a community led [group](https://groups.google.com/forum/#!forum/fec-data).    The model definitions and schema are available at [/swagger](/swagger/). This is useful for making wrappers and exploring the data.    A few restrictions limit the way you can use FEC data. For example, you canâ€™t use contributor lists for commercial purposes or to solicit donations. [Learn more here](https://www.fec.gov/updates/sale-or-use-contributor-information/).    [Inspect our source code](https://github.com/fecgov/openFEC). We welcome issues and pull requests!    <p><br></p> <h2 class=\"title\" id=\"signup_head\">Sign up for an API key</h2> <div id=\"apidatagov_signup\">Loading signup form...</div>
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.LocalDate;
import java.time.OffsetDateTime;
import java.util.Arrays;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * ElectionDate
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:02:12.812386-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ElectionDate {
  public static final String SERIALIZED_NAME_ACTIVE_ELECTION = "active_election";
  @SerializedName(SERIALIZED_NAME_ACTIVE_ELECTION)
  private Boolean activeElection;

  public static final String SERIALIZED_NAME_CREATE_DATE = "create_date";
  @SerializedName(SERIALIZED_NAME_CREATE_DATE)
  private OffsetDateTime createDate;

  public static final String SERIALIZED_NAME_ELECTION_DATE = "election_date";
  @SerializedName(SERIALIZED_NAME_ELECTION_DATE)
  private LocalDate electionDate;

  public static final String SERIALIZED_NAME_ELECTION_DISTRICT = "election_district";
  @SerializedName(SERIALIZED_NAME_ELECTION_DISTRICT)
  private Integer electionDistrict;

  public static final String SERIALIZED_NAME_ELECTION_NOTES = "election_notes";
  @SerializedName(SERIALIZED_NAME_ELECTION_NOTES)
  private String electionNotes;

  public static final String SERIALIZED_NAME_ELECTION_PARTY = "election_party";
  @SerializedName(SERIALIZED_NAME_ELECTION_PARTY)
  private String electionParty;

  public static final String SERIALIZED_NAME_ELECTION_STATE = "election_state";
  @SerializedName(SERIALIZED_NAME_ELECTION_STATE)
  private String electionState;

  public static final String SERIALIZED_NAME_ELECTION_TYPE_FULL = "election_type_full";
  @SerializedName(SERIALIZED_NAME_ELECTION_TYPE_FULL)
  private String electionTypeFull;

  public static final String SERIALIZED_NAME_ELECTION_TYPE_ID = "election_type_id";
  @SerializedName(SERIALIZED_NAME_ELECTION_TYPE_ID)
  private String electionTypeId;

  public static final String SERIALIZED_NAME_ELECTION_YEAR = "election_year";
  @SerializedName(SERIALIZED_NAME_ELECTION_YEAR)
  private Integer electionYear;

  public static final String SERIALIZED_NAME_OFFICE_SOUGHT = "office_sought";
  @SerializedName(SERIALIZED_NAME_OFFICE_SOUGHT)
  private String officeSought;

  public static final String SERIALIZED_NAME_PRIMARY_GENERAL_DATE = "primary_general_date";
  @SerializedName(SERIALIZED_NAME_PRIMARY_GENERAL_DATE)
  private LocalDate primaryGeneralDate;

  public static final String SERIALIZED_NAME_UPDATE_DATE = "update_date";
  @SerializedName(SERIALIZED_NAME_UPDATE_DATE)
  private OffsetDateTime updateDate;

  public ElectionDate() {
  }

  public ElectionDate activeElection(Boolean activeElection) {
    this.activeElection = activeElection;
    return this;
  }

  /**
   * Get activeElection
   * @return activeElection
   */
  @javax.annotation.Nullable
  public Boolean getActiveElection() {
    return activeElection;
  }

  public void setActiveElection(Boolean activeElection) {
    this.activeElection = activeElection;
  }


  public ElectionDate createDate(OffsetDateTime createDate) {
    this.createDate = createDate;
    return this;
  }

  /**
   * Date the record was created
   * @return createDate
   */
  @javax.annotation.Nullable
  public OffsetDateTime getCreateDate() {
    return createDate;
  }

  public void setCreateDate(OffsetDateTime createDate) {
    this.createDate = createDate;
  }


  public ElectionDate electionDate(LocalDate electionDate) {
    this.electionDate = electionDate;
    return this;
  }

  /**
   * Date of election
   * @return electionDate
   */
  @javax.annotation.Nullable
  public LocalDate getElectionDate() {
    return electionDate;
  }

  public void setElectionDate(LocalDate electionDate) {
    this.electionDate = electionDate;
  }


  public ElectionDate electionDistrict(Integer electionDistrict) {
    this.electionDistrict = electionDistrict;
    return this;
  }

  /**
   * Two-digit US House distirict of the office the candidate is running for. Presidential, Senate and House at-large candidates will have District 00.
   * @return electionDistrict
   */
  @javax.annotation.Nullable
  public Integer getElectionDistrict() {
    return electionDistrict;
  }

  public void setElectionDistrict(Integer electionDistrict) {
    this.electionDistrict = electionDistrict;
  }


  public ElectionDate electionNotes(String electionNotes) {
    this.electionNotes = electionNotes;
    return this;
  }

  /**
   * Get electionNotes
   * @return electionNotes
   */
  @javax.annotation.Nullable
  public String getElectionNotes() {
    return electionNotes;
  }

  public void setElectionNotes(String electionNotes) {
    this.electionNotes = electionNotes;
  }


  public ElectionDate electionParty(String electionParty) {
    this.electionParty = electionParty;
    return this;
  }

  /**
   * Three-letter code for the party affiliated with a candidate or committee. For example, DEM for Democratic Party and REP for Republican Party.
   * @return electionParty
   */
  @javax.annotation.Nullable
  public String getElectionParty() {
    return electionParty;
  }

  public void setElectionParty(String electionParty) {
    this.electionParty = electionParty;
  }


  public ElectionDate electionState(String electionState) {
    this.electionState = electionState;
    return this;
  }

  /**
   * US state or territory where a candidate runs for office
   * @return electionState
   */
  @javax.annotation.Nullable
  public String getElectionState() {
    return electionState;
  }

  public void setElectionState(String electionState) {
    this.electionState = electionState;
  }


  public ElectionDate electionTypeFull(String electionTypeFull) {
    this.electionTypeFull = electionTypeFull;
    return this;
  }

  /**
   * Get electionTypeFull
   * @return electionTypeFull
   */
  @javax.annotation.Nullable
  public String getElectionTypeFull() {
    return electionTypeFull;
  }

  public void setElectionTypeFull(String electionTypeFull) {
    this.electionTypeFull = electionTypeFull;
  }


  public ElectionDate electionTypeId(String electionTypeId) {
    this.electionTypeId = electionTypeId;
    return this;
  }

  /**
   * Election type  Convention, Primary, General, Special, Runoff etc. 
   * @return electionTypeId
   */
  @javax.annotation.Nullable
  public String getElectionTypeId() {
    return electionTypeId;
  }

  public void setElectionTypeId(String electionTypeId) {
    this.electionTypeId = electionTypeId;
  }


  public ElectionDate electionYear(Integer electionYear) {
    this.electionYear = electionYear;
    return this;
  }

  /**
   * Year of election
   * @return electionYear
   */
  @javax.annotation.Nullable
  public Integer getElectionYear() {
    return electionYear;
  }

  public void setElectionYear(Integer electionYear) {
    this.electionYear = electionYear;
  }


  public ElectionDate officeSought(String officeSought) {
    this.officeSought = officeSought;
    return this;
  }

  /**
   * Federal office candidate runs for: H, S or P
   * @return officeSought
   */
  @javax.annotation.Nullable
  public String getOfficeSought() {
    return officeSought;
  }

  public void setOfficeSought(String officeSought) {
    this.officeSought = officeSought;
  }


  public ElectionDate primaryGeneralDate(LocalDate primaryGeneralDate) {
    this.primaryGeneralDate = primaryGeneralDate;
    return this;
  }

  /**
   * Get primaryGeneralDate
   * @return primaryGeneralDate
   */
  @javax.annotation.Nullable
  public LocalDate getPrimaryGeneralDate() {
    return primaryGeneralDate;
  }

  public void setPrimaryGeneralDate(LocalDate primaryGeneralDate) {
    this.primaryGeneralDate = primaryGeneralDate;
  }


  public ElectionDate updateDate(OffsetDateTime updateDate) {
    this.updateDate = updateDate;
    return this;
  }

  /**
   * Date the record was updated
   * @return updateDate
   */
  @javax.annotation.Nullable
  public OffsetDateTime getUpdateDate() {
    return updateDate;
  }

  public void setUpdateDate(OffsetDateTime updateDate) {
    this.updateDate = updateDate;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ElectionDate electionDate = (ElectionDate) o;
    return Objects.equals(this.activeElection, electionDate.activeElection) &&
        Objects.equals(this.createDate, electionDate.createDate) &&
        Objects.equals(this.electionDate, electionDate.electionDate) &&
        Objects.equals(this.electionDistrict, electionDate.electionDistrict) &&
        Objects.equals(this.electionNotes, electionDate.electionNotes) &&
        Objects.equals(this.electionParty, electionDate.electionParty) &&
        Objects.equals(this.electionState, electionDate.electionState) &&
        Objects.equals(this.electionTypeFull, electionDate.electionTypeFull) &&
        Objects.equals(this.electionTypeId, electionDate.electionTypeId) &&
        Objects.equals(this.electionYear, electionDate.electionYear) &&
        Objects.equals(this.officeSought, electionDate.officeSought) &&
        Objects.equals(this.primaryGeneralDate, electionDate.primaryGeneralDate) &&
        Objects.equals(this.updateDate, electionDate.updateDate);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(activeElection, createDate, electionDate, electionDistrict, electionNotes, electionParty, electionState, electionTypeFull, electionTypeId, electionYear, officeSought, primaryGeneralDate, updateDate);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ElectionDate {\n");
    sb.append("    activeElection: ").append(toIndentedString(activeElection)).append("\n");
    sb.append("    createDate: ").append(toIndentedString(createDate)).append("\n");
    sb.append("    electionDate: ").append(toIndentedString(electionDate)).append("\n");
    sb.append("    electionDistrict: ").append(toIndentedString(electionDistrict)).append("\n");
    sb.append("    electionNotes: ").append(toIndentedString(electionNotes)).append("\n");
    sb.append("    electionParty: ").append(toIndentedString(electionParty)).append("\n");
    sb.append("    electionState: ").append(toIndentedString(electionState)).append("\n");
    sb.append("    electionTypeFull: ").append(toIndentedString(electionTypeFull)).append("\n");
    sb.append("    electionTypeId: ").append(toIndentedString(electionTypeId)).append("\n");
    sb.append("    electionYear: ").append(toIndentedString(electionYear)).append("\n");
    sb.append("    officeSought: ").append(toIndentedString(officeSought)).append("\n");
    sb.append("    primaryGeneralDate: ").append(toIndentedString(primaryGeneralDate)).append("\n");
    sb.append("    updateDate: ").append(toIndentedString(updateDate)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("active_election");
    openapiFields.add("create_date");
    openapiFields.add("election_date");
    openapiFields.add("election_district");
    openapiFields.add("election_notes");
    openapiFields.add("election_party");
    openapiFields.add("election_state");
    openapiFields.add("election_type_full");
    openapiFields.add("election_type_id");
    openapiFields.add("election_year");
    openapiFields.add("office_sought");
    openapiFields.add("primary_general_date");
    openapiFields.add("update_date");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ElectionDate
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ElectionDate.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ElectionDate is not found in the empty JSON string", ElectionDate.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ElectionDate.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ElectionDate` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("election_notes") != null && !jsonObj.get("election_notes").isJsonNull()) && !jsonObj.get("election_notes").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `election_notes` to be a primitive type in the JSON string but got `%s`", jsonObj.get("election_notes").toString()));
      }
      if ((jsonObj.get("election_party") != null && !jsonObj.get("election_party").isJsonNull()) && !jsonObj.get("election_party").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `election_party` to be a primitive type in the JSON string but got `%s`", jsonObj.get("election_party").toString()));
      }
      if ((jsonObj.get("election_state") != null && !jsonObj.get("election_state").isJsonNull()) && !jsonObj.get("election_state").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `election_state` to be a primitive type in the JSON string but got `%s`", jsonObj.get("election_state").toString()));
      }
      if ((jsonObj.get("election_type_full") != null && !jsonObj.get("election_type_full").isJsonNull()) && !jsonObj.get("election_type_full").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `election_type_full` to be a primitive type in the JSON string but got `%s`", jsonObj.get("election_type_full").toString()));
      }
      if ((jsonObj.get("election_type_id") != null && !jsonObj.get("election_type_id").isJsonNull()) && !jsonObj.get("election_type_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `election_type_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("election_type_id").toString()));
      }
      if ((jsonObj.get("office_sought") != null && !jsonObj.get("office_sought").isJsonNull()) && !jsonObj.get("office_sought").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `office_sought` to be a primitive type in the JSON string but got `%s`", jsonObj.get("office_sought").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ElectionDate.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ElectionDate' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ElectionDate> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ElectionDate.class));

       return (TypeAdapter<T>) new TypeAdapter<ElectionDate>() {
           @Override
           public void write(JsonWriter out, ElectionDate value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ElectionDate read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ElectionDate given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ElectionDate
   * @throws IOException if the JSON string is invalid with respect to ElectionDate
   */
  public static ElectionDate fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ElectionDate.class);
  }

  /**
   * Convert an instance of ElectionDate to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

