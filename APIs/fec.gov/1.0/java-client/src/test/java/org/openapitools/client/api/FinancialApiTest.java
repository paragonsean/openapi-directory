/*
 * OpenFEC
 * This application programming interface (API) allows you to explore the way candidates and committees fund their campaigns.    The Federal Election Commission (FEC) API is a RESTful web service supporting full-text and field-specific searches on FEC data. [Bulk downloads](https://www.fec.gov/data/advanced/?tab=bulk-data) are available on the current site. Information is tied to the underlying forms by file ID and image ID. Data is updated nightly.    There are a lot of data, and a good place to start is to use search to find interesting candidates and committees. Then, you can use their IDs to find report or line item details with the other endpoints. If you are interested in individual donors, check out contributor information in the `/schedule_a/` endpoints.    <b class=\"body\" id=\"getting_started_head\">Getting started with the openFEC API</b><br>    If you would like to use the FEC's API programmatically, you can sign up for your own API key using our form. Alternatively, you can still try out our API without an API key by using the web interface and using DEMO_KEY. Note that when you use the openFEC API you are subject to the [Terms of Service](https://github.com/fecgov/FEC/blob/master/TERMS-OF-SERVICE.md) and [Acceptable Use policy](https://github.com/fecgov/FEC/blob/master/ACCEPTABLE-USE-POLICY.md).    Signing up for an API key will enable you to place up to 1,000 calls an hour. Each call is limited to 100 results per page. You can email questions, comments or a request to get a key for 7,200 calls an hour (120 calls per minute) to <a href=\"mailto:APIinfo@fec.gov\">APIinfo@fec.gov</a>. You can also ask questions and discuss the data in a community led [group](https://groups.google.com/forum/#!forum/fec-data).    The model definitions and schema are available at [/swagger](/swagger/). This is useful for making wrappers and exploring the data.    A few restrictions limit the way you can use FEC data. For example, you can’t use contributor lists for commercial purposes or to solicit donations. [Learn more here](https://www.fec.gov/updates/sale-or-use-contributor-information/).    [Inspect our source code](https://github.com/fecgov/openFEC). We welcome issues and pull requests!    <p><br></p> <h2 class=\"title\" id=\"signup_head\">Sign up for an API key</h2> <div id=\"apidatagov_signup\">Loading signup form...</div>
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.CommitteeReportsPage;
import org.openapitools.client.model.CommitteeTotalsPage;
import org.openapitools.client.model.ElectionPage;
import org.openapitools.client.model.ElectionSummary;
import org.openapitools.client.model.ElectionsListPage;
import org.openapitools.client.model.EntityReceiptDisbursementTotalsPage;
import org.openapitools.client.model.InauguralDonationsPage;
import java.time.LocalDate;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for FinancialApi
 */
@Disabled
public class FinancialApiTest {

    private final FinancialApi api = new FinancialApi();

    /**
     *  Each report represents the summary information from Form 3, Form 3X and Form 3P. These reports have key statistics that illuminate the financial status of a given committee. Things like cash on hand, debts owed by committee, total receipts, and total disbursements are especially helpful for understanding a committee&#39;s financial dealings.  By default, this endpoint includes both amended and final versions of each report. To restrict to only the final versions of each report, use &#x60;is_amended&#x3D;false&#x60;; to retrieve only reports that have been amended, use &#x60;is_amended&#x3D;true&#x60;.  Several different reporting structures exist, depending on the type of organization that submits financial information. To see an example of these reporting requirements, look at the summary and detailed summary pages of Form 3, Form 3X, and Form 3P.  DISCLAIMER: The field labels contained within this resource are subject to change.  We are attempting to succinctly label these fields while conveying clear meaning to ensure accessibility for all users. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void committeeCommitteeIdReportsGetTest() throws ApiException {
        String apiKey = null;
        String committeeId = null;
        String minPartyCoordinatedExpenditures = null;
        Boolean isAmended = null;
        String maxPartyCoordinatedExpenditures = null;
        String maxCashOnHandEndPeriodAmount = null;
        String maxDisbursementsAmount = null;
        String maxDebtsOwedExpenditures = null;
        String minReceiptsAmount = null;
        List<Integer> cycle = null;
        Boolean sortNullOnly = null;
        String minDebtsOwedAmount = null;
        Boolean sortHideNull = null;
        String candidateId = null;
        String minIndependentExpenditures = null;
        Integer perPage = null;
        List<String> sort = null;
        String maxReceiptsAmount = null;
        List<String> reportType = null;
        String maxTotalContributions = null;
        Boolean sortNullsLast = null;
        Integer page = null;
        List<Integer> year = null;
        String maxIndependentExpenditures = null;
        List<String> type = null;
        String minCashOnHandEndPeriodAmount = null;
        String minDisbursementsAmount = null;
        String minTotalContributions = null;
        List<String> beginningImageNumber = null;
        CommitteeReportsPage response = api.committeeCommitteeIdReportsGet(apiKey, committeeId, minPartyCoordinatedExpenditures, isAmended, maxPartyCoordinatedExpenditures, maxCashOnHandEndPeriodAmount, maxDisbursementsAmount, maxDebtsOwedExpenditures, minReceiptsAmount, cycle, sortNullOnly, minDebtsOwedAmount, sortHideNull, candidateId, minIndependentExpenditures, perPage, sort, maxReceiptsAmount, reportType, maxTotalContributions, sortNullsLast, page, year, maxIndependentExpenditures, type, minCashOnHandEndPeriodAmount, minDisbursementsAmount, minTotalContributions, beginningImageNumber);
        // TODO: test validations
    }

    /**
     *  This endpoint provides information about a committee&#39;s Form 3, Form 3X, or Form 3P financial reports, which are aggregated by two-year period. We refer to two-year periods as a &#x60;cycle&#x60;.  The cycle is named after the even-numbered year and includes the year before it. To obtain totals from 2013 and 2014, you would use 2014. In odd-numbered years, the current cycle is the next year — for example, in 2015, the current cycle is 2016.  For presidential and Senate candidates, multiple two-year cycles exist between elections.  
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void committeeCommitteeIdTotalsGetTest() throws ApiException {
        String apiKey = null;
        String committeeId = null;
        Integer page = null;
        Boolean sortHideNull = null;
        Integer perPage = null;
        Boolean sortNullsLast = null;
        String sort = null;
        List<Integer> cycle = null;
        Boolean sortNullOnly = null;
        CommitteeTotalsPage response = api.committeeCommitteeIdTotalsGet(apiKey, committeeId, page, sortHideNull, perPage, sortNullsLast, sort, cycle, sortNullOnly);
        // TODO: test validations
    }

    /**
     *  Look at the top-level financial information for all candidates running for the same office.  Choose a 2-year cycle, and &#x60;house&#x60;, &#x60;senate&#x60; or &#x60;presidential&#x60;.  If you are looking for a Senate seat, you will need to select the state using a two-letter abbreviation.  House races require state and a two-digit district number.  Since this endpoint reflects financial information, it will only have candidates once they file financial reporting forms. Query the &#x60;/candidates&#x60; endpoint to retrieve an-up-to-date list of all the candidates that filed to run for a particular seat. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void electionsGetTest() throws ApiException {
        String apiKey = null;
        Integer cycle = null;
        String office = null;
        String district = null;
        Boolean electionFull = null;
        Boolean sortNullOnly = null;
        Integer page = null;
        String state = null;
        Boolean sortNullsLast = null;
        Boolean sortHideNull = null;
        Integer perPage = null;
        String sort = null;
        ElectionPage response = api.electionsGet(apiKey, cycle, office, district, electionFull, sortNullOnly, page, state, sortNullsLast, sortHideNull, perPage, sort);
        // TODO: test validations
    }

    /**
     *  List elections by cycle, office, state, and district. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void electionsSearchGetTest() throws ApiException {
        String apiKey = null;
        List<Integer> zip = null;
        List<String> district = null;
        List<Integer> cycle = null;
        Boolean sortNullOnly = null;
        Boolean sortNullsLast = null;
        Integer page = null;
        List<String> state = null;
        Boolean sortHideNull = null;
        Integer perPage = null;
        List<String> office = null;
        List<String> sort = null;
        ElectionsListPage response = api.electionsSearchGet(apiKey, zip, district, cycle, sortNullOnly, sortNullsLast, page, state, sortHideNull, perPage, office, sort);
        // TODO: test validations
    }

    /**
     *  List elections by cycle, office, state, and district. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void electionsSummaryGetTest() throws ApiException {
        String apiKey = null;
        String office = null;
        Integer cycle = null;
        String state = null;
        String district = null;
        Boolean electionFull = null;
        ElectionSummary response = api.electionsSummaryGet(apiKey, office, cycle, state, district, electionFull);
        // TODO: test validations
    }

    /**
     *  Each report represents the summary information from Form 3, Form 3X and Form 3P. These reports have key statistics that illuminate the financial status of a given committee. Things like cash on hand, debts owed by committee, total receipts, and total disbursements are especially helpful for understanding a committee&#39;s financial dealings.  By default, this endpoint includes both amended and final versions of each report. To restrict to only the final versions of each report, use &#x60;is_amended&#x3D;false&#x60;; to retrieve only reports that have been amended, use &#x60;is_amended&#x3D;true&#x60;.  Several different reporting structures exist, depending on the type of organization that submits financial information. To see an example of these reporting requirements, look at the summary and detailed summary pages of Form 3, Form 3X, and Form 3P.  DISCLAIMER: The field labels contained within this resource are subject to change.  We are attempting to succinctly label these fields while conveying clear meaning to ensure accessibility for all users. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void reportsEntityTypeGetTest() throws ApiException {
        String apiKey = null;
        String entityType = null;
        String maxPartyCoordinatedExpenditures = null;
        String maxDebtsOwedExpenditures = null;
        String minReceiptsAmount = null;
        String minDebtsOwedAmount = null;
        LocalDate maxReceiptDate = null;
        Boolean sortHideNull = null;
        String candidateId = null;
        List<String> sort = null;
        List<String> qSpender = null;
        String maxReceiptsAmount = null;
        String filerType = null;
        List<String> reportType = null;
        String maxTotalContributions = null;
        Boolean sortNullsLast = null;
        String maxIndependentExpenditures = null;
        String minTotalContributions = null;
        String minPartyCoordinatedExpenditures = null;
        List<String> beginningImageNumber = null;
        LocalDate minReceiptDate = null;
        Boolean isAmended = null;
        String maxDisbursementsAmount = null;
        String maxCashOnHandEndPeriodAmount = null;
        List<String> amendmentIndicator = null;
        List<Integer> cycle = null;
        Boolean sortNullOnly = null;
        String minIndependentExpenditures = null;
        Integer perPage = null;
        List<String> qFiler = null;
        List<String> committeeType = null;
        Integer page = null;
        List<Integer> year = null;
        List<String> committeeId = null;
        String minCashOnHandEndPeriodAmount = null;
        String minDisbursementsAmount = null;
        Boolean mostRecent = null;
        CommitteeReportsPage response = api.reportsEntityTypeGet(apiKey, entityType, maxPartyCoordinatedExpenditures, maxDebtsOwedExpenditures, minReceiptsAmount, minDebtsOwedAmount, maxReceiptDate, sortHideNull, candidateId, sort, qSpender, maxReceiptsAmount, filerType, reportType, maxTotalContributions, sortNullsLast, maxIndependentExpenditures, minTotalContributions, minPartyCoordinatedExpenditures, beginningImageNumber, minReceiptDate, isAmended, maxDisbursementsAmount, maxCashOnHandEndPeriodAmount, amendmentIndicator, cycle, sortNullOnly, minIndependentExpenditures, perPage, qFiler, committeeType, page, year, committeeId, minCashOnHandEndPeriodAmount, minDisbursementsAmount, mostRecent);
        // TODO: test validations
    }

    /**
     *  Provides cumulative receipt totals by entity type, over a two year cycle. Totals are adjusted to avoid double counting.  This is [the sql](https://github.com/fecgov/openFEC/blob/develop/data/migrations/V41__large_aggregates.sql) that creates these calculations. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void totalsByEntityGetTest() throws ApiException {
        String apiKey = null;
        Integer cycle = null;
        Integer page = null;
        Boolean sortHideNull = null;
        Integer perPage = null;
        Boolean sortNullOnly = null;
        String sort = null;
        Boolean sortNullsLast = null;
        EntityReceiptDisbursementTotalsPage response = api.totalsByEntityGet(apiKey, cycle, page, sortHideNull, perPage, sortNullOnly, sort, sortNullsLast);
        // TODO: test validations
    }

    /**
     *  This endpoint provides information about a committee&#39;s Form 3, Form 3X, or Form 3P financial reports, which are aggregated by two-year period. We refer to two-year periods as a &#x60;cycle&#x60;.  The cycle is named after the even-numbered year and includes the year before it. To obtain totals from 2013 and 2014, you would use 2014. In odd-numbered years, the current cycle is the next year — for example, in 2015, the current cycle is 2016.  For presidential and Senate candidates, multiple two-year cycles exist between elections.  
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void totalsEntityTypeGetTest() throws ApiException {
        String apiKey = null;
        String entityType = null;
        List<String> treasurerName = null;
        String maxDisbursements = null;
        List<String> committeeState = null;
        List<Integer> cycle = null;
        Boolean sortNullOnly = null;
        List<String> sponsorCandidateId = null;
        String minDisbursements = null;
        String minLastCashOnHandEndPeriod = null;
        String maxLastCashOnHandEndPeriod = null;
        Boolean sortHideNull = null;
        Integer perPage = null;
        List<String> filingFrequency = null;
        String sort = null;
        String maxLastDebtsOwedByCommittee = null;
        LocalDate minFirstF1Date = null;
        List<String> committeeDesignation = null;
        String maxReceipts = null;
        List<String> committeeType = null;
        Boolean sortNullsLast = null;
        Integer page = null;
        List<String> committeeId = null;
        String minLastDebtsOwedByCommittee = null;
        LocalDate maxFirstF1Date = null;
        List<String> organizationType = null;
        String minReceipts = null;
        CommitteeTotalsPage response = api.totalsEntityTypeGet(apiKey, entityType, treasurerName, maxDisbursements, committeeState, cycle, sortNullOnly, sponsorCandidateId, minDisbursements, minLastCashOnHandEndPeriod, maxLastCashOnHandEndPeriod, sortHideNull, perPage, filingFrequency, sort, maxLastDebtsOwedByCommittee, minFirstF1Date, committeeDesignation, maxReceipts, committeeType, sortNullsLast, page, committeeId, minLastDebtsOwedByCommittee, maxFirstF1Date, organizationType, minReceipts);
        // TODO: test validations
    }

    /**
     *  This endpoint provides information about an inaugural committee&#39;s Form 13 report of donations accepted. The data is aggregated by the contributor and the two-year period. We refer to two-year periods as a &#x60;cycle&#x60;.  
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void totalsInauguralCommitteesByContributorGetTest() throws ApiException {
        String apiKey = null;
        List<Integer> cycle = null;
        Boolean sortNullsLast = null;
        Integer page = null;
        List<String> committeeId = null;
        Boolean sortNullOnly = null;
        List<String> contributorName = null;
        Boolean sortHideNull = null;
        Integer perPage = null;
        List<String> sort = null;
        InauguralDonationsPage response = api.totalsInauguralCommitteesByContributorGet(apiKey, cycle, sortNullsLast, page, committeeId, sortNullOnly, contributorName, sortHideNull, perPage, sort);
        // TODO: test validations
    }

}
