/*
 * OpenFEC
 * This application programming interface (API) allows you to explore the way candidates and committees fund their campaigns.    The Federal Election Commission (FEC) API is a RESTful web service supporting full-text and field-specific searches on FEC data. [Bulk downloads](https://www.fec.gov/data/advanced/?tab=bulk-data) are available on the current site. Information is tied to the underlying forms by file ID and image ID. Data is updated nightly.    There are a lot of data, and a good place to start is to use search to find interesting candidates and committees. Then, you can use their IDs to find report or line item details with the other endpoints. If you are interested in individual donors, check out contributor information in the `/schedule_a/` endpoints.    <b class=\"body\" id=\"getting_started_head\">Getting started with the openFEC API</b><br>    If you would like to use the FEC's API programmatically, you can sign up for your own API key using our form. Alternatively, you can still try out our API without an API key by using the web interface and using DEMO_KEY. Note that when you use the openFEC API you are subject to the [Terms of Service](https://github.com/fecgov/FEC/blob/master/TERMS-OF-SERVICE.md) and [Acceptable Use policy](https://github.com/fecgov/FEC/blob/master/ACCEPTABLE-USE-POLICY.md).    Signing up for an API key will enable you to place up to 1,000 calls an hour. Each call is limited to 100 results per page. You can email questions, comments or a request to get a key for 7,200 calls an hour (120 calls per minute) to <a href=\"mailto:APIinfo@fec.gov\">APIinfo@fec.gov</a>. You can also ask questions and discuss the data in a community led [group](https://groups.google.com/forum/#!forum/fec-data).    The model definitions and schema are available at [/swagger](/swagger/). This is useful for making wrappers and exploring the data.    A few restrictions limit the way you can use FEC data. For example, you can’t use contributor lists for commercial purposes or to solicit donations. [Learn more here](https://www.fec.gov/updates/sale-or-use-contributor-information/).    [Inspect our source code](https://github.com/fecgov/openFEC). We welcome issues and pull requests!    <p><br></p> <h2 class=\"title\" id=\"signup_head\">Sign up for an API key</h2> <div id=\"apidatagov_signup\">Loading signup form...</div>
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import java.time.LocalDate;
import org.openapitools.client.model.ScheduleAByEmployerPage;
import org.openapitools.client.model.ScheduleAByOccupationPage;
import org.openapitools.client.model.ScheduleABySizeCandidatePage;
import org.openapitools.client.model.ScheduleABySizePage;
import org.openapitools.client.model.ScheduleAByStateCandidatePage;
import org.openapitools.client.model.ScheduleAByStatePage;
import org.openapitools.client.model.ScheduleAByStateRecipientTotalsPage;
import org.openapitools.client.model.ScheduleAByZipPage;
import org.openapitools.client.model.ScheduleAEfilePage;
import org.openapitools.client.model.ScheduleAPage;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for ReceiptsApi
 */
@Disabled
public class ReceiptsApiTest {

    private final ReceiptsApi api = new ReceiptsApi();

    /**
     *  This endpoint provides itemized individual contributions received by a committee, aggregated by the contributor’s employer name. If you are interested in our “is_individual” methodology, review the [methodology page](https://www.fec.gov/campaign-finance-data/about-campaign-finance-data/methodology). Unitemized individual contributions are not included. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void schedulesScheduleAByEmployerGetTest() throws ApiException {
        String apiKey = null;
        List<Integer> cycle = null;
        Boolean sortNullsLast = null;
        Integer page = null;
        List<String> committeeId = null;
        Boolean sortNullOnly = null;
        Boolean sortHideNull = null;
        List<String> employer = null;
        Integer perPage = null;
        String sort = null;
        ScheduleAByEmployerPage response = api.schedulesScheduleAByEmployerGet(apiKey, cycle, sortNullsLast, page, committeeId, sortNullOnly, sortHideNull, employer, perPage, sort);
        // TODO: test validations
    }

    /**
     *  This endpoint provides itemized individual contributions received by a committee, aggregated by the contributor’s occupation. If you are interested in our “is_individual” methodology, review the [methodology page](https://www.fec.gov/campaign-finance-data/about-campaign-finance-data/methodology). Unitemized individual contributions are not included. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void schedulesScheduleAByOccupationGetTest() throws ApiException {
        String apiKey = null;
        List<Integer> cycle = null;
        Boolean sortNullsLast = null;
        Integer page = null;
        List<String> committeeId = null;
        Boolean sortNullOnly = null;
        List<String> occupation = null;
        Boolean sortHideNull = null;
        Integer perPage = null;
        String sort = null;
        ScheduleAByOccupationPage response = api.schedulesScheduleAByOccupationGet(apiKey, cycle, sortNullsLast, page, committeeId, sortNullOnly, occupation, sortHideNull, perPage, sort);
        // TODO: test validations
    }

    /**
     *  This endpoint provides itemized individual contributions received by a committee, aggregated by size of contribution and candidate. If you are interested in our “is_individual” methodology, review the [methodology page](https://www.fec.gov/campaign-finance-data/about-campaign-finance-data/methodology). Unitemized individual contributions are not included. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void schedulesScheduleABySizeByCandidateGetTest() throws ApiException {
        String apiKey = null;
        List<Integer> cycle = null;
        List<String> candidateId = null;
        Boolean electionFull = null;
        Boolean sortNullOnly = null;
        Boolean sortNullsLast = null;
        Integer page = null;
        Boolean sortHideNull = null;
        Integer perPage = null;
        String sort = null;
        ScheduleABySizeCandidatePage response = api.schedulesScheduleABySizeByCandidateGet(apiKey, cycle, candidateId, electionFull, sortNullOnly, sortNullsLast, page, sortHideNull, perPage, sort);
        // TODO: test validations
    }

    /**
     *  This endpoint provides individual contributions received by a committee, aggregated by size:  &#x60;&#x60;&#x60;  - $200 and under  - $200.01 - $499.99  - $500 - $999.99  - $1000 - $1999.99  - $2000 + &#x60;&#x60;&#x60;  The $200.00 and under category includes contributions of $200 or less combined with unitemized individual contributions. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void schedulesScheduleABySizeGetTest() throws ApiException {
        String apiKey = null;
        List<Integer> cycle = null;
        Boolean sortNullsLast = null;
        Integer page = null;
        List<String> committeeId = null;
        Boolean sortNullOnly = null;
        List<Integer> size = null;
        Boolean sortHideNull = null;
        Integer perPage = null;
        String sort = null;
        ScheduleABySizePage response = api.schedulesScheduleABySizeGet(apiKey, cycle, sortNullsLast, page, committeeId, sortNullOnly, size, sortHideNull, perPage, sort);
        // TODO: test validations
    }

    /**
     *  This endpoint provides itemized individual contributions received by a committee, aggregated by contributor’s state and candidate. If you are interested in our “is_individual” methodology, review the [methodology page](https://www.fec.gov/campaign-finance-data/about-campaign-finance-data/methodology). Unitemized individual contributions are not included. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void schedulesScheduleAByStateByCandidateGetTest() throws ApiException {
        String apiKey = null;
        List<Integer> cycle = null;
        List<String> candidateId = null;
        Boolean electionFull = null;
        Boolean sortNullOnly = null;
        Boolean sortNullsLast = null;
        Integer page = null;
        Boolean sortHideNull = null;
        Integer perPage = null;
        String sort = null;
        ScheduleAByStateCandidatePage response = api.schedulesScheduleAByStateByCandidateGet(apiKey, cycle, candidateId, electionFull, sortNullOnly, sortNullsLast, page, sortHideNull, perPage, sort);
        // TODO: test validations
    }

    /**
     *  Itemized individual contributions aggregated by contributor’s state, candidate, committee type and cycle. If you are interested in our “is_individual” methodology, review the [methodology page](https://www.fec.gov/campaign-finance-data/about-campaign-finance-data/methodology). Unitemized individual contributions are not included.  
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void schedulesScheduleAByStateByCandidateTotalsGetTest() throws ApiException {
        String apiKey = null;
        List<Integer> cycle = null;
        List<String> candidateId = null;
        Boolean electionFull = null;
        Boolean sortNullOnly = null;
        Boolean sortNullsLast = null;
        Integer page = null;
        Boolean sortHideNull = null;
        Integer perPage = null;
        String sort = null;
        ScheduleAByStateCandidatePage response = api.schedulesScheduleAByStateByCandidateTotalsGet(apiKey, cycle, candidateId, electionFull, sortNullOnly, sortNullsLast, page, sortHideNull, perPage, sort);
        // TODO: test validations
    }

    /**
     *  This endpoint provides itemized individual contributions received by a committee, aggregated by the contributor’s state. If you are interested in our “is_individual” methodology, review the [methodology page](https://www.fec.gov/campaign-finance-data/about-campaign-finance-data/methodology). Unitemized individual contributions are not included. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void schedulesScheduleAByStateGetTest() throws ApiException {
        String apiKey = null;
        Boolean hideNull = null;
        List<Integer> cycle = null;
        Boolean sortNullOnly = null;
        Integer page = null;
        List<String> state = null;
        List<String> committeeId = null;
        Boolean sortNullsLast = null;
        Boolean sortHideNull = null;
        Integer perPage = null;
        String sort = null;
        ScheduleAByStatePage response = api.schedulesScheduleAByStateGet(apiKey, hideNull, cycle, sortNullOnly, page, state, committeeId, sortNullsLast, sortHideNull, perPage, sort);
        // TODO: test validations
    }

    /**
     *  This endpoint provides itemized individual contributions received by a committee, aggregated by contributor’s state, committee type and cycle. If you are interested in our “is_individual” methodology, review the [methodology page](https://www.fec.gov/campaign-finance-data/about-campaign-finance-data/methodology). Unitemized individual contributions are not included. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void schedulesScheduleAByStateTotalsGetTest() throws ApiException {
        String apiKey = null;
        List<String> committeeType = null;
        List<Integer> cycle = null;
        Boolean sortNullOnly = null;
        Integer page = null;
        List<String> state = null;
        Boolean sortNullsLast = null;
        Boolean sortHideNull = null;
        Integer perPage = null;
        String sort = null;
        ScheduleAByStateRecipientTotalsPage response = api.schedulesScheduleAByStateTotalsGet(apiKey, committeeType, cycle, sortNullOnly, page, state, sortNullsLast, sortHideNull, perPage, sort);
        // TODO: test validations
    }

    /**
     *  This endpoint provides itemized individual contributions received by a committee, aggregated by the contributor’s ZIP code. If you are interested in our “is_individual” methodology, review the [methodology page](https://www.fec.gov/campaign-finance-data/about-campaign-finance-data/methodology). Unitemized individual contributions are not included. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void schedulesScheduleAByZipGetTest() throws ApiException {
        String apiKey = null;
        List<String> zip = null;
        List<Integer> cycle = null;
        Boolean sortNullOnly = null;
        Integer page = null;
        List<String> state = null;
        List<String> committeeId = null;
        Boolean sortNullsLast = null;
        Boolean sortHideNull = null;
        Integer perPage = null;
        String sort = null;
        ScheduleAByZipPage response = api.schedulesScheduleAByZipGet(apiKey, zip, cycle, sortNullOnly, page, state, committeeId, sortNullsLast, sortHideNull, perPage, sort);
        // TODO: test validations
    }

    /**
     *  Efiling endpoints provide real-time campaign finance data received from electronic filers. Efiling endpoints only contain the most recent four months of data and don&#39;t contain the processed and coded data that you can find on other endpoints. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void schedulesScheduleAEfileGetTest() throws ApiException {
        String apiKey = null;
        LocalDate minDate = null;
        String maxImageNumber = null;
        List<String> contributorEmployer = null;
        String minImageNumber = null;
        Boolean sortNullOnly = null;
        Boolean sortHideNull = null;
        List<String> contributorName = null;
        String minAmount = null;
        Integer perPage = null;
        List<String> contributorState = null;
        String sort = null;
        String lineNumber = null;
        List<String> contributorOccupation = null;
        List<String> contributorCity = null;
        Boolean sortNullsLast = null;
        Integer page = null;
        List<String> committeeId = null;
        List<String> imageNumber = null;
        LocalDate maxDate = null;
        String maxAmount = null;
        ScheduleAEfilePage response = api.schedulesScheduleAEfileGet(apiKey, minDate, maxImageNumber, contributorEmployer, minImageNumber, sortNullOnly, sortHideNull, contributorName, minAmount, perPage, contributorState, sort, lineNumber, contributorOccupation, contributorCity, sortNullsLast, page, committeeId, imageNumber, maxDate, maxAmount);
        // TODO: test validations
    }

    /**
     *  This description is for both ​&#x60;/schedules​/schedule_a​/&#x60; and ​ &#x60;/schedules​/schedule_a​/{sub_id}​/&#x60;.  This endpoint provides itemized receipts. Schedule A records describe itemized receipts, including contributions from individuals. If you are interested in contributions from an individual, use the &#x60;/schedules/schedule_a/&#x60; endpoint. For a more complete description of all Schedule A records visit [About receipts data](https://www.fec.gov/campaign-finance-data/about-campaign-finance-data/about-receipts-data/). If you are interested in our \&quot;is_individual\&quot; methodology visit our [methodology page](https://www.fec.gov/campaign-finance-data/about-campaign-finance-data/methodology/).  ​The &#x60;/schedules​/schedule_a​/&#x60; endpoint is not paginated by page number. This endpoint uses keyset pagination to improve query performance and these indices are required to properly page through this large dataset. To request the next page, you should append the values found in the &#x60;last_indexes&#x60; object from pagination to the URL of your last request as additional parameters.  For example, when sorting by &#x60;contribution_receipt_date&#x60;, you might receive a page of results with the two scenarios of following pagination information:  case #1: &#x60;&#x60;&#x60; pagination: {     pages: 2152643,     per_page: 20,     count: 43052850,     last_indexes: {         last_index: \&quot;230880619\&quot;,         last_contribution_receipt_date: \&quot;2014-01-01\&quot;     } } &#x60;&#x60;&#x60; &lt;br/&gt; case #2 (results which include contribution_receipt_date &#x3D; NULL):  &#x60;&#x60;&#x60; pagination: {     pages: 2152644,     per_page: 20,     count: 43052850,     last_indexes: {         last_index: \&quot;230880639\&quot;,         sort_null_only: True     } } &#x60;&#x60;&#x60; To fetch the next page of sorted results, append &#x60;last_index&#x3D;230880619&#x60; and &#x60;last_contribution_receipt_date&#x3D;2014-01-01&#x60; to the URL and when reaching &#x60;contribution_receipt_date&#x3D;NULL&#x60;, append &#x60;last_index&#x3D;230880639&#x60; and &#x60;sort_null_only&#x3D;True&#x60;. We strongly advise paging through these results using sort indices. The default sort is acending by &#x60;contribution_receipt_date&#x60; (&#x60;deprecated&#x60;, will be descending). If you do not page using sort indices, some transactions may be unintentionally filtered out.  Calls to ​&#x60;/schedules​/schedule_a​/&#x60; may return many records. For large result sets, the record counts found in the pagination object are approximate; you will need to page through the records until no records are returned.  To avoid throwing the \&quot;out of range\&quot; exception on the last page, one recommandation is to use total count and &#x60;per_page&#x60; to control the traverse loop of results.  ​The &#x60;/schedules​/schedule_a​/{sub_id}​/&#x60; endpoint returns a single transaction, but it does include a pagination object class. Please ignore the information in that object class.  
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void schedulesScheduleAGetTest() throws ApiException {
        String apiKey = null;
        Boolean isIndividual = null;
        LocalDate minDate = null;
        String maxImageNumber = null;
        String minImageNumber = null;
        List<String> contributorType = null;
        List<String> contributorId = null;
        List<String> recipientCommitteeOrgType = null;
        List<String> contributorEmployer = null;
        Boolean sortNullOnly = null;
        Integer lastIndex = null;
        List<String> contributorName = null;
        String minAmount = null;
        Boolean sortHideNull = null;
        List<String> recipientCommitteeDesignation = null;
        LocalDate maxLoadDate = null;
        List<String> recipientCommitteeType = null;
        String sort = null;
        LocalDate lastContributionReceiptDate = null;
        Float lastContributionReceiptAmount = null;
        String lineNumber = null;
        List<String> contributorState = null;
        Integer perPage = null;
        List<Integer> twoYearTransactionPeriod = null;
        List<String> contributorZip = null;
        LocalDate minLoadDate = null;
        List<String> contributorOccupation = null;
        List<String> contributorCity = null;
        List<String> committeeId = null;
        List<String> imageNumber = null;
        LocalDate maxDate = null;
        String maxAmount = null;
        ScheduleAPage response = api.schedulesScheduleAGet(apiKey, isIndividual, minDate, maxImageNumber, minImageNumber, contributorType, contributorId, recipientCommitteeOrgType, contributorEmployer, sortNullOnly, lastIndex, contributorName, minAmount, sortHideNull, recipientCommitteeDesignation, maxLoadDate, recipientCommitteeType, sort, lastContributionReceiptDate, lastContributionReceiptAmount, lineNumber, contributorState, perPage, twoYearTransactionPeriod, contributorZip, minLoadDate, contributorOccupation, contributorCity, committeeId, imageNumber, maxDate, maxAmount);
        // TODO: test validations
    }

    /**
     *  This description is for both ​&#x60;/schedules​/schedule_a​/&#x60; and ​ &#x60;/schedules​/schedule_a​/{sub_id}​/&#x60;.  This endpoint provides itemized receipts. Schedule A records describe itemized receipts, including contributions from individuals. If you are interested in contributions from an individual, use the &#x60;/schedules/schedule_a/&#x60; endpoint. For a more complete description of all Schedule A records visit [About receipts data](https://www.fec.gov/campaign-finance-data/about-campaign-finance-data/about-receipts-data/). If you are interested in our \&quot;is_individual\&quot; methodology visit our [methodology page](https://www.fec.gov/campaign-finance-data/about-campaign-finance-data/methodology/).  ​The &#x60;/schedules​/schedule_a​/&#x60; endpoint is not paginated by page number. This endpoint uses keyset pagination to improve query performance and these indices are required to properly page through this large dataset. To request the next page, you should append the values found in the &#x60;last_indexes&#x60; object from pagination to the URL of your last request as additional parameters.  For example, when sorting by &#x60;contribution_receipt_date&#x60;, you might receive a page of results with the two scenarios of following pagination information:  case #1: &#x60;&#x60;&#x60; pagination: {     pages: 2152643,     per_page: 20,     count: 43052850,     last_indexes: {         last_index: \&quot;230880619\&quot;,         last_contribution_receipt_date: \&quot;2014-01-01\&quot;     } } &#x60;&#x60;&#x60; &lt;br/&gt; case #2 (results which include contribution_receipt_date &#x3D; NULL):  &#x60;&#x60;&#x60; pagination: {     pages: 2152644,     per_page: 20,     count: 43052850,     last_indexes: {         last_index: \&quot;230880639\&quot;,         sort_null_only: True     } } &#x60;&#x60;&#x60; To fetch the next page of sorted results, append &#x60;last_index&#x3D;230880619&#x60; and &#x60;last_contribution_receipt_date&#x3D;2014-01-01&#x60; to the URL and when reaching &#x60;contribution_receipt_date&#x3D;NULL&#x60;, append &#x60;last_index&#x3D;230880639&#x60; and &#x60;sort_null_only&#x3D;True&#x60;. We strongly advise paging through these results using sort indices. The default sort is acending by &#x60;contribution_receipt_date&#x60; (&#x60;deprecated&#x60;, will be descending). If you do not page using sort indices, some transactions may be unintentionally filtered out.  Calls to ​&#x60;/schedules​/schedule_a​/&#x60; may return many records. For large result sets, the record counts found in the pagination object are approximate; you will need to page through the records until no records are returned.  To avoid throwing the \&quot;out of range\&quot; exception on the last page, one recommandation is to use total count and &#x60;per_page&#x60; to control the traverse loop of results.  ​The &#x60;/schedules​/schedule_a​/{sub_id}​/&#x60; endpoint returns a single transaction, but it does include a pagination object class. Please ignore the information in that object class.  
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void schedulesScheduleASubIdGetTest() throws ApiException {
        String apiKey = null;
        String subId = null;
        Boolean isIndividual = null;
        LocalDate minDate = null;
        String maxImageNumber = null;
        String minImageNumber = null;
        List<String> contributorType = null;
        List<String> contributorId = null;
        List<String> recipientCommitteeOrgType = null;
        List<String> contributorEmployer = null;
        Boolean sortNullOnly = null;
        Integer lastIndex = null;
        List<String> contributorName = null;
        String minAmount = null;
        Boolean sortHideNull = null;
        List<String> recipientCommitteeDesignation = null;
        LocalDate maxLoadDate = null;
        List<String> recipientCommitteeType = null;
        String sort = null;
        LocalDate lastContributionReceiptDate = null;
        Float lastContributionReceiptAmount = null;
        String lineNumber = null;
        List<String> contributorState = null;
        Integer perPage = null;
        List<Integer> twoYearTransactionPeriod = null;
        List<String> contributorZip = null;
        LocalDate minLoadDate = null;
        List<String> contributorOccupation = null;
        List<String> contributorCity = null;
        List<String> committeeId = null;
        List<String> imageNumber = null;
        LocalDate maxDate = null;
        String maxAmount = null;
        ScheduleAPage response = api.schedulesScheduleASubIdGet(apiKey, subId, isIndividual, minDate, maxImageNumber, minImageNumber, contributorType, contributorId, recipientCommitteeOrgType, contributorEmployer, sortNullOnly, lastIndex, contributorName, minAmount, sortHideNull, recipientCommitteeDesignation, maxLoadDate, recipientCommitteeType, sort, lastContributionReceiptDate, lastContributionReceiptAmount, lineNumber, contributorState, perPage, twoYearTransactionPeriod, contributorZip, minLoadDate, contributorOccupation, contributorCity, committeeId, imageNumber, maxDate, maxAmount);
        // TODO: test validations
    }

}
