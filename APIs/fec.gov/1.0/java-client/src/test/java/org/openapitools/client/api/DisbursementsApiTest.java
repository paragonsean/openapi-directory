/*
 * OpenFEC
 * This application programming interface (API) allows you to explore the way candidates and committees fund their campaigns.    The Federal Election Commission (FEC) API is a RESTful web service supporting full-text and field-specific searches on FEC data. [Bulk downloads](https://www.fec.gov/data/advanced/?tab=bulk-data) are available on the current site. Information is tied to the underlying forms by file ID and image ID. Data is updated nightly.    There are a lot of data, and a good place to start is to use search to find interesting candidates and committees. Then, you can use their IDs to find report or line item details with the other endpoints. If you are interested in individual donors, check out contributor information in the `/schedule_a/` endpoints.    <b class=\"body\" id=\"getting_started_head\">Getting started with the openFEC API</b><br>    If you would like to use the FEC's API programmatically, you can sign up for your own API key using our form. Alternatively, you can still try out our API without an API key by using the web interface and using DEMO_KEY. Note that when you use the openFEC API you are subject to the [Terms of Service](https://github.com/fecgov/FEC/blob/master/TERMS-OF-SERVICE.md) and [Acceptable Use policy](https://github.com/fecgov/FEC/blob/master/ACCEPTABLE-USE-POLICY.md).    Signing up for an API key will enable you to place up to 1,000 calls an hour. Each call is limited to 100 results per page. You can email questions, comments or a request to get a key for 7,200 calls an hour (120 calls per minute) to <a href=\"mailto:APIinfo@fec.gov\">APIinfo@fec.gov</a>. You can also ask questions and discuss the data in a community led [group](https://groups.google.com/forum/#!forum/fec-data).    The model definitions and schema are available at [/swagger](/swagger/). This is useful for making wrappers and exploring the data.    A few restrictions limit the way you can use FEC data. For example, you canâ€™t use contributor lists for commercial purposes or to solicit donations. [Learn more here](https://www.fec.gov/updates/sale-or-use-contributor-information/).    [Inspect our source code](https://github.com/fecgov/openFEC). We welcome issues and pull requests!    <p><br></p> <h2 class=\"title\" id=\"signup_head\">Sign up for an API key</h2> <div id=\"apidatagov_signup\">Loading signup form...</div>
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import java.time.LocalDate;
import org.openapitools.client.model.ScheduleBByPurposePage;
import org.openapitools.client.model.ScheduleBByRecipientIDPage;
import org.openapitools.client.model.ScheduleBByRecipientPage;
import org.openapitools.client.model.ScheduleBEfilePage;
import org.openapitools.client.model.ScheduleBPage;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for DisbursementsApi
 */
@Disabled
public class DisbursementsApiTest {

    private final DisbursementsApi api = new DisbursementsApi();

    /**
     *  Schedule B disbursements aggregated by disbursement purpose category. To avoid double counting, memoed items are not included. Purpose is a combination of transaction codes, category codes and disbursement description. Inspect the &#x60;disbursement_purpose&#x60; sql function within the migrations for more details. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void schedulesScheduleBByPurposeGetTest() throws ApiException {
        String apiKey = null;
        List<String> purpose = null;
        List<Integer> cycle = null;
        Boolean sortNullOnly = null;
        Integer page = null;
        List<String> committeeId = null;
        Boolean sortNullsLast = null;
        Boolean sortHideNull = null;
        Integer perPage = null;
        String sort = null;
        ScheduleBByPurposePage response = api.schedulesScheduleBByPurposeGet(apiKey, purpose, cycle, sortNullOnly, page, committeeId, sortNullsLast, sortHideNull, perPage, sort);
        // TODO: test validations
    }

    /**
     *  Schedule B disbursements aggregated by recipient name. To avoid double counting, memoed items are not included. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void schedulesScheduleBByRecipientGetTest() throws ApiException {
        String apiKey = null;
        List<String> recipientName = null;
        List<Integer> cycle = null;
        Boolean sortNullOnly = null;
        Integer page = null;
        List<String> committeeId = null;
        Boolean sortNullsLast = null;
        Boolean sortHideNull = null;
        Integer perPage = null;
        String sort = null;
        ScheduleBByRecipientPage response = api.schedulesScheduleBByRecipientGet(apiKey, recipientName, cycle, sortNullOnly, page, committeeId, sortNullsLast, sortHideNull, perPage, sort);
        // TODO: test validations
    }

    /**
     *  Schedule B disbursements aggregated by recipient committee ID, if applicable. To avoid double counting, memoed items are not included. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void schedulesScheduleBByRecipientIdGetTest() throws ApiException {
        String apiKey = null;
        List<Integer> cycle = null;
        Boolean sortNullsLast = null;
        Integer page = null;
        List<String> committeeId = null;
        Boolean sortNullOnly = null;
        List<String> recipientId = null;
        Boolean sortHideNull = null;
        Integer perPage = null;
        String sort = null;
        ScheduleBByRecipientIDPage response = api.schedulesScheduleBByRecipientIdGet(apiKey, cycle, sortNullsLast, page, committeeId, sortNullOnly, recipientId, sortHideNull, perPage, sort);
        // TODO: test validations
    }

    /**
     *  Efiling endpoints provide real-time campaign finance data received from electronic filers. Efiling endpoints only contain the most recent four months of data and don&#39;t contain the processed and coded data that you can find on other endpoints. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void schedulesScheduleBEfileGetTest() throws ApiException {
        String apiKey = null;
        LocalDate minDate = null;
        List<String> disbursementDescription = null;
        Boolean sortNullOnly = null;
        Integer page = null;
        List<String> committeeId = null;
        Boolean sortNullsLast = null;
        List<String> imageNumber = null;
        Boolean sortHideNull = null;
        LocalDate maxDate = null;
        Integer perPage = null;
        String minAmount = null;
        String maxAmount = null;
        String sort = null;
        List<String> recipientCity = null;
        List<String> recipientState = null;
        ScheduleBEfilePage response = api.schedulesScheduleBEfileGet(apiKey, minDate, disbursementDescription, sortNullOnly, page, committeeId, sortNullsLast, imageNumber, sortHideNull, maxDate, perPage, minAmount, maxAmount, sort, recipientCity, recipientState);
        // TODO: test validations
    }

    /**
     *  Schedule B filings describe itemized disbursements. This data explains how committees and other filers spend their money. These figures are reported as part of forms F3, F3X and F3P.  The data is divided in two-year periods, called &#x60;two_year_transaction_period&#x60;, which is derived from the &#x60;report_year&#x60; submitted of the corresponding form. If no value is supplied, the results will default to the most recent two-year period that is named after the ending, even-numbered year.  Due to the large quantity of Schedule B filings, this endpoint is not paginated by page number. Instead, you can request the next page of results by adding the values in the &#x60;last_indexes&#x60; object from &#x60;pagination&#x60; to the URL of your last request. For example, when sorting by &#x60;disbursement_date&#x60;, you might receive a page of results with the following pagination information:  &#x60;&#x60;&#x60; pagination: {     pages: 965191,     per_page: 20,     count: 19303814,     last_indexes: {         last_index: \&quot;230906248\&quot;,         last_disbursement_date: \&quot;2014-07-04\&quot;     } } &#x60;&#x60;&#x60;  To fetch the next page of sorted results, append &#x60;last_index&#x3D;230906248&#x60; and &#x60;last_disbursement_date&#x3D;2014-07-04&#x60; to the URL.  We strongly advise paging through these results by using the sort indices (defaults to sort by disbursement date, e.g. &#x60;last_disbursement_date&#x60;), otherwise some resources may be unintentionally filtered out. This resource uses keyset pagination to improve query performance and these indices are required to properly page through this large dataset.  Note: because the Schedule B data includes many records, counts for large result sets are approximate; you will want to page through the records until no records are returned. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void schedulesScheduleBGetTest() throws ApiException {
        String apiKey = null;
        LocalDate minDate = null;
        List<String> spenderCommitteeDesignation = null;
        List<String> recipientCommitteeId = null;
        LocalDate lastDisbursementDate = null;
        String maxImageNumber = null;
        List<String> disbursementDescription = null;
        List<String> disbursementPurposeCategory = null;
        String minImageNumber = null;
        Boolean sortNullOnly = null;
        Integer lastIndex = null;
        Boolean sortHideNull = null;
        String minAmount = null;
        Integer perPage = null;
        String lineNumber = null;
        String sort = null;
        List<String> recipientCity = null;
        List<String> spenderCommitteeType = null;
        Float lastDisbursementAmount = null;
        List<String> spenderCommitteeOrgType = null;
        List<Integer> twoYearTransactionPeriod = null;
        List<String> committeeId = null;
        List<String> imageNumber = null;
        LocalDate maxDate = null;
        List<String> recipientName = null;
        String maxAmount = null;
        List<String> recipientState = null;
        ScheduleBPage response = api.schedulesScheduleBGet(apiKey, minDate, spenderCommitteeDesignation, recipientCommitteeId, lastDisbursementDate, maxImageNumber, disbursementDescription, disbursementPurposeCategory, minImageNumber, sortNullOnly, lastIndex, sortHideNull, minAmount, perPage, lineNumber, sort, recipientCity, spenderCommitteeType, lastDisbursementAmount, spenderCommitteeOrgType, twoYearTransactionPeriod, committeeId, imageNumber, maxDate, recipientName, maxAmount, recipientState);
        // TODO: test validations
    }

    /**
     *  Schedule B filings describe itemized disbursements. This data explains how committees and other filers spend their money. These figures are reported as part of forms F3, F3X and F3P.  The data is divided in two-year periods, called &#x60;two_year_transaction_period&#x60;, which is derived from the &#x60;report_year&#x60; submitted of the corresponding form. If no value is supplied, the results will default to the most recent two-year period that is named after the ending, even-numbered year.  Due to the large quantity of Schedule B filings, this endpoint is not paginated by page number. Instead, you can request the next page of results by adding the values in the &#x60;last_indexes&#x60; object from &#x60;pagination&#x60; to the URL of your last request. For example, when sorting by &#x60;disbursement_date&#x60;, you might receive a page of results with the following pagination information:  &#x60;&#x60;&#x60; pagination: {     pages: 965191,     per_page: 20,     count: 19303814,     last_indexes: {         last_index: \&quot;230906248\&quot;,         last_disbursement_date: \&quot;2014-07-04\&quot;     } } &#x60;&#x60;&#x60;  To fetch the next page of sorted results, append &#x60;last_index&#x3D;230906248&#x60; and &#x60;last_disbursement_date&#x3D;2014-07-04&#x60; to the URL.  We strongly advise paging through these results by using the sort indices (defaults to sort by disbursement date, e.g. &#x60;last_disbursement_date&#x60;), otherwise some resources may be unintentionally filtered out. This resource uses keyset pagination to improve query performance and these indices are required to properly page through this large dataset.  Note: because the Schedule B data includes many records, counts for large result sets are approximate; you will want to page through the records until no records are returned. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void schedulesScheduleBSubIdGetTest() throws ApiException {
        String apiKey = null;
        String subId = null;
        LocalDate minDate = null;
        List<String> spenderCommitteeDesignation = null;
        List<String> recipientCommitteeId = null;
        LocalDate lastDisbursementDate = null;
        String maxImageNumber = null;
        List<String> disbursementDescription = null;
        List<String> disbursementPurposeCategory = null;
        String minImageNumber = null;
        Boolean sortNullOnly = null;
        Integer lastIndex = null;
        Boolean sortHideNull = null;
        String minAmount = null;
        Integer perPage = null;
        String lineNumber = null;
        String sort = null;
        List<String> recipientCity = null;
        List<String> spenderCommitteeType = null;
        Float lastDisbursementAmount = null;
        List<String> spenderCommitteeOrgType = null;
        List<Integer> twoYearTransactionPeriod = null;
        List<String> committeeId = null;
        List<String> imageNumber = null;
        LocalDate maxDate = null;
        List<String> recipientName = null;
        String maxAmount = null;
        List<String> recipientState = null;
        ScheduleBPage response = api.schedulesScheduleBSubIdGet(apiKey, subId, minDate, spenderCommitteeDesignation, recipientCommitteeId, lastDisbursementDate, maxImageNumber, disbursementDescription, disbursementPurposeCategory, minImageNumber, sortNullOnly, lastIndex, sortHideNull, minAmount, perPage, lineNumber, sort, recipientCity, spenderCommitteeType, lastDisbursementAmount, spenderCommitteeOrgType, twoYearTransactionPeriod, committeeId, imageNumber, maxDate, recipientName, maxAmount, recipientState);
        // TODO: test validations
    }

}
