/*
 * OpenFEC
 * This application programming interface (API) allows you to explore the way candidates and committees fund their campaigns.    The Federal Election Commission (FEC) API is a RESTful web service supporting full-text and field-specific searches on FEC data. [Bulk downloads](https://www.fec.gov/data/advanced/?tab=bulk-data) are available on the current site. Information is tied to the underlying forms by file ID and image ID. Data is updated nightly.    There are a lot of data, and a good place to start is to use search to find interesting candidates and committees. Then, you can use their IDs to find report or line item details with the other endpoints. If you are interested in individual donors, check out contributor information in the `/schedule_a/` endpoints.    <b class=\"body\" id=\"getting_started_head\">Getting started with the openFEC API</b><br>    If you would like to use the FEC's API programmatically, you can sign up for your own API key using our form. Alternatively, you can still try out our API without an API key by using the web interface and using DEMO_KEY. Note that when you use the openFEC API you are subject to the [Terms of Service](https://github.com/fecgov/FEC/blob/master/TERMS-OF-SERVICE.md) and [Acceptable Use policy](https://github.com/fecgov/FEC/blob/master/ACCEPTABLE-USE-POLICY.md).    Signing up for an API key will enable you to place up to 1,000 calls an hour. Each call is limited to 100 results per page. You can email questions, comments or a request to get a key for 7,200 calls an hour (120 calls per minute) to <a href=\"mailto:APIinfo@fec.gov\">APIinfo@fec.gov</a>. You can also ask questions and discuss the data in a community led [group](https://groups.google.com/forum/#!forum/fec-data).    The model definitions and schema are available at [/swagger](/swagger/). This is useful for making wrappers and exploring the data.    A few restrictions limit the way you can use FEC data. For example, you can’t use contributor lists for commercial purposes or to solicit donations. [Learn more here](https://www.fec.gov/updates/sale-or-use-contributor-information/).    [Inspect our source code](https://github.com/fecgov/openFEC). We welcome issues and pull requests!    <p><br></p> <h2 class=\"title\" id=\"signup_head\">Sign up for an API key</h2> <div id=\"apidatagov_signup\">Loading signup form...</div>
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.IETotalsByCandidatePage;
import java.time.LocalDate;
import org.openapitools.client.model.ScheduleEByCandidatePage;
import org.openapitools.client.model.ScheduleEEfilePage;
import org.openapitools.client.model.ScheduleEPage;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for IndependentExpendituresApi
 */
@Disabled
public class IndependentExpendituresApiTest {

    private final IndependentExpendituresApi api = new IndependentExpendituresApi();

    /**
     *  Schedule E receipts aggregated by recipient candidate. To avoid double counting, memoed items are not included. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void schedulesScheduleEByCandidateGetTest() throws ApiException {
        String apiKey = null;
        String district = null;
        String supportOppose = null;
        Boolean electionFull = null;
        List<Integer> cycle = null;
        Boolean sortNullOnly = null;
        Integer page = null;
        String state = null;
        List<String> committeeId = null;
        Boolean sortNullsLast = null;
        Boolean sortHideNull = null;
        List<String> candidateId = null;
        Integer perPage = null;
        String office = null;
        String sort = null;
        ScheduleEByCandidatePage response = api.schedulesScheduleEByCandidateGet(apiKey, district, supportOppose, electionFull, cycle, sortNullOnly, page, state, committeeId, sortNullsLast, sortHideNull, candidateId, perPage, office, sort);
        // TODO: test validations
    }

    /**
     *  Efiling endpoints provide real-time campaign finance data received from electronic filers. Efiling endpoints only contain the most recent four months of data and don&#39;t contain the processed and coded data that you can find on other endpoints. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void schedulesScheduleEEfileGetTest() throws ApiException {
        String apiKey = null;
        Integer maxExpenditureAmount = null;
        List<String> supportOpposeIndicator = null;
        LocalDate minExpenditureDate = null;
        List<String> filingForm = null;
        LocalDate maxExpenditureDate = null;
        LocalDate maxFiledDate = null;
        Boolean isNotice = null;
        Boolean sortNullOnly = null;
        Boolean sortHideNull = null;
        List<String> payeeName = null;
        List<String> candidateId = null;
        Integer perPage = null;
        List<String> candidateOfficeDistrict = null;
        String sort = null;
        Integer minExpenditureAmount = null;
        List<String> spenderName = null;
        LocalDate minDisseminationDate = null;
        List<String> candidateOfficeState = null;
        Boolean sortNullsLast = null;
        Integer page = null;
        List<String> committeeId = null;
        List<String> candidateSearch = null;
        List<String> imageNumber = null;
        List<String> candidateParty = null;
        LocalDate minFiledDate = null;
        LocalDate maxDisseminationDate = null;
        Boolean mostRecent = null;
        String candidateOffice = null;
        ScheduleEEfilePage response = api.schedulesScheduleEEfileGet(apiKey, maxExpenditureAmount, supportOpposeIndicator, minExpenditureDate, filingForm, maxExpenditureDate, maxFiledDate, isNotice, sortNullOnly, sortHideNull, payeeName, candidateId, perPage, candidateOfficeDistrict, sort, minExpenditureAmount, spenderName, minDisseminationDate, candidateOfficeState, sortNullsLast, page, committeeId, candidateSearch, imageNumber, candidateParty, minFiledDate, maxDisseminationDate, mostRecent, candidateOffice);
        // TODO: test validations
    }

    /**
     *  Schedule E covers the line item expenditures for independent expenditures. For example, if a super PAC bought ads on TV to oppose a federal candidate, each ad purchase would be recorded here with the expenditure amount, name and id of the candidate, and whether the ad supported or opposed the candidate.  An independent expenditure is an expenditure for a communication \&quot;expressly advocating the election or defeat of a clearly identified candidate that is not made in cooperation, consultation, or concert with, or at the request or suggestion of, a candidate, a candidate’s authorized committee, or their agents, or a political party or its agents.\&quot;  Aggregates by candidate do not include 24 and 48 hour reports. This ensures we don&#39;t double count expenditures and the totals are more accurate. You can still find the information from 24 and 48 hour reports in &#x60;/schedule/schedule_e/&#x60;.  Due to the large quantity of Schedule E filings, this endpoint is not paginated by page number. Instead, you can request the next page of results by adding the values in the &#x60;last_indexes&#x60; object from &#x60;pagination&#x60; to the URL of your last request. For example, when sorting by &#x60;expenditure_amount&#x60;, you might receive a page of results with the following pagination information:  &#x60;&#x60;&#x60;  \&quot;pagination\&quot;: {     \&quot;count\&quot;: 152623,     \&quot;last_indexes\&quot;: {       \&quot;last_index\&quot;: \&quot;3023037\&quot;,       \&quot;last_expenditure_amount\&quot;: -17348.5     },     \&quot;per_page\&quot;: 20,     \&quot;pages\&quot;: 7632   } } &#x60;&#x60;&#x60;  To fetch the next page of sorted results, append &#x60;last_index&#x3D;3023037&#x60; and &#x60;last_expenditure_amount&#x3D;&#x60; to the URL.  We strongly advise paging through these results by using the sort indices (defaults to sort by disbursement date, e.g. &#x60;last_disbursement_date&#x60;), otherwise some resources may be unintentionally filtered out.  This resource uses keyset pagination to improve query performance and these indices are required to properly page through this large dataset.  Note: because the Schedule E data includes many records, counts for large result sets are approximate; you will want to page through the records until no records are returned. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void schedulesScheduleEGetTest() throws ApiException {
        String apiKey = null;
        LocalDate lastExpenditureDate = null;
        String maxImageNumber = null;
        List<Boolean> isNotice = null;
        List<String> payeeName = null;
        String minAmount = null;
        List<String> candidateId = null;
        Boolean sortHideNull = null;
        Float lastOfficeTotalYtd = null;
        String sort = null;
        LocalDate minFilingDate = null;
        List<String> qSpender = null;
        LocalDate minDisseminationDate = null;
        List<String> candidateOfficeState = null;
        Boolean sortNullsLast = null;
        Float lastExpenditureAmount = null;
        List<String> imageNumber = null;
        LocalDate maxDate = null;
        LocalDate maxDisseminationDate = null;
        LocalDate minDate = null;
        List<String> filingForm = null;
        List<String> supportOpposeIndicator = null;
        String minImageNumber = null;
        List<Integer> cycle = null;
        LocalDate maxFilingDate = null;
        Boolean sortNullOnly = null;
        String lastSupportOpposeIndicator = null;
        Integer lastIndex = null;
        Integer perPage = null;
        List<String> candidateOfficeDistrict = null;
        String lineNumber = null;
        List<String> committeeId = null;
        List<String> candidateParty = null;
        String maxAmount = null;
        Boolean mostRecent = null;
        List<String> candidateOffice = null;
        ScheduleEPage response = api.schedulesScheduleEGet(apiKey, lastExpenditureDate, maxImageNumber, isNotice, payeeName, minAmount, candidateId, sortHideNull, lastOfficeTotalYtd, sort, minFilingDate, qSpender, minDisseminationDate, candidateOfficeState, sortNullsLast, lastExpenditureAmount, imageNumber, maxDate, maxDisseminationDate, minDate, filingForm, supportOpposeIndicator, minImageNumber, cycle, maxFilingDate, sortNullOnly, lastSupportOpposeIndicator, lastIndex, perPage, candidateOfficeDistrict, lineNumber, committeeId, candidateParty, maxAmount, mostRecent, candidateOffice);
        // TODO: test validations
    }

    /**
     *  Total independent expenditure on supported or opposed candidates by cycle or candidate election year. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void schedulesScheduleETotalsByCandidateGetTest() throws ApiException {
        String apiKey = null;
        Boolean electionFull = null;
        List<Integer> cycle = null;
        Boolean sortNullsLast = null;
        Integer page = null;
        Boolean sortNullOnly = null;
        Boolean sortHideNull = null;
        List<String> candidateId = null;
        Integer perPage = null;
        String sort = null;
        IETotalsByCandidatePage response = api.schedulesScheduleETotalsByCandidateGet(apiKey, electionFull, cycle, sortNullsLast, page, sortNullOnly, sortHideNull, candidateId, perPage, sort);
        // TODO: test validations
    }

}
