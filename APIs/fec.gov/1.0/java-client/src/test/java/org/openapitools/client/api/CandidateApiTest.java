/*
 * OpenFEC
 * This application programming interface (API) allows you to explore the way candidates and committees fund their campaigns.    The Federal Election Commission (FEC) API is a RESTful web service supporting full-text and field-specific searches on FEC data. [Bulk downloads](https://www.fec.gov/data/advanced/?tab=bulk-data) are available on the current site. Information is tied to the underlying forms by file ID and image ID. Data is updated nightly.    There are a lot of data, and a good place to start is to use search to find interesting candidates and committees. Then, you can use their IDs to find report or line item details with the other endpoints. If you are interested in individual donors, check out contributor information in the `/schedule_a/` endpoints.    <b class=\"body\" id=\"getting_started_head\">Getting started with the openFEC API</b><br>    If you would like to use the FEC's API programmatically, you can sign up for your own API key using our form. Alternatively, you can still try out our API without an API key by using the web interface and using DEMO_KEY. Note that when you use the openFEC API you are subject to the [Terms of Service](https://github.com/fecgov/FEC/blob/master/TERMS-OF-SERVICE.md) and [Acceptable Use policy](https://github.com/fecgov/FEC/blob/master/ACCEPTABLE-USE-POLICY.md).    Signing up for an API key will enable you to place up to 1,000 calls an hour. Each call is limited to 100 results per page. You can email questions, comments or a request to get a key for 7,200 calls an hour (120 calls per minute) to <a href=\"mailto:APIinfo@fec.gov\">APIinfo@fec.gov</a>. You can also ask questions and discuss the data in a community led [group](https://groups.google.com/forum/#!forum/fec-data).    The model definitions and schema are available at [/swagger](/swagger/). This is useful for making wrappers and exploring the data.    A few restrictions limit the way you can use FEC data. For example, you can’t use contributor lists for commercial purposes or to solicit donations. [Learn more here](https://www.fec.gov/updates/sale-or-use-contributor-information/).    [Inspect our source code](https://github.com/fecgov/openFEC). We welcome issues and pull requests!    <p><br></p> <h2 class=\"title\" id=\"signup_head\">Sign up for an API key</h2> <div id=\"apidatagov_signup\">Loading signup form...</div>
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.CandidateDetailPage;
import org.openapitools.client.model.CandidateHistoryPage;
import org.openapitools.client.model.CandidateHistoryTotalPage;
import org.openapitools.client.model.CandidatePage;
import org.openapitools.client.model.CandidateTotalAggregatePage;
import org.openapitools.client.model.CommitteeTotalsPage;
import java.time.LocalDate;
import org.openapitools.client.model.TotalByOfficeByPartyPage;
import org.openapitools.client.model.TotalByOfficePage;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for CandidateApi
 */
@Disabled
public class CandidateApiTest {

    private final CandidateApi api = new CandidateApi();

    /**
     *  This endpoint is useful for finding detailed information about a particular candidate. Use the &#x60;candidate_id&#x60; to find the most recent information about that candidate. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void candidateCandidateIdGetTest() throws ApiException {
        String apiKey = null;
        String candidateId = null;
        List<String> incumbentChallenge = null;
        List<Integer> cycle = null;
        Boolean sortNullOnly = null;
        Boolean federalFundsFlag = null;
        Boolean sortHideNull = null;
        List<String> name = null;
        Integer perPage = null;
        List<Integer> electionYear = null;
        List<String> office = null;
        String sort = null;
        List<String> candidateStatus = null;
        List<String> district = null;
        Boolean hasRaisedFunds = null;
        List<String> party = null;
        Boolean sortNullsLast = null;
        Integer page = null;
        List<String> state = null;
        String year = null;
        CandidateDetailPage response = api.candidateCandidateIdGet(apiKey, candidateId, incumbentChallenge, cycle, sortNullOnly, federalFundsFlag, sortHideNull, name, perPage, electionYear, office, sort, candidateStatus, district, hasRaisedFunds, party, sortNullsLast, page, state, year);
        // TODO: test validations
    }

    /**
     *  Find out a candidate&#39;s characteristics over time. This is particularly useful if the candidate runs for the same office in different districts or you want to know more about a candidate&#39;s previous races.  This information is organized by &#x60;candidate_id&#x60;, so it won&#39;t help you find a candidate who ran for different offices over time; candidates get a new ID for each office. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void candidateCandidateIdHistoryCycleGetTest() throws ApiException {
        String apiKey = null;
        Integer cycle = null;
        String candidateId = null;
        Integer page = null;
        Boolean sortHideNull = null;
        Boolean electionFull = null;
        Integer perPage = null;
        Boolean sortNullOnly = null;
        String sort = null;
        Boolean sortNullsLast = null;
        CandidateHistoryPage response = api.candidateCandidateIdHistoryCycleGet(apiKey, cycle, candidateId, page, sortHideNull, electionFull, perPage, sortNullOnly, sort, sortNullsLast);
        // TODO: test validations
    }

    /**
     *  Find out a candidate&#39;s characteristics over time. This is particularly useful if the candidate runs for the same office in different districts or you want to know more about a candidate&#39;s previous races.  This information is organized by &#x60;candidate_id&#x60;, so it won&#39;t help you find a candidate who ran for different offices over time; candidates get a new ID for each office. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void candidateCandidateIdHistoryGetTest() throws ApiException {
        String apiKey = null;
        String candidateId = null;
        Integer page = null;
        Boolean sortHideNull = null;
        Boolean electionFull = null;
        Integer perPage = null;
        Boolean sortNullOnly = null;
        String sort = null;
        Boolean sortNullsLast = null;
        CandidateHistoryPage response = api.candidateCandidateIdHistoryGet(apiKey, candidateId, page, sortHideNull, electionFull, perPage, sortNullOnly, sort, sortNullsLast);
        // TODO: test validations
    }

    /**
     *  This endpoint provides information about a committee&#39;s Form 3, Form 3X, or Form 3P financial reports, which are aggregated by two-year period. We refer to two-year periods as a &#x60;cycle&#x60;.  The cycle is named after the even-numbered year and includes the year before it. To obtain totals from 2013 and 2014, you would use 2014. In odd-numbered years, the current cycle is the next year — for example, in 2015, the current cycle is 2016.  For presidential and Senate candidates, multiple two-year cycles exist between elections.  
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void candidateCandidateIdTotalsGetTest() throws ApiException {
        String apiKey = null;
        String candidateId = null;
        Boolean electionFull = null;
        List<Integer> cycle = null;
        Boolean sortNullsLast = null;
        Integer page = null;
        Boolean sortNullOnly = null;
        Boolean sortHideNull = null;
        Integer perPage = null;
        String sort = null;
        CommitteeTotalsPage response = api.candidateCandidateIdTotalsGet(apiKey, candidateId, electionFull, cycle, sortNullsLast, page, sortNullOnly, sortHideNull, perPage, sort);
        // TODO: test validations
    }

    /**
     *  Fetch basic information about candidates, and use parameters to filter results to the candidates you&#39;re looking for.  Each result reflects a unique FEC candidate ID. That ID is particular to the candidate for a particular office sought. If a candidate runs for the same office multiple times, the ID stays the same. If the same person runs for another office — for example, a House candidate runs for a Senate office — that candidate will get a unique ID for each office. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void candidatesGetTest() throws ApiException {
        String apiKey = null;
        List<String> incumbentChallenge = null;
        LocalDate minFirstFileDate = null;
        List<String> q = null;
        List<Integer> cycle = null;
        Boolean sortNullOnly = null;
        Boolean federalFundsFlag = null;
        Boolean sortHideNull = null;
        List<String> candidateId = null;
        List<String> name = null;
        Integer perPage = null;
        List<Integer> electionYear = null;
        List<String> office = null;
        String sort = null;
        List<String> candidateStatus = null;
        LocalDate maxFirstFileDate = null;
        List<String> district = null;
        Boolean hasRaisedFunds = null;
        List<String> party = null;
        Boolean sortNullsLast = null;
        Boolean isActiveCandidate = null;
        Integer page = null;
        List<String> state = null;
        String year = null;
        CandidatePage response = api.candidatesGet(apiKey, incumbentChallenge, minFirstFileDate, q, cycle, sortNullOnly, federalFundsFlag, sortHideNull, candidateId, name, perPage, electionYear, office, sort, candidateStatus, maxFirstFileDate, district, hasRaisedFunds, party, sortNullsLast, isActiveCandidate, page, state, year);
        // TODO: test validations
    }

    /**
     *  Fetch basic information about candidates and their principal committees.  Each result reflects a unique FEC candidate ID. That ID is assigned to the candidate for a particular office sought. If a candidate runs for the same office over time, that ID stays the same. If the same person runs for multiple offices — for example, a House candidate runs for a Senate office — that candidate will get a unique ID for each office.  The candidate endpoints primarily use data from FEC registration [Form 1](https://www.fec.gov/pdf/forms/fecfrm1.pdf) for committee information and [Form 2](https://www.fec.gov/pdf/forms/fecfrm2.pdf) for candidate information. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void candidatesSearchGetTest() throws ApiException {
        String apiKey = null;
        List<String> incumbentChallenge = null;
        LocalDate minFirstFileDate = null;
        List<String> q = null;
        List<Integer> cycle = null;
        Boolean sortNullOnly = null;
        Boolean federalFundsFlag = null;
        Boolean sortHideNull = null;
        List<String> candidateId = null;
        List<String> name = null;
        Integer perPage = null;
        List<Integer> electionYear = null;
        List<String> office = null;
        String sort = null;
        List<String> candidateStatus = null;
        LocalDate maxFirstFileDate = null;
        List<String> district = null;
        Boolean hasRaisedFunds = null;
        List<String> party = null;
        Boolean sortNullsLast = null;
        Boolean isActiveCandidate = null;
        Integer page = null;
        List<String> state = null;
        String year = null;
        CandidatePage response = api.candidatesSearchGet(apiKey, incumbentChallenge, minFirstFileDate, q, cycle, sortNullOnly, federalFundsFlag, sortHideNull, candidateId, name, perPage, electionYear, office, sort, candidateStatus, maxFirstFileDate, district, hasRaisedFunds, party, sortNullsLast, isActiveCandidate, page, state, year);
        // TODO: test validations
    }

    /**
     *  Candidate total receipts and disbursements aggregated by &#x60;aggregate_by&#x60;. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void candidatesTotalsAggregatesGetTest() throws ApiException {
        String apiKey = null;
        Integer maxElectionCycle = null;
        Boolean sortNullOnly = null;
        Boolean sortHideNull = null;
        Integer perPage = null;
        List<Integer> electionYear = null;
        String office = null;
        List<String> sort = null;
        Integer minElectionCycle = null;
        List<String> district = null;
        Boolean electionFull = null;
        String party = null;
        Boolean isActiveCandidate = null;
        Integer page = null;
        List<String> state = null;
        Boolean sortNullsLast = null;
        String aggregateBy = null;
        CandidateTotalAggregatePage response = api.candidatesTotalsAggregatesGet(apiKey, maxElectionCycle, sortNullOnly, sortHideNull, perPage, electionYear, office, sort, minElectionCycle, district, electionFull, party, isActiveCandidate, page, state, sortNullsLast, aggregateBy);
        // TODO: test validations
    }

    /**
     *  Aggregated candidate receipts and disbursements grouped by office by party by cycle. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void candidatesTotalsByOfficeByPartyGetTest() throws ApiException {
        String apiKey = null;
        Boolean electionFull = null;
        Boolean sortNullOnly = null;
        Integer page = null;
        Boolean isActiveCandidate = null;
        Boolean sortNullsLast = null;
        List<Integer> electionYear = null;
        Boolean sortHideNull = null;
        Integer perPage = null;
        String office = null;
        String sort = null;
        TotalByOfficeByPartyPage response = api.candidatesTotalsByOfficeByPartyGet(apiKey, electionFull, sortNullOnly, page, isActiveCandidate, sortNullsLast, electionYear, sortHideNull, perPage, office, sort);
        // TODO: test validations
    }

    /**
     *  Aggregated candidate receipts and disbursements grouped by office by cycle. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void candidatesTotalsByOfficeGetTest() throws ApiException {
        String apiKey = null;
        Integer maxElectionCycle = null;
        Boolean electionFull = null;
        Boolean isActiveCandidate = null;
        Integer page = null;
        Boolean sortNullOnly = null;
        Boolean sortNullsLast = null;
        List<Integer> electionYear = null;
        Boolean sortHideNull = null;
        Integer perPage = null;
        String office = null;
        String sort = null;
        Integer minElectionCycle = null;
        TotalByOfficePage response = api.candidatesTotalsByOfficeGet(apiKey, maxElectionCycle, electionFull, isActiveCandidate, page, sortNullOnly, sortNullsLast, electionYear, sortHideNull, perPage, office, sort, minElectionCycle);
        // TODO: test validations
    }

    /**
     *  Aggregated candidate receipts and disbursements grouped by cycle. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void candidatesTotalsGetTest() throws ApiException {
        String apiKey = null;
        String maxDisbursements = null;
        List<String> q = null;
        List<Integer> cycle = null;
        Boolean sortNullOnly = null;
        String maxCashOnHandEndPeriod = null;
        String maxDebtsOwedByCommittee = null;
        String minDisbursements = null;
        Boolean federalFundsFlag = null;
        Boolean sortHideNull = null;
        List<String> candidateId = null;
        Integer perPage = null;
        List<Integer> electionYear = null;
        List<String> office = null;
        String sort = null;
        List<String> district = null;
        Boolean electionFull = null;
        String minDebtsOwedByCommittee = null;
        String maxReceipts = null;
        Boolean hasRaisedFunds = null;
        List<String> party = null;
        Boolean sortNullsLast = null;
        Boolean isActiveCandidate = null;
        Integer page = null;
        List<String> state = null;
        String minCashOnHandEndPeriod = null;
        String minReceipts = null;
        CandidateHistoryTotalPage response = api.candidatesTotalsGet(apiKey, maxDisbursements, q, cycle, sortNullOnly, maxCashOnHandEndPeriod, maxDebtsOwedByCommittee, minDisbursements, federalFundsFlag, sortHideNull, candidateId, perPage, electionYear, office, sort, district, electionFull, minDebtsOwedByCommittee, maxReceipts, hasRaisedFunds, party, sortNullsLast, isActiveCandidate, page, state, minCashOnHandEndPeriod, minReceipts);
        // TODO: test validations
    }

    /**
     *  This endpoint is useful for finding detailed information about a particular candidate. Use the &#x60;candidate_id&#x60; to find the most recent information about that candidate. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void committeeCommitteeIdCandidatesGetTest() throws ApiException {
        String apiKey = null;
        String committeeId = null;
        List<String> incumbentChallenge = null;
        List<Integer> cycle = null;
        Boolean sortNullOnly = null;
        Boolean federalFundsFlag = null;
        Boolean sortHideNull = null;
        List<String> name = null;
        Integer perPage = null;
        List<Integer> electionYear = null;
        List<String> office = null;
        String sort = null;
        List<String> candidateStatus = null;
        List<String> district = null;
        Boolean hasRaisedFunds = null;
        List<String> party = null;
        Boolean sortNullsLast = null;
        Integer page = null;
        List<String> state = null;
        String year = null;
        CandidateDetailPage response = api.committeeCommitteeIdCandidatesGet(apiKey, committeeId, incumbentChallenge, cycle, sortNullOnly, federalFundsFlag, sortHideNull, name, perPage, electionYear, office, sort, candidateStatus, district, hasRaisedFunds, party, sortNullsLast, page, state, year);
        // TODO: test validations
    }

    /**
     *  Find out a candidate&#39;s characteristics over time. This is particularly useful if the candidate runs for the same office in different districts or you want to know more about a candidate&#39;s previous races.  This information is organized by &#x60;candidate_id&#x60;, so it won&#39;t help you find a candidate who ran for different offices over time; candidates get a new ID for each office. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void committeeCommitteeIdCandidatesHistoryCycleGetTest() throws ApiException {
        String apiKey = null;
        String committeeId = null;
        Integer cycle = null;
        Integer page = null;
        Boolean sortHideNull = null;
        Boolean electionFull = null;
        Integer perPage = null;
        Boolean sortNullOnly = null;
        String sort = null;
        Boolean sortNullsLast = null;
        CandidateHistoryPage response = api.committeeCommitteeIdCandidatesHistoryCycleGet(apiKey, committeeId, cycle, page, sortHideNull, electionFull, perPage, sortNullOnly, sort, sortNullsLast);
        // TODO: test validations
    }

    /**
     *  Find out a candidate&#39;s characteristics over time. This is particularly useful if the candidate runs for the same office in different districts or you want to know more about a candidate&#39;s previous races.  This information is organized by &#x60;candidate_id&#x60;, so it won&#39;t help you find a candidate who ran for different offices over time; candidates get a new ID for each office. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void committeeCommitteeIdCandidatesHistoryGetTest() throws ApiException {
        String apiKey = null;
        String committeeId = null;
        Integer page = null;
        Boolean sortHideNull = null;
        Boolean electionFull = null;
        Integer perPage = null;
        Boolean sortNullOnly = null;
        String sort = null;
        Boolean sortNullsLast = null;
        CandidateHistoryPage response = api.committeeCommitteeIdCandidatesHistoryGet(apiKey, committeeId, page, sortHideNull, electionFull, perPage, sortNullOnly, sort, sortNullsLast);
        // TODO: test validations
    }

}
