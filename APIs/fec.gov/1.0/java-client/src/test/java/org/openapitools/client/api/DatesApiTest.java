/*
 * OpenFEC
 * This application programming interface (API) allows you to explore the way candidates and committees fund their campaigns.    The Federal Election Commission (FEC) API is a RESTful web service supporting full-text and field-specific searches on FEC data. [Bulk downloads](https://www.fec.gov/data/advanced/?tab=bulk-data) are available on the current site. Information is tied to the underlying forms by file ID and image ID. Data is updated nightly.    There are a lot of data, and a good place to start is to use search to find interesting candidates and committees. Then, you can use their IDs to find report or line item details with the other endpoints. If you are interested in individual donors, check out contributor information in the `/schedule_a/` endpoints.    <b class=\"body\" id=\"getting_started_head\">Getting started with the openFEC API</b><br>    If you would like to use the FEC's API programmatically, you can sign up for your own API key using our form. Alternatively, you can still try out our API without an API key by using the web interface and using DEMO_KEY. Note that when you use the openFEC API you are subject to the [Terms of Service](https://github.com/fecgov/FEC/blob/master/TERMS-OF-SERVICE.md) and [Acceptable Use policy](https://github.com/fecgov/FEC/blob/master/ACCEPTABLE-USE-POLICY.md).    Signing up for an API key will enable you to place up to 1,000 calls an hour. Each call is limited to 100 results per page. You can email questions, comments or a request to get a key for 7,200 calls an hour (120 calls per minute) to <a href=\"mailto:APIinfo@fec.gov\">APIinfo@fec.gov</a>. You can also ask questions and discuss the data in a community led [group](https://groups.google.com/forum/#!forum/fec-data).    The model definitions and schema are available at [/swagger](/swagger/). This is useful for making wrappers and exploring the data.    A few restrictions limit the way you can use FEC data. For example, you canâ€™t use contributor lists for commercial purposes or to solicit donations. [Learn more here](https://www.fec.gov/updates/sale-or-use-contributor-information/).    [Inspect our source code](https://github.com/fecgov/openFEC). We welcome issues and pull requests!    <p><br></p> <h2 class=\"title\" id=\"signup_head\">Sign up for an API key</h2> <div id=\"apidatagov_signup\">Loading signup form...</div>
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.CalendarDatePage;
import org.openapitools.client.model.ElectionDatesGetDefaultResponse;
import java.time.LocalDate;
import org.openapitools.client.model.ReportingDatesGetDefaultResponse;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for DatesApi
 */
@Disabled
public class DatesApiTest {

    private final DatesApi api = new DatesApi();

    /**
     *  Returns CSV or ICS for downloading directly into calendar applications like Google, Outlook or other applications.  Combines the election and reporting dates with Commission meetings, conferences, outreach, Advisory Opinions, rules, litigation dates and other events into one calendar.  State filtering now applies to elections, reports and reporting periods.  Presidential pre-primary report due dates are not shown on even years. Filers generally opt to file monthly rather than submit over 50 pre-primary election reports. All reporting deadlines are available at /reporting-dates/ for reference.  This is [the sql function](https://github.com/fecgov/openFEC/blob/develop/data/migrations/V40__omnibus_dates.sql) that creates the calendar.  
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void calendarDatesExportGetTest() throws ApiException {
        String apiKey = null;
        List<Integer> calendarCategoryId = null;
        List<String> description = null;
        Boolean sortNullsLast = null;
        Boolean sortNullOnly = null;
        Integer page = null;
        LocalDate maxEndDate = null;
        List<String> summary = null;
        LocalDate minEndDate = null;
        Boolean sortHideNull = null;
        LocalDate minStartDate = null;
        Integer perPage = null;
        LocalDate maxStartDate = null;
        String renderer = null;
        String sort = null;
        Integer eventId = null;
        CalendarDatePage response = api.calendarDatesExportGet(apiKey, calendarCategoryId, description, sortNullsLast, sortNullOnly, page, maxEndDate, summary, minEndDate, sortHideNull, minStartDate, perPage, maxStartDate, renderer, sort, eventId);
        // TODO: test validations
    }

    /**
     *  Combines the election and reporting dates with Commission meetings, conferences, outreach, Advisory Opinions, rules, litigation dates and other events into one calendar.  State and report type filtering is no longer available. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void calendarDatesGetTest() throws ApiException {
        String apiKey = null;
        List<Integer> calendarCategoryId = null;
        List<String> description = null;
        Boolean sortNullsLast = null;
        Boolean sortNullOnly = null;
        Integer page = null;
        LocalDate maxEndDate = null;
        List<String> summary = null;
        LocalDate minEndDate = null;
        Boolean sortHideNull = null;
        LocalDate minStartDate = null;
        LocalDate maxStartDate = null;
        Integer perPage = null;
        String sort = null;
        Integer eventId = null;
        CalendarDatePage response = api.calendarDatesGet(apiKey, calendarCategoryId, description, sortNullsLast, sortNullOnly, page, maxEndDate, summary, minEndDate, sortHideNull, minStartDate, maxStartDate, perPage, sort, eventId);
        // TODO: test validations
    }

    /**
     *  FEC election dates since 1995. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void electionDatesGetTest() throws ApiException {
        String apiKey = null;
        List<String> electionState = null;
        LocalDate maxElectionDate = null;
        List<String> electionDistrict = null;
        LocalDate minUpdateDate = null;
        Boolean sortNullOnly = null;
        Boolean sortHideNull = null;
        LocalDate maxCreateDate = null;
        Integer perPage = null;
        List<String> electionYear = null;
        String sort = null;
        LocalDate minCreateDate = null;
        List<String> electionParty = null;
        List<String> officeSought = null;
        Boolean sortNullsLast = null;
        Integer page = null;
        LocalDate maxUpdateDate = null;
        List<String> electionTypeId = null;
        LocalDate maxPrimaryGeneralDate = null;
        LocalDate minElectionDate = null;
        LocalDate minPrimaryGeneralDate = null;
        ElectionDatesGetDefaultResponse response = api.electionDatesGet(apiKey, electionState, maxElectionDate, electionDistrict, minUpdateDate, sortNullOnly, sortHideNull, maxCreateDate, perPage, electionYear, sort, minCreateDate, electionParty, officeSought, sortNullsLast, page, maxUpdateDate, electionTypeId, maxPrimaryGeneralDate, minElectionDate, minPrimaryGeneralDate);
        // TODO: test validations
    }

    /**
     *  FEC election dates since 1995. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void reportingDatesGetTest() throws ApiException {
        String apiKey = null;
        LocalDate minUpdateDate = null;
        List<String> reportType = null;
        LocalDate minDueDate = null;
        Boolean sortNullOnly = null;
        Integer page = null;
        LocalDate maxDueDate = null;
        List<Integer> reportYear = null;
        Boolean sortNullsLast = null;
        LocalDate maxCreateDate = null;
        LocalDate maxUpdateDate = null;
        Integer perPage = null;
        Boolean sortHideNull = null;
        String sort = null;
        LocalDate minCreateDate = null;
        ReportingDatesGetDefaultResponse response = api.reportingDatesGet(apiKey, minUpdateDate, reportType, minDueDate, sortNullOnly, page, maxDueDate, reportYear, sortNullsLast, maxCreateDate, maxUpdateDate, perPage, sortHideNull, sort, minCreateDate);
        // TODO: test validations
    }

}
