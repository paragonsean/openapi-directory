/**
 * OpenFEC
 * This application programming interface (API) allows you to explore the way candidates and committees fund their campaigns.    The Federal Election Commission (FEC) API is a RESTful web service supporting full-text and field-specific searches on FEC data. [Bulk downloads](https://www.fec.gov/data/advanced/?tab=bulk-data) are available on the current site. Information is tied to the underlying forms by file ID and image ID. Data is updated nightly.    There are a lot of data, and a good place to start is to use search to find interesting candidates and committees. Then, you can use their IDs to find report or line item details with the other endpoints. If you are interested in individual donors, check out contributor information in the `/schedule_a/` endpoints.    <b class=\"body\" id=\"getting_started_head\">Getting started with the openFEC API</b><br>    If you would like to use the FEC's API programmatically, you can sign up for your own API key using our form. Alternatively, you can still try out our API without an API key by using the web interface and using DEMO_KEY. Note that when you use the openFEC API you are subject to the [Terms of Service](https://github.com/fecgov/FEC/blob/master/TERMS-OF-SERVICE.md) and [Acceptable Use policy](https://github.com/fecgov/FEC/blob/master/ACCEPTABLE-USE-POLICY.md).    Signing up for an API key will enable you to place up to 1,000 calls an hour. Each call is limited to 100 results per page. You can email questions, comments or a request to get a key for 7,200 calls an hour (120 calls per minute) to <a href=\"mailto:APIinfo@fec.gov\">APIinfo@fec.gov</a>. You can also ask questions and discuss the data in a community led [group](https://groups.google.com/forum/#!forum/fec-data).    The model definitions and schema are available at [/swagger](/swagger/). This is useful for making wrappers and exploring the data.    A few restrictions limit the way you can use FEC data. For example, you canâ€™t use contributor lists for commercial purposes or to solicit donations. [Learn more here](https://www.fec.gov/updates/sale-or-use-contributor-information/).    [Inspect our source code](https://github.com/fecgov/openFEC). We welcome issues and pull requests!    <p><br></p> <h2 class=\"title\" id=\"signup_head\">Sign up for an API key</h2> <div id=\"apidatagov_signup\">Loading signup form...</div>
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.OpenFec);
  }
}(this, function(expect, OpenFec) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new OpenFec.ReceiptsApi();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('ReceiptsApi', function() {
    describe('schedulesScheduleAByEmployerGet', function() {
      it('should call schedulesScheduleAByEmployerGet successfully', function(done) {
        //uncomment below and update the code to test schedulesScheduleAByEmployerGet
        //instance.schedulesScheduleAByEmployerGet(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('schedulesScheduleAByOccupationGet', function() {
      it('should call schedulesScheduleAByOccupationGet successfully', function(done) {
        //uncomment below and update the code to test schedulesScheduleAByOccupationGet
        //instance.schedulesScheduleAByOccupationGet(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('schedulesScheduleABySizeByCandidateGet', function() {
      it('should call schedulesScheduleABySizeByCandidateGet successfully', function(done) {
        //uncomment below and update the code to test schedulesScheduleABySizeByCandidateGet
        //instance.schedulesScheduleABySizeByCandidateGet(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('schedulesScheduleABySizeGet', function() {
      it('should call schedulesScheduleABySizeGet successfully', function(done) {
        //uncomment below and update the code to test schedulesScheduleABySizeGet
        //instance.schedulesScheduleABySizeGet(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('schedulesScheduleAByStateByCandidateGet', function() {
      it('should call schedulesScheduleAByStateByCandidateGet successfully', function(done) {
        //uncomment below and update the code to test schedulesScheduleAByStateByCandidateGet
        //instance.schedulesScheduleAByStateByCandidateGet(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('schedulesScheduleAByStateByCandidateTotalsGet', function() {
      it('should call schedulesScheduleAByStateByCandidateTotalsGet successfully', function(done) {
        //uncomment below and update the code to test schedulesScheduleAByStateByCandidateTotalsGet
        //instance.schedulesScheduleAByStateByCandidateTotalsGet(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('schedulesScheduleAByStateGet', function() {
      it('should call schedulesScheduleAByStateGet successfully', function(done) {
        //uncomment below and update the code to test schedulesScheduleAByStateGet
        //instance.schedulesScheduleAByStateGet(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('schedulesScheduleAByStateTotalsGet', function() {
      it('should call schedulesScheduleAByStateTotalsGet successfully', function(done) {
        //uncomment below and update the code to test schedulesScheduleAByStateTotalsGet
        //instance.schedulesScheduleAByStateTotalsGet(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('schedulesScheduleAByZipGet', function() {
      it('should call schedulesScheduleAByZipGet successfully', function(done) {
        //uncomment below and update the code to test schedulesScheduleAByZipGet
        //instance.schedulesScheduleAByZipGet(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('schedulesScheduleAEfileGet', function() {
      it('should call schedulesScheduleAEfileGet successfully', function(done) {
        //uncomment below and update the code to test schedulesScheduleAEfileGet
        //instance.schedulesScheduleAEfileGet(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('schedulesScheduleAGet', function() {
      it('should call schedulesScheduleAGet successfully', function(done) {
        //uncomment below and update the code to test schedulesScheduleAGet
        //instance.schedulesScheduleAGet(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('schedulesScheduleASubIdGet', function() {
      it('should call schedulesScheduleASubIdGet successfully', function(done) {
        //uncomment below and update the code to test schedulesScheduleASubIdGet
        //instance.schedulesScheduleASubIdGet(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
  });

}));
