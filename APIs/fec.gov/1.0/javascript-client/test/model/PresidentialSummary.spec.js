/**
 * OpenFEC
 * This application programming interface (API) allows you to explore the way candidates and committees fund their campaigns.    The Federal Election Commission (FEC) API is a RESTful web service supporting full-text and field-specific searches on FEC data. [Bulk downloads](https://www.fec.gov/data/advanced/?tab=bulk-data) are available on the current site. Information is tied to the underlying forms by file ID and image ID. Data is updated nightly.    There are a lot of data, and a good place to start is to use search to find interesting candidates and committees. Then, you can use their IDs to find report or line item details with the other endpoints. If you are interested in individual donors, check out contributor information in the `/schedule_a/` endpoints.    <b class=\"body\" id=\"getting_started_head\">Getting started with the openFEC API</b><br>    If you would like to use the FEC's API programmatically, you can sign up for your own API key using our form. Alternatively, you can still try out our API without an API key by using the web interface and using DEMO_KEY. Note that when you use the openFEC API you are subject to the [Terms of Service](https://github.com/fecgov/FEC/blob/master/TERMS-OF-SERVICE.md) and [Acceptable Use policy](https://github.com/fecgov/FEC/blob/master/ACCEPTABLE-USE-POLICY.md).    Signing up for an API key will enable you to place up to 1,000 calls an hour. Each call is limited to 100 results per page. You can email questions, comments or a request to get a key for 7,200 calls an hour (120 calls per minute) to <a href=\"mailto:APIinfo@fec.gov\">APIinfo@fec.gov</a>. You can also ask questions and discuss the data in a community led [group](https://groups.google.com/forum/#!forum/fec-data).    The model definitions and schema are available at [/swagger](/swagger/). This is useful for making wrappers and exploring the data.    A few restrictions limit the way you can use FEC data. For example, you canâ€™t use contributor lists for commercial purposes or to solicit donations. [Learn more here](https://www.fec.gov/updates/sale-or-use-contributor-information/).    [Inspect our source code](https://github.com/fecgov/openFEC). We welcome issues and pull requests!    <p><br></p> <h2 class=\"title\" id=\"signup_head\">Sign up for an API key</h2> <div id=\"apidatagov_signup\">Loading signup form...</div>
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.OpenFec);
  }
}(this, function(expect, OpenFec) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new OpenFec.PresidentialSummary();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('PresidentialSummary', function() {
    it('should create an instance of PresidentialSummary', function() {
      // uncomment below and update the code to test PresidentialSummary
      //var instance = new OpenFec.PresidentialSummary();
      //expect(instance).to.be.a(OpenFec.PresidentialSummary);
    });

    it('should have the property candidateContributionsLessRepayments (base name: "candidate_contributions_less_repayments")', function() {
      // uncomment below and update the code to test the property candidateContributionsLessRepayments
      //var instance = new OpenFec.PresidentialSummary();
      //expect(instance).to.be();
    });

    it('should have the property candidateId (base name: "candidate_id")', function() {
      // uncomment below and update the code to test the property candidateId
      //var instance = new OpenFec.PresidentialSummary();
      //expect(instance).to.be();
    });

    it('should have the property candidateLastName (base name: "candidate_last_name")', function() {
      // uncomment below and update the code to test the property candidateLastName
      //var instance = new OpenFec.PresidentialSummary();
      //expect(instance).to.be();
    });

    it('should have the property candidateName (base name: "candidate_name")', function() {
      // uncomment below and update the code to test the property candidateName
      //var instance = new OpenFec.PresidentialSummary();
      //expect(instance).to.be();
    });

    it('should have the property candidatePartyAffiliation (base name: "candidate_party_affiliation")', function() {
      // uncomment below and update the code to test the property candidatePartyAffiliation
      //var instance = new OpenFec.PresidentialSummary();
      //expect(instance).to.be();
    });

    it('should have the property cashOnHandEnd (base name: "cash_on_hand_end")', function() {
      // uncomment below and update the code to test the property cashOnHandEnd
      //var instance = new OpenFec.PresidentialSummary();
      //expect(instance).to.be();
    });

    it('should have the property committeeDesignation (base name: "committee_designation")', function() {
      // uncomment below and update the code to test the property committeeDesignation
      //var instance = new OpenFec.PresidentialSummary();
      //expect(instance).to.be();
    });

    it('should have the property committeeId (base name: "committee_id")', function() {
      // uncomment below and update the code to test the property committeeId
      //var instance = new OpenFec.PresidentialSummary();
      //expect(instance).to.be();
    });

    it('should have the property committeeName (base name: "committee_name")', function() {
      // uncomment below and update the code to test the property committeeName
      //var instance = new OpenFec.PresidentialSummary();
      //expect(instance).to.be();
    });

    it('should have the property committeeType (base name: "committee_type")', function() {
      // uncomment below and update the code to test the property committeeType
      //var instance = new OpenFec.PresidentialSummary();
      //expect(instance).to.be();
    });

    it('should have the property debtsOwedByCommittee (base name: "debts_owed_by_committee")', function() {
      // uncomment below and update the code to test the property debtsOwedByCommittee
      //var instance = new OpenFec.PresidentialSummary();
      //expect(instance).to.be();
    });

    it('should have the property disbursementsLessOffsets (base name: "disbursements_less_offsets")', function() {
      // uncomment below and update the code to test the property disbursementsLessOffsets
      //var instance = new OpenFec.PresidentialSummary();
      //expect(instance).to.be();
    });

    it('should have the property electionYear (base name: "election_year")', function() {
      // uncomment below and update the code to test the property electionYear
      //var instance = new OpenFec.PresidentialSummary();
      //expect(instance).to.be();
    });

    it('should have the property exemptLegalAccountingDisbursement (base name: "exempt_legal_accounting_disbursement")', function() {
      // uncomment below and update the code to test the property exemptLegalAccountingDisbursement
      //var instance = new OpenFec.PresidentialSummary();
      //expect(instance).to.be();
    });

    it('should have the property federalFunds (base name: "federal_funds")', function() {
      // uncomment below and update the code to test the property federalFunds
      //var instance = new OpenFec.PresidentialSummary();
      //expect(instance).to.be();
    });

    it('should have the property fundraisingDisbursements (base name: "fundraising_disbursements")', function() {
      // uncomment below and update the code to test the property fundraisingDisbursements
      //var instance = new OpenFec.PresidentialSummary();
      //expect(instance).to.be();
    });

    it('should have the property individualContributionsLessRefunds (base name: "individual_contributions_less_refunds")', function() {
      // uncomment below and update the code to test the property individualContributionsLessRefunds
      //var instance = new OpenFec.PresidentialSummary();
      //expect(instance).to.be();
    });

    it('should have the property netReceipts (base name: "net_receipts")', function() {
      // uncomment below and update the code to test the property netReceipts
      //var instance = new OpenFec.PresidentialSummary();
      //expect(instance).to.be();
    });

    it('should have the property offsetsToOperatingExpenditures (base name: "offsets_to_operating_expenditures")', function() {
      // uncomment below and update the code to test the property offsetsToOperatingExpenditures
      //var instance = new OpenFec.PresidentialSummary();
      //expect(instance).to.be();
    });

    it('should have the property operatingExpenditures (base name: "operating_expenditures")', function() {
      // uncomment below and update the code to test the property operatingExpenditures
      //var instance = new OpenFec.PresidentialSummary();
      //expect(instance).to.be();
    });

    it('should have the property otherDisbursements (base name: "other_disbursements")', function() {
      // uncomment below and update the code to test the property otherDisbursements
      //var instance = new OpenFec.PresidentialSummary();
      //expect(instance).to.be();
    });

    it('should have the property pacContributionsLessRefunds (base name: "pac_contributions_less_refunds")', function() {
      // uncomment below and update the code to test the property pacContributionsLessRefunds
      //var instance = new OpenFec.PresidentialSummary();
      //expect(instance).to.be();
    });

    it('should have the property partyContributionsLessRefunds (base name: "party_contributions_less_refunds")', function() {
      // uncomment below and update the code to test the property partyContributionsLessRefunds
      //var instance = new OpenFec.PresidentialSummary();
      //expect(instance).to.be();
    });

    it('should have the property repaymentsLoansMadeByCandidate (base name: "repayments_loans_made_by_candidate")', function() {
      // uncomment below and update the code to test the property repaymentsLoansMadeByCandidate
      //var instance = new OpenFec.PresidentialSummary();
      //expect(instance).to.be();
    });

    it('should have the property repaymentsOtherLoans (base name: "repayments_other_loans")', function() {
      // uncomment below and update the code to test the property repaymentsOtherLoans
      //var instance = new OpenFec.PresidentialSummary();
      //expect(instance).to.be();
    });

    it('should have the property roundedNetReceipts (base name: "rounded_net_receipts")', function() {
      // uncomment below and update the code to test the property roundedNetReceipts
      //var instance = new OpenFec.PresidentialSummary();
      //expect(instance).to.be();
    });

    it('should have the property totalContributionRefunds (base name: "total_contribution_refunds")', function() {
      // uncomment below and update the code to test the property totalContributionRefunds
      //var instance = new OpenFec.PresidentialSummary();
      //expect(instance).to.be();
    });

    it('should have the property totalLoanRepaymentsMade (base name: "total_loan_repayments_made")', function() {
      // uncomment below and update the code to test the property totalLoanRepaymentsMade
      //var instance = new OpenFec.PresidentialSummary();
      //expect(instance).to.be();
    });

    it('should have the property transfersFromAffiliatedCommittees (base name: "transfers_from_affiliated_committees")', function() {
      // uncomment below and update the code to test the property transfersFromAffiliatedCommittees
      //var instance = new OpenFec.PresidentialSummary();
      //expect(instance).to.be();
    });

    it('should have the property transfersToOtherAuthorizedCommittees (base name: "transfers_to_other_authorized_committees")', function() {
      // uncomment below and update the code to test the property transfersToOtherAuthorizedCommittees
      //var instance = new OpenFec.PresidentialSummary();
      //expect(instance).to.be();
    });

  });

}));
