/**
 * OpenFEC
 * This application programming interface (API) allows you to explore the way candidates and committees fund their campaigns.    The Federal Election Commission (FEC) API is a RESTful web service supporting full-text and field-specific searches on FEC data. [Bulk downloads](https://www.fec.gov/data/advanced/?tab=bulk-data) are available on the current site. Information is tied to the underlying forms by file ID and image ID. Data is updated nightly.    There are a lot of data, and a good place to start is to use search to find interesting candidates and committees. Then, you can use their IDs to find report or line item details with the other endpoints. If you are interested in individual donors, check out contributor information in the `/schedule_a/` endpoints.    <b class=\"body\" id=\"getting_started_head\">Getting started with the openFEC API</b><br>    If you would like to use the FEC's API programmatically, you can sign up for your own API key using our form. Alternatively, you can still try out our API without an API key by using the web interface and using DEMO_KEY. Note that when you use the openFEC API you are subject to the [Terms of Service](https://github.com/fecgov/FEC/blob/master/TERMS-OF-SERVICE.md) and [Acceptable Use policy](https://github.com/fecgov/FEC/blob/master/ACCEPTABLE-USE-POLICY.md).    Signing up for an API key will enable you to place up to 1,000 calls an hour. Each call is limited to 100 results per page. You can email questions, comments or a request to get a key for 7,200 calls an hour (120 calls per minute) to <a href=\"mailto:APIinfo@fec.gov\">APIinfo@fec.gov</a>. You can also ask questions and discuss the data in a community led [group](https://groups.google.com/forum/#!forum/fec-data).    The model definitions and schema are available at [/swagger](/swagger/). This is useful for making wrappers and exploring the data.    A few restrictions limit the way you can use FEC data. For example, you canâ€™t use contributor lists for commercial purposes or to solicit donations. [Learn more here](https://www.fec.gov/updates/sale-or-use-contributor-information/).    [Inspect our source code](https://github.com/fecgov/openFEC). We welcome issues and pull requests!    <p><br></p> <h2 class=\"title\" id=\"signup_head\">Sign up for an API key</h2> <div id=\"apidatagov_signup\">Loading signup form...</div>
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.OpenFec);
  }
}(this, function(expect, OpenFec) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new OpenFec.CommunicationCost();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('CommunicationCost', function() {
    it('should create an instance of CommunicationCost', function() {
      // uncomment below and update the code to test CommunicationCost
      //var instance = new OpenFec.CommunicationCost();
      //expect(instance).to.be.a(OpenFec.CommunicationCost);
    });

    it('should have the property actionCode (base name: "action_code")', function() {
      // uncomment below and update the code to test the property actionCode
      //var instance = new OpenFec.CommunicationCost();
      //expect(instance).to.be();
    });

    it('should have the property actionCodeFull (base name: "action_code_full")', function() {
      // uncomment below and update the code to test the property actionCodeFull
      //var instance = new OpenFec.CommunicationCost();
      //expect(instance).to.be();
    });

    it('should have the property candidateFirstName (base name: "candidate_first_name")', function() {
      // uncomment below and update the code to test the property candidateFirstName
      //var instance = new OpenFec.CommunicationCost();
      //expect(instance).to.be();
    });

    it('should have the property candidateId (base name: "candidate_id")', function() {
      // uncomment below and update the code to test the property candidateId
      //var instance = new OpenFec.CommunicationCost();
      //expect(instance).to.be();
    });

    it('should have the property candidateLastName (base name: "candidate_last_name")', function() {
      // uncomment below and update the code to test the property candidateLastName
      //var instance = new OpenFec.CommunicationCost();
      //expect(instance).to.be();
    });

    it('should have the property candidateMiddleName (base name: "candidate_middle_name")', function() {
      // uncomment below and update the code to test the property candidateMiddleName
      //var instance = new OpenFec.CommunicationCost();
      //expect(instance).to.be();
    });

    it('should have the property candidateName (base name: "candidate_name")', function() {
      // uncomment below and update the code to test the property candidateName
      //var instance = new OpenFec.CommunicationCost();
      //expect(instance).to.be();
    });

    it('should have the property candidateOffice (base name: "candidate_office")', function() {
      // uncomment below and update the code to test the property candidateOffice
      //var instance = new OpenFec.CommunicationCost();
      //expect(instance).to.be();
    });

    it('should have the property candidateOfficeDistrict (base name: "candidate_office_district")', function() {
      // uncomment below and update the code to test the property candidateOfficeDistrict
      //var instance = new OpenFec.CommunicationCost();
      //expect(instance).to.be();
    });

    it('should have the property candidateOfficeFull (base name: "candidate_office_full")', function() {
      // uncomment below and update the code to test the property candidateOfficeFull
      //var instance = new OpenFec.CommunicationCost();
      //expect(instance).to.be();
    });

    it('should have the property candidateOfficeState (base name: "candidate_office_state")', function() {
      // uncomment below and update the code to test the property candidateOfficeState
      //var instance = new OpenFec.CommunicationCost();
      //expect(instance).to.be();
    });

    it('should have the property committeeId (base name: "committee_id")', function() {
      // uncomment below and update the code to test the property committeeId
      //var instance = new OpenFec.CommunicationCost();
      //expect(instance).to.be();
    });

    it('should have the property committeeName (base name: "committee_name")', function() {
      // uncomment below and update the code to test the property committeeName
      //var instance = new OpenFec.CommunicationCost();
      //expect(instance).to.be();
    });

    it('should have the property communicationClass (base name: "communication_class")', function() {
      // uncomment below and update the code to test the property communicationClass
      //var instance = new OpenFec.CommunicationCost();
      //expect(instance).to.be();
    });

    it('should have the property communicationType (base name: "communication_type")', function() {
      // uncomment below and update the code to test the property communicationType
      //var instance = new OpenFec.CommunicationCost();
      //expect(instance).to.be();
    });

    it('should have the property communicationTypeFull (base name: "communication_type_full")', function() {
      // uncomment below and update the code to test the property communicationTypeFull
      //var instance = new OpenFec.CommunicationCost();
      //expect(instance).to.be();
    });

    it('should have the property cycle (base name: "cycle")', function() {
      // uncomment below and update the code to test the property cycle
      //var instance = new OpenFec.CommunicationCost();
      //expect(instance).to.be();
    });

    it('should have the property fileNumber (base name: "file_number")', function() {
      // uncomment below and update the code to test the property fileNumber
      //var instance = new OpenFec.CommunicationCost();
      //expect(instance).to.be();
    });

    it('should have the property formTypeCode (base name: "form_type_code")', function() {
      // uncomment below and update the code to test the property formTypeCode
      //var instance = new OpenFec.CommunicationCost();
      //expect(instance).to.be();
    });

    it('should have the property imageNumber (base name: "image_number")', function() {
      // uncomment below and update the code to test the property imageNumber
      //var instance = new OpenFec.CommunicationCost();
      //expect(instance).to.be();
    });

    it('should have the property originalSubId (base name: "original_sub_id")', function() {
      // uncomment below and update the code to test the property originalSubId
      //var instance = new OpenFec.CommunicationCost();
      //expect(instance).to.be();
    });

    it('should have the property pdfUrl (base name: "pdf_url")', function() {
      // uncomment below and update the code to test the property pdfUrl
      //var instance = new OpenFec.CommunicationCost();
      //expect(instance).to.be();
    });

    it('should have the property primaryGeneralIndicator (base name: "primary_general_indicator")', function() {
      // uncomment below and update the code to test the property primaryGeneralIndicator
      //var instance = new OpenFec.CommunicationCost();
      //expect(instance).to.be();
    });

    it('should have the property primaryGeneralIndicatorDescription (base name: "primary_general_indicator_description")', function() {
      // uncomment below and update the code to test the property primaryGeneralIndicatorDescription
      //var instance = new OpenFec.CommunicationCost();
      //expect(instance).to.be();
    });

    it('should have the property purpose (base name: "purpose")', function() {
      // uncomment below and update the code to test the property purpose
      //var instance = new OpenFec.CommunicationCost();
      //expect(instance).to.be();
    });

    it('should have the property reportType (base name: "report_type")', function() {
      // uncomment below and update the code to test the property reportType
      //var instance = new OpenFec.CommunicationCost();
      //expect(instance).to.be();
    });

    it('should have the property reportYear (base name: "report_year")', function() {
      // uncomment below and update the code to test the property reportYear
      //var instance = new OpenFec.CommunicationCost();
      //expect(instance).to.be();
    });

    it('should have the property scheduleType (base name: "schedule_type")', function() {
      // uncomment below and update the code to test the property scheduleType
      //var instance = new OpenFec.CommunicationCost();
      //expect(instance).to.be();
    });

    it('should have the property scheduleTypeFull (base name: "schedule_type_full")', function() {
      // uncomment below and update the code to test the property scheduleTypeFull
      //var instance = new OpenFec.CommunicationCost();
      //expect(instance).to.be();
    });

    it('should have the property stateFull (base name: "state_full")', function() {
      // uncomment below and update the code to test the property stateFull
      //var instance = new OpenFec.CommunicationCost();
      //expect(instance).to.be();
    });

    it('should have the property subId (base name: "sub_id")', function() {
      // uncomment below and update the code to test the property subId
      //var instance = new OpenFec.CommunicationCost();
      //expect(instance).to.be();
    });

    it('should have the property supportOpposeIndicator (base name: "support_oppose_indicator")', function() {
      // uncomment below and update the code to test the property supportOpposeIndicator
      //var instance = new OpenFec.CommunicationCost();
      //expect(instance).to.be();
    });

    it('should have the property tranId (base name: "tran_id")', function() {
      // uncomment below and update the code to test the property tranId
      //var instance = new OpenFec.CommunicationCost();
      //expect(instance).to.be();
    });

    it('should have the property transactionAmount (base name: "transaction_amount")', function() {
      // uncomment below and update the code to test the property transactionAmount
      //var instance = new OpenFec.CommunicationCost();
      //expect(instance).to.be();
    });

    it('should have the property transactionDate (base name: "transaction_date")', function() {
      // uncomment below and update the code to test the property transactionDate
      //var instance = new OpenFec.CommunicationCost();
      //expect(instance).to.be();
    });

    it('should have the property transactionType (base name: "transaction_type")', function() {
      // uncomment below and update the code to test the property transactionType
      //var instance = new OpenFec.CommunicationCost();
      //expect(instance).to.be();
    });

  });

}));
