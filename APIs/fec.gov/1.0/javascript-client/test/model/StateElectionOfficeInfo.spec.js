/**
 * OpenFEC
 * This application programming interface (API) allows you to explore the way candidates and committees fund their campaigns.    The Federal Election Commission (FEC) API is a RESTful web service supporting full-text and field-specific searches on FEC data. [Bulk downloads](https://www.fec.gov/data/advanced/?tab=bulk-data) are available on the current site. Information is tied to the underlying forms by file ID and image ID. Data is updated nightly.    There are a lot of data, and a good place to start is to use search to find interesting candidates and committees. Then, you can use their IDs to find report or line item details with the other endpoints. If you are interested in individual donors, check out contributor information in the `/schedule_a/` endpoints.    <b class=\"body\" id=\"getting_started_head\">Getting started with the openFEC API</b><br>    If you would like to use the FEC's API programmatically, you can sign up for your own API key using our form. Alternatively, you can still try out our API without an API key by using the web interface and using DEMO_KEY. Note that when you use the openFEC API you are subject to the [Terms of Service](https://github.com/fecgov/FEC/blob/master/TERMS-OF-SERVICE.md) and [Acceptable Use policy](https://github.com/fecgov/FEC/blob/master/ACCEPTABLE-USE-POLICY.md).    Signing up for an API key will enable you to place up to 1,000 calls an hour. Each call is limited to 100 results per page. You can email questions, comments or a request to get a key for 7,200 calls an hour (120 calls per minute) to <a href=\"mailto:APIinfo@fec.gov\">APIinfo@fec.gov</a>. You can also ask questions and discuss the data in a community led [group](https://groups.google.com/forum/#!forum/fec-data).    The model definitions and schema are available at [/swagger](/swagger/). This is useful for making wrappers and exploring the data.    A few restrictions limit the way you can use FEC data. For example, you canâ€™t use contributor lists for commercial purposes or to solicit donations. [Learn more here](https://www.fec.gov/updates/sale-or-use-contributor-information/).    [Inspect our source code](https://github.com/fecgov/openFEC). We welcome issues and pull requests!    <p><br></p> <h2 class=\"title\" id=\"signup_head\">Sign up for an API key</h2> <div id=\"apidatagov_signup\">Loading signup form...</div>
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.OpenFec);
  }
}(this, function(expect, OpenFec) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new OpenFec.StateElectionOfficeInfo();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('StateElectionOfficeInfo', function() {
    it('should create an instance of StateElectionOfficeInfo', function() {
      // uncomment below and update the code to test StateElectionOfficeInfo
      //var instance = new OpenFec.StateElectionOfficeInfo();
      //expect(instance).to.be.a(OpenFec.StateElectionOfficeInfo);
    });

    it('should have the property addressLine1 (base name: "address_line1")', function() {
      // uncomment below and update the code to test the property addressLine1
      //var instance = new OpenFec.StateElectionOfficeInfo();
      //expect(instance).to.be();
    });

    it('should have the property addressLine2 (base name: "address_line2")', function() {
      // uncomment below and update the code to test the property addressLine2
      //var instance = new OpenFec.StateElectionOfficeInfo();
      //expect(instance).to.be();
    });

    it('should have the property city (base name: "city")', function() {
      // uncomment below and update the code to test the property city
      //var instance = new OpenFec.StateElectionOfficeInfo();
      //expect(instance).to.be();
    });

    it('should have the property email (base name: "email")', function() {
      // uncomment below and update the code to test the property email
      //var instance = new OpenFec.StateElectionOfficeInfo();
      //expect(instance).to.be();
    });

    it('should have the property faxNumber (base name: "fax_number")', function() {
      // uncomment below and update the code to test the property faxNumber
      //var instance = new OpenFec.StateElectionOfficeInfo();
      //expect(instance).to.be();
    });

    it('should have the property mailingAddress1 (base name: "mailing_address1")', function() {
      // uncomment below and update the code to test the property mailingAddress1
      //var instance = new OpenFec.StateElectionOfficeInfo();
      //expect(instance).to.be();
    });

    it('should have the property mailingAddress2 (base name: "mailing_address2")', function() {
      // uncomment below and update the code to test the property mailingAddress2
      //var instance = new OpenFec.StateElectionOfficeInfo();
      //expect(instance).to.be();
    });

    it('should have the property mailingCity (base name: "mailing_city")', function() {
      // uncomment below and update the code to test the property mailingCity
      //var instance = new OpenFec.StateElectionOfficeInfo();
      //expect(instance).to.be();
    });

    it('should have the property mailingState (base name: "mailing_state")', function() {
      // uncomment below and update the code to test the property mailingState
      //var instance = new OpenFec.StateElectionOfficeInfo();
      //expect(instance).to.be();
    });

    it('should have the property mailingZipcode (base name: "mailing_zipcode")', function() {
      // uncomment below and update the code to test the property mailingZipcode
      //var instance = new OpenFec.StateElectionOfficeInfo();
      //expect(instance).to.be();
    });

    it('should have the property officeName (base name: "office_name")', function() {
      // uncomment below and update the code to test the property officeName
      //var instance = new OpenFec.StateElectionOfficeInfo();
      //expect(instance).to.be();
    });

    it('should have the property officeType (base name: "office_type")', function() {
      // uncomment below and update the code to test the property officeType
      //var instance = new OpenFec.StateElectionOfficeInfo();
      //expect(instance).to.be();
    });

    it('should have the property primaryPhoneNumber (base name: "primary_phone_number")', function() {
      // uncomment below and update the code to test the property primaryPhoneNumber
      //var instance = new OpenFec.StateElectionOfficeInfo();
      //expect(instance).to.be();
    });

    it('should have the property secondaryPhoneNumber (base name: "secondary_phone_number")', function() {
      // uncomment below and update the code to test the property secondaryPhoneNumber
      //var instance = new OpenFec.StateElectionOfficeInfo();
      //expect(instance).to.be();
    });

    it('should have the property state (base name: "state")', function() {
      // uncomment below and update the code to test the property state
      //var instance = new OpenFec.StateElectionOfficeInfo();
      //expect(instance).to.be();
    });

    it('should have the property stateFullName (base name: "state_full_name")', function() {
      // uncomment below and update the code to test the property stateFullName
      //var instance = new OpenFec.StateElectionOfficeInfo();
      //expect(instance).to.be();
    });

    it('should have the property websiteUrl1 (base name: "website_url1")', function() {
      // uncomment below and update the code to test the property websiteUrl1
      //var instance = new OpenFec.StateElectionOfficeInfo();
      //expect(instance).to.be();
    });

    it('should have the property websiteUrl2 (base name: "website_url2")', function() {
      // uncomment below and update the code to test the property websiteUrl2
      //var instance = new OpenFec.StateElectionOfficeInfo();
      //expect(instance).to.be();
    });

    it('should have the property zipCode (base name: "zip_code")', function() {
      // uncomment below and update the code to test the property zipCode
      //var instance = new OpenFec.StateElectionOfficeInfo();
      //expect(instance).to.be();
    });

  });

}));
