/**
 * OpenFEC
 * This application programming interface (API) allows you to explore the way candidates and committees fund their campaigns.    The Federal Election Commission (FEC) API is a RESTful web service supporting full-text and field-specific searches on FEC data. [Bulk downloads](https://www.fec.gov/data/advanced/?tab=bulk-data) are available on the current site. Information is tied to the underlying forms by file ID and image ID. Data is updated nightly.    There are a lot of data, and a good place to start is to use search to find interesting candidates and committees. Then, you can use their IDs to find report or line item details with the other endpoints. If you are interested in individual donors, check out contributor information in the `/schedule_a/` endpoints.    <b class=\"body\" id=\"getting_started_head\">Getting started with the openFEC API</b><br>    If you would like to use the FEC's API programmatically, you can sign up for your own API key using our form. Alternatively, you can still try out our API without an API key by using the web interface and using DEMO_KEY. Note that when you use the openFEC API you are subject to the [Terms of Service](https://github.com/fecgov/FEC/blob/master/TERMS-OF-SERVICE.md) and [Acceptable Use policy](https://github.com/fecgov/FEC/blob/master/ACCEPTABLE-USE-POLICY.md).    Signing up for an API key will enable you to place up to 1,000 calls an hour. Each call is limited to 100 results per page. You can email questions, comments or a request to get a key for 7,200 calls an hour (120 calls per minute) to <a href=\"mailto:APIinfo@fec.gov\">APIinfo@fec.gov</a>. You can also ask questions and discuss the data in a community led [group](https://groups.google.com/forum/#!forum/fec-data).    The model definitions and schema are available at [/swagger](/swagger/). This is useful for making wrappers and exploring the data.    A few restrictions limit the way you can use FEC data. For example, you canâ€™t use contributor lists for commercial purposes or to solicit donations. [Learn more here](https://www.fec.gov/updates/sale-or-use-contributor-information/).    [Inspect our source code](https://github.com/fecgov/openFEC). We welcome issues and pull requests!    <p><br></p> <h2 class=\"title\" id=\"signup_head\">Sign up for an API key</h2> <div id=\"apidatagov_signup\">Loading signup form...</div>
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The CandidateHistoryTotal model module.
 * @module model/CandidateHistoryTotal
 * @version 1.0
 */
class CandidateHistoryTotal {
    /**
     * Constructs a new <code>CandidateHistoryTotal</code>.
     * @alias module:model/CandidateHistoryTotal
     * @param candidateId {String}  A unique identifier assigned to each candidate registered with the FEC. If a person runs for several offices, that person will have separate candidate IDs for each office. First character indicates office - [P]residential, [H]ouse, [S]enate]. Second character is the last digit of the two-year period the ID was created. Third and fourth is the candidate state. Presidential IDs don't have state. Fifth and sixth is the district when the candidate first ran. This does not change if the candidate/member's district changes during re-districting. Presidential IDs don't have districts. The rest is sequence. 
     * @param cycle {Number}  Filter records to only those that are applicable to a given two-year period. This cycle follows the traditional House election cycle and subdivides the presidential and Senate elections into comparable two-year blocks. The cycle begins with an odd year and is named for its ending, even year. 
     * @param isElection {Boolean} 
     * @param twoYearPeriod {Number}  Two-year election cycle in which a candidate runs for office. Calculated from Form 2. The cycle begins with an odd year and is named for its ending, even year. This cycle follows the traditional house election cycle and subdivides the presidential and Senate elections into comparable two-year blocks. To retrieve data for the entire four years of a presidential term or six years of a senatorial term, you will need the `election_full` flag. 
     */
    constructor(candidateId, cycle, isElection, twoYearPeriod) { 
        
        CandidateHistoryTotal.initialize(this, candidateId, cycle, isElection, twoYearPeriod);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, candidateId, cycle, isElection, twoYearPeriod) { 
        obj['candidate_id'] = candidateId;
        obj['cycle'] = cycle;
        obj['is_election'] = isElection;
        obj['two_year_period'] = twoYearPeriod;
    }

    /**
     * Constructs a <code>CandidateHistoryTotal</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/CandidateHistoryTotal} obj Optional instance to populate.
     * @return {module:model/CandidateHistoryTotal} The populated <code>CandidateHistoryTotal</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new CandidateHistoryTotal();

            if (data.hasOwnProperty('active_through')) {
                obj['active_through'] = ApiClient.convertToType(data['active_through'], 'Number');
            }
            if (data.hasOwnProperty('address_city')) {
                obj['address_city'] = ApiClient.convertToType(data['address_city'], 'String');
            }
            if (data.hasOwnProperty('address_state')) {
                obj['address_state'] = ApiClient.convertToType(data['address_state'], 'String');
            }
            if (data.hasOwnProperty('address_street_1')) {
                obj['address_street_1'] = ApiClient.convertToType(data['address_street_1'], 'String');
            }
            if (data.hasOwnProperty('address_street_2')) {
                obj['address_street_2'] = ApiClient.convertToType(data['address_street_2'], 'String');
            }
            if (data.hasOwnProperty('address_zip')) {
                obj['address_zip'] = ApiClient.convertToType(data['address_zip'], 'String');
            }
            if (data.hasOwnProperty('candidate_election_year')) {
                obj['candidate_election_year'] = ApiClient.convertToType(data['candidate_election_year'], 'Number');
            }
            if (data.hasOwnProperty('candidate_id')) {
                obj['candidate_id'] = ApiClient.convertToType(data['candidate_id'], 'String');
            }
            if (data.hasOwnProperty('candidate_inactive')) {
                obj['candidate_inactive'] = ApiClient.convertToType(data['candidate_inactive'], 'Boolean');
            }
            if (data.hasOwnProperty('candidate_status')) {
                obj['candidate_status'] = ApiClient.convertToType(data['candidate_status'], 'String');
            }
            if (data.hasOwnProperty('cash_on_hand_end_period')) {
                obj['cash_on_hand_end_period'] = ApiClient.convertToType(data['cash_on_hand_end_period'], 'Number');
            }
            if (data.hasOwnProperty('coverage_end_date')) {
                obj['coverage_end_date'] = ApiClient.convertToType(data['coverage_end_date'], 'Date');
            }
            if (data.hasOwnProperty('coverage_start_date')) {
                obj['coverage_start_date'] = ApiClient.convertToType(data['coverage_start_date'], 'Date');
            }
            if (data.hasOwnProperty('cycle')) {
                obj['cycle'] = ApiClient.convertToType(data['cycle'], 'Number');
            }
            if (data.hasOwnProperty('cycles')) {
                obj['cycles'] = ApiClient.convertToType(data['cycles'], ['Number']);
            }
            if (data.hasOwnProperty('debts_owed_by_committee')) {
                obj['debts_owed_by_committee'] = ApiClient.convertToType(data['debts_owed_by_committee'], 'Number');
            }
            if (data.hasOwnProperty('disbursements')) {
                obj['disbursements'] = ApiClient.convertToType(data['disbursements'], 'Number');
            }
            if (data.hasOwnProperty('district')) {
                obj['district'] = ApiClient.convertToType(data['district'], 'String');
            }
            if (data.hasOwnProperty('district_number')) {
                obj['district_number'] = ApiClient.convertToType(data['district_number'], 'Number');
            }
            if (data.hasOwnProperty('election_districts')) {
                obj['election_districts'] = ApiClient.convertToType(data['election_districts'], ['String']);
            }
            if (data.hasOwnProperty('election_year')) {
                obj['election_year'] = ApiClient.convertToType(data['election_year'], 'Number');
            }
            if (data.hasOwnProperty('election_years')) {
                obj['election_years'] = ApiClient.convertToType(data['election_years'], ['Number']);
            }
            if (data.hasOwnProperty('fec_cycles_in_election')) {
                obj['fec_cycles_in_election'] = ApiClient.convertToType(data['fec_cycles_in_election'], ['Number']);
            }
            if (data.hasOwnProperty('federal_funds_flag')) {
                obj['federal_funds_flag'] = ApiClient.convertToType(data['federal_funds_flag'], 'Boolean');
            }
            if (data.hasOwnProperty('first_file_date')) {
                obj['first_file_date'] = ApiClient.convertToType(data['first_file_date'], 'Date');
            }
            if (data.hasOwnProperty('flags')) {
                obj['flags'] = ApiClient.convertToType(data['flags'], 'String');
            }
            if (data.hasOwnProperty('has_raised_funds')) {
                obj['has_raised_funds'] = ApiClient.convertToType(data['has_raised_funds'], 'Boolean');
            }
            if (data.hasOwnProperty('incumbent_challenge')) {
                obj['incumbent_challenge'] = ApiClient.convertToType(data['incumbent_challenge'], 'String');
            }
            if (data.hasOwnProperty('incumbent_challenge_full')) {
                obj['incumbent_challenge_full'] = ApiClient.convertToType(data['incumbent_challenge_full'], 'String');
            }
            if (data.hasOwnProperty('individual_itemized_contributions')) {
                obj['individual_itemized_contributions'] = ApiClient.convertToType(data['individual_itemized_contributions'], 'Number');
            }
            if (data.hasOwnProperty('is_election')) {
                obj['is_election'] = ApiClient.convertToType(data['is_election'], 'Boolean');
            }
            if (data.hasOwnProperty('last_f2_date')) {
                obj['last_f2_date'] = ApiClient.convertToType(data['last_f2_date'], 'Date');
            }
            if (data.hasOwnProperty('last_file_date')) {
                obj['last_file_date'] = ApiClient.convertToType(data['last_file_date'], 'Date');
            }
            if (data.hasOwnProperty('load_date')) {
                obj['load_date'] = ApiClient.convertToType(data['load_date'], 'Date');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('office')) {
                obj['office'] = ApiClient.convertToType(data['office'], 'String');
            }
            if (data.hasOwnProperty('office_full')) {
                obj['office_full'] = ApiClient.convertToType(data['office_full'], 'String');
            }
            if (data.hasOwnProperty('other_political_committee_contributions')) {
                obj['other_political_committee_contributions'] = ApiClient.convertToType(data['other_political_committee_contributions'], 'Number');
            }
            if (data.hasOwnProperty('party')) {
                obj['party'] = ApiClient.convertToType(data['party'], 'String');
            }
            if (data.hasOwnProperty('party_full')) {
                obj['party_full'] = ApiClient.convertToType(data['party_full'], 'String');
            }
            if (data.hasOwnProperty('receipts')) {
                obj['receipts'] = ApiClient.convertToType(data['receipts'], 'Number');
            }
            if (data.hasOwnProperty('rounded_election_years')) {
                obj['rounded_election_years'] = ApiClient.convertToType(data['rounded_election_years'], ['Number']);
            }
            if (data.hasOwnProperty('state')) {
                obj['state'] = ApiClient.convertToType(data['state'], 'String');
            }
            if (data.hasOwnProperty('state_full')) {
                obj['state_full'] = ApiClient.convertToType(data['state_full'], 'String');
            }
            if (data.hasOwnProperty('transfers_from_other_authorized_committee')) {
                obj['transfers_from_other_authorized_committee'] = ApiClient.convertToType(data['transfers_from_other_authorized_committee'], 'Number');
            }
            if (data.hasOwnProperty('two_year_period')) {
                obj['two_year_period'] = ApiClient.convertToType(data['two_year_period'], 'Number');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>CandidateHistoryTotal</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>CandidateHistoryTotal</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of CandidateHistoryTotal.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['address_city'] && !(typeof data['address_city'] === 'string' || data['address_city'] instanceof String)) {
            throw new Error("Expected the field `address_city` to be a primitive type in the JSON string but got " + data['address_city']);
        }
        // ensure the json data is a string
        if (data['address_state'] && !(typeof data['address_state'] === 'string' || data['address_state'] instanceof String)) {
            throw new Error("Expected the field `address_state` to be a primitive type in the JSON string but got " + data['address_state']);
        }
        // ensure the json data is a string
        if (data['address_street_1'] && !(typeof data['address_street_1'] === 'string' || data['address_street_1'] instanceof String)) {
            throw new Error("Expected the field `address_street_1` to be a primitive type in the JSON string but got " + data['address_street_1']);
        }
        // ensure the json data is a string
        if (data['address_street_2'] && !(typeof data['address_street_2'] === 'string' || data['address_street_2'] instanceof String)) {
            throw new Error("Expected the field `address_street_2` to be a primitive type in the JSON string but got " + data['address_street_2']);
        }
        // ensure the json data is a string
        if (data['address_zip'] && !(typeof data['address_zip'] === 'string' || data['address_zip'] instanceof String)) {
            throw new Error("Expected the field `address_zip` to be a primitive type in the JSON string but got " + data['address_zip']);
        }
        // ensure the json data is a string
        if (data['candidate_id'] && !(typeof data['candidate_id'] === 'string' || data['candidate_id'] instanceof String)) {
            throw new Error("Expected the field `candidate_id` to be a primitive type in the JSON string but got " + data['candidate_id']);
        }
        // ensure the json data is a string
        if (data['candidate_status'] && !(typeof data['candidate_status'] === 'string' || data['candidate_status'] instanceof String)) {
            throw new Error("Expected the field `candidate_status` to be a primitive type in the JSON string but got " + data['candidate_status']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['cycles'])) {
            throw new Error("Expected the field `cycles` to be an array in the JSON data but got " + data['cycles']);
        }
        // ensure the json data is a string
        if (data['district'] && !(typeof data['district'] === 'string' || data['district'] instanceof String)) {
            throw new Error("Expected the field `district` to be a primitive type in the JSON string but got " + data['district']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['election_districts'])) {
            throw new Error("Expected the field `election_districts` to be an array in the JSON data but got " + data['election_districts']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['election_years'])) {
            throw new Error("Expected the field `election_years` to be an array in the JSON data but got " + data['election_years']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['fec_cycles_in_election'])) {
            throw new Error("Expected the field `fec_cycles_in_election` to be an array in the JSON data but got " + data['fec_cycles_in_election']);
        }
        // ensure the json data is a string
        if (data['flags'] && !(typeof data['flags'] === 'string' || data['flags'] instanceof String)) {
            throw new Error("Expected the field `flags` to be a primitive type in the JSON string but got " + data['flags']);
        }
        // ensure the json data is a string
        if (data['incumbent_challenge'] && !(typeof data['incumbent_challenge'] === 'string' || data['incumbent_challenge'] instanceof String)) {
            throw new Error("Expected the field `incumbent_challenge` to be a primitive type in the JSON string but got " + data['incumbent_challenge']);
        }
        // ensure the json data is a string
        if (data['incumbent_challenge_full'] && !(typeof data['incumbent_challenge_full'] === 'string' || data['incumbent_challenge_full'] instanceof String)) {
            throw new Error("Expected the field `incumbent_challenge_full` to be a primitive type in the JSON string but got " + data['incumbent_challenge_full']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // ensure the json data is a string
        if (data['office'] && !(typeof data['office'] === 'string' || data['office'] instanceof String)) {
            throw new Error("Expected the field `office` to be a primitive type in the JSON string but got " + data['office']);
        }
        // ensure the json data is a string
        if (data['office_full'] && !(typeof data['office_full'] === 'string' || data['office_full'] instanceof String)) {
            throw new Error("Expected the field `office_full` to be a primitive type in the JSON string but got " + data['office_full']);
        }
        // ensure the json data is a string
        if (data['party'] && !(typeof data['party'] === 'string' || data['party'] instanceof String)) {
            throw new Error("Expected the field `party` to be a primitive type in the JSON string but got " + data['party']);
        }
        // ensure the json data is a string
        if (data['party_full'] && !(typeof data['party_full'] === 'string' || data['party_full'] instanceof String)) {
            throw new Error("Expected the field `party_full` to be a primitive type in the JSON string but got " + data['party_full']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['rounded_election_years'])) {
            throw new Error("Expected the field `rounded_election_years` to be an array in the JSON data but got " + data['rounded_election_years']);
        }
        // ensure the json data is a string
        if (data['state'] && !(typeof data['state'] === 'string' || data['state'] instanceof String)) {
            throw new Error("Expected the field `state` to be a primitive type in the JSON string but got " + data['state']);
        }
        // ensure the json data is a string
        if (data['state_full'] && !(typeof data['state_full'] === 'string' || data['state_full'] instanceof String)) {
            throw new Error("Expected the field `state_full` to be a primitive type in the JSON string but got " + data['state_full']);
        }

        return true;
    }


}

CandidateHistoryTotal.RequiredProperties = ["candidate_id", "cycle", "is_election", "two_year_period"];

/**
 * Last year a candidate was active. This field is specific to the candidate_id so if the same person runs for another office, there may be a different record for them.
 * @member {Number} active_through
 */
CandidateHistoryTotal.prototype['active_through'] = undefined;

/**
 * City of candidate's address, as reported on their Form 2.
 * @member {String} address_city
 */
CandidateHistoryTotal.prototype['address_city'] = undefined;

/**
 * State of candidate's address, as reported on their Form 2.
 * @member {String} address_state
 */
CandidateHistoryTotal.prototype['address_state'] = undefined;

/**
 * Street of candidate's address, as reported on their Form 2.
 * @member {String} address_street_1
 */
CandidateHistoryTotal.prototype['address_street_1'] = undefined;

/**
 * Additional street information of candidate's address, as reported on their Form 2.
 * @member {String} address_street_2
 */
CandidateHistoryTotal.prototype['address_street_2'] = undefined;

/**
 * Zip code of candidate's address, as reported on their Form 2.
 * @member {String} address_zip
 */
CandidateHistoryTotal.prototype['address_zip'] = undefined;

/**
 * The last year of the cycle for this election.
 * @member {Number} candidate_election_year
 */
CandidateHistoryTotal.prototype['candidate_election_year'] = undefined;

/**
 *  A unique identifier assigned to each candidate registered with the FEC. If a person runs for several offices, that person will have separate candidate IDs for each office. First character indicates office - [P]residential, [H]ouse, [S]enate]. Second character is the last digit of the two-year period the ID was created. Third and fourth is the candidate state. Presidential IDs don't have state. Fifth and sixth is the district when the candidate first ran. This does not change if the candidate/member's district changes during re-districting. Presidential IDs don't have districts. The rest is sequence. 
 * @member {String} candidate_id
 */
CandidateHistoryTotal.prototype['candidate_id'] = undefined;

/**
 *  True indicates that a candidate is inactive. 
 * @member {Boolean} candidate_inactive
 */
CandidateHistoryTotal.prototype['candidate_inactive'] = undefined;

/**
 * One-letter code explaining if the candidate is:         - C present candidate         - F future candidate         - N not yet a candidate         - P prior candidate 
 * @member {String} candidate_status
 */
CandidateHistoryTotal.prototype['candidate_status'] = undefined;

/**
 * Ending cash balance on the most recent filing
 * @member {Number} cash_on_hand_end_period
 */
CandidateHistoryTotal.prototype['cash_on_hand_end_period'] = undefined;

/**
 * Ending date of the reporting period
 * @member {Date} coverage_end_date
 */
CandidateHistoryTotal.prototype['coverage_end_date'] = undefined;

/**
 * Beginning date of the reporting period
 * @member {Date} coverage_start_date
 */
CandidateHistoryTotal.prototype['coverage_start_date'] = undefined;

/**
 *  Filter records to only those that are applicable to a given two-year period. This cycle follows the traditional House election cycle and subdivides the presidential and Senate elections into comparable two-year blocks. The cycle begins with an odd year and is named for its ending, even year. 
 * @member {Number} cycle
 */
CandidateHistoryTotal.prototype['cycle'] = undefined;

/**
 *  Two-year election cycle in which a candidate runs for office. Calculated from Form 2. The cycle begins with an odd year and is named for its ending, even year. This cycle follows the traditional house election cycle and subdivides the presidential and Senate elections into comparable two-year blocks. To retrieve data for the entire four years of a presidential term or six years of a senatorial term, you will need the `election_full` flag. 
 * @member {Array.<Number>} cycles
 */
CandidateHistoryTotal.prototype['cycles'] = undefined;

/**
 * Debts owed by the committee
 * @member {Number} debts_owed_by_committee
 */
CandidateHistoryTotal.prototype['debts_owed_by_committee'] = undefined;

/**
 * @member {Number} disbursements
 */
CandidateHistoryTotal.prototype['disbursements'] = undefined;

/**
 * Two-digit US House distirict of the office the candidate is running for. Presidential, Senate and House at-large candidates will have District 00.
 * @member {String} district
 */
CandidateHistoryTotal.prototype['district'] = undefined;

/**
 * One-letter code explaining if the candidate is:         - C present candidate         - F future candidate         - N not yet a candidate         - P prior candidate 
 * @member {Number} district_number
 */
CandidateHistoryTotal.prototype['district_number'] = undefined;

/**
 * Two-digit US House distirict of the office the candidate is running for. Presidential, Senate and House at-large candidates will have District 00.
 * @member {Array.<String>} election_districts
 */
CandidateHistoryTotal.prototype['election_districts'] = undefined;

/**
 * Year of election
 * @member {Number} election_year
 */
CandidateHistoryTotal.prototype['election_year'] = undefined;

/**
 * Years in which a candidate ran for office.
 * @member {Array.<Number>} election_years
 */
CandidateHistoryTotal.prototype['election_years'] = undefined;

/**
 * FEC cycles are included in candidate election years.
 * @member {Array.<Number>} fec_cycles_in_election
 */
CandidateHistoryTotal.prototype['fec_cycles_in_election'] = undefined;

/**
 * A boolean the describes if a presidential candidate has accepted federal funds. The flag will be false for House and Senate candidates.
 * @member {Boolean} federal_funds_flag
 */
CandidateHistoryTotal.prototype['federal_funds_flag'] = undefined;

/**
 * The day the FEC received the candidate's first filing. This is a F2 candidate registration.
 * @member {Date} first_file_date
 */
CandidateHistoryTotal.prototype['first_file_date'] = undefined;

/**
 * @member {String} flags
 */
CandidateHistoryTotal.prototype['flags'] = undefined;

/**
 * A boolean that describes if a candidate's committee has ever received any receipts for their campaign for this particular office. (Candidates have separate candidate IDs for each office.)
 * @member {Boolean} has_raised_funds
 */
CandidateHistoryTotal.prototype['has_raised_funds'] = undefined;

/**
 * One-letter code ('I', 'C', 'O') explaining if the candidate is an incumbent, a challenger, or if the seat is open.
 * @member {String} incumbent_challenge
 */
CandidateHistoryTotal.prototype['incumbent_challenge'] = undefined;

/**
 * Explains if the candidate is an incumbent, a challenger, or if the seat is open.
 * @member {String} incumbent_challenge_full
 */
CandidateHistoryTotal.prototype['incumbent_challenge_full'] = undefined;

/**
 * Individual itemized contributions are from individuals whose aggregate contributions total over $200 per individual per year. Be aware, some filers choose to itemize donations $200 or less.
 * @member {Number} individual_itemized_contributions
 */
CandidateHistoryTotal.prototype['individual_itemized_contributions'] = undefined;

/**
 * @member {Boolean} is_election
 */
CandidateHistoryTotal.prototype['is_election'] = undefined;

/**
 * The day the FEC received the candidate's most recent Form 2
 * @member {Date} last_f2_date
 */
CandidateHistoryTotal.prototype['last_f2_date'] = undefined;

/**
 * The day the FEC received the candidate's most recent filing
 * @member {Date} last_file_date
 */
CandidateHistoryTotal.prototype['last_file_date'] = undefined;

/**
 * Date the information was loaded into the FEC systems. This can be affected by reseting systems and other factors, refer to receipt_date for the day that the FEC received the paper or electronic document. Keep in mind that paper filings take more time to process and there can be a lag between load_date and receipt_date. This field can be helpful to identify paper records that have been processed recently.
 * @member {Date} load_date
 */
CandidateHistoryTotal.prototype['load_date'] = undefined;

/**
 * Name of candidate running for office
 * @member {String} name
 */
CandidateHistoryTotal.prototype['name'] = undefined;

/**
 * Federal office candidate runs for: H, S or P
 * @member {String} office
 */
CandidateHistoryTotal.prototype['office'] = undefined;

/**
 * Federal office candidate runs for: House, Senate or presidential
 * @member {String} office_full
 */
CandidateHistoryTotal.prototype['office_full'] = undefined;

/**
 * Other committees contributions
 * @member {Number} other_political_committee_contributions
 */
CandidateHistoryTotal.prototype['other_political_committee_contributions'] = undefined;

/**
 * Three-letter code for the party affiliated with a candidate or committee. For example, DEM for Democratic Party and REP for Republican Party.
 * @member {String} party
 */
CandidateHistoryTotal.prototype['party'] = undefined;

/**
 * Party affiliated with a candidate or committee
 * @member {String} party_full
 */
CandidateHistoryTotal.prototype['party_full'] = undefined;

/**
 * @member {Number} receipts
 */
CandidateHistoryTotal.prototype['receipts'] = undefined;

/**
 * Rounded election years in which a candidate ran for office
 * @member {Array.<Number>} rounded_election_years
 */
CandidateHistoryTotal.prototype['rounded_election_years'] = undefined;

/**
 * US state or territory where a candidate runs for office
 * @member {String} state
 */
CandidateHistoryTotal.prototype['state'] = undefined;

/**
 * US state or territory where a candidate runs for office
 * @member {String} state_full
 */
CandidateHistoryTotal.prototype['state_full'] = undefined;

/**
 * Transfers from authorized committees
 * @member {Number} transfers_from_other_authorized_committee
 */
CandidateHistoryTotal.prototype['transfers_from_other_authorized_committee'] = undefined;

/**
 *  Two-year election cycle in which a candidate runs for office. Calculated from Form 2. The cycle begins with an odd year and is named for its ending, even year. This cycle follows the traditional house election cycle and subdivides the presidential and Senate elections into comparable two-year blocks. To retrieve data for the entire four years of a presidential term or six years of a senatorial term, you will need the `election_full` flag. 
 * @member {Number} two_year_period
 */
CandidateHistoryTotal.prototype['two_year_period'] = undefined;






export default CandidateHistoryTotal;

