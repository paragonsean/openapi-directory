/**
 * OpenFEC
 * This application programming interface (API) allows you to explore the way candidates and committees fund their campaigns.    The Federal Election Commission (FEC) API is a RESTful web service supporting full-text and field-specific searches on FEC data. [Bulk downloads](https://www.fec.gov/data/advanced/?tab=bulk-data) are available on the current site. Information is tied to the underlying forms by file ID and image ID. Data is updated nightly.    There are a lot of data, and a good place to start is to use search to find interesting candidates and committees. Then, you can use their IDs to find report or line item details with the other endpoints. If you are interested in individual donors, check out contributor information in the `/schedule_a/` endpoints.    <b class=\"body\" id=\"getting_started_head\">Getting started with the openFEC API</b><br>    If you would like to use the FEC's API programmatically, you can sign up for your own API key using our form. Alternatively, you can still try out our API without an API key by using the web interface and using DEMO_KEY. Note that when you use the openFEC API you are subject to the [Terms of Service](https://github.com/fecgov/FEC/blob/master/TERMS-OF-SERVICE.md) and [Acceptable Use policy](https://github.com/fecgov/FEC/blob/master/ACCEPTABLE-USE-POLICY.md).    Signing up for an API key will enable you to place up to 1,000 calls an hour. Each call is limited to 100 results per page. You can email questions, comments or a request to get a key for 7,200 calls an hour (120 calls per minute) to <a href=\"mailto:APIinfo@fec.gov\">APIinfo@fec.gov</a>. You can also ask questions and discuss the data in a community led [group](https://groups.google.com/forum/#!forum/fec-data).    The model definitions and schema are available at [/swagger](/swagger/). This is useful for making wrappers and exploring the data.    A few restrictions limit the way you can use FEC data. For example, you canâ€™t use contributor lists for commercial purposes or to solicit donations. [Learn more here](https://www.fec.gov/updates/sale-or-use-contributor-information/).    [Inspect our source code](https://github.com/fecgov/openFEC). We welcome issues and pull requests!    <p><br></p> <h2 class=\"title\" id=\"signup_head\">Sign up for an API key</h2> <div id=\"apidatagov_signup\">Loading signup form...</div>
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The PresidentialSummary model module.
 * @module model/PresidentialSummary
 * @version 1.0
 */
class PresidentialSummary {
    /**
     * Constructs a new <code>PresidentialSummary</code>.
     * @alias module:model/PresidentialSummary
     */
    constructor() { 
        
        PresidentialSummary.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>PresidentialSummary</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/PresidentialSummary} obj Optional instance to populate.
     * @return {module:model/PresidentialSummary} The populated <code>PresidentialSummary</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new PresidentialSummary();

            if (data.hasOwnProperty('candidate_contributions_less_repayments')) {
                obj['candidate_contributions_less_repayments'] = ApiClient.convertToType(data['candidate_contributions_less_repayments'], 'Number');
            }
            if (data.hasOwnProperty('candidate_id')) {
                obj['candidate_id'] = ApiClient.convertToType(data['candidate_id'], 'String');
            }
            if (data.hasOwnProperty('candidate_last_name')) {
                obj['candidate_last_name'] = ApiClient.convertToType(data['candidate_last_name'], 'String');
            }
            if (data.hasOwnProperty('candidate_name')) {
                obj['candidate_name'] = ApiClient.convertToType(data['candidate_name'], 'String');
            }
            if (data.hasOwnProperty('candidate_party_affiliation')) {
                obj['candidate_party_affiliation'] = ApiClient.convertToType(data['candidate_party_affiliation'], 'String');
            }
            if (data.hasOwnProperty('cash_on_hand_end')) {
                obj['cash_on_hand_end'] = ApiClient.convertToType(data['cash_on_hand_end'], 'Number');
            }
            if (data.hasOwnProperty('committee_designation')) {
                obj['committee_designation'] = ApiClient.convertToType(data['committee_designation'], 'String');
            }
            if (data.hasOwnProperty('committee_id')) {
                obj['committee_id'] = ApiClient.convertToType(data['committee_id'], 'String');
            }
            if (data.hasOwnProperty('committee_name')) {
                obj['committee_name'] = ApiClient.convertToType(data['committee_name'], 'String');
            }
            if (data.hasOwnProperty('committee_type')) {
                obj['committee_type'] = ApiClient.convertToType(data['committee_type'], 'String');
            }
            if (data.hasOwnProperty('debts_owed_by_committee')) {
                obj['debts_owed_by_committee'] = ApiClient.convertToType(data['debts_owed_by_committee'], 'Number');
            }
            if (data.hasOwnProperty('disbursements_less_offsets')) {
                obj['disbursements_less_offsets'] = ApiClient.convertToType(data['disbursements_less_offsets'], 'Number');
            }
            if (data.hasOwnProperty('election_year')) {
                obj['election_year'] = ApiClient.convertToType(data['election_year'], 'Number');
            }
            if (data.hasOwnProperty('exempt_legal_accounting_disbursement')) {
                obj['exempt_legal_accounting_disbursement'] = ApiClient.convertToType(data['exempt_legal_accounting_disbursement'], 'Number');
            }
            if (data.hasOwnProperty('federal_funds')) {
                obj['federal_funds'] = ApiClient.convertToType(data['federal_funds'], 'Number');
            }
            if (data.hasOwnProperty('fundraising_disbursements')) {
                obj['fundraising_disbursements'] = ApiClient.convertToType(data['fundraising_disbursements'], 'Number');
            }
            if (data.hasOwnProperty('individual_contributions_less_refunds')) {
                obj['individual_contributions_less_refunds'] = ApiClient.convertToType(data['individual_contributions_less_refunds'], 'Number');
            }
            if (data.hasOwnProperty('net_receipts')) {
                obj['net_receipts'] = ApiClient.convertToType(data['net_receipts'], 'Number');
            }
            if (data.hasOwnProperty('offsets_to_operating_expenditures')) {
                obj['offsets_to_operating_expenditures'] = ApiClient.convertToType(data['offsets_to_operating_expenditures'], 'Number');
            }
            if (data.hasOwnProperty('operating_expenditures')) {
                obj['operating_expenditures'] = ApiClient.convertToType(data['operating_expenditures'], 'Number');
            }
            if (data.hasOwnProperty('other_disbursements')) {
                obj['other_disbursements'] = ApiClient.convertToType(data['other_disbursements'], 'Number');
            }
            if (data.hasOwnProperty('pac_contributions_less_refunds')) {
                obj['pac_contributions_less_refunds'] = ApiClient.convertToType(data['pac_contributions_less_refunds'], 'Number');
            }
            if (data.hasOwnProperty('party_contributions_less_refunds')) {
                obj['party_contributions_less_refunds'] = ApiClient.convertToType(data['party_contributions_less_refunds'], 'Number');
            }
            if (data.hasOwnProperty('repayments_loans_made_by_candidate')) {
                obj['repayments_loans_made_by_candidate'] = ApiClient.convertToType(data['repayments_loans_made_by_candidate'], 'Number');
            }
            if (data.hasOwnProperty('repayments_other_loans')) {
                obj['repayments_other_loans'] = ApiClient.convertToType(data['repayments_other_loans'], 'Number');
            }
            if (data.hasOwnProperty('rounded_net_receipts')) {
                obj['rounded_net_receipts'] = ApiClient.convertToType(data['rounded_net_receipts'], 'Number');
            }
            if (data.hasOwnProperty('total_contribution_refunds')) {
                obj['total_contribution_refunds'] = ApiClient.convertToType(data['total_contribution_refunds'], 'Number');
            }
            if (data.hasOwnProperty('total_loan_repayments_made')) {
                obj['total_loan_repayments_made'] = ApiClient.convertToType(data['total_loan_repayments_made'], 'Number');
            }
            if (data.hasOwnProperty('transfers_from_affiliated_committees')) {
                obj['transfers_from_affiliated_committees'] = ApiClient.convertToType(data['transfers_from_affiliated_committees'], 'Number');
            }
            if (data.hasOwnProperty('transfers_to_other_authorized_committees')) {
                obj['transfers_to_other_authorized_committees'] = ApiClient.convertToType(data['transfers_to_other_authorized_committees'], 'Number');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>PresidentialSummary</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>PresidentialSummary</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['candidate_id'] && !(typeof data['candidate_id'] === 'string' || data['candidate_id'] instanceof String)) {
            throw new Error("Expected the field `candidate_id` to be a primitive type in the JSON string but got " + data['candidate_id']);
        }
        // ensure the json data is a string
        if (data['candidate_last_name'] && !(typeof data['candidate_last_name'] === 'string' || data['candidate_last_name'] instanceof String)) {
            throw new Error("Expected the field `candidate_last_name` to be a primitive type in the JSON string but got " + data['candidate_last_name']);
        }
        // ensure the json data is a string
        if (data['candidate_name'] && !(typeof data['candidate_name'] === 'string' || data['candidate_name'] instanceof String)) {
            throw new Error("Expected the field `candidate_name` to be a primitive type in the JSON string but got " + data['candidate_name']);
        }
        // ensure the json data is a string
        if (data['candidate_party_affiliation'] && !(typeof data['candidate_party_affiliation'] === 'string' || data['candidate_party_affiliation'] instanceof String)) {
            throw new Error("Expected the field `candidate_party_affiliation` to be a primitive type in the JSON string but got " + data['candidate_party_affiliation']);
        }
        // ensure the json data is a string
        if (data['committee_designation'] && !(typeof data['committee_designation'] === 'string' || data['committee_designation'] instanceof String)) {
            throw new Error("Expected the field `committee_designation` to be a primitive type in the JSON string but got " + data['committee_designation']);
        }
        // ensure the json data is a string
        if (data['committee_id'] && !(typeof data['committee_id'] === 'string' || data['committee_id'] instanceof String)) {
            throw new Error("Expected the field `committee_id` to be a primitive type in the JSON string but got " + data['committee_id']);
        }
        // ensure the json data is a string
        if (data['committee_name'] && !(typeof data['committee_name'] === 'string' || data['committee_name'] instanceof String)) {
            throw new Error("Expected the field `committee_name` to be a primitive type in the JSON string but got " + data['committee_name']);
        }
        // ensure the json data is a string
        if (data['committee_type'] && !(typeof data['committee_type'] === 'string' || data['committee_type'] instanceof String)) {
            throw new Error("Expected the field `committee_type` to be a primitive type in the JSON string but got " + data['committee_type']);
        }

        return true;
    }


}



/**
 *  candidate contributions less repayments 
 * @member {Number} candidate_contributions_less_repayments
 */
PresidentialSummary.prototype['candidate_contributions_less_repayments'] = undefined;

/**
 *  A unique identifier assigned to each candidate registered with the FEC. If a person runs for several offices, that person will have separate candidate IDs for each office. First character indicates office - [P]residential, [H]ouse, [S]enate]. Second character is the last digit of the two-year period the ID was created. Third and fourth is the candidate state. Presidential IDs don't have state. Fifth and sixth is the district when the candidate first ran. This does not change if the candidate/member's district changes during re-districting. Presidential IDs don't have districts. The rest is sequence.   -P00000001    All candidates   -P00000002    Democrasts   -P00000003    Republicans 
 * @member {String} candidate_id
 */
PresidentialSummary.prototype['candidate_id'] = undefined;

/**
 *  Candidate last name 
 * @member {String} candidate_last_name
 */
PresidentialSummary.prototype['candidate_last_name'] = undefined;

/**
 * Name of candidate running for office
 * @member {String} candidate_name
 */
PresidentialSummary.prototype['candidate_name'] = undefined;

/**
 * Three-letter code for the party affiliated with a candidate or committee. For example, DEM for Democratic Party and REP for Republican Party.
 * @member {String} candidate_party_affiliation
 */
PresidentialSummary.prototype['candidate_party_affiliation'] = undefined;

/**
 * Ending cash balance on the most recent filing
 * @member {Number} cash_on_hand_end
 */
PresidentialSummary.prototype['cash_on_hand_end'] = undefined;

/**
 * The one-letter designation code of the organization:          - A authorized by a candidate          - J joint fundraising committee          - P principal campaign committee of a candidate          - U unauthorized          - B lobbyist/registrant PAC          - D leadership PAC 
 * @member {String} committee_designation
 */
PresidentialSummary.prototype['committee_designation'] = undefined;

/**
 *  A unique identifier assigned to each candidate registered with the FEC. If a person runs for several offices, that person will have separate candidate IDs for each office. First character indicates office - [P]residential, [H]ouse, [S]enate]. Second character is the last digit of the two-year period the ID was created. Third and fourth is the candidate state. Presidential IDs don't have state. Fifth and sixth is the district when the candidate first ran. This does not change if the candidate/member's district changes during re-districting. Presidential IDs don't have districts. The rest is sequence. 
 * @member {String} committee_id
 */
PresidentialSummary.prototype['committee_id'] = undefined;

/**
 * The name of the committee. If a committee changes its name,     the most recent name will be shown. Committee names are not unique. Use committee_id     for looking up records.
 * @member {String} committee_name
 */
PresidentialSummary.prototype['committee_name'] = undefined;

/**
 * The one-letter type code of the organization:         - C communication cost         - D delegate         - E electioneering communication         - H House         - I independent expenditure filer (not a committee)         - N PAC - nonqualified         - O independent expenditure-only (super PACs)         - P presidential         - Q PAC - qualified         - S Senate         - U single candidate independent expenditure         - V PAC with non-contribution account, nonqualified         - W PAC with non-contribution account, qualified         - X party, nonqualified         - Y party, qualified         - Z national party non-federal account 
 * @member {String} committee_type
 */
PresidentialSummary.prototype['committee_type'] = undefined;

/**
 * Debts owed by the committee
 * @member {Number} debts_owed_by_committee
 */
PresidentialSummary.prototype['debts_owed_by_committee'] = undefined;

/**
 *  disbursements less offsets 
 * @member {Number} disbursements_less_offsets
 */
PresidentialSummary.prototype['disbursements_less_offsets'] = undefined;

/**
 * Year of election
 * @member {Number} election_year
 */
PresidentialSummary.prototype['election_year'] = undefined;

/**
 *  exempt legal accounting disbursement 
 * @member {Number} exempt_legal_accounting_disbursement
 */
PresidentialSummary.prototype['exempt_legal_accounting_disbursement'] = undefined;

/**
 * Federal funds: Public funding of presidential elections means that qualified presidential candidates                 receive federal government funds to pay for the valid expenses of their political campaigns                 in both the primary and general elections.
 * @member {Number} federal_funds
 */
PresidentialSummary.prototype['federal_funds'] = undefined;

/**
 *  fundraising disbursements 
 * @member {Number} fundraising_disbursements
 */
PresidentialSummary.prototype['fundraising_disbursements'] = undefined;

/**
 *  individual contributions less refunds 
 * @member {Number} individual_contributions_less_refunds
 */
PresidentialSummary.prototype['individual_contributions_less_refunds'] = undefined;

/**
 *  Contributions received 
 * @member {Number} net_receipts
 */
PresidentialSummary.prototype['net_receipts'] = undefined;

/**
 * Offsets to operating expenditures
 * @member {Number} offsets_to_operating_expenditures
 */
PresidentialSummary.prototype['offsets_to_operating_expenditures'] = undefined;

/**
 * Total operating expenditures
 * @member {Number} operating_expenditures
 */
PresidentialSummary.prototype['operating_expenditures'] = undefined;

/**
 * Other disbursements
 * @member {Number} other_disbursements
 */
PresidentialSummary.prototype['other_disbursements'] = undefined;

/**
 *  pac contributions less refunds 
 * @member {Number} pac_contributions_less_refunds
 */
PresidentialSummary.prototype['pac_contributions_less_refunds'] = undefined;

/**
 *  party contributions less refunds 
 * @member {Number} party_contributions_less_refunds
 */
PresidentialSummary.prototype['party_contributions_less_refunds'] = undefined;

/**
 *  repayments loans made by candidate 
 * @member {Number} repayments_loans_made_by_candidate
 */
PresidentialSummary.prototype['repayments_loans_made_by_candidate'] = undefined;

/**
 *  repayments other loans 
 * @member {Number} repayments_other_loans
 */
PresidentialSummary.prototype['repayments_other_loans'] = undefined;

/**
 *  Net receipts, in millions 
 * @member {Number} rounded_net_receipts
 */
PresidentialSummary.prototype['rounded_net_receipts'] = undefined;

/**
 *  total contribution refunds 
 * @member {Number} total_contribution_refunds
 */
PresidentialSummary.prototype['total_contribution_refunds'] = undefined;

/**
 *  total loan repayments made 
 * @member {Number} total_loan_repayments_made
 */
PresidentialSummary.prototype['total_loan_repayments_made'] = undefined;

/**
 *  transfers from affiliated committees 
 * @member {Number} transfers_from_affiliated_committees
 */
PresidentialSummary.prototype['transfers_from_affiliated_committees'] = undefined;

/**
 *  transfers to other authorized committees 
 * @member {Number} transfers_to_other_authorized_committees
 */
PresidentialSummary.prototype['transfers_to_other_authorized_committees'] = undefined;






export default PresidentialSummary;

