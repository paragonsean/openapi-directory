/**
 * OpenFEC
 * This application programming interface (API) allows you to explore the way candidates and committees fund their campaigns.    The Federal Election Commission (FEC) API is a RESTful web service supporting full-text and field-specific searches on FEC data. [Bulk downloads](https://www.fec.gov/data/advanced/?tab=bulk-data) are available on the current site. Information is tied to the underlying forms by file ID and image ID. Data is updated nightly.    There are a lot of data, and a good place to start is to use search to find interesting candidates and committees. Then, you can use their IDs to find report or line item details with the other endpoints. If you are interested in individual donors, check out contributor information in the `/schedule_a/` endpoints.    <b class=\"body\" id=\"getting_started_head\">Getting started with the openFEC API</b><br>    If you would like to use the FEC's API programmatically, you can sign up for your own API key using our form. Alternatively, you can still try out our API without an API key by using the web interface and using DEMO_KEY. Note that when you use the openFEC API you are subject to the [Terms of Service](https://github.com/fecgov/FEC/blob/master/TERMS-OF-SERVICE.md) and [Acceptable Use policy](https://github.com/fecgov/FEC/blob/master/ACCEPTABLE-USE-POLICY.md).    Signing up for an API key will enable you to place up to 1,000 calls an hour. Each call is limited to 100 results per page. You can email questions, comments or a request to get a key for 7,200 calls an hour (120 calls per minute) to <a href=\"mailto:APIinfo@fec.gov\">APIinfo@fec.gov</a>. You can also ask questions and discuss the data in a community led [group](https://groups.google.com/forum/#!forum/fec-data).    The model definitions and schema are available at [/swagger](/swagger/). This is useful for making wrappers and exploring the data.    A few restrictions limit the way you can use FEC data. For example, you canâ€™t use contributor lists for commercial purposes or to solicit donations. [Learn more here](https://www.fec.gov/updates/sale-or-use-contributor-information/).    [Inspect our source code](https://github.com/fecgov/openFEC). We welcome issues and pull requests!    <p><br></p> <h2 class=\"title\" id=\"signup_head\">Sign up for an API key</h2> <div id=\"apidatagov_signup\">Loading signup form...</div>
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The Filings model module.
 * @module model/Filings
 * @version 1.0
 */
class Filings {
    /**
     * Constructs a new <code>Filings</code>.
     * @alias module:model/Filings
     */
    constructor() { 
        
        Filings.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>Filings</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Filings} obj Optional instance to populate.
     * @return {module:model/Filings} The populated <code>Filings</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Filings();

            if (data.hasOwnProperty('additional_bank_names')) {
                obj['additional_bank_names'] = ApiClient.convertToType(data['additional_bank_names'], ['String']);
            }
            if (data.hasOwnProperty('amendment_chain')) {
                obj['amendment_chain'] = ApiClient.convertToType(data['amendment_chain'], ['Number']);
            }
            if (data.hasOwnProperty('amendment_indicator')) {
                obj['amendment_indicator'] = ApiClient.convertToType(data['amendment_indicator'], 'String');
            }
            if (data.hasOwnProperty('amendment_version')) {
                obj['amendment_version'] = ApiClient.convertToType(data['amendment_version'], 'Number');
            }
            if (data.hasOwnProperty('bank_depository_city')) {
                obj['bank_depository_city'] = ApiClient.convertToType(data['bank_depository_city'], 'String');
            }
            if (data.hasOwnProperty('bank_depository_name')) {
                obj['bank_depository_name'] = ApiClient.convertToType(data['bank_depository_name'], 'String');
            }
            if (data.hasOwnProperty('bank_depository_state')) {
                obj['bank_depository_state'] = ApiClient.convertToType(data['bank_depository_state'], 'String');
            }
            if (data.hasOwnProperty('bank_depository_street_1')) {
                obj['bank_depository_street_1'] = ApiClient.convertToType(data['bank_depository_street_1'], 'String');
            }
            if (data.hasOwnProperty('bank_depository_street_2')) {
                obj['bank_depository_street_2'] = ApiClient.convertToType(data['bank_depository_street_2'], 'String');
            }
            if (data.hasOwnProperty('bank_depository_zip')) {
                obj['bank_depository_zip'] = ApiClient.convertToType(data['bank_depository_zip'], 'String');
            }
            if (data.hasOwnProperty('beginning_image_number')) {
                obj['beginning_image_number'] = ApiClient.convertToType(data['beginning_image_number'], 'String');
            }
            if (data.hasOwnProperty('candidate_id')) {
                obj['candidate_id'] = ApiClient.convertToType(data['candidate_id'], 'String');
            }
            if (data.hasOwnProperty('candidate_name')) {
                obj['candidate_name'] = ApiClient.convertToType(data['candidate_name'], 'String');
            }
            if (data.hasOwnProperty('cash_on_hand_beginning_period')) {
                obj['cash_on_hand_beginning_period'] = ApiClient.convertToType(data['cash_on_hand_beginning_period'], 'Number');
            }
            if (data.hasOwnProperty('cash_on_hand_end_period')) {
                obj['cash_on_hand_end_period'] = ApiClient.convertToType(data['cash_on_hand_end_period'], 'Number');
            }
            if (data.hasOwnProperty('committee_id')) {
                obj['committee_id'] = ApiClient.convertToType(data['committee_id'], 'String');
            }
            if (data.hasOwnProperty('committee_name')) {
                obj['committee_name'] = ApiClient.convertToType(data['committee_name'], 'String');
            }
            if (data.hasOwnProperty('committee_type')) {
                obj['committee_type'] = ApiClient.convertToType(data['committee_type'], 'String');
            }
            if (data.hasOwnProperty('coverage_end_date')) {
                obj['coverage_end_date'] = ApiClient.convertToType(data['coverage_end_date'], 'Date');
            }
            if (data.hasOwnProperty('coverage_start_date')) {
                obj['coverage_start_date'] = ApiClient.convertToType(data['coverage_start_date'], 'Date');
            }
            if (data.hasOwnProperty('csv_url')) {
                obj['csv_url'] = ApiClient.convertToType(data['csv_url'], 'String');
            }
            if (data.hasOwnProperty('cycle')) {
                obj['cycle'] = ApiClient.convertToType(data['cycle'], 'Number');
            }
            if (data.hasOwnProperty('debts_owed_by_committee')) {
                obj['debts_owed_by_committee'] = ApiClient.convertToType(data['debts_owed_by_committee'], 'Number');
            }
            if (data.hasOwnProperty('debts_owed_to_committee')) {
                obj['debts_owed_to_committee'] = ApiClient.convertToType(data['debts_owed_to_committee'], 'Number');
            }
            if (data.hasOwnProperty('document_description')) {
                obj['document_description'] = ApiClient.convertToType(data['document_description'], 'String');
            }
            if (data.hasOwnProperty('document_type')) {
                obj['document_type'] = ApiClient.convertToType(data['document_type'], 'String');
            }
            if (data.hasOwnProperty('document_type_full')) {
                obj['document_type_full'] = ApiClient.convertToType(data['document_type_full'], 'String');
            }
            if (data.hasOwnProperty('election_year')) {
                obj['election_year'] = ApiClient.convertToType(data['election_year'], 'Number');
            }
            if (data.hasOwnProperty('ending_image_number')) {
                obj['ending_image_number'] = ApiClient.convertToType(data['ending_image_number'], 'String');
            }
            if (data.hasOwnProperty('fec_file_id')) {
                obj['fec_file_id'] = ApiClient.convertToType(data['fec_file_id'], 'String');
            }
            if (data.hasOwnProperty('fec_url')) {
                obj['fec_url'] = ApiClient.convertToType(data['fec_url'], 'String');
            }
            if (data.hasOwnProperty('file_number')) {
                obj['file_number'] = ApiClient.convertToType(data['file_number'], 'Number');
            }
            if (data.hasOwnProperty('form_category')) {
                obj['form_category'] = ApiClient.convertToType(data['form_category'], 'String');
            }
            if (data.hasOwnProperty('form_type')) {
                obj['form_type'] = ApiClient.convertToType(data['form_type'], 'String');
            }
            if (data.hasOwnProperty('house_personal_funds')) {
                obj['house_personal_funds'] = ApiClient.convertToType(data['house_personal_funds'], 'Number');
            }
            if (data.hasOwnProperty('html_url')) {
                obj['html_url'] = ApiClient.convertToType(data['html_url'], 'String');
            }
            if (data.hasOwnProperty('is_amended')) {
                obj['is_amended'] = ApiClient.convertToType(data['is_amended'], 'Boolean');
            }
            if (data.hasOwnProperty('means_filed')) {
                obj['means_filed'] = ApiClient.convertToType(data['means_filed'], 'String');
            }
            if (data.hasOwnProperty('most_recent')) {
                obj['most_recent'] = ApiClient.convertToType(data['most_recent'], 'Boolean');
            }
            if (data.hasOwnProperty('most_recent_file_number')) {
                obj['most_recent_file_number'] = ApiClient.convertToType(data['most_recent_file_number'], 'Number');
            }
            if (data.hasOwnProperty('net_donations')) {
                obj['net_donations'] = ApiClient.convertToType(data['net_donations'], 'Number');
            }
            if (data.hasOwnProperty('office')) {
                obj['office'] = ApiClient.convertToType(data['office'], 'String');
            }
            if (data.hasOwnProperty('opposition_personal_funds')) {
                obj['opposition_personal_funds'] = ApiClient.convertToType(data['opposition_personal_funds'], 'Number');
            }
            if (data.hasOwnProperty('pages')) {
                obj['pages'] = ApiClient.convertToType(data['pages'], 'Number');
            }
            if (data.hasOwnProperty('party')) {
                obj['party'] = ApiClient.convertToType(data['party'], 'String');
            }
            if (data.hasOwnProperty('pdf_url')) {
                obj['pdf_url'] = ApiClient.convertToType(data['pdf_url'], 'String');
            }
            if (data.hasOwnProperty('previous_file_number')) {
                obj['previous_file_number'] = ApiClient.convertToType(data['previous_file_number'], 'Number');
            }
            if (data.hasOwnProperty('primary_general_indicator')) {
                obj['primary_general_indicator'] = ApiClient.convertToType(data['primary_general_indicator'], 'String');
            }
            if (data.hasOwnProperty('receipt_date')) {
                obj['receipt_date'] = ApiClient.convertToType(data['receipt_date'], 'Date');
            }
            if (data.hasOwnProperty('report_type')) {
                obj['report_type'] = ApiClient.convertToType(data['report_type'], 'String');
            }
            if (data.hasOwnProperty('report_type_full')) {
                obj['report_type_full'] = ApiClient.convertToType(data['report_type_full'], 'String');
            }
            if (data.hasOwnProperty('report_year')) {
                obj['report_year'] = ApiClient.convertToType(data['report_year'], 'Number');
            }
            if (data.hasOwnProperty('request_type')) {
                obj['request_type'] = ApiClient.convertToType(data['request_type'], 'String');
            }
            if (data.hasOwnProperty('senate_personal_funds')) {
                obj['senate_personal_funds'] = ApiClient.convertToType(data['senate_personal_funds'], 'Number');
            }
            if (data.hasOwnProperty('state')) {
                obj['state'] = ApiClient.convertToType(data['state'], 'String');
            }
            if (data.hasOwnProperty('sub_id')) {
                obj['sub_id'] = ApiClient.convertToType(data['sub_id'], 'String');
            }
            if (data.hasOwnProperty('total_communication_cost')) {
                obj['total_communication_cost'] = ApiClient.convertToType(data['total_communication_cost'], 'Number');
            }
            if (data.hasOwnProperty('total_disbursements')) {
                obj['total_disbursements'] = ApiClient.convertToType(data['total_disbursements'], 'Number');
            }
            if (data.hasOwnProperty('total_independent_expenditures')) {
                obj['total_independent_expenditures'] = ApiClient.convertToType(data['total_independent_expenditures'], 'Number');
            }
            if (data.hasOwnProperty('total_individual_contributions')) {
                obj['total_individual_contributions'] = ApiClient.convertToType(data['total_individual_contributions'], 'Number');
            }
            if (data.hasOwnProperty('total_receipts')) {
                obj['total_receipts'] = ApiClient.convertToType(data['total_receipts'], 'Number');
            }
            if (data.hasOwnProperty('treasurer_name')) {
                obj['treasurer_name'] = ApiClient.convertToType(data['treasurer_name'], 'String');
            }
            if (data.hasOwnProperty('update_date')) {
                obj['update_date'] = ApiClient.convertToType(data['update_date'], 'Date');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Filings</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Filings</code>.
     */
    static validateJSON(data) {
        // ensure the json data is an array
        if (!Array.isArray(data['additional_bank_names'])) {
            throw new Error("Expected the field `additional_bank_names` to be an array in the JSON data but got " + data['additional_bank_names']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['amendment_chain'])) {
            throw new Error("Expected the field `amendment_chain` to be an array in the JSON data but got " + data['amendment_chain']);
        }
        // ensure the json data is a string
        if (data['amendment_indicator'] && !(typeof data['amendment_indicator'] === 'string' || data['amendment_indicator'] instanceof String)) {
            throw new Error("Expected the field `amendment_indicator` to be a primitive type in the JSON string but got " + data['amendment_indicator']);
        }
        // ensure the json data is a string
        if (data['bank_depository_city'] && !(typeof data['bank_depository_city'] === 'string' || data['bank_depository_city'] instanceof String)) {
            throw new Error("Expected the field `bank_depository_city` to be a primitive type in the JSON string but got " + data['bank_depository_city']);
        }
        // ensure the json data is a string
        if (data['bank_depository_name'] && !(typeof data['bank_depository_name'] === 'string' || data['bank_depository_name'] instanceof String)) {
            throw new Error("Expected the field `bank_depository_name` to be a primitive type in the JSON string but got " + data['bank_depository_name']);
        }
        // ensure the json data is a string
        if (data['bank_depository_state'] && !(typeof data['bank_depository_state'] === 'string' || data['bank_depository_state'] instanceof String)) {
            throw new Error("Expected the field `bank_depository_state` to be a primitive type in the JSON string but got " + data['bank_depository_state']);
        }
        // ensure the json data is a string
        if (data['bank_depository_street_1'] && !(typeof data['bank_depository_street_1'] === 'string' || data['bank_depository_street_1'] instanceof String)) {
            throw new Error("Expected the field `bank_depository_street_1` to be a primitive type in the JSON string but got " + data['bank_depository_street_1']);
        }
        // ensure the json data is a string
        if (data['bank_depository_street_2'] && !(typeof data['bank_depository_street_2'] === 'string' || data['bank_depository_street_2'] instanceof String)) {
            throw new Error("Expected the field `bank_depository_street_2` to be a primitive type in the JSON string but got " + data['bank_depository_street_2']);
        }
        // ensure the json data is a string
        if (data['bank_depository_zip'] && !(typeof data['bank_depository_zip'] === 'string' || data['bank_depository_zip'] instanceof String)) {
            throw new Error("Expected the field `bank_depository_zip` to be a primitive type in the JSON string but got " + data['bank_depository_zip']);
        }
        // ensure the json data is a string
        if (data['beginning_image_number'] && !(typeof data['beginning_image_number'] === 'string' || data['beginning_image_number'] instanceof String)) {
            throw new Error("Expected the field `beginning_image_number` to be a primitive type in the JSON string but got " + data['beginning_image_number']);
        }
        // ensure the json data is a string
        if (data['candidate_id'] && !(typeof data['candidate_id'] === 'string' || data['candidate_id'] instanceof String)) {
            throw new Error("Expected the field `candidate_id` to be a primitive type in the JSON string but got " + data['candidate_id']);
        }
        // ensure the json data is a string
        if (data['candidate_name'] && !(typeof data['candidate_name'] === 'string' || data['candidate_name'] instanceof String)) {
            throw new Error("Expected the field `candidate_name` to be a primitive type in the JSON string but got " + data['candidate_name']);
        }
        // ensure the json data is a string
        if (data['committee_id'] && !(typeof data['committee_id'] === 'string' || data['committee_id'] instanceof String)) {
            throw new Error("Expected the field `committee_id` to be a primitive type in the JSON string but got " + data['committee_id']);
        }
        // ensure the json data is a string
        if (data['committee_name'] && !(typeof data['committee_name'] === 'string' || data['committee_name'] instanceof String)) {
            throw new Error("Expected the field `committee_name` to be a primitive type in the JSON string but got " + data['committee_name']);
        }
        // ensure the json data is a string
        if (data['committee_type'] && !(typeof data['committee_type'] === 'string' || data['committee_type'] instanceof String)) {
            throw new Error("Expected the field `committee_type` to be a primitive type in the JSON string but got " + data['committee_type']);
        }
        // ensure the json data is a string
        if (data['csv_url'] && !(typeof data['csv_url'] === 'string' || data['csv_url'] instanceof String)) {
            throw new Error("Expected the field `csv_url` to be a primitive type in the JSON string but got " + data['csv_url']);
        }
        // ensure the json data is a string
        if (data['document_description'] && !(typeof data['document_description'] === 'string' || data['document_description'] instanceof String)) {
            throw new Error("Expected the field `document_description` to be a primitive type in the JSON string but got " + data['document_description']);
        }
        // ensure the json data is a string
        if (data['document_type'] && !(typeof data['document_type'] === 'string' || data['document_type'] instanceof String)) {
            throw new Error("Expected the field `document_type` to be a primitive type in the JSON string but got " + data['document_type']);
        }
        // ensure the json data is a string
        if (data['document_type_full'] && !(typeof data['document_type_full'] === 'string' || data['document_type_full'] instanceof String)) {
            throw new Error("Expected the field `document_type_full` to be a primitive type in the JSON string but got " + data['document_type_full']);
        }
        // ensure the json data is a string
        if (data['ending_image_number'] && !(typeof data['ending_image_number'] === 'string' || data['ending_image_number'] instanceof String)) {
            throw new Error("Expected the field `ending_image_number` to be a primitive type in the JSON string but got " + data['ending_image_number']);
        }
        // ensure the json data is a string
        if (data['fec_file_id'] && !(typeof data['fec_file_id'] === 'string' || data['fec_file_id'] instanceof String)) {
            throw new Error("Expected the field `fec_file_id` to be a primitive type in the JSON string but got " + data['fec_file_id']);
        }
        // ensure the json data is a string
        if (data['fec_url'] && !(typeof data['fec_url'] === 'string' || data['fec_url'] instanceof String)) {
            throw new Error("Expected the field `fec_url` to be a primitive type in the JSON string but got " + data['fec_url']);
        }
        // ensure the json data is a string
        if (data['form_category'] && !(typeof data['form_category'] === 'string' || data['form_category'] instanceof String)) {
            throw new Error("Expected the field `form_category` to be a primitive type in the JSON string but got " + data['form_category']);
        }
        // ensure the json data is a string
        if (data['form_type'] && !(typeof data['form_type'] === 'string' || data['form_type'] instanceof String)) {
            throw new Error("Expected the field `form_type` to be a primitive type in the JSON string but got " + data['form_type']);
        }
        // ensure the json data is a string
        if (data['html_url'] && !(typeof data['html_url'] === 'string' || data['html_url'] instanceof String)) {
            throw new Error("Expected the field `html_url` to be a primitive type in the JSON string but got " + data['html_url']);
        }
        // ensure the json data is a string
        if (data['means_filed'] && !(typeof data['means_filed'] === 'string' || data['means_filed'] instanceof String)) {
            throw new Error("Expected the field `means_filed` to be a primitive type in the JSON string but got " + data['means_filed']);
        }
        // ensure the json data is a string
        if (data['office'] && !(typeof data['office'] === 'string' || data['office'] instanceof String)) {
            throw new Error("Expected the field `office` to be a primitive type in the JSON string but got " + data['office']);
        }
        // ensure the json data is a string
        if (data['party'] && !(typeof data['party'] === 'string' || data['party'] instanceof String)) {
            throw new Error("Expected the field `party` to be a primitive type in the JSON string but got " + data['party']);
        }
        // ensure the json data is a string
        if (data['pdf_url'] && !(typeof data['pdf_url'] === 'string' || data['pdf_url'] instanceof String)) {
            throw new Error("Expected the field `pdf_url` to be a primitive type in the JSON string but got " + data['pdf_url']);
        }
        // ensure the json data is a string
        if (data['primary_general_indicator'] && !(typeof data['primary_general_indicator'] === 'string' || data['primary_general_indicator'] instanceof String)) {
            throw new Error("Expected the field `primary_general_indicator` to be a primitive type in the JSON string but got " + data['primary_general_indicator']);
        }
        // ensure the json data is a string
        if (data['report_type'] && !(typeof data['report_type'] === 'string' || data['report_type'] instanceof String)) {
            throw new Error("Expected the field `report_type` to be a primitive type in the JSON string but got " + data['report_type']);
        }
        // ensure the json data is a string
        if (data['report_type_full'] && !(typeof data['report_type_full'] === 'string' || data['report_type_full'] instanceof String)) {
            throw new Error("Expected the field `report_type_full` to be a primitive type in the JSON string but got " + data['report_type_full']);
        }
        // ensure the json data is a string
        if (data['request_type'] && !(typeof data['request_type'] === 'string' || data['request_type'] instanceof String)) {
            throw new Error("Expected the field `request_type` to be a primitive type in the JSON string but got " + data['request_type']);
        }
        // ensure the json data is a string
        if (data['state'] && !(typeof data['state'] === 'string' || data['state'] instanceof String)) {
            throw new Error("Expected the field `state` to be a primitive type in the JSON string but got " + data['state']);
        }
        // ensure the json data is a string
        if (data['sub_id'] && !(typeof data['sub_id'] === 'string' || data['sub_id'] instanceof String)) {
            throw new Error("Expected the field `sub_id` to be a primitive type in the JSON string but got " + data['sub_id']);
        }
        // ensure the json data is a string
        if (data['treasurer_name'] && !(typeof data['treasurer_name'] === 'string' || data['treasurer_name'] instanceof String)) {
            throw new Error("Expected the field `treasurer_name` to be a primitive type in the JSON string but got " + data['treasurer_name']);
        }

        return true;
    }


}



/**
 *  Additional banks or depositories in which the committee deposits funds, holds accounts, rents safety deposit boxes or maintains funds. 
 * @member {Array.<String>} additional_bank_names
 */
Filings.prototype['additional_bank_names'] = undefined;

/**
 *  The first value in the chain is the original filing.  The ordering in the chain reflects the order the amendments were filed up to the amendment being inspected. 
 * @member {Array.<Number>} amendment_chain
 */
Filings.prototype['amendment_chain'] = undefined;

/**
 *  The first value in the chain is the original filing.  The ordering in the chain reflects the order the amendments were filed up to the amendment being inspected. 
 * @member {String} amendment_indicator
 */
Filings.prototype['amendment_indicator'] = undefined;

/**
 *  Amendment version 
 * @member {Number} amendment_version
 */
Filings.prototype['amendment_version'] = undefined;

/**
 *  City of bank or depository as reported on the Form 1 
 * @member {String} bank_depository_city
 */
Filings.prototype['bank_depository_city'] = undefined;

/**
 *  Primary bank or depository in which the committee deposits funds,holds accounts, rents safety deposit boxes or maintains funds. 
 * @member {String} bank_depository_name
 */
Filings.prototype['bank_depository_name'] = undefined;

/**
 *  State of bank or depository as reported on the Form 1 
 * @member {String} bank_depository_state
 */
Filings.prototype['bank_depository_state'] = undefined;

/**
 *  Street of bank or depository as reported on their Form 1. 
 * @member {String} bank_depository_street_1
 */
Filings.prototype['bank_depository_street_1'] = undefined;

/**
 *  Second line of the street of bank or depository as reported on the Form 1 
 * @member {String} bank_depository_street_2
 */
Filings.prototype['bank_depository_street_2'] = undefined;

/**
 *  Zip code of bank or depository as reported on the Form 1 
 * @member {String} bank_depository_zip
 */
Filings.prototype['bank_depository_zip'] = undefined;

/**
 * @member {String} beginning_image_number
 */
Filings.prototype['beginning_image_number'] = undefined;

/**
 *  A unique identifier assigned to each candidate registered with the FEC. If a person runs for several offices, that person will have separate candidate IDs for each office. First character indicates office - [P]residential, [H]ouse, [S]enate]. Second character is the last digit of the two-year period the ID was created. Third and fourth is the candidate state. Presidential IDs don't have state. Fifth and sixth is the district when the candidate first ran. This does not change if the candidate/member's district changes during re-districting. Presidential IDs don't have districts. The rest is sequence. 
 * @member {String} candidate_id
 */
Filings.prototype['candidate_id'] = undefined;

/**
 * Name of candidate running for office
 * @member {String} candidate_name
 */
Filings.prototype['candidate_name'] = undefined;

/**
 * Balance for the committee at the start of the two-year period
 * @member {Number} cash_on_hand_beginning_period
 */
Filings.prototype['cash_on_hand_beginning_period'] = undefined;

/**
 * Ending cash balance on the most recent filing
 * @member {Number} cash_on_hand_end_period
 */
Filings.prototype['cash_on_hand_end_period'] = undefined;

/**
 *  A unique identifier assigned to each committee or filer registered with the FEC. In general committee id's begin with the letter C which is followed by eight digits. 
 * @member {String} committee_id
 */
Filings.prototype['committee_id'] = undefined;

/**
 * The name of the committee. If a committee changes its name,     the most recent name will be shown. Committee names are not unique. Use committee_id     for looking up records.
 * @member {String} committee_name
 */
Filings.prototype['committee_name'] = undefined;

/**
 * The one-letter type code of the organization:         - C communication cost         - D delegate         - E electioneering communication         - H House         - I independent expenditure filer (not a committee)         - N PAC - nonqualified         - O independent expenditure-only (super PACs)         - P presidential         - Q PAC - qualified         - S Senate         - U single candidate independent expenditure         - V PAC with non-contribution account, nonqualified         - W PAC with non-contribution account, qualified         - X party, nonqualified         - Y party, qualified         - Z national party non-federal account 
 * @member {String} committee_type
 */
Filings.prototype['committee_type'] = undefined;

/**
 * Ending date of the reporting period
 * @member {Date} coverage_end_date
 */
Filings.prototype['coverage_end_date'] = undefined;

/**
 * Beginning date of the reporting period
 * @member {Date} coverage_start_date
 */
Filings.prototype['coverage_start_date'] = undefined;

/**
 * @member {String} csv_url
 */
Filings.prototype['csv_url'] = undefined;

/**
 *  Filter records to only those that were applicable to a given two-year period.The cycle begins with an odd year and is named for its ending, even year. 
 * @member {Number} cycle
 */
Filings.prototype['cycle'] = undefined;

/**
 * Debts owed by the committee
 * @member {Number} debts_owed_by_committee
 */
Filings.prototype['debts_owed_by_committee'] = undefined;

/**
 * Debts owed to the committee
 * @member {Number} debts_owed_to_committee
 */
Filings.prototype['debts_owed_to_committee'] = undefined;

/**
 * @member {String} document_description
 */
Filings.prototype['document_description'] = undefined;

/**
 *  The type of document for documents other than reports:     - 2 24 Hour Contribution Notice     - 4 48 Hour Contribution Notice     - A Debt Settlement Statement     - B Acknowledgment of Receipt of Debt Settlement Statement     - C RFAI: Debt Settlement First Notice     - D Commission Debt Settlement Review     - E Commission Response TO Debt Settlement Request     - F Administrative Termination     - G Debt Settlement Plan Amendment     - H Disavowal Notice     - I Disavowal Response     - J Conduit Report     - K Termination Approval     - L Repeat Non-Filer Notice     - M Filing Frequency Change Notice     - N Paper Amendment to Electronic Report     - O Acknowledgment of Filing Frequency Change     - S RFAI: Debt Settlement Second     - T Miscellaneous Report TO FEC     - V Repeat Violation Notice (441A OR 441B)     - P Notice of Paper Filing     - R F3L Filing Frequency Change Notice     - Q Acknowledgment of F3L Filing Frequency Change     - U Unregistered Committee Notice 
 * @member {String} document_type
 */
Filings.prototype['document_type'] = undefined;

/**
 *  The type of document for documents other than reports:     - 2 24 Hour Contribution Notice     - 4 48 Hour Contribution Notice     - A Debt Settlement Statement     - B Acknowledgment of Receipt of Debt Settlement Statement     - C RFAI: Debt Settlement First Notice     - D Commission Debt Settlement Review     - E Commission Response TO Debt Settlement Request     - F Administrative Termination     - G Debt Settlement Plan Amendment     - H Disavowal Notice     - I Disavowal Response     - J Conduit Report     - K Termination Approval     - L Repeat Non-Filer Notice     - M Filing Frequency Change Notice     - N Paper Amendment to Electronic Report     - O Acknowledgment of Filing Frequency Change     - S RFAI: Debt Settlement Second     - T Miscellaneous Report TO FEC     - V Repeat Violation Notice (441A OR 441B)     - P Notice of Paper Filing     - R F3L Filing Frequency Change Notice     - Q Acknowledgment of F3L Filing Frequency Change     - U Unregistered Committee Notice 
 * @member {String} document_type_full
 */
Filings.prototype['document_type_full'] = undefined;

/**
 * Year of election
 * @member {Number} election_year
 */
Filings.prototype['election_year'] = undefined;

/**
 * @member {String} ending_image_number
 */
Filings.prototype['ending_image_number'] = undefined;

/**
 * @member {String} fec_file_id
 */
Filings.prototype['fec_file_id'] = undefined;

/**
 * @member {String} fec_url
 */
Filings.prototype['fec_url'] = undefined;

/**
 * Filing ID number
 * @member {Number} file_number
 */
Filings.prototype['file_number'] = undefined;

/**
 *  The forms filed are categorized based on the nature of the filing:     - REPORT F3, F3X, F3P, F3L, F4, F5, F7, F13     - NOTICE F5, F24, F6, F9, F10, F11     - STATEMENT F1, F2     - OTHER F1M, F8, F99, F12, FRQ 
 * @member {String} form_category
 */
Filings.prototype['form_category'] = undefined;

/**
 * The form where the underlying data comes from, for example, Form 1 would appear as F1:     - F1   Statement of Organization     - F1M  Notification of Multicandidate Status     - F2   Statement of Candidacy     - F3   Report of Receipts and Disbursements for an Authorized Committee     - F3P  Report of Receipts and Disbursements by an Authorized Committee of a Candidate for     The Office of President or Vice President     - F3L  Report of Contributions Bundled by Lobbyists/Registrants and Lobbyist/Registrant PACs     - F3X  Report of Receipts and Disbursements for other than an Authorized Committee     - F4   Report of Receipts and Disbursements for a Committee or Organization Supporting a Nomination Convention     - F5   Report of Independent Expenditures Made and Contributions Received     - F6   48 Hour Notice of Contributions/Loans Received     - F7   Report of Communication Costs by Corporations and Membership Organizations     - F8   Debt Settlement Plan     - F9   24 Hour Notice of Disbursements for Electioneering Communications     - F13  Report of Donations Accepted for Inaugural Committee     - F99  Miscellaneous Text     - FRQ  Request for Additional Information 
 * @member {String} form_type
 */
Filings.prototype['form_type'] = undefined;

/**
 * House personal funds
 * @member {Number} house_personal_funds
 */
Filings.prototype['house_personal_funds'] = undefined;

/**
 *  HTML link to the filing. 
 * @member {String} html_url
 */
Filings.prototype['html_url'] = undefined;

/**
 *  False indicates that a report is the most recent. True indicates that the report has been superseded by an amendment. 
 * @member {Boolean} is_amended
 */
Filings.prototype['is_amended'] = undefined;

/**
 * The method used to file with the FEC, either electronic or on paper.
 * @member {String} means_filed
 */
Filings.prototype['means_filed'] = undefined;

/**
 *  Report is either new or is the most-recently filed amendment 
 * @member {Boolean} most_recent
 */
Filings.prototype['most_recent'] = undefined;

/**
 * @member {Number} most_recent_file_number
 */
Filings.prototype['most_recent_file_number'] = undefined;

/**
 * Net donations
 * @member {Number} net_donations
 */
Filings.prototype['net_donations'] = undefined;

/**
 * Federal office candidate runs for: H, S or P
 * @member {String} office
 */
Filings.prototype['office'] = undefined;

/**
 * Opposition personal funds
 * @member {Number} opposition_personal_funds
 */
Filings.prototype['opposition_personal_funds'] = undefined;

/**
 *  Number of pages in the document 
 * @member {Number} pages
 */
Filings.prototype['pages'] = undefined;

/**
 * Three-letter code for the party affiliated with a candidate or committee. For example, DEM for Democratic Party and REP for Republican Party.
 * @member {String} party
 */
Filings.prototype['party'] = undefined;

/**
 *  pdf link to the filing 
 * @member {String} pdf_url
 */
Filings.prototype['pdf_url'] = undefined;

/**
 *  Previous filing ID number 
 * @member {Number} previous_file_number
 */
Filings.prototype['previous_file_number'] = undefined;

/**
 *  Primary general indicator 
 * @member {String} primary_general_indicator
 */
Filings.prototype['primary_general_indicator'] = undefined;

/**
 * Date the FEC received the electronic or paper record
 * @member {Date} receipt_date
 */
Filings.prototype['receipt_date'] = undefined;

/**
 * Name of report where the underlying data comes from:     - 10D Pre-Election     - 10G Pre-General     - 10P Pre-Primary     - 10R Pre-Run-Off     - 10S Pre-Special     - 12C Pre-Convention     - 12G Pre-General     - 12P Pre-Primary     - 12R Pre-Run-Off     - 12S Pre-Special     - 30D Post-Election     - 30G Post-General     - 30P Post-Primary     - 30R Post-Run-Off     - 30S Post-Special     - 60D Post-Convention     - M1  January Monthly     - M10 October Monthly     - M11 November Monthly     - M12 December Monthly     - M2  February Monthly     - M3  March Monthly     - M4  April Monthly     - M5  May Monthly     - M6  June Monthly     - M7  July Monthly     - M8  August Monthly     - M9  September Monthly     - MY  Mid-Year Report     - Q1  April Quarterly     - Q2  July Quarterly     - Q3  October Quarterly     - TER Termination Report     - YE  Year-End     - ADJ COMP ADJUST AMEND     - CA  COMPREHENSIVE AMEND     - 90S Post Inaugural Supplement     - 90D Post Inaugural     - 48  48 Hour Notification     - 24  24 Hour Notification     - M7S July Monthly/Semi-Annual     - MSA Monthly Semi-Annual (MY)     - MYS Monthly Year End/Semi-Annual     - Q2S July Quarterly/Semi-Annual     - QSA Quarterly Semi-Annual (MY)     - QYS Quarterly Year End/Semi-Annual     - QYE Quarterly Semi-Annual (YE)     - QMS Quarterly Mid-Year/ Semi-Annual     - MSY Monthly Semi-Annual (YE) 
 * @member {String} report_type
 */
Filings.prototype['report_type'] = undefined;

/**
 * @member {String} report_type_full
 */
Filings.prototype['report_type_full'] = undefined;

/**
 *  Forms with coverage date -      year from the coverage ending date. Forms without coverage date -      year from the receipt date. 
 * @member {Number} report_year
 */
Filings.prototype['report_year'] = undefined;

/**
 *  Requests for additional information (RFAIs) sent to filers. The request type is based on the type of document filed:     - 1 Statement of Organization     - 2 Report of Receipts and Expenditures (Form 3 and 3X)     - 3 Second Notice - Reports     - 4 Request for Additional Information     - 5 Informational - Reports     - 6 Second Notice - Statement of Organization     - 7 Failure to File     - 8 From Public Disclosure     - 9 From Multi Candidate Status 
 * @member {String} request_type
 */
Filings.prototype['request_type'] = undefined;

/**
 * Senate personal funds
 * @member {Number} senate_personal_funds
 */
Filings.prototype['senate_personal_funds'] = undefined;

/**
 * US state or territory where a candidate runs for office
 * @member {String} state
 */
Filings.prototype['state'] = undefined;

/**
 * @member {String} sub_id
 */
Filings.prototype['sub_id'] = undefined;

/**
 * Total communications cost
 * @member {Number} total_communication_cost
 */
Filings.prototype['total_communication_cost'] = undefined;

/**
 * Total disbursements
 * @member {Number} total_disbursements
 */
Filings.prototype['total_disbursements'] = undefined;

/**
 * Total independent expenditures
 * @member {Number} total_independent_expenditures
 */
Filings.prototype['total_independent_expenditures'] = undefined;

/**
 * Total individual contributions
 * @member {Number} total_individual_contributions
 */
Filings.prototype['total_individual_contributions'] = undefined;

/**
 * Total receipts
 * @member {Number} total_receipts
 */
Filings.prototype['total_receipts'] = undefined;

/**
 * Name of the Committee's treasurer. If multiple treasurers for the committee, the most recent treasurer will be shown.
 * @member {String} treasurer_name
 */
Filings.prototype['treasurer_name'] = undefined;

/**
 * Date the record was updated
 * @member {Date} update_date
 */
Filings.prototype['update_date'] = undefined;






export default Filings;

