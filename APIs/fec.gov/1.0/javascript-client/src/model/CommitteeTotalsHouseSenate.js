/**
 * OpenFEC
 * This application programming interface (API) allows you to explore the way candidates and committees fund their campaigns.    The Federal Election Commission (FEC) API is a RESTful web service supporting full-text and field-specific searches on FEC data. [Bulk downloads](https://www.fec.gov/data/advanced/?tab=bulk-data) are available on the current site. Information is tied to the underlying forms by file ID and image ID. Data is updated nightly.    There are a lot of data, and a good place to start is to use search to find interesting candidates and committees. Then, you can use their IDs to find report or line item details with the other endpoints. If you are interested in individual donors, check out contributor information in the `/schedule_a/` endpoints.    <b class=\"body\" id=\"getting_started_head\">Getting started with the openFEC API</b><br>    If you would like to use the FEC's API programmatically, you can sign up for your own API key using our form. Alternatively, you can still try out our API without an API key by using the web interface and using DEMO_KEY. Note that when you use the openFEC API you are subject to the [Terms of Service](https://github.com/fecgov/FEC/blob/master/TERMS-OF-SERVICE.md) and [Acceptable Use policy](https://github.com/fecgov/FEC/blob/master/ACCEPTABLE-USE-POLICY.md).    Signing up for an API key will enable you to place up to 1,000 calls an hour. Each call is limited to 100 results per page. You can email questions, comments or a request to get a key for 7,200 calls an hour (120 calls per minute) to <a href=\"mailto:APIinfo@fec.gov\">APIinfo@fec.gov</a>. You can also ask questions and discuss the data in a community led [group](https://groups.google.com/forum/#!forum/fec-data).    The model definitions and schema are available at [/swagger](/swagger/). This is useful for making wrappers and exploring the data.    A few restrictions limit the way you can use FEC data. For example, you canâ€™t use contributor lists for commercial purposes or to solicit donations. [Learn more here](https://www.fec.gov/updates/sale-or-use-contributor-information/).    [Inspect our source code](https://github.com/fecgov/openFEC). We welcome issues and pull requests!    <p><br></p> <h2 class=\"title\" id=\"signup_head\">Sign up for an API key</h2> <div id=\"apidatagov_signup\">Loading signup form...</div>
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The CommitteeTotalsHouseSenate model module.
 * @module model/CommitteeTotalsHouseSenate
 * @version 1.0
 */
class CommitteeTotalsHouseSenate {
    /**
     * Constructs a new <code>CommitteeTotalsHouseSenate</code>.
     * @alias module:model/CommitteeTotalsHouseSenate
     * @param cycle {Number}  Filter records to only those that are applicable to a given two-year period. This cycle follows the traditional House election cycle and subdivides the presidential and Senate elections into comparable two-year blocks. The cycle begins with an odd year and is named for its ending, even year. 
     */
    constructor(cycle) { 
        
        CommitteeTotalsHouseSenate.initialize(this, cycle);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, cycle) { 
        obj['cycle'] = cycle;
    }

    /**
     * Constructs a <code>CommitteeTotalsHouseSenate</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/CommitteeTotalsHouseSenate} obj Optional instance to populate.
     * @return {module:model/CommitteeTotalsHouseSenate} The populated <code>CommitteeTotalsHouseSenate</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new CommitteeTotalsHouseSenate();

            if (data.hasOwnProperty('all_other_loans')) {
                obj['all_other_loans'] = ApiClient.convertToType(data['all_other_loans'], 'Number');
            }
            if (data.hasOwnProperty('candidate_contribution')) {
                obj['candidate_contribution'] = ApiClient.convertToType(data['candidate_contribution'], 'Number');
            }
            if (data.hasOwnProperty('cash_on_hand_beginning_period')) {
                obj['cash_on_hand_beginning_period'] = ApiClient.convertToType(data['cash_on_hand_beginning_period'], 'Number');
            }
            if (data.hasOwnProperty('committee_designation')) {
                obj['committee_designation'] = ApiClient.convertToType(data['committee_designation'], 'String');
            }
            if (data.hasOwnProperty('committee_designation_full')) {
                obj['committee_designation_full'] = ApiClient.convertToType(data['committee_designation_full'], 'String');
            }
            if (data.hasOwnProperty('committee_id')) {
                obj['committee_id'] = ApiClient.convertToType(data['committee_id'], 'String');
            }
            if (data.hasOwnProperty('committee_name')) {
                obj['committee_name'] = ApiClient.convertToType(data['committee_name'], 'String');
            }
            if (data.hasOwnProperty('committee_state')) {
                obj['committee_state'] = ApiClient.convertToType(data['committee_state'], 'String');
            }
            if (data.hasOwnProperty('committee_type')) {
                obj['committee_type'] = ApiClient.convertToType(data['committee_type'], 'String');
            }
            if (data.hasOwnProperty('committee_type_full')) {
                obj['committee_type_full'] = ApiClient.convertToType(data['committee_type_full'], 'String');
            }
            if (data.hasOwnProperty('contribution_refunds')) {
                obj['contribution_refunds'] = ApiClient.convertToType(data['contribution_refunds'], 'Number');
            }
            if (data.hasOwnProperty('contributions')) {
                obj['contributions'] = ApiClient.convertToType(data['contributions'], 'Number');
            }
            if (data.hasOwnProperty('contributions_ie_and_party_expenditures_made_percent')) {
                obj['contributions_ie_and_party_expenditures_made_percent'] = ApiClient.convertToType(data['contributions_ie_and_party_expenditures_made_percent'], 'Number');
            }
            if (data.hasOwnProperty('coverage_end_date')) {
                obj['coverage_end_date'] = ApiClient.convertToType(data['coverage_end_date'], 'Date');
            }
            if (data.hasOwnProperty('coverage_start_date')) {
                obj['coverage_start_date'] = ApiClient.convertToType(data['coverage_start_date'], 'Date');
            }
            if (data.hasOwnProperty('cycle')) {
                obj['cycle'] = ApiClient.convertToType(data['cycle'], 'Number');
            }
            if (data.hasOwnProperty('disbursements')) {
                obj['disbursements'] = ApiClient.convertToType(data['disbursements'], 'Number');
            }
            if (data.hasOwnProperty('filing_frequency')) {
                obj['filing_frequency'] = ApiClient.convertToType(data['filing_frequency'], 'String');
            }
            if (data.hasOwnProperty('filing_frequency_full')) {
                obj['filing_frequency_full'] = ApiClient.convertToType(data['filing_frequency_full'], 'String');
            }
            if (data.hasOwnProperty('first_f1_date')) {
                obj['first_f1_date'] = ApiClient.convertToType(data['first_f1_date'], 'Date');
            }
            if (data.hasOwnProperty('first_file_date')) {
                obj['first_file_date'] = ApiClient.convertToType(data['first_file_date'], 'Date');
            }
            if (data.hasOwnProperty('individual_contributions')) {
                obj['individual_contributions'] = ApiClient.convertToType(data['individual_contributions'], 'Number');
            }
            if (data.hasOwnProperty('individual_contributions_percent')) {
                obj['individual_contributions_percent'] = ApiClient.convertToType(data['individual_contributions_percent'], 'Number');
            }
            if (data.hasOwnProperty('individual_itemized_contributions')) {
                obj['individual_itemized_contributions'] = ApiClient.convertToType(data['individual_itemized_contributions'], 'Number');
            }
            if (data.hasOwnProperty('individual_unitemized_contributions')) {
                obj['individual_unitemized_contributions'] = ApiClient.convertToType(data['individual_unitemized_contributions'], 'Number');
            }
            if (data.hasOwnProperty('last_beginning_image_number')) {
                obj['last_beginning_image_number'] = ApiClient.convertToType(data['last_beginning_image_number'], 'String');
            }
            if (data.hasOwnProperty('last_cash_on_hand_end_period')) {
                obj['last_cash_on_hand_end_period'] = ApiClient.convertToType(data['last_cash_on_hand_end_period'], 'Number');
            }
            if (data.hasOwnProperty('last_debts_owed_by_committee')) {
                obj['last_debts_owed_by_committee'] = ApiClient.convertToType(data['last_debts_owed_by_committee'], 'Number');
            }
            if (data.hasOwnProperty('last_debts_owed_to_committee')) {
                obj['last_debts_owed_to_committee'] = ApiClient.convertToType(data['last_debts_owed_to_committee'], 'Number');
            }
            if (data.hasOwnProperty('last_report_type_full')) {
                obj['last_report_type_full'] = ApiClient.convertToType(data['last_report_type_full'], 'String');
            }
            if (data.hasOwnProperty('last_report_year')) {
                obj['last_report_year'] = ApiClient.convertToType(data['last_report_year'], 'Number');
            }
            if (data.hasOwnProperty('loan_repayments')) {
                obj['loan_repayments'] = ApiClient.convertToType(data['loan_repayments'], 'Number');
            }
            if (data.hasOwnProperty('loan_repayments_candidate_loans')) {
                obj['loan_repayments_candidate_loans'] = ApiClient.convertToType(data['loan_repayments_candidate_loans'], 'Number');
            }
            if (data.hasOwnProperty('loan_repayments_other_loans')) {
                obj['loan_repayments_other_loans'] = ApiClient.convertToType(data['loan_repayments_other_loans'], 'Number');
            }
            if (data.hasOwnProperty('loans')) {
                obj['loans'] = ApiClient.convertToType(data['loans'], 'Number');
            }
            if (data.hasOwnProperty('loans_made_by_candidate')) {
                obj['loans_made_by_candidate'] = ApiClient.convertToType(data['loans_made_by_candidate'], 'Number');
            }
            if (data.hasOwnProperty('net_contributions')) {
                obj['net_contributions'] = ApiClient.convertToType(data['net_contributions'], 'Number');
            }
            if (data.hasOwnProperty('net_operating_expenditures')) {
                obj['net_operating_expenditures'] = ApiClient.convertToType(data['net_operating_expenditures'], 'Number');
            }
            if (data.hasOwnProperty('offsets_to_operating_expenditures')) {
                obj['offsets_to_operating_expenditures'] = ApiClient.convertToType(data['offsets_to_operating_expenditures'], 'Number');
            }
            if (data.hasOwnProperty('operating_expenditures')) {
                obj['operating_expenditures'] = ApiClient.convertToType(data['operating_expenditures'], 'Number');
            }
            if (data.hasOwnProperty('operating_expenditures_percent')) {
                obj['operating_expenditures_percent'] = ApiClient.convertToType(data['operating_expenditures_percent'], 'Number');
            }
            if (data.hasOwnProperty('organization_type')) {
                obj['organization_type'] = ApiClient.convertToType(data['organization_type'], 'String');
            }
            if (data.hasOwnProperty('organization_type_full')) {
                obj['organization_type_full'] = ApiClient.convertToType(data['organization_type_full'], 'String');
            }
            if (data.hasOwnProperty('other_disbursements')) {
                obj['other_disbursements'] = ApiClient.convertToType(data['other_disbursements'], 'Number');
            }
            if (data.hasOwnProperty('other_political_committee_contributions')) {
                obj['other_political_committee_contributions'] = ApiClient.convertToType(data['other_political_committee_contributions'], 'Number');
            }
            if (data.hasOwnProperty('other_receipts')) {
                obj['other_receipts'] = ApiClient.convertToType(data['other_receipts'], 'Number');
            }
            if (data.hasOwnProperty('party_and_other_committee_contributions_percent')) {
                obj['party_and_other_committee_contributions_percent'] = ApiClient.convertToType(data['party_and_other_committee_contributions_percent'], 'Number');
            }
            if (data.hasOwnProperty('party_full')) {
                obj['party_full'] = ApiClient.convertToType(data['party_full'], 'String');
            }
            if (data.hasOwnProperty('pdf_url')) {
                obj['pdf_url'] = ApiClient.convertToType(data['pdf_url'], 'String');
            }
            if (data.hasOwnProperty('political_party_committee_contributions')) {
                obj['political_party_committee_contributions'] = ApiClient.convertToType(data['political_party_committee_contributions'], 'Number');
            }
            if (data.hasOwnProperty('receipts')) {
                obj['receipts'] = ApiClient.convertToType(data['receipts'], 'Number');
            }
            if (data.hasOwnProperty('refunded_individual_contributions')) {
                obj['refunded_individual_contributions'] = ApiClient.convertToType(data['refunded_individual_contributions'], 'Number');
            }
            if (data.hasOwnProperty('refunded_other_political_committee_contributions')) {
                obj['refunded_other_political_committee_contributions'] = ApiClient.convertToType(data['refunded_other_political_committee_contributions'], 'Number');
            }
            if (data.hasOwnProperty('refunded_political_party_committee_contributions')) {
                obj['refunded_political_party_committee_contributions'] = ApiClient.convertToType(data['refunded_political_party_committee_contributions'], 'Number');
            }
            if (data.hasOwnProperty('report_form')) {
                obj['report_form'] = ApiClient.convertToType(data['report_form'], 'String');
            }
            if (data.hasOwnProperty('transaction_coverage_date')) {
                obj['transaction_coverage_date'] = ApiClient.convertToType(data['transaction_coverage_date'], 'Date');
            }
            if (data.hasOwnProperty('transfers_from_other_authorized_committee')) {
                obj['transfers_from_other_authorized_committee'] = ApiClient.convertToType(data['transfers_from_other_authorized_committee'], 'Number');
            }
            if (data.hasOwnProperty('transfers_to_other_authorized_committee')) {
                obj['transfers_to_other_authorized_committee'] = ApiClient.convertToType(data['transfers_to_other_authorized_committee'], 'Number');
            }
            if (data.hasOwnProperty('treasurer_name')) {
                obj['treasurer_name'] = ApiClient.convertToType(data['treasurer_name'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>CommitteeTotalsHouseSenate</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>CommitteeTotalsHouseSenate</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of CommitteeTotalsHouseSenate.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['committee_designation'] && !(typeof data['committee_designation'] === 'string' || data['committee_designation'] instanceof String)) {
            throw new Error("Expected the field `committee_designation` to be a primitive type in the JSON string but got " + data['committee_designation']);
        }
        // ensure the json data is a string
        if (data['committee_designation_full'] && !(typeof data['committee_designation_full'] === 'string' || data['committee_designation_full'] instanceof String)) {
            throw new Error("Expected the field `committee_designation_full` to be a primitive type in the JSON string but got " + data['committee_designation_full']);
        }
        // ensure the json data is a string
        if (data['committee_id'] && !(typeof data['committee_id'] === 'string' || data['committee_id'] instanceof String)) {
            throw new Error("Expected the field `committee_id` to be a primitive type in the JSON string but got " + data['committee_id']);
        }
        // ensure the json data is a string
        if (data['committee_name'] && !(typeof data['committee_name'] === 'string' || data['committee_name'] instanceof String)) {
            throw new Error("Expected the field `committee_name` to be a primitive type in the JSON string but got " + data['committee_name']);
        }
        // ensure the json data is a string
        if (data['committee_state'] && !(typeof data['committee_state'] === 'string' || data['committee_state'] instanceof String)) {
            throw new Error("Expected the field `committee_state` to be a primitive type in the JSON string but got " + data['committee_state']);
        }
        // ensure the json data is a string
        if (data['committee_type'] && !(typeof data['committee_type'] === 'string' || data['committee_type'] instanceof String)) {
            throw new Error("Expected the field `committee_type` to be a primitive type in the JSON string but got " + data['committee_type']);
        }
        // ensure the json data is a string
        if (data['committee_type_full'] && !(typeof data['committee_type_full'] === 'string' || data['committee_type_full'] instanceof String)) {
            throw new Error("Expected the field `committee_type_full` to be a primitive type in the JSON string but got " + data['committee_type_full']);
        }
        // ensure the json data is a string
        if (data['filing_frequency'] && !(typeof data['filing_frequency'] === 'string' || data['filing_frequency'] instanceof String)) {
            throw new Error("Expected the field `filing_frequency` to be a primitive type in the JSON string but got " + data['filing_frequency']);
        }
        // ensure the json data is a string
        if (data['filing_frequency_full'] && !(typeof data['filing_frequency_full'] === 'string' || data['filing_frequency_full'] instanceof String)) {
            throw new Error("Expected the field `filing_frequency_full` to be a primitive type in the JSON string but got " + data['filing_frequency_full']);
        }
        // ensure the json data is a string
        if (data['last_beginning_image_number'] && !(typeof data['last_beginning_image_number'] === 'string' || data['last_beginning_image_number'] instanceof String)) {
            throw new Error("Expected the field `last_beginning_image_number` to be a primitive type in the JSON string but got " + data['last_beginning_image_number']);
        }
        // ensure the json data is a string
        if (data['last_report_type_full'] && !(typeof data['last_report_type_full'] === 'string' || data['last_report_type_full'] instanceof String)) {
            throw new Error("Expected the field `last_report_type_full` to be a primitive type in the JSON string but got " + data['last_report_type_full']);
        }
        // ensure the json data is a string
        if (data['organization_type'] && !(typeof data['organization_type'] === 'string' || data['organization_type'] instanceof String)) {
            throw new Error("Expected the field `organization_type` to be a primitive type in the JSON string but got " + data['organization_type']);
        }
        // ensure the json data is a string
        if (data['organization_type_full'] && !(typeof data['organization_type_full'] === 'string' || data['organization_type_full'] instanceof String)) {
            throw new Error("Expected the field `organization_type_full` to be a primitive type in the JSON string but got " + data['organization_type_full']);
        }
        // ensure the json data is a string
        if (data['party_full'] && !(typeof data['party_full'] === 'string' || data['party_full'] instanceof String)) {
            throw new Error("Expected the field `party_full` to be a primitive type in the JSON string but got " + data['party_full']);
        }
        // ensure the json data is a string
        if (data['pdf_url'] && !(typeof data['pdf_url'] === 'string' || data['pdf_url'] instanceof String)) {
            throw new Error("Expected the field `pdf_url` to be a primitive type in the JSON string but got " + data['pdf_url']);
        }
        // ensure the json data is a string
        if (data['report_form'] && !(typeof data['report_form'] === 'string' || data['report_form'] instanceof String)) {
            throw new Error("Expected the field `report_form` to be a primitive type in the JSON string but got " + data['report_form']);
        }
        // ensure the json data is a string
        if (data['treasurer_name'] && !(typeof data['treasurer_name'] === 'string' || data['treasurer_name'] instanceof String)) {
            throw new Error("Expected the field `treasurer_name` to be a primitive type in the JSON string but got " + data['treasurer_name']);
        }

        return true;
    }


}

CommitteeTotalsHouseSenate.RequiredProperties = ["cycle"];

/**
 * @member {Number} all_other_loans
 */
CommitteeTotalsHouseSenate.prototype['all_other_loans'] = undefined;

/**
 * @member {Number} candidate_contribution
 */
CommitteeTotalsHouseSenate.prototype['candidate_contribution'] = undefined;

/**
 * @member {Number} cash_on_hand_beginning_period
 */
CommitteeTotalsHouseSenate.prototype['cash_on_hand_beginning_period'] = undefined;

/**
 * The one-letter designation code of the organization:          - A authorized by a candidate          - J joint fundraising committee          - P principal campaign committee of a candidate          - U unauthorized          - B lobbyist/registrant PAC          - D leadership PAC 
 * @member {String} committee_designation
 */
CommitteeTotalsHouseSenate.prototype['committee_designation'] = undefined;

/**
 * The one-letter designation code of the organization:          - A authorized by a candidate          - J joint fundraising committee          - P principal campaign committee of a candidate          - U unauthorized          - B lobbyist/registrant PAC          - D leadership PAC 
 * @member {String} committee_designation_full
 */
CommitteeTotalsHouseSenate.prototype['committee_designation_full'] = undefined;

/**
 *  A unique identifier assigned to each committee or filer registered with the FEC. In general committee id's begin with the letter C which is followed by eight digits. 
 * @member {String} committee_id
 */
CommitteeTotalsHouseSenate.prototype['committee_id'] = undefined;

/**
 * The name of the committee. If a committee changes its name,     the most recent name will be shown. Committee names are not unique. Use committee_id     for looking up records.
 * @member {String} committee_name
 */
CommitteeTotalsHouseSenate.prototype['committee_name'] = undefined;

/**
 *  State of the committee's address as filed on the Form 1 
 * @member {String} committee_state
 */
CommitteeTotalsHouseSenate.prototype['committee_state'] = undefined;

/**
 * The one-letter type code of the organization:         - C communication cost         - D delegate         - E electioneering communication         - H House         - I independent expenditure filer (not a committee)         - N PAC - nonqualified         - O independent expenditure-only (super PACs)         - P presidential         - Q PAC - qualified         - S Senate         - U single candidate independent expenditure         - V PAC with non-contribution account, nonqualified         - W PAC with non-contribution account, qualified         - X party, nonqualified         - Y party, qualified         - Z national party non-federal account 
 * @member {String} committee_type
 */
CommitteeTotalsHouseSenate.prototype['committee_type'] = undefined;

/**
 * The one-letter type code of the organization:         - C communication cost         - D delegate         - E electioneering communication         - H House         - I independent expenditure filer (not a committee)         - N PAC - nonqualified         - O independent expenditure-only (super PACs)         - P presidential         - Q PAC - qualified         - S Senate         - U single candidate independent expenditure         - V PAC with non-contribution account, nonqualified         - W PAC with non-contribution account, qualified         - X party, nonqualified         - Y party, qualified         - Z national party non-federal account 
 * @member {String} committee_type_full
 */
CommitteeTotalsHouseSenate.prototype['committee_type_full'] = undefined;

/**
 * @member {Number} contribution_refunds
 */
CommitteeTotalsHouseSenate.prototype['contribution_refunds'] = undefined;

/**
 * Contribution
 * @member {Number} contributions
 */
CommitteeTotalsHouseSenate.prototype['contributions'] = undefined;

/**
 * @member {Number} contributions_ie_and_party_expenditures_made_percent
 */
CommitteeTotalsHouseSenate.prototype['contributions_ie_and_party_expenditures_made_percent'] = undefined;

/**
 * @member {Date} coverage_end_date
 */
CommitteeTotalsHouseSenate.prototype['coverage_end_date'] = undefined;

/**
 * @member {Date} coverage_start_date
 */
CommitteeTotalsHouseSenate.prototype['coverage_start_date'] = undefined;

/**
 *  Filter records to only those that are applicable to a given two-year period. This cycle follows the traditional House election cycle and subdivides the presidential and Senate elections into comparable two-year blocks. The cycle begins with an odd year and is named for its ending, even year. 
 * @member {Number} cycle
 */
CommitteeTotalsHouseSenate.prototype['cycle'] = undefined;

/**
 * Disbursements
 * @member {Number} disbursements
 */
CommitteeTotalsHouseSenate.prototype['disbursements'] = undefined;

/**
 * The one-letter      code of the filing frequency:          - A Administratively terminated          - D Debt          - M Monthly filer          - Q Quarterly filer          - T Terminated          - W Waived 
 * @member {String} filing_frequency
 */
CommitteeTotalsHouseSenate.prototype['filing_frequency'] = undefined;

/**
 * The one-letter      code of the filing frequency:          - A Administratively terminated          - D Debt          - M Monthly filer          - Q Quarterly filer          - T Terminated          - W Waived 
 * @member {String} filing_frequency_full
 */
CommitteeTotalsHouseSenate.prototype['filing_frequency_full'] = undefined;

/**
 * The day the FEC received the committee's first Form 1
 * @member {Date} first_f1_date
 */
CommitteeTotalsHouseSenate.prototype['first_f1_date'] = undefined;

/**
 * The day the FEC received the committee's first filing. This is usually a Form 1 committee registration.
 * @member {Date} first_file_date
 */
CommitteeTotalsHouseSenate.prototype['first_file_date'] = undefined;

/**
 * @member {Number} individual_contributions
 */
CommitteeTotalsHouseSenate.prototype['individual_contributions'] = undefined;

/**
 * @member {Number} individual_contributions_percent
 */
CommitteeTotalsHouseSenate.prototype['individual_contributions_percent'] = undefined;

/**
 * Individual itemized contributions are from individuals whose aggregate contributions total over $200 per individual per year. Be aware, some filers choose to itemize donations $200 or less.
 * @member {Number} individual_itemized_contributions
 */
CommitteeTotalsHouseSenate.prototype['individual_itemized_contributions'] = undefined;

/**
 * Unitemized contributions are made individuals whose aggregate contributions total $200 or less per individual per year. Be aware, some filers choose to itemize donations $200 or less and in that case those donations will appear in the itemized total.
 * @member {Number} individual_unitemized_contributions
 */
CommitteeTotalsHouseSenate.prototype['individual_unitemized_contributions'] = undefined;

/**
 * @member {String} last_beginning_image_number
 */
CommitteeTotalsHouseSenate.prototype['last_beginning_image_number'] = undefined;

/**
 * @member {Number} last_cash_on_hand_end_period
 */
CommitteeTotalsHouseSenate.prototype['last_cash_on_hand_end_period'] = undefined;

/**
 * @member {Number} last_debts_owed_by_committee
 */
CommitteeTotalsHouseSenate.prototype['last_debts_owed_by_committee'] = undefined;

/**
 * @member {Number} last_debts_owed_to_committee
 */
CommitteeTotalsHouseSenate.prototype['last_debts_owed_to_committee'] = undefined;

/**
 * @member {String} last_report_type_full
 */
CommitteeTotalsHouseSenate.prototype['last_report_type_full'] = undefined;

/**
 * @member {Number} last_report_year
 */
CommitteeTotalsHouseSenate.prototype['last_report_year'] = undefined;

/**
 * @member {Number} loan_repayments
 */
CommitteeTotalsHouseSenate.prototype['loan_repayments'] = undefined;

/**
 * @member {Number} loan_repayments_candidate_loans
 */
CommitteeTotalsHouseSenate.prototype['loan_repayments_candidate_loans'] = undefined;

/**
 * @member {Number} loan_repayments_other_loans
 */
CommitteeTotalsHouseSenate.prototype['loan_repayments_other_loans'] = undefined;

/**
 * @member {Number} loans
 */
CommitteeTotalsHouseSenate.prototype['loans'] = undefined;

/**
 * @member {Number} loans_made_by_candidate
 */
CommitteeTotalsHouseSenate.prototype['loans_made_by_candidate'] = undefined;

/**
 * @member {Number} net_contributions
 */
CommitteeTotalsHouseSenate.prototype['net_contributions'] = undefined;

/**
 * @member {Number} net_operating_expenditures
 */
CommitteeTotalsHouseSenate.prototype['net_operating_expenditures'] = undefined;

/**
 * @member {Number} offsets_to_operating_expenditures
 */
CommitteeTotalsHouseSenate.prototype['offsets_to_operating_expenditures'] = undefined;

/**
 * @member {Number} operating_expenditures
 */
CommitteeTotalsHouseSenate.prototype['operating_expenditures'] = undefined;

/**
 * @member {Number} operating_expenditures_percent
 */
CommitteeTotalsHouseSenate.prototype['operating_expenditures_percent'] = undefined;

/**
 * The one-letter code for the kind for organization:         - C corporation         - L labor organization         - M membership organization         - T trade association         - V cooperative         - W corporation without capital stock 
 * @member {String} organization_type
 */
CommitteeTotalsHouseSenate.prototype['organization_type'] = undefined;

/**
 * The one-letter code for the kind for organization:         - C corporation         - L labor organization         - M membership organization         - T trade association         - V cooperative         - W corporation without capital stock 
 * @member {String} organization_type_full
 */
CommitteeTotalsHouseSenate.prototype['organization_type_full'] = undefined;

/**
 * @member {Number} other_disbursements
 */
CommitteeTotalsHouseSenate.prototype['other_disbursements'] = undefined;

/**
 * @member {Number} other_political_committee_contributions
 */
CommitteeTotalsHouseSenate.prototype['other_political_committee_contributions'] = undefined;

/**
 * @member {Number} other_receipts
 */
CommitteeTotalsHouseSenate.prototype['other_receipts'] = undefined;

/**
 * @member {Number} party_and_other_committee_contributions_percent
 */
CommitteeTotalsHouseSenate.prototype['party_and_other_committee_contributions_percent'] = undefined;

/**
 * Party affiliated with a candidate or committee
 * @member {String} party_full
 */
CommitteeTotalsHouseSenate.prototype['party_full'] = undefined;

/**
 * @member {String} pdf_url
 */
CommitteeTotalsHouseSenate.prototype['pdf_url'] = undefined;

/**
 * @member {Number} political_party_committee_contributions
 */
CommitteeTotalsHouseSenate.prototype['political_party_committee_contributions'] = undefined;

/**
 * @member {Number} receipts
 */
CommitteeTotalsHouseSenate.prototype['receipts'] = undefined;

/**
 * @member {Number} refunded_individual_contributions
 */
CommitteeTotalsHouseSenate.prototype['refunded_individual_contributions'] = undefined;

/**
 * @member {Number} refunded_other_political_committee_contributions
 */
CommitteeTotalsHouseSenate.prototype['refunded_other_political_committee_contributions'] = undefined;

/**
 * @member {Number} refunded_political_party_committee_contributions
 */
CommitteeTotalsHouseSenate.prototype['refunded_political_party_committee_contributions'] = undefined;

/**
 * @member {String} report_form
 */
CommitteeTotalsHouseSenate.prototype['report_form'] = undefined;

/**
 * @member {Date} transaction_coverage_date
 */
CommitteeTotalsHouseSenate.prototype['transaction_coverage_date'] = undefined;

/**
 * @member {Number} transfers_from_other_authorized_committee
 */
CommitteeTotalsHouseSenate.prototype['transfers_from_other_authorized_committee'] = undefined;

/**
 * @member {Number} transfers_to_other_authorized_committee
 */
CommitteeTotalsHouseSenate.prototype['transfers_to_other_authorized_committee'] = undefined;

/**
 * Name of the Committee's treasurer. If multiple treasurers for the committee, the most recent treasurer will be shown.
 * @member {String} treasurer_name
 */
CommitteeTotalsHouseSenate.prototype['treasurer_name'] = undefined;






export default CommitteeTotalsHouseSenate;

