/**
 * OpenFEC
 * This application programming interface (API) allows you to explore the way candidates and committees fund their campaigns.    The Federal Election Commission (FEC) API is a RESTful web service supporting full-text and field-specific searches on FEC data. [Bulk downloads](https://www.fec.gov/data/advanced/?tab=bulk-data) are available on the current site. Information is tied to the underlying forms by file ID and image ID. Data is updated nightly.    There are a lot of data, and a good place to start is to use search to find interesting candidates and committees. Then, you can use their IDs to find report or line item details with the other endpoints. If you are interested in individual donors, check out contributor information in the `/schedule_a/` endpoints.    <b class=\"body\" id=\"getting_started_head\">Getting started with the openFEC API</b><br>    If you would like to use the FEC's API programmatically, you can sign up for your own API key using our form. Alternatively, you can still try out our API without an API key by using the web interface and using DEMO_KEY. Note that when you use the openFEC API you are subject to the [Terms of Service](https://github.com/fecgov/FEC/blob/master/TERMS-OF-SERVICE.md) and [Acceptable Use policy](https://github.com/fecgov/FEC/blob/master/ACCEPTABLE-USE-POLICY.md).    Signing up for an API key will enable you to place up to 1,000 calls an hour. Each call is limited to 100 results per page. You can email questions, comments or a request to get a key for 7,200 calls an hour (120 calls per minute) to <a href=\"mailto:APIinfo@fec.gov\">APIinfo@fec.gov</a>. You can also ask questions and discuss the data in a community led [group](https://groups.google.com/forum/#!forum/fec-data).    The model definitions and schema are available at [/swagger](/swagger/). This is useful for making wrappers and exploring the data.    A few restrictions limit the way you can use FEC data. For example, you canâ€™t use contributor lists for commercial purposes or to solicit donations. [Learn more here](https://www.fec.gov/updates/sale-or-use-contributor-information/).    [Inspect our source code](https://github.com/fecgov/openFEC). We welcome issues and pull requests!    <p><br></p> <h2 class=\"title\" id=\"signup_head\">Sign up for an API key</h2> <div id=\"apidatagov_signup\">Loading signup form...</div>
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The OperationsLog model module.
 * @module model/OperationsLog
 * @version 1.0
 */
class OperationsLog {
    /**
     * Constructs a new <code>OperationsLog</code>.
     * @alias module:model/OperationsLog
     */
    constructor() { 
        
        OperationsLog.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>OperationsLog</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/OperationsLog} obj Optional instance to populate.
     * @return {module:model/OperationsLog} The populated <code>OperationsLog</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new OperationsLog();

            if (data.hasOwnProperty('amendment_indicator')) {
                obj['amendment_indicator'] = ApiClient.convertToType(data['amendment_indicator'], 'String');
            }
            if (data.hasOwnProperty('beginning_image_number')) {
                obj['beginning_image_number'] = ApiClient.convertToType(data['beginning_image_number'], 'String');
            }
            if (data.hasOwnProperty('candidate_committee_id')) {
                obj['candidate_committee_id'] = ApiClient.convertToType(data['candidate_committee_id'], 'String');
            }
            if (data.hasOwnProperty('coverage_end_date')) {
                obj['coverage_end_date'] = ApiClient.convertToType(data['coverage_end_date'], 'Date');
            }
            if (data.hasOwnProperty('coverage_start_date')) {
                obj['coverage_start_date'] = ApiClient.convertToType(data['coverage_start_date'], 'Date');
            }
            if (data.hasOwnProperty('ending_image_number')) {
                obj['ending_image_number'] = ApiClient.convertToType(data['ending_image_number'], 'String');
            }
            if (data.hasOwnProperty('form_type')) {
                obj['form_type'] = ApiClient.convertToType(data['form_type'], 'String');
            }
            if (data.hasOwnProperty('receipt_date')) {
                obj['receipt_date'] = ApiClient.convertToType(data['receipt_date'], 'Date');
            }
            if (data.hasOwnProperty('report_type')) {
                obj['report_type'] = ApiClient.convertToType(data['report_type'], 'String');
            }
            if (data.hasOwnProperty('report_year')) {
                obj['report_year'] = ApiClient.convertToType(data['report_year'], 'Number');
            }
            if (data.hasOwnProperty('status_num')) {
                obj['status_num'] = ApiClient.convertToType(data['status_num'], 'Number');
            }
            if (data.hasOwnProperty('sub_id')) {
                obj['sub_id'] = ApiClient.convertToType(data['sub_id'], 'Number');
            }
            if (data.hasOwnProperty('summary_data_complete_date')) {
                obj['summary_data_complete_date'] = ApiClient.convertToType(data['summary_data_complete_date'], 'Date');
            }
            if (data.hasOwnProperty('summary_data_verification_date')) {
                obj['summary_data_verification_date'] = ApiClient.convertToType(data['summary_data_verification_date'], 'Date');
            }
            if (data.hasOwnProperty('transaction_data_complete_date')) {
                obj['transaction_data_complete_date'] = ApiClient.convertToType(data['transaction_data_complete_date'], 'Date');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>OperationsLog</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>OperationsLog</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['amendment_indicator'] && !(typeof data['amendment_indicator'] === 'string' || data['amendment_indicator'] instanceof String)) {
            throw new Error("Expected the field `amendment_indicator` to be a primitive type in the JSON string but got " + data['amendment_indicator']);
        }
        // ensure the json data is a string
        if (data['beginning_image_number'] && !(typeof data['beginning_image_number'] === 'string' || data['beginning_image_number'] instanceof String)) {
            throw new Error("Expected the field `beginning_image_number` to be a primitive type in the JSON string but got " + data['beginning_image_number']);
        }
        // ensure the json data is a string
        if (data['candidate_committee_id'] && !(typeof data['candidate_committee_id'] === 'string' || data['candidate_committee_id'] instanceof String)) {
            throw new Error("Expected the field `candidate_committee_id` to be a primitive type in the JSON string but got " + data['candidate_committee_id']);
        }
        // ensure the json data is a string
        if (data['ending_image_number'] && !(typeof data['ending_image_number'] === 'string' || data['ending_image_number'] instanceof String)) {
            throw new Error("Expected the field `ending_image_number` to be a primitive type in the JSON string but got " + data['ending_image_number']);
        }
        // ensure the json data is a string
        if (data['form_type'] && !(typeof data['form_type'] === 'string' || data['form_type'] instanceof String)) {
            throw new Error("Expected the field `form_type` to be a primitive type in the JSON string but got " + data['form_type']);
        }
        // ensure the json data is a string
        if (data['report_type'] && !(typeof data['report_type'] === 'string' || data['report_type'] instanceof String)) {
            throw new Error("Expected the field `report_type` to be a primitive type in the JSON string but got " + data['report_type']);
        }

        return true;
    }


}



/**
 * Amendent types:     -N   new     -A   amendment     -T   terminated     -C   consolidated     -M   multi-candidate     -S   secondary  NULL might be new or amendment. If amendment indicator is null and the filings is the first or first in a chain treat it as if it was a new. If it is not the first or first in a chain then treat the filing as an amendment. 
 * @member {String} amendment_indicator
 */
OperationsLog.prototype['amendment_indicator'] = undefined;

/**
 *  Unique identifier for the electronic or paper report. This number is used to construct PDF URLs to the original document. 
 * @member {String} beginning_image_number
 */
OperationsLog.prototype['beginning_image_number'] = undefined;

/**
 *  A unique identifier of the registered filer. 
 * @member {String} candidate_committee_id
 */
OperationsLog.prototype['candidate_committee_id'] = undefined;

/**
 * Ending date of the reporting period
 * @member {Date} coverage_end_date
 */
OperationsLog.prototype['coverage_end_date'] = undefined;

/**
 * Beginning date of the reporting period
 * @member {Date} coverage_start_date
 */
OperationsLog.prototype['coverage_start_date'] = undefined;

/**
 * Image number is an unique identifier for each page the electronic or paper report. The last image number corresponds to the image number for the last page of the document.
 * @member {String} ending_image_number
 */
OperationsLog.prototype['ending_image_number'] = undefined;

/**
 * The form where the underlying data comes from, for example, Form 1 would appear as F1:     - F1   Statement of Organization     - F1M  Notification of Multicandidate Status     - F2   Statement of Candidacy     - F3   Report of Receipts and Disbursements for an Authorized Committee     - F3P  Report of Receipts and Disbursements by an Authorized Committee of a Candidate for     The Office of President or Vice President     - F3L  Report of Contributions Bundled by Lobbyists/Registrants and Lobbyist/Registrant PACs     - F3X  Report of Receipts and Disbursements for other than an Authorized Committee     - F4   Report of Receipts and Disbursements for a Committee or Organization Supporting a Nomination Convention     - F5   Report of Independent Expenditures Made and Contributions Received     - F6   48 Hour Notice of Contributions/Loans Received     - F7   Report of Communication Costs by Corporations and Membership Organizations     - F8   Debt Settlement Plan     - F9   24 Hour Notice of Disbursements for Electioneering Communications     - F13  Report of Donations Accepted for Inaugural Committee     - F99  Miscellaneous Text     - FRQ  Request for Additional Information 
 * @member {String} form_type
 */
OperationsLog.prototype['form_type'] = undefined;

/**
 * Date the FEC received the electronic or paper record
 * @member {Date} receipt_date
 */
OperationsLog.prototype['receipt_date'] = undefined;

/**
 * Name of report where the underlying data comes from:     - 10D Pre-Election     - 10G Pre-General     - 10P Pre-Primary     - 10R Pre-Run-Off     - 10S Pre-Special     - 12C Pre-Convention     - 12G Pre-General     - 12P Pre-Primary     - 12R Pre-Run-Off     - 12S Pre-Special     - 30D Post-Election     - 30G Post-General     - 30P Post-Primary     - 30R Post-Run-Off     - 30S Post-Special     - 60D Post-Convention     - M1  January Monthly     - M10 October Monthly     - M11 November Monthly     - M12 December Monthly     - M2  February Monthly     - M3  March Monthly     - M4  April Monthly     - M5  May Monthly     - M6  June Monthly     - M7  July Monthly     - M8  August Monthly     - M9  September Monthly     - MY  Mid-Year Report     - Q1  April Quarterly     - Q2  July Quarterly     - Q3  October Quarterly     - TER Termination Report     - YE  Year-End     - ADJ COMP ADJUST AMEND     - CA  COMPREHENSIVE AMEND     - 90S Post Inaugural Supplement     - 90D Post Inaugural     - 48  48 Hour Notification     - 24  24 Hour Notification     - M7S July Monthly/Semi-Annual     - MSA Monthly Semi-Annual (MY)     - MYS Monthly Year End/Semi-Annual     - Q2S July Quarterly/Semi-Annual     - QSA Quarterly Semi-Annual (MY)     - QYS Quarterly Year End/Semi-Annual     - QYE Quarterly Semi-Annual (YE)     - QMS Quarterly Mid-Year/ Semi-Annual     - MSY Monthly Semi-Annual (YE) 
 * @member {String} report_type
 */
OperationsLog.prototype['report_type'] = undefined;

/**
 *  Forms with coverage date -      year from the coverage ending date. Forms without coverage date -      year from the receipt date. 
 * @member {Number} report_year
 */
OperationsLog.prototype['report_year'] = undefined;

/**
 *  Status of the transactional report.     -0- Transaction is entered            into the system.           But not verified.     -1- Transaction is verified. 
 * @member {Number} status_num
 */
OperationsLog.prototype['status_num'] = undefined;

/**
 *  A unique identifier of the transactional report. 
 * @member {Number} sub_id
 */
OperationsLog.prototype['sub_id'] = undefined;

/**
 *  Date when the report is entered into the database 
 * @member {Date} summary_data_complete_date
 */
OperationsLog.prototype['summary_data_complete_date'] = undefined;

/**
 *  Same day or a day after the report is loaded in the database 
 * @member {Date} summary_data_verification_date
 */
OperationsLog.prototype['summary_data_verification_date'] = undefined;

/**
 *  Date when the report is processed completely 
 * @member {Date} transaction_data_complete_date
 */
OperationsLog.prototype['transaction_data_complete_date'] = undefined;






export default OperationsLog;

