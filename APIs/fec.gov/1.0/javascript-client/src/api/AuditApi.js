/**
 * OpenFEC
 * This application programming interface (API) allows you to explore the way candidates and committees fund their campaigns.    The Federal Election Commission (FEC) API is a RESTful web service supporting full-text and field-specific searches on FEC data. [Bulk downloads](https://www.fec.gov/data/advanced/?tab=bulk-data) are available on the current site. Information is tied to the underlying forms by file ID and image ID. Data is updated nightly.    There are a lot of data, and a good place to start is to use search to find interesting candidates and committees. Then, you can use their IDs to find report or line item details with the other endpoints. If you are interested in individual donors, check out contributor information in the `/schedule_a/` endpoints.    <b class=\"body\" id=\"getting_started_head\">Getting started with the openFEC API</b><br>    If you would like to use the FEC's API programmatically, you can sign up for your own API key using our form. Alternatively, you can still try out our API without an API key by using the web interface and using DEMO_KEY. Note that when you use the openFEC API you are subject to the [Terms of Service](https://github.com/fecgov/FEC/blob/master/TERMS-OF-SERVICE.md) and [Acceptable Use policy](https://github.com/fecgov/FEC/blob/master/ACCEPTABLE-USE-POLICY.md).    Signing up for an API key will enable you to place up to 1,000 calls an hour. Each call is limited to 100 results per page. You can email questions, comments or a request to get a key for 7,200 calls an hour (120 calls per minute) to <a href=\"mailto:APIinfo@fec.gov\">APIinfo@fec.gov</a>. You can also ask questions and discuss the data in a community led [group](https://groups.google.com/forum/#!forum/fec-data).    The model definitions and schema are available at [/swagger](/swagger/). This is useful for making wrappers and exploring the data.    A few restrictions limit the way you can use FEC data. For example, you canâ€™t use contributor lists for commercial purposes or to solicit donations. [Learn more here](https://www.fec.gov/updates/sale-or-use-contributor-information/).    [Inspect our source code](https://github.com/fecgov/openFEC). We welcome issues and pull requests!    <p><br></p> <h2 class=\"title\" id=\"signup_head\">Sign up for an API key</h2> <div id=\"apidatagov_signup\">Loading signup form...</div>
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import AuditCandidateSearchList from '../model/AuditCandidateSearchList';
import AuditCasePage from '../model/AuditCasePage';
import AuditCategoryPage from '../model/AuditCategoryPage';
import AuditCommitteeSearchList from '../model/AuditCommitteeSearchList';
import AuditPrimaryCategoryPage from '../model/AuditPrimaryCategoryPage';

/**
* Audit service.
* @module api/AuditApi
* @version 1.0
*/
export default class AuditApi {

    /**
    * Constructs a new AuditApi. 
    * @alias module:api/AuditApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the auditCaseGet operation.
     * @callback module:api/AuditApi~auditCaseGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AuditCasePage} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     *  This endpoint contains Final Audit Reports approved by the Commission since inception. The search can be based on information about the audited committee (Name, FEC ID Number, Type,  Election Cycle) or the issues covered in the report. 
     * @param {String} apiKey  API key for https://api.data.gov. Get one at https://api.data.gov/signup. 
     * @param {Object} opts Optional parameters
     * @param {Number} [maxElectionCycle]  Filter records to only those that are applicable to a given two-year period. This cycle follows the traditional House election cycle and subdivides the presidential and Senate elections into comparable two-year blocks. The cycle begins with an odd year and is named for its ending, even year. 
     * @param {Array.<String>} [q] The name of the committee. If a committee changes its name,     the most recent name will be shown. Committee names are not unique. Use committee_id     for looking up records.
     * @param {String} [subCategoryId = 'all')]  The finding id of an audit. Finding are a category of broader issues. Each category has an unique ID. 
     * @param {Array.<Number>} [cycle]  Filter records to only those that are applicable to a given two-year period. This cycle follows the traditional House election cycle and subdivides the presidential and Senate elections into comparable two-year blocks. The cycle begins with an odd year and is named for its ending, even year. 
     * @param {Boolean} [sortNullOnly = false)] Toggle that filters out all rows having sort column that is non-null
     * @param {Array.<String>} [auditCaseId]  Primary/foreign key for audit tables 
     * @param {Boolean} [sortHideNull = false)] Hide null values on sorted column(s).
     * @param {Array.<String>} [candidateId]  A unique identifier assigned to each candidate registered with the FEC. If a person runs for several offices, that person will have separate candidate IDs for each office. First character indicates office - [P]residential, [H]ouse, [S]enate]. Second character is the last digit of the two-year period the ID was created. Third and fourth is the candidate state. Presidential IDs don't have state. Fifth and sixth is the district when the candidate first ran. This does not change if the candidate/member's district changes during re-districting. Presidential IDs don't have districts. The rest is sequence. 
     * @param {Array.<String>} [qq] Name of candidate running for office
     * @param {Number} [perPage = 20)] The number of results returned per page. Defaults to 20.
     * @param {Array.<String>} [sort]  Provide a field to sort by. Use `-` for descending order. ex: `-case_no` 
     * @param {Number} [minElectionCycle]  Filter records to only those that are applicable to a given two-year period. This cycle follows the traditional House election cycle and subdivides the presidential and Senate elections into comparable two-year blocks. The cycle begins with an odd year and is named for its ending, even year. 
     * @param {Array.<Number>} [auditId]  The audit issue. Each subcategory has an unique ID 
     * @param {String} [committeeDesignation] Type of committee:         - H or S - Congressional         - P - Presidential         - X or Y or Z - Party         - N or Q - PAC         - I - Independent expenditure         - O - Super PAC  
     * @param {Array.<String>} [committeeType] The one-letter type code of the organization:         - C communication cost         - D delegate         - E electioneering communication         - H House         - I independent expenditure filer (not a committee)         - N PAC - nonqualified         - O independent expenditure-only (super PACs)         - P presidential         - Q PAC - qualified         - S Senate         - U single candidate independent expenditure         - V PAC with non-contribution account, nonqualified         - W PAC with non-contribution account, qualified         - X party, nonqualified         - Y party, qualified         - Z national party non-federal account 
     * @param {Boolean} [sortNullsLast = false)] Toggle that sorts null values last
     * @param {Number} [page = 1)] For paginating through results, starting at page 1
     * @param {Array.<String>} [committeeId]  A unique identifier assigned to each committee or filer registered with the FEC. In general committee id's begin with the letter C which is followed by eight digits. 
     * @param {String} [primaryCategoryId = 'all')]  Audit category ID (table PK) 
     * @param {module:api/AuditApi~auditCaseGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AuditCasePage}
     */
    auditCaseGet(apiKey, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'apiKey' is set
      if (apiKey === undefined || apiKey === null) {
        throw new Error("Missing the required parameter 'apiKey' when calling auditCaseGet");
      }

      let pathParams = {
      };
      let queryParams = {
        'max_election_cycle': opts['maxElectionCycle'],
        'q': this.apiClient.buildCollectionParam(opts['q'], 'multi'),
        'sub_category_id': opts['subCategoryId'],
        'cycle': this.apiClient.buildCollectionParam(opts['cycle'], 'multi'),
        'sort_null_only': opts['sortNullOnly'],
        'audit_case_id': this.apiClient.buildCollectionParam(opts['auditCaseId'], 'multi'),
        'sort_hide_null': opts['sortHideNull'],
        'candidate_id': this.apiClient.buildCollectionParam(opts['candidateId'], 'multi'),
        'qq': this.apiClient.buildCollectionParam(opts['qq'], 'multi'),
        'per_page': opts['perPage'],
        'sort': this.apiClient.buildCollectionParam(opts['sort'], 'multi'),
        'min_election_cycle': opts['minElectionCycle'],
        'audit_id': this.apiClient.buildCollectionParam(opts['auditId'], 'multi'),
        'committee_designation': opts['committeeDesignation'],
        'api_key': apiKey,
        'committee_type': this.apiClient.buildCollectionParam(opts['committeeType'], 'multi'),
        'sort_nulls_last': opts['sortNullsLast'],
        'page': opts['page'],
        'committee_id': this.apiClient.buildCollectionParam(opts['committeeId'], 'multi'),
        'primary_category_id': opts['primaryCategoryId']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyHeaderAuth', 'ApiKeyQueryAuth', 'apiKey'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = AuditCasePage;
      return this.apiClient.callApi(
        '/audit-case/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the auditCategoryGet operation.
     * @callback module:api/AuditApi~auditCategoryGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AuditCategoryPage} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     *  This lists the options for the categories and subcategories available in the /audit-search/ endpoint. 
     * @param {String} apiKey  API key for https://api.data.gov. Get one at https://api.data.gov/signup. 
     * @param {Object} opts Optional parameters
     * @param {Boolean} [sortNullsLast = false)] Toggle that sorts null values last
     * @param {Number} [page = 1)] For paginating through results, starting at page 1
     * @param {Boolean} [sortNullOnly = false)] Toggle that filters out all rows having sort column that is non-null
     * @param {Boolean} [sortHideNull = false)] Hide null values on sorted column(s).
     * @param {Number} [perPage = 20)] The number of results returned per page. Defaults to 20.
     * @param {Array.<String>} [primaryCategoryId]  Audit category ID (table PK) 
     * @param {String} [sort = 'primary_category_name')] Provide a field to sort by. Use `-` for descending order. 
     * @param {Array.<String>} [primaryCategoryName] Primary Audit Category     - No Findings or Issues/Not a Committee     - Net Outstanding Campaign/Convention Expenditures/Obligations     - Payments/Disgorgements     - Allocation Issues     - Prohibited Contributions     - Disclosure     - Recordkeeping     - Repayment to US Treasury     - Other     - Misstatement of Financial Activity     - Excessive Contributions     - Failure to File Reports/Schedules/Notices     - Loans     - Referred Findings Not Listed 
     * @param {module:api/AuditApi~auditCategoryGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AuditCategoryPage}
     */
    auditCategoryGet(apiKey, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'apiKey' is set
      if (apiKey === undefined || apiKey === null) {
        throw new Error("Missing the required parameter 'apiKey' when calling auditCategoryGet");
      }

      let pathParams = {
      };
      let queryParams = {
        'api_key': apiKey,
        'sort_nulls_last': opts['sortNullsLast'],
        'page': opts['page'],
        'sort_null_only': opts['sortNullOnly'],
        'sort_hide_null': opts['sortHideNull'],
        'per_page': opts['perPage'],
        'primary_category_id': this.apiClient.buildCollectionParam(opts['primaryCategoryId'], 'multi'),
        'sort': opts['sort'],
        'primary_category_name': this.apiClient.buildCollectionParam(opts['primaryCategoryName'], 'multi')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyHeaderAuth', 'ApiKeyQueryAuth', 'apiKey'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = AuditCategoryPage;
      return this.apiClient.callApi(
        '/audit-category/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the auditPrimaryCategoryGet operation.
     * @callback module:api/AuditApi~auditPrimaryCategoryGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AuditPrimaryCategoryPage} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     *  This lists the options for the primary categories available in the /audit-search/ endpoint. 
     * @param {String} apiKey  API key for https://api.data.gov. Get one at https://api.data.gov/signup. 
     * @param {Object} opts Optional parameters
     * @param {Boolean} [sortNullsLast = false)] Toggle that sorts null values last
     * @param {Number} [page = 1)] For paginating through results, starting at page 1
     * @param {Boolean} [sortNullOnly = false)] Toggle that filters out all rows having sort column that is non-null
     * @param {Boolean} [sortHideNull = false)] Hide null values on sorted column(s).
     * @param {Number} [perPage = 20)] The number of results returned per page. Defaults to 20.
     * @param {Array.<String>} [primaryCategoryId]  Audit category ID (table PK) 
     * @param {String} [sort = 'primary_category_name')] Provide a field to sort by. Use `-` for descending order. 
     * @param {Array.<String>} [primaryCategoryName] Primary Audit Category     - No Findings or Issues/Not a Committee     - Net Outstanding Campaign/Convention Expenditures/Obligations     - Payments/Disgorgements     - Allocation Issues     - Prohibited Contributions     - Disclosure     - Recordkeeping     - Repayment to US Treasury     - Other     - Misstatement of Financial Activity     - Excessive Contributions     - Failure to File Reports/Schedules/Notices     - Loans     - Referred Findings Not Listed 
     * @param {module:api/AuditApi~auditPrimaryCategoryGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AuditPrimaryCategoryPage}
     */
    auditPrimaryCategoryGet(apiKey, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'apiKey' is set
      if (apiKey === undefined || apiKey === null) {
        throw new Error("Missing the required parameter 'apiKey' when calling auditPrimaryCategoryGet");
      }

      let pathParams = {
      };
      let queryParams = {
        'api_key': apiKey,
        'sort_nulls_last': opts['sortNullsLast'],
        'page': opts['page'],
        'sort_null_only': opts['sortNullOnly'],
        'sort_hide_null': opts['sortHideNull'],
        'per_page': opts['perPage'],
        'primary_category_id': this.apiClient.buildCollectionParam(opts['primaryCategoryId'], 'multi'),
        'sort': opts['sort'],
        'primary_category_name': this.apiClient.buildCollectionParam(opts['primaryCategoryName'], 'multi')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyHeaderAuth', 'ApiKeyQueryAuth', 'apiKey'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = AuditPrimaryCategoryPage;
      return this.apiClient.callApi(
        '/audit-primary-category/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the namesAuditCandidatesGet operation.
     * @callback module:api/AuditApi~namesAuditCandidatesGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AuditCandidateSearchList} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     *  Search for candidates or committees by name. If you're looking for information on a particular person or group, using a name to find the `candidate_id` or `committee_id` on this endpoint can be a helpful first step. 
     * @param {String} apiKey  API key for https://api.data.gov. Get one at https://api.data.gov/signup. 
     * @param {Array.<String>} q Name (candidate or committee) to search for
     * @param {module:api/AuditApi~namesAuditCandidatesGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AuditCandidateSearchList}
     */
    namesAuditCandidatesGet(apiKey, q, callback) {
      let postBody = null;
      // verify the required parameter 'apiKey' is set
      if (apiKey === undefined || apiKey === null) {
        throw new Error("Missing the required parameter 'apiKey' when calling namesAuditCandidatesGet");
      }
      // verify the required parameter 'q' is set
      if (q === undefined || q === null) {
        throw new Error("Missing the required parameter 'q' when calling namesAuditCandidatesGet");
      }

      let pathParams = {
      };
      let queryParams = {
        'api_key': apiKey,
        'q': this.apiClient.buildCollectionParam(q, 'multi')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyHeaderAuth', 'ApiKeyQueryAuth', 'apiKey'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = AuditCandidateSearchList;
      return this.apiClient.callApi(
        '/names/audit_candidates/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the namesAuditCommitteesGet operation.
     * @callback module:api/AuditApi~namesAuditCommitteesGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AuditCommitteeSearchList} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     *  Search for candidates or committees by name. If you're looking for information on a particular person or group, using a name to find the `candidate_id` or `committee_id` on this endpoint can be a helpful first step. 
     * @param {String} apiKey  API key for https://api.data.gov. Get one at https://api.data.gov/signup. 
     * @param {Array.<String>} q Name (candidate or committee) to search for
     * @param {module:api/AuditApi~namesAuditCommitteesGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AuditCommitteeSearchList}
     */
    namesAuditCommitteesGet(apiKey, q, callback) {
      let postBody = null;
      // verify the required parameter 'apiKey' is set
      if (apiKey === undefined || apiKey === null) {
        throw new Error("Missing the required parameter 'apiKey' when calling namesAuditCommitteesGet");
      }
      // verify the required parameter 'q' is set
      if (q === undefined || q === null) {
        throw new Error("Missing the required parameter 'q' when calling namesAuditCommitteesGet");
      }

      let pathParams = {
      };
      let queryParams = {
        'api_key': apiKey,
        'q': this.apiClient.buildCollectionParam(q, 'multi')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyHeaderAuth', 'ApiKeyQueryAuth', 'apiKey'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = AuditCommitteeSearchList;
      return this.apiClient.callApi(
        '/names/audit_committees/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
