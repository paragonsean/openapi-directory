/**
 * OpenFEC
 * This application programming interface (API) allows you to explore the way candidates and committees fund their campaigns.    The Federal Election Commission (FEC) API is a RESTful web service supporting full-text and field-specific searches on FEC data. [Bulk downloads](https://www.fec.gov/data/advanced/?tab=bulk-data) are available on the current site. Information is tied to the underlying forms by file ID and image ID. Data is updated nightly.    There are a lot of data, and a good place to start is to use search to find interesting candidates and committees. Then, you can use their IDs to find report or line item details with the other endpoints. If you are interested in individual donors, check out contributor information in the `/schedule_a/` endpoints.    <b class=\"body\" id=\"getting_started_head\">Getting started with the openFEC API</b><br>    If you would like to use the FEC's API programmatically, you can sign up for your own API key using our form. Alternatively, you can still try out our API without an API key by using the web interface and using DEMO_KEY. Note that when you use the openFEC API you are subject to the [Terms of Service](https://github.com/fecgov/FEC/blob/master/TERMS-OF-SERVICE.md) and [Acceptable Use policy](https://github.com/fecgov/FEC/blob/master/ACCEPTABLE-USE-POLICY.md).    Signing up for an API key will enable you to place up to 1,000 calls an hour. Each call is limited to 100 results per page. You can email questions, comments or a request to get a key for 7,200 calls an hour (120 calls per minute) to <a href=\"mailto:APIinfo@fec.gov\">APIinfo@fec.gov</a>. You can also ask questions and discuss the data in a community led [group](https://groups.google.com/forum/#!forum/fec-data).    The model definitions and schema are available at [/swagger](/swagger/). This is useful for making wrappers and exploring the data.    A few restrictions limit the way you can use FEC data. For example, you canâ€™t use contributor lists for commercial purposes or to solicit donations. [Learn more here](https://www.fec.gov/updates/sale-or-use-contributor-information/).    [Inspect our source code](https://github.com/fecgov/openFEC). We welcome issues and pull requests!    <p><br></p> <h2 class=\"title\" id=\"signup_head\">Sign up for an API key</h2> <div id=\"apidatagov_signup\">Loading signup form...</div>
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import ECTotalsByCandidatePage from '../model/ECTotalsByCandidatePage';
import ElectioneeringByCandidatePage from '../model/ElectioneeringByCandidatePage';
import ElectioneeringPage from '../model/ElectioneeringPage';

/**
* Electioneering service.
* @module api/ElectioneeringApi
* @version 1.0
*/
export default class ElectioneeringApi {

    /**
    * Constructs a new ElectioneeringApi. 
    * @alias module:api/ElectioneeringApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the electioneeringAggregatesGet operation.
     * @callback module:api/ElectioneeringApi~electioneeringAggregatesGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ElectioneeringByCandidatePage} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Electioneering communications costs aggregates
     * @param {String} apiKey  API key for https://api.data.gov. Get one at https://api.data.gov/signup. 
     * @param {Object} opts Optional parameters
     * @param {Array.<Number>} [cycle]  Filter records to only those that were applicable to a given two-year period.The cycle begins with an odd year and is named for its ending, even year. 
     * @param {Boolean} [sortNullsLast = false)] Toggle that sorts null values last
     * @param {Number} [page = 1)] For paginating through results, starting at page 1
     * @param {Array.<String>} [committeeId]  A unique identifier assigned to each committee or filer registered with the FEC. In general committee id's begin with the letter C which is followed by eight digits. 
     * @param {Boolean} [sortNullOnly = false)] Toggle that filters out all rows having sort column that is non-null
     * @param {Boolean} [sortHideNull = false)] Hide null values on sorted column(s).
     * @param {Array.<String>} [candidateId]  A unique identifier assigned to each candidate registered with the FEC. If a person runs for several offices, that person will have separate candidate IDs for each office. First character indicates office - [P]residential, [H]ouse, [S]enate]. Second character is the last digit of the two-year period the ID was created. Third and fourth is the candidate state. Presidential IDs don't have state. Fifth and sixth is the district when the candidate first ran. This does not change if the candidate/member's district changes during re-districting. Presidential IDs don't have districts. The rest is sequence. 
     * @param {Number} [perPage = 20)] The number of results returned per page. Defaults to 20.
     * @param {String} [sort] Provide a field to sort by. Use `-` for descending order. 
     * @param {module:api/ElectioneeringApi~electioneeringAggregatesGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ElectioneeringByCandidatePage}
     */
    electioneeringAggregatesGet(apiKey, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'apiKey' is set
      if (apiKey === undefined || apiKey === null) {
        throw new Error("Missing the required parameter 'apiKey' when calling electioneeringAggregatesGet");
      }

      let pathParams = {
      };
      let queryParams = {
        'api_key': apiKey,
        'cycle': this.apiClient.buildCollectionParam(opts['cycle'], 'multi'),
        'sort_nulls_last': opts['sortNullsLast'],
        'page': opts['page'],
        'committee_id': this.apiClient.buildCollectionParam(opts['committeeId'], 'multi'),
        'sort_null_only': opts['sortNullOnly'],
        'sort_hide_null': opts['sortHideNull'],
        'candidate_id': this.apiClient.buildCollectionParam(opts['candidateId'], 'multi'),
        'per_page': opts['perPage'],
        'sort': opts['sort']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyHeaderAuth', 'ApiKeyQueryAuth', 'apiKey'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ElectioneeringByCandidatePage;
      return this.apiClient.callApi(
        '/electioneering/aggregates/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the electioneeringByCandidateGet operation.
     * @callback module:api/ElectioneeringApi~electioneeringByCandidateGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ElectioneeringByCandidatePage} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Electioneering costs aggregated by candidate
     * @param {String} apiKey  API key for https://api.data.gov. Get one at https://api.data.gov/signup. 
     * @param {Object} opts Optional parameters
     * @param {String} [district] Two-digit US House distirict of the office the candidate is running for. Presidential, Senate and House at-large candidates will have District 00.
     * @param {Boolean} [electionFull = true)] `True` indicates that full election period of a candidate. `False` indicates that two year election cycle.
     * @param {Array.<Number>} [cycle]  Filter records to only those that were applicable to a given two-year period.The cycle begins with an odd year and is named for its ending, even year. 
     * @param {Boolean} [sortNullOnly = false)] Toggle that filters out all rows having sort column that is non-null
     * @param {Number} [page = 1)] For paginating through results, starting at page 1
     * @param {String} [state] US state or territory where a candidate runs for office
     * @param {Boolean} [sortNullsLast = false)] Toggle that sorts null values last
     * @param {Boolean} [sortHideNull = false)] Hide null values on sorted column(s).
     * @param {Array.<String>} [candidateId]  A unique identifier assigned to each candidate registered with the FEC. If a person runs for several offices, that person will have separate candidate IDs for each office. First character indicates office - [P]residential, [H]ouse, [S]enate]. Second character is the last digit of the two-year period the ID was created. Third and fourth is the candidate state. Presidential IDs don't have state. Fifth and sixth is the district when the candidate first ran. This does not change if the candidate/member's district changes during re-districting. Presidential IDs don't have districts. The rest is sequence. 
     * @param {Number} [perPage = 20)] The number of results returned per page. Defaults to 20.
     * @param {module:model/String} [office] Federal office candidate runs for: H, S or P
     * @param {String} [sort] Provide a field to sort by. Use `-` for descending order. 
     * @param {module:api/ElectioneeringApi~electioneeringByCandidateGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ElectioneeringByCandidatePage}
     */
    electioneeringByCandidateGet(apiKey, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'apiKey' is set
      if (apiKey === undefined || apiKey === null) {
        throw new Error("Missing the required parameter 'apiKey' when calling electioneeringByCandidateGet");
      }

      let pathParams = {
      };
      let queryParams = {
        'district': opts['district'],
        'api_key': apiKey,
        'election_full': opts['electionFull'],
        'cycle': this.apiClient.buildCollectionParam(opts['cycle'], 'multi'),
        'sort_null_only': opts['sortNullOnly'],
        'page': opts['page'],
        'state': opts['state'],
        'sort_nulls_last': opts['sortNullsLast'],
        'sort_hide_null': opts['sortHideNull'],
        'candidate_id': this.apiClient.buildCollectionParam(opts['candidateId'], 'multi'),
        'per_page': opts['perPage'],
        'office': opts['office'],
        'sort': opts['sort']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyHeaderAuth', 'ApiKeyQueryAuth', 'apiKey'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ElectioneeringByCandidatePage;
      return this.apiClient.callApi(
        '/electioneering/by_candidate/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the electioneeringGet operation.
     * @callback module:api/ElectioneeringApi~electioneeringGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ElectioneeringPage} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     *  An electioneering communication is any broadcast, cable or satellite communication that fulfills each of the following conditions:  _The communication refers to a clearly identified federal candidate._  _The communication is publicly distributed by a television station, radio station, cable television system or satellite system for a fee._  _The communication is distributed within 60 days prior to a general election or 30 days prior to a primary election to federal office._ 
     * @param {String} apiKey  API key for https://api.data.gov. Get one at https://api.data.gov/signup. 
     * @param {Object} opts Optional parameters
     * @param {Date} [minDate] Minimum disbursement date
     * @param {String} [description] 
     * @param {Boolean} [sortNullOnly = false)] Toggle that filters out all rows having sort column that is non-null
     * @param {Number} [page = 1)] For paginating through results, starting at page 1
     * @param {Array.<String>} [committeeId]  A unique identifier assigned to each committee or filer registered with the FEC. In general committee id's begin with the letter C which is followed by eight digits. 
     * @param {Array.<Number>} [reportYear]  Forms with coverage date -      year from the coverage ending date. Forms without coverage date -      year from the receipt date. 
     * @param {Number} [lastIndex] Index of last result from previous page
     * @param {Boolean} [sortNullsLast = false)] Toggle that sorts null values last
     * @param {Boolean} [sortHideNull = false)] Hide null values on sorted column(s).
     * @param {Array.<String>} [candidateId]  A unique identifier assigned to each candidate registered with the FEC. If a person runs for several offices, that person will have separate candidate IDs for each office. First character indicates office - [P]residential, [H]ouse, [S]enate]. Second character is the last digit of the two-year period the ID was created. Third and fourth is the candidate state. Presidential IDs don't have state. Fifth and sixth is the district when the candidate first ran. This does not change if the candidate/member's district changes during re-districting. Presidential IDs don't have districts. The rest is sequence. 
     * @param {Number} [perPage = 20)] The number of results returned per page. Defaults to 20.
     * @param {String} [minAmount] Filter for all amounts greater than a value.
     * @param {Date} [maxDate] Maximum disbursement date
     * @param {String} [maxAmount] Filter for all amounts less than a value.
     * @param {String} [sort] Provide a field to sort by. Use `-` for descending order. 
     * @param {module:api/ElectioneeringApi~electioneeringGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ElectioneeringPage}
     */
    electioneeringGet(apiKey, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'apiKey' is set
      if (apiKey === undefined || apiKey === null) {
        throw new Error("Missing the required parameter 'apiKey' when calling electioneeringGet");
      }

      let pathParams = {
      };
      let queryParams = {
        'min_date': opts['minDate'],
        'api_key': apiKey,
        'description': opts['description'],
        'sort_null_only': opts['sortNullOnly'],
        'page': opts['page'],
        'committee_id': this.apiClient.buildCollectionParam(opts['committeeId'], 'multi'),
        'report_year': this.apiClient.buildCollectionParam(opts['reportYear'], 'multi'),
        'last_index': opts['lastIndex'],
        'sort_nulls_last': opts['sortNullsLast'],
        'sort_hide_null': opts['sortHideNull'],
        'candidate_id': this.apiClient.buildCollectionParam(opts['candidateId'], 'multi'),
        'per_page': opts['perPage'],
        'min_amount': opts['minAmount'],
        'max_date': opts['maxDate'],
        'max_amount': opts['maxAmount'],
        'sort': opts['sort']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyHeaderAuth', 'ApiKeyQueryAuth', 'apiKey'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ElectioneeringPage;
      return this.apiClient.callApi(
        '/electioneering/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the electioneeringTotalsByCandidateGet operation.
     * @callback module:api/ElectioneeringApi~electioneeringTotalsByCandidateGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ECTotalsByCandidatePage} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     *  Total electioneering communications spent on candidates by cycle or candidate election year 
     * @param {String} apiKey  API key for https://api.data.gov. Get one at https://api.data.gov/signup. 
     * @param {Object} opts Optional parameters
     * @param {Boolean} [electionFull = true)] `True` indicates that full election period of a candidate. `False` indicates that two year election cycle.
     * @param {Array.<Number>} [cycle]  Filter records to only those that were applicable to a given two-year period.The cycle begins with an odd year and is named for its ending, even year. 
     * @param {Boolean} [sortNullsLast = false)] Toggle that sorts null values last
     * @param {Number} [page = 1)] For paginating through results, starting at page 1
     * @param {Boolean} [sortNullOnly = false)] Toggle that filters out all rows having sort column that is non-null
     * @param {Boolean} [sortHideNull = false)] Hide null values on sorted column(s).
     * @param {Array.<String>} [candidateId]  A unique identifier assigned to each candidate registered with the FEC. If a person runs for several offices, that person will have separate candidate IDs for each office. First character indicates office - [P]residential, [H]ouse, [S]enate]. Second character is the last digit of the two-year period the ID was created. Third and fourth is the candidate state. Presidential IDs don't have state. Fifth and sixth is the district when the candidate first ran. This does not change if the candidate/member's district changes during re-districting. Presidential IDs don't have districts. The rest is sequence. 
     * @param {Number} [perPage = 20)] The number of results returned per page. Defaults to 20.
     * @param {String} [sort] Provide a field to sort by. Use `-` for descending order. 
     * @param {module:api/ElectioneeringApi~electioneeringTotalsByCandidateGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ECTotalsByCandidatePage}
     */
    electioneeringTotalsByCandidateGet(apiKey, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'apiKey' is set
      if (apiKey === undefined || apiKey === null) {
        throw new Error("Missing the required parameter 'apiKey' when calling electioneeringTotalsByCandidateGet");
      }

      let pathParams = {
      };
      let queryParams = {
        'api_key': apiKey,
        'election_full': opts['electionFull'],
        'cycle': this.apiClient.buildCollectionParam(opts['cycle'], 'multi'),
        'sort_nulls_last': opts['sortNullsLast'],
        'page': opts['page'],
        'sort_null_only': opts['sortNullOnly'],
        'sort_hide_null': opts['sortHideNull'],
        'candidate_id': this.apiClient.buildCollectionParam(opts['candidateId'], 'multi'),
        'per_page': opts['perPage'],
        'sort': opts['sort']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyHeaderAuth', 'ApiKeyQueryAuth', 'apiKey'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ECTotalsByCandidatePage;
      return this.apiClient.callApi(
        '/electioneering/totals/by_candidate/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
