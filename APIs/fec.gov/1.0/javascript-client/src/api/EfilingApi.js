/**
 * OpenFEC
 * This application programming interface (API) allows you to explore the way candidates and committees fund their campaigns.    The Federal Election Commission (FEC) API is a RESTful web service supporting full-text and field-specific searches on FEC data. [Bulk downloads](https://www.fec.gov/data/advanced/?tab=bulk-data) are available on the current site. Information is tied to the underlying forms by file ID and image ID. Data is updated nightly.    There are a lot of data, and a good place to start is to use search to find interesting candidates and committees. Then, you can use their IDs to find report or line item details with the other endpoints. If you are interested in individual donors, check out contributor information in the `/schedule_a/` endpoints.    <b class=\"body\" id=\"getting_started_head\">Getting started with the openFEC API</b><br>    If you would like to use the FEC's API programmatically, you can sign up for your own API key using our form. Alternatively, you can still try out our API without an API key by using the web interface and using DEMO_KEY. Note that when you use the openFEC API you are subject to the [Terms of Service](https://github.com/fecgov/FEC/blob/master/TERMS-OF-SERVICE.md) and [Acceptable Use policy](https://github.com/fecgov/FEC/blob/master/ACCEPTABLE-USE-POLICY.md).    Signing up for an API key will enable you to place up to 1,000 calls an hour. Each call is limited to 100 results per page. You can email questions, comments or a request to get a key for 7,200 calls an hour (120 calls per minute) to <a href=\"mailto:APIinfo@fec.gov\">APIinfo@fec.gov</a>. You can also ask questions and discuss the data in a community led [group](https://groups.google.com/forum/#!forum/fec-data).    The model definitions and schema are available at [/swagger](/swagger/). This is useful for making wrappers and exploring the data.    A few restrictions limit the way you can use FEC data. For example, you canâ€™t use contributor lists for commercial purposes or to solicit donations. [Learn more here](https://www.fec.gov/updates/sale-or-use-contributor-information/).    [Inspect our source code](https://github.com/fecgov/openFEC). We welcome issues and pull requests!    <p><br></p> <h2 class=\"title\" id=\"signup_head\">Sign up for an API key</h2> <div id=\"apidatagov_signup\">Loading signup form...</div>
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import BaseF3FilingPage from '../model/BaseF3FilingPage';
import BaseF3PFilingPage from '../model/BaseF3PFilingPage';
import BaseF3XFilingPage from '../model/BaseF3XFilingPage';
import EFilingsPage from '../model/EFilingsPage';

/**
* Efiling service.
* @module api/EfilingApi
* @version 1.0
*/
export default class EfilingApi {

    /**
    * Constructs a new EfilingApi. 
    * @alias module:api/EfilingApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the efileFilingsGet operation.
     * @callback module:api/EfilingApi~efileFilingsGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/EFilingsPage} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Basic information about electronic files coming into the FEC, posted as they are received.
     * @param {String} apiKey  API key for https://api.data.gov. Get one at https://api.data.gov/signup. 
     * @param {Object} opts Optional parameters
     * @param {Date} [minReceiptDate]  Selects all filings received after this date(MM/DD/YYYY or YYYY-MM-DD) 
     * @param {Boolean} [sortNullsLast = false)] Toggle that sorts null values last
     * @param {Number} [page = 1)] For paginating through results, starting at page 1
     * @param {Array.<String>} [committeeId]  A unique identifier assigned to each committee or filer registered with the FEC. In general committee id's begin with the letter C which is followed by eight digits. 
     * @param {Boolean} [sortNullOnly = false)] Toggle that filters out all rows having sort column that is non-null
     * @param {Date} [maxReceiptDate]  Selects all filings received before this date(MM/DD/YYYY or YYYY-MM-DD) 
     * @param {Boolean} [sortHideNull = false)] Hide null values on sorted column(s).
     * @param {Array.<Number>} [fileNumber] Filing ID number
     * @param {Number} [perPage = 20)] The number of results returned per page. Defaults to 20.
     * @param {String} [sort = '-receipt_date')] Provide a field to sort by. Use `-` for descending order. 
     * @param {Array.<String>} [qFiler]  Keyword search for filer name or ID 
     * @param {module:api/EfilingApi~efileFilingsGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/EFilingsPage}
     */
    efileFilingsGet(apiKey, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'apiKey' is set
      if (apiKey === undefined || apiKey === null) {
        throw new Error("Missing the required parameter 'apiKey' when calling efileFilingsGet");
      }

      let pathParams = {
      };
      let queryParams = {
        'api_key': apiKey,
        'min_receipt_date': opts['minReceiptDate'],
        'sort_nulls_last': opts['sortNullsLast'],
        'page': opts['page'],
        'committee_id': this.apiClient.buildCollectionParam(opts['committeeId'], 'multi'),
        'sort_null_only': opts['sortNullOnly'],
        'max_receipt_date': opts['maxReceiptDate'],
        'sort_hide_null': opts['sortHideNull'],
        'file_number': this.apiClient.buildCollectionParam(opts['fileNumber'], 'multi'),
        'per_page': opts['perPage'],
        'sort': opts['sort'],
        'q_filer': this.apiClient.buildCollectionParam(opts['qFiler'], 'multi')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyHeaderAuth', 'ApiKeyQueryAuth', 'apiKey'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = EFilingsPage;
      return this.apiClient.callApi(
        '/efile/filings/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the efileReportsHouseSenateGet operation.
     * @callback module:api/EfilingApi~efileReportsHouseSenateGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/BaseF3FilingPage} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     *  Key financial data reported periodically by committees as they are reported. This feed includes summary information from the the House F3 reports, the presidential F3p reports and the PAC and party F3x reports.  Generally, committees file reports on a quarterly or monthly basis, but some must also submit a report 12 days before primary elections. Therefore, during the primary season, the period covered by this file may be different for different committees. These totals also incorporate any changes made by committees, if any report covering the period is amended.  DISCLAIMER: The field labels contained within this resource are subject to change.  We are attempting to succinctly label these fields while conveying clear meaning to ensure accessibility for all users. 
     * @param {String} apiKey  API key for https://api.data.gov. Get one at https://api.data.gov/signup. 
     * @param {Object} opts Optional parameters
     * @param {Date} [minReceiptDate]  Selects all filings received after this date(MM/DD/YYYY or YYYY-MM-DD) 
     * @param {Boolean} [sortNullsLast = false)] Toggle that sorts null values last
     * @param {Number} [page = 1)] For paginating through results, starting at page 1
     * @param {Array.<String>} [committeeId]  A unique identifier assigned to each committee or filer registered with the FEC. In general committee id's begin with the letter C which is followed by eight digits. 
     * @param {Boolean} [sortNullOnly = false)] Toggle that filters out all rows having sort column that is non-null
     * @param {Date} [maxReceiptDate]  Selects all filings received before this date(MM/DD/YYYY or YYYY-MM-DD) 
     * @param {Boolean} [sortHideNull = false)] Hide null values on sorted column(s).
     * @param {Array.<Number>} [fileNumber] Filing ID number
     * @param {Number} [perPage = 20)] The number of results returned per page. Defaults to 20.
     * @param {String} [sort = '-receipt_date')] Provide a field to sort by. Use `-` for descending order. 
     * @param {Array.<String>} [qFiler]  Keyword search for filer name or ID 
     * @param {module:api/EfilingApi~efileReportsHouseSenateGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/BaseF3FilingPage}
     */
    efileReportsHouseSenateGet(apiKey, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'apiKey' is set
      if (apiKey === undefined || apiKey === null) {
        throw new Error("Missing the required parameter 'apiKey' when calling efileReportsHouseSenateGet");
      }

      let pathParams = {
      };
      let queryParams = {
        'api_key': apiKey,
        'min_receipt_date': opts['minReceiptDate'],
        'sort_nulls_last': opts['sortNullsLast'],
        'page': opts['page'],
        'committee_id': this.apiClient.buildCollectionParam(opts['committeeId'], 'multi'),
        'sort_null_only': opts['sortNullOnly'],
        'max_receipt_date': opts['maxReceiptDate'],
        'sort_hide_null': opts['sortHideNull'],
        'file_number': this.apiClient.buildCollectionParam(opts['fileNumber'], 'multi'),
        'per_page': opts['perPage'],
        'sort': opts['sort'],
        'q_filer': this.apiClient.buildCollectionParam(opts['qFiler'], 'multi')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyHeaderAuth', 'ApiKeyQueryAuth', 'apiKey'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = BaseF3FilingPage;
      return this.apiClient.callApi(
        '/efile/reports/house-senate/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the efileReportsPacPartyGet operation.
     * @callback module:api/EfilingApi~efileReportsPacPartyGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/BaseF3XFilingPage} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     *  Key financial data reported periodically by committees as they are reported. This feed includes summary information from the the House F3 reports, the presidential F3p reports and the PAC and party F3x reports.  Generally, committees file reports on a quarterly or monthly basis, but some must also submit a report 12 days before primary elections. Therefore, during the primary season, the period covered by this file may be different for different committees. These totals also incorporate any changes made by committees, if any report covering the period is amended.  DISCLAIMER: The field labels contained within this resource are subject to change.  We are attempting to succinctly label these fields while conveying clear meaning to ensure accessibility for all users. 
     * @param {String} apiKey  API key for https://api.data.gov. Get one at https://api.data.gov/signup. 
     * @param {Object} opts Optional parameters
     * @param {Date} [minReceiptDate]  Selects all filings received after this date(MM/DD/YYYY or YYYY-MM-DD) 
     * @param {Boolean} [sortNullsLast = false)] Toggle that sorts null values last
     * @param {Number} [page = 1)] For paginating through results, starting at page 1
     * @param {Array.<String>} [committeeId]  A unique identifier assigned to each committee or filer registered with the FEC. In general committee id's begin with the letter C which is followed by eight digits. 
     * @param {Boolean} [sortNullOnly = false)] Toggle that filters out all rows having sort column that is non-null
     * @param {Date} [maxReceiptDate]  Selects all filings received before this date(MM/DD/YYYY or YYYY-MM-DD) 
     * @param {Boolean} [sortHideNull = false)] Hide null values on sorted column(s).
     * @param {Array.<Number>} [fileNumber] Filing ID number
     * @param {Number} [perPage = 20)] The number of results returned per page. Defaults to 20.
     * @param {String} [sort = '-receipt_date')] Provide a field to sort by. Use `-` for descending order. 
     * @param {Array.<String>} [qFiler]  Keyword search for filer name or ID 
     * @param {module:api/EfilingApi~efileReportsPacPartyGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/BaseF3XFilingPage}
     */
    efileReportsPacPartyGet(apiKey, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'apiKey' is set
      if (apiKey === undefined || apiKey === null) {
        throw new Error("Missing the required parameter 'apiKey' when calling efileReportsPacPartyGet");
      }

      let pathParams = {
      };
      let queryParams = {
        'api_key': apiKey,
        'min_receipt_date': opts['minReceiptDate'],
        'sort_nulls_last': opts['sortNullsLast'],
        'page': opts['page'],
        'committee_id': this.apiClient.buildCollectionParam(opts['committeeId'], 'multi'),
        'sort_null_only': opts['sortNullOnly'],
        'max_receipt_date': opts['maxReceiptDate'],
        'sort_hide_null': opts['sortHideNull'],
        'file_number': this.apiClient.buildCollectionParam(opts['fileNumber'], 'multi'),
        'per_page': opts['perPage'],
        'sort': opts['sort'],
        'q_filer': this.apiClient.buildCollectionParam(opts['qFiler'], 'multi')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyHeaderAuth', 'ApiKeyQueryAuth', 'apiKey'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = BaseF3XFilingPage;
      return this.apiClient.callApi(
        '/efile/reports/pac-party/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the efileReportsPresidentialGet operation.
     * @callback module:api/EfilingApi~efileReportsPresidentialGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/BaseF3PFilingPage} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     *  Key financial data reported periodically by committees as they are reported. This feed includes summary information from the the House F3 reports, the presidential F3p reports and the PAC and party F3x reports.  Generally, committees file reports on a quarterly or monthly basis, but some must also submit a report 12 days before primary elections. Therefore, during the primary season, the period covered by this file may be different for different committees. These totals also incorporate any changes made by committees, if any report covering the period is amended.  DISCLAIMER: The field labels contained within this resource are subject to change.  We are attempting to succinctly label these fields while conveying clear meaning to ensure accessibility for all users. 
     * @param {String} apiKey  API key for https://api.data.gov. Get one at https://api.data.gov/signup. 
     * @param {Object} opts Optional parameters
     * @param {Date} [minReceiptDate]  Selects all filings received after this date(MM/DD/YYYY or YYYY-MM-DD) 
     * @param {Boolean} [sortNullsLast = false)] Toggle that sorts null values last
     * @param {Number} [page = 1)] For paginating through results, starting at page 1
     * @param {Array.<String>} [committeeId]  A unique identifier assigned to each committee or filer registered with the FEC. In general committee id's begin with the letter C which is followed by eight digits. 
     * @param {Boolean} [sortNullOnly = false)] Toggle that filters out all rows having sort column that is non-null
     * @param {Date} [maxReceiptDate]  Selects all filings received before this date(MM/DD/YYYY or YYYY-MM-DD) 
     * @param {Boolean} [sortHideNull = false)] Hide null values on sorted column(s).
     * @param {Array.<Number>} [fileNumber] Filing ID number
     * @param {Number} [perPage = 20)] The number of results returned per page. Defaults to 20.
     * @param {String} [sort = '-receipt_date')] Provide a field to sort by. Use `-` for descending order. 
     * @param {Array.<String>} [qFiler]  Keyword search for filer name or ID 
     * @param {module:api/EfilingApi~efileReportsPresidentialGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/BaseF3PFilingPage}
     */
    efileReportsPresidentialGet(apiKey, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'apiKey' is set
      if (apiKey === undefined || apiKey === null) {
        throw new Error("Missing the required parameter 'apiKey' when calling efileReportsPresidentialGet");
      }

      let pathParams = {
      };
      let queryParams = {
        'api_key': apiKey,
        'min_receipt_date': opts['minReceiptDate'],
        'sort_nulls_last': opts['sortNullsLast'],
        'page': opts['page'],
        'committee_id': this.apiClient.buildCollectionParam(opts['committeeId'], 'multi'),
        'sort_null_only': opts['sortNullOnly'],
        'max_receipt_date': opts['maxReceiptDate'],
        'sort_hide_null': opts['sortHideNull'],
        'file_number': this.apiClient.buildCollectionParam(opts['fileNumber'], 'multi'),
        'per_page': opts['perPage'],
        'sort': opts['sort'],
        'q_filer': this.apiClient.buildCollectionParam(opts['qFiler'], 'multi')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyHeaderAuth', 'ApiKeyQueryAuth', 'apiKey'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = BaseF3PFilingPage;
      return this.apiClient.callApi(
        '/efile/reports/presidential/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
