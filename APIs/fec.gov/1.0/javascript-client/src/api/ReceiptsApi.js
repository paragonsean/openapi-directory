/**
 * OpenFEC
 * This application programming interface (API) allows you to explore the way candidates and committees fund their campaigns.    The Federal Election Commission (FEC) API is a RESTful web service supporting full-text and field-specific searches on FEC data. [Bulk downloads](https://www.fec.gov/data/advanced/?tab=bulk-data) are available on the current site. Information is tied to the underlying forms by file ID and image ID. Data is updated nightly.    There are a lot of data, and a good place to start is to use search to find interesting candidates and committees. Then, you can use their IDs to find report or line item details with the other endpoints. If you are interested in individual donors, check out contributor information in the `/schedule_a/` endpoints.    <b class=\"body\" id=\"getting_started_head\">Getting started with the openFEC API</b><br>    If you would like to use the FEC's API programmatically, you can sign up for your own API key using our form. Alternatively, you can still try out our API without an API key by using the web interface and using DEMO_KEY. Note that when you use the openFEC API you are subject to the [Terms of Service](https://github.com/fecgov/FEC/blob/master/TERMS-OF-SERVICE.md) and [Acceptable Use policy](https://github.com/fecgov/FEC/blob/master/ACCEPTABLE-USE-POLICY.md).    Signing up for an API key will enable you to place up to 1,000 calls an hour. Each call is limited to 100 results per page. You can email questions, comments or a request to get a key for 7,200 calls an hour (120 calls per minute) to <a href=\"mailto:APIinfo@fec.gov\">APIinfo@fec.gov</a>. You can also ask questions and discuss the data in a community led [group](https://groups.google.com/forum/#!forum/fec-data).    The model definitions and schema are available at [/swagger](/swagger/). This is useful for making wrappers and exploring the data.    A few restrictions limit the way you can use FEC data. For example, you can’t use contributor lists for commercial purposes or to solicit donations. [Learn more here](https://www.fec.gov/updates/sale-or-use-contributor-information/).    [Inspect our source code](https://github.com/fecgov/openFEC). We welcome issues and pull requests!    <p><br></p> <h2 class=\"title\" id=\"signup_head\">Sign up for an API key</h2> <div id=\"apidatagov_signup\">Loading signup form...</div>
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import ScheduleAByEmployerPage from '../model/ScheduleAByEmployerPage';
import ScheduleAByOccupationPage from '../model/ScheduleAByOccupationPage';
import ScheduleABySizeCandidatePage from '../model/ScheduleABySizeCandidatePage';
import ScheduleABySizePage from '../model/ScheduleABySizePage';
import ScheduleAByStateCandidatePage from '../model/ScheduleAByStateCandidatePage';
import ScheduleAByStatePage from '../model/ScheduleAByStatePage';
import ScheduleAByStateRecipientTotalsPage from '../model/ScheduleAByStateRecipientTotalsPage';
import ScheduleAByZipPage from '../model/ScheduleAByZipPage';
import ScheduleAEfilePage from '../model/ScheduleAEfilePage';
import ScheduleAPage from '../model/ScheduleAPage';

/**
* Receipts service.
* @module api/ReceiptsApi
* @version 1.0
*/
export default class ReceiptsApi {

    /**
    * Constructs a new ReceiptsApi. 
    * @alias module:api/ReceiptsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the schedulesScheduleAByEmployerGet operation.
     * @callback module:api/ReceiptsApi~schedulesScheduleAByEmployerGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ScheduleAByEmployerPage} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     *  This endpoint provides itemized individual contributions received by a committee, aggregated by the contributor’s employer name. If you are interested in our “is_individual” methodology, review the [methodology page](https://www.fec.gov/campaign-finance-data/about-campaign-finance-data/methodology). Unitemized individual contributions are not included. 
     * @param {String} apiKey  API key for https://api.data.gov. Get one at https://api.data.gov/signup. 
     * @param {Object} opts Optional parameters
     * @param {Array.<Number>} [cycle]  Filter records to only those that were applicable to a given two-year period.The cycle begins with an odd year and is named for its ending, even year. 
     * @param {Boolean} [sortNullsLast = false)] Toggle that sorts null values last
     * @param {Number} [page = 1)] For paginating through results, starting at page 1
     * @param {Array.<String>} [committeeId]  A unique identifier assigned to each committee or filer registered with the FEC. In general committee id's begin with the letter C which is followed by eight digits. 
     * @param {Boolean} [sortNullOnly = false)] Toggle that filters out all rows having sort column that is non-null
     * @param {Boolean} [sortHideNull = false)] Hide null values on sorted column(s).
     * @param {Array.<String>} [employer] Employer of contributor as reported on the committee's filing
     * @param {Number} [perPage = 20)] The number of results returned per page. Defaults to 20.
     * @param {String} [sort] Provide a field to sort by. Use `-` for descending order. 
     * @param {module:api/ReceiptsApi~schedulesScheduleAByEmployerGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ScheduleAByEmployerPage}
     */
    schedulesScheduleAByEmployerGet(apiKey, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'apiKey' is set
      if (apiKey === undefined || apiKey === null) {
        throw new Error("Missing the required parameter 'apiKey' when calling schedulesScheduleAByEmployerGet");
      }

      let pathParams = {
      };
      let queryParams = {
        'api_key': apiKey,
        'cycle': this.apiClient.buildCollectionParam(opts['cycle'], 'multi'),
        'sort_nulls_last': opts['sortNullsLast'],
        'page': opts['page'],
        'committee_id': this.apiClient.buildCollectionParam(opts['committeeId'], 'multi'),
        'sort_null_only': opts['sortNullOnly'],
        'sort_hide_null': opts['sortHideNull'],
        'employer': this.apiClient.buildCollectionParam(opts['employer'], 'multi'),
        'per_page': opts['perPage'],
        'sort': opts['sort']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyHeaderAuth', 'ApiKeyQueryAuth', 'apiKey'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ScheduleAByEmployerPage;
      return this.apiClient.callApi(
        '/schedules/schedule_a/by_employer/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the schedulesScheduleAByOccupationGet operation.
     * @callback module:api/ReceiptsApi~schedulesScheduleAByOccupationGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ScheduleAByOccupationPage} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     *  This endpoint provides itemized individual contributions received by a committee, aggregated by the contributor’s occupation. If you are interested in our “is_individual” methodology, review the [methodology page](https://www.fec.gov/campaign-finance-data/about-campaign-finance-data/methodology). Unitemized individual contributions are not included. 
     * @param {String} apiKey  API key for https://api.data.gov. Get one at https://api.data.gov/signup. 
     * @param {Object} opts Optional parameters
     * @param {Array.<Number>} [cycle]  Filter records to only those that were applicable to a given two-year period.The cycle begins with an odd year and is named for its ending, even year. 
     * @param {Boolean} [sortNullsLast = false)] Toggle that sorts null values last
     * @param {Number} [page = 1)] For paginating through results, starting at page 1
     * @param {Array.<String>} [committeeId]  A unique identifier assigned to each committee or filer registered with the FEC. In general committee id's begin with the letter C which is followed by eight digits. 
     * @param {Boolean} [sortNullOnly = false)] Toggle that filters out all rows having sort column that is non-null
     * @param {Array.<String>} [occupation] Occupation of contributor as reported on the committee's filing
     * @param {Boolean} [sortHideNull = false)] Hide null values on sorted column(s).
     * @param {Number} [perPage = 20)] The number of results returned per page. Defaults to 20.
     * @param {String} [sort] Provide a field to sort by. Use `-` for descending order. 
     * @param {module:api/ReceiptsApi~schedulesScheduleAByOccupationGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ScheduleAByOccupationPage}
     */
    schedulesScheduleAByOccupationGet(apiKey, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'apiKey' is set
      if (apiKey === undefined || apiKey === null) {
        throw new Error("Missing the required parameter 'apiKey' when calling schedulesScheduleAByOccupationGet");
      }

      let pathParams = {
      };
      let queryParams = {
        'api_key': apiKey,
        'cycle': this.apiClient.buildCollectionParam(opts['cycle'], 'multi'),
        'sort_nulls_last': opts['sortNullsLast'],
        'page': opts['page'],
        'committee_id': this.apiClient.buildCollectionParam(opts['committeeId'], 'multi'),
        'sort_null_only': opts['sortNullOnly'],
        'occupation': this.apiClient.buildCollectionParam(opts['occupation'], 'multi'),
        'sort_hide_null': opts['sortHideNull'],
        'per_page': opts['perPage'],
        'sort': opts['sort']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyHeaderAuth', 'ApiKeyQueryAuth', 'apiKey'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ScheduleAByOccupationPage;
      return this.apiClient.callApi(
        '/schedules/schedule_a/by_occupation/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the schedulesScheduleABySizeByCandidateGet operation.
     * @callback module:api/ReceiptsApi~schedulesScheduleABySizeByCandidateGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ScheduleABySizeCandidatePage} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     *  This endpoint provides itemized individual contributions received by a committee, aggregated by size of contribution and candidate. If you are interested in our “is_individual” methodology, review the [methodology page](https://www.fec.gov/campaign-finance-data/about-campaign-finance-data/methodology). Unitemized individual contributions are not included. 
     * @param {String} apiKey  API key for https://api.data.gov. Get one at https://api.data.gov/signup. 
     * @param {Array.<Number>} cycle  Filter records to only those that were applicable to a given two-year period.The cycle begins with an odd year and is named for its ending, even year. 
     * @param {Array.<String>} candidateId  A unique identifier assigned to each candidate registered with the FEC. If a person runs for several offices, that person will have separate candidate IDs for each office. First character indicates office - [P]residential, [H]ouse, [S]enate]. Second character is the last digit of the two-year period the ID was created. Third and fourth is the candidate state. Presidential IDs don't have state. Fifth and sixth is the district when the candidate first ran. This does not change if the candidate/member's district changes during re-districting. Presidential IDs don't have districts. The rest is sequence. 
     * @param {Object} opts Optional parameters
     * @param {Boolean} [electionFull = true)] `True` indicates that full election period of a candidate. `False` indicates that two year election cycle.
     * @param {Boolean} [sortNullOnly = false)] Toggle that filters out all rows having sort column that is non-null
     * @param {Boolean} [sortNullsLast = false)] Toggle that sorts null values last
     * @param {Number} [page = 1)] For paginating through results, starting at page 1
     * @param {Boolean} [sortHideNull = false)] Hide null values on sorted column(s).
     * @param {Number} [perPage = 20)] The number of results returned per page. Defaults to 20.
     * @param {String} [sort] Provide a field to sort by. Use `-` for descending order. 
     * @param {module:api/ReceiptsApi~schedulesScheduleABySizeByCandidateGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ScheduleABySizeCandidatePage}
     */
    schedulesScheduleABySizeByCandidateGet(apiKey, cycle, candidateId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'apiKey' is set
      if (apiKey === undefined || apiKey === null) {
        throw new Error("Missing the required parameter 'apiKey' when calling schedulesScheduleABySizeByCandidateGet");
      }
      // verify the required parameter 'cycle' is set
      if (cycle === undefined || cycle === null) {
        throw new Error("Missing the required parameter 'cycle' when calling schedulesScheduleABySizeByCandidateGet");
      }
      // verify the required parameter 'candidateId' is set
      if (candidateId === undefined || candidateId === null) {
        throw new Error("Missing the required parameter 'candidateId' when calling schedulesScheduleABySizeByCandidateGet");
      }

      let pathParams = {
      };
      let queryParams = {
        'api_key': apiKey,
        'election_full': opts['electionFull'],
        'cycle': this.apiClient.buildCollectionParam(cycle, 'multi'),
        'sort_null_only': opts['sortNullOnly'],
        'sort_nulls_last': opts['sortNullsLast'],
        'page': opts['page'],
        'sort_hide_null': opts['sortHideNull'],
        'candidate_id': this.apiClient.buildCollectionParam(candidateId, 'multi'),
        'per_page': opts['perPage'],
        'sort': opts['sort']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyHeaderAuth', 'ApiKeyQueryAuth', 'apiKey'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ScheduleABySizeCandidatePage;
      return this.apiClient.callApi(
        '/schedules/schedule_a/by_size/by_candidate/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the schedulesScheduleABySizeGet operation.
     * @callback module:api/ReceiptsApi~schedulesScheduleABySizeGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ScheduleABySizePage} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     *  This endpoint provides individual contributions received by a committee, aggregated by size:  ```  - $200 and under  - $200.01 - $499.99  - $500 - $999.99  - $1000 - $1999.99  - $2000 + ```  The $200.00 and under category includes contributions of $200 or less combined with unitemized individual contributions. 
     * @param {String} apiKey  API key for https://api.data.gov. Get one at https://api.data.gov/signup. 
     * @param {Object} opts Optional parameters
     * @param {Array.<Number>} [cycle]  Filter records to only those that were applicable to a given two-year period.The cycle begins with an odd year and is named for its ending, even year. 
     * @param {Boolean} [sortNullsLast = false)] Toggle that sorts null values last
     * @param {Number} [page = 1)] For paginating through results, starting at page 1
     * @param {Array.<String>} [committeeId]  A unique identifier assigned to each committee or filer registered with the FEC. In general committee id's begin with the letter C which is followed by eight digits. 
     * @param {Boolean} [sortNullOnly = false)] Toggle that filters out all rows having sort column that is non-null
     * @param {Array.<module:model/Number>} [size]  The total all contributions in the following ranges: ```   -0    $200 and under   -200  $200.01 - $499.99   -500  $500 - $999.99   -1000 $1000 - $1999.99   -2000 $2000 + ``` Unitemized contributions are included in the `0` category. 
     * @param {Boolean} [sortHideNull = false)] Hide null values on sorted column(s).
     * @param {Number} [perPage = 20)] The number of results returned per page. Defaults to 20.
     * @param {String} [sort] Provide a field to sort by. Use `-` for descending order. 
     * @param {module:api/ReceiptsApi~schedulesScheduleABySizeGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ScheduleABySizePage}
     */
    schedulesScheduleABySizeGet(apiKey, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'apiKey' is set
      if (apiKey === undefined || apiKey === null) {
        throw new Error("Missing the required parameter 'apiKey' when calling schedulesScheduleABySizeGet");
      }

      let pathParams = {
      };
      let queryParams = {
        'api_key': apiKey,
        'cycle': this.apiClient.buildCollectionParam(opts['cycle'], 'multi'),
        'sort_nulls_last': opts['sortNullsLast'],
        'page': opts['page'],
        'committee_id': this.apiClient.buildCollectionParam(opts['committeeId'], 'multi'),
        'sort_null_only': opts['sortNullOnly'],
        'size': this.apiClient.buildCollectionParam(opts['size'], 'multi'),
        'sort_hide_null': opts['sortHideNull'],
        'per_page': opts['perPage'],
        'sort': opts['sort']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyHeaderAuth', 'ApiKeyQueryAuth', 'apiKey'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ScheduleABySizePage;
      return this.apiClient.callApi(
        '/schedules/schedule_a/by_size/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the schedulesScheduleAByStateByCandidateGet operation.
     * @callback module:api/ReceiptsApi~schedulesScheduleAByStateByCandidateGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ScheduleAByStateCandidatePage} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     *  This endpoint provides itemized individual contributions received by a committee, aggregated by contributor’s state and candidate. If you are interested in our “is_individual” methodology, review the [methodology page](https://www.fec.gov/campaign-finance-data/about-campaign-finance-data/methodology). Unitemized individual contributions are not included. 
     * @param {String} apiKey  API key for https://api.data.gov. Get one at https://api.data.gov/signup. 
     * @param {Array.<Number>} cycle  Filter records to only those that were applicable to a given two-year period.The cycle begins with an odd year and is named for its ending, even year. 
     * @param {Array.<String>} candidateId  A unique identifier assigned to each candidate registered with the FEC. If a person runs for several offices, that person will have separate candidate IDs for each office. First character indicates office - [P]residential, [H]ouse, [S]enate]. Second character is the last digit of the two-year period the ID was created. Third and fourth is the candidate state. Presidential IDs don't have state. Fifth and sixth is the district when the candidate first ran. This does not change if the candidate/member's district changes during re-districting. Presidential IDs don't have districts. The rest is sequence. 
     * @param {Object} opts Optional parameters
     * @param {Boolean} [electionFull = true)] `True` indicates that full election period of a candidate. `False` indicates that two year election cycle.
     * @param {Boolean} [sortNullOnly = false)] Toggle that filters out all rows having sort column that is non-null
     * @param {Boolean} [sortNullsLast = false)] Toggle that sorts null values last
     * @param {Number} [page = 1)] For paginating through results, starting at page 1
     * @param {Boolean} [sortHideNull = false)] Hide null values on sorted column(s).
     * @param {Number} [perPage = 20)] The number of results returned per page. Defaults to 20.
     * @param {String} [sort] Provide a field to sort by. Use `-` for descending order. 
     * @param {module:api/ReceiptsApi~schedulesScheduleAByStateByCandidateGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ScheduleAByStateCandidatePage}
     */
    schedulesScheduleAByStateByCandidateGet(apiKey, cycle, candidateId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'apiKey' is set
      if (apiKey === undefined || apiKey === null) {
        throw new Error("Missing the required parameter 'apiKey' when calling schedulesScheduleAByStateByCandidateGet");
      }
      // verify the required parameter 'cycle' is set
      if (cycle === undefined || cycle === null) {
        throw new Error("Missing the required parameter 'cycle' when calling schedulesScheduleAByStateByCandidateGet");
      }
      // verify the required parameter 'candidateId' is set
      if (candidateId === undefined || candidateId === null) {
        throw new Error("Missing the required parameter 'candidateId' when calling schedulesScheduleAByStateByCandidateGet");
      }

      let pathParams = {
      };
      let queryParams = {
        'api_key': apiKey,
        'election_full': opts['electionFull'],
        'cycle': this.apiClient.buildCollectionParam(cycle, 'multi'),
        'sort_null_only': opts['sortNullOnly'],
        'sort_nulls_last': opts['sortNullsLast'],
        'page': opts['page'],
        'sort_hide_null': opts['sortHideNull'],
        'candidate_id': this.apiClient.buildCollectionParam(candidateId, 'multi'),
        'per_page': opts['perPage'],
        'sort': opts['sort']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyHeaderAuth', 'ApiKeyQueryAuth', 'apiKey'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ScheduleAByStateCandidatePage;
      return this.apiClient.callApi(
        '/schedules/schedule_a/by_state/by_candidate/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the schedulesScheduleAByStateByCandidateTotalsGet operation.
     * @callback module:api/ReceiptsApi~schedulesScheduleAByStateByCandidateTotalsGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ScheduleAByStateCandidatePage} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     *  Itemized individual contributions aggregated by contributor’s state, candidate, committee type and cycle. If you are interested in our “is_individual” methodology, review the [methodology page](https://www.fec.gov/campaign-finance-data/about-campaign-finance-data/methodology). Unitemized individual contributions are not included.  
     * @param {String} apiKey  API key for https://api.data.gov. Get one at https://api.data.gov/signup. 
     * @param {Array.<Number>} cycle  Filter records to only those that were applicable to a given two-year period.The cycle begins with an odd year and is named for its ending, even year. 
     * @param {Array.<String>} candidateId  A unique identifier assigned to each candidate registered with the FEC. If a person runs for several offices, that person will have separate candidate IDs for each office. First character indicates office - [P]residential, [H]ouse, [S]enate]. Second character is the last digit of the two-year period the ID was created. Third and fourth is the candidate state. Presidential IDs don't have state. Fifth and sixth is the district when the candidate first ran. This does not change if the candidate/member's district changes during re-districting. Presidential IDs don't have districts. The rest is sequence. 
     * @param {Object} opts Optional parameters
     * @param {Boolean} [electionFull = true)] `True` indicates that full election period of a candidate. `False` indicates that two year election cycle.
     * @param {Boolean} [sortNullOnly = false)] Toggle that filters out all rows having sort column that is non-null
     * @param {Boolean} [sortNullsLast = false)] Toggle that sorts null values last
     * @param {Number} [page = 1)] For paginating through results, starting at page 1
     * @param {Boolean} [sortHideNull = false)] Hide null values on sorted column(s).
     * @param {Number} [perPage = 20)] The number of results returned per page. Defaults to 20.
     * @param {String} [sort] Provide a field to sort by. Use `-` for descending order. 
     * @param {module:api/ReceiptsApi~schedulesScheduleAByStateByCandidateTotalsGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ScheduleAByStateCandidatePage}
     */
    schedulesScheduleAByStateByCandidateTotalsGet(apiKey, cycle, candidateId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'apiKey' is set
      if (apiKey === undefined || apiKey === null) {
        throw new Error("Missing the required parameter 'apiKey' when calling schedulesScheduleAByStateByCandidateTotalsGet");
      }
      // verify the required parameter 'cycle' is set
      if (cycle === undefined || cycle === null) {
        throw new Error("Missing the required parameter 'cycle' when calling schedulesScheduleAByStateByCandidateTotalsGet");
      }
      // verify the required parameter 'candidateId' is set
      if (candidateId === undefined || candidateId === null) {
        throw new Error("Missing the required parameter 'candidateId' when calling schedulesScheduleAByStateByCandidateTotalsGet");
      }

      let pathParams = {
      };
      let queryParams = {
        'api_key': apiKey,
        'election_full': opts['electionFull'],
        'cycle': this.apiClient.buildCollectionParam(cycle, 'multi'),
        'sort_null_only': opts['sortNullOnly'],
        'sort_nulls_last': opts['sortNullsLast'],
        'page': opts['page'],
        'sort_hide_null': opts['sortHideNull'],
        'candidate_id': this.apiClient.buildCollectionParam(candidateId, 'multi'),
        'per_page': opts['perPage'],
        'sort': opts['sort']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyHeaderAuth', 'ApiKeyQueryAuth', 'apiKey'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ScheduleAByStateCandidatePage;
      return this.apiClient.callApi(
        '/schedules/schedule_a/by_state/by_candidate/totals/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the schedulesScheduleAByStateGet operation.
     * @callback module:api/ReceiptsApi~schedulesScheduleAByStateGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ScheduleAByStatePage} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     *  This endpoint provides itemized individual contributions received by a committee, aggregated by the contributor’s state. If you are interested in our “is_individual” methodology, review the [methodology page](https://www.fec.gov/campaign-finance-data/about-campaign-finance-data/methodology). Unitemized individual contributions are not included. 
     * @param {String} apiKey  API key for https://api.data.gov. Get one at https://api.data.gov/signup. 
     * @param {Object} opts Optional parameters
     * @param {Boolean} [hideNull = false)] Exclude values with missing state
     * @param {Array.<Number>} [cycle]  Filter records to only those that were applicable to a given two-year period.The cycle begins with an odd year and is named for its ending, even year. 
     * @param {Boolean} [sortNullOnly = false)] Toggle that filters out all rows having sort column that is non-null
     * @param {Number} [page = 1)] For paginating through results, starting at page 1
     * @param {Array.<String>} [state] State of contributor
     * @param {Array.<String>} [committeeId]  A unique identifier assigned to each committee or filer registered with the FEC. In general committee id's begin with the letter C which is followed by eight digits. 
     * @param {Boolean} [sortNullsLast = false)] Toggle that sorts null values last
     * @param {Boolean} [sortHideNull = false)] Hide null values on sorted column(s).
     * @param {Number} [perPage = 20)] The number of results returned per page. Defaults to 20.
     * @param {String} [sort = '-total')] Provide a field to sort by. Use `-` for descending order. 
     * @param {module:api/ReceiptsApi~schedulesScheduleAByStateGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ScheduleAByStatePage}
     */
    schedulesScheduleAByStateGet(apiKey, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'apiKey' is set
      if (apiKey === undefined || apiKey === null) {
        throw new Error("Missing the required parameter 'apiKey' when calling schedulesScheduleAByStateGet");
      }

      let pathParams = {
      };
      let queryParams = {
        'api_key': apiKey,
        'hide_null': opts['hideNull'],
        'cycle': this.apiClient.buildCollectionParam(opts['cycle'], 'multi'),
        'sort_null_only': opts['sortNullOnly'],
        'page': opts['page'],
        'state': this.apiClient.buildCollectionParam(opts['state'], 'multi'),
        'committee_id': this.apiClient.buildCollectionParam(opts['committeeId'], 'multi'),
        'sort_nulls_last': opts['sortNullsLast'],
        'sort_hide_null': opts['sortHideNull'],
        'per_page': opts['perPage'],
        'sort': opts['sort']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyHeaderAuth', 'ApiKeyQueryAuth', 'apiKey'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ScheduleAByStatePage;
      return this.apiClient.callApi(
        '/schedules/schedule_a/by_state/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the schedulesScheduleAByStateTotalsGet operation.
     * @callback module:api/ReceiptsApi~schedulesScheduleAByStateTotalsGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ScheduleAByStateRecipientTotalsPage} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     *  This endpoint provides itemized individual contributions received by a committee, aggregated by contributor’s state, committee type and cycle. If you are interested in our “is_individual” methodology, review the [methodology page](https://www.fec.gov/campaign-finance-data/about-campaign-finance-data/methodology). Unitemized individual contributions are not included. 
     * @param {String} apiKey  API key for https://api.data.gov. Get one at https://api.data.gov/signup. 
     * @param {Object} opts Optional parameters
     * @param {Array.<String>} [committeeType] The one-letter type code of the organization:         - C communication cost         - D delegate         - E electioneering communication         - H House         - I independent expenditure filer (not a committee)         - N PAC - nonqualified         - O independent expenditure-only (super PACs)         - P presidential         - Q PAC - qualified         - S Senate         - U single candidate independent expenditure         - V PAC with non-contribution account, nonqualified         - W PAC with non-contribution account, qualified         - X party, nonqualified         - Y party, qualified         - Z national party non-federal account         - all All Committee Types         - all_candidates All Candidate Committee Types (H, S, P)         - all_pacs All PAC Committee Types (N, O, Q, V, W) 
     * @param {Array.<Number>} [cycle]  Filter records to only those that were applicable to a given two-year period.The cycle begins with an odd year and is named for its ending, even year. 
     * @param {Boolean} [sortNullOnly = false)] Toggle that filters out all rows having sort column that is non-null
     * @param {Number} [page = 1)] For paginating through results, starting at page 1
     * @param {Array.<String>} [state] US state or territory
     * @param {Boolean} [sortNullsLast = false)] Toggle that sorts null values last
     * @param {Boolean} [sortHideNull = false)] Hide null values on sorted column(s).
     * @param {Number} [perPage = 20)] The number of results returned per page. Defaults to 20.
     * @param {String} [sort = 'cycle')] Provide a field to sort by. Use `-` for descending order. 
     * @param {module:api/ReceiptsApi~schedulesScheduleAByStateTotalsGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ScheduleAByStateRecipientTotalsPage}
     */
    schedulesScheduleAByStateTotalsGet(apiKey, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'apiKey' is set
      if (apiKey === undefined || apiKey === null) {
        throw new Error("Missing the required parameter 'apiKey' when calling schedulesScheduleAByStateTotalsGet");
      }

      let pathParams = {
      };
      let queryParams = {
        'api_key': apiKey,
        'committee_type': this.apiClient.buildCollectionParam(opts['committeeType'], 'multi'),
        'cycle': this.apiClient.buildCollectionParam(opts['cycle'], 'multi'),
        'sort_null_only': opts['sortNullOnly'],
        'page': opts['page'],
        'state': this.apiClient.buildCollectionParam(opts['state'], 'multi'),
        'sort_nulls_last': opts['sortNullsLast'],
        'sort_hide_null': opts['sortHideNull'],
        'per_page': opts['perPage'],
        'sort': opts['sort']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyHeaderAuth', 'ApiKeyQueryAuth', 'apiKey'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ScheduleAByStateRecipientTotalsPage;
      return this.apiClient.callApi(
        '/schedules/schedule_a/by_state/totals/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the schedulesScheduleAByZipGet operation.
     * @callback module:api/ReceiptsApi~schedulesScheduleAByZipGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ScheduleAByZipPage} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     *  This endpoint provides itemized individual contributions received by a committee, aggregated by the contributor’s ZIP code. If you are interested in our “is_individual” methodology, review the [methodology page](https://www.fec.gov/campaign-finance-data/about-campaign-finance-data/methodology). Unitemized individual contributions are not included. 
     * @param {String} apiKey  API key for https://api.data.gov. Get one at https://api.data.gov/signup. 
     * @param {Object} opts Optional parameters
     * @param {Array.<String>} [zip] Zip code of contributor
     * @param {Array.<Number>} [cycle]  Filter records to only those that were applicable to a given two-year period.The cycle begins with an odd year and is named for its ending, even year. 
     * @param {Boolean} [sortNullOnly = false)] Toggle that filters out all rows having sort column that is non-null
     * @param {Number} [page = 1)] For paginating through results, starting at page 1
     * @param {Array.<String>} [state] State of contributor
     * @param {Array.<String>} [committeeId]  A unique identifier assigned to each committee or filer registered with the FEC. In general committee id's begin with the letter C which is followed by eight digits. 
     * @param {Boolean} [sortNullsLast = false)] Toggle that sorts null values last
     * @param {Boolean} [sortHideNull = false)] Hide null values on sorted column(s).
     * @param {Number} [perPage = 20)] The number of results returned per page. Defaults to 20.
     * @param {String} [sort] Provide a field to sort by. Use `-` for descending order. 
     * @param {module:api/ReceiptsApi~schedulesScheduleAByZipGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ScheduleAByZipPage}
     */
    schedulesScheduleAByZipGet(apiKey, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'apiKey' is set
      if (apiKey === undefined || apiKey === null) {
        throw new Error("Missing the required parameter 'apiKey' when calling schedulesScheduleAByZipGet");
      }

      let pathParams = {
      };
      let queryParams = {
        'zip': this.apiClient.buildCollectionParam(opts['zip'], 'multi'),
        'api_key': apiKey,
        'cycle': this.apiClient.buildCollectionParam(opts['cycle'], 'multi'),
        'sort_null_only': opts['sortNullOnly'],
        'page': opts['page'],
        'state': this.apiClient.buildCollectionParam(opts['state'], 'multi'),
        'committee_id': this.apiClient.buildCollectionParam(opts['committeeId'], 'multi'),
        'sort_nulls_last': opts['sortNullsLast'],
        'sort_hide_null': opts['sortHideNull'],
        'per_page': opts['perPage'],
        'sort': opts['sort']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyHeaderAuth', 'ApiKeyQueryAuth', 'apiKey'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ScheduleAByZipPage;
      return this.apiClient.callApi(
        '/schedules/schedule_a/by_zip/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the schedulesScheduleAEfileGet operation.
     * @callback module:api/ReceiptsApi~schedulesScheduleAEfileGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ScheduleAEfilePage} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     *  Efiling endpoints provide real-time campaign finance data received from electronic filers. Efiling endpoints only contain the most recent four months of data and don't contain the processed and coded data that you can find on other endpoints. 
     * @param {String} apiKey  API key for https://api.data.gov. Get one at https://api.data.gov/signup. 
     * @param {Object} opts Optional parameters
     * @param {Date} [minDate] Minimum date
     * @param {String} [maxImageNumber] Maxium image number of the page where the schedule item is reported
     * @param {Array.<String>} [contributorEmployer] Employer of contributor, filers need to make an effort to gather this information
     * @param {String} [minImageNumber] Minium image number of the page where the schedule item is reported
     * @param {Boolean} [sortNullOnly = false)] Toggle that filters out all rows having sort column that is non-null
     * @param {Boolean} [sortHideNull = false)] Hide null values on sorted column(s).
     * @param {Array.<String>} [contributorName] Name of contributor
     * @param {String} [minAmount] Filter for all amounts greater than a value.
     * @param {Number} [perPage = 20)] The number of results returned per page. Defaults to 20.
     * @param {Array.<String>} [contributorState] State of contributor
     * @param {String} [sort = '-contribution_receipt_date')] Provide a field to sort by. Use `-` for descending order. 
     * @param {String} [lineNumber] Filter for form and line number using the following format: `FORM-LINENUMBER`.  For example an argument such as `F3X-16` would filter down to all entries from form `F3X` line number `16`.
     * @param {Array.<String>} [contributorOccupation] Occupation of contributor, filers need to make an effort to gather this information
     * @param {Array.<String>} [contributorCity] City of contributor
     * @param {Boolean} [sortNullsLast = false)] Toggle that sorts null values last
     * @param {Number} [page = 1)] For paginating through results, starting at page 1
     * @param {Array.<String>} [committeeId]  A unique identifier assigned to each committee or filer registered with the FEC. In general committee id's begin with the letter C which is followed by eight digits. 
     * @param {Array.<String>} [imageNumber]  An unique identifier for each page where the electronic or paper filing is reported. 
     * @param {Date} [maxDate] Maximum date
     * @param {String} [maxAmount] Filter for all amounts less than a value.
     * @param {module:api/ReceiptsApi~schedulesScheduleAEfileGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ScheduleAEfilePage}
     */
    schedulesScheduleAEfileGet(apiKey, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'apiKey' is set
      if (apiKey === undefined || apiKey === null) {
        throw new Error("Missing the required parameter 'apiKey' when calling schedulesScheduleAEfileGet");
      }

      let pathParams = {
      };
      let queryParams = {
        'min_date': opts['minDate'],
        'max_image_number': opts['maxImageNumber'],
        'contributor_employer': this.apiClient.buildCollectionParam(opts['contributorEmployer'], 'multi'),
        'min_image_number': opts['minImageNumber'],
        'sort_null_only': opts['sortNullOnly'],
        'sort_hide_null': opts['sortHideNull'],
        'contributor_name': this.apiClient.buildCollectionParam(opts['contributorName'], 'multi'),
        'min_amount': opts['minAmount'],
        'per_page': opts['perPage'],
        'contributor_state': this.apiClient.buildCollectionParam(opts['contributorState'], 'multi'),
        'sort': opts['sort'],
        'line_number': opts['lineNumber'],
        'api_key': apiKey,
        'contributor_occupation': this.apiClient.buildCollectionParam(opts['contributorOccupation'], 'multi'),
        'contributor_city': this.apiClient.buildCollectionParam(opts['contributorCity'], 'multi'),
        'sort_nulls_last': opts['sortNullsLast'],
        'page': opts['page'],
        'committee_id': this.apiClient.buildCollectionParam(opts['committeeId'], 'multi'),
        'image_number': this.apiClient.buildCollectionParam(opts['imageNumber'], 'multi'),
        'max_date': opts['maxDate'],
        'max_amount': opts['maxAmount']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyHeaderAuth', 'ApiKeyQueryAuth', 'apiKey'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ScheduleAEfilePage;
      return this.apiClient.callApi(
        '/schedules/schedule_a/efile/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the schedulesScheduleAGet operation.
     * @callback module:api/ReceiptsApi~schedulesScheduleAGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ScheduleAPage} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     *  This description is for both ​`/schedules​/schedule_a​/` and ​ `/schedules​/schedule_a​/{sub_id}​/`.  This endpoint provides itemized receipts. Schedule A records describe itemized receipts, including contributions from individuals. If you are interested in contributions from an individual, use the `/schedules/schedule_a/` endpoint. For a more complete description of all Schedule A records visit [About receipts data](https://www.fec.gov/campaign-finance-data/about-campaign-finance-data/about-receipts-data/). If you are interested in our \"is_individual\" methodology visit our [methodology page](https://www.fec.gov/campaign-finance-data/about-campaign-finance-data/methodology/).  ​The `/schedules​/schedule_a​/` endpoint is not paginated by page number. This endpoint uses keyset pagination to improve query performance and these indices are required to properly page through this large dataset. To request the next page, you should append the values found in the `last_indexes` object from pagination to the URL of your last request as additional parameters.  For example, when sorting by `contribution_receipt_date`, you might receive a page of results with the two scenarios of following pagination information:  case #1: ``` pagination: {     pages: 2152643,     per_page: 20,     count: 43052850,     last_indexes: {         last_index: \"230880619\",         last_contribution_receipt_date: \"2014-01-01\"     } } ``` <br/> case #2 (results which include contribution_receipt_date = NULL):  ``` pagination: {     pages: 2152644,     per_page: 20,     count: 43052850,     last_indexes: {         last_index: \"230880639\",         sort_null_only: True     } } ``` To fetch the next page of sorted results, append `last_index=230880619` and `last_contribution_receipt_date=2014-01-01` to the URL and when reaching `contribution_receipt_date=NULL`, append `last_index=230880639` and `sort_null_only=True`. We strongly advise paging through these results using sort indices. The default sort is acending by `contribution_receipt_date` (`deprecated`, will be descending). If you do not page using sort indices, some transactions may be unintentionally filtered out.  Calls to ​`/schedules​/schedule_a​/` may return many records. For large result sets, the record counts found in the pagination object are approximate; you will need to page through the records until no records are returned.  To avoid throwing the \"out of range\" exception on the last page, one recommandation is to use total count and `per_page` to control the traverse loop of results.  ​The `/schedules​/schedule_a​/{sub_id}​/` endpoint returns a single transaction, but it does include a pagination object class. Please ignore the information in that object class.  
     * @param {String} apiKey  API key for https://api.data.gov. Get one at https://api.data.gov/signup. 
     * @param {Object} opts Optional parameters
     * @param {Boolean} [isIndividual] Restrict to non-earmarked individual contributions where memo code is true. Filtering individuals is useful to make sure contributions are not double reported and in creating breakdowns of the amount of money coming from individuals.
     * @param {Date} [minDate] Minimum date
     * @param {String} [maxImageNumber] Maxium image number of the page where the schedule item is reported
     * @param {String} [minImageNumber] Minium image number of the page where the schedule item is reported
     * @param {Array.<module:model/String>} [contributorType] Filters individual or committee contributions based on line number
     * @param {Array.<String>} [contributorId] The FEC identifier should be represented here if the contributor is registered with the FEC.
     * @param {Array.<module:model/String>} [recipientCommitteeOrgType] The one-letter code for the kind for organization:         - C corporation         - L labor organization         - M membership organization         - T trade association         - V cooperative         - W corporation without capital stock 
     * @param {Array.<String>} [contributorEmployer] Employer of contributor, filers need to make an effort to gather this information
     * @param {Boolean} [sortNullOnly = false)] Toggle that filters out all rows having sort column that is non-null
     * @param {Number} [lastIndex] Index of last result from previous page
     * @param {Array.<String>} [contributorName] Name of contributor
     * @param {String} [minAmount] Filter for all amounts greater than a value.
     * @param {Boolean} [sortHideNull = false)] Hide null values on sorted column(s).
     * @param {Array.<module:model/String>} [recipientCommitteeDesignation] The one-letter designation code of the organization:          - A authorized by a candidate          - J joint fundraising committee          - P principal campaign committee of a candidate          - U unauthorized          - B lobbyist/registrant PAC          - D leadership PAC 
     * @param {Date} [maxLoadDate] Maximum load date
     * @param {Array.<module:model/String>} [recipientCommitteeType] The one-letter type code of the organization:         - C communication cost         - D delegate         - E electioneering communication         - H House         - I independent expenditure filer (not a committee)         - N PAC - nonqualified         - O independent expenditure-only (super PACs)         - P presidential         - Q PAC - qualified         - S Senate         - U single candidate independent expenditure         - V PAC with non-contribution account, nonqualified         - W PAC with non-contribution account, qualified         - X party, nonqualified         - Y party, qualified         - Z national party non-federal account 
     * @param {String} [sort = '-contribution_receipt_date')] Provide a field to sort by. Use `-` for descending order. 
     * @param {Date} [lastContributionReceiptDate] When sorting by `contribution_receipt_date`, this is populated with the         `contribution_receipt_date` of the last result. However, you will need to pass the index         of that last result to `last_index` to get the next page.
     * @param {Number} [lastContributionReceiptAmount] When sorting by `contribution_receipt_amount`, this is populated with the         `contribution_receipt_amount` of the last result. However, you will need to pass the index         of that last result to `last_index` to get the next page.
     * @param {String} [lineNumber] Filter for form and line number using the following format: `FORM-LINENUMBER`.  For example an argument such as `F3X-16` would filter down to all entries from form `F3X` line number `16`.
     * @param {Array.<String>} [contributorState] State of contributor
     * @param {Number} [perPage = 20)] The number of results returned per page. Defaults to 20.
     * @param {Array.<Number>} [twoYearTransactionPeriod]  This is a two-year period that is derived from the year a transaction took place in the Itemized Schedule A and Schedule B tables. In cases where we have the date of the transaction (contribution_receipt_date in schedules/schedule_a, disbursement_date in schedules/schedule_b) the two_year_transaction_period is named after the ending, even-numbered year. If we do not have the date  of the transaction, we fall back to using the report year (report_year in both tables) instead,  making the same cycle adjustment as necessary. If no transaction year is specified, the results default to the most current cycle. 
     * @param {Array.<String>} [contributorZip] Zip code of contributor
     * @param {Date} [minLoadDate] Minimum load date
     * @param {Array.<String>} [contributorOccupation] Occupation of contributor, filers need to make an effort to gather this information
     * @param {Array.<String>} [contributorCity] City of contributor
     * @param {Array.<String>} [committeeId]  A unique identifier assigned to each committee or filer registered with the FEC. In general committee id's begin with the letter C which is followed by eight digits. 
     * @param {Array.<String>} [imageNumber]  An unique identifier for each page where the electronic or paper filing is reported. 
     * @param {Date} [maxDate] Maximum date
     * @param {String} [maxAmount] Filter for all amounts less than a value.
     * @param {module:api/ReceiptsApi~schedulesScheduleAGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ScheduleAPage}
     */
    schedulesScheduleAGet(apiKey, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'apiKey' is set
      if (apiKey === undefined || apiKey === null) {
        throw new Error("Missing the required parameter 'apiKey' when calling schedulesScheduleAGet");
      }

      let pathParams = {
      };
      let queryParams = {
        'is_individual': opts['isIndividual'],
        'min_date': opts['minDate'],
        'max_image_number': opts['maxImageNumber'],
        'min_image_number': opts['minImageNumber'],
        'contributor_type': this.apiClient.buildCollectionParam(opts['contributorType'], 'multi'),
        'contributor_id': this.apiClient.buildCollectionParam(opts['contributorId'], 'multi'),
        'recipient_committee_org_type': this.apiClient.buildCollectionParam(opts['recipientCommitteeOrgType'], 'multi'),
        'contributor_employer': this.apiClient.buildCollectionParam(opts['contributorEmployer'], 'multi'),
        'sort_null_only': opts['sortNullOnly'],
        'last_index': opts['lastIndex'],
        'contributor_name': this.apiClient.buildCollectionParam(opts['contributorName'], 'multi'),
        'min_amount': opts['minAmount'],
        'sort_hide_null': opts['sortHideNull'],
        'recipient_committee_designation': this.apiClient.buildCollectionParam(opts['recipientCommitteeDesignation'], 'multi'),
        'max_load_date': opts['maxLoadDate'],
        'recipient_committee_type': this.apiClient.buildCollectionParam(opts['recipientCommitteeType'], 'multi'),
        'sort': opts['sort'],
        'last_contribution_receipt_date': opts['lastContributionReceiptDate'],
        'last_contribution_receipt_amount': opts['lastContributionReceiptAmount'],
        'line_number': opts['lineNumber'],
        'contributor_state': this.apiClient.buildCollectionParam(opts['contributorState'], 'multi'),
        'per_page': opts['perPage'],
        'api_key': apiKey,
        'two_year_transaction_period': this.apiClient.buildCollectionParam(opts['twoYearTransactionPeriod'], 'multi'),
        'contributor_zip': this.apiClient.buildCollectionParam(opts['contributorZip'], 'multi'),
        'min_load_date': opts['minLoadDate'],
        'contributor_occupation': this.apiClient.buildCollectionParam(opts['contributorOccupation'], 'multi'),
        'contributor_city': this.apiClient.buildCollectionParam(opts['contributorCity'], 'multi'),
        'committee_id': this.apiClient.buildCollectionParam(opts['committeeId'], 'multi'),
        'image_number': this.apiClient.buildCollectionParam(opts['imageNumber'], 'multi'),
        'max_date': opts['maxDate'],
        'max_amount': opts['maxAmount']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyHeaderAuth', 'ApiKeyQueryAuth', 'apiKey'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ScheduleAPage;
      return this.apiClient.callApi(
        '/schedules/schedule_a/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the schedulesScheduleASubIdGet operation.
     * @callback module:api/ReceiptsApi~schedulesScheduleASubIdGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ScheduleAPage} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     *  This description is for both ​`/schedules​/schedule_a​/` and ​ `/schedules​/schedule_a​/{sub_id}​/`.  This endpoint provides itemized receipts. Schedule A records describe itemized receipts, including contributions from individuals. If you are interested in contributions from an individual, use the `/schedules/schedule_a/` endpoint. For a more complete description of all Schedule A records visit [About receipts data](https://www.fec.gov/campaign-finance-data/about-campaign-finance-data/about-receipts-data/). If you are interested in our \"is_individual\" methodology visit our [methodology page](https://www.fec.gov/campaign-finance-data/about-campaign-finance-data/methodology/).  ​The `/schedules​/schedule_a​/` endpoint is not paginated by page number. This endpoint uses keyset pagination to improve query performance and these indices are required to properly page through this large dataset. To request the next page, you should append the values found in the `last_indexes` object from pagination to the URL of your last request as additional parameters.  For example, when sorting by `contribution_receipt_date`, you might receive a page of results with the two scenarios of following pagination information:  case #1: ``` pagination: {     pages: 2152643,     per_page: 20,     count: 43052850,     last_indexes: {         last_index: \"230880619\",         last_contribution_receipt_date: \"2014-01-01\"     } } ``` <br/> case #2 (results which include contribution_receipt_date = NULL):  ``` pagination: {     pages: 2152644,     per_page: 20,     count: 43052850,     last_indexes: {         last_index: \"230880639\",         sort_null_only: True     } } ``` To fetch the next page of sorted results, append `last_index=230880619` and `last_contribution_receipt_date=2014-01-01` to the URL and when reaching `contribution_receipt_date=NULL`, append `last_index=230880639` and `sort_null_only=True`. We strongly advise paging through these results using sort indices. The default sort is acending by `contribution_receipt_date` (`deprecated`, will be descending). If you do not page using sort indices, some transactions may be unintentionally filtered out.  Calls to ​`/schedules​/schedule_a​/` may return many records. For large result sets, the record counts found in the pagination object are approximate; you will need to page through the records until no records are returned.  To avoid throwing the \"out of range\" exception on the last page, one recommandation is to use total count and `per_page` to control the traverse loop of results.  ​The `/schedules​/schedule_a​/{sub_id}​/` endpoint returns a single transaction, but it does include a pagination object class. Please ignore the information in that object class.  
     * @param {String} apiKey  API key for https://api.data.gov. Get one at https://api.data.gov/signup. 
     * @param {String} subId 
     * @param {Object} opts Optional parameters
     * @param {Boolean} [isIndividual] Restrict to non-earmarked individual contributions where memo code is true. Filtering individuals is useful to make sure contributions are not double reported and in creating breakdowns of the amount of money coming from individuals.
     * @param {Date} [minDate] Minimum date
     * @param {String} [maxImageNumber] Maxium image number of the page where the schedule item is reported
     * @param {String} [minImageNumber] Minium image number of the page where the schedule item is reported
     * @param {Array.<module:model/String>} [contributorType] Filters individual or committee contributions based on line number
     * @param {Array.<String>} [contributorId] The FEC identifier should be represented here if the contributor is registered with the FEC.
     * @param {Array.<module:model/String>} [recipientCommitteeOrgType] The one-letter code for the kind for organization:         - C corporation         - L labor organization         - M membership organization         - T trade association         - V cooperative         - W corporation without capital stock 
     * @param {Array.<String>} [contributorEmployer] Employer of contributor, filers need to make an effort to gather this information
     * @param {Boolean} [sortNullOnly = false)] Toggle that filters out all rows having sort column that is non-null
     * @param {Number} [lastIndex] Index of last result from previous page
     * @param {Array.<String>} [contributorName] Name of contributor
     * @param {String} [minAmount] Filter for all amounts greater than a value.
     * @param {Boolean} [sortHideNull = false)] Hide null values on sorted column(s).
     * @param {Array.<module:model/String>} [recipientCommitteeDesignation] The one-letter designation code of the organization:          - A authorized by a candidate          - J joint fundraising committee          - P principal campaign committee of a candidate          - U unauthorized          - B lobbyist/registrant PAC          - D leadership PAC 
     * @param {Date} [maxLoadDate] Maximum load date
     * @param {Array.<module:model/String>} [recipientCommitteeType] The one-letter type code of the organization:         - C communication cost         - D delegate         - E electioneering communication         - H House         - I independent expenditure filer (not a committee)         - N PAC - nonqualified         - O independent expenditure-only (super PACs)         - P presidential         - Q PAC - qualified         - S Senate         - U single candidate independent expenditure         - V PAC with non-contribution account, nonqualified         - W PAC with non-contribution account, qualified         - X party, nonqualified         - Y party, qualified         - Z national party non-federal account 
     * @param {String} [sort = '-contribution_receipt_date')] Provide a field to sort by. Use `-` for descending order. 
     * @param {Date} [lastContributionReceiptDate] When sorting by `contribution_receipt_date`, this is populated with the         `contribution_receipt_date` of the last result. However, you will need to pass the index         of that last result to `last_index` to get the next page.
     * @param {Number} [lastContributionReceiptAmount] When sorting by `contribution_receipt_amount`, this is populated with the         `contribution_receipt_amount` of the last result. However, you will need to pass the index         of that last result to `last_index` to get the next page.
     * @param {String} [lineNumber] Filter for form and line number using the following format: `FORM-LINENUMBER`.  For example an argument such as `F3X-16` would filter down to all entries from form `F3X` line number `16`.
     * @param {Array.<String>} [contributorState] State of contributor
     * @param {Number} [perPage = 20)] The number of results returned per page. Defaults to 20.
     * @param {Array.<Number>} [twoYearTransactionPeriod]  This is a two-year period that is derived from the year a transaction took place in the Itemized Schedule A and Schedule B tables. In cases where we have the date of the transaction (contribution_receipt_date in schedules/schedule_a, disbursement_date in schedules/schedule_b) the two_year_transaction_period is named after the ending, even-numbered year. If we do not have the date  of the transaction, we fall back to using the report year (report_year in both tables) instead,  making the same cycle adjustment as necessary. If no transaction year is specified, the results default to the most current cycle. 
     * @param {Array.<String>} [contributorZip] Zip code of contributor
     * @param {Date} [minLoadDate] Minimum load date
     * @param {Array.<String>} [contributorOccupation] Occupation of contributor, filers need to make an effort to gather this information
     * @param {Array.<String>} [contributorCity] City of contributor
     * @param {Array.<String>} [committeeId]  A unique identifier assigned to each committee or filer registered with the FEC. In general committee id's begin with the letter C which is followed by eight digits. 
     * @param {Array.<String>} [imageNumber]  An unique identifier for each page where the electronic or paper filing is reported. 
     * @param {Date} [maxDate] Maximum date
     * @param {String} [maxAmount] Filter for all amounts less than a value.
     * @param {module:api/ReceiptsApi~schedulesScheduleASubIdGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ScheduleAPage}
     */
    schedulesScheduleASubIdGet(apiKey, subId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'apiKey' is set
      if (apiKey === undefined || apiKey === null) {
        throw new Error("Missing the required parameter 'apiKey' when calling schedulesScheduleASubIdGet");
      }
      // verify the required parameter 'subId' is set
      if (subId === undefined || subId === null) {
        throw new Error("Missing the required parameter 'subId' when calling schedulesScheduleASubIdGet");
      }

      let pathParams = {
        'sub_id': subId
      };
      let queryParams = {
        'is_individual': opts['isIndividual'],
        'min_date': opts['minDate'],
        'max_image_number': opts['maxImageNumber'],
        'min_image_number': opts['minImageNumber'],
        'contributor_type': this.apiClient.buildCollectionParam(opts['contributorType'], 'multi'),
        'contributor_id': this.apiClient.buildCollectionParam(opts['contributorId'], 'multi'),
        'recipient_committee_org_type': this.apiClient.buildCollectionParam(opts['recipientCommitteeOrgType'], 'multi'),
        'contributor_employer': this.apiClient.buildCollectionParam(opts['contributorEmployer'], 'multi'),
        'sort_null_only': opts['sortNullOnly'],
        'last_index': opts['lastIndex'],
        'contributor_name': this.apiClient.buildCollectionParam(opts['contributorName'], 'multi'),
        'min_amount': opts['minAmount'],
        'sort_hide_null': opts['sortHideNull'],
        'recipient_committee_designation': this.apiClient.buildCollectionParam(opts['recipientCommitteeDesignation'], 'multi'),
        'max_load_date': opts['maxLoadDate'],
        'recipient_committee_type': this.apiClient.buildCollectionParam(opts['recipientCommitteeType'], 'multi'),
        'sort': opts['sort'],
        'last_contribution_receipt_date': opts['lastContributionReceiptDate'],
        'last_contribution_receipt_amount': opts['lastContributionReceiptAmount'],
        'line_number': opts['lineNumber'],
        'contributor_state': this.apiClient.buildCollectionParam(opts['contributorState'], 'multi'),
        'per_page': opts['perPage'],
        'api_key': apiKey,
        'two_year_transaction_period': this.apiClient.buildCollectionParam(opts['twoYearTransactionPeriod'], 'multi'),
        'contributor_zip': this.apiClient.buildCollectionParam(opts['contributorZip'], 'multi'),
        'min_load_date': opts['minLoadDate'],
        'contributor_occupation': this.apiClient.buildCollectionParam(opts['contributorOccupation'], 'multi'),
        'contributor_city': this.apiClient.buildCollectionParam(opts['contributorCity'], 'multi'),
        'committee_id': this.apiClient.buildCollectionParam(opts['committeeId'], 'multi'),
        'image_number': this.apiClient.buildCollectionParam(opts['imageNumber'], 'multi'),
        'max_date': opts['maxDate'],
        'max_amount': opts['maxAmount']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyHeaderAuth', 'ApiKeyQueryAuth', 'apiKey'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ScheduleAPage;
      return this.apiClient.callApi(
        '/schedules/schedule_a/{sub_id}/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
