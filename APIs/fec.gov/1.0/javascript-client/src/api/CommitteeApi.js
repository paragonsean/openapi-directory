/**
 * OpenFEC
 * This application programming interface (API) allows you to explore the way candidates and committees fund their campaigns.    The Federal Election Commission (FEC) API is a RESTful web service supporting full-text and field-specific searches on FEC data. [Bulk downloads](https://www.fec.gov/data/advanced/?tab=bulk-data) are available on the current site. Information is tied to the underlying forms by file ID and image ID. Data is updated nightly.    There are a lot of data, and a good place to start is to use search to find interesting candidates and committees. Then, you can use their IDs to find report or line item details with the other endpoints. If you are interested in individual donors, check out contributor information in the `/schedule_a/` endpoints.    <b class=\"body\" id=\"getting_started_head\">Getting started with the openFEC API</b><br>    If you would like to use the FEC's API programmatically, you can sign up for your own API key using our form. Alternatively, you can still try out our API without an API key by using the web interface and using DEMO_KEY. Note that when you use the openFEC API you are subject to the [Terms of Service](https://github.com/fecgov/FEC/blob/master/TERMS-OF-SERVICE.md) and [Acceptable Use policy](https://github.com/fecgov/FEC/blob/master/ACCEPTABLE-USE-POLICY.md).    Signing up for an API key will enable you to place up to 1,000 calls an hour. Each call is limited to 100 results per page. You can email questions, comments or a request to get a key for 7,200 calls an hour (120 calls per minute) to <a href=\"mailto:APIinfo@fec.gov\">APIinfo@fec.gov</a>. You can also ask questions and discuss the data in a community led [group](https://groups.google.com/forum/#!forum/fec-data).    The model definitions and schema are available at [/swagger](/swagger/). This is useful for making wrappers and exploring the data.    A few restrictions limit the way you can use FEC data. For example, you can’t use contributor lists for commercial purposes or to solicit donations. [Learn more here](https://www.fec.gov/updates/sale-or-use-contributor-information/).    [Inspect our source code](https://github.com/fecgov/openFEC). We welcome issues and pull requests!    <p><br></p> <h2 class=\"title\" id=\"signup_head\">Sign up for an API key</h2> <div id=\"apidatagov_signup\">Loading signup form...</div>
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import CommitteeDetailPage from '../model/CommitteeDetailPage';
import CommitteeHistoryProfilePage from '../model/CommitteeHistoryProfilePage';
import CommitteePage from '../model/CommitteePage';

/**
* Committee service.
* @module api/CommitteeApi
* @version 1.0
*/
export default class CommitteeApi {

    /**
    * Constructs a new CommitteeApi. 
    * @alias module:api/CommitteeApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the candidateCandidateIdCommitteesGet operation.
     * @callback module:api/CommitteeApi~candidateCandidateIdCommitteesGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CommitteeDetailPage} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     *  This endpoint is useful for finding detailed information about a particular committee or filer. Use the `committee_id` to find the most recent information about the committee. 
     * @param {String} apiKey  API key for https://api.data.gov. Get one at https://api.data.gov/signup. 
     * @param {String} candidateId  A unique identifier assigned to each candidate registered with the FEC. If a person runs for several offices, that person will have separate candidate IDs for each office. First character indicates office - [P]residential, [H]ouse, [S]enate]. Second character is the last digit of the two-year period the ID was created. Third and fourth is the candidate state. Presidential IDs don't have state. Fifth and sixth is the district when the candidate first ran. This does not change if the candidate/member's district changes during re-districting. Presidential IDs don't have districts. The rest is sequence. 
     * @param {Object} opts Optional parameters
     * @param {Array.<module:model/String>} [committeeType] The one-letter type code of the organization:         - C communication cost         - D delegate         - E electioneering communication         - H House         - I independent expenditure filer (not a committee)         - N PAC - nonqualified         - O independent expenditure-only (super PACs)         - P presidential         - Q PAC - qualified         - S Senate         - U single candidate independent expenditure         - V PAC with non-contribution account, nonqualified         - W PAC with non-contribution account, qualified         - X party, nonqualified         - Y party, qualified         - Z national party non-federal account 
     * @param {Array.<Number>} [cycle]  A two year election cycle that the committee was active- (after original registration date but before expiration date in Form 1s) The cycle begins with an odd year and is named for its ending, even year. 
     * @param {Boolean} [sortNullOnly = false)] Toggle that filters out all rows having sort column that is non-null
     * @param {Number} [page = 1)] For paginating through results, starting at page 1
     * @param {Array.<Number>} [year] A year that the committee was active— (after original registration date     or filing but before expiration date)
     * @param {Boolean} [sortNullsLast = false)] Toggle that sorts null values last
     * @param {Boolean} [sortHideNull = false)] Hide null values on sorted column(s).
     * @param {Number} [perPage = 20)] The number of results returned per page. Defaults to 20.
     * @param {Array.<module:model/String>} [filingFrequency] The one-letter      code of the filing frequency:          - A Administratively terminated          - D Debt          - M Monthly filer          - Q Quarterly filer          - T Terminated          - W Waived 
     * @param {Array.<module:model/String>} [organizationType] The one-letter code for the kind for organization:         - C corporation         - L labor organization         - M membership organization         - T trade association         - V cooperative         - W corporation without capital stock 
     * @param {Array.<module:model/String>} [designation] The one-letter designation code of the organization:          - A authorized by a candidate          - J joint fundraising committee          - P principal campaign committee of a candidate          - U unauthorized          - B lobbyist/registrant PAC          - D leadership PAC 
     * @param {String} [sort = 'name')] Provide a field to sort by. Use `-` for descending order. 
     * @param {module:api/CommitteeApi~candidateCandidateIdCommitteesGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CommitteeDetailPage}
     */
    candidateCandidateIdCommitteesGet(apiKey, candidateId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'apiKey' is set
      if (apiKey === undefined || apiKey === null) {
        throw new Error("Missing the required parameter 'apiKey' when calling candidateCandidateIdCommitteesGet");
      }
      // verify the required parameter 'candidateId' is set
      if (candidateId === undefined || candidateId === null) {
        throw new Error("Missing the required parameter 'candidateId' when calling candidateCandidateIdCommitteesGet");
      }

      let pathParams = {
        'candidate_id': candidateId
      };
      let queryParams = {
        'api_key': apiKey,
        'committee_type': this.apiClient.buildCollectionParam(opts['committeeType'], 'multi'),
        'cycle': this.apiClient.buildCollectionParam(opts['cycle'], 'multi'),
        'sort_null_only': opts['sortNullOnly'],
        'page': opts['page'],
        'year': this.apiClient.buildCollectionParam(opts['year'], 'multi'),
        'sort_nulls_last': opts['sortNullsLast'],
        'sort_hide_null': opts['sortHideNull'],
        'per_page': opts['perPage'],
        'filing_frequency': this.apiClient.buildCollectionParam(opts['filingFrequency'], 'multi'),
        'organization_type': this.apiClient.buildCollectionParam(opts['organizationType'], 'multi'),
        'designation': this.apiClient.buildCollectionParam(opts['designation'], 'multi'),
        'sort': opts['sort']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyHeaderAuth', 'ApiKeyQueryAuth', 'apiKey'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = CommitteeDetailPage;
      return this.apiClient.callApi(
        '/candidate/{candidate_id}/committees/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the candidateCandidateIdCommitteesHistoryCycleGet operation.
     * @callback module:api/CommitteeApi~candidateCandidateIdCommitteesHistoryCycleGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CommitteeHistoryProfilePage} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     *  Explore a filer's characteristics over time. This can be particularly useful if the committees change treasurers, designation, or `committee_type`. 
     * @param {String} apiKey  API key for https://api.data.gov. Get one at https://api.data.gov/signup. 
     * @param {Number} cycle  A two year election cycle that the committee was active- (after original registration date but before expiration date in Form 1s) The cycle begins with an odd year and is named for its ending, even year. 
     * @param {String} candidateId  A unique identifier assigned to each candidate registered with the FEC. If a person runs for several offices, that person will have separate candidate IDs for each office. First character indicates office - [P]residential, [H]ouse, [S]enate]. Second character is the last digit of the two-year period the ID was created. Third and fourth is the candidate state. Presidential IDs don't have state. Fifth and sixth is the district when the candidate first ran. This does not change if the candidate/member's district changes during re-districting. Presidential IDs don't have districts. The rest is sequence. 
     * @param {Object} opts Optional parameters
     * @param {Boolean} [electionFull = true)] `True` indicates that full election period of a candidate. `False` indicates that two year election cycle.
     * @param {Boolean} [sortNullsLast = false)] Toggle that sorts null values last
     * @param {Number} [page = 1)] For paginating through results, starting at page 1
     * @param {Boolean} [sortNullOnly = false)] Toggle that filters out all rows having sort column that is non-null
     * @param {Boolean} [sortHideNull = false)] Hide null values on sorted column(s).
     * @param {Number} [perPage = 20)] The number of results returned per page. Defaults to 20.
     * @param {Array.<module:model/String>} [designation] The one-letter designation code of the organization:          - A authorized by a candidate          - J joint fundraising committee          - P principal campaign committee of a candidate          - U unauthorized          - B lobbyist/registrant PAC          - D leadership PAC 
     * @param {String} [sort = '-cycle')] Provide a field to sort by. Use `-` for descending order. 
     * @param {module:api/CommitteeApi~candidateCandidateIdCommitteesHistoryCycleGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CommitteeHistoryProfilePage}
     */
    candidateCandidateIdCommitteesHistoryCycleGet(apiKey, cycle, candidateId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'apiKey' is set
      if (apiKey === undefined || apiKey === null) {
        throw new Error("Missing the required parameter 'apiKey' when calling candidateCandidateIdCommitteesHistoryCycleGet");
      }
      // verify the required parameter 'cycle' is set
      if (cycle === undefined || cycle === null) {
        throw new Error("Missing the required parameter 'cycle' when calling candidateCandidateIdCommitteesHistoryCycleGet");
      }
      // verify the required parameter 'candidateId' is set
      if (candidateId === undefined || candidateId === null) {
        throw new Error("Missing the required parameter 'candidateId' when calling candidateCandidateIdCommitteesHistoryCycleGet");
      }

      let pathParams = {
        'cycle': cycle,
        'candidate_id': candidateId
      };
      let queryParams = {
        'api_key': apiKey,
        'election_full': opts['electionFull'],
        'sort_nulls_last': opts['sortNullsLast'],
        'page': opts['page'],
        'sort_null_only': opts['sortNullOnly'],
        'sort_hide_null': opts['sortHideNull'],
        'per_page': opts['perPage'],
        'designation': this.apiClient.buildCollectionParam(opts['designation'], 'multi'),
        'sort': opts['sort']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyHeaderAuth', 'ApiKeyQueryAuth', 'apiKey'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = CommitteeHistoryProfilePage;
      return this.apiClient.callApi(
        '/candidate/{candidate_id}/committees/history/{cycle}/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the candidateCandidateIdCommitteesHistoryGet operation.
     * @callback module:api/CommitteeApi~candidateCandidateIdCommitteesHistoryGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CommitteeHistoryProfilePage} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     *  Explore a filer's characteristics over time. This can be particularly useful if the committees change treasurers, designation, or `committee_type`. 
     * @param {String} apiKey  API key for https://api.data.gov. Get one at https://api.data.gov/signup. 
     * @param {String} candidateId  A unique identifier assigned to each candidate registered with the FEC. If a person runs for several offices, that person will have separate candidate IDs for each office. First character indicates office - [P]residential, [H]ouse, [S]enate]. Second character is the last digit of the two-year period the ID was created. Third and fourth is the candidate state. Presidential IDs don't have state. Fifth and sixth is the district when the candidate first ran. This does not change if the candidate/member's district changes during re-districting. Presidential IDs don't have districts. The rest is sequence. 
     * @param {Object} opts Optional parameters
     * @param {Boolean} [electionFull = true)] `True` indicates that full election period of a candidate. `False` indicates that two year election cycle.
     * @param {Boolean} [sortNullsLast = false)] Toggle that sorts null values last
     * @param {Number} [page = 1)] For paginating through results, starting at page 1
     * @param {Boolean} [sortNullOnly = false)] Toggle that filters out all rows having sort column that is non-null
     * @param {Boolean} [sortHideNull = false)] Hide null values on sorted column(s).
     * @param {Number} [perPage = 20)] The number of results returned per page. Defaults to 20.
     * @param {Array.<module:model/String>} [designation] The one-letter designation code of the organization:          - A authorized by a candidate          - J joint fundraising committee          - P principal campaign committee of a candidate          - U unauthorized          - B lobbyist/registrant PAC          - D leadership PAC 
     * @param {String} [sort = '-cycle')] Provide a field to sort by. Use `-` for descending order. 
     * @param {module:api/CommitteeApi~candidateCandidateIdCommitteesHistoryGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CommitteeHistoryProfilePage}
     */
    candidateCandidateIdCommitteesHistoryGet(apiKey, candidateId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'apiKey' is set
      if (apiKey === undefined || apiKey === null) {
        throw new Error("Missing the required parameter 'apiKey' when calling candidateCandidateIdCommitteesHistoryGet");
      }
      // verify the required parameter 'candidateId' is set
      if (candidateId === undefined || candidateId === null) {
        throw new Error("Missing the required parameter 'candidateId' when calling candidateCandidateIdCommitteesHistoryGet");
      }

      let pathParams = {
        'candidate_id': candidateId
      };
      let queryParams = {
        'api_key': apiKey,
        'election_full': opts['electionFull'],
        'sort_nulls_last': opts['sortNullsLast'],
        'page': opts['page'],
        'sort_null_only': opts['sortNullOnly'],
        'sort_hide_null': opts['sortHideNull'],
        'per_page': opts['perPage'],
        'designation': this.apiClient.buildCollectionParam(opts['designation'], 'multi'),
        'sort': opts['sort']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyHeaderAuth', 'ApiKeyQueryAuth', 'apiKey'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = CommitteeHistoryProfilePage;
      return this.apiClient.callApi(
        '/candidate/{candidate_id}/committees/history/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the committeeCommitteeIdGet operation.
     * @callback module:api/CommitteeApi~committeeCommitteeIdGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CommitteeDetailPage} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     *  This endpoint is useful for finding detailed information about a particular committee or filer. Use the `committee_id` to find the most recent information about the committee. 
     * @param {String} apiKey  API key for https://api.data.gov. Get one at https://api.data.gov/signup. 
     * @param {String} committeeId  A unique identifier assigned to each committee or filer registered with the FEC. In general committee id's begin with the letter C which is followed by eight digits. 
     * @param {Object} opts Optional parameters
     * @param {Array.<module:model/String>} [committeeType] The one-letter type code of the organization:         - C communication cost         - D delegate         - E electioneering communication         - H House         - I independent expenditure filer (not a committee)         - N PAC - nonqualified         - O independent expenditure-only (super PACs)         - P presidential         - Q PAC - qualified         - S Senate         - U single candidate independent expenditure         - V PAC with non-contribution account, nonqualified         - W PAC with non-contribution account, qualified         - X party, nonqualified         - Y party, qualified         - Z national party non-federal account 
     * @param {Array.<Number>} [cycle]  A two year election cycle that the committee was active- (after original registration date but before expiration date in Form 1s) The cycle begins with an odd year and is named for its ending, even year. 
     * @param {Boolean} [sortNullOnly = false)] Toggle that filters out all rows having sort column that is non-null
     * @param {Number} [page = 1)] For paginating through results, starting at page 1
     * @param {Array.<Number>} [year] A year that the committee was active— (after original registration date     or filing but before expiration date)
     * @param {Boolean} [sortNullsLast = false)] Toggle that sorts null values last
     * @param {Boolean} [sortHideNull = false)] Hide null values on sorted column(s).
     * @param {Number} [perPage = 20)] The number of results returned per page. Defaults to 20.
     * @param {Array.<module:model/String>} [filingFrequency] The one-letter      code of the filing frequency:          - A Administratively terminated          - D Debt          - M Monthly filer          - Q Quarterly filer          - T Terminated          - W Waived 
     * @param {Array.<module:model/String>} [organizationType] The one-letter code for the kind for organization:         - C corporation         - L labor organization         - M membership organization         - T trade association         - V cooperative         - W corporation without capital stock 
     * @param {Array.<module:model/String>} [designation] The one-letter designation code of the organization:          - A authorized by a candidate          - J joint fundraising committee          - P principal campaign committee of a candidate          - U unauthorized          - B lobbyist/registrant PAC          - D leadership PAC 
     * @param {String} [sort = 'name')] Provide a field to sort by. Use `-` for descending order. 
     * @param {module:api/CommitteeApi~committeeCommitteeIdGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CommitteeDetailPage}
     */
    committeeCommitteeIdGet(apiKey, committeeId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'apiKey' is set
      if (apiKey === undefined || apiKey === null) {
        throw new Error("Missing the required parameter 'apiKey' when calling committeeCommitteeIdGet");
      }
      // verify the required parameter 'committeeId' is set
      if (committeeId === undefined || committeeId === null) {
        throw new Error("Missing the required parameter 'committeeId' when calling committeeCommitteeIdGet");
      }

      let pathParams = {
        'committee_id': committeeId
      };
      let queryParams = {
        'api_key': apiKey,
        'committee_type': this.apiClient.buildCollectionParam(opts['committeeType'], 'multi'),
        'cycle': this.apiClient.buildCollectionParam(opts['cycle'], 'multi'),
        'sort_null_only': opts['sortNullOnly'],
        'page': opts['page'],
        'year': this.apiClient.buildCollectionParam(opts['year'], 'multi'),
        'sort_nulls_last': opts['sortNullsLast'],
        'sort_hide_null': opts['sortHideNull'],
        'per_page': opts['perPage'],
        'filing_frequency': this.apiClient.buildCollectionParam(opts['filingFrequency'], 'multi'),
        'organization_type': this.apiClient.buildCollectionParam(opts['organizationType'], 'multi'),
        'designation': this.apiClient.buildCollectionParam(opts['designation'], 'multi'),
        'sort': opts['sort']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyHeaderAuth', 'ApiKeyQueryAuth', 'apiKey'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = CommitteeDetailPage;
      return this.apiClient.callApi(
        '/committee/{committee_id}/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the committeeCommitteeIdHistoryCycleGet operation.
     * @callback module:api/CommitteeApi~committeeCommitteeIdHistoryCycleGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CommitteeHistoryProfilePage} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     *  Explore a filer's characteristics over time. This can be particularly useful if the committees change treasurers, designation, or `committee_type`. 
     * @param {String} apiKey  API key for https://api.data.gov. Get one at https://api.data.gov/signup. 
     * @param {String} committeeId  A unique identifier assigned to each committee or filer registered with the FEC. In general committee id's begin with the letter C which is followed by eight digits. 
     * @param {Number} cycle  A two year election cycle that the committee was active- (after original registration date but before expiration date in Form 1s) The cycle begins with an odd year and is named for its ending, even year. 
     * @param {Object} opts Optional parameters
     * @param {Boolean} [electionFull = true)] `True` indicates that full election period of a candidate. `False` indicates that two year election cycle.
     * @param {Boolean} [sortNullsLast = false)] Toggle that sorts null values last
     * @param {Number} [page = 1)] For paginating through results, starting at page 1
     * @param {Boolean} [sortNullOnly = false)] Toggle that filters out all rows having sort column that is non-null
     * @param {Boolean} [sortHideNull = false)] Hide null values on sorted column(s).
     * @param {Number} [perPage = 20)] The number of results returned per page. Defaults to 20.
     * @param {Array.<module:model/String>} [designation] The one-letter designation code of the organization:          - A authorized by a candidate          - J joint fundraising committee          - P principal campaign committee of a candidate          - U unauthorized          - B lobbyist/registrant PAC          - D leadership PAC 
     * @param {String} [sort = '-cycle')] Provide a field to sort by. Use `-` for descending order. 
     * @param {module:api/CommitteeApi~committeeCommitteeIdHistoryCycleGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CommitteeHistoryProfilePage}
     */
    committeeCommitteeIdHistoryCycleGet(apiKey, committeeId, cycle, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'apiKey' is set
      if (apiKey === undefined || apiKey === null) {
        throw new Error("Missing the required parameter 'apiKey' when calling committeeCommitteeIdHistoryCycleGet");
      }
      // verify the required parameter 'committeeId' is set
      if (committeeId === undefined || committeeId === null) {
        throw new Error("Missing the required parameter 'committeeId' when calling committeeCommitteeIdHistoryCycleGet");
      }
      // verify the required parameter 'cycle' is set
      if (cycle === undefined || cycle === null) {
        throw new Error("Missing the required parameter 'cycle' when calling committeeCommitteeIdHistoryCycleGet");
      }

      let pathParams = {
        'committee_id': committeeId,
        'cycle': cycle
      };
      let queryParams = {
        'api_key': apiKey,
        'election_full': opts['electionFull'],
        'sort_nulls_last': opts['sortNullsLast'],
        'page': opts['page'],
        'sort_null_only': opts['sortNullOnly'],
        'sort_hide_null': opts['sortHideNull'],
        'per_page': opts['perPage'],
        'designation': this.apiClient.buildCollectionParam(opts['designation'], 'multi'),
        'sort': opts['sort']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyHeaderAuth', 'ApiKeyQueryAuth', 'apiKey'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = CommitteeHistoryProfilePage;
      return this.apiClient.callApi(
        '/committee/{committee_id}/history/{cycle}/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the committeeCommitteeIdHistoryGet operation.
     * @callback module:api/CommitteeApi~committeeCommitteeIdHistoryGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CommitteeHistoryProfilePage} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     *  Explore a filer's characteristics over time. This can be particularly useful if the committees change treasurers, designation, or `committee_type`. 
     * @param {String} apiKey  API key for https://api.data.gov. Get one at https://api.data.gov/signup. 
     * @param {String} committeeId  A unique identifier assigned to each committee or filer registered with the FEC. In general committee id's begin with the letter C which is followed by eight digits. 
     * @param {Object} opts Optional parameters
     * @param {Boolean} [electionFull = true)] `True` indicates that full election period of a candidate. `False` indicates that two year election cycle.
     * @param {Boolean} [sortNullsLast = false)] Toggle that sorts null values last
     * @param {Number} [page = 1)] For paginating through results, starting at page 1
     * @param {Boolean} [sortNullOnly = false)] Toggle that filters out all rows having sort column that is non-null
     * @param {Boolean} [sortHideNull = false)] Hide null values on sorted column(s).
     * @param {Number} [perPage = 20)] The number of results returned per page. Defaults to 20.
     * @param {Array.<module:model/String>} [designation] The one-letter designation code of the organization:          - A authorized by a candidate          - J joint fundraising committee          - P principal campaign committee of a candidate          - U unauthorized          - B lobbyist/registrant PAC          - D leadership PAC 
     * @param {String} [sort = '-cycle')] Provide a field to sort by. Use `-` for descending order. 
     * @param {module:api/CommitteeApi~committeeCommitteeIdHistoryGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CommitteeHistoryProfilePage}
     */
    committeeCommitteeIdHistoryGet(apiKey, committeeId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'apiKey' is set
      if (apiKey === undefined || apiKey === null) {
        throw new Error("Missing the required parameter 'apiKey' when calling committeeCommitteeIdHistoryGet");
      }
      // verify the required parameter 'committeeId' is set
      if (committeeId === undefined || committeeId === null) {
        throw new Error("Missing the required parameter 'committeeId' when calling committeeCommitteeIdHistoryGet");
      }

      let pathParams = {
        'committee_id': committeeId
      };
      let queryParams = {
        'api_key': apiKey,
        'election_full': opts['electionFull'],
        'sort_nulls_last': opts['sortNullsLast'],
        'page': opts['page'],
        'sort_null_only': opts['sortNullOnly'],
        'sort_hide_null': opts['sortHideNull'],
        'per_page': opts['perPage'],
        'designation': this.apiClient.buildCollectionParam(opts['designation'], 'multi'),
        'sort': opts['sort']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyHeaderAuth', 'ApiKeyQueryAuth', 'apiKey'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = CommitteeHistoryProfilePage;
      return this.apiClient.callApi(
        '/committee/{committee_id}/history/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the committeesGet operation.
     * @callback module:api/CommitteeApi~committeesGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CommitteePage} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     *  Fetch basic information about committees and filers. Use parameters to filter for particular characteristics.  
     * @param {String} apiKey  API key for https://api.data.gov. Get one at https://api.data.gov/signup. 
     * @param {Object} opts Optional parameters
     * @param {Array.<String>} [treasurerName] Name of the Committee's treasurer. If multiple treasurers for the committee, the most recent treasurer will be shown.
     * @param {Array.<String>} [q] The name of the committee. If a committee changes its name,     the most recent name will be shown. Committee names are not unique. Use committee_id     for looking up records.
     * @param {Date} [minFirstFileDate] Filter for committees whose first filing was received on or after this date.
     * @param {Array.<Number>} [cycle]  A two year election cycle that the committee was active- (after original registration date but before expiration date in Form 1s) The cycle begins with an odd year and is named for its ending, even year. 
     * @param {Array.<String>} [sponsorCandidateId]  A unique identifier assigned to each candidate registered with the FEC. If a person runs for several offices, that person will have separate candidate IDs for each office. This is a filter for Leadership PAC sponsor. 
     * @param {Boolean} [sortNullOnly = false)] Toggle that filters out all rows having sort column that is non-null
     * @param {Boolean} [sortHideNull = false)] Hide null values on sorted column(s).
     * @param {Array.<String>} [candidateId]  A unique identifier assigned to each candidate registered with the FEC. If a person runs for several offices, that person will have separate candidate IDs for each office. First character indicates office - [P]residential, [H]ouse, [S]enate]. Second character is the last digit of the two-year period the ID was created. Third and fourth is the candidate state. Presidential IDs don't have state. Fifth and sixth is the district when the candidate first ran. This does not change if the candidate/member's district changes during re-districting. Presidential IDs don't have districts. The rest is sequence. 
     * @param {Number} [perPage = 20)] The number of results returned per page. Defaults to 20.
     * @param {Array.<module:model/String>} [filingFrequency] The one-letter      code of the filing frequency:          - A Administratively terminated          - D Debt          - M Monthly filer          - Q Quarterly filer          - T Terminated          - W Waived 
     * @param {String} [sort = 'name')] Provide a field to sort by. Use `-` for descending order. 
     * @param {Date} [maxFirstFileDate] Filter for committees whose first filing was received on or before this date.
     * @param {Date} [minFirstF1Date] Filter for committees whose first Form 1 was received on or after this date.
     * @param {Date} [minLastF1Date] Filter for committees whose latest Form 1 was received on or after this date.
     * @param {Array.<module:model/String>} [committeeType] The one-letter type code of the organization:         - C communication cost         - D delegate         - E electioneering communication         - H House         - I independent expenditure filer (not a committee)         - N PAC - nonqualified         - O independent expenditure-only (super PACs)         - P presidential         - Q PAC - qualified         - S Senate         - U single candidate independent expenditure         - V PAC with non-contribution account, nonqualified         - W PAC with non-contribution account, qualified         - X party, nonqualified         - Y party, qualified         - Z national party non-federal account 
     * @param {Array.<String>} [party] Three-letter code for the party affiliated with a candidate or committee. For example, DEM for Democratic Party and REP for Republican Party.
     * @param {Boolean} [sortNullsLast = false)] Toggle that sorts null values last
     * @param {Number} [page = 1)] For paginating through results, starting at page 1
     * @param {Array.<Number>} [year] A year that the committee was active— (after original registration date     or filing but before expiration date)
     * @param {Array.<String>} [committeeId]  A unique identifier assigned to each committee or filer registered with the FEC. In general committee id's begin with the letter C which is followed by eight digits. 
     * @param {Array.<String>} [state] US state or territory
     * @param {Date} [maxLastF1Date] Filter for committees whose latest Form 1 was received on or before this date.
     * @param {Date} [maxFirstF1Date] Filter for committees whose first Form 1 was received on or before this date.
     * @param {Array.<module:model/String>} [designation] The one-letter designation code of the organization:          - A authorized by a candidate          - J joint fundraising committee          - P principal campaign committee of a candidate          - U unauthorized          - B lobbyist/registrant PAC          - D leadership PAC 
     * @param {Array.<module:model/String>} [organizationType] The one-letter code for the kind for organization:         - C corporation         - L labor organization         - M membership organization         - T trade association         - V cooperative         - W corporation without capital stock 
     * @param {module:api/CommitteeApi~committeesGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CommitteePage}
     */
    committeesGet(apiKey, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'apiKey' is set
      if (apiKey === undefined || apiKey === null) {
        throw new Error("Missing the required parameter 'apiKey' when calling committeesGet");
      }

      let pathParams = {
      };
      let queryParams = {
        'treasurer_name': this.apiClient.buildCollectionParam(opts['treasurerName'], 'multi'),
        'q': this.apiClient.buildCollectionParam(opts['q'], 'multi'),
        'min_first_file_date': opts['minFirstFileDate'],
        'cycle': this.apiClient.buildCollectionParam(opts['cycle'], 'multi'),
        'sponsor_candidate_id': this.apiClient.buildCollectionParam(opts['sponsorCandidateId'], 'multi'),
        'sort_null_only': opts['sortNullOnly'],
        'sort_hide_null': opts['sortHideNull'],
        'candidate_id': this.apiClient.buildCollectionParam(opts['candidateId'], 'multi'),
        'per_page': opts['perPage'],
        'filing_frequency': this.apiClient.buildCollectionParam(opts['filingFrequency'], 'multi'),
        'sort': opts['sort'],
        'max_first_file_date': opts['maxFirstFileDate'],
        'min_first_f1_date': opts['minFirstF1Date'],
        'api_key': apiKey,
        'min_last_f1_date': opts['minLastF1Date'],
        'committee_type': this.apiClient.buildCollectionParam(opts['committeeType'], 'multi'),
        'party': this.apiClient.buildCollectionParam(opts['party'], 'multi'),
        'sort_nulls_last': opts['sortNullsLast'],
        'page': opts['page'],
        'year': this.apiClient.buildCollectionParam(opts['year'], 'multi'),
        'committee_id': this.apiClient.buildCollectionParam(opts['committeeId'], 'multi'),
        'state': this.apiClient.buildCollectionParam(opts['state'], 'multi'),
        'max_last_f1_date': opts['maxLastF1Date'],
        'max_first_f1_date': opts['maxFirstF1Date'],
        'designation': this.apiClient.buildCollectionParam(opts['designation'], 'multi'),
        'organization_type': this.apiClient.buildCollectionParam(opts['organizationType'], 'multi')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyHeaderAuth', 'ApiKeyQueryAuth', 'apiKey'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = CommitteePage;
      return this.apiClient.callApi(
        '/committees/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
