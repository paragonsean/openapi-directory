/**
 * OpenFEC
 * This application programming interface (API) allows you to explore the way candidates and committees fund their campaigns.    The Federal Election Commission (FEC) API is a RESTful web service supporting full-text and field-specific searches on FEC data. [Bulk downloads](https://www.fec.gov/data/advanced/?tab=bulk-data) are available on the current site. Information is tied to the underlying forms by file ID and image ID. Data is updated nightly.    There are a lot of data, and a good place to start is to use search to find interesting candidates and committees. Then, you can use their IDs to find report or line item details with the other endpoints. If you are interested in individual donors, check out contributor information in the `/schedule_a/` endpoints.    <b class=\"body\" id=\"getting_started_head\">Getting started with the openFEC API</b><br>    If you would like to use the FEC's API programmatically, you can sign up for your own API key using our form. Alternatively, you can still try out our API without an API key by using the web interface and using DEMO_KEY. Note that when you use the openFEC API you are subject to the [Terms of Service](https://github.com/fecgov/FEC/blob/master/TERMS-OF-SERVICE.md) and [Acceptable Use policy](https://github.com/fecgov/FEC/blob/master/ACCEPTABLE-USE-POLICY.md).    Signing up for an API key will enable you to place up to 1,000 calls an hour. Each call is limited to 100 results per page. You can email questions, comments or a request to get a key for 7,200 calls an hour (120 calls per minute) to <a href=\"mailto:APIinfo@fec.gov\">APIinfo@fec.gov</a>. You can also ask questions and discuss the data in a community led [group](https://groups.google.com/forum/#!forum/fec-data).    The model definitions and schema are available at [/swagger](/swagger/). This is useful for making wrappers and exploring the data.    A few restrictions limit the way you can use FEC data. For example, you canâ€™t use contributor lists for commercial purposes or to solicit donations. [Learn more here](https://www.fec.gov/updates/sale-or-use-contributor-information/).    [Inspect our source code](https://github.com/fecgov/openFEC). We welcome issues and pull requests!    <p><br></p> <h2 class=\"title\" id=\"signup_head\">Sign up for an API key</h2> <div id=\"apidatagov_signup\">Loading signup form...</div>
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import IETotalsByCandidatePage from '../model/IETotalsByCandidatePage';
import ScheduleEByCandidatePage from '../model/ScheduleEByCandidatePage';
import ScheduleEEfilePage from '../model/ScheduleEEfilePage';
import ScheduleEPage from '../model/ScheduleEPage';

/**
* IndependentExpenditures service.
* @module api/IndependentExpendituresApi
* @version 1.0
*/
export default class IndependentExpendituresApi {

    /**
    * Constructs a new IndependentExpendituresApi. 
    * @alias module:api/IndependentExpendituresApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the schedulesScheduleEByCandidateGet operation.
     * @callback module:api/IndependentExpendituresApi~schedulesScheduleEByCandidateGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ScheduleEByCandidatePage} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     *  Schedule E receipts aggregated by recipient candidate. To avoid double counting, memoed items are not included. 
     * @param {String} apiKey  API key for https://api.data.gov. Get one at https://api.data.gov/signup. 
     * @param {Object} opts Optional parameters
     * @param {String} [district] Two-digit US House distirict of the office the candidate is running for. Presidential, Senate and House at-large candidates will have District 00.
     * @param {module:model/String} [supportOppose] Support or opposition
     * @param {Boolean} [electionFull = true)] `True` indicates that full election period of a candidate. `False` indicates that two year election cycle.
     * @param {Array.<Number>} [cycle]  Filter records to only those that were applicable to a given two-year period.The cycle begins with an odd year and is named for its ending, even year. 
     * @param {Boolean} [sortNullOnly = false)] Toggle that filters out all rows having sort column that is non-null
     * @param {Number} [page = 1)] For paginating through results, starting at page 1
     * @param {String} [state] US state or territory where a candidate runs for office
     * @param {Array.<String>} [committeeId]  A unique identifier assigned to each committee or filer registered with the FEC. In general committee id's begin with the letter C which is followed by eight digits. 
     * @param {Boolean} [sortNullsLast = false)] Toggle that sorts null values last
     * @param {Boolean} [sortHideNull = false)] Hide null values on sorted column(s).
     * @param {Array.<String>} [candidateId]  A unique identifier assigned to each candidate registered with the FEC. If a person runs for several offices, that person will have separate candidate IDs for each office. First character indicates office - [P]residential, [H]ouse, [S]enate]. Second character is the last digit of the two-year period the ID was created. Third and fourth is the candidate state. Presidential IDs don't have state. Fifth and sixth is the district when the candidate first ran. This does not change if the candidate/member's district changes during re-districting. Presidential IDs don't have districts. The rest is sequence. 
     * @param {Number} [perPage = 20)] The number of results returned per page. Defaults to 20.
     * @param {module:model/String} [office] Federal office candidate runs for: H, S or P
     * @param {String} [sort] Provide a field to sort by. Use `-` for descending order. 
     * @param {module:api/IndependentExpendituresApi~schedulesScheduleEByCandidateGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ScheduleEByCandidatePage}
     */
    schedulesScheduleEByCandidateGet(apiKey, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'apiKey' is set
      if (apiKey === undefined || apiKey === null) {
        throw new Error("Missing the required parameter 'apiKey' when calling schedulesScheduleEByCandidateGet");
      }

      let pathParams = {
      };
      let queryParams = {
        'district': opts['district'],
        'api_key': apiKey,
        'support_oppose': opts['supportOppose'],
        'election_full': opts['electionFull'],
        'cycle': this.apiClient.buildCollectionParam(opts['cycle'], 'multi'),
        'sort_null_only': opts['sortNullOnly'],
        'page': opts['page'],
        'state': opts['state'],
        'committee_id': this.apiClient.buildCollectionParam(opts['committeeId'], 'multi'),
        'sort_nulls_last': opts['sortNullsLast'],
        'sort_hide_null': opts['sortHideNull'],
        'candidate_id': this.apiClient.buildCollectionParam(opts['candidateId'], 'multi'),
        'per_page': opts['perPage'],
        'office': opts['office'],
        'sort': opts['sort']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyHeaderAuth', 'ApiKeyQueryAuth', 'apiKey'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ScheduleEByCandidatePage;
      return this.apiClient.callApi(
        '/schedules/schedule_e/by_candidate/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the schedulesScheduleEEfileGet operation.
     * @callback module:api/IndependentExpendituresApi~schedulesScheduleEEfileGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ScheduleEEfilePage} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     *  Efiling endpoints provide real-time campaign finance data received from electronic filers. Efiling endpoints only contain the most recent four months of data and don't contain the processed and coded data that you can find on other endpoints. 
     * @param {String} apiKey  API key for https://api.data.gov. Get one at https://api.data.gov/signup. 
     * @param {Object} opts Optional parameters
     * @param {Number} [maxExpenditureAmount] Selects all items expended by this committee less than this amount
     * @param {Array.<module:model/String>} [supportOpposeIndicator] Explains if the money was spent in order to support or oppose a candidate or candidates. (Coded S or O for support or oppose.) This indicator applies to independent expenditures and communication costs.
     * @param {Date} [minExpenditureDate] Selects all items expended by this committee after this date
     * @param {Array.<String>} [filingForm] The form where the underlying data comes from, for example, Form 1 would appear as F1:     - F1   Statement of Organization     - F1M  Notification of Multicandidate Status     - F2   Statement of Candidacy     - F3   Report of Receipts and Disbursements for an Authorized Committee     - F3P  Report of Receipts and Disbursements by an Authorized Committee of a Candidate for     The Office of President or Vice President     - F3L  Report of Contributions Bundled by Lobbyists/Registrants and Lobbyist/Registrant PACs     - F3X  Report of Receipts and Disbursements for other than an Authorized Committee     - F4   Report of Receipts and Disbursements for a Committee or Organization Supporting a Nomination Convention     - F5   Report of Independent Expenditures Made and Contributions Received     - F6   48 Hour Notice of Contributions/Loans Received     - F7   Report of Communication Costs by Corporations and Membership Organizations     - F8   Debt Settlement Plan     - F9   24 Hour Notice of Disbursements for Electioneering Communications     - F13  Report of Donations Accepted for Inaugural Committee     - F99  Miscellaneous Text     - FRQ  Request for Additional Information 
     * @param {Date} [maxExpenditureDate] Selects all items expended by this committee before this date
     * @param {Date} [maxFiledDate] Timestamp of electronic or paper record that FEC received
     * @param {Boolean} [isNotice]  Record filed as 24- or 48-hour notice. 
     * @param {Boolean} [sortNullOnly = false)] Toggle that filters out all rows having sort column that is non-null
     * @param {Boolean} [sortHideNull = false)] Hide null values on sorted column(s).
     * @param {Array.<String>} [payeeName]  Name of the entity that received the payment. 
     * @param {Array.<String>} [candidateId]  A unique identifier assigned to each candidate registered with the FEC. If a person runs for several offices, that person will have separate candidate IDs for each office. First character indicates office - [P]residential, [H]ouse, [S]enate]. Second character is the last digit of the two-year period the ID was created. Third and fourth is the candidate state. Presidential IDs don't have state. Fifth and sixth is the district when the candidate first ran. This does not change if the candidate/member's district changes during re-districting. Presidential IDs don't have districts. The rest is sequence. 
     * @param {Number} [perPage = 20)] The number of results returned per page. Defaults to 20.
     * @param {Array.<String>} [candidateOfficeDistrict] Two-digit US House distirict of the office the candidate is running for. Presidential, Senate and House at-large candidates will have District 00.
     * @param {String} [sort = '-expenditure_date')] Provide a field to sort by. Use `-` for descending order. 
     * @param {Number} [minExpenditureAmount] Selects all items expended by this committee greater than this amount
     * @param {Array.<String>} [spenderName] The name of the committee. If a committee changes its name,     the most recent name will be shown. Committee names are not unique. Use committee_id     for looking up records.
     * @param {Date} [minDisseminationDate] Selects all items distributed by this committee after this date
     * @param {Array.<String>} [candidateOfficeState] US state or territory where a candidate runs for office
     * @param {Boolean} [sortNullsLast = false)] Toggle that sorts null values last
     * @param {Number} [page = 1)] For paginating through results, starting at page 1
     * @param {Array.<String>} [committeeId]  A unique identifier assigned to each committee or filer registered with the FEC. In general committee id's begin with the letter C which is followed by eight digits. 
     * @param {Array.<String>} [candidateSearch]  Search for candidates by candiate id or candidate first or last name 
     * @param {Array.<String>} [imageNumber]  An unique identifier for each page where the electronic or paper filing is reported. 
     * @param {Array.<String>} [candidateParty] Three-letter code for the party affiliated with a candidate or committee. For example, DEM for Democratic Party and REP for Republican Party.
     * @param {Date} [minFiledDate] Timestamp of electronic or paper record that FEC received
     * @param {Date} [maxDisseminationDate] Selects all items distributed by this committee before this date
     * @param {Boolean} [mostRecent]  The report associated with the transaction is either new or is the most-recently filed amendment. Undetermined version (`null`) is always included. 
     * @param {module:model/String} [candidateOffice] Federal office candidate runs for: H, S or P
     * @param {module:api/IndependentExpendituresApi~schedulesScheduleEEfileGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ScheduleEEfilePage}
     */
    schedulesScheduleEEfileGet(apiKey, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'apiKey' is set
      if (apiKey === undefined || apiKey === null) {
        throw new Error("Missing the required parameter 'apiKey' when calling schedulesScheduleEEfileGet");
      }

      let pathParams = {
      };
      let queryParams = {
        'max_expenditure_amount': opts['maxExpenditureAmount'],
        'support_oppose_indicator': this.apiClient.buildCollectionParam(opts['supportOpposeIndicator'], 'multi'),
        'min_expenditure_date': opts['minExpenditureDate'],
        'filing_form': this.apiClient.buildCollectionParam(opts['filingForm'], 'multi'),
        'max_expenditure_date': opts['maxExpenditureDate'],
        'max_filed_date': opts['maxFiledDate'],
        'is_notice': opts['isNotice'],
        'sort_null_only': opts['sortNullOnly'],
        'sort_hide_null': opts['sortHideNull'],
        'payee_name': this.apiClient.buildCollectionParam(opts['payeeName'], 'multi'),
        'candidate_id': this.apiClient.buildCollectionParam(opts['candidateId'], 'multi'),
        'per_page': opts['perPage'],
        'candidate_office_district': this.apiClient.buildCollectionParam(opts['candidateOfficeDistrict'], 'multi'),
        'sort': opts['sort'],
        'api_key': apiKey,
        'min_expenditure_amount': opts['minExpenditureAmount'],
        'spender_name': this.apiClient.buildCollectionParam(opts['spenderName'], 'multi'),
        'min_dissemination_date': opts['minDisseminationDate'],
        'candidate_office_state': this.apiClient.buildCollectionParam(opts['candidateOfficeState'], 'multi'),
        'sort_nulls_last': opts['sortNullsLast'],
        'page': opts['page'],
        'committee_id': this.apiClient.buildCollectionParam(opts['committeeId'], 'multi'),
        'candidate_search': this.apiClient.buildCollectionParam(opts['candidateSearch'], 'multi'),
        'image_number': this.apiClient.buildCollectionParam(opts['imageNumber'], 'multi'),
        'candidate_party': this.apiClient.buildCollectionParam(opts['candidateParty'], 'multi'),
        'min_filed_date': opts['minFiledDate'],
        'max_dissemination_date': opts['maxDisseminationDate'],
        'most_recent': opts['mostRecent'],
        'candidate_office': opts['candidateOffice']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyHeaderAuth', 'ApiKeyQueryAuth', 'apiKey'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ScheduleEEfilePage;
      return this.apiClient.callApi(
        '/schedules/schedule_e/efile/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the schedulesScheduleEGet operation.
     * @callback module:api/IndependentExpendituresApi~schedulesScheduleEGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ScheduleEPage} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     *  Schedule E covers the line item expenditures for independent expenditures. For example, if a super PAC bought ads on TV to oppose a federal candidate, each ad purchase would be recorded here with the expenditure amount, name and id of the candidate, and whether the ad supported or opposed the candidate.  An independent expenditure is an expenditure for a communication \"expressly advocating the election or defeat of a clearly identified candidate that is not made in cooperation, consultation, or concert with, or at the request or suggestion of, a candidate, a candidateâ€™s authorized committee, or their agents, or a political party or its agents.\"  Aggregates by candidate do not include 24 and 48 hour reports. This ensures we don't double count expenditures and the totals are more accurate. You can still find the information from 24 and 48 hour reports in `/schedule/schedule_e/`.  Due to the large quantity of Schedule E filings, this endpoint is not paginated by page number. Instead, you can request the next page of results by adding the values in the `last_indexes` object from `pagination` to the URL of your last request. For example, when sorting by `expenditure_amount`, you might receive a page of results with the following pagination information:  ```  \"pagination\": {     \"count\": 152623,     \"last_indexes\": {       \"last_index\": \"3023037\",       \"last_expenditure_amount\": -17348.5     },     \"per_page\": 20,     \"pages\": 7632   } } ```  To fetch the next page of sorted results, append `last_index=3023037` and `last_expenditure_amount=` to the URL.  We strongly advise paging through these results by using the sort indices (defaults to sort by disbursement date, e.g. `last_disbursement_date`), otherwise some resources may be unintentionally filtered out.  This resource uses keyset pagination to improve query performance and these indices are required to properly page through this large dataset.  Note: because the Schedule E data includes many records, counts for large result sets are approximate; you will want to page through the records until no records are returned. 
     * @param {String} apiKey  API key for https://api.data.gov. Get one at https://api.data.gov/signup. 
     * @param {Object} opts Optional parameters
     * @param {Date} [lastExpenditureDate]  When sorting by `expenditure_date`, this is populated with the `expenditure_date` of the last result. However, you will need to pass the index of that last result to `last_index` to get the next page. 
     * @param {String} [maxImageNumber] Maxium image number of the page where the schedule item is reported
     * @param {Array.<Boolean>} [isNotice]  Record filed as 24- or 48-hour notice. 
     * @param {Array.<String>} [payeeName]  Name of the entity that received the payment. 
     * @param {String} [minAmount] Filter for all amounts greater than a value.
     * @param {Array.<String>} [candidateId]  A unique identifier assigned to each candidate registered with the FEC. If a person runs for several offices, that person will have separate candidate IDs for each office. First character indicates office - [P]residential, [H]ouse, [S]enate]. Second character is the last digit of the two-year period the ID was created. Third and fourth is the candidate state. Presidential IDs don't have state. Fifth and sixth is the district when the candidate first ran. This does not change if the candidate/member's district changes during re-districting. Presidential IDs don't have districts. The rest is sequence. 
     * @param {Boolean} [sortHideNull = false)] Hide null values on sorted column(s).
     * @param {Number} [lastOfficeTotalYtd]  When sorting by `office_total_ytd`, this is populated with the `office_total_ytd` of the last result. However, you will need to pass the index of that last result to `last_index` to get the next page.' 
     * @param {String} [sort = '-expenditure_date')] Provide a field to sort by. Use `-` for descending order. 
     * @param {Date} [minFilingDate]  Selects all filings received after this date 
     * @param {Array.<String>} [qSpender]  Keyword search for spender name or ID 
     * @param {Date} [minDisseminationDate] Selects all items distributed by this committee after this date
     * @param {Array.<String>} [candidateOfficeState] US state or territory
     * @param {Boolean} [sortNullsLast = false)] Toggle that sorts null values last
     * @param {Number} [lastExpenditureAmount]  When sorting by `expenditure_amount`, this is populated with the `expenditure_amount` of the last result. However, you will need to pass the index of that last result to `last_index` to get the next page. 
     * @param {Array.<String>} [imageNumber]  An unique identifier for each page where the electronic or paper filing is reported. 
     * @param {Date} [maxDate] Maximum date
     * @param {Date} [maxDisseminationDate] Selects all items distributed by this committee before this date
     * @param {Date} [minDate] Minimum date
     * @param {Array.<String>} [filingForm] The form where the underlying data comes from, for example, Form 1 would appear as F1:     - F1   Statement of Organization     - F1M  Notification of Multicandidate Status     - F2   Statement of Candidacy     - F3   Report of Receipts and Disbursements for an Authorized Committee     - F3P  Report of Receipts and Disbursements by an Authorized Committee of a Candidate for     The Office of President or Vice President     - F3L  Report of Contributions Bundled by Lobbyists/Registrants and Lobbyist/Registrant PACs     - F3X  Report of Receipts and Disbursements for other than an Authorized Committee     - F4   Report of Receipts and Disbursements for a Committee or Organization Supporting a Nomination Convention     - F5   Report of Independent Expenditures Made and Contributions Received     - F6   48 Hour Notice of Contributions/Loans Received     - F7   Report of Communication Costs by Corporations and Membership Organizations     - F8   Debt Settlement Plan     - F9   24 Hour Notice of Disbursements for Electioneering Communications     - F13  Report of Donations Accepted for Inaugural Committee     - F99  Miscellaneous Text     - FRQ  Request for Additional Information 
     * @param {Array.<module:model/String>} [supportOpposeIndicator] Explains if the money was spent in order to support or oppose a candidate or candidates. (Coded S or O for support or oppose.) This indicator applies to independent expenditures and communication costs.
     * @param {String} [minImageNumber] Minium image number of the page where the schedule item is reported
     * @param {Array.<Number>} [cycle]  Filter records to only those that were applicable to a given two-year period.The cycle begins with an odd year and is named for its ending, even year. 
     * @param {Date} [maxFilingDate]  Selects all filings received before this date 
     * @param {Boolean} [sortNullOnly = false)] Toggle that filters out all rows having sort column that is non-null
     * @param {String} [lastSupportOpposeIndicator]  When sorting by `support_oppose_indicator`, this is populated with the `support_oppose_indicator` of the last result. However, you will need to pass the index of that last result to `last_index` to get the next page.' 
     * @param {Number} [lastIndex] Index of last result from previous page
     * @param {Number} [perPage = 20)] The number of results returned per page. Defaults to 20.
     * @param {Array.<String>} [candidateOfficeDistrict] Two-digit US House distirict of the office the candidate is running for. Presidential, Senate and House at-large candidates will have District 00.
     * @param {String} [lineNumber] Filter for form and line number using the following format: `FORM-LINENUMBER`.  For example an argument such as `F3X-16` would filter down to all entries from form `F3X` line number `16`.
     * @param {Array.<String>} [committeeId]  A unique identifier assigned to each committee or filer registered with the FEC. In general committee id's begin with the letter C which is followed by eight digits. 
     * @param {Array.<String>} [candidateParty] Three-letter code for the party affiliated with a candidate or committee. For example, DEM for Democratic Party and REP for Republican Party.
     * @param {String} [maxAmount] Filter for all amounts less than a value.
     * @param {Boolean} [mostRecent]  The report associated with the transaction is either new or is the most-recently filed amendment. Undetermined version (`null`) is always included. 
     * @param {Array.<module:model/String>} [candidateOffice] Federal office candidate runs for: H, S or P
     * @param {module:api/IndependentExpendituresApi~schedulesScheduleEGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ScheduleEPage}
     */
    schedulesScheduleEGet(apiKey, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'apiKey' is set
      if (apiKey === undefined || apiKey === null) {
        throw new Error("Missing the required parameter 'apiKey' when calling schedulesScheduleEGet");
      }

      let pathParams = {
      };
      let queryParams = {
        'last_expenditure_date': opts['lastExpenditureDate'],
        'max_image_number': opts['maxImageNumber'],
        'is_notice': this.apiClient.buildCollectionParam(opts['isNotice'], 'multi'),
        'payee_name': this.apiClient.buildCollectionParam(opts['payeeName'], 'multi'),
        'min_amount': opts['minAmount'],
        'candidate_id': this.apiClient.buildCollectionParam(opts['candidateId'], 'multi'),
        'sort_hide_null': opts['sortHideNull'],
        'last_office_total_ytd': opts['lastOfficeTotalYtd'],
        'sort': opts['sort'],
        'min_filing_date': opts['minFilingDate'],
        'q_spender': this.apiClient.buildCollectionParam(opts['qSpender'], 'multi'),
        'min_dissemination_date': opts['minDisseminationDate'],
        'candidate_office_state': this.apiClient.buildCollectionParam(opts['candidateOfficeState'], 'multi'),
        'sort_nulls_last': opts['sortNullsLast'],
        'last_expenditure_amount': opts['lastExpenditureAmount'],
        'image_number': this.apiClient.buildCollectionParam(opts['imageNumber'], 'multi'),
        'max_date': opts['maxDate'],
        'max_dissemination_date': opts['maxDisseminationDate'],
        'min_date': opts['minDate'],
        'filing_form': this.apiClient.buildCollectionParam(opts['filingForm'], 'multi'),
        'support_oppose_indicator': this.apiClient.buildCollectionParam(opts['supportOpposeIndicator'], 'multi'),
        'min_image_number': opts['minImageNumber'],
        'cycle': this.apiClient.buildCollectionParam(opts['cycle'], 'multi'),
        'max_filing_date': opts['maxFilingDate'],
        'sort_null_only': opts['sortNullOnly'],
        'last_support_oppose_indicator': opts['lastSupportOpposeIndicator'],
        'last_index': opts['lastIndex'],
        'per_page': opts['perPage'],
        'candidate_office_district': this.apiClient.buildCollectionParam(opts['candidateOfficeDistrict'], 'multi'),
        'line_number': opts['lineNumber'],
        'api_key': apiKey,
        'committee_id': this.apiClient.buildCollectionParam(opts['committeeId'], 'multi'),
        'candidate_party': this.apiClient.buildCollectionParam(opts['candidateParty'], 'multi'),
        'max_amount': opts['maxAmount'],
        'most_recent': opts['mostRecent'],
        'candidate_office': this.apiClient.buildCollectionParam(opts['candidateOffice'], 'multi')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyHeaderAuth', 'ApiKeyQueryAuth', 'apiKey'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ScheduleEPage;
      return this.apiClient.callApi(
        '/schedules/schedule_e/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the schedulesScheduleETotalsByCandidateGet operation.
     * @callback module:api/IndependentExpendituresApi~schedulesScheduleETotalsByCandidateGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/IETotalsByCandidatePage} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     *  Total independent expenditure on supported or opposed candidates by cycle or candidate election year. 
     * @param {String} apiKey  API key for https://api.data.gov. Get one at https://api.data.gov/signup. 
     * @param {Object} opts Optional parameters
     * @param {Boolean} [electionFull = true)] `True` indicates that full election period of a candidate. `False` indicates that two year election cycle.
     * @param {Array.<Number>} [cycle]  Filter records to only those that were applicable to a given two-year period.The cycle begins with an odd year and is named for its ending, even year. 
     * @param {Boolean} [sortNullsLast = false)] Toggle that sorts null values last
     * @param {Number} [page = 1)] For paginating through results, starting at page 1
     * @param {Boolean} [sortNullOnly = false)] Toggle that filters out all rows having sort column that is non-null
     * @param {Boolean} [sortHideNull = false)] Hide null values on sorted column(s).
     * @param {Array.<String>} [candidateId]  A unique identifier assigned to each candidate registered with the FEC. If a person runs for several offices, that person will have separate candidate IDs for each office. First character indicates office - [P]residential, [H]ouse, [S]enate]. Second character is the last digit of the two-year period the ID was created. Third and fourth is the candidate state. Presidential IDs don't have state. Fifth and sixth is the district when the candidate first ran. This does not change if the candidate/member's district changes during re-districting. Presidential IDs don't have districts. The rest is sequence. 
     * @param {Number} [perPage = 20)] The number of results returned per page. Defaults to 20.
     * @param {String} [sort] Provide a field to sort by. Use `-` for descending order. 
     * @param {module:api/IndependentExpendituresApi~schedulesScheduleETotalsByCandidateGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/IETotalsByCandidatePage}
     */
    schedulesScheduleETotalsByCandidateGet(apiKey, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'apiKey' is set
      if (apiKey === undefined || apiKey === null) {
        throw new Error("Missing the required parameter 'apiKey' when calling schedulesScheduleETotalsByCandidateGet");
      }

      let pathParams = {
      };
      let queryParams = {
        'api_key': apiKey,
        'election_full': opts['electionFull'],
        'cycle': this.apiClient.buildCollectionParam(opts['cycle'], 'multi'),
        'sort_nulls_last': opts['sortNullsLast'],
        'page': opts['page'],
        'sort_null_only': opts['sortNullOnly'],
        'sort_hide_null': opts['sortHideNull'],
        'candidate_id': this.apiClient.buildCollectionParam(opts['candidateId'], 'multi'),
        'per_page': opts['perPage'],
        'sort': opts['sort']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyHeaderAuth', 'ApiKeyQueryAuth', 'apiKey'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = IETotalsByCandidatePage;
      return this.apiClient.callApi(
        '/schedules/schedule_e/totals/by_candidate/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
