/**
 * OpenFEC
 * This application programming interface (API) allows you to explore the way candidates and committees fund their campaigns.    The Federal Election Commission (FEC) API is a RESTful web service supporting full-text and field-specific searches on FEC data. [Bulk downloads](https://www.fec.gov/data/advanced/?tab=bulk-data) are available on the current site. Information is tied to the underlying forms by file ID and image ID. Data is updated nightly.    There are a lot of data, and a good place to start is to use search to find interesting candidates and committees. Then, you can use their IDs to find report or line item details with the other endpoints. If you are interested in individual donors, check out contributor information in the `/schedule_a/` endpoints.    <b class=\"body\" id=\"getting_started_head\">Getting started with the openFEC API</b><br>    If you would like to use the FEC's API programmatically, you can sign up for your own API key using our form. Alternatively, you can still try out our API without an API key by using the web interface and using DEMO_KEY. Note that when you use the openFEC API you are subject to the [Terms of Service](https://github.com/fecgov/FEC/blob/master/TERMS-OF-SERVICE.md) and [Acceptable Use policy](https://github.com/fecgov/FEC/blob/master/ACCEPTABLE-USE-POLICY.md).    Signing up for an API key will enable you to place up to 1,000 calls an hour. Each call is limited to 100 results per page. You can email questions, comments or a request to get a key for 7,200 calls an hour (120 calls per minute) to <a href=\"mailto:APIinfo@fec.gov\">APIinfo@fec.gov</a>. You can also ask questions and discuss the data in a community led [group](https://groups.google.com/forum/#!forum/fec-data).    The model definitions and schema are available at [/swagger](/swagger/). This is useful for making wrappers and exploring the data.    A few restrictions limit the way you can use FEC data. For example, you canâ€™t use contributor lists for commercial purposes or to solicit donations. [Learn more here](https://www.fec.gov/updates/sale-or-use-contributor-information/).    [Inspect our source code](https://github.com/fecgov/openFEC). We welcome issues and pull requests!    <p><br></p> <h2 class=\"title\" id=\"signup_head\">Sign up for an API key</h2> <div id=\"apidatagov_signup\">Loading signup form...</div>
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import SchedulesScheduleCGetDefaultResponse from '../model/SchedulesScheduleCGetDefaultResponse';

/**
* Loans service.
* @module api/LoansApi
* @version 1.0
*/
export default class LoansApi {

    /**
    * Constructs a new LoansApi. 
    * @alias module:api/LoansApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the schedulesScheduleCGet operation.
     * @callback module:api/LoansApi~schedulesScheduleCGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SchedulesScheduleCGetDefaultResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     *  Schedule C shows all loans, endorsements and loan guarantees a committee receives or makes.  The committee continues to report the loan until it is repaid. 
     * @param {String} apiKey  API key for https://api.data.gov. Get one at https://api.data.gov/signup. 
     * @param {Object} opts Optional parameters
     * @param {Number} [minPaymentToDate]  Minimum payment to date 
     * @param {String} [maxImageNumber] Maxium image number of the page where the schedule item is reported
     * @param {String} [minImageNumber] Minium image number of the page where the schedule item is reported
     * @param {Date} [maxIncurredDate]  Maximum incurred date 
     * @param {Boolean} [sortNullOnly = false)] Toggle that filters out all rows having sort column that is non-null
     * @param {Number} [lastIndex] Index of last result from previous page
     * @param {Boolean} [sortHideNull = false)] Hide null values on sorted column(s).
     * @param {String} [minAmount]  Filter for all amounts greater than a value. 
     * @param {Number} [perPage = 20)] The number of results returned per page. Defaults to 20.
     * @param {Array.<String>} [loanSourceName] Source of the loan (i.e., bank loan, brokerage account, credit card, home equity line of credit,               other line of credit, or personal funds of the candidate
     * @param {String} [lineNumber]  Filter for form and line number using the following format: `FORM-LINENUMBER`.  For example an argument such as `F3X-16` would filter down to all entries from form `F3X` line number `16`. 
     * @param {String} [sort = '-incurred_date')] Provide a field to sort by. Use `-` for descending order. 
     * @param {Number} [maxPaymentToDate]  Maximum payment to date 
     * @param {Array.<String>} [candidateName] Name of candidate running for office
     * @param {Boolean} [sortNullsLast = true)] Toggle that sorts null values last
     * @param {Number} [page = 1)] For paginating through results, starting at page 1
     * @param {Array.<String>} [committeeId]  A unique identifier assigned to each committee or filer registered with the FEC. In general committee id's begin with the letter C which is followed by eight digits. 
     * @param {Array.<String>} [imageNumber]  An unique identifier for each page where the electronic or paper filing is reported. 
     * @param {Date} [minIncurredDate]  Minimum incurred date 
     * @param {String} [maxAmount]  Filter for all amounts less than a value. 
     * @param {module:api/LoansApi~schedulesScheduleCGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SchedulesScheduleCGetDefaultResponse}
     */
    schedulesScheduleCGet(apiKey, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'apiKey' is set
      if (apiKey === undefined || apiKey === null) {
        throw new Error("Missing the required parameter 'apiKey' when calling schedulesScheduleCGet");
      }

      let pathParams = {
      };
      let queryParams = {
        'min_payment_to_date': opts['minPaymentToDate'],
        'max_image_number': opts['maxImageNumber'],
        'min_image_number': opts['minImageNumber'],
        'max_incurred_date': opts['maxIncurredDate'],
        'sort_null_only': opts['sortNullOnly'],
        'last_index': opts['lastIndex'],
        'sort_hide_null': opts['sortHideNull'],
        'min_amount': opts['minAmount'],
        'per_page': opts['perPage'],
        'loan_source_name': this.apiClient.buildCollectionParam(opts['loanSourceName'], 'multi'),
        'line_number': opts['lineNumber'],
        'sort': opts['sort'],
        'max_payment_to_date': opts['maxPaymentToDate'],
        'candidate_name': this.apiClient.buildCollectionParam(opts['candidateName'], 'multi'),
        'api_key': apiKey,
        'sort_nulls_last': opts['sortNullsLast'],
        'page': opts['page'],
        'committee_id': this.apiClient.buildCollectionParam(opts['committeeId'], 'multi'),
        'image_number': this.apiClient.buildCollectionParam(opts['imageNumber'], 'multi'),
        'min_incurred_date': opts['minIncurredDate'],
        'max_amount': opts['maxAmount']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyHeaderAuth', 'ApiKeyQueryAuth', 'apiKey'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = SchedulesScheduleCGetDefaultResponse;
      return this.apiClient.callApi(
        '/schedules/schedule_c/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the schedulesScheduleCSubIdGet operation.
     * @callback module:api/LoansApi~schedulesScheduleCSubIdGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SchedulesScheduleCGetDefaultResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     *  Schedule C shows all loans, endorsements and loan guarantees a committee receives or makes.  The committee continues to report the loan until it is repaid. 
     * @param {String} apiKey  API key for https://api.data.gov. Get one at https://api.data.gov/signup. 
     * @param {String} subId 
     * @param {Object} opts Optional parameters
     * @param {Number} [page = 1)] For paginating through results, starting at page 1
     * @param {Boolean} [sortHideNull = false)] Hide null values on sorted column(s).
     * @param {Number} [perPage = 20)] The number of results returned per page. Defaults to 20.
     * @param {Boolean} [sortNullOnly = false)] Toggle that filters out all rows having sort column that is non-null
     * @param {String} [sort] Provide a field to sort by. Use `-` for descending order. 
     * @param {Boolean} [sortNullsLast = false)] Toggle that sorts null values last
     * @param {module:api/LoansApi~schedulesScheduleCSubIdGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SchedulesScheduleCGetDefaultResponse}
     */
    schedulesScheduleCSubIdGet(apiKey, subId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'apiKey' is set
      if (apiKey === undefined || apiKey === null) {
        throw new Error("Missing the required parameter 'apiKey' when calling schedulesScheduleCSubIdGet");
      }
      // verify the required parameter 'subId' is set
      if (subId === undefined || subId === null) {
        throw new Error("Missing the required parameter 'subId' when calling schedulesScheduleCSubIdGet");
      }

      let pathParams = {
        'sub_id': subId
      };
      let queryParams = {
        'page': opts['page'],
        'api_key': apiKey,
        'sort_hide_null': opts['sortHideNull'],
        'per_page': opts['perPage'],
        'sort_null_only': opts['sortNullOnly'],
        'sort': opts['sort'],
        'sort_nulls_last': opts['sortNullsLast']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyHeaderAuth', 'ApiKeyQueryAuth', 'apiKey'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = SchedulesScheduleCGetDefaultResponse;
      return this.apiClient.callApi(
        '/schedules/schedule_c/{sub_id}/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
