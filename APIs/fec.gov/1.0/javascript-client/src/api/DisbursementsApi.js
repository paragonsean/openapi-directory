/**
 * OpenFEC
 * This application programming interface (API) allows you to explore the way candidates and committees fund their campaigns.    The Federal Election Commission (FEC) API is a RESTful web service supporting full-text and field-specific searches on FEC data. [Bulk downloads](https://www.fec.gov/data/advanced/?tab=bulk-data) are available on the current site. Information is tied to the underlying forms by file ID and image ID. Data is updated nightly.    There are a lot of data, and a good place to start is to use search to find interesting candidates and committees. Then, you can use their IDs to find report or line item details with the other endpoints. If you are interested in individual donors, check out contributor information in the `/schedule_a/` endpoints.    <b class=\"body\" id=\"getting_started_head\">Getting started with the openFEC API</b><br>    If you would like to use the FEC's API programmatically, you can sign up for your own API key using our form. Alternatively, you can still try out our API without an API key by using the web interface and using DEMO_KEY. Note that when you use the openFEC API you are subject to the [Terms of Service](https://github.com/fecgov/FEC/blob/master/TERMS-OF-SERVICE.md) and [Acceptable Use policy](https://github.com/fecgov/FEC/blob/master/ACCEPTABLE-USE-POLICY.md).    Signing up for an API key will enable you to place up to 1,000 calls an hour. Each call is limited to 100 results per page. You can email questions, comments or a request to get a key for 7,200 calls an hour (120 calls per minute) to <a href=\"mailto:APIinfo@fec.gov\">APIinfo@fec.gov</a>. You can also ask questions and discuss the data in a community led [group](https://groups.google.com/forum/#!forum/fec-data).    The model definitions and schema are available at [/swagger](/swagger/). This is useful for making wrappers and exploring the data.    A few restrictions limit the way you can use FEC data. For example, you canâ€™t use contributor lists for commercial purposes or to solicit donations. [Learn more here](https://www.fec.gov/updates/sale-or-use-contributor-information/).    [Inspect our source code](https://github.com/fecgov/openFEC). We welcome issues and pull requests!    <p><br></p> <h2 class=\"title\" id=\"signup_head\">Sign up for an API key</h2> <div id=\"apidatagov_signup\">Loading signup form...</div>
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import ScheduleBByPurposePage from '../model/ScheduleBByPurposePage';
import ScheduleBByRecipientIDPage from '../model/ScheduleBByRecipientIDPage';
import ScheduleBByRecipientPage from '../model/ScheduleBByRecipientPage';
import ScheduleBEfilePage from '../model/ScheduleBEfilePage';
import ScheduleBPage from '../model/ScheduleBPage';

/**
* Disbursements service.
* @module api/DisbursementsApi
* @version 1.0
*/
export default class DisbursementsApi {

    /**
    * Constructs a new DisbursementsApi. 
    * @alias module:api/DisbursementsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the schedulesScheduleBByPurposeGet operation.
     * @callback module:api/DisbursementsApi~schedulesScheduleBByPurposeGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ScheduleBByPurposePage} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     *  Schedule B disbursements aggregated by disbursement purpose category. To avoid double counting, memoed items are not included. Purpose is a combination of transaction codes, category codes and disbursement description. Inspect the `disbursement_purpose` sql function within the migrations for more details. 
     * @param {String} apiKey  API key for https://api.data.gov. Get one at https://api.data.gov/signup. 
     * @param {Object} opts Optional parameters
     * @param {Array.<String>} [purpose] Disbursement purpose category
     * @param {Array.<Number>} [cycle]  Filter records to only those that were applicable to a given two-year period.The cycle begins with an odd year and is named for its ending, even year. 
     * @param {Boolean} [sortNullOnly = false)] Toggle that filters out all rows having sort column that is non-null
     * @param {Number} [page = 1)] For paginating through results, starting at page 1
     * @param {Array.<String>} [committeeId]  A unique identifier assigned to each committee or filer registered with the FEC. In general committee id's begin with the letter C which is followed by eight digits. 
     * @param {Boolean} [sortNullsLast = false)] Toggle that sorts null values last
     * @param {Boolean} [sortHideNull = false)] Hide null values on sorted column(s).
     * @param {Number} [perPage = 20)] The number of results returned per page. Defaults to 20.
     * @param {String} [sort] Provide a field to sort by. Use `-` for descending order. 
     * @param {module:api/DisbursementsApi~schedulesScheduleBByPurposeGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ScheduleBByPurposePage}
     */
    schedulesScheduleBByPurposeGet(apiKey, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'apiKey' is set
      if (apiKey === undefined || apiKey === null) {
        throw new Error("Missing the required parameter 'apiKey' when calling schedulesScheduleBByPurposeGet");
      }

      let pathParams = {
      };
      let queryParams = {
        'api_key': apiKey,
        'purpose': this.apiClient.buildCollectionParam(opts['purpose'], 'multi'),
        'cycle': this.apiClient.buildCollectionParam(opts['cycle'], 'multi'),
        'sort_null_only': opts['sortNullOnly'],
        'page': opts['page'],
        'committee_id': this.apiClient.buildCollectionParam(opts['committeeId'], 'multi'),
        'sort_nulls_last': opts['sortNullsLast'],
        'sort_hide_null': opts['sortHideNull'],
        'per_page': opts['perPage'],
        'sort': opts['sort']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyHeaderAuth', 'ApiKeyQueryAuth', 'apiKey'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ScheduleBByPurposePage;
      return this.apiClient.callApi(
        '/schedules/schedule_b/by_purpose/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the schedulesScheduleBByRecipientGet operation.
     * @callback module:api/DisbursementsApi~schedulesScheduleBByRecipientGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ScheduleBByRecipientPage} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     *  Schedule B disbursements aggregated by recipient name. To avoid double counting, memoed items are not included. 
     * @param {String} apiKey  API key for https://api.data.gov. Get one at https://api.data.gov/signup. 
     * @param {Object} opts Optional parameters
     * @param {Array.<String>} [recipientName] Name of the entity receiving the disbursement
     * @param {Array.<Number>} [cycle]  Filter records to only those that were applicable to a given two-year period.The cycle begins with an odd year and is named for its ending, even year. 
     * @param {Boolean} [sortNullOnly = false)] Toggle that filters out all rows having sort column that is non-null
     * @param {Number} [page = 1)] For paginating through results, starting at page 1
     * @param {Array.<String>} [committeeId]  A unique identifier assigned to each committee or filer registered with the FEC. In general committee id's begin with the letter C which is followed by eight digits. 
     * @param {Boolean} [sortNullsLast = false)] Toggle that sorts null values last
     * @param {Boolean} [sortHideNull = false)] Hide null values on sorted column(s).
     * @param {Number} [perPage = 20)] The number of results returned per page. Defaults to 20.
     * @param {String} [sort] Provide a field to sort by. Use `-` for descending order. 
     * @param {module:api/DisbursementsApi~schedulesScheduleBByRecipientGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ScheduleBByRecipientPage}
     */
    schedulesScheduleBByRecipientGet(apiKey, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'apiKey' is set
      if (apiKey === undefined || apiKey === null) {
        throw new Error("Missing the required parameter 'apiKey' when calling schedulesScheduleBByRecipientGet");
      }

      let pathParams = {
      };
      let queryParams = {
        'api_key': apiKey,
        'recipient_name': this.apiClient.buildCollectionParam(opts['recipientName'], 'multi'),
        'cycle': this.apiClient.buildCollectionParam(opts['cycle'], 'multi'),
        'sort_null_only': opts['sortNullOnly'],
        'page': opts['page'],
        'committee_id': this.apiClient.buildCollectionParam(opts['committeeId'], 'multi'),
        'sort_nulls_last': opts['sortNullsLast'],
        'sort_hide_null': opts['sortHideNull'],
        'per_page': opts['perPage'],
        'sort': opts['sort']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyHeaderAuth', 'ApiKeyQueryAuth', 'apiKey'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ScheduleBByRecipientPage;
      return this.apiClient.callApi(
        '/schedules/schedule_b/by_recipient/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the schedulesScheduleBByRecipientIdGet operation.
     * @callback module:api/DisbursementsApi~schedulesScheduleBByRecipientIdGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ScheduleBByRecipientIDPage} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     *  Schedule B disbursements aggregated by recipient committee ID, if applicable. To avoid double counting, memoed items are not included. 
     * @param {String} apiKey  API key for https://api.data.gov. Get one at https://api.data.gov/signup. 
     * @param {Object} opts Optional parameters
     * @param {Array.<Number>} [cycle]  Filter records to only those that were applicable to a given two-year period.The cycle begins with an odd year and is named for its ending, even year. 
     * @param {Boolean} [sortNullsLast = false)] Toggle that sorts null values last
     * @param {Number} [page = 1)] For paginating through results, starting at page 1
     * @param {Array.<String>} [committeeId]  A unique identifier assigned to each committee or filer registered with the FEC. In general committee id's begin with the letter C which is followed by eight digits. 
     * @param {Boolean} [sortNullOnly = false)] Toggle that filters out all rows having sort column that is non-null
     * @param {Array.<String>} [recipientId] The FEC identifier should be represented here if the entity receiving the disbursement is registered with the FEC.
     * @param {Boolean} [sortHideNull = false)] Hide null values on sorted column(s).
     * @param {Number} [perPage = 20)] The number of results returned per page. Defaults to 20.
     * @param {String} [sort] Provide a field to sort by. Use `-` for descending order. 
     * @param {module:api/DisbursementsApi~schedulesScheduleBByRecipientIdGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ScheduleBByRecipientIDPage}
     */
    schedulesScheduleBByRecipientIdGet(apiKey, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'apiKey' is set
      if (apiKey === undefined || apiKey === null) {
        throw new Error("Missing the required parameter 'apiKey' when calling schedulesScheduleBByRecipientIdGet");
      }

      let pathParams = {
      };
      let queryParams = {
        'api_key': apiKey,
        'cycle': this.apiClient.buildCollectionParam(opts['cycle'], 'multi'),
        'sort_nulls_last': opts['sortNullsLast'],
        'page': opts['page'],
        'committee_id': this.apiClient.buildCollectionParam(opts['committeeId'], 'multi'),
        'sort_null_only': opts['sortNullOnly'],
        'recipient_id': this.apiClient.buildCollectionParam(opts['recipientId'], 'multi'),
        'sort_hide_null': opts['sortHideNull'],
        'per_page': opts['perPage'],
        'sort': opts['sort']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyHeaderAuth', 'ApiKeyQueryAuth', 'apiKey'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ScheduleBByRecipientIDPage;
      return this.apiClient.callApi(
        '/schedules/schedule_b/by_recipient_id/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the schedulesScheduleBEfileGet operation.
     * @callback module:api/DisbursementsApi~schedulesScheduleBEfileGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ScheduleBEfilePage} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     *  Efiling endpoints provide real-time campaign finance data received from electronic filers. Efiling endpoints only contain the most recent four months of data and don't contain the processed and coded data that you can find on other endpoints. 
     * @param {String} apiKey  API key for https://api.data.gov. Get one at https://api.data.gov/signup. 
     * @param {Object} opts Optional parameters
     * @param {Date} [minDate] When sorting by `disbursement_date`, this is populated with the         `disbursement_date` of the last result. However, you will need to pass the index         of that last result to `last_index` to get the next page.
     * @param {Array.<String>} [disbursementDescription] Description of disbursement
     * @param {Boolean} [sortNullOnly = false)] Toggle that filters out all rows having sort column that is non-null
     * @param {Number} [page = 1)] For paginating through results, starting at page 1
     * @param {Array.<String>} [committeeId]  A unique identifier assigned to each committee or filer registered with the FEC. In general committee id's begin with the letter C which is followed by eight digits. 
     * @param {Boolean} [sortNullsLast = false)] Toggle that sorts null values last
     * @param {Array.<String>} [imageNumber]  An unique identifier for each page where the electronic or paper filing is reported. 
     * @param {Boolean} [sortHideNull = false)] Hide null values on sorted column(s).
     * @param {Date} [maxDate] When sorting by `disbursement_date`, this is populated with the         `disbursement_date` of the last result. However, you will need to pass the index         of that last result to `last_index` to get the next page.
     * @param {Number} [perPage = 20)] The number of results returned per page. Defaults to 20.
     * @param {String} [minAmount] Filter for all amounts less than a value.
     * @param {String} [maxAmount] Filter for all amounts less than a value.
     * @param {String} [sort = '-disbursement_date')] Provide a field to sort by. Use `-` for descending order. 
     * @param {Array.<String>} [recipientCity] City of recipient
     * @param {Array.<String>} [recipientState] State of recipient
     * @param {module:api/DisbursementsApi~schedulesScheduleBEfileGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ScheduleBEfilePage}
     */
    schedulesScheduleBEfileGet(apiKey, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'apiKey' is set
      if (apiKey === undefined || apiKey === null) {
        throw new Error("Missing the required parameter 'apiKey' when calling schedulesScheduleBEfileGet");
      }

      let pathParams = {
      };
      let queryParams = {
        'min_date': opts['minDate'],
        'api_key': apiKey,
        'disbursement_description': this.apiClient.buildCollectionParam(opts['disbursementDescription'], 'multi'),
        'sort_null_only': opts['sortNullOnly'],
        'page': opts['page'],
        'committee_id': this.apiClient.buildCollectionParam(opts['committeeId'], 'multi'),
        'sort_nulls_last': opts['sortNullsLast'],
        'image_number': this.apiClient.buildCollectionParam(opts['imageNumber'], 'multi'),
        'sort_hide_null': opts['sortHideNull'],
        'max_date': opts['maxDate'],
        'per_page': opts['perPage'],
        'min_amount': opts['minAmount'],
        'max_amount': opts['maxAmount'],
        'sort': opts['sort'],
        'recipient_city': this.apiClient.buildCollectionParam(opts['recipientCity'], 'multi'),
        'recipient_state': this.apiClient.buildCollectionParam(opts['recipientState'], 'multi')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyHeaderAuth', 'ApiKeyQueryAuth', 'apiKey'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ScheduleBEfilePage;
      return this.apiClient.callApi(
        '/schedules/schedule_b/efile/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the schedulesScheduleBGet operation.
     * @callback module:api/DisbursementsApi~schedulesScheduleBGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ScheduleBPage} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     *  Schedule B filings describe itemized disbursements. This data explains how committees and other filers spend their money. These figures are reported as part of forms F3, F3X and F3P.  The data is divided in two-year periods, called `two_year_transaction_period`, which is derived from the `report_year` submitted of the corresponding form. If no value is supplied, the results will default to the most recent two-year period that is named after the ending, even-numbered year.  Due to the large quantity of Schedule B filings, this endpoint is not paginated by page number. Instead, you can request the next page of results by adding the values in the `last_indexes` object from `pagination` to the URL of your last request. For example, when sorting by `disbursement_date`, you might receive a page of results with the following pagination information:  ``` pagination: {     pages: 965191,     per_page: 20,     count: 19303814,     last_indexes: {         last_index: \"230906248\",         last_disbursement_date: \"2014-07-04\"     } } ```  To fetch the next page of sorted results, append `last_index=230906248` and `last_disbursement_date=2014-07-04` to the URL.  We strongly advise paging through these results by using the sort indices (defaults to sort by disbursement date, e.g. `last_disbursement_date`), otherwise some resources may be unintentionally filtered out. This resource uses keyset pagination to improve query performance and these indices are required to properly page through this large dataset.  Note: because the Schedule B data includes many records, counts for large result sets are approximate; you will want to page through the records until no records are returned. 
     * @param {String} apiKey  API key for https://api.data.gov. Get one at https://api.data.gov/signup. 
     * @param {Object} opts Optional parameters
     * @param {Date} [minDate] Minimum date
     * @param {Array.<module:model/String>} [spenderCommitteeDesignation] The one-letter designation code of the organization:          - A authorized by a candidate          - J joint fundraising committee          - P principal campaign committee of a candidate          - U unauthorized          - B lobbyist/registrant PAC          - D leadership PAC 
     * @param {Array.<String>} [recipientCommitteeId] The FEC identifier should be represented here if the contributor is registered with the FEC.
     * @param {Date} [lastDisbursementDate] When sorting by `disbursement_date`, this is populated with the `disbursement_date` of the last result. However, you will need to pass the index of that last result to `last_index` to get the next page.
     * @param {String} [maxImageNumber] Maxium image number of the page where the schedule item is reported
     * @param {Array.<String>} [disbursementDescription] Description of disbursement
     * @param {Array.<String>} [disbursementPurposeCategory] Disbursement purpose category
     * @param {String} [minImageNumber] Minium image number of the page where the schedule item is reported
     * @param {Boolean} [sortNullOnly = false)] Toggle that filters out all rows having sort column that is non-null
     * @param {Number} [lastIndex] Index of last result from previous page
     * @param {Boolean} [sortHideNull = false)] Hide null values on sorted column(s).
     * @param {String} [minAmount] Filter for all amounts greater than a value.
     * @param {Number} [perPage = 20)] The number of results returned per page. Defaults to 20.
     * @param {String} [lineNumber] Filter for form and line number using the following format: `FORM-LINENUMBER`.  For example an argument such as `F3X-16` would filter down to all entries from form `F3X` line number `16`.
     * @param {String} [sort = '-disbursement_date')] Provide a field to sort by. Use `-` for descending order. 
     * @param {Array.<String>} [recipientCity] City of recipient
     * @param {Array.<module:model/String>} [spenderCommitteeType] The one-letter type code of the organization:         - C communication cost         - D delegate         - E electioneering communication         - H House         - I independent expenditure filer (not a committee)         - N PAC - nonqualified         - O independent expenditure-only (super PACs)         - P presidential         - Q PAC - qualified         - S Senate         - U single candidate independent expenditure         - V PAC with non-contribution account, nonqualified         - W PAC with non-contribution account, qualified         - X party, nonqualified         - Y party, qualified         - Z national party non-federal account 
     * @param {Number} [lastDisbursementAmount] When sorting by `disbursement_amount`, this is populated with the `disbursement_amount` of the last result.  However, you will need to pass the index of that last result to `last_index` to get the next page.
     * @param {Array.<module:model/String>} [spenderCommitteeOrgType] The one-letter code for the kind for organization:         - C corporation         - L labor organization         - M membership organization         - T trade association         - V cooperative         - W corporation without capital stock 
     * @param {Array.<Number>} [twoYearTransactionPeriod]  This is a two-year period that is derived from the year a transaction took place in the Itemized Schedule A and Schedule B tables. In cases where we have the date of the transaction (contribution_receipt_date in schedules/schedule_a, disbursement_date in schedules/schedule_b) the two_year_transaction_period is named after the ending, even-numbered year. If we do not have the date  of the transaction, we fall back to using the report year (report_year in both tables) instead,  making the same cycle adjustment as necessary. If no transaction year is specified, the results default to the most current cycle. 
     * @param {Array.<String>} [committeeId]  A unique identifier assigned to each committee or filer registered with the FEC. In general committee id's begin with the letter C which is followed by eight digits. 
     * @param {Array.<String>} [imageNumber]  An unique identifier for each page where the electronic or paper filing is reported. 
     * @param {Date} [maxDate] Maximum date
     * @param {Array.<String>} [recipientName] Name of the entity receiving the disbursement
     * @param {String} [maxAmount] Filter for all amounts less than a value.
     * @param {Array.<String>} [recipientState] State of recipient
     * @param {module:api/DisbursementsApi~schedulesScheduleBGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ScheduleBPage}
     */
    schedulesScheduleBGet(apiKey, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'apiKey' is set
      if (apiKey === undefined || apiKey === null) {
        throw new Error("Missing the required parameter 'apiKey' when calling schedulesScheduleBGet");
      }

      let pathParams = {
      };
      let queryParams = {
        'min_date': opts['minDate'],
        'spender_committee_designation': this.apiClient.buildCollectionParam(opts['spenderCommitteeDesignation'], 'multi'),
        'recipient_committee_id': this.apiClient.buildCollectionParam(opts['recipientCommitteeId'], 'multi'),
        'last_disbursement_date': opts['lastDisbursementDate'],
        'max_image_number': opts['maxImageNumber'],
        'disbursement_description': this.apiClient.buildCollectionParam(opts['disbursementDescription'], 'multi'),
        'disbursement_purpose_category': this.apiClient.buildCollectionParam(opts['disbursementPurposeCategory'], 'multi'),
        'min_image_number': opts['minImageNumber'],
        'sort_null_only': opts['sortNullOnly'],
        'last_index': opts['lastIndex'],
        'sort_hide_null': opts['sortHideNull'],
        'min_amount': opts['minAmount'],
        'per_page': opts['perPage'],
        'line_number': opts['lineNumber'],
        'sort': opts['sort'],
        'recipient_city': this.apiClient.buildCollectionParam(opts['recipientCity'], 'multi'),
        'spender_committee_type': this.apiClient.buildCollectionParam(opts['spenderCommitteeType'], 'multi'),
        'last_disbursement_amount': opts['lastDisbursementAmount'],
        'spender_committee_org_type': this.apiClient.buildCollectionParam(opts['spenderCommitteeOrgType'], 'multi'),
        'api_key': apiKey,
        'two_year_transaction_period': this.apiClient.buildCollectionParam(opts['twoYearTransactionPeriod'], 'multi'),
        'committee_id': this.apiClient.buildCollectionParam(opts['committeeId'], 'multi'),
        'image_number': this.apiClient.buildCollectionParam(opts['imageNumber'], 'multi'),
        'max_date': opts['maxDate'],
        'recipient_name': this.apiClient.buildCollectionParam(opts['recipientName'], 'multi'),
        'max_amount': opts['maxAmount'],
        'recipient_state': this.apiClient.buildCollectionParam(opts['recipientState'], 'multi')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyHeaderAuth', 'ApiKeyQueryAuth', 'apiKey'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ScheduleBPage;
      return this.apiClient.callApi(
        '/schedules/schedule_b/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the schedulesScheduleBSubIdGet operation.
     * @callback module:api/DisbursementsApi~schedulesScheduleBSubIdGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ScheduleBPage} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     *  Schedule B filings describe itemized disbursements. This data explains how committees and other filers spend their money. These figures are reported as part of forms F3, F3X and F3P.  The data is divided in two-year periods, called `two_year_transaction_period`, which is derived from the `report_year` submitted of the corresponding form. If no value is supplied, the results will default to the most recent two-year period that is named after the ending, even-numbered year.  Due to the large quantity of Schedule B filings, this endpoint is not paginated by page number. Instead, you can request the next page of results by adding the values in the `last_indexes` object from `pagination` to the URL of your last request. For example, when sorting by `disbursement_date`, you might receive a page of results with the following pagination information:  ``` pagination: {     pages: 965191,     per_page: 20,     count: 19303814,     last_indexes: {         last_index: \"230906248\",         last_disbursement_date: \"2014-07-04\"     } } ```  To fetch the next page of sorted results, append `last_index=230906248` and `last_disbursement_date=2014-07-04` to the URL.  We strongly advise paging through these results by using the sort indices (defaults to sort by disbursement date, e.g. `last_disbursement_date`), otherwise some resources may be unintentionally filtered out. This resource uses keyset pagination to improve query performance and these indices are required to properly page through this large dataset.  Note: because the Schedule B data includes many records, counts for large result sets are approximate; you will want to page through the records until no records are returned. 
     * @param {String} apiKey  API key for https://api.data.gov. Get one at https://api.data.gov/signup. 
     * @param {String} subId 
     * @param {Object} opts Optional parameters
     * @param {Date} [minDate] Minimum date
     * @param {Array.<module:model/String>} [spenderCommitteeDesignation] The one-letter designation code of the organization:          - A authorized by a candidate          - J joint fundraising committee          - P principal campaign committee of a candidate          - U unauthorized          - B lobbyist/registrant PAC          - D leadership PAC 
     * @param {Array.<String>} [recipientCommitteeId] The FEC identifier should be represented here if the contributor is registered with the FEC.
     * @param {Date} [lastDisbursementDate] When sorting by `disbursement_date`, this is populated with the `disbursement_date` of the last result. However, you will need to pass the index of that last result to `last_index` to get the next page.
     * @param {String} [maxImageNumber] Maxium image number of the page where the schedule item is reported
     * @param {Array.<String>} [disbursementDescription] Description of disbursement
     * @param {Array.<String>} [disbursementPurposeCategory] Disbursement purpose category
     * @param {String} [minImageNumber] Minium image number of the page where the schedule item is reported
     * @param {Boolean} [sortNullOnly = false)] Toggle that filters out all rows having sort column that is non-null
     * @param {Number} [lastIndex] Index of last result from previous page
     * @param {Boolean} [sortHideNull = false)] Hide null values on sorted column(s).
     * @param {String} [minAmount] Filter for all amounts greater than a value.
     * @param {Number} [perPage = 20)] The number of results returned per page. Defaults to 20.
     * @param {String} [lineNumber] Filter for form and line number using the following format: `FORM-LINENUMBER`.  For example an argument such as `F3X-16` would filter down to all entries from form `F3X` line number `16`.
     * @param {String} [sort = '-disbursement_date')] Provide a field to sort by. Use `-` for descending order. 
     * @param {Array.<String>} [recipientCity] City of recipient
     * @param {Array.<module:model/String>} [spenderCommitteeType] The one-letter type code of the organization:         - C communication cost         - D delegate         - E electioneering communication         - H House         - I independent expenditure filer (not a committee)         - N PAC - nonqualified         - O independent expenditure-only (super PACs)         - P presidential         - Q PAC - qualified         - S Senate         - U single candidate independent expenditure         - V PAC with non-contribution account, nonqualified         - W PAC with non-contribution account, qualified         - X party, nonqualified         - Y party, qualified         - Z national party non-federal account 
     * @param {Number} [lastDisbursementAmount] When sorting by `disbursement_amount`, this is populated with the `disbursement_amount` of the last result.  However, you will need to pass the index of that last result to `last_index` to get the next page.
     * @param {Array.<module:model/String>} [spenderCommitteeOrgType] The one-letter code for the kind for organization:         - C corporation         - L labor organization         - M membership organization         - T trade association         - V cooperative         - W corporation without capital stock 
     * @param {Array.<Number>} [twoYearTransactionPeriod]  This is a two-year period that is derived from the year a transaction took place in the Itemized Schedule A and Schedule B tables. In cases where we have the date of the transaction (contribution_receipt_date in schedules/schedule_a, disbursement_date in schedules/schedule_b) the two_year_transaction_period is named after the ending, even-numbered year. If we do not have the date  of the transaction, we fall back to using the report year (report_year in both tables) instead,  making the same cycle adjustment as necessary. If no transaction year is specified, the results default to the most current cycle. 
     * @param {Array.<String>} [committeeId]  A unique identifier assigned to each committee or filer registered with the FEC. In general committee id's begin with the letter C which is followed by eight digits. 
     * @param {Array.<String>} [imageNumber]  An unique identifier for each page where the electronic or paper filing is reported. 
     * @param {Date} [maxDate] Maximum date
     * @param {Array.<String>} [recipientName] Name of the entity receiving the disbursement
     * @param {String} [maxAmount] Filter for all amounts less than a value.
     * @param {Array.<String>} [recipientState] State of recipient
     * @param {module:api/DisbursementsApi~schedulesScheduleBSubIdGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ScheduleBPage}
     */
    schedulesScheduleBSubIdGet(apiKey, subId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'apiKey' is set
      if (apiKey === undefined || apiKey === null) {
        throw new Error("Missing the required parameter 'apiKey' when calling schedulesScheduleBSubIdGet");
      }
      // verify the required parameter 'subId' is set
      if (subId === undefined || subId === null) {
        throw new Error("Missing the required parameter 'subId' when calling schedulesScheduleBSubIdGet");
      }

      let pathParams = {
        'sub_id': subId
      };
      let queryParams = {
        'min_date': opts['minDate'],
        'spender_committee_designation': this.apiClient.buildCollectionParam(opts['spenderCommitteeDesignation'], 'multi'),
        'recipient_committee_id': this.apiClient.buildCollectionParam(opts['recipientCommitteeId'], 'multi'),
        'last_disbursement_date': opts['lastDisbursementDate'],
        'max_image_number': opts['maxImageNumber'],
        'disbursement_description': this.apiClient.buildCollectionParam(opts['disbursementDescription'], 'multi'),
        'disbursement_purpose_category': this.apiClient.buildCollectionParam(opts['disbursementPurposeCategory'], 'multi'),
        'min_image_number': opts['minImageNumber'],
        'sort_null_only': opts['sortNullOnly'],
        'last_index': opts['lastIndex'],
        'sort_hide_null': opts['sortHideNull'],
        'min_amount': opts['minAmount'],
        'per_page': opts['perPage'],
        'line_number': opts['lineNumber'],
        'sort': opts['sort'],
        'recipient_city': this.apiClient.buildCollectionParam(opts['recipientCity'], 'multi'),
        'spender_committee_type': this.apiClient.buildCollectionParam(opts['spenderCommitteeType'], 'multi'),
        'last_disbursement_amount': opts['lastDisbursementAmount'],
        'spender_committee_org_type': this.apiClient.buildCollectionParam(opts['spenderCommitteeOrgType'], 'multi'),
        'api_key': apiKey,
        'two_year_transaction_period': this.apiClient.buildCollectionParam(opts['twoYearTransactionPeriod'], 'multi'),
        'committee_id': this.apiClient.buildCollectionParam(opts['committeeId'], 'multi'),
        'image_number': this.apiClient.buildCollectionParam(opts['imageNumber'], 'multi'),
        'max_date': opts['maxDate'],
        'recipient_name': this.apiClient.buildCollectionParam(opts['recipientName'], 'multi'),
        'max_amount': opts['maxAmount'],
        'recipient_state': this.apiClient.buildCollectionParam(opts['recipientState'], 'multi')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyHeaderAuth', 'ApiKeyQueryAuth', 'apiKey'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ScheduleBPage;
      return this.apiClient.callApi(
        '/schedules/schedule_b/{sub_id}/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
