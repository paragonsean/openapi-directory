/**
 * OpenFEC
 * This application programming interface (API) allows you to explore the way candidates and committees fund their campaigns.    The Federal Election Commission (FEC) API is a RESTful web service supporting full-text and field-specific searches on FEC data. [Bulk downloads](https://www.fec.gov/data/advanced/?tab=bulk-data) are available on the current site. Information is tied to the underlying forms by file ID and image ID. Data is updated nightly.    There are a lot of data, and a good place to start is to use search to find interesting candidates and committees. Then, you can use their IDs to find report or line item details with the other endpoints. If you are interested in individual donors, check out contributor information in the `/schedule_a/` endpoints.    <b class=\"body\" id=\"getting_started_head\">Getting started with the openFEC API</b><br>    If you would like to use the FEC's API programmatically, you can sign up for your own API key using our form. Alternatively, you can still try out our API without an API key by using the web interface and using DEMO_KEY. Note that when you use the openFEC API you are subject to the [Terms of Service](https://github.com/fecgov/FEC/blob/master/TERMS-OF-SERVICE.md) and [Acceptable Use policy](https://github.com/fecgov/FEC/blob/master/ACCEPTABLE-USE-POLICY.md).    Signing up for an API key will enable you to place up to 1,000 calls an hour. Each call is limited to 100 results per page. You can email questions, comments or a request to get a key for 7,200 calls an hour (120 calls per minute) to <a href=\"mailto:APIinfo@fec.gov\">APIinfo@fec.gov</a>. You can also ask questions and discuss the data in a community led [group](https://groups.google.com/forum/#!forum/fec-data).    The model definitions and schema are available at [/swagger](/swagger/). This is useful for making wrappers and exploring the data.    A few restrictions limit the way you can use FEC data. For example, you canâ€™t use contributor lists for commercial purposes or to solicit donations. [Learn more here](https://www.fec.gov/updates/sale-or-use-contributor-information/).    [Inspect our source code](https://github.com/fecgov/openFEC). We welcome issues and pull requests!    <p><br></p> <h2 class=\"title\" id=\"signup_head\">Sign up for an API key</h2> <div id=\"apidatagov_signup\">Loading signup form...</div>
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import CandidateDetailPage from '../model/CandidateDetailPage';
import CandidateHistoryPage from '../model/CandidateHistoryPage';
import CandidateHistoryTotalPage from '../model/CandidateHistoryTotalPage';
import CandidatePage from '../model/CandidatePage';
import CandidateTotalAggregatePage from '../model/CandidateTotalAggregatePage';
import CommitteeTotalsPage from '../model/CommitteeTotalsPage';
import TotalByOfficeByPartyPage from '../model/TotalByOfficeByPartyPage';
import TotalByOfficePage from '../model/TotalByOfficePage';

/**
* Candidate service.
* @module api/CandidateApi
* @version 1.0
*/
export default class CandidateApi {

    /**
    * Constructs a new CandidateApi. 
    * @alias module:api/CandidateApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the candidateCandidateIdGet operation.
     * @callback module:api/CandidateApi~candidateCandidateIdGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CandidateDetailPage} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     *  This endpoint is useful for finding detailed information about a particular candidate. Use the `candidate_id` to find the most recent information about that candidate. 
     * @param {String} apiKey  API key for https://api.data.gov. Get one at https://api.data.gov/signup. 
     * @param {String} candidateId  A unique identifier assigned to each candidate registered with the FEC. If a person runs for several offices, that person will have separate candidate IDs for each office. First character indicates office - [P]residential, [H]ouse, [S]enate]. Second character is the last digit of the two-year period the ID was created. Third and fourth is the candidate state. Presidential IDs don't have state. Fifth and sixth is the district when the candidate first ran. This does not change if the candidate/member's district changes during re-districting. Presidential IDs don't have districts. The rest is sequence. 
     * @param {Object} opts Optional parameters
     * @param {Array.<module:model/String>} [incumbentChallenge] One-letter code ('I', 'C', 'O') explaining if the candidate is an incumbent, a challenger, or if the seat is open.
     * @param {Array.<Number>} [cycle]  Two-year election cycle in which a candidate runs for office. Calculated from Form 2. The cycle begins with an odd year and is named for its ending, even year. This cycle follows the traditional house election cycle and subdivides the presidential and Senate elections into comparable two-year blocks. To retrieve data for the entire four years of a presidential term or six years of a senatorial term, you will need the `election_full` flag. 
     * @param {Boolean} [sortNullOnly = false)] Toggle that filters out all rows having sort column that is non-null
     * @param {Boolean} [federalFundsFlag] A boolean the describes if a presidential candidate has accepted federal funds. The flag will be false for House and Senate candidates.
     * @param {Boolean} [sortHideNull = false)] Hide null values on sorted column(s).
     * @param {Array.<String>} [name] Name (candidate or committee) to search for. Alias for 'q'.
     * @param {Number} [perPage = 20)] The number of results returned per page. Defaults to 20.
     * @param {Array.<Number>} [electionYear] Year of election
     * @param {Array.<module:model/String>} [office] Federal office candidate runs for: H, S or P
     * @param {String} [sort = 'name')] Provide a field to sort by. Use `-` for descending order. 
     * @param {Array.<module:model/String>} [candidateStatus] One-letter code explaining if the candidate is:         - C present candidate         - F future candidate         - N not yet a candidate         - P prior candidate 
     * @param {Array.<String>} [district] Two-digit US House distirict of the office the candidate is running for. Presidential, Senate and House at-large candidates will have District 00.
     * @param {Boolean} [hasRaisedFunds] A boolean that describes if a candidate's committee has ever received any receipts for their campaign for this particular office. (Candidates have separate candidate IDs for each office.)
     * @param {Array.<String>} [party] Three-letter code for the party affiliated with a candidate or committee. For example, DEM for Democratic Party and REP for Republican Party.
     * @param {Boolean} [sortNullsLast = false)] Toggle that sorts null values last
     * @param {Number} [page = 1)] For paginating through results, starting at page 1
     * @param {Array.<String>} [state] US state or territory where a candidate runs for office
     * @param {String} [year] Retrieve records pertaining to a particular election year. The list of election years is based on a candidate filing a statement of candidacy (F2) for that year.
     * @param {module:api/CandidateApi~candidateCandidateIdGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CandidateDetailPage}
     */
    candidateCandidateIdGet(apiKey, candidateId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'apiKey' is set
      if (apiKey === undefined || apiKey === null) {
        throw new Error("Missing the required parameter 'apiKey' when calling candidateCandidateIdGet");
      }
      // verify the required parameter 'candidateId' is set
      if (candidateId === undefined || candidateId === null) {
        throw new Error("Missing the required parameter 'candidateId' when calling candidateCandidateIdGet");
      }

      let pathParams = {
        'candidate_id': candidateId
      };
      let queryParams = {
        'incumbent_challenge': this.apiClient.buildCollectionParam(opts['incumbentChallenge'], 'multi'),
        'cycle': this.apiClient.buildCollectionParam(opts['cycle'], 'multi'),
        'sort_null_only': opts['sortNullOnly'],
        'federal_funds_flag': opts['federalFundsFlag'],
        'sort_hide_null': opts['sortHideNull'],
        'name': this.apiClient.buildCollectionParam(opts['name'], 'multi'),
        'per_page': opts['perPage'],
        'election_year': this.apiClient.buildCollectionParam(opts['electionYear'], 'multi'),
        'office': this.apiClient.buildCollectionParam(opts['office'], 'multi'),
        'sort': opts['sort'],
        'candidate_status': this.apiClient.buildCollectionParam(opts['candidateStatus'], 'multi'),
        'district': this.apiClient.buildCollectionParam(opts['district'], 'multi'),
        'api_key': apiKey,
        'has_raised_funds': opts['hasRaisedFunds'],
        'party': this.apiClient.buildCollectionParam(opts['party'], 'multi'),
        'sort_nulls_last': opts['sortNullsLast'],
        'page': opts['page'],
        'state': this.apiClient.buildCollectionParam(opts['state'], 'multi'),
        'year': opts['year']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyHeaderAuth', 'ApiKeyQueryAuth', 'apiKey'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = CandidateDetailPage;
      return this.apiClient.callApi(
        '/candidate/{candidate_id}/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the candidateCandidateIdHistoryCycleGet operation.
     * @callback module:api/CandidateApi~candidateCandidateIdHistoryCycleGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CandidateHistoryPage} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     *  Find out a candidate's characteristics over time. This is particularly useful if the candidate runs for the same office in different districts or you want to know more about a candidate's previous races.  This information is organized by `candidate_id`, so it won't help you find a candidate who ran for different offices over time; candidates get a new ID for each office. 
     * @param {String} apiKey  API key for https://api.data.gov. Get one at https://api.data.gov/signup. 
     * @param {Number} cycle  Two-year election cycle in which a candidate runs for office. Calculated from Form 2. The cycle begins with an odd year and is named for its ending, even year. This cycle follows the traditional house election cycle and subdivides the presidential and Senate elections into comparable two-year blocks. To retrieve data for the entire four years of a presidential term or six years of a senatorial term, you will need the `election_full` flag. 
     * @param {String} candidateId  A unique identifier assigned to each candidate registered with the FEC. If a person runs for several offices, that person will have separate candidate IDs for each office. First character indicates office - [P]residential, [H]ouse, [S]enate]. Second character is the last digit of the two-year period the ID was created. Third and fourth is the candidate state. Presidential IDs don't have state. Fifth and sixth is the district when the candidate first ran. This does not change if the candidate/member's district changes during re-districting. Presidential IDs don't have districts. The rest is sequence. 
     * @param {Object} opts Optional parameters
     * @param {Number} [page = 1)] For paginating through results, starting at page 1
     * @param {Boolean} [sortHideNull = false)] Hide null values on sorted column(s).
     * @param {Boolean} [electionFull = true)] `True` indicates that full election period of a candidate. `False` indicates that two year election cycle.
     * @param {Number} [perPage = 20)] The number of results returned per page. Defaults to 20.
     * @param {Boolean} [sortNullOnly = false)] Toggle that filters out all rows having sort column that is non-null
     * @param {String} [sort = '-two_year_period')] Provide a field to sort by. Use `-` for descending order. 
     * @param {Boolean} [sortNullsLast = false)] Toggle that sorts null values last
     * @param {module:api/CandidateApi~candidateCandidateIdHistoryCycleGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CandidateHistoryPage}
     */
    candidateCandidateIdHistoryCycleGet(apiKey, cycle, candidateId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'apiKey' is set
      if (apiKey === undefined || apiKey === null) {
        throw new Error("Missing the required parameter 'apiKey' when calling candidateCandidateIdHistoryCycleGet");
      }
      // verify the required parameter 'cycle' is set
      if (cycle === undefined || cycle === null) {
        throw new Error("Missing the required parameter 'cycle' when calling candidateCandidateIdHistoryCycleGet");
      }
      // verify the required parameter 'candidateId' is set
      if (candidateId === undefined || candidateId === null) {
        throw new Error("Missing the required parameter 'candidateId' when calling candidateCandidateIdHistoryCycleGet");
      }

      let pathParams = {
        'cycle': cycle,
        'candidate_id': candidateId
      };
      let queryParams = {
        'page': opts['page'],
        'api_key': apiKey,
        'sort_hide_null': opts['sortHideNull'],
        'election_full': opts['electionFull'],
        'per_page': opts['perPage'],
        'sort_null_only': opts['sortNullOnly'],
        'sort': opts['sort'],
        'sort_nulls_last': opts['sortNullsLast']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyHeaderAuth', 'ApiKeyQueryAuth', 'apiKey'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = CandidateHistoryPage;
      return this.apiClient.callApi(
        '/candidate/{candidate_id}/history/{cycle}/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the candidateCandidateIdHistoryGet operation.
     * @callback module:api/CandidateApi~candidateCandidateIdHistoryGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CandidateHistoryPage} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     *  Find out a candidate's characteristics over time. This is particularly useful if the candidate runs for the same office in different districts or you want to know more about a candidate's previous races.  This information is organized by `candidate_id`, so it won't help you find a candidate who ran for different offices over time; candidates get a new ID for each office. 
     * @param {String} apiKey  API key for https://api.data.gov. Get one at https://api.data.gov/signup. 
     * @param {String} candidateId  A unique identifier assigned to each candidate registered with the FEC. If a person runs for several offices, that person will have separate candidate IDs for each office. First character indicates office - [P]residential, [H]ouse, [S]enate]. Second character is the last digit of the two-year period the ID was created. Third and fourth is the candidate state. Presidential IDs don't have state. Fifth and sixth is the district when the candidate first ran. This does not change if the candidate/member's district changes during re-districting. Presidential IDs don't have districts. The rest is sequence. 
     * @param {Object} opts Optional parameters
     * @param {Number} [page = 1)] For paginating through results, starting at page 1
     * @param {Boolean} [sortHideNull = false)] Hide null values on sorted column(s).
     * @param {Boolean} [electionFull = true)] `True` indicates that full election period of a candidate. `False` indicates that two year election cycle.
     * @param {Number} [perPage = 20)] The number of results returned per page. Defaults to 20.
     * @param {Boolean} [sortNullOnly = false)] Toggle that filters out all rows having sort column that is non-null
     * @param {String} [sort = '-two_year_period')] Provide a field to sort by. Use `-` for descending order. 
     * @param {Boolean} [sortNullsLast = false)] Toggle that sorts null values last
     * @param {module:api/CandidateApi~candidateCandidateIdHistoryGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CandidateHistoryPage}
     */
    candidateCandidateIdHistoryGet(apiKey, candidateId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'apiKey' is set
      if (apiKey === undefined || apiKey === null) {
        throw new Error("Missing the required parameter 'apiKey' when calling candidateCandidateIdHistoryGet");
      }
      // verify the required parameter 'candidateId' is set
      if (candidateId === undefined || candidateId === null) {
        throw new Error("Missing the required parameter 'candidateId' when calling candidateCandidateIdHistoryGet");
      }

      let pathParams = {
        'candidate_id': candidateId
      };
      let queryParams = {
        'page': opts['page'],
        'api_key': apiKey,
        'sort_hide_null': opts['sortHideNull'],
        'election_full': opts['electionFull'],
        'per_page': opts['perPage'],
        'sort_null_only': opts['sortNullOnly'],
        'sort': opts['sort'],
        'sort_nulls_last': opts['sortNullsLast']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyHeaderAuth', 'ApiKeyQueryAuth', 'apiKey'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = CandidateHistoryPage;
      return this.apiClient.callApi(
        '/candidate/{candidate_id}/history/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the candidateCandidateIdTotalsGet operation.
     * @callback module:api/CandidateApi~candidateCandidateIdTotalsGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CommitteeTotalsPage} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     *  This endpoint provides information about a committee's Form 3, Form 3X, or Form 3P financial reports, which are aggregated by two-year period. We refer to two-year periods as a `cycle`.  The cycle is named after the even-numbered year and includes the year before it. To obtain totals from 2013 and 2014, you would use 2014. In odd-numbered years, the current cycle is the next year â€” for example, in 2015, the current cycle is 2016.  For presidential and Senate candidates, multiple two-year cycles exist between elections.  
     * @param {String} apiKey  API key for https://api.data.gov. Get one at https://api.data.gov/signup. 
     * @param {String} candidateId  A unique identifier assigned to each candidate registered with the FEC. If a person runs for several offices, that person will have separate candidate IDs for each office. First character indicates office - [P]residential, [H]ouse, [S]enate]. Second character is the last digit of the two-year period the ID was created. Third and fourth is the candidate state. Presidential IDs don't have state. Fifth and sixth is the district when the candidate first ran. This does not change if the candidate/member's district changes during re-districting. Presidential IDs don't have districts. The rest is sequence. 
     * @param {Object} opts Optional parameters
     * @param {Boolean} [electionFull] `True` indicates that full election period of a candidate. `False` indicates that two year election cycle.
     * @param {Array.<Number>} [cycle]  Filter records to only those that were applicable to a given two-year period.The cycle begins with an odd year and is named for its ending, even year. 
     * @param {Boolean} [sortNullsLast = false)] Toggle that sorts null values last
     * @param {Number} [page = 1)] For paginating through results, starting at page 1
     * @param {Boolean} [sortNullOnly = false)] Toggle that filters out all rows having sort column that is non-null
     * @param {Boolean} [sortHideNull = false)] Hide null values on sorted column(s).
     * @param {Number} [perPage = 20)] The number of results returned per page. Defaults to 20.
     * @param {String} [sort = '-cycle')] Provide a field to sort by. Use `-` for descending order. 
     * @param {module:api/CandidateApi~candidateCandidateIdTotalsGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CommitteeTotalsPage}
     */
    candidateCandidateIdTotalsGet(apiKey, candidateId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'apiKey' is set
      if (apiKey === undefined || apiKey === null) {
        throw new Error("Missing the required parameter 'apiKey' when calling candidateCandidateIdTotalsGet");
      }
      // verify the required parameter 'candidateId' is set
      if (candidateId === undefined || candidateId === null) {
        throw new Error("Missing the required parameter 'candidateId' when calling candidateCandidateIdTotalsGet");
      }

      let pathParams = {
        'candidate_id': candidateId
      };
      let queryParams = {
        'api_key': apiKey,
        'election_full': opts['electionFull'],
        'cycle': this.apiClient.buildCollectionParam(opts['cycle'], 'multi'),
        'sort_nulls_last': opts['sortNullsLast'],
        'page': opts['page'],
        'sort_null_only': opts['sortNullOnly'],
        'sort_hide_null': opts['sortHideNull'],
        'per_page': opts['perPage'],
        'sort': opts['sort']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyHeaderAuth', 'ApiKeyQueryAuth', 'apiKey'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = CommitteeTotalsPage;
      return this.apiClient.callApi(
        '/candidate/{candidate_id}/totals/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the candidatesGet operation.
     * @callback module:api/CandidateApi~candidatesGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CandidatePage} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     *  Fetch basic information about candidates, and use parameters to filter results to the candidates you're looking for.  Each result reflects a unique FEC candidate ID. That ID is particular to the candidate for a particular office sought. If a candidate runs for the same office multiple times, the ID stays the same. If the same person runs for another office â€” for example, a House candidate runs for a Senate office â€” that candidate will get a unique ID for each office. 
     * @param {String} apiKey  API key for https://api.data.gov. Get one at https://api.data.gov/signup. 
     * @param {Object} opts Optional parameters
     * @param {Array.<module:model/String>} [incumbentChallenge] One-letter code ('I', 'C', 'O') explaining if the candidate is an incumbent, a challenger, or if the seat is open.
     * @param {Date} [minFirstFileDate] Selects all candidates whose first filing was received by the FEC after this date.
     * @param {Array.<String>} [q] Name of candidate running for office
     * @param {Array.<Number>} [cycle]  Two-year election cycle in which a candidate runs for office. Calculated from Form 2. The cycle begins with an odd year and is named for its ending, even year. This cycle follows the traditional house election cycle and subdivides the presidential and Senate elections into comparable two-year blocks. To retrieve data for the entire four years of a presidential term or six years of a senatorial term, you will need the `election_full` flag. 
     * @param {Boolean} [sortNullOnly = false)] Toggle that filters out all rows having sort column that is non-null
     * @param {Boolean} [federalFundsFlag] A boolean the describes if a presidential candidate has accepted federal funds. The flag will be false for House and Senate candidates.
     * @param {Boolean} [sortHideNull = false)] Hide null values on sorted column(s).
     * @param {Array.<String>} [candidateId]  A unique identifier assigned to each candidate registered with the FEC. If a person runs for several offices, that person will have separate candidate IDs for each office. First character indicates office - [P]residential, [H]ouse, [S]enate]. Second character is the last digit of the two-year period the ID was created. Third and fourth is the candidate state. Presidential IDs don't have state. Fifth and sixth is the district when the candidate first ran. This does not change if the candidate/member's district changes during re-districting. Presidential IDs don't have districts. The rest is sequence. 
     * @param {Array.<String>} [name] Name (candidate or committee) to search for. Alias for 'q'.
     * @param {Number} [perPage = 20)] The number of results returned per page. Defaults to 20.
     * @param {Array.<Number>} [electionYear] Year of election
     * @param {Array.<module:model/String>} [office] Federal office candidate runs for: H, S or P
     * @param {String} [sort = 'name')] Provide a field to sort by. Use `-` for descending order. 
     * @param {Array.<module:model/String>} [candidateStatus] One-letter code explaining if the candidate is:         - C present candidate         - F future candidate         - N not yet a candidate         - P prior candidate 
     * @param {Date} [maxFirstFileDate] Selects all candidates whose first filing was received by the FEC before this date.
     * @param {Array.<String>} [district] Two-digit US House distirict of the office the candidate is running for. Presidential, Senate and House at-large candidates will have District 00.
     * @param {Boolean} [hasRaisedFunds] A boolean that describes if a candidate's committee has ever received any receipts for their campaign for this particular office. (Candidates have separate candidate IDs for each office.)
     * @param {Array.<String>} [party] Three-letter code for the party affiliated with a candidate or committee. For example, DEM for Democratic Party and REP for Republican Party.
     * @param {Boolean} [sortNullsLast = false)] Toggle that sorts null values last
     * @param {Boolean} [isActiveCandidate]  Candidates who are actively seeking office. If no value is specified, all candidates are returned. When True is specified, only active candidates are returned. When False is specified, only inactive candidates are returned. 
     * @param {Number} [page = 1)] For paginating through results, starting at page 1
     * @param {Array.<String>} [state] US state or territory where a candidate runs for office
     * @param {String} [year] Retrieve records pertaining to a particular election year. The list of election years is based on a candidate filing a statement of candidacy (F2) for that year.
     * @param {module:api/CandidateApi~candidatesGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CandidatePage}
     */
    candidatesGet(apiKey, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'apiKey' is set
      if (apiKey === undefined || apiKey === null) {
        throw new Error("Missing the required parameter 'apiKey' when calling candidatesGet");
      }

      let pathParams = {
      };
      let queryParams = {
        'incumbent_challenge': this.apiClient.buildCollectionParam(opts['incumbentChallenge'], 'multi'),
        'min_first_file_date': opts['minFirstFileDate'],
        'q': this.apiClient.buildCollectionParam(opts['q'], 'multi'),
        'cycle': this.apiClient.buildCollectionParam(opts['cycle'], 'multi'),
        'sort_null_only': opts['sortNullOnly'],
        'federal_funds_flag': opts['federalFundsFlag'],
        'sort_hide_null': opts['sortHideNull'],
        'candidate_id': this.apiClient.buildCollectionParam(opts['candidateId'], 'multi'),
        'name': this.apiClient.buildCollectionParam(opts['name'], 'multi'),
        'per_page': opts['perPage'],
        'election_year': this.apiClient.buildCollectionParam(opts['electionYear'], 'multi'),
        'office': this.apiClient.buildCollectionParam(opts['office'], 'multi'),
        'sort': opts['sort'],
        'candidate_status': this.apiClient.buildCollectionParam(opts['candidateStatus'], 'multi'),
        'max_first_file_date': opts['maxFirstFileDate'],
        'district': this.apiClient.buildCollectionParam(opts['district'], 'multi'),
        'api_key': apiKey,
        'has_raised_funds': opts['hasRaisedFunds'],
        'party': this.apiClient.buildCollectionParam(opts['party'], 'multi'),
        'sort_nulls_last': opts['sortNullsLast'],
        'is_active_candidate': opts['isActiveCandidate'],
        'page': opts['page'],
        'state': this.apiClient.buildCollectionParam(opts['state'], 'multi'),
        'year': opts['year']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyHeaderAuth', 'ApiKeyQueryAuth', 'apiKey'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = CandidatePage;
      return this.apiClient.callApi(
        '/candidates/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the candidatesSearchGet operation.
     * @callback module:api/CandidateApi~candidatesSearchGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CandidatePage} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     *  Fetch basic information about candidates and their principal committees.  Each result reflects a unique FEC candidate ID. That ID is assigned to the candidate for a particular office sought. If a candidate runs for the same office over time, that ID stays the same. If the same person runs for multiple offices â€” for example, a House candidate runs for a Senate office â€” that candidate will get a unique ID for each office.  The candidate endpoints primarily use data from FEC registration [Form 1](https://www.fec.gov/pdf/forms/fecfrm1.pdf) for committee information and [Form 2](https://www.fec.gov/pdf/forms/fecfrm2.pdf) for candidate information. 
     * @param {String} apiKey  API key for https://api.data.gov. Get one at https://api.data.gov/signup. 
     * @param {Object} opts Optional parameters
     * @param {Array.<module:model/String>} [incumbentChallenge] One-letter code ('I', 'C', 'O') explaining if the candidate is an incumbent, a challenger, or if the seat is open.
     * @param {Date} [minFirstFileDate] Selects all candidates whose first filing was received by the FEC after this date.
     * @param {Array.<String>} [q] Name of candidate running for office
     * @param {Array.<Number>} [cycle]  Two-year election cycle in which a candidate runs for office. Calculated from Form 2. The cycle begins with an odd year and is named for its ending, even year. This cycle follows the traditional house election cycle and subdivides the presidential and Senate elections into comparable two-year blocks. To retrieve data for the entire four years of a presidential term or six years of a senatorial term, you will need the `election_full` flag. 
     * @param {Boolean} [sortNullOnly = false)] Toggle that filters out all rows having sort column that is non-null
     * @param {Boolean} [federalFundsFlag] A boolean the describes if a presidential candidate has accepted federal funds. The flag will be false for House and Senate candidates.
     * @param {Boolean} [sortHideNull = false)] Hide null values on sorted column(s).
     * @param {Array.<String>} [candidateId]  A unique identifier assigned to each candidate registered with the FEC. If a person runs for several offices, that person will have separate candidate IDs for each office. First character indicates office - [P]residential, [H]ouse, [S]enate]. Second character is the last digit of the two-year period the ID was created. Third and fourth is the candidate state. Presidential IDs don't have state. Fifth and sixth is the district when the candidate first ran. This does not change if the candidate/member's district changes during re-districting. Presidential IDs don't have districts. The rest is sequence. 
     * @param {Array.<String>} [name] Name (candidate or committee) to search for. Alias for 'q'.
     * @param {Number} [perPage = 20)] The number of results returned per page. Defaults to 20.
     * @param {Array.<Number>} [electionYear] Year of election
     * @param {Array.<module:model/String>} [office] Federal office candidate runs for: H, S or P
     * @param {String} [sort = 'name')] Provide a field to sort by. Use `-` for descending order. 
     * @param {Array.<module:model/String>} [candidateStatus] One-letter code explaining if the candidate is:         - C present candidate         - F future candidate         - N not yet a candidate         - P prior candidate 
     * @param {Date} [maxFirstFileDate] Selects all candidates whose first filing was received by the FEC before this date.
     * @param {Array.<String>} [district] Two-digit US House distirict of the office the candidate is running for. Presidential, Senate and House at-large candidates will have District 00.
     * @param {Boolean} [hasRaisedFunds] A boolean that describes if a candidate's committee has ever received any receipts for their campaign for this particular office. (Candidates have separate candidate IDs for each office.)
     * @param {Array.<String>} [party] Three-letter code for the party affiliated with a candidate or committee. For example, DEM for Democratic Party and REP for Republican Party.
     * @param {Boolean} [sortNullsLast = false)] Toggle that sorts null values last
     * @param {Boolean} [isActiveCandidate]  Candidates who are actively seeking office. If no value is specified, all candidates are returned. When True is specified, only active candidates are returned. When False is specified, only inactive candidates are returned. 
     * @param {Number} [page = 1)] For paginating through results, starting at page 1
     * @param {Array.<String>} [state] US state or territory where a candidate runs for office
     * @param {String} [year] Retrieve records pertaining to a particular election year. The list of election years is based on a candidate filing a statement of candidacy (F2) for that year.
     * @param {module:api/CandidateApi~candidatesSearchGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CandidatePage}
     */
    candidatesSearchGet(apiKey, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'apiKey' is set
      if (apiKey === undefined || apiKey === null) {
        throw new Error("Missing the required parameter 'apiKey' when calling candidatesSearchGet");
      }

      let pathParams = {
      };
      let queryParams = {
        'incumbent_challenge': this.apiClient.buildCollectionParam(opts['incumbentChallenge'], 'multi'),
        'min_first_file_date': opts['minFirstFileDate'],
        'q': this.apiClient.buildCollectionParam(opts['q'], 'multi'),
        'cycle': this.apiClient.buildCollectionParam(opts['cycle'], 'multi'),
        'sort_null_only': opts['sortNullOnly'],
        'federal_funds_flag': opts['federalFundsFlag'],
        'sort_hide_null': opts['sortHideNull'],
        'candidate_id': this.apiClient.buildCollectionParam(opts['candidateId'], 'multi'),
        'name': this.apiClient.buildCollectionParam(opts['name'], 'multi'),
        'per_page': opts['perPage'],
        'election_year': this.apiClient.buildCollectionParam(opts['electionYear'], 'multi'),
        'office': this.apiClient.buildCollectionParam(opts['office'], 'multi'),
        'sort': opts['sort'],
        'candidate_status': this.apiClient.buildCollectionParam(opts['candidateStatus'], 'multi'),
        'max_first_file_date': opts['maxFirstFileDate'],
        'district': this.apiClient.buildCollectionParam(opts['district'], 'multi'),
        'api_key': apiKey,
        'has_raised_funds': opts['hasRaisedFunds'],
        'party': this.apiClient.buildCollectionParam(opts['party'], 'multi'),
        'sort_nulls_last': opts['sortNullsLast'],
        'is_active_candidate': opts['isActiveCandidate'],
        'page': opts['page'],
        'state': this.apiClient.buildCollectionParam(opts['state'], 'multi'),
        'year': opts['year']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyHeaderAuth', 'ApiKeyQueryAuth', 'apiKey'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = CandidatePage;
      return this.apiClient.callApi(
        '/candidates/search/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the candidatesTotalsAggregatesGet operation.
     * @callback module:api/CandidateApi~candidatesTotalsAggregatesGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CandidateTotalAggregatePage} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     *  Candidate total receipts and disbursements aggregated by `aggregate_by`. 
     * @param {String} apiKey  API key for https://api.data.gov. Get one at https://api.data.gov/signup. 
     * @param {Object} opts Optional parameters
     * @param {Number} [maxElectionCycle]  Filter records to only those that are applicable to a given two-year period. This cycle follows the traditional House election cycle and subdivides the presidential and Senate elections into comparable two-year blocks. The cycle begins with an odd year and is named for its ending, even year. 
     * @param {Boolean} [sortNullOnly = false)] Toggle that filters out all rows having sort column that is non-null
     * @param {Boolean} [sortHideNull = false)] Hide null values on sorted column(s).
     * @param {Number} [perPage = 20)] The number of results returned per page. Defaults to 20.
     * @param {Array.<Number>} [electionYear]  Filter records to only those that were applicable to a given two-year period.The cycle begins with an odd year and is named for its ending, even year. 
     * @param {module:model/String} [office] Federal office candidate runs for: H, S or P
     * @param {Array.<String>} [sort]  Provide a field to sort by. Use `-` for descending order. ex: `-case_no` 
     * @param {Number} [minElectionCycle]  Filter records to only those that are applicable to a given two-year period. This cycle follows the traditional House election cycle and subdivides the presidential and Senate elections into comparable two-year blocks. The cycle begins with an odd year and is named for its ending, even year. 
     * @param {Array.<String>} [district] Two-digit US House distirict of the office the candidate is running for. Presidential, Senate and House at-large candidates will have District 00.
     * @param {Boolean} [electionFull = true)] `True` indicates that full election period of a candidate. `False` indicates that two year election cycle.
     * @param {module:model/String} [party] Three-letter code for the party affiliated with a candidate or committee. For example, DEM for Democratic Party and REP for Republican Party.
     * @param {Boolean} [isActiveCandidate]  Candidates who are actively seeking office. If no value is specified, all candidates are returned. When True is specified, only active candidates are returned. When False is specified, only inactive candidates are returned. 
     * @param {Number} [page = 1)] For paginating through results, starting at page 1
     * @param {Array.<String>} [state] US state or territory where a candidate runs for office
     * @param {Boolean} [sortNullsLast = false)] Toggle that sorts null values last
     * @param {module:model/String} [aggregateBy] Candidate totals aggregate_by (Chose one of dropdown options):         - ' ' grouped by election year         - office grouped by election year, by office         - office-state grouped by election year, by office, by state         - office-state-district grouped by election year, by office, by state, by district         - office-party grouped by election year, by office, by party 
     * @param {module:api/CandidateApi~candidatesTotalsAggregatesGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CandidateTotalAggregatePage}
     */
    candidatesTotalsAggregatesGet(apiKey, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'apiKey' is set
      if (apiKey === undefined || apiKey === null) {
        throw new Error("Missing the required parameter 'apiKey' when calling candidatesTotalsAggregatesGet");
      }

      let pathParams = {
      };
      let queryParams = {
        'max_election_cycle': opts['maxElectionCycle'],
        'sort_null_only': opts['sortNullOnly'],
        'sort_hide_null': opts['sortHideNull'],
        'per_page': opts['perPage'],
        'election_year': this.apiClient.buildCollectionParam(opts['electionYear'], 'multi'),
        'office': opts['office'],
        'sort': this.apiClient.buildCollectionParam(opts['sort'], 'multi'),
        'min_election_cycle': opts['minElectionCycle'],
        'district': this.apiClient.buildCollectionParam(opts['district'], 'multi'),
        'api_key': apiKey,
        'election_full': opts['electionFull'],
        'party': opts['party'],
        'is_active_candidate': opts['isActiveCandidate'],
        'page': opts['page'],
        'state': this.apiClient.buildCollectionParam(opts['state'], 'multi'),
        'sort_nulls_last': opts['sortNullsLast'],
        'aggregate_by': opts['aggregateBy']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyHeaderAuth', 'ApiKeyQueryAuth', 'apiKey'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = CandidateTotalAggregatePage;
      return this.apiClient.callApi(
        '/candidates/totals/aggregates/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the candidatesTotalsByOfficeByPartyGet operation.
     * @callback module:api/CandidateApi~candidatesTotalsByOfficeByPartyGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/TotalByOfficeByPartyPage} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     *  Aggregated candidate receipts and disbursements grouped by office by party by cycle. 
     * @param {String} apiKey  API key for https://api.data.gov. Get one at https://api.data.gov/signup. 
     * @param {Object} opts Optional parameters
     * @param {Boolean} [electionFull = true)] `True` indicates that full election period of a candidate. `False` indicates that two year election cycle.
     * @param {Boolean} [sortNullOnly = false)] Toggle that filters out all rows having sort column that is non-null
     * @param {Number} [page = 1)] For paginating through results, starting at page 1
     * @param {Boolean} [isActiveCandidate]  Candidates who are actively seeking office. If no value is specified, all candidates are returned. When True is specified, only active candidates are returned. When False is specified, only inactive candidates are returned. 
     * @param {Boolean} [sortNullsLast = false)] Toggle that sorts null values last
     * @param {Array.<Number>} [electionYear]  Filter records to only those that were applicable to a given two-year period.The cycle begins with an odd year and is named for its ending, even year. 
     * @param {Boolean} [sortHideNull = false)] Hide null values on sorted column(s).
     * @param {Number} [perPage = 20)] The number of results returned per page. Defaults to 20.
     * @param {module:model/String} [office] Federal office candidate runs for: H, S or P
     * @param {String} [sort] Provide a field to sort by. Use `-` for descending order. 
     * @param {module:api/CandidateApi~candidatesTotalsByOfficeByPartyGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/TotalByOfficeByPartyPage}
     */
    candidatesTotalsByOfficeByPartyGet(apiKey, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'apiKey' is set
      if (apiKey === undefined || apiKey === null) {
        throw new Error("Missing the required parameter 'apiKey' when calling candidatesTotalsByOfficeByPartyGet");
      }

      let pathParams = {
      };
      let queryParams = {
        'api_key': apiKey,
        'election_full': opts['electionFull'],
        'sort_null_only': opts['sortNullOnly'],
        'page': opts['page'],
        'is_active_candidate': opts['isActiveCandidate'],
        'sort_nulls_last': opts['sortNullsLast'],
        'election_year': this.apiClient.buildCollectionParam(opts['electionYear'], 'multi'),
        'sort_hide_null': opts['sortHideNull'],
        'per_page': opts['perPage'],
        'office': opts['office'],
        'sort': opts['sort']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyHeaderAuth', 'ApiKeyQueryAuth', 'apiKey'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = TotalByOfficeByPartyPage;
      return this.apiClient.callApi(
        '/candidates/totals/by_office/by_party/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the candidatesTotalsByOfficeGet operation.
     * @callback module:api/CandidateApi~candidatesTotalsByOfficeGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/TotalByOfficePage} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     *  Aggregated candidate receipts and disbursements grouped by office by cycle. 
     * @param {String} apiKey  API key for https://api.data.gov. Get one at https://api.data.gov/signup. 
     * @param {Object} opts Optional parameters
     * @param {Number} [maxElectionCycle]  Filter records to only those that are applicable to a given two-year period. This cycle follows the traditional House election cycle and subdivides the presidential and Senate elections into comparable two-year blocks. The cycle begins with an odd year and is named for its ending, even year. 
     * @param {Boolean} [electionFull = true)] `True` indicates that full election period of a candidate. `False` indicates that two year election cycle.
     * @param {Boolean} [isActiveCandidate]  Candidates who are actively seeking office. If no value is specified, all candidates are returned. When True is specified, only active candidates are returned. When False is specified, only inactive candidates are returned. 
     * @param {Number} [page = 1)] For paginating through results, starting at page 1
     * @param {Boolean} [sortNullOnly = false)] Toggle that filters out all rows having sort column that is non-null
     * @param {Boolean} [sortNullsLast = false)] Toggle that sorts null values last
     * @param {Array.<Number>} [electionYear]  Filter records to only those that were applicable to a given two-year period.The cycle begins with an odd year and is named for its ending, even year. 
     * @param {Boolean} [sortHideNull = false)] Hide null values on sorted column(s).
     * @param {Number} [perPage = 20)] The number of results returned per page. Defaults to 20.
     * @param {module:model/String} [office] Federal office candidate runs for: H, S or P
     * @param {String} [sort] Provide a field to sort by. Use `-` for descending order. 
     * @param {Number} [minElectionCycle]  Filter records to only those that are applicable to a given two-year period. This cycle follows the traditional House election cycle and subdivides the presidential and Senate elections into comparable two-year blocks. The cycle begins with an odd year and is named for its ending, even year. 
     * @param {module:api/CandidateApi~candidatesTotalsByOfficeGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/TotalByOfficePage}
     */
    candidatesTotalsByOfficeGet(apiKey, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'apiKey' is set
      if (apiKey === undefined || apiKey === null) {
        throw new Error("Missing the required parameter 'apiKey' when calling candidatesTotalsByOfficeGet");
      }

      let pathParams = {
      };
      let queryParams = {
        'api_key': apiKey,
        'max_election_cycle': opts['maxElectionCycle'],
        'election_full': opts['electionFull'],
        'is_active_candidate': opts['isActiveCandidate'],
        'page': opts['page'],
        'sort_null_only': opts['sortNullOnly'],
        'sort_nulls_last': opts['sortNullsLast'],
        'election_year': this.apiClient.buildCollectionParam(opts['electionYear'], 'multi'),
        'sort_hide_null': opts['sortHideNull'],
        'per_page': opts['perPage'],
        'office': opts['office'],
        'sort': opts['sort'],
        'min_election_cycle': opts['minElectionCycle']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyHeaderAuth', 'ApiKeyQueryAuth', 'apiKey'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = TotalByOfficePage;
      return this.apiClient.callApi(
        '/candidates/totals/by_office/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the candidatesTotalsGet operation.
     * @callback module:api/CandidateApi~candidatesTotalsGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CandidateHistoryTotalPage} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     *  Aggregated candidate receipts and disbursements grouped by cycle. 
     * @param {String} apiKey  API key for https://api.data.gov. Get one at https://api.data.gov/signup. 
     * @param {Object} opts Optional parameters
     * @param {String} [maxDisbursements] Maximum aggregated disbursements
     * @param {Array.<String>} [q] Name of candidate running for office
     * @param {Array.<Number>} [cycle]  Filter records to only those that were applicable to a given two-year period.The cycle begins with an odd year and is named for its ending, even year. 
     * @param {Boolean} [sortNullOnly = false)] Toggle that filters out all rows having sort column that is non-null
     * @param {String} [maxCashOnHandEndPeriod] Maximum cash on hand
     * @param {String} [maxDebtsOwedByCommittee] Maximum debt
     * @param {String} [minDisbursements] Minimum aggregated disbursements
     * @param {Boolean} [federalFundsFlag] A boolean the describes if a presidential candidate has accepted federal funds. The flag will be false for House and Senate candidates.
     * @param {Boolean} [sortHideNull = false)] Hide null values on sorted column(s).
     * @param {Array.<String>} [candidateId]  A unique identifier assigned to each candidate registered with the FEC. If a person runs for several offices, that person will have separate candidate IDs for each office. First character indicates office - [P]residential, [H]ouse, [S]enate]. Second character is the last digit of the two-year period the ID was created. Third and fourth is the candidate state. Presidential IDs don't have state. Fifth and sixth is the district when the candidate first ran. This does not change if the candidate/member's district changes during re-districting. Presidential IDs don't have districts. The rest is sequence. 
     * @param {Number} [perPage = 20)] The number of results returned per page. Defaults to 20.
     * @param {Array.<Number>} [electionYear]  Filter records to only those that were applicable to a given two-year period.The cycle begins with an odd year and is named for its ending, even year. 
     * @param {Array.<module:model/String>} [office] Federal office candidate runs for: H, S or P
     * @param {String} [sort] Provide a field to sort by. Use `-` for descending order. 
     * @param {Array.<String>} [district] District of candidate
     * @param {Boolean} [electionFull = true)] `True` indicates that full election period of a candidate. `False` indicates that two year election cycle.
     * @param {String} [minDebtsOwedByCommittee] Minimum debt
     * @param {String} [maxReceipts] Maximum aggregated receipts
     * @param {Boolean} [hasRaisedFunds] A boolean that describes if a candidate's committee has ever received any receipts for their campaign for this particular office. (Candidates have separate candidate IDs for each office.)
     * @param {Array.<String>} [party] Three-letter party code
     * @param {Boolean} [sortNullsLast = false)] Toggle that sorts null values last
     * @param {Boolean} [isActiveCandidate]  Candidates who are actively seeking office. If no value is specified, all candidates are returned. When True is specified, only active candidates are returned. When False is specified, only inactive candidates are returned. 
     * @param {Number} [page = 1)] For paginating through results, starting at page 1
     * @param {Array.<String>} [state] State of candidate
     * @param {String} [minCashOnHandEndPeriod] Minimum cash on hand
     * @param {String} [minReceipts] Minimum aggregated receipts
     * @param {module:api/CandidateApi~candidatesTotalsGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CandidateHistoryTotalPage}
     */
    candidatesTotalsGet(apiKey, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'apiKey' is set
      if (apiKey === undefined || apiKey === null) {
        throw new Error("Missing the required parameter 'apiKey' when calling candidatesTotalsGet");
      }

      let pathParams = {
      };
      let queryParams = {
        'max_disbursements': opts['maxDisbursements'],
        'q': this.apiClient.buildCollectionParam(opts['q'], 'multi'),
        'cycle': this.apiClient.buildCollectionParam(opts['cycle'], 'multi'),
        'sort_null_only': opts['sortNullOnly'],
        'max_cash_on_hand_end_period': opts['maxCashOnHandEndPeriod'],
        'max_debts_owed_by_committee': opts['maxDebtsOwedByCommittee'],
        'min_disbursements': opts['minDisbursements'],
        'federal_funds_flag': opts['federalFundsFlag'],
        'sort_hide_null': opts['sortHideNull'],
        'candidate_id': this.apiClient.buildCollectionParam(opts['candidateId'], 'multi'),
        'per_page': opts['perPage'],
        'election_year': this.apiClient.buildCollectionParam(opts['electionYear'], 'multi'),
        'office': this.apiClient.buildCollectionParam(opts['office'], 'multi'),
        'sort': opts['sort'],
        'district': this.apiClient.buildCollectionParam(opts['district'], 'multi'),
        'api_key': apiKey,
        'election_full': opts['electionFull'],
        'min_debts_owed_by_committee': opts['minDebtsOwedByCommittee'],
        'max_receipts': opts['maxReceipts'],
        'has_raised_funds': opts['hasRaisedFunds'],
        'party': this.apiClient.buildCollectionParam(opts['party'], 'multi'),
        'sort_nulls_last': opts['sortNullsLast'],
        'is_active_candidate': opts['isActiveCandidate'],
        'page': opts['page'],
        'state': this.apiClient.buildCollectionParam(opts['state'], 'multi'),
        'min_cash_on_hand_end_period': opts['minCashOnHandEndPeriod'],
        'min_receipts': opts['minReceipts']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyHeaderAuth', 'ApiKeyQueryAuth', 'apiKey'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = CandidateHistoryTotalPage;
      return this.apiClient.callApi(
        '/candidates/totals/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the committeeCommitteeIdCandidatesGet operation.
     * @callback module:api/CandidateApi~committeeCommitteeIdCandidatesGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CandidateDetailPage} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     *  This endpoint is useful for finding detailed information about a particular candidate. Use the `candidate_id` to find the most recent information about that candidate. 
     * @param {String} apiKey  API key for https://api.data.gov. Get one at https://api.data.gov/signup. 
     * @param {String} committeeId  A unique identifier assigned to each committee or filer registered with the FEC. In general committee id's begin with the letter C which is followed by eight digits. 
     * @param {Object} opts Optional parameters
     * @param {Array.<module:model/String>} [incumbentChallenge] One-letter code ('I', 'C', 'O') explaining if the candidate is an incumbent, a challenger, or if the seat is open.
     * @param {Array.<Number>} [cycle]  Two-year election cycle in which a candidate runs for office. Calculated from Form 2. The cycle begins with an odd year and is named for its ending, even year. This cycle follows the traditional house election cycle and subdivides the presidential and Senate elections into comparable two-year blocks. To retrieve data for the entire four years of a presidential term or six years of a senatorial term, you will need the `election_full` flag. 
     * @param {Boolean} [sortNullOnly = false)] Toggle that filters out all rows having sort column that is non-null
     * @param {Boolean} [federalFundsFlag] A boolean the describes if a presidential candidate has accepted federal funds. The flag will be false for House and Senate candidates.
     * @param {Boolean} [sortHideNull = false)] Hide null values on sorted column(s).
     * @param {Array.<String>} [name] Name (candidate or committee) to search for. Alias for 'q'.
     * @param {Number} [perPage = 20)] The number of results returned per page. Defaults to 20.
     * @param {Array.<Number>} [electionYear] Year of election
     * @param {Array.<module:model/String>} [office] Federal office candidate runs for: H, S or P
     * @param {String} [sort = 'name')] Provide a field to sort by. Use `-` for descending order. 
     * @param {Array.<module:model/String>} [candidateStatus] One-letter code explaining if the candidate is:         - C present candidate         - F future candidate         - N not yet a candidate         - P prior candidate 
     * @param {Array.<String>} [district] Two-digit US House distirict of the office the candidate is running for. Presidential, Senate and House at-large candidates will have District 00.
     * @param {Boolean} [hasRaisedFunds] A boolean that describes if a candidate's committee has ever received any receipts for their campaign for this particular office. (Candidates have separate candidate IDs for each office.)
     * @param {Array.<String>} [party] Three-letter code for the party affiliated with a candidate or committee. For example, DEM for Democratic Party and REP for Republican Party.
     * @param {Boolean} [sortNullsLast = false)] Toggle that sorts null values last
     * @param {Number} [page = 1)] For paginating through results, starting at page 1
     * @param {Array.<String>} [state] US state or territory where a candidate runs for office
     * @param {String} [year] Retrieve records pertaining to a particular election year. The list of election years is based on a candidate filing a statement of candidacy (F2) for that year.
     * @param {module:api/CandidateApi~committeeCommitteeIdCandidatesGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CandidateDetailPage}
     */
    committeeCommitteeIdCandidatesGet(apiKey, committeeId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'apiKey' is set
      if (apiKey === undefined || apiKey === null) {
        throw new Error("Missing the required parameter 'apiKey' when calling committeeCommitteeIdCandidatesGet");
      }
      // verify the required parameter 'committeeId' is set
      if (committeeId === undefined || committeeId === null) {
        throw new Error("Missing the required parameter 'committeeId' when calling committeeCommitteeIdCandidatesGet");
      }

      let pathParams = {
        'committee_id': committeeId
      };
      let queryParams = {
        'incumbent_challenge': this.apiClient.buildCollectionParam(opts['incumbentChallenge'], 'multi'),
        'cycle': this.apiClient.buildCollectionParam(opts['cycle'], 'multi'),
        'sort_null_only': opts['sortNullOnly'],
        'federal_funds_flag': opts['federalFundsFlag'],
        'sort_hide_null': opts['sortHideNull'],
        'name': this.apiClient.buildCollectionParam(opts['name'], 'multi'),
        'per_page': opts['perPage'],
        'election_year': this.apiClient.buildCollectionParam(opts['electionYear'], 'multi'),
        'office': this.apiClient.buildCollectionParam(opts['office'], 'multi'),
        'sort': opts['sort'],
        'candidate_status': this.apiClient.buildCollectionParam(opts['candidateStatus'], 'multi'),
        'district': this.apiClient.buildCollectionParam(opts['district'], 'multi'),
        'api_key': apiKey,
        'has_raised_funds': opts['hasRaisedFunds'],
        'party': this.apiClient.buildCollectionParam(opts['party'], 'multi'),
        'sort_nulls_last': opts['sortNullsLast'],
        'page': opts['page'],
        'state': this.apiClient.buildCollectionParam(opts['state'], 'multi'),
        'year': opts['year']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyHeaderAuth', 'ApiKeyQueryAuth', 'apiKey'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = CandidateDetailPage;
      return this.apiClient.callApi(
        '/committee/{committee_id}/candidates/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the committeeCommitteeIdCandidatesHistoryCycleGet operation.
     * @callback module:api/CandidateApi~committeeCommitteeIdCandidatesHistoryCycleGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CandidateHistoryPage} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     *  Find out a candidate's characteristics over time. This is particularly useful if the candidate runs for the same office in different districts or you want to know more about a candidate's previous races.  This information is organized by `candidate_id`, so it won't help you find a candidate who ran for different offices over time; candidates get a new ID for each office. 
     * @param {String} apiKey  API key for https://api.data.gov. Get one at https://api.data.gov/signup. 
     * @param {String} committeeId  A unique identifier assigned to each committee or filer registered with the FEC. In general committee id's begin with the letter C which is followed by eight digits. 
     * @param {Number} cycle  Two-year election cycle in which a candidate runs for office. Calculated from Form 2. The cycle begins with an odd year and is named for its ending, even year. This cycle follows the traditional house election cycle and subdivides the presidential and Senate elections into comparable two-year blocks. To retrieve data for the entire four years of a presidential term or six years of a senatorial term, you will need the `election_full` flag. 
     * @param {Object} opts Optional parameters
     * @param {Number} [page = 1)] For paginating through results, starting at page 1
     * @param {Boolean} [sortHideNull = false)] Hide null values on sorted column(s).
     * @param {Boolean} [electionFull = true)] `True` indicates that full election period of a candidate. `False` indicates that two year election cycle.
     * @param {Number} [perPage = 20)] The number of results returned per page. Defaults to 20.
     * @param {Boolean} [sortNullOnly = false)] Toggle that filters out all rows having sort column that is non-null
     * @param {String} [sort = '-two_year_period')] Provide a field to sort by. Use `-` for descending order. 
     * @param {Boolean} [sortNullsLast = false)] Toggle that sorts null values last
     * @param {module:api/CandidateApi~committeeCommitteeIdCandidatesHistoryCycleGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CandidateHistoryPage}
     */
    committeeCommitteeIdCandidatesHistoryCycleGet(apiKey, committeeId, cycle, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'apiKey' is set
      if (apiKey === undefined || apiKey === null) {
        throw new Error("Missing the required parameter 'apiKey' when calling committeeCommitteeIdCandidatesHistoryCycleGet");
      }
      // verify the required parameter 'committeeId' is set
      if (committeeId === undefined || committeeId === null) {
        throw new Error("Missing the required parameter 'committeeId' when calling committeeCommitteeIdCandidatesHistoryCycleGet");
      }
      // verify the required parameter 'cycle' is set
      if (cycle === undefined || cycle === null) {
        throw new Error("Missing the required parameter 'cycle' when calling committeeCommitteeIdCandidatesHistoryCycleGet");
      }

      let pathParams = {
        'committee_id': committeeId,
        'cycle': cycle
      };
      let queryParams = {
        'page': opts['page'],
        'api_key': apiKey,
        'sort_hide_null': opts['sortHideNull'],
        'election_full': opts['electionFull'],
        'per_page': opts['perPage'],
        'sort_null_only': opts['sortNullOnly'],
        'sort': opts['sort'],
        'sort_nulls_last': opts['sortNullsLast']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyHeaderAuth', 'ApiKeyQueryAuth', 'apiKey'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = CandidateHistoryPage;
      return this.apiClient.callApi(
        '/committee/{committee_id}/candidates/history/{cycle}/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the committeeCommitteeIdCandidatesHistoryGet operation.
     * @callback module:api/CandidateApi~committeeCommitteeIdCandidatesHistoryGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CandidateHistoryPage} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     *  Find out a candidate's characteristics over time. This is particularly useful if the candidate runs for the same office in different districts or you want to know more about a candidate's previous races.  This information is organized by `candidate_id`, so it won't help you find a candidate who ran for different offices over time; candidates get a new ID for each office. 
     * @param {String} apiKey  API key for https://api.data.gov. Get one at https://api.data.gov/signup. 
     * @param {String} committeeId  A unique identifier assigned to each committee or filer registered with the FEC. In general committee id's begin with the letter C which is followed by eight digits. 
     * @param {Object} opts Optional parameters
     * @param {Number} [page = 1)] For paginating through results, starting at page 1
     * @param {Boolean} [sortHideNull = false)] Hide null values on sorted column(s).
     * @param {Boolean} [electionFull = true)] `True` indicates that full election period of a candidate. `False` indicates that two year election cycle.
     * @param {Number} [perPage = 20)] The number of results returned per page. Defaults to 20.
     * @param {Boolean} [sortNullOnly = false)] Toggle that filters out all rows having sort column that is non-null
     * @param {String} [sort = '-two_year_period')] Provide a field to sort by. Use `-` for descending order. 
     * @param {Boolean} [sortNullsLast = false)] Toggle that sorts null values last
     * @param {module:api/CandidateApi~committeeCommitteeIdCandidatesHistoryGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CandidateHistoryPage}
     */
    committeeCommitteeIdCandidatesHistoryGet(apiKey, committeeId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'apiKey' is set
      if (apiKey === undefined || apiKey === null) {
        throw new Error("Missing the required parameter 'apiKey' when calling committeeCommitteeIdCandidatesHistoryGet");
      }
      // verify the required parameter 'committeeId' is set
      if (committeeId === undefined || committeeId === null) {
        throw new Error("Missing the required parameter 'committeeId' when calling committeeCommitteeIdCandidatesHistoryGet");
      }

      let pathParams = {
        'committee_id': committeeId
      };
      let queryParams = {
        'page': opts['page'],
        'api_key': apiKey,
        'sort_hide_null': opts['sortHideNull'],
        'election_full': opts['electionFull'],
        'per_page': opts['perPage'],
        'sort_null_only': opts['sortNullOnly'],
        'sort': opts['sort'],
        'sort_nulls_last': opts['sortNullsLast']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyHeaderAuth', 'ApiKeyQueryAuth', 'apiKey'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = CandidateHistoryPage;
      return this.apiClient.callApi(
        '/committee/{committee_id}/candidates/history/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
