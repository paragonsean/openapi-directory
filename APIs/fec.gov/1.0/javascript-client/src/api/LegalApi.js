/**
 * OpenFEC
 * This application programming interface (API) allows you to explore the way candidates and committees fund their campaigns.    The Federal Election Commission (FEC) API is a RESTful web service supporting full-text and field-specific searches on FEC data. [Bulk downloads](https://www.fec.gov/data/advanced/?tab=bulk-data) are available on the current site. Information is tied to the underlying forms by file ID and image ID. Data is updated nightly.    There are a lot of data, and a good place to start is to use search to find interesting candidates and committees. Then, you can use their IDs to find report or line item details with the other endpoints. If you are interested in individual donors, check out contributor information in the `/schedule_a/` endpoints.    <b class=\"body\" id=\"getting_started_head\">Getting started with the openFEC API</b><br>    If you would like to use the FEC's API programmatically, you can sign up for your own API key using our form. Alternatively, you can still try out our API without an API key by using the web interface and using DEMO_KEY. Note that when you use the openFEC API you are subject to the [Terms of Service](https://github.com/fecgov/FEC/blob/master/TERMS-OF-SERVICE.md) and [Acceptable Use policy](https://github.com/fecgov/FEC/blob/master/ACCEPTABLE-USE-POLICY.md).    Signing up for an API key will enable you to place up to 1,000 calls an hour. Each call is limited to 100 results per page. You can email questions, comments or a request to get a key for 7,200 calls an hour (120 calls per minute) to <a href=\"mailto:APIinfo@fec.gov\">APIinfo@fec.gov</a>. You can also ask questions and discuss the data in a community led [group](https://groups.google.com/forum/#!forum/fec-data).    The model definitions and schema are available at [/swagger](/swagger/). This is useful for making wrappers and exploring the data.    A few restrictions limit the way you can use FEC data. For example, you canâ€™t use contributor lists for commercial purposes or to solicit donations. [Learn more here](https://www.fec.gov/updates/sale-or-use-contributor-information/).    [Inspect our source code](https://github.com/fecgov/openFEC). We welcome issues and pull requests!    <p><br></p> <h2 class=\"title\" id=\"signup_head\">Sign up for an API key</h2> <div id=\"apidatagov_signup\">Loading signup form...</div>
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import LegalSearchGetDefaultResponse from '../model/LegalSearchGetDefaultResponse';

/**
* Legal service.
* @module api/LegalApi
* @version 1.0
*/
export default class LegalApi {

    /**
    * Constructs a new LegalApi. 
    * @alias module:api/LegalApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the legalSearchGet operation.
     * @callback module:api/LegalApi~legalSearchGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/LegalSearchGetDefaultResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     *  Search legal documents by document type, or across all document types using keywords, parameter values and ranges. 
     * @param {String} apiKey  API key for https://api.data.gov. Get one at https://api.data.gov/signup. 
     * @param {Object} opts Optional parameters
     * @param {Array.<String>} [caseStatutoryCitation]  Statutory citations 
     * @param {Date} [afMinRtbDate]  The earliest Reason to Believe date 
     * @param {String} [afReportYear]  Admin fine report year 
     * @param {String} [q]  Text to search legal documents for 
     * @param {Number} [fromHit]  Get results starting from this index 
     * @param {Array.<module:model/Number>} [aoRequestorType]  Code of the advisory opinion requestor type. 
     * @param {Date} [caseMaxCloseDate]  The latest date closed of case 
     * @param {Boolean} [aoIsPending]  AO is pending 
     * @param {Number} [afFdFineAmount]  Final Determination fine amount 
     * @param {Date} [caseMinOpenDate]  The earliest date opened of case 
     * @param {Date} [aoMinIssueDate]  Earliest issue date of advisory opinion 
     * @param {String} [sort]  Provide a field to sort by. Use `-` for descending order. ex: `-case_no` 
     * @param {Boolean} [aoCitationRequireAll]  Require all citations to be in document (default behavior is any) 
     * @param {Array.<module:model/String>} [caseDocCategoryId]  Select one or more case_doc_category_id to filter by corresponding CASE_DOCUMENT_CATEGORY:         - 1 - Conciliation and Settlement Agreements         - 2 - Complaint, Responses, Designation of Counsel and Extensions of Time         - 3 - General Counsel Reports, Briefs, Notifications and Responses         - 4 - Certifications         - 5 - Civil Penalties, Disgorgements, Other Payments and Letters of Compliance         - 6 - Statement of Reasons          - 1001 - ADR Settlement Agreements         - 1002 - Complaint, Responses, Designation of Counsel and Extensions of Time         - 1003 - ADR Memoranda, Notifications and Responses         - 1004 - Certifications         - 1005 - Civil Penalties, Disgorgements, Other Payments and Letters of Compliance         - 1006 - Statement of Reasons          - 2001 - Administrative Fine Case 
     * @param {String} [aoStatus]  Status of AO (pending, withdrawn, or final) 
     * @param {Date} [afMaxRtbDate]  The latest Reason to Believe date 
     * @param {Number} [afRtbFineAmount]  Reason to Believe fine amount 
     * @param {String} [caseRespondents]  Cases respondents 
     * @param {Array.<String>} [aoEntityName]  Name of commenter or representative 
     * @param {String} [aoRequestor]  The requestor of the advisory opinion 
     * @param {Array.<module:model/String>} [aoCategory]  Category of the document 
     * @param {Array.<String>} [aoRegulatoryCitation]  Regulatory citations 
     * @param {Array.<String>} [caseRegulatoryCitation]  Regulatory citations 
     * @param {Boolean} [caseCitationRequireAll]  Require all citations to be in document (default behavior is any) 
     * @param {Array.<String>} [caseDispositions]  Cases dispositions 
     * @param {Array.<String>} [aoName]  Force advisory opinion name 
     * @param {Date} [afMaxFdDate]  The latest Final Determination date 
     * @param {Date} [aoMaxRequestDate]  Latest request date of advisory opinion 
     * @param {module:model/String} [murType]  Type of MUR : current or archived 
     * @param {Number} [hitsReturned]  Number of results to return (max 10) 
     * @param {Number} [caseElectionCycles]  Cases election cycles 
     * @param {Date} [caseMinCloseDate]  The earliest date closed of case 
     * @param {Date} [aoMaxIssueDate]  Latest issue date of advisory opinion 
     * @param {String} [afCommitteeId]  Admin fine committee ID 
     * @param {Date} [afMinFdDate]  The earliest Final Determination date 
     * @param {Date} [caseMaxOpenDate]  The latest date opened of case 
     * @param {Date} [aoMinRequestDate]  Earliest request date of advisory opinion 
     * @param {Array.<String>} [aoNo]  Force advisory opinion number 
     * @param {module:model/String} [type]  Choose a legal document type 
     * @param {Array.<String>} [caseNo]  Enforcement matter case number 
     * @param {Array.<String>} [aoStatutoryCitation]  Statutory citations 
     * @param {Array.<String>} [afName]  Admin fine committee name 
     * @param {module:api/LegalApi~legalSearchGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/LegalSearchGetDefaultResponse}
     */
    legalSearchGet(apiKey, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'apiKey' is set
      if (apiKey === undefined || apiKey === null) {
        throw new Error("Missing the required parameter 'apiKey' when calling legalSearchGet");
      }

      let pathParams = {
      };
      let queryParams = {
        'case_statutory_citation': this.apiClient.buildCollectionParam(opts['caseStatutoryCitation'], 'multi'),
        'af_min_rtb_date': opts['afMinRtbDate'],
        'af_report_year': opts['afReportYear'],
        'q': opts['q'],
        'from_hit': opts['fromHit'],
        'ao_requestor_type': this.apiClient.buildCollectionParam(opts['aoRequestorType'], 'multi'),
        'case_max_close_date': opts['caseMaxCloseDate'],
        'ao_is_pending': opts['aoIsPending'],
        'af_fd_fine_amount': opts['afFdFineAmount'],
        'case_min_open_date': opts['caseMinOpenDate'],
        'ao_min_issue_date': opts['aoMinIssueDate'],
        'sort': opts['sort'],
        'ao_citation_require_all': opts['aoCitationRequireAll'],
        'case_doc_category_id': this.apiClient.buildCollectionParam(opts['caseDocCategoryId'], 'multi'),
        'ao_status': opts['aoStatus'],
        'af_max_rtb_date': opts['afMaxRtbDate'],
        'af_rtb_fine_amount': opts['afRtbFineAmount'],
        'case_respondents': opts['caseRespondents'],
        'ao_entity_name': this.apiClient.buildCollectionParam(opts['aoEntityName'], 'multi'),
        'ao_requestor': opts['aoRequestor'],
        'ao_category': this.apiClient.buildCollectionParam(opts['aoCategory'], 'multi'),
        'ao_regulatory_citation': this.apiClient.buildCollectionParam(opts['aoRegulatoryCitation'], 'multi'),
        'case_regulatory_citation': this.apiClient.buildCollectionParam(opts['caseRegulatoryCitation'], 'multi'),
        'case_citation_require_all': opts['caseCitationRequireAll'],
        'case_dispositions': this.apiClient.buildCollectionParam(opts['caseDispositions'], 'multi'),
        'ao_name': this.apiClient.buildCollectionParam(opts['aoName'], 'multi'),
        'af_max_fd_date': opts['afMaxFdDate'],
        'ao_max_request_date': opts['aoMaxRequestDate'],
        'mur_type': opts['murType'],
        'hits_returned': opts['hitsReturned'],
        'case_election_cycles': opts['caseElectionCycles'],
        'case_min_close_date': opts['caseMinCloseDate'],
        'ao_max_issue_date': opts['aoMaxIssueDate'],
        'af_committee_id': opts['afCommitteeId'],
        'af_min_fd_date': opts['afMinFdDate'],
        'case_max_open_date': opts['caseMaxOpenDate'],
        'api_key': apiKey,
        'ao_min_request_date': opts['aoMinRequestDate'],
        'ao_no': this.apiClient.buildCollectionParam(opts['aoNo'], 'multi'),
        'type': opts['type'],
        'case_no': this.apiClient.buildCollectionParam(opts['caseNo'], 'multi'),
        'ao_statutory_citation': this.apiClient.buildCollectionParam(opts['aoStatutoryCitation'], 'multi'),
        'af_name': this.apiClient.buildCollectionParam(opts['afName'], 'multi')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyHeaderAuth', 'ApiKeyQueryAuth', 'apiKey'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = LegalSearchGetDefaultResponse;
      return this.apiClient.callApi(
        '/legal/search/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
