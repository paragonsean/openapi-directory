/**
 * Neutrino API
 * The general-purpose API
 *
 * The version of the OpenAPI document: 3.6.4
 * Contact: ops@neutrinoapi.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIBrowserBotResponse.h
 *
 * 
 */

#ifndef OAIBrowserBotResponse_H
#define OAIBrowserBotResponse_H

#include <QJsonObject>

#include <QList>
#include <QMap>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAIBrowserBotResponse : public OAIObject {
public:
    OAIBrowserBotResponse();
    OAIBrowserBotResponse(QString json);
    ~OAIBrowserBotResponse() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getContent() const;
    void setContent(const QString &content);
    bool is_content_Set() const;
    bool is_content_Valid() const;

    QList<QString> getElements() const;
    void setElements(const QList<QString> &elements);
    bool is_elements_Set() const;
    bool is_elements_Valid() const;

    QString getErrorMessage() const;
    void setErrorMessage(const QString &error_message);
    bool is_error_message_Set() const;
    bool is_error_message_Valid() const;

    QList<QString> getExecResults() const;
    void setExecResults(const QList<QString> &exec_results);
    bool is_exec_results_Set() const;
    bool is_exec_results_Valid() const;

    QString getHttpRedirectUrl() const;
    void setHttpRedirectUrl(const QString &http_redirect_url);
    bool is_http_redirect_url_Set() const;
    bool is_http_redirect_url_Valid() const;

    qint32 getHttpStatusCode() const;
    void setHttpStatusCode(const qint32 &http_status_code);
    bool is_http_status_code_Set() const;
    bool is_http_status_code_Valid() const;

    QString getHttpStatusMessage() const;
    void setHttpStatusMessage(const QString &http_status_message);
    bool is_http_status_message_Set() const;
    bool is_http_status_message_Valid() const;

    bool isIsError() const;
    void setIsError(const bool &is_error);
    bool is_is_error_Set() const;
    bool is_is_error_Valid() const;

    bool isIsHttpOk() const;
    void setIsHttpOk(const bool &is_http_ok);
    bool is_is_http_ok_Set() const;
    bool is_is_http_ok_Valid() const;

    bool isIsHttpRedirect() const;
    void setIsHttpRedirect(const bool &is_http_redirect);
    bool is_is_http_redirect_Set() const;
    bool is_is_http_redirect_Valid() const;

    bool isIsSecure() const;
    void setIsSecure(const bool &is_secure);
    bool is_is_secure_Set() const;
    bool is_is_secure_Valid() const;

    bool isIsTimeout() const;
    void setIsTimeout(const bool &is_timeout);
    bool is_is_timeout_Set() const;
    bool is_is_timeout_Valid() const;

    QString getLanguageCode() const;
    void setLanguageCode(const QString &language_code);
    bool is_language_code_Set() const;
    bool is_language_code_Valid() const;

    double getLoadTime() const;
    void setLoadTime(const double &load_time);
    bool is_load_time_Set() const;
    bool is_load_time_Valid() const;

    QString getMimeType() const;
    void setMimeType(const QString &mime_type);
    bool is_mime_type_Set() const;
    bool is_mime_type_Valid() const;

    QMap<QString, QString> getResponseHeaders() const;
    void setResponseHeaders(const QMap<QString, QString> &response_headers);
    bool is_response_headers_Set() const;
    bool is_response_headers_Valid() const;

    QMap<QString, QString> getSecurityDetails() const;
    void setSecurityDetails(const QMap<QString, QString> &security_details);
    bool is_security_details_Set() const;
    bool is_security_details_Valid() const;

    QString getServerIp() const;
    void setServerIp(const QString &server_ip);
    bool is_server_ip_Set() const;
    bool is_server_ip_Valid() const;

    QString getTitle() const;
    void setTitle(const QString &title);
    bool is_title_Set() const;
    bool is_title_Valid() const;

    QString getUrl() const;
    void setUrl(const QString &url);
    bool is_url_Set() const;
    bool is_url_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_content;
    bool m_content_isSet;
    bool m_content_isValid;

    QList<QString> m_elements;
    bool m_elements_isSet;
    bool m_elements_isValid;

    QString m_error_message;
    bool m_error_message_isSet;
    bool m_error_message_isValid;

    QList<QString> m_exec_results;
    bool m_exec_results_isSet;
    bool m_exec_results_isValid;

    QString m_http_redirect_url;
    bool m_http_redirect_url_isSet;
    bool m_http_redirect_url_isValid;

    qint32 m_http_status_code;
    bool m_http_status_code_isSet;
    bool m_http_status_code_isValid;

    QString m_http_status_message;
    bool m_http_status_message_isSet;
    bool m_http_status_message_isValid;

    bool m_is_error;
    bool m_is_error_isSet;
    bool m_is_error_isValid;

    bool m_is_http_ok;
    bool m_is_http_ok_isSet;
    bool m_is_http_ok_isValid;

    bool m_is_http_redirect;
    bool m_is_http_redirect_isSet;
    bool m_is_http_redirect_isValid;

    bool m_is_secure;
    bool m_is_secure_isSet;
    bool m_is_secure_isValid;

    bool m_is_timeout;
    bool m_is_timeout_isSet;
    bool m_is_timeout_isValid;

    QString m_language_code;
    bool m_language_code_isSet;
    bool m_language_code_isValid;

    double m_load_time;
    bool m_load_time_isSet;
    bool m_load_time_isValid;

    QString m_mime_type;
    bool m_mime_type_isSet;
    bool m_mime_type_isValid;

    QMap<QString, QString> m_response_headers;
    bool m_response_headers_isSet;
    bool m_response_headers_isValid;

    QMap<QString, QString> m_security_details;
    bool m_security_details_isSet;
    bool m_security_details_isValid;

    QString m_server_ip;
    bool m_server_ip_isSet;
    bool m_server_ip_isValid;

    QString m_title;
    bool m_title_isSet;
    bool m_title_isValid;

    QString m_url;
    bool m_url_isSet;
    bool m_url_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIBrowserBotResponse)

#endif // OAIBrowserBotResponse_H
