/**
 * Neutrino API
 * The general-purpose API
 *
 * The version of the OpenAPI document: 3.6.4
 * Contact: ops@neutrinoapi.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIBrowserBotResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIBrowserBotResponse::OAIBrowserBotResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIBrowserBotResponse::OAIBrowserBotResponse() {
    this->initializeModel();
}

OAIBrowserBotResponse::~OAIBrowserBotResponse() {}

void OAIBrowserBotResponse::initializeModel() {

    m_content_isSet = false;
    m_content_isValid = false;

    m_elements_isSet = false;
    m_elements_isValid = false;

    m_error_message_isSet = false;
    m_error_message_isValid = false;

    m_exec_results_isSet = false;
    m_exec_results_isValid = false;

    m_http_redirect_url_isSet = false;
    m_http_redirect_url_isValid = false;

    m_http_status_code_isSet = false;
    m_http_status_code_isValid = false;

    m_http_status_message_isSet = false;
    m_http_status_message_isValid = false;

    m_is_error_isSet = false;
    m_is_error_isValid = false;

    m_is_http_ok_isSet = false;
    m_is_http_ok_isValid = false;

    m_is_http_redirect_isSet = false;
    m_is_http_redirect_isValid = false;

    m_is_secure_isSet = false;
    m_is_secure_isValid = false;

    m_is_timeout_isSet = false;
    m_is_timeout_isValid = false;

    m_language_code_isSet = false;
    m_language_code_isValid = false;

    m_load_time_isSet = false;
    m_load_time_isValid = false;

    m_mime_type_isSet = false;
    m_mime_type_isValid = false;

    m_response_headers_isSet = false;
    m_response_headers_isValid = false;

    m_security_details_isSet = false;
    m_security_details_isValid = false;

    m_server_ip_isSet = false;
    m_server_ip_isValid = false;

    m_title_isSet = false;
    m_title_isValid = false;

    m_url_isSet = false;
    m_url_isValid = false;
}

void OAIBrowserBotResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIBrowserBotResponse::fromJsonObject(QJsonObject json) {

    m_content_isValid = ::OpenAPI::fromJsonValue(m_content, json[QString("content")]);
    m_content_isSet = !json[QString("content")].isNull() && m_content_isValid;

    m_elements_isValid = ::OpenAPI::fromJsonValue(m_elements, json[QString("elements")]);
    m_elements_isSet = !json[QString("elements")].isNull() && m_elements_isValid;

    m_error_message_isValid = ::OpenAPI::fromJsonValue(m_error_message, json[QString("error-message")]);
    m_error_message_isSet = !json[QString("error-message")].isNull() && m_error_message_isValid;

    m_exec_results_isValid = ::OpenAPI::fromJsonValue(m_exec_results, json[QString("exec-results")]);
    m_exec_results_isSet = !json[QString("exec-results")].isNull() && m_exec_results_isValid;

    m_http_redirect_url_isValid = ::OpenAPI::fromJsonValue(m_http_redirect_url, json[QString("http-redirect-url")]);
    m_http_redirect_url_isSet = !json[QString("http-redirect-url")].isNull() && m_http_redirect_url_isValid;

    m_http_status_code_isValid = ::OpenAPI::fromJsonValue(m_http_status_code, json[QString("http-status-code")]);
    m_http_status_code_isSet = !json[QString("http-status-code")].isNull() && m_http_status_code_isValid;

    m_http_status_message_isValid = ::OpenAPI::fromJsonValue(m_http_status_message, json[QString("http-status-message")]);
    m_http_status_message_isSet = !json[QString("http-status-message")].isNull() && m_http_status_message_isValid;

    m_is_error_isValid = ::OpenAPI::fromJsonValue(m_is_error, json[QString("is-error")]);
    m_is_error_isSet = !json[QString("is-error")].isNull() && m_is_error_isValid;

    m_is_http_ok_isValid = ::OpenAPI::fromJsonValue(m_is_http_ok, json[QString("is-http-ok")]);
    m_is_http_ok_isSet = !json[QString("is-http-ok")].isNull() && m_is_http_ok_isValid;

    m_is_http_redirect_isValid = ::OpenAPI::fromJsonValue(m_is_http_redirect, json[QString("is-http-redirect")]);
    m_is_http_redirect_isSet = !json[QString("is-http-redirect")].isNull() && m_is_http_redirect_isValid;

    m_is_secure_isValid = ::OpenAPI::fromJsonValue(m_is_secure, json[QString("is-secure")]);
    m_is_secure_isSet = !json[QString("is-secure")].isNull() && m_is_secure_isValid;

    m_is_timeout_isValid = ::OpenAPI::fromJsonValue(m_is_timeout, json[QString("is-timeout")]);
    m_is_timeout_isSet = !json[QString("is-timeout")].isNull() && m_is_timeout_isValid;

    m_language_code_isValid = ::OpenAPI::fromJsonValue(m_language_code, json[QString("language-code")]);
    m_language_code_isSet = !json[QString("language-code")].isNull() && m_language_code_isValid;

    m_load_time_isValid = ::OpenAPI::fromJsonValue(m_load_time, json[QString("load-time")]);
    m_load_time_isSet = !json[QString("load-time")].isNull() && m_load_time_isValid;

    m_mime_type_isValid = ::OpenAPI::fromJsonValue(m_mime_type, json[QString("mime-type")]);
    m_mime_type_isSet = !json[QString("mime-type")].isNull() && m_mime_type_isValid;

    m_response_headers_isValid = ::OpenAPI::fromJsonValue(m_response_headers, json[QString("response-headers")]);
    m_response_headers_isSet = !json[QString("response-headers")].isNull() && m_response_headers_isValid;

    m_security_details_isValid = ::OpenAPI::fromJsonValue(m_security_details, json[QString("security-details")]);
    m_security_details_isSet = !json[QString("security-details")].isNull() && m_security_details_isValid;

    m_server_ip_isValid = ::OpenAPI::fromJsonValue(m_server_ip, json[QString("server-ip")]);
    m_server_ip_isSet = !json[QString("server-ip")].isNull() && m_server_ip_isValid;

    m_title_isValid = ::OpenAPI::fromJsonValue(m_title, json[QString("title")]);
    m_title_isSet = !json[QString("title")].isNull() && m_title_isValid;

    m_url_isValid = ::OpenAPI::fromJsonValue(m_url, json[QString("url")]);
    m_url_isSet = !json[QString("url")].isNull() && m_url_isValid;
}

QString OAIBrowserBotResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIBrowserBotResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_content_isSet) {
        obj.insert(QString("content"), ::OpenAPI::toJsonValue(m_content));
    }
    if (m_elements.size() > 0) {
        obj.insert(QString("elements"), ::OpenAPI::toJsonValue(m_elements));
    }
    if (m_error_message_isSet) {
        obj.insert(QString("error-message"), ::OpenAPI::toJsonValue(m_error_message));
    }
    if (m_exec_results.size() > 0) {
        obj.insert(QString("exec-results"), ::OpenAPI::toJsonValue(m_exec_results));
    }
    if (m_http_redirect_url_isSet) {
        obj.insert(QString("http-redirect-url"), ::OpenAPI::toJsonValue(m_http_redirect_url));
    }
    if (m_http_status_code_isSet) {
        obj.insert(QString("http-status-code"), ::OpenAPI::toJsonValue(m_http_status_code));
    }
    if (m_http_status_message_isSet) {
        obj.insert(QString("http-status-message"), ::OpenAPI::toJsonValue(m_http_status_message));
    }
    if (m_is_error_isSet) {
        obj.insert(QString("is-error"), ::OpenAPI::toJsonValue(m_is_error));
    }
    if (m_is_http_ok_isSet) {
        obj.insert(QString("is-http-ok"), ::OpenAPI::toJsonValue(m_is_http_ok));
    }
    if (m_is_http_redirect_isSet) {
        obj.insert(QString("is-http-redirect"), ::OpenAPI::toJsonValue(m_is_http_redirect));
    }
    if (m_is_secure_isSet) {
        obj.insert(QString("is-secure"), ::OpenAPI::toJsonValue(m_is_secure));
    }
    if (m_is_timeout_isSet) {
        obj.insert(QString("is-timeout"), ::OpenAPI::toJsonValue(m_is_timeout));
    }
    if (m_language_code_isSet) {
        obj.insert(QString("language-code"), ::OpenAPI::toJsonValue(m_language_code));
    }
    if (m_load_time_isSet) {
        obj.insert(QString("load-time"), ::OpenAPI::toJsonValue(m_load_time));
    }
    if (m_mime_type_isSet) {
        obj.insert(QString("mime-type"), ::OpenAPI::toJsonValue(m_mime_type));
    }
    if (m_response_headers.size() > 0) {
        obj.insert(QString("response-headers"), ::OpenAPI::toJsonValue(m_response_headers));
    }
    if (m_security_details.size() > 0) {
        obj.insert(QString("security-details"), ::OpenAPI::toJsonValue(m_security_details));
    }
    if (m_server_ip_isSet) {
        obj.insert(QString("server-ip"), ::OpenAPI::toJsonValue(m_server_ip));
    }
    if (m_title_isSet) {
        obj.insert(QString("title"), ::OpenAPI::toJsonValue(m_title));
    }
    if (m_url_isSet) {
        obj.insert(QString("url"), ::OpenAPI::toJsonValue(m_url));
    }
    return obj;
}

QString OAIBrowserBotResponse::getContent() const {
    return m_content;
}
void OAIBrowserBotResponse::setContent(const QString &content) {
    m_content = content;
    m_content_isSet = true;
}

bool OAIBrowserBotResponse::is_content_Set() const{
    return m_content_isSet;
}

bool OAIBrowserBotResponse::is_content_Valid() const{
    return m_content_isValid;
}

QList<QString> OAIBrowserBotResponse::getElements() const {
    return m_elements;
}
void OAIBrowserBotResponse::setElements(const QList<QString> &elements) {
    m_elements = elements;
    m_elements_isSet = true;
}

bool OAIBrowserBotResponse::is_elements_Set() const{
    return m_elements_isSet;
}

bool OAIBrowserBotResponse::is_elements_Valid() const{
    return m_elements_isValid;
}

QString OAIBrowserBotResponse::getErrorMessage() const {
    return m_error_message;
}
void OAIBrowserBotResponse::setErrorMessage(const QString &error_message) {
    m_error_message = error_message;
    m_error_message_isSet = true;
}

bool OAIBrowserBotResponse::is_error_message_Set() const{
    return m_error_message_isSet;
}

bool OAIBrowserBotResponse::is_error_message_Valid() const{
    return m_error_message_isValid;
}

QList<QString> OAIBrowserBotResponse::getExecResults() const {
    return m_exec_results;
}
void OAIBrowserBotResponse::setExecResults(const QList<QString> &exec_results) {
    m_exec_results = exec_results;
    m_exec_results_isSet = true;
}

bool OAIBrowserBotResponse::is_exec_results_Set() const{
    return m_exec_results_isSet;
}

bool OAIBrowserBotResponse::is_exec_results_Valid() const{
    return m_exec_results_isValid;
}

QString OAIBrowserBotResponse::getHttpRedirectUrl() const {
    return m_http_redirect_url;
}
void OAIBrowserBotResponse::setHttpRedirectUrl(const QString &http_redirect_url) {
    m_http_redirect_url = http_redirect_url;
    m_http_redirect_url_isSet = true;
}

bool OAIBrowserBotResponse::is_http_redirect_url_Set() const{
    return m_http_redirect_url_isSet;
}

bool OAIBrowserBotResponse::is_http_redirect_url_Valid() const{
    return m_http_redirect_url_isValid;
}

qint32 OAIBrowserBotResponse::getHttpStatusCode() const {
    return m_http_status_code;
}
void OAIBrowserBotResponse::setHttpStatusCode(const qint32 &http_status_code) {
    m_http_status_code = http_status_code;
    m_http_status_code_isSet = true;
}

bool OAIBrowserBotResponse::is_http_status_code_Set() const{
    return m_http_status_code_isSet;
}

bool OAIBrowserBotResponse::is_http_status_code_Valid() const{
    return m_http_status_code_isValid;
}

QString OAIBrowserBotResponse::getHttpStatusMessage() const {
    return m_http_status_message;
}
void OAIBrowserBotResponse::setHttpStatusMessage(const QString &http_status_message) {
    m_http_status_message = http_status_message;
    m_http_status_message_isSet = true;
}

bool OAIBrowserBotResponse::is_http_status_message_Set() const{
    return m_http_status_message_isSet;
}

bool OAIBrowserBotResponse::is_http_status_message_Valid() const{
    return m_http_status_message_isValid;
}

bool OAIBrowserBotResponse::isIsError() const {
    return m_is_error;
}
void OAIBrowserBotResponse::setIsError(const bool &is_error) {
    m_is_error = is_error;
    m_is_error_isSet = true;
}

bool OAIBrowserBotResponse::is_is_error_Set() const{
    return m_is_error_isSet;
}

bool OAIBrowserBotResponse::is_is_error_Valid() const{
    return m_is_error_isValid;
}

bool OAIBrowserBotResponse::isIsHttpOk() const {
    return m_is_http_ok;
}
void OAIBrowserBotResponse::setIsHttpOk(const bool &is_http_ok) {
    m_is_http_ok = is_http_ok;
    m_is_http_ok_isSet = true;
}

bool OAIBrowserBotResponse::is_is_http_ok_Set() const{
    return m_is_http_ok_isSet;
}

bool OAIBrowserBotResponse::is_is_http_ok_Valid() const{
    return m_is_http_ok_isValid;
}

bool OAIBrowserBotResponse::isIsHttpRedirect() const {
    return m_is_http_redirect;
}
void OAIBrowserBotResponse::setIsHttpRedirect(const bool &is_http_redirect) {
    m_is_http_redirect = is_http_redirect;
    m_is_http_redirect_isSet = true;
}

bool OAIBrowserBotResponse::is_is_http_redirect_Set() const{
    return m_is_http_redirect_isSet;
}

bool OAIBrowserBotResponse::is_is_http_redirect_Valid() const{
    return m_is_http_redirect_isValid;
}

bool OAIBrowserBotResponse::isIsSecure() const {
    return m_is_secure;
}
void OAIBrowserBotResponse::setIsSecure(const bool &is_secure) {
    m_is_secure = is_secure;
    m_is_secure_isSet = true;
}

bool OAIBrowserBotResponse::is_is_secure_Set() const{
    return m_is_secure_isSet;
}

bool OAIBrowserBotResponse::is_is_secure_Valid() const{
    return m_is_secure_isValid;
}

bool OAIBrowserBotResponse::isIsTimeout() const {
    return m_is_timeout;
}
void OAIBrowserBotResponse::setIsTimeout(const bool &is_timeout) {
    m_is_timeout = is_timeout;
    m_is_timeout_isSet = true;
}

bool OAIBrowserBotResponse::is_is_timeout_Set() const{
    return m_is_timeout_isSet;
}

bool OAIBrowserBotResponse::is_is_timeout_Valid() const{
    return m_is_timeout_isValid;
}

QString OAIBrowserBotResponse::getLanguageCode() const {
    return m_language_code;
}
void OAIBrowserBotResponse::setLanguageCode(const QString &language_code) {
    m_language_code = language_code;
    m_language_code_isSet = true;
}

bool OAIBrowserBotResponse::is_language_code_Set() const{
    return m_language_code_isSet;
}

bool OAIBrowserBotResponse::is_language_code_Valid() const{
    return m_language_code_isValid;
}

double OAIBrowserBotResponse::getLoadTime() const {
    return m_load_time;
}
void OAIBrowserBotResponse::setLoadTime(const double &load_time) {
    m_load_time = load_time;
    m_load_time_isSet = true;
}

bool OAIBrowserBotResponse::is_load_time_Set() const{
    return m_load_time_isSet;
}

bool OAIBrowserBotResponse::is_load_time_Valid() const{
    return m_load_time_isValid;
}

QString OAIBrowserBotResponse::getMimeType() const {
    return m_mime_type;
}
void OAIBrowserBotResponse::setMimeType(const QString &mime_type) {
    m_mime_type = mime_type;
    m_mime_type_isSet = true;
}

bool OAIBrowserBotResponse::is_mime_type_Set() const{
    return m_mime_type_isSet;
}

bool OAIBrowserBotResponse::is_mime_type_Valid() const{
    return m_mime_type_isValid;
}

QMap<QString, QString> OAIBrowserBotResponse::getResponseHeaders() const {
    return m_response_headers;
}
void OAIBrowserBotResponse::setResponseHeaders(const QMap<QString, QString> &response_headers) {
    m_response_headers = response_headers;
    m_response_headers_isSet = true;
}

bool OAIBrowserBotResponse::is_response_headers_Set() const{
    return m_response_headers_isSet;
}

bool OAIBrowserBotResponse::is_response_headers_Valid() const{
    return m_response_headers_isValid;
}

QMap<QString, QString> OAIBrowserBotResponse::getSecurityDetails() const {
    return m_security_details;
}
void OAIBrowserBotResponse::setSecurityDetails(const QMap<QString, QString> &security_details) {
    m_security_details = security_details;
    m_security_details_isSet = true;
}

bool OAIBrowserBotResponse::is_security_details_Set() const{
    return m_security_details_isSet;
}

bool OAIBrowserBotResponse::is_security_details_Valid() const{
    return m_security_details_isValid;
}

QString OAIBrowserBotResponse::getServerIp() const {
    return m_server_ip;
}
void OAIBrowserBotResponse::setServerIp(const QString &server_ip) {
    m_server_ip = server_ip;
    m_server_ip_isSet = true;
}

bool OAIBrowserBotResponse::is_server_ip_Set() const{
    return m_server_ip_isSet;
}

bool OAIBrowserBotResponse::is_server_ip_Valid() const{
    return m_server_ip_isValid;
}

QString OAIBrowserBotResponse::getTitle() const {
    return m_title;
}
void OAIBrowserBotResponse::setTitle(const QString &title) {
    m_title = title;
    m_title_isSet = true;
}

bool OAIBrowserBotResponse::is_title_Set() const{
    return m_title_isSet;
}

bool OAIBrowserBotResponse::is_title_Valid() const{
    return m_title_isValid;
}

QString OAIBrowserBotResponse::getUrl() const {
    return m_url;
}
void OAIBrowserBotResponse::setUrl(const QString &url) {
    m_url = url;
    m_url_isSet = true;
}

bool OAIBrowserBotResponse::is_url_Set() const{
    return m_url_isSet;
}

bool OAIBrowserBotResponse::is_url_Valid() const{
    return m_url_isValid;
}

bool OAIBrowserBotResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_content_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_elements.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_error_message_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_exec_results.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_http_redirect_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_http_status_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_http_status_message_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_error_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_http_ok_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_http_redirect_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_secure_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_timeout_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_language_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_load_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_mime_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_response_headers.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_security_details.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_server_ip_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_title_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_url_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIBrowserBotResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_content_isValid && m_elements_isValid && m_error_message_isValid && m_exec_results_isValid && m_http_redirect_url_isValid && m_http_status_code_isValid && m_http_status_message_isValid && m_is_error_isValid && m_is_http_ok_isValid && m_is_http_redirect_isValid && m_is_secure_isValid && m_is_timeout_isValid && m_language_code_isValid && m_load_time_isValid && m_mime_type_isValid && m_response_headers_isValid && m_security_details_isValid && m_server_ip_isValid && m_title_isValid && m_url_isValid && true;
}

} // namespace OpenAPI
