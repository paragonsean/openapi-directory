/**
 * Neutrino API
 * The general-purpose API
 *
 * The version of the OpenAPI document: 3.6.4
 * Contact: ops@neutrinoapi.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIImagingApi_H
#define OAI_OAIImagingApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIAPIError.h"
#include "OAIHttpFileElement.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIImagingApi : public QObject {
    Q_OBJECT

public:
    OAIImagingApi(const int timeOut = 0);
    ~OAIImagingApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  content QString [required]
    * @param[in]  css QString [optional]
    * @param[in]  delay qint32 [optional]
    * @param[in]  footer QString [optional]
    * @param[in]  format QString [optional]
    * @param[in]  grayscale bool [optional]
    * @param[in]  header QString [optional]
    * @param[in]  ignore_certificate_errors bool [optional]
    * @param[in]  image_height qint32 [optional]
    * @param[in]  image_width qint32 [optional]
    * @param[in]  landscape bool [optional]
    * @param[in]  margin double [optional]
    * @param[in]  margin_bottom double [optional]
    * @param[in]  margin_left double [optional]
    * @param[in]  margin_right double [optional]
    * @param[in]  margin_top double [optional]
    * @param[in]  page_height double [optional]
    * @param[in]  page_size QString [optional]
    * @param[in]  page_width double [optional]
    * @param[in]  timeout qint32 [optional]
    * @param[in]  title QString [optional]
    * @param[in]  zoom double [optional]
    */
    virtual void hTMLRender(const QString &content, const ::OpenAPI::OptionalParam<QString> &css = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &delay = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &footer = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &format = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &grayscale = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &header = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &ignore_certificate_errors = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<qint32> &image_height = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &image_width = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<bool> &landscape = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<double> &margin = ::OpenAPI::OptionalParam<double>(), const ::OpenAPI::OptionalParam<double> &margin_bottom = ::OpenAPI::OptionalParam<double>(), const ::OpenAPI::OptionalParam<double> &margin_left = ::OpenAPI::OptionalParam<double>(), const ::OpenAPI::OptionalParam<double> &margin_right = ::OpenAPI::OptionalParam<double>(), const ::OpenAPI::OptionalParam<double> &margin_top = ::OpenAPI::OptionalParam<double>(), const ::OpenAPI::OptionalParam<double> &page_height = ::OpenAPI::OptionalParam<double>(), const ::OpenAPI::OptionalParam<QString> &page_size = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<double> &page_width = ::OpenAPI::OptionalParam<double>(), const ::OpenAPI::OptionalParam<qint32> &timeout = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &title = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<double> &zoom = ::OpenAPI::OptionalParam<double>());

    /**
    * @param[in]  image_url QString [required]
    * @param[in]  width qint32 [required]
    * @param[in]  bg_color QString [optional]
    * @param[in]  format QString [optional]
    * @param[in]  height qint32 [optional]
    * @param[in]  resize_mode QString [optional]
    */
    virtual void imageResize(const QString &image_url, const qint32 &width, const ::OpenAPI::OptionalParam<QString> &bg_color = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &format = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &height = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &resize_mode = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  image_url QString [required]
    * @param[in]  watermark_url QString [required]
    * @param[in]  bg_color QString [optional]
    * @param[in]  format QString [optional]
    * @param[in]  height qint32 [optional]
    * @param[in]  opacity qint32 [optional]
    * @param[in]  position QString [optional]
    * @param[in]  resize_mode QString [optional]
    * @param[in]  width qint32 [optional]
    */
    virtual void imageWatermark(const QString &image_url, const QString &watermark_url, const ::OpenAPI::OptionalParam<QString> &bg_color = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &format = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &height = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &opacity = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &position = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &resize_mode = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &width = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  content QString [required]
    * @param[in]  bg_color QString [optional]
    * @param[in]  fg_color QString [optional]
    * @param[in]  height qint32 [optional]
    * @param[in]  width qint32 [optional]
    */
    virtual void qRCode(const QString &content, const ::OpenAPI::OptionalParam<QString> &bg_color = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fg_color = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &height = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &width = ::OpenAPI::OptionalParam<qint32>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void hTMLRenderCallback(OAIHttpRequestWorker *worker);
    void imageResizeCallback(OAIHttpRequestWorker *worker);
    void imageWatermarkCallback(OAIHttpRequestWorker *worker);
    void qRCodeCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void hTMLRenderSignal(OAIHttpFileElement summary);
    void imageResizeSignal(OAIHttpFileElement summary);
    void imageWatermarkSignal(OAIHttpFileElement summary);
    void qRCodeSignal(OAIHttpFileElement summary);


    void hTMLRenderSignalFull(OAIHttpRequestWorker *worker, OAIHttpFileElement summary);
    void imageResizeSignalFull(OAIHttpRequestWorker *worker, OAIHttpFileElement summary);
    void imageWatermarkSignalFull(OAIHttpRequestWorker *worker, OAIHttpFileElement summary);
    void qRCodeSignalFull(OAIHttpRequestWorker *worker, OAIHttpFileElement summary);

    Q_DECL_DEPRECATED_X("Use hTMLRenderSignalError() instead")
    void hTMLRenderSignalE(OAIHttpFileElement summary, QNetworkReply::NetworkError error_type, QString error_str);
    void hTMLRenderSignalError(OAIHttpFileElement summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use imageResizeSignalError() instead")
    void imageResizeSignalE(OAIHttpFileElement summary, QNetworkReply::NetworkError error_type, QString error_str);
    void imageResizeSignalError(OAIHttpFileElement summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use imageWatermarkSignalError() instead")
    void imageWatermarkSignalE(OAIHttpFileElement summary, QNetworkReply::NetworkError error_type, QString error_str);
    void imageWatermarkSignalError(OAIHttpFileElement summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use qRCodeSignalError() instead")
    void qRCodeSignalE(OAIHttpFileElement summary, QNetworkReply::NetworkError error_type, QString error_str);
    void qRCodeSignalError(OAIHttpFileElement summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use hTMLRenderSignalErrorFull() instead")
    void hTMLRenderSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void hTMLRenderSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use imageResizeSignalErrorFull() instead")
    void imageResizeSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void imageResizeSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use imageWatermarkSignalErrorFull() instead")
    void imageWatermarkSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void imageWatermarkSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use qRCodeSignalErrorFull() instead")
    void qRCodeSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void qRCodeSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
