/**
 * Neutrino API
 * The general-purpose API
 *
 * The version of the OpenAPI document: 3.6.4
 * Contact: ops@neutrinoapi.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIBadWordFilterResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIBadWordFilterResponse::OAIBadWordFilterResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIBadWordFilterResponse::OAIBadWordFilterResponse() {
    this->initializeModel();
}

OAIBadWordFilterResponse::~OAIBadWordFilterResponse() {}

void OAIBadWordFilterResponse::initializeModel() {

    m_bad_words_list_isSet = false;
    m_bad_words_list_isValid = false;

    m_bad_words_total_isSet = false;
    m_bad_words_total_isValid = false;

    m_censored_content_isSet = false;
    m_censored_content_isValid = false;

    m_is_bad_isSet = false;
    m_is_bad_isValid = false;
}

void OAIBadWordFilterResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIBadWordFilterResponse::fromJsonObject(QJsonObject json) {

    m_bad_words_list_isValid = ::OpenAPI::fromJsonValue(m_bad_words_list, json[QString("bad-words-list")]);
    m_bad_words_list_isSet = !json[QString("bad-words-list")].isNull() && m_bad_words_list_isValid;

    m_bad_words_total_isValid = ::OpenAPI::fromJsonValue(m_bad_words_total, json[QString("bad-words-total")]);
    m_bad_words_total_isSet = !json[QString("bad-words-total")].isNull() && m_bad_words_total_isValid;

    m_censored_content_isValid = ::OpenAPI::fromJsonValue(m_censored_content, json[QString("censored-content")]);
    m_censored_content_isSet = !json[QString("censored-content")].isNull() && m_censored_content_isValid;

    m_is_bad_isValid = ::OpenAPI::fromJsonValue(m_is_bad, json[QString("is-bad")]);
    m_is_bad_isSet = !json[QString("is-bad")].isNull() && m_is_bad_isValid;
}

QString OAIBadWordFilterResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIBadWordFilterResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_bad_words_list.size() > 0) {
        obj.insert(QString("bad-words-list"), ::OpenAPI::toJsonValue(m_bad_words_list));
    }
    if (m_bad_words_total_isSet) {
        obj.insert(QString("bad-words-total"), ::OpenAPI::toJsonValue(m_bad_words_total));
    }
    if (m_censored_content_isSet) {
        obj.insert(QString("censored-content"), ::OpenAPI::toJsonValue(m_censored_content));
    }
    if (m_is_bad_isSet) {
        obj.insert(QString("is-bad"), ::OpenAPI::toJsonValue(m_is_bad));
    }
    return obj;
}

QList<QString> OAIBadWordFilterResponse::getBadWordsList() const {
    return m_bad_words_list;
}
void OAIBadWordFilterResponse::setBadWordsList(const QList<QString> &bad_words_list) {
    m_bad_words_list = bad_words_list;
    m_bad_words_list_isSet = true;
}

bool OAIBadWordFilterResponse::is_bad_words_list_Set() const{
    return m_bad_words_list_isSet;
}

bool OAIBadWordFilterResponse::is_bad_words_list_Valid() const{
    return m_bad_words_list_isValid;
}

qint32 OAIBadWordFilterResponse::getBadWordsTotal() const {
    return m_bad_words_total;
}
void OAIBadWordFilterResponse::setBadWordsTotal(const qint32 &bad_words_total) {
    m_bad_words_total = bad_words_total;
    m_bad_words_total_isSet = true;
}

bool OAIBadWordFilterResponse::is_bad_words_total_Set() const{
    return m_bad_words_total_isSet;
}

bool OAIBadWordFilterResponse::is_bad_words_total_Valid() const{
    return m_bad_words_total_isValid;
}

QString OAIBadWordFilterResponse::getCensoredContent() const {
    return m_censored_content;
}
void OAIBadWordFilterResponse::setCensoredContent(const QString &censored_content) {
    m_censored_content = censored_content;
    m_censored_content_isSet = true;
}

bool OAIBadWordFilterResponse::is_censored_content_Set() const{
    return m_censored_content_isSet;
}

bool OAIBadWordFilterResponse::is_censored_content_Valid() const{
    return m_censored_content_isValid;
}

bool OAIBadWordFilterResponse::isIsBad() const {
    return m_is_bad;
}
void OAIBadWordFilterResponse::setIsBad(const bool &is_bad) {
    m_is_bad = is_bad;
    m_is_bad_isSet = true;
}

bool OAIBadWordFilterResponse::is_is_bad_Set() const{
    return m_is_bad_isSet;
}

bool OAIBadWordFilterResponse::is_is_bad_Valid() const{
    return m_is_bad_isValid;
}

bool OAIBadWordFilterResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_bad_words_list.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_bad_words_total_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_censored_content_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_bad_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIBadWordFilterResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_bad_words_list_isValid && m_bad_words_total_isValid && m_censored_content_isValid && m_is_bad_isValid && true;
}

} // namespace OpenAPI
