/**
 * Neutrino API
 * The general-purpose API
 *
 * The version of the OpenAPI document: 3.6.4
 * Contact: ops@neutrinoapi.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIIPProbeResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIIPProbeResponse::OAIIPProbeResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIIPProbeResponse::OAIIPProbeResponse() {
    this->initializeModel();
}

OAIIPProbeResponse::~OAIIPProbeResponse() {}

void OAIIPProbeResponse::initializeModel() {

    m_as_age_isSet = false;
    m_as_age_isValid = false;

    m_as_cidr_isSet = false;
    m_as_cidr_isValid = false;

    m_as_country_code_isSet = false;
    m_as_country_code_isValid = false;

    m_as_country_code3_isSet = false;
    m_as_country_code3_isValid = false;

    m_as_description_isSet = false;
    m_as_description_isValid = false;

    m_as_domains_isSet = false;
    m_as_domains_isValid = false;

    m_asn_isSet = false;
    m_asn_isValid = false;

    m_city_isSet = false;
    m_city_isValid = false;

    m_continent_code_isSet = false;
    m_continent_code_isValid = false;

    m_country_isSet = false;
    m_country_isValid = false;

    m_country_code_isSet = false;
    m_country_code_isValid = false;

    m_country_code3_isSet = false;
    m_country_code3_isValid = false;

    m_currency_code_isSet = false;
    m_currency_code_isValid = false;

    m_host_domain_isSet = false;
    m_host_domain_isValid = false;

    m_hostname_isSet = false;
    m_hostname_isValid = false;

    m_ip_isSet = false;
    m_ip_isValid = false;

    m_is_bogon_isSet = false;
    m_is_bogon_isValid = false;

    m_is_hosting_isSet = false;
    m_is_hosting_isValid = false;

    m_is_isp_isSet = false;
    m_is_isp_isValid = false;

    m_is_proxy_isSet = false;
    m_is_proxy_isValid = false;

    m_is_v4_mapped_isSet = false;
    m_is_v4_mapped_isValid = false;

    m_is_v6_isSet = false;
    m_is_v6_isValid = false;

    m_is_vpn_isSet = false;
    m_is_vpn_isValid = false;

    m_provider_description_isSet = false;
    m_provider_description_isValid = false;

    m_provider_domain_isSet = false;
    m_provider_domain_isValid = false;

    m_provider_type_isSet = false;
    m_provider_type_isValid = false;

    m_provider_website_isSet = false;
    m_provider_website_isValid = false;

    m_region_isSet = false;
    m_region_isValid = false;

    m_region_code_isSet = false;
    m_region_code_isValid = false;

    m_r_valid_isSet = false;
    m_r_valid_isValid = false;

    m_vpn_domain_isSet = false;
    m_vpn_domain_isValid = false;
}

void OAIIPProbeResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIIPProbeResponse::fromJsonObject(QJsonObject json) {

    m_as_age_isValid = ::OpenAPI::fromJsonValue(m_as_age, json[QString("as-age")]);
    m_as_age_isSet = !json[QString("as-age")].isNull() && m_as_age_isValid;

    m_as_cidr_isValid = ::OpenAPI::fromJsonValue(m_as_cidr, json[QString("as-cidr")]);
    m_as_cidr_isSet = !json[QString("as-cidr")].isNull() && m_as_cidr_isValid;

    m_as_country_code_isValid = ::OpenAPI::fromJsonValue(m_as_country_code, json[QString("as-country-code")]);
    m_as_country_code_isSet = !json[QString("as-country-code")].isNull() && m_as_country_code_isValid;

    m_as_country_code3_isValid = ::OpenAPI::fromJsonValue(m_as_country_code3, json[QString("as-country-code3")]);
    m_as_country_code3_isSet = !json[QString("as-country-code3")].isNull() && m_as_country_code3_isValid;

    m_as_description_isValid = ::OpenAPI::fromJsonValue(m_as_description, json[QString("as-description")]);
    m_as_description_isSet = !json[QString("as-description")].isNull() && m_as_description_isValid;

    m_as_domains_isValid = ::OpenAPI::fromJsonValue(m_as_domains, json[QString("as-domains")]);
    m_as_domains_isSet = !json[QString("as-domains")].isNull() && m_as_domains_isValid;

    m_asn_isValid = ::OpenAPI::fromJsonValue(m_asn, json[QString("asn")]);
    m_asn_isSet = !json[QString("asn")].isNull() && m_asn_isValid;

    m_city_isValid = ::OpenAPI::fromJsonValue(m_city, json[QString("city")]);
    m_city_isSet = !json[QString("city")].isNull() && m_city_isValid;

    m_continent_code_isValid = ::OpenAPI::fromJsonValue(m_continent_code, json[QString("continent-code")]);
    m_continent_code_isSet = !json[QString("continent-code")].isNull() && m_continent_code_isValid;

    m_country_isValid = ::OpenAPI::fromJsonValue(m_country, json[QString("country")]);
    m_country_isSet = !json[QString("country")].isNull() && m_country_isValid;

    m_country_code_isValid = ::OpenAPI::fromJsonValue(m_country_code, json[QString("country-code")]);
    m_country_code_isSet = !json[QString("country-code")].isNull() && m_country_code_isValid;

    m_country_code3_isValid = ::OpenAPI::fromJsonValue(m_country_code3, json[QString("country-code3")]);
    m_country_code3_isSet = !json[QString("country-code3")].isNull() && m_country_code3_isValid;

    m_currency_code_isValid = ::OpenAPI::fromJsonValue(m_currency_code, json[QString("currency-code")]);
    m_currency_code_isSet = !json[QString("currency-code")].isNull() && m_currency_code_isValid;

    m_host_domain_isValid = ::OpenAPI::fromJsonValue(m_host_domain, json[QString("host-domain")]);
    m_host_domain_isSet = !json[QString("host-domain")].isNull() && m_host_domain_isValid;

    m_hostname_isValid = ::OpenAPI::fromJsonValue(m_hostname, json[QString("hostname")]);
    m_hostname_isSet = !json[QString("hostname")].isNull() && m_hostname_isValid;

    m_ip_isValid = ::OpenAPI::fromJsonValue(m_ip, json[QString("ip")]);
    m_ip_isSet = !json[QString("ip")].isNull() && m_ip_isValid;

    m_is_bogon_isValid = ::OpenAPI::fromJsonValue(m_is_bogon, json[QString("is-bogon")]);
    m_is_bogon_isSet = !json[QString("is-bogon")].isNull() && m_is_bogon_isValid;

    m_is_hosting_isValid = ::OpenAPI::fromJsonValue(m_is_hosting, json[QString("is-hosting")]);
    m_is_hosting_isSet = !json[QString("is-hosting")].isNull() && m_is_hosting_isValid;

    m_is_isp_isValid = ::OpenAPI::fromJsonValue(m_is_isp, json[QString("is-isp")]);
    m_is_isp_isSet = !json[QString("is-isp")].isNull() && m_is_isp_isValid;

    m_is_proxy_isValid = ::OpenAPI::fromJsonValue(m_is_proxy, json[QString("is-proxy")]);
    m_is_proxy_isSet = !json[QString("is-proxy")].isNull() && m_is_proxy_isValid;

    m_is_v4_mapped_isValid = ::OpenAPI::fromJsonValue(m_is_v4_mapped, json[QString("is-v4-mapped")]);
    m_is_v4_mapped_isSet = !json[QString("is-v4-mapped")].isNull() && m_is_v4_mapped_isValid;

    m_is_v6_isValid = ::OpenAPI::fromJsonValue(m_is_v6, json[QString("is-v6")]);
    m_is_v6_isSet = !json[QString("is-v6")].isNull() && m_is_v6_isValid;

    m_is_vpn_isValid = ::OpenAPI::fromJsonValue(m_is_vpn, json[QString("is-vpn")]);
    m_is_vpn_isSet = !json[QString("is-vpn")].isNull() && m_is_vpn_isValid;

    m_provider_description_isValid = ::OpenAPI::fromJsonValue(m_provider_description, json[QString("provider-description")]);
    m_provider_description_isSet = !json[QString("provider-description")].isNull() && m_provider_description_isValid;

    m_provider_domain_isValid = ::OpenAPI::fromJsonValue(m_provider_domain, json[QString("provider-domain")]);
    m_provider_domain_isSet = !json[QString("provider-domain")].isNull() && m_provider_domain_isValid;

    m_provider_type_isValid = ::OpenAPI::fromJsonValue(m_provider_type, json[QString("provider-type")]);
    m_provider_type_isSet = !json[QString("provider-type")].isNull() && m_provider_type_isValid;

    m_provider_website_isValid = ::OpenAPI::fromJsonValue(m_provider_website, json[QString("provider-website")]);
    m_provider_website_isSet = !json[QString("provider-website")].isNull() && m_provider_website_isValid;

    m_region_isValid = ::OpenAPI::fromJsonValue(m_region, json[QString("region")]);
    m_region_isSet = !json[QString("region")].isNull() && m_region_isValid;

    m_region_code_isValid = ::OpenAPI::fromJsonValue(m_region_code, json[QString("region-code")]);
    m_region_code_isSet = !json[QString("region-code")].isNull() && m_region_code_isValid;

    m_r_valid_isValid = ::OpenAPI::fromJsonValue(m_r_valid, json[QString("valid")]);
    m_r_valid_isSet = !json[QString("valid")].isNull() && m_r_valid_isValid;

    m_vpn_domain_isValid = ::OpenAPI::fromJsonValue(m_vpn_domain, json[QString("vpn-domain")]);
    m_vpn_domain_isSet = !json[QString("vpn-domain")].isNull() && m_vpn_domain_isValid;
}

QString OAIIPProbeResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIIPProbeResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_as_age_isSet) {
        obj.insert(QString("as-age"), ::OpenAPI::toJsonValue(m_as_age));
    }
    if (m_as_cidr_isSet) {
        obj.insert(QString("as-cidr"), ::OpenAPI::toJsonValue(m_as_cidr));
    }
    if (m_as_country_code_isSet) {
        obj.insert(QString("as-country-code"), ::OpenAPI::toJsonValue(m_as_country_code));
    }
    if (m_as_country_code3_isSet) {
        obj.insert(QString("as-country-code3"), ::OpenAPI::toJsonValue(m_as_country_code3));
    }
    if (m_as_description_isSet) {
        obj.insert(QString("as-description"), ::OpenAPI::toJsonValue(m_as_description));
    }
    if (m_as_domains.size() > 0) {
        obj.insert(QString("as-domains"), ::OpenAPI::toJsonValue(m_as_domains));
    }
    if (m_asn_isSet) {
        obj.insert(QString("asn"), ::OpenAPI::toJsonValue(m_asn));
    }
    if (m_city_isSet) {
        obj.insert(QString("city"), ::OpenAPI::toJsonValue(m_city));
    }
    if (m_continent_code_isSet) {
        obj.insert(QString("continent-code"), ::OpenAPI::toJsonValue(m_continent_code));
    }
    if (m_country_isSet) {
        obj.insert(QString("country"), ::OpenAPI::toJsonValue(m_country));
    }
    if (m_country_code_isSet) {
        obj.insert(QString("country-code"), ::OpenAPI::toJsonValue(m_country_code));
    }
    if (m_country_code3_isSet) {
        obj.insert(QString("country-code3"), ::OpenAPI::toJsonValue(m_country_code3));
    }
    if (m_currency_code_isSet) {
        obj.insert(QString("currency-code"), ::OpenAPI::toJsonValue(m_currency_code));
    }
    if (m_host_domain_isSet) {
        obj.insert(QString("host-domain"), ::OpenAPI::toJsonValue(m_host_domain));
    }
    if (m_hostname_isSet) {
        obj.insert(QString("hostname"), ::OpenAPI::toJsonValue(m_hostname));
    }
    if (m_ip_isSet) {
        obj.insert(QString("ip"), ::OpenAPI::toJsonValue(m_ip));
    }
    if (m_is_bogon_isSet) {
        obj.insert(QString("is-bogon"), ::OpenAPI::toJsonValue(m_is_bogon));
    }
    if (m_is_hosting_isSet) {
        obj.insert(QString("is-hosting"), ::OpenAPI::toJsonValue(m_is_hosting));
    }
    if (m_is_isp_isSet) {
        obj.insert(QString("is-isp"), ::OpenAPI::toJsonValue(m_is_isp));
    }
    if (m_is_proxy_isSet) {
        obj.insert(QString("is-proxy"), ::OpenAPI::toJsonValue(m_is_proxy));
    }
    if (m_is_v4_mapped_isSet) {
        obj.insert(QString("is-v4-mapped"), ::OpenAPI::toJsonValue(m_is_v4_mapped));
    }
    if (m_is_v6_isSet) {
        obj.insert(QString("is-v6"), ::OpenAPI::toJsonValue(m_is_v6));
    }
    if (m_is_vpn_isSet) {
        obj.insert(QString("is-vpn"), ::OpenAPI::toJsonValue(m_is_vpn));
    }
    if (m_provider_description_isSet) {
        obj.insert(QString("provider-description"), ::OpenAPI::toJsonValue(m_provider_description));
    }
    if (m_provider_domain_isSet) {
        obj.insert(QString("provider-domain"), ::OpenAPI::toJsonValue(m_provider_domain));
    }
    if (m_provider_type_isSet) {
        obj.insert(QString("provider-type"), ::OpenAPI::toJsonValue(m_provider_type));
    }
    if (m_provider_website_isSet) {
        obj.insert(QString("provider-website"), ::OpenAPI::toJsonValue(m_provider_website));
    }
    if (m_region_isSet) {
        obj.insert(QString("region"), ::OpenAPI::toJsonValue(m_region));
    }
    if (m_region_code_isSet) {
        obj.insert(QString("region-code"), ::OpenAPI::toJsonValue(m_region_code));
    }
    if (m_r_valid_isSet) {
        obj.insert(QString("valid"), ::OpenAPI::toJsonValue(m_r_valid));
    }
    if (m_vpn_domain_isSet) {
        obj.insert(QString("vpn-domain"), ::OpenAPI::toJsonValue(m_vpn_domain));
    }
    return obj;
}

qint32 OAIIPProbeResponse::getAsAge() const {
    return m_as_age;
}
void OAIIPProbeResponse::setAsAge(const qint32 &as_age) {
    m_as_age = as_age;
    m_as_age_isSet = true;
}

bool OAIIPProbeResponse::is_as_age_Set() const{
    return m_as_age_isSet;
}

bool OAIIPProbeResponse::is_as_age_Valid() const{
    return m_as_age_isValid;
}

QString OAIIPProbeResponse::getAsCidr() const {
    return m_as_cidr;
}
void OAIIPProbeResponse::setAsCidr(const QString &as_cidr) {
    m_as_cidr = as_cidr;
    m_as_cidr_isSet = true;
}

bool OAIIPProbeResponse::is_as_cidr_Set() const{
    return m_as_cidr_isSet;
}

bool OAIIPProbeResponse::is_as_cidr_Valid() const{
    return m_as_cidr_isValid;
}

QString OAIIPProbeResponse::getAsCountryCode() const {
    return m_as_country_code;
}
void OAIIPProbeResponse::setAsCountryCode(const QString &as_country_code) {
    m_as_country_code = as_country_code;
    m_as_country_code_isSet = true;
}

bool OAIIPProbeResponse::is_as_country_code_Set() const{
    return m_as_country_code_isSet;
}

bool OAIIPProbeResponse::is_as_country_code_Valid() const{
    return m_as_country_code_isValid;
}

QString OAIIPProbeResponse::getAsCountryCode3() const {
    return m_as_country_code3;
}
void OAIIPProbeResponse::setAsCountryCode3(const QString &as_country_code3) {
    m_as_country_code3 = as_country_code3;
    m_as_country_code3_isSet = true;
}

bool OAIIPProbeResponse::is_as_country_code3_Set() const{
    return m_as_country_code3_isSet;
}

bool OAIIPProbeResponse::is_as_country_code3_Valid() const{
    return m_as_country_code3_isValid;
}

QString OAIIPProbeResponse::getAsDescription() const {
    return m_as_description;
}
void OAIIPProbeResponse::setAsDescription(const QString &as_description) {
    m_as_description = as_description;
    m_as_description_isSet = true;
}

bool OAIIPProbeResponse::is_as_description_Set() const{
    return m_as_description_isSet;
}

bool OAIIPProbeResponse::is_as_description_Valid() const{
    return m_as_description_isValid;
}

QList<QString> OAIIPProbeResponse::getAsDomains() const {
    return m_as_domains;
}
void OAIIPProbeResponse::setAsDomains(const QList<QString> &as_domains) {
    m_as_domains = as_domains;
    m_as_domains_isSet = true;
}

bool OAIIPProbeResponse::is_as_domains_Set() const{
    return m_as_domains_isSet;
}

bool OAIIPProbeResponse::is_as_domains_Valid() const{
    return m_as_domains_isValid;
}

QString OAIIPProbeResponse::getAsn() const {
    return m_asn;
}
void OAIIPProbeResponse::setAsn(const QString &asn) {
    m_asn = asn;
    m_asn_isSet = true;
}

bool OAIIPProbeResponse::is_asn_Set() const{
    return m_asn_isSet;
}

bool OAIIPProbeResponse::is_asn_Valid() const{
    return m_asn_isValid;
}

QString OAIIPProbeResponse::getCity() const {
    return m_city;
}
void OAIIPProbeResponse::setCity(const QString &city) {
    m_city = city;
    m_city_isSet = true;
}

bool OAIIPProbeResponse::is_city_Set() const{
    return m_city_isSet;
}

bool OAIIPProbeResponse::is_city_Valid() const{
    return m_city_isValid;
}

QString OAIIPProbeResponse::getContinentCode() const {
    return m_continent_code;
}
void OAIIPProbeResponse::setContinentCode(const QString &continent_code) {
    m_continent_code = continent_code;
    m_continent_code_isSet = true;
}

bool OAIIPProbeResponse::is_continent_code_Set() const{
    return m_continent_code_isSet;
}

bool OAIIPProbeResponse::is_continent_code_Valid() const{
    return m_continent_code_isValid;
}

QString OAIIPProbeResponse::getCountry() const {
    return m_country;
}
void OAIIPProbeResponse::setCountry(const QString &country) {
    m_country = country;
    m_country_isSet = true;
}

bool OAIIPProbeResponse::is_country_Set() const{
    return m_country_isSet;
}

bool OAIIPProbeResponse::is_country_Valid() const{
    return m_country_isValid;
}

QString OAIIPProbeResponse::getCountryCode() const {
    return m_country_code;
}
void OAIIPProbeResponse::setCountryCode(const QString &country_code) {
    m_country_code = country_code;
    m_country_code_isSet = true;
}

bool OAIIPProbeResponse::is_country_code_Set() const{
    return m_country_code_isSet;
}

bool OAIIPProbeResponse::is_country_code_Valid() const{
    return m_country_code_isValid;
}

QString OAIIPProbeResponse::getCountryCode3() const {
    return m_country_code3;
}
void OAIIPProbeResponse::setCountryCode3(const QString &country_code3) {
    m_country_code3 = country_code3;
    m_country_code3_isSet = true;
}

bool OAIIPProbeResponse::is_country_code3_Set() const{
    return m_country_code3_isSet;
}

bool OAIIPProbeResponse::is_country_code3_Valid() const{
    return m_country_code3_isValid;
}

QString OAIIPProbeResponse::getCurrencyCode() const {
    return m_currency_code;
}
void OAIIPProbeResponse::setCurrencyCode(const QString &currency_code) {
    m_currency_code = currency_code;
    m_currency_code_isSet = true;
}

bool OAIIPProbeResponse::is_currency_code_Set() const{
    return m_currency_code_isSet;
}

bool OAIIPProbeResponse::is_currency_code_Valid() const{
    return m_currency_code_isValid;
}

QString OAIIPProbeResponse::getHostDomain() const {
    return m_host_domain;
}
void OAIIPProbeResponse::setHostDomain(const QString &host_domain) {
    m_host_domain = host_domain;
    m_host_domain_isSet = true;
}

bool OAIIPProbeResponse::is_host_domain_Set() const{
    return m_host_domain_isSet;
}

bool OAIIPProbeResponse::is_host_domain_Valid() const{
    return m_host_domain_isValid;
}

QString OAIIPProbeResponse::getHostname() const {
    return m_hostname;
}
void OAIIPProbeResponse::setHostname(const QString &hostname) {
    m_hostname = hostname;
    m_hostname_isSet = true;
}

bool OAIIPProbeResponse::is_hostname_Set() const{
    return m_hostname_isSet;
}

bool OAIIPProbeResponse::is_hostname_Valid() const{
    return m_hostname_isValid;
}

QString OAIIPProbeResponse::getIp() const {
    return m_ip;
}
void OAIIPProbeResponse::setIp(const QString &ip) {
    m_ip = ip;
    m_ip_isSet = true;
}

bool OAIIPProbeResponse::is_ip_Set() const{
    return m_ip_isSet;
}

bool OAIIPProbeResponse::is_ip_Valid() const{
    return m_ip_isValid;
}

bool OAIIPProbeResponse::isIsBogon() const {
    return m_is_bogon;
}
void OAIIPProbeResponse::setIsBogon(const bool &is_bogon) {
    m_is_bogon = is_bogon;
    m_is_bogon_isSet = true;
}

bool OAIIPProbeResponse::is_is_bogon_Set() const{
    return m_is_bogon_isSet;
}

bool OAIIPProbeResponse::is_is_bogon_Valid() const{
    return m_is_bogon_isValid;
}

bool OAIIPProbeResponse::isIsHosting() const {
    return m_is_hosting;
}
void OAIIPProbeResponse::setIsHosting(const bool &is_hosting) {
    m_is_hosting = is_hosting;
    m_is_hosting_isSet = true;
}

bool OAIIPProbeResponse::is_is_hosting_Set() const{
    return m_is_hosting_isSet;
}

bool OAIIPProbeResponse::is_is_hosting_Valid() const{
    return m_is_hosting_isValid;
}

bool OAIIPProbeResponse::isIsIsp() const {
    return m_is_isp;
}
void OAIIPProbeResponse::setIsIsp(const bool &is_isp) {
    m_is_isp = is_isp;
    m_is_isp_isSet = true;
}

bool OAIIPProbeResponse::is_is_isp_Set() const{
    return m_is_isp_isSet;
}

bool OAIIPProbeResponse::is_is_isp_Valid() const{
    return m_is_isp_isValid;
}

bool OAIIPProbeResponse::isIsProxy() const {
    return m_is_proxy;
}
void OAIIPProbeResponse::setIsProxy(const bool &is_proxy) {
    m_is_proxy = is_proxy;
    m_is_proxy_isSet = true;
}

bool OAIIPProbeResponse::is_is_proxy_Set() const{
    return m_is_proxy_isSet;
}

bool OAIIPProbeResponse::is_is_proxy_Valid() const{
    return m_is_proxy_isValid;
}

bool OAIIPProbeResponse::isIsV4Mapped() const {
    return m_is_v4_mapped;
}
void OAIIPProbeResponse::setIsV4Mapped(const bool &is_v4_mapped) {
    m_is_v4_mapped = is_v4_mapped;
    m_is_v4_mapped_isSet = true;
}

bool OAIIPProbeResponse::is_is_v4_mapped_Set() const{
    return m_is_v4_mapped_isSet;
}

bool OAIIPProbeResponse::is_is_v4_mapped_Valid() const{
    return m_is_v4_mapped_isValid;
}

bool OAIIPProbeResponse::isIsV6() const {
    return m_is_v6;
}
void OAIIPProbeResponse::setIsV6(const bool &is_v6) {
    m_is_v6 = is_v6;
    m_is_v6_isSet = true;
}

bool OAIIPProbeResponse::is_is_v6_Set() const{
    return m_is_v6_isSet;
}

bool OAIIPProbeResponse::is_is_v6_Valid() const{
    return m_is_v6_isValid;
}

bool OAIIPProbeResponse::isIsVpn() const {
    return m_is_vpn;
}
void OAIIPProbeResponse::setIsVpn(const bool &is_vpn) {
    m_is_vpn = is_vpn;
    m_is_vpn_isSet = true;
}

bool OAIIPProbeResponse::is_is_vpn_Set() const{
    return m_is_vpn_isSet;
}

bool OAIIPProbeResponse::is_is_vpn_Valid() const{
    return m_is_vpn_isValid;
}

QString OAIIPProbeResponse::getProviderDescription() const {
    return m_provider_description;
}
void OAIIPProbeResponse::setProviderDescription(const QString &provider_description) {
    m_provider_description = provider_description;
    m_provider_description_isSet = true;
}

bool OAIIPProbeResponse::is_provider_description_Set() const{
    return m_provider_description_isSet;
}

bool OAIIPProbeResponse::is_provider_description_Valid() const{
    return m_provider_description_isValid;
}

QString OAIIPProbeResponse::getProviderDomain() const {
    return m_provider_domain;
}
void OAIIPProbeResponse::setProviderDomain(const QString &provider_domain) {
    m_provider_domain = provider_domain;
    m_provider_domain_isSet = true;
}

bool OAIIPProbeResponse::is_provider_domain_Set() const{
    return m_provider_domain_isSet;
}

bool OAIIPProbeResponse::is_provider_domain_Valid() const{
    return m_provider_domain_isValid;
}

QString OAIIPProbeResponse::getProviderType() const {
    return m_provider_type;
}
void OAIIPProbeResponse::setProviderType(const QString &provider_type) {
    m_provider_type = provider_type;
    m_provider_type_isSet = true;
}

bool OAIIPProbeResponse::is_provider_type_Set() const{
    return m_provider_type_isSet;
}

bool OAIIPProbeResponse::is_provider_type_Valid() const{
    return m_provider_type_isValid;
}

QString OAIIPProbeResponse::getProviderWebsite() const {
    return m_provider_website;
}
void OAIIPProbeResponse::setProviderWebsite(const QString &provider_website) {
    m_provider_website = provider_website;
    m_provider_website_isSet = true;
}

bool OAIIPProbeResponse::is_provider_website_Set() const{
    return m_provider_website_isSet;
}

bool OAIIPProbeResponse::is_provider_website_Valid() const{
    return m_provider_website_isValid;
}

QString OAIIPProbeResponse::getRegion() const {
    return m_region;
}
void OAIIPProbeResponse::setRegion(const QString &region) {
    m_region = region;
    m_region_isSet = true;
}

bool OAIIPProbeResponse::is_region_Set() const{
    return m_region_isSet;
}

bool OAIIPProbeResponse::is_region_Valid() const{
    return m_region_isValid;
}

QString OAIIPProbeResponse::getRegionCode() const {
    return m_region_code;
}
void OAIIPProbeResponse::setRegionCode(const QString &region_code) {
    m_region_code = region_code;
    m_region_code_isSet = true;
}

bool OAIIPProbeResponse::is_region_code_Set() const{
    return m_region_code_isSet;
}

bool OAIIPProbeResponse::is_region_code_Valid() const{
    return m_region_code_isValid;
}

bool OAIIPProbeResponse::isRValid() const {
    return m_r_valid;
}
void OAIIPProbeResponse::setRValid(const bool &r_valid) {
    m_r_valid = r_valid;
    m_r_valid_isSet = true;
}

bool OAIIPProbeResponse::is_r_valid_Set() const{
    return m_r_valid_isSet;
}

bool OAIIPProbeResponse::is_r_valid_Valid() const{
    return m_r_valid_isValid;
}

QString OAIIPProbeResponse::getVpnDomain() const {
    return m_vpn_domain;
}
void OAIIPProbeResponse::setVpnDomain(const QString &vpn_domain) {
    m_vpn_domain = vpn_domain;
    m_vpn_domain_isSet = true;
}

bool OAIIPProbeResponse::is_vpn_domain_Set() const{
    return m_vpn_domain_isSet;
}

bool OAIIPProbeResponse::is_vpn_domain_Valid() const{
    return m_vpn_domain_isValid;
}

bool OAIIPProbeResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_as_age_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_as_cidr_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_as_country_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_as_country_code3_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_as_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_as_domains.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_asn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_city_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_continent_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_country_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_country_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_country_code3_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_currency_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_host_domain_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_hostname_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_ip_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_bogon_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_hosting_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_isp_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_proxy_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_v4_mapped_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_v6_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_vpn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_provider_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_provider_domain_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_provider_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_provider_website_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_region_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_region_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_r_valid_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_vpn_domain_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIIPProbeResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_as_age_isValid && m_as_cidr_isValid && m_as_country_code_isValid && m_as_country_code3_isValid && m_as_description_isValid && m_as_domains_isValid && m_asn_isValid && m_city_isValid && m_continent_code_isValid && m_country_isValid && m_country_code_isValid && m_country_code3_isValid && m_currency_code_isValid && m_host_domain_isValid && m_hostname_isValid && m_ip_isValid && m_is_bogon_isValid && m_is_hosting_isValid && m_is_isp_isValid && m_is_proxy_isValid && m_is_v4_mapped_isValid && m_is_v6_isValid && m_is_vpn_isValid && m_provider_description_isValid && m_provider_domain_isValid && m_provider_type_isValid && m_provider_website_isValid && m_region_isValid && m_region_code_isValid && m_r_valid_isValid && m_vpn_domain_isValid && true;
}

} // namespace OpenAPI
