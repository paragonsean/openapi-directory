/**
 * Neutrino API
 * The general-purpose API
 *
 * The version of the OpenAPI document: 3.6.4
 * Contact: ops@neutrinoapi.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDomainLookupResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDomainLookupResponse::OAIDomainLookupResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDomainLookupResponse::OAIDomainLookupResponse() {
    this->initializeModel();
}

OAIDomainLookupResponse::~OAIDomainLookupResponse() {}

void OAIDomainLookupResponse::initializeModel() {

    m_age_isSet = false;
    m_age_isValid = false;

    m_blocklists_isSet = false;
    m_blocklists_isValid = false;

    m_dns_provider_isSet = false;
    m_dns_provider_isValid = false;

    m_domain_isSet = false;
    m_domain_isValid = false;

    m_fqdn_isSet = false;
    m_fqdn_isValid = false;

    m_is_adult_isSet = false;
    m_is_adult_isValid = false;

    m_is_gov_isSet = false;
    m_is_gov_isValid = false;

    m_is_malicious_isSet = false;
    m_is_malicious_isValid = false;

    m_is_opennic_isSet = false;
    m_is_opennic_isValid = false;

    m_is_pending_isSet = false;
    m_is_pending_isValid = false;

    m_is_subdomain_isSet = false;
    m_is_subdomain_isValid = false;

    m_mail_provider_isSet = false;
    m_mail_provider_isValid = false;

    m_rank_isSet = false;
    m_rank_isValid = false;

    m_registered_date_isSet = false;
    m_registered_date_isValid = false;

    m_registrar_id_isSet = false;
    m_registrar_id_isValid = false;

    m_registrar_name_isSet = false;
    m_registrar_name_isValid = false;

    m_sensors_isSet = false;
    m_sensors_isValid = false;

    m_tld_isSet = false;
    m_tld_isValid = false;

    m_tld_cc_isSet = false;
    m_tld_cc_isValid = false;

    m_r_valid_isSet = false;
    m_r_valid_isValid = false;
}

void OAIDomainLookupResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDomainLookupResponse::fromJsonObject(QJsonObject json) {

    m_age_isValid = ::OpenAPI::fromJsonValue(m_age, json[QString("age")]);
    m_age_isSet = !json[QString("age")].isNull() && m_age_isValid;

    m_blocklists_isValid = ::OpenAPI::fromJsonValue(m_blocklists, json[QString("blocklists")]);
    m_blocklists_isSet = !json[QString("blocklists")].isNull() && m_blocklists_isValid;

    m_dns_provider_isValid = ::OpenAPI::fromJsonValue(m_dns_provider, json[QString("dns-provider")]);
    m_dns_provider_isSet = !json[QString("dns-provider")].isNull() && m_dns_provider_isValid;

    m_domain_isValid = ::OpenAPI::fromJsonValue(m_domain, json[QString("domain")]);
    m_domain_isSet = !json[QString("domain")].isNull() && m_domain_isValid;

    m_fqdn_isValid = ::OpenAPI::fromJsonValue(m_fqdn, json[QString("fqdn")]);
    m_fqdn_isSet = !json[QString("fqdn")].isNull() && m_fqdn_isValid;

    m_is_adult_isValid = ::OpenAPI::fromJsonValue(m_is_adult, json[QString("is-adult")]);
    m_is_adult_isSet = !json[QString("is-adult")].isNull() && m_is_adult_isValid;

    m_is_gov_isValid = ::OpenAPI::fromJsonValue(m_is_gov, json[QString("is-gov")]);
    m_is_gov_isSet = !json[QString("is-gov")].isNull() && m_is_gov_isValid;

    m_is_malicious_isValid = ::OpenAPI::fromJsonValue(m_is_malicious, json[QString("is-malicious")]);
    m_is_malicious_isSet = !json[QString("is-malicious")].isNull() && m_is_malicious_isValid;

    m_is_opennic_isValid = ::OpenAPI::fromJsonValue(m_is_opennic, json[QString("is-opennic")]);
    m_is_opennic_isSet = !json[QString("is-opennic")].isNull() && m_is_opennic_isValid;

    m_is_pending_isValid = ::OpenAPI::fromJsonValue(m_is_pending, json[QString("is-pending")]);
    m_is_pending_isSet = !json[QString("is-pending")].isNull() && m_is_pending_isValid;

    m_is_subdomain_isValid = ::OpenAPI::fromJsonValue(m_is_subdomain, json[QString("is-subdomain")]);
    m_is_subdomain_isSet = !json[QString("is-subdomain")].isNull() && m_is_subdomain_isValid;

    m_mail_provider_isValid = ::OpenAPI::fromJsonValue(m_mail_provider, json[QString("mail-provider")]);
    m_mail_provider_isSet = !json[QString("mail-provider")].isNull() && m_mail_provider_isValid;

    m_rank_isValid = ::OpenAPI::fromJsonValue(m_rank, json[QString("rank")]);
    m_rank_isSet = !json[QString("rank")].isNull() && m_rank_isValid;

    m_registered_date_isValid = ::OpenAPI::fromJsonValue(m_registered_date, json[QString("registered-date")]);
    m_registered_date_isSet = !json[QString("registered-date")].isNull() && m_registered_date_isValid;

    m_registrar_id_isValid = ::OpenAPI::fromJsonValue(m_registrar_id, json[QString("registrar-id")]);
    m_registrar_id_isSet = !json[QString("registrar-id")].isNull() && m_registrar_id_isValid;

    m_registrar_name_isValid = ::OpenAPI::fromJsonValue(m_registrar_name, json[QString("registrar-name")]);
    m_registrar_name_isSet = !json[QString("registrar-name")].isNull() && m_registrar_name_isValid;

    m_sensors_isValid = ::OpenAPI::fromJsonValue(m_sensors, json[QString("sensors")]);
    m_sensors_isSet = !json[QString("sensors")].isNull() && m_sensors_isValid;

    m_tld_isValid = ::OpenAPI::fromJsonValue(m_tld, json[QString("tld")]);
    m_tld_isSet = !json[QString("tld")].isNull() && m_tld_isValid;

    m_tld_cc_isValid = ::OpenAPI::fromJsonValue(m_tld_cc, json[QString("tld-cc")]);
    m_tld_cc_isSet = !json[QString("tld-cc")].isNull() && m_tld_cc_isValid;

    m_r_valid_isValid = ::OpenAPI::fromJsonValue(m_r_valid, json[QString("valid")]);
    m_r_valid_isSet = !json[QString("valid")].isNull() && m_r_valid_isValid;
}

QString OAIDomainLookupResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDomainLookupResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_age_isSet) {
        obj.insert(QString("age"), ::OpenAPI::toJsonValue(m_age));
    }
    if (m_blocklists.size() > 0) {
        obj.insert(QString("blocklists"), ::OpenAPI::toJsonValue(m_blocklists));
    }
    if (m_dns_provider_isSet) {
        obj.insert(QString("dns-provider"), ::OpenAPI::toJsonValue(m_dns_provider));
    }
    if (m_domain_isSet) {
        obj.insert(QString("domain"), ::OpenAPI::toJsonValue(m_domain));
    }
    if (m_fqdn_isSet) {
        obj.insert(QString("fqdn"), ::OpenAPI::toJsonValue(m_fqdn));
    }
    if (m_is_adult_isSet) {
        obj.insert(QString("is-adult"), ::OpenAPI::toJsonValue(m_is_adult));
    }
    if (m_is_gov_isSet) {
        obj.insert(QString("is-gov"), ::OpenAPI::toJsonValue(m_is_gov));
    }
    if (m_is_malicious_isSet) {
        obj.insert(QString("is-malicious"), ::OpenAPI::toJsonValue(m_is_malicious));
    }
    if (m_is_opennic_isSet) {
        obj.insert(QString("is-opennic"), ::OpenAPI::toJsonValue(m_is_opennic));
    }
    if (m_is_pending_isSet) {
        obj.insert(QString("is-pending"), ::OpenAPI::toJsonValue(m_is_pending));
    }
    if (m_is_subdomain_isSet) {
        obj.insert(QString("is-subdomain"), ::OpenAPI::toJsonValue(m_is_subdomain));
    }
    if (m_mail_provider_isSet) {
        obj.insert(QString("mail-provider"), ::OpenAPI::toJsonValue(m_mail_provider));
    }
    if (m_rank_isSet) {
        obj.insert(QString("rank"), ::OpenAPI::toJsonValue(m_rank));
    }
    if (m_registered_date_isSet) {
        obj.insert(QString("registered-date"), ::OpenAPI::toJsonValue(m_registered_date));
    }
    if (m_registrar_id_isSet) {
        obj.insert(QString("registrar-id"), ::OpenAPI::toJsonValue(m_registrar_id));
    }
    if (m_registrar_name_isSet) {
        obj.insert(QString("registrar-name"), ::OpenAPI::toJsonValue(m_registrar_name));
    }
    if (m_sensors.size() > 0) {
        obj.insert(QString("sensors"), ::OpenAPI::toJsonValue(m_sensors));
    }
    if (m_tld_isSet) {
        obj.insert(QString("tld"), ::OpenAPI::toJsonValue(m_tld));
    }
    if (m_tld_cc_isSet) {
        obj.insert(QString("tld-cc"), ::OpenAPI::toJsonValue(m_tld_cc));
    }
    if (m_r_valid_isSet) {
        obj.insert(QString("valid"), ::OpenAPI::toJsonValue(m_r_valid));
    }
    return obj;
}

qint32 OAIDomainLookupResponse::getAge() const {
    return m_age;
}
void OAIDomainLookupResponse::setAge(const qint32 &age) {
    m_age = age;
    m_age_isSet = true;
}

bool OAIDomainLookupResponse::is_age_Set() const{
    return m_age_isSet;
}

bool OAIDomainLookupResponse::is_age_Valid() const{
    return m_age_isValid;
}

QList<QString> OAIDomainLookupResponse::getBlocklists() const {
    return m_blocklists;
}
void OAIDomainLookupResponse::setBlocklists(const QList<QString> &blocklists) {
    m_blocklists = blocklists;
    m_blocklists_isSet = true;
}

bool OAIDomainLookupResponse::is_blocklists_Set() const{
    return m_blocklists_isSet;
}

bool OAIDomainLookupResponse::is_blocklists_Valid() const{
    return m_blocklists_isValid;
}

QString OAIDomainLookupResponse::getDnsProvider() const {
    return m_dns_provider;
}
void OAIDomainLookupResponse::setDnsProvider(const QString &dns_provider) {
    m_dns_provider = dns_provider;
    m_dns_provider_isSet = true;
}

bool OAIDomainLookupResponse::is_dns_provider_Set() const{
    return m_dns_provider_isSet;
}

bool OAIDomainLookupResponse::is_dns_provider_Valid() const{
    return m_dns_provider_isValid;
}

QString OAIDomainLookupResponse::getDomain() const {
    return m_domain;
}
void OAIDomainLookupResponse::setDomain(const QString &domain) {
    m_domain = domain;
    m_domain_isSet = true;
}

bool OAIDomainLookupResponse::is_domain_Set() const{
    return m_domain_isSet;
}

bool OAIDomainLookupResponse::is_domain_Valid() const{
    return m_domain_isValid;
}

QString OAIDomainLookupResponse::getFqdn() const {
    return m_fqdn;
}
void OAIDomainLookupResponse::setFqdn(const QString &fqdn) {
    m_fqdn = fqdn;
    m_fqdn_isSet = true;
}

bool OAIDomainLookupResponse::is_fqdn_Set() const{
    return m_fqdn_isSet;
}

bool OAIDomainLookupResponse::is_fqdn_Valid() const{
    return m_fqdn_isValid;
}

bool OAIDomainLookupResponse::isIsAdult() const {
    return m_is_adult;
}
void OAIDomainLookupResponse::setIsAdult(const bool &is_adult) {
    m_is_adult = is_adult;
    m_is_adult_isSet = true;
}

bool OAIDomainLookupResponse::is_is_adult_Set() const{
    return m_is_adult_isSet;
}

bool OAIDomainLookupResponse::is_is_adult_Valid() const{
    return m_is_adult_isValid;
}

bool OAIDomainLookupResponse::isIsGov() const {
    return m_is_gov;
}
void OAIDomainLookupResponse::setIsGov(const bool &is_gov) {
    m_is_gov = is_gov;
    m_is_gov_isSet = true;
}

bool OAIDomainLookupResponse::is_is_gov_Set() const{
    return m_is_gov_isSet;
}

bool OAIDomainLookupResponse::is_is_gov_Valid() const{
    return m_is_gov_isValid;
}

bool OAIDomainLookupResponse::isIsMalicious() const {
    return m_is_malicious;
}
void OAIDomainLookupResponse::setIsMalicious(const bool &is_malicious) {
    m_is_malicious = is_malicious;
    m_is_malicious_isSet = true;
}

bool OAIDomainLookupResponse::is_is_malicious_Set() const{
    return m_is_malicious_isSet;
}

bool OAIDomainLookupResponse::is_is_malicious_Valid() const{
    return m_is_malicious_isValid;
}

bool OAIDomainLookupResponse::isIsOpennic() const {
    return m_is_opennic;
}
void OAIDomainLookupResponse::setIsOpennic(const bool &is_opennic) {
    m_is_opennic = is_opennic;
    m_is_opennic_isSet = true;
}

bool OAIDomainLookupResponse::is_is_opennic_Set() const{
    return m_is_opennic_isSet;
}

bool OAIDomainLookupResponse::is_is_opennic_Valid() const{
    return m_is_opennic_isValid;
}

bool OAIDomainLookupResponse::isIsPending() const {
    return m_is_pending;
}
void OAIDomainLookupResponse::setIsPending(const bool &is_pending) {
    m_is_pending = is_pending;
    m_is_pending_isSet = true;
}

bool OAIDomainLookupResponse::is_is_pending_Set() const{
    return m_is_pending_isSet;
}

bool OAIDomainLookupResponse::is_is_pending_Valid() const{
    return m_is_pending_isValid;
}

bool OAIDomainLookupResponse::isIsSubdomain() const {
    return m_is_subdomain;
}
void OAIDomainLookupResponse::setIsSubdomain(const bool &is_subdomain) {
    m_is_subdomain = is_subdomain;
    m_is_subdomain_isSet = true;
}

bool OAIDomainLookupResponse::is_is_subdomain_Set() const{
    return m_is_subdomain_isSet;
}

bool OAIDomainLookupResponse::is_is_subdomain_Valid() const{
    return m_is_subdomain_isValid;
}

QString OAIDomainLookupResponse::getMailProvider() const {
    return m_mail_provider;
}
void OAIDomainLookupResponse::setMailProvider(const QString &mail_provider) {
    m_mail_provider = mail_provider;
    m_mail_provider_isSet = true;
}

bool OAIDomainLookupResponse::is_mail_provider_Set() const{
    return m_mail_provider_isSet;
}

bool OAIDomainLookupResponse::is_mail_provider_Valid() const{
    return m_mail_provider_isValid;
}

qint32 OAIDomainLookupResponse::getRank() const {
    return m_rank;
}
void OAIDomainLookupResponse::setRank(const qint32 &rank) {
    m_rank = rank;
    m_rank_isSet = true;
}

bool OAIDomainLookupResponse::is_rank_Set() const{
    return m_rank_isSet;
}

bool OAIDomainLookupResponse::is_rank_Valid() const{
    return m_rank_isValid;
}

QString OAIDomainLookupResponse::getRegisteredDate() const {
    return m_registered_date;
}
void OAIDomainLookupResponse::setRegisteredDate(const QString &registered_date) {
    m_registered_date = registered_date;
    m_registered_date_isSet = true;
}

bool OAIDomainLookupResponse::is_registered_date_Set() const{
    return m_registered_date_isSet;
}

bool OAIDomainLookupResponse::is_registered_date_Valid() const{
    return m_registered_date_isValid;
}

qint32 OAIDomainLookupResponse::getRegistrarId() const {
    return m_registrar_id;
}
void OAIDomainLookupResponse::setRegistrarId(const qint32 &registrar_id) {
    m_registrar_id = registrar_id;
    m_registrar_id_isSet = true;
}

bool OAIDomainLookupResponse::is_registrar_id_Set() const{
    return m_registrar_id_isSet;
}

bool OAIDomainLookupResponse::is_registrar_id_Valid() const{
    return m_registrar_id_isValid;
}

QString OAIDomainLookupResponse::getRegistrarName() const {
    return m_registrar_name;
}
void OAIDomainLookupResponse::setRegistrarName(const QString &registrar_name) {
    m_registrar_name = registrar_name;
    m_registrar_name_isSet = true;
}

bool OAIDomainLookupResponse::is_registrar_name_Set() const{
    return m_registrar_name_isSet;
}

bool OAIDomainLookupResponse::is_registrar_name_Valid() const{
    return m_registrar_name_isValid;
}

QList<OAIBlocklistSensor> OAIDomainLookupResponse::getSensors() const {
    return m_sensors;
}
void OAIDomainLookupResponse::setSensors(const QList<OAIBlocklistSensor> &sensors) {
    m_sensors = sensors;
    m_sensors_isSet = true;
}

bool OAIDomainLookupResponse::is_sensors_Set() const{
    return m_sensors_isSet;
}

bool OAIDomainLookupResponse::is_sensors_Valid() const{
    return m_sensors_isValid;
}

QString OAIDomainLookupResponse::getTld() const {
    return m_tld;
}
void OAIDomainLookupResponse::setTld(const QString &tld) {
    m_tld = tld;
    m_tld_isSet = true;
}

bool OAIDomainLookupResponse::is_tld_Set() const{
    return m_tld_isSet;
}

bool OAIDomainLookupResponse::is_tld_Valid() const{
    return m_tld_isValid;
}

QString OAIDomainLookupResponse::getTldCc() const {
    return m_tld_cc;
}
void OAIDomainLookupResponse::setTldCc(const QString &tld_cc) {
    m_tld_cc = tld_cc;
    m_tld_cc_isSet = true;
}

bool OAIDomainLookupResponse::is_tld_cc_Set() const{
    return m_tld_cc_isSet;
}

bool OAIDomainLookupResponse::is_tld_cc_Valid() const{
    return m_tld_cc_isValid;
}

bool OAIDomainLookupResponse::isRValid() const {
    return m_r_valid;
}
void OAIDomainLookupResponse::setRValid(const bool &r_valid) {
    m_r_valid = r_valid;
    m_r_valid_isSet = true;
}

bool OAIDomainLookupResponse::is_r_valid_Set() const{
    return m_r_valid_isSet;
}

bool OAIDomainLookupResponse::is_r_valid_Valid() const{
    return m_r_valid_isValid;
}

bool OAIDomainLookupResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_age_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_blocklists.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_dns_provider_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_domain_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_fqdn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_adult_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_gov_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_malicious_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_opennic_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_pending_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_subdomain_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_mail_provider_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_rank_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_registered_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_registrar_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_registrar_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sensors.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_tld_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tld_cc_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_r_valid_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDomainLookupResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_age_isValid && m_blocklists_isValid && m_dns_provider_isValid && m_domain_isValid && m_fqdn_isValid && m_is_adult_isValid && m_is_gov_isValid && m_is_malicious_isValid && m_is_opennic_isValid && m_is_pending_isValid && m_is_subdomain_isValid && m_mail_provider_isValid && m_rank_isValid && m_registered_date_isValid && m_registrar_id_isValid && m_registrar_name_isValid && m_sensors_isValid && m_tld_isValid && m_tld_cc_isValid && m_r_valid_isValid && true;
}

} // namespace OpenAPI
