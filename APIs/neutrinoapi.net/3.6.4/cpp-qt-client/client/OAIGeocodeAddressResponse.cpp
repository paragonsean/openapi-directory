/**
 * Neutrino API
 * The general-purpose API
 *
 * The version of the OpenAPI document: 3.6.4
 * Contact: ops@neutrinoapi.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGeocodeAddressResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGeocodeAddressResponse::OAIGeocodeAddressResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGeocodeAddressResponse::OAIGeocodeAddressResponse() {
    this->initializeModel();
}

OAIGeocodeAddressResponse::~OAIGeocodeAddressResponse() {}

void OAIGeocodeAddressResponse::initializeModel() {

    m_found_isSet = false;
    m_found_isValid = false;

    m_locations_isSet = false;
    m_locations_isValid = false;
}

void OAIGeocodeAddressResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGeocodeAddressResponse::fromJsonObject(QJsonObject json) {

    m_found_isValid = ::OpenAPI::fromJsonValue(m_found, json[QString("found")]);
    m_found_isSet = !json[QString("found")].isNull() && m_found_isValid;

    m_locations_isValid = ::OpenAPI::fromJsonValue(m_locations, json[QString("locations")]);
    m_locations_isSet = !json[QString("locations")].isNull() && m_locations_isValid;
}

QString OAIGeocodeAddressResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGeocodeAddressResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_found_isSet) {
        obj.insert(QString("found"), ::OpenAPI::toJsonValue(m_found));
    }
    if (m_locations.size() > 0) {
        obj.insert(QString("locations"), ::OpenAPI::toJsonValue(m_locations));
    }
    return obj;
}

qint32 OAIGeocodeAddressResponse::getFound() const {
    return m_found;
}
void OAIGeocodeAddressResponse::setFound(const qint32 &found) {
    m_found = found;
    m_found_isSet = true;
}

bool OAIGeocodeAddressResponse::is_found_Set() const{
    return m_found_isSet;
}

bool OAIGeocodeAddressResponse::is_found_Valid() const{
    return m_found_isValid;
}

QList<OAILocation> OAIGeocodeAddressResponse::getLocations() const {
    return m_locations;
}
void OAIGeocodeAddressResponse::setLocations(const QList<OAILocation> &locations) {
    m_locations = locations;
    m_locations_isSet = true;
}

bool OAIGeocodeAddressResponse::is_locations_Set() const{
    return m_locations_isSet;
}

bool OAIGeocodeAddressResponse::is_locations_Valid() const{
    return m_locations_isValid;
}

bool OAIGeocodeAddressResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_found_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_locations.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGeocodeAddressResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_found_isValid && m_locations_isValid && true;
}

} // namespace OpenAPI
