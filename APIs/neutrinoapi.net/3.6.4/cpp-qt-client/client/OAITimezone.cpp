/**
 * Neutrino API
 * The general-purpose API
 *
 * The version of the OpenAPI document: 3.6.4
 * Contact: ops@neutrinoapi.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAITimezone.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAITimezone::OAITimezone(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAITimezone::OAITimezone() {
    this->initializeModel();
}

OAITimezone::~OAITimezone() {}

void OAITimezone::initializeModel() {

    m_abbr_isSet = false;
    m_abbr_isValid = false;

    m_date_isSet = false;
    m_date_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_offset_isSet = false;
    m_offset_isValid = false;

    m_time_isSet = false;
    m_time_isValid = false;
}

void OAITimezone::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAITimezone::fromJsonObject(QJsonObject json) {

    m_abbr_isValid = ::OpenAPI::fromJsonValue(m_abbr, json[QString("abbr")]);
    m_abbr_isSet = !json[QString("abbr")].isNull() && m_abbr_isValid;

    m_date_isValid = ::OpenAPI::fromJsonValue(m_date, json[QString("date")]);
    m_date_isSet = !json[QString("date")].isNull() && m_date_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_offset_isValid = ::OpenAPI::fromJsonValue(m_offset, json[QString("offset")]);
    m_offset_isSet = !json[QString("offset")].isNull() && m_offset_isValid;

    m_time_isValid = ::OpenAPI::fromJsonValue(m_time, json[QString("time")]);
    m_time_isSet = !json[QString("time")].isNull() && m_time_isValid;
}

QString OAITimezone::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAITimezone::asJsonObject() const {
    QJsonObject obj;
    if (m_abbr_isSet) {
        obj.insert(QString("abbr"), ::OpenAPI::toJsonValue(m_abbr));
    }
    if (m_date_isSet) {
        obj.insert(QString("date"), ::OpenAPI::toJsonValue(m_date));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_offset_isSet) {
        obj.insert(QString("offset"), ::OpenAPI::toJsonValue(m_offset));
    }
    if (m_time_isSet) {
        obj.insert(QString("time"), ::OpenAPI::toJsonValue(m_time));
    }
    return obj;
}

QString OAITimezone::getAbbr() const {
    return m_abbr;
}
void OAITimezone::setAbbr(const QString &abbr) {
    m_abbr = abbr;
    m_abbr_isSet = true;
}

bool OAITimezone::is_abbr_Set() const{
    return m_abbr_isSet;
}

bool OAITimezone::is_abbr_Valid() const{
    return m_abbr_isValid;
}

QString OAITimezone::getDate() const {
    return m_date;
}
void OAITimezone::setDate(const QString &date) {
    m_date = date;
    m_date_isSet = true;
}

bool OAITimezone::is_date_Set() const{
    return m_date_isSet;
}

bool OAITimezone::is_date_Valid() const{
    return m_date_isValid;
}

QString OAITimezone::getId() const {
    return m_id;
}
void OAITimezone::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAITimezone::is_id_Set() const{
    return m_id_isSet;
}

bool OAITimezone::is_id_Valid() const{
    return m_id_isValid;
}

QString OAITimezone::getName() const {
    return m_name;
}
void OAITimezone::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAITimezone::is_name_Set() const{
    return m_name_isSet;
}

bool OAITimezone::is_name_Valid() const{
    return m_name_isValid;
}

QString OAITimezone::getOffset() const {
    return m_offset;
}
void OAITimezone::setOffset(const QString &offset) {
    m_offset = offset;
    m_offset_isSet = true;
}

bool OAITimezone::is_offset_Set() const{
    return m_offset_isSet;
}

bool OAITimezone::is_offset_Valid() const{
    return m_offset_isValid;
}

QString OAITimezone::getTime() const {
    return m_time;
}
void OAITimezone::setTime(const QString &time) {
    m_time = time;
    m_time_isSet = true;
}

bool OAITimezone::is_time_Set() const{
    return m_time_isSet;
}

bool OAITimezone::is_time_Valid() const{
    return m_time_isValid;
}

bool OAITimezone::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_abbr_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_offset_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_time_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAITimezone::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_abbr_isValid && m_date_isValid && m_id_isValid && m_name_isValid && m_offset_isValid && m_time_isValid && true;
}

} // namespace OpenAPI
