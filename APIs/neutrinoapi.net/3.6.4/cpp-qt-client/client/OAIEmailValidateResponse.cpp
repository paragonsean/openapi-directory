/**
 * Neutrino API
 * The general-purpose API
 *
 * The version of the OpenAPI document: 3.6.4
 * Contact: ops@neutrinoapi.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIEmailValidateResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIEmailValidateResponse::OAIEmailValidateResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIEmailValidateResponse::OAIEmailValidateResponse() {
    this->initializeModel();
}

OAIEmailValidateResponse::~OAIEmailValidateResponse() {}

void OAIEmailValidateResponse::initializeModel() {

    m_domain_isSet = false;
    m_domain_isValid = false;

    m_domain_error_isSet = false;
    m_domain_error_isValid = false;

    m_email_isSet = false;
    m_email_isValid = false;

    m_is_disposable_isSet = false;
    m_is_disposable_isValid = false;

    m_is_freemail_isSet = false;
    m_is_freemail_isValid = false;

    m_is_personal_isSet = false;
    m_is_personal_isValid = false;

    m_provider_isSet = false;
    m_provider_isValid = false;

    m_syntax_error_isSet = false;
    m_syntax_error_isValid = false;

    m_typos_fixed_isSet = false;
    m_typos_fixed_isValid = false;

    m_r_valid_isSet = false;
    m_r_valid_isValid = false;
}

void OAIEmailValidateResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIEmailValidateResponse::fromJsonObject(QJsonObject json) {

    m_domain_isValid = ::OpenAPI::fromJsonValue(m_domain, json[QString("domain")]);
    m_domain_isSet = !json[QString("domain")].isNull() && m_domain_isValid;

    m_domain_error_isValid = ::OpenAPI::fromJsonValue(m_domain_error, json[QString("domain-error")]);
    m_domain_error_isSet = !json[QString("domain-error")].isNull() && m_domain_error_isValid;

    m_email_isValid = ::OpenAPI::fromJsonValue(m_email, json[QString("email")]);
    m_email_isSet = !json[QString("email")].isNull() && m_email_isValid;

    m_is_disposable_isValid = ::OpenAPI::fromJsonValue(m_is_disposable, json[QString("is-disposable")]);
    m_is_disposable_isSet = !json[QString("is-disposable")].isNull() && m_is_disposable_isValid;

    m_is_freemail_isValid = ::OpenAPI::fromJsonValue(m_is_freemail, json[QString("is-freemail")]);
    m_is_freemail_isSet = !json[QString("is-freemail")].isNull() && m_is_freemail_isValid;

    m_is_personal_isValid = ::OpenAPI::fromJsonValue(m_is_personal, json[QString("is-personal")]);
    m_is_personal_isSet = !json[QString("is-personal")].isNull() && m_is_personal_isValid;

    m_provider_isValid = ::OpenAPI::fromJsonValue(m_provider, json[QString("provider")]);
    m_provider_isSet = !json[QString("provider")].isNull() && m_provider_isValid;

    m_syntax_error_isValid = ::OpenAPI::fromJsonValue(m_syntax_error, json[QString("syntax-error")]);
    m_syntax_error_isSet = !json[QString("syntax-error")].isNull() && m_syntax_error_isValid;

    m_typos_fixed_isValid = ::OpenAPI::fromJsonValue(m_typos_fixed, json[QString("typos-fixed")]);
    m_typos_fixed_isSet = !json[QString("typos-fixed")].isNull() && m_typos_fixed_isValid;

    m_r_valid_isValid = ::OpenAPI::fromJsonValue(m_r_valid, json[QString("valid")]);
    m_r_valid_isSet = !json[QString("valid")].isNull() && m_r_valid_isValid;
}

QString OAIEmailValidateResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIEmailValidateResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_domain_isSet) {
        obj.insert(QString("domain"), ::OpenAPI::toJsonValue(m_domain));
    }
    if (m_domain_error_isSet) {
        obj.insert(QString("domain-error"), ::OpenAPI::toJsonValue(m_domain_error));
    }
    if (m_email_isSet) {
        obj.insert(QString("email"), ::OpenAPI::toJsonValue(m_email));
    }
    if (m_is_disposable_isSet) {
        obj.insert(QString("is-disposable"), ::OpenAPI::toJsonValue(m_is_disposable));
    }
    if (m_is_freemail_isSet) {
        obj.insert(QString("is-freemail"), ::OpenAPI::toJsonValue(m_is_freemail));
    }
    if (m_is_personal_isSet) {
        obj.insert(QString("is-personal"), ::OpenAPI::toJsonValue(m_is_personal));
    }
    if (m_provider_isSet) {
        obj.insert(QString("provider"), ::OpenAPI::toJsonValue(m_provider));
    }
    if (m_syntax_error_isSet) {
        obj.insert(QString("syntax-error"), ::OpenAPI::toJsonValue(m_syntax_error));
    }
    if (m_typos_fixed_isSet) {
        obj.insert(QString("typos-fixed"), ::OpenAPI::toJsonValue(m_typos_fixed));
    }
    if (m_r_valid_isSet) {
        obj.insert(QString("valid"), ::OpenAPI::toJsonValue(m_r_valid));
    }
    return obj;
}

QString OAIEmailValidateResponse::getDomain() const {
    return m_domain;
}
void OAIEmailValidateResponse::setDomain(const QString &domain) {
    m_domain = domain;
    m_domain_isSet = true;
}

bool OAIEmailValidateResponse::is_domain_Set() const{
    return m_domain_isSet;
}

bool OAIEmailValidateResponse::is_domain_Valid() const{
    return m_domain_isValid;
}

bool OAIEmailValidateResponse::isDomainError() const {
    return m_domain_error;
}
void OAIEmailValidateResponse::setDomainError(const bool &domain_error) {
    m_domain_error = domain_error;
    m_domain_error_isSet = true;
}

bool OAIEmailValidateResponse::is_domain_error_Set() const{
    return m_domain_error_isSet;
}

bool OAIEmailValidateResponse::is_domain_error_Valid() const{
    return m_domain_error_isValid;
}

QString OAIEmailValidateResponse::getEmail() const {
    return m_email;
}
void OAIEmailValidateResponse::setEmail(const QString &email) {
    m_email = email;
    m_email_isSet = true;
}

bool OAIEmailValidateResponse::is_email_Set() const{
    return m_email_isSet;
}

bool OAIEmailValidateResponse::is_email_Valid() const{
    return m_email_isValid;
}

bool OAIEmailValidateResponse::isIsDisposable() const {
    return m_is_disposable;
}
void OAIEmailValidateResponse::setIsDisposable(const bool &is_disposable) {
    m_is_disposable = is_disposable;
    m_is_disposable_isSet = true;
}

bool OAIEmailValidateResponse::is_is_disposable_Set() const{
    return m_is_disposable_isSet;
}

bool OAIEmailValidateResponse::is_is_disposable_Valid() const{
    return m_is_disposable_isValid;
}

bool OAIEmailValidateResponse::isIsFreemail() const {
    return m_is_freemail;
}
void OAIEmailValidateResponse::setIsFreemail(const bool &is_freemail) {
    m_is_freemail = is_freemail;
    m_is_freemail_isSet = true;
}

bool OAIEmailValidateResponse::is_is_freemail_Set() const{
    return m_is_freemail_isSet;
}

bool OAIEmailValidateResponse::is_is_freemail_Valid() const{
    return m_is_freemail_isValid;
}

bool OAIEmailValidateResponse::isIsPersonal() const {
    return m_is_personal;
}
void OAIEmailValidateResponse::setIsPersonal(const bool &is_personal) {
    m_is_personal = is_personal;
    m_is_personal_isSet = true;
}

bool OAIEmailValidateResponse::is_is_personal_Set() const{
    return m_is_personal_isSet;
}

bool OAIEmailValidateResponse::is_is_personal_Valid() const{
    return m_is_personal_isValid;
}

QString OAIEmailValidateResponse::getProvider() const {
    return m_provider;
}
void OAIEmailValidateResponse::setProvider(const QString &provider) {
    m_provider = provider;
    m_provider_isSet = true;
}

bool OAIEmailValidateResponse::is_provider_Set() const{
    return m_provider_isSet;
}

bool OAIEmailValidateResponse::is_provider_Valid() const{
    return m_provider_isValid;
}

bool OAIEmailValidateResponse::isSyntaxError() const {
    return m_syntax_error;
}
void OAIEmailValidateResponse::setSyntaxError(const bool &syntax_error) {
    m_syntax_error = syntax_error;
    m_syntax_error_isSet = true;
}

bool OAIEmailValidateResponse::is_syntax_error_Set() const{
    return m_syntax_error_isSet;
}

bool OAIEmailValidateResponse::is_syntax_error_Valid() const{
    return m_syntax_error_isValid;
}

bool OAIEmailValidateResponse::isTyposFixed() const {
    return m_typos_fixed;
}
void OAIEmailValidateResponse::setTyposFixed(const bool &typos_fixed) {
    m_typos_fixed = typos_fixed;
    m_typos_fixed_isSet = true;
}

bool OAIEmailValidateResponse::is_typos_fixed_Set() const{
    return m_typos_fixed_isSet;
}

bool OAIEmailValidateResponse::is_typos_fixed_Valid() const{
    return m_typos_fixed_isValid;
}

bool OAIEmailValidateResponse::isRValid() const {
    return m_r_valid;
}
void OAIEmailValidateResponse::setRValid(const bool &r_valid) {
    m_r_valid = r_valid;
    m_r_valid_isSet = true;
}

bool OAIEmailValidateResponse::is_r_valid_Set() const{
    return m_r_valid_isSet;
}

bool OAIEmailValidateResponse::is_r_valid_Valid() const{
    return m_r_valid_isValid;
}

bool OAIEmailValidateResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_domain_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_domain_error_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_email_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_disposable_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_freemail_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_personal_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_provider_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_syntax_error_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_typos_fixed_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_r_valid_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIEmailValidateResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_domain_isValid && m_domain_error_isValid && m_email_isValid && m_is_disposable_isValid && m_is_freemail_isValid && m_is_personal_isValid && m_provider_isValid && m_syntax_error_isValid && m_typos_fixed_isValid && m_r_valid_isValid && true;
}

} // namespace OpenAPI
