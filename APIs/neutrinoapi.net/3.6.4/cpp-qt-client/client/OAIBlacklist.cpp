/**
 * Neutrino API
 * The general-purpose API
 *
 * The version of the OpenAPI document: 3.6.4
 * Contact: ops@neutrinoapi.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIBlacklist.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIBlacklist::OAIBlacklist(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIBlacklist::OAIBlacklist() {
    this->initializeModel();
}

OAIBlacklist::~OAIBlacklist() {}

void OAIBlacklist::initializeModel() {

    m_is_listed_isSet = false;
    m_is_listed_isValid = false;

    m_list_host_isSet = false;
    m_list_host_isValid = false;

    m_list_name_isSet = false;
    m_list_name_isValid = false;

    m_list_rating_isSet = false;
    m_list_rating_isValid = false;

    m_response_time_isSet = false;
    m_response_time_isValid = false;

    m_return_code_isSet = false;
    m_return_code_isValid = false;

    m_txt_record_isSet = false;
    m_txt_record_isValid = false;
}

void OAIBlacklist::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIBlacklist::fromJsonObject(QJsonObject json) {

    m_is_listed_isValid = ::OpenAPI::fromJsonValue(m_is_listed, json[QString("is-listed")]);
    m_is_listed_isSet = !json[QString("is-listed")].isNull() && m_is_listed_isValid;

    m_list_host_isValid = ::OpenAPI::fromJsonValue(m_list_host, json[QString("list-host")]);
    m_list_host_isSet = !json[QString("list-host")].isNull() && m_list_host_isValid;

    m_list_name_isValid = ::OpenAPI::fromJsonValue(m_list_name, json[QString("list-name")]);
    m_list_name_isSet = !json[QString("list-name")].isNull() && m_list_name_isValid;

    m_list_rating_isValid = ::OpenAPI::fromJsonValue(m_list_rating, json[QString("list-rating")]);
    m_list_rating_isSet = !json[QString("list-rating")].isNull() && m_list_rating_isValid;

    m_response_time_isValid = ::OpenAPI::fromJsonValue(m_response_time, json[QString("response-time")]);
    m_response_time_isSet = !json[QString("response-time")].isNull() && m_response_time_isValid;

    m_return_code_isValid = ::OpenAPI::fromJsonValue(m_return_code, json[QString("return-code")]);
    m_return_code_isSet = !json[QString("return-code")].isNull() && m_return_code_isValid;

    m_txt_record_isValid = ::OpenAPI::fromJsonValue(m_txt_record, json[QString("txt-record")]);
    m_txt_record_isSet = !json[QString("txt-record")].isNull() && m_txt_record_isValid;
}

QString OAIBlacklist::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIBlacklist::asJsonObject() const {
    QJsonObject obj;
    if (m_is_listed_isSet) {
        obj.insert(QString("is-listed"), ::OpenAPI::toJsonValue(m_is_listed));
    }
    if (m_list_host_isSet) {
        obj.insert(QString("list-host"), ::OpenAPI::toJsonValue(m_list_host));
    }
    if (m_list_name_isSet) {
        obj.insert(QString("list-name"), ::OpenAPI::toJsonValue(m_list_name));
    }
    if (m_list_rating_isSet) {
        obj.insert(QString("list-rating"), ::OpenAPI::toJsonValue(m_list_rating));
    }
    if (m_response_time_isSet) {
        obj.insert(QString("response-time"), ::OpenAPI::toJsonValue(m_response_time));
    }
    if (m_return_code_isSet) {
        obj.insert(QString("return-code"), ::OpenAPI::toJsonValue(m_return_code));
    }
    if (m_txt_record_isSet) {
        obj.insert(QString("txt-record"), ::OpenAPI::toJsonValue(m_txt_record));
    }
    return obj;
}

bool OAIBlacklist::isIsListed() const {
    return m_is_listed;
}
void OAIBlacklist::setIsListed(const bool &is_listed) {
    m_is_listed = is_listed;
    m_is_listed_isSet = true;
}

bool OAIBlacklist::is_is_listed_Set() const{
    return m_is_listed_isSet;
}

bool OAIBlacklist::is_is_listed_Valid() const{
    return m_is_listed_isValid;
}

QString OAIBlacklist::getListHost() const {
    return m_list_host;
}
void OAIBlacklist::setListHost(const QString &list_host) {
    m_list_host = list_host;
    m_list_host_isSet = true;
}

bool OAIBlacklist::is_list_host_Set() const{
    return m_list_host_isSet;
}

bool OAIBlacklist::is_list_host_Valid() const{
    return m_list_host_isValid;
}

QString OAIBlacklist::getListName() const {
    return m_list_name;
}
void OAIBlacklist::setListName(const QString &list_name) {
    m_list_name = list_name;
    m_list_name_isSet = true;
}

bool OAIBlacklist::is_list_name_Set() const{
    return m_list_name_isSet;
}

bool OAIBlacklist::is_list_name_Valid() const{
    return m_list_name_isValid;
}

qint32 OAIBlacklist::getListRating() const {
    return m_list_rating;
}
void OAIBlacklist::setListRating(const qint32 &list_rating) {
    m_list_rating = list_rating;
    m_list_rating_isSet = true;
}

bool OAIBlacklist::is_list_rating_Set() const{
    return m_list_rating_isSet;
}

bool OAIBlacklist::is_list_rating_Valid() const{
    return m_list_rating_isValid;
}

qint32 OAIBlacklist::getResponseTime() const {
    return m_response_time;
}
void OAIBlacklist::setResponseTime(const qint32 &response_time) {
    m_response_time = response_time;
    m_response_time_isSet = true;
}

bool OAIBlacklist::is_response_time_Set() const{
    return m_response_time_isSet;
}

bool OAIBlacklist::is_response_time_Valid() const{
    return m_response_time_isValid;
}

QString OAIBlacklist::getReturnCode() const {
    return m_return_code;
}
void OAIBlacklist::setReturnCode(const QString &return_code) {
    m_return_code = return_code;
    m_return_code_isSet = true;
}

bool OAIBlacklist::is_return_code_Set() const{
    return m_return_code_isSet;
}

bool OAIBlacklist::is_return_code_Valid() const{
    return m_return_code_isValid;
}

QString OAIBlacklist::getTxtRecord() const {
    return m_txt_record;
}
void OAIBlacklist::setTxtRecord(const QString &txt_record) {
    m_txt_record = txt_record;
    m_txt_record_isSet = true;
}

bool OAIBlacklist::is_txt_record_Set() const{
    return m_txt_record_isSet;
}

bool OAIBlacklist::is_txt_record_Valid() const{
    return m_txt_record_isValid;
}

bool OAIBlacklist::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_is_listed_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_list_host_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_list_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_list_rating_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_response_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_return_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_txt_record_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIBlacklist::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_is_listed_isValid && m_list_host_isValid && m_list_name_isValid && m_list_rating_isValid && m_response_time_isValid && m_return_code_isValid && m_txt_record_isValid && true;
}

} // namespace OpenAPI
