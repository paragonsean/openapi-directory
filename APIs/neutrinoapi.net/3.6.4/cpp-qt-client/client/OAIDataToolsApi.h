/**
 * Neutrino API
 * The general-purpose API
 *
 * The version of the OpenAPI document: 3.6.4
 * Contact: ops@neutrinoapi.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIDataToolsApi_H
#define OAI_OAIDataToolsApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIAPIError.h"
#include "OAIBadWordFilterResponse.h"
#include "OAIEmailValidateResponse.h"
#include "OAIPhoneValidateResponse.h"
#include "OAIUALookupResponse.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIDataToolsApi : public QObject {
    Q_OBJECT

public:
    OAIDataToolsApi(const int timeOut = 0);
    ~OAIDataToolsApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  content QString [required]
    * @param[in]  catalog QString [optional]
    * @param[in]  censor_character QString [optional]
    */
    virtual void badWordFilter(const QString &content, const ::OpenAPI::OptionalParam<QString> &catalog = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &censor_character = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  email QString [required]
    * @param[in]  fix_typos bool [optional]
    */
    virtual void emailValidate(const QString &email, const ::OpenAPI::OptionalParam<bool> &fix_typos = ::OpenAPI::OptionalParam<bool>());

    /**
    * @param[in]  number QString [required]
    * @param[in]  country_code QString [optional]
    * @param[in]  ip QString [optional]
    */
    virtual void phoneValidate(const QString &number, const ::OpenAPI::OptionalParam<QString> &country_code = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &ip = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  ua QString [required]
    * @param[in]  ua_version QString [optional]
    * @param[in]  ua_platform QString [optional]
    * @param[in]  ua_platform_version QString [optional]
    * @param[in]  ua_mobile QString [optional]
    * @param[in]  device_model QString [optional]
    * @param[in]  device_brand QString [optional]
    */
    virtual void uALookup(const QString &ua, const ::OpenAPI::OptionalParam<QString> &ua_version = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &ua_platform = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &ua_platform_version = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &ua_mobile = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &device_model = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &device_brand = ::OpenAPI::OptionalParam<QString>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void badWordFilterCallback(OAIHttpRequestWorker *worker);
    void emailValidateCallback(OAIHttpRequestWorker *worker);
    void phoneValidateCallback(OAIHttpRequestWorker *worker);
    void uALookupCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void badWordFilterSignal(OAIBadWordFilterResponse summary);
    void emailValidateSignal(OAIEmailValidateResponse summary);
    void phoneValidateSignal(OAIPhoneValidateResponse summary);
    void uALookupSignal(OAIUALookupResponse summary);


    void badWordFilterSignalFull(OAIHttpRequestWorker *worker, OAIBadWordFilterResponse summary);
    void emailValidateSignalFull(OAIHttpRequestWorker *worker, OAIEmailValidateResponse summary);
    void phoneValidateSignalFull(OAIHttpRequestWorker *worker, OAIPhoneValidateResponse summary);
    void uALookupSignalFull(OAIHttpRequestWorker *worker, OAIUALookupResponse summary);

    Q_DECL_DEPRECATED_X("Use badWordFilterSignalError() instead")
    void badWordFilterSignalE(OAIBadWordFilterResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void badWordFilterSignalError(OAIBadWordFilterResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use emailValidateSignalError() instead")
    void emailValidateSignalE(OAIEmailValidateResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void emailValidateSignalError(OAIEmailValidateResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use phoneValidateSignalError() instead")
    void phoneValidateSignalE(OAIPhoneValidateResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void phoneValidateSignalError(OAIPhoneValidateResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use uALookupSignalError() instead")
    void uALookupSignalE(OAIUALookupResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void uALookupSignalError(OAIUALookupResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use badWordFilterSignalErrorFull() instead")
    void badWordFilterSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void badWordFilterSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use emailValidateSignalErrorFull() instead")
    void emailValidateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void emailValidateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use phoneValidateSignalErrorFull() instead")
    void phoneValidateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void phoneValidateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use uALookupSignalErrorFull() instead")
    void uALookupSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void uALookupSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
