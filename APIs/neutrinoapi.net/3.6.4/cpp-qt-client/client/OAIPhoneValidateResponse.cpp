/**
 * Neutrino API
 * The general-purpose API
 *
 * The version of the OpenAPI document: 3.6.4
 * Contact: ops@neutrinoapi.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPhoneValidateResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPhoneValidateResponse::OAIPhoneValidateResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPhoneValidateResponse::OAIPhoneValidateResponse() {
    this->initializeModel();
}

OAIPhoneValidateResponse::~OAIPhoneValidateResponse() {}

void OAIPhoneValidateResponse::initializeModel() {

    m_country_isSet = false;
    m_country_isValid = false;

    m_country_code_isSet = false;
    m_country_code_isValid = false;

    m_country_code3_isSet = false;
    m_country_code3_isValid = false;

    m_currency_code_isSet = false;
    m_currency_code_isValid = false;

    m_international_calling_code_isSet = false;
    m_international_calling_code_isValid = false;

    m_international_number_isSet = false;
    m_international_number_isValid = false;

    m_is_mobile_isSet = false;
    m_is_mobile_isValid = false;

    m_local_number_isSet = false;
    m_local_number_isValid = false;

    m_location_isSet = false;
    m_location_isValid = false;

    m_prefix_network_isSet = false;
    m_prefix_network_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;

    m_r_valid_isSet = false;
    m_r_valid_isValid = false;
}

void OAIPhoneValidateResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPhoneValidateResponse::fromJsonObject(QJsonObject json) {

    m_country_isValid = ::OpenAPI::fromJsonValue(m_country, json[QString("country")]);
    m_country_isSet = !json[QString("country")].isNull() && m_country_isValid;

    m_country_code_isValid = ::OpenAPI::fromJsonValue(m_country_code, json[QString("country-code")]);
    m_country_code_isSet = !json[QString("country-code")].isNull() && m_country_code_isValid;

    m_country_code3_isValid = ::OpenAPI::fromJsonValue(m_country_code3, json[QString("country-code3")]);
    m_country_code3_isSet = !json[QString("country-code3")].isNull() && m_country_code3_isValid;

    m_currency_code_isValid = ::OpenAPI::fromJsonValue(m_currency_code, json[QString("currency-code")]);
    m_currency_code_isSet = !json[QString("currency-code")].isNull() && m_currency_code_isValid;

    m_international_calling_code_isValid = ::OpenAPI::fromJsonValue(m_international_calling_code, json[QString("international-calling-code")]);
    m_international_calling_code_isSet = !json[QString("international-calling-code")].isNull() && m_international_calling_code_isValid;

    m_international_number_isValid = ::OpenAPI::fromJsonValue(m_international_number, json[QString("international-number")]);
    m_international_number_isSet = !json[QString("international-number")].isNull() && m_international_number_isValid;

    m_is_mobile_isValid = ::OpenAPI::fromJsonValue(m_is_mobile, json[QString("is-mobile")]);
    m_is_mobile_isSet = !json[QString("is-mobile")].isNull() && m_is_mobile_isValid;

    m_local_number_isValid = ::OpenAPI::fromJsonValue(m_local_number, json[QString("local-number")]);
    m_local_number_isSet = !json[QString("local-number")].isNull() && m_local_number_isValid;

    m_location_isValid = ::OpenAPI::fromJsonValue(m_location, json[QString("location")]);
    m_location_isSet = !json[QString("location")].isNull() && m_location_isValid;

    m_prefix_network_isValid = ::OpenAPI::fromJsonValue(m_prefix_network, json[QString("prefix-network")]);
    m_prefix_network_isSet = !json[QString("prefix-network")].isNull() && m_prefix_network_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;

    m_r_valid_isValid = ::OpenAPI::fromJsonValue(m_r_valid, json[QString("valid")]);
    m_r_valid_isSet = !json[QString("valid")].isNull() && m_r_valid_isValid;
}

QString OAIPhoneValidateResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPhoneValidateResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_country_isSet) {
        obj.insert(QString("country"), ::OpenAPI::toJsonValue(m_country));
    }
    if (m_country_code_isSet) {
        obj.insert(QString("country-code"), ::OpenAPI::toJsonValue(m_country_code));
    }
    if (m_country_code3_isSet) {
        obj.insert(QString("country-code3"), ::OpenAPI::toJsonValue(m_country_code3));
    }
    if (m_currency_code_isSet) {
        obj.insert(QString("currency-code"), ::OpenAPI::toJsonValue(m_currency_code));
    }
    if (m_international_calling_code_isSet) {
        obj.insert(QString("international-calling-code"), ::OpenAPI::toJsonValue(m_international_calling_code));
    }
    if (m_international_number_isSet) {
        obj.insert(QString("international-number"), ::OpenAPI::toJsonValue(m_international_number));
    }
    if (m_is_mobile_isSet) {
        obj.insert(QString("is-mobile"), ::OpenAPI::toJsonValue(m_is_mobile));
    }
    if (m_local_number_isSet) {
        obj.insert(QString("local-number"), ::OpenAPI::toJsonValue(m_local_number));
    }
    if (m_location_isSet) {
        obj.insert(QString("location"), ::OpenAPI::toJsonValue(m_location));
    }
    if (m_prefix_network_isSet) {
        obj.insert(QString("prefix-network"), ::OpenAPI::toJsonValue(m_prefix_network));
    }
    if (m_type_isSet) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    if (m_r_valid_isSet) {
        obj.insert(QString("valid"), ::OpenAPI::toJsonValue(m_r_valid));
    }
    return obj;
}

QString OAIPhoneValidateResponse::getCountry() const {
    return m_country;
}
void OAIPhoneValidateResponse::setCountry(const QString &country) {
    m_country = country;
    m_country_isSet = true;
}

bool OAIPhoneValidateResponse::is_country_Set() const{
    return m_country_isSet;
}

bool OAIPhoneValidateResponse::is_country_Valid() const{
    return m_country_isValid;
}

QString OAIPhoneValidateResponse::getCountryCode() const {
    return m_country_code;
}
void OAIPhoneValidateResponse::setCountryCode(const QString &country_code) {
    m_country_code = country_code;
    m_country_code_isSet = true;
}

bool OAIPhoneValidateResponse::is_country_code_Set() const{
    return m_country_code_isSet;
}

bool OAIPhoneValidateResponse::is_country_code_Valid() const{
    return m_country_code_isValid;
}

QString OAIPhoneValidateResponse::getCountryCode3() const {
    return m_country_code3;
}
void OAIPhoneValidateResponse::setCountryCode3(const QString &country_code3) {
    m_country_code3 = country_code3;
    m_country_code3_isSet = true;
}

bool OAIPhoneValidateResponse::is_country_code3_Set() const{
    return m_country_code3_isSet;
}

bool OAIPhoneValidateResponse::is_country_code3_Valid() const{
    return m_country_code3_isValid;
}

QString OAIPhoneValidateResponse::getCurrencyCode() const {
    return m_currency_code;
}
void OAIPhoneValidateResponse::setCurrencyCode(const QString &currency_code) {
    m_currency_code = currency_code;
    m_currency_code_isSet = true;
}

bool OAIPhoneValidateResponse::is_currency_code_Set() const{
    return m_currency_code_isSet;
}

bool OAIPhoneValidateResponse::is_currency_code_Valid() const{
    return m_currency_code_isValid;
}

QString OAIPhoneValidateResponse::getInternationalCallingCode() const {
    return m_international_calling_code;
}
void OAIPhoneValidateResponse::setInternationalCallingCode(const QString &international_calling_code) {
    m_international_calling_code = international_calling_code;
    m_international_calling_code_isSet = true;
}

bool OAIPhoneValidateResponse::is_international_calling_code_Set() const{
    return m_international_calling_code_isSet;
}

bool OAIPhoneValidateResponse::is_international_calling_code_Valid() const{
    return m_international_calling_code_isValid;
}

QString OAIPhoneValidateResponse::getInternationalNumber() const {
    return m_international_number;
}
void OAIPhoneValidateResponse::setInternationalNumber(const QString &international_number) {
    m_international_number = international_number;
    m_international_number_isSet = true;
}

bool OAIPhoneValidateResponse::is_international_number_Set() const{
    return m_international_number_isSet;
}

bool OAIPhoneValidateResponse::is_international_number_Valid() const{
    return m_international_number_isValid;
}

bool OAIPhoneValidateResponse::isIsMobile() const {
    return m_is_mobile;
}
void OAIPhoneValidateResponse::setIsMobile(const bool &is_mobile) {
    m_is_mobile = is_mobile;
    m_is_mobile_isSet = true;
}

bool OAIPhoneValidateResponse::is_is_mobile_Set() const{
    return m_is_mobile_isSet;
}

bool OAIPhoneValidateResponse::is_is_mobile_Valid() const{
    return m_is_mobile_isValid;
}

QString OAIPhoneValidateResponse::getLocalNumber() const {
    return m_local_number;
}
void OAIPhoneValidateResponse::setLocalNumber(const QString &local_number) {
    m_local_number = local_number;
    m_local_number_isSet = true;
}

bool OAIPhoneValidateResponse::is_local_number_Set() const{
    return m_local_number_isSet;
}

bool OAIPhoneValidateResponse::is_local_number_Valid() const{
    return m_local_number_isValid;
}

QString OAIPhoneValidateResponse::getLocation() const {
    return m_location;
}
void OAIPhoneValidateResponse::setLocation(const QString &location) {
    m_location = location;
    m_location_isSet = true;
}

bool OAIPhoneValidateResponse::is_location_Set() const{
    return m_location_isSet;
}

bool OAIPhoneValidateResponse::is_location_Valid() const{
    return m_location_isValid;
}

QString OAIPhoneValidateResponse::getPrefixNetwork() const {
    return m_prefix_network;
}
void OAIPhoneValidateResponse::setPrefixNetwork(const QString &prefix_network) {
    m_prefix_network = prefix_network;
    m_prefix_network_isSet = true;
}

bool OAIPhoneValidateResponse::is_prefix_network_Set() const{
    return m_prefix_network_isSet;
}

bool OAIPhoneValidateResponse::is_prefix_network_Valid() const{
    return m_prefix_network_isValid;
}

QString OAIPhoneValidateResponse::getType() const {
    return m_type;
}
void OAIPhoneValidateResponse::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIPhoneValidateResponse::is_type_Set() const{
    return m_type_isSet;
}

bool OAIPhoneValidateResponse::is_type_Valid() const{
    return m_type_isValid;
}

bool OAIPhoneValidateResponse::isRValid() const {
    return m_r_valid;
}
void OAIPhoneValidateResponse::setRValid(const bool &r_valid) {
    m_r_valid = r_valid;
    m_r_valid_isSet = true;
}

bool OAIPhoneValidateResponse::is_r_valid_Set() const{
    return m_r_valid_isSet;
}

bool OAIPhoneValidateResponse::is_r_valid_Valid() const{
    return m_r_valid_isValid;
}

bool OAIPhoneValidateResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_country_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_country_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_country_code3_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_currency_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_international_calling_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_international_number_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_mobile_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_local_number_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_location_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_prefix_network_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_r_valid_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPhoneValidateResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_country_isValid && m_country_code_isValid && m_country_code3_isValid && m_currency_code_isValid && m_international_calling_code_isValid && m_international_number_isValid && m_is_mobile_isValid && m_local_number_isValid && m_location_isValid && m_prefix_network_isValid && m_type_isValid && m_r_valid_isValid && true;
}

} // namespace OpenAPI
