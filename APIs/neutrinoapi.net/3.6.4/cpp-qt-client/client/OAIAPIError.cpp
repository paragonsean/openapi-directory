/**
 * Neutrino API
 * The general-purpose API
 *
 * The version of the OpenAPI document: 3.6.4
 * Contact: ops@neutrinoapi.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAPIError.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAPIError::OAIAPIError(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAPIError::OAIAPIError() {
    this->initializeModel();
}

OAIAPIError::~OAIAPIError() {}

void OAIAPIError::initializeModel() {

    m_api_error_isSet = false;
    m_api_error_isValid = false;

    m_api_error_msg_isSet = false;
    m_api_error_msg_isValid = false;
}

void OAIAPIError::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAPIError::fromJsonObject(QJsonObject json) {

    m_api_error_isValid = ::OpenAPI::fromJsonValue(m_api_error, json[QString("api-error")]);
    m_api_error_isSet = !json[QString("api-error")].isNull() && m_api_error_isValid;

    m_api_error_msg_isValid = ::OpenAPI::fromJsonValue(m_api_error_msg, json[QString("api-error-msg")]);
    m_api_error_msg_isSet = !json[QString("api-error-msg")].isNull() && m_api_error_msg_isValid;
}

QString OAIAPIError::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAPIError::asJsonObject() const {
    QJsonObject obj;
    if (m_api_error_isSet) {
        obj.insert(QString("api-error"), ::OpenAPI::toJsonValue(m_api_error));
    }
    if (m_api_error_msg_isSet) {
        obj.insert(QString("api-error-msg"), ::OpenAPI::toJsonValue(m_api_error_msg));
    }
    return obj;
}

qint32 OAIAPIError::getApiError() const {
    return m_api_error;
}
void OAIAPIError::setApiError(const qint32 &api_error) {
    m_api_error = api_error;
    m_api_error_isSet = true;
}

bool OAIAPIError::is_api_error_Set() const{
    return m_api_error_isSet;
}

bool OAIAPIError::is_api_error_Valid() const{
    return m_api_error_isValid;
}

QString OAIAPIError::getApiErrorMsg() const {
    return m_api_error_msg;
}
void OAIAPIError::setApiErrorMsg(const QString &api_error_msg) {
    m_api_error_msg = api_error_msg;
    m_api_error_msg_isSet = true;
}

bool OAIAPIError::is_api_error_msg_Set() const{
    return m_api_error_msg_isSet;
}

bool OAIAPIError::is_api_error_msg_Valid() const{
    return m_api_error_msg_isValid;
}

bool OAIAPIError::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_api_error_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_api_error_msg_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAPIError::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_api_error_isValid && m_api_error_msg_isValid && true;
}

} // namespace OpenAPI
