/**
 * Neutrino API
 * The general-purpose API
 *
 * The version of the OpenAPI document: 3.6.4
 * Contact: ops@neutrinoapi.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAITelephonyApi_H
#define OAI_OAITelephonyApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIAPIError.h"
#include "OAIHLRLookupResponse.h"
#include "OAIPhonePlaybackResponse.h"
#include "OAIPhoneVerifyResponse.h"
#include "OAISMSVerifyResponse.h"
#include "OAIVerifySecurityCodeResponse.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAITelephonyApi : public QObject {
    Q_OBJECT

public:
    OAITelephonyApi(const int timeOut = 0);
    ~OAITelephonyApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  number QString [required]
    * @param[in]  country_code QString [optional]
    */
    virtual void hLRLookup(const QString &number, const ::OpenAPI::OptionalParam<QString> &country_code = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  audio_url QString [required]
    * @param[in]  number QString [required]
    * @param[in]  limit qint32 [optional]
    * @param[in]  limit_ttl qint32 [optional]
    */
    virtual void phonePlayback(const QString &audio_url, const QString &number, const ::OpenAPI::OptionalParam<qint32> &limit = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &limit_ttl = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  number QString [required]
    * @param[in]  code_length qint32 [optional]
    * @param[in]  country_code QString [optional]
    * @param[in]  language_code QString [optional]
    * @param[in]  limit qint32 [optional]
    * @param[in]  limit_ttl qint32 [optional]
    * @param[in]  playback_delay qint32 [optional]
    * @param[in]  security_code qint32 [optional]
    */
    virtual void phoneVerify(const QString &number, const ::OpenAPI::OptionalParam<qint32> &code_length = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &country_code = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &language_code = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &limit = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &limit_ttl = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &playback_delay = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &security_code = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  number QString [required]
    * @param[in]  code_length qint32 [optional]
    * @param[in]  country_code QString [optional]
    * @param[in]  language_code QString [optional]
    * @param[in]  limit qint32 [optional]
    * @param[in]  limit_ttl qint32 [optional]
    * @param[in]  security_code qint32 [optional]
    */
    virtual void sMSVerify(const QString &number, const ::OpenAPI::OptionalParam<qint32> &code_length = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &country_code = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &language_code = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &limit = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &limit_ttl = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &security_code = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  security_code QString [required]
    * @param[in]  limit_by QString [optional]
    */
    virtual void verifySecurityCode(const QString &security_code, const ::OpenAPI::OptionalParam<QString> &limit_by = ::OpenAPI::OptionalParam<QString>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void hLRLookupCallback(OAIHttpRequestWorker *worker);
    void phonePlaybackCallback(OAIHttpRequestWorker *worker);
    void phoneVerifyCallback(OAIHttpRequestWorker *worker);
    void sMSVerifyCallback(OAIHttpRequestWorker *worker);
    void verifySecurityCodeCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void hLRLookupSignal(OAIHLRLookupResponse summary);
    void phonePlaybackSignal(OAIPhonePlaybackResponse summary);
    void phoneVerifySignal(OAIPhoneVerifyResponse summary);
    void sMSVerifySignal(OAISMSVerifyResponse summary);
    void verifySecurityCodeSignal(OAIVerifySecurityCodeResponse summary);


    void hLRLookupSignalFull(OAIHttpRequestWorker *worker, OAIHLRLookupResponse summary);
    void phonePlaybackSignalFull(OAIHttpRequestWorker *worker, OAIPhonePlaybackResponse summary);
    void phoneVerifySignalFull(OAIHttpRequestWorker *worker, OAIPhoneVerifyResponse summary);
    void sMSVerifySignalFull(OAIHttpRequestWorker *worker, OAISMSVerifyResponse summary);
    void verifySecurityCodeSignalFull(OAIHttpRequestWorker *worker, OAIVerifySecurityCodeResponse summary);

    Q_DECL_DEPRECATED_X("Use hLRLookupSignalError() instead")
    void hLRLookupSignalE(OAIHLRLookupResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void hLRLookupSignalError(OAIHLRLookupResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use phonePlaybackSignalError() instead")
    void phonePlaybackSignalE(OAIPhonePlaybackResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void phonePlaybackSignalError(OAIPhonePlaybackResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use phoneVerifySignalError() instead")
    void phoneVerifySignalE(OAIPhoneVerifyResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void phoneVerifySignalError(OAIPhoneVerifyResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use sMSVerifySignalError() instead")
    void sMSVerifySignalE(OAISMSVerifyResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void sMSVerifySignalError(OAISMSVerifyResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use verifySecurityCodeSignalError() instead")
    void verifySecurityCodeSignalE(OAIVerifySecurityCodeResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void verifySecurityCodeSignalError(OAIVerifySecurityCodeResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use hLRLookupSignalErrorFull() instead")
    void hLRLookupSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void hLRLookupSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use phonePlaybackSignalErrorFull() instead")
    void phonePlaybackSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void phonePlaybackSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use phoneVerifySignalErrorFull() instead")
    void phoneVerifySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void phoneVerifySignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use sMSVerifySignalErrorFull() instead")
    void sMSVerifySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void sMSVerifySignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use verifySecurityCodeSignalErrorFull() instead")
    void verifySecurityCodeSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void verifySecurityCodeSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
