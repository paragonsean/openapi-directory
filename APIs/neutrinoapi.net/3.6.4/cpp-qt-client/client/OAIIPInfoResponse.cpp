/**
 * Neutrino API
 * The general-purpose API
 *
 * The version of the OpenAPI document: 3.6.4
 * Contact: ops@neutrinoapi.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIIPInfoResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIIPInfoResponse::OAIIPInfoResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIIPInfoResponse::OAIIPInfoResponse() {
    this->initializeModel();
}

OAIIPInfoResponse::~OAIIPInfoResponse() {}

void OAIIPInfoResponse::initializeModel() {

    m_city_isSet = false;
    m_city_isValid = false;

    m_continent_code_isSet = false;
    m_continent_code_isValid = false;

    m_country_isSet = false;
    m_country_isValid = false;

    m_country_code_isSet = false;
    m_country_code_isValid = false;

    m_country_code3_isSet = false;
    m_country_code3_isValid = false;

    m_currency_code_isSet = false;
    m_currency_code_isValid = false;

    m_host_domain_isSet = false;
    m_host_domain_isValid = false;

    m_hostname_isSet = false;
    m_hostname_isValid = false;

    m_ip_isSet = false;
    m_ip_isValid = false;

    m_is_bogon_isSet = false;
    m_is_bogon_isValid = false;

    m_is_v4_mapped_isSet = false;
    m_is_v4_mapped_isValid = false;

    m_is_v6_isSet = false;
    m_is_v6_isValid = false;

    m_latitude_isSet = false;
    m_latitude_isValid = false;

    m_longitude_isSet = false;
    m_longitude_isValid = false;

    m_region_isSet = false;
    m_region_isValid = false;

    m_region_code_isSet = false;
    m_region_code_isValid = false;

    m_timezone_isSet = false;
    m_timezone_isValid = false;

    m_r_valid_isSet = false;
    m_r_valid_isValid = false;
}

void OAIIPInfoResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIIPInfoResponse::fromJsonObject(QJsonObject json) {

    m_city_isValid = ::OpenAPI::fromJsonValue(m_city, json[QString("city")]);
    m_city_isSet = !json[QString("city")].isNull() && m_city_isValid;

    m_continent_code_isValid = ::OpenAPI::fromJsonValue(m_continent_code, json[QString("continent-code")]);
    m_continent_code_isSet = !json[QString("continent-code")].isNull() && m_continent_code_isValid;

    m_country_isValid = ::OpenAPI::fromJsonValue(m_country, json[QString("country")]);
    m_country_isSet = !json[QString("country")].isNull() && m_country_isValid;

    m_country_code_isValid = ::OpenAPI::fromJsonValue(m_country_code, json[QString("country-code")]);
    m_country_code_isSet = !json[QString("country-code")].isNull() && m_country_code_isValid;

    m_country_code3_isValid = ::OpenAPI::fromJsonValue(m_country_code3, json[QString("country-code3")]);
    m_country_code3_isSet = !json[QString("country-code3")].isNull() && m_country_code3_isValid;

    m_currency_code_isValid = ::OpenAPI::fromJsonValue(m_currency_code, json[QString("currency-code")]);
    m_currency_code_isSet = !json[QString("currency-code")].isNull() && m_currency_code_isValid;

    m_host_domain_isValid = ::OpenAPI::fromJsonValue(m_host_domain, json[QString("host-domain")]);
    m_host_domain_isSet = !json[QString("host-domain")].isNull() && m_host_domain_isValid;

    m_hostname_isValid = ::OpenAPI::fromJsonValue(m_hostname, json[QString("hostname")]);
    m_hostname_isSet = !json[QString("hostname")].isNull() && m_hostname_isValid;

    m_ip_isValid = ::OpenAPI::fromJsonValue(m_ip, json[QString("ip")]);
    m_ip_isSet = !json[QString("ip")].isNull() && m_ip_isValid;

    m_is_bogon_isValid = ::OpenAPI::fromJsonValue(m_is_bogon, json[QString("is-bogon")]);
    m_is_bogon_isSet = !json[QString("is-bogon")].isNull() && m_is_bogon_isValid;

    m_is_v4_mapped_isValid = ::OpenAPI::fromJsonValue(m_is_v4_mapped, json[QString("is-v4-mapped")]);
    m_is_v4_mapped_isSet = !json[QString("is-v4-mapped")].isNull() && m_is_v4_mapped_isValid;

    m_is_v6_isValid = ::OpenAPI::fromJsonValue(m_is_v6, json[QString("is-v6")]);
    m_is_v6_isSet = !json[QString("is-v6")].isNull() && m_is_v6_isValid;

    m_latitude_isValid = ::OpenAPI::fromJsonValue(m_latitude, json[QString("latitude")]);
    m_latitude_isSet = !json[QString("latitude")].isNull() && m_latitude_isValid;

    m_longitude_isValid = ::OpenAPI::fromJsonValue(m_longitude, json[QString("longitude")]);
    m_longitude_isSet = !json[QString("longitude")].isNull() && m_longitude_isValid;

    m_region_isValid = ::OpenAPI::fromJsonValue(m_region, json[QString("region")]);
    m_region_isSet = !json[QString("region")].isNull() && m_region_isValid;

    m_region_code_isValid = ::OpenAPI::fromJsonValue(m_region_code, json[QString("region-code")]);
    m_region_code_isSet = !json[QString("region-code")].isNull() && m_region_code_isValid;

    m_timezone_isValid = ::OpenAPI::fromJsonValue(m_timezone, json[QString("timezone")]);
    m_timezone_isSet = !json[QString("timezone")].isNull() && m_timezone_isValid;

    m_r_valid_isValid = ::OpenAPI::fromJsonValue(m_r_valid, json[QString("valid")]);
    m_r_valid_isSet = !json[QString("valid")].isNull() && m_r_valid_isValid;
}

QString OAIIPInfoResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIIPInfoResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_city_isSet) {
        obj.insert(QString("city"), ::OpenAPI::toJsonValue(m_city));
    }
    if (m_continent_code_isSet) {
        obj.insert(QString("continent-code"), ::OpenAPI::toJsonValue(m_continent_code));
    }
    if (m_country_isSet) {
        obj.insert(QString("country"), ::OpenAPI::toJsonValue(m_country));
    }
    if (m_country_code_isSet) {
        obj.insert(QString("country-code"), ::OpenAPI::toJsonValue(m_country_code));
    }
    if (m_country_code3_isSet) {
        obj.insert(QString("country-code3"), ::OpenAPI::toJsonValue(m_country_code3));
    }
    if (m_currency_code_isSet) {
        obj.insert(QString("currency-code"), ::OpenAPI::toJsonValue(m_currency_code));
    }
    if (m_host_domain_isSet) {
        obj.insert(QString("host-domain"), ::OpenAPI::toJsonValue(m_host_domain));
    }
    if (m_hostname_isSet) {
        obj.insert(QString("hostname"), ::OpenAPI::toJsonValue(m_hostname));
    }
    if (m_ip_isSet) {
        obj.insert(QString("ip"), ::OpenAPI::toJsonValue(m_ip));
    }
    if (m_is_bogon_isSet) {
        obj.insert(QString("is-bogon"), ::OpenAPI::toJsonValue(m_is_bogon));
    }
    if (m_is_v4_mapped_isSet) {
        obj.insert(QString("is-v4-mapped"), ::OpenAPI::toJsonValue(m_is_v4_mapped));
    }
    if (m_is_v6_isSet) {
        obj.insert(QString("is-v6"), ::OpenAPI::toJsonValue(m_is_v6));
    }
    if (m_latitude_isSet) {
        obj.insert(QString("latitude"), ::OpenAPI::toJsonValue(m_latitude));
    }
    if (m_longitude_isSet) {
        obj.insert(QString("longitude"), ::OpenAPI::toJsonValue(m_longitude));
    }
    if (m_region_isSet) {
        obj.insert(QString("region"), ::OpenAPI::toJsonValue(m_region));
    }
    if (m_region_code_isSet) {
        obj.insert(QString("region-code"), ::OpenAPI::toJsonValue(m_region_code));
    }
    if (m_timezone.isSet()) {
        obj.insert(QString("timezone"), ::OpenAPI::toJsonValue(m_timezone));
    }
    if (m_r_valid_isSet) {
        obj.insert(QString("valid"), ::OpenAPI::toJsonValue(m_r_valid));
    }
    return obj;
}

QString OAIIPInfoResponse::getCity() const {
    return m_city;
}
void OAIIPInfoResponse::setCity(const QString &city) {
    m_city = city;
    m_city_isSet = true;
}

bool OAIIPInfoResponse::is_city_Set() const{
    return m_city_isSet;
}

bool OAIIPInfoResponse::is_city_Valid() const{
    return m_city_isValid;
}

QString OAIIPInfoResponse::getContinentCode() const {
    return m_continent_code;
}
void OAIIPInfoResponse::setContinentCode(const QString &continent_code) {
    m_continent_code = continent_code;
    m_continent_code_isSet = true;
}

bool OAIIPInfoResponse::is_continent_code_Set() const{
    return m_continent_code_isSet;
}

bool OAIIPInfoResponse::is_continent_code_Valid() const{
    return m_continent_code_isValid;
}

QString OAIIPInfoResponse::getCountry() const {
    return m_country;
}
void OAIIPInfoResponse::setCountry(const QString &country) {
    m_country = country;
    m_country_isSet = true;
}

bool OAIIPInfoResponse::is_country_Set() const{
    return m_country_isSet;
}

bool OAIIPInfoResponse::is_country_Valid() const{
    return m_country_isValid;
}

QString OAIIPInfoResponse::getCountryCode() const {
    return m_country_code;
}
void OAIIPInfoResponse::setCountryCode(const QString &country_code) {
    m_country_code = country_code;
    m_country_code_isSet = true;
}

bool OAIIPInfoResponse::is_country_code_Set() const{
    return m_country_code_isSet;
}

bool OAIIPInfoResponse::is_country_code_Valid() const{
    return m_country_code_isValid;
}

QString OAIIPInfoResponse::getCountryCode3() const {
    return m_country_code3;
}
void OAIIPInfoResponse::setCountryCode3(const QString &country_code3) {
    m_country_code3 = country_code3;
    m_country_code3_isSet = true;
}

bool OAIIPInfoResponse::is_country_code3_Set() const{
    return m_country_code3_isSet;
}

bool OAIIPInfoResponse::is_country_code3_Valid() const{
    return m_country_code3_isValid;
}

QString OAIIPInfoResponse::getCurrencyCode() const {
    return m_currency_code;
}
void OAIIPInfoResponse::setCurrencyCode(const QString &currency_code) {
    m_currency_code = currency_code;
    m_currency_code_isSet = true;
}

bool OAIIPInfoResponse::is_currency_code_Set() const{
    return m_currency_code_isSet;
}

bool OAIIPInfoResponse::is_currency_code_Valid() const{
    return m_currency_code_isValid;
}

QString OAIIPInfoResponse::getHostDomain() const {
    return m_host_domain;
}
void OAIIPInfoResponse::setHostDomain(const QString &host_domain) {
    m_host_domain = host_domain;
    m_host_domain_isSet = true;
}

bool OAIIPInfoResponse::is_host_domain_Set() const{
    return m_host_domain_isSet;
}

bool OAIIPInfoResponse::is_host_domain_Valid() const{
    return m_host_domain_isValid;
}

QString OAIIPInfoResponse::getHostname() const {
    return m_hostname;
}
void OAIIPInfoResponse::setHostname(const QString &hostname) {
    m_hostname = hostname;
    m_hostname_isSet = true;
}

bool OAIIPInfoResponse::is_hostname_Set() const{
    return m_hostname_isSet;
}

bool OAIIPInfoResponse::is_hostname_Valid() const{
    return m_hostname_isValid;
}

QString OAIIPInfoResponse::getIp() const {
    return m_ip;
}
void OAIIPInfoResponse::setIp(const QString &ip) {
    m_ip = ip;
    m_ip_isSet = true;
}

bool OAIIPInfoResponse::is_ip_Set() const{
    return m_ip_isSet;
}

bool OAIIPInfoResponse::is_ip_Valid() const{
    return m_ip_isValid;
}

bool OAIIPInfoResponse::isIsBogon() const {
    return m_is_bogon;
}
void OAIIPInfoResponse::setIsBogon(const bool &is_bogon) {
    m_is_bogon = is_bogon;
    m_is_bogon_isSet = true;
}

bool OAIIPInfoResponse::is_is_bogon_Set() const{
    return m_is_bogon_isSet;
}

bool OAIIPInfoResponse::is_is_bogon_Valid() const{
    return m_is_bogon_isValid;
}

bool OAIIPInfoResponse::isIsV4Mapped() const {
    return m_is_v4_mapped;
}
void OAIIPInfoResponse::setIsV4Mapped(const bool &is_v4_mapped) {
    m_is_v4_mapped = is_v4_mapped;
    m_is_v4_mapped_isSet = true;
}

bool OAIIPInfoResponse::is_is_v4_mapped_Set() const{
    return m_is_v4_mapped_isSet;
}

bool OAIIPInfoResponse::is_is_v4_mapped_Valid() const{
    return m_is_v4_mapped_isValid;
}

bool OAIIPInfoResponse::isIsV6() const {
    return m_is_v6;
}
void OAIIPInfoResponse::setIsV6(const bool &is_v6) {
    m_is_v6 = is_v6;
    m_is_v6_isSet = true;
}

bool OAIIPInfoResponse::is_is_v6_Set() const{
    return m_is_v6_isSet;
}

bool OAIIPInfoResponse::is_is_v6_Valid() const{
    return m_is_v6_isValid;
}

double OAIIPInfoResponse::getLatitude() const {
    return m_latitude;
}
void OAIIPInfoResponse::setLatitude(const double &latitude) {
    m_latitude = latitude;
    m_latitude_isSet = true;
}

bool OAIIPInfoResponse::is_latitude_Set() const{
    return m_latitude_isSet;
}

bool OAIIPInfoResponse::is_latitude_Valid() const{
    return m_latitude_isValid;
}

double OAIIPInfoResponse::getLongitude() const {
    return m_longitude;
}
void OAIIPInfoResponse::setLongitude(const double &longitude) {
    m_longitude = longitude;
    m_longitude_isSet = true;
}

bool OAIIPInfoResponse::is_longitude_Set() const{
    return m_longitude_isSet;
}

bool OAIIPInfoResponse::is_longitude_Valid() const{
    return m_longitude_isValid;
}

QString OAIIPInfoResponse::getRegion() const {
    return m_region;
}
void OAIIPInfoResponse::setRegion(const QString &region) {
    m_region = region;
    m_region_isSet = true;
}

bool OAIIPInfoResponse::is_region_Set() const{
    return m_region_isSet;
}

bool OAIIPInfoResponse::is_region_Valid() const{
    return m_region_isValid;
}

QString OAIIPInfoResponse::getRegionCode() const {
    return m_region_code;
}
void OAIIPInfoResponse::setRegionCode(const QString &region_code) {
    m_region_code = region_code;
    m_region_code_isSet = true;
}

bool OAIIPInfoResponse::is_region_code_Set() const{
    return m_region_code_isSet;
}

bool OAIIPInfoResponse::is_region_code_Valid() const{
    return m_region_code_isValid;
}

OAITimezone OAIIPInfoResponse::getTimezone() const {
    return m_timezone;
}
void OAIIPInfoResponse::setTimezone(const OAITimezone &timezone) {
    m_timezone = timezone;
    m_timezone_isSet = true;
}

bool OAIIPInfoResponse::is_timezone_Set() const{
    return m_timezone_isSet;
}

bool OAIIPInfoResponse::is_timezone_Valid() const{
    return m_timezone_isValid;
}

bool OAIIPInfoResponse::isRValid() const {
    return m_r_valid;
}
void OAIIPInfoResponse::setRValid(const bool &r_valid) {
    m_r_valid = r_valid;
    m_r_valid_isSet = true;
}

bool OAIIPInfoResponse::is_r_valid_Set() const{
    return m_r_valid_isSet;
}

bool OAIIPInfoResponse::is_r_valid_Valid() const{
    return m_r_valid_isValid;
}

bool OAIIPInfoResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_city_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_continent_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_country_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_country_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_country_code3_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_currency_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_host_domain_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_hostname_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_ip_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_bogon_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_v4_mapped_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_v6_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_latitude_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_longitude_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_region_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_region_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_timezone.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_r_valid_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIIPInfoResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_city_isValid && m_continent_code_isValid && m_country_isValid && m_country_code_isValid && m_country_code3_isValid && m_currency_code_isValid && m_host_domain_isValid && m_hostname_isValid && m_ip_isValid && m_is_bogon_isValid && m_is_v4_mapped_isValid && m_is_v6_isValid && m_latitude_isValid && m_longitude_isValid && m_region_isValid && m_region_code_isValid && m_timezone_isValid && m_r_valid_isValid && true;
}

} // namespace OpenAPI
