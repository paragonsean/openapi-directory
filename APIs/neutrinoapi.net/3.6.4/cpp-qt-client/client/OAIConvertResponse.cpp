/**
 * Neutrino API
 * The general-purpose API
 *
 * The version of the OpenAPI document: 3.6.4
 * Contact: ops@neutrinoapi.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIConvertResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIConvertResponse::OAIConvertResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIConvertResponse::OAIConvertResponse() {
    this->initializeModel();
}

OAIConvertResponse::~OAIConvertResponse() {}

void OAIConvertResponse::initializeModel() {

    m_from_type_isSet = false;
    m_from_type_isValid = false;

    m_from_value_isSet = false;
    m_from_value_isValid = false;

    m_result_isSet = false;
    m_result_isValid = false;

    m_result_float_isSet = false;
    m_result_float_isValid = false;

    m_to_type_isSet = false;
    m_to_type_isValid = false;

    m_r_valid_isSet = false;
    m_r_valid_isValid = false;
}

void OAIConvertResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIConvertResponse::fromJsonObject(QJsonObject json) {

    m_from_type_isValid = ::OpenAPI::fromJsonValue(m_from_type, json[QString("from-type")]);
    m_from_type_isSet = !json[QString("from-type")].isNull() && m_from_type_isValid;

    m_from_value_isValid = ::OpenAPI::fromJsonValue(m_from_value, json[QString("from-value")]);
    m_from_value_isSet = !json[QString("from-value")].isNull() && m_from_value_isValid;

    m_result_isValid = ::OpenAPI::fromJsonValue(m_result, json[QString("result")]);
    m_result_isSet = !json[QString("result")].isNull() && m_result_isValid;

    m_result_float_isValid = ::OpenAPI::fromJsonValue(m_result_float, json[QString("result-float")]);
    m_result_float_isSet = !json[QString("result-float")].isNull() && m_result_float_isValid;

    m_to_type_isValid = ::OpenAPI::fromJsonValue(m_to_type, json[QString("to-type")]);
    m_to_type_isSet = !json[QString("to-type")].isNull() && m_to_type_isValid;

    m_r_valid_isValid = ::OpenAPI::fromJsonValue(m_r_valid, json[QString("valid")]);
    m_r_valid_isSet = !json[QString("valid")].isNull() && m_r_valid_isValid;
}

QString OAIConvertResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIConvertResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_from_type_isSet) {
        obj.insert(QString("from-type"), ::OpenAPI::toJsonValue(m_from_type));
    }
    if (m_from_value_isSet) {
        obj.insert(QString("from-value"), ::OpenAPI::toJsonValue(m_from_value));
    }
    if (m_result_isSet) {
        obj.insert(QString("result"), ::OpenAPI::toJsonValue(m_result));
    }
    if (m_result_float_isSet) {
        obj.insert(QString("result-float"), ::OpenAPI::toJsonValue(m_result_float));
    }
    if (m_to_type_isSet) {
        obj.insert(QString("to-type"), ::OpenAPI::toJsonValue(m_to_type));
    }
    if (m_r_valid_isSet) {
        obj.insert(QString("valid"), ::OpenAPI::toJsonValue(m_r_valid));
    }
    return obj;
}

QString OAIConvertResponse::getFromType() const {
    return m_from_type;
}
void OAIConvertResponse::setFromType(const QString &from_type) {
    m_from_type = from_type;
    m_from_type_isSet = true;
}

bool OAIConvertResponse::is_from_type_Set() const{
    return m_from_type_isSet;
}

bool OAIConvertResponse::is_from_type_Valid() const{
    return m_from_type_isValid;
}

QString OAIConvertResponse::getFromValue() const {
    return m_from_value;
}
void OAIConvertResponse::setFromValue(const QString &from_value) {
    m_from_value = from_value;
    m_from_value_isSet = true;
}

bool OAIConvertResponse::is_from_value_Set() const{
    return m_from_value_isSet;
}

bool OAIConvertResponse::is_from_value_Valid() const{
    return m_from_value_isValid;
}

QString OAIConvertResponse::getResult() const {
    return m_result;
}
void OAIConvertResponse::setResult(const QString &result) {
    m_result = result;
    m_result_isSet = true;
}

bool OAIConvertResponse::is_result_Set() const{
    return m_result_isSet;
}

bool OAIConvertResponse::is_result_Valid() const{
    return m_result_isValid;
}

double OAIConvertResponse::getResultFloat() const {
    return m_result_float;
}
void OAIConvertResponse::setResultFloat(const double &result_float) {
    m_result_float = result_float;
    m_result_float_isSet = true;
}

bool OAIConvertResponse::is_result_float_Set() const{
    return m_result_float_isSet;
}

bool OAIConvertResponse::is_result_float_Valid() const{
    return m_result_float_isValid;
}

QString OAIConvertResponse::getToType() const {
    return m_to_type;
}
void OAIConvertResponse::setToType(const QString &to_type) {
    m_to_type = to_type;
    m_to_type_isSet = true;
}

bool OAIConvertResponse::is_to_type_Set() const{
    return m_to_type_isSet;
}

bool OAIConvertResponse::is_to_type_Valid() const{
    return m_to_type_isValid;
}

bool OAIConvertResponse::isRValid() const {
    return m_r_valid;
}
void OAIConvertResponse::setRValid(const bool &r_valid) {
    m_r_valid = r_valid;
    m_r_valid_isSet = true;
}

bool OAIConvertResponse::is_r_valid_Set() const{
    return m_r_valid_isSet;
}

bool OAIConvertResponse::is_r_valid_Valid() const{
    return m_r_valid_isValid;
}

bool OAIConvertResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_from_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_from_value_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_result_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_result_float_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_to_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_r_valid_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIConvertResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_from_type_isValid && m_from_value_isValid && m_result_isValid && m_result_float_isValid && m_to_type_isValid && m_r_valid_isValid && true;
}

} // namespace OpenAPI
