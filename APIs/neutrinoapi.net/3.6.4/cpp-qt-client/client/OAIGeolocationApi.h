/**
 * Neutrino API
 * The general-purpose API
 *
 * The version of the OpenAPI document: 3.6.4
 * Contact: ops@neutrinoapi.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIGeolocationApi_H
#define OAI_OAIGeolocationApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIAPIError.h"
#include "OAIGeocodeAddressResponse.h"
#include "OAIGeocodeReverseResponse.h"
#include "OAIIPInfoResponse.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIGeolocationApi : public QObject {
    Q_OBJECT

public:
    OAIGeolocationApi(const int timeOut = 0);
    ~OAIGeolocationApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  address QString [optional]
    * @param[in]  house_number QString [optional]
    * @param[in]  street QString [optional]
    * @param[in]  city QString [optional]
    * @param[in]  county QString [optional]
    * @param[in]  state QString [optional]
    * @param[in]  postal_code QString [optional]
    * @param[in]  country_code QString [optional]
    * @param[in]  language_code QString [optional]
    * @param[in]  fuzzy_search bool [optional]
    */
    virtual void geocodeAddress(const ::OpenAPI::OptionalParam<QString> &address = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &house_number = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &street = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &city = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &county = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &state = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &postal_code = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &country_code = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &language_code = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &fuzzy_search = ::OpenAPI::OptionalParam<bool>());

    /**
    * @param[in]  latitude QString [required]
    * @param[in]  longitude QString [required]
    * @param[in]  language_code QString [optional]
    * @param[in]  zoom QString [optional]
    */
    virtual void geocodeReverse(const QString &latitude, const QString &longitude, const ::OpenAPI::OptionalParam<QString> &language_code = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &zoom = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  ip QString [required]
    * @param[in]  reverse_lookup bool [optional]
    */
    virtual void iPInfo(const QString &ip, const ::OpenAPI::OptionalParam<bool> &reverse_lookup = ::OpenAPI::OptionalParam<bool>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void geocodeAddressCallback(OAIHttpRequestWorker *worker);
    void geocodeReverseCallback(OAIHttpRequestWorker *worker);
    void iPInfoCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void geocodeAddressSignal(OAIGeocodeAddressResponse summary);
    void geocodeReverseSignal(OAIGeocodeReverseResponse summary);
    void iPInfoSignal(OAIIPInfoResponse summary);


    void geocodeAddressSignalFull(OAIHttpRequestWorker *worker, OAIGeocodeAddressResponse summary);
    void geocodeReverseSignalFull(OAIHttpRequestWorker *worker, OAIGeocodeReverseResponse summary);
    void iPInfoSignalFull(OAIHttpRequestWorker *worker, OAIIPInfoResponse summary);

    Q_DECL_DEPRECATED_X("Use geocodeAddressSignalError() instead")
    void geocodeAddressSignalE(OAIGeocodeAddressResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void geocodeAddressSignalError(OAIGeocodeAddressResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use geocodeReverseSignalError() instead")
    void geocodeReverseSignalE(OAIGeocodeReverseResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void geocodeReverseSignalError(OAIGeocodeReverseResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use iPInfoSignalError() instead")
    void iPInfoSignalE(OAIIPInfoResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void iPInfoSignalError(OAIIPInfoResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use geocodeAddressSignalErrorFull() instead")
    void geocodeAddressSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void geocodeAddressSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use geocodeReverseSignalErrorFull() instead")
    void geocodeReverseSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void geocodeReverseSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use iPInfoSignalErrorFull() instead")
    void iPInfoSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void iPInfoSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
