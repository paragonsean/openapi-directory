/**
 * Neutrino API
 * The general-purpose API
 *
 * The version of the OpenAPI document: 3.6.4
 * Contact: ops@neutrinoapi.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIHostReputationResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIHostReputationResponse::OAIHostReputationResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIHostReputationResponse::OAIHostReputationResponse() {
    this->initializeModel();
}

OAIHostReputationResponse::~OAIHostReputationResponse() {}

void OAIHostReputationResponse::initializeModel() {

    m_host_isSet = false;
    m_host_isValid = false;

    m_is_listed_isSet = false;
    m_is_listed_isValid = false;

    m_list_count_isSet = false;
    m_list_count_isValid = false;

    m_lists_isSet = false;
    m_lists_isValid = false;
}

void OAIHostReputationResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIHostReputationResponse::fromJsonObject(QJsonObject json) {

    m_host_isValid = ::OpenAPI::fromJsonValue(m_host, json[QString("host")]);
    m_host_isSet = !json[QString("host")].isNull() && m_host_isValid;

    m_is_listed_isValid = ::OpenAPI::fromJsonValue(m_is_listed, json[QString("is-listed")]);
    m_is_listed_isSet = !json[QString("is-listed")].isNull() && m_is_listed_isValid;

    m_list_count_isValid = ::OpenAPI::fromJsonValue(m_list_count, json[QString("list-count")]);
    m_list_count_isSet = !json[QString("list-count")].isNull() && m_list_count_isValid;

    m_lists_isValid = ::OpenAPI::fromJsonValue(m_lists, json[QString("lists")]);
    m_lists_isSet = !json[QString("lists")].isNull() && m_lists_isValid;
}

QString OAIHostReputationResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIHostReputationResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_host_isSet) {
        obj.insert(QString("host"), ::OpenAPI::toJsonValue(m_host));
    }
    if (m_is_listed_isSet) {
        obj.insert(QString("is-listed"), ::OpenAPI::toJsonValue(m_is_listed));
    }
    if (m_list_count_isSet) {
        obj.insert(QString("list-count"), ::OpenAPI::toJsonValue(m_list_count));
    }
    if (m_lists.size() > 0) {
        obj.insert(QString("lists"), ::OpenAPI::toJsonValue(m_lists));
    }
    return obj;
}

QString OAIHostReputationResponse::getHost() const {
    return m_host;
}
void OAIHostReputationResponse::setHost(const QString &host) {
    m_host = host;
    m_host_isSet = true;
}

bool OAIHostReputationResponse::is_host_Set() const{
    return m_host_isSet;
}

bool OAIHostReputationResponse::is_host_Valid() const{
    return m_host_isValid;
}

bool OAIHostReputationResponse::isIsListed() const {
    return m_is_listed;
}
void OAIHostReputationResponse::setIsListed(const bool &is_listed) {
    m_is_listed = is_listed;
    m_is_listed_isSet = true;
}

bool OAIHostReputationResponse::is_is_listed_Set() const{
    return m_is_listed_isSet;
}

bool OAIHostReputationResponse::is_is_listed_Valid() const{
    return m_is_listed_isValid;
}

qint32 OAIHostReputationResponse::getListCount() const {
    return m_list_count;
}
void OAIHostReputationResponse::setListCount(const qint32 &list_count) {
    m_list_count = list_count;
    m_list_count_isSet = true;
}

bool OAIHostReputationResponse::is_list_count_Set() const{
    return m_list_count_isSet;
}

bool OAIHostReputationResponse::is_list_count_Valid() const{
    return m_list_count_isValid;
}

QList<OAIBlacklist> OAIHostReputationResponse::getLists() const {
    return m_lists;
}
void OAIHostReputationResponse::setLists(const QList<OAIBlacklist> &lists) {
    m_lists = lists;
    m_lists_isSet = true;
}

bool OAIHostReputationResponse::is_lists_Set() const{
    return m_lists_isSet;
}

bool OAIHostReputationResponse::is_lists_Valid() const{
    return m_lists_isValid;
}

bool OAIHostReputationResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_host_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_listed_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_list_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_lists.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIHostReputationResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_host_isValid && m_is_listed_isValid && m_list_count_isValid && m_lists_isValid && true;
}

} // namespace OpenAPI
