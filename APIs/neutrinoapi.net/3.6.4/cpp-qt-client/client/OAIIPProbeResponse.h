/**
 * Neutrino API
 * The general-purpose API
 *
 * The version of the OpenAPI document: 3.6.4
 * Contact: ops@neutrinoapi.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIIPProbeResponse.h
 *
 * 
 */

#ifndef OAIIPProbeResponse_H
#define OAIIPProbeResponse_H

#include <QJsonObject>

#include <QList>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAIIPProbeResponse : public OAIObject {
public:
    OAIIPProbeResponse();
    OAIIPProbeResponse(QString json);
    ~OAIIPProbeResponse() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    qint32 getAsAge() const;
    void setAsAge(const qint32 &as_age);
    bool is_as_age_Set() const;
    bool is_as_age_Valid() const;

    QString getAsCidr() const;
    void setAsCidr(const QString &as_cidr);
    bool is_as_cidr_Set() const;
    bool is_as_cidr_Valid() const;

    QString getAsCountryCode() const;
    void setAsCountryCode(const QString &as_country_code);
    bool is_as_country_code_Set() const;
    bool is_as_country_code_Valid() const;

    QString getAsCountryCode3() const;
    void setAsCountryCode3(const QString &as_country_code3);
    bool is_as_country_code3_Set() const;
    bool is_as_country_code3_Valid() const;

    QString getAsDescription() const;
    void setAsDescription(const QString &as_description);
    bool is_as_description_Set() const;
    bool is_as_description_Valid() const;

    QList<QString> getAsDomains() const;
    void setAsDomains(const QList<QString> &as_domains);
    bool is_as_domains_Set() const;
    bool is_as_domains_Valid() const;

    QString getAsn() const;
    void setAsn(const QString &asn);
    bool is_asn_Set() const;
    bool is_asn_Valid() const;

    QString getCity() const;
    void setCity(const QString &city);
    bool is_city_Set() const;
    bool is_city_Valid() const;

    QString getContinentCode() const;
    void setContinentCode(const QString &continent_code);
    bool is_continent_code_Set() const;
    bool is_continent_code_Valid() const;

    QString getCountry() const;
    void setCountry(const QString &country);
    bool is_country_Set() const;
    bool is_country_Valid() const;

    QString getCountryCode() const;
    void setCountryCode(const QString &country_code);
    bool is_country_code_Set() const;
    bool is_country_code_Valid() const;

    QString getCountryCode3() const;
    void setCountryCode3(const QString &country_code3);
    bool is_country_code3_Set() const;
    bool is_country_code3_Valid() const;

    QString getCurrencyCode() const;
    void setCurrencyCode(const QString &currency_code);
    bool is_currency_code_Set() const;
    bool is_currency_code_Valid() const;

    QString getHostDomain() const;
    void setHostDomain(const QString &host_domain);
    bool is_host_domain_Set() const;
    bool is_host_domain_Valid() const;

    QString getHostname() const;
    void setHostname(const QString &hostname);
    bool is_hostname_Set() const;
    bool is_hostname_Valid() const;

    QString getIp() const;
    void setIp(const QString &ip);
    bool is_ip_Set() const;
    bool is_ip_Valid() const;

    bool isIsBogon() const;
    void setIsBogon(const bool &is_bogon);
    bool is_is_bogon_Set() const;
    bool is_is_bogon_Valid() const;

    bool isIsHosting() const;
    void setIsHosting(const bool &is_hosting);
    bool is_is_hosting_Set() const;
    bool is_is_hosting_Valid() const;

    bool isIsIsp() const;
    void setIsIsp(const bool &is_isp);
    bool is_is_isp_Set() const;
    bool is_is_isp_Valid() const;

    bool isIsProxy() const;
    void setIsProxy(const bool &is_proxy);
    bool is_is_proxy_Set() const;
    bool is_is_proxy_Valid() const;

    bool isIsV4Mapped() const;
    void setIsV4Mapped(const bool &is_v4_mapped);
    bool is_is_v4_mapped_Set() const;
    bool is_is_v4_mapped_Valid() const;

    bool isIsV6() const;
    void setIsV6(const bool &is_v6);
    bool is_is_v6_Set() const;
    bool is_is_v6_Valid() const;

    bool isIsVpn() const;
    void setIsVpn(const bool &is_vpn);
    bool is_is_vpn_Set() const;
    bool is_is_vpn_Valid() const;

    QString getProviderDescription() const;
    void setProviderDescription(const QString &provider_description);
    bool is_provider_description_Set() const;
    bool is_provider_description_Valid() const;

    QString getProviderDomain() const;
    void setProviderDomain(const QString &provider_domain);
    bool is_provider_domain_Set() const;
    bool is_provider_domain_Valid() const;

    QString getProviderType() const;
    void setProviderType(const QString &provider_type);
    bool is_provider_type_Set() const;
    bool is_provider_type_Valid() const;

    QString getProviderWebsite() const;
    void setProviderWebsite(const QString &provider_website);
    bool is_provider_website_Set() const;
    bool is_provider_website_Valid() const;

    QString getRegion() const;
    void setRegion(const QString &region);
    bool is_region_Set() const;
    bool is_region_Valid() const;

    QString getRegionCode() const;
    void setRegionCode(const QString &region_code);
    bool is_region_code_Set() const;
    bool is_region_code_Valid() const;

    bool isRValid() const;
    void setRValid(const bool &r_valid);
    bool is_r_valid_Set() const;
    bool is_r_valid_Valid() const;

    QString getVpnDomain() const;
    void setVpnDomain(const QString &vpn_domain);
    bool is_vpn_domain_Set() const;
    bool is_vpn_domain_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    qint32 m_as_age;
    bool m_as_age_isSet;
    bool m_as_age_isValid;

    QString m_as_cidr;
    bool m_as_cidr_isSet;
    bool m_as_cidr_isValid;

    QString m_as_country_code;
    bool m_as_country_code_isSet;
    bool m_as_country_code_isValid;

    QString m_as_country_code3;
    bool m_as_country_code3_isSet;
    bool m_as_country_code3_isValid;

    QString m_as_description;
    bool m_as_description_isSet;
    bool m_as_description_isValid;

    QList<QString> m_as_domains;
    bool m_as_domains_isSet;
    bool m_as_domains_isValid;

    QString m_asn;
    bool m_asn_isSet;
    bool m_asn_isValid;

    QString m_city;
    bool m_city_isSet;
    bool m_city_isValid;

    QString m_continent_code;
    bool m_continent_code_isSet;
    bool m_continent_code_isValid;

    QString m_country;
    bool m_country_isSet;
    bool m_country_isValid;

    QString m_country_code;
    bool m_country_code_isSet;
    bool m_country_code_isValid;

    QString m_country_code3;
    bool m_country_code3_isSet;
    bool m_country_code3_isValid;

    QString m_currency_code;
    bool m_currency_code_isSet;
    bool m_currency_code_isValid;

    QString m_host_domain;
    bool m_host_domain_isSet;
    bool m_host_domain_isValid;

    QString m_hostname;
    bool m_hostname_isSet;
    bool m_hostname_isValid;

    QString m_ip;
    bool m_ip_isSet;
    bool m_ip_isValid;

    bool m_is_bogon;
    bool m_is_bogon_isSet;
    bool m_is_bogon_isValid;

    bool m_is_hosting;
    bool m_is_hosting_isSet;
    bool m_is_hosting_isValid;

    bool m_is_isp;
    bool m_is_isp_isSet;
    bool m_is_isp_isValid;

    bool m_is_proxy;
    bool m_is_proxy_isSet;
    bool m_is_proxy_isValid;

    bool m_is_v4_mapped;
    bool m_is_v4_mapped_isSet;
    bool m_is_v4_mapped_isValid;

    bool m_is_v6;
    bool m_is_v6_isSet;
    bool m_is_v6_isValid;

    bool m_is_vpn;
    bool m_is_vpn_isSet;
    bool m_is_vpn_isValid;

    QString m_provider_description;
    bool m_provider_description_isSet;
    bool m_provider_description_isValid;

    QString m_provider_domain;
    bool m_provider_domain_isSet;
    bool m_provider_domain_isValid;

    QString m_provider_type;
    bool m_provider_type_isSet;
    bool m_provider_type_isValid;

    QString m_provider_website;
    bool m_provider_website_isSet;
    bool m_provider_website_isValid;

    QString m_region;
    bool m_region_isSet;
    bool m_region_isValid;

    QString m_region_code;
    bool m_region_code_isSet;
    bool m_region_code_isValid;

    bool m_r_valid;
    bool m_r_valid_isSet;
    bool m_r_valid_isValid;

    QString m_vpn_domain;
    bool m_vpn_domain_isSet;
    bool m_vpn_domain_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIIPProbeResponse)

#endif // OAIIPProbeResponse_H
