/**
 * Neutrino API
 * The general-purpose API
 *
 * The version of the OpenAPI document: 3.6.4
 * Contact: ops@neutrinoapi.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIURLInfoResponse.h
 *
 * 
 */

#ifndef OAIURLInfoResponse_H
#define OAIURLInfoResponse_H

#include <QJsonObject>

#include <QMap>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAIURLInfoResponse : public OAIObject {
public:
    OAIURLInfoResponse();
    OAIURLInfoResponse(QString json);
    ~OAIURLInfoResponse() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getContent() const;
    void setContent(const QString &content);
    bool is_content_Set() const;
    bool is_content_Valid() const;

    QString getContentEncoding() const;
    void setContentEncoding(const QString &content_encoding);
    bool is_content_encoding_Set() const;
    bool is_content_encoding_Valid() const;

    qint32 getContentSize() const;
    void setContentSize(const qint32 &content_size);
    bool is_content_size_Set() const;
    bool is_content_size_Valid() const;

    QString getContentType() const;
    void setContentType(const QString &content_type);
    bool is_content_type_Set() const;
    bool is_content_type_Valid() const;

    bool isHttpOk() const;
    void setHttpOk(const bool &http_ok);
    bool is_http_ok_Set() const;
    bool is_http_ok_Valid() const;

    bool isHttpRedirect() const;
    void setHttpRedirect(const bool &http_redirect);
    bool is_http_redirect_Set() const;
    bool is_http_redirect_Valid() const;

    qint32 getHttpStatus() const;
    void setHttpStatus(const qint32 &http_status);
    bool is_http_status_Set() const;
    bool is_http_status_Valid() const;

    qint32 getHttpStatusMessage() const;
    void setHttpStatusMessage(const qint32 &http_status_message);
    bool is_http_status_message_Set() const;
    bool is_http_status_message_Valid() const;

    bool isIsError() const;
    void setIsError(const bool &is_error);
    bool is_is_error_Set() const;
    bool is_is_error_Valid() const;

    bool isIsTimeout() const;
    void setIsTimeout(const bool &is_timeout);
    bool is_is_timeout_Set() const;
    bool is_is_timeout_Valid() const;

    QString getLanguageCode() const;
    void setLanguageCode(const QString &language_code);
    bool is_language_code_Set() const;
    bool is_language_code_Valid() const;

    double getLoadTime() const;
    void setLoadTime(const double &load_time);
    bool is_load_time_Set() const;
    bool is_load_time_Valid() const;

    QMap<QString, QString> getQuery() const;
    void setQuery(const QMap<QString, QString> &query);
    bool is_query_Set() const;
    bool is_query_Valid() const;

    bool isReal() const;
    void setReal(const bool &real);
    bool is_real_Set() const;
    bool is_real_Valid() const;

    QString getServerCity() const;
    void setServerCity(const QString &server_city);
    bool is_server_city_Set() const;
    bool is_server_city_Valid() const;

    QString getServerCountry() const;
    void setServerCountry(const QString &server_country);
    bool is_server_country_Set() const;
    bool is_server_country_Valid() const;

    QString getServerCountryCode() const;
    void setServerCountryCode(const QString &server_country_code);
    bool is_server_country_code_Set() const;
    bool is_server_country_code_Valid() const;

    QString getServerHostname() const;
    void setServerHostname(const QString &server_hostname);
    bool is_server_hostname_Set() const;
    bool is_server_hostname_Valid() const;

    QString getServerIp() const;
    void setServerIp(const QString &server_ip);
    bool is_server_ip_Set() const;
    bool is_server_ip_Valid() const;

    QString getServerName() const;
    void setServerName(const QString &server_name);
    bool is_server_name_Set() const;
    bool is_server_name_Valid() const;

    QString getServerRegion() const;
    void setServerRegion(const QString &server_region);
    bool is_server_region_Set() const;
    bool is_server_region_Valid() const;

    QString getTitle() const;
    void setTitle(const QString &title);
    bool is_title_Set() const;
    bool is_title_Valid() const;

    QString getUrl() const;
    void setUrl(const QString &url);
    bool is_url_Set() const;
    bool is_url_Valid() const;

    QString getUrlPath() const;
    void setUrlPath(const QString &url_path);
    bool is_url_path_Set() const;
    bool is_url_path_Valid() const;

    qint32 getUrlPort() const;
    void setUrlPort(const qint32 &url_port);
    bool is_url_port_Set() const;
    bool is_url_port_Valid() const;

    QString getUrlProtocol() const;
    void setUrlProtocol(const QString &url_protocol);
    bool is_url_protocol_Set() const;
    bool is_url_protocol_Valid() const;

    bool isRValid() const;
    void setRValid(const bool &r_valid);
    bool is_r_valid_Set() const;
    bool is_r_valid_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_content;
    bool m_content_isSet;
    bool m_content_isValid;

    QString m_content_encoding;
    bool m_content_encoding_isSet;
    bool m_content_encoding_isValid;

    qint32 m_content_size;
    bool m_content_size_isSet;
    bool m_content_size_isValid;

    QString m_content_type;
    bool m_content_type_isSet;
    bool m_content_type_isValid;

    bool m_http_ok;
    bool m_http_ok_isSet;
    bool m_http_ok_isValid;

    bool m_http_redirect;
    bool m_http_redirect_isSet;
    bool m_http_redirect_isValid;

    qint32 m_http_status;
    bool m_http_status_isSet;
    bool m_http_status_isValid;

    qint32 m_http_status_message;
    bool m_http_status_message_isSet;
    bool m_http_status_message_isValid;

    bool m_is_error;
    bool m_is_error_isSet;
    bool m_is_error_isValid;

    bool m_is_timeout;
    bool m_is_timeout_isSet;
    bool m_is_timeout_isValid;

    QString m_language_code;
    bool m_language_code_isSet;
    bool m_language_code_isValid;

    double m_load_time;
    bool m_load_time_isSet;
    bool m_load_time_isValid;

    QMap<QString, QString> m_query;
    bool m_query_isSet;
    bool m_query_isValid;

    bool m_real;
    bool m_real_isSet;
    bool m_real_isValid;

    QString m_server_city;
    bool m_server_city_isSet;
    bool m_server_city_isValid;

    QString m_server_country;
    bool m_server_country_isSet;
    bool m_server_country_isValid;

    QString m_server_country_code;
    bool m_server_country_code_isSet;
    bool m_server_country_code_isValid;

    QString m_server_hostname;
    bool m_server_hostname_isSet;
    bool m_server_hostname_isValid;

    QString m_server_ip;
    bool m_server_ip_isSet;
    bool m_server_ip_isValid;

    QString m_server_name;
    bool m_server_name_isSet;
    bool m_server_name_isValid;

    QString m_server_region;
    bool m_server_region_isSet;
    bool m_server_region_isValid;

    QString m_title;
    bool m_title_isSet;
    bool m_title_isValid;

    QString m_url;
    bool m_url_isSet;
    bool m_url_isValid;

    QString m_url_path;
    bool m_url_path_isSet;
    bool m_url_path_isValid;

    qint32 m_url_port;
    bool m_url_port_isSet;
    bool m_url_port_isValid;

    QString m_url_protocol;
    bool m_url_protocol_isSet;
    bool m_url_protocol_isValid;

    bool m_r_valid;
    bool m_r_valid_isSet;
    bool m_r_valid_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIURLInfoResponse)

#endif // OAIURLInfoResponse_H
