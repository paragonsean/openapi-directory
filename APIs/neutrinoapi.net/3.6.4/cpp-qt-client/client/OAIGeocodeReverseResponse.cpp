/**
 * Neutrino API
 * The general-purpose API
 *
 * The version of the OpenAPI document: 3.6.4
 * Contact: ops@neutrinoapi.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGeocodeReverseResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGeocodeReverseResponse::OAIGeocodeReverseResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGeocodeReverseResponse::OAIGeocodeReverseResponse() {
    this->initializeModel();
}

OAIGeocodeReverseResponse::~OAIGeocodeReverseResponse() {}

void OAIGeocodeReverseResponse::initializeModel() {

    m_address_isSet = false;
    m_address_isValid = false;

    m_address_components_isSet = false;
    m_address_components_isValid = false;

    m_city_isSet = false;
    m_city_isValid = false;

    m_country_isSet = false;
    m_country_isValid = false;

    m_country_code_isSet = false;
    m_country_code_isValid = false;

    m_country_code3_isSet = false;
    m_country_code3_isValid = false;

    m_currency_code_isSet = false;
    m_currency_code_isValid = false;

    m_found_isSet = false;
    m_found_isValid = false;

    m_latitude_isSet = false;
    m_latitude_isValid = false;

    m_location_tags_isSet = false;
    m_location_tags_isValid = false;

    m_location_type_isSet = false;
    m_location_type_isValid = false;

    m_longitude_isSet = false;
    m_longitude_isValid = false;

    m_postal_address_isSet = false;
    m_postal_address_isValid = false;

    m_postal_code_isSet = false;
    m_postal_code_isValid = false;

    m_region_code_isSet = false;
    m_region_code_isValid = false;

    m_state_isSet = false;
    m_state_isValid = false;

    m_timezone_isSet = false;
    m_timezone_isValid = false;
}

void OAIGeocodeReverseResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGeocodeReverseResponse::fromJsonObject(QJsonObject json) {

    m_address_isValid = ::OpenAPI::fromJsonValue(m_address, json[QString("address")]);
    m_address_isSet = !json[QString("address")].isNull() && m_address_isValid;

    m_address_components_isValid = ::OpenAPI::fromJsonValue(m_address_components, json[QString("address-components")]);
    m_address_components_isSet = !json[QString("address-components")].isNull() && m_address_components_isValid;

    m_city_isValid = ::OpenAPI::fromJsonValue(m_city, json[QString("city")]);
    m_city_isSet = !json[QString("city")].isNull() && m_city_isValid;

    m_country_isValid = ::OpenAPI::fromJsonValue(m_country, json[QString("country")]);
    m_country_isSet = !json[QString("country")].isNull() && m_country_isValid;

    m_country_code_isValid = ::OpenAPI::fromJsonValue(m_country_code, json[QString("country-code")]);
    m_country_code_isSet = !json[QString("country-code")].isNull() && m_country_code_isValid;

    m_country_code3_isValid = ::OpenAPI::fromJsonValue(m_country_code3, json[QString("country-code3")]);
    m_country_code3_isSet = !json[QString("country-code3")].isNull() && m_country_code3_isValid;

    m_currency_code_isValid = ::OpenAPI::fromJsonValue(m_currency_code, json[QString("currency-code")]);
    m_currency_code_isSet = !json[QString("currency-code")].isNull() && m_currency_code_isValid;

    m_found_isValid = ::OpenAPI::fromJsonValue(m_found, json[QString("found")]);
    m_found_isSet = !json[QString("found")].isNull() && m_found_isValid;

    m_latitude_isValid = ::OpenAPI::fromJsonValue(m_latitude, json[QString("latitude")]);
    m_latitude_isSet = !json[QString("latitude")].isNull() && m_latitude_isValid;

    m_location_tags_isValid = ::OpenAPI::fromJsonValue(m_location_tags, json[QString("location-tags")]);
    m_location_tags_isSet = !json[QString("location-tags")].isNull() && m_location_tags_isValid;

    m_location_type_isValid = ::OpenAPI::fromJsonValue(m_location_type, json[QString("location-type")]);
    m_location_type_isSet = !json[QString("location-type")].isNull() && m_location_type_isValid;

    m_longitude_isValid = ::OpenAPI::fromJsonValue(m_longitude, json[QString("longitude")]);
    m_longitude_isSet = !json[QString("longitude")].isNull() && m_longitude_isValid;

    m_postal_address_isValid = ::OpenAPI::fromJsonValue(m_postal_address, json[QString("postal-address")]);
    m_postal_address_isSet = !json[QString("postal-address")].isNull() && m_postal_address_isValid;

    m_postal_code_isValid = ::OpenAPI::fromJsonValue(m_postal_code, json[QString("postal-code")]);
    m_postal_code_isSet = !json[QString("postal-code")].isNull() && m_postal_code_isValid;

    m_region_code_isValid = ::OpenAPI::fromJsonValue(m_region_code, json[QString("region-code")]);
    m_region_code_isSet = !json[QString("region-code")].isNull() && m_region_code_isValid;

    m_state_isValid = ::OpenAPI::fromJsonValue(m_state, json[QString("state")]);
    m_state_isSet = !json[QString("state")].isNull() && m_state_isValid;

    m_timezone_isValid = ::OpenAPI::fromJsonValue(m_timezone, json[QString("timezone")]);
    m_timezone_isSet = !json[QString("timezone")].isNull() && m_timezone_isValid;
}

QString OAIGeocodeReverseResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGeocodeReverseResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_address_isSet) {
        obj.insert(QString("address"), ::OpenAPI::toJsonValue(m_address));
    }
    if (m_address_components.size() > 0) {
        obj.insert(QString("address-components"), ::OpenAPI::toJsonValue(m_address_components));
    }
    if (m_city_isSet) {
        obj.insert(QString("city"), ::OpenAPI::toJsonValue(m_city));
    }
    if (m_country_isSet) {
        obj.insert(QString("country"), ::OpenAPI::toJsonValue(m_country));
    }
    if (m_country_code_isSet) {
        obj.insert(QString("country-code"), ::OpenAPI::toJsonValue(m_country_code));
    }
    if (m_country_code3_isSet) {
        obj.insert(QString("country-code3"), ::OpenAPI::toJsonValue(m_country_code3));
    }
    if (m_currency_code_isSet) {
        obj.insert(QString("currency-code"), ::OpenAPI::toJsonValue(m_currency_code));
    }
    if (m_found_isSet) {
        obj.insert(QString("found"), ::OpenAPI::toJsonValue(m_found));
    }
    if (m_latitude_isSet) {
        obj.insert(QString("latitude"), ::OpenAPI::toJsonValue(m_latitude));
    }
    if (m_location_tags.size() > 0) {
        obj.insert(QString("location-tags"), ::OpenAPI::toJsonValue(m_location_tags));
    }
    if (m_location_type_isSet) {
        obj.insert(QString("location-type"), ::OpenAPI::toJsonValue(m_location_type));
    }
    if (m_longitude_isSet) {
        obj.insert(QString("longitude"), ::OpenAPI::toJsonValue(m_longitude));
    }
    if (m_postal_address_isSet) {
        obj.insert(QString("postal-address"), ::OpenAPI::toJsonValue(m_postal_address));
    }
    if (m_postal_code_isSet) {
        obj.insert(QString("postal-code"), ::OpenAPI::toJsonValue(m_postal_code));
    }
    if (m_region_code_isSet) {
        obj.insert(QString("region-code"), ::OpenAPI::toJsonValue(m_region_code));
    }
    if (m_state_isSet) {
        obj.insert(QString("state"), ::OpenAPI::toJsonValue(m_state));
    }
    if (m_timezone.size() > 0) {
        obj.insert(QString("timezone"), ::OpenAPI::toJsonValue(m_timezone));
    }
    return obj;
}

QString OAIGeocodeReverseResponse::getAddress() const {
    return m_address;
}
void OAIGeocodeReverseResponse::setAddress(const QString &address) {
    m_address = address;
    m_address_isSet = true;
}

bool OAIGeocodeReverseResponse::is_address_Set() const{
    return m_address_isSet;
}

bool OAIGeocodeReverseResponse::is_address_Valid() const{
    return m_address_isValid;
}

QMap<QString, QString> OAIGeocodeReverseResponse::getAddressComponents() const {
    return m_address_components;
}
void OAIGeocodeReverseResponse::setAddressComponents(const QMap<QString, QString> &address_components) {
    m_address_components = address_components;
    m_address_components_isSet = true;
}

bool OAIGeocodeReverseResponse::is_address_components_Set() const{
    return m_address_components_isSet;
}

bool OAIGeocodeReverseResponse::is_address_components_Valid() const{
    return m_address_components_isValid;
}

QString OAIGeocodeReverseResponse::getCity() const {
    return m_city;
}
void OAIGeocodeReverseResponse::setCity(const QString &city) {
    m_city = city;
    m_city_isSet = true;
}

bool OAIGeocodeReverseResponse::is_city_Set() const{
    return m_city_isSet;
}

bool OAIGeocodeReverseResponse::is_city_Valid() const{
    return m_city_isValid;
}

QString OAIGeocodeReverseResponse::getCountry() const {
    return m_country;
}
void OAIGeocodeReverseResponse::setCountry(const QString &country) {
    m_country = country;
    m_country_isSet = true;
}

bool OAIGeocodeReverseResponse::is_country_Set() const{
    return m_country_isSet;
}

bool OAIGeocodeReverseResponse::is_country_Valid() const{
    return m_country_isValid;
}

QString OAIGeocodeReverseResponse::getCountryCode() const {
    return m_country_code;
}
void OAIGeocodeReverseResponse::setCountryCode(const QString &country_code) {
    m_country_code = country_code;
    m_country_code_isSet = true;
}

bool OAIGeocodeReverseResponse::is_country_code_Set() const{
    return m_country_code_isSet;
}

bool OAIGeocodeReverseResponse::is_country_code_Valid() const{
    return m_country_code_isValid;
}

QString OAIGeocodeReverseResponse::getCountryCode3() const {
    return m_country_code3;
}
void OAIGeocodeReverseResponse::setCountryCode3(const QString &country_code3) {
    m_country_code3 = country_code3;
    m_country_code3_isSet = true;
}

bool OAIGeocodeReverseResponse::is_country_code3_Set() const{
    return m_country_code3_isSet;
}

bool OAIGeocodeReverseResponse::is_country_code3_Valid() const{
    return m_country_code3_isValid;
}

QString OAIGeocodeReverseResponse::getCurrencyCode() const {
    return m_currency_code;
}
void OAIGeocodeReverseResponse::setCurrencyCode(const QString &currency_code) {
    m_currency_code = currency_code;
    m_currency_code_isSet = true;
}

bool OAIGeocodeReverseResponse::is_currency_code_Set() const{
    return m_currency_code_isSet;
}

bool OAIGeocodeReverseResponse::is_currency_code_Valid() const{
    return m_currency_code_isValid;
}

bool OAIGeocodeReverseResponse::isFound() const {
    return m_found;
}
void OAIGeocodeReverseResponse::setFound(const bool &found) {
    m_found = found;
    m_found_isSet = true;
}

bool OAIGeocodeReverseResponse::is_found_Set() const{
    return m_found_isSet;
}

bool OAIGeocodeReverseResponse::is_found_Valid() const{
    return m_found_isValid;
}

double OAIGeocodeReverseResponse::getLatitude() const {
    return m_latitude;
}
void OAIGeocodeReverseResponse::setLatitude(const double &latitude) {
    m_latitude = latitude;
    m_latitude_isSet = true;
}

bool OAIGeocodeReverseResponse::is_latitude_Set() const{
    return m_latitude_isSet;
}

bool OAIGeocodeReverseResponse::is_latitude_Valid() const{
    return m_latitude_isValid;
}

QList<QString> OAIGeocodeReverseResponse::getLocationTags() const {
    return m_location_tags;
}
void OAIGeocodeReverseResponse::setLocationTags(const QList<QString> &location_tags) {
    m_location_tags = location_tags;
    m_location_tags_isSet = true;
}

bool OAIGeocodeReverseResponse::is_location_tags_Set() const{
    return m_location_tags_isSet;
}

bool OAIGeocodeReverseResponse::is_location_tags_Valid() const{
    return m_location_tags_isValid;
}

QString OAIGeocodeReverseResponse::getLocationType() const {
    return m_location_type;
}
void OAIGeocodeReverseResponse::setLocationType(const QString &location_type) {
    m_location_type = location_type;
    m_location_type_isSet = true;
}

bool OAIGeocodeReverseResponse::is_location_type_Set() const{
    return m_location_type_isSet;
}

bool OAIGeocodeReverseResponse::is_location_type_Valid() const{
    return m_location_type_isValid;
}

double OAIGeocodeReverseResponse::getLongitude() const {
    return m_longitude;
}
void OAIGeocodeReverseResponse::setLongitude(const double &longitude) {
    m_longitude = longitude;
    m_longitude_isSet = true;
}

bool OAIGeocodeReverseResponse::is_longitude_Set() const{
    return m_longitude_isSet;
}

bool OAIGeocodeReverseResponse::is_longitude_Valid() const{
    return m_longitude_isValid;
}

QString OAIGeocodeReverseResponse::getPostalAddress() const {
    return m_postal_address;
}
void OAIGeocodeReverseResponse::setPostalAddress(const QString &postal_address) {
    m_postal_address = postal_address;
    m_postal_address_isSet = true;
}

bool OAIGeocodeReverseResponse::is_postal_address_Set() const{
    return m_postal_address_isSet;
}

bool OAIGeocodeReverseResponse::is_postal_address_Valid() const{
    return m_postal_address_isValid;
}

QString OAIGeocodeReverseResponse::getPostalCode() const {
    return m_postal_code;
}
void OAIGeocodeReverseResponse::setPostalCode(const QString &postal_code) {
    m_postal_code = postal_code;
    m_postal_code_isSet = true;
}

bool OAIGeocodeReverseResponse::is_postal_code_Set() const{
    return m_postal_code_isSet;
}

bool OAIGeocodeReverseResponse::is_postal_code_Valid() const{
    return m_postal_code_isValid;
}

QString OAIGeocodeReverseResponse::getRegionCode() const {
    return m_region_code;
}
void OAIGeocodeReverseResponse::setRegionCode(const QString &region_code) {
    m_region_code = region_code;
    m_region_code_isSet = true;
}

bool OAIGeocodeReverseResponse::is_region_code_Set() const{
    return m_region_code_isSet;
}

bool OAIGeocodeReverseResponse::is_region_code_Valid() const{
    return m_region_code_isValid;
}

QString OAIGeocodeReverseResponse::getState() const {
    return m_state;
}
void OAIGeocodeReverseResponse::setState(const QString &state) {
    m_state = state;
    m_state_isSet = true;
}

bool OAIGeocodeReverseResponse::is_state_Set() const{
    return m_state_isSet;
}

bool OAIGeocodeReverseResponse::is_state_Valid() const{
    return m_state_isValid;
}

QMap<QString, OAITimezone> OAIGeocodeReverseResponse::getTimezone() const {
    return m_timezone;
}
void OAIGeocodeReverseResponse::setTimezone(const QMap<QString, OAITimezone> &timezone) {
    m_timezone = timezone;
    m_timezone_isSet = true;
}

bool OAIGeocodeReverseResponse::is_timezone_Set() const{
    return m_timezone_isSet;
}

bool OAIGeocodeReverseResponse::is_timezone_Valid() const{
    return m_timezone_isValid;
}

bool OAIGeocodeReverseResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_address_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_address_components.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_city_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_country_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_country_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_country_code3_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_currency_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_found_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_latitude_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_location_tags.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_location_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_longitude_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_postal_address_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_postal_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_region_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_state_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_timezone.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGeocodeReverseResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_address_isValid && m_address_components_isValid && m_city_isValid && m_country_isValid && m_country_code_isValid && m_country_code3_isValid && m_currency_code_isValid && m_found_isValid && m_latitude_isValid && m_location_tags_isValid && m_location_type_isValid && m_longitude_isValid && m_postal_address_isValid && m_postal_code_isValid && m_region_code_isValid && m_state_isValid && m_timezone_isValid && true;
}

} // namespace OpenAPI
