/**
 * Neutrino API
 * The general-purpose API
 *
 * The version of the OpenAPI document: 3.6.4
 * Contact: ops@neutrinoapi.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIImagingApi.h"
#include "OAIServerConfiguration.h"
#include <QJsonArray>
#include <QJsonDocument>

namespace OpenAPI {

OAIImagingApi::OAIImagingApi(const int timeOut)
    : _timeOut(timeOut),
      _manager(nullptr),
      _isResponseCompressionEnabled(false),
      _isRequestCompressionEnabled(false) {
    initializeServerConfigs();
}

OAIImagingApi::~OAIImagingApi() {
}

void OAIImagingApi::initializeServerConfigs() {
    //Default server
    QList<OAIServerConfiguration> defaultConf = QList<OAIServerConfiguration>();
    //varying endpoint server
    defaultConf.append(OAIServerConfiguration(
    QUrl("https://neutrinoapi.net"),
    "No description provided",
    QMap<QString, OAIServerVariable>()));
    _serverConfigs.insert("hTMLRender", defaultConf);
    _serverIndices.insert("hTMLRender", 0);
    _serverConfigs.insert("imageResize", defaultConf);
    _serverIndices.insert("imageResize", 0);
    _serverConfigs.insert("imageWatermark", defaultConf);
    _serverIndices.insert("imageWatermark", 0);
    _serverConfigs.insert("qRCode", defaultConf);
    _serverIndices.insert("qRCode", 0);
}

/**
* returns 0 on success and -1, -2 or -3 on failure.
* -1 when the variable does not exist and -2 if the value is not defined in the enum and -3 if the operation or server index is not found
*/
int OAIImagingApi::setDefaultServerValue(int serverIndex, const QString &operation, const QString &variable, const QString &value) {
    auto it = _serverConfigs.find(operation);
    if (it != _serverConfigs.end() && serverIndex < it.value().size()) {
      return _serverConfigs[operation][serverIndex].setDefaultValue(variable,value);
    }
    return -3;
}
void OAIImagingApi::setServerIndex(const QString &operation, int serverIndex) {
    if (_serverIndices.contains(operation) && serverIndex < _serverConfigs.find(operation).value().size()) {
        _serverIndices[operation] = serverIndex;
    }
}

void OAIImagingApi::setApiKey(const QString &apiKeyName, const QString &apiKey) {
    _apiKeys.insert(apiKeyName, apiKey);
}

void OAIImagingApi::setBearerToken(const QString &token) {
    _bearerToken = token;
}

void OAIImagingApi::setUsername(const QString &username) {
    _username = username;
}

void OAIImagingApi::setPassword(const QString &password) {
    _password = password;
}


void OAIImagingApi::setTimeOut(const int timeOut) {
    _timeOut = timeOut;
}

void OAIImagingApi::setWorkingDirectory(const QString &path) {
    _workingDirectory = path;
}

void OAIImagingApi::setNetworkAccessManager(QNetworkAccessManager* manager) {
    _manager = manager;
}

/**
    * Appends a new ServerConfiguration to the config map for a specific operation.
    * @param operation The id to the target operation.
    * @param url A string that contains the URL of the server
    * @param description A String that describes the server
    * @param variables A map between a variable name and its value. The value is used for substitution in the server's URL template.
    * returns the index of the new server config on success and -1 if the operation is not found
    */
int OAIImagingApi::addServerConfiguration(const QString &operation, const QUrl &url, const QString &description, const QMap<QString, OAIServerVariable> &variables) {
    if (_serverConfigs.contains(operation)) {
        _serverConfigs[operation].append(OAIServerConfiguration(
                    url,
                    description,
                    variables));
        return _serverConfigs[operation].size()-1;
    } else {
        return -1;
    }
}

/**
    * Appends a new ServerConfiguration to the config map for a all operations and sets the index to that server.
    * @param url A string that contains the URL of the server
    * @param description A String that describes the server
    * @param variables A map between a variable name and its value. The value is used for substitution in the server's URL template.
    */
void OAIImagingApi::setNewServerForAllOperations(const QUrl &url, const QString &description, const QMap<QString, OAIServerVariable> &variables) {
    for (auto keyIt = _serverIndices.keyBegin(); keyIt != _serverIndices.keyEnd(); keyIt++) {
        setServerIndex(*keyIt, addServerConfiguration(*keyIt, url, description, variables));
    }
}

/**
    * Appends a new ServerConfiguration to the config map for an operations and sets the index to that server.
    * @param URL A string that contains the URL of the server
    * @param description A String that describes the server
    * @param variables A map between a variable name and its value. The value is used for substitution in the server's URL template.
    */
void OAIImagingApi::setNewServer(const QString &operation, const QUrl &url, const QString &description, const QMap<QString, OAIServerVariable> &variables) {
    setServerIndex(operation, addServerConfiguration(operation, url, description, variables));
}

void OAIImagingApi::addHeaders(const QString &key, const QString &value) {
    _defaultHeaders.insert(key, value);
}

void OAIImagingApi::enableRequestCompression() {
    _isRequestCompressionEnabled = true;
}

void OAIImagingApi::enableResponseCompression() {
    _isResponseCompressionEnabled = true;
}

void OAIImagingApi::abortRequests() {
    Q_EMIT abortRequestsSignal();
}

QString OAIImagingApi::getParamStylePrefix(const QString &style) {
    if (style == "matrix") {
        return ";";
    } else if (style == "label") {
        return ".";
    } else if (style == "form") {
        return "&";
    } else if (style == "simple") {
        return "";
    } else if (style == "spaceDelimited") {
        return "&";
    } else if (style == "pipeDelimited") {
        return "&";
    } else {
        return "none";
    }
}

QString OAIImagingApi::getParamStyleSuffix(const QString &style) {
    if (style == "matrix") {
        return "=";
    } else if (style == "label") {
        return "";
    } else if (style == "form") {
        return "=";
    } else if (style == "simple") {
        return "";
    } else if (style == "spaceDelimited") {
        return "=";
    } else if (style == "pipeDelimited") {
        return "=";
    } else {
        return "none";
    }
}

QString OAIImagingApi::getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode) {

    if (style == "matrix") {
        return (isExplode) ? ";" + name + "=" : ",";

    } else if (style == "label") {
        return (isExplode) ? "." : ",";

    } else if (style == "form") {
        return (isExplode) ? "&" + name + "=" : ",";

    } else if (style == "simple") {
        return ",";
    } else if (style == "spaceDelimited") {
        return (isExplode) ? "&" + name + "=" : " ";

    } else if (style == "pipeDelimited") {
        return (isExplode) ? "&" + name + "=" : "|";

    } else if (style == "deepObject") {
        return (isExplode) ? "&" : "none";

    } else {
        return "none";
    }
}

void OAIImagingApi::hTMLRender(const QString &content, const ::OpenAPI::OptionalParam<QString> &css, const ::OpenAPI::OptionalParam<qint32> &delay, const ::OpenAPI::OptionalParam<QString> &footer, const ::OpenAPI::OptionalParam<QString> &format, const ::OpenAPI::OptionalParam<bool> &grayscale, const ::OpenAPI::OptionalParam<QString> &header, const ::OpenAPI::OptionalParam<bool> &ignore_certificate_errors, const ::OpenAPI::OptionalParam<qint32> &image_height, const ::OpenAPI::OptionalParam<qint32> &image_width, const ::OpenAPI::OptionalParam<bool> &landscape, const ::OpenAPI::OptionalParam<double> &margin, const ::OpenAPI::OptionalParam<double> &margin_bottom, const ::OpenAPI::OptionalParam<double> &margin_left, const ::OpenAPI::OptionalParam<double> &margin_right, const ::OpenAPI::OptionalParam<double> &margin_top, const ::OpenAPI::OptionalParam<double> &page_height, const ::OpenAPI::OptionalParam<QString> &page_size, const ::OpenAPI::OptionalParam<double> &page_width, const ::OpenAPI::OptionalParam<qint32> &timeout, const ::OpenAPI::OptionalParam<QString> &title, const ::OpenAPI::OptionalParam<double> &zoom) {
    QString fullPath = QString(_serverConfigs["hTMLRender"][_serverIndices.value("hTMLRender")].URL()+"/html-render");
    
    if (_apiKeys.contains("api-key")) {
        addHeaders("api-key",_apiKeys.find("api-key").value());
    }
    
    if (_apiKeys.contains("user-id")) {
        addHeaders("user-id",_apiKeys.find("user-id").value());
    }
    
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "POST");

    
    {
        input.add_var("content", ::OpenAPI::toStringValue(content));
    }
    if (css.hasValue())
    {
        input.add_var("css", ::OpenAPI::toStringValue(css.value()));
    }
    if (delay.hasValue())
    {
        input.add_var("delay", ::OpenAPI::toStringValue(delay.value()));
    }
    if (footer.hasValue())
    {
        input.add_var("footer", ::OpenAPI::toStringValue(footer.value()));
    }
    if (format.hasValue())
    {
        input.add_var("format", ::OpenAPI::toStringValue(format.value()));
    }
    if (grayscale.hasValue())
    {
        input.add_var("grayscale", ::OpenAPI::toStringValue(grayscale.value()));
    }
    if (header.hasValue())
    {
        input.add_var("header", ::OpenAPI::toStringValue(header.value()));
    }
    if (ignore_certificate_errors.hasValue())
    {
        input.add_var("ignore-certificate-errors", ::OpenAPI::toStringValue(ignore_certificate_errors.value()));
    }
    if (image_height.hasValue())
    {
        input.add_var("image-height", ::OpenAPI::toStringValue(image_height.value()));
    }
    if (image_width.hasValue())
    {
        input.add_var("image-width", ::OpenAPI::toStringValue(image_width.value()));
    }
    if (landscape.hasValue())
    {
        input.add_var("landscape", ::OpenAPI::toStringValue(landscape.value()));
    }
    if (margin.hasValue())
    {
        input.add_var("margin", ::OpenAPI::toStringValue(margin.value()));
    }
    if (margin_bottom.hasValue())
    {
        input.add_var("margin-bottom", ::OpenAPI::toStringValue(margin_bottom.value()));
    }
    if (margin_left.hasValue())
    {
        input.add_var("margin-left", ::OpenAPI::toStringValue(margin_left.value()));
    }
    if (margin_right.hasValue())
    {
        input.add_var("margin-right", ::OpenAPI::toStringValue(margin_right.value()));
    }
    if (margin_top.hasValue())
    {
        input.add_var("margin-top", ::OpenAPI::toStringValue(margin_top.value()));
    }
    if (page_height.hasValue())
    {
        input.add_var("page-height", ::OpenAPI::toStringValue(page_height.value()));
    }
    if (page_size.hasValue())
    {
        input.add_var("page-size", ::OpenAPI::toStringValue(page_size.value()));
    }
    if (page_width.hasValue())
    {
        input.add_var("page-width", ::OpenAPI::toStringValue(page_width.value()));
    }
    if (timeout.hasValue())
    {
        input.add_var("timeout", ::OpenAPI::toStringValue(timeout.value()));
    }
    if (title.hasValue())
    {
        input.add_var("title", ::OpenAPI::toStringValue(title.value()));
    }
    if (zoom.hasValue())
    {
        input.add_var("zoom", ::OpenAPI::toStringValue(zoom.value()));
    }

    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIImagingApi::hTMLRenderCallback);
    connect(this, &OAIImagingApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIImagingApi::hTMLRenderCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAIHttpFileElement output = worker->getHttpFileElement();
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT hTMLRenderSignal(output);
        Q_EMIT hTMLRenderSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT hTMLRenderSignalE(output, error_type, error_str);
        Q_EMIT hTMLRenderSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT hTMLRenderSignalError(output, error_type, error_str);
        Q_EMIT hTMLRenderSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIImagingApi::imageResize(const QString &image_url, const qint32 &width, const ::OpenAPI::OptionalParam<QString> &bg_color, const ::OpenAPI::OptionalParam<QString> &format, const ::OpenAPI::OptionalParam<qint32> &height, const ::OpenAPI::OptionalParam<QString> &resize_mode) {
    QString fullPath = QString(_serverConfigs["imageResize"][_serverIndices.value("imageResize")].URL()+"/image-resize");
    
    if (_apiKeys.contains("api-key")) {
        addHeaders("api-key",_apiKeys.find("api-key").value());
    }
    
    if (_apiKeys.contains("user-id")) {
        addHeaders("user-id",_apiKeys.find("user-id").value());
    }
    
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "POST");

    if (bg_color.hasValue())
    {
        input.add_var("bg-color", ::OpenAPI::toStringValue(bg_color.value()));
    }
    if (format.hasValue())
    {
        input.add_var("format", ::OpenAPI::toStringValue(format.value()));
    }
    if (height.hasValue())
    {
        input.add_var("height", ::OpenAPI::toStringValue(height.value()));
    }
    
    {
        input.add_var("image-url", ::OpenAPI::toStringValue(image_url));
    }
    if (resize_mode.hasValue())
    {
        input.add_var("resize-mode", ::OpenAPI::toStringValue(resize_mode.value()));
    }
    
    {
        input.add_var("width", ::OpenAPI::toStringValue(width));
    }

    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIImagingApi::imageResizeCallback);
    connect(this, &OAIImagingApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIImagingApi::imageResizeCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAIHttpFileElement output = worker->getHttpFileElement();
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT imageResizeSignal(output);
        Q_EMIT imageResizeSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT imageResizeSignalE(output, error_type, error_str);
        Q_EMIT imageResizeSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT imageResizeSignalError(output, error_type, error_str);
        Q_EMIT imageResizeSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIImagingApi::imageWatermark(const QString &image_url, const QString &watermark_url, const ::OpenAPI::OptionalParam<QString> &bg_color, const ::OpenAPI::OptionalParam<QString> &format, const ::OpenAPI::OptionalParam<qint32> &height, const ::OpenAPI::OptionalParam<qint32> &opacity, const ::OpenAPI::OptionalParam<QString> &position, const ::OpenAPI::OptionalParam<QString> &resize_mode, const ::OpenAPI::OptionalParam<qint32> &width) {
    QString fullPath = QString(_serverConfigs["imageWatermark"][_serverIndices.value("imageWatermark")].URL()+"/image-watermark");
    
    if (_apiKeys.contains("api-key")) {
        addHeaders("api-key",_apiKeys.find("api-key").value());
    }
    
    if (_apiKeys.contains("user-id")) {
        addHeaders("user-id",_apiKeys.find("user-id").value());
    }
    
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "POST");

    if (bg_color.hasValue())
    {
        input.add_var("bg-color", ::OpenAPI::toStringValue(bg_color.value()));
    }
    if (format.hasValue())
    {
        input.add_var("format", ::OpenAPI::toStringValue(format.value()));
    }
    if (height.hasValue())
    {
        input.add_var("height", ::OpenAPI::toStringValue(height.value()));
    }
    
    {
        input.add_var("image-url", ::OpenAPI::toStringValue(image_url));
    }
    if (opacity.hasValue())
    {
        input.add_var("opacity", ::OpenAPI::toStringValue(opacity.value()));
    }
    if (position.hasValue())
    {
        input.add_var("position", ::OpenAPI::toStringValue(position.value()));
    }
    if (resize_mode.hasValue())
    {
        input.add_var("resize-mode", ::OpenAPI::toStringValue(resize_mode.value()));
    }
    
    {
        input.add_var("watermark-url", ::OpenAPI::toStringValue(watermark_url));
    }
    if (width.hasValue())
    {
        input.add_var("width", ::OpenAPI::toStringValue(width.value()));
    }

    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIImagingApi::imageWatermarkCallback);
    connect(this, &OAIImagingApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIImagingApi::imageWatermarkCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAIHttpFileElement output = worker->getHttpFileElement();
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT imageWatermarkSignal(output);
        Q_EMIT imageWatermarkSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT imageWatermarkSignalE(output, error_type, error_str);
        Q_EMIT imageWatermarkSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT imageWatermarkSignalError(output, error_type, error_str);
        Q_EMIT imageWatermarkSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIImagingApi::qRCode(const QString &content, const ::OpenAPI::OptionalParam<QString> &bg_color, const ::OpenAPI::OptionalParam<QString> &fg_color, const ::OpenAPI::OptionalParam<qint32> &height, const ::OpenAPI::OptionalParam<qint32> &width) {
    QString fullPath = QString(_serverConfigs["qRCode"][_serverIndices.value("qRCode")].URL()+"/qr-code");
    
    if (_apiKeys.contains("api-key")) {
        addHeaders("api-key",_apiKeys.find("api-key").value());
    }
    
    if (_apiKeys.contains("user-id")) {
        addHeaders("user-id",_apiKeys.find("user-id").value());
    }
    
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "POST");

    if (bg_color.hasValue())
    {
        input.add_var("bg-color", ::OpenAPI::toStringValue(bg_color.value()));
    }
    
    {
        input.add_var("content", ::OpenAPI::toStringValue(content));
    }
    if (fg_color.hasValue())
    {
        input.add_var("fg-color", ::OpenAPI::toStringValue(fg_color.value()));
    }
    if (height.hasValue())
    {
        input.add_var("height", ::OpenAPI::toStringValue(height.value()));
    }
    if (width.hasValue())
    {
        input.add_var("width", ::OpenAPI::toStringValue(width.value()));
    }

    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIImagingApi::qRCodeCallback);
    connect(this, &OAIImagingApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIImagingApi::qRCodeCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAIHttpFileElement output = worker->getHttpFileElement();
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT qRCodeSignal(output);
        Q_EMIT qRCodeSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT qRCodeSignalE(output, error_type, error_str);
        Q_EMIT qRCodeSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT qRCodeSignalError(output, error_type, error_str);
        Q_EMIT qRCodeSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIImagingApi::tokenAvailable(){

    oauthToken token;
    switch (_OauthMethod) {
    case 1: //implicit flow
        token = _implicitFlow.getToken(_latestScope.join(" "));
        if(token.isValid()){
            _latestInput.headers.insert("Authorization", "Bearer " + token.getToken());
            _latestWorker->execute(&_latestInput);
        }else{
            _implicitFlow.removeToken(_latestScope.join(" "));
            qDebug() << "Could not retrieve a valid token";
        }
        break;
    case 2: //authorization flow
        token = _authFlow.getToken(_latestScope.join(" "));
        if(token.isValid()){
            _latestInput.headers.insert("Authorization", "Bearer " + token.getToken());
            _latestWorker->execute(&_latestInput);
        }else{
            _authFlow.removeToken(_latestScope.join(" "));
            qDebug() << "Could not retrieve a valid token";
        }
        break;
    case 3: //client credentials flow
        token = _credentialFlow.getToken(_latestScope.join(" "));
        if(token.isValid()){
            _latestInput.headers.insert("Authorization", "Bearer " + token.getToken());
            _latestWorker->execute(&_latestInput);
        }else{
            _credentialFlow.removeToken(_latestScope.join(" "));
            qDebug() << "Could not retrieve a valid token";
        }
        break;
    case 4: //resource owner password flow
        token = _passwordFlow.getToken(_latestScope.join(" "));
        if(token.isValid()){
            _latestInput.headers.insert("Authorization", "Bearer " + token.getToken());
            _latestWorker->execute(&_latestInput);
        }else{
            _credentialFlow.removeToken(_latestScope.join(" "));
            qDebug() << "Could not retrieve a valid token";
        }
        break;
    default:
        qDebug() << "No Oauth method set!";
        break;
    }
}
} // namespace OpenAPI
