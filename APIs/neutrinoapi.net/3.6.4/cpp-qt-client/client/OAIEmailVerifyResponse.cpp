/**
 * Neutrino API
 * The general-purpose API
 *
 * The version of the OpenAPI document: 3.6.4
 * Contact: ops@neutrinoapi.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIEmailVerifyResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIEmailVerifyResponse::OAIEmailVerifyResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIEmailVerifyResponse::OAIEmailVerifyResponse() {
    this->initializeModel();
}

OAIEmailVerifyResponse::~OAIEmailVerifyResponse() {}

void OAIEmailVerifyResponse::initializeModel() {

    m_domain_isSet = false;
    m_domain_isValid = false;

    m_domain_error_isSet = false;
    m_domain_error_isValid = false;

    m_email_isSet = false;
    m_email_isValid = false;

    m_is_catch_all_isSet = false;
    m_is_catch_all_isValid = false;

    m_is_deferred_isSet = false;
    m_is_deferred_isValid = false;

    m_is_disposable_isSet = false;
    m_is_disposable_isValid = false;

    m_is_freemail_isSet = false;
    m_is_freemail_isValid = false;

    m_is_personal_isSet = false;
    m_is_personal_isValid = false;

    m_provider_isSet = false;
    m_provider_isValid = false;

    m_smtp_response_isSet = false;
    m_smtp_response_isValid = false;

    m_smtp_status_isSet = false;
    m_smtp_status_isValid = false;

    m_syntax_error_isSet = false;
    m_syntax_error_isValid = false;

    m_typos_fixed_isSet = false;
    m_typos_fixed_isValid = false;

    m_r_valid_isSet = false;
    m_r_valid_isValid = false;

    m_verified_isSet = false;
    m_verified_isValid = false;
}

void OAIEmailVerifyResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIEmailVerifyResponse::fromJsonObject(QJsonObject json) {

    m_domain_isValid = ::OpenAPI::fromJsonValue(m_domain, json[QString("domain")]);
    m_domain_isSet = !json[QString("domain")].isNull() && m_domain_isValid;

    m_domain_error_isValid = ::OpenAPI::fromJsonValue(m_domain_error, json[QString("domain-error")]);
    m_domain_error_isSet = !json[QString("domain-error")].isNull() && m_domain_error_isValid;

    m_email_isValid = ::OpenAPI::fromJsonValue(m_email, json[QString("email")]);
    m_email_isSet = !json[QString("email")].isNull() && m_email_isValid;

    m_is_catch_all_isValid = ::OpenAPI::fromJsonValue(m_is_catch_all, json[QString("is-catch-all")]);
    m_is_catch_all_isSet = !json[QString("is-catch-all")].isNull() && m_is_catch_all_isValid;

    m_is_deferred_isValid = ::OpenAPI::fromJsonValue(m_is_deferred, json[QString("is-deferred")]);
    m_is_deferred_isSet = !json[QString("is-deferred")].isNull() && m_is_deferred_isValid;

    m_is_disposable_isValid = ::OpenAPI::fromJsonValue(m_is_disposable, json[QString("is-disposable")]);
    m_is_disposable_isSet = !json[QString("is-disposable")].isNull() && m_is_disposable_isValid;

    m_is_freemail_isValid = ::OpenAPI::fromJsonValue(m_is_freemail, json[QString("is-freemail")]);
    m_is_freemail_isSet = !json[QString("is-freemail")].isNull() && m_is_freemail_isValid;

    m_is_personal_isValid = ::OpenAPI::fromJsonValue(m_is_personal, json[QString("is-personal")]);
    m_is_personal_isSet = !json[QString("is-personal")].isNull() && m_is_personal_isValid;

    m_provider_isValid = ::OpenAPI::fromJsonValue(m_provider, json[QString("provider")]);
    m_provider_isSet = !json[QString("provider")].isNull() && m_provider_isValid;

    m_smtp_response_isValid = ::OpenAPI::fromJsonValue(m_smtp_response, json[QString("smtp-response")]);
    m_smtp_response_isSet = !json[QString("smtp-response")].isNull() && m_smtp_response_isValid;

    m_smtp_status_isValid = ::OpenAPI::fromJsonValue(m_smtp_status, json[QString("smtp-status")]);
    m_smtp_status_isSet = !json[QString("smtp-status")].isNull() && m_smtp_status_isValid;

    m_syntax_error_isValid = ::OpenAPI::fromJsonValue(m_syntax_error, json[QString("syntax-error")]);
    m_syntax_error_isSet = !json[QString("syntax-error")].isNull() && m_syntax_error_isValid;

    m_typos_fixed_isValid = ::OpenAPI::fromJsonValue(m_typos_fixed, json[QString("typos-fixed")]);
    m_typos_fixed_isSet = !json[QString("typos-fixed")].isNull() && m_typos_fixed_isValid;

    m_r_valid_isValid = ::OpenAPI::fromJsonValue(m_r_valid, json[QString("valid")]);
    m_r_valid_isSet = !json[QString("valid")].isNull() && m_r_valid_isValid;

    m_verified_isValid = ::OpenAPI::fromJsonValue(m_verified, json[QString("verified")]);
    m_verified_isSet = !json[QString("verified")].isNull() && m_verified_isValid;
}

QString OAIEmailVerifyResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIEmailVerifyResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_domain_isSet) {
        obj.insert(QString("domain"), ::OpenAPI::toJsonValue(m_domain));
    }
    if (m_domain_error_isSet) {
        obj.insert(QString("domain-error"), ::OpenAPI::toJsonValue(m_domain_error));
    }
    if (m_email_isSet) {
        obj.insert(QString("email"), ::OpenAPI::toJsonValue(m_email));
    }
    if (m_is_catch_all_isSet) {
        obj.insert(QString("is-catch-all"), ::OpenAPI::toJsonValue(m_is_catch_all));
    }
    if (m_is_deferred_isSet) {
        obj.insert(QString("is-deferred"), ::OpenAPI::toJsonValue(m_is_deferred));
    }
    if (m_is_disposable_isSet) {
        obj.insert(QString("is-disposable"), ::OpenAPI::toJsonValue(m_is_disposable));
    }
    if (m_is_freemail_isSet) {
        obj.insert(QString("is-freemail"), ::OpenAPI::toJsonValue(m_is_freemail));
    }
    if (m_is_personal_isSet) {
        obj.insert(QString("is-personal"), ::OpenAPI::toJsonValue(m_is_personal));
    }
    if (m_provider_isSet) {
        obj.insert(QString("provider"), ::OpenAPI::toJsonValue(m_provider));
    }
    if (m_smtp_response_isSet) {
        obj.insert(QString("smtp-response"), ::OpenAPI::toJsonValue(m_smtp_response));
    }
    if (m_smtp_status_isSet) {
        obj.insert(QString("smtp-status"), ::OpenAPI::toJsonValue(m_smtp_status));
    }
    if (m_syntax_error_isSet) {
        obj.insert(QString("syntax-error"), ::OpenAPI::toJsonValue(m_syntax_error));
    }
    if (m_typos_fixed_isSet) {
        obj.insert(QString("typos-fixed"), ::OpenAPI::toJsonValue(m_typos_fixed));
    }
    if (m_r_valid_isSet) {
        obj.insert(QString("valid"), ::OpenAPI::toJsonValue(m_r_valid));
    }
    if (m_verified_isSet) {
        obj.insert(QString("verified"), ::OpenAPI::toJsonValue(m_verified));
    }
    return obj;
}

QString OAIEmailVerifyResponse::getDomain() const {
    return m_domain;
}
void OAIEmailVerifyResponse::setDomain(const QString &domain) {
    m_domain = domain;
    m_domain_isSet = true;
}

bool OAIEmailVerifyResponse::is_domain_Set() const{
    return m_domain_isSet;
}

bool OAIEmailVerifyResponse::is_domain_Valid() const{
    return m_domain_isValid;
}

bool OAIEmailVerifyResponse::isDomainError() const {
    return m_domain_error;
}
void OAIEmailVerifyResponse::setDomainError(const bool &domain_error) {
    m_domain_error = domain_error;
    m_domain_error_isSet = true;
}

bool OAIEmailVerifyResponse::is_domain_error_Set() const{
    return m_domain_error_isSet;
}

bool OAIEmailVerifyResponse::is_domain_error_Valid() const{
    return m_domain_error_isValid;
}

QString OAIEmailVerifyResponse::getEmail() const {
    return m_email;
}
void OAIEmailVerifyResponse::setEmail(const QString &email) {
    m_email = email;
    m_email_isSet = true;
}

bool OAIEmailVerifyResponse::is_email_Set() const{
    return m_email_isSet;
}

bool OAIEmailVerifyResponse::is_email_Valid() const{
    return m_email_isValid;
}

bool OAIEmailVerifyResponse::isIsCatchAll() const {
    return m_is_catch_all;
}
void OAIEmailVerifyResponse::setIsCatchAll(const bool &is_catch_all) {
    m_is_catch_all = is_catch_all;
    m_is_catch_all_isSet = true;
}

bool OAIEmailVerifyResponse::is_is_catch_all_Set() const{
    return m_is_catch_all_isSet;
}

bool OAIEmailVerifyResponse::is_is_catch_all_Valid() const{
    return m_is_catch_all_isValid;
}

bool OAIEmailVerifyResponse::isIsDeferred() const {
    return m_is_deferred;
}
void OAIEmailVerifyResponse::setIsDeferred(const bool &is_deferred) {
    m_is_deferred = is_deferred;
    m_is_deferred_isSet = true;
}

bool OAIEmailVerifyResponse::is_is_deferred_Set() const{
    return m_is_deferred_isSet;
}

bool OAIEmailVerifyResponse::is_is_deferred_Valid() const{
    return m_is_deferred_isValid;
}

bool OAIEmailVerifyResponse::isIsDisposable() const {
    return m_is_disposable;
}
void OAIEmailVerifyResponse::setIsDisposable(const bool &is_disposable) {
    m_is_disposable = is_disposable;
    m_is_disposable_isSet = true;
}

bool OAIEmailVerifyResponse::is_is_disposable_Set() const{
    return m_is_disposable_isSet;
}

bool OAIEmailVerifyResponse::is_is_disposable_Valid() const{
    return m_is_disposable_isValid;
}

bool OAIEmailVerifyResponse::isIsFreemail() const {
    return m_is_freemail;
}
void OAIEmailVerifyResponse::setIsFreemail(const bool &is_freemail) {
    m_is_freemail = is_freemail;
    m_is_freemail_isSet = true;
}

bool OAIEmailVerifyResponse::is_is_freemail_Set() const{
    return m_is_freemail_isSet;
}

bool OAIEmailVerifyResponse::is_is_freemail_Valid() const{
    return m_is_freemail_isValid;
}

bool OAIEmailVerifyResponse::isIsPersonal() const {
    return m_is_personal;
}
void OAIEmailVerifyResponse::setIsPersonal(const bool &is_personal) {
    m_is_personal = is_personal;
    m_is_personal_isSet = true;
}

bool OAIEmailVerifyResponse::is_is_personal_Set() const{
    return m_is_personal_isSet;
}

bool OAIEmailVerifyResponse::is_is_personal_Valid() const{
    return m_is_personal_isValid;
}

QString OAIEmailVerifyResponse::getProvider() const {
    return m_provider;
}
void OAIEmailVerifyResponse::setProvider(const QString &provider) {
    m_provider = provider;
    m_provider_isSet = true;
}

bool OAIEmailVerifyResponse::is_provider_Set() const{
    return m_provider_isSet;
}

bool OAIEmailVerifyResponse::is_provider_Valid() const{
    return m_provider_isValid;
}

QString OAIEmailVerifyResponse::getSmtpResponse() const {
    return m_smtp_response;
}
void OAIEmailVerifyResponse::setSmtpResponse(const QString &smtp_response) {
    m_smtp_response = smtp_response;
    m_smtp_response_isSet = true;
}

bool OAIEmailVerifyResponse::is_smtp_response_Set() const{
    return m_smtp_response_isSet;
}

bool OAIEmailVerifyResponse::is_smtp_response_Valid() const{
    return m_smtp_response_isValid;
}

QString OAIEmailVerifyResponse::getSmtpStatus() const {
    return m_smtp_status;
}
void OAIEmailVerifyResponse::setSmtpStatus(const QString &smtp_status) {
    m_smtp_status = smtp_status;
    m_smtp_status_isSet = true;
}

bool OAIEmailVerifyResponse::is_smtp_status_Set() const{
    return m_smtp_status_isSet;
}

bool OAIEmailVerifyResponse::is_smtp_status_Valid() const{
    return m_smtp_status_isValid;
}

bool OAIEmailVerifyResponse::isSyntaxError() const {
    return m_syntax_error;
}
void OAIEmailVerifyResponse::setSyntaxError(const bool &syntax_error) {
    m_syntax_error = syntax_error;
    m_syntax_error_isSet = true;
}

bool OAIEmailVerifyResponse::is_syntax_error_Set() const{
    return m_syntax_error_isSet;
}

bool OAIEmailVerifyResponse::is_syntax_error_Valid() const{
    return m_syntax_error_isValid;
}

bool OAIEmailVerifyResponse::isTyposFixed() const {
    return m_typos_fixed;
}
void OAIEmailVerifyResponse::setTyposFixed(const bool &typos_fixed) {
    m_typos_fixed = typos_fixed;
    m_typos_fixed_isSet = true;
}

bool OAIEmailVerifyResponse::is_typos_fixed_Set() const{
    return m_typos_fixed_isSet;
}

bool OAIEmailVerifyResponse::is_typos_fixed_Valid() const{
    return m_typos_fixed_isValid;
}

bool OAIEmailVerifyResponse::isRValid() const {
    return m_r_valid;
}
void OAIEmailVerifyResponse::setRValid(const bool &r_valid) {
    m_r_valid = r_valid;
    m_r_valid_isSet = true;
}

bool OAIEmailVerifyResponse::is_r_valid_Set() const{
    return m_r_valid_isSet;
}

bool OAIEmailVerifyResponse::is_r_valid_Valid() const{
    return m_r_valid_isValid;
}

bool OAIEmailVerifyResponse::isVerified() const {
    return m_verified;
}
void OAIEmailVerifyResponse::setVerified(const bool &verified) {
    m_verified = verified;
    m_verified_isSet = true;
}

bool OAIEmailVerifyResponse::is_verified_Set() const{
    return m_verified_isSet;
}

bool OAIEmailVerifyResponse::is_verified_Valid() const{
    return m_verified_isValid;
}

bool OAIEmailVerifyResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_domain_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_domain_error_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_email_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_catch_all_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_deferred_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_disposable_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_freemail_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_personal_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_provider_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_smtp_response_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_smtp_status_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_syntax_error_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_typos_fixed_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_r_valid_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_verified_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIEmailVerifyResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_domain_isValid && m_domain_error_isValid && m_email_isValid && m_is_catch_all_isValid && m_is_deferred_isValid && m_is_disposable_isValid && m_is_freemail_isValid && m_is_personal_isValid && m_provider_isValid && m_smtp_response_isValid && m_smtp_status_isValid && m_syntax_error_isValid && m_typos_fixed_isValid && m_r_valid_isValid && m_verified_isValid && true;
}

} // namespace OpenAPI
