/**
 * Neutrino API
 * The general-purpose API
 *
 * The version of the OpenAPI document: 3.6.4
 * Contact: ops@neutrinoapi.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIHLRLookupResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIHLRLookupResponse::OAIHLRLookupResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIHLRLookupResponse::OAIHLRLookupResponse() {
    this->initializeModel();
}

OAIHLRLookupResponse::~OAIHLRLookupResponse() {}

void OAIHLRLookupResponse::initializeModel() {

    m_country_isSet = false;
    m_country_isValid = false;

    m_country_code_isSet = false;
    m_country_code_isValid = false;

    m_country_code3_isSet = false;
    m_country_code3_isValid = false;

    m_currency_code_isSet = false;
    m_currency_code_isValid = false;

    m_current_network_isSet = false;
    m_current_network_isValid = false;

    m_hlr_status_isSet = false;
    m_hlr_status_isValid = false;

    m_hlr_valid_isSet = false;
    m_hlr_valid_isValid = false;

    m_imsi_isSet = false;
    m_imsi_isValid = false;

    m_international_calling_code_isSet = false;
    m_international_calling_code_isValid = false;

    m_international_number_isSet = false;
    m_international_number_isValid = false;

    m_is_mobile_isSet = false;
    m_is_mobile_isValid = false;

    m_is_ported_isSet = false;
    m_is_ported_isValid = false;

    m_is_roaming_isSet = false;
    m_is_roaming_isValid = false;

    m_local_number_isSet = false;
    m_local_number_isValid = false;

    m_location_isSet = false;
    m_location_isValid = false;

    m_mcc_isSet = false;
    m_mcc_isValid = false;

    m_mnc_isSet = false;
    m_mnc_isValid = false;

    m_msc_isSet = false;
    m_msc_isValid = false;

    m_msin_isSet = false;
    m_msin_isValid = false;

    m_number_type_isSet = false;
    m_number_type_isValid = false;

    m_number_valid_isSet = false;
    m_number_valid_isValid = false;

    m_origin_network_isSet = false;
    m_origin_network_isValid = false;

    m_ported_network_isSet = false;
    m_ported_network_isValid = false;

    m_roaming_country_code_isSet = false;
    m_roaming_country_code_isValid = false;
}

void OAIHLRLookupResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIHLRLookupResponse::fromJsonObject(QJsonObject json) {

    m_country_isValid = ::OpenAPI::fromJsonValue(m_country, json[QString("country")]);
    m_country_isSet = !json[QString("country")].isNull() && m_country_isValid;

    m_country_code_isValid = ::OpenAPI::fromJsonValue(m_country_code, json[QString("country-code")]);
    m_country_code_isSet = !json[QString("country-code")].isNull() && m_country_code_isValid;

    m_country_code3_isValid = ::OpenAPI::fromJsonValue(m_country_code3, json[QString("country-code3")]);
    m_country_code3_isSet = !json[QString("country-code3")].isNull() && m_country_code3_isValid;

    m_currency_code_isValid = ::OpenAPI::fromJsonValue(m_currency_code, json[QString("currency-code")]);
    m_currency_code_isSet = !json[QString("currency-code")].isNull() && m_currency_code_isValid;

    m_current_network_isValid = ::OpenAPI::fromJsonValue(m_current_network, json[QString("current-network")]);
    m_current_network_isSet = !json[QString("current-network")].isNull() && m_current_network_isValid;

    m_hlr_status_isValid = ::OpenAPI::fromJsonValue(m_hlr_status, json[QString("hlr-status")]);
    m_hlr_status_isSet = !json[QString("hlr-status")].isNull() && m_hlr_status_isValid;

    m_hlr_valid_isValid = ::OpenAPI::fromJsonValue(m_hlr_valid, json[QString("hlr-valid")]);
    m_hlr_valid_isSet = !json[QString("hlr-valid")].isNull() && m_hlr_valid_isValid;

    m_imsi_isValid = ::OpenAPI::fromJsonValue(m_imsi, json[QString("imsi")]);
    m_imsi_isSet = !json[QString("imsi")].isNull() && m_imsi_isValid;

    m_international_calling_code_isValid = ::OpenAPI::fromJsonValue(m_international_calling_code, json[QString("international-calling-code")]);
    m_international_calling_code_isSet = !json[QString("international-calling-code")].isNull() && m_international_calling_code_isValid;

    m_international_number_isValid = ::OpenAPI::fromJsonValue(m_international_number, json[QString("international-number")]);
    m_international_number_isSet = !json[QString("international-number")].isNull() && m_international_number_isValid;

    m_is_mobile_isValid = ::OpenAPI::fromJsonValue(m_is_mobile, json[QString("is-mobile")]);
    m_is_mobile_isSet = !json[QString("is-mobile")].isNull() && m_is_mobile_isValid;

    m_is_ported_isValid = ::OpenAPI::fromJsonValue(m_is_ported, json[QString("is-ported")]);
    m_is_ported_isSet = !json[QString("is-ported")].isNull() && m_is_ported_isValid;

    m_is_roaming_isValid = ::OpenAPI::fromJsonValue(m_is_roaming, json[QString("is-roaming")]);
    m_is_roaming_isSet = !json[QString("is-roaming")].isNull() && m_is_roaming_isValid;

    m_local_number_isValid = ::OpenAPI::fromJsonValue(m_local_number, json[QString("local-number")]);
    m_local_number_isSet = !json[QString("local-number")].isNull() && m_local_number_isValid;

    m_location_isValid = ::OpenAPI::fromJsonValue(m_location, json[QString("location")]);
    m_location_isSet = !json[QString("location")].isNull() && m_location_isValid;

    m_mcc_isValid = ::OpenAPI::fromJsonValue(m_mcc, json[QString("mcc")]);
    m_mcc_isSet = !json[QString("mcc")].isNull() && m_mcc_isValid;

    m_mnc_isValid = ::OpenAPI::fromJsonValue(m_mnc, json[QString("mnc")]);
    m_mnc_isSet = !json[QString("mnc")].isNull() && m_mnc_isValid;

    m_msc_isValid = ::OpenAPI::fromJsonValue(m_msc, json[QString("msc")]);
    m_msc_isSet = !json[QString("msc")].isNull() && m_msc_isValid;

    m_msin_isValid = ::OpenAPI::fromJsonValue(m_msin, json[QString("msin")]);
    m_msin_isSet = !json[QString("msin")].isNull() && m_msin_isValid;

    m_number_type_isValid = ::OpenAPI::fromJsonValue(m_number_type, json[QString("number-type")]);
    m_number_type_isSet = !json[QString("number-type")].isNull() && m_number_type_isValid;

    m_number_valid_isValid = ::OpenAPI::fromJsonValue(m_number_valid, json[QString("number-valid")]);
    m_number_valid_isSet = !json[QString("number-valid")].isNull() && m_number_valid_isValid;

    m_origin_network_isValid = ::OpenAPI::fromJsonValue(m_origin_network, json[QString("origin-network")]);
    m_origin_network_isSet = !json[QString("origin-network")].isNull() && m_origin_network_isValid;

    m_ported_network_isValid = ::OpenAPI::fromJsonValue(m_ported_network, json[QString("ported-network")]);
    m_ported_network_isSet = !json[QString("ported-network")].isNull() && m_ported_network_isValid;

    m_roaming_country_code_isValid = ::OpenAPI::fromJsonValue(m_roaming_country_code, json[QString("roaming-country-code")]);
    m_roaming_country_code_isSet = !json[QString("roaming-country-code")].isNull() && m_roaming_country_code_isValid;
}

QString OAIHLRLookupResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIHLRLookupResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_country_isSet) {
        obj.insert(QString("country"), ::OpenAPI::toJsonValue(m_country));
    }
    if (m_country_code_isSet) {
        obj.insert(QString("country-code"), ::OpenAPI::toJsonValue(m_country_code));
    }
    if (m_country_code3_isSet) {
        obj.insert(QString("country-code3"), ::OpenAPI::toJsonValue(m_country_code3));
    }
    if (m_currency_code_isSet) {
        obj.insert(QString("currency-code"), ::OpenAPI::toJsonValue(m_currency_code));
    }
    if (m_current_network_isSet) {
        obj.insert(QString("current-network"), ::OpenAPI::toJsonValue(m_current_network));
    }
    if (m_hlr_status_isSet) {
        obj.insert(QString("hlr-status"), ::OpenAPI::toJsonValue(m_hlr_status));
    }
    if (m_hlr_valid_isSet) {
        obj.insert(QString("hlr-valid"), ::OpenAPI::toJsonValue(m_hlr_valid));
    }
    if (m_imsi_isSet) {
        obj.insert(QString("imsi"), ::OpenAPI::toJsonValue(m_imsi));
    }
    if (m_international_calling_code_isSet) {
        obj.insert(QString("international-calling-code"), ::OpenAPI::toJsonValue(m_international_calling_code));
    }
    if (m_international_number_isSet) {
        obj.insert(QString("international-number"), ::OpenAPI::toJsonValue(m_international_number));
    }
    if (m_is_mobile_isSet) {
        obj.insert(QString("is-mobile"), ::OpenAPI::toJsonValue(m_is_mobile));
    }
    if (m_is_ported_isSet) {
        obj.insert(QString("is-ported"), ::OpenAPI::toJsonValue(m_is_ported));
    }
    if (m_is_roaming_isSet) {
        obj.insert(QString("is-roaming"), ::OpenAPI::toJsonValue(m_is_roaming));
    }
    if (m_local_number_isSet) {
        obj.insert(QString("local-number"), ::OpenAPI::toJsonValue(m_local_number));
    }
    if (m_location_isSet) {
        obj.insert(QString("location"), ::OpenAPI::toJsonValue(m_location));
    }
    if (m_mcc_isSet) {
        obj.insert(QString("mcc"), ::OpenAPI::toJsonValue(m_mcc));
    }
    if (m_mnc_isSet) {
        obj.insert(QString("mnc"), ::OpenAPI::toJsonValue(m_mnc));
    }
    if (m_msc_isSet) {
        obj.insert(QString("msc"), ::OpenAPI::toJsonValue(m_msc));
    }
    if (m_msin_isSet) {
        obj.insert(QString("msin"), ::OpenAPI::toJsonValue(m_msin));
    }
    if (m_number_type_isSet) {
        obj.insert(QString("number-type"), ::OpenAPI::toJsonValue(m_number_type));
    }
    if (m_number_valid_isSet) {
        obj.insert(QString("number-valid"), ::OpenAPI::toJsonValue(m_number_valid));
    }
    if (m_origin_network_isSet) {
        obj.insert(QString("origin-network"), ::OpenAPI::toJsonValue(m_origin_network));
    }
    if (m_ported_network_isSet) {
        obj.insert(QString("ported-network"), ::OpenAPI::toJsonValue(m_ported_network));
    }
    if (m_roaming_country_code_isSet) {
        obj.insert(QString("roaming-country-code"), ::OpenAPI::toJsonValue(m_roaming_country_code));
    }
    return obj;
}

QString OAIHLRLookupResponse::getCountry() const {
    return m_country;
}
void OAIHLRLookupResponse::setCountry(const QString &country) {
    m_country = country;
    m_country_isSet = true;
}

bool OAIHLRLookupResponse::is_country_Set() const{
    return m_country_isSet;
}

bool OAIHLRLookupResponse::is_country_Valid() const{
    return m_country_isValid;
}

QString OAIHLRLookupResponse::getCountryCode() const {
    return m_country_code;
}
void OAIHLRLookupResponse::setCountryCode(const QString &country_code) {
    m_country_code = country_code;
    m_country_code_isSet = true;
}

bool OAIHLRLookupResponse::is_country_code_Set() const{
    return m_country_code_isSet;
}

bool OAIHLRLookupResponse::is_country_code_Valid() const{
    return m_country_code_isValid;
}

QString OAIHLRLookupResponse::getCountryCode3() const {
    return m_country_code3;
}
void OAIHLRLookupResponse::setCountryCode3(const QString &country_code3) {
    m_country_code3 = country_code3;
    m_country_code3_isSet = true;
}

bool OAIHLRLookupResponse::is_country_code3_Set() const{
    return m_country_code3_isSet;
}

bool OAIHLRLookupResponse::is_country_code3_Valid() const{
    return m_country_code3_isValid;
}

QString OAIHLRLookupResponse::getCurrencyCode() const {
    return m_currency_code;
}
void OAIHLRLookupResponse::setCurrencyCode(const QString &currency_code) {
    m_currency_code = currency_code;
    m_currency_code_isSet = true;
}

bool OAIHLRLookupResponse::is_currency_code_Set() const{
    return m_currency_code_isSet;
}

bool OAIHLRLookupResponse::is_currency_code_Valid() const{
    return m_currency_code_isValid;
}

QString OAIHLRLookupResponse::getCurrentNetwork() const {
    return m_current_network;
}
void OAIHLRLookupResponse::setCurrentNetwork(const QString &current_network) {
    m_current_network = current_network;
    m_current_network_isSet = true;
}

bool OAIHLRLookupResponse::is_current_network_Set() const{
    return m_current_network_isSet;
}

bool OAIHLRLookupResponse::is_current_network_Valid() const{
    return m_current_network_isValid;
}

QString OAIHLRLookupResponse::getHlrStatus() const {
    return m_hlr_status;
}
void OAIHLRLookupResponse::setHlrStatus(const QString &hlr_status) {
    m_hlr_status = hlr_status;
    m_hlr_status_isSet = true;
}

bool OAIHLRLookupResponse::is_hlr_status_Set() const{
    return m_hlr_status_isSet;
}

bool OAIHLRLookupResponse::is_hlr_status_Valid() const{
    return m_hlr_status_isValid;
}

bool OAIHLRLookupResponse::isHlrValid() const {
    return m_hlr_valid;
}
void OAIHLRLookupResponse::setHlrValid(const bool &hlr_valid) {
    m_hlr_valid = hlr_valid;
    m_hlr_valid_isSet = true;
}

bool OAIHLRLookupResponse::is_hlr_valid_Set() const{
    return m_hlr_valid_isSet;
}

bool OAIHLRLookupResponse::is_hlr_valid_Valid() const{
    return m_hlr_valid_isValid;
}

QString OAIHLRLookupResponse::getImsi() const {
    return m_imsi;
}
void OAIHLRLookupResponse::setImsi(const QString &imsi) {
    m_imsi = imsi;
    m_imsi_isSet = true;
}

bool OAIHLRLookupResponse::is_imsi_Set() const{
    return m_imsi_isSet;
}

bool OAIHLRLookupResponse::is_imsi_Valid() const{
    return m_imsi_isValid;
}

QString OAIHLRLookupResponse::getInternationalCallingCode() const {
    return m_international_calling_code;
}
void OAIHLRLookupResponse::setInternationalCallingCode(const QString &international_calling_code) {
    m_international_calling_code = international_calling_code;
    m_international_calling_code_isSet = true;
}

bool OAIHLRLookupResponse::is_international_calling_code_Set() const{
    return m_international_calling_code_isSet;
}

bool OAIHLRLookupResponse::is_international_calling_code_Valid() const{
    return m_international_calling_code_isValid;
}

QString OAIHLRLookupResponse::getInternationalNumber() const {
    return m_international_number;
}
void OAIHLRLookupResponse::setInternationalNumber(const QString &international_number) {
    m_international_number = international_number;
    m_international_number_isSet = true;
}

bool OAIHLRLookupResponse::is_international_number_Set() const{
    return m_international_number_isSet;
}

bool OAIHLRLookupResponse::is_international_number_Valid() const{
    return m_international_number_isValid;
}

bool OAIHLRLookupResponse::isIsMobile() const {
    return m_is_mobile;
}
void OAIHLRLookupResponse::setIsMobile(const bool &is_mobile) {
    m_is_mobile = is_mobile;
    m_is_mobile_isSet = true;
}

bool OAIHLRLookupResponse::is_is_mobile_Set() const{
    return m_is_mobile_isSet;
}

bool OAIHLRLookupResponse::is_is_mobile_Valid() const{
    return m_is_mobile_isValid;
}

bool OAIHLRLookupResponse::isIsPorted() const {
    return m_is_ported;
}
void OAIHLRLookupResponse::setIsPorted(const bool &is_ported) {
    m_is_ported = is_ported;
    m_is_ported_isSet = true;
}

bool OAIHLRLookupResponse::is_is_ported_Set() const{
    return m_is_ported_isSet;
}

bool OAIHLRLookupResponse::is_is_ported_Valid() const{
    return m_is_ported_isValid;
}

bool OAIHLRLookupResponse::isIsRoaming() const {
    return m_is_roaming;
}
void OAIHLRLookupResponse::setIsRoaming(const bool &is_roaming) {
    m_is_roaming = is_roaming;
    m_is_roaming_isSet = true;
}

bool OAIHLRLookupResponse::is_is_roaming_Set() const{
    return m_is_roaming_isSet;
}

bool OAIHLRLookupResponse::is_is_roaming_Valid() const{
    return m_is_roaming_isValid;
}

QString OAIHLRLookupResponse::getLocalNumber() const {
    return m_local_number;
}
void OAIHLRLookupResponse::setLocalNumber(const QString &local_number) {
    m_local_number = local_number;
    m_local_number_isSet = true;
}

bool OAIHLRLookupResponse::is_local_number_Set() const{
    return m_local_number_isSet;
}

bool OAIHLRLookupResponse::is_local_number_Valid() const{
    return m_local_number_isValid;
}

QString OAIHLRLookupResponse::getLocation() const {
    return m_location;
}
void OAIHLRLookupResponse::setLocation(const QString &location) {
    m_location = location;
    m_location_isSet = true;
}

bool OAIHLRLookupResponse::is_location_Set() const{
    return m_location_isSet;
}

bool OAIHLRLookupResponse::is_location_Valid() const{
    return m_location_isValid;
}

QString OAIHLRLookupResponse::getMcc() const {
    return m_mcc;
}
void OAIHLRLookupResponse::setMcc(const QString &mcc) {
    m_mcc = mcc;
    m_mcc_isSet = true;
}

bool OAIHLRLookupResponse::is_mcc_Set() const{
    return m_mcc_isSet;
}

bool OAIHLRLookupResponse::is_mcc_Valid() const{
    return m_mcc_isValid;
}

QString OAIHLRLookupResponse::getMnc() const {
    return m_mnc;
}
void OAIHLRLookupResponse::setMnc(const QString &mnc) {
    m_mnc = mnc;
    m_mnc_isSet = true;
}

bool OAIHLRLookupResponse::is_mnc_Set() const{
    return m_mnc_isSet;
}

bool OAIHLRLookupResponse::is_mnc_Valid() const{
    return m_mnc_isValid;
}

QString OAIHLRLookupResponse::getMsc() const {
    return m_msc;
}
void OAIHLRLookupResponse::setMsc(const QString &msc) {
    m_msc = msc;
    m_msc_isSet = true;
}

bool OAIHLRLookupResponse::is_msc_Set() const{
    return m_msc_isSet;
}

bool OAIHLRLookupResponse::is_msc_Valid() const{
    return m_msc_isValid;
}

QString OAIHLRLookupResponse::getMsin() const {
    return m_msin;
}
void OAIHLRLookupResponse::setMsin(const QString &msin) {
    m_msin = msin;
    m_msin_isSet = true;
}

bool OAIHLRLookupResponse::is_msin_Set() const{
    return m_msin_isSet;
}

bool OAIHLRLookupResponse::is_msin_Valid() const{
    return m_msin_isValid;
}

QString OAIHLRLookupResponse::getNumberType() const {
    return m_number_type;
}
void OAIHLRLookupResponse::setNumberType(const QString &number_type) {
    m_number_type = number_type;
    m_number_type_isSet = true;
}

bool OAIHLRLookupResponse::is_number_type_Set() const{
    return m_number_type_isSet;
}

bool OAIHLRLookupResponse::is_number_type_Valid() const{
    return m_number_type_isValid;
}

bool OAIHLRLookupResponse::isNumberValid() const {
    return m_number_valid;
}
void OAIHLRLookupResponse::setNumberValid(const bool &number_valid) {
    m_number_valid = number_valid;
    m_number_valid_isSet = true;
}

bool OAIHLRLookupResponse::is_number_valid_Set() const{
    return m_number_valid_isSet;
}

bool OAIHLRLookupResponse::is_number_valid_Valid() const{
    return m_number_valid_isValid;
}

QString OAIHLRLookupResponse::getOriginNetwork() const {
    return m_origin_network;
}
void OAIHLRLookupResponse::setOriginNetwork(const QString &origin_network) {
    m_origin_network = origin_network;
    m_origin_network_isSet = true;
}

bool OAIHLRLookupResponse::is_origin_network_Set() const{
    return m_origin_network_isSet;
}

bool OAIHLRLookupResponse::is_origin_network_Valid() const{
    return m_origin_network_isValid;
}

QString OAIHLRLookupResponse::getPortedNetwork() const {
    return m_ported_network;
}
void OAIHLRLookupResponse::setPortedNetwork(const QString &ported_network) {
    m_ported_network = ported_network;
    m_ported_network_isSet = true;
}

bool OAIHLRLookupResponse::is_ported_network_Set() const{
    return m_ported_network_isSet;
}

bool OAIHLRLookupResponse::is_ported_network_Valid() const{
    return m_ported_network_isValid;
}

QString OAIHLRLookupResponse::getRoamingCountryCode() const {
    return m_roaming_country_code;
}
void OAIHLRLookupResponse::setRoamingCountryCode(const QString &roaming_country_code) {
    m_roaming_country_code = roaming_country_code;
    m_roaming_country_code_isSet = true;
}

bool OAIHLRLookupResponse::is_roaming_country_code_Set() const{
    return m_roaming_country_code_isSet;
}

bool OAIHLRLookupResponse::is_roaming_country_code_Valid() const{
    return m_roaming_country_code_isValid;
}

bool OAIHLRLookupResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_country_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_country_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_country_code3_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_currency_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_current_network_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_hlr_status_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_hlr_valid_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_imsi_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_international_calling_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_international_number_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_mobile_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_ported_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_roaming_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_local_number_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_location_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_mcc_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_mnc_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_msc_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_msin_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_number_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_number_valid_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_origin_network_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_ported_network_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_roaming_country_code_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIHLRLookupResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_country_isValid && m_country_code_isValid && m_country_code3_isValid && m_currency_code_isValid && m_current_network_isValid && m_hlr_status_isValid && m_hlr_valid_isValid && m_imsi_isValid && m_international_calling_code_isValid && m_international_number_isValid && m_is_mobile_isValid && m_is_ported_isValid && m_is_roaming_isValid && m_local_number_isValid && m_location_isValid && m_mcc_isValid && m_mnc_isValid && m_msc_isValid && m_msin_isValid && m_number_type_isValid && m_number_valid_isValid && m_origin_network_isValid && m_ported_network_isValid && m_roaming_country_code_isValid && true;
}

} // namespace OpenAPI
