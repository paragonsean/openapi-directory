/**
 * Neutrino API
 * The general-purpose API
 *
 * The version of the OpenAPI document: 3.6.4
 * Contact: ops@neutrinoapi.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIIPBlocklistResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIIPBlocklistResponse::OAIIPBlocklistResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIIPBlocklistResponse::OAIIPBlocklistResponse() {
    this->initializeModel();
}

OAIIPBlocklistResponse::~OAIIPBlocklistResponse() {}

void OAIIPBlocklistResponse::initializeModel() {

    m_blocklists_isSet = false;
    m_blocklists_isValid = false;

    m_cidr_isSet = false;
    m_cidr_isValid = false;

    m_ip_isSet = false;
    m_ip_isValid = false;

    m_is_bot_isSet = false;
    m_is_bot_isValid = false;

    m_is_dshield_isSet = false;
    m_is_dshield_isValid = false;

    m_is_exploit_bot_isSet = false;
    m_is_exploit_bot_isValid = false;

    m_is_hijacked_isSet = false;
    m_is_hijacked_isValid = false;

    m_is_listed_isSet = false;
    m_is_listed_isValid = false;

    m_is_malware_isSet = false;
    m_is_malware_isValid = false;

    m_is_proxy_isSet = false;
    m_is_proxy_isValid = false;

    m_is_spam_bot_isSet = false;
    m_is_spam_bot_isValid = false;

    m_is_spider_isSet = false;
    m_is_spider_isValid = false;

    m_is_spyware_isSet = false;
    m_is_spyware_isValid = false;

    m_is_tor_isSet = false;
    m_is_tor_isValid = false;

    m_is_vpn_isSet = false;
    m_is_vpn_isValid = false;

    m_last_seen_isSet = false;
    m_last_seen_isValid = false;

    m_list_count_isSet = false;
    m_list_count_isValid = false;

    m_sensors_isSet = false;
    m_sensors_isValid = false;
}

void OAIIPBlocklistResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIIPBlocklistResponse::fromJsonObject(QJsonObject json) {

    m_blocklists_isValid = ::OpenAPI::fromJsonValue(m_blocklists, json[QString("blocklists")]);
    m_blocklists_isSet = !json[QString("blocklists")].isNull() && m_blocklists_isValid;

    m_cidr_isValid = ::OpenAPI::fromJsonValue(m_cidr, json[QString("cidr")]);
    m_cidr_isSet = !json[QString("cidr")].isNull() && m_cidr_isValid;

    m_ip_isValid = ::OpenAPI::fromJsonValue(m_ip, json[QString("ip")]);
    m_ip_isSet = !json[QString("ip")].isNull() && m_ip_isValid;

    m_is_bot_isValid = ::OpenAPI::fromJsonValue(m_is_bot, json[QString("is-bot")]);
    m_is_bot_isSet = !json[QString("is-bot")].isNull() && m_is_bot_isValid;

    m_is_dshield_isValid = ::OpenAPI::fromJsonValue(m_is_dshield, json[QString("is-dshield")]);
    m_is_dshield_isSet = !json[QString("is-dshield")].isNull() && m_is_dshield_isValid;

    m_is_exploit_bot_isValid = ::OpenAPI::fromJsonValue(m_is_exploit_bot, json[QString("is-exploit-bot")]);
    m_is_exploit_bot_isSet = !json[QString("is-exploit-bot")].isNull() && m_is_exploit_bot_isValid;

    m_is_hijacked_isValid = ::OpenAPI::fromJsonValue(m_is_hijacked, json[QString("is-hijacked")]);
    m_is_hijacked_isSet = !json[QString("is-hijacked")].isNull() && m_is_hijacked_isValid;

    m_is_listed_isValid = ::OpenAPI::fromJsonValue(m_is_listed, json[QString("is-listed")]);
    m_is_listed_isSet = !json[QString("is-listed")].isNull() && m_is_listed_isValid;

    m_is_malware_isValid = ::OpenAPI::fromJsonValue(m_is_malware, json[QString("is-malware")]);
    m_is_malware_isSet = !json[QString("is-malware")].isNull() && m_is_malware_isValid;

    m_is_proxy_isValid = ::OpenAPI::fromJsonValue(m_is_proxy, json[QString("is-proxy")]);
    m_is_proxy_isSet = !json[QString("is-proxy")].isNull() && m_is_proxy_isValid;

    m_is_spam_bot_isValid = ::OpenAPI::fromJsonValue(m_is_spam_bot, json[QString("is-spam-bot")]);
    m_is_spam_bot_isSet = !json[QString("is-spam-bot")].isNull() && m_is_spam_bot_isValid;

    m_is_spider_isValid = ::OpenAPI::fromJsonValue(m_is_spider, json[QString("is-spider")]);
    m_is_spider_isSet = !json[QString("is-spider")].isNull() && m_is_spider_isValid;

    m_is_spyware_isValid = ::OpenAPI::fromJsonValue(m_is_spyware, json[QString("is-spyware")]);
    m_is_spyware_isSet = !json[QString("is-spyware")].isNull() && m_is_spyware_isValid;

    m_is_tor_isValid = ::OpenAPI::fromJsonValue(m_is_tor, json[QString("is-tor")]);
    m_is_tor_isSet = !json[QString("is-tor")].isNull() && m_is_tor_isValid;

    m_is_vpn_isValid = ::OpenAPI::fromJsonValue(m_is_vpn, json[QString("is-vpn")]);
    m_is_vpn_isSet = !json[QString("is-vpn")].isNull() && m_is_vpn_isValid;

    m_last_seen_isValid = ::OpenAPI::fromJsonValue(m_last_seen, json[QString("last-seen")]);
    m_last_seen_isSet = !json[QString("last-seen")].isNull() && m_last_seen_isValid;

    m_list_count_isValid = ::OpenAPI::fromJsonValue(m_list_count, json[QString("list-count")]);
    m_list_count_isSet = !json[QString("list-count")].isNull() && m_list_count_isValid;

    m_sensors_isValid = ::OpenAPI::fromJsonValue(m_sensors, json[QString("sensors")]);
    m_sensors_isSet = !json[QString("sensors")].isNull() && m_sensors_isValid;
}

QString OAIIPBlocklistResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIIPBlocklistResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_blocklists.size() > 0) {
        obj.insert(QString("blocklists"), ::OpenAPI::toJsonValue(m_blocklists));
    }
    if (m_cidr_isSet) {
        obj.insert(QString("cidr"), ::OpenAPI::toJsonValue(m_cidr));
    }
    if (m_ip_isSet) {
        obj.insert(QString("ip"), ::OpenAPI::toJsonValue(m_ip));
    }
    if (m_is_bot_isSet) {
        obj.insert(QString("is-bot"), ::OpenAPI::toJsonValue(m_is_bot));
    }
    if (m_is_dshield_isSet) {
        obj.insert(QString("is-dshield"), ::OpenAPI::toJsonValue(m_is_dshield));
    }
    if (m_is_exploit_bot_isSet) {
        obj.insert(QString("is-exploit-bot"), ::OpenAPI::toJsonValue(m_is_exploit_bot));
    }
    if (m_is_hijacked_isSet) {
        obj.insert(QString("is-hijacked"), ::OpenAPI::toJsonValue(m_is_hijacked));
    }
    if (m_is_listed_isSet) {
        obj.insert(QString("is-listed"), ::OpenAPI::toJsonValue(m_is_listed));
    }
    if (m_is_malware_isSet) {
        obj.insert(QString("is-malware"), ::OpenAPI::toJsonValue(m_is_malware));
    }
    if (m_is_proxy_isSet) {
        obj.insert(QString("is-proxy"), ::OpenAPI::toJsonValue(m_is_proxy));
    }
    if (m_is_spam_bot_isSet) {
        obj.insert(QString("is-spam-bot"), ::OpenAPI::toJsonValue(m_is_spam_bot));
    }
    if (m_is_spider_isSet) {
        obj.insert(QString("is-spider"), ::OpenAPI::toJsonValue(m_is_spider));
    }
    if (m_is_spyware_isSet) {
        obj.insert(QString("is-spyware"), ::OpenAPI::toJsonValue(m_is_spyware));
    }
    if (m_is_tor_isSet) {
        obj.insert(QString("is-tor"), ::OpenAPI::toJsonValue(m_is_tor));
    }
    if (m_is_vpn_isSet) {
        obj.insert(QString("is-vpn"), ::OpenAPI::toJsonValue(m_is_vpn));
    }
    if (m_last_seen_isSet) {
        obj.insert(QString("last-seen"), ::OpenAPI::toJsonValue(m_last_seen));
    }
    if (m_list_count_isSet) {
        obj.insert(QString("list-count"), ::OpenAPI::toJsonValue(m_list_count));
    }
    if (m_sensors.size() > 0) {
        obj.insert(QString("sensors"), ::OpenAPI::toJsonValue(m_sensors));
    }
    return obj;
}

QList<QString> OAIIPBlocklistResponse::getBlocklists() const {
    return m_blocklists;
}
void OAIIPBlocklistResponse::setBlocklists(const QList<QString> &blocklists) {
    m_blocklists = blocklists;
    m_blocklists_isSet = true;
}

bool OAIIPBlocklistResponse::is_blocklists_Set() const{
    return m_blocklists_isSet;
}

bool OAIIPBlocklistResponse::is_blocklists_Valid() const{
    return m_blocklists_isValid;
}

QString OAIIPBlocklistResponse::getCidr() const {
    return m_cidr;
}
void OAIIPBlocklistResponse::setCidr(const QString &cidr) {
    m_cidr = cidr;
    m_cidr_isSet = true;
}

bool OAIIPBlocklistResponse::is_cidr_Set() const{
    return m_cidr_isSet;
}

bool OAIIPBlocklistResponse::is_cidr_Valid() const{
    return m_cidr_isValid;
}

QString OAIIPBlocklistResponse::getIp() const {
    return m_ip;
}
void OAIIPBlocklistResponse::setIp(const QString &ip) {
    m_ip = ip;
    m_ip_isSet = true;
}

bool OAIIPBlocklistResponse::is_ip_Set() const{
    return m_ip_isSet;
}

bool OAIIPBlocklistResponse::is_ip_Valid() const{
    return m_ip_isValid;
}

bool OAIIPBlocklistResponse::isIsBot() const {
    return m_is_bot;
}
void OAIIPBlocklistResponse::setIsBot(const bool &is_bot) {
    m_is_bot = is_bot;
    m_is_bot_isSet = true;
}

bool OAIIPBlocklistResponse::is_is_bot_Set() const{
    return m_is_bot_isSet;
}

bool OAIIPBlocklistResponse::is_is_bot_Valid() const{
    return m_is_bot_isValid;
}

bool OAIIPBlocklistResponse::isIsDshield() const {
    return m_is_dshield;
}
void OAIIPBlocklistResponse::setIsDshield(const bool &is_dshield) {
    m_is_dshield = is_dshield;
    m_is_dshield_isSet = true;
}

bool OAIIPBlocklistResponse::is_is_dshield_Set() const{
    return m_is_dshield_isSet;
}

bool OAIIPBlocklistResponse::is_is_dshield_Valid() const{
    return m_is_dshield_isValid;
}

bool OAIIPBlocklistResponse::isIsExploitBot() const {
    return m_is_exploit_bot;
}
void OAIIPBlocklistResponse::setIsExploitBot(const bool &is_exploit_bot) {
    m_is_exploit_bot = is_exploit_bot;
    m_is_exploit_bot_isSet = true;
}

bool OAIIPBlocklistResponse::is_is_exploit_bot_Set() const{
    return m_is_exploit_bot_isSet;
}

bool OAIIPBlocklistResponse::is_is_exploit_bot_Valid() const{
    return m_is_exploit_bot_isValid;
}

bool OAIIPBlocklistResponse::isIsHijacked() const {
    return m_is_hijacked;
}
void OAIIPBlocklistResponse::setIsHijacked(const bool &is_hijacked) {
    m_is_hijacked = is_hijacked;
    m_is_hijacked_isSet = true;
}

bool OAIIPBlocklistResponse::is_is_hijacked_Set() const{
    return m_is_hijacked_isSet;
}

bool OAIIPBlocklistResponse::is_is_hijacked_Valid() const{
    return m_is_hijacked_isValid;
}

bool OAIIPBlocklistResponse::isIsListed() const {
    return m_is_listed;
}
void OAIIPBlocklistResponse::setIsListed(const bool &is_listed) {
    m_is_listed = is_listed;
    m_is_listed_isSet = true;
}

bool OAIIPBlocklistResponse::is_is_listed_Set() const{
    return m_is_listed_isSet;
}

bool OAIIPBlocklistResponse::is_is_listed_Valid() const{
    return m_is_listed_isValid;
}

bool OAIIPBlocklistResponse::isIsMalware() const {
    return m_is_malware;
}
void OAIIPBlocklistResponse::setIsMalware(const bool &is_malware) {
    m_is_malware = is_malware;
    m_is_malware_isSet = true;
}

bool OAIIPBlocklistResponse::is_is_malware_Set() const{
    return m_is_malware_isSet;
}

bool OAIIPBlocklistResponse::is_is_malware_Valid() const{
    return m_is_malware_isValid;
}

bool OAIIPBlocklistResponse::isIsProxy() const {
    return m_is_proxy;
}
void OAIIPBlocklistResponse::setIsProxy(const bool &is_proxy) {
    m_is_proxy = is_proxy;
    m_is_proxy_isSet = true;
}

bool OAIIPBlocklistResponse::is_is_proxy_Set() const{
    return m_is_proxy_isSet;
}

bool OAIIPBlocklistResponse::is_is_proxy_Valid() const{
    return m_is_proxy_isValid;
}

bool OAIIPBlocklistResponse::isIsSpamBot() const {
    return m_is_spam_bot;
}
void OAIIPBlocklistResponse::setIsSpamBot(const bool &is_spam_bot) {
    m_is_spam_bot = is_spam_bot;
    m_is_spam_bot_isSet = true;
}

bool OAIIPBlocklistResponse::is_is_spam_bot_Set() const{
    return m_is_spam_bot_isSet;
}

bool OAIIPBlocklistResponse::is_is_spam_bot_Valid() const{
    return m_is_spam_bot_isValid;
}

bool OAIIPBlocklistResponse::isIsSpider() const {
    return m_is_spider;
}
void OAIIPBlocklistResponse::setIsSpider(const bool &is_spider) {
    m_is_spider = is_spider;
    m_is_spider_isSet = true;
}

bool OAIIPBlocklistResponse::is_is_spider_Set() const{
    return m_is_spider_isSet;
}

bool OAIIPBlocklistResponse::is_is_spider_Valid() const{
    return m_is_spider_isValid;
}

bool OAIIPBlocklistResponse::isIsSpyware() const {
    return m_is_spyware;
}
void OAIIPBlocklistResponse::setIsSpyware(const bool &is_spyware) {
    m_is_spyware = is_spyware;
    m_is_spyware_isSet = true;
}

bool OAIIPBlocklistResponse::is_is_spyware_Set() const{
    return m_is_spyware_isSet;
}

bool OAIIPBlocklistResponse::is_is_spyware_Valid() const{
    return m_is_spyware_isValid;
}

bool OAIIPBlocklistResponse::isIsTor() const {
    return m_is_tor;
}
void OAIIPBlocklistResponse::setIsTor(const bool &is_tor) {
    m_is_tor = is_tor;
    m_is_tor_isSet = true;
}

bool OAIIPBlocklistResponse::is_is_tor_Set() const{
    return m_is_tor_isSet;
}

bool OAIIPBlocklistResponse::is_is_tor_Valid() const{
    return m_is_tor_isValid;
}

bool OAIIPBlocklistResponse::isIsVpn() const {
    return m_is_vpn;
}
void OAIIPBlocklistResponse::setIsVpn(const bool &is_vpn) {
    m_is_vpn = is_vpn;
    m_is_vpn_isSet = true;
}

bool OAIIPBlocklistResponse::is_is_vpn_Set() const{
    return m_is_vpn_isSet;
}

bool OAIIPBlocklistResponse::is_is_vpn_Valid() const{
    return m_is_vpn_isValid;
}

qint32 OAIIPBlocklistResponse::getLastSeen() const {
    return m_last_seen;
}
void OAIIPBlocklistResponse::setLastSeen(const qint32 &last_seen) {
    m_last_seen = last_seen;
    m_last_seen_isSet = true;
}

bool OAIIPBlocklistResponse::is_last_seen_Set() const{
    return m_last_seen_isSet;
}

bool OAIIPBlocklistResponse::is_last_seen_Valid() const{
    return m_last_seen_isValid;
}

qint32 OAIIPBlocklistResponse::getListCount() const {
    return m_list_count;
}
void OAIIPBlocklistResponse::setListCount(const qint32 &list_count) {
    m_list_count = list_count;
    m_list_count_isSet = true;
}

bool OAIIPBlocklistResponse::is_list_count_Set() const{
    return m_list_count_isSet;
}

bool OAIIPBlocklistResponse::is_list_count_Valid() const{
    return m_list_count_isValid;
}

QList<OAIBlocklistSensor> OAIIPBlocklistResponse::getSensors() const {
    return m_sensors;
}
void OAIIPBlocklistResponse::setSensors(const QList<OAIBlocklistSensor> &sensors) {
    m_sensors = sensors;
    m_sensors_isSet = true;
}

bool OAIIPBlocklistResponse::is_sensors_Set() const{
    return m_sensors_isSet;
}

bool OAIIPBlocklistResponse::is_sensors_Valid() const{
    return m_sensors_isValid;
}

bool OAIIPBlocklistResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_blocklists.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_cidr_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_ip_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_bot_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_dshield_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_exploit_bot_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_hijacked_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_listed_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_malware_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_proxy_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_spam_bot_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_spider_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_spyware_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_tor_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_vpn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_seen_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_list_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sensors.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIIPBlocklistResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_blocklists_isValid && m_cidr_isValid && m_ip_isValid && m_is_bot_isValid && m_is_dshield_isValid && m_is_exploit_bot_isValid && m_is_hijacked_isValid && m_is_listed_isValid && m_is_malware_isValid && m_is_proxy_isValid && m_is_spam_bot_isValid && m_is_spider_isValid && m_is_spyware_isValid && m_is_tor_isValid && m_is_vpn_isValid && m_last_seen_isValid && m_list_count_isValid && m_sensors_isValid && true;
}

} // namespace OpenAPI
