/**
 * Neutrino API
 * The general-purpose API
 *
 * The version of the OpenAPI document: 3.6.4
 * Contact: ops@neutrinoapi.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAITelephonyApi.h"
#include "OAIServerConfiguration.h"
#include <QJsonArray>
#include <QJsonDocument>

namespace OpenAPI {

OAITelephonyApi::OAITelephonyApi(const int timeOut)
    : _timeOut(timeOut),
      _manager(nullptr),
      _isResponseCompressionEnabled(false),
      _isRequestCompressionEnabled(false) {
    initializeServerConfigs();
}

OAITelephonyApi::~OAITelephonyApi() {
}

void OAITelephonyApi::initializeServerConfigs() {
    //Default server
    QList<OAIServerConfiguration> defaultConf = QList<OAIServerConfiguration>();
    //varying endpoint server
    defaultConf.append(OAIServerConfiguration(
    QUrl("https://neutrinoapi.net"),
    "No description provided",
    QMap<QString, OAIServerVariable>()));
    _serverConfigs.insert("hLRLookup", defaultConf);
    _serverIndices.insert("hLRLookup", 0);
    _serverConfigs.insert("phonePlayback", defaultConf);
    _serverIndices.insert("phonePlayback", 0);
    _serverConfigs.insert("phoneVerify", defaultConf);
    _serverIndices.insert("phoneVerify", 0);
    _serverConfigs.insert("sMSVerify", defaultConf);
    _serverIndices.insert("sMSVerify", 0);
    _serverConfigs.insert("verifySecurityCode", defaultConf);
    _serverIndices.insert("verifySecurityCode", 0);
}

/**
* returns 0 on success and -1, -2 or -3 on failure.
* -1 when the variable does not exist and -2 if the value is not defined in the enum and -3 if the operation or server index is not found
*/
int OAITelephonyApi::setDefaultServerValue(int serverIndex, const QString &operation, const QString &variable, const QString &value) {
    auto it = _serverConfigs.find(operation);
    if (it != _serverConfigs.end() && serverIndex < it.value().size()) {
      return _serverConfigs[operation][serverIndex].setDefaultValue(variable,value);
    }
    return -3;
}
void OAITelephonyApi::setServerIndex(const QString &operation, int serverIndex) {
    if (_serverIndices.contains(operation) && serverIndex < _serverConfigs.find(operation).value().size()) {
        _serverIndices[operation] = serverIndex;
    }
}

void OAITelephonyApi::setApiKey(const QString &apiKeyName, const QString &apiKey) {
    _apiKeys.insert(apiKeyName, apiKey);
}

void OAITelephonyApi::setBearerToken(const QString &token) {
    _bearerToken = token;
}

void OAITelephonyApi::setUsername(const QString &username) {
    _username = username;
}

void OAITelephonyApi::setPassword(const QString &password) {
    _password = password;
}


void OAITelephonyApi::setTimeOut(const int timeOut) {
    _timeOut = timeOut;
}

void OAITelephonyApi::setWorkingDirectory(const QString &path) {
    _workingDirectory = path;
}

void OAITelephonyApi::setNetworkAccessManager(QNetworkAccessManager* manager) {
    _manager = manager;
}

/**
    * Appends a new ServerConfiguration to the config map for a specific operation.
    * @param operation The id to the target operation.
    * @param url A string that contains the URL of the server
    * @param description A String that describes the server
    * @param variables A map between a variable name and its value. The value is used for substitution in the server's URL template.
    * returns the index of the new server config on success and -1 if the operation is not found
    */
int OAITelephonyApi::addServerConfiguration(const QString &operation, const QUrl &url, const QString &description, const QMap<QString, OAIServerVariable> &variables) {
    if (_serverConfigs.contains(operation)) {
        _serverConfigs[operation].append(OAIServerConfiguration(
                    url,
                    description,
                    variables));
        return _serverConfigs[operation].size()-1;
    } else {
        return -1;
    }
}

/**
    * Appends a new ServerConfiguration to the config map for a all operations and sets the index to that server.
    * @param url A string that contains the URL of the server
    * @param description A String that describes the server
    * @param variables A map between a variable name and its value. The value is used for substitution in the server's URL template.
    */
void OAITelephonyApi::setNewServerForAllOperations(const QUrl &url, const QString &description, const QMap<QString, OAIServerVariable> &variables) {
    for (auto keyIt = _serverIndices.keyBegin(); keyIt != _serverIndices.keyEnd(); keyIt++) {
        setServerIndex(*keyIt, addServerConfiguration(*keyIt, url, description, variables));
    }
}

/**
    * Appends a new ServerConfiguration to the config map for an operations and sets the index to that server.
    * @param URL A string that contains the URL of the server
    * @param description A String that describes the server
    * @param variables A map between a variable name and its value. The value is used for substitution in the server's URL template.
    */
void OAITelephonyApi::setNewServer(const QString &operation, const QUrl &url, const QString &description, const QMap<QString, OAIServerVariable> &variables) {
    setServerIndex(operation, addServerConfiguration(operation, url, description, variables));
}

void OAITelephonyApi::addHeaders(const QString &key, const QString &value) {
    _defaultHeaders.insert(key, value);
}

void OAITelephonyApi::enableRequestCompression() {
    _isRequestCompressionEnabled = true;
}

void OAITelephonyApi::enableResponseCompression() {
    _isResponseCompressionEnabled = true;
}

void OAITelephonyApi::abortRequests() {
    Q_EMIT abortRequestsSignal();
}

QString OAITelephonyApi::getParamStylePrefix(const QString &style) {
    if (style == "matrix") {
        return ";";
    } else if (style == "label") {
        return ".";
    } else if (style == "form") {
        return "&";
    } else if (style == "simple") {
        return "";
    } else if (style == "spaceDelimited") {
        return "&";
    } else if (style == "pipeDelimited") {
        return "&";
    } else {
        return "none";
    }
}

QString OAITelephonyApi::getParamStyleSuffix(const QString &style) {
    if (style == "matrix") {
        return "=";
    } else if (style == "label") {
        return "";
    } else if (style == "form") {
        return "=";
    } else if (style == "simple") {
        return "";
    } else if (style == "spaceDelimited") {
        return "=";
    } else if (style == "pipeDelimited") {
        return "=";
    } else {
        return "none";
    }
}

QString OAITelephonyApi::getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode) {

    if (style == "matrix") {
        return (isExplode) ? ";" + name + "=" : ",";

    } else if (style == "label") {
        return (isExplode) ? "." : ",";

    } else if (style == "form") {
        return (isExplode) ? "&" + name + "=" : ",";

    } else if (style == "simple") {
        return ",";
    } else if (style == "spaceDelimited") {
        return (isExplode) ? "&" + name + "=" : " ";

    } else if (style == "pipeDelimited") {
        return (isExplode) ? "&" + name + "=" : "|";

    } else if (style == "deepObject") {
        return (isExplode) ? "&" : "none";

    } else {
        return "none";
    }
}

void OAITelephonyApi::hLRLookup(const QString &number, const ::OpenAPI::OptionalParam<QString> &country_code) {
    QString fullPath = QString(_serverConfigs["hLRLookup"][_serverIndices.value("hLRLookup")].URL()+"/hlr-lookup");
    
    if (_apiKeys.contains("api-key")) {
        addHeaders("api-key",_apiKeys.find("api-key").value());
    }
    
    if (_apiKeys.contains("user-id")) {
        addHeaders("user-id",_apiKeys.find("user-id").value());
    }
    
    QString queryPrefix, querySuffix, queryDelimiter, queryStyle;
    
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "number", true);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("number")).append(querySuffix).append(QUrl::toPercentEncoding(number));
    }
    if (country_code.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "country-code", true);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("country-code")).append(querySuffix).append(QUrl::toPercentEncoding(country_code.stringValue()));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAITelephonyApi::hLRLookupCallback);
    connect(this, &OAITelephonyApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAITelephonyApi::hLRLookupCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAIHLRLookupResponse output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT hLRLookupSignal(output);
        Q_EMIT hLRLookupSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT hLRLookupSignalE(output, error_type, error_str);
        Q_EMIT hLRLookupSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT hLRLookupSignalError(output, error_type, error_str);
        Q_EMIT hLRLookupSignalErrorFull(worker, error_type, error_str);
    }
}

void OAITelephonyApi::phonePlayback(const QString &audio_url, const QString &number, const ::OpenAPI::OptionalParam<qint32> &limit, const ::OpenAPI::OptionalParam<qint32> &limit_ttl) {
    QString fullPath = QString(_serverConfigs["phonePlayback"][_serverIndices.value("phonePlayback")].URL()+"/phone-playback");
    
    if (_apiKeys.contains("api-key")) {
        addHeaders("api-key",_apiKeys.find("api-key").value());
    }
    
    if (_apiKeys.contains("user-id")) {
        addHeaders("user-id",_apiKeys.find("user-id").value());
    }
    
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "POST");

    
    {
        input.add_var("audio-url", ::OpenAPI::toStringValue(audio_url));
    }
    if (limit.hasValue())
    {
        input.add_var("limit", ::OpenAPI::toStringValue(limit.value()));
    }
    if (limit_ttl.hasValue())
    {
        input.add_var("limit-ttl", ::OpenAPI::toStringValue(limit_ttl.value()));
    }
    
    {
        input.add_var("number", ::OpenAPI::toStringValue(number));
    }

    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAITelephonyApi::phonePlaybackCallback);
    connect(this, &OAITelephonyApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAITelephonyApi::phonePlaybackCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAIPhonePlaybackResponse output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT phonePlaybackSignal(output);
        Q_EMIT phonePlaybackSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT phonePlaybackSignalE(output, error_type, error_str);
        Q_EMIT phonePlaybackSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT phonePlaybackSignalError(output, error_type, error_str);
        Q_EMIT phonePlaybackSignalErrorFull(worker, error_type, error_str);
    }
}

void OAITelephonyApi::phoneVerify(const QString &number, const ::OpenAPI::OptionalParam<qint32> &code_length, const ::OpenAPI::OptionalParam<QString> &country_code, const ::OpenAPI::OptionalParam<QString> &language_code, const ::OpenAPI::OptionalParam<qint32> &limit, const ::OpenAPI::OptionalParam<qint32> &limit_ttl, const ::OpenAPI::OptionalParam<qint32> &playback_delay, const ::OpenAPI::OptionalParam<qint32> &security_code) {
    QString fullPath = QString(_serverConfigs["phoneVerify"][_serverIndices.value("phoneVerify")].URL()+"/phone-verify");
    
    if (_apiKeys.contains("api-key")) {
        addHeaders("api-key",_apiKeys.find("api-key").value());
    }
    
    if (_apiKeys.contains("user-id")) {
        addHeaders("user-id",_apiKeys.find("user-id").value());
    }
    
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "POST");

    if (code_length.hasValue())
    {
        input.add_var("code-length", ::OpenAPI::toStringValue(code_length.value()));
    }
    if (country_code.hasValue())
    {
        input.add_var("country-code", ::OpenAPI::toStringValue(country_code.value()));
    }
    if (language_code.hasValue())
    {
        input.add_var("language-code", ::OpenAPI::toStringValue(language_code.value()));
    }
    if (limit.hasValue())
    {
        input.add_var("limit", ::OpenAPI::toStringValue(limit.value()));
    }
    if (limit_ttl.hasValue())
    {
        input.add_var("limit-ttl", ::OpenAPI::toStringValue(limit_ttl.value()));
    }
    
    {
        input.add_var("number", ::OpenAPI::toStringValue(number));
    }
    if (playback_delay.hasValue())
    {
        input.add_var("playback-delay", ::OpenAPI::toStringValue(playback_delay.value()));
    }
    if (security_code.hasValue())
    {
        input.add_var("security-code", ::OpenAPI::toStringValue(security_code.value()));
    }

    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAITelephonyApi::phoneVerifyCallback);
    connect(this, &OAITelephonyApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAITelephonyApi::phoneVerifyCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAIPhoneVerifyResponse output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT phoneVerifySignal(output);
        Q_EMIT phoneVerifySignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT phoneVerifySignalE(output, error_type, error_str);
        Q_EMIT phoneVerifySignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT phoneVerifySignalError(output, error_type, error_str);
        Q_EMIT phoneVerifySignalErrorFull(worker, error_type, error_str);
    }
}

void OAITelephonyApi::sMSVerify(const QString &number, const ::OpenAPI::OptionalParam<qint32> &code_length, const ::OpenAPI::OptionalParam<QString> &country_code, const ::OpenAPI::OptionalParam<QString> &language_code, const ::OpenAPI::OptionalParam<qint32> &limit, const ::OpenAPI::OptionalParam<qint32> &limit_ttl, const ::OpenAPI::OptionalParam<qint32> &security_code) {
    QString fullPath = QString(_serverConfigs["sMSVerify"][_serverIndices.value("sMSVerify")].URL()+"/sms-verify");
    
    if (_apiKeys.contains("api-key")) {
        addHeaders("api-key",_apiKeys.find("api-key").value());
    }
    
    if (_apiKeys.contains("user-id")) {
        addHeaders("user-id",_apiKeys.find("user-id").value());
    }
    
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "POST");

    if (code_length.hasValue())
    {
        input.add_var("code-length", ::OpenAPI::toStringValue(code_length.value()));
    }
    if (country_code.hasValue())
    {
        input.add_var("country-code", ::OpenAPI::toStringValue(country_code.value()));
    }
    if (language_code.hasValue())
    {
        input.add_var("language-code", ::OpenAPI::toStringValue(language_code.value()));
    }
    if (limit.hasValue())
    {
        input.add_var("limit", ::OpenAPI::toStringValue(limit.value()));
    }
    if (limit_ttl.hasValue())
    {
        input.add_var("limit-ttl", ::OpenAPI::toStringValue(limit_ttl.value()));
    }
    
    {
        input.add_var("number", ::OpenAPI::toStringValue(number));
    }
    if (security_code.hasValue())
    {
        input.add_var("security-code", ::OpenAPI::toStringValue(security_code.value()));
    }

    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAITelephonyApi::sMSVerifyCallback);
    connect(this, &OAITelephonyApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAITelephonyApi::sMSVerifyCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAISMSVerifyResponse output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT sMSVerifySignal(output);
        Q_EMIT sMSVerifySignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT sMSVerifySignalE(output, error_type, error_str);
        Q_EMIT sMSVerifySignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT sMSVerifySignalError(output, error_type, error_str);
        Q_EMIT sMSVerifySignalErrorFull(worker, error_type, error_str);
    }
}

void OAITelephonyApi::verifySecurityCode(const QString &security_code, const ::OpenAPI::OptionalParam<QString> &limit_by) {
    QString fullPath = QString(_serverConfigs["verifySecurityCode"][_serverIndices.value("verifySecurityCode")].URL()+"/verify-security-code");
    
    if (_apiKeys.contains("api-key")) {
        addHeaders("api-key",_apiKeys.find("api-key").value());
    }
    
    if (_apiKeys.contains("user-id")) {
        addHeaders("user-id",_apiKeys.find("user-id").value());
    }
    
    QString queryPrefix, querySuffix, queryDelimiter, queryStyle;
    
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "security-code", true);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("security-code")).append(querySuffix).append(QUrl::toPercentEncoding(security_code));
    }
    if (limit_by.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "limit-by", true);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("limit-by")).append(querySuffix).append(QUrl::toPercentEncoding(limit_by.stringValue()));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAITelephonyApi::verifySecurityCodeCallback);
    connect(this, &OAITelephonyApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAITelephonyApi::verifySecurityCodeCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAIVerifySecurityCodeResponse output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT verifySecurityCodeSignal(output);
        Q_EMIT verifySecurityCodeSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT verifySecurityCodeSignalE(output, error_type, error_str);
        Q_EMIT verifySecurityCodeSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT verifySecurityCodeSignalError(output, error_type, error_str);
        Q_EMIT verifySecurityCodeSignalErrorFull(worker, error_type, error_str);
    }
}

void OAITelephonyApi::tokenAvailable(){

    oauthToken token;
    switch (_OauthMethod) {
    case 1: //implicit flow
        token = _implicitFlow.getToken(_latestScope.join(" "));
        if(token.isValid()){
            _latestInput.headers.insert("Authorization", "Bearer " + token.getToken());
            _latestWorker->execute(&_latestInput);
        }else{
            _implicitFlow.removeToken(_latestScope.join(" "));
            qDebug() << "Could not retrieve a valid token";
        }
        break;
    case 2: //authorization flow
        token = _authFlow.getToken(_latestScope.join(" "));
        if(token.isValid()){
            _latestInput.headers.insert("Authorization", "Bearer " + token.getToken());
            _latestWorker->execute(&_latestInput);
        }else{
            _authFlow.removeToken(_latestScope.join(" "));
            qDebug() << "Could not retrieve a valid token";
        }
        break;
    case 3: //client credentials flow
        token = _credentialFlow.getToken(_latestScope.join(" "));
        if(token.isValid()){
            _latestInput.headers.insert("Authorization", "Bearer " + token.getToken());
            _latestWorker->execute(&_latestInput);
        }else{
            _credentialFlow.removeToken(_latestScope.join(" "));
            qDebug() << "Could not retrieve a valid token";
        }
        break;
    case 4: //resource owner password flow
        token = _passwordFlow.getToken(_latestScope.join(" "));
        if(token.isValid()){
            _latestInput.headers.insert("Authorization", "Bearer " + token.getToken());
            _latestWorker->execute(&_latestInput);
        }else{
            _credentialFlow.removeToken(_latestScope.join(" "));
            qDebug() << "Could not retrieve a valid token";
        }
        break;
    default:
        qDebug() << "No Oauth method set!";
        break;
    }
}
} // namespace OpenAPI
