/**
 * Neutrino API
 * The general-purpose API
 *
 * The version of the OpenAPI document: 3.6.4
 * Contact: ops@neutrinoapi.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIBINLookupResponse.h
 *
 * 
 */

#ifndef OAIBINLookupResponse_H
#define OAIBINLookupResponse_H

#include <QJsonObject>

#include <QList>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAIBINLookupResponse : public OAIObject {
public:
    OAIBINLookupResponse();
    OAIBINLookupResponse(QString json);
    ~OAIBINLookupResponse() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getBinNumber() const;
    void setBinNumber(const QString &bin_number);
    bool is_bin_number_Set() const;
    bool is_bin_number_Valid() const;

    QString getCardBrand() const;
    void setCardBrand(const QString &card_brand);
    bool is_card_brand_Set() const;
    bool is_card_brand_Valid() const;

    QString getCardCategory() const;
    void setCardCategory(const QString &card_category);
    bool is_card_category_Set() const;
    bool is_card_category_Valid() const;

    QString getCardType() const;
    void setCardType(const QString &card_type);
    bool is_card_type_Set() const;
    bool is_card_type_Valid() const;

    QString getCountry() const;
    void setCountry(const QString &country);
    bool is_country_Set() const;
    bool is_country_Valid() const;

    QString getCountryCode() const;
    void setCountryCode(const QString &country_code);
    bool is_country_code_Set() const;
    bool is_country_code_Valid() const;

    QString getCountryCode3() const;
    void setCountryCode3(const QString &country_code3);
    bool is_country_code3_Set() const;
    bool is_country_code3_Valid() const;

    QString getCurrencyCode() const;
    void setCurrencyCode(const QString &currency_code);
    bool is_currency_code_Set() const;
    bool is_currency_code_Valid() const;

    bool isIpBlocklisted() const;
    void setIpBlocklisted(const bool &ip_blocklisted);
    bool is_ip_blocklisted_Set() const;
    bool is_ip_blocklisted_Valid() const;

    QList<QString> getIpBlocklists() const;
    void setIpBlocklists(const QList<QString> &ip_blocklists);
    bool is_ip_blocklists_Set() const;
    bool is_ip_blocklists_Valid() const;

    QString getIpCity() const;
    void setIpCity(const QString &ip_city);
    bool is_ip_city_Set() const;
    bool is_ip_city_Valid() const;

    QString getIpCountry() const;
    void setIpCountry(const QString &ip_country);
    bool is_ip_country_Set() const;
    bool is_ip_country_Valid() const;

    QString getIpCountryCode() const;
    void setIpCountryCode(const QString &ip_country_code);
    bool is_ip_country_code_Set() const;
    bool is_ip_country_code_Valid() const;

    QString getIpCountryCode3() const;
    void setIpCountryCode3(const QString &ip_country_code3);
    bool is_ip_country_code3_Set() const;
    bool is_ip_country_code3_Valid() const;

    bool isIpMatchesBin() const;
    void setIpMatchesBin(const bool &ip_matches_bin);
    bool is_ip_matches_bin_Set() const;
    bool is_ip_matches_bin_Valid() const;

    QString getIpRegion() const;
    void setIpRegion(const QString &ip_region);
    bool is_ip_region_Set() const;
    bool is_ip_region_Valid() const;

    bool isIsCommercial() const;
    void setIsCommercial(const bool &is_commercial);
    bool is_is_commercial_Set() const;
    bool is_is_commercial_Valid() const;

    bool isIsPrepaid() const;
    void setIsPrepaid(const bool &is_prepaid);
    bool is_is_prepaid_Set() const;
    bool is_is_prepaid_Valid() const;

    QString getIssuer() const;
    void setIssuer(const QString &issuer);
    bool is_issuer_Set() const;
    bool is_issuer_Valid() const;

    QString getIssuerPhone() const;
    void setIssuerPhone(const QString &issuer_phone);
    bool is_issuer_phone_Set() const;
    bool is_issuer_phone_Valid() const;

    QString getIssuerWebsite() const;
    void setIssuerWebsite(const QString &issuer_website);
    bool is_issuer_website_Set() const;
    bool is_issuer_website_Valid() const;

    bool isRValid() const;
    void setRValid(const bool &r_valid);
    bool is_r_valid_Set() const;
    bool is_r_valid_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_bin_number;
    bool m_bin_number_isSet;
    bool m_bin_number_isValid;

    QString m_card_brand;
    bool m_card_brand_isSet;
    bool m_card_brand_isValid;

    QString m_card_category;
    bool m_card_category_isSet;
    bool m_card_category_isValid;

    QString m_card_type;
    bool m_card_type_isSet;
    bool m_card_type_isValid;

    QString m_country;
    bool m_country_isSet;
    bool m_country_isValid;

    QString m_country_code;
    bool m_country_code_isSet;
    bool m_country_code_isValid;

    QString m_country_code3;
    bool m_country_code3_isSet;
    bool m_country_code3_isValid;

    QString m_currency_code;
    bool m_currency_code_isSet;
    bool m_currency_code_isValid;

    bool m_ip_blocklisted;
    bool m_ip_blocklisted_isSet;
    bool m_ip_blocklisted_isValid;

    QList<QString> m_ip_blocklists;
    bool m_ip_blocklists_isSet;
    bool m_ip_blocklists_isValid;

    QString m_ip_city;
    bool m_ip_city_isSet;
    bool m_ip_city_isValid;

    QString m_ip_country;
    bool m_ip_country_isSet;
    bool m_ip_country_isValid;

    QString m_ip_country_code;
    bool m_ip_country_code_isSet;
    bool m_ip_country_code_isValid;

    QString m_ip_country_code3;
    bool m_ip_country_code3_isSet;
    bool m_ip_country_code3_isValid;

    bool m_ip_matches_bin;
    bool m_ip_matches_bin_isSet;
    bool m_ip_matches_bin_isValid;

    QString m_ip_region;
    bool m_ip_region_isSet;
    bool m_ip_region_isValid;

    bool m_is_commercial;
    bool m_is_commercial_isSet;
    bool m_is_commercial_isValid;

    bool m_is_prepaid;
    bool m_is_prepaid_isSet;
    bool m_is_prepaid_isValid;

    QString m_issuer;
    bool m_issuer_isSet;
    bool m_issuer_isValid;

    QString m_issuer_phone;
    bool m_issuer_phone_isSet;
    bool m_issuer_phone_isValid;

    QString m_issuer_website;
    bool m_issuer_website_isSet;
    bool m_issuer_website_isValid;

    bool m_r_valid;
    bool m_r_valid_isSet;
    bool m_r_valid_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIBINLookupResponse)

#endif // OAIBINLookupResponse_H
