/**
 * Neutrino API
 * The general-purpose API
 *
 * The version of the OpenAPI document: 3.6.4
 * Contact: ops@neutrinoapi.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIURLInfoResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIURLInfoResponse::OAIURLInfoResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIURLInfoResponse::OAIURLInfoResponse() {
    this->initializeModel();
}

OAIURLInfoResponse::~OAIURLInfoResponse() {}

void OAIURLInfoResponse::initializeModel() {

    m_content_isSet = false;
    m_content_isValid = false;

    m_content_encoding_isSet = false;
    m_content_encoding_isValid = false;

    m_content_size_isSet = false;
    m_content_size_isValid = false;

    m_content_type_isSet = false;
    m_content_type_isValid = false;

    m_http_ok_isSet = false;
    m_http_ok_isValid = false;

    m_http_redirect_isSet = false;
    m_http_redirect_isValid = false;

    m_http_status_isSet = false;
    m_http_status_isValid = false;

    m_http_status_message_isSet = false;
    m_http_status_message_isValid = false;

    m_is_error_isSet = false;
    m_is_error_isValid = false;

    m_is_timeout_isSet = false;
    m_is_timeout_isValid = false;

    m_language_code_isSet = false;
    m_language_code_isValid = false;

    m_load_time_isSet = false;
    m_load_time_isValid = false;

    m_query_isSet = false;
    m_query_isValid = false;

    m_real_isSet = false;
    m_real_isValid = false;

    m_server_city_isSet = false;
    m_server_city_isValid = false;

    m_server_country_isSet = false;
    m_server_country_isValid = false;

    m_server_country_code_isSet = false;
    m_server_country_code_isValid = false;

    m_server_hostname_isSet = false;
    m_server_hostname_isValid = false;

    m_server_ip_isSet = false;
    m_server_ip_isValid = false;

    m_server_name_isSet = false;
    m_server_name_isValid = false;

    m_server_region_isSet = false;
    m_server_region_isValid = false;

    m_title_isSet = false;
    m_title_isValid = false;

    m_url_isSet = false;
    m_url_isValid = false;

    m_url_path_isSet = false;
    m_url_path_isValid = false;

    m_url_port_isSet = false;
    m_url_port_isValid = false;

    m_url_protocol_isSet = false;
    m_url_protocol_isValid = false;

    m_r_valid_isSet = false;
    m_r_valid_isValid = false;
}

void OAIURLInfoResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIURLInfoResponse::fromJsonObject(QJsonObject json) {

    m_content_isValid = ::OpenAPI::fromJsonValue(m_content, json[QString("content")]);
    m_content_isSet = !json[QString("content")].isNull() && m_content_isValid;

    m_content_encoding_isValid = ::OpenAPI::fromJsonValue(m_content_encoding, json[QString("content-encoding")]);
    m_content_encoding_isSet = !json[QString("content-encoding")].isNull() && m_content_encoding_isValid;

    m_content_size_isValid = ::OpenAPI::fromJsonValue(m_content_size, json[QString("content-size")]);
    m_content_size_isSet = !json[QString("content-size")].isNull() && m_content_size_isValid;

    m_content_type_isValid = ::OpenAPI::fromJsonValue(m_content_type, json[QString("content-type")]);
    m_content_type_isSet = !json[QString("content-type")].isNull() && m_content_type_isValid;

    m_http_ok_isValid = ::OpenAPI::fromJsonValue(m_http_ok, json[QString("http-ok")]);
    m_http_ok_isSet = !json[QString("http-ok")].isNull() && m_http_ok_isValid;

    m_http_redirect_isValid = ::OpenAPI::fromJsonValue(m_http_redirect, json[QString("http-redirect")]);
    m_http_redirect_isSet = !json[QString("http-redirect")].isNull() && m_http_redirect_isValid;

    m_http_status_isValid = ::OpenAPI::fromJsonValue(m_http_status, json[QString("http-status")]);
    m_http_status_isSet = !json[QString("http-status")].isNull() && m_http_status_isValid;

    m_http_status_message_isValid = ::OpenAPI::fromJsonValue(m_http_status_message, json[QString("http-status-message")]);
    m_http_status_message_isSet = !json[QString("http-status-message")].isNull() && m_http_status_message_isValid;

    m_is_error_isValid = ::OpenAPI::fromJsonValue(m_is_error, json[QString("is-error")]);
    m_is_error_isSet = !json[QString("is-error")].isNull() && m_is_error_isValid;

    m_is_timeout_isValid = ::OpenAPI::fromJsonValue(m_is_timeout, json[QString("is-timeout")]);
    m_is_timeout_isSet = !json[QString("is-timeout")].isNull() && m_is_timeout_isValid;

    m_language_code_isValid = ::OpenAPI::fromJsonValue(m_language_code, json[QString("language-code")]);
    m_language_code_isSet = !json[QString("language-code")].isNull() && m_language_code_isValid;

    m_load_time_isValid = ::OpenAPI::fromJsonValue(m_load_time, json[QString("load-time")]);
    m_load_time_isSet = !json[QString("load-time")].isNull() && m_load_time_isValid;

    m_query_isValid = ::OpenAPI::fromJsonValue(m_query, json[QString("query")]);
    m_query_isSet = !json[QString("query")].isNull() && m_query_isValid;

    m_real_isValid = ::OpenAPI::fromJsonValue(m_real, json[QString("real")]);
    m_real_isSet = !json[QString("real")].isNull() && m_real_isValid;

    m_server_city_isValid = ::OpenAPI::fromJsonValue(m_server_city, json[QString("server-city")]);
    m_server_city_isSet = !json[QString("server-city")].isNull() && m_server_city_isValid;

    m_server_country_isValid = ::OpenAPI::fromJsonValue(m_server_country, json[QString("server-country")]);
    m_server_country_isSet = !json[QString("server-country")].isNull() && m_server_country_isValid;

    m_server_country_code_isValid = ::OpenAPI::fromJsonValue(m_server_country_code, json[QString("server-country-code")]);
    m_server_country_code_isSet = !json[QString("server-country-code")].isNull() && m_server_country_code_isValid;

    m_server_hostname_isValid = ::OpenAPI::fromJsonValue(m_server_hostname, json[QString("server-hostname")]);
    m_server_hostname_isSet = !json[QString("server-hostname")].isNull() && m_server_hostname_isValid;

    m_server_ip_isValid = ::OpenAPI::fromJsonValue(m_server_ip, json[QString("server-ip")]);
    m_server_ip_isSet = !json[QString("server-ip")].isNull() && m_server_ip_isValid;

    m_server_name_isValid = ::OpenAPI::fromJsonValue(m_server_name, json[QString("server-name")]);
    m_server_name_isSet = !json[QString("server-name")].isNull() && m_server_name_isValid;

    m_server_region_isValid = ::OpenAPI::fromJsonValue(m_server_region, json[QString("server-region")]);
    m_server_region_isSet = !json[QString("server-region")].isNull() && m_server_region_isValid;

    m_title_isValid = ::OpenAPI::fromJsonValue(m_title, json[QString("title")]);
    m_title_isSet = !json[QString("title")].isNull() && m_title_isValid;

    m_url_isValid = ::OpenAPI::fromJsonValue(m_url, json[QString("url")]);
    m_url_isSet = !json[QString("url")].isNull() && m_url_isValid;

    m_url_path_isValid = ::OpenAPI::fromJsonValue(m_url_path, json[QString("url-path")]);
    m_url_path_isSet = !json[QString("url-path")].isNull() && m_url_path_isValid;

    m_url_port_isValid = ::OpenAPI::fromJsonValue(m_url_port, json[QString("url-port")]);
    m_url_port_isSet = !json[QString("url-port")].isNull() && m_url_port_isValid;

    m_url_protocol_isValid = ::OpenAPI::fromJsonValue(m_url_protocol, json[QString("url-protocol")]);
    m_url_protocol_isSet = !json[QString("url-protocol")].isNull() && m_url_protocol_isValid;

    m_r_valid_isValid = ::OpenAPI::fromJsonValue(m_r_valid, json[QString("valid")]);
    m_r_valid_isSet = !json[QString("valid")].isNull() && m_r_valid_isValid;
}

QString OAIURLInfoResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIURLInfoResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_content_isSet) {
        obj.insert(QString("content"), ::OpenAPI::toJsonValue(m_content));
    }
    if (m_content_encoding_isSet) {
        obj.insert(QString("content-encoding"), ::OpenAPI::toJsonValue(m_content_encoding));
    }
    if (m_content_size_isSet) {
        obj.insert(QString("content-size"), ::OpenAPI::toJsonValue(m_content_size));
    }
    if (m_content_type_isSet) {
        obj.insert(QString("content-type"), ::OpenAPI::toJsonValue(m_content_type));
    }
    if (m_http_ok_isSet) {
        obj.insert(QString("http-ok"), ::OpenAPI::toJsonValue(m_http_ok));
    }
    if (m_http_redirect_isSet) {
        obj.insert(QString("http-redirect"), ::OpenAPI::toJsonValue(m_http_redirect));
    }
    if (m_http_status_isSet) {
        obj.insert(QString("http-status"), ::OpenAPI::toJsonValue(m_http_status));
    }
    if (m_http_status_message_isSet) {
        obj.insert(QString("http-status-message"), ::OpenAPI::toJsonValue(m_http_status_message));
    }
    if (m_is_error_isSet) {
        obj.insert(QString("is-error"), ::OpenAPI::toJsonValue(m_is_error));
    }
    if (m_is_timeout_isSet) {
        obj.insert(QString("is-timeout"), ::OpenAPI::toJsonValue(m_is_timeout));
    }
    if (m_language_code_isSet) {
        obj.insert(QString("language-code"), ::OpenAPI::toJsonValue(m_language_code));
    }
    if (m_load_time_isSet) {
        obj.insert(QString("load-time"), ::OpenAPI::toJsonValue(m_load_time));
    }
    if (m_query.size() > 0) {
        obj.insert(QString("query"), ::OpenAPI::toJsonValue(m_query));
    }
    if (m_real_isSet) {
        obj.insert(QString("real"), ::OpenAPI::toJsonValue(m_real));
    }
    if (m_server_city_isSet) {
        obj.insert(QString("server-city"), ::OpenAPI::toJsonValue(m_server_city));
    }
    if (m_server_country_isSet) {
        obj.insert(QString("server-country"), ::OpenAPI::toJsonValue(m_server_country));
    }
    if (m_server_country_code_isSet) {
        obj.insert(QString("server-country-code"), ::OpenAPI::toJsonValue(m_server_country_code));
    }
    if (m_server_hostname_isSet) {
        obj.insert(QString("server-hostname"), ::OpenAPI::toJsonValue(m_server_hostname));
    }
    if (m_server_ip_isSet) {
        obj.insert(QString("server-ip"), ::OpenAPI::toJsonValue(m_server_ip));
    }
    if (m_server_name_isSet) {
        obj.insert(QString("server-name"), ::OpenAPI::toJsonValue(m_server_name));
    }
    if (m_server_region_isSet) {
        obj.insert(QString("server-region"), ::OpenAPI::toJsonValue(m_server_region));
    }
    if (m_title_isSet) {
        obj.insert(QString("title"), ::OpenAPI::toJsonValue(m_title));
    }
    if (m_url_isSet) {
        obj.insert(QString("url"), ::OpenAPI::toJsonValue(m_url));
    }
    if (m_url_path_isSet) {
        obj.insert(QString("url-path"), ::OpenAPI::toJsonValue(m_url_path));
    }
    if (m_url_port_isSet) {
        obj.insert(QString("url-port"), ::OpenAPI::toJsonValue(m_url_port));
    }
    if (m_url_protocol_isSet) {
        obj.insert(QString("url-protocol"), ::OpenAPI::toJsonValue(m_url_protocol));
    }
    if (m_r_valid_isSet) {
        obj.insert(QString("valid"), ::OpenAPI::toJsonValue(m_r_valid));
    }
    return obj;
}

QString OAIURLInfoResponse::getContent() const {
    return m_content;
}
void OAIURLInfoResponse::setContent(const QString &content) {
    m_content = content;
    m_content_isSet = true;
}

bool OAIURLInfoResponse::is_content_Set() const{
    return m_content_isSet;
}

bool OAIURLInfoResponse::is_content_Valid() const{
    return m_content_isValid;
}

QString OAIURLInfoResponse::getContentEncoding() const {
    return m_content_encoding;
}
void OAIURLInfoResponse::setContentEncoding(const QString &content_encoding) {
    m_content_encoding = content_encoding;
    m_content_encoding_isSet = true;
}

bool OAIURLInfoResponse::is_content_encoding_Set() const{
    return m_content_encoding_isSet;
}

bool OAIURLInfoResponse::is_content_encoding_Valid() const{
    return m_content_encoding_isValid;
}

qint32 OAIURLInfoResponse::getContentSize() const {
    return m_content_size;
}
void OAIURLInfoResponse::setContentSize(const qint32 &content_size) {
    m_content_size = content_size;
    m_content_size_isSet = true;
}

bool OAIURLInfoResponse::is_content_size_Set() const{
    return m_content_size_isSet;
}

bool OAIURLInfoResponse::is_content_size_Valid() const{
    return m_content_size_isValid;
}

QString OAIURLInfoResponse::getContentType() const {
    return m_content_type;
}
void OAIURLInfoResponse::setContentType(const QString &content_type) {
    m_content_type = content_type;
    m_content_type_isSet = true;
}

bool OAIURLInfoResponse::is_content_type_Set() const{
    return m_content_type_isSet;
}

bool OAIURLInfoResponse::is_content_type_Valid() const{
    return m_content_type_isValid;
}

bool OAIURLInfoResponse::isHttpOk() const {
    return m_http_ok;
}
void OAIURLInfoResponse::setHttpOk(const bool &http_ok) {
    m_http_ok = http_ok;
    m_http_ok_isSet = true;
}

bool OAIURLInfoResponse::is_http_ok_Set() const{
    return m_http_ok_isSet;
}

bool OAIURLInfoResponse::is_http_ok_Valid() const{
    return m_http_ok_isValid;
}

bool OAIURLInfoResponse::isHttpRedirect() const {
    return m_http_redirect;
}
void OAIURLInfoResponse::setHttpRedirect(const bool &http_redirect) {
    m_http_redirect = http_redirect;
    m_http_redirect_isSet = true;
}

bool OAIURLInfoResponse::is_http_redirect_Set() const{
    return m_http_redirect_isSet;
}

bool OAIURLInfoResponse::is_http_redirect_Valid() const{
    return m_http_redirect_isValid;
}

qint32 OAIURLInfoResponse::getHttpStatus() const {
    return m_http_status;
}
void OAIURLInfoResponse::setHttpStatus(const qint32 &http_status) {
    m_http_status = http_status;
    m_http_status_isSet = true;
}

bool OAIURLInfoResponse::is_http_status_Set() const{
    return m_http_status_isSet;
}

bool OAIURLInfoResponse::is_http_status_Valid() const{
    return m_http_status_isValid;
}

qint32 OAIURLInfoResponse::getHttpStatusMessage() const {
    return m_http_status_message;
}
void OAIURLInfoResponse::setHttpStatusMessage(const qint32 &http_status_message) {
    m_http_status_message = http_status_message;
    m_http_status_message_isSet = true;
}

bool OAIURLInfoResponse::is_http_status_message_Set() const{
    return m_http_status_message_isSet;
}

bool OAIURLInfoResponse::is_http_status_message_Valid() const{
    return m_http_status_message_isValid;
}

bool OAIURLInfoResponse::isIsError() const {
    return m_is_error;
}
void OAIURLInfoResponse::setIsError(const bool &is_error) {
    m_is_error = is_error;
    m_is_error_isSet = true;
}

bool OAIURLInfoResponse::is_is_error_Set() const{
    return m_is_error_isSet;
}

bool OAIURLInfoResponse::is_is_error_Valid() const{
    return m_is_error_isValid;
}

bool OAIURLInfoResponse::isIsTimeout() const {
    return m_is_timeout;
}
void OAIURLInfoResponse::setIsTimeout(const bool &is_timeout) {
    m_is_timeout = is_timeout;
    m_is_timeout_isSet = true;
}

bool OAIURLInfoResponse::is_is_timeout_Set() const{
    return m_is_timeout_isSet;
}

bool OAIURLInfoResponse::is_is_timeout_Valid() const{
    return m_is_timeout_isValid;
}

QString OAIURLInfoResponse::getLanguageCode() const {
    return m_language_code;
}
void OAIURLInfoResponse::setLanguageCode(const QString &language_code) {
    m_language_code = language_code;
    m_language_code_isSet = true;
}

bool OAIURLInfoResponse::is_language_code_Set() const{
    return m_language_code_isSet;
}

bool OAIURLInfoResponse::is_language_code_Valid() const{
    return m_language_code_isValid;
}

double OAIURLInfoResponse::getLoadTime() const {
    return m_load_time;
}
void OAIURLInfoResponse::setLoadTime(const double &load_time) {
    m_load_time = load_time;
    m_load_time_isSet = true;
}

bool OAIURLInfoResponse::is_load_time_Set() const{
    return m_load_time_isSet;
}

bool OAIURLInfoResponse::is_load_time_Valid() const{
    return m_load_time_isValid;
}

QMap<QString, QString> OAIURLInfoResponse::getQuery() const {
    return m_query;
}
void OAIURLInfoResponse::setQuery(const QMap<QString, QString> &query) {
    m_query = query;
    m_query_isSet = true;
}

bool OAIURLInfoResponse::is_query_Set() const{
    return m_query_isSet;
}

bool OAIURLInfoResponse::is_query_Valid() const{
    return m_query_isValid;
}

bool OAIURLInfoResponse::isReal() const {
    return m_real;
}
void OAIURLInfoResponse::setReal(const bool &real) {
    m_real = real;
    m_real_isSet = true;
}

bool OAIURLInfoResponse::is_real_Set() const{
    return m_real_isSet;
}

bool OAIURLInfoResponse::is_real_Valid() const{
    return m_real_isValid;
}

QString OAIURLInfoResponse::getServerCity() const {
    return m_server_city;
}
void OAIURLInfoResponse::setServerCity(const QString &server_city) {
    m_server_city = server_city;
    m_server_city_isSet = true;
}

bool OAIURLInfoResponse::is_server_city_Set() const{
    return m_server_city_isSet;
}

bool OAIURLInfoResponse::is_server_city_Valid() const{
    return m_server_city_isValid;
}

QString OAIURLInfoResponse::getServerCountry() const {
    return m_server_country;
}
void OAIURLInfoResponse::setServerCountry(const QString &server_country) {
    m_server_country = server_country;
    m_server_country_isSet = true;
}

bool OAIURLInfoResponse::is_server_country_Set() const{
    return m_server_country_isSet;
}

bool OAIURLInfoResponse::is_server_country_Valid() const{
    return m_server_country_isValid;
}

QString OAIURLInfoResponse::getServerCountryCode() const {
    return m_server_country_code;
}
void OAIURLInfoResponse::setServerCountryCode(const QString &server_country_code) {
    m_server_country_code = server_country_code;
    m_server_country_code_isSet = true;
}

bool OAIURLInfoResponse::is_server_country_code_Set() const{
    return m_server_country_code_isSet;
}

bool OAIURLInfoResponse::is_server_country_code_Valid() const{
    return m_server_country_code_isValid;
}

QString OAIURLInfoResponse::getServerHostname() const {
    return m_server_hostname;
}
void OAIURLInfoResponse::setServerHostname(const QString &server_hostname) {
    m_server_hostname = server_hostname;
    m_server_hostname_isSet = true;
}

bool OAIURLInfoResponse::is_server_hostname_Set() const{
    return m_server_hostname_isSet;
}

bool OAIURLInfoResponse::is_server_hostname_Valid() const{
    return m_server_hostname_isValid;
}

QString OAIURLInfoResponse::getServerIp() const {
    return m_server_ip;
}
void OAIURLInfoResponse::setServerIp(const QString &server_ip) {
    m_server_ip = server_ip;
    m_server_ip_isSet = true;
}

bool OAIURLInfoResponse::is_server_ip_Set() const{
    return m_server_ip_isSet;
}

bool OAIURLInfoResponse::is_server_ip_Valid() const{
    return m_server_ip_isValid;
}

QString OAIURLInfoResponse::getServerName() const {
    return m_server_name;
}
void OAIURLInfoResponse::setServerName(const QString &server_name) {
    m_server_name = server_name;
    m_server_name_isSet = true;
}

bool OAIURLInfoResponse::is_server_name_Set() const{
    return m_server_name_isSet;
}

bool OAIURLInfoResponse::is_server_name_Valid() const{
    return m_server_name_isValid;
}

QString OAIURLInfoResponse::getServerRegion() const {
    return m_server_region;
}
void OAIURLInfoResponse::setServerRegion(const QString &server_region) {
    m_server_region = server_region;
    m_server_region_isSet = true;
}

bool OAIURLInfoResponse::is_server_region_Set() const{
    return m_server_region_isSet;
}

bool OAIURLInfoResponse::is_server_region_Valid() const{
    return m_server_region_isValid;
}

QString OAIURLInfoResponse::getTitle() const {
    return m_title;
}
void OAIURLInfoResponse::setTitle(const QString &title) {
    m_title = title;
    m_title_isSet = true;
}

bool OAIURLInfoResponse::is_title_Set() const{
    return m_title_isSet;
}

bool OAIURLInfoResponse::is_title_Valid() const{
    return m_title_isValid;
}

QString OAIURLInfoResponse::getUrl() const {
    return m_url;
}
void OAIURLInfoResponse::setUrl(const QString &url) {
    m_url = url;
    m_url_isSet = true;
}

bool OAIURLInfoResponse::is_url_Set() const{
    return m_url_isSet;
}

bool OAIURLInfoResponse::is_url_Valid() const{
    return m_url_isValid;
}

QString OAIURLInfoResponse::getUrlPath() const {
    return m_url_path;
}
void OAIURLInfoResponse::setUrlPath(const QString &url_path) {
    m_url_path = url_path;
    m_url_path_isSet = true;
}

bool OAIURLInfoResponse::is_url_path_Set() const{
    return m_url_path_isSet;
}

bool OAIURLInfoResponse::is_url_path_Valid() const{
    return m_url_path_isValid;
}

qint32 OAIURLInfoResponse::getUrlPort() const {
    return m_url_port;
}
void OAIURLInfoResponse::setUrlPort(const qint32 &url_port) {
    m_url_port = url_port;
    m_url_port_isSet = true;
}

bool OAIURLInfoResponse::is_url_port_Set() const{
    return m_url_port_isSet;
}

bool OAIURLInfoResponse::is_url_port_Valid() const{
    return m_url_port_isValid;
}

QString OAIURLInfoResponse::getUrlProtocol() const {
    return m_url_protocol;
}
void OAIURLInfoResponse::setUrlProtocol(const QString &url_protocol) {
    m_url_protocol = url_protocol;
    m_url_protocol_isSet = true;
}

bool OAIURLInfoResponse::is_url_protocol_Set() const{
    return m_url_protocol_isSet;
}

bool OAIURLInfoResponse::is_url_protocol_Valid() const{
    return m_url_protocol_isValid;
}

bool OAIURLInfoResponse::isRValid() const {
    return m_r_valid;
}
void OAIURLInfoResponse::setRValid(const bool &r_valid) {
    m_r_valid = r_valid;
    m_r_valid_isSet = true;
}

bool OAIURLInfoResponse::is_r_valid_Set() const{
    return m_r_valid_isSet;
}

bool OAIURLInfoResponse::is_r_valid_Valid() const{
    return m_r_valid_isValid;
}

bool OAIURLInfoResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_content_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_content_encoding_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_content_size_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_content_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_http_ok_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_http_redirect_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_http_status_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_http_status_message_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_error_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_timeout_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_language_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_load_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_query.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_real_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_server_city_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_server_country_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_server_country_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_server_hostname_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_server_ip_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_server_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_server_region_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_title_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_url_path_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_url_port_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_url_protocol_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_r_valid_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIURLInfoResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_content_isValid && m_content_encoding_isValid && m_content_size_isValid && m_content_type_isValid && m_http_ok_isValid && m_http_redirect_isValid && m_http_status_isValid && m_http_status_message_isValid && m_is_error_isValid && m_is_timeout_isValid && m_language_code_isValid && m_load_time_isValid && m_query_isValid && m_real_isValid && m_server_city_isValid && m_server_country_isValid && m_server_country_code_isValid && m_server_hostname_isValid && m_server_ip_isValid && m_server_name_isValid && m_server_region_isValid && m_title_isValid && m_url_isValid && m_url_path_isValid && m_url_port_isValid && m_url_protocol_isValid && m_r_valid_isValid && true;
}

} // namespace OpenAPI
