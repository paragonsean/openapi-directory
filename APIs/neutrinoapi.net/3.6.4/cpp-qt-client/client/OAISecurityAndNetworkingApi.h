/**
 * Neutrino API
 * The general-purpose API
 *
 * The version of the OpenAPI document: 3.6.4
 * Contact: ops@neutrinoapi.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAISecurityAndNetworkingApi_H
#define OAI_OAISecurityAndNetworkingApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIAPIError.h"
#include "OAIDomainLookupResponse.h"
#include "OAIEmailVerifyResponse.h"
#include "OAIHostReputationResponse.h"
#include "OAIHttpFileElement.h"
#include "OAIIPBlocklistResponse.h"
#include "OAIIPProbeResponse.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAISecurityAndNetworkingApi : public QObject {
    Q_OBJECT

public:
    OAISecurityAndNetworkingApi(const int timeOut = 0);
    ~OAISecurityAndNetworkingApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  host QString [required]
    * @param[in]  live bool [optional]
    */
    virtual void domainLookup(const QString &host, const ::OpenAPI::OptionalParam<bool> &live = ::OpenAPI::OptionalParam<bool>());

    /**
    * @param[in]  email QString [required]
    * @param[in]  fix_typos bool [optional]
    */
    virtual void emailVerify(const QString &email, const ::OpenAPI::OptionalParam<bool> &fix_typos = ::OpenAPI::OptionalParam<bool>());

    /**
    * @param[in]  host QString [required]
    * @param[in]  list_rating qint32 [optional]
    * @param[in]  zones QString [optional]
    */
    virtual void hostReputation(const QString &host, const ::OpenAPI::OptionalParam<qint32> &list_rating = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &zones = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  ip QString [required]
    * @param[in]  vpn_lookup bool [optional]
    */
    virtual void iPBlocklist(const QString &ip, const ::OpenAPI::OptionalParam<bool> &vpn_lookup = ::OpenAPI::OptionalParam<bool>());

    /**
    * @param[in]  format QString [optional]
    * @param[in]  include_vpn bool [optional]
    * @param[in]  cidr bool [optional]
    * @param[in]  ip6 bool [optional]
    */
    virtual void iPBlocklistDownload(const ::OpenAPI::OptionalParam<QString> &format = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &include_vpn = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &cidr = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &ip6 = ::OpenAPI::OptionalParam<bool>());

    /**
    * @param[in]  ip QString [required]
    */
    virtual void iPProbe(const QString &ip);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void domainLookupCallback(OAIHttpRequestWorker *worker);
    void emailVerifyCallback(OAIHttpRequestWorker *worker);
    void hostReputationCallback(OAIHttpRequestWorker *worker);
    void iPBlocklistCallback(OAIHttpRequestWorker *worker);
    void iPBlocklistDownloadCallback(OAIHttpRequestWorker *worker);
    void iPProbeCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void domainLookupSignal(OAIDomainLookupResponse summary);
    void emailVerifySignal(OAIEmailVerifyResponse summary);
    void hostReputationSignal(OAIHostReputationResponse summary);
    void iPBlocklistSignal(OAIIPBlocklistResponse summary);
    void iPBlocklistDownloadSignal(OAIHttpFileElement summary);
    void iPProbeSignal(OAIIPProbeResponse summary);


    void domainLookupSignalFull(OAIHttpRequestWorker *worker, OAIDomainLookupResponse summary);
    void emailVerifySignalFull(OAIHttpRequestWorker *worker, OAIEmailVerifyResponse summary);
    void hostReputationSignalFull(OAIHttpRequestWorker *worker, OAIHostReputationResponse summary);
    void iPBlocklistSignalFull(OAIHttpRequestWorker *worker, OAIIPBlocklistResponse summary);
    void iPBlocklistDownloadSignalFull(OAIHttpRequestWorker *worker, OAIHttpFileElement summary);
    void iPProbeSignalFull(OAIHttpRequestWorker *worker, OAIIPProbeResponse summary);

    Q_DECL_DEPRECATED_X("Use domainLookupSignalError() instead")
    void domainLookupSignalE(OAIDomainLookupResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void domainLookupSignalError(OAIDomainLookupResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use emailVerifySignalError() instead")
    void emailVerifySignalE(OAIEmailVerifyResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void emailVerifySignalError(OAIEmailVerifyResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use hostReputationSignalError() instead")
    void hostReputationSignalE(OAIHostReputationResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void hostReputationSignalError(OAIHostReputationResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use iPBlocklistSignalError() instead")
    void iPBlocklistSignalE(OAIIPBlocklistResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void iPBlocklistSignalError(OAIIPBlocklistResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use iPBlocklistDownloadSignalError() instead")
    void iPBlocklistDownloadSignalE(OAIHttpFileElement summary, QNetworkReply::NetworkError error_type, QString error_str);
    void iPBlocklistDownloadSignalError(OAIHttpFileElement summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use iPProbeSignalError() instead")
    void iPProbeSignalE(OAIIPProbeResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void iPProbeSignalError(OAIIPProbeResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use domainLookupSignalErrorFull() instead")
    void domainLookupSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void domainLookupSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use emailVerifySignalErrorFull() instead")
    void emailVerifySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void emailVerifySignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use hostReputationSignalErrorFull() instead")
    void hostReputationSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void hostReputationSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use iPBlocklistSignalErrorFull() instead")
    void iPBlocklistSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void iPBlocklistSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use iPBlocklistDownloadSignalErrorFull() instead")
    void iPBlocklistDownloadSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void iPBlocklistDownloadSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use iPProbeSignalErrorFull() instead")
    void iPProbeSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void iPProbeSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
