/**
 * Neutrino API
 * The general-purpose API
 *
 * The version of the OpenAPI document: 3.6.4
 * Contact: ops@neutrinoapi.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIUALookupResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIUALookupResponse::OAIUALookupResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIUALookupResponse::OAIUALookupResponse() {
    this->initializeModel();
}

OAIUALookupResponse::~OAIUALookupResponse() {}

void OAIUALookupResponse::initializeModel() {

    m_browser_engine_isSet = false;
    m_browser_engine_isValid = false;

    m_browser_release_isSet = false;
    m_browser_release_isValid = false;

    m_device_brand_isSet = false;
    m_device_brand_isValid = false;

    m_device_height_px_isSet = false;
    m_device_height_px_isValid = false;

    m_device_model_isSet = false;
    m_device_model_isValid = false;

    m_device_model_code_isSet = false;
    m_device_model_code_isValid = false;

    m_device_pixel_ratio_isSet = false;
    m_device_pixel_ratio_isValid = false;

    m_device_ppi_isSet = false;
    m_device_ppi_isValid = false;

    m_device_price_isSet = false;
    m_device_price_isValid = false;

    m_device_release_isSet = false;
    m_device_release_isValid = false;

    m_device_resolution_isSet = false;
    m_device_resolution_isValid = false;

    m_device_width_px_isSet = false;
    m_device_width_px_isValid = false;

    m_is_mobile_isSet = false;
    m_is_mobile_isValid = false;

    m_is_webview_isSet = false;
    m_is_webview_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_os_isSet = false;
    m_os_isValid = false;

    m_os_family_isSet = false;
    m_os_family_isValid = false;

    m_os_version_isSet = false;
    m_os_version_isValid = false;

    m_os_version_major_isSet = false;
    m_os_version_major_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;

    m_ua_isSet = false;
    m_ua_isValid = false;

    m_version_isSet = false;
    m_version_isValid = false;

    m_version_major_isSet = false;
    m_version_major_isValid = false;
}

void OAIUALookupResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIUALookupResponse::fromJsonObject(QJsonObject json) {

    m_browser_engine_isValid = ::OpenAPI::fromJsonValue(m_browser_engine, json[QString("browser-engine")]);
    m_browser_engine_isSet = !json[QString("browser-engine")].isNull() && m_browser_engine_isValid;

    m_browser_release_isValid = ::OpenAPI::fromJsonValue(m_browser_release, json[QString("browser-release")]);
    m_browser_release_isSet = !json[QString("browser-release")].isNull() && m_browser_release_isValid;

    m_device_brand_isValid = ::OpenAPI::fromJsonValue(m_device_brand, json[QString("device-brand")]);
    m_device_brand_isSet = !json[QString("device-brand")].isNull() && m_device_brand_isValid;

    m_device_height_px_isValid = ::OpenAPI::fromJsonValue(m_device_height_px, json[QString("device-height-px")]);
    m_device_height_px_isSet = !json[QString("device-height-px")].isNull() && m_device_height_px_isValid;

    m_device_model_isValid = ::OpenAPI::fromJsonValue(m_device_model, json[QString("device-model")]);
    m_device_model_isSet = !json[QString("device-model")].isNull() && m_device_model_isValid;

    m_device_model_code_isValid = ::OpenAPI::fromJsonValue(m_device_model_code, json[QString("device-model-code")]);
    m_device_model_code_isSet = !json[QString("device-model-code")].isNull() && m_device_model_code_isValid;

    m_device_pixel_ratio_isValid = ::OpenAPI::fromJsonValue(m_device_pixel_ratio, json[QString("device-pixel-ratio")]);
    m_device_pixel_ratio_isSet = !json[QString("device-pixel-ratio")].isNull() && m_device_pixel_ratio_isValid;

    m_device_ppi_isValid = ::OpenAPI::fromJsonValue(m_device_ppi, json[QString("device-ppi")]);
    m_device_ppi_isSet = !json[QString("device-ppi")].isNull() && m_device_ppi_isValid;

    m_device_price_isValid = ::OpenAPI::fromJsonValue(m_device_price, json[QString("device-price")]);
    m_device_price_isSet = !json[QString("device-price")].isNull() && m_device_price_isValid;

    m_device_release_isValid = ::OpenAPI::fromJsonValue(m_device_release, json[QString("device-release")]);
    m_device_release_isSet = !json[QString("device-release")].isNull() && m_device_release_isValid;

    m_device_resolution_isValid = ::OpenAPI::fromJsonValue(m_device_resolution, json[QString("device-resolution")]);
    m_device_resolution_isSet = !json[QString("device-resolution")].isNull() && m_device_resolution_isValid;

    m_device_width_px_isValid = ::OpenAPI::fromJsonValue(m_device_width_px, json[QString("device-width-px")]);
    m_device_width_px_isSet = !json[QString("device-width-px")].isNull() && m_device_width_px_isValid;

    m_is_mobile_isValid = ::OpenAPI::fromJsonValue(m_is_mobile, json[QString("is-mobile")]);
    m_is_mobile_isSet = !json[QString("is-mobile")].isNull() && m_is_mobile_isValid;

    m_is_webview_isValid = ::OpenAPI::fromJsonValue(m_is_webview, json[QString("is-webview")]);
    m_is_webview_isSet = !json[QString("is-webview")].isNull() && m_is_webview_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_os_isValid = ::OpenAPI::fromJsonValue(m_os, json[QString("os")]);
    m_os_isSet = !json[QString("os")].isNull() && m_os_isValid;

    m_os_family_isValid = ::OpenAPI::fromJsonValue(m_os_family, json[QString("os-family")]);
    m_os_family_isSet = !json[QString("os-family")].isNull() && m_os_family_isValid;

    m_os_version_isValid = ::OpenAPI::fromJsonValue(m_os_version, json[QString("os-version")]);
    m_os_version_isSet = !json[QString("os-version")].isNull() && m_os_version_isValid;

    m_os_version_major_isValid = ::OpenAPI::fromJsonValue(m_os_version_major, json[QString("os-version-major")]);
    m_os_version_major_isSet = !json[QString("os-version-major")].isNull() && m_os_version_major_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;

    m_ua_isValid = ::OpenAPI::fromJsonValue(m_ua, json[QString("ua")]);
    m_ua_isSet = !json[QString("ua")].isNull() && m_ua_isValid;

    m_version_isValid = ::OpenAPI::fromJsonValue(m_version, json[QString("version")]);
    m_version_isSet = !json[QString("version")].isNull() && m_version_isValid;

    m_version_major_isValid = ::OpenAPI::fromJsonValue(m_version_major, json[QString("version-major")]);
    m_version_major_isSet = !json[QString("version-major")].isNull() && m_version_major_isValid;
}

QString OAIUALookupResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIUALookupResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_browser_engine_isSet) {
        obj.insert(QString("browser-engine"), ::OpenAPI::toJsonValue(m_browser_engine));
    }
    if (m_browser_release_isSet) {
        obj.insert(QString("browser-release"), ::OpenAPI::toJsonValue(m_browser_release));
    }
    if (m_device_brand_isSet) {
        obj.insert(QString("device-brand"), ::OpenAPI::toJsonValue(m_device_brand));
    }
    if (m_device_height_px_isSet) {
        obj.insert(QString("device-height-px"), ::OpenAPI::toJsonValue(m_device_height_px));
    }
    if (m_device_model_isSet) {
        obj.insert(QString("device-model"), ::OpenAPI::toJsonValue(m_device_model));
    }
    if (m_device_model_code_isSet) {
        obj.insert(QString("device-model-code"), ::OpenAPI::toJsonValue(m_device_model_code));
    }
    if (m_device_pixel_ratio_isSet) {
        obj.insert(QString("device-pixel-ratio"), ::OpenAPI::toJsonValue(m_device_pixel_ratio));
    }
    if (m_device_ppi_isSet) {
        obj.insert(QString("device-ppi"), ::OpenAPI::toJsonValue(m_device_ppi));
    }
    if (m_device_price_isSet) {
        obj.insert(QString("device-price"), ::OpenAPI::toJsonValue(m_device_price));
    }
    if (m_device_release_isSet) {
        obj.insert(QString("device-release"), ::OpenAPI::toJsonValue(m_device_release));
    }
    if (m_device_resolution_isSet) {
        obj.insert(QString("device-resolution"), ::OpenAPI::toJsonValue(m_device_resolution));
    }
    if (m_device_width_px_isSet) {
        obj.insert(QString("device-width-px"), ::OpenAPI::toJsonValue(m_device_width_px));
    }
    if (m_is_mobile_isSet) {
        obj.insert(QString("is-mobile"), ::OpenAPI::toJsonValue(m_is_mobile));
    }
    if (m_is_webview_isSet) {
        obj.insert(QString("is-webview"), ::OpenAPI::toJsonValue(m_is_webview));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_os_isSet) {
        obj.insert(QString("os"), ::OpenAPI::toJsonValue(m_os));
    }
    if (m_os_family_isSet) {
        obj.insert(QString("os-family"), ::OpenAPI::toJsonValue(m_os_family));
    }
    if (m_os_version_isSet) {
        obj.insert(QString("os-version"), ::OpenAPI::toJsonValue(m_os_version));
    }
    if (m_os_version_major_isSet) {
        obj.insert(QString("os-version-major"), ::OpenAPI::toJsonValue(m_os_version_major));
    }
    if (m_type_isSet) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    if (m_ua_isSet) {
        obj.insert(QString("ua"), ::OpenAPI::toJsonValue(m_ua));
    }
    if (m_version_isSet) {
        obj.insert(QString("version"), ::OpenAPI::toJsonValue(m_version));
    }
    if (m_version_major_isSet) {
        obj.insert(QString("version-major"), ::OpenAPI::toJsonValue(m_version_major));
    }
    return obj;
}

QString OAIUALookupResponse::getBrowserEngine() const {
    return m_browser_engine;
}
void OAIUALookupResponse::setBrowserEngine(const QString &browser_engine) {
    m_browser_engine = browser_engine;
    m_browser_engine_isSet = true;
}

bool OAIUALookupResponse::is_browser_engine_Set() const{
    return m_browser_engine_isSet;
}

bool OAIUALookupResponse::is_browser_engine_Valid() const{
    return m_browser_engine_isValid;
}

QString OAIUALookupResponse::getBrowserRelease() const {
    return m_browser_release;
}
void OAIUALookupResponse::setBrowserRelease(const QString &browser_release) {
    m_browser_release = browser_release;
    m_browser_release_isSet = true;
}

bool OAIUALookupResponse::is_browser_release_Set() const{
    return m_browser_release_isSet;
}

bool OAIUALookupResponse::is_browser_release_Valid() const{
    return m_browser_release_isValid;
}

QString OAIUALookupResponse::getDeviceBrand() const {
    return m_device_brand;
}
void OAIUALookupResponse::setDeviceBrand(const QString &device_brand) {
    m_device_brand = device_brand;
    m_device_brand_isSet = true;
}

bool OAIUALookupResponse::is_device_brand_Set() const{
    return m_device_brand_isSet;
}

bool OAIUALookupResponse::is_device_brand_Valid() const{
    return m_device_brand_isValid;
}

double OAIUALookupResponse::getDeviceHeightPx() const {
    return m_device_height_px;
}
void OAIUALookupResponse::setDeviceHeightPx(const double &device_height_px) {
    m_device_height_px = device_height_px;
    m_device_height_px_isSet = true;
}

bool OAIUALookupResponse::is_device_height_px_Set() const{
    return m_device_height_px_isSet;
}

bool OAIUALookupResponse::is_device_height_px_Valid() const{
    return m_device_height_px_isValid;
}

QString OAIUALookupResponse::getDeviceModel() const {
    return m_device_model;
}
void OAIUALookupResponse::setDeviceModel(const QString &device_model) {
    m_device_model = device_model;
    m_device_model_isSet = true;
}

bool OAIUALookupResponse::is_device_model_Set() const{
    return m_device_model_isSet;
}

bool OAIUALookupResponse::is_device_model_Valid() const{
    return m_device_model_isValid;
}

QString OAIUALookupResponse::getDeviceModelCode() const {
    return m_device_model_code;
}
void OAIUALookupResponse::setDeviceModelCode(const QString &device_model_code) {
    m_device_model_code = device_model_code;
    m_device_model_code_isSet = true;
}

bool OAIUALookupResponse::is_device_model_code_Set() const{
    return m_device_model_code_isSet;
}

bool OAIUALookupResponse::is_device_model_code_Valid() const{
    return m_device_model_code_isValid;
}

double OAIUALookupResponse::getDevicePixelRatio() const {
    return m_device_pixel_ratio;
}
void OAIUALookupResponse::setDevicePixelRatio(const double &device_pixel_ratio) {
    m_device_pixel_ratio = device_pixel_ratio;
    m_device_pixel_ratio_isSet = true;
}

bool OAIUALookupResponse::is_device_pixel_ratio_Set() const{
    return m_device_pixel_ratio_isSet;
}

bool OAIUALookupResponse::is_device_pixel_ratio_Valid() const{
    return m_device_pixel_ratio_isValid;
}

double OAIUALookupResponse::getDevicePpi() const {
    return m_device_ppi;
}
void OAIUALookupResponse::setDevicePpi(const double &device_ppi) {
    m_device_ppi = device_ppi;
    m_device_ppi_isSet = true;
}

bool OAIUALookupResponse::is_device_ppi_Set() const{
    return m_device_ppi_isSet;
}

bool OAIUALookupResponse::is_device_ppi_Valid() const{
    return m_device_ppi_isValid;
}

double OAIUALookupResponse::getDevicePrice() const {
    return m_device_price;
}
void OAIUALookupResponse::setDevicePrice(const double &device_price) {
    m_device_price = device_price;
    m_device_price_isSet = true;
}

bool OAIUALookupResponse::is_device_price_Set() const{
    return m_device_price_isSet;
}

bool OAIUALookupResponse::is_device_price_Valid() const{
    return m_device_price_isValid;
}

QString OAIUALookupResponse::getDeviceRelease() const {
    return m_device_release;
}
void OAIUALookupResponse::setDeviceRelease(const QString &device_release) {
    m_device_release = device_release;
    m_device_release_isSet = true;
}

bool OAIUALookupResponse::is_device_release_Set() const{
    return m_device_release_isSet;
}

bool OAIUALookupResponse::is_device_release_Valid() const{
    return m_device_release_isValid;
}

QString OAIUALookupResponse::getDeviceResolution() const {
    return m_device_resolution;
}
void OAIUALookupResponse::setDeviceResolution(const QString &device_resolution) {
    m_device_resolution = device_resolution;
    m_device_resolution_isSet = true;
}

bool OAIUALookupResponse::is_device_resolution_Set() const{
    return m_device_resolution_isSet;
}

bool OAIUALookupResponse::is_device_resolution_Valid() const{
    return m_device_resolution_isValid;
}

double OAIUALookupResponse::getDeviceWidthPx() const {
    return m_device_width_px;
}
void OAIUALookupResponse::setDeviceWidthPx(const double &device_width_px) {
    m_device_width_px = device_width_px;
    m_device_width_px_isSet = true;
}

bool OAIUALookupResponse::is_device_width_px_Set() const{
    return m_device_width_px_isSet;
}

bool OAIUALookupResponse::is_device_width_px_Valid() const{
    return m_device_width_px_isValid;
}

bool OAIUALookupResponse::isIsMobile() const {
    return m_is_mobile;
}
void OAIUALookupResponse::setIsMobile(const bool &is_mobile) {
    m_is_mobile = is_mobile;
    m_is_mobile_isSet = true;
}

bool OAIUALookupResponse::is_is_mobile_Set() const{
    return m_is_mobile_isSet;
}

bool OAIUALookupResponse::is_is_mobile_Valid() const{
    return m_is_mobile_isValid;
}

bool OAIUALookupResponse::isIsWebview() const {
    return m_is_webview;
}
void OAIUALookupResponse::setIsWebview(const bool &is_webview) {
    m_is_webview = is_webview;
    m_is_webview_isSet = true;
}

bool OAIUALookupResponse::is_is_webview_Set() const{
    return m_is_webview_isSet;
}

bool OAIUALookupResponse::is_is_webview_Valid() const{
    return m_is_webview_isValid;
}

QString OAIUALookupResponse::getName() const {
    return m_name;
}
void OAIUALookupResponse::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIUALookupResponse::is_name_Set() const{
    return m_name_isSet;
}

bool OAIUALookupResponse::is_name_Valid() const{
    return m_name_isValid;
}

QString OAIUALookupResponse::getOs() const {
    return m_os;
}
void OAIUALookupResponse::setOs(const QString &os) {
    m_os = os;
    m_os_isSet = true;
}

bool OAIUALookupResponse::is_os_Set() const{
    return m_os_isSet;
}

bool OAIUALookupResponse::is_os_Valid() const{
    return m_os_isValid;
}

QString OAIUALookupResponse::getOsFamily() const {
    return m_os_family;
}
void OAIUALookupResponse::setOsFamily(const QString &os_family) {
    m_os_family = os_family;
    m_os_family_isSet = true;
}

bool OAIUALookupResponse::is_os_family_Set() const{
    return m_os_family_isSet;
}

bool OAIUALookupResponse::is_os_family_Valid() const{
    return m_os_family_isValid;
}

QString OAIUALookupResponse::getOsVersion() const {
    return m_os_version;
}
void OAIUALookupResponse::setOsVersion(const QString &os_version) {
    m_os_version = os_version;
    m_os_version_isSet = true;
}

bool OAIUALookupResponse::is_os_version_Set() const{
    return m_os_version_isSet;
}

bool OAIUALookupResponse::is_os_version_Valid() const{
    return m_os_version_isValid;
}

QString OAIUALookupResponse::getOsVersionMajor() const {
    return m_os_version_major;
}
void OAIUALookupResponse::setOsVersionMajor(const QString &os_version_major) {
    m_os_version_major = os_version_major;
    m_os_version_major_isSet = true;
}

bool OAIUALookupResponse::is_os_version_major_Set() const{
    return m_os_version_major_isSet;
}

bool OAIUALookupResponse::is_os_version_major_Valid() const{
    return m_os_version_major_isValid;
}

QString OAIUALookupResponse::getType() const {
    return m_type;
}
void OAIUALookupResponse::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIUALookupResponse::is_type_Set() const{
    return m_type_isSet;
}

bool OAIUALookupResponse::is_type_Valid() const{
    return m_type_isValid;
}

QString OAIUALookupResponse::getUa() const {
    return m_ua;
}
void OAIUALookupResponse::setUa(const QString &ua) {
    m_ua = ua;
    m_ua_isSet = true;
}

bool OAIUALookupResponse::is_ua_Set() const{
    return m_ua_isSet;
}

bool OAIUALookupResponse::is_ua_Valid() const{
    return m_ua_isValid;
}

QString OAIUALookupResponse::getVersion() const {
    return m_version;
}
void OAIUALookupResponse::setVersion(const QString &version) {
    m_version = version;
    m_version_isSet = true;
}

bool OAIUALookupResponse::is_version_Set() const{
    return m_version_isSet;
}

bool OAIUALookupResponse::is_version_Valid() const{
    return m_version_isValid;
}

QString OAIUALookupResponse::getVersionMajor() const {
    return m_version_major;
}
void OAIUALookupResponse::setVersionMajor(const QString &version_major) {
    m_version_major = version_major;
    m_version_major_isSet = true;
}

bool OAIUALookupResponse::is_version_major_Set() const{
    return m_version_major_isSet;
}

bool OAIUALookupResponse::is_version_major_Valid() const{
    return m_version_major_isValid;
}

bool OAIUALookupResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_browser_engine_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_browser_release_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_device_brand_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_device_height_px_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_device_model_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_device_model_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_device_pixel_ratio_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_device_ppi_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_device_price_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_device_release_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_device_resolution_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_device_width_px_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_mobile_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_webview_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_os_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_os_family_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_os_version_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_os_version_major_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_ua_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_version_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_version_major_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIUALookupResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_browser_engine_isValid && m_browser_release_isValid && m_device_brand_isValid && m_device_height_px_isValid && m_device_model_isValid && m_device_model_code_isValid && m_device_pixel_ratio_isValid && m_device_ppi_isValid && m_device_price_isValid && m_device_release_isValid && m_device_resolution_isValid && m_device_width_px_isValid && m_is_mobile_isValid && m_is_webview_isValid && m_name_isValid && m_os_isValid && m_os_family_isValid && m_os_version_isValid && m_os_version_major_isValid && m_type_isValid && m_ua_isValid && m_version_isValid && m_version_major_isValid && true;
}

} // namespace OpenAPI
