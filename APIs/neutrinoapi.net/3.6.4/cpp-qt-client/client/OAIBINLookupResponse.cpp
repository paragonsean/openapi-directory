/**
 * Neutrino API
 * The general-purpose API
 *
 * The version of the OpenAPI document: 3.6.4
 * Contact: ops@neutrinoapi.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIBINLookupResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIBINLookupResponse::OAIBINLookupResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIBINLookupResponse::OAIBINLookupResponse() {
    this->initializeModel();
}

OAIBINLookupResponse::~OAIBINLookupResponse() {}

void OAIBINLookupResponse::initializeModel() {

    m_bin_number_isSet = false;
    m_bin_number_isValid = false;

    m_card_brand_isSet = false;
    m_card_brand_isValid = false;

    m_card_category_isSet = false;
    m_card_category_isValid = false;

    m_card_type_isSet = false;
    m_card_type_isValid = false;

    m_country_isSet = false;
    m_country_isValid = false;

    m_country_code_isSet = false;
    m_country_code_isValid = false;

    m_country_code3_isSet = false;
    m_country_code3_isValid = false;

    m_currency_code_isSet = false;
    m_currency_code_isValid = false;

    m_ip_blocklisted_isSet = false;
    m_ip_blocklisted_isValid = false;

    m_ip_blocklists_isSet = false;
    m_ip_blocklists_isValid = false;

    m_ip_city_isSet = false;
    m_ip_city_isValid = false;

    m_ip_country_isSet = false;
    m_ip_country_isValid = false;

    m_ip_country_code_isSet = false;
    m_ip_country_code_isValid = false;

    m_ip_country_code3_isSet = false;
    m_ip_country_code3_isValid = false;

    m_ip_matches_bin_isSet = false;
    m_ip_matches_bin_isValid = false;

    m_ip_region_isSet = false;
    m_ip_region_isValid = false;

    m_is_commercial_isSet = false;
    m_is_commercial_isValid = false;

    m_is_prepaid_isSet = false;
    m_is_prepaid_isValid = false;

    m_issuer_isSet = false;
    m_issuer_isValid = false;

    m_issuer_phone_isSet = false;
    m_issuer_phone_isValid = false;

    m_issuer_website_isSet = false;
    m_issuer_website_isValid = false;

    m_r_valid_isSet = false;
    m_r_valid_isValid = false;
}

void OAIBINLookupResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIBINLookupResponse::fromJsonObject(QJsonObject json) {

    m_bin_number_isValid = ::OpenAPI::fromJsonValue(m_bin_number, json[QString("bin-number")]);
    m_bin_number_isSet = !json[QString("bin-number")].isNull() && m_bin_number_isValid;

    m_card_brand_isValid = ::OpenAPI::fromJsonValue(m_card_brand, json[QString("card-brand")]);
    m_card_brand_isSet = !json[QString("card-brand")].isNull() && m_card_brand_isValid;

    m_card_category_isValid = ::OpenAPI::fromJsonValue(m_card_category, json[QString("card-category")]);
    m_card_category_isSet = !json[QString("card-category")].isNull() && m_card_category_isValid;

    m_card_type_isValid = ::OpenAPI::fromJsonValue(m_card_type, json[QString("card-type")]);
    m_card_type_isSet = !json[QString("card-type")].isNull() && m_card_type_isValid;

    m_country_isValid = ::OpenAPI::fromJsonValue(m_country, json[QString("country")]);
    m_country_isSet = !json[QString("country")].isNull() && m_country_isValid;

    m_country_code_isValid = ::OpenAPI::fromJsonValue(m_country_code, json[QString("country-code")]);
    m_country_code_isSet = !json[QString("country-code")].isNull() && m_country_code_isValid;

    m_country_code3_isValid = ::OpenAPI::fromJsonValue(m_country_code3, json[QString("country-code3")]);
    m_country_code3_isSet = !json[QString("country-code3")].isNull() && m_country_code3_isValid;

    m_currency_code_isValid = ::OpenAPI::fromJsonValue(m_currency_code, json[QString("currency-code")]);
    m_currency_code_isSet = !json[QString("currency-code")].isNull() && m_currency_code_isValid;

    m_ip_blocklisted_isValid = ::OpenAPI::fromJsonValue(m_ip_blocklisted, json[QString("ip-blocklisted")]);
    m_ip_blocklisted_isSet = !json[QString("ip-blocklisted")].isNull() && m_ip_blocklisted_isValid;

    m_ip_blocklists_isValid = ::OpenAPI::fromJsonValue(m_ip_blocklists, json[QString("ip-blocklists")]);
    m_ip_blocklists_isSet = !json[QString("ip-blocklists")].isNull() && m_ip_blocklists_isValid;

    m_ip_city_isValid = ::OpenAPI::fromJsonValue(m_ip_city, json[QString("ip-city")]);
    m_ip_city_isSet = !json[QString("ip-city")].isNull() && m_ip_city_isValid;

    m_ip_country_isValid = ::OpenAPI::fromJsonValue(m_ip_country, json[QString("ip-country")]);
    m_ip_country_isSet = !json[QString("ip-country")].isNull() && m_ip_country_isValid;

    m_ip_country_code_isValid = ::OpenAPI::fromJsonValue(m_ip_country_code, json[QString("ip-country-code")]);
    m_ip_country_code_isSet = !json[QString("ip-country-code")].isNull() && m_ip_country_code_isValid;

    m_ip_country_code3_isValid = ::OpenAPI::fromJsonValue(m_ip_country_code3, json[QString("ip-country-code3")]);
    m_ip_country_code3_isSet = !json[QString("ip-country-code3")].isNull() && m_ip_country_code3_isValid;

    m_ip_matches_bin_isValid = ::OpenAPI::fromJsonValue(m_ip_matches_bin, json[QString("ip-matches-bin")]);
    m_ip_matches_bin_isSet = !json[QString("ip-matches-bin")].isNull() && m_ip_matches_bin_isValid;

    m_ip_region_isValid = ::OpenAPI::fromJsonValue(m_ip_region, json[QString("ip-region")]);
    m_ip_region_isSet = !json[QString("ip-region")].isNull() && m_ip_region_isValid;

    m_is_commercial_isValid = ::OpenAPI::fromJsonValue(m_is_commercial, json[QString("is-commercial")]);
    m_is_commercial_isSet = !json[QString("is-commercial")].isNull() && m_is_commercial_isValid;

    m_is_prepaid_isValid = ::OpenAPI::fromJsonValue(m_is_prepaid, json[QString("is-prepaid")]);
    m_is_prepaid_isSet = !json[QString("is-prepaid")].isNull() && m_is_prepaid_isValid;

    m_issuer_isValid = ::OpenAPI::fromJsonValue(m_issuer, json[QString("issuer")]);
    m_issuer_isSet = !json[QString("issuer")].isNull() && m_issuer_isValid;

    m_issuer_phone_isValid = ::OpenAPI::fromJsonValue(m_issuer_phone, json[QString("issuer-phone")]);
    m_issuer_phone_isSet = !json[QString("issuer-phone")].isNull() && m_issuer_phone_isValid;

    m_issuer_website_isValid = ::OpenAPI::fromJsonValue(m_issuer_website, json[QString("issuer-website")]);
    m_issuer_website_isSet = !json[QString("issuer-website")].isNull() && m_issuer_website_isValid;

    m_r_valid_isValid = ::OpenAPI::fromJsonValue(m_r_valid, json[QString("valid")]);
    m_r_valid_isSet = !json[QString("valid")].isNull() && m_r_valid_isValid;
}

QString OAIBINLookupResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIBINLookupResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_bin_number_isSet) {
        obj.insert(QString("bin-number"), ::OpenAPI::toJsonValue(m_bin_number));
    }
    if (m_card_brand_isSet) {
        obj.insert(QString("card-brand"), ::OpenAPI::toJsonValue(m_card_brand));
    }
    if (m_card_category_isSet) {
        obj.insert(QString("card-category"), ::OpenAPI::toJsonValue(m_card_category));
    }
    if (m_card_type_isSet) {
        obj.insert(QString("card-type"), ::OpenAPI::toJsonValue(m_card_type));
    }
    if (m_country_isSet) {
        obj.insert(QString("country"), ::OpenAPI::toJsonValue(m_country));
    }
    if (m_country_code_isSet) {
        obj.insert(QString("country-code"), ::OpenAPI::toJsonValue(m_country_code));
    }
    if (m_country_code3_isSet) {
        obj.insert(QString("country-code3"), ::OpenAPI::toJsonValue(m_country_code3));
    }
    if (m_currency_code_isSet) {
        obj.insert(QString("currency-code"), ::OpenAPI::toJsonValue(m_currency_code));
    }
    if (m_ip_blocklisted_isSet) {
        obj.insert(QString("ip-blocklisted"), ::OpenAPI::toJsonValue(m_ip_blocklisted));
    }
    if (m_ip_blocklists.size() > 0) {
        obj.insert(QString("ip-blocklists"), ::OpenAPI::toJsonValue(m_ip_blocklists));
    }
    if (m_ip_city_isSet) {
        obj.insert(QString("ip-city"), ::OpenAPI::toJsonValue(m_ip_city));
    }
    if (m_ip_country_isSet) {
        obj.insert(QString("ip-country"), ::OpenAPI::toJsonValue(m_ip_country));
    }
    if (m_ip_country_code_isSet) {
        obj.insert(QString("ip-country-code"), ::OpenAPI::toJsonValue(m_ip_country_code));
    }
    if (m_ip_country_code3_isSet) {
        obj.insert(QString("ip-country-code3"), ::OpenAPI::toJsonValue(m_ip_country_code3));
    }
    if (m_ip_matches_bin_isSet) {
        obj.insert(QString("ip-matches-bin"), ::OpenAPI::toJsonValue(m_ip_matches_bin));
    }
    if (m_ip_region_isSet) {
        obj.insert(QString("ip-region"), ::OpenAPI::toJsonValue(m_ip_region));
    }
    if (m_is_commercial_isSet) {
        obj.insert(QString("is-commercial"), ::OpenAPI::toJsonValue(m_is_commercial));
    }
    if (m_is_prepaid_isSet) {
        obj.insert(QString("is-prepaid"), ::OpenAPI::toJsonValue(m_is_prepaid));
    }
    if (m_issuer_isSet) {
        obj.insert(QString("issuer"), ::OpenAPI::toJsonValue(m_issuer));
    }
    if (m_issuer_phone_isSet) {
        obj.insert(QString("issuer-phone"), ::OpenAPI::toJsonValue(m_issuer_phone));
    }
    if (m_issuer_website_isSet) {
        obj.insert(QString("issuer-website"), ::OpenAPI::toJsonValue(m_issuer_website));
    }
    if (m_r_valid_isSet) {
        obj.insert(QString("valid"), ::OpenAPI::toJsonValue(m_r_valid));
    }
    return obj;
}

QString OAIBINLookupResponse::getBinNumber() const {
    return m_bin_number;
}
void OAIBINLookupResponse::setBinNumber(const QString &bin_number) {
    m_bin_number = bin_number;
    m_bin_number_isSet = true;
}

bool OAIBINLookupResponse::is_bin_number_Set() const{
    return m_bin_number_isSet;
}

bool OAIBINLookupResponse::is_bin_number_Valid() const{
    return m_bin_number_isValid;
}

QString OAIBINLookupResponse::getCardBrand() const {
    return m_card_brand;
}
void OAIBINLookupResponse::setCardBrand(const QString &card_brand) {
    m_card_brand = card_brand;
    m_card_brand_isSet = true;
}

bool OAIBINLookupResponse::is_card_brand_Set() const{
    return m_card_brand_isSet;
}

bool OAIBINLookupResponse::is_card_brand_Valid() const{
    return m_card_brand_isValid;
}

QString OAIBINLookupResponse::getCardCategory() const {
    return m_card_category;
}
void OAIBINLookupResponse::setCardCategory(const QString &card_category) {
    m_card_category = card_category;
    m_card_category_isSet = true;
}

bool OAIBINLookupResponse::is_card_category_Set() const{
    return m_card_category_isSet;
}

bool OAIBINLookupResponse::is_card_category_Valid() const{
    return m_card_category_isValid;
}

QString OAIBINLookupResponse::getCardType() const {
    return m_card_type;
}
void OAIBINLookupResponse::setCardType(const QString &card_type) {
    m_card_type = card_type;
    m_card_type_isSet = true;
}

bool OAIBINLookupResponse::is_card_type_Set() const{
    return m_card_type_isSet;
}

bool OAIBINLookupResponse::is_card_type_Valid() const{
    return m_card_type_isValid;
}

QString OAIBINLookupResponse::getCountry() const {
    return m_country;
}
void OAIBINLookupResponse::setCountry(const QString &country) {
    m_country = country;
    m_country_isSet = true;
}

bool OAIBINLookupResponse::is_country_Set() const{
    return m_country_isSet;
}

bool OAIBINLookupResponse::is_country_Valid() const{
    return m_country_isValid;
}

QString OAIBINLookupResponse::getCountryCode() const {
    return m_country_code;
}
void OAIBINLookupResponse::setCountryCode(const QString &country_code) {
    m_country_code = country_code;
    m_country_code_isSet = true;
}

bool OAIBINLookupResponse::is_country_code_Set() const{
    return m_country_code_isSet;
}

bool OAIBINLookupResponse::is_country_code_Valid() const{
    return m_country_code_isValid;
}

QString OAIBINLookupResponse::getCountryCode3() const {
    return m_country_code3;
}
void OAIBINLookupResponse::setCountryCode3(const QString &country_code3) {
    m_country_code3 = country_code3;
    m_country_code3_isSet = true;
}

bool OAIBINLookupResponse::is_country_code3_Set() const{
    return m_country_code3_isSet;
}

bool OAIBINLookupResponse::is_country_code3_Valid() const{
    return m_country_code3_isValid;
}

QString OAIBINLookupResponse::getCurrencyCode() const {
    return m_currency_code;
}
void OAIBINLookupResponse::setCurrencyCode(const QString &currency_code) {
    m_currency_code = currency_code;
    m_currency_code_isSet = true;
}

bool OAIBINLookupResponse::is_currency_code_Set() const{
    return m_currency_code_isSet;
}

bool OAIBINLookupResponse::is_currency_code_Valid() const{
    return m_currency_code_isValid;
}

bool OAIBINLookupResponse::isIpBlocklisted() const {
    return m_ip_blocklisted;
}
void OAIBINLookupResponse::setIpBlocklisted(const bool &ip_blocklisted) {
    m_ip_blocklisted = ip_blocklisted;
    m_ip_blocklisted_isSet = true;
}

bool OAIBINLookupResponse::is_ip_blocklisted_Set() const{
    return m_ip_blocklisted_isSet;
}

bool OAIBINLookupResponse::is_ip_blocklisted_Valid() const{
    return m_ip_blocklisted_isValid;
}

QList<QString> OAIBINLookupResponse::getIpBlocklists() const {
    return m_ip_blocklists;
}
void OAIBINLookupResponse::setIpBlocklists(const QList<QString> &ip_blocklists) {
    m_ip_blocklists = ip_blocklists;
    m_ip_blocklists_isSet = true;
}

bool OAIBINLookupResponse::is_ip_blocklists_Set() const{
    return m_ip_blocklists_isSet;
}

bool OAIBINLookupResponse::is_ip_blocklists_Valid() const{
    return m_ip_blocklists_isValid;
}

QString OAIBINLookupResponse::getIpCity() const {
    return m_ip_city;
}
void OAIBINLookupResponse::setIpCity(const QString &ip_city) {
    m_ip_city = ip_city;
    m_ip_city_isSet = true;
}

bool OAIBINLookupResponse::is_ip_city_Set() const{
    return m_ip_city_isSet;
}

bool OAIBINLookupResponse::is_ip_city_Valid() const{
    return m_ip_city_isValid;
}

QString OAIBINLookupResponse::getIpCountry() const {
    return m_ip_country;
}
void OAIBINLookupResponse::setIpCountry(const QString &ip_country) {
    m_ip_country = ip_country;
    m_ip_country_isSet = true;
}

bool OAIBINLookupResponse::is_ip_country_Set() const{
    return m_ip_country_isSet;
}

bool OAIBINLookupResponse::is_ip_country_Valid() const{
    return m_ip_country_isValid;
}

QString OAIBINLookupResponse::getIpCountryCode() const {
    return m_ip_country_code;
}
void OAIBINLookupResponse::setIpCountryCode(const QString &ip_country_code) {
    m_ip_country_code = ip_country_code;
    m_ip_country_code_isSet = true;
}

bool OAIBINLookupResponse::is_ip_country_code_Set() const{
    return m_ip_country_code_isSet;
}

bool OAIBINLookupResponse::is_ip_country_code_Valid() const{
    return m_ip_country_code_isValid;
}

QString OAIBINLookupResponse::getIpCountryCode3() const {
    return m_ip_country_code3;
}
void OAIBINLookupResponse::setIpCountryCode3(const QString &ip_country_code3) {
    m_ip_country_code3 = ip_country_code3;
    m_ip_country_code3_isSet = true;
}

bool OAIBINLookupResponse::is_ip_country_code3_Set() const{
    return m_ip_country_code3_isSet;
}

bool OAIBINLookupResponse::is_ip_country_code3_Valid() const{
    return m_ip_country_code3_isValid;
}

bool OAIBINLookupResponse::isIpMatchesBin() const {
    return m_ip_matches_bin;
}
void OAIBINLookupResponse::setIpMatchesBin(const bool &ip_matches_bin) {
    m_ip_matches_bin = ip_matches_bin;
    m_ip_matches_bin_isSet = true;
}

bool OAIBINLookupResponse::is_ip_matches_bin_Set() const{
    return m_ip_matches_bin_isSet;
}

bool OAIBINLookupResponse::is_ip_matches_bin_Valid() const{
    return m_ip_matches_bin_isValid;
}

QString OAIBINLookupResponse::getIpRegion() const {
    return m_ip_region;
}
void OAIBINLookupResponse::setIpRegion(const QString &ip_region) {
    m_ip_region = ip_region;
    m_ip_region_isSet = true;
}

bool OAIBINLookupResponse::is_ip_region_Set() const{
    return m_ip_region_isSet;
}

bool OAIBINLookupResponse::is_ip_region_Valid() const{
    return m_ip_region_isValid;
}

bool OAIBINLookupResponse::isIsCommercial() const {
    return m_is_commercial;
}
void OAIBINLookupResponse::setIsCommercial(const bool &is_commercial) {
    m_is_commercial = is_commercial;
    m_is_commercial_isSet = true;
}

bool OAIBINLookupResponse::is_is_commercial_Set() const{
    return m_is_commercial_isSet;
}

bool OAIBINLookupResponse::is_is_commercial_Valid() const{
    return m_is_commercial_isValid;
}

bool OAIBINLookupResponse::isIsPrepaid() const {
    return m_is_prepaid;
}
void OAIBINLookupResponse::setIsPrepaid(const bool &is_prepaid) {
    m_is_prepaid = is_prepaid;
    m_is_prepaid_isSet = true;
}

bool OAIBINLookupResponse::is_is_prepaid_Set() const{
    return m_is_prepaid_isSet;
}

bool OAIBINLookupResponse::is_is_prepaid_Valid() const{
    return m_is_prepaid_isValid;
}

QString OAIBINLookupResponse::getIssuer() const {
    return m_issuer;
}
void OAIBINLookupResponse::setIssuer(const QString &issuer) {
    m_issuer = issuer;
    m_issuer_isSet = true;
}

bool OAIBINLookupResponse::is_issuer_Set() const{
    return m_issuer_isSet;
}

bool OAIBINLookupResponse::is_issuer_Valid() const{
    return m_issuer_isValid;
}

QString OAIBINLookupResponse::getIssuerPhone() const {
    return m_issuer_phone;
}
void OAIBINLookupResponse::setIssuerPhone(const QString &issuer_phone) {
    m_issuer_phone = issuer_phone;
    m_issuer_phone_isSet = true;
}

bool OAIBINLookupResponse::is_issuer_phone_Set() const{
    return m_issuer_phone_isSet;
}

bool OAIBINLookupResponse::is_issuer_phone_Valid() const{
    return m_issuer_phone_isValid;
}

QString OAIBINLookupResponse::getIssuerWebsite() const {
    return m_issuer_website;
}
void OAIBINLookupResponse::setIssuerWebsite(const QString &issuer_website) {
    m_issuer_website = issuer_website;
    m_issuer_website_isSet = true;
}

bool OAIBINLookupResponse::is_issuer_website_Set() const{
    return m_issuer_website_isSet;
}

bool OAIBINLookupResponse::is_issuer_website_Valid() const{
    return m_issuer_website_isValid;
}

bool OAIBINLookupResponse::isRValid() const {
    return m_r_valid;
}
void OAIBINLookupResponse::setRValid(const bool &r_valid) {
    m_r_valid = r_valid;
    m_r_valid_isSet = true;
}

bool OAIBINLookupResponse::is_r_valid_Set() const{
    return m_r_valid_isSet;
}

bool OAIBINLookupResponse::is_r_valid_Valid() const{
    return m_r_valid_isValid;
}

bool OAIBINLookupResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_bin_number_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_card_brand_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_card_category_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_card_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_country_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_country_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_country_code3_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_currency_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_ip_blocklisted_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_ip_blocklists.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_ip_city_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_ip_country_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_ip_country_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_ip_country_code3_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_ip_matches_bin_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_ip_region_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_commercial_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_prepaid_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_issuer_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_issuer_phone_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_issuer_website_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_r_valid_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIBINLookupResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_bin_number_isValid && m_card_brand_isValid && m_card_category_isValid && m_card_type_isValid && m_country_isValid && m_country_code_isValid && m_country_code3_isValid && m_currency_code_isValid && m_ip_blocklisted_isValid && m_ip_blocklists_isValid && m_ip_city_isValid && m_ip_country_isValid && m_ip_country_code_isValid && m_ip_country_code3_isValid && m_ip_matches_bin_isValid && m_ip_region_isValid && m_is_commercial_isValid && m_is_prepaid_isValid && m_issuer_isValid && m_issuer_phone_isValid && m_issuer_website_isValid && m_r_valid_isValid && true;
}

} // namespace OpenAPI
