/*
 * Neutrino API
 * The general-purpose API
 *
 * The version of the OpenAPI document: 3.6.4
 * Contact: ops@neutrinoapi.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.APIError;
import org.openapitools.client.model.HLRLookupResponse;
import org.openapitools.client.model.PhonePlaybackResponse;
import org.openapitools.client.model.PhoneVerifyResponse;
import org.openapitools.client.model.SMSVerifyResponse;
import org.openapitools.client.model.VerifySecurityCodeResponse;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for TelephonyApi
 */
@Disabled
public class TelephonyApiTest {

    private final TelephonyApi api = new TelephonyApi();

    /**
     * HLR Lookup
     *
     * Connect to the global mobile cellular network and retrieve the status of a mobile device
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void hLRLookupTest() throws ApiException {
        String number = null;
        String countryCode = null;
        HLRLookupResponse response = api.hLRLookup(number, countryCode);
        // TODO: test validations
    }

    /**
     * Phone Playback
     *
     * Make an automated call to any valid phone number and playback an audio message
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void phonePlaybackTest() throws ApiException {
        String audioUrl = null;
        String number = null;
        Integer limit = null;
        Integer limitTtl = null;
        PhonePlaybackResponse response = api.phonePlayback(audioUrl, number, limit, limitTtl);
        // TODO: test validations
    }

    /**
     * Phone Verify
     *
     * Make an automated call to any valid phone number and playback a unique security code
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void phoneVerifyTest() throws ApiException {
        String number = null;
        Integer codeLength = null;
        String countryCode = null;
        String languageCode = null;
        Integer limit = null;
        Integer limitTtl = null;
        Integer playbackDelay = null;
        Integer securityCode = null;
        PhoneVerifyResponse response = api.phoneVerify(number, codeLength, countryCode, languageCode, limit, limitTtl, playbackDelay, securityCode);
        // TODO: test validations
    }

    /**
     * SMS Verify
     *
     * Send a unique security code to any mobile device via SMS
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void sMSVerifyTest() throws ApiException {
        String number = null;
        Integer codeLength = null;
        String countryCode = null;
        String languageCode = null;
        Integer limit = null;
        Integer limitTtl = null;
        Integer securityCode = null;
        SMSVerifyResponse response = api.sMSVerify(number, codeLength, countryCode, languageCode, limit, limitTtl, securityCode);
        // TODO: test validations
    }

    /**
     * Verify Security Code
     *
     * Check if a security code sent via SMS Verify or Phone Verify is valid
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void verifySecurityCodeTest() throws ApiException {
        String securityCode = null;
        String limitBy = null;
        VerifySecurityCodeResponse response = api.verifySecurityCode(securityCode, limitBy);
        // TODO: test validations
    }

}
