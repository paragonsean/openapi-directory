/*
 * Neutrino API
 * The general-purpose API
 *
 * The version of the OpenAPI document: 3.6.4
 * Contact: ops@neutrinoapi.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * UALookupResponse
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:54:58.398611-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class UALookupResponse {
  public static final String SERIALIZED_NAME_BROWSER_ENGINE = "browser-engine";
  @SerializedName(SERIALIZED_NAME_BROWSER_ENGINE)
  private String browserEngine;

  public static final String SERIALIZED_NAME_BROWSER_RELEASE = "browser-release";
  @SerializedName(SERIALIZED_NAME_BROWSER_RELEASE)
  private String browserRelease;

  public static final String SERIALIZED_NAME_DEVICE_BRAND = "device-brand";
  @SerializedName(SERIALIZED_NAME_DEVICE_BRAND)
  private String deviceBrand;

  public static final String SERIALIZED_NAME_DEVICE_HEIGHT_PX = "device-height-px";
  @SerializedName(SERIALIZED_NAME_DEVICE_HEIGHT_PX)
  private Double deviceHeightPx;

  public static final String SERIALIZED_NAME_DEVICE_MODEL = "device-model";
  @SerializedName(SERIALIZED_NAME_DEVICE_MODEL)
  private String deviceModel;

  public static final String SERIALIZED_NAME_DEVICE_MODEL_CODE = "device-model-code";
  @SerializedName(SERIALIZED_NAME_DEVICE_MODEL_CODE)
  private String deviceModelCode;

  public static final String SERIALIZED_NAME_DEVICE_PIXEL_RATIO = "device-pixel-ratio";
  @SerializedName(SERIALIZED_NAME_DEVICE_PIXEL_RATIO)
  private Double devicePixelRatio;

  public static final String SERIALIZED_NAME_DEVICE_PPI = "device-ppi";
  @SerializedName(SERIALIZED_NAME_DEVICE_PPI)
  private Double devicePpi;

  public static final String SERIALIZED_NAME_DEVICE_PRICE = "device-price";
  @SerializedName(SERIALIZED_NAME_DEVICE_PRICE)
  private Double devicePrice;

  public static final String SERIALIZED_NAME_DEVICE_RELEASE = "device-release";
  @SerializedName(SERIALIZED_NAME_DEVICE_RELEASE)
  private String deviceRelease;

  public static final String SERIALIZED_NAME_DEVICE_RESOLUTION = "device-resolution";
  @SerializedName(SERIALIZED_NAME_DEVICE_RESOLUTION)
  private String deviceResolution;

  public static final String SERIALIZED_NAME_DEVICE_WIDTH_PX = "device-width-px";
  @SerializedName(SERIALIZED_NAME_DEVICE_WIDTH_PX)
  private Double deviceWidthPx;

  public static final String SERIALIZED_NAME_IS_MOBILE = "is-mobile";
  @SerializedName(SERIALIZED_NAME_IS_MOBILE)
  private Boolean isMobile;

  public static final String SERIALIZED_NAME_IS_WEBVIEW = "is-webview";
  @SerializedName(SERIALIZED_NAME_IS_WEBVIEW)
  private Boolean isWebview;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_OS = "os";
  @SerializedName(SERIALIZED_NAME_OS)
  private String os;

  public static final String SERIALIZED_NAME_OS_FAMILY = "os-family";
  @SerializedName(SERIALIZED_NAME_OS_FAMILY)
  private String osFamily;

  public static final String SERIALIZED_NAME_OS_VERSION = "os-version";
  @SerializedName(SERIALIZED_NAME_OS_VERSION)
  private String osVersion;

  public static final String SERIALIZED_NAME_OS_VERSION_MAJOR = "os-version-major";
  @SerializedName(SERIALIZED_NAME_OS_VERSION_MAJOR)
  private String osVersionMajor;

  public static final String SERIALIZED_NAME_TYPE = "type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  private String type;

  public static final String SERIALIZED_NAME_UA = "ua";
  @SerializedName(SERIALIZED_NAME_UA)
  private String ua;

  public static final String SERIALIZED_NAME_VERSION = "version";
  @SerializedName(SERIALIZED_NAME_VERSION)
  private String version;

  public static final String SERIALIZED_NAME_VERSION_MAJOR = "version-major";
  @SerializedName(SERIALIZED_NAME_VERSION_MAJOR)
  private String versionMajor;

  public UALookupResponse() {
  }

  public UALookupResponse browserEngine(String browserEngine) {
    this.browserEngine = browserEngine;
    return this;
  }

  /**
   * If the client is a web browser which underlying browser engine does it use
   * @return browserEngine
   */
  @javax.annotation.Nonnull
  public String getBrowserEngine() {
    return browserEngine;
  }

  public void setBrowserEngine(String browserEngine) {
    this.browserEngine = browserEngine;
  }


  public UALookupResponse browserRelease(String browserRelease) {
    this.browserRelease = browserRelease;
    return this;
  }

  /**
   * If the client is a web browser which year was this browser version released
   * @return browserRelease
   */
  @javax.annotation.Nonnull
  public String getBrowserRelease() {
    return browserRelease;
  }

  public void setBrowserRelease(String browserRelease) {
    this.browserRelease = browserRelease;
  }


  public UALookupResponse deviceBrand(String deviceBrand) {
    this.deviceBrand = deviceBrand;
    return this;
  }

  /**
   * The device brand / manufacturer
   * @return deviceBrand
   */
  @javax.annotation.Nonnull
  public String getDeviceBrand() {
    return deviceBrand;
  }

  public void setDeviceBrand(String deviceBrand) {
    this.deviceBrand = deviceBrand;
  }


  public UALookupResponse deviceHeightPx(Double deviceHeightPx) {
    this.deviceHeightPx = deviceHeightPx;
    return this;
  }

  /**
   * The device display height in CSS &#39;px&#39;
   * @return deviceHeightPx
   */
  @javax.annotation.Nonnull
  public Double getDeviceHeightPx() {
    return deviceHeightPx;
  }

  public void setDeviceHeightPx(Double deviceHeightPx) {
    this.deviceHeightPx = deviceHeightPx;
  }


  public UALookupResponse deviceModel(String deviceModel) {
    this.deviceModel = deviceModel;
    return this;
  }

  /**
   * The device model
   * @return deviceModel
   */
  @javax.annotation.Nonnull
  public String getDeviceModel() {
    return deviceModel;
  }

  public void setDeviceModel(String deviceModel) {
    this.deviceModel = deviceModel;
  }


  public UALookupResponse deviceModelCode(String deviceModelCode) {
    this.deviceModelCode = deviceModelCode;
    return this;
  }

  /**
   * The device model code
   * @return deviceModelCode
   */
  @javax.annotation.Nonnull
  public String getDeviceModelCode() {
    return deviceModelCode;
  }

  public void setDeviceModelCode(String deviceModelCode) {
    this.deviceModelCode = deviceModelCode;
  }


  public UALookupResponse devicePixelRatio(Double devicePixelRatio) {
    this.devicePixelRatio = devicePixelRatio;
    return this;
  }

  /**
   * The device display pixel ratio (the ratio of the resolution in physical pixels to the resolution in CSS pixels)
   * @return devicePixelRatio
   */
  @javax.annotation.Nonnull
  public Double getDevicePixelRatio() {
    return devicePixelRatio;
  }

  public void setDevicePixelRatio(Double devicePixelRatio) {
    this.devicePixelRatio = devicePixelRatio;
  }


  public UALookupResponse devicePpi(Double devicePpi) {
    this.devicePpi = devicePpi;
    return this;
  }

  /**
   * The device display PPI (pixels per inch)
   * @return devicePpi
   */
  @javax.annotation.Nonnull
  public Double getDevicePpi() {
    return devicePpi;
  }

  public void setDevicePpi(Double devicePpi) {
    this.devicePpi = devicePpi;
  }


  public UALookupResponse devicePrice(Double devicePrice) {
    this.devicePrice = devicePrice;
    return this;
  }

  /**
   * The average device price on release in USD
   * @return devicePrice
   */
  @javax.annotation.Nonnull
  public Double getDevicePrice() {
    return devicePrice;
  }

  public void setDevicePrice(Double devicePrice) {
    this.devicePrice = devicePrice;
  }


  public UALookupResponse deviceRelease(String deviceRelease) {
    this.deviceRelease = deviceRelease;
    return this;
  }

  /**
   * The year when this device model was released
   * @return deviceRelease
   */
  @javax.annotation.Nonnull
  public String getDeviceRelease() {
    return deviceRelease;
  }

  public void setDeviceRelease(String deviceRelease) {
    this.deviceRelease = deviceRelease;
  }


  public UALookupResponse deviceResolution(String deviceResolution) {
    this.deviceResolution = deviceResolution;
    return this;
  }

  /**
   * The device display resolution in physical pixels (e.g. 720x1280)
   * @return deviceResolution
   */
  @javax.annotation.Nonnull
  public String getDeviceResolution() {
    return deviceResolution;
  }

  public void setDeviceResolution(String deviceResolution) {
    this.deviceResolution = deviceResolution;
  }


  public UALookupResponse deviceWidthPx(Double deviceWidthPx) {
    this.deviceWidthPx = deviceWidthPx;
    return this;
  }

  /**
   * The device display width in CSS &#39;px&#39;
   * @return deviceWidthPx
   */
  @javax.annotation.Nonnull
  public Double getDeviceWidthPx() {
    return deviceWidthPx;
  }

  public void setDeviceWidthPx(Double deviceWidthPx) {
    this.deviceWidthPx = deviceWidthPx;
  }


  public UALookupResponse isMobile(Boolean isMobile) {
    this.isMobile = isMobile;
    return this;
  }

  /**
   * Is this a mobile device (e.g. a phone or tablet)
   * @return isMobile
   */
  @javax.annotation.Nonnull
  public Boolean getIsMobile() {
    return isMobile;
  }

  public void setIsMobile(Boolean isMobile) {
    this.isMobile = isMobile;
  }


  public UALookupResponse isWebview(Boolean isWebview) {
    this.isWebview = isWebview;
    return this;
  }

  /**
   * Is this a WebView / embedded software client
   * @return isWebview
   */
  @javax.annotation.Nonnull
  public Boolean getIsWebview() {
    return isWebview;
  }

  public void setIsWebview(Boolean isWebview) {
    this.isWebview = isWebview;
  }


  public UALookupResponse name(String name) {
    this.name = name;
    return this;
  }

  /**
   * The client software name
   * @return name
   */
  @javax.annotation.Nonnull
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public UALookupResponse os(String os) {
    this.os = os;
    return this;
  }

  /**
   * The full operating system name
   * @return os
   */
  @javax.annotation.Nonnull
  public String getOs() {
    return os;
  }

  public void setOs(String os) {
    this.os = os;
  }


  public UALookupResponse osFamily(String osFamily) {
    this.osFamily = osFamily;
    return this;
  }

  /**
   * The operating system family. The major OS families are: Android, Windows, macOS, iOS, Linux
   * @return osFamily
   */
  @javax.annotation.Nonnull
  public String getOsFamily() {
    return osFamily;
  }

  public void setOsFamily(String osFamily) {
    this.osFamily = osFamily;
  }


  public UALookupResponse osVersion(String osVersion) {
    this.osVersion = osVersion;
    return this;
  }

  /**
   * The operating system full version
   * @return osVersion
   */
  @javax.annotation.Nonnull
  public String getOsVersion() {
    return osVersion;
  }

  public void setOsVersion(String osVersion) {
    this.osVersion = osVersion;
  }


  public UALookupResponse osVersionMajor(String osVersionMajor) {
    this.osVersionMajor = osVersionMajor;
    return this;
  }

  /**
   * The operating system major version
   * @return osVersionMajor
   */
  @javax.annotation.Nonnull
  public String getOsVersionMajor() {
    return osVersionMajor;
  }

  public void setOsVersionMajor(String osVersionMajor) {
    this.osVersionMajor = osVersionMajor;
  }


  public UALookupResponse type(String type) {
    this.type = type;
    return this;
  }

  /**
   * The user agent type, possible values are: &lt;br&gt; &lt;ul&gt; &lt;li&gt;desktop&lt;/li&gt; &lt;li&gt;phone&lt;/li&gt; &lt;li&gt;tablet&lt;/li&gt; &lt;li&gt;wearable&lt;/li&gt; &lt;li&gt;tv&lt;/li&gt; &lt;li&gt;console&lt;/li&gt; &lt;li&gt;email&lt;/li&gt; &lt;li&gt;library&lt;/li&gt; &lt;li&gt;robot&lt;/li&gt; &lt;li&gt;unknown&lt;/li&gt; &lt;/ul&gt;
   * @return type
   */
  @javax.annotation.Nonnull
  public String getType() {
    return type;
  }

  public void setType(String type) {
    this.type = type;
  }


  public UALookupResponse ua(String ua) {
    this.ua = ua;
    return this;
  }

  /**
   * The user agent string
   * @return ua
   */
  @javax.annotation.Nonnull
  public String getUa() {
    return ua;
  }

  public void setUa(String ua) {
    this.ua = ua;
  }


  public UALookupResponse version(String version) {
    this.version = version;
    return this;
  }

  /**
   * The client software full version
   * @return version
   */
  @javax.annotation.Nonnull
  public String getVersion() {
    return version;
  }

  public void setVersion(String version) {
    this.version = version;
  }


  public UALookupResponse versionMajor(String versionMajor) {
    this.versionMajor = versionMajor;
    return this;
  }

  /**
   * The client software major version
   * @return versionMajor
   */
  @javax.annotation.Nonnull
  public String getVersionMajor() {
    return versionMajor;
  }

  public void setVersionMajor(String versionMajor) {
    this.versionMajor = versionMajor;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    UALookupResponse uaLookupResponse = (UALookupResponse) o;
    return Objects.equals(this.browserEngine, uaLookupResponse.browserEngine) &&
        Objects.equals(this.browserRelease, uaLookupResponse.browserRelease) &&
        Objects.equals(this.deviceBrand, uaLookupResponse.deviceBrand) &&
        Objects.equals(this.deviceHeightPx, uaLookupResponse.deviceHeightPx) &&
        Objects.equals(this.deviceModel, uaLookupResponse.deviceModel) &&
        Objects.equals(this.deviceModelCode, uaLookupResponse.deviceModelCode) &&
        Objects.equals(this.devicePixelRatio, uaLookupResponse.devicePixelRatio) &&
        Objects.equals(this.devicePpi, uaLookupResponse.devicePpi) &&
        Objects.equals(this.devicePrice, uaLookupResponse.devicePrice) &&
        Objects.equals(this.deviceRelease, uaLookupResponse.deviceRelease) &&
        Objects.equals(this.deviceResolution, uaLookupResponse.deviceResolution) &&
        Objects.equals(this.deviceWidthPx, uaLookupResponse.deviceWidthPx) &&
        Objects.equals(this.isMobile, uaLookupResponse.isMobile) &&
        Objects.equals(this.isWebview, uaLookupResponse.isWebview) &&
        Objects.equals(this.name, uaLookupResponse.name) &&
        Objects.equals(this.os, uaLookupResponse.os) &&
        Objects.equals(this.osFamily, uaLookupResponse.osFamily) &&
        Objects.equals(this.osVersion, uaLookupResponse.osVersion) &&
        Objects.equals(this.osVersionMajor, uaLookupResponse.osVersionMajor) &&
        Objects.equals(this.type, uaLookupResponse.type) &&
        Objects.equals(this.ua, uaLookupResponse.ua) &&
        Objects.equals(this.version, uaLookupResponse.version) &&
        Objects.equals(this.versionMajor, uaLookupResponse.versionMajor);
  }

  @Override
  public int hashCode() {
    return Objects.hash(browserEngine, browserRelease, deviceBrand, deviceHeightPx, deviceModel, deviceModelCode, devicePixelRatio, devicePpi, devicePrice, deviceRelease, deviceResolution, deviceWidthPx, isMobile, isWebview, name, os, osFamily, osVersion, osVersionMajor, type, ua, version, versionMajor);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class UALookupResponse {\n");
    sb.append("    browserEngine: ").append(toIndentedString(browserEngine)).append("\n");
    sb.append("    browserRelease: ").append(toIndentedString(browserRelease)).append("\n");
    sb.append("    deviceBrand: ").append(toIndentedString(deviceBrand)).append("\n");
    sb.append("    deviceHeightPx: ").append(toIndentedString(deviceHeightPx)).append("\n");
    sb.append("    deviceModel: ").append(toIndentedString(deviceModel)).append("\n");
    sb.append("    deviceModelCode: ").append(toIndentedString(deviceModelCode)).append("\n");
    sb.append("    devicePixelRatio: ").append(toIndentedString(devicePixelRatio)).append("\n");
    sb.append("    devicePpi: ").append(toIndentedString(devicePpi)).append("\n");
    sb.append("    devicePrice: ").append(toIndentedString(devicePrice)).append("\n");
    sb.append("    deviceRelease: ").append(toIndentedString(deviceRelease)).append("\n");
    sb.append("    deviceResolution: ").append(toIndentedString(deviceResolution)).append("\n");
    sb.append("    deviceWidthPx: ").append(toIndentedString(deviceWidthPx)).append("\n");
    sb.append("    isMobile: ").append(toIndentedString(isMobile)).append("\n");
    sb.append("    isWebview: ").append(toIndentedString(isWebview)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    os: ").append(toIndentedString(os)).append("\n");
    sb.append("    osFamily: ").append(toIndentedString(osFamily)).append("\n");
    sb.append("    osVersion: ").append(toIndentedString(osVersion)).append("\n");
    sb.append("    osVersionMajor: ").append(toIndentedString(osVersionMajor)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    ua: ").append(toIndentedString(ua)).append("\n");
    sb.append("    version: ").append(toIndentedString(version)).append("\n");
    sb.append("    versionMajor: ").append(toIndentedString(versionMajor)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("browser-engine");
    openapiFields.add("browser-release");
    openapiFields.add("device-brand");
    openapiFields.add("device-height-px");
    openapiFields.add("device-model");
    openapiFields.add("device-model-code");
    openapiFields.add("device-pixel-ratio");
    openapiFields.add("device-ppi");
    openapiFields.add("device-price");
    openapiFields.add("device-release");
    openapiFields.add("device-resolution");
    openapiFields.add("device-width-px");
    openapiFields.add("is-mobile");
    openapiFields.add("is-webview");
    openapiFields.add("name");
    openapiFields.add("os");
    openapiFields.add("os-family");
    openapiFields.add("os-version");
    openapiFields.add("os-version-major");
    openapiFields.add("type");
    openapiFields.add("ua");
    openapiFields.add("version");
    openapiFields.add("version-major");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("browser-engine");
    openapiRequiredFields.add("browser-release");
    openapiRequiredFields.add("device-brand");
    openapiRequiredFields.add("device-height-px");
    openapiRequiredFields.add("device-model");
    openapiRequiredFields.add("device-model-code");
    openapiRequiredFields.add("device-pixel-ratio");
    openapiRequiredFields.add("device-ppi");
    openapiRequiredFields.add("device-price");
    openapiRequiredFields.add("device-release");
    openapiRequiredFields.add("device-resolution");
    openapiRequiredFields.add("device-width-px");
    openapiRequiredFields.add("is-mobile");
    openapiRequiredFields.add("is-webview");
    openapiRequiredFields.add("name");
    openapiRequiredFields.add("os");
    openapiRequiredFields.add("os-family");
    openapiRequiredFields.add("os-version");
    openapiRequiredFields.add("os-version-major");
    openapiRequiredFields.add("type");
    openapiRequiredFields.add("ua");
    openapiRequiredFields.add("version");
    openapiRequiredFields.add("version-major");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to UALookupResponse
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!UALookupResponse.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in UALookupResponse is not found in the empty JSON string", UALookupResponse.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!UALookupResponse.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `UALookupResponse` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : UALookupResponse.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("browser-engine").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `browser-engine` to be a primitive type in the JSON string but got `%s`", jsonObj.get("browser-engine").toString()));
      }
      if (!jsonObj.get("browser-release").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `browser-release` to be a primitive type in the JSON string but got `%s`", jsonObj.get("browser-release").toString()));
      }
      if (!jsonObj.get("device-brand").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `device-brand` to be a primitive type in the JSON string but got `%s`", jsonObj.get("device-brand").toString()));
      }
      if (!jsonObj.get("device-model").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `device-model` to be a primitive type in the JSON string but got `%s`", jsonObj.get("device-model").toString()));
      }
      if (!jsonObj.get("device-model-code").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `device-model-code` to be a primitive type in the JSON string but got `%s`", jsonObj.get("device-model-code").toString()));
      }
      if (!jsonObj.get("device-release").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `device-release` to be a primitive type in the JSON string but got `%s`", jsonObj.get("device-release").toString()));
      }
      if (!jsonObj.get("device-resolution").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `device-resolution` to be a primitive type in the JSON string but got `%s`", jsonObj.get("device-resolution").toString()));
      }
      if (!jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if (!jsonObj.get("os").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `os` to be a primitive type in the JSON string but got `%s`", jsonObj.get("os").toString()));
      }
      if (!jsonObj.get("os-family").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `os-family` to be a primitive type in the JSON string but got `%s`", jsonObj.get("os-family").toString()));
      }
      if (!jsonObj.get("os-version").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `os-version` to be a primitive type in the JSON string but got `%s`", jsonObj.get("os-version").toString()));
      }
      if (!jsonObj.get("os-version-major").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `os-version-major` to be a primitive type in the JSON string but got `%s`", jsonObj.get("os-version-major").toString()));
      }
      if (!jsonObj.get("type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("type").toString()));
      }
      if (!jsonObj.get("ua").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ua` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ua").toString()));
      }
      if (!jsonObj.get("version").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `version` to be a primitive type in the JSON string but got `%s`", jsonObj.get("version").toString()));
      }
      if (!jsonObj.get("version-major").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `version-major` to be a primitive type in the JSON string but got `%s`", jsonObj.get("version-major").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!UALookupResponse.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'UALookupResponse' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<UALookupResponse> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(UALookupResponse.class));

       return (TypeAdapter<T>) new TypeAdapter<UALookupResponse>() {
           @Override
           public void write(JsonWriter out, UALookupResponse value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public UALookupResponse read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of UALookupResponse given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of UALookupResponse
   * @throws IOException if the JSON string is invalid with respect to UALookupResponse
   */
  public static UALookupResponse fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, UALookupResponse.class);
  }

  /**
   * Convert an instance of UALookupResponse to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

