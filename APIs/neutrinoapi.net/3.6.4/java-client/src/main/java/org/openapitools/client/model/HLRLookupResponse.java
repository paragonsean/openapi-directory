/*
 * Neutrino API
 * The general-purpose API
 *
 * The version of the OpenAPI document: 3.6.4
 * Contact: ops@neutrinoapi.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * HLRLookupResponse
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:54:58.398611-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class HLRLookupResponse {
  public static final String SERIALIZED_NAME_COUNTRY = "country";
  @SerializedName(SERIALIZED_NAME_COUNTRY)
  private String country;

  public static final String SERIALIZED_NAME_COUNTRY_CODE = "country-code";
  @SerializedName(SERIALIZED_NAME_COUNTRY_CODE)
  private String countryCode;

  public static final String SERIALIZED_NAME_COUNTRY_CODE3 = "country-code3";
  @SerializedName(SERIALIZED_NAME_COUNTRY_CODE3)
  private String countryCode3;

  public static final String SERIALIZED_NAME_CURRENCY_CODE = "currency-code";
  @SerializedName(SERIALIZED_NAME_CURRENCY_CODE)
  private String currencyCode;

  public static final String SERIALIZED_NAME_CURRENT_NETWORK = "current-network";
  @SerializedName(SERIALIZED_NAME_CURRENT_NETWORK)
  private String currentNetwork;

  public static final String SERIALIZED_NAME_HLR_STATUS = "hlr-status";
  @SerializedName(SERIALIZED_NAME_HLR_STATUS)
  private String hlrStatus;

  public static final String SERIALIZED_NAME_HLR_VALID = "hlr-valid";
  @SerializedName(SERIALIZED_NAME_HLR_VALID)
  private Boolean hlrValid;

  public static final String SERIALIZED_NAME_IMSI = "imsi";
  @SerializedName(SERIALIZED_NAME_IMSI)
  private String imsi;

  public static final String SERIALIZED_NAME_INTERNATIONAL_CALLING_CODE = "international-calling-code";
  @SerializedName(SERIALIZED_NAME_INTERNATIONAL_CALLING_CODE)
  private String internationalCallingCode;

  public static final String SERIALIZED_NAME_INTERNATIONAL_NUMBER = "international-number";
  @SerializedName(SERIALIZED_NAME_INTERNATIONAL_NUMBER)
  private String internationalNumber;

  public static final String SERIALIZED_NAME_IS_MOBILE = "is-mobile";
  @SerializedName(SERIALIZED_NAME_IS_MOBILE)
  private Boolean isMobile;

  public static final String SERIALIZED_NAME_IS_PORTED = "is-ported";
  @SerializedName(SERIALIZED_NAME_IS_PORTED)
  private Boolean isPorted;

  public static final String SERIALIZED_NAME_IS_ROAMING = "is-roaming";
  @SerializedName(SERIALIZED_NAME_IS_ROAMING)
  private Boolean isRoaming;

  public static final String SERIALIZED_NAME_LOCAL_NUMBER = "local-number";
  @SerializedName(SERIALIZED_NAME_LOCAL_NUMBER)
  private String localNumber;

  public static final String SERIALIZED_NAME_LOCATION = "location";
  @SerializedName(SERIALIZED_NAME_LOCATION)
  private String location;

  public static final String SERIALIZED_NAME_MCC = "mcc";
  @SerializedName(SERIALIZED_NAME_MCC)
  private String mcc;

  public static final String SERIALIZED_NAME_MNC = "mnc";
  @SerializedName(SERIALIZED_NAME_MNC)
  private String mnc;

  public static final String SERIALIZED_NAME_MSC = "msc";
  @SerializedName(SERIALIZED_NAME_MSC)
  private String msc;

  public static final String SERIALIZED_NAME_MSIN = "msin";
  @SerializedName(SERIALIZED_NAME_MSIN)
  private String msin;

  public static final String SERIALIZED_NAME_NUMBER_TYPE = "number-type";
  @SerializedName(SERIALIZED_NAME_NUMBER_TYPE)
  private String numberType;

  public static final String SERIALIZED_NAME_NUMBER_VALID = "number-valid";
  @SerializedName(SERIALIZED_NAME_NUMBER_VALID)
  private Boolean numberValid;

  public static final String SERIALIZED_NAME_ORIGIN_NETWORK = "origin-network";
  @SerializedName(SERIALIZED_NAME_ORIGIN_NETWORK)
  private String originNetwork;

  public static final String SERIALIZED_NAME_PORTED_NETWORK = "ported-network";
  @SerializedName(SERIALIZED_NAME_PORTED_NETWORK)
  private String portedNetwork;

  public static final String SERIALIZED_NAME_ROAMING_COUNTRY_CODE = "roaming-country-code";
  @SerializedName(SERIALIZED_NAME_ROAMING_COUNTRY_CODE)
  private String roamingCountryCode;

  public HLRLookupResponse() {
  }

  public HLRLookupResponse country(String country) {
    this.country = country;
    return this;
  }

  /**
   * The phone number country
   * @return country
   */
  @javax.annotation.Nonnull
  public String getCountry() {
    return country;
  }

  public void setCountry(String country) {
    this.country = country;
  }


  public HLRLookupResponse countryCode(String countryCode) {
    this.countryCode = countryCode;
    return this;
  }

  /**
   * The number location as an ISO 2-letter country code
   * @return countryCode
   */
  @javax.annotation.Nonnull
  public String getCountryCode() {
    return countryCode;
  }

  public void setCountryCode(String countryCode) {
    this.countryCode = countryCode;
  }


  public HLRLookupResponse countryCode3(String countryCode3) {
    this.countryCode3 = countryCode3;
    return this;
  }

  /**
   * The number location as an ISO 3-letter country code
   * @return countryCode3
   */
  @javax.annotation.Nonnull
  public String getCountryCode3() {
    return countryCode3;
  }

  public void setCountryCode3(String countryCode3) {
    this.countryCode3 = countryCode3;
  }


  public HLRLookupResponse currencyCode(String currencyCode) {
    this.currencyCode = currencyCode;
    return this;
  }

  /**
   * ISO 4217 currency code associated with the country
   * @return currencyCode
   */
  @javax.annotation.Nonnull
  public String getCurrencyCode() {
    return currencyCode;
  }

  public void setCurrencyCode(String currencyCode) {
    this.currencyCode = currencyCode;
  }


  public HLRLookupResponse currentNetwork(String currentNetwork) {
    this.currentNetwork = currentNetwork;
    return this;
  }

  /**
   * The currently used network/carrier name
   * @return currentNetwork
   */
  @javax.annotation.Nonnull
  public String getCurrentNetwork() {
    return currentNetwork;
  }

  public void setCurrentNetwork(String currentNetwork) {
    this.currentNetwork = currentNetwork;
  }


  public HLRLookupResponse hlrStatus(String hlrStatus) {
    this.hlrStatus = hlrStatus;
    return this;
  }

  /**
   * The HLR lookup status, possible values are: &lt;br&gt; &lt;ul&gt; &lt;li&gt;ok - the HLR lookup was successful and the device is connected&lt;/li&gt; &lt;li&gt;absent - the number was once registered but the device has been switched off or out of network range for some time&lt;/li&gt; &lt;li&gt;unknown - the number is not known by the mobile network&lt;/li&gt; &lt;li&gt;invalid - the number is not a valid mobile MSISDN number&lt;/li&gt; &lt;li&gt;fixed-line - the number is a registered fixed-line not mobile&lt;/li&gt; &lt;li&gt;voip - the number has been detected as a VOIP line&lt;/li&gt; &lt;li&gt;failed - the HLR lookup has failed, we could not determine the real status of this number&lt;/li&gt; &lt;/ul&gt;
   * @return hlrStatus
   */
  @javax.annotation.Nonnull
  public String getHlrStatus() {
    return hlrStatus;
  }

  public void setHlrStatus(String hlrStatus) {
    this.hlrStatus = hlrStatus;
  }


  public HLRLookupResponse hlrValid(Boolean hlrValid) {
    this.hlrValid = hlrValid;
    return this;
  }

  /**
   * Was the HLR lookup successful. If true then this is a working and registered cell-phone or mobile device (SMS and phone calls will be delivered)
   * @return hlrValid
   */
  @javax.annotation.Nonnull
  public Boolean getHlrValid() {
    return hlrValid;
  }

  public void setHlrValid(Boolean hlrValid) {
    this.hlrValid = hlrValid;
  }


  public HLRLookupResponse imsi(String imsi) {
    this.imsi = imsi;
    return this;
  }

  /**
   * The mobile IMSI number (International Mobile Subscriber Identity)
   * @return imsi
   */
  @javax.annotation.Nonnull
  public String getImsi() {
    return imsi;
  }

  public void setImsi(String imsi) {
    this.imsi = imsi;
  }


  public HLRLookupResponse internationalCallingCode(String internationalCallingCode) {
    this.internationalCallingCode = internationalCallingCode;
    return this;
  }

  /**
   * The international calling code
   * @return internationalCallingCode
   */
  @javax.annotation.Nonnull
  public String getInternationalCallingCode() {
    return internationalCallingCode;
  }

  public void setInternationalCallingCode(String internationalCallingCode) {
    this.internationalCallingCode = internationalCallingCode;
  }


  public HLRLookupResponse internationalNumber(String internationalNumber) {
    this.internationalNumber = internationalNumber;
    return this;
  }

  /**
   * The number represented in full international format
   * @return internationalNumber
   */
  @javax.annotation.Nonnull
  public String getInternationalNumber() {
    return internationalNumber;
  }

  public void setInternationalNumber(String internationalNumber) {
    this.internationalNumber = internationalNumber;
  }


  public HLRLookupResponse isMobile(Boolean isMobile) {
    this.isMobile = isMobile;
    return this;
  }

  /**
   * True if this is a mobile number (only true with 100% certainty, if the number type is unknown this value will be false)
   * @return isMobile
   */
  @javax.annotation.Nonnull
  public Boolean getIsMobile() {
    return isMobile;
  }

  public void setIsMobile(Boolean isMobile) {
    this.isMobile = isMobile;
  }


  public HLRLookupResponse isPorted(Boolean isPorted) {
    this.isPorted = isPorted;
    return this;
  }

  /**
   * Has this number been ported to another network
   * @return isPorted
   */
  @javax.annotation.Nonnull
  public Boolean getIsPorted() {
    return isPorted;
  }

  public void setIsPorted(Boolean isPorted) {
    this.isPorted = isPorted;
  }


  public HLRLookupResponse isRoaming(Boolean isRoaming) {
    this.isRoaming = isRoaming;
    return this;
  }

  /**
   * Is this number currently roaming from its origin country
   * @return isRoaming
   */
  @javax.annotation.Nonnull
  public Boolean getIsRoaming() {
    return isRoaming;
  }

  public void setIsRoaming(Boolean isRoaming) {
    this.isRoaming = isRoaming;
  }


  public HLRLookupResponse localNumber(String localNumber) {
    this.localNumber = localNumber;
    return this;
  }

  /**
   * The number represented in local dialing format
   * @return localNumber
   */
  @javax.annotation.Nonnull
  public String getLocalNumber() {
    return localNumber;
  }

  public void setLocalNumber(String localNumber) {
    this.localNumber = localNumber;
  }


  public HLRLookupResponse location(String location) {
    this.location = location;
    return this;
  }

  /**
   * The number location. Could be a city, region or country depending on the type of number
   * @return location
   */
  @javax.annotation.Nonnull
  public String getLocation() {
    return location;
  }

  public void setLocation(String location) {
    this.location = location;
  }


  public HLRLookupResponse mcc(String mcc) {
    this.mcc = mcc;
    return this;
  }

  /**
   * The mobile MCC number (Mobile Country Code)
   * @return mcc
   */
  @javax.annotation.Nonnull
  public String getMcc() {
    return mcc;
  }

  public void setMcc(String mcc) {
    this.mcc = mcc;
  }


  public HLRLookupResponse mnc(String mnc) {
    this.mnc = mnc;
    return this;
  }

  /**
   * The mobile MNC number (Mobile Network Code)
   * @return mnc
   */
  @javax.annotation.Nonnull
  public String getMnc() {
    return mnc;
  }

  public void setMnc(String mnc) {
    this.mnc = mnc;
  }


  public HLRLookupResponse msc(String msc) {
    this.msc = msc;
    return this;
  }

  /**
   * The mobile MSC number (Mobile Switching Center)
   * @return msc
   */
  @javax.annotation.Nonnull
  public String getMsc() {
    return msc;
  }

  public void setMsc(String msc) {
    this.msc = msc;
  }


  public HLRLookupResponse msin(String msin) {
    this.msin = msin;
    return this;
  }

  /**
   * The mobile MSIN number (Mobile Subscription Identification Number)
   * @return msin
   */
  @javax.annotation.Nonnull
  public String getMsin() {
    return msin;
  }

  public void setMsin(String msin) {
    this.msin = msin;
  }


  public HLRLookupResponse numberType(String numberType) {
    this.numberType = numberType;
    return this;
  }

  /**
   * The number type, possible values are: &lt;br&gt; &lt;ul&gt; &lt;li&gt;mobile&lt;/li&gt; &lt;li&gt;fixed-line&lt;/li&gt; &lt;li&gt;premium-rate&lt;/li&gt; &lt;li&gt;toll-free&lt;/li&gt; &lt;li&gt;voip&lt;/li&gt; &lt;li&gt;unknown&lt;/li&gt; &lt;/ul&gt;
   * @return numberType
   */
  @javax.annotation.Nonnull
  public String getNumberType() {
    return numberType;
  }

  public void setNumberType(String numberType) {
    this.numberType = numberType;
  }


  public HLRLookupResponse numberValid(Boolean numberValid) {
    this.numberValid = numberValid;
    return this;
  }

  /**
   * True if this a valid phone number
   * @return numberValid
   */
  @javax.annotation.Nonnull
  public Boolean getNumberValid() {
    return numberValid;
  }

  public void setNumberValid(Boolean numberValid) {
    this.numberValid = numberValid;
  }


  public HLRLookupResponse originNetwork(String originNetwork) {
    this.originNetwork = originNetwork;
    return this;
  }

  /**
   * The origin network/carrier name
   * @return originNetwork
   */
  @javax.annotation.Nonnull
  public String getOriginNetwork() {
    return originNetwork;
  }

  public void setOriginNetwork(String originNetwork) {
    this.originNetwork = originNetwork;
  }


  public HLRLookupResponse portedNetwork(String portedNetwork) {
    this.portedNetwork = portedNetwork;
    return this;
  }

  /**
   * The ported to network/carrier name (only set if the number has been ported)
   * @return portedNetwork
   */
  @javax.annotation.Nonnull
  public String getPortedNetwork() {
    return portedNetwork;
  }

  public void setPortedNetwork(String portedNetwork) {
    this.portedNetwork = portedNetwork;
  }


  public HLRLookupResponse roamingCountryCode(String roamingCountryCode) {
    this.roamingCountryCode = roamingCountryCode;
    return this;
  }

  /**
   * If the number is currently roaming, the ISO 2-letter country code of the roaming in country
   * @return roamingCountryCode
   */
  @javax.annotation.Nonnull
  public String getRoamingCountryCode() {
    return roamingCountryCode;
  }

  public void setRoamingCountryCode(String roamingCountryCode) {
    this.roamingCountryCode = roamingCountryCode;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    HLRLookupResponse hlRLookupResponse = (HLRLookupResponse) o;
    return Objects.equals(this.country, hlRLookupResponse.country) &&
        Objects.equals(this.countryCode, hlRLookupResponse.countryCode) &&
        Objects.equals(this.countryCode3, hlRLookupResponse.countryCode3) &&
        Objects.equals(this.currencyCode, hlRLookupResponse.currencyCode) &&
        Objects.equals(this.currentNetwork, hlRLookupResponse.currentNetwork) &&
        Objects.equals(this.hlrStatus, hlRLookupResponse.hlrStatus) &&
        Objects.equals(this.hlrValid, hlRLookupResponse.hlrValid) &&
        Objects.equals(this.imsi, hlRLookupResponse.imsi) &&
        Objects.equals(this.internationalCallingCode, hlRLookupResponse.internationalCallingCode) &&
        Objects.equals(this.internationalNumber, hlRLookupResponse.internationalNumber) &&
        Objects.equals(this.isMobile, hlRLookupResponse.isMobile) &&
        Objects.equals(this.isPorted, hlRLookupResponse.isPorted) &&
        Objects.equals(this.isRoaming, hlRLookupResponse.isRoaming) &&
        Objects.equals(this.localNumber, hlRLookupResponse.localNumber) &&
        Objects.equals(this.location, hlRLookupResponse.location) &&
        Objects.equals(this.mcc, hlRLookupResponse.mcc) &&
        Objects.equals(this.mnc, hlRLookupResponse.mnc) &&
        Objects.equals(this.msc, hlRLookupResponse.msc) &&
        Objects.equals(this.msin, hlRLookupResponse.msin) &&
        Objects.equals(this.numberType, hlRLookupResponse.numberType) &&
        Objects.equals(this.numberValid, hlRLookupResponse.numberValid) &&
        Objects.equals(this.originNetwork, hlRLookupResponse.originNetwork) &&
        Objects.equals(this.portedNetwork, hlRLookupResponse.portedNetwork) &&
        Objects.equals(this.roamingCountryCode, hlRLookupResponse.roamingCountryCode);
  }

  @Override
  public int hashCode() {
    return Objects.hash(country, countryCode, countryCode3, currencyCode, currentNetwork, hlrStatus, hlrValid, imsi, internationalCallingCode, internationalNumber, isMobile, isPorted, isRoaming, localNumber, location, mcc, mnc, msc, msin, numberType, numberValid, originNetwork, portedNetwork, roamingCountryCode);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class HLRLookupResponse {\n");
    sb.append("    country: ").append(toIndentedString(country)).append("\n");
    sb.append("    countryCode: ").append(toIndentedString(countryCode)).append("\n");
    sb.append("    countryCode3: ").append(toIndentedString(countryCode3)).append("\n");
    sb.append("    currencyCode: ").append(toIndentedString(currencyCode)).append("\n");
    sb.append("    currentNetwork: ").append(toIndentedString(currentNetwork)).append("\n");
    sb.append("    hlrStatus: ").append(toIndentedString(hlrStatus)).append("\n");
    sb.append("    hlrValid: ").append(toIndentedString(hlrValid)).append("\n");
    sb.append("    imsi: ").append(toIndentedString(imsi)).append("\n");
    sb.append("    internationalCallingCode: ").append(toIndentedString(internationalCallingCode)).append("\n");
    sb.append("    internationalNumber: ").append(toIndentedString(internationalNumber)).append("\n");
    sb.append("    isMobile: ").append(toIndentedString(isMobile)).append("\n");
    sb.append("    isPorted: ").append(toIndentedString(isPorted)).append("\n");
    sb.append("    isRoaming: ").append(toIndentedString(isRoaming)).append("\n");
    sb.append("    localNumber: ").append(toIndentedString(localNumber)).append("\n");
    sb.append("    location: ").append(toIndentedString(location)).append("\n");
    sb.append("    mcc: ").append(toIndentedString(mcc)).append("\n");
    sb.append("    mnc: ").append(toIndentedString(mnc)).append("\n");
    sb.append("    msc: ").append(toIndentedString(msc)).append("\n");
    sb.append("    msin: ").append(toIndentedString(msin)).append("\n");
    sb.append("    numberType: ").append(toIndentedString(numberType)).append("\n");
    sb.append("    numberValid: ").append(toIndentedString(numberValid)).append("\n");
    sb.append("    originNetwork: ").append(toIndentedString(originNetwork)).append("\n");
    sb.append("    portedNetwork: ").append(toIndentedString(portedNetwork)).append("\n");
    sb.append("    roamingCountryCode: ").append(toIndentedString(roamingCountryCode)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("country");
    openapiFields.add("country-code");
    openapiFields.add("country-code3");
    openapiFields.add("currency-code");
    openapiFields.add("current-network");
    openapiFields.add("hlr-status");
    openapiFields.add("hlr-valid");
    openapiFields.add("imsi");
    openapiFields.add("international-calling-code");
    openapiFields.add("international-number");
    openapiFields.add("is-mobile");
    openapiFields.add("is-ported");
    openapiFields.add("is-roaming");
    openapiFields.add("local-number");
    openapiFields.add("location");
    openapiFields.add("mcc");
    openapiFields.add("mnc");
    openapiFields.add("msc");
    openapiFields.add("msin");
    openapiFields.add("number-type");
    openapiFields.add("number-valid");
    openapiFields.add("origin-network");
    openapiFields.add("ported-network");
    openapiFields.add("roaming-country-code");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("country");
    openapiRequiredFields.add("country-code");
    openapiRequiredFields.add("country-code3");
    openapiRequiredFields.add("currency-code");
    openapiRequiredFields.add("current-network");
    openapiRequiredFields.add("hlr-status");
    openapiRequiredFields.add("hlr-valid");
    openapiRequiredFields.add("imsi");
    openapiRequiredFields.add("international-calling-code");
    openapiRequiredFields.add("international-number");
    openapiRequiredFields.add("is-mobile");
    openapiRequiredFields.add("is-ported");
    openapiRequiredFields.add("is-roaming");
    openapiRequiredFields.add("local-number");
    openapiRequiredFields.add("location");
    openapiRequiredFields.add("mcc");
    openapiRequiredFields.add("mnc");
    openapiRequiredFields.add("msc");
    openapiRequiredFields.add("msin");
    openapiRequiredFields.add("number-type");
    openapiRequiredFields.add("number-valid");
    openapiRequiredFields.add("origin-network");
    openapiRequiredFields.add("ported-network");
    openapiRequiredFields.add("roaming-country-code");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to HLRLookupResponse
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!HLRLookupResponse.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in HLRLookupResponse is not found in the empty JSON string", HLRLookupResponse.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!HLRLookupResponse.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `HLRLookupResponse` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : HLRLookupResponse.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("country").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `country` to be a primitive type in the JSON string but got `%s`", jsonObj.get("country").toString()));
      }
      if (!jsonObj.get("country-code").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `country-code` to be a primitive type in the JSON string but got `%s`", jsonObj.get("country-code").toString()));
      }
      if (!jsonObj.get("country-code3").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `country-code3` to be a primitive type in the JSON string but got `%s`", jsonObj.get("country-code3").toString()));
      }
      if (!jsonObj.get("currency-code").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `currency-code` to be a primitive type in the JSON string but got `%s`", jsonObj.get("currency-code").toString()));
      }
      if (!jsonObj.get("current-network").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `current-network` to be a primitive type in the JSON string but got `%s`", jsonObj.get("current-network").toString()));
      }
      if (!jsonObj.get("hlr-status").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `hlr-status` to be a primitive type in the JSON string but got `%s`", jsonObj.get("hlr-status").toString()));
      }
      if (!jsonObj.get("imsi").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `imsi` to be a primitive type in the JSON string but got `%s`", jsonObj.get("imsi").toString()));
      }
      if (!jsonObj.get("international-calling-code").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `international-calling-code` to be a primitive type in the JSON string but got `%s`", jsonObj.get("international-calling-code").toString()));
      }
      if (!jsonObj.get("international-number").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `international-number` to be a primitive type in the JSON string but got `%s`", jsonObj.get("international-number").toString()));
      }
      if (!jsonObj.get("local-number").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `local-number` to be a primitive type in the JSON string but got `%s`", jsonObj.get("local-number").toString()));
      }
      if (!jsonObj.get("location").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `location` to be a primitive type in the JSON string but got `%s`", jsonObj.get("location").toString()));
      }
      if (!jsonObj.get("mcc").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `mcc` to be a primitive type in the JSON string but got `%s`", jsonObj.get("mcc").toString()));
      }
      if (!jsonObj.get("mnc").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `mnc` to be a primitive type in the JSON string but got `%s`", jsonObj.get("mnc").toString()));
      }
      if (!jsonObj.get("msc").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `msc` to be a primitive type in the JSON string but got `%s`", jsonObj.get("msc").toString()));
      }
      if (!jsonObj.get("msin").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `msin` to be a primitive type in the JSON string but got `%s`", jsonObj.get("msin").toString()));
      }
      if (!jsonObj.get("number-type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `number-type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("number-type").toString()));
      }
      if (!jsonObj.get("origin-network").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `origin-network` to be a primitive type in the JSON string but got `%s`", jsonObj.get("origin-network").toString()));
      }
      if (!jsonObj.get("ported-network").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ported-network` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ported-network").toString()));
      }
      if (!jsonObj.get("roaming-country-code").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `roaming-country-code` to be a primitive type in the JSON string but got `%s`", jsonObj.get("roaming-country-code").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!HLRLookupResponse.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'HLRLookupResponse' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<HLRLookupResponse> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(HLRLookupResponse.class));

       return (TypeAdapter<T>) new TypeAdapter<HLRLookupResponse>() {
           @Override
           public void write(JsonWriter out, HLRLookupResponse value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public HLRLookupResponse read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of HLRLookupResponse given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of HLRLookupResponse
   * @throws IOException if the JSON string is invalid with respect to HLRLookupResponse
   */
  public static HLRLookupResponse fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, HLRLookupResponse.class);
  }

  /**
   * Convert an instance of HLRLookupResponse to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

