/*
 * Neutrino API
 * The general-purpose API
 *
 * The version of the OpenAPI document: 3.6.4
 * Contact: ops@neutrinoapi.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * APIError
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:54:58.398611-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class APIError {
  public static final String SERIALIZED_NAME_API_ERROR = "api-error";
  @SerializedName(SERIALIZED_NAME_API_ERROR)
  private Integer apiError;

  public static final String SERIALIZED_NAME_API_ERROR_MSG = "api-error-msg";
  @SerializedName(SERIALIZED_NAME_API_ERROR_MSG)
  private String apiErrorMsg;

  public APIError() {
  }

  public APIError apiError(Integer apiError) {
    this.apiError = apiError;
    return this;
  }

  /**
   * API error code. If set and &gt; 0 then an API error has occurred your request could not be completed
   * @return apiError
   */
  @javax.annotation.Nonnull
  public Integer getApiError() {
    return apiError;
  }

  public void setApiError(Integer apiError) {
    this.apiError = apiError;
  }


  public APIError apiErrorMsg(String apiErrorMsg) {
    this.apiErrorMsg = apiErrorMsg;
    return this;
  }

  /**
   * API error message
   * @return apiErrorMsg
   */
  @javax.annotation.Nonnull
  public String getApiErrorMsg() {
    return apiErrorMsg;
  }

  public void setApiErrorMsg(String apiErrorMsg) {
    this.apiErrorMsg = apiErrorMsg;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    APIError apIError = (APIError) o;
    return Objects.equals(this.apiError, apIError.apiError) &&
        Objects.equals(this.apiErrorMsg, apIError.apiErrorMsg);
  }

  @Override
  public int hashCode() {
    return Objects.hash(apiError, apiErrorMsg);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class APIError {\n");
    sb.append("    apiError: ").append(toIndentedString(apiError)).append("\n");
    sb.append("    apiErrorMsg: ").append(toIndentedString(apiErrorMsg)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("api-error");
    openapiFields.add("api-error-msg");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("api-error");
    openapiRequiredFields.add("api-error-msg");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to APIError
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!APIError.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in APIError is not found in the empty JSON string", APIError.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!APIError.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `APIError` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : APIError.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("api-error-msg").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `api-error-msg` to be a primitive type in the JSON string but got `%s`", jsonObj.get("api-error-msg").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!APIError.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'APIError' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<APIError> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(APIError.class));

       return (TypeAdapter<T>) new TypeAdapter<APIError>() {
           @Override
           public void write(JsonWriter out, APIError value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public APIError read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of APIError given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of APIError
   * @throws IOException if the JSON string is invalid with respect to APIError
   */
  public static APIError fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, APIError.class);
  }

  /**
   * Convert an instance of APIError to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

