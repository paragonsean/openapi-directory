/*
 * Neutrino API
 * The general-purpose API
 *
 * The version of the OpenAPI document: 3.6.4
 * Contact: ops@neutrinoapi.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * EmailValidateResponse
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:54:58.398611-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class EmailValidateResponse {
  public static final String SERIALIZED_NAME_DOMAIN = "domain";
  @SerializedName(SERIALIZED_NAME_DOMAIN)
  private String domain;

  public static final String SERIALIZED_NAME_DOMAIN_ERROR = "domain-error";
  @SerializedName(SERIALIZED_NAME_DOMAIN_ERROR)
  private Boolean domainError;

  public static final String SERIALIZED_NAME_EMAIL = "email";
  @SerializedName(SERIALIZED_NAME_EMAIL)
  private String email;

  public static final String SERIALIZED_NAME_IS_DISPOSABLE = "is-disposable";
  @SerializedName(SERIALIZED_NAME_IS_DISPOSABLE)
  private Boolean isDisposable;

  public static final String SERIALIZED_NAME_IS_FREEMAIL = "is-freemail";
  @SerializedName(SERIALIZED_NAME_IS_FREEMAIL)
  private Boolean isFreemail;

  public static final String SERIALIZED_NAME_IS_PERSONAL = "is-personal";
  @SerializedName(SERIALIZED_NAME_IS_PERSONAL)
  private Boolean isPersonal;

  public static final String SERIALIZED_NAME_PROVIDER = "provider";
  @SerializedName(SERIALIZED_NAME_PROVIDER)
  private String provider;

  public static final String SERIALIZED_NAME_SYNTAX_ERROR = "syntax-error";
  @SerializedName(SERIALIZED_NAME_SYNTAX_ERROR)
  private Boolean syntaxError;

  public static final String SERIALIZED_NAME_TYPOS_FIXED = "typos-fixed";
  @SerializedName(SERIALIZED_NAME_TYPOS_FIXED)
  private Boolean typosFixed;

  public static final String SERIALIZED_NAME_VALID = "valid";
  @SerializedName(SERIALIZED_NAME_VALID)
  private Boolean valid;

  public EmailValidateResponse() {
  }

  public EmailValidateResponse domain(String domain) {
    this.domain = domain;
    return this;
  }

  /**
   * The email domain
   * @return domain
   */
  @javax.annotation.Nonnull
  public String getDomain() {
    return domain;
  }

  public void setDomain(String domain) {
    this.domain = domain;
  }


  public EmailValidateResponse domainError(Boolean domainError) {
    this.domainError = domainError;
    return this;
  }

  /**
   * True if this address has a domain error (e.g. no valid mail server records)
   * @return domainError
   */
  @javax.annotation.Nonnull
  public Boolean getDomainError() {
    return domainError;
  }

  public void setDomainError(Boolean domainError) {
    this.domainError = domainError;
  }


  public EmailValidateResponse email(String email) {
    this.email = email;
    return this;
  }

  /**
   * The email address. If you have used the fix-typos option then this will be the fixed address
   * @return email
   */
  @javax.annotation.Nonnull
  public String getEmail() {
    return email;
  }

  public void setEmail(String email) {
    this.email = email;
  }


  public EmailValidateResponse isDisposable(Boolean isDisposable) {
    this.isDisposable = isDisposable;
    return this;
  }

  /**
   * True if this address is a disposable, temporary or darknet related email address
   * @return isDisposable
   */
  @javax.annotation.Nonnull
  public Boolean getIsDisposable() {
    return isDisposable;
  }

  public void setIsDisposable(Boolean isDisposable) {
    this.isDisposable = isDisposable;
  }


  public EmailValidateResponse isFreemail(Boolean isFreemail) {
    this.isFreemail = isFreemail;
    return this;
  }

  /**
   * True if this address is a free-mail address
   * @return isFreemail
   */
  @javax.annotation.Nonnull
  public Boolean getIsFreemail() {
    return isFreemail;
  }

  public void setIsFreemail(Boolean isFreemail) {
    this.isFreemail = isFreemail;
  }


  public EmailValidateResponse isPersonal(Boolean isPersonal) {
    this.isPersonal = isPersonal;
    return this;
  }

  /**
   * True if this address belongs to a person. False if this is a role based address, e.g. admin@, help@, office@, etc.
   * @return isPersonal
   */
  @javax.annotation.Nonnull
  public Boolean getIsPersonal() {
    return isPersonal;
  }

  public void setIsPersonal(Boolean isPersonal) {
    this.isPersonal = isPersonal;
  }


  public EmailValidateResponse provider(String provider) {
    this.provider = provider;
    return this;
  }

  /**
   * The email service provider domain
   * @return provider
   */
  @javax.annotation.Nonnull
  public String getProvider() {
    return provider;
  }

  public void setProvider(String provider) {
    this.provider = provider;
  }


  public EmailValidateResponse syntaxError(Boolean syntaxError) {
    this.syntaxError = syntaxError;
    return this;
  }

  /**
   * True if this address has a syntax error
   * @return syntaxError
   */
  @javax.annotation.Nonnull
  public Boolean getSyntaxError() {
    return syntaxError;
  }

  public void setSyntaxError(Boolean syntaxError) {
    this.syntaxError = syntaxError;
  }


  public EmailValidateResponse typosFixed(Boolean typosFixed) {
    this.typosFixed = typosFixed;
    return this;
  }

  /**
   * True if typos have been fixed
   * @return typosFixed
   */
  @javax.annotation.Nonnull
  public Boolean getTyposFixed() {
    return typosFixed;
  }

  public void setTyposFixed(Boolean typosFixed) {
    this.typosFixed = typosFixed;
  }


  public EmailValidateResponse valid(Boolean valid) {
    this.valid = valid;
    return this;
  }

  /**
   * Is this a valid email
   * @return valid
   */
  @javax.annotation.Nonnull
  public Boolean getValid() {
    return valid;
  }

  public void setValid(Boolean valid) {
    this.valid = valid;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    EmailValidateResponse emailValidateResponse = (EmailValidateResponse) o;
    return Objects.equals(this.domain, emailValidateResponse.domain) &&
        Objects.equals(this.domainError, emailValidateResponse.domainError) &&
        Objects.equals(this.email, emailValidateResponse.email) &&
        Objects.equals(this.isDisposable, emailValidateResponse.isDisposable) &&
        Objects.equals(this.isFreemail, emailValidateResponse.isFreemail) &&
        Objects.equals(this.isPersonal, emailValidateResponse.isPersonal) &&
        Objects.equals(this.provider, emailValidateResponse.provider) &&
        Objects.equals(this.syntaxError, emailValidateResponse.syntaxError) &&
        Objects.equals(this.typosFixed, emailValidateResponse.typosFixed) &&
        Objects.equals(this.valid, emailValidateResponse.valid);
  }

  @Override
  public int hashCode() {
    return Objects.hash(domain, domainError, email, isDisposable, isFreemail, isPersonal, provider, syntaxError, typosFixed, valid);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class EmailValidateResponse {\n");
    sb.append("    domain: ").append(toIndentedString(domain)).append("\n");
    sb.append("    domainError: ").append(toIndentedString(domainError)).append("\n");
    sb.append("    email: ").append(toIndentedString(email)).append("\n");
    sb.append("    isDisposable: ").append(toIndentedString(isDisposable)).append("\n");
    sb.append("    isFreemail: ").append(toIndentedString(isFreemail)).append("\n");
    sb.append("    isPersonal: ").append(toIndentedString(isPersonal)).append("\n");
    sb.append("    provider: ").append(toIndentedString(provider)).append("\n");
    sb.append("    syntaxError: ").append(toIndentedString(syntaxError)).append("\n");
    sb.append("    typosFixed: ").append(toIndentedString(typosFixed)).append("\n");
    sb.append("    valid: ").append(toIndentedString(valid)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("domain");
    openapiFields.add("domain-error");
    openapiFields.add("email");
    openapiFields.add("is-disposable");
    openapiFields.add("is-freemail");
    openapiFields.add("is-personal");
    openapiFields.add("provider");
    openapiFields.add("syntax-error");
    openapiFields.add("typos-fixed");
    openapiFields.add("valid");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("domain");
    openapiRequiredFields.add("domain-error");
    openapiRequiredFields.add("email");
    openapiRequiredFields.add("is-disposable");
    openapiRequiredFields.add("is-freemail");
    openapiRequiredFields.add("is-personal");
    openapiRequiredFields.add("provider");
    openapiRequiredFields.add("syntax-error");
    openapiRequiredFields.add("typos-fixed");
    openapiRequiredFields.add("valid");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to EmailValidateResponse
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!EmailValidateResponse.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in EmailValidateResponse is not found in the empty JSON string", EmailValidateResponse.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!EmailValidateResponse.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `EmailValidateResponse` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : EmailValidateResponse.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("domain").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `domain` to be a primitive type in the JSON string but got `%s`", jsonObj.get("domain").toString()));
      }
      if (!jsonObj.get("email").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `email` to be a primitive type in the JSON string but got `%s`", jsonObj.get("email").toString()));
      }
      if (!jsonObj.get("provider").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `provider` to be a primitive type in the JSON string but got `%s`", jsonObj.get("provider").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!EmailValidateResponse.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'EmailValidateResponse' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<EmailValidateResponse> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(EmailValidateResponse.class));

       return (TypeAdapter<T>) new TypeAdapter<EmailValidateResponse>() {
           @Override
           public void write(JsonWriter out, EmailValidateResponse value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public EmailValidateResponse read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of EmailValidateResponse given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of EmailValidateResponse
   * @throws IOException if the JSON string is invalid with respect to EmailValidateResponse
   */
  public static EmailValidateResponse fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, EmailValidateResponse.class);
  }

  /**
   * Convert an instance of EmailValidateResponse to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

