/*
 * Neutrino API
 * The general-purpose API
 *
 * The version of the OpenAPI document: 3.6.4
 * Contact: ops@neutrinoapi.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * BINLookupResponse
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:54:58.398611-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class BINLookupResponse {
  public static final String SERIALIZED_NAME_BIN_NUMBER = "bin-number";
  @SerializedName(SERIALIZED_NAME_BIN_NUMBER)
  private String binNumber;

  public static final String SERIALIZED_NAME_CARD_BRAND = "card-brand";
  @SerializedName(SERIALIZED_NAME_CARD_BRAND)
  private String cardBrand;

  public static final String SERIALIZED_NAME_CARD_CATEGORY = "card-category";
  @SerializedName(SERIALIZED_NAME_CARD_CATEGORY)
  private String cardCategory;

  public static final String SERIALIZED_NAME_CARD_TYPE = "card-type";
  @SerializedName(SERIALIZED_NAME_CARD_TYPE)
  private String cardType;

  public static final String SERIALIZED_NAME_COUNTRY = "country";
  @SerializedName(SERIALIZED_NAME_COUNTRY)
  private String country;

  public static final String SERIALIZED_NAME_COUNTRY_CODE = "country-code";
  @SerializedName(SERIALIZED_NAME_COUNTRY_CODE)
  private String countryCode;

  public static final String SERIALIZED_NAME_COUNTRY_CODE3 = "country-code3";
  @SerializedName(SERIALIZED_NAME_COUNTRY_CODE3)
  private String countryCode3;

  public static final String SERIALIZED_NAME_CURRENCY_CODE = "currency-code";
  @SerializedName(SERIALIZED_NAME_CURRENCY_CODE)
  private String currencyCode;

  public static final String SERIALIZED_NAME_IP_BLOCKLISTED = "ip-blocklisted";
  @SerializedName(SERIALIZED_NAME_IP_BLOCKLISTED)
  private Boolean ipBlocklisted;

  public static final String SERIALIZED_NAME_IP_BLOCKLISTS = "ip-blocklists";
  @SerializedName(SERIALIZED_NAME_IP_BLOCKLISTS)
  private List<String> ipBlocklists = new ArrayList<>();

  public static final String SERIALIZED_NAME_IP_CITY = "ip-city";
  @SerializedName(SERIALIZED_NAME_IP_CITY)
  private String ipCity;

  public static final String SERIALIZED_NAME_IP_COUNTRY = "ip-country";
  @SerializedName(SERIALIZED_NAME_IP_COUNTRY)
  private String ipCountry;

  public static final String SERIALIZED_NAME_IP_COUNTRY_CODE = "ip-country-code";
  @SerializedName(SERIALIZED_NAME_IP_COUNTRY_CODE)
  private String ipCountryCode;

  public static final String SERIALIZED_NAME_IP_COUNTRY_CODE3 = "ip-country-code3";
  @SerializedName(SERIALIZED_NAME_IP_COUNTRY_CODE3)
  private String ipCountryCode3;

  public static final String SERIALIZED_NAME_IP_MATCHES_BIN = "ip-matches-bin";
  @SerializedName(SERIALIZED_NAME_IP_MATCHES_BIN)
  private Boolean ipMatchesBin;

  public static final String SERIALIZED_NAME_IP_REGION = "ip-region";
  @SerializedName(SERIALIZED_NAME_IP_REGION)
  private String ipRegion;

  public static final String SERIALIZED_NAME_IS_COMMERCIAL = "is-commercial";
  @SerializedName(SERIALIZED_NAME_IS_COMMERCIAL)
  private Boolean isCommercial;

  public static final String SERIALIZED_NAME_IS_PREPAID = "is-prepaid";
  @SerializedName(SERIALIZED_NAME_IS_PREPAID)
  private Boolean isPrepaid;

  public static final String SERIALIZED_NAME_ISSUER = "issuer";
  @SerializedName(SERIALIZED_NAME_ISSUER)
  private String issuer;

  public static final String SERIALIZED_NAME_ISSUER_PHONE = "issuer-phone";
  @SerializedName(SERIALIZED_NAME_ISSUER_PHONE)
  private String issuerPhone;

  public static final String SERIALIZED_NAME_ISSUER_WEBSITE = "issuer-website";
  @SerializedName(SERIALIZED_NAME_ISSUER_WEBSITE)
  private String issuerWebsite;

  public static final String SERIALIZED_NAME_VALID = "valid";
  @SerializedName(SERIALIZED_NAME_VALID)
  private Boolean valid;

  public BINLookupResponse() {
  }

  public BINLookupResponse binNumber(String binNumber) {
    this.binNumber = binNumber;
    return this;
  }

  /**
   * The BIN or IIN number
   * @return binNumber
   */
  @javax.annotation.Nonnull
  public String getBinNumber() {
    return binNumber;
  }

  public void setBinNumber(String binNumber) {
    this.binNumber = binNumber;
  }


  public BINLookupResponse cardBrand(String cardBrand) {
    this.cardBrand = cardBrand;
    return this;
  }

  /**
   * The card brand (e.g. Visa or Mastercard)
   * @return cardBrand
   */
  @javax.annotation.Nonnull
  public String getCardBrand() {
    return cardBrand;
  }

  public void setCardBrand(String cardBrand) {
    this.cardBrand = cardBrand;
  }


  public BINLookupResponse cardCategory(String cardCategory) {
    this.cardCategory = cardCategory;
    return this;
  }

  /**
   * The card category. There are many different card categories the most common card categories are: CLASSIC, BUSINESS, CORPORATE, PLATINUM, PREPAID
   * @return cardCategory
   */
  @javax.annotation.Nonnull
  public String getCardCategory() {
    return cardCategory;
  }

  public void setCardCategory(String cardCategory) {
    this.cardCategory = cardCategory;
  }


  public BINLookupResponse cardType(String cardType) {
    this.cardType = cardType;
    return this;
  }

  /**
   * The card type, will always be one of: DEBIT, CREDIT, CHARGE CARD
   * @return cardType
   */
  @javax.annotation.Nonnull
  public String getCardType() {
    return cardType;
  }

  public void setCardType(String cardType) {
    this.cardType = cardType;
  }


  public BINLookupResponse country(String country) {
    this.country = country;
    return this;
  }

  /**
   * The full country name of the issuer
   * @return country
   */
  @javax.annotation.Nonnull
  public String getCountry() {
    return country;
  }

  public void setCountry(String country) {
    this.country = country;
  }


  public BINLookupResponse countryCode(String countryCode) {
    this.countryCode = countryCode;
    return this;
  }

  /**
   * The ISO 2-letter country code of the issuer
   * @return countryCode
   */
  @javax.annotation.Nonnull
  public String getCountryCode() {
    return countryCode;
  }

  public void setCountryCode(String countryCode) {
    this.countryCode = countryCode;
  }


  public BINLookupResponse countryCode3(String countryCode3) {
    this.countryCode3 = countryCode3;
    return this;
  }

  /**
   * The ISO 3-letter country code of the issuer
   * @return countryCode3
   */
  @javax.annotation.Nonnull
  public String getCountryCode3() {
    return countryCode3;
  }

  public void setCountryCode3(String countryCode3) {
    this.countryCode3 = countryCode3;
  }


  public BINLookupResponse currencyCode(String currencyCode) {
    this.currencyCode = currencyCode;
    return this;
  }

  /**
   * ISO 4217 currency code associated with the country of the issuer
   * @return currencyCode
   */
  @javax.annotation.Nonnull
  public String getCurrencyCode() {
    return currencyCode;
  }

  public void setCurrencyCode(String currencyCode) {
    this.currencyCode = currencyCode;
  }


  public BINLookupResponse ipBlocklisted(Boolean ipBlocklisted) {
    this.ipBlocklisted = ipBlocklisted;
    return this;
  }

  /**
   * True if the customers IP is listed on one of our blocklists, see the &lt;a href&#x3D;\&quot;http://www.neutrinoapi.com/api/ip-blocklist/\&quot;&gt;IP Blocklist API&lt;/a&gt;
   * @return ipBlocklisted
   */
  @javax.annotation.Nonnull
  public Boolean getIpBlocklisted() {
    return ipBlocklisted;
  }

  public void setIpBlocklisted(Boolean ipBlocklisted) {
    this.ipBlocklisted = ipBlocklisted;
  }


  public BINLookupResponse ipBlocklists(List<String> ipBlocklists) {
    this.ipBlocklists = ipBlocklists;
    return this;
  }

  public BINLookupResponse addIpBlocklistsItem(String ipBlocklistsItem) {
    if (this.ipBlocklists == null) {
      this.ipBlocklists = new ArrayList<>();
    }
    this.ipBlocklists.add(ipBlocklistsItem);
    return this;
  }

  /**
   * An array of strings indicating which blocklists this IP is listed on
   * @return ipBlocklists
   */
  @javax.annotation.Nonnull
  public List<String> getIpBlocklists() {
    return ipBlocklists;
  }

  public void setIpBlocklists(List<String> ipBlocklists) {
    this.ipBlocklists = ipBlocklists;
  }


  public BINLookupResponse ipCity(String ipCity) {
    this.ipCity = ipCity;
    return this;
  }

  /**
   * The city of the customers IP (if detectable)
   * @return ipCity
   */
  @javax.annotation.Nonnull
  public String getIpCity() {
    return ipCity;
  }

  public void setIpCity(String ipCity) {
    this.ipCity = ipCity;
  }


  public BINLookupResponse ipCountry(String ipCountry) {
    this.ipCountry = ipCountry;
    return this;
  }

  /**
   * The country of the customers IP
   * @return ipCountry
   */
  @javax.annotation.Nonnull
  public String getIpCountry() {
    return ipCountry;
  }

  public void setIpCountry(String ipCountry) {
    this.ipCountry = ipCountry;
  }


  public BINLookupResponse ipCountryCode(String ipCountryCode) {
    this.ipCountryCode = ipCountryCode;
    return this;
  }

  /**
   * The ISO 2-letter country code of the customers IP
   * @return ipCountryCode
   */
  @javax.annotation.Nonnull
  public String getIpCountryCode() {
    return ipCountryCode;
  }

  public void setIpCountryCode(String ipCountryCode) {
    this.ipCountryCode = ipCountryCode;
  }


  public BINLookupResponse ipCountryCode3(String ipCountryCode3) {
    this.ipCountryCode3 = ipCountryCode3;
    return this;
  }

  /**
   * The ISO 3-letter country code of the customers IP
   * @return ipCountryCode3
   */
  @javax.annotation.Nonnull
  public String getIpCountryCode3() {
    return ipCountryCode3;
  }

  public void setIpCountryCode3(String ipCountryCode3) {
    this.ipCountryCode3 = ipCountryCode3;
  }


  public BINLookupResponse ipMatchesBin(Boolean ipMatchesBin) {
    this.ipMatchesBin = ipMatchesBin;
    return this;
  }

  /**
   * True if the customers IP country matches the BIN country
   * @return ipMatchesBin
   */
  @javax.annotation.Nonnull
  public Boolean getIpMatchesBin() {
    return ipMatchesBin;
  }

  public void setIpMatchesBin(Boolean ipMatchesBin) {
    this.ipMatchesBin = ipMatchesBin;
  }


  public BINLookupResponse ipRegion(String ipRegion) {
    this.ipRegion = ipRegion;
    return this;
  }

  /**
   * The region of the customers IP (if detectable)
   * @return ipRegion
   */
  @javax.annotation.Nonnull
  public String getIpRegion() {
    return ipRegion;
  }

  public void setIpRegion(String ipRegion) {
    this.ipRegion = ipRegion;
  }


  public BINLookupResponse isCommercial(Boolean isCommercial) {
    this.isCommercial = isCommercial;
    return this;
  }

  /**
   * Is this a commercial/business use card
   * @return isCommercial
   */
  @javax.annotation.Nonnull
  public Boolean getIsCommercial() {
    return isCommercial;
  }

  public void setIsCommercial(Boolean isCommercial) {
    this.isCommercial = isCommercial;
  }


  public BINLookupResponse isPrepaid(Boolean isPrepaid) {
    this.isPrepaid = isPrepaid;
    return this;
  }

  /**
   * Is this a prepaid or prepaid reloadable card
   * @return isPrepaid
   */
  @javax.annotation.Nonnull
  public Boolean getIsPrepaid() {
    return isPrepaid;
  }

  public void setIsPrepaid(Boolean isPrepaid) {
    this.isPrepaid = isPrepaid;
  }


  public BINLookupResponse issuer(String issuer) {
    this.issuer = issuer;
    return this;
  }

  /**
   * The card issuer
   * @return issuer
   */
  @javax.annotation.Nonnull
  public String getIssuer() {
    return issuer;
  }

  public void setIssuer(String issuer) {
    this.issuer = issuer;
  }


  public BINLookupResponse issuerPhone(String issuerPhone) {
    this.issuerPhone = issuerPhone;
    return this;
  }

  /**
   * The card issuers phone number
   * @return issuerPhone
   */
  @javax.annotation.Nonnull
  public String getIssuerPhone() {
    return issuerPhone;
  }

  public void setIssuerPhone(String issuerPhone) {
    this.issuerPhone = issuerPhone;
  }


  public BINLookupResponse issuerWebsite(String issuerWebsite) {
    this.issuerWebsite = issuerWebsite;
    return this;
  }

  /**
   * The card issuers website
   * @return issuerWebsite
   */
  @javax.annotation.Nonnull
  public String getIssuerWebsite() {
    return issuerWebsite;
  }

  public void setIssuerWebsite(String issuerWebsite) {
    this.issuerWebsite = issuerWebsite;
  }


  public BINLookupResponse valid(Boolean valid) {
    this.valid = valid;
    return this;
  }

  /**
   * Is this a valid BIN or IIN number
   * @return valid
   */
  @javax.annotation.Nonnull
  public Boolean getValid() {
    return valid;
  }

  public void setValid(Boolean valid) {
    this.valid = valid;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    BINLookupResponse biNLookupResponse = (BINLookupResponse) o;
    return Objects.equals(this.binNumber, biNLookupResponse.binNumber) &&
        Objects.equals(this.cardBrand, biNLookupResponse.cardBrand) &&
        Objects.equals(this.cardCategory, biNLookupResponse.cardCategory) &&
        Objects.equals(this.cardType, biNLookupResponse.cardType) &&
        Objects.equals(this.country, biNLookupResponse.country) &&
        Objects.equals(this.countryCode, biNLookupResponse.countryCode) &&
        Objects.equals(this.countryCode3, biNLookupResponse.countryCode3) &&
        Objects.equals(this.currencyCode, biNLookupResponse.currencyCode) &&
        Objects.equals(this.ipBlocklisted, biNLookupResponse.ipBlocklisted) &&
        Objects.equals(this.ipBlocklists, biNLookupResponse.ipBlocklists) &&
        Objects.equals(this.ipCity, biNLookupResponse.ipCity) &&
        Objects.equals(this.ipCountry, biNLookupResponse.ipCountry) &&
        Objects.equals(this.ipCountryCode, biNLookupResponse.ipCountryCode) &&
        Objects.equals(this.ipCountryCode3, biNLookupResponse.ipCountryCode3) &&
        Objects.equals(this.ipMatchesBin, biNLookupResponse.ipMatchesBin) &&
        Objects.equals(this.ipRegion, biNLookupResponse.ipRegion) &&
        Objects.equals(this.isCommercial, biNLookupResponse.isCommercial) &&
        Objects.equals(this.isPrepaid, biNLookupResponse.isPrepaid) &&
        Objects.equals(this.issuer, biNLookupResponse.issuer) &&
        Objects.equals(this.issuerPhone, biNLookupResponse.issuerPhone) &&
        Objects.equals(this.issuerWebsite, biNLookupResponse.issuerWebsite) &&
        Objects.equals(this.valid, biNLookupResponse.valid);
  }

  @Override
  public int hashCode() {
    return Objects.hash(binNumber, cardBrand, cardCategory, cardType, country, countryCode, countryCode3, currencyCode, ipBlocklisted, ipBlocklists, ipCity, ipCountry, ipCountryCode, ipCountryCode3, ipMatchesBin, ipRegion, isCommercial, isPrepaid, issuer, issuerPhone, issuerWebsite, valid);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class BINLookupResponse {\n");
    sb.append("    binNumber: ").append(toIndentedString(binNumber)).append("\n");
    sb.append("    cardBrand: ").append(toIndentedString(cardBrand)).append("\n");
    sb.append("    cardCategory: ").append(toIndentedString(cardCategory)).append("\n");
    sb.append("    cardType: ").append(toIndentedString(cardType)).append("\n");
    sb.append("    country: ").append(toIndentedString(country)).append("\n");
    sb.append("    countryCode: ").append(toIndentedString(countryCode)).append("\n");
    sb.append("    countryCode3: ").append(toIndentedString(countryCode3)).append("\n");
    sb.append("    currencyCode: ").append(toIndentedString(currencyCode)).append("\n");
    sb.append("    ipBlocklisted: ").append(toIndentedString(ipBlocklisted)).append("\n");
    sb.append("    ipBlocklists: ").append(toIndentedString(ipBlocklists)).append("\n");
    sb.append("    ipCity: ").append(toIndentedString(ipCity)).append("\n");
    sb.append("    ipCountry: ").append(toIndentedString(ipCountry)).append("\n");
    sb.append("    ipCountryCode: ").append(toIndentedString(ipCountryCode)).append("\n");
    sb.append("    ipCountryCode3: ").append(toIndentedString(ipCountryCode3)).append("\n");
    sb.append("    ipMatchesBin: ").append(toIndentedString(ipMatchesBin)).append("\n");
    sb.append("    ipRegion: ").append(toIndentedString(ipRegion)).append("\n");
    sb.append("    isCommercial: ").append(toIndentedString(isCommercial)).append("\n");
    sb.append("    isPrepaid: ").append(toIndentedString(isPrepaid)).append("\n");
    sb.append("    issuer: ").append(toIndentedString(issuer)).append("\n");
    sb.append("    issuerPhone: ").append(toIndentedString(issuerPhone)).append("\n");
    sb.append("    issuerWebsite: ").append(toIndentedString(issuerWebsite)).append("\n");
    sb.append("    valid: ").append(toIndentedString(valid)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("bin-number");
    openapiFields.add("card-brand");
    openapiFields.add("card-category");
    openapiFields.add("card-type");
    openapiFields.add("country");
    openapiFields.add("country-code");
    openapiFields.add("country-code3");
    openapiFields.add("currency-code");
    openapiFields.add("ip-blocklisted");
    openapiFields.add("ip-blocklists");
    openapiFields.add("ip-city");
    openapiFields.add("ip-country");
    openapiFields.add("ip-country-code");
    openapiFields.add("ip-country-code3");
    openapiFields.add("ip-matches-bin");
    openapiFields.add("ip-region");
    openapiFields.add("is-commercial");
    openapiFields.add("is-prepaid");
    openapiFields.add("issuer");
    openapiFields.add("issuer-phone");
    openapiFields.add("issuer-website");
    openapiFields.add("valid");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("bin-number");
    openapiRequiredFields.add("card-brand");
    openapiRequiredFields.add("card-category");
    openapiRequiredFields.add("card-type");
    openapiRequiredFields.add("country");
    openapiRequiredFields.add("country-code");
    openapiRequiredFields.add("country-code3");
    openapiRequiredFields.add("currency-code");
    openapiRequiredFields.add("ip-blocklisted");
    openapiRequiredFields.add("ip-blocklists");
    openapiRequiredFields.add("ip-city");
    openapiRequiredFields.add("ip-country");
    openapiRequiredFields.add("ip-country-code");
    openapiRequiredFields.add("ip-country-code3");
    openapiRequiredFields.add("ip-matches-bin");
    openapiRequiredFields.add("ip-region");
    openapiRequiredFields.add("is-commercial");
    openapiRequiredFields.add("is-prepaid");
    openapiRequiredFields.add("issuer");
    openapiRequiredFields.add("issuer-phone");
    openapiRequiredFields.add("issuer-website");
    openapiRequiredFields.add("valid");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to BINLookupResponse
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!BINLookupResponse.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in BINLookupResponse is not found in the empty JSON string", BINLookupResponse.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!BINLookupResponse.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `BINLookupResponse` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : BINLookupResponse.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("bin-number").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `bin-number` to be a primitive type in the JSON string but got `%s`", jsonObj.get("bin-number").toString()));
      }
      if (!jsonObj.get("card-brand").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `card-brand` to be a primitive type in the JSON string but got `%s`", jsonObj.get("card-brand").toString()));
      }
      if (!jsonObj.get("card-category").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `card-category` to be a primitive type in the JSON string but got `%s`", jsonObj.get("card-category").toString()));
      }
      if (!jsonObj.get("card-type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `card-type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("card-type").toString()));
      }
      if (!jsonObj.get("country").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `country` to be a primitive type in the JSON string but got `%s`", jsonObj.get("country").toString()));
      }
      if (!jsonObj.get("country-code").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `country-code` to be a primitive type in the JSON string but got `%s`", jsonObj.get("country-code").toString()));
      }
      if (!jsonObj.get("country-code3").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `country-code3` to be a primitive type in the JSON string but got `%s`", jsonObj.get("country-code3").toString()));
      }
      if (!jsonObj.get("currency-code").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `currency-code` to be a primitive type in the JSON string but got `%s`", jsonObj.get("currency-code").toString()));
      }
      // ensure the required json array is present
      if (jsonObj.get("ip-blocklists") == null) {
        throw new IllegalArgumentException("Expected the field `linkedContent` to be an array in the JSON string but got `null`");
      } else if (!jsonObj.get("ip-blocklists").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `ip-blocklists` to be an array in the JSON string but got `%s`", jsonObj.get("ip-blocklists").toString()));
      }
      if (!jsonObj.get("ip-city").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ip-city` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ip-city").toString()));
      }
      if (!jsonObj.get("ip-country").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ip-country` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ip-country").toString()));
      }
      if (!jsonObj.get("ip-country-code").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ip-country-code` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ip-country-code").toString()));
      }
      if (!jsonObj.get("ip-country-code3").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ip-country-code3` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ip-country-code3").toString()));
      }
      if (!jsonObj.get("ip-region").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ip-region` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ip-region").toString()));
      }
      if (!jsonObj.get("issuer").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `issuer` to be a primitive type in the JSON string but got `%s`", jsonObj.get("issuer").toString()));
      }
      if (!jsonObj.get("issuer-phone").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `issuer-phone` to be a primitive type in the JSON string but got `%s`", jsonObj.get("issuer-phone").toString()));
      }
      if (!jsonObj.get("issuer-website").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `issuer-website` to be a primitive type in the JSON string but got `%s`", jsonObj.get("issuer-website").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!BINLookupResponse.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'BINLookupResponse' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<BINLookupResponse> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(BINLookupResponse.class));

       return (TypeAdapter<T>) new TypeAdapter<BINLookupResponse>() {
           @Override
           public void write(JsonWriter out, BINLookupResponse value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public BINLookupResponse read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of BINLookupResponse given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of BINLookupResponse
   * @throws IOException if the JSON string is invalid with respect to BINLookupResponse
   */
  public static BINLookupResponse fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, BINLookupResponse.class);
  }

  /**
   * Convert an instance of BINLookupResponse to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

