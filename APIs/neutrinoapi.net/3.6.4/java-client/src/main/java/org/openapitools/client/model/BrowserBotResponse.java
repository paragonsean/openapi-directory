/*
 * Neutrino API
 * The general-purpose API
 *
 * The version of the OpenAPI document: 3.6.4
 * Contact: ops@neutrinoapi.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * BrowserBotResponse
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:54:58.398611-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class BrowserBotResponse {
  public static final String SERIALIZED_NAME_CONTENT = "content";
  @SerializedName(SERIALIZED_NAME_CONTENT)
  private String content;

  public static final String SERIALIZED_NAME_ELEMENTS = "elements";
  @SerializedName(SERIALIZED_NAME_ELEMENTS)
  private List<String> elements = new ArrayList<>();

  public static final String SERIALIZED_NAME_ERROR_MESSAGE = "error-message";
  @SerializedName(SERIALIZED_NAME_ERROR_MESSAGE)
  private String errorMessage;

  public static final String SERIALIZED_NAME_EXEC_RESULTS = "exec-results";
  @SerializedName(SERIALIZED_NAME_EXEC_RESULTS)
  private List<String> execResults = new ArrayList<>();

  public static final String SERIALIZED_NAME_HTTP_REDIRECT_URL = "http-redirect-url";
  @SerializedName(SERIALIZED_NAME_HTTP_REDIRECT_URL)
  private String httpRedirectUrl;

  public static final String SERIALIZED_NAME_HTTP_STATUS_CODE = "http-status-code";
  @SerializedName(SERIALIZED_NAME_HTTP_STATUS_CODE)
  private Integer httpStatusCode;

  public static final String SERIALIZED_NAME_HTTP_STATUS_MESSAGE = "http-status-message";
  @SerializedName(SERIALIZED_NAME_HTTP_STATUS_MESSAGE)
  private String httpStatusMessage;

  public static final String SERIALIZED_NAME_IS_ERROR = "is-error";
  @SerializedName(SERIALIZED_NAME_IS_ERROR)
  private Boolean isError;

  public static final String SERIALIZED_NAME_IS_HTTP_OK = "is-http-ok";
  @SerializedName(SERIALIZED_NAME_IS_HTTP_OK)
  private Boolean isHttpOk;

  public static final String SERIALIZED_NAME_IS_HTTP_REDIRECT = "is-http-redirect";
  @SerializedName(SERIALIZED_NAME_IS_HTTP_REDIRECT)
  private Boolean isHttpRedirect;

  public static final String SERIALIZED_NAME_IS_SECURE = "is-secure";
  @SerializedName(SERIALIZED_NAME_IS_SECURE)
  private Boolean isSecure;

  public static final String SERIALIZED_NAME_IS_TIMEOUT = "is-timeout";
  @SerializedName(SERIALIZED_NAME_IS_TIMEOUT)
  private Boolean isTimeout;

  public static final String SERIALIZED_NAME_LANGUAGE_CODE = "language-code";
  @SerializedName(SERIALIZED_NAME_LANGUAGE_CODE)
  private String languageCode;

  public static final String SERIALIZED_NAME_LOAD_TIME = "load-time";
  @SerializedName(SERIALIZED_NAME_LOAD_TIME)
  private Double loadTime;

  public static final String SERIALIZED_NAME_MIME_TYPE = "mime-type";
  @SerializedName(SERIALIZED_NAME_MIME_TYPE)
  private String mimeType;

  public static final String SERIALIZED_NAME_RESPONSE_HEADERS = "response-headers";
  @SerializedName(SERIALIZED_NAME_RESPONSE_HEADERS)
  private Map<String, String> responseHeaders = new HashMap<>();

  public static final String SERIALIZED_NAME_SECURITY_DETAILS = "security-details";
  @SerializedName(SERIALIZED_NAME_SECURITY_DETAILS)
  private Map<String, String> securityDetails = new HashMap<>();

  public static final String SERIALIZED_NAME_SERVER_IP = "server-ip";
  @SerializedName(SERIALIZED_NAME_SERVER_IP)
  private String serverIp;

  public static final String SERIALIZED_NAME_TITLE = "title";
  @SerializedName(SERIALIZED_NAME_TITLE)
  private String title;

  public static final String SERIALIZED_NAME_URL = "url";
  @SerializedName(SERIALIZED_NAME_URL)
  private String url;

  public BrowserBotResponse() {
  }

  public BrowserBotResponse content(String content) {
    this.content = content;
    return this;
  }

  /**
   * The complete raw, decompressed and decoded page content. Usually will be either HTML, JSON or XML
   * @return content
   */
  @javax.annotation.Nonnull
  public String getContent() {
    return content;
  }

  public void setContent(String content) {
    this.content = content;
  }


  public BrowserBotResponse elements(List<String> elements) {
    this.elements = elements;
    return this;
  }

  public BrowserBotResponse addElementsItem(String elementsItem) {
    if (this.elements == null) {
      this.elements = new ArrayList<>();
    }
    this.elements.add(elementsItem);
    return this;
  }

  /**
   * Array containing all the elements matching the supplied selector. &lt;br&gt;Each element object will contain the text content, HTML content and all current element attributes
   * @return elements
   */
  @javax.annotation.Nonnull
  public List<String> getElements() {
    return elements;
  }

  public void setElements(List<String> elements) {
    this.elements = elements;
  }


  public BrowserBotResponse errorMessage(String errorMessage) {
    this.errorMessage = errorMessage;
    return this;
  }

  /**
   * Contains the error message if an error has occurred (&#39;is-error&#39; will be true)
   * @return errorMessage
   */
  @javax.annotation.Nonnull
  public String getErrorMessage() {
    return errorMessage;
  }

  public void setErrorMessage(String errorMessage) {
    this.errorMessage = errorMessage;
  }


  public BrowserBotResponse execResults(List<String> execResults) {
    this.execResults = execResults;
    return this;
  }

  public BrowserBotResponse addExecResultsItem(String execResultsItem) {
    if (this.execResults == null) {
      this.execResults = new ArrayList<>();
    }
    this.execResults.add(execResultsItem);
    return this;
  }

  /**
   * If you executed any JavaScript this array holds the results as objects
   * @return execResults
   */
  @javax.annotation.Nonnull
  public List<String> getExecResults() {
    return execResults;
  }

  public void setExecResults(List<String> execResults) {
    this.execResults = execResults;
  }


  public BrowserBotResponse httpRedirectUrl(String httpRedirectUrl) {
    this.httpRedirectUrl = httpRedirectUrl;
    return this;
  }

  /**
   * The redirected URL if the URL responded with an HTTP redirect
   * @return httpRedirectUrl
   */
  @javax.annotation.Nonnull
  public String getHttpRedirectUrl() {
    return httpRedirectUrl;
  }

  public void setHttpRedirectUrl(String httpRedirectUrl) {
    this.httpRedirectUrl = httpRedirectUrl;
  }


  public BrowserBotResponse httpStatusCode(Integer httpStatusCode) {
    this.httpStatusCode = httpStatusCode;
    return this;
  }

  /**
   * The HTTP status code the URL returned
   * @return httpStatusCode
   */
  @javax.annotation.Nonnull
  public Integer getHttpStatusCode() {
    return httpStatusCode;
  }

  public void setHttpStatusCode(Integer httpStatusCode) {
    this.httpStatusCode = httpStatusCode;
  }


  public BrowserBotResponse httpStatusMessage(String httpStatusMessage) {
    this.httpStatusMessage = httpStatusMessage;
    return this;
  }

  /**
   * The HTTP status message the URL returned
   * @return httpStatusMessage
   */
  @javax.annotation.Nonnull
  public String getHttpStatusMessage() {
    return httpStatusMessage;
  }

  public void setHttpStatusMessage(String httpStatusMessage) {
    this.httpStatusMessage = httpStatusMessage;
  }


  public BrowserBotResponse isError(Boolean isError) {
    this.isError = isError;
    return this;
  }

  /**
   * True if an error has occurred loading the page. Check the &#39;error-message&#39; field for details
   * @return isError
   */
  @javax.annotation.Nonnull
  public Boolean getIsError() {
    return isError;
  }

  public void setIsError(Boolean isError) {
    this.isError = isError;
  }


  public BrowserBotResponse isHttpOk(Boolean isHttpOk) {
    this.isHttpOk = isHttpOk;
    return this;
  }

  /**
   * True if the HTTP status is OK (200)
   * @return isHttpOk
   */
  @javax.annotation.Nonnull
  public Boolean getIsHttpOk() {
    return isHttpOk;
  }

  public void setIsHttpOk(Boolean isHttpOk) {
    this.isHttpOk = isHttpOk;
  }


  public BrowserBotResponse isHttpRedirect(Boolean isHttpRedirect) {
    this.isHttpRedirect = isHttpRedirect;
    return this;
  }

  /**
   * True if the URL responded with an HTTP redirect
   * @return isHttpRedirect
   */
  @javax.annotation.Nonnull
  public Boolean getIsHttpRedirect() {
    return isHttpRedirect;
  }

  public void setIsHttpRedirect(Boolean isHttpRedirect) {
    this.isHttpRedirect = isHttpRedirect;
  }


  public BrowserBotResponse isSecure(Boolean isSecure) {
    this.isSecure = isSecure;
    return this;
  }

  /**
   * True if the page is secured using TLS/SSL
   * @return isSecure
   */
  @javax.annotation.Nonnull
  public Boolean getIsSecure() {
    return isSecure;
  }

  public void setIsSecure(Boolean isSecure) {
    this.isSecure = isSecure;
  }


  public BrowserBotResponse isTimeout(Boolean isTimeout) {
    this.isTimeout = isTimeout;
    return this;
  }

  /**
   * True if a timeout occurred while loading the page. You can set the timeout with the request parameter &#39;timeout&#39;
   * @return isTimeout
   */
  @javax.annotation.Nonnull
  public Boolean getIsTimeout() {
    return isTimeout;
  }

  public void setIsTimeout(Boolean isTimeout) {
    this.isTimeout = isTimeout;
  }


  public BrowserBotResponse languageCode(String languageCode) {
    this.languageCode = languageCode;
    return this;
  }

  /**
   * The ISO 2-letter language code of the page. Extracted from either the HTML document or via HTTP headers
   * @return languageCode
   */
  @javax.annotation.Nonnull
  public String getLanguageCode() {
    return languageCode;
  }

  public void setLanguageCode(String languageCode) {
    this.languageCode = languageCode;
  }


  public BrowserBotResponse loadTime(Double loadTime) {
    this.loadTime = loadTime;
    return this;
  }

  /**
   * The number of seconds taken to load the page (from initial request until DOM ready)
   * @return loadTime
   */
  @javax.annotation.Nonnull
  public Double getLoadTime() {
    return loadTime;
  }

  public void setLoadTime(Double loadTime) {
    this.loadTime = loadTime;
  }


  public BrowserBotResponse mimeType(String mimeType) {
    this.mimeType = mimeType;
    return this;
  }

  /**
   * The document MIME type
   * @return mimeType
   */
  @javax.annotation.Nonnull
  public String getMimeType() {
    return mimeType;
  }

  public void setMimeType(String mimeType) {
    this.mimeType = mimeType;
  }


  public BrowserBotResponse responseHeaders(Map<String, String> responseHeaders) {
    this.responseHeaders = responseHeaders;
    return this;
  }

  public BrowserBotResponse putResponseHeadersItem(String key, String responseHeadersItem) {
    if (this.responseHeaders == null) {
      this.responseHeaders = new HashMap<>();
    }
    this.responseHeaders.put(key, responseHeadersItem);
    return this;
  }

  /**
   * Map containing all the HTTP response headers the URL responded with
   * @return responseHeaders
   */
  @javax.annotation.Nonnull
  public Map<String, String> getResponseHeaders() {
    return responseHeaders;
  }

  public void setResponseHeaders(Map<String, String> responseHeaders) {
    this.responseHeaders = responseHeaders;
  }


  public BrowserBotResponse securityDetails(Map<String, String> securityDetails) {
    this.securityDetails = securityDetails;
    return this;
  }

  public BrowserBotResponse putSecurityDetailsItem(String key, String securityDetailsItem) {
    if (this.securityDetails == null) {
      this.securityDetails = new HashMap<>();
    }
    this.securityDetails.put(key, securityDetailsItem);
    return this;
  }

  /**
   * Map containing details of the TLS/SSL setup
   * @return securityDetails
   */
  @javax.annotation.Nonnull
  public Map<String, String> getSecurityDetails() {
    return securityDetails;
  }

  public void setSecurityDetails(Map<String, String> securityDetails) {
    this.securityDetails = securityDetails;
  }


  public BrowserBotResponse serverIp(String serverIp) {
    this.serverIp = serverIp;
    return this;
  }

  /**
   * The HTTP servers IP address
   * @return serverIp
   */
  @javax.annotation.Nonnull
  public String getServerIp() {
    return serverIp;
  }

  public void setServerIp(String serverIp) {
    this.serverIp = serverIp;
  }


  public BrowserBotResponse title(String title) {
    this.title = title;
    return this;
  }

  /**
   * The document title
   * @return title
   */
  @javax.annotation.Nonnull
  public String getTitle() {
    return title;
  }

  public void setTitle(String title) {
    this.title = title;
  }


  public BrowserBotResponse url(String url) {
    this.url = url;
    return this;
  }

  /**
   * The page URL
   * @return url
   */
  @javax.annotation.Nonnull
  public String getUrl() {
    return url;
  }

  public void setUrl(String url) {
    this.url = url;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    BrowserBotResponse browserBotResponse = (BrowserBotResponse) o;
    return Objects.equals(this.content, browserBotResponse.content) &&
        Objects.equals(this.elements, browserBotResponse.elements) &&
        Objects.equals(this.errorMessage, browserBotResponse.errorMessage) &&
        Objects.equals(this.execResults, browserBotResponse.execResults) &&
        Objects.equals(this.httpRedirectUrl, browserBotResponse.httpRedirectUrl) &&
        Objects.equals(this.httpStatusCode, browserBotResponse.httpStatusCode) &&
        Objects.equals(this.httpStatusMessage, browserBotResponse.httpStatusMessage) &&
        Objects.equals(this.isError, browserBotResponse.isError) &&
        Objects.equals(this.isHttpOk, browserBotResponse.isHttpOk) &&
        Objects.equals(this.isHttpRedirect, browserBotResponse.isHttpRedirect) &&
        Objects.equals(this.isSecure, browserBotResponse.isSecure) &&
        Objects.equals(this.isTimeout, browserBotResponse.isTimeout) &&
        Objects.equals(this.languageCode, browserBotResponse.languageCode) &&
        Objects.equals(this.loadTime, browserBotResponse.loadTime) &&
        Objects.equals(this.mimeType, browserBotResponse.mimeType) &&
        Objects.equals(this.responseHeaders, browserBotResponse.responseHeaders) &&
        Objects.equals(this.securityDetails, browserBotResponse.securityDetails) &&
        Objects.equals(this.serverIp, browserBotResponse.serverIp) &&
        Objects.equals(this.title, browserBotResponse.title) &&
        Objects.equals(this.url, browserBotResponse.url);
  }

  @Override
  public int hashCode() {
    return Objects.hash(content, elements, errorMessage, execResults, httpRedirectUrl, httpStatusCode, httpStatusMessage, isError, isHttpOk, isHttpRedirect, isSecure, isTimeout, languageCode, loadTime, mimeType, responseHeaders, securityDetails, serverIp, title, url);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class BrowserBotResponse {\n");
    sb.append("    content: ").append(toIndentedString(content)).append("\n");
    sb.append("    elements: ").append(toIndentedString(elements)).append("\n");
    sb.append("    errorMessage: ").append(toIndentedString(errorMessage)).append("\n");
    sb.append("    execResults: ").append(toIndentedString(execResults)).append("\n");
    sb.append("    httpRedirectUrl: ").append(toIndentedString(httpRedirectUrl)).append("\n");
    sb.append("    httpStatusCode: ").append(toIndentedString(httpStatusCode)).append("\n");
    sb.append("    httpStatusMessage: ").append(toIndentedString(httpStatusMessage)).append("\n");
    sb.append("    isError: ").append(toIndentedString(isError)).append("\n");
    sb.append("    isHttpOk: ").append(toIndentedString(isHttpOk)).append("\n");
    sb.append("    isHttpRedirect: ").append(toIndentedString(isHttpRedirect)).append("\n");
    sb.append("    isSecure: ").append(toIndentedString(isSecure)).append("\n");
    sb.append("    isTimeout: ").append(toIndentedString(isTimeout)).append("\n");
    sb.append("    languageCode: ").append(toIndentedString(languageCode)).append("\n");
    sb.append("    loadTime: ").append(toIndentedString(loadTime)).append("\n");
    sb.append("    mimeType: ").append(toIndentedString(mimeType)).append("\n");
    sb.append("    responseHeaders: ").append(toIndentedString(responseHeaders)).append("\n");
    sb.append("    securityDetails: ").append(toIndentedString(securityDetails)).append("\n");
    sb.append("    serverIp: ").append(toIndentedString(serverIp)).append("\n");
    sb.append("    title: ").append(toIndentedString(title)).append("\n");
    sb.append("    url: ").append(toIndentedString(url)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("content");
    openapiFields.add("elements");
    openapiFields.add("error-message");
    openapiFields.add("exec-results");
    openapiFields.add("http-redirect-url");
    openapiFields.add("http-status-code");
    openapiFields.add("http-status-message");
    openapiFields.add("is-error");
    openapiFields.add("is-http-ok");
    openapiFields.add("is-http-redirect");
    openapiFields.add("is-secure");
    openapiFields.add("is-timeout");
    openapiFields.add("language-code");
    openapiFields.add("load-time");
    openapiFields.add("mime-type");
    openapiFields.add("response-headers");
    openapiFields.add("security-details");
    openapiFields.add("server-ip");
    openapiFields.add("title");
    openapiFields.add("url");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("content");
    openapiRequiredFields.add("elements");
    openapiRequiredFields.add("error-message");
    openapiRequiredFields.add("exec-results");
    openapiRequiredFields.add("http-redirect-url");
    openapiRequiredFields.add("http-status-code");
    openapiRequiredFields.add("http-status-message");
    openapiRequiredFields.add("is-error");
    openapiRequiredFields.add("is-http-ok");
    openapiRequiredFields.add("is-http-redirect");
    openapiRequiredFields.add("is-secure");
    openapiRequiredFields.add("is-timeout");
    openapiRequiredFields.add("language-code");
    openapiRequiredFields.add("load-time");
    openapiRequiredFields.add("mime-type");
    openapiRequiredFields.add("response-headers");
    openapiRequiredFields.add("security-details");
    openapiRequiredFields.add("server-ip");
    openapiRequiredFields.add("title");
    openapiRequiredFields.add("url");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to BrowserBotResponse
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!BrowserBotResponse.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in BrowserBotResponse is not found in the empty JSON string", BrowserBotResponse.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!BrowserBotResponse.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `BrowserBotResponse` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : BrowserBotResponse.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("content").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `content` to be a primitive type in the JSON string but got `%s`", jsonObj.get("content").toString()));
      }
      // ensure the required json array is present
      if (jsonObj.get("elements") == null) {
        throw new IllegalArgumentException("Expected the field `linkedContent` to be an array in the JSON string but got `null`");
      } else if (!jsonObj.get("elements").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `elements` to be an array in the JSON string but got `%s`", jsonObj.get("elements").toString()));
      }
      if (!jsonObj.get("error-message").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `error-message` to be a primitive type in the JSON string but got `%s`", jsonObj.get("error-message").toString()));
      }
      // ensure the required json array is present
      if (jsonObj.get("exec-results") == null) {
        throw new IllegalArgumentException("Expected the field `linkedContent` to be an array in the JSON string but got `null`");
      } else if (!jsonObj.get("exec-results").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `exec-results` to be an array in the JSON string but got `%s`", jsonObj.get("exec-results").toString()));
      }
      if (!jsonObj.get("http-redirect-url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `http-redirect-url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("http-redirect-url").toString()));
      }
      if (!jsonObj.get("http-status-message").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `http-status-message` to be a primitive type in the JSON string but got `%s`", jsonObj.get("http-status-message").toString()));
      }
      if (!jsonObj.get("language-code").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `language-code` to be a primitive type in the JSON string but got `%s`", jsonObj.get("language-code").toString()));
      }
      if (!jsonObj.get("mime-type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `mime-type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("mime-type").toString()));
      }
      if (!jsonObj.get("server-ip").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `server-ip` to be a primitive type in the JSON string but got `%s`", jsonObj.get("server-ip").toString()));
      }
      if (!jsonObj.get("title").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `title` to be a primitive type in the JSON string but got `%s`", jsonObj.get("title").toString()));
      }
      if (!jsonObj.get("url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("url").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!BrowserBotResponse.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'BrowserBotResponse' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<BrowserBotResponse> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(BrowserBotResponse.class));

       return (TypeAdapter<T>) new TypeAdapter<BrowserBotResponse>() {
           @Override
           public void write(JsonWriter out, BrowserBotResponse value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public BrowserBotResponse read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of BrowserBotResponse given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of BrowserBotResponse
   * @throws IOException if the JSON string is invalid with respect to BrowserBotResponse
   */
  public static BrowserBotResponse fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, BrowserBotResponse.class);
  }

  /**
   * Convert an instance of BrowserBotResponse to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

