/*
 * Neutrino API
 * The general-purpose API
 *
 * The version of the OpenAPI document: 3.6.4
 * Contact: ops@neutrinoapi.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.BlocklistSensor;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * IPBlocklistResponse
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:54:58.398611-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class IPBlocklistResponse {
  public static final String SERIALIZED_NAME_BLOCKLISTS = "blocklists";
  @SerializedName(SERIALIZED_NAME_BLOCKLISTS)
  private List<String> blocklists = new ArrayList<>();

  public static final String SERIALIZED_NAME_CIDR = "cidr";
  @SerializedName(SERIALIZED_NAME_CIDR)
  private String cidr;

  public static final String SERIALIZED_NAME_IP = "ip";
  @SerializedName(SERIALIZED_NAME_IP)
  private String ip;

  public static final String SERIALIZED_NAME_IS_BOT = "is-bot";
  @SerializedName(SERIALIZED_NAME_IS_BOT)
  private Boolean isBot;

  public static final String SERIALIZED_NAME_IS_DSHIELD = "is-dshield";
  @SerializedName(SERIALIZED_NAME_IS_DSHIELD)
  private Boolean isDshield;

  public static final String SERIALIZED_NAME_IS_EXPLOIT_BOT = "is-exploit-bot";
  @SerializedName(SERIALIZED_NAME_IS_EXPLOIT_BOT)
  private Boolean isExploitBot;

  public static final String SERIALIZED_NAME_IS_HIJACKED = "is-hijacked";
  @SerializedName(SERIALIZED_NAME_IS_HIJACKED)
  private Boolean isHijacked;

  public static final String SERIALIZED_NAME_IS_LISTED = "is-listed";
  @SerializedName(SERIALIZED_NAME_IS_LISTED)
  private Boolean isListed;

  public static final String SERIALIZED_NAME_IS_MALWARE = "is-malware";
  @SerializedName(SERIALIZED_NAME_IS_MALWARE)
  private Boolean isMalware;

  public static final String SERIALIZED_NAME_IS_PROXY = "is-proxy";
  @SerializedName(SERIALIZED_NAME_IS_PROXY)
  private Boolean isProxy;

  public static final String SERIALIZED_NAME_IS_SPAM_BOT = "is-spam-bot";
  @SerializedName(SERIALIZED_NAME_IS_SPAM_BOT)
  private Boolean isSpamBot;

  public static final String SERIALIZED_NAME_IS_SPIDER = "is-spider";
  @SerializedName(SERIALIZED_NAME_IS_SPIDER)
  private Boolean isSpider;

  public static final String SERIALIZED_NAME_IS_SPYWARE = "is-spyware";
  @SerializedName(SERIALIZED_NAME_IS_SPYWARE)
  private Boolean isSpyware;

  public static final String SERIALIZED_NAME_IS_TOR = "is-tor";
  @SerializedName(SERIALIZED_NAME_IS_TOR)
  private Boolean isTor;

  public static final String SERIALIZED_NAME_IS_VPN = "is-vpn";
  @SerializedName(SERIALIZED_NAME_IS_VPN)
  private Boolean isVpn;

  public static final String SERIALIZED_NAME_LAST_SEEN = "last-seen";
  @SerializedName(SERIALIZED_NAME_LAST_SEEN)
  private Integer lastSeen;

  public static final String SERIALIZED_NAME_LIST_COUNT = "list-count";
  @SerializedName(SERIALIZED_NAME_LIST_COUNT)
  private Integer listCount;

  public static final String SERIALIZED_NAME_SENSORS = "sensors";
  @SerializedName(SERIALIZED_NAME_SENSORS)
  private List<BlocklistSensor> sensors = new ArrayList<>();

  public IPBlocklistResponse() {
  }

  public IPBlocklistResponse blocklists(List<String> blocklists) {
    this.blocklists = blocklists;
    return this;
  }

  public IPBlocklistResponse addBlocklistsItem(String blocklistsItem) {
    if (this.blocklists == null) {
      this.blocklists = new ArrayList<>();
    }
    this.blocklists.add(blocklistsItem);
    return this;
  }

  /**
   * An array of strings indicating which blocklist categories this IP is listed on
   * @return blocklists
   */
  @javax.annotation.Nonnull
  public List<String> getBlocklists() {
    return blocklists;
  }

  public void setBlocklists(List<String> blocklists) {
    this.blocklists = blocklists;
  }


  public IPBlocklistResponse cidr(String cidr) {
    this.cidr = cidr;
    return this;
  }

  /**
   * The CIDR address for this listing (only set if the IP is listed)
   * @return cidr
   */
  @javax.annotation.Nonnull
  public String getCidr() {
    return cidr;
  }

  public void setCidr(String cidr) {
    this.cidr = cidr;
  }


  public IPBlocklistResponse ip(String ip) {
    this.ip = ip;
    return this;
  }

  /**
   * The IP address
   * @return ip
   */
  @javax.annotation.Nonnull
  public String getIp() {
    return ip;
  }

  public void setIp(String ip) {
    this.ip = ip;
  }


  public IPBlocklistResponse isBot(Boolean isBot) {
    this.isBot = isBot;
    return this;
  }

  /**
   * IP is hosting a malicious bot or is part of a botnet. This is a broad category which includes brute-force crackers
   * @return isBot
   */
  @javax.annotation.Nonnull
  public Boolean getIsBot() {
    return isBot;
  }

  public void setIsBot(Boolean isBot) {
    this.isBot = isBot;
  }


  public IPBlocklistResponse isDshield(Boolean isDshield) {
    this.isDshield = isDshield;
    return this;
  }

  /**
   * IP has been flagged as a significant attack source by DShield (dshield.org)
   * @return isDshield
   */
  @javax.annotation.Nonnull
  public Boolean getIsDshield() {
    return isDshield;
  }

  public void setIsDshield(Boolean isDshield) {
    this.isDshield = isDshield;
  }


  public IPBlocklistResponse isExploitBot(Boolean isExploitBot) {
    this.isExploitBot = isExploitBot;
    return this;
  }

  /**
   * IP is hosting an exploit finding bot or is running exploit scanning software
   * @return isExploitBot
   */
  @javax.annotation.Nonnull
  public Boolean getIsExploitBot() {
    return isExploitBot;
  }

  public void setIsExploitBot(Boolean isExploitBot) {
    this.isExploitBot = isExploitBot;
  }


  public IPBlocklistResponse isHijacked(Boolean isHijacked) {
    this.isHijacked = isHijacked;
    return this;
  }

  /**
   * IP is part of a hijacked netblock or a netblock controlled by a criminal organization
   * @return isHijacked
   */
  @javax.annotation.Nonnull
  public Boolean getIsHijacked() {
    return isHijacked;
  }

  public void setIsHijacked(Boolean isHijacked) {
    this.isHijacked = isHijacked;
  }


  public IPBlocklistResponse isListed(Boolean isListed) {
    this.isListed = isListed;
    return this;
  }

  /**
   * Is this IP on a blocklist
   * @return isListed
   */
  @javax.annotation.Nonnull
  public Boolean getIsListed() {
    return isListed;
  }

  public void setIsListed(Boolean isListed) {
    this.isListed = isListed;
  }


  public IPBlocklistResponse isMalware(Boolean isMalware) {
    this.isMalware = isMalware;
    return this;
  }

  /**
   * IP is involved in distributing or is running malware
   * @return isMalware
   */
  @javax.annotation.Nonnull
  public Boolean getIsMalware() {
    return isMalware;
  }

  public void setIsMalware(Boolean isMalware) {
    this.isMalware = isMalware;
  }


  public IPBlocklistResponse isProxy(Boolean isProxy) {
    this.isProxy = isProxy;
    return this;
  }

  /**
   * IP has been detected as an anonymous web proxy or anonymous HTTP proxy
   * @return isProxy
   */
  @javax.annotation.Nonnull
  public Boolean getIsProxy() {
    return isProxy;
  }

  public void setIsProxy(Boolean isProxy) {
    this.isProxy = isProxy;
  }


  public IPBlocklistResponse isSpamBot(Boolean isSpamBot) {
    this.isSpamBot = isSpamBot;
    return this;
  }

  /**
   * IP address is hosting a spam bot, comment spamming or any other spamming type software
   * @return isSpamBot
   */
  @javax.annotation.Nonnull
  public Boolean getIsSpamBot() {
    return isSpamBot;
  }

  public void setIsSpamBot(Boolean isSpamBot) {
    this.isSpamBot = isSpamBot;
  }


  public IPBlocklistResponse isSpider(Boolean isSpider) {
    this.isSpider = isSpider;
    return this;
  }

  /**
   * IP is running a hostile web spider / web crawler
   * @return isSpider
   */
  @javax.annotation.Nonnull
  public Boolean getIsSpider() {
    return isSpider;
  }

  public void setIsSpider(Boolean isSpider) {
    this.isSpider = isSpider;
  }


  public IPBlocklistResponse isSpyware(Boolean isSpyware) {
    this.isSpyware = isSpyware;
    return this;
  }

  /**
   * IP is involved in distributing or is running spyware
   * @return isSpyware
   */
  @javax.annotation.Nonnull
  public Boolean getIsSpyware() {
    return isSpyware;
  }

  public void setIsSpyware(Boolean isSpyware) {
    this.isSpyware = isSpyware;
  }


  public IPBlocklistResponse isTor(Boolean isTor) {
    this.isTor = isTor;
    return this;
  }

  /**
   * IP is a Tor node or running a Tor related service
   * @return isTor
   */
  @javax.annotation.Nonnull
  public Boolean getIsTor() {
    return isTor;
  }

  public void setIsTor(Boolean isTor) {
    this.isTor = isTor;
  }


  public IPBlocklistResponse isVpn(Boolean isVpn) {
    this.isVpn = isVpn;
    return this;
  }

  /**
   * IP belongs to a public VPN provider (only set if the &#39;vpn-lookup&#39; option is enabled)
   * @return isVpn
   */
  @javax.annotation.Nonnull
  public Boolean getIsVpn() {
    return isVpn;
  }

  public void setIsVpn(Boolean isVpn) {
    this.isVpn = isVpn;
  }


  public IPBlocklistResponse lastSeen(Integer lastSeen) {
    this.lastSeen = lastSeen;
    return this;
  }

  /**
   * The unix time when this IP was last seen on any blocklist. IPs are automatically removed after 7 days therefor this value will never be older than 7 days
   * @return lastSeen
   */
  @javax.annotation.Nonnull
  public Integer getLastSeen() {
    return lastSeen;
  }

  public void setLastSeen(Integer lastSeen) {
    this.lastSeen = lastSeen;
  }


  public IPBlocklistResponse listCount(Integer listCount) {
    this.listCount = listCount;
    return this;
  }

  /**
   * The number of blocklists the IP is listed on
   * @return listCount
   */
  @javax.annotation.Nonnull
  public Integer getListCount() {
    return listCount;
  }

  public void setListCount(Integer listCount) {
    this.listCount = listCount;
  }


  public IPBlocklistResponse sensors(List<BlocklistSensor> sensors) {
    this.sensors = sensors;
    return this;
  }

  public IPBlocklistResponse addSensorsItem(BlocklistSensor sensorsItem) {
    if (this.sensors == null) {
      this.sensors = new ArrayList<>();
    }
    this.sensors.add(sensorsItem);
    return this;
  }

  /**
   * An array of objects containing details on which specific sensors detected the IP
   * @return sensors
   */
  @javax.annotation.Nonnull
  public List<BlocklistSensor> getSensors() {
    return sensors;
  }

  public void setSensors(List<BlocklistSensor> sensors) {
    this.sensors = sensors;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    IPBlocklistResponse ipBlocklistResponse = (IPBlocklistResponse) o;
    return Objects.equals(this.blocklists, ipBlocklistResponse.blocklists) &&
        Objects.equals(this.cidr, ipBlocklistResponse.cidr) &&
        Objects.equals(this.ip, ipBlocklistResponse.ip) &&
        Objects.equals(this.isBot, ipBlocklistResponse.isBot) &&
        Objects.equals(this.isDshield, ipBlocklistResponse.isDshield) &&
        Objects.equals(this.isExploitBot, ipBlocklistResponse.isExploitBot) &&
        Objects.equals(this.isHijacked, ipBlocklistResponse.isHijacked) &&
        Objects.equals(this.isListed, ipBlocklistResponse.isListed) &&
        Objects.equals(this.isMalware, ipBlocklistResponse.isMalware) &&
        Objects.equals(this.isProxy, ipBlocklistResponse.isProxy) &&
        Objects.equals(this.isSpamBot, ipBlocklistResponse.isSpamBot) &&
        Objects.equals(this.isSpider, ipBlocklistResponse.isSpider) &&
        Objects.equals(this.isSpyware, ipBlocklistResponse.isSpyware) &&
        Objects.equals(this.isTor, ipBlocklistResponse.isTor) &&
        Objects.equals(this.isVpn, ipBlocklistResponse.isVpn) &&
        Objects.equals(this.lastSeen, ipBlocklistResponse.lastSeen) &&
        Objects.equals(this.listCount, ipBlocklistResponse.listCount) &&
        Objects.equals(this.sensors, ipBlocklistResponse.sensors);
  }

  @Override
  public int hashCode() {
    return Objects.hash(blocklists, cidr, ip, isBot, isDshield, isExploitBot, isHijacked, isListed, isMalware, isProxy, isSpamBot, isSpider, isSpyware, isTor, isVpn, lastSeen, listCount, sensors);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class IPBlocklistResponse {\n");
    sb.append("    blocklists: ").append(toIndentedString(blocklists)).append("\n");
    sb.append("    cidr: ").append(toIndentedString(cidr)).append("\n");
    sb.append("    ip: ").append(toIndentedString(ip)).append("\n");
    sb.append("    isBot: ").append(toIndentedString(isBot)).append("\n");
    sb.append("    isDshield: ").append(toIndentedString(isDshield)).append("\n");
    sb.append("    isExploitBot: ").append(toIndentedString(isExploitBot)).append("\n");
    sb.append("    isHijacked: ").append(toIndentedString(isHijacked)).append("\n");
    sb.append("    isListed: ").append(toIndentedString(isListed)).append("\n");
    sb.append("    isMalware: ").append(toIndentedString(isMalware)).append("\n");
    sb.append("    isProxy: ").append(toIndentedString(isProxy)).append("\n");
    sb.append("    isSpamBot: ").append(toIndentedString(isSpamBot)).append("\n");
    sb.append("    isSpider: ").append(toIndentedString(isSpider)).append("\n");
    sb.append("    isSpyware: ").append(toIndentedString(isSpyware)).append("\n");
    sb.append("    isTor: ").append(toIndentedString(isTor)).append("\n");
    sb.append("    isVpn: ").append(toIndentedString(isVpn)).append("\n");
    sb.append("    lastSeen: ").append(toIndentedString(lastSeen)).append("\n");
    sb.append("    listCount: ").append(toIndentedString(listCount)).append("\n");
    sb.append("    sensors: ").append(toIndentedString(sensors)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("blocklists");
    openapiFields.add("cidr");
    openapiFields.add("ip");
    openapiFields.add("is-bot");
    openapiFields.add("is-dshield");
    openapiFields.add("is-exploit-bot");
    openapiFields.add("is-hijacked");
    openapiFields.add("is-listed");
    openapiFields.add("is-malware");
    openapiFields.add("is-proxy");
    openapiFields.add("is-spam-bot");
    openapiFields.add("is-spider");
    openapiFields.add("is-spyware");
    openapiFields.add("is-tor");
    openapiFields.add("is-vpn");
    openapiFields.add("last-seen");
    openapiFields.add("list-count");
    openapiFields.add("sensors");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("blocklists");
    openapiRequiredFields.add("cidr");
    openapiRequiredFields.add("ip");
    openapiRequiredFields.add("is-bot");
    openapiRequiredFields.add("is-dshield");
    openapiRequiredFields.add("is-exploit-bot");
    openapiRequiredFields.add("is-hijacked");
    openapiRequiredFields.add("is-listed");
    openapiRequiredFields.add("is-malware");
    openapiRequiredFields.add("is-proxy");
    openapiRequiredFields.add("is-spam-bot");
    openapiRequiredFields.add("is-spider");
    openapiRequiredFields.add("is-spyware");
    openapiRequiredFields.add("is-tor");
    openapiRequiredFields.add("is-vpn");
    openapiRequiredFields.add("last-seen");
    openapiRequiredFields.add("list-count");
    openapiRequiredFields.add("sensors");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to IPBlocklistResponse
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!IPBlocklistResponse.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in IPBlocklistResponse is not found in the empty JSON string", IPBlocklistResponse.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!IPBlocklistResponse.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `IPBlocklistResponse` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : IPBlocklistResponse.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // ensure the required json array is present
      if (jsonObj.get("blocklists") == null) {
        throw new IllegalArgumentException("Expected the field `linkedContent` to be an array in the JSON string but got `null`");
      } else if (!jsonObj.get("blocklists").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `blocklists` to be an array in the JSON string but got `%s`", jsonObj.get("blocklists").toString()));
      }
      if (!jsonObj.get("cidr").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `cidr` to be a primitive type in the JSON string but got `%s`", jsonObj.get("cidr").toString()));
      }
      if (!jsonObj.get("ip").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ip` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ip").toString()));
      }
      // ensure the json data is an array
      if (!jsonObj.get("sensors").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `sensors` to be an array in the JSON string but got `%s`", jsonObj.get("sensors").toString()));
      }

      JsonArray jsonArraysensors = jsonObj.getAsJsonArray("sensors");
      // validate the required field `sensors` (array)
      for (int i = 0; i < jsonArraysensors.size(); i++) {
        BlocklistSensor.validateJsonElement(jsonArraysensors.get(i));
      };
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!IPBlocklistResponse.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'IPBlocklistResponse' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<IPBlocklistResponse> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(IPBlocklistResponse.class));

       return (TypeAdapter<T>) new TypeAdapter<IPBlocklistResponse>() {
           @Override
           public void write(JsonWriter out, IPBlocklistResponse value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public IPBlocklistResponse read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of IPBlocklistResponse given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of IPBlocklistResponse
   * @throws IOException if the JSON string is invalid with respect to IPBlocklistResponse
   */
  public static IPBlocklistResponse fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, IPBlocklistResponse.class);
  }

  /**
   * Convert an instance of IPBlocklistResponse to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

