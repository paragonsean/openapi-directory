/*
 * Neutrino API
 * The general-purpose API
 *
 * The version of the OpenAPI document: 3.6.4
 * Contact: ops@neutrinoapi.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.APIError;
import org.openapitools.client.model.BrowserBotResponse;
import java.io.File;
import org.openapitools.client.model.URLInfoResponse;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class WwwApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public WwwApi() {
        this(Configuration.getDefaultApiClient());
    }

    public WwwApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for browserBot
     * @param url The URL to load (required)
     * @param delay Delay in seconds to wait before capturing any page data, executing selectors or JavaScript (optional, default to 3)
     * @param exec Execute JavaScript on the website. This parameter accepts JavaScript as either a string containing JavaScript or for sending multiple separate statements a JSON array or POST array can also be used. If a statement returns any value it will be returned in the &#39;exec-results&#39; response. You can also use the following specially defined user interaction functions: &lt;br&gt; &lt;br&gt; &lt;div&gt; sleep(seconds); Just wait/sleep for the specified number of seconds. &lt;br&gt;click(&#39;selector&#39;); Click on the first element matching the given selector. &lt;br&gt;focus(&#39;selector&#39;); Focus on the first element matching the given selector. &lt;br&gt;keys(&#39;characters&#39;); Send the specified keyboard characters. Use click() or focus() first to send keys to a specific element. &lt;br&gt;enter(); Send the Enter key. &lt;br&gt;tab(); Send the Tab key. &lt;br&gt; &lt;/div&gt; (optional)
     * @param ignoreCertificateErrors Ignore any TLS/SSL certificate errors and load the page anyway (optional, default to false)
     * @param selector Extract content from the page DOM using this selector. Commonly known as a CSS selector, you can find a good reference &lt;a href&#x3D;\\\&quot;https://www.w3schools.com/cssref/css_selectors.asp\\\&quot;&gt;here&lt;/a&gt; (optional)
     * @param timeout Timeout in seconds. Give up if still trying to load the page after this number of seconds (optional, default to 30)
     * @param userAgent Override the browsers default user-agent string with this one (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Your API request has been rejected. Check error code for details </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> You have failed to authenticate </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> We messed up, sorry! Your request has caused a fatal exception </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> We messed up, sorry! Your request has caused an error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call browserBotCall(String url, Integer delay, List<String> exec, Boolean ignoreCertificateErrors, String selector, Integer timeout, String userAgent, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/browser-bot";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (delay != null) {
            localVarFormParams.put("delay", delay);
        }

        if (exec != null) {
            localVarFormParams.put("exec", exec);
        }

        if (ignoreCertificateErrors != null) {
            localVarFormParams.put("ignore-certificate-errors", ignoreCertificateErrors);
        }

        if (selector != null) {
            localVarFormParams.put("selector", selector);
        }

        if (timeout != null) {
            localVarFormParams.put("timeout", timeout);
        }

        if (url != null) {
            localVarFormParams.put("url", url);
        }

        if (userAgent != null) {
            localVarFormParams.put("user-agent", userAgent);
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/x-www-form-urlencoded"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api-key", "user-id" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call browserBotValidateBeforeCall(String url, Integer delay, List<String> exec, Boolean ignoreCertificateErrors, String selector, Integer timeout, String userAgent, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'url' is set
        if (url == null) {
            throw new ApiException("Missing the required parameter 'url' when calling browserBot(Async)");
        }

        return browserBotCall(url, delay, exec, ignoreCertificateErrors, selector, timeout, userAgent, _callback);

    }

    /**
     * Browser Bot
     * Browser bot can extract content, interact with keyboard and mouse events, and execute JavaScript on a website
     * @param url The URL to load (required)
     * @param delay Delay in seconds to wait before capturing any page data, executing selectors or JavaScript (optional, default to 3)
     * @param exec Execute JavaScript on the website. This parameter accepts JavaScript as either a string containing JavaScript or for sending multiple separate statements a JSON array or POST array can also be used. If a statement returns any value it will be returned in the &#39;exec-results&#39; response. You can also use the following specially defined user interaction functions: &lt;br&gt; &lt;br&gt; &lt;div&gt; sleep(seconds); Just wait/sleep for the specified number of seconds. &lt;br&gt;click(&#39;selector&#39;); Click on the first element matching the given selector. &lt;br&gt;focus(&#39;selector&#39;); Focus on the first element matching the given selector. &lt;br&gt;keys(&#39;characters&#39;); Send the specified keyboard characters. Use click() or focus() first to send keys to a specific element. &lt;br&gt;enter(); Send the Enter key. &lt;br&gt;tab(); Send the Tab key. &lt;br&gt; &lt;/div&gt; (optional)
     * @param ignoreCertificateErrors Ignore any TLS/SSL certificate errors and load the page anyway (optional, default to false)
     * @param selector Extract content from the page DOM using this selector. Commonly known as a CSS selector, you can find a good reference &lt;a href&#x3D;\\\&quot;https://www.w3schools.com/cssref/css_selectors.asp\\\&quot;&gt;here&lt;/a&gt; (optional)
     * @param timeout Timeout in seconds. Give up if still trying to load the page after this number of seconds (optional, default to 30)
     * @param userAgent Override the browsers default user-agent string with this one (optional)
     * @return BrowserBotResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Your API request has been rejected. Check error code for details </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> You have failed to authenticate </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> We messed up, sorry! Your request has caused a fatal exception </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> We messed up, sorry! Your request has caused an error </td><td>  -  </td></tr>
     </table>
     */
    public BrowserBotResponse browserBot(String url, Integer delay, List<String> exec, Boolean ignoreCertificateErrors, String selector, Integer timeout, String userAgent) throws ApiException {
        ApiResponse<BrowserBotResponse> localVarResp = browserBotWithHttpInfo(url, delay, exec, ignoreCertificateErrors, selector, timeout, userAgent);
        return localVarResp.getData();
    }

    /**
     * Browser Bot
     * Browser bot can extract content, interact with keyboard and mouse events, and execute JavaScript on a website
     * @param url The URL to load (required)
     * @param delay Delay in seconds to wait before capturing any page data, executing selectors or JavaScript (optional, default to 3)
     * @param exec Execute JavaScript on the website. This parameter accepts JavaScript as either a string containing JavaScript or for sending multiple separate statements a JSON array or POST array can also be used. If a statement returns any value it will be returned in the &#39;exec-results&#39; response. You can also use the following specially defined user interaction functions: &lt;br&gt; &lt;br&gt; &lt;div&gt; sleep(seconds); Just wait/sleep for the specified number of seconds. &lt;br&gt;click(&#39;selector&#39;); Click on the first element matching the given selector. &lt;br&gt;focus(&#39;selector&#39;); Focus on the first element matching the given selector. &lt;br&gt;keys(&#39;characters&#39;); Send the specified keyboard characters. Use click() or focus() first to send keys to a specific element. &lt;br&gt;enter(); Send the Enter key. &lt;br&gt;tab(); Send the Tab key. &lt;br&gt; &lt;/div&gt; (optional)
     * @param ignoreCertificateErrors Ignore any TLS/SSL certificate errors and load the page anyway (optional, default to false)
     * @param selector Extract content from the page DOM using this selector. Commonly known as a CSS selector, you can find a good reference &lt;a href&#x3D;\\\&quot;https://www.w3schools.com/cssref/css_selectors.asp\\\&quot;&gt;here&lt;/a&gt; (optional)
     * @param timeout Timeout in seconds. Give up if still trying to load the page after this number of seconds (optional, default to 30)
     * @param userAgent Override the browsers default user-agent string with this one (optional)
     * @return ApiResponse&lt;BrowserBotResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Your API request has been rejected. Check error code for details </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> You have failed to authenticate </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> We messed up, sorry! Your request has caused a fatal exception </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> We messed up, sorry! Your request has caused an error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<BrowserBotResponse> browserBotWithHttpInfo(String url, Integer delay, List<String> exec, Boolean ignoreCertificateErrors, String selector, Integer timeout, String userAgent) throws ApiException {
        okhttp3.Call localVarCall = browserBotValidateBeforeCall(url, delay, exec, ignoreCertificateErrors, selector, timeout, userAgent, null);
        Type localVarReturnType = new TypeToken<BrowserBotResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Browser Bot (asynchronously)
     * Browser bot can extract content, interact with keyboard and mouse events, and execute JavaScript on a website
     * @param url The URL to load (required)
     * @param delay Delay in seconds to wait before capturing any page data, executing selectors or JavaScript (optional, default to 3)
     * @param exec Execute JavaScript on the website. This parameter accepts JavaScript as either a string containing JavaScript or for sending multiple separate statements a JSON array or POST array can also be used. If a statement returns any value it will be returned in the &#39;exec-results&#39; response. You can also use the following specially defined user interaction functions: &lt;br&gt; &lt;br&gt; &lt;div&gt; sleep(seconds); Just wait/sleep for the specified number of seconds. &lt;br&gt;click(&#39;selector&#39;); Click on the first element matching the given selector. &lt;br&gt;focus(&#39;selector&#39;); Focus on the first element matching the given selector. &lt;br&gt;keys(&#39;characters&#39;); Send the specified keyboard characters. Use click() or focus() first to send keys to a specific element. &lt;br&gt;enter(); Send the Enter key. &lt;br&gt;tab(); Send the Tab key. &lt;br&gt; &lt;/div&gt; (optional)
     * @param ignoreCertificateErrors Ignore any TLS/SSL certificate errors and load the page anyway (optional, default to false)
     * @param selector Extract content from the page DOM using this selector. Commonly known as a CSS selector, you can find a good reference &lt;a href&#x3D;\\\&quot;https://www.w3schools.com/cssref/css_selectors.asp\\\&quot;&gt;here&lt;/a&gt; (optional)
     * @param timeout Timeout in seconds. Give up if still trying to load the page after this number of seconds (optional, default to 30)
     * @param userAgent Override the browsers default user-agent string with this one (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Your API request has been rejected. Check error code for details </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> You have failed to authenticate </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> We messed up, sorry! Your request has caused a fatal exception </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> We messed up, sorry! Your request has caused an error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call browserBotAsync(String url, Integer delay, List<String> exec, Boolean ignoreCertificateErrors, String selector, Integer timeout, String userAgent, final ApiCallback<BrowserBotResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = browserBotValidateBeforeCall(url, delay, exec, ignoreCertificateErrors, selector, timeout, userAgent, _callback);
        Type localVarReturnType = new TypeToken<BrowserBotResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for hTMLClean
     * @param content The HTML content. This can be either a URL to load from, a file upload (multipart/form-data) or an HTML content string (required)
     * @param outputType The level of sanitization, possible values are: &lt;br&gt;&lt;b&gt;plain-text&lt;/b&gt;: reduce the content to plain text only (no HTML tags at all) &lt;br&gt;&lt;b&gt;simple-text&lt;/b&gt;: allow only very basic text formatting tags like b, em, i, strong, u &lt;br&gt;&lt;b&gt;basic-html&lt;/b&gt;: allow advanced text formatting and hyper links &lt;br&gt;&lt;b&gt;basic-html-with-images&lt;/b&gt;: same as basic html but also allows image tags &lt;br&gt;&lt;b&gt;advanced-html&lt;/b&gt;: same as basic html with images but also allows many more common HTML tags like table, ul, dl, pre &lt;br&gt; (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Your API request has been rejected. Check error code for details </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> You have failed to authenticate </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> We messed up, sorry! Your request has caused a fatal exception </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> We messed up, sorry! Your request has caused an error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call hTMLCleanCall(String content, String outputType, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/html-clean";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (content != null) {
            localVarFormParams.put("content", content);
        }

        if (outputType != null) {
            localVarFormParams.put("output-type", outputType);
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/x-www-form-urlencoded"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api-key", "user-id" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call hTMLCleanValidateBeforeCall(String content, String outputType, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'content' is set
        if (content == null) {
            throw new ApiException("Missing the required parameter 'content' when calling hTMLClean(Async)");
        }

        // verify the required parameter 'outputType' is set
        if (outputType == null) {
            throw new ApiException("Missing the required parameter 'outputType' when calling hTMLClean(Async)");
        }

        return hTMLCleanCall(content, outputType, _callback);

    }

    /**
     * HTML Clean
     * Clean and sanitize untrusted HTML
     * @param content The HTML content. This can be either a URL to load from, a file upload (multipart/form-data) or an HTML content string (required)
     * @param outputType The level of sanitization, possible values are: &lt;br&gt;&lt;b&gt;plain-text&lt;/b&gt;: reduce the content to plain text only (no HTML tags at all) &lt;br&gt;&lt;b&gt;simple-text&lt;/b&gt;: allow only very basic text formatting tags like b, em, i, strong, u &lt;br&gt;&lt;b&gt;basic-html&lt;/b&gt;: allow advanced text formatting and hyper links &lt;br&gt;&lt;b&gt;basic-html-with-images&lt;/b&gt;: same as basic html but also allows image tags &lt;br&gt;&lt;b&gt;advanced-html&lt;/b&gt;: same as basic html with images but also allows many more common HTML tags like table, ul, dl, pre &lt;br&gt; (required)
     * @return File
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Your API request has been rejected. Check error code for details </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> You have failed to authenticate </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> We messed up, sorry! Your request has caused a fatal exception </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> We messed up, sorry! Your request has caused an error </td><td>  -  </td></tr>
     </table>
     */
    public File hTMLClean(String content, String outputType) throws ApiException {
        ApiResponse<File> localVarResp = hTMLCleanWithHttpInfo(content, outputType);
        return localVarResp.getData();
    }

    /**
     * HTML Clean
     * Clean and sanitize untrusted HTML
     * @param content The HTML content. This can be either a URL to load from, a file upload (multipart/form-data) or an HTML content string (required)
     * @param outputType The level of sanitization, possible values are: &lt;br&gt;&lt;b&gt;plain-text&lt;/b&gt;: reduce the content to plain text only (no HTML tags at all) &lt;br&gt;&lt;b&gt;simple-text&lt;/b&gt;: allow only very basic text formatting tags like b, em, i, strong, u &lt;br&gt;&lt;b&gt;basic-html&lt;/b&gt;: allow advanced text formatting and hyper links &lt;br&gt;&lt;b&gt;basic-html-with-images&lt;/b&gt;: same as basic html but also allows image tags &lt;br&gt;&lt;b&gt;advanced-html&lt;/b&gt;: same as basic html with images but also allows many more common HTML tags like table, ul, dl, pre &lt;br&gt; (required)
     * @return ApiResponse&lt;File&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Your API request has been rejected. Check error code for details </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> You have failed to authenticate </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> We messed up, sorry! Your request has caused a fatal exception </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> We messed up, sorry! Your request has caused an error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<File> hTMLCleanWithHttpInfo(String content, String outputType) throws ApiException {
        okhttp3.Call localVarCall = hTMLCleanValidateBeforeCall(content, outputType, null);
        Type localVarReturnType = new TypeToken<File>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * HTML Clean (asynchronously)
     * Clean and sanitize untrusted HTML
     * @param content The HTML content. This can be either a URL to load from, a file upload (multipart/form-data) or an HTML content string (required)
     * @param outputType The level of sanitization, possible values are: &lt;br&gt;&lt;b&gt;plain-text&lt;/b&gt;: reduce the content to plain text only (no HTML tags at all) &lt;br&gt;&lt;b&gt;simple-text&lt;/b&gt;: allow only very basic text formatting tags like b, em, i, strong, u &lt;br&gt;&lt;b&gt;basic-html&lt;/b&gt;: allow advanced text formatting and hyper links &lt;br&gt;&lt;b&gt;basic-html-with-images&lt;/b&gt;: same as basic html but also allows image tags &lt;br&gt;&lt;b&gt;advanced-html&lt;/b&gt;: same as basic html with images but also allows many more common HTML tags like table, ul, dl, pre &lt;br&gt; (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Your API request has been rejected. Check error code for details </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> You have failed to authenticate </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> We messed up, sorry! Your request has caused a fatal exception </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> We messed up, sorry! Your request has caused an error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call hTMLCleanAsync(String content, String outputType, final ApiCallback<File> _callback) throws ApiException {

        okhttp3.Call localVarCall = hTMLCleanValidateBeforeCall(content, outputType, _callback);
        Type localVarReturnType = new TypeToken<File>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for uRLInfo
     * @param url The URL to probe (required)
     * @param fetchContent If this URL responds with html, text, json or xml then return the response. This option is useful if you want to perform further processing on the URL content (e.g. with the HTML Extract or HTML Clean APIs) (optional, default to false)
     * @param ignoreCertificateErrors Ignore any TLS/SSL certificate errors and load the URL anyway (optional, default to false)
     * @param timeout Timeout in seconds. Give up if still trying to load the URL after this number of seconds (optional, default to 60)
     * @param retry If the request fails for any reason try again this many times (optional, default to 0)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Your API request has been rejected. Check error code for details </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> You have failed to authenticate </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> We messed up, sorry! Your request has caused a fatal exception </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> We messed up, sorry! Your request has caused an error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call uRLInfoCall(String url, Boolean fetchContent, Boolean ignoreCertificateErrors, Integer timeout, Integer retry, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/url-info";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (url != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("url", url));
        }

        if (fetchContent != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("fetch-content", fetchContent));
        }

        if (ignoreCertificateErrors != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("ignore-certificate-errors", ignoreCertificateErrors));
        }

        if (timeout != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("timeout", timeout));
        }

        if (retry != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("retry", retry));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api-key", "user-id" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call uRLInfoValidateBeforeCall(String url, Boolean fetchContent, Boolean ignoreCertificateErrors, Integer timeout, Integer retry, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'url' is set
        if (url == null) {
            throw new ApiException("Missing the required parameter 'url' when calling uRLInfo(Async)");
        }

        return uRLInfoCall(url, fetchContent, ignoreCertificateErrors, timeout, retry, _callback);

    }

    /**
     * URL Info
     * Parse, analyze and retrieve content from the supplied URL
     * @param url The URL to probe (required)
     * @param fetchContent If this URL responds with html, text, json or xml then return the response. This option is useful if you want to perform further processing on the URL content (e.g. with the HTML Extract or HTML Clean APIs) (optional, default to false)
     * @param ignoreCertificateErrors Ignore any TLS/SSL certificate errors and load the URL anyway (optional, default to false)
     * @param timeout Timeout in seconds. Give up if still trying to load the URL after this number of seconds (optional, default to 60)
     * @param retry If the request fails for any reason try again this many times (optional, default to 0)
     * @return URLInfoResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Your API request has been rejected. Check error code for details </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> You have failed to authenticate </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> We messed up, sorry! Your request has caused a fatal exception </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> We messed up, sorry! Your request has caused an error </td><td>  -  </td></tr>
     </table>
     */
    public URLInfoResponse uRLInfo(String url, Boolean fetchContent, Boolean ignoreCertificateErrors, Integer timeout, Integer retry) throws ApiException {
        ApiResponse<URLInfoResponse> localVarResp = uRLInfoWithHttpInfo(url, fetchContent, ignoreCertificateErrors, timeout, retry);
        return localVarResp.getData();
    }

    /**
     * URL Info
     * Parse, analyze and retrieve content from the supplied URL
     * @param url The URL to probe (required)
     * @param fetchContent If this URL responds with html, text, json or xml then return the response. This option is useful if you want to perform further processing on the URL content (e.g. with the HTML Extract or HTML Clean APIs) (optional, default to false)
     * @param ignoreCertificateErrors Ignore any TLS/SSL certificate errors and load the URL anyway (optional, default to false)
     * @param timeout Timeout in seconds. Give up if still trying to load the URL after this number of seconds (optional, default to 60)
     * @param retry If the request fails for any reason try again this many times (optional, default to 0)
     * @return ApiResponse&lt;URLInfoResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Your API request has been rejected. Check error code for details </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> You have failed to authenticate </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> We messed up, sorry! Your request has caused a fatal exception </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> We messed up, sorry! Your request has caused an error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<URLInfoResponse> uRLInfoWithHttpInfo(String url, Boolean fetchContent, Boolean ignoreCertificateErrors, Integer timeout, Integer retry) throws ApiException {
        okhttp3.Call localVarCall = uRLInfoValidateBeforeCall(url, fetchContent, ignoreCertificateErrors, timeout, retry, null);
        Type localVarReturnType = new TypeToken<URLInfoResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * URL Info (asynchronously)
     * Parse, analyze and retrieve content from the supplied URL
     * @param url The URL to probe (required)
     * @param fetchContent If this URL responds with html, text, json or xml then return the response. This option is useful if you want to perform further processing on the URL content (e.g. with the HTML Extract or HTML Clean APIs) (optional, default to false)
     * @param ignoreCertificateErrors Ignore any TLS/SSL certificate errors and load the URL anyway (optional, default to false)
     * @param timeout Timeout in seconds. Give up if still trying to load the URL after this number of seconds (optional, default to 60)
     * @param retry If the request fails for any reason try again this many times (optional, default to 0)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Your API request has been rejected. Check error code for details </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> You have failed to authenticate </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> We messed up, sorry! Your request has caused a fatal exception </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> We messed up, sorry! Your request has caused an error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call uRLInfoAsync(String url, Boolean fetchContent, Boolean ignoreCertificateErrors, Integer timeout, Integer retry, final ApiCallback<URLInfoResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = uRLInfoValidateBeforeCall(url, fetchContent, ignoreCertificateErrors, timeout, retry, _callback);
        Type localVarReturnType = new TypeToken<URLInfoResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
