/*
 * Neutrino API
 * The general-purpose API
 *
 * The version of the OpenAPI document: 3.6.4
 * Contact: ops@neutrinoapi.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.BlocklistSensor;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * DomainLookupResponse
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:54:58.398611-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class DomainLookupResponse {
  public static final String SERIALIZED_NAME_AGE = "age";
  @SerializedName(SERIALIZED_NAME_AGE)
  private Integer age;

  public static final String SERIALIZED_NAME_BLOCKLISTS = "blocklists";
  @SerializedName(SERIALIZED_NAME_BLOCKLISTS)
  private List<String> blocklists = new ArrayList<>();

  public static final String SERIALIZED_NAME_DNS_PROVIDER = "dns-provider";
  @SerializedName(SERIALIZED_NAME_DNS_PROVIDER)
  private String dnsProvider;

  public static final String SERIALIZED_NAME_DOMAIN = "domain";
  @SerializedName(SERIALIZED_NAME_DOMAIN)
  private String domain;

  public static final String SERIALIZED_NAME_FQDN = "fqdn";
  @SerializedName(SERIALIZED_NAME_FQDN)
  private String fqdn;

  public static final String SERIALIZED_NAME_IS_ADULT = "is-adult";
  @SerializedName(SERIALIZED_NAME_IS_ADULT)
  private Boolean isAdult;

  public static final String SERIALIZED_NAME_IS_GOV = "is-gov";
  @SerializedName(SERIALIZED_NAME_IS_GOV)
  private Boolean isGov;

  public static final String SERIALIZED_NAME_IS_MALICIOUS = "is-malicious";
  @SerializedName(SERIALIZED_NAME_IS_MALICIOUS)
  private Boolean isMalicious;

  public static final String SERIALIZED_NAME_IS_OPENNIC = "is-opennic";
  @SerializedName(SERIALIZED_NAME_IS_OPENNIC)
  private Boolean isOpennic;

  public static final String SERIALIZED_NAME_IS_PENDING = "is-pending";
  @SerializedName(SERIALIZED_NAME_IS_PENDING)
  private Boolean isPending;

  public static final String SERIALIZED_NAME_IS_SUBDOMAIN = "is-subdomain";
  @SerializedName(SERIALIZED_NAME_IS_SUBDOMAIN)
  private Boolean isSubdomain;

  public static final String SERIALIZED_NAME_MAIL_PROVIDER = "mail-provider";
  @SerializedName(SERIALIZED_NAME_MAIL_PROVIDER)
  private String mailProvider;

  public static final String SERIALIZED_NAME_RANK = "rank";
  @SerializedName(SERIALIZED_NAME_RANK)
  private Integer rank;

  public static final String SERIALIZED_NAME_REGISTERED_DATE = "registered-date";
  @SerializedName(SERIALIZED_NAME_REGISTERED_DATE)
  private String registeredDate;

  public static final String SERIALIZED_NAME_REGISTRAR_ID = "registrar-id";
  @SerializedName(SERIALIZED_NAME_REGISTRAR_ID)
  private Integer registrarId;

  public static final String SERIALIZED_NAME_REGISTRAR_NAME = "registrar-name";
  @SerializedName(SERIALIZED_NAME_REGISTRAR_NAME)
  private String registrarName;

  public static final String SERIALIZED_NAME_SENSORS = "sensors";
  @SerializedName(SERIALIZED_NAME_SENSORS)
  private List<BlocklistSensor> sensors = new ArrayList<>();

  public static final String SERIALIZED_NAME_TLD = "tld";
  @SerializedName(SERIALIZED_NAME_TLD)
  private String tld;

  public static final String SERIALIZED_NAME_TLD_CC = "tld-cc";
  @SerializedName(SERIALIZED_NAME_TLD_CC)
  private String tldCc;

  public static final String SERIALIZED_NAME_VALID = "valid";
  @SerializedName(SERIALIZED_NAME_VALID)
  private Boolean valid;

  public DomainLookupResponse() {
  }

  public DomainLookupResponse age(Integer age) {
    this.age = age;
    return this;
  }

  /**
   * The number of days since the domain was registered. A domain age of under 90 days is generally considered to be potentially risky. A value of 0 indicates no registration date was found for this domain
   * @return age
   */
  @javax.annotation.Nonnull
  public Integer getAge() {
    return age;
  }

  public void setAge(Integer age) {
    this.age = age;
  }


  public DomainLookupResponse blocklists(List<String> blocklists) {
    this.blocklists = blocklists;
    return this;
  }

  public DomainLookupResponse addBlocklistsItem(String blocklistsItem) {
    if (this.blocklists == null) {
      this.blocklists = new ArrayList<>();
    }
    this.blocklists.add(blocklistsItem);
    return this;
  }

  /**
   * An array of strings indicating which blocklist categories this domain is listed on. Current categories are: phishing, malware, spam, anonymizer, nefarious
   * @return blocklists
   */
  @javax.annotation.Nonnull
  public List<String> getBlocklists() {
    return blocklists;
  }

  public void setBlocklists(List<String> blocklists) {
    this.blocklists = blocklists;
  }


  public DomainLookupResponse dnsProvider(String dnsProvider) {
    this.dnsProvider = dnsProvider;
    return this;
  }

  /**
   * The primary domain of the DNS provider for this domain
   * @return dnsProvider
   */
  @javax.annotation.Nonnull
  public String getDnsProvider() {
    return dnsProvider;
  }

  public void setDnsProvider(String dnsProvider) {
    this.dnsProvider = dnsProvider;
  }


  public DomainLookupResponse domain(String domain) {
    this.domain = domain;
    return this;
  }

  /**
   * The primary domain name excluding any subdomains. This is also referred to as the second-level domain (SLD)
   * @return domain
   */
  @javax.annotation.Nonnull
  public String getDomain() {
    return domain;
  }

  public void setDomain(String domain) {
    this.domain = domain;
  }


  public DomainLookupResponse fqdn(String fqdn) {
    this.fqdn = fqdn;
    return this;
  }

  /**
   * The fully qualified domain name (FQDN)
   * @return fqdn
   */
  @javax.annotation.Nonnull
  public String getFqdn() {
    return fqdn;
  }

  public void setFqdn(String fqdn) {
    this.fqdn = fqdn;
  }


  public DomainLookupResponse isAdult(Boolean isAdult) {
    this.isAdult = isAdult;
    return this;
  }

  /**
   * This domain is hosting adult content such as porn, webcams, escorts, etc
   * @return isAdult
   */
  @javax.annotation.Nonnull
  public Boolean getIsAdult() {
    return isAdult;
  }

  public void setIsAdult(Boolean isAdult) {
    this.isAdult = isAdult;
  }


  public DomainLookupResponse isGov(Boolean isGov) {
    this.isGov = isGov;
    return this;
  }

  /**
   * Is this domain under a government or military TLD
   * @return isGov
   */
  @javax.annotation.Nonnull
  public Boolean getIsGov() {
    return isGov;
  }

  public void setIsGov(Boolean isGov) {
    this.isGov = isGov;
  }


  public DomainLookupResponse isMalicious(Boolean isMalicious) {
    this.isMalicious = isMalicious;
    return this;
  }

  /**
   * Consider this domain malicious as it is currently listed on at least 1 blocklist
   * @return isMalicious
   */
  @javax.annotation.Nonnull
  public Boolean getIsMalicious() {
    return isMalicious;
  }

  public void setIsMalicious(Boolean isMalicious) {
    this.isMalicious = isMalicious;
  }


  public DomainLookupResponse isOpennic(Boolean isOpennic) {
    this.isOpennic = isOpennic;
    return this;
  }

  /**
   * Is this domain under an OpenNIC TLD
   * @return isOpennic
   */
  @javax.annotation.Nonnull
  public Boolean getIsOpennic() {
    return isOpennic;
  }

  public void setIsOpennic(Boolean isOpennic) {
    this.isOpennic = isOpennic;
  }


  public DomainLookupResponse isPending(Boolean isPending) {
    this.isPending = isPending;
    return this;
  }

  /**
   * True if this domain is unseen and is currently being processed in the background. This field only matters when the &#39;live&#39; lookup setting has been explicitly disabled and indicates that not all domain data my be present yet
   * @return isPending
   */
  @javax.annotation.Nonnull
  public Boolean getIsPending() {
    return isPending;
  }

  public void setIsPending(Boolean isPending) {
    this.isPending = isPending;
  }


  public DomainLookupResponse isSubdomain(Boolean isSubdomain) {
    this.isSubdomain = isSubdomain;
    return this;
  }

  /**
   * Is the FQDN a subdomain of the primary domain
   * @return isSubdomain
   */
  @javax.annotation.Nonnull
  public Boolean getIsSubdomain() {
    return isSubdomain;
  }

  public void setIsSubdomain(Boolean isSubdomain) {
    this.isSubdomain = isSubdomain;
  }


  public DomainLookupResponse mailProvider(String mailProvider) {
    this.mailProvider = mailProvider;
    return this;
  }

  /**
   * The primary domain of the email provider for this domain. An empty value indicates the domain has no valid MX records
   * @return mailProvider
   */
  @javax.annotation.Nonnull
  public String getMailProvider() {
    return mailProvider;
  }

  public void setMailProvider(String mailProvider) {
    this.mailProvider = mailProvider;
  }


  public DomainLookupResponse rank(Integer rank) {
    this.rank = rank;
    return this;
  }

  /**
   * The domains estimated global traffic rank with the highest rank being 1. A value of 0 indicates the domain is currently ranked outside of the top 1M of domains
   * @return rank
   */
  @javax.annotation.Nonnull
  public Integer getRank() {
    return rank;
  }

  public void setRank(Integer rank) {
    this.rank = rank;
  }


  public DomainLookupResponse registeredDate(String registeredDate) {
    this.registeredDate = registeredDate;
    return this;
  }

  /**
   * The ISO date this domain was registered or first seen on the internet. An empty value indicates we could not reliably determine the date
   * @return registeredDate
   */
  @javax.annotation.Nonnull
  public String getRegisteredDate() {
    return registeredDate;
  }

  public void setRegisteredDate(String registeredDate) {
    this.registeredDate = registeredDate;
  }


  public DomainLookupResponse registrarId(Integer registrarId) {
    this.registrarId = registrarId;
    return this;
  }

  /**
   * The IANA registrar ID (0 if no registrar ID was found)
   * @return registrarId
   */
  @javax.annotation.Nonnull
  public Integer getRegistrarId() {
    return registrarId;
  }

  public void setRegistrarId(Integer registrarId) {
    this.registrarId = registrarId;
  }


  public DomainLookupResponse registrarName(String registrarName) {
    this.registrarName = registrarName;
    return this;
  }

  /**
   * The name of the domain registrar owning this domain
   * @return registrarName
   */
  @javax.annotation.Nonnull
  public String getRegistrarName() {
    return registrarName;
  }

  public void setRegistrarName(String registrarName) {
    this.registrarName = registrarName;
  }


  public DomainLookupResponse sensors(List<BlocklistSensor> sensors) {
    this.sensors = sensors;
    return this;
  }

  public DomainLookupResponse addSensorsItem(BlocklistSensor sensorsItem) {
    if (this.sensors == null) {
      this.sensors = new ArrayList<>();
    }
    this.sensors.add(sensorsItem);
    return this;
  }

  /**
   * An array of objects containing details on which specific blocklist sensors have detected this domain
   * @return sensors
   */
  @javax.annotation.Nonnull
  public List<BlocklistSensor> getSensors() {
    return sensors;
  }

  public void setSensors(List<BlocklistSensor> sensors) {
    this.sensors = sensors;
  }


  public DomainLookupResponse tld(String tld) {
    this.tld = tld;
    return this;
  }

  /**
   * The top-level domain (TLD)
   * @return tld
   */
  @javax.annotation.Nonnull
  public String getTld() {
    return tld;
  }

  public void setTld(String tld) {
    this.tld = tld;
  }


  public DomainLookupResponse tldCc(String tldCc) {
    this.tldCc = tldCc;
    return this;
  }

  /**
   * For a country code top-level domain (ccTLD) this will contain the associated ISO 2-letter country code
   * @return tldCc
   */
  @javax.annotation.Nonnull
  public String getTldCc() {
    return tldCc;
  }

  public void setTldCc(String tldCc) {
    this.tldCc = tldCc;
  }


  public DomainLookupResponse valid(Boolean valid) {
    this.valid = valid;
    return this;
  }

  /**
   * True if a valid domain was found. For a domain to be considered valid it must be registered and have valid DNS NS records
   * @return valid
   */
  @javax.annotation.Nonnull
  public Boolean getValid() {
    return valid;
  }

  public void setValid(Boolean valid) {
    this.valid = valid;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DomainLookupResponse domainLookupResponse = (DomainLookupResponse) o;
    return Objects.equals(this.age, domainLookupResponse.age) &&
        Objects.equals(this.blocklists, domainLookupResponse.blocklists) &&
        Objects.equals(this.dnsProvider, domainLookupResponse.dnsProvider) &&
        Objects.equals(this.domain, domainLookupResponse.domain) &&
        Objects.equals(this.fqdn, domainLookupResponse.fqdn) &&
        Objects.equals(this.isAdult, domainLookupResponse.isAdult) &&
        Objects.equals(this.isGov, domainLookupResponse.isGov) &&
        Objects.equals(this.isMalicious, domainLookupResponse.isMalicious) &&
        Objects.equals(this.isOpennic, domainLookupResponse.isOpennic) &&
        Objects.equals(this.isPending, domainLookupResponse.isPending) &&
        Objects.equals(this.isSubdomain, domainLookupResponse.isSubdomain) &&
        Objects.equals(this.mailProvider, domainLookupResponse.mailProvider) &&
        Objects.equals(this.rank, domainLookupResponse.rank) &&
        Objects.equals(this.registeredDate, domainLookupResponse.registeredDate) &&
        Objects.equals(this.registrarId, domainLookupResponse.registrarId) &&
        Objects.equals(this.registrarName, domainLookupResponse.registrarName) &&
        Objects.equals(this.sensors, domainLookupResponse.sensors) &&
        Objects.equals(this.tld, domainLookupResponse.tld) &&
        Objects.equals(this.tldCc, domainLookupResponse.tldCc) &&
        Objects.equals(this.valid, domainLookupResponse.valid);
  }

  @Override
  public int hashCode() {
    return Objects.hash(age, blocklists, dnsProvider, domain, fqdn, isAdult, isGov, isMalicious, isOpennic, isPending, isSubdomain, mailProvider, rank, registeredDate, registrarId, registrarName, sensors, tld, tldCc, valid);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DomainLookupResponse {\n");
    sb.append("    age: ").append(toIndentedString(age)).append("\n");
    sb.append("    blocklists: ").append(toIndentedString(blocklists)).append("\n");
    sb.append("    dnsProvider: ").append(toIndentedString(dnsProvider)).append("\n");
    sb.append("    domain: ").append(toIndentedString(domain)).append("\n");
    sb.append("    fqdn: ").append(toIndentedString(fqdn)).append("\n");
    sb.append("    isAdult: ").append(toIndentedString(isAdult)).append("\n");
    sb.append("    isGov: ").append(toIndentedString(isGov)).append("\n");
    sb.append("    isMalicious: ").append(toIndentedString(isMalicious)).append("\n");
    sb.append("    isOpennic: ").append(toIndentedString(isOpennic)).append("\n");
    sb.append("    isPending: ").append(toIndentedString(isPending)).append("\n");
    sb.append("    isSubdomain: ").append(toIndentedString(isSubdomain)).append("\n");
    sb.append("    mailProvider: ").append(toIndentedString(mailProvider)).append("\n");
    sb.append("    rank: ").append(toIndentedString(rank)).append("\n");
    sb.append("    registeredDate: ").append(toIndentedString(registeredDate)).append("\n");
    sb.append("    registrarId: ").append(toIndentedString(registrarId)).append("\n");
    sb.append("    registrarName: ").append(toIndentedString(registrarName)).append("\n");
    sb.append("    sensors: ").append(toIndentedString(sensors)).append("\n");
    sb.append("    tld: ").append(toIndentedString(tld)).append("\n");
    sb.append("    tldCc: ").append(toIndentedString(tldCc)).append("\n");
    sb.append("    valid: ").append(toIndentedString(valid)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("age");
    openapiFields.add("blocklists");
    openapiFields.add("dns-provider");
    openapiFields.add("domain");
    openapiFields.add("fqdn");
    openapiFields.add("is-adult");
    openapiFields.add("is-gov");
    openapiFields.add("is-malicious");
    openapiFields.add("is-opennic");
    openapiFields.add("is-pending");
    openapiFields.add("is-subdomain");
    openapiFields.add("mail-provider");
    openapiFields.add("rank");
    openapiFields.add("registered-date");
    openapiFields.add("registrar-id");
    openapiFields.add("registrar-name");
    openapiFields.add("sensors");
    openapiFields.add("tld");
    openapiFields.add("tld-cc");
    openapiFields.add("valid");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("age");
    openapiRequiredFields.add("blocklists");
    openapiRequiredFields.add("dns-provider");
    openapiRequiredFields.add("domain");
    openapiRequiredFields.add("fqdn");
    openapiRequiredFields.add("is-adult");
    openapiRequiredFields.add("is-gov");
    openapiRequiredFields.add("is-malicious");
    openapiRequiredFields.add("is-opennic");
    openapiRequiredFields.add("is-pending");
    openapiRequiredFields.add("is-subdomain");
    openapiRequiredFields.add("mail-provider");
    openapiRequiredFields.add("rank");
    openapiRequiredFields.add("registered-date");
    openapiRequiredFields.add("registrar-id");
    openapiRequiredFields.add("registrar-name");
    openapiRequiredFields.add("sensors");
    openapiRequiredFields.add("tld");
    openapiRequiredFields.add("tld-cc");
    openapiRequiredFields.add("valid");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to DomainLookupResponse
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!DomainLookupResponse.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in DomainLookupResponse is not found in the empty JSON string", DomainLookupResponse.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!DomainLookupResponse.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `DomainLookupResponse` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : DomainLookupResponse.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // ensure the required json array is present
      if (jsonObj.get("blocklists") == null) {
        throw new IllegalArgumentException("Expected the field `linkedContent` to be an array in the JSON string but got `null`");
      } else if (!jsonObj.get("blocklists").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `blocklists` to be an array in the JSON string but got `%s`", jsonObj.get("blocklists").toString()));
      }
      if (!jsonObj.get("dns-provider").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `dns-provider` to be a primitive type in the JSON string but got `%s`", jsonObj.get("dns-provider").toString()));
      }
      if (!jsonObj.get("domain").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `domain` to be a primitive type in the JSON string but got `%s`", jsonObj.get("domain").toString()));
      }
      if (!jsonObj.get("fqdn").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `fqdn` to be a primitive type in the JSON string but got `%s`", jsonObj.get("fqdn").toString()));
      }
      if (!jsonObj.get("mail-provider").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `mail-provider` to be a primitive type in the JSON string but got `%s`", jsonObj.get("mail-provider").toString()));
      }
      if (!jsonObj.get("registered-date").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `registered-date` to be a primitive type in the JSON string but got `%s`", jsonObj.get("registered-date").toString()));
      }
      if (!jsonObj.get("registrar-name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `registrar-name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("registrar-name").toString()));
      }
      // ensure the json data is an array
      if (!jsonObj.get("sensors").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `sensors` to be an array in the JSON string but got `%s`", jsonObj.get("sensors").toString()));
      }

      JsonArray jsonArraysensors = jsonObj.getAsJsonArray("sensors");
      // validate the required field `sensors` (array)
      for (int i = 0; i < jsonArraysensors.size(); i++) {
        BlocklistSensor.validateJsonElement(jsonArraysensors.get(i));
      };
      if (!jsonObj.get("tld").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `tld` to be a primitive type in the JSON string but got `%s`", jsonObj.get("tld").toString()));
      }
      if (!jsonObj.get("tld-cc").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `tld-cc` to be a primitive type in the JSON string but got `%s`", jsonObj.get("tld-cc").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!DomainLookupResponse.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'DomainLookupResponse' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<DomainLookupResponse> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(DomainLookupResponse.class));

       return (TypeAdapter<T>) new TypeAdapter<DomainLookupResponse>() {
           @Override
           public void write(JsonWriter out, DomainLookupResponse value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public DomainLookupResponse read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of DomainLookupResponse given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of DomainLookupResponse
   * @throws IOException if the JSON string is invalid with respect to DomainLookupResponse
   */
  public static DomainLookupResponse fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, DomainLookupResponse.class);
  }

  /**
   * Convert an instance of DomainLookupResponse to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

