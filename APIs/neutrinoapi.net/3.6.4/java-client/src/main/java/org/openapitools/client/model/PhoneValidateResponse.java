/*
 * Neutrino API
 * The general-purpose API
 *
 * The version of the OpenAPI document: 3.6.4
 * Contact: ops@neutrinoapi.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * PhoneValidateResponse
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:54:58.398611-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class PhoneValidateResponse {
  public static final String SERIALIZED_NAME_COUNTRY = "country";
  @SerializedName(SERIALIZED_NAME_COUNTRY)
  private String country;

  public static final String SERIALIZED_NAME_COUNTRY_CODE = "country-code";
  @SerializedName(SERIALIZED_NAME_COUNTRY_CODE)
  private String countryCode;

  public static final String SERIALIZED_NAME_COUNTRY_CODE3 = "country-code3";
  @SerializedName(SERIALIZED_NAME_COUNTRY_CODE3)
  private String countryCode3;

  public static final String SERIALIZED_NAME_CURRENCY_CODE = "currency-code";
  @SerializedName(SERIALIZED_NAME_CURRENCY_CODE)
  private String currencyCode;

  public static final String SERIALIZED_NAME_INTERNATIONAL_CALLING_CODE = "international-calling-code";
  @SerializedName(SERIALIZED_NAME_INTERNATIONAL_CALLING_CODE)
  private String internationalCallingCode;

  public static final String SERIALIZED_NAME_INTERNATIONAL_NUMBER = "international-number";
  @SerializedName(SERIALIZED_NAME_INTERNATIONAL_NUMBER)
  private String internationalNumber;

  public static final String SERIALIZED_NAME_IS_MOBILE = "is-mobile";
  @SerializedName(SERIALIZED_NAME_IS_MOBILE)
  private Boolean isMobile;

  public static final String SERIALIZED_NAME_LOCAL_NUMBER = "local-number";
  @SerializedName(SERIALIZED_NAME_LOCAL_NUMBER)
  private String localNumber;

  public static final String SERIALIZED_NAME_LOCATION = "location";
  @SerializedName(SERIALIZED_NAME_LOCATION)
  private String location;

  public static final String SERIALIZED_NAME_PREFIX_NETWORK = "prefix-network";
  @SerializedName(SERIALIZED_NAME_PREFIX_NETWORK)
  private String prefixNetwork;

  public static final String SERIALIZED_NAME_TYPE = "type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  private String type;

  public static final String SERIALIZED_NAME_VALID = "valid";
  @SerializedName(SERIALIZED_NAME_VALID)
  private Boolean valid;

  public PhoneValidateResponse() {
  }

  public PhoneValidateResponse country(String country) {
    this.country = country;
    return this;
  }

  /**
   * The phone number country
   * @return country
   */
  @javax.annotation.Nonnull
  public String getCountry() {
    return country;
  }

  public void setCountry(String country) {
    this.country = country;
  }


  public PhoneValidateResponse countryCode(String countryCode) {
    this.countryCode = countryCode;
    return this;
  }

  /**
   * The phone number country as an ISO 2-letter country code
   * @return countryCode
   */
  @javax.annotation.Nonnull
  public String getCountryCode() {
    return countryCode;
  }

  public void setCountryCode(String countryCode) {
    this.countryCode = countryCode;
  }


  public PhoneValidateResponse countryCode3(String countryCode3) {
    this.countryCode3 = countryCode3;
    return this;
  }

  /**
   * The phone number country as an ISO 3-letter country code
   * @return countryCode3
   */
  @javax.annotation.Nonnull
  public String getCountryCode3() {
    return countryCode3;
  }

  public void setCountryCode3(String countryCode3) {
    this.countryCode3 = countryCode3;
  }


  public PhoneValidateResponse currencyCode(String currencyCode) {
    this.currencyCode = currencyCode;
    return this;
  }

  /**
   * ISO 4217 currency code associated with the country
   * @return currencyCode
   */
  @javax.annotation.Nonnull
  public String getCurrencyCode() {
    return currencyCode;
  }

  public void setCurrencyCode(String currencyCode) {
    this.currencyCode = currencyCode;
  }


  public PhoneValidateResponse internationalCallingCode(String internationalCallingCode) {
    this.internationalCallingCode = internationalCallingCode;
    return this;
  }

  /**
   * The international calling code
   * @return internationalCallingCode
   */
  @javax.annotation.Nonnull
  public String getInternationalCallingCode() {
    return internationalCallingCode;
  }

  public void setInternationalCallingCode(String internationalCallingCode) {
    this.internationalCallingCode = internationalCallingCode;
  }


  public PhoneValidateResponse internationalNumber(String internationalNumber) {
    this.internationalNumber = internationalNumber;
    return this;
  }

  /**
   * The number represented in full international format (E.164)
   * @return internationalNumber
   */
  @javax.annotation.Nonnull
  public String getInternationalNumber() {
    return internationalNumber;
  }

  public void setInternationalNumber(String internationalNumber) {
    this.internationalNumber = internationalNumber;
  }


  public PhoneValidateResponse isMobile(Boolean isMobile) {
    this.isMobile = isMobile;
    return this;
  }

  /**
   * True if this is a mobile number. If the number type is unknown this value will be false
   * @return isMobile
   */
  @javax.annotation.Nonnull
  public Boolean getIsMobile() {
    return isMobile;
  }

  public void setIsMobile(Boolean isMobile) {
    this.isMobile = isMobile;
  }


  public PhoneValidateResponse localNumber(String localNumber) {
    this.localNumber = localNumber;
    return this;
  }

  /**
   * The number represented in local dialing format
   * @return localNumber
   */
  @javax.annotation.Nonnull
  public String getLocalNumber() {
    return localNumber;
  }

  public void setLocalNumber(String localNumber) {
    this.localNumber = localNumber;
  }


  public PhoneValidateResponse location(String location) {
    this.location = location;
    return this;
  }

  /**
   * The phone number location. Could be the city, region or country depending on the type of number
   * @return location
   */
  @javax.annotation.Nonnull
  public String getLocation() {
    return location;
  }

  public void setLocation(String location) {
    this.location = location;
  }


  public PhoneValidateResponse prefixNetwork(String prefixNetwork) {
    this.prefixNetwork = prefixNetwork;
    return this;
  }

  /**
   * The network/carrier who owns the prefix (this only works for some countries, use HLR lookup for global network detection)
   * @return prefixNetwork
   */
  @javax.annotation.Nonnull
  public String getPrefixNetwork() {
    return prefixNetwork;
  }

  public void setPrefixNetwork(String prefixNetwork) {
    this.prefixNetwork = prefixNetwork;
  }


  public PhoneValidateResponse type(String type) {
    this.type = type;
    return this;
  }

  /**
   * The number type based on the number prefix. &lt;br&gt;Possible values are: &lt;br&gt; &lt;ul&gt; &lt;li&gt;mobile&lt;/li&gt; &lt;li&gt;fixed-line&lt;/li&gt; &lt;li&gt;premium-rate&lt;/li&gt; &lt;li&gt;toll-free&lt;/li&gt; &lt;li&gt;voip&lt;/li&gt; &lt;li&gt;unknown (use HLR lookup)&lt;/li&gt; &lt;/ul&gt;
   * @return type
   */
  @javax.annotation.Nonnull
  public String getType() {
    return type;
  }

  public void setType(String type) {
    this.type = type;
  }


  public PhoneValidateResponse valid(Boolean valid) {
    this.valid = valid;
    return this;
  }

  /**
   * Is this a valid phone number
   * @return valid
   */
  @javax.annotation.Nonnull
  public Boolean getValid() {
    return valid;
  }

  public void setValid(Boolean valid) {
    this.valid = valid;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PhoneValidateResponse phoneValidateResponse = (PhoneValidateResponse) o;
    return Objects.equals(this.country, phoneValidateResponse.country) &&
        Objects.equals(this.countryCode, phoneValidateResponse.countryCode) &&
        Objects.equals(this.countryCode3, phoneValidateResponse.countryCode3) &&
        Objects.equals(this.currencyCode, phoneValidateResponse.currencyCode) &&
        Objects.equals(this.internationalCallingCode, phoneValidateResponse.internationalCallingCode) &&
        Objects.equals(this.internationalNumber, phoneValidateResponse.internationalNumber) &&
        Objects.equals(this.isMobile, phoneValidateResponse.isMobile) &&
        Objects.equals(this.localNumber, phoneValidateResponse.localNumber) &&
        Objects.equals(this.location, phoneValidateResponse.location) &&
        Objects.equals(this.prefixNetwork, phoneValidateResponse.prefixNetwork) &&
        Objects.equals(this.type, phoneValidateResponse.type) &&
        Objects.equals(this.valid, phoneValidateResponse.valid);
  }

  @Override
  public int hashCode() {
    return Objects.hash(country, countryCode, countryCode3, currencyCode, internationalCallingCode, internationalNumber, isMobile, localNumber, location, prefixNetwork, type, valid);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PhoneValidateResponse {\n");
    sb.append("    country: ").append(toIndentedString(country)).append("\n");
    sb.append("    countryCode: ").append(toIndentedString(countryCode)).append("\n");
    sb.append("    countryCode3: ").append(toIndentedString(countryCode3)).append("\n");
    sb.append("    currencyCode: ").append(toIndentedString(currencyCode)).append("\n");
    sb.append("    internationalCallingCode: ").append(toIndentedString(internationalCallingCode)).append("\n");
    sb.append("    internationalNumber: ").append(toIndentedString(internationalNumber)).append("\n");
    sb.append("    isMobile: ").append(toIndentedString(isMobile)).append("\n");
    sb.append("    localNumber: ").append(toIndentedString(localNumber)).append("\n");
    sb.append("    location: ").append(toIndentedString(location)).append("\n");
    sb.append("    prefixNetwork: ").append(toIndentedString(prefixNetwork)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    valid: ").append(toIndentedString(valid)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("country");
    openapiFields.add("country-code");
    openapiFields.add("country-code3");
    openapiFields.add("currency-code");
    openapiFields.add("international-calling-code");
    openapiFields.add("international-number");
    openapiFields.add("is-mobile");
    openapiFields.add("local-number");
    openapiFields.add("location");
    openapiFields.add("prefix-network");
    openapiFields.add("type");
    openapiFields.add("valid");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("country");
    openapiRequiredFields.add("country-code");
    openapiRequiredFields.add("country-code3");
    openapiRequiredFields.add("currency-code");
    openapiRequiredFields.add("international-calling-code");
    openapiRequiredFields.add("international-number");
    openapiRequiredFields.add("is-mobile");
    openapiRequiredFields.add("local-number");
    openapiRequiredFields.add("location");
    openapiRequiredFields.add("prefix-network");
    openapiRequiredFields.add("type");
    openapiRequiredFields.add("valid");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to PhoneValidateResponse
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!PhoneValidateResponse.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in PhoneValidateResponse is not found in the empty JSON string", PhoneValidateResponse.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!PhoneValidateResponse.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `PhoneValidateResponse` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : PhoneValidateResponse.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("country").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `country` to be a primitive type in the JSON string but got `%s`", jsonObj.get("country").toString()));
      }
      if (!jsonObj.get("country-code").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `country-code` to be a primitive type in the JSON string but got `%s`", jsonObj.get("country-code").toString()));
      }
      if (!jsonObj.get("country-code3").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `country-code3` to be a primitive type in the JSON string but got `%s`", jsonObj.get("country-code3").toString()));
      }
      if (!jsonObj.get("currency-code").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `currency-code` to be a primitive type in the JSON string but got `%s`", jsonObj.get("currency-code").toString()));
      }
      if (!jsonObj.get("international-calling-code").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `international-calling-code` to be a primitive type in the JSON string but got `%s`", jsonObj.get("international-calling-code").toString()));
      }
      if (!jsonObj.get("international-number").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `international-number` to be a primitive type in the JSON string but got `%s`", jsonObj.get("international-number").toString()));
      }
      if (!jsonObj.get("local-number").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `local-number` to be a primitive type in the JSON string but got `%s`", jsonObj.get("local-number").toString()));
      }
      if (!jsonObj.get("location").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `location` to be a primitive type in the JSON string but got `%s`", jsonObj.get("location").toString()));
      }
      if (!jsonObj.get("prefix-network").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `prefix-network` to be a primitive type in the JSON string but got `%s`", jsonObj.get("prefix-network").toString()));
      }
      if (!jsonObj.get("type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("type").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!PhoneValidateResponse.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'PhoneValidateResponse' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<PhoneValidateResponse> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(PhoneValidateResponse.class));

       return (TypeAdapter<T>) new TypeAdapter<PhoneValidateResponse>() {
           @Override
           public void write(JsonWriter out, PhoneValidateResponse value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public PhoneValidateResponse read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of PhoneValidateResponse given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of PhoneValidateResponse
   * @throws IOException if the JSON string is invalid with respect to PhoneValidateResponse
   */
  public static PhoneValidateResponse fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, PhoneValidateResponse.class);
  }

  /**
   * Convert an instance of PhoneValidateResponse to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

