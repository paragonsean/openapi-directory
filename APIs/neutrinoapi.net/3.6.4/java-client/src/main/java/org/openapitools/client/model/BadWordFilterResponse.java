/*
 * Neutrino API
 * The general-purpose API
 *
 * The version of the OpenAPI document: 3.6.4
 * Contact: ops@neutrinoapi.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * BadWordFilterResponse
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:54:58.398611-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class BadWordFilterResponse {
  public static final String SERIALIZED_NAME_BAD_WORDS_LIST = "bad-words-list";
  @SerializedName(SERIALIZED_NAME_BAD_WORDS_LIST)
  private List<String> badWordsList = new ArrayList<>();

  public static final String SERIALIZED_NAME_BAD_WORDS_TOTAL = "bad-words-total";
  @SerializedName(SERIALIZED_NAME_BAD_WORDS_TOTAL)
  private Integer badWordsTotal;

  public static final String SERIALIZED_NAME_CENSORED_CONTENT = "censored-content";
  @SerializedName(SERIALIZED_NAME_CENSORED_CONTENT)
  private String censoredContent;

  public static final String SERIALIZED_NAME_IS_BAD = "is-bad";
  @SerializedName(SERIALIZED_NAME_IS_BAD)
  private Boolean isBad;

  public BadWordFilterResponse() {
  }

  public BadWordFilterResponse badWordsList(List<String> badWordsList) {
    this.badWordsList = badWordsList;
    return this;
  }

  public BadWordFilterResponse addBadWordsListItem(String badWordsListItem) {
    if (this.badWordsList == null) {
      this.badWordsList = new ArrayList<>();
    }
    this.badWordsList.add(badWordsListItem);
    return this;
  }

  /**
   * An array of the bad words found
   * @return badWordsList
   */
  @javax.annotation.Nonnull
  public List<String> getBadWordsList() {
    return badWordsList;
  }

  public void setBadWordsList(List<String> badWordsList) {
    this.badWordsList = badWordsList;
  }


  public BadWordFilterResponse badWordsTotal(Integer badWordsTotal) {
    this.badWordsTotal = badWordsTotal;
    return this;
  }

  /**
   * Total number of bad words detected
   * @return badWordsTotal
   */
  @javax.annotation.Nonnull
  public Integer getBadWordsTotal() {
    return badWordsTotal;
  }

  public void setBadWordsTotal(Integer badWordsTotal) {
    this.badWordsTotal = badWordsTotal;
  }


  public BadWordFilterResponse censoredContent(String censoredContent) {
    this.censoredContent = censoredContent;
    return this;
  }

  /**
   * The censored content (only set if censor-character has been set)
   * @return censoredContent
   */
  @javax.annotation.Nonnull
  public String getCensoredContent() {
    return censoredContent;
  }

  public void setCensoredContent(String censoredContent) {
    this.censoredContent = censoredContent;
  }


  public BadWordFilterResponse isBad(Boolean isBad) {
    this.isBad = isBad;
    return this;
  }

  /**
   * Does the text contain bad words
   * @return isBad
   */
  @javax.annotation.Nonnull
  public Boolean getIsBad() {
    return isBad;
  }

  public void setIsBad(Boolean isBad) {
    this.isBad = isBad;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    BadWordFilterResponse badWordFilterResponse = (BadWordFilterResponse) o;
    return Objects.equals(this.badWordsList, badWordFilterResponse.badWordsList) &&
        Objects.equals(this.badWordsTotal, badWordFilterResponse.badWordsTotal) &&
        Objects.equals(this.censoredContent, badWordFilterResponse.censoredContent) &&
        Objects.equals(this.isBad, badWordFilterResponse.isBad);
  }

  @Override
  public int hashCode() {
    return Objects.hash(badWordsList, badWordsTotal, censoredContent, isBad);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class BadWordFilterResponse {\n");
    sb.append("    badWordsList: ").append(toIndentedString(badWordsList)).append("\n");
    sb.append("    badWordsTotal: ").append(toIndentedString(badWordsTotal)).append("\n");
    sb.append("    censoredContent: ").append(toIndentedString(censoredContent)).append("\n");
    sb.append("    isBad: ").append(toIndentedString(isBad)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("bad-words-list");
    openapiFields.add("bad-words-total");
    openapiFields.add("censored-content");
    openapiFields.add("is-bad");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("bad-words-list");
    openapiRequiredFields.add("bad-words-total");
    openapiRequiredFields.add("censored-content");
    openapiRequiredFields.add("is-bad");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to BadWordFilterResponse
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!BadWordFilterResponse.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in BadWordFilterResponse is not found in the empty JSON string", BadWordFilterResponse.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!BadWordFilterResponse.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `BadWordFilterResponse` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : BadWordFilterResponse.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // ensure the required json array is present
      if (jsonObj.get("bad-words-list") == null) {
        throw new IllegalArgumentException("Expected the field `linkedContent` to be an array in the JSON string but got `null`");
      } else if (!jsonObj.get("bad-words-list").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `bad-words-list` to be an array in the JSON string but got `%s`", jsonObj.get("bad-words-list").toString()));
      }
      if (!jsonObj.get("censored-content").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `censored-content` to be a primitive type in the JSON string but got `%s`", jsonObj.get("censored-content").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!BadWordFilterResponse.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'BadWordFilterResponse' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<BadWordFilterResponse> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(BadWordFilterResponse.class));

       return (TypeAdapter<T>) new TypeAdapter<BadWordFilterResponse>() {
           @Override
           public void write(JsonWriter out, BadWordFilterResponse value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public BadWordFilterResponse read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of BadWordFilterResponse given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of BadWordFilterResponse
   * @throws IOException if the JSON string is invalid with respect to BadWordFilterResponse
   */
  public static BadWordFilterResponse fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, BadWordFilterResponse.class);
  }

  /**
   * Convert an instance of BadWordFilterResponse to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

