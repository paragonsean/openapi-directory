/*
 * Neutrino API
 * The general-purpose API
 *
 * The version of the OpenAPI document: 3.6.4
 * Contact: ops@neutrinoapi.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.APIError;
import org.openapitools.client.model.GeocodeAddressResponse;
import org.openapitools.client.model.GeocodeReverseResponse;
import org.openapitools.client.model.IPInfoResponse;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class GeolocationApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public GeolocationApi() {
        this(Configuration.getDefaultApiClient());
    }

    public GeolocationApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for geocodeAddress
     * @param address The full address, partial address or name of a place to try and locate. Comma separated address components are preferred. (optional)
     * @param houseNumber The house/building number to locate (optional)
     * @param street The street/road name to locate (optional)
     * @param city The city/town name to locate (optional)
     * @param county The county/region name to locate (optional)
     * @param state The state name to locate (optional)
     * @param postalCode The postal code to locate (optional)
     * @param countryCode Limit result to this country (the default is no country bias) (optional)
     * @param languageCode The language to display results in, available languages are: &lt;ul&gt; &lt;li&gt;de, en, es, fr, it, pt, ru, zh&lt;/li&gt; &lt;/ul&gt; (optional, default to en)
     * @param fuzzySearch If no matches are found for the given address, start performing a recursive fuzzy search until a geolocation is found. This option is recommended for processing user input or implementing auto-complete. We use a combination of approximate string matching and data cleansing to find possible location matches (optional, default to false)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Your API request has been rejected. Check error code for details </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> You have failed to authenticate </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> We messed up, sorry! Your request has caused a fatal exception </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> We messed up, sorry! Your request has caused an error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call geocodeAddressCall(String address, String houseNumber, String street, String city, String county, String state, String postalCode, String countryCode, String languageCode, Boolean fuzzySearch, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/geocode-address";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (address != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("address", address));
        }

        if (houseNumber != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("house-number", houseNumber));
        }

        if (street != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("street", street));
        }

        if (city != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("city", city));
        }

        if (county != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("county", county));
        }

        if (state != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("state", state));
        }

        if (postalCode != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("postal-code", postalCode));
        }

        if (countryCode != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("country-code", countryCode));
        }

        if (languageCode != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("language-code", languageCode));
        }

        if (fuzzySearch != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("fuzzy-search", fuzzySearch));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api-key", "user-id" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call geocodeAddressValidateBeforeCall(String address, String houseNumber, String street, String city, String county, String state, String postalCode, String countryCode, String languageCode, Boolean fuzzySearch, final ApiCallback _callback) throws ApiException {
        return geocodeAddressCall(address, houseNumber, street, city, county, state, postalCode, countryCode, languageCode, fuzzySearch, _callback);

    }

    /**
     * Geocode Address
     * Geocode an address, partial address or just the name of a place
     * @param address The full address, partial address or name of a place to try and locate. Comma separated address components are preferred. (optional)
     * @param houseNumber The house/building number to locate (optional)
     * @param street The street/road name to locate (optional)
     * @param city The city/town name to locate (optional)
     * @param county The county/region name to locate (optional)
     * @param state The state name to locate (optional)
     * @param postalCode The postal code to locate (optional)
     * @param countryCode Limit result to this country (the default is no country bias) (optional)
     * @param languageCode The language to display results in, available languages are: &lt;ul&gt; &lt;li&gt;de, en, es, fr, it, pt, ru, zh&lt;/li&gt; &lt;/ul&gt; (optional, default to en)
     * @param fuzzySearch If no matches are found for the given address, start performing a recursive fuzzy search until a geolocation is found. This option is recommended for processing user input or implementing auto-complete. We use a combination of approximate string matching and data cleansing to find possible location matches (optional, default to false)
     * @return GeocodeAddressResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Your API request has been rejected. Check error code for details </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> You have failed to authenticate </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> We messed up, sorry! Your request has caused a fatal exception </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> We messed up, sorry! Your request has caused an error </td><td>  -  </td></tr>
     </table>
     */
    public GeocodeAddressResponse geocodeAddress(String address, String houseNumber, String street, String city, String county, String state, String postalCode, String countryCode, String languageCode, Boolean fuzzySearch) throws ApiException {
        ApiResponse<GeocodeAddressResponse> localVarResp = geocodeAddressWithHttpInfo(address, houseNumber, street, city, county, state, postalCode, countryCode, languageCode, fuzzySearch);
        return localVarResp.getData();
    }

    /**
     * Geocode Address
     * Geocode an address, partial address or just the name of a place
     * @param address The full address, partial address or name of a place to try and locate. Comma separated address components are preferred. (optional)
     * @param houseNumber The house/building number to locate (optional)
     * @param street The street/road name to locate (optional)
     * @param city The city/town name to locate (optional)
     * @param county The county/region name to locate (optional)
     * @param state The state name to locate (optional)
     * @param postalCode The postal code to locate (optional)
     * @param countryCode Limit result to this country (the default is no country bias) (optional)
     * @param languageCode The language to display results in, available languages are: &lt;ul&gt; &lt;li&gt;de, en, es, fr, it, pt, ru, zh&lt;/li&gt; &lt;/ul&gt; (optional, default to en)
     * @param fuzzySearch If no matches are found for the given address, start performing a recursive fuzzy search until a geolocation is found. This option is recommended for processing user input or implementing auto-complete. We use a combination of approximate string matching and data cleansing to find possible location matches (optional, default to false)
     * @return ApiResponse&lt;GeocodeAddressResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Your API request has been rejected. Check error code for details </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> You have failed to authenticate </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> We messed up, sorry! Your request has caused a fatal exception </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> We messed up, sorry! Your request has caused an error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GeocodeAddressResponse> geocodeAddressWithHttpInfo(String address, String houseNumber, String street, String city, String county, String state, String postalCode, String countryCode, String languageCode, Boolean fuzzySearch) throws ApiException {
        okhttp3.Call localVarCall = geocodeAddressValidateBeforeCall(address, houseNumber, street, city, county, state, postalCode, countryCode, languageCode, fuzzySearch, null);
        Type localVarReturnType = new TypeToken<GeocodeAddressResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Geocode Address (asynchronously)
     * Geocode an address, partial address or just the name of a place
     * @param address The full address, partial address or name of a place to try and locate. Comma separated address components are preferred. (optional)
     * @param houseNumber The house/building number to locate (optional)
     * @param street The street/road name to locate (optional)
     * @param city The city/town name to locate (optional)
     * @param county The county/region name to locate (optional)
     * @param state The state name to locate (optional)
     * @param postalCode The postal code to locate (optional)
     * @param countryCode Limit result to this country (the default is no country bias) (optional)
     * @param languageCode The language to display results in, available languages are: &lt;ul&gt; &lt;li&gt;de, en, es, fr, it, pt, ru, zh&lt;/li&gt; &lt;/ul&gt; (optional, default to en)
     * @param fuzzySearch If no matches are found for the given address, start performing a recursive fuzzy search until a geolocation is found. This option is recommended for processing user input or implementing auto-complete. We use a combination of approximate string matching and data cleansing to find possible location matches (optional, default to false)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Your API request has been rejected. Check error code for details </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> You have failed to authenticate </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> We messed up, sorry! Your request has caused a fatal exception </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> We messed up, sorry! Your request has caused an error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call geocodeAddressAsync(String address, String houseNumber, String street, String city, String county, String state, String postalCode, String countryCode, String languageCode, Boolean fuzzySearch, final ApiCallback<GeocodeAddressResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = geocodeAddressValidateBeforeCall(address, houseNumber, street, city, county, state, postalCode, countryCode, languageCode, fuzzySearch, _callback);
        Type localVarReturnType = new TypeToken<GeocodeAddressResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for geocodeReverse
     * @param latitude The location latitude in decimal degrees format (required)
     * @param longitude The location longitude in decimal degrees format (required)
     * @param languageCode The language to display results in, available languages are: &lt;ul&gt; &lt;li&gt;de, en, es, fr, it, pt, ru&lt;/li&gt; &lt;/ul&gt; (optional, default to en)
     * @param zoom The zoom level to respond with: &lt;br&gt; &lt;ul&gt; &lt;li&gt;address - the most precise address available&lt;/li&gt; &lt;li&gt;street - the street level&lt;/li&gt; &lt;li&gt;city - the city level&lt;/li&gt; &lt;li&gt;state - the state level&lt;/li&gt; &lt;li&gt;country - the country level&lt;/li&gt; &lt;/ul&gt; (optional, default to address)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Your API request has been rejected. Check error code for details </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> You have failed to authenticate </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> We messed up, sorry! Your request has caused a fatal exception </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> We messed up, sorry! Your request has caused an error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call geocodeReverseCall(String latitude, String longitude, String languageCode, String zoom, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/geocode-reverse";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (latitude != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("latitude", latitude));
        }

        if (longitude != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("longitude", longitude));
        }

        if (languageCode != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("language-code", languageCode));
        }

        if (zoom != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("zoom", zoom));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api-key", "user-id" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call geocodeReverseValidateBeforeCall(String latitude, String longitude, String languageCode, String zoom, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'latitude' is set
        if (latitude == null) {
            throw new ApiException("Missing the required parameter 'latitude' when calling geocodeReverse(Async)");
        }

        // verify the required parameter 'longitude' is set
        if (longitude == null) {
            throw new ApiException("Missing the required parameter 'longitude' when calling geocodeReverse(Async)");
        }

        return geocodeReverseCall(latitude, longitude, languageCode, zoom, _callback);

    }

    /**
     * Geocode Reverse
     * Convert a geographic coordinate (latitude and longitude) into a real world address
     * @param latitude The location latitude in decimal degrees format (required)
     * @param longitude The location longitude in decimal degrees format (required)
     * @param languageCode The language to display results in, available languages are: &lt;ul&gt; &lt;li&gt;de, en, es, fr, it, pt, ru&lt;/li&gt; &lt;/ul&gt; (optional, default to en)
     * @param zoom The zoom level to respond with: &lt;br&gt; &lt;ul&gt; &lt;li&gt;address - the most precise address available&lt;/li&gt; &lt;li&gt;street - the street level&lt;/li&gt; &lt;li&gt;city - the city level&lt;/li&gt; &lt;li&gt;state - the state level&lt;/li&gt; &lt;li&gt;country - the country level&lt;/li&gt; &lt;/ul&gt; (optional, default to address)
     * @return GeocodeReverseResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Your API request has been rejected. Check error code for details </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> You have failed to authenticate </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> We messed up, sorry! Your request has caused a fatal exception </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> We messed up, sorry! Your request has caused an error </td><td>  -  </td></tr>
     </table>
     */
    public GeocodeReverseResponse geocodeReverse(String latitude, String longitude, String languageCode, String zoom) throws ApiException {
        ApiResponse<GeocodeReverseResponse> localVarResp = geocodeReverseWithHttpInfo(latitude, longitude, languageCode, zoom);
        return localVarResp.getData();
    }

    /**
     * Geocode Reverse
     * Convert a geographic coordinate (latitude and longitude) into a real world address
     * @param latitude The location latitude in decimal degrees format (required)
     * @param longitude The location longitude in decimal degrees format (required)
     * @param languageCode The language to display results in, available languages are: &lt;ul&gt; &lt;li&gt;de, en, es, fr, it, pt, ru&lt;/li&gt; &lt;/ul&gt; (optional, default to en)
     * @param zoom The zoom level to respond with: &lt;br&gt; &lt;ul&gt; &lt;li&gt;address - the most precise address available&lt;/li&gt; &lt;li&gt;street - the street level&lt;/li&gt; &lt;li&gt;city - the city level&lt;/li&gt; &lt;li&gt;state - the state level&lt;/li&gt; &lt;li&gt;country - the country level&lt;/li&gt; &lt;/ul&gt; (optional, default to address)
     * @return ApiResponse&lt;GeocodeReverseResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Your API request has been rejected. Check error code for details </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> You have failed to authenticate </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> We messed up, sorry! Your request has caused a fatal exception </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> We messed up, sorry! Your request has caused an error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GeocodeReverseResponse> geocodeReverseWithHttpInfo(String latitude, String longitude, String languageCode, String zoom) throws ApiException {
        okhttp3.Call localVarCall = geocodeReverseValidateBeforeCall(latitude, longitude, languageCode, zoom, null);
        Type localVarReturnType = new TypeToken<GeocodeReverseResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Geocode Reverse (asynchronously)
     * Convert a geographic coordinate (latitude and longitude) into a real world address
     * @param latitude The location latitude in decimal degrees format (required)
     * @param longitude The location longitude in decimal degrees format (required)
     * @param languageCode The language to display results in, available languages are: &lt;ul&gt; &lt;li&gt;de, en, es, fr, it, pt, ru&lt;/li&gt; &lt;/ul&gt; (optional, default to en)
     * @param zoom The zoom level to respond with: &lt;br&gt; &lt;ul&gt; &lt;li&gt;address - the most precise address available&lt;/li&gt; &lt;li&gt;street - the street level&lt;/li&gt; &lt;li&gt;city - the city level&lt;/li&gt; &lt;li&gt;state - the state level&lt;/li&gt; &lt;li&gt;country - the country level&lt;/li&gt; &lt;/ul&gt; (optional, default to address)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Your API request has been rejected. Check error code for details </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> You have failed to authenticate </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> We messed up, sorry! Your request has caused a fatal exception </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> We messed up, sorry! Your request has caused an error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call geocodeReverseAsync(String latitude, String longitude, String languageCode, String zoom, final ApiCallback<GeocodeReverseResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = geocodeReverseValidateBeforeCall(latitude, longitude, languageCode, zoom, _callback);
        Type localVarReturnType = new TypeToken<GeocodeReverseResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for iPInfo
     * @param ip IPv4 or IPv6 address (required)
     * @param reverseLookup Do a reverse DNS (PTR) lookup. This option can add extra delay to the request so only use it if you need it (optional, default to false)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Your API request has been rejected. Check error code for details </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> You have failed to authenticate </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> We messed up, sorry! Your request has caused a fatal exception </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> We messed up, sorry! Your request has caused an error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call iPInfoCall(String ip, Boolean reverseLookup, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/ip-info";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (ip != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("ip", ip));
        }

        if (reverseLookup != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("reverse-lookup", reverseLookup));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api-key", "user-id" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call iPInfoValidateBeforeCall(String ip, Boolean reverseLookup, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'ip' is set
        if (ip == null) {
            throw new ApiException("Missing the required parameter 'ip' when calling iPInfo(Async)");
        }

        return iPInfoCall(ip, reverseLookup, _callback);

    }

    /**
     * IP Info
     * Get location information about an IP address and do reverse DNS (PTR) lookups
     * @param ip IPv4 or IPv6 address (required)
     * @param reverseLookup Do a reverse DNS (PTR) lookup. This option can add extra delay to the request so only use it if you need it (optional, default to false)
     * @return IPInfoResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Your API request has been rejected. Check error code for details </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> You have failed to authenticate </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> We messed up, sorry! Your request has caused a fatal exception </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> We messed up, sorry! Your request has caused an error </td><td>  -  </td></tr>
     </table>
     */
    public IPInfoResponse iPInfo(String ip, Boolean reverseLookup) throws ApiException {
        ApiResponse<IPInfoResponse> localVarResp = iPInfoWithHttpInfo(ip, reverseLookup);
        return localVarResp.getData();
    }

    /**
     * IP Info
     * Get location information about an IP address and do reverse DNS (PTR) lookups
     * @param ip IPv4 or IPv6 address (required)
     * @param reverseLookup Do a reverse DNS (PTR) lookup. This option can add extra delay to the request so only use it if you need it (optional, default to false)
     * @return ApiResponse&lt;IPInfoResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Your API request has been rejected. Check error code for details </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> You have failed to authenticate </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> We messed up, sorry! Your request has caused a fatal exception </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> We messed up, sorry! Your request has caused an error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<IPInfoResponse> iPInfoWithHttpInfo(String ip, Boolean reverseLookup) throws ApiException {
        okhttp3.Call localVarCall = iPInfoValidateBeforeCall(ip, reverseLookup, null);
        Type localVarReturnType = new TypeToken<IPInfoResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * IP Info (asynchronously)
     * Get location information about an IP address and do reverse DNS (PTR) lookups
     * @param ip IPv4 or IPv6 address (required)
     * @param reverseLookup Do a reverse DNS (PTR) lookup. This option can add extra delay to the request so only use it if you need it (optional, default to false)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Your API request has been rejected. Check error code for details </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> You have failed to authenticate </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> We messed up, sorry! Your request has caused a fatal exception </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> We messed up, sorry! Your request has caused an error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call iPInfoAsync(String ip, Boolean reverseLookup, final ApiCallback<IPInfoResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = iPInfoValidateBeforeCall(ip, reverseLookup, _callback);
        Type localVarReturnType = new TypeToken<IPInfoResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
