/*
 * Neutrino API
 * The general-purpose API
 *
 * The version of the OpenAPI document: 3.6.4
 * Contact: ops@neutrinoapi.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.Timezone;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * IPInfoResponse
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:54:58.398611-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class IPInfoResponse {
  public static final String SERIALIZED_NAME_CITY = "city";
  @SerializedName(SERIALIZED_NAME_CITY)
  private String city;

  public static final String SERIALIZED_NAME_CONTINENT_CODE = "continent-code";
  @SerializedName(SERIALIZED_NAME_CONTINENT_CODE)
  private String continentCode;

  public static final String SERIALIZED_NAME_COUNTRY = "country";
  @SerializedName(SERIALIZED_NAME_COUNTRY)
  private String country;

  public static final String SERIALIZED_NAME_COUNTRY_CODE = "country-code";
  @SerializedName(SERIALIZED_NAME_COUNTRY_CODE)
  private String countryCode;

  public static final String SERIALIZED_NAME_COUNTRY_CODE3 = "country-code3";
  @SerializedName(SERIALIZED_NAME_COUNTRY_CODE3)
  private String countryCode3;

  public static final String SERIALIZED_NAME_CURRENCY_CODE = "currency-code";
  @SerializedName(SERIALIZED_NAME_CURRENCY_CODE)
  private String currencyCode;

  public static final String SERIALIZED_NAME_HOST_DOMAIN = "host-domain";
  @SerializedName(SERIALIZED_NAME_HOST_DOMAIN)
  private String hostDomain;

  public static final String SERIALIZED_NAME_HOSTNAME = "hostname";
  @SerializedName(SERIALIZED_NAME_HOSTNAME)
  private String hostname;

  public static final String SERIALIZED_NAME_IP = "ip";
  @SerializedName(SERIALIZED_NAME_IP)
  private String ip;

  public static final String SERIALIZED_NAME_IS_BOGON = "is-bogon";
  @SerializedName(SERIALIZED_NAME_IS_BOGON)
  private Boolean isBogon;

  public static final String SERIALIZED_NAME_IS_V4_MAPPED = "is-v4-mapped";
  @SerializedName(SERIALIZED_NAME_IS_V4_MAPPED)
  private Boolean isV4Mapped;

  public static final String SERIALIZED_NAME_IS_V6 = "is-v6";
  @SerializedName(SERIALIZED_NAME_IS_V6)
  private Boolean isV6;

  public static final String SERIALIZED_NAME_LATITUDE = "latitude";
  @SerializedName(SERIALIZED_NAME_LATITUDE)
  private Double latitude;

  public static final String SERIALIZED_NAME_LONGITUDE = "longitude";
  @SerializedName(SERIALIZED_NAME_LONGITUDE)
  private Double longitude;

  public static final String SERIALIZED_NAME_REGION = "region";
  @SerializedName(SERIALIZED_NAME_REGION)
  private String region;

  public static final String SERIALIZED_NAME_REGION_CODE = "region-code";
  @SerializedName(SERIALIZED_NAME_REGION_CODE)
  private String regionCode;

  public static final String SERIALIZED_NAME_TIMEZONE = "timezone";
  @SerializedName(SERIALIZED_NAME_TIMEZONE)
  private Timezone timezone;

  public static final String SERIALIZED_NAME_VALID = "valid";
  @SerializedName(SERIALIZED_NAME_VALID)
  private Boolean valid;

  public IPInfoResponse() {
  }

  public IPInfoResponse city(String city) {
    this.city = city;
    return this;
  }

  /**
   * Name of the city (if detectable)
   * @return city
   */
  @javax.annotation.Nonnull
  public String getCity() {
    return city;
  }

  public void setCity(String city) {
    this.city = city;
  }


  public IPInfoResponse continentCode(String continentCode) {
    this.continentCode = continentCode;
    return this;
  }

  /**
   * ISO 2-letter continent code
   * @return continentCode
   */
  @javax.annotation.Nonnull
  public String getContinentCode() {
    return continentCode;
  }

  public void setContinentCode(String continentCode) {
    this.continentCode = continentCode;
  }


  public IPInfoResponse country(String country) {
    this.country = country;
    return this;
  }

  /**
   * Full country name
   * @return country
   */
  @javax.annotation.Nonnull
  public String getCountry() {
    return country;
  }

  public void setCountry(String country) {
    this.country = country;
  }


  public IPInfoResponse countryCode(String countryCode) {
    this.countryCode = countryCode;
    return this;
  }

  /**
   * ISO 2-letter country code
   * @return countryCode
   */
  @javax.annotation.Nonnull
  public String getCountryCode() {
    return countryCode;
  }

  public void setCountryCode(String countryCode) {
    this.countryCode = countryCode;
  }


  public IPInfoResponse countryCode3(String countryCode3) {
    this.countryCode3 = countryCode3;
    return this;
  }

  /**
   * ISO 3-letter country code
   * @return countryCode3
   */
  @javax.annotation.Nonnull
  public String getCountryCode3() {
    return countryCode3;
  }

  public void setCountryCode3(String countryCode3) {
    this.countryCode3 = countryCode3;
  }


  public IPInfoResponse currencyCode(String currencyCode) {
    this.currencyCode = currencyCode;
    return this;
  }

  /**
   * ISO 4217 currency code associated with the country
   * @return currencyCode
   */
  @javax.annotation.Nonnull
  public String getCurrencyCode() {
    return currencyCode;
  }

  public void setCurrencyCode(String currencyCode) {
    this.currencyCode = currencyCode;
  }


  public IPInfoResponse hostDomain(String hostDomain) {
    this.hostDomain = hostDomain;
    return this;
  }

  /**
   * The IPs host domain (only set if reverse-lookup has been used)
   * @return hostDomain
   */
  @javax.annotation.Nonnull
  public String getHostDomain() {
    return hostDomain;
  }

  public void setHostDomain(String hostDomain) {
    this.hostDomain = hostDomain;
  }


  public IPInfoResponse hostname(String hostname) {
    this.hostname = hostname;
    return this;
  }

  /**
   * The IPs full hostname (only set if reverse-lookup has been used)
   * @return hostname
   */
  @javax.annotation.Nonnull
  public String getHostname() {
    return hostname;
  }

  public void setHostname(String hostname) {
    this.hostname = hostname;
  }


  public IPInfoResponse ip(String ip) {
    this.ip = ip;
    return this;
  }

  /**
   * The IP address
   * @return ip
   */
  @javax.annotation.Nonnull
  public String getIp() {
    return ip;
  }

  public void setIp(String ip) {
    this.ip = ip;
  }


  public IPInfoResponse isBogon(Boolean isBogon) {
    this.isBogon = isBogon;
    return this;
  }

  /**
   * True if this is a bogon IP address such as a private network, local network or reserved address
   * @return isBogon
   */
  @javax.annotation.Nonnull
  public Boolean getIsBogon() {
    return isBogon;
  }

  public void setIsBogon(Boolean isBogon) {
    this.isBogon = isBogon;
  }


  public IPInfoResponse isV4Mapped(Boolean isV4Mapped) {
    this.isV4Mapped = isV4Mapped;
    return this;
  }

  /**
   * True if this is a &lt;a href&#x3D;\&quot;https://en.wikipedia.org/wiki/IPv6#IPv4-mapped_IPv6_addresses\&quot;&gt;IPv4 mapped IPv6 address&lt;/a&gt;
   * @return isV4Mapped
   */
  @javax.annotation.Nonnull
  public Boolean getIsV4Mapped() {
    return isV4Mapped;
  }

  public void setIsV4Mapped(Boolean isV4Mapped) {
    this.isV4Mapped = isV4Mapped;
  }


  public IPInfoResponse isV6(Boolean isV6) {
    this.isV6 = isV6;
    return this;
  }

  /**
   * True if this is a IPv6 address. False if IPv4
   * @return isV6
   */
  @javax.annotation.Nonnull
  public Boolean getIsV6() {
    return isV6;
  }

  public void setIsV6(Boolean isV6) {
    this.isV6 = isV6;
  }


  public IPInfoResponse latitude(Double latitude) {
    this.latitude = latitude;
    return this;
  }

  /**
   * Location latitude
   * @return latitude
   */
  @javax.annotation.Nonnull
  public Double getLatitude() {
    return latitude;
  }

  public void setLatitude(Double latitude) {
    this.latitude = latitude;
  }


  public IPInfoResponse longitude(Double longitude) {
    this.longitude = longitude;
    return this;
  }

  /**
   * Location longitude
   * @return longitude
   */
  @javax.annotation.Nonnull
  public Double getLongitude() {
    return longitude;
  }

  public void setLongitude(Double longitude) {
    this.longitude = longitude;
  }


  public IPInfoResponse region(String region) {
    this.region = region;
    return this;
  }

  /**
   * Name of the region (if detectable)
   * @return region
   */
  @javax.annotation.Nonnull
  public String getRegion() {
    return region;
  }

  public void setRegion(String region) {
    this.region = region;
  }


  public IPInfoResponse regionCode(String regionCode) {
    this.regionCode = regionCode;
    return this;
  }

  /**
   * ISO 3166-2 region code (if detectable)
   * @return regionCode
   */
  @javax.annotation.Nonnull
  public String getRegionCode() {
    return regionCode;
  }

  public void setRegionCode(String regionCode) {
    this.regionCode = regionCode;
  }


  public IPInfoResponse timezone(Timezone timezone) {
    this.timezone = timezone;
    return this;
  }

  /**
   * Get timezone
   * @return timezone
   */
  @javax.annotation.Nonnull
  public Timezone getTimezone() {
    return timezone;
  }

  public void setTimezone(Timezone timezone) {
    this.timezone = timezone;
  }


  public IPInfoResponse valid(Boolean valid) {
    this.valid = valid;
    return this;
  }

  /**
   * True if this is a valid IPv4 or IPv6 address
   * @return valid
   */
  @javax.annotation.Nonnull
  public Boolean getValid() {
    return valid;
  }

  public void setValid(Boolean valid) {
    this.valid = valid;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    IPInfoResponse ipInfoResponse = (IPInfoResponse) o;
    return Objects.equals(this.city, ipInfoResponse.city) &&
        Objects.equals(this.continentCode, ipInfoResponse.continentCode) &&
        Objects.equals(this.country, ipInfoResponse.country) &&
        Objects.equals(this.countryCode, ipInfoResponse.countryCode) &&
        Objects.equals(this.countryCode3, ipInfoResponse.countryCode3) &&
        Objects.equals(this.currencyCode, ipInfoResponse.currencyCode) &&
        Objects.equals(this.hostDomain, ipInfoResponse.hostDomain) &&
        Objects.equals(this.hostname, ipInfoResponse.hostname) &&
        Objects.equals(this.ip, ipInfoResponse.ip) &&
        Objects.equals(this.isBogon, ipInfoResponse.isBogon) &&
        Objects.equals(this.isV4Mapped, ipInfoResponse.isV4Mapped) &&
        Objects.equals(this.isV6, ipInfoResponse.isV6) &&
        Objects.equals(this.latitude, ipInfoResponse.latitude) &&
        Objects.equals(this.longitude, ipInfoResponse.longitude) &&
        Objects.equals(this.region, ipInfoResponse.region) &&
        Objects.equals(this.regionCode, ipInfoResponse.regionCode) &&
        Objects.equals(this.timezone, ipInfoResponse.timezone) &&
        Objects.equals(this.valid, ipInfoResponse.valid);
  }

  @Override
  public int hashCode() {
    return Objects.hash(city, continentCode, country, countryCode, countryCode3, currencyCode, hostDomain, hostname, ip, isBogon, isV4Mapped, isV6, latitude, longitude, region, regionCode, timezone, valid);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class IPInfoResponse {\n");
    sb.append("    city: ").append(toIndentedString(city)).append("\n");
    sb.append("    continentCode: ").append(toIndentedString(continentCode)).append("\n");
    sb.append("    country: ").append(toIndentedString(country)).append("\n");
    sb.append("    countryCode: ").append(toIndentedString(countryCode)).append("\n");
    sb.append("    countryCode3: ").append(toIndentedString(countryCode3)).append("\n");
    sb.append("    currencyCode: ").append(toIndentedString(currencyCode)).append("\n");
    sb.append("    hostDomain: ").append(toIndentedString(hostDomain)).append("\n");
    sb.append("    hostname: ").append(toIndentedString(hostname)).append("\n");
    sb.append("    ip: ").append(toIndentedString(ip)).append("\n");
    sb.append("    isBogon: ").append(toIndentedString(isBogon)).append("\n");
    sb.append("    isV4Mapped: ").append(toIndentedString(isV4Mapped)).append("\n");
    sb.append("    isV6: ").append(toIndentedString(isV6)).append("\n");
    sb.append("    latitude: ").append(toIndentedString(latitude)).append("\n");
    sb.append("    longitude: ").append(toIndentedString(longitude)).append("\n");
    sb.append("    region: ").append(toIndentedString(region)).append("\n");
    sb.append("    regionCode: ").append(toIndentedString(regionCode)).append("\n");
    sb.append("    timezone: ").append(toIndentedString(timezone)).append("\n");
    sb.append("    valid: ").append(toIndentedString(valid)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("city");
    openapiFields.add("continent-code");
    openapiFields.add("country");
    openapiFields.add("country-code");
    openapiFields.add("country-code3");
    openapiFields.add("currency-code");
    openapiFields.add("host-domain");
    openapiFields.add("hostname");
    openapiFields.add("ip");
    openapiFields.add("is-bogon");
    openapiFields.add("is-v4-mapped");
    openapiFields.add("is-v6");
    openapiFields.add("latitude");
    openapiFields.add("longitude");
    openapiFields.add("region");
    openapiFields.add("region-code");
    openapiFields.add("timezone");
    openapiFields.add("valid");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("city");
    openapiRequiredFields.add("continent-code");
    openapiRequiredFields.add("country");
    openapiRequiredFields.add("country-code");
    openapiRequiredFields.add("country-code3");
    openapiRequiredFields.add("currency-code");
    openapiRequiredFields.add("host-domain");
    openapiRequiredFields.add("hostname");
    openapiRequiredFields.add("ip");
    openapiRequiredFields.add("is-bogon");
    openapiRequiredFields.add("is-v4-mapped");
    openapiRequiredFields.add("is-v6");
    openapiRequiredFields.add("latitude");
    openapiRequiredFields.add("longitude");
    openapiRequiredFields.add("region");
    openapiRequiredFields.add("region-code");
    openapiRequiredFields.add("timezone");
    openapiRequiredFields.add("valid");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to IPInfoResponse
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!IPInfoResponse.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in IPInfoResponse is not found in the empty JSON string", IPInfoResponse.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!IPInfoResponse.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `IPInfoResponse` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : IPInfoResponse.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("city").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `city` to be a primitive type in the JSON string but got `%s`", jsonObj.get("city").toString()));
      }
      if (!jsonObj.get("continent-code").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `continent-code` to be a primitive type in the JSON string but got `%s`", jsonObj.get("continent-code").toString()));
      }
      if (!jsonObj.get("country").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `country` to be a primitive type in the JSON string but got `%s`", jsonObj.get("country").toString()));
      }
      if (!jsonObj.get("country-code").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `country-code` to be a primitive type in the JSON string but got `%s`", jsonObj.get("country-code").toString()));
      }
      if (!jsonObj.get("country-code3").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `country-code3` to be a primitive type in the JSON string but got `%s`", jsonObj.get("country-code3").toString()));
      }
      if (!jsonObj.get("currency-code").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `currency-code` to be a primitive type in the JSON string but got `%s`", jsonObj.get("currency-code").toString()));
      }
      if (!jsonObj.get("host-domain").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `host-domain` to be a primitive type in the JSON string but got `%s`", jsonObj.get("host-domain").toString()));
      }
      if (!jsonObj.get("hostname").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `hostname` to be a primitive type in the JSON string but got `%s`", jsonObj.get("hostname").toString()));
      }
      if (!jsonObj.get("ip").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ip` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ip").toString()));
      }
      if (!jsonObj.get("region").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `region` to be a primitive type in the JSON string but got `%s`", jsonObj.get("region").toString()));
      }
      if (!jsonObj.get("region-code").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `region-code` to be a primitive type in the JSON string but got `%s`", jsonObj.get("region-code").toString()));
      }
      // validate the required field `timezone`
      Timezone.validateJsonElement(jsonObj.get("timezone"));
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!IPInfoResponse.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'IPInfoResponse' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<IPInfoResponse> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(IPInfoResponse.class));

       return (TypeAdapter<T>) new TypeAdapter<IPInfoResponse>() {
           @Override
           public void write(JsonWriter out, IPInfoResponse value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public IPInfoResponse read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of IPInfoResponse given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of IPInfoResponse
   * @throws IOException if the JSON string is invalid with respect to IPInfoResponse
   */
  public static IPInfoResponse fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, IPInfoResponse.class);
  }

  /**
   * Convert an instance of IPInfoResponse to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

