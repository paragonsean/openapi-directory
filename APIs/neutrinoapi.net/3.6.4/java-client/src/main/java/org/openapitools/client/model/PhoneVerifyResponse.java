/*
 * Neutrino API
 * The general-purpose API
 *
 * The version of the OpenAPI document: 3.6.4
 * Contact: ops@neutrinoapi.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * PhoneVerifyResponse
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:54:58.398611-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class PhoneVerifyResponse {
  public static final String SERIALIZED_NAME_CALLING = "calling";
  @SerializedName(SERIALIZED_NAME_CALLING)
  private Boolean calling;

  public static final String SERIALIZED_NAME_NUMBER_VALID = "number-valid";
  @SerializedName(SERIALIZED_NAME_NUMBER_VALID)
  private Boolean numberValid;

  public static final String SERIALIZED_NAME_SECURITY_CODE = "security-code";
  @SerializedName(SERIALIZED_NAME_SECURITY_CODE)
  private String securityCode;

  public PhoneVerifyResponse() {
  }

  public PhoneVerifyResponse calling(Boolean calling) {
    this.calling = calling;
    return this;
  }

  /**
   * True if the call is being made now
   * @return calling
   */
  @javax.annotation.Nonnull
  public Boolean getCalling() {
    return calling;
  }

  public void setCalling(Boolean calling) {
    this.calling = calling;
  }


  public PhoneVerifyResponse numberValid(Boolean numberValid) {
    this.numberValid = numberValid;
    return this;
  }

  /**
   * True if this a valid phone number
   * @return numberValid
   */
  @javax.annotation.Nonnull
  public Boolean getNumberValid() {
    return numberValid;
  }

  public void setNumberValid(Boolean numberValid) {
    this.numberValid = numberValid;
  }


  public PhoneVerifyResponse securityCode(String securityCode) {
    this.securityCode = securityCode;
    return this;
  }

  /**
   * The security code generated, you can save this code to perform your own verification or you can use the &lt;a href&#x3D;\&quot;https://www.neutrinoapi.com/api/verify-security-code/\&quot;&gt;Verify Security Code API&lt;/a&gt;
   * @return securityCode
   */
  @javax.annotation.Nonnull
  public String getSecurityCode() {
    return securityCode;
  }

  public void setSecurityCode(String securityCode) {
    this.securityCode = securityCode;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PhoneVerifyResponse phoneVerifyResponse = (PhoneVerifyResponse) o;
    return Objects.equals(this.calling, phoneVerifyResponse.calling) &&
        Objects.equals(this.numberValid, phoneVerifyResponse.numberValid) &&
        Objects.equals(this.securityCode, phoneVerifyResponse.securityCode);
  }

  @Override
  public int hashCode() {
    return Objects.hash(calling, numberValid, securityCode);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PhoneVerifyResponse {\n");
    sb.append("    calling: ").append(toIndentedString(calling)).append("\n");
    sb.append("    numberValid: ").append(toIndentedString(numberValid)).append("\n");
    sb.append("    securityCode: ").append(toIndentedString(securityCode)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("calling");
    openapiFields.add("number-valid");
    openapiFields.add("security-code");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("calling");
    openapiRequiredFields.add("number-valid");
    openapiRequiredFields.add("security-code");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to PhoneVerifyResponse
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!PhoneVerifyResponse.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in PhoneVerifyResponse is not found in the empty JSON string", PhoneVerifyResponse.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!PhoneVerifyResponse.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `PhoneVerifyResponse` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : PhoneVerifyResponse.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("security-code").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `security-code` to be a primitive type in the JSON string but got `%s`", jsonObj.get("security-code").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!PhoneVerifyResponse.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'PhoneVerifyResponse' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<PhoneVerifyResponse> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(PhoneVerifyResponse.class));

       return (TypeAdapter<T>) new TypeAdapter<PhoneVerifyResponse>() {
           @Override
           public void write(JsonWriter out, PhoneVerifyResponse value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public PhoneVerifyResponse read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of PhoneVerifyResponse given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of PhoneVerifyResponse
   * @throws IOException if the JSON string is invalid with respect to PhoneVerifyResponse
   */
  public static PhoneVerifyResponse fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, PhoneVerifyResponse.class);
  }

  /**
   * Convert an instance of PhoneVerifyResponse to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

