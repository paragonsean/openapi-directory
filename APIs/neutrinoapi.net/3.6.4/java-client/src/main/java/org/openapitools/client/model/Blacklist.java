/*
 * Neutrino API
 * The general-purpose API
 *
 * The version of the OpenAPI document: 3.6.4
 * Contact: ops@neutrinoapi.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Blacklist
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:54:58.398611-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Blacklist {
  public static final String SERIALIZED_NAME_IS_LISTED = "is-listed";
  @SerializedName(SERIALIZED_NAME_IS_LISTED)
  private Boolean isListed;

  public static final String SERIALIZED_NAME_LIST_HOST = "list-host";
  @SerializedName(SERIALIZED_NAME_LIST_HOST)
  private String listHost;

  public static final String SERIALIZED_NAME_LIST_NAME = "list-name";
  @SerializedName(SERIALIZED_NAME_LIST_NAME)
  private String listName;

  public static final String SERIALIZED_NAME_LIST_RATING = "list-rating";
  @SerializedName(SERIALIZED_NAME_LIST_RATING)
  private Integer listRating;

  public static final String SERIALIZED_NAME_RESPONSE_TIME = "response-time";
  @SerializedName(SERIALIZED_NAME_RESPONSE_TIME)
  private Integer responseTime;

  public static final String SERIALIZED_NAME_RETURN_CODE = "return-code";
  @SerializedName(SERIALIZED_NAME_RETURN_CODE)
  private String returnCode;

  public static final String SERIALIZED_NAME_TXT_RECORD = "txt-record";
  @SerializedName(SERIALIZED_NAME_TXT_RECORD)
  private String txtRecord;

  public Blacklist() {
  }

  public Blacklist isListed(Boolean isListed) {
    this.isListed = isListed;
    return this;
  }

  /**
   * True if the host is currently black-listed
   * @return isListed
   */
  @javax.annotation.Nonnull
  public Boolean getIsListed() {
    return isListed;
  }

  public void setIsListed(Boolean isListed) {
    this.isListed = isListed;
  }


  public Blacklist listHost(String listHost) {
    this.listHost = listHost;
    return this;
  }

  /**
   * The hostname of the DNSBL
   * @return listHost
   */
  @javax.annotation.Nonnull
  public String getListHost() {
    return listHost;
  }

  public void setListHost(String listHost) {
    this.listHost = listHost;
  }


  public Blacklist listName(String listName) {
    this.listName = listName;
    return this;
  }

  /**
   * The name of the DNSBL
   * @return listName
   */
  @javax.annotation.Nonnull
  public String getListName() {
    return listName;
  }

  public void setListName(String listName) {
    this.listName = listName;
  }


  public Blacklist listRating(Integer listRating) {
    this.listRating = listRating;
    return this;
  }

  /**
   * The list rating [1-3] with 1 being the best rating and 3 the lowest rating
   * @return listRating
   */
  @javax.annotation.Nonnull
  public Integer getListRating() {
    return listRating;
  }

  public void setListRating(Integer listRating) {
    this.listRating = listRating;
  }


  public Blacklist responseTime(Integer responseTime) {
    this.responseTime = responseTime;
    return this;
  }

  /**
   * The DNSBL server response time in milliseconds
   * @return responseTime
   */
  @javax.annotation.Nonnull
  public Integer getResponseTime() {
    return responseTime;
  }

  public void setResponseTime(Integer responseTime) {
    this.responseTime = responseTime;
  }


  public Blacklist returnCode(String returnCode) {
    this.returnCode = returnCode;
    return this;
  }

  /**
   * The specific return code for this listing (only set if listed)
   * @return returnCode
   */
  @javax.annotation.Nonnull
  public String getReturnCode() {
    return returnCode;
  }

  public void setReturnCode(String returnCode) {
    this.returnCode = returnCode;
  }


  public Blacklist txtRecord(String txtRecord) {
    this.txtRecord = txtRecord;
    return this;
  }

  /**
   * The TXT record returned for this listing (only set if listed)
   * @return txtRecord
   */
  @javax.annotation.Nonnull
  public String getTxtRecord() {
    return txtRecord;
  }

  public void setTxtRecord(String txtRecord) {
    this.txtRecord = txtRecord;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Blacklist blacklist = (Blacklist) o;
    return Objects.equals(this.isListed, blacklist.isListed) &&
        Objects.equals(this.listHost, blacklist.listHost) &&
        Objects.equals(this.listName, blacklist.listName) &&
        Objects.equals(this.listRating, blacklist.listRating) &&
        Objects.equals(this.responseTime, blacklist.responseTime) &&
        Objects.equals(this.returnCode, blacklist.returnCode) &&
        Objects.equals(this.txtRecord, blacklist.txtRecord);
  }

  @Override
  public int hashCode() {
    return Objects.hash(isListed, listHost, listName, listRating, responseTime, returnCode, txtRecord);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Blacklist {\n");
    sb.append("    isListed: ").append(toIndentedString(isListed)).append("\n");
    sb.append("    listHost: ").append(toIndentedString(listHost)).append("\n");
    sb.append("    listName: ").append(toIndentedString(listName)).append("\n");
    sb.append("    listRating: ").append(toIndentedString(listRating)).append("\n");
    sb.append("    responseTime: ").append(toIndentedString(responseTime)).append("\n");
    sb.append("    returnCode: ").append(toIndentedString(returnCode)).append("\n");
    sb.append("    txtRecord: ").append(toIndentedString(txtRecord)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("is-listed");
    openapiFields.add("list-host");
    openapiFields.add("list-name");
    openapiFields.add("list-rating");
    openapiFields.add("response-time");
    openapiFields.add("return-code");
    openapiFields.add("txt-record");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("is-listed");
    openapiRequiredFields.add("list-host");
    openapiRequiredFields.add("list-name");
    openapiRequiredFields.add("list-rating");
    openapiRequiredFields.add("response-time");
    openapiRequiredFields.add("return-code");
    openapiRequiredFields.add("txt-record");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Blacklist
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Blacklist.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Blacklist is not found in the empty JSON string", Blacklist.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Blacklist.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Blacklist` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : Blacklist.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("list-host").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `list-host` to be a primitive type in the JSON string but got `%s`", jsonObj.get("list-host").toString()));
      }
      if (!jsonObj.get("list-name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `list-name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("list-name").toString()));
      }
      if (!jsonObj.get("return-code").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `return-code` to be a primitive type in the JSON string but got `%s`", jsonObj.get("return-code").toString()));
      }
      if (!jsonObj.get("txt-record").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `txt-record` to be a primitive type in the JSON string but got `%s`", jsonObj.get("txt-record").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Blacklist.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Blacklist' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Blacklist> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Blacklist.class));

       return (TypeAdapter<T>) new TypeAdapter<Blacklist>() {
           @Override
           public void write(JsonWriter out, Blacklist value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Blacklist read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Blacklist given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Blacklist
   * @throws IOException if the JSON string is invalid with respect to Blacklist
   */
  public static Blacklist fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Blacklist.class);
  }

  /**
   * Convert an instance of Blacklist to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

