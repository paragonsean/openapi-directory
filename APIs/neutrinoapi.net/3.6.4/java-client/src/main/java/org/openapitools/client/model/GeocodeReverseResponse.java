/*
 * Neutrino API
 * The general-purpose API
 *
 * The version of the OpenAPI document: 3.6.4
 * Contact: ops@neutrinoapi.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import org.openapitools.client.model.Timezone;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * GeocodeReverseResponse
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:54:58.398611-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class GeocodeReverseResponse {
  public static final String SERIALIZED_NAME_ADDRESS = "address";
  @SerializedName(SERIALIZED_NAME_ADDRESS)
  private String address;

  public static final String SERIALIZED_NAME_ADDRESS_COMPONENTS = "address-components";
  @SerializedName(SERIALIZED_NAME_ADDRESS_COMPONENTS)
  private Map<String, String> addressComponents = new HashMap<>();

  public static final String SERIALIZED_NAME_CITY = "city";
  @SerializedName(SERIALIZED_NAME_CITY)
  private String city;

  public static final String SERIALIZED_NAME_COUNTRY = "country";
  @SerializedName(SERIALIZED_NAME_COUNTRY)
  private String country;

  public static final String SERIALIZED_NAME_COUNTRY_CODE = "country-code";
  @SerializedName(SERIALIZED_NAME_COUNTRY_CODE)
  private String countryCode;

  public static final String SERIALIZED_NAME_COUNTRY_CODE3 = "country-code3";
  @SerializedName(SERIALIZED_NAME_COUNTRY_CODE3)
  private String countryCode3;

  public static final String SERIALIZED_NAME_CURRENCY_CODE = "currency-code";
  @SerializedName(SERIALIZED_NAME_CURRENCY_CODE)
  private String currencyCode;

  public static final String SERIALIZED_NAME_FOUND = "found";
  @SerializedName(SERIALIZED_NAME_FOUND)
  private Boolean found;

  public static final String SERIALIZED_NAME_LATITUDE = "latitude";
  @SerializedName(SERIALIZED_NAME_LATITUDE)
  private Double latitude;

  public static final String SERIALIZED_NAME_LOCATION_TAGS = "location-tags";
  @SerializedName(SERIALIZED_NAME_LOCATION_TAGS)
  private List<String> locationTags = new ArrayList<>();

  public static final String SERIALIZED_NAME_LOCATION_TYPE = "location-type";
  @SerializedName(SERIALIZED_NAME_LOCATION_TYPE)
  private String locationType;

  public static final String SERIALIZED_NAME_LONGITUDE = "longitude";
  @SerializedName(SERIALIZED_NAME_LONGITUDE)
  private Double longitude;

  public static final String SERIALIZED_NAME_POSTAL_ADDRESS = "postal-address";
  @SerializedName(SERIALIZED_NAME_POSTAL_ADDRESS)
  private String postalAddress;

  public static final String SERIALIZED_NAME_POSTAL_CODE = "postal-code";
  @SerializedName(SERIALIZED_NAME_POSTAL_CODE)
  private String postalCode;

  public static final String SERIALIZED_NAME_REGION_CODE = "region-code";
  @SerializedName(SERIALIZED_NAME_REGION_CODE)
  private String regionCode;

  public static final String SERIALIZED_NAME_STATE = "state";
  @SerializedName(SERIALIZED_NAME_STATE)
  private String state;

  public static final String SERIALIZED_NAME_TIMEZONE = "timezone";
  @SerializedName(SERIALIZED_NAME_TIMEZONE)
  private Map<String, Timezone> timezone = new HashMap<>();

  public GeocodeReverseResponse() {
  }

  public GeocodeReverseResponse address(String address) {
    this.address = address;
    return this;
  }

  /**
   * The complete address using comma-separated values
   * @return address
   */
  @javax.annotation.Nonnull
  public String getAddress() {
    return address;
  }

  public void setAddress(String address) {
    this.address = address;
  }


  public GeocodeReverseResponse addressComponents(Map<String, String> addressComponents) {
    this.addressComponents = addressComponents;
    return this;
  }

  public GeocodeReverseResponse putAddressComponentsItem(String key, String addressComponentsItem) {
    if (this.addressComponents == null) {
      this.addressComponents = new HashMap<>();
    }
    this.addressComponents.put(key, addressComponentsItem);
    return this;
  }

  /**
   * The components which make up the address such as road, city, state, etc
   * @return addressComponents
   */
  @javax.annotation.Nonnull
  public Map<String, String> getAddressComponents() {
    return addressComponents;
  }

  public void setAddressComponents(Map<String, String> addressComponents) {
    this.addressComponents = addressComponents;
  }


  public GeocodeReverseResponse city(String city) {
    this.city = city;
    return this;
  }

  /**
   * The city of the location
   * @return city
   */
  @javax.annotation.Nonnull
  public String getCity() {
    return city;
  }

  public void setCity(String city) {
    this.city = city;
  }


  public GeocodeReverseResponse country(String country) {
    this.country = country;
    return this;
  }

  /**
   * The country of the location
   * @return country
   */
  @javax.annotation.Nonnull
  public String getCountry() {
    return country;
  }

  public void setCountry(String country) {
    this.country = country;
  }


  public GeocodeReverseResponse countryCode(String countryCode) {
    this.countryCode = countryCode;
    return this;
  }

  /**
   * The ISO 2-letter country code of the location
   * @return countryCode
   */
  @javax.annotation.Nonnull
  public String getCountryCode() {
    return countryCode;
  }

  public void setCountryCode(String countryCode) {
    this.countryCode = countryCode;
  }


  public GeocodeReverseResponse countryCode3(String countryCode3) {
    this.countryCode3 = countryCode3;
    return this;
  }

  /**
   * The ISO 3-letter country code of the location
   * @return countryCode3
   */
  @javax.annotation.Nonnull
  public String getCountryCode3() {
    return countryCode3;
  }

  public void setCountryCode3(String countryCode3) {
    this.countryCode3 = countryCode3;
  }


  public GeocodeReverseResponse currencyCode(String currencyCode) {
    this.currencyCode = currencyCode;
    return this;
  }

  /**
   * ISO 4217 currency code associated with the country
   * @return currencyCode
   */
  @javax.annotation.Nonnull
  public String getCurrencyCode() {
    return currencyCode;
  }

  public void setCurrencyCode(String currencyCode) {
    this.currencyCode = currencyCode;
  }


  public GeocodeReverseResponse found(Boolean found) {
    this.found = found;
    return this;
  }

  /**
   * True if these coordinates map to a real location
   * @return found
   */
  @javax.annotation.Nonnull
  public Boolean getFound() {
    return found;
  }

  public void setFound(Boolean found) {
    this.found = found;
  }


  public GeocodeReverseResponse latitude(Double latitude) {
    this.latitude = latitude;
    return this;
  }

  /**
   * The location latitude
   * @return latitude
   */
  @javax.annotation.Nonnull
  public Double getLatitude() {
    return latitude;
  }

  public void setLatitude(Double latitude) {
    this.latitude = latitude;
  }


  public GeocodeReverseResponse locationTags(List<String> locationTags) {
    this.locationTags = locationTags;
    return this;
  }

  public GeocodeReverseResponse addLocationTagsItem(String locationTagsItem) {
    if (this.locationTags == null) {
      this.locationTags = new ArrayList<>();
    }
    this.locationTags.add(locationTagsItem);
    return this;
  }

  /**
   * Array of strings containing any location tags associated with the address. Tags are additional pieces of metadata about a specific location, there are thousands of different tags. Some examples of tags: shop, office, cafe, bank, pub
   * @return locationTags
   */
  @javax.annotation.Nonnull
  public List<String> getLocationTags() {
    return locationTags;
  }

  public void setLocationTags(List<String> locationTags) {
    this.locationTags = locationTags;
  }


  public GeocodeReverseResponse locationType(String locationType) {
    this.locationType = locationType;
    return this;
  }

  /**
   * The detected location type ordered roughly from most to least precise, possible values are: &lt;br&gt; &lt;ul&gt; &lt;li&gt;address - indicates a precise street address&lt;/li&gt; &lt;li&gt;street - accurate to the street level but may not point to the exact location of the house/building number&lt;/li&gt; &lt;li&gt;city - accurate to the city level, this includes villages, towns, suburbs, etc&lt;/li&gt; &lt;li&gt;postal-code - indicates a postal code area (no house or street information present)&lt;/li&gt; &lt;li&gt;railway - location is part of a rail network such as a station or railway track&lt;/li&gt; &lt;li&gt;natural - indicates a natural feature, for example a mountain peak or a waterway&lt;/li&gt; &lt;li&gt;island - location is an island or archipelago&lt;/li&gt; &lt;li&gt;administrative - indicates an administrative boundary such as a country, state or province&lt;/li&gt; &lt;/ul&gt;
   * @return locationType
   */
  @javax.annotation.Nonnull
  public String getLocationType() {
    return locationType;
  }

  public void setLocationType(String locationType) {
    this.locationType = locationType;
  }


  public GeocodeReverseResponse longitude(Double longitude) {
    this.longitude = longitude;
    return this;
  }

  /**
   * The location longitude
   * @return longitude
   */
  @javax.annotation.Nonnull
  public Double getLongitude() {
    return longitude;
  }

  public void setLongitude(Double longitude) {
    this.longitude = longitude;
  }


  public GeocodeReverseResponse postalAddress(String postalAddress) {
    this.postalAddress = postalAddress;
    return this;
  }

  /**
   * The formatted address using local standards suitable for printing on an envelope
   * @return postalAddress
   */
  @javax.annotation.Nonnull
  public String getPostalAddress() {
    return postalAddress;
  }

  public void setPostalAddress(String postalAddress) {
    this.postalAddress = postalAddress;
  }


  public GeocodeReverseResponse postalCode(String postalCode) {
    this.postalCode = postalCode;
    return this;
  }

  /**
   * The postal code for the location
   * @return postalCode
   */
  @javax.annotation.Nonnull
  public String getPostalCode() {
    return postalCode;
  }

  public void setPostalCode(String postalCode) {
    this.postalCode = postalCode;
  }


  public GeocodeReverseResponse regionCode(String regionCode) {
    this.regionCode = regionCode;
    return this;
  }

  /**
   * The ISO 3166-2 region code for the location
   * @return regionCode
   */
  @javax.annotation.Nonnull
  public String getRegionCode() {
    return regionCode;
  }

  public void setRegionCode(String regionCode) {
    this.regionCode = regionCode;
  }


  public GeocodeReverseResponse state(String state) {
    this.state = state;
    return this;
  }

  /**
   * The state of the location
   * @return state
   */
  @javax.annotation.Nonnull
  public String getState() {
    return state;
  }

  public void setState(String state) {
    this.state = state;
  }


  public GeocodeReverseResponse timezone(Map<String, Timezone> timezone) {
    this.timezone = timezone;
    return this;
  }

  public GeocodeReverseResponse putTimezoneItem(String key, Timezone timezoneItem) {
    if (this.timezone == null) {
      this.timezone = new HashMap<>();
    }
    this.timezone.put(key, timezoneItem);
    return this;
  }

  /**
   * Map containing timezone details for the location
   * @return timezone
   */
  @javax.annotation.Nonnull
  public Map<String, Timezone> getTimezone() {
    return timezone;
  }

  public void setTimezone(Map<String, Timezone> timezone) {
    this.timezone = timezone;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GeocodeReverseResponse geocodeReverseResponse = (GeocodeReverseResponse) o;
    return Objects.equals(this.address, geocodeReverseResponse.address) &&
        Objects.equals(this.addressComponents, geocodeReverseResponse.addressComponents) &&
        Objects.equals(this.city, geocodeReverseResponse.city) &&
        Objects.equals(this.country, geocodeReverseResponse.country) &&
        Objects.equals(this.countryCode, geocodeReverseResponse.countryCode) &&
        Objects.equals(this.countryCode3, geocodeReverseResponse.countryCode3) &&
        Objects.equals(this.currencyCode, geocodeReverseResponse.currencyCode) &&
        Objects.equals(this.found, geocodeReverseResponse.found) &&
        Objects.equals(this.latitude, geocodeReverseResponse.latitude) &&
        Objects.equals(this.locationTags, geocodeReverseResponse.locationTags) &&
        Objects.equals(this.locationType, geocodeReverseResponse.locationType) &&
        Objects.equals(this.longitude, geocodeReverseResponse.longitude) &&
        Objects.equals(this.postalAddress, geocodeReverseResponse.postalAddress) &&
        Objects.equals(this.postalCode, geocodeReverseResponse.postalCode) &&
        Objects.equals(this.regionCode, geocodeReverseResponse.regionCode) &&
        Objects.equals(this.state, geocodeReverseResponse.state) &&
        Objects.equals(this.timezone, geocodeReverseResponse.timezone);
  }

  @Override
  public int hashCode() {
    return Objects.hash(address, addressComponents, city, country, countryCode, countryCode3, currencyCode, found, latitude, locationTags, locationType, longitude, postalAddress, postalCode, regionCode, state, timezone);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GeocodeReverseResponse {\n");
    sb.append("    address: ").append(toIndentedString(address)).append("\n");
    sb.append("    addressComponents: ").append(toIndentedString(addressComponents)).append("\n");
    sb.append("    city: ").append(toIndentedString(city)).append("\n");
    sb.append("    country: ").append(toIndentedString(country)).append("\n");
    sb.append("    countryCode: ").append(toIndentedString(countryCode)).append("\n");
    sb.append("    countryCode3: ").append(toIndentedString(countryCode3)).append("\n");
    sb.append("    currencyCode: ").append(toIndentedString(currencyCode)).append("\n");
    sb.append("    found: ").append(toIndentedString(found)).append("\n");
    sb.append("    latitude: ").append(toIndentedString(latitude)).append("\n");
    sb.append("    locationTags: ").append(toIndentedString(locationTags)).append("\n");
    sb.append("    locationType: ").append(toIndentedString(locationType)).append("\n");
    sb.append("    longitude: ").append(toIndentedString(longitude)).append("\n");
    sb.append("    postalAddress: ").append(toIndentedString(postalAddress)).append("\n");
    sb.append("    postalCode: ").append(toIndentedString(postalCode)).append("\n");
    sb.append("    regionCode: ").append(toIndentedString(regionCode)).append("\n");
    sb.append("    state: ").append(toIndentedString(state)).append("\n");
    sb.append("    timezone: ").append(toIndentedString(timezone)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("address");
    openapiFields.add("address-components");
    openapiFields.add("city");
    openapiFields.add("country");
    openapiFields.add("country-code");
    openapiFields.add("country-code3");
    openapiFields.add("currency-code");
    openapiFields.add("found");
    openapiFields.add("latitude");
    openapiFields.add("location-tags");
    openapiFields.add("location-type");
    openapiFields.add("longitude");
    openapiFields.add("postal-address");
    openapiFields.add("postal-code");
    openapiFields.add("region-code");
    openapiFields.add("state");
    openapiFields.add("timezone");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("address");
    openapiRequiredFields.add("address-components");
    openapiRequiredFields.add("city");
    openapiRequiredFields.add("country");
    openapiRequiredFields.add("country-code");
    openapiRequiredFields.add("country-code3");
    openapiRequiredFields.add("currency-code");
    openapiRequiredFields.add("found");
    openapiRequiredFields.add("latitude");
    openapiRequiredFields.add("location-tags");
    openapiRequiredFields.add("location-type");
    openapiRequiredFields.add("longitude");
    openapiRequiredFields.add("postal-address");
    openapiRequiredFields.add("postal-code");
    openapiRequiredFields.add("region-code");
    openapiRequiredFields.add("state");
    openapiRequiredFields.add("timezone");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to GeocodeReverseResponse
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!GeocodeReverseResponse.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in GeocodeReverseResponse is not found in the empty JSON string", GeocodeReverseResponse.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!GeocodeReverseResponse.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `GeocodeReverseResponse` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : GeocodeReverseResponse.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("address").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `address` to be a primitive type in the JSON string but got `%s`", jsonObj.get("address").toString()));
      }
      if (!jsonObj.get("city").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `city` to be a primitive type in the JSON string but got `%s`", jsonObj.get("city").toString()));
      }
      if (!jsonObj.get("country").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `country` to be a primitive type in the JSON string but got `%s`", jsonObj.get("country").toString()));
      }
      if (!jsonObj.get("country-code").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `country-code` to be a primitive type in the JSON string but got `%s`", jsonObj.get("country-code").toString()));
      }
      if (!jsonObj.get("country-code3").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `country-code3` to be a primitive type in the JSON string but got `%s`", jsonObj.get("country-code3").toString()));
      }
      if (!jsonObj.get("currency-code").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `currency-code` to be a primitive type in the JSON string but got `%s`", jsonObj.get("currency-code").toString()));
      }
      // ensure the required json array is present
      if (jsonObj.get("location-tags") == null) {
        throw new IllegalArgumentException("Expected the field `linkedContent` to be an array in the JSON string but got `null`");
      } else if (!jsonObj.get("location-tags").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `location-tags` to be an array in the JSON string but got `%s`", jsonObj.get("location-tags").toString()));
      }
      if (!jsonObj.get("location-type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `location-type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("location-type").toString()));
      }
      if (!jsonObj.get("postal-address").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `postal-address` to be a primitive type in the JSON string but got `%s`", jsonObj.get("postal-address").toString()));
      }
      if (!jsonObj.get("postal-code").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `postal-code` to be a primitive type in the JSON string but got `%s`", jsonObj.get("postal-code").toString()));
      }
      if (!jsonObj.get("region-code").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `region-code` to be a primitive type in the JSON string but got `%s`", jsonObj.get("region-code").toString()));
      }
      if (!jsonObj.get("state").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `state` to be a primitive type in the JSON string but got `%s`", jsonObj.get("state").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!GeocodeReverseResponse.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'GeocodeReverseResponse' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<GeocodeReverseResponse> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(GeocodeReverseResponse.class));

       return (TypeAdapter<T>) new TypeAdapter<GeocodeReverseResponse>() {
           @Override
           public void write(JsonWriter out, GeocodeReverseResponse value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public GeocodeReverseResponse read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of GeocodeReverseResponse given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of GeocodeReverseResponse
   * @throws IOException if the JSON string is invalid with respect to GeocodeReverseResponse
   */
  public static GeocodeReverseResponse fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, GeocodeReverseResponse.class);
  }

  /**
   * Convert an instance of GeocodeReverseResponse to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

