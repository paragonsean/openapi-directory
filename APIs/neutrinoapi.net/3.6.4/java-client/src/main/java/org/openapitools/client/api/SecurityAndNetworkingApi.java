/*
 * Neutrino API
 * The general-purpose API
 *
 * The version of the OpenAPI document: 3.6.4
 * Contact: ops@neutrinoapi.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.APIError;
import org.openapitools.client.model.DomainLookupResponse;
import org.openapitools.client.model.EmailVerifyResponse;
import java.io.File;
import org.openapitools.client.model.HostReputationResponse;
import org.openapitools.client.model.IPBlocklistResponse;
import org.openapitools.client.model.IPProbeResponse;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class SecurityAndNetworkingApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public SecurityAndNetworkingApi() {
        this(Configuration.getDefaultApiClient());
    }

    public SecurityAndNetworkingApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for domainLookup
     * @param host A domain name, hostname, FQDN, URL, HTML link or email address to lookup (required)
     * @param live For domains that we have never seen before then perform various live checks and realtime reconnaissance. &lt;br&gt;NOTE: this option may add additional non-deterministic delay to the request, if you require consistently fast API response times or just want to check our domain blocklists then you can disable this option (optional, default to true)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Your API request has been rejected. Check error code for details </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> You have failed to authenticate </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> We messed up, sorry! Your request has caused a fatal exception </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> We messed up, sorry! Your request has caused an error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call domainLookupCall(String host, Boolean live, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/domain-lookup";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (host != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("host", host));
        }

        if (live != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("live", live));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api-key", "user-id" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call domainLookupValidateBeforeCall(String host, Boolean live, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'host' is set
        if (host == null) {
            throw new ApiException("Missing the required parameter 'host' when calling domainLookup(Async)");
        }

        return domainLookupCall(host, live, _callback);

    }

    /**
     * Domain Lookup
     * Retrieve domain name details and detect potentially malicious or dangerous domains
     * @param host A domain name, hostname, FQDN, URL, HTML link or email address to lookup (required)
     * @param live For domains that we have never seen before then perform various live checks and realtime reconnaissance. &lt;br&gt;NOTE: this option may add additional non-deterministic delay to the request, if you require consistently fast API response times or just want to check our domain blocklists then you can disable this option (optional, default to true)
     * @return DomainLookupResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Your API request has been rejected. Check error code for details </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> You have failed to authenticate </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> We messed up, sorry! Your request has caused a fatal exception </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> We messed up, sorry! Your request has caused an error </td><td>  -  </td></tr>
     </table>
     */
    public DomainLookupResponse domainLookup(String host, Boolean live) throws ApiException {
        ApiResponse<DomainLookupResponse> localVarResp = domainLookupWithHttpInfo(host, live);
        return localVarResp.getData();
    }

    /**
     * Domain Lookup
     * Retrieve domain name details and detect potentially malicious or dangerous domains
     * @param host A domain name, hostname, FQDN, URL, HTML link or email address to lookup (required)
     * @param live For domains that we have never seen before then perform various live checks and realtime reconnaissance. &lt;br&gt;NOTE: this option may add additional non-deterministic delay to the request, if you require consistently fast API response times or just want to check our domain blocklists then you can disable this option (optional, default to true)
     * @return ApiResponse&lt;DomainLookupResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Your API request has been rejected. Check error code for details </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> You have failed to authenticate </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> We messed up, sorry! Your request has caused a fatal exception </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> We messed up, sorry! Your request has caused an error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DomainLookupResponse> domainLookupWithHttpInfo(String host, Boolean live) throws ApiException {
        okhttp3.Call localVarCall = domainLookupValidateBeforeCall(host, live, null);
        Type localVarReturnType = new TypeToken<DomainLookupResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Domain Lookup (asynchronously)
     * Retrieve domain name details and detect potentially malicious or dangerous domains
     * @param host A domain name, hostname, FQDN, URL, HTML link or email address to lookup (required)
     * @param live For domains that we have never seen before then perform various live checks and realtime reconnaissance. &lt;br&gt;NOTE: this option may add additional non-deterministic delay to the request, if you require consistently fast API response times or just want to check our domain blocklists then you can disable this option (optional, default to true)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Your API request has been rejected. Check error code for details </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> You have failed to authenticate </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> We messed up, sorry! Your request has caused a fatal exception </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> We messed up, sorry! Your request has caused an error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call domainLookupAsync(String host, Boolean live, final ApiCallback<DomainLookupResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = domainLookupValidateBeforeCall(host, live, _callback);
        Type localVarReturnType = new TypeToken<DomainLookupResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for emailVerify
     * @param email An email address (required)
     * @param fixTypos Automatically attempt to fix typos in the address (optional, default to false)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Your API request has been rejected. Check error code for details </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> You have failed to authenticate </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> We messed up, sorry! Your request has caused a fatal exception </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> We messed up, sorry! Your request has caused an error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call emailVerifyCall(String email, Boolean fixTypos, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/email-verify";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (email != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("email", email));
        }

        if (fixTypos != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("fix-typos", fixTypos));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api-key", "user-id" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call emailVerifyValidateBeforeCall(String email, Boolean fixTypos, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'email' is set
        if (email == null) {
            throw new ApiException("Missing the required parameter 'email' when calling emailVerify(Async)");
        }

        return emailVerifyCall(email, fixTypos, _callback);

    }

    /**
     * Email Verify
     * SMTP based email address verification
     * @param email An email address (required)
     * @param fixTypos Automatically attempt to fix typos in the address (optional, default to false)
     * @return EmailVerifyResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Your API request has been rejected. Check error code for details </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> You have failed to authenticate </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> We messed up, sorry! Your request has caused a fatal exception </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> We messed up, sorry! Your request has caused an error </td><td>  -  </td></tr>
     </table>
     */
    public EmailVerifyResponse emailVerify(String email, Boolean fixTypos) throws ApiException {
        ApiResponse<EmailVerifyResponse> localVarResp = emailVerifyWithHttpInfo(email, fixTypos);
        return localVarResp.getData();
    }

    /**
     * Email Verify
     * SMTP based email address verification
     * @param email An email address (required)
     * @param fixTypos Automatically attempt to fix typos in the address (optional, default to false)
     * @return ApiResponse&lt;EmailVerifyResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Your API request has been rejected. Check error code for details </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> You have failed to authenticate </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> We messed up, sorry! Your request has caused a fatal exception </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> We messed up, sorry! Your request has caused an error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<EmailVerifyResponse> emailVerifyWithHttpInfo(String email, Boolean fixTypos) throws ApiException {
        okhttp3.Call localVarCall = emailVerifyValidateBeforeCall(email, fixTypos, null);
        Type localVarReturnType = new TypeToken<EmailVerifyResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Email Verify (asynchronously)
     * SMTP based email address verification
     * @param email An email address (required)
     * @param fixTypos Automatically attempt to fix typos in the address (optional, default to false)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Your API request has been rejected. Check error code for details </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> You have failed to authenticate </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> We messed up, sorry! Your request has caused a fatal exception </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> We messed up, sorry! Your request has caused an error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call emailVerifyAsync(String email, Boolean fixTypos, final ApiCallback<EmailVerifyResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = emailVerifyValidateBeforeCall(email, fixTypos, _callback);
        Type localVarReturnType = new TypeToken<EmailVerifyResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for hostReputation
     * @param host An IP address, domain name, FQDN or URL. &lt;br&gt;If you supply a domain/URL it will be checked against the URI DNSBL lists (required)
     * @param listRating Only check lists with this rating or better (optional, default to 3)
     * @param zones Only check these DNSBL zones/hosts. Multiple zones can be supplied as comma-separated values (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Your API request has been rejected. Check error code for details </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> You have failed to authenticate </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> We messed up, sorry! Your request has caused a fatal exception </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> We messed up, sorry! Your request has caused an error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call hostReputationCall(String host, Integer listRating, String zones, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/host-reputation";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (host != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("host", host));
        }

        if (listRating != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("list-rating", listRating));
        }

        if (zones != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("zones", zones));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api-key", "user-id" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call hostReputationValidateBeforeCall(String host, Integer listRating, String zones, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'host' is set
        if (host == null) {
            throw new ApiException("Missing the required parameter 'host' when calling hostReputation(Async)");
        }

        return hostReputationCall(host, listRating, zones, _callback);

    }

    /**
     * Host Reputation
     * Check the reputation of an IP address, domain name or URL against a comprehensive list of blacklists and blocklists
     * @param host An IP address, domain name, FQDN or URL. &lt;br&gt;If you supply a domain/URL it will be checked against the URI DNSBL lists (required)
     * @param listRating Only check lists with this rating or better (optional, default to 3)
     * @param zones Only check these DNSBL zones/hosts. Multiple zones can be supplied as comma-separated values (optional)
     * @return HostReputationResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Your API request has been rejected. Check error code for details </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> You have failed to authenticate </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> We messed up, sorry! Your request has caused a fatal exception </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> We messed up, sorry! Your request has caused an error </td><td>  -  </td></tr>
     </table>
     */
    public HostReputationResponse hostReputation(String host, Integer listRating, String zones) throws ApiException {
        ApiResponse<HostReputationResponse> localVarResp = hostReputationWithHttpInfo(host, listRating, zones);
        return localVarResp.getData();
    }

    /**
     * Host Reputation
     * Check the reputation of an IP address, domain name or URL against a comprehensive list of blacklists and blocklists
     * @param host An IP address, domain name, FQDN or URL. &lt;br&gt;If you supply a domain/URL it will be checked against the URI DNSBL lists (required)
     * @param listRating Only check lists with this rating or better (optional, default to 3)
     * @param zones Only check these DNSBL zones/hosts. Multiple zones can be supplied as comma-separated values (optional)
     * @return ApiResponse&lt;HostReputationResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Your API request has been rejected. Check error code for details </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> You have failed to authenticate </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> We messed up, sorry! Your request has caused a fatal exception </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> We messed up, sorry! Your request has caused an error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<HostReputationResponse> hostReputationWithHttpInfo(String host, Integer listRating, String zones) throws ApiException {
        okhttp3.Call localVarCall = hostReputationValidateBeforeCall(host, listRating, zones, null);
        Type localVarReturnType = new TypeToken<HostReputationResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Host Reputation (asynchronously)
     * Check the reputation of an IP address, domain name or URL against a comprehensive list of blacklists and blocklists
     * @param host An IP address, domain name, FQDN or URL. &lt;br&gt;If you supply a domain/URL it will be checked against the URI DNSBL lists (required)
     * @param listRating Only check lists with this rating or better (optional, default to 3)
     * @param zones Only check these DNSBL zones/hosts. Multiple zones can be supplied as comma-separated values (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Your API request has been rejected. Check error code for details </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> You have failed to authenticate </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> We messed up, sorry! Your request has caused a fatal exception </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> We messed up, sorry! Your request has caused an error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call hostReputationAsync(String host, Integer listRating, String zones, final ApiCallback<HostReputationResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = hostReputationValidateBeforeCall(host, listRating, zones, _callback);
        Type localVarReturnType = new TypeToken<HostReputationResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for iPBlocklist
     * @param ip An IPv4 or IPv6 address. Accepts standard IP notation (with or without port number), CIDR notation and IPv6 compressed notation. If multiple IPs are passed using comma-separated values the first non-bogon address on the list will be checked (required)
     * @param vpnLookup Include public VPN provider IP addresses. &lt;br&gt;&lt;b&gt;NOTE&lt;/b&gt;: For more advanced VPN detection including the ability to identify private and stealth VPNs use the &lt;a href&#x3D;\&quot;https://www.neutrinoapi.com/api/ip-probe/\&quot;&gt;IP Probe API&lt;/a&gt; (optional, default to false)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Your API request has been rejected. Check error code for details </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> You have failed to authenticate </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> We messed up, sorry! Your request has caused a fatal exception </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> We messed up, sorry! Your request has caused an error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call iPBlocklistCall(String ip, Boolean vpnLookup, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/ip-blocklist";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (ip != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("ip", ip));
        }

        if (vpnLookup != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("vpn-lookup", vpnLookup));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api-key", "user-id" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call iPBlocklistValidateBeforeCall(String ip, Boolean vpnLookup, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'ip' is set
        if (ip == null) {
            throw new ApiException("Missing the required parameter 'ip' when calling iPBlocklist(Async)");
        }

        return iPBlocklistCall(ip, vpnLookup, _callback);

    }

    /**
     * IP Blocklist
     * The IP Blocklist API will detect potentially malicious or dangerous IP addresses
     * @param ip An IPv4 or IPv6 address. Accepts standard IP notation (with or without port number), CIDR notation and IPv6 compressed notation. If multiple IPs are passed using comma-separated values the first non-bogon address on the list will be checked (required)
     * @param vpnLookup Include public VPN provider IP addresses. &lt;br&gt;&lt;b&gt;NOTE&lt;/b&gt;: For more advanced VPN detection including the ability to identify private and stealth VPNs use the &lt;a href&#x3D;\&quot;https://www.neutrinoapi.com/api/ip-probe/\&quot;&gt;IP Probe API&lt;/a&gt; (optional, default to false)
     * @return IPBlocklistResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Your API request has been rejected. Check error code for details </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> You have failed to authenticate </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> We messed up, sorry! Your request has caused a fatal exception </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> We messed up, sorry! Your request has caused an error </td><td>  -  </td></tr>
     </table>
     */
    public IPBlocklistResponse iPBlocklist(String ip, Boolean vpnLookup) throws ApiException {
        ApiResponse<IPBlocklistResponse> localVarResp = iPBlocklistWithHttpInfo(ip, vpnLookup);
        return localVarResp.getData();
    }

    /**
     * IP Blocklist
     * The IP Blocklist API will detect potentially malicious or dangerous IP addresses
     * @param ip An IPv4 or IPv6 address. Accepts standard IP notation (with or without port number), CIDR notation and IPv6 compressed notation. If multiple IPs are passed using comma-separated values the first non-bogon address on the list will be checked (required)
     * @param vpnLookup Include public VPN provider IP addresses. &lt;br&gt;&lt;b&gt;NOTE&lt;/b&gt;: For more advanced VPN detection including the ability to identify private and stealth VPNs use the &lt;a href&#x3D;\&quot;https://www.neutrinoapi.com/api/ip-probe/\&quot;&gt;IP Probe API&lt;/a&gt; (optional, default to false)
     * @return ApiResponse&lt;IPBlocklistResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Your API request has been rejected. Check error code for details </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> You have failed to authenticate </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> We messed up, sorry! Your request has caused a fatal exception </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> We messed up, sorry! Your request has caused an error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<IPBlocklistResponse> iPBlocklistWithHttpInfo(String ip, Boolean vpnLookup) throws ApiException {
        okhttp3.Call localVarCall = iPBlocklistValidateBeforeCall(ip, vpnLookup, null);
        Type localVarReturnType = new TypeToken<IPBlocklistResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * IP Blocklist (asynchronously)
     * The IP Blocklist API will detect potentially malicious or dangerous IP addresses
     * @param ip An IPv4 or IPv6 address. Accepts standard IP notation (with or without port number), CIDR notation and IPv6 compressed notation. If multiple IPs are passed using comma-separated values the first non-bogon address on the list will be checked (required)
     * @param vpnLookup Include public VPN provider IP addresses. &lt;br&gt;&lt;b&gt;NOTE&lt;/b&gt;: For more advanced VPN detection including the ability to identify private and stealth VPNs use the &lt;a href&#x3D;\&quot;https://www.neutrinoapi.com/api/ip-probe/\&quot;&gt;IP Probe API&lt;/a&gt; (optional, default to false)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Your API request has been rejected. Check error code for details </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> You have failed to authenticate </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> We messed up, sorry! Your request has caused a fatal exception </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> We messed up, sorry! Your request has caused an error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call iPBlocklistAsync(String ip, Boolean vpnLookup, final ApiCallback<IPBlocklistResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = iPBlocklistValidateBeforeCall(ip, vpnLookup, _callback);
        Type localVarReturnType = new TypeToken<IPBlocklistResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for iPBlocklistDownload
     * @param format The data format. Can be either CSV or TXT (optional, default to csv)
     * @param includeVpn Include public VPN provider addresses, this option is only available for Tier 3 or higher accounts. Adds any IPs which are solely listed as VPN providers, IPs that are listed on multiple sensors will still be included without enabling this option. &lt;br&gt;&lt;b&gt;WARNING&lt;/b&gt;: This adds at least an additional 8 million IP addresses to the download if not using CIDR notation (optional, default to false)
     * @param cidr Output IPs using CIDR notation. This option should be preferred but is off by default for backwards compatibility (optional, default to false)
     * @param ip6 Output the IPv6 version of the blocklist, the default is to output IPv4 only. Note that this option enables CIDR notation too as this is the only notation currently supported for IPv6 (optional, default to false)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Your API request has been rejected. Check error code for details </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> You have failed to authenticate </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> We messed up, sorry! Your request has caused a fatal exception </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> We messed up, sorry! Your request has caused an error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call iPBlocklistDownloadCall(String format, Boolean includeVpn, Boolean cidr, Boolean ip6, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/ip-blocklist-download";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (format != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("format", format));
        }

        if (includeVpn != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("include-vpn", includeVpn));
        }

        if (cidr != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("cidr", cidr));
        }

        if (ip6 != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("ip6", ip6));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api-key", "user-id" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call iPBlocklistDownloadValidateBeforeCall(String format, Boolean includeVpn, Boolean cidr, Boolean ip6, final ApiCallback _callback) throws ApiException {
        return iPBlocklistDownloadCall(format, includeVpn, cidr, ip6, _callback);

    }

    /**
     * IP Blocklist Download
     * This API is a direct feed to our IP blocklist data
     * @param format The data format. Can be either CSV or TXT (optional, default to csv)
     * @param includeVpn Include public VPN provider addresses, this option is only available for Tier 3 or higher accounts. Adds any IPs which are solely listed as VPN providers, IPs that are listed on multiple sensors will still be included without enabling this option. &lt;br&gt;&lt;b&gt;WARNING&lt;/b&gt;: This adds at least an additional 8 million IP addresses to the download if not using CIDR notation (optional, default to false)
     * @param cidr Output IPs using CIDR notation. This option should be preferred but is off by default for backwards compatibility (optional, default to false)
     * @param ip6 Output the IPv6 version of the blocklist, the default is to output IPv4 only. Note that this option enables CIDR notation too as this is the only notation currently supported for IPv6 (optional, default to false)
     * @return File
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Your API request has been rejected. Check error code for details </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> You have failed to authenticate </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> We messed up, sorry! Your request has caused a fatal exception </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> We messed up, sorry! Your request has caused an error </td><td>  -  </td></tr>
     </table>
     */
    public File iPBlocklistDownload(String format, Boolean includeVpn, Boolean cidr, Boolean ip6) throws ApiException {
        ApiResponse<File> localVarResp = iPBlocklistDownloadWithHttpInfo(format, includeVpn, cidr, ip6);
        return localVarResp.getData();
    }

    /**
     * IP Blocklist Download
     * This API is a direct feed to our IP blocklist data
     * @param format The data format. Can be either CSV or TXT (optional, default to csv)
     * @param includeVpn Include public VPN provider addresses, this option is only available for Tier 3 or higher accounts. Adds any IPs which are solely listed as VPN providers, IPs that are listed on multiple sensors will still be included without enabling this option. &lt;br&gt;&lt;b&gt;WARNING&lt;/b&gt;: This adds at least an additional 8 million IP addresses to the download if not using CIDR notation (optional, default to false)
     * @param cidr Output IPs using CIDR notation. This option should be preferred but is off by default for backwards compatibility (optional, default to false)
     * @param ip6 Output the IPv6 version of the blocklist, the default is to output IPv4 only. Note that this option enables CIDR notation too as this is the only notation currently supported for IPv6 (optional, default to false)
     * @return ApiResponse&lt;File&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Your API request has been rejected. Check error code for details </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> You have failed to authenticate </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> We messed up, sorry! Your request has caused a fatal exception </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> We messed up, sorry! Your request has caused an error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<File> iPBlocklistDownloadWithHttpInfo(String format, Boolean includeVpn, Boolean cidr, Boolean ip6) throws ApiException {
        okhttp3.Call localVarCall = iPBlocklistDownloadValidateBeforeCall(format, includeVpn, cidr, ip6, null);
        Type localVarReturnType = new TypeToken<File>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * IP Blocklist Download (asynchronously)
     * This API is a direct feed to our IP blocklist data
     * @param format The data format. Can be either CSV or TXT (optional, default to csv)
     * @param includeVpn Include public VPN provider addresses, this option is only available for Tier 3 or higher accounts. Adds any IPs which are solely listed as VPN providers, IPs that are listed on multiple sensors will still be included without enabling this option. &lt;br&gt;&lt;b&gt;WARNING&lt;/b&gt;: This adds at least an additional 8 million IP addresses to the download if not using CIDR notation (optional, default to false)
     * @param cidr Output IPs using CIDR notation. This option should be preferred but is off by default for backwards compatibility (optional, default to false)
     * @param ip6 Output the IPv6 version of the blocklist, the default is to output IPv4 only. Note that this option enables CIDR notation too as this is the only notation currently supported for IPv6 (optional, default to false)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Your API request has been rejected. Check error code for details </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> You have failed to authenticate </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> We messed up, sorry! Your request has caused a fatal exception </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> We messed up, sorry! Your request has caused an error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call iPBlocklistDownloadAsync(String format, Boolean includeVpn, Boolean cidr, Boolean ip6, final ApiCallback<File> _callback) throws ApiException {

        okhttp3.Call localVarCall = iPBlocklistDownloadValidateBeforeCall(format, includeVpn, cidr, ip6, _callback);
        Type localVarReturnType = new TypeToken<File>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for iPProbe
     * @param ip IPv4 or IPv6 address (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Your API request has been rejected. Check error code for details </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> You have failed to authenticate </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> We messed up, sorry! Your request has caused a fatal exception </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> We messed up, sorry! Your request has caused an error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call iPProbeCall(String ip, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/ip-probe";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (ip != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("ip", ip));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api-key", "user-id" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call iPProbeValidateBeforeCall(String ip, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'ip' is set
        if (ip == null) {
            throw new ApiException("Missing the required parameter 'ip' when calling iPProbe(Async)");
        }

        return iPProbeCall(ip, _callback);

    }

    /**
     * IP Probe
     * Execute a realtime network probe against an IPv4 or IPv6 address
     * @param ip IPv4 or IPv6 address (required)
     * @return IPProbeResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Your API request has been rejected. Check error code for details </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> You have failed to authenticate </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> We messed up, sorry! Your request has caused a fatal exception </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> We messed up, sorry! Your request has caused an error </td><td>  -  </td></tr>
     </table>
     */
    public IPProbeResponse iPProbe(String ip) throws ApiException {
        ApiResponse<IPProbeResponse> localVarResp = iPProbeWithHttpInfo(ip);
        return localVarResp.getData();
    }

    /**
     * IP Probe
     * Execute a realtime network probe against an IPv4 or IPv6 address
     * @param ip IPv4 or IPv6 address (required)
     * @return ApiResponse&lt;IPProbeResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Your API request has been rejected. Check error code for details </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> You have failed to authenticate </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> We messed up, sorry! Your request has caused a fatal exception </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> We messed up, sorry! Your request has caused an error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<IPProbeResponse> iPProbeWithHttpInfo(String ip) throws ApiException {
        okhttp3.Call localVarCall = iPProbeValidateBeforeCall(ip, null);
        Type localVarReturnType = new TypeToken<IPProbeResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * IP Probe (asynchronously)
     * Execute a realtime network probe against an IPv4 or IPv6 address
     * @param ip IPv4 or IPv6 address (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Your API request has been rejected. Check error code for details </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> You have failed to authenticate </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> We messed up, sorry! Your request has caused a fatal exception </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> We messed up, sorry! Your request has caused an error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call iPProbeAsync(String ip, final ApiCallback<IPProbeResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = iPProbeValidateBeforeCall(ip, _callback);
        Type localVarReturnType = new TypeToken<IPProbeResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
