/*
 * Neutrino API
 * The general-purpose API
 *
 * The version of the OpenAPI document: 3.6.4
 * Contact: ops@neutrinoapi.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * IPProbeResponse
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:54:58.398611-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class IPProbeResponse {
  public static final String SERIALIZED_NAME_AS_AGE = "as-age";
  @SerializedName(SERIALIZED_NAME_AS_AGE)
  private Integer asAge;

  public static final String SERIALIZED_NAME_AS_CIDR = "as-cidr";
  @SerializedName(SERIALIZED_NAME_AS_CIDR)
  private String asCidr;

  public static final String SERIALIZED_NAME_AS_COUNTRY_CODE = "as-country-code";
  @SerializedName(SERIALIZED_NAME_AS_COUNTRY_CODE)
  private String asCountryCode;

  public static final String SERIALIZED_NAME_AS_COUNTRY_CODE3 = "as-country-code3";
  @SerializedName(SERIALIZED_NAME_AS_COUNTRY_CODE3)
  private String asCountryCode3;

  public static final String SERIALIZED_NAME_AS_DESCRIPTION = "as-description";
  @SerializedName(SERIALIZED_NAME_AS_DESCRIPTION)
  private String asDescription;

  public static final String SERIALIZED_NAME_AS_DOMAINS = "as-domains";
  @SerializedName(SERIALIZED_NAME_AS_DOMAINS)
  private List<String> asDomains = new ArrayList<>();

  public static final String SERIALIZED_NAME_ASN = "asn";
  @SerializedName(SERIALIZED_NAME_ASN)
  private String asn;

  public static final String SERIALIZED_NAME_CITY = "city";
  @SerializedName(SERIALIZED_NAME_CITY)
  private String city;

  public static final String SERIALIZED_NAME_CONTINENT_CODE = "continent-code";
  @SerializedName(SERIALIZED_NAME_CONTINENT_CODE)
  private String continentCode;

  public static final String SERIALIZED_NAME_COUNTRY = "country";
  @SerializedName(SERIALIZED_NAME_COUNTRY)
  private String country;

  public static final String SERIALIZED_NAME_COUNTRY_CODE = "country-code";
  @SerializedName(SERIALIZED_NAME_COUNTRY_CODE)
  private String countryCode;

  public static final String SERIALIZED_NAME_COUNTRY_CODE3 = "country-code3";
  @SerializedName(SERIALIZED_NAME_COUNTRY_CODE3)
  private String countryCode3;

  public static final String SERIALIZED_NAME_CURRENCY_CODE = "currency-code";
  @SerializedName(SERIALIZED_NAME_CURRENCY_CODE)
  private String currencyCode;

  public static final String SERIALIZED_NAME_HOST_DOMAIN = "host-domain";
  @SerializedName(SERIALIZED_NAME_HOST_DOMAIN)
  private String hostDomain;

  public static final String SERIALIZED_NAME_HOSTNAME = "hostname";
  @SerializedName(SERIALIZED_NAME_HOSTNAME)
  private String hostname;

  public static final String SERIALIZED_NAME_IP = "ip";
  @SerializedName(SERIALIZED_NAME_IP)
  private String ip;

  public static final String SERIALIZED_NAME_IS_BOGON = "is-bogon";
  @SerializedName(SERIALIZED_NAME_IS_BOGON)
  private Boolean isBogon;

  public static final String SERIALIZED_NAME_IS_HOSTING = "is-hosting";
  @SerializedName(SERIALIZED_NAME_IS_HOSTING)
  private Boolean isHosting;

  public static final String SERIALIZED_NAME_IS_ISP = "is-isp";
  @SerializedName(SERIALIZED_NAME_IS_ISP)
  private Boolean isIsp;

  public static final String SERIALIZED_NAME_IS_PROXY = "is-proxy";
  @SerializedName(SERIALIZED_NAME_IS_PROXY)
  private Boolean isProxy;

  public static final String SERIALIZED_NAME_IS_V4_MAPPED = "is-v4-mapped";
  @SerializedName(SERIALIZED_NAME_IS_V4_MAPPED)
  private Boolean isV4Mapped;

  public static final String SERIALIZED_NAME_IS_V6 = "is-v6";
  @SerializedName(SERIALIZED_NAME_IS_V6)
  private Boolean isV6;

  public static final String SERIALIZED_NAME_IS_VPN = "is-vpn";
  @SerializedName(SERIALIZED_NAME_IS_VPN)
  private Boolean isVpn;

  public static final String SERIALIZED_NAME_PROVIDER_DESCRIPTION = "provider-description";
  @SerializedName(SERIALIZED_NAME_PROVIDER_DESCRIPTION)
  private String providerDescription;

  public static final String SERIALIZED_NAME_PROVIDER_DOMAIN = "provider-domain";
  @SerializedName(SERIALIZED_NAME_PROVIDER_DOMAIN)
  private String providerDomain;

  public static final String SERIALIZED_NAME_PROVIDER_TYPE = "provider-type";
  @SerializedName(SERIALIZED_NAME_PROVIDER_TYPE)
  private String providerType;

  public static final String SERIALIZED_NAME_PROVIDER_WEBSITE = "provider-website";
  @SerializedName(SERIALIZED_NAME_PROVIDER_WEBSITE)
  private String providerWebsite;

  public static final String SERIALIZED_NAME_REGION = "region";
  @SerializedName(SERIALIZED_NAME_REGION)
  private String region;

  public static final String SERIALIZED_NAME_REGION_CODE = "region-code";
  @SerializedName(SERIALIZED_NAME_REGION_CODE)
  private String regionCode;

  public static final String SERIALIZED_NAME_VALID = "valid";
  @SerializedName(SERIALIZED_NAME_VALID)
  private Boolean valid;

  public static final String SERIALIZED_NAME_VPN_DOMAIN = "vpn-domain";
  @SerializedName(SERIALIZED_NAME_VPN_DOMAIN)
  private String vpnDomain;

  public IPProbeResponse() {
  }

  public IPProbeResponse asAge(Integer asAge) {
    this.asAge = asAge;
    return this;
  }

  /**
   * The age of the autonomous system (AS) in number of years since registration
   * @return asAge
   */
  @javax.annotation.Nonnull
  public Integer getAsAge() {
    return asAge;
  }

  public void setAsAge(Integer asAge) {
    this.asAge = asAge;
  }


  public IPProbeResponse asCidr(String asCidr) {
    this.asCidr = asCidr;
    return this;
  }

  /**
   * The autonomous system (AS) CIDR range
   * @return asCidr
   */
  @javax.annotation.Nonnull
  public String getAsCidr() {
    return asCidr;
  }

  public void setAsCidr(String asCidr) {
    this.asCidr = asCidr;
  }


  public IPProbeResponse asCountryCode(String asCountryCode) {
    this.asCountryCode = asCountryCode;
    return this;
  }

  /**
   * The autonomous system (AS) ISO 2-letter country code
   * @return asCountryCode
   */
  @javax.annotation.Nonnull
  public String getAsCountryCode() {
    return asCountryCode;
  }

  public void setAsCountryCode(String asCountryCode) {
    this.asCountryCode = asCountryCode;
  }


  public IPProbeResponse asCountryCode3(String asCountryCode3) {
    this.asCountryCode3 = asCountryCode3;
    return this;
  }

  /**
   * The autonomous system (AS) ISO 3-letter country code
   * @return asCountryCode3
   */
  @javax.annotation.Nonnull
  public String getAsCountryCode3() {
    return asCountryCode3;
  }

  public void setAsCountryCode3(String asCountryCode3) {
    this.asCountryCode3 = asCountryCode3;
  }


  public IPProbeResponse asDescription(String asDescription) {
    this.asDescription = asDescription;
    return this;
  }

  /**
   * The autonomous system (AS) description / company name
   * @return asDescription
   */
  @javax.annotation.Nonnull
  public String getAsDescription() {
    return asDescription;
  }

  public void setAsDescription(String asDescription) {
    this.asDescription = asDescription;
  }


  public IPProbeResponse asDomains(List<String> asDomains) {
    this.asDomains = asDomains;
    return this;
  }

  public IPProbeResponse addAsDomainsItem(String asDomainsItem) {
    if (this.asDomains == null) {
      this.asDomains = new ArrayList<>();
    }
    this.asDomains.add(asDomainsItem);
    return this;
  }

  /**
   * Array of all the domains associated with the autonomous system (AS)
   * @return asDomains
   */
  @javax.annotation.Nonnull
  public List<String> getAsDomains() {
    return asDomains;
  }

  public void setAsDomains(List<String> asDomains) {
    this.asDomains = asDomains;
  }


  public IPProbeResponse asn(String asn) {
    this.asn = asn;
    return this;
  }

  /**
   * The autonomous system (AS) number
   * @return asn
   */
  @javax.annotation.Nonnull
  public String getAsn() {
    return asn;
  }

  public void setAsn(String asn) {
    this.asn = asn;
  }


  public IPProbeResponse city(String city) {
    this.city = city;
    return this;
  }

  /**
   * Full city name (if detectable)
   * @return city
   */
  @javax.annotation.Nonnull
  public String getCity() {
    return city;
  }

  public void setCity(String city) {
    this.city = city;
  }


  public IPProbeResponse continentCode(String continentCode) {
    this.continentCode = continentCode;
    return this;
  }

  /**
   * ISO 2-letter continent code
   * @return continentCode
   */
  @javax.annotation.Nonnull
  public String getContinentCode() {
    return continentCode;
  }

  public void setContinentCode(String continentCode) {
    this.continentCode = continentCode;
  }


  public IPProbeResponse country(String country) {
    this.country = country;
    return this;
  }

  /**
   * Full country name
   * @return country
   */
  @javax.annotation.Nonnull
  public String getCountry() {
    return country;
  }

  public void setCountry(String country) {
    this.country = country;
  }


  public IPProbeResponse countryCode(String countryCode) {
    this.countryCode = countryCode;
    return this;
  }

  /**
   * ISO 2-letter country code
   * @return countryCode
   */
  @javax.annotation.Nonnull
  public String getCountryCode() {
    return countryCode;
  }

  public void setCountryCode(String countryCode) {
    this.countryCode = countryCode;
  }


  public IPProbeResponse countryCode3(String countryCode3) {
    this.countryCode3 = countryCode3;
    return this;
  }

  /**
   * ISO 3-letter country code
   * @return countryCode3
   */
  @javax.annotation.Nonnull
  public String getCountryCode3() {
    return countryCode3;
  }

  public void setCountryCode3(String countryCode3) {
    this.countryCode3 = countryCode3;
  }


  public IPProbeResponse currencyCode(String currencyCode) {
    this.currencyCode = currencyCode;
    return this;
  }

  /**
   * ISO 4217 currency code associated with the country
   * @return currencyCode
   */
  @javax.annotation.Nonnull
  public String getCurrencyCode() {
    return currencyCode;
  }

  public void setCurrencyCode(String currencyCode) {
    this.currencyCode = currencyCode;
  }


  public IPProbeResponse hostDomain(String hostDomain) {
    this.hostDomain = hostDomain;
    return this;
  }

  /**
   * The IPs host domain
   * @return hostDomain
   */
  @javax.annotation.Nonnull
  public String getHostDomain() {
    return hostDomain;
  }

  public void setHostDomain(String hostDomain) {
    this.hostDomain = hostDomain;
  }


  public IPProbeResponse hostname(String hostname) {
    this.hostname = hostname;
    return this;
  }

  /**
   * The IPs full hostname (PTR)
   * @return hostname
   */
  @javax.annotation.Nonnull
  public String getHostname() {
    return hostname;
  }

  public void setHostname(String hostname) {
    this.hostname = hostname;
  }


  public IPProbeResponse ip(String ip) {
    this.ip = ip;
    return this;
  }

  /**
   * The IP address
   * @return ip
   */
  @javax.annotation.Nonnull
  public String getIp() {
    return ip;
  }

  public void setIp(String ip) {
    this.ip = ip;
  }


  public IPProbeResponse isBogon(Boolean isBogon) {
    this.isBogon = isBogon;
    return this;
  }

  /**
   * True if this is a bogon IP address such as a private network, local network or reserved address
   * @return isBogon
   */
  @javax.annotation.Nonnull
  public Boolean getIsBogon() {
    return isBogon;
  }

  public void setIsBogon(Boolean isBogon) {
    this.isBogon = isBogon;
  }


  public IPProbeResponse isHosting(Boolean isHosting) {
    this.isHosting = isHosting;
    return this;
  }

  /**
   * True if this IP belongs to a hosting company. Note that this can still be true even if the provider type is VPN/proxy, this occurs in the case that the IP is detected as both types
   * @return isHosting
   */
  @javax.annotation.Nonnull
  public Boolean getIsHosting() {
    return isHosting;
  }

  public void setIsHosting(Boolean isHosting) {
    this.isHosting = isHosting;
  }


  public IPProbeResponse isIsp(Boolean isIsp) {
    this.isIsp = isIsp;
    return this;
  }

  /**
   * True if this IP belongs to an internet service provider. Note that this can still be true even if the provider type is VPN/proxy, this occurs in the case that the IP is detected as both types
   * @return isIsp
   */
  @javax.annotation.Nonnull
  public Boolean getIsIsp() {
    return isIsp;
  }

  public void setIsIsp(Boolean isIsp) {
    this.isIsp = isIsp;
  }


  public IPProbeResponse isProxy(Boolean isProxy) {
    this.isProxy = isProxy;
    return this;
  }

  /**
   * True if this IP ia a proxy
   * @return isProxy
   */
  @javax.annotation.Nonnull
  public Boolean getIsProxy() {
    return isProxy;
  }

  public void setIsProxy(Boolean isProxy) {
    this.isProxy = isProxy;
  }


  public IPProbeResponse isV4Mapped(Boolean isV4Mapped) {
    this.isV4Mapped = isV4Mapped;
    return this;
  }

  /**
   * True if this is a &lt;a href&#x3D;\&quot;https://en.wikipedia.org/wiki/IPv6#IPv4-mapped_IPv6_addresses\&quot;&gt;IPv4 mapped IPv6 address&lt;/a&gt;
   * @return isV4Mapped
   */
  @javax.annotation.Nonnull
  public Boolean getIsV4Mapped() {
    return isV4Mapped;
  }

  public void setIsV4Mapped(Boolean isV4Mapped) {
    this.isV4Mapped = isV4Mapped;
  }


  public IPProbeResponse isV6(Boolean isV6) {
    this.isV6 = isV6;
    return this;
  }

  /**
   * True if this is a IPv6 address. False if IPv4
   * @return isV6
   */
  @javax.annotation.Nonnull
  public Boolean getIsV6() {
    return isV6;
  }

  public void setIsV6(Boolean isV6) {
    this.isV6 = isV6;
  }


  public IPProbeResponse isVpn(Boolean isVpn) {
    this.isVpn = isVpn;
    return this;
  }

  /**
   * True if this IP ia a VPN
   * @return isVpn
   */
  @javax.annotation.Nonnull
  public Boolean getIsVpn() {
    return isVpn;
  }

  public void setIsVpn(Boolean isVpn) {
    this.isVpn = isVpn;
  }


  public IPProbeResponse providerDescription(String providerDescription) {
    this.providerDescription = providerDescription;
    return this;
  }

  /**
   * A description of the provider (usually extracted from the providers website)
   * @return providerDescription
   */
  @javax.annotation.Nonnull
  public String getProviderDescription() {
    return providerDescription;
  }

  public void setProviderDescription(String providerDescription) {
    this.providerDescription = providerDescription;
  }


  public IPProbeResponse providerDomain(String providerDomain) {
    this.providerDomain = providerDomain;
    return this;
  }

  /**
   * The domain name of the provider
   * @return providerDomain
   */
  @javax.annotation.Nonnull
  public String getProviderDomain() {
    return providerDomain;
  }

  public void setProviderDomain(String providerDomain) {
    this.providerDomain = providerDomain;
  }


  public IPProbeResponse providerType(String providerType) {
    this.providerType = providerType;
    return this;
  }

  /**
   * The detected provider type, possible values are: &lt;br&gt; &lt;ul&gt; &lt;li&gt;isp - IP belongs to an internet service provider. This includes both mobile, home and business internet providers&lt;/li&gt; &lt;li&gt;hosting - IP belongs to a hosting company. This includes website hosting, cloud computing platforms and colocation facilities&lt;/li&gt; &lt;li&gt;vpn - IP belongs to a VPN provider&lt;/li&gt; &lt;li&gt;proxy - IP belongs to a proxy service. This includes HTTP/SOCKS proxies and browser based proxies&lt;/li&gt; &lt;li&gt;university - IP belongs to a university/college/campus&lt;/li&gt; &lt;li&gt;government - IP belongs to a government department. This includes military facilities&lt;/li&gt; &lt;li&gt;commercial - IP belongs to a commercial entity such as a corporate headquarters or company office&lt;/li&gt; &lt;li&gt;unknown - could not identify the provider type&lt;/li&gt; &lt;/ul&gt;
   * @return providerType
   */
  @javax.annotation.Nonnull
  public String getProviderType() {
    return providerType;
  }

  public void setProviderType(String providerType) {
    this.providerType = providerType;
  }


  public IPProbeResponse providerWebsite(String providerWebsite) {
    this.providerWebsite = providerWebsite;
    return this;
  }

  /**
   * The website URL for the provider
   * @return providerWebsite
   */
  @javax.annotation.Nonnull
  public String getProviderWebsite() {
    return providerWebsite;
  }

  public void setProviderWebsite(String providerWebsite) {
    this.providerWebsite = providerWebsite;
  }


  public IPProbeResponse region(String region) {
    this.region = region;
    return this;
  }

  /**
   * Full region name (if detectable)
   * @return region
   */
  @javax.annotation.Nonnull
  public String getRegion() {
    return region;
  }

  public void setRegion(String region) {
    this.region = region;
  }


  public IPProbeResponse regionCode(String regionCode) {
    this.regionCode = regionCode;
    return this;
  }

  /**
   * ISO 3166-2 region code (if detectable)
   * @return regionCode
   */
  @javax.annotation.Nonnull
  public String getRegionCode() {
    return regionCode;
  }

  public void setRegionCode(String regionCode) {
    this.regionCode = regionCode;
  }


  public IPProbeResponse valid(Boolean valid) {
    this.valid = valid;
    return this;
  }

  /**
   * True if this is a valid IPv4 or IPv6 address
   * @return valid
   */
  @javax.annotation.Nonnull
  public Boolean getValid() {
    return valid;
  }

  public void setValid(Boolean valid) {
    this.valid = valid;
  }


  public IPProbeResponse vpnDomain(String vpnDomain) {
    this.vpnDomain = vpnDomain;
    return this;
  }

  /**
   * The domain of the VPN provider (may be empty if the VPN domain is not detectable)
   * @return vpnDomain
   */
  @javax.annotation.Nonnull
  public String getVpnDomain() {
    return vpnDomain;
  }

  public void setVpnDomain(String vpnDomain) {
    this.vpnDomain = vpnDomain;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    IPProbeResponse ipProbeResponse = (IPProbeResponse) o;
    return Objects.equals(this.asAge, ipProbeResponse.asAge) &&
        Objects.equals(this.asCidr, ipProbeResponse.asCidr) &&
        Objects.equals(this.asCountryCode, ipProbeResponse.asCountryCode) &&
        Objects.equals(this.asCountryCode3, ipProbeResponse.asCountryCode3) &&
        Objects.equals(this.asDescription, ipProbeResponse.asDescription) &&
        Objects.equals(this.asDomains, ipProbeResponse.asDomains) &&
        Objects.equals(this.asn, ipProbeResponse.asn) &&
        Objects.equals(this.city, ipProbeResponse.city) &&
        Objects.equals(this.continentCode, ipProbeResponse.continentCode) &&
        Objects.equals(this.country, ipProbeResponse.country) &&
        Objects.equals(this.countryCode, ipProbeResponse.countryCode) &&
        Objects.equals(this.countryCode3, ipProbeResponse.countryCode3) &&
        Objects.equals(this.currencyCode, ipProbeResponse.currencyCode) &&
        Objects.equals(this.hostDomain, ipProbeResponse.hostDomain) &&
        Objects.equals(this.hostname, ipProbeResponse.hostname) &&
        Objects.equals(this.ip, ipProbeResponse.ip) &&
        Objects.equals(this.isBogon, ipProbeResponse.isBogon) &&
        Objects.equals(this.isHosting, ipProbeResponse.isHosting) &&
        Objects.equals(this.isIsp, ipProbeResponse.isIsp) &&
        Objects.equals(this.isProxy, ipProbeResponse.isProxy) &&
        Objects.equals(this.isV4Mapped, ipProbeResponse.isV4Mapped) &&
        Objects.equals(this.isV6, ipProbeResponse.isV6) &&
        Objects.equals(this.isVpn, ipProbeResponse.isVpn) &&
        Objects.equals(this.providerDescription, ipProbeResponse.providerDescription) &&
        Objects.equals(this.providerDomain, ipProbeResponse.providerDomain) &&
        Objects.equals(this.providerType, ipProbeResponse.providerType) &&
        Objects.equals(this.providerWebsite, ipProbeResponse.providerWebsite) &&
        Objects.equals(this.region, ipProbeResponse.region) &&
        Objects.equals(this.regionCode, ipProbeResponse.regionCode) &&
        Objects.equals(this.valid, ipProbeResponse.valid) &&
        Objects.equals(this.vpnDomain, ipProbeResponse.vpnDomain);
  }

  @Override
  public int hashCode() {
    return Objects.hash(asAge, asCidr, asCountryCode, asCountryCode3, asDescription, asDomains, asn, city, continentCode, country, countryCode, countryCode3, currencyCode, hostDomain, hostname, ip, isBogon, isHosting, isIsp, isProxy, isV4Mapped, isV6, isVpn, providerDescription, providerDomain, providerType, providerWebsite, region, regionCode, valid, vpnDomain);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class IPProbeResponse {\n");
    sb.append("    asAge: ").append(toIndentedString(asAge)).append("\n");
    sb.append("    asCidr: ").append(toIndentedString(asCidr)).append("\n");
    sb.append("    asCountryCode: ").append(toIndentedString(asCountryCode)).append("\n");
    sb.append("    asCountryCode3: ").append(toIndentedString(asCountryCode3)).append("\n");
    sb.append("    asDescription: ").append(toIndentedString(asDescription)).append("\n");
    sb.append("    asDomains: ").append(toIndentedString(asDomains)).append("\n");
    sb.append("    asn: ").append(toIndentedString(asn)).append("\n");
    sb.append("    city: ").append(toIndentedString(city)).append("\n");
    sb.append("    continentCode: ").append(toIndentedString(continentCode)).append("\n");
    sb.append("    country: ").append(toIndentedString(country)).append("\n");
    sb.append("    countryCode: ").append(toIndentedString(countryCode)).append("\n");
    sb.append("    countryCode3: ").append(toIndentedString(countryCode3)).append("\n");
    sb.append("    currencyCode: ").append(toIndentedString(currencyCode)).append("\n");
    sb.append("    hostDomain: ").append(toIndentedString(hostDomain)).append("\n");
    sb.append("    hostname: ").append(toIndentedString(hostname)).append("\n");
    sb.append("    ip: ").append(toIndentedString(ip)).append("\n");
    sb.append("    isBogon: ").append(toIndentedString(isBogon)).append("\n");
    sb.append("    isHosting: ").append(toIndentedString(isHosting)).append("\n");
    sb.append("    isIsp: ").append(toIndentedString(isIsp)).append("\n");
    sb.append("    isProxy: ").append(toIndentedString(isProxy)).append("\n");
    sb.append("    isV4Mapped: ").append(toIndentedString(isV4Mapped)).append("\n");
    sb.append("    isV6: ").append(toIndentedString(isV6)).append("\n");
    sb.append("    isVpn: ").append(toIndentedString(isVpn)).append("\n");
    sb.append("    providerDescription: ").append(toIndentedString(providerDescription)).append("\n");
    sb.append("    providerDomain: ").append(toIndentedString(providerDomain)).append("\n");
    sb.append("    providerType: ").append(toIndentedString(providerType)).append("\n");
    sb.append("    providerWebsite: ").append(toIndentedString(providerWebsite)).append("\n");
    sb.append("    region: ").append(toIndentedString(region)).append("\n");
    sb.append("    regionCode: ").append(toIndentedString(regionCode)).append("\n");
    sb.append("    valid: ").append(toIndentedString(valid)).append("\n");
    sb.append("    vpnDomain: ").append(toIndentedString(vpnDomain)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("as-age");
    openapiFields.add("as-cidr");
    openapiFields.add("as-country-code");
    openapiFields.add("as-country-code3");
    openapiFields.add("as-description");
    openapiFields.add("as-domains");
    openapiFields.add("asn");
    openapiFields.add("city");
    openapiFields.add("continent-code");
    openapiFields.add("country");
    openapiFields.add("country-code");
    openapiFields.add("country-code3");
    openapiFields.add("currency-code");
    openapiFields.add("host-domain");
    openapiFields.add("hostname");
    openapiFields.add("ip");
    openapiFields.add("is-bogon");
    openapiFields.add("is-hosting");
    openapiFields.add("is-isp");
    openapiFields.add("is-proxy");
    openapiFields.add("is-v4-mapped");
    openapiFields.add("is-v6");
    openapiFields.add("is-vpn");
    openapiFields.add("provider-description");
    openapiFields.add("provider-domain");
    openapiFields.add("provider-type");
    openapiFields.add("provider-website");
    openapiFields.add("region");
    openapiFields.add("region-code");
    openapiFields.add("valid");
    openapiFields.add("vpn-domain");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("as-age");
    openapiRequiredFields.add("as-cidr");
    openapiRequiredFields.add("as-country-code");
    openapiRequiredFields.add("as-country-code3");
    openapiRequiredFields.add("as-description");
    openapiRequiredFields.add("as-domains");
    openapiRequiredFields.add("asn");
    openapiRequiredFields.add("city");
    openapiRequiredFields.add("continent-code");
    openapiRequiredFields.add("country");
    openapiRequiredFields.add("country-code");
    openapiRequiredFields.add("country-code3");
    openapiRequiredFields.add("currency-code");
    openapiRequiredFields.add("host-domain");
    openapiRequiredFields.add("hostname");
    openapiRequiredFields.add("ip");
    openapiRequiredFields.add("is-bogon");
    openapiRequiredFields.add("is-hosting");
    openapiRequiredFields.add("is-isp");
    openapiRequiredFields.add("is-proxy");
    openapiRequiredFields.add("is-v4-mapped");
    openapiRequiredFields.add("is-v6");
    openapiRequiredFields.add("is-vpn");
    openapiRequiredFields.add("provider-description");
    openapiRequiredFields.add("provider-domain");
    openapiRequiredFields.add("provider-type");
    openapiRequiredFields.add("provider-website");
    openapiRequiredFields.add("region");
    openapiRequiredFields.add("region-code");
    openapiRequiredFields.add("valid");
    openapiRequiredFields.add("vpn-domain");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to IPProbeResponse
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!IPProbeResponse.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in IPProbeResponse is not found in the empty JSON string", IPProbeResponse.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!IPProbeResponse.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `IPProbeResponse` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : IPProbeResponse.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("as-cidr").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `as-cidr` to be a primitive type in the JSON string but got `%s`", jsonObj.get("as-cidr").toString()));
      }
      if (!jsonObj.get("as-country-code").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `as-country-code` to be a primitive type in the JSON string but got `%s`", jsonObj.get("as-country-code").toString()));
      }
      if (!jsonObj.get("as-country-code3").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `as-country-code3` to be a primitive type in the JSON string but got `%s`", jsonObj.get("as-country-code3").toString()));
      }
      if (!jsonObj.get("as-description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `as-description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("as-description").toString()));
      }
      // ensure the required json array is present
      if (jsonObj.get("as-domains") == null) {
        throw new IllegalArgumentException("Expected the field `linkedContent` to be an array in the JSON string but got `null`");
      } else if (!jsonObj.get("as-domains").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `as-domains` to be an array in the JSON string but got `%s`", jsonObj.get("as-domains").toString()));
      }
      if (!jsonObj.get("asn").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `asn` to be a primitive type in the JSON string but got `%s`", jsonObj.get("asn").toString()));
      }
      if (!jsonObj.get("city").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `city` to be a primitive type in the JSON string but got `%s`", jsonObj.get("city").toString()));
      }
      if (!jsonObj.get("continent-code").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `continent-code` to be a primitive type in the JSON string but got `%s`", jsonObj.get("continent-code").toString()));
      }
      if (!jsonObj.get("country").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `country` to be a primitive type in the JSON string but got `%s`", jsonObj.get("country").toString()));
      }
      if (!jsonObj.get("country-code").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `country-code` to be a primitive type in the JSON string but got `%s`", jsonObj.get("country-code").toString()));
      }
      if (!jsonObj.get("country-code3").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `country-code3` to be a primitive type in the JSON string but got `%s`", jsonObj.get("country-code3").toString()));
      }
      if (!jsonObj.get("currency-code").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `currency-code` to be a primitive type in the JSON string but got `%s`", jsonObj.get("currency-code").toString()));
      }
      if (!jsonObj.get("host-domain").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `host-domain` to be a primitive type in the JSON string but got `%s`", jsonObj.get("host-domain").toString()));
      }
      if (!jsonObj.get("hostname").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `hostname` to be a primitive type in the JSON string but got `%s`", jsonObj.get("hostname").toString()));
      }
      if (!jsonObj.get("ip").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ip` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ip").toString()));
      }
      if (!jsonObj.get("provider-description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `provider-description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("provider-description").toString()));
      }
      if (!jsonObj.get("provider-domain").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `provider-domain` to be a primitive type in the JSON string but got `%s`", jsonObj.get("provider-domain").toString()));
      }
      if (!jsonObj.get("provider-type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `provider-type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("provider-type").toString()));
      }
      if (!jsonObj.get("provider-website").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `provider-website` to be a primitive type in the JSON string but got `%s`", jsonObj.get("provider-website").toString()));
      }
      if (!jsonObj.get("region").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `region` to be a primitive type in the JSON string but got `%s`", jsonObj.get("region").toString()));
      }
      if (!jsonObj.get("region-code").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `region-code` to be a primitive type in the JSON string but got `%s`", jsonObj.get("region-code").toString()));
      }
      if (!jsonObj.get("vpn-domain").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `vpn-domain` to be a primitive type in the JSON string but got `%s`", jsonObj.get("vpn-domain").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!IPProbeResponse.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'IPProbeResponse' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<IPProbeResponse> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(IPProbeResponse.class));

       return (TypeAdapter<T>) new TypeAdapter<IPProbeResponse>() {
           @Override
           public void write(JsonWriter out, IPProbeResponse value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public IPProbeResponse read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of IPProbeResponse given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of IPProbeResponse
   * @throws IOException if the JSON string is invalid with respect to IPProbeResponse
   */
  public static IPProbeResponse fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, IPProbeResponse.class);
  }

  /**
   * Convert an instance of IPProbeResponse to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

