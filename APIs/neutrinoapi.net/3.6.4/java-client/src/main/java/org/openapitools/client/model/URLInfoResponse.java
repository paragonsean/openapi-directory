/*
 * Neutrino API
 * The general-purpose API
 *
 * The version of the OpenAPI document: 3.6.4
 * Contact: ops@neutrinoapi.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * URLInfoResponse
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:54:58.398611-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class URLInfoResponse {
  public static final String SERIALIZED_NAME_CONTENT = "content";
  @SerializedName(SERIALIZED_NAME_CONTENT)
  private String content;

  public static final String SERIALIZED_NAME_CONTENT_ENCODING = "content-encoding";
  @SerializedName(SERIALIZED_NAME_CONTENT_ENCODING)
  private String contentEncoding;

  public static final String SERIALIZED_NAME_CONTENT_SIZE = "content-size";
  @SerializedName(SERIALIZED_NAME_CONTENT_SIZE)
  private Integer contentSize;

  public static final String SERIALIZED_NAME_CONTENT_TYPE = "content-type";
  @SerializedName(SERIALIZED_NAME_CONTENT_TYPE)
  private String contentType;

  public static final String SERIALIZED_NAME_HTTP_OK = "http-ok";
  @SerializedName(SERIALIZED_NAME_HTTP_OK)
  private Boolean httpOk;

  public static final String SERIALIZED_NAME_HTTP_REDIRECT = "http-redirect";
  @SerializedName(SERIALIZED_NAME_HTTP_REDIRECT)
  private Boolean httpRedirect;

  public static final String SERIALIZED_NAME_HTTP_STATUS = "http-status";
  @SerializedName(SERIALIZED_NAME_HTTP_STATUS)
  private Integer httpStatus;

  public static final String SERIALIZED_NAME_HTTP_STATUS_MESSAGE = "http-status-message";
  @SerializedName(SERIALIZED_NAME_HTTP_STATUS_MESSAGE)
  private Integer httpStatusMessage;

  public static final String SERIALIZED_NAME_IS_ERROR = "is-error";
  @SerializedName(SERIALIZED_NAME_IS_ERROR)
  private Boolean isError;

  public static final String SERIALIZED_NAME_IS_TIMEOUT = "is-timeout";
  @SerializedName(SERIALIZED_NAME_IS_TIMEOUT)
  private Boolean isTimeout;

  public static final String SERIALIZED_NAME_LANGUAGE_CODE = "language-code";
  @SerializedName(SERIALIZED_NAME_LANGUAGE_CODE)
  private String languageCode;

  public static final String SERIALIZED_NAME_LOAD_TIME = "load-time";
  @SerializedName(SERIALIZED_NAME_LOAD_TIME)
  private Double loadTime;

  public static final String SERIALIZED_NAME_QUERY = "query";
  @SerializedName(SERIALIZED_NAME_QUERY)
  private Map<String, String> query = new HashMap<>();

  public static final String SERIALIZED_NAME_REAL = "real";
  @SerializedName(SERIALIZED_NAME_REAL)
  private Boolean real;

  public static final String SERIALIZED_NAME_SERVER_CITY = "server-city";
  @SerializedName(SERIALIZED_NAME_SERVER_CITY)
  private String serverCity;

  public static final String SERIALIZED_NAME_SERVER_COUNTRY = "server-country";
  @SerializedName(SERIALIZED_NAME_SERVER_COUNTRY)
  private String serverCountry;

  public static final String SERIALIZED_NAME_SERVER_COUNTRY_CODE = "server-country-code";
  @SerializedName(SERIALIZED_NAME_SERVER_COUNTRY_CODE)
  private String serverCountryCode;

  public static final String SERIALIZED_NAME_SERVER_HOSTNAME = "server-hostname";
  @SerializedName(SERIALIZED_NAME_SERVER_HOSTNAME)
  private String serverHostname;

  public static final String SERIALIZED_NAME_SERVER_IP = "server-ip";
  @SerializedName(SERIALIZED_NAME_SERVER_IP)
  private String serverIp;

  public static final String SERIALIZED_NAME_SERVER_NAME = "server-name";
  @SerializedName(SERIALIZED_NAME_SERVER_NAME)
  private String serverName;

  public static final String SERIALIZED_NAME_SERVER_REGION = "server-region";
  @SerializedName(SERIALIZED_NAME_SERVER_REGION)
  private String serverRegion;

  public static final String SERIALIZED_NAME_TITLE = "title";
  @SerializedName(SERIALIZED_NAME_TITLE)
  private String title;

  public static final String SERIALIZED_NAME_URL = "url";
  @SerializedName(SERIALIZED_NAME_URL)
  private String url;

  public static final String SERIALIZED_NAME_URL_PATH = "url-path";
  @SerializedName(SERIALIZED_NAME_URL_PATH)
  private String urlPath;

  public static final String SERIALIZED_NAME_URL_PORT = "url-port";
  @SerializedName(SERIALIZED_NAME_URL_PORT)
  private Integer urlPort;

  public static final String SERIALIZED_NAME_URL_PROTOCOL = "url-protocol";
  @SerializedName(SERIALIZED_NAME_URL_PROTOCOL)
  private String urlProtocol;

  public static final String SERIALIZED_NAME_VALID = "valid";
  @SerializedName(SERIALIZED_NAME_VALID)
  private Boolean valid;

  public URLInfoResponse() {
  }

  public URLInfoResponse content(String content) {
    this.content = content;
    return this;
  }

  /**
   * The actual content this URL responded with. Only set if the &#39;fetch-content&#39; option was used
   * @return content
   */
  @javax.annotation.Nonnull
  public String getContent() {
    return content;
  }

  public void setContent(String content) {
    this.content = content;
  }


  public URLInfoResponse contentEncoding(String contentEncoding) {
    this.contentEncoding = contentEncoding;
    return this;
  }

  /**
   * The encoding format the URL uses
   * @return contentEncoding
   */
  @javax.annotation.Nonnull
  public String getContentEncoding() {
    return contentEncoding;
  }

  public void setContentEncoding(String contentEncoding) {
    this.contentEncoding = contentEncoding;
  }


  public URLInfoResponse contentSize(Integer contentSize) {
    this.contentSize = contentSize;
    return this;
  }

  /**
   * The size of the URL content in bytes
   * @return contentSize
   */
  @javax.annotation.Nonnull
  public Integer getContentSize() {
    return contentSize;
  }

  public void setContentSize(Integer contentSize) {
    this.contentSize = contentSize;
  }


  public URLInfoResponse contentType(String contentType) {
    this.contentType = contentType;
    return this;
  }

  /**
   * The content-type this URL serves
   * @return contentType
   */
  @javax.annotation.Nonnull
  public String getContentType() {
    return contentType;
  }

  public void setContentType(String contentType) {
    this.contentType = contentType;
  }


  public URLInfoResponse httpOk(Boolean httpOk) {
    this.httpOk = httpOk;
    return this;
  }

  /**
   * True if this URL responded with an HTTP OK (200) status
   * @return httpOk
   */
  @javax.annotation.Nonnull
  public Boolean getHttpOk() {
    return httpOk;
  }

  public void setHttpOk(Boolean httpOk) {
    this.httpOk = httpOk;
  }


  public URLInfoResponse httpRedirect(Boolean httpRedirect) {
    this.httpRedirect = httpRedirect;
    return this;
  }

  /**
   * True if this URL responded with an HTTP redirect
   * @return httpRedirect
   */
  @javax.annotation.Nonnull
  public Boolean getHttpRedirect() {
    return httpRedirect;
  }

  public void setHttpRedirect(Boolean httpRedirect) {
    this.httpRedirect = httpRedirect;
  }


  public URLInfoResponse httpStatus(Integer httpStatus) {
    this.httpStatus = httpStatus;
    return this;
  }

  /**
   * The HTTP status code this URL responded with. An HTTP status of 0 indicates a network level issue
   * @return httpStatus
   */
  @javax.annotation.Nonnull
  public Integer getHttpStatus() {
    return httpStatus;
  }

  public void setHttpStatus(Integer httpStatus) {
    this.httpStatus = httpStatus;
  }


  public URLInfoResponse httpStatusMessage(Integer httpStatusMessage) {
    this.httpStatusMessage = httpStatusMessage;
    return this;
  }

  /**
   * The HTTP status message assoicated with the status code
   * @return httpStatusMessage
   */
  @javax.annotation.Nonnull
  public Integer getHttpStatusMessage() {
    return httpStatusMessage;
  }

  public void setHttpStatusMessage(Integer httpStatusMessage) {
    this.httpStatusMessage = httpStatusMessage;
  }


  public URLInfoResponse isError(Boolean isError) {
    this.isError = isError;
    return this;
  }

  /**
   * True if an error occurred while loading the URL. This includes network errors, TLS errors and timeouts
   * @return isError
   */
  @javax.annotation.Nonnull
  public Boolean getIsError() {
    return isError;
  }

  public void setIsError(Boolean isError) {
    this.isError = isError;
  }


  public URLInfoResponse isTimeout(Boolean isTimeout) {
    this.isTimeout = isTimeout;
    return this;
  }

  /**
   * True if a timeout occurred while loading the URL. You can set the timeout with the request parameter &#39;timeout&#39;
   * @return isTimeout
   */
  @javax.annotation.Nonnull
  public Boolean getIsTimeout() {
    return isTimeout;
  }

  public void setIsTimeout(Boolean isTimeout) {
    this.isTimeout = isTimeout;
  }


  public URLInfoResponse languageCode(String languageCode) {
    this.languageCode = languageCode;
    return this;
  }

  /**
   * The ISO 2-letter language code of the page. Extracted from either the HTML document or via HTTP headers
   * @return languageCode
   */
  @javax.annotation.Nonnull
  public String getLanguageCode() {
    return languageCode;
  }

  public void setLanguageCode(String languageCode) {
    this.languageCode = languageCode;
  }


  public URLInfoResponse loadTime(Double loadTime) {
    this.loadTime = loadTime;
    return this;
  }

  /**
   * The time taken to load the URL content in seconds
   * @return loadTime
   */
  @javax.annotation.Nonnull
  public Double getLoadTime() {
    return loadTime;
  }

  public void setLoadTime(Double loadTime) {
    this.loadTime = loadTime;
  }


  public URLInfoResponse query(Map<String, String> query) {
    this.query = query;
    return this;
  }

  public URLInfoResponse putQueryItem(String key, String queryItem) {
    if (this.query == null) {
      this.query = new HashMap<>();
    }
    this.query.put(key, queryItem);
    return this;
  }

  /**
   * A key-value map of the URL query paramaters
   * @return query
   */
  @javax.annotation.Nonnull
  public Map<String, String> getQuery() {
    return query;
  }

  public void setQuery(Map<String, String> query) {
    this.query = query;
  }


  public URLInfoResponse real(Boolean real) {
    this.real = real;
    return this;
  }

  /**
   * Is this URL actually serving real content
   * @return real
   */
  @javax.annotation.Nonnull
  public Boolean getReal() {
    return real;
  }

  public void setReal(Boolean real) {
    this.real = real;
  }


  public URLInfoResponse serverCity(String serverCity) {
    this.serverCity = serverCity;
    return this;
  }

  /**
   * The servers IP geo-location: full city name (if detectable)
   * @return serverCity
   */
  @javax.annotation.Nonnull
  public String getServerCity() {
    return serverCity;
  }

  public void setServerCity(String serverCity) {
    this.serverCity = serverCity;
  }


  public URLInfoResponse serverCountry(String serverCountry) {
    this.serverCountry = serverCountry;
    return this;
  }

  /**
   * The servers IP geo-location: full country name
   * @return serverCountry
   */
  @javax.annotation.Nonnull
  public String getServerCountry() {
    return serverCountry;
  }

  public void setServerCountry(String serverCountry) {
    this.serverCountry = serverCountry;
  }


  public URLInfoResponse serverCountryCode(String serverCountryCode) {
    this.serverCountryCode = serverCountryCode;
    return this;
  }

  /**
   * The servers IP geo-location: ISO 2-letter country code
   * @return serverCountryCode
   */
  @javax.annotation.Nonnull
  public String getServerCountryCode() {
    return serverCountryCode;
  }

  public void setServerCountryCode(String serverCountryCode) {
    this.serverCountryCode = serverCountryCode;
  }


  public URLInfoResponse serverHostname(String serverHostname) {
    this.serverHostname = serverHostname;
    return this;
  }

  /**
   * The servers hostname (PTR record)
   * @return serverHostname
   */
  @javax.annotation.Nonnull
  public String getServerHostname() {
    return serverHostname;
  }

  public void setServerHostname(String serverHostname) {
    this.serverHostname = serverHostname;
  }


  public URLInfoResponse serverIp(String serverIp) {
    this.serverIp = serverIp;
    return this;
  }

  /**
   * The IP address of the server hosting this URL
   * @return serverIp
   */
  @javax.annotation.Nonnull
  public String getServerIp() {
    return serverIp;
  }

  public void setServerIp(String serverIp) {
    this.serverIp = serverIp;
  }


  public URLInfoResponse serverName(String serverName) {
    this.serverName = serverName;
    return this;
  }

  /**
   * The name of the server software hosting this URL
   * @return serverName
   */
  @javax.annotation.Nonnull
  public String getServerName() {
    return serverName;
  }

  public void setServerName(String serverName) {
    this.serverName = serverName;
  }


  public URLInfoResponse serverRegion(String serverRegion) {
    this.serverRegion = serverRegion;
    return this;
  }

  /**
   * The servers IP geo-location: full region name (if detectable)
   * @return serverRegion
   */
  @javax.annotation.Nonnull
  public String getServerRegion() {
    return serverRegion;
  }

  public void setServerRegion(String serverRegion) {
    this.serverRegion = serverRegion;
  }


  public URLInfoResponse title(String title) {
    this.title = title;
    return this;
  }

  /**
   * The document title
   * @return title
   */
  @javax.annotation.Nonnull
  public String getTitle() {
    return title;
  }

  public void setTitle(String title) {
    this.title = title;
  }


  public URLInfoResponse url(String url) {
    this.url = url;
    return this;
  }

  /**
   * The fully qualified URL. This may be different to the URL requested if http-redirect is true
   * @return url
   */
  @javax.annotation.Nonnull
  public String getUrl() {
    return url;
  }

  public void setUrl(String url) {
    this.url = url;
  }


  public URLInfoResponse urlPath(String urlPath) {
    this.urlPath = urlPath;
    return this;
  }

  /**
   * The URL path
   * @return urlPath
   */
  @javax.annotation.Nonnull
  public String getUrlPath() {
    return urlPath;
  }

  public void setUrlPath(String urlPath) {
    this.urlPath = urlPath;
  }


  public URLInfoResponse urlPort(Integer urlPort) {
    this.urlPort = urlPort;
    return this;
  }

  /**
   * The URL port
   * @return urlPort
   */
  @javax.annotation.Nonnull
  public Integer getUrlPort() {
    return urlPort;
  }

  public void setUrlPort(Integer urlPort) {
    this.urlPort = urlPort;
  }


  public URLInfoResponse urlProtocol(String urlProtocol) {
    this.urlProtocol = urlProtocol;
    return this;
  }

  /**
   * The URL protocol, usually http or https
   * @return urlProtocol
   */
  @javax.annotation.Nonnull
  public String getUrlProtocol() {
    return urlProtocol;
  }

  public void setUrlProtocol(String urlProtocol) {
    this.urlProtocol = urlProtocol;
  }


  public URLInfoResponse valid(Boolean valid) {
    this.valid = valid;
    return this;
  }

  /**
   * Is this a valid well-formed URL
   * @return valid
   */
  @javax.annotation.Nonnull
  public Boolean getValid() {
    return valid;
  }

  public void setValid(Boolean valid) {
    this.valid = valid;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    URLInfoResponse urLInfoResponse = (URLInfoResponse) o;
    return Objects.equals(this.content, urLInfoResponse.content) &&
        Objects.equals(this.contentEncoding, urLInfoResponse.contentEncoding) &&
        Objects.equals(this.contentSize, urLInfoResponse.contentSize) &&
        Objects.equals(this.contentType, urLInfoResponse.contentType) &&
        Objects.equals(this.httpOk, urLInfoResponse.httpOk) &&
        Objects.equals(this.httpRedirect, urLInfoResponse.httpRedirect) &&
        Objects.equals(this.httpStatus, urLInfoResponse.httpStatus) &&
        Objects.equals(this.httpStatusMessage, urLInfoResponse.httpStatusMessage) &&
        Objects.equals(this.isError, urLInfoResponse.isError) &&
        Objects.equals(this.isTimeout, urLInfoResponse.isTimeout) &&
        Objects.equals(this.languageCode, urLInfoResponse.languageCode) &&
        Objects.equals(this.loadTime, urLInfoResponse.loadTime) &&
        Objects.equals(this.query, urLInfoResponse.query) &&
        Objects.equals(this.real, urLInfoResponse.real) &&
        Objects.equals(this.serverCity, urLInfoResponse.serverCity) &&
        Objects.equals(this.serverCountry, urLInfoResponse.serverCountry) &&
        Objects.equals(this.serverCountryCode, urLInfoResponse.serverCountryCode) &&
        Objects.equals(this.serverHostname, urLInfoResponse.serverHostname) &&
        Objects.equals(this.serverIp, urLInfoResponse.serverIp) &&
        Objects.equals(this.serverName, urLInfoResponse.serverName) &&
        Objects.equals(this.serverRegion, urLInfoResponse.serverRegion) &&
        Objects.equals(this.title, urLInfoResponse.title) &&
        Objects.equals(this.url, urLInfoResponse.url) &&
        Objects.equals(this.urlPath, urLInfoResponse.urlPath) &&
        Objects.equals(this.urlPort, urLInfoResponse.urlPort) &&
        Objects.equals(this.urlProtocol, urLInfoResponse.urlProtocol) &&
        Objects.equals(this.valid, urLInfoResponse.valid);
  }

  @Override
  public int hashCode() {
    return Objects.hash(content, contentEncoding, contentSize, contentType, httpOk, httpRedirect, httpStatus, httpStatusMessage, isError, isTimeout, languageCode, loadTime, query, real, serverCity, serverCountry, serverCountryCode, serverHostname, serverIp, serverName, serverRegion, title, url, urlPath, urlPort, urlProtocol, valid);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class URLInfoResponse {\n");
    sb.append("    content: ").append(toIndentedString(content)).append("\n");
    sb.append("    contentEncoding: ").append(toIndentedString(contentEncoding)).append("\n");
    sb.append("    contentSize: ").append(toIndentedString(contentSize)).append("\n");
    sb.append("    contentType: ").append(toIndentedString(contentType)).append("\n");
    sb.append("    httpOk: ").append(toIndentedString(httpOk)).append("\n");
    sb.append("    httpRedirect: ").append(toIndentedString(httpRedirect)).append("\n");
    sb.append("    httpStatus: ").append(toIndentedString(httpStatus)).append("\n");
    sb.append("    httpStatusMessage: ").append(toIndentedString(httpStatusMessage)).append("\n");
    sb.append("    isError: ").append(toIndentedString(isError)).append("\n");
    sb.append("    isTimeout: ").append(toIndentedString(isTimeout)).append("\n");
    sb.append("    languageCode: ").append(toIndentedString(languageCode)).append("\n");
    sb.append("    loadTime: ").append(toIndentedString(loadTime)).append("\n");
    sb.append("    query: ").append(toIndentedString(query)).append("\n");
    sb.append("    real: ").append(toIndentedString(real)).append("\n");
    sb.append("    serverCity: ").append(toIndentedString(serverCity)).append("\n");
    sb.append("    serverCountry: ").append(toIndentedString(serverCountry)).append("\n");
    sb.append("    serverCountryCode: ").append(toIndentedString(serverCountryCode)).append("\n");
    sb.append("    serverHostname: ").append(toIndentedString(serverHostname)).append("\n");
    sb.append("    serverIp: ").append(toIndentedString(serverIp)).append("\n");
    sb.append("    serverName: ").append(toIndentedString(serverName)).append("\n");
    sb.append("    serverRegion: ").append(toIndentedString(serverRegion)).append("\n");
    sb.append("    title: ").append(toIndentedString(title)).append("\n");
    sb.append("    url: ").append(toIndentedString(url)).append("\n");
    sb.append("    urlPath: ").append(toIndentedString(urlPath)).append("\n");
    sb.append("    urlPort: ").append(toIndentedString(urlPort)).append("\n");
    sb.append("    urlProtocol: ").append(toIndentedString(urlProtocol)).append("\n");
    sb.append("    valid: ").append(toIndentedString(valid)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("content");
    openapiFields.add("content-encoding");
    openapiFields.add("content-size");
    openapiFields.add("content-type");
    openapiFields.add("http-ok");
    openapiFields.add("http-redirect");
    openapiFields.add("http-status");
    openapiFields.add("http-status-message");
    openapiFields.add("is-error");
    openapiFields.add("is-timeout");
    openapiFields.add("language-code");
    openapiFields.add("load-time");
    openapiFields.add("query");
    openapiFields.add("real");
    openapiFields.add("server-city");
    openapiFields.add("server-country");
    openapiFields.add("server-country-code");
    openapiFields.add("server-hostname");
    openapiFields.add("server-ip");
    openapiFields.add("server-name");
    openapiFields.add("server-region");
    openapiFields.add("title");
    openapiFields.add("url");
    openapiFields.add("url-path");
    openapiFields.add("url-port");
    openapiFields.add("url-protocol");
    openapiFields.add("valid");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("content");
    openapiRequiredFields.add("content-encoding");
    openapiRequiredFields.add("content-size");
    openapiRequiredFields.add("content-type");
    openapiRequiredFields.add("http-ok");
    openapiRequiredFields.add("http-redirect");
    openapiRequiredFields.add("http-status");
    openapiRequiredFields.add("http-status-message");
    openapiRequiredFields.add("is-error");
    openapiRequiredFields.add("is-timeout");
    openapiRequiredFields.add("language-code");
    openapiRequiredFields.add("load-time");
    openapiRequiredFields.add("query");
    openapiRequiredFields.add("real");
    openapiRequiredFields.add("server-city");
    openapiRequiredFields.add("server-country");
    openapiRequiredFields.add("server-country-code");
    openapiRequiredFields.add("server-hostname");
    openapiRequiredFields.add("server-ip");
    openapiRequiredFields.add("server-name");
    openapiRequiredFields.add("server-region");
    openapiRequiredFields.add("title");
    openapiRequiredFields.add("url");
    openapiRequiredFields.add("url-path");
    openapiRequiredFields.add("url-port");
    openapiRequiredFields.add("url-protocol");
    openapiRequiredFields.add("valid");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to URLInfoResponse
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!URLInfoResponse.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in URLInfoResponse is not found in the empty JSON string", URLInfoResponse.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!URLInfoResponse.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `URLInfoResponse` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : URLInfoResponse.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("content").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `content` to be a primitive type in the JSON string but got `%s`", jsonObj.get("content").toString()));
      }
      if (!jsonObj.get("content-encoding").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `content-encoding` to be a primitive type in the JSON string but got `%s`", jsonObj.get("content-encoding").toString()));
      }
      if (!jsonObj.get("content-type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `content-type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("content-type").toString()));
      }
      if (!jsonObj.get("language-code").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `language-code` to be a primitive type in the JSON string but got `%s`", jsonObj.get("language-code").toString()));
      }
      if (!jsonObj.get("server-city").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `server-city` to be a primitive type in the JSON string but got `%s`", jsonObj.get("server-city").toString()));
      }
      if (!jsonObj.get("server-country").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `server-country` to be a primitive type in the JSON string but got `%s`", jsonObj.get("server-country").toString()));
      }
      if (!jsonObj.get("server-country-code").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `server-country-code` to be a primitive type in the JSON string but got `%s`", jsonObj.get("server-country-code").toString()));
      }
      if (!jsonObj.get("server-hostname").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `server-hostname` to be a primitive type in the JSON string but got `%s`", jsonObj.get("server-hostname").toString()));
      }
      if (!jsonObj.get("server-ip").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `server-ip` to be a primitive type in the JSON string but got `%s`", jsonObj.get("server-ip").toString()));
      }
      if (!jsonObj.get("server-name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `server-name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("server-name").toString()));
      }
      if (!jsonObj.get("server-region").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `server-region` to be a primitive type in the JSON string but got `%s`", jsonObj.get("server-region").toString()));
      }
      if (!jsonObj.get("title").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `title` to be a primitive type in the JSON string but got `%s`", jsonObj.get("title").toString()));
      }
      if (!jsonObj.get("url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("url").toString()));
      }
      if (!jsonObj.get("url-path").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `url-path` to be a primitive type in the JSON string but got `%s`", jsonObj.get("url-path").toString()));
      }
      if (!jsonObj.get("url-protocol").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `url-protocol` to be a primitive type in the JSON string but got `%s`", jsonObj.get("url-protocol").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!URLInfoResponse.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'URLInfoResponse' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<URLInfoResponse> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(URLInfoResponse.class));

       return (TypeAdapter<T>) new TypeAdapter<URLInfoResponse>() {
           @Override
           public void write(JsonWriter out, URLInfoResponse value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public URLInfoResponse read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of URLInfoResponse given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of URLInfoResponse
   * @throws IOException if the JSON string is invalid with respect to URLInfoResponse
   */
  public static URLInfoResponse fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, URLInfoResponse.class);
  }

  /**
   * Convert an instance of URLInfoResponse to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

