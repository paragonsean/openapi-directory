/*
 * Neutrino API
 * The general-purpose API
 *
 * The version of the OpenAPI document: 3.6.4
 * Contact: ops@neutrinoapi.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.APIError;
import org.openapitools.client.model.HLRLookupResponse;
import org.openapitools.client.model.PhonePlaybackResponse;
import org.openapitools.client.model.PhoneVerifyResponse;
import org.openapitools.client.model.SMSVerifyResponse;
import org.openapitools.client.model.VerifySecurityCodeResponse;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class TelephonyApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public TelephonyApi() {
        this(Configuration.getDefaultApiClient());
    }

    public TelephonyApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for hLRLookup
     * @param number A phone number (required)
     * @param countryCode ISO 2-letter country code, assume numbers are based in this country. &lt;br&gt;If not set numbers are assumed to be in international format (with or without the leading + sign) (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Your API request has been rejected. Check error code for details </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> You have failed to authenticate </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> We messed up, sorry! Your request has caused a fatal exception </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> We messed up, sorry! Your request has caused an error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call hLRLookupCall(String number, String countryCode, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/hlr-lookup";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (number != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("number", number));
        }

        if (countryCode != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("country-code", countryCode));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api-key", "user-id" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call hLRLookupValidateBeforeCall(String number, String countryCode, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'number' is set
        if (number == null) {
            throw new ApiException("Missing the required parameter 'number' when calling hLRLookup(Async)");
        }

        return hLRLookupCall(number, countryCode, _callback);

    }

    /**
     * HLR Lookup
     * Connect to the global mobile cellular network and retrieve the status of a mobile device
     * @param number A phone number (required)
     * @param countryCode ISO 2-letter country code, assume numbers are based in this country. &lt;br&gt;If not set numbers are assumed to be in international format (with or without the leading + sign) (optional)
     * @return HLRLookupResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Your API request has been rejected. Check error code for details </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> You have failed to authenticate </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> We messed up, sorry! Your request has caused a fatal exception </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> We messed up, sorry! Your request has caused an error </td><td>  -  </td></tr>
     </table>
     */
    public HLRLookupResponse hLRLookup(String number, String countryCode) throws ApiException {
        ApiResponse<HLRLookupResponse> localVarResp = hLRLookupWithHttpInfo(number, countryCode);
        return localVarResp.getData();
    }

    /**
     * HLR Lookup
     * Connect to the global mobile cellular network and retrieve the status of a mobile device
     * @param number A phone number (required)
     * @param countryCode ISO 2-letter country code, assume numbers are based in this country. &lt;br&gt;If not set numbers are assumed to be in international format (with or without the leading + sign) (optional)
     * @return ApiResponse&lt;HLRLookupResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Your API request has been rejected. Check error code for details </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> You have failed to authenticate </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> We messed up, sorry! Your request has caused a fatal exception </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> We messed up, sorry! Your request has caused an error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<HLRLookupResponse> hLRLookupWithHttpInfo(String number, String countryCode) throws ApiException {
        okhttp3.Call localVarCall = hLRLookupValidateBeforeCall(number, countryCode, null);
        Type localVarReturnType = new TypeToken<HLRLookupResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * HLR Lookup (asynchronously)
     * Connect to the global mobile cellular network and retrieve the status of a mobile device
     * @param number A phone number (required)
     * @param countryCode ISO 2-letter country code, assume numbers are based in this country. &lt;br&gt;If not set numbers are assumed to be in international format (with or without the leading + sign) (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Your API request has been rejected. Check error code for details </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> You have failed to authenticate </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> We messed up, sorry! Your request has caused a fatal exception </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> We messed up, sorry! Your request has caused an error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call hLRLookupAsync(String number, String countryCode, final ApiCallback<HLRLookupResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = hLRLookupValidateBeforeCall(number, countryCode, _callback);
        Type localVarReturnType = new TypeToken<HLRLookupResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for phonePlayback
     * @param audioUrl A URL to a valid audio file. Accepted audio formats are: &lt;ul&gt; &lt;li&gt;MP3&lt;/li&gt; &lt;li&gt;WAV&lt;/li&gt; &lt;li&gt;OGG&lt;/li&gt; &lt;/ul&gt;You can use the following MP3 URL for testing: &lt;br&gt;https://www.neutrinoapi.com/test-files/test1.mp3 (required)
     * @param number The phone number to call. Must be in valid international format (required)
     * @param limit Limit the total number of calls allowed to the supplied phone number, if the limit is reached within the TTL then error code 14 will be returned (optional, default to 3)
     * @param limitTtl Set the TTL in number of days that the &#39;limit&#39; option will remember a phone number (the default is 1 day and the maximum is 365 days) (optional, default to 1)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Your API request has been rejected. Check error code for details </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> You have failed to authenticate </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> We messed up, sorry! Your request has caused a fatal exception </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> We messed up, sorry! Your request has caused an error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call phonePlaybackCall(String audioUrl, String number, Integer limit, Integer limitTtl, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/phone-playback";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (audioUrl != null) {
            localVarFormParams.put("audio-url", audioUrl);
        }

        if (limit != null) {
            localVarFormParams.put("limit", limit);
        }

        if (limitTtl != null) {
            localVarFormParams.put("limit-ttl", limitTtl);
        }

        if (number != null) {
            localVarFormParams.put("number", number);
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/x-www-form-urlencoded"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api-key", "user-id" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call phonePlaybackValidateBeforeCall(String audioUrl, String number, Integer limit, Integer limitTtl, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'audioUrl' is set
        if (audioUrl == null) {
            throw new ApiException("Missing the required parameter 'audioUrl' when calling phonePlayback(Async)");
        }

        // verify the required parameter 'number' is set
        if (number == null) {
            throw new ApiException("Missing the required parameter 'number' when calling phonePlayback(Async)");
        }

        return phonePlaybackCall(audioUrl, number, limit, limitTtl, _callback);

    }

    /**
     * Phone Playback
     * Make an automated call to any valid phone number and playback an audio message
     * @param audioUrl A URL to a valid audio file. Accepted audio formats are: &lt;ul&gt; &lt;li&gt;MP3&lt;/li&gt; &lt;li&gt;WAV&lt;/li&gt; &lt;li&gt;OGG&lt;/li&gt; &lt;/ul&gt;You can use the following MP3 URL for testing: &lt;br&gt;https://www.neutrinoapi.com/test-files/test1.mp3 (required)
     * @param number The phone number to call. Must be in valid international format (required)
     * @param limit Limit the total number of calls allowed to the supplied phone number, if the limit is reached within the TTL then error code 14 will be returned (optional, default to 3)
     * @param limitTtl Set the TTL in number of days that the &#39;limit&#39; option will remember a phone number (the default is 1 day and the maximum is 365 days) (optional, default to 1)
     * @return PhonePlaybackResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Your API request has been rejected. Check error code for details </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> You have failed to authenticate </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> We messed up, sorry! Your request has caused a fatal exception </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> We messed up, sorry! Your request has caused an error </td><td>  -  </td></tr>
     </table>
     */
    public PhonePlaybackResponse phonePlayback(String audioUrl, String number, Integer limit, Integer limitTtl) throws ApiException {
        ApiResponse<PhonePlaybackResponse> localVarResp = phonePlaybackWithHttpInfo(audioUrl, number, limit, limitTtl);
        return localVarResp.getData();
    }

    /**
     * Phone Playback
     * Make an automated call to any valid phone number and playback an audio message
     * @param audioUrl A URL to a valid audio file. Accepted audio formats are: &lt;ul&gt; &lt;li&gt;MP3&lt;/li&gt; &lt;li&gt;WAV&lt;/li&gt; &lt;li&gt;OGG&lt;/li&gt; &lt;/ul&gt;You can use the following MP3 URL for testing: &lt;br&gt;https://www.neutrinoapi.com/test-files/test1.mp3 (required)
     * @param number The phone number to call. Must be in valid international format (required)
     * @param limit Limit the total number of calls allowed to the supplied phone number, if the limit is reached within the TTL then error code 14 will be returned (optional, default to 3)
     * @param limitTtl Set the TTL in number of days that the &#39;limit&#39; option will remember a phone number (the default is 1 day and the maximum is 365 days) (optional, default to 1)
     * @return ApiResponse&lt;PhonePlaybackResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Your API request has been rejected. Check error code for details </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> You have failed to authenticate </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> We messed up, sorry! Your request has caused a fatal exception </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> We messed up, sorry! Your request has caused an error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PhonePlaybackResponse> phonePlaybackWithHttpInfo(String audioUrl, String number, Integer limit, Integer limitTtl) throws ApiException {
        okhttp3.Call localVarCall = phonePlaybackValidateBeforeCall(audioUrl, number, limit, limitTtl, null);
        Type localVarReturnType = new TypeToken<PhonePlaybackResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Phone Playback (asynchronously)
     * Make an automated call to any valid phone number and playback an audio message
     * @param audioUrl A URL to a valid audio file. Accepted audio formats are: &lt;ul&gt; &lt;li&gt;MP3&lt;/li&gt; &lt;li&gt;WAV&lt;/li&gt; &lt;li&gt;OGG&lt;/li&gt; &lt;/ul&gt;You can use the following MP3 URL for testing: &lt;br&gt;https://www.neutrinoapi.com/test-files/test1.mp3 (required)
     * @param number The phone number to call. Must be in valid international format (required)
     * @param limit Limit the total number of calls allowed to the supplied phone number, if the limit is reached within the TTL then error code 14 will be returned (optional, default to 3)
     * @param limitTtl Set the TTL in number of days that the &#39;limit&#39; option will remember a phone number (the default is 1 day and the maximum is 365 days) (optional, default to 1)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Your API request has been rejected. Check error code for details </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> You have failed to authenticate </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> We messed up, sorry! Your request has caused a fatal exception </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> We messed up, sorry! Your request has caused an error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call phonePlaybackAsync(String audioUrl, String number, Integer limit, Integer limitTtl, final ApiCallback<PhonePlaybackResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = phonePlaybackValidateBeforeCall(audioUrl, number, limit, limitTtl, _callback);
        Type localVarReturnType = new TypeToken<PhonePlaybackResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for phoneVerify
     * @param number The phone number to send the verification code to (required)
     * @param codeLength The number of digits to use in the security code (between 4 and 12) (optional, default to 6)
     * @param countryCode ISO 2-letter country code, assume numbers are based in this country. &lt;br&gt;If not set numbers are assumed to be in international format (with or without the leading + sign) (optional)
     * @param languageCode The language to playback the verification code in, available languages are: &lt;ul&gt; &lt;li&gt;de - German&lt;/li&gt; &lt;li&gt;en - English&lt;/li&gt; &lt;li&gt;es - Spanish&lt;/li&gt; &lt;li&gt;fr - French&lt;/li&gt; &lt;li&gt;it - Italian&lt;/li&gt; &lt;li&gt;pt - Portuguese&lt;/li&gt; &lt;li&gt;ru - Russian&lt;/li&gt; &lt;/ul&gt; (optional, default to en)
     * @param limit Limit the total number of calls allowed to the supplied phone number, if the limit is reached within the TTL then error code 14 will be returned (optional, default to 3)
     * @param limitTtl Set the TTL in number of days that the &#39;limit&#39; option will remember a phone number (the default is 1 day and the maximum is 365 days) (optional, default to 1)
     * @param playbackDelay The delay in milliseconds between the playback of each security code (optional, default to 800)
     * @param securityCode Pass in your own security code. This is useful if you have implemented TOTP or similar 2FA methods. If not set then we will generate a secure random code (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Your API request has been rejected. Check error code for details </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> You have failed to authenticate </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> We messed up, sorry! Your request has caused a fatal exception </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> We messed up, sorry! Your request has caused an error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call phoneVerifyCall(String number, Integer codeLength, String countryCode, String languageCode, Integer limit, Integer limitTtl, Integer playbackDelay, Integer securityCode, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/phone-verify";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (codeLength != null) {
            localVarFormParams.put("code-length", codeLength);
        }

        if (countryCode != null) {
            localVarFormParams.put("country-code", countryCode);
        }

        if (languageCode != null) {
            localVarFormParams.put("language-code", languageCode);
        }

        if (limit != null) {
            localVarFormParams.put("limit", limit);
        }

        if (limitTtl != null) {
            localVarFormParams.put("limit-ttl", limitTtl);
        }

        if (number != null) {
            localVarFormParams.put("number", number);
        }

        if (playbackDelay != null) {
            localVarFormParams.put("playback-delay", playbackDelay);
        }

        if (securityCode != null) {
            localVarFormParams.put("security-code", securityCode);
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/x-www-form-urlencoded"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api-key", "user-id" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call phoneVerifyValidateBeforeCall(String number, Integer codeLength, String countryCode, String languageCode, Integer limit, Integer limitTtl, Integer playbackDelay, Integer securityCode, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'number' is set
        if (number == null) {
            throw new ApiException("Missing the required parameter 'number' when calling phoneVerify(Async)");
        }

        return phoneVerifyCall(number, codeLength, countryCode, languageCode, limit, limitTtl, playbackDelay, securityCode, _callback);

    }

    /**
     * Phone Verify
     * Make an automated call to any valid phone number and playback a unique security code
     * @param number The phone number to send the verification code to (required)
     * @param codeLength The number of digits to use in the security code (between 4 and 12) (optional, default to 6)
     * @param countryCode ISO 2-letter country code, assume numbers are based in this country. &lt;br&gt;If not set numbers are assumed to be in international format (with or without the leading + sign) (optional)
     * @param languageCode The language to playback the verification code in, available languages are: &lt;ul&gt; &lt;li&gt;de - German&lt;/li&gt; &lt;li&gt;en - English&lt;/li&gt; &lt;li&gt;es - Spanish&lt;/li&gt; &lt;li&gt;fr - French&lt;/li&gt; &lt;li&gt;it - Italian&lt;/li&gt; &lt;li&gt;pt - Portuguese&lt;/li&gt; &lt;li&gt;ru - Russian&lt;/li&gt; &lt;/ul&gt; (optional, default to en)
     * @param limit Limit the total number of calls allowed to the supplied phone number, if the limit is reached within the TTL then error code 14 will be returned (optional, default to 3)
     * @param limitTtl Set the TTL in number of days that the &#39;limit&#39; option will remember a phone number (the default is 1 day and the maximum is 365 days) (optional, default to 1)
     * @param playbackDelay The delay in milliseconds between the playback of each security code (optional, default to 800)
     * @param securityCode Pass in your own security code. This is useful if you have implemented TOTP or similar 2FA methods. If not set then we will generate a secure random code (optional)
     * @return PhoneVerifyResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Your API request has been rejected. Check error code for details </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> You have failed to authenticate </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> We messed up, sorry! Your request has caused a fatal exception </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> We messed up, sorry! Your request has caused an error </td><td>  -  </td></tr>
     </table>
     */
    public PhoneVerifyResponse phoneVerify(String number, Integer codeLength, String countryCode, String languageCode, Integer limit, Integer limitTtl, Integer playbackDelay, Integer securityCode) throws ApiException {
        ApiResponse<PhoneVerifyResponse> localVarResp = phoneVerifyWithHttpInfo(number, codeLength, countryCode, languageCode, limit, limitTtl, playbackDelay, securityCode);
        return localVarResp.getData();
    }

    /**
     * Phone Verify
     * Make an automated call to any valid phone number and playback a unique security code
     * @param number The phone number to send the verification code to (required)
     * @param codeLength The number of digits to use in the security code (between 4 and 12) (optional, default to 6)
     * @param countryCode ISO 2-letter country code, assume numbers are based in this country. &lt;br&gt;If not set numbers are assumed to be in international format (with or without the leading + sign) (optional)
     * @param languageCode The language to playback the verification code in, available languages are: &lt;ul&gt; &lt;li&gt;de - German&lt;/li&gt; &lt;li&gt;en - English&lt;/li&gt; &lt;li&gt;es - Spanish&lt;/li&gt; &lt;li&gt;fr - French&lt;/li&gt; &lt;li&gt;it - Italian&lt;/li&gt; &lt;li&gt;pt - Portuguese&lt;/li&gt; &lt;li&gt;ru - Russian&lt;/li&gt; &lt;/ul&gt; (optional, default to en)
     * @param limit Limit the total number of calls allowed to the supplied phone number, if the limit is reached within the TTL then error code 14 will be returned (optional, default to 3)
     * @param limitTtl Set the TTL in number of days that the &#39;limit&#39; option will remember a phone number (the default is 1 day and the maximum is 365 days) (optional, default to 1)
     * @param playbackDelay The delay in milliseconds between the playback of each security code (optional, default to 800)
     * @param securityCode Pass in your own security code. This is useful if you have implemented TOTP or similar 2FA methods. If not set then we will generate a secure random code (optional)
     * @return ApiResponse&lt;PhoneVerifyResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Your API request has been rejected. Check error code for details </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> You have failed to authenticate </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> We messed up, sorry! Your request has caused a fatal exception </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> We messed up, sorry! Your request has caused an error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PhoneVerifyResponse> phoneVerifyWithHttpInfo(String number, Integer codeLength, String countryCode, String languageCode, Integer limit, Integer limitTtl, Integer playbackDelay, Integer securityCode) throws ApiException {
        okhttp3.Call localVarCall = phoneVerifyValidateBeforeCall(number, codeLength, countryCode, languageCode, limit, limitTtl, playbackDelay, securityCode, null);
        Type localVarReturnType = new TypeToken<PhoneVerifyResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Phone Verify (asynchronously)
     * Make an automated call to any valid phone number and playback a unique security code
     * @param number The phone number to send the verification code to (required)
     * @param codeLength The number of digits to use in the security code (between 4 and 12) (optional, default to 6)
     * @param countryCode ISO 2-letter country code, assume numbers are based in this country. &lt;br&gt;If not set numbers are assumed to be in international format (with or without the leading + sign) (optional)
     * @param languageCode The language to playback the verification code in, available languages are: &lt;ul&gt; &lt;li&gt;de - German&lt;/li&gt; &lt;li&gt;en - English&lt;/li&gt; &lt;li&gt;es - Spanish&lt;/li&gt; &lt;li&gt;fr - French&lt;/li&gt; &lt;li&gt;it - Italian&lt;/li&gt; &lt;li&gt;pt - Portuguese&lt;/li&gt; &lt;li&gt;ru - Russian&lt;/li&gt; &lt;/ul&gt; (optional, default to en)
     * @param limit Limit the total number of calls allowed to the supplied phone number, if the limit is reached within the TTL then error code 14 will be returned (optional, default to 3)
     * @param limitTtl Set the TTL in number of days that the &#39;limit&#39; option will remember a phone number (the default is 1 day and the maximum is 365 days) (optional, default to 1)
     * @param playbackDelay The delay in milliseconds between the playback of each security code (optional, default to 800)
     * @param securityCode Pass in your own security code. This is useful if you have implemented TOTP or similar 2FA methods. If not set then we will generate a secure random code (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Your API request has been rejected. Check error code for details </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> You have failed to authenticate </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> We messed up, sorry! Your request has caused a fatal exception </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> We messed up, sorry! Your request has caused an error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call phoneVerifyAsync(String number, Integer codeLength, String countryCode, String languageCode, Integer limit, Integer limitTtl, Integer playbackDelay, Integer securityCode, final ApiCallback<PhoneVerifyResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = phoneVerifyValidateBeforeCall(number, codeLength, countryCode, languageCode, limit, limitTtl, playbackDelay, securityCode, _callback);
        Type localVarReturnType = new TypeToken<PhoneVerifyResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for sMSVerify
     * @param number The phone number to send a verification code to (required)
     * @param codeLength The number of digits to use in the security code (must be between 4 and 12) (optional, default to 5)
     * @param countryCode ISO 2-letter country code, assume numbers are based in this country. &lt;br&gt;If not set numbers are assumed to be in international format (with or without the leading + sign) (optional)
     * @param languageCode The language to send the verification code in, available languages are: &lt;ul&gt; &lt;li&gt;de - German&lt;/li&gt; &lt;li&gt;en - English&lt;/li&gt; &lt;li&gt;es - Spanish&lt;/li&gt; &lt;li&gt;fr - French&lt;/li&gt; &lt;li&gt;it - Italian&lt;/li&gt; &lt;li&gt;pt - Portuguese&lt;/li&gt; &lt;li&gt;ru - Russian&lt;/li&gt; &lt;/ul&gt; (optional, default to en)
     * @param limit Limit the total number of SMS allowed to the supplied phone number, if the limit is reached within the TTL then error code 14 will be returned (optional, default to 10)
     * @param limitTtl Set the TTL in number of days that the &#39;limit&#39; option will remember a phone number (the default is 1 day and the maximum is 365 days) (optional, default to 1)
     * @param securityCode Pass in your own security code. This is useful if you have implemented TOTP or similar 2FA methods. If not set then we will generate a secure random code (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Your API request has been rejected. Check error code for details </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> You have failed to authenticate </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> We messed up, sorry! Your request has caused a fatal exception </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> We messed up, sorry! Your request has caused an error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call sMSVerifyCall(String number, Integer codeLength, String countryCode, String languageCode, Integer limit, Integer limitTtl, Integer securityCode, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/sms-verify";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (codeLength != null) {
            localVarFormParams.put("code-length", codeLength);
        }

        if (countryCode != null) {
            localVarFormParams.put("country-code", countryCode);
        }

        if (languageCode != null) {
            localVarFormParams.put("language-code", languageCode);
        }

        if (limit != null) {
            localVarFormParams.put("limit", limit);
        }

        if (limitTtl != null) {
            localVarFormParams.put("limit-ttl", limitTtl);
        }

        if (number != null) {
            localVarFormParams.put("number", number);
        }

        if (securityCode != null) {
            localVarFormParams.put("security-code", securityCode);
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/x-www-form-urlencoded"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api-key", "user-id" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call sMSVerifyValidateBeforeCall(String number, Integer codeLength, String countryCode, String languageCode, Integer limit, Integer limitTtl, Integer securityCode, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'number' is set
        if (number == null) {
            throw new ApiException("Missing the required parameter 'number' when calling sMSVerify(Async)");
        }

        return sMSVerifyCall(number, codeLength, countryCode, languageCode, limit, limitTtl, securityCode, _callback);

    }

    /**
     * SMS Verify
     * Send a unique security code to any mobile device via SMS
     * @param number The phone number to send a verification code to (required)
     * @param codeLength The number of digits to use in the security code (must be between 4 and 12) (optional, default to 5)
     * @param countryCode ISO 2-letter country code, assume numbers are based in this country. &lt;br&gt;If not set numbers are assumed to be in international format (with or without the leading + sign) (optional)
     * @param languageCode The language to send the verification code in, available languages are: &lt;ul&gt; &lt;li&gt;de - German&lt;/li&gt; &lt;li&gt;en - English&lt;/li&gt; &lt;li&gt;es - Spanish&lt;/li&gt; &lt;li&gt;fr - French&lt;/li&gt; &lt;li&gt;it - Italian&lt;/li&gt; &lt;li&gt;pt - Portuguese&lt;/li&gt; &lt;li&gt;ru - Russian&lt;/li&gt; &lt;/ul&gt; (optional, default to en)
     * @param limit Limit the total number of SMS allowed to the supplied phone number, if the limit is reached within the TTL then error code 14 will be returned (optional, default to 10)
     * @param limitTtl Set the TTL in number of days that the &#39;limit&#39; option will remember a phone number (the default is 1 day and the maximum is 365 days) (optional, default to 1)
     * @param securityCode Pass in your own security code. This is useful if you have implemented TOTP or similar 2FA methods. If not set then we will generate a secure random code (optional)
     * @return SMSVerifyResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Your API request has been rejected. Check error code for details </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> You have failed to authenticate </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> We messed up, sorry! Your request has caused a fatal exception </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> We messed up, sorry! Your request has caused an error </td><td>  -  </td></tr>
     </table>
     */
    public SMSVerifyResponse sMSVerify(String number, Integer codeLength, String countryCode, String languageCode, Integer limit, Integer limitTtl, Integer securityCode) throws ApiException {
        ApiResponse<SMSVerifyResponse> localVarResp = sMSVerifyWithHttpInfo(number, codeLength, countryCode, languageCode, limit, limitTtl, securityCode);
        return localVarResp.getData();
    }

    /**
     * SMS Verify
     * Send a unique security code to any mobile device via SMS
     * @param number The phone number to send a verification code to (required)
     * @param codeLength The number of digits to use in the security code (must be between 4 and 12) (optional, default to 5)
     * @param countryCode ISO 2-letter country code, assume numbers are based in this country. &lt;br&gt;If not set numbers are assumed to be in international format (with or without the leading + sign) (optional)
     * @param languageCode The language to send the verification code in, available languages are: &lt;ul&gt; &lt;li&gt;de - German&lt;/li&gt; &lt;li&gt;en - English&lt;/li&gt; &lt;li&gt;es - Spanish&lt;/li&gt; &lt;li&gt;fr - French&lt;/li&gt; &lt;li&gt;it - Italian&lt;/li&gt; &lt;li&gt;pt - Portuguese&lt;/li&gt; &lt;li&gt;ru - Russian&lt;/li&gt; &lt;/ul&gt; (optional, default to en)
     * @param limit Limit the total number of SMS allowed to the supplied phone number, if the limit is reached within the TTL then error code 14 will be returned (optional, default to 10)
     * @param limitTtl Set the TTL in number of days that the &#39;limit&#39; option will remember a phone number (the default is 1 day and the maximum is 365 days) (optional, default to 1)
     * @param securityCode Pass in your own security code. This is useful if you have implemented TOTP or similar 2FA methods. If not set then we will generate a secure random code (optional)
     * @return ApiResponse&lt;SMSVerifyResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Your API request has been rejected. Check error code for details </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> You have failed to authenticate </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> We messed up, sorry! Your request has caused a fatal exception </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> We messed up, sorry! Your request has caused an error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SMSVerifyResponse> sMSVerifyWithHttpInfo(String number, Integer codeLength, String countryCode, String languageCode, Integer limit, Integer limitTtl, Integer securityCode) throws ApiException {
        okhttp3.Call localVarCall = sMSVerifyValidateBeforeCall(number, codeLength, countryCode, languageCode, limit, limitTtl, securityCode, null);
        Type localVarReturnType = new TypeToken<SMSVerifyResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * SMS Verify (asynchronously)
     * Send a unique security code to any mobile device via SMS
     * @param number The phone number to send a verification code to (required)
     * @param codeLength The number of digits to use in the security code (must be between 4 and 12) (optional, default to 5)
     * @param countryCode ISO 2-letter country code, assume numbers are based in this country. &lt;br&gt;If not set numbers are assumed to be in international format (with or without the leading + sign) (optional)
     * @param languageCode The language to send the verification code in, available languages are: &lt;ul&gt; &lt;li&gt;de - German&lt;/li&gt; &lt;li&gt;en - English&lt;/li&gt; &lt;li&gt;es - Spanish&lt;/li&gt; &lt;li&gt;fr - French&lt;/li&gt; &lt;li&gt;it - Italian&lt;/li&gt; &lt;li&gt;pt - Portuguese&lt;/li&gt; &lt;li&gt;ru - Russian&lt;/li&gt; &lt;/ul&gt; (optional, default to en)
     * @param limit Limit the total number of SMS allowed to the supplied phone number, if the limit is reached within the TTL then error code 14 will be returned (optional, default to 10)
     * @param limitTtl Set the TTL in number of days that the &#39;limit&#39; option will remember a phone number (the default is 1 day and the maximum is 365 days) (optional, default to 1)
     * @param securityCode Pass in your own security code. This is useful if you have implemented TOTP or similar 2FA methods. If not set then we will generate a secure random code (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Your API request has been rejected. Check error code for details </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> You have failed to authenticate </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> We messed up, sorry! Your request has caused a fatal exception </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> We messed up, sorry! Your request has caused an error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call sMSVerifyAsync(String number, Integer codeLength, String countryCode, String languageCode, Integer limit, Integer limitTtl, Integer securityCode, final ApiCallback<SMSVerifyResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = sMSVerifyValidateBeforeCall(number, codeLength, countryCode, languageCode, limit, limitTtl, securityCode, _callback);
        Type localVarReturnType = new TypeToken<SMSVerifyResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for verifySecurityCode
     * @param securityCode The security code to verify (required)
     * @param limitBy If set then enable additional brute-force protection by limiting the number of attempts by the supplied value. This can be set to any unique identifier you would like to limit by, for example a hash of the users email, phone number or IP address. Requests to this API will be ignored after approximately 10 failed verification attempts (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Your API request has been rejected. Check error code for details </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> You have failed to authenticate </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> We messed up, sorry! Your request has caused a fatal exception </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> We messed up, sorry! Your request has caused an error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call verifySecurityCodeCall(String securityCode, String limitBy, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/verify-security-code";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (securityCode != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("security-code", securityCode));
        }

        if (limitBy != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit-by", limitBy));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api-key", "user-id" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call verifySecurityCodeValidateBeforeCall(String securityCode, String limitBy, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'securityCode' is set
        if (securityCode == null) {
            throw new ApiException("Missing the required parameter 'securityCode' when calling verifySecurityCode(Async)");
        }

        return verifySecurityCodeCall(securityCode, limitBy, _callback);

    }

    /**
     * Verify Security Code
     * Check if a security code sent via SMS Verify or Phone Verify is valid
     * @param securityCode The security code to verify (required)
     * @param limitBy If set then enable additional brute-force protection by limiting the number of attempts by the supplied value. This can be set to any unique identifier you would like to limit by, for example a hash of the users email, phone number or IP address. Requests to this API will be ignored after approximately 10 failed verification attempts (optional)
     * @return VerifySecurityCodeResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Your API request has been rejected. Check error code for details </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> You have failed to authenticate </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> We messed up, sorry! Your request has caused a fatal exception </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> We messed up, sorry! Your request has caused an error </td><td>  -  </td></tr>
     </table>
     */
    public VerifySecurityCodeResponse verifySecurityCode(String securityCode, String limitBy) throws ApiException {
        ApiResponse<VerifySecurityCodeResponse> localVarResp = verifySecurityCodeWithHttpInfo(securityCode, limitBy);
        return localVarResp.getData();
    }

    /**
     * Verify Security Code
     * Check if a security code sent via SMS Verify or Phone Verify is valid
     * @param securityCode The security code to verify (required)
     * @param limitBy If set then enable additional brute-force protection by limiting the number of attempts by the supplied value. This can be set to any unique identifier you would like to limit by, for example a hash of the users email, phone number or IP address. Requests to this API will be ignored after approximately 10 failed verification attempts (optional)
     * @return ApiResponse&lt;VerifySecurityCodeResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Your API request has been rejected. Check error code for details </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> You have failed to authenticate </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> We messed up, sorry! Your request has caused a fatal exception </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> We messed up, sorry! Your request has caused an error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<VerifySecurityCodeResponse> verifySecurityCodeWithHttpInfo(String securityCode, String limitBy) throws ApiException {
        okhttp3.Call localVarCall = verifySecurityCodeValidateBeforeCall(securityCode, limitBy, null);
        Type localVarReturnType = new TypeToken<VerifySecurityCodeResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Verify Security Code (asynchronously)
     * Check if a security code sent via SMS Verify or Phone Verify is valid
     * @param securityCode The security code to verify (required)
     * @param limitBy If set then enable additional brute-force protection by limiting the number of attempts by the supplied value. This can be set to any unique identifier you would like to limit by, for example a hash of the users email, phone number or IP address. Requests to this API will be ignored after approximately 10 failed verification attempts (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Your API request has been rejected. Check error code for details </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> You have failed to authenticate </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> We messed up, sorry! Your request has caused a fatal exception </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> We messed up, sorry! Your request has caused an error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call verifySecurityCodeAsync(String securityCode, String limitBy, final ApiCallback<VerifySecurityCodeResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = verifySecurityCodeValidateBeforeCall(securityCode, limitBy, _callback);
        Type localVarReturnType = new TypeToken<VerifySecurityCodeResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
