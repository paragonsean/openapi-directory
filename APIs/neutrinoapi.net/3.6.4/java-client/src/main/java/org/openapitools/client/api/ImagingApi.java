/*
 * Neutrino API
 * The general-purpose API
 *
 * The version of the OpenAPI document: 3.6.4
 * Contact: ops@neutrinoapi.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.APIError;
import java.io.File;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class ImagingApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public ImagingApi() {
        this(Configuration.getDefaultApiClient());
    }

    public ImagingApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for hTMLRender
     * @param content The HTML content. This can be either a URL to load from, a file upload (multipart/form-data) or an HTML content string (required)
     * @param css Inject custom CSS into the HTML. e.g. &#39;body { background-color: red;}&#39; (optional)
     * @param delay Number of seconds to wait before rendering the page (can be useful for pages with animations etc) (optional, default to 0)
     * @param footer The footer HTML to insert into each page. The following dynamic tags are supported: {date}, {title}, {url}, {pageNumber}, {totalPages} (optional)
     * @param format Which format to output, available options are: PDF, PNG, JPG (optional, default to PDF)
     * @param grayscale Render the final document in grayscale (optional, default to false)
     * @param header The header HTML to insert into each page. The following dynamic tags are supported: {date}, {title}, {url}, {pageNumber}, {totalPages} (optional)
     * @param ignoreCertificateErrors Ignore any TLS/SSL certificate errors (optional, default to false)
     * @param imageHeight If rendering to an image format (PNG or JPG) use this image height (in pixels). The default is automatic which dynamically sets the image height based on the content (optional)
     * @param imageWidth If rendering to an image format (PNG or JPG) use this image width (in pixels) (optional, default to 1024)
     * @param landscape Set the document to landscape orientation (optional, default to false)
     * @param margin The document margin (in mm) (optional, default to 0)
     * @param marginBottom The document bottom margin (in mm) (optional, default to 0)
     * @param marginLeft The document left margin (in mm) (optional, default to 0)
     * @param marginRight The document right margin (in mm) (optional, default to 0)
     * @param marginTop The document top margin (in mm) (optional, default to 0)
     * @param pageHeight Set the PDF page height explicitly (in mm) (optional)
     * @param pageSize Set the document page size, can be one of: A0 - A9, B0 - B10, Comm10E, DLE or Letter (optional, default to A4)
     * @param pageWidth Set the PDF page width explicitly (in mm) (optional)
     * @param timeout Timeout in seconds. Give up if still trying to load the HTML content after this number of seconds (optional, default to 300)
     * @param title The document title (optional)
     * @param zoom Set the zoom factor when rendering the page (2.0 for double size, 0.5 for half size) (optional, default to 1)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Your API request has been rejected. Check error code for details </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> You have failed to authenticate </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> We messed up, sorry! Your request has caused a fatal exception </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> We messed up, sorry! Your request has caused an error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call hTMLRenderCall(String content, String css, Integer delay, String footer, String format, Boolean grayscale, String header, Boolean ignoreCertificateErrors, Integer imageHeight, Integer imageWidth, Boolean landscape, Double margin, Double marginBottom, Double marginLeft, Double marginRight, Double marginTop, Double pageHeight, String pageSize, Double pageWidth, Integer timeout, String title, Double zoom, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/html-render";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (content != null) {
            localVarFormParams.put("content", content);
        }

        if (css != null) {
            localVarFormParams.put("css", css);
        }

        if (delay != null) {
            localVarFormParams.put("delay", delay);
        }

        if (footer != null) {
            localVarFormParams.put("footer", footer);
        }

        if (format != null) {
            localVarFormParams.put("format", format);
        }

        if (grayscale != null) {
            localVarFormParams.put("grayscale", grayscale);
        }

        if (header != null) {
            localVarFormParams.put("header", header);
        }

        if (ignoreCertificateErrors != null) {
            localVarFormParams.put("ignore-certificate-errors", ignoreCertificateErrors);
        }

        if (imageHeight != null) {
            localVarFormParams.put("image-height", imageHeight);
        }

        if (imageWidth != null) {
            localVarFormParams.put("image-width", imageWidth);
        }

        if (landscape != null) {
            localVarFormParams.put("landscape", landscape);
        }

        if (margin != null) {
            localVarFormParams.put("margin", margin);
        }

        if (marginBottom != null) {
            localVarFormParams.put("margin-bottom", marginBottom);
        }

        if (marginLeft != null) {
            localVarFormParams.put("margin-left", marginLeft);
        }

        if (marginRight != null) {
            localVarFormParams.put("margin-right", marginRight);
        }

        if (marginTop != null) {
            localVarFormParams.put("margin-top", marginTop);
        }

        if (pageHeight != null) {
            localVarFormParams.put("page-height", pageHeight);
        }

        if (pageSize != null) {
            localVarFormParams.put("page-size", pageSize);
        }

        if (pageWidth != null) {
            localVarFormParams.put("page-width", pageWidth);
        }

        if (timeout != null) {
            localVarFormParams.put("timeout", timeout);
        }

        if (title != null) {
            localVarFormParams.put("title", title);
        }

        if (zoom != null) {
            localVarFormParams.put("zoom", zoom);
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/x-www-form-urlencoded"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api-key", "user-id" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call hTMLRenderValidateBeforeCall(String content, String css, Integer delay, String footer, String format, Boolean grayscale, String header, Boolean ignoreCertificateErrors, Integer imageHeight, Integer imageWidth, Boolean landscape, Double margin, Double marginBottom, Double marginLeft, Double marginRight, Double marginTop, Double pageHeight, String pageSize, Double pageWidth, Integer timeout, String title, Double zoom, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'content' is set
        if (content == null) {
            throw new ApiException("Missing the required parameter 'content' when calling hTMLRender(Async)");
        }

        return hTMLRenderCall(content, css, delay, footer, format, grayscale, header, ignoreCertificateErrors, imageHeight, imageWidth, landscape, margin, marginBottom, marginLeft, marginRight, marginTop, pageHeight, pageSize, pageWidth, timeout, title, zoom, _callback);

    }

    /**
     * HTML Render
     * Render HTML content to PDF, JPG or PNG
     * @param content The HTML content. This can be either a URL to load from, a file upload (multipart/form-data) or an HTML content string (required)
     * @param css Inject custom CSS into the HTML. e.g. &#39;body { background-color: red;}&#39; (optional)
     * @param delay Number of seconds to wait before rendering the page (can be useful for pages with animations etc) (optional, default to 0)
     * @param footer The footer HTML to insert into each page. The following dynamic tags are supported: {date}, {title}, {url}, {pageNumber}, {totalPages} (optional)
     * @param format Which format to output, available options are: PDF, PNG, JPG (optional, default to PDF)
     * @param grayscale Render the final document in grayscale (optional, default to false)
     * @param header The header HTML to insert into each page. The following dynamic tags are supported: {date}, {title}, {url}, {pageNumber}, {totalPages} (optional)
     * @param ignoreCertificateErrors Ignore any TLS/SSL certificate errors (optional, default to false)
     * @param imageHeight If rendering to an image format (PNG or JPG) use this image height (in pixels). The default is automatic which dynamically sets the image height based on the content (optional)
     * @param imageWidth If rendering to an image format (PNG or JPG) use this image width (in pixels) (optional, default to 1024)
     * @param landscape Set the document to landscape orientation (optional, default to false)
     * @param margin The document margin (in mm) (optional, default to 0)
     * @param marginBottom The document bottom margin (in mm) (optional, default to 0)
     * @param marginLeft The document left margin (in mm) (optional, default to 0)
     * @param marginRight The document right margin (in mm) (optional, default to 0)
     * @param marginTop The document top margin (in mm) (optional, default to 0)
     * @param pageHeight Set the PDF page height explicitly (in mm) (optional)
     * @param pageSize Set the document page size, can be one of: A0 - A9, B0 - B10, Comm10E, DLE or Letter (optional, default to A4)
     * @param pageWidth Set the PDF page width explicitly (in mm) (optional)
     * @param timeout Timeout in seconds. Give up if still trying to load the HTML content after this number of seconds (optional, default to 300)
     * @param title The document title (optional)
     * @param zoom Set the zoom factor when rendering the page (2.0 for double size, 0.5 for half size) (optional, default to 1)
     * @return File
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Your API request has been rejected. Check error code for details </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> You have failed to authenticate </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> We messed up, sorry! Your request has caused a fatal exception </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> We messed up, sorry! Your request has caused an error </td><td>  -  </td></tr>
     </table>
     */
    public File hTMLRender(String content, String css, Integer delay, String footer, String format, Boolean grayscale, String header, Boolean ignoreCertificateErrors, Integer imageHeight, Integer imageWidth, Boolean landscape, Double margin, Double marginBottom, Double marginLeft, Double marginRight, Double marginTop, Double pageHeight, String pageSize, Double pageWidth, Integer timeout, String title, Double zoom) throws ApiException {
        ApiResponse<File> localVarResp = hTMLRenderWithHttpInfo(content, css, delay, footer, format, grayscale, header, ignoreCertificateErrors, imageHeight, imageWidth, landscape, margin, marginBottom, marginLeft, marginRight, marginTop, pageHeight, pageSize, pageWidth, timeout, title, zoom);
        return localVarResp.getData();
    }

    /**
     * HTML Render
     * Render HTML content to PDF, JPG or PNG
     * @param content The HTML content. This can be either a URL to load from, a file upload (multipart/form-data) or an HTML content string (required)
     * @param css Inject custom CSS into the HTML. e.g. &#39;body { background-color: red;}&#39; (optional)
     * @param delay Number of seconds to wait before rendering the page (can be useful for pages with animations etc) (optional, default to 0)
     * @param footer The footer HTML to insert into each page. The following dynamic tags are supported: {date}, {title}, {url}, {pageNumber}, {totalPages} (optional)
     * @param format Which format to output, available options are: PDF, PNG, JPG (optional, default to PDF)
     * @param grayscale Render the final document in grayscale (optional, default to false)
     * @param header The header HTML to insert into each page. The following dynamic tags are supported: {date}, {title}, {url}, {pageNumber}, {totalPages} (optional)
     * @param ignoreCertificateErrors Ignore any TLS/SSL certificate errors (optional, default to false)
     * @param imageHeight If rendering to an image format (PNG or JPG) use this image height (in pixels). The default is automatic which dynamically sets the image height based on the content (optional)
     * @param imageWidth If rendering to an image format (PNG or JPG) use this image width (in pixels) (optional, default to 1024)
     * @param landscape Set the document to landscape orientation (optional, default to false)
     * @param margin The document margin (in mm) (optional, default to 0)
     * @param marginBottom The document bottom margin (in mm) (optional, default to 0)
     * @param marginLeft The document left margin (in mm) (optional, default to 0)
     * @param marginRight The document right margin (in mm) (optional, default to 0)
     * @param marginTop The document top margin (in mm) (optional, default to 0)
     * @param pageHeight Set the PDF page height explicitly (in mm) (optional)
     * @param pageSize Set the document page size, can be one of: A0 - A9, B0 - B10, Comm10E, DLE or Letter (optional, default to A4)
     * @param pageWidth Set the PDF page width explicitly (in mm) (optional)
     * @param timeout Timeout in seconds. Give up if still trying to load the HTML content after this number of seconds (optional, default to 300)
     * @param title The document title (optional)
     * @param zoom Set the zoom factor when rendering the page (2.0 for double size, 0.5 for half size) (optional, default to 1)
     * @return ApiResponse&lt;File&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Your API request has been rejected. Check error code for details </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> You have failed to authenticate </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> We messed up, sorry! Your request has caused a fatal exception </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> We messed up, sorry! Your request has caused an error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<File> hTMLRenderWithHttpInfo(String content, String css, Integer delay, String footer, String format, Boolean grayscale, String header, Boolean ignoreCertificateErrors, Integer imageHeight, Integer imageWidth, Boolean landscape, Double margin, Double marginBottom, Double marginLeft, Double marginRight, Double marginTop, Double pageHeight, String pageSize, Double pageWidth, Integer timeout, String title, Double zoom) throws ApiException {
        okhttp3.Call localVarCall = hTMLRenderValidateBeforeCall(content, css, delay, footer, format, grayscale, header, ignoreCertificateErrors, imageHeight, imageWidth, landscape, margin, marginBottom, marginLeft, marginRight, marginTop, pageHeight, pageSize, pageWidth, timeout, title, zoom, null);
        Type localVarReturnType = new TypeToken<File>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * HTML Render (asynchronously)
     * Render HTML content to PDF, JPG or PNG
     * @param content The HTML content. This can be either a URL to load from, a file upload (multipart/form-data) or an HTML content string (required)
     * @param css Inject custom CSS into the HTML. e.g. &#39;body { background-color: red;}&#39; (optional)
     * @param delay Number of seconds to wait before rendering the page (can be useful for pages with animations etc) (optional, default to 0)
     * @param footer The footer HTML to insert into each page. The following dynamic tags are supported: {date}, {title}, {url}, {pageNumber}, {totalPages} (optional)
     * @param format Which format to output, available options are: PDF, PNG, JPG (optional, default to PDF)
     * @param grayscale Render the final document in grayscale (optional, default to false)
     * @param header The header HTML to insert into each page. The following dynamic tags are supported: {date}, {title}, {url}, {pageNumber}, {totalPages} (optional)
     * @param ignoreCertificateErrors Ignore any TLS/SSL certificate errors (optional, default to false)
     * @param imageHeight If rendering to an image format (PNG or JPG) use this image height (in pixels). The default is automatic which dynamically sets the image height based on the content (optional)
     * @param imageWidth If rendering to an image format (PNG or JPG) use this image width (in pixels) (optional, default to 1024)
     * @param landscape Set the document to landscape orientation (optional, default to false)
     * @param margin The document margin (in mm) (optional, default to 0)
     * @param marginBottom The document bottom margin (in mm) (optional, default to 0)
     * @param marginLeft The document left margin (in mm) (optional, default to 0)
     * @param marginRight The document right margin (in mm) (optional, default to 0)
     * @param marginTop The document top margin (in mm) (optional, default to 0)
     * @param pageHeight Set the PDF page height explicitly (in mm) (optional)
     * @param pageSize Set the document page size, can be one of: A0 - A9, B0 - B10, Comm10E, DLE or Letter (optional, default to A4)
     * @param pageWidth Set the PDF page width explicitly (in mm) (optional)
     * @param timeout Timeout in seconds. Give up if still trying to load the HTML content after this number of seconds (optional, default to 300)
     * @param title The document title (optional)
     * @param zoom Set the zoom factor when rendering the page (2.0 for double size, 0.5 for half size) (optional, default to 1)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Your API request has been rejected. Check error code for details </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> You have failed to authenticate </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> We messed up, sorry! Your request has caused a fatal exception </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> We messed up, sorry! Your request has caused an error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call hTMLRenderAsync(String content, String css, Integer delay, String footer, String format, Boolean grayscale, String header, Boolean ignoreCertificateErrors, Integer imageHeight, Integer imageWidth, Boolean landscape, Double margin, Double marginBottom, Double marginLeft, Double marginRight, Double marginTop, Double pageHeight, String pageSize, Double pageWidth, Integer timeout, String title, Double zoom, final ApiCallback<File> _callback) throws ApiException {

        okhttp3.Call localVarCall = hTMLRenderValidateBeforeCall(content, css, delay, footer, format, grayscale, header, ignoreCertificateErrors, imageHeight, imageWidth, landscape, margin, marginBottom, marginLeft, marginRight, marginTop, pageHeight, pageSize, pageWidth, timeout, title, zoom, _callback);
        Type localVarReturnType = new TypeToken<File>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for imageResize
     * @param imageUrl The URL or Base64 encoded Data URL for the source image. You can also upload an image file directly using multipart/form-data (required)
     * @param width The width to resize to (in px) (required)
     * @param bgColor The image background color in hexadecimal notation (e.g. #0000ff). For PNG output the special value of &#39;transparent&#39; can also be used. For JPG output the default is black (#000000) (optional, default to transparent)
     * @param format The output image format, can be either png or jpg (optional, default to png)
     * @param height The height to resize to (in px). If you don&#39;t set this field then the height will be automatic based on the requested width and image aspect ratio (optional)
     * @param resizeMode The resize mode to use, we support 3 main resizing modes: &lt;ul&gt; &lt;li&gt;&lt;b&gt;scale&lt;/b&gt;&lt;br&gt;Resize to within the width and height specified while preserving aspect ratio. In this mode the width or height will be automatically adjusted to fit the aspect ratio&lt;/li&gt; &lt;li&gt;&lt;b&gt;pad&lt;/b&gt;&lt;br&gt;Resize to exactly the width and height specified while preserving aspect ratio and pad any space left over. Any padded space will be filled in with the &#39;bg-color&#39; value&lt;/li&gt; &lt;li&gt;&lt;b&gt;crop&lt;/b&gt;&lt;br&gt;Resize to exactly the width and height specified while preserving aspect ratio and crop any space which fall outside the area. The cropping window is centered on the original image&lt;/li&gt; &lt;/ul&gt; (optional, default to scale)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Your API request has been rejected. Check error code for details </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> You have failed to authenticate </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> We messed up, sorry! Your request has caused a fatal exception </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> We messed up, sorry! Your request has caused an error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call imageResizeCall(String imageUrl, Integer width, String bgColor, String format, Integer height, String resizeMode, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/image-resize";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (bgColor != null) {
            localVarFormParams.put("bg-color", bgColor);
        }

        if (format != null) {
            localVarFormParams.put("format", format);
        }

        if (height != null) {
            localVarFormParams.put("height", height);
        }

        if (imageUrl != null) {
            localVarFormParams.put("image-url", imageUrl);
        }

        if (resizeMode != null) {
            localVarFormParams.put("resize-mode", resizeMode);
        }

        if (width != null) {
            localVarFormParams.put("width", width);
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/x-www-form-urlencoded"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api-key", "user-id" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call imageResizeValidateBeforeCall(String imageUrl, Integer width, String bgColor, String format, Integer height, String resizeMode, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'imageUrl' is set
        if (imageUrl == null) {
            throw new ApiException("Missing the required parameter 'imageUrl' when calling imageResize(Async)");
        }

        // verify the required parameter 'width' is set
        if (width == null) {
            throw new ApiException("Missing the required parameter 'width' when calling imageResize(Async)");
        }

        return imageResizeCall(imageUrl, width, bgColor, format, height, resizeMode, _callback);

    }

    /**
     * Image Resize
     * Resize an image and output as either JPEG or PNG
     * @param imageUrl The URL or Base64 encoded Data URL for the source image. You can also upload an image file directly using multipart/form-data (required)
     * @param width The width to resize to (in px) (required)
     * @param bgColor The image background color in hexadecimal notation (e.g. #0000ff). For PNG output the special value of &#39;transparent&#39; can also be used. For JPG output the default is black (#000000) (optional, default to transparent)
     * @param format The output image format, can be either png or jpg (optional, default to png)
     * @param height The height to resize to (in px). If you don&#39;t set this field then the height will be automatic based on the requested width and image aspect ratio (optional)
     * @param resizeMode The resize mode to use, we support 3 main resizing modes: &lt;ul&gt; &lt;li&gt;&lt;b&gt;scale&lt;/b&gt;&lt;br&gt;Resize to within the width and height specified while preserving aspect ratio. In this mode the width or height will be automatically adjusted to fit the aspect ratio&lt;/li&gt; &lt;li&gt;&lt;b&gt;pad&lt;/b&gt;&lt;br&gt;Resize to exactly the width and height specified while preserving aspect ratio and pad any space left over. Any padded space will be filled in with the &#39;bg-color&#39; value&lt;/li&gt; &lt;li&gt;&lt;b&gt;crop&lt;/b&gt;&lt;br&gt;Resize to exactly the width and height specified while preserving aspect ratio and crop any space which fall outside the area. The cropping window is centered on the original image&lt;/li&gt; &lt;/ul&gt; (optional, default to scale)
     * @return File
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Your API request has been rejected. Check error code for details </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> You have failed to authenticate </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> We messed up, sorry! Your request has caused a fatal exception </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> We messed up, sorry! Your request has caused an error </td><td>  -  </td></tr>
     </table>
     */
    public File imageResize(String imageUrl, Integer width, String bgColor, String format, Integer height, String resizeMode) throws ApiException {
        ApiResponse<File> localVarResp = imageResizeWithHttpInfo(imageUrl, width, bgColor, format, height, resizeMode);
        return localVarResp.getData();
    }

    /**
     * Image Resize
     * Resize an image and output as either JPEG or PNG
     * @param imageUrl The URL or Base64 encoded Data URL for the source image. You can also upload an image file directly using multipart/form-data (required)
     * @param width The width to resize to (in px) (required)
     * @param bgColor The image background color in hexadecimal notation (e.g. #0000ff). For PNG output the special value of &#39;transparent&#39; can also be used. For JPG output the default is black (#000000) (optional, default to transparent)
     * @param format The output image format, can be either png or jpg (optional, default to png)
     * @param height The height to resize to (in px). If you don&#39;t set this field then the height will be automatic based on the requested width and image aspect ratio (optional)
     * @param resizeMode The resize mode to use, we support 3 main resizing modes: &lt;ul&gt; &lt;li&gt;&lt;b&gt;scale&lt;/b&gt;&lt;br&gt;Resize to within the width and height specified while preserving aspect ratio. In this mode the width or height will be automatically adjusted to fit the aspect ratio&lt;/li&gt; &lt;li&gt;&lt;b&gt;pad&lt;/b&gt;&lt;br&gt;Resize to exactly the width and height specified while preserving aspect ratio and pad any space left over. Any padded space will be filled in with the &#39;bg-color&#39; value&lt;/li&gt; &lt;li&gt;&lt;b&gt;crop&lt;/b&gt;&lt;br&gt;Resize to exactly the width and height specified while preserving aspect ratio and crop any space which fall outside the area. The cropping window is centered on the original image&lt;/li&gt; &lt;/ul&gt; (optional, default to scale)
     * @return ApiResponse&lt;File&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Your API request has been rejected. Check error code for details </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> You have failed to authenticate </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> We messed up, sorry! Your request has caused a fatal exception </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> We messed up, sorry! Your request has caused an error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<File> imageResizeWithHttpInfo(String imageUrl, Integer width, String bgColor, String format, Integer height, String resizeMode) throws ApiException {
        okhttp3.Call localVarCall = imageResizeValidateBeforeCall(imageUrl, width, bgColor, format, height, resizeMode, null);
        Type localVarReturnType = new TypeToken<File>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Image Resize (asynchronously)
     * Resize an image and output as either JPEG or PNG
     * @param imageUrl The URL or Base64 encoded Data URL for the source image. You can also upload an image file directly using multipart/form-data (required)
     * @param width The width to resize to (in px) (required)
     * @param bgColor The image background color in hexadecimal notation (e.g. #0000ff). For PNG output the special value of &#39;transparent&#39; can also be used. For JPG output the default is black (#000000) (optional, default to transparent)
     * @param format The output image format, can be either png or jpg (optional, default to png)
     * @param height The height to resize to (in px). If you don&#39;t set this field then the height will be automatic based on the requested width and image aspect ratio (optional)
     * @param resizeMode The resize mode to use, we support 3 main resizing modes: &lt;ul&gt; &lt;li&gt;&lt;b&gt;scale&lt;/b&gt;&lt;br&gt;Resize to within the width and height specified while preserving aspect ratio. In this mode the width or height will be automatically adjusted to fit the aspect ratio&lt;/li&gt; &lt;li&gt;&lt;b&gt;pad&lt;/b&gt;&lt;br&gt;Resize to exactly the width and height specified while preserving aspect ratio and pad any space left over. Any padded space will be filled in with the &#39;bg-color&#39; value&lt;/li&gt; &lt;li&gt;&lt;b&gt;crop&lt;/b&gt;&lt;br&gt;Resize to exactly the width and height specified while preserving aspect ratio and crop any space which fall outside the area. The cropping window is centered on the original image&lt;/li&gt; &lt;/ul&gt; (optional, default to scale)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Your API request has been rejected. Check error code for details </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> You have failed to authenticate </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> We messed up, sorry! Your request has caused a fatal exception </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> We messed up, sorry! Your request has caused an error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call imageResizeAsync(String imageUrl, Integer width, String bgColor, String format, Integer height, String resizeMode, final ApiCallback<File> _callback) throws ApiException {

        okhttp3.Call localVarCall = imageResizeValidateBeforeCall(imageUrl, width, bgColor, format, height, resizeMode, _callback);
        Type localVarReturnType = new TypeToken<File>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for imageWatermark
     * @param imageUrl The URL or Base64 encoded Data URL for the source image. You can also upload an image file directly using multipart/form-data (required)
     * @param watermarkUrl The URL or Base64 encoded Data URL for the watermark image. You can also upload an image file directly using multipart/form-data (required)
     * @param bgColor The image background color in hexadecimal notation (e.g. #0000ff). For PNG output the special value of &#39;transparent&#39; can also be used. For JPG output the default is black (#000000) (optional, default to transparent)
     * @param format The output image format, can be either png or jpg (optional, default to png)
     * @param height If set resize the resulting image to this height (in px) (optional)
     * @param opacity The opacity of the watermark (0 to 100) (optional, default to 50)
     * @param position The position of the watermark image, possible values are: &lt;br&gt;center, top-left, top-center, top-right, bottom-left, bottom-center, bottom-right (optional, default to center)
     * @param resizeMode The resize mode to use, we support 3 main resizing modes: &lt;ul&gt; &lt;li&gt;&lt;b&gt;scale&lt;/b&gt;&lt;br&gt;Resize to within the width and height specified while preserving aspect ratio. In this mode the width or height will be automatically adjusted to fit the aspect ratio&lt;/li&gt; &lt;li&gt;&lt;b&gt;pad&lt;/b&gt;&lt;br&gt;Resize to exactly the width and height specified while preserving aspect ratio and pad any space left over. Any padded space will be filled in with the &#39;bg-color&#39; value&lt;/li&gt; &lt;li&gt;&lt;b&gt;crop&lt;/b&gt;&lt;br&gt;Resize to exactly the width and height specified while preserving aspect ratio and crop any space which fall outside the area. The cropping window is centered on the original image&lt;/li&gt; &lt;/ul&gt; (optional, default to scale)
     * @param width If set resize the resulting image to this width (in px) (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Your API request has been rejected. Check error code for details </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> You have failed to authenticate </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> We messed up, sorry! Your request has caused a fatal exception </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> We messed up, sorry! Your request has caused an error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call imageWatermarkCall(String imageUrl, String watermarkUrl, String bgColor, String format, Integer height, Integer opacity, String position, String resizeMode, Integer width, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/image-watermark";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (bgColor != null) {
            localVarFormParams.put("bg-color", bgColor);
        }

        if (format != null) {
            localVarFormParams.put("format", format);
        }

        if (height != null) {
            localVarFormParams.put("height", height);
        }

        if (imageUrl != null) {
            localVarFormParams.put("image-url", imageUrl);
        }

        if (opacity != null) {
            localVarFormParams.put("opacity", opacity);
        }

        if (position != null) {
            localVarFormParams.put("position", position);
        }

        if (resizeMode != null) {
            localVarFormParams.put("resize-mode", resizeMode);
        }

        if (watermarkUrl != null) {
            localVarFormParams.put("watermark-url", watermarkUrl);
        }

        if (width != null) {
            localVarFormParams.put("width", width);
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/x-www-form-urlencoded"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api-key", "user-id" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call imageWatermarkValidateBeforeCall(String imageUrl, String watermarkUrl, String bgColor, String format, Integer height, Integer opacity, String position, String resizeMode, Integer width, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'imageUrl' is set
        if (imageUrl == null) {
            throw new ApiException("Missing the required parameter 'imageUrl' when calling imageWatermark(Async)");
        }

        // verify the required parameter 'watermarkUrl' is set
        if (watermarkUrl == null) {
            throw new ApiException("Missing the required parameter 'watermarkUrl' when calling imageWatermark(Async)");
        }

        return imageWatermarkCall(imageUrl, watermarkUrl, bgColor, format, height, opacity, position, resizeMode, width, _callback);

    }

    /**
     * Image Watermark
     * Watermark one image with another image
     * @param imageUrl The URL or Base64 encoded Data URL for the source image. You can also upload an image file directly using multipart/form-data (required)
     * @param watermarkUrl The URL or Base64 encoded Data URL for the watermark image. You can also upload an image file directly using multipart/form-data (required)
     * @param bgColor The image background color in hexadecimal notation (e.g. #0000ff). For PNG output the special value of &#39;transparent&#39; can also be used. For JPG output the default is black (#000000) (optional, default to transparent)
     * @param format The output image format, can be either png or jpg (optional, default to png)
     * @param height If set resize the resulting image to this height (in px) (optional)
     * @param opacity The opacity of the watermark (0 to 100) (optional, default to 50)
     * @param position The position of the watermark image, possible values are: &lt;br&gt;center, top-left, top-center, top-right, bottom-left, bottom-center, bottom-right (optional, default to center)
     * @param resizeMode The resize mode to use, we support 3 main resizing modes: &lt;ul&gt; &lt;li&gt;&lt;b&gt;scale&lt;/b&gt;&lt;br&gt;Resize to within the width and height specified while preserving aspect ratio. In this mode the width or height will be automatically adjusted to fit the aspect ratio&lt;/li&gt; &lt;li&gt;&lt;b&gt;pad&lt;/b&gt;&lt;br&gt;Resize to exactly the width and height specified while preserving aspect ratio and pad any space left over. Any padded space will be filled in with the &#39;bg-color&#39; value&lt;/li&gt; &lt;li&gt;&lt;b&gt;crop&lt;/b&gt;&lt;br&gt;Resize to exactly the width and height specified while preserving aspect ratio and crop any space which fall outside the area. The cropping window is centered on the original image&lt;/li&gt; &lt;/ul&gt; (optional, default to scale)
     * @param width If set resize the resulting image to this width (in px) (optional)
     * @return File
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Your API request has been rejected. Check error code for details </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> You have failed to authenticate </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> We messed up, sorry! Your request has caused a fatal exception </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> We messed up, sorry! Your request has caused an error </td><td>  -  </td></tr>
     </table>
     */
    public File imageWatermark(String imageUrl, String watermarkUrl, String bgColor, String format, Integer height, Integer opacity, String position, String resizeMode, Integer width) throws ApiException {
        ApiResponse<File> localVarResp = imageWatermarkWithHttpInfo(imageUrl, watermarkUrl, bgColor, format, height, opacity, position, resizeMode, width);
        return localVarResp.getData();
    }

    /**
     * Image Watermark
     * Watermark one image with another image
     * @param imageUrl The URL or Base64 encoded Data URL for the source image. You can also upload an image file directly using multipart/form-data (required)
     * @param watermarkUrl The URL or Base64 encoded Data URL for the watermark image. You can also upload an image file directly using multipart/form-data (required)
     * @param bgColor The image background color in hexadecimal notation (e.g. #0000ff). For PNG output the special value of &#39;transparent&#39; can also be used. For JPG output the default is black (#000000) (optional, default to transparent)
     * @param format The output image format, can be either png or jpg (optional, default to png)
     * @param height If set resize the resulting image to this height (in px) (optional)
     * @param opacity The opacity of the watermark (0 to 100) (optional, default to 50)
     * @param position The position of the watermark image, possible values are: &lt;br&gt;center, top-left, top-center, top-right, bottom-left, bottom-center, bottom-right (optional, default to center)
     * @param resizeMode The resize mode to use, we support 3 main resizing modes: &lt;ul&gt; &lt;li&gt;&lt;b&gt;scale&lt;/b&gt;&lt;br&gt;Resize to within the width and height specified while preserving aspect ratio. In this mode the width or height will be automatically adjusted to fit the aspect ratio&lt;/li&gt; &lt;li&gt;&lt;b&gt;pad&lt;/b&gt;&lt;br&gt;Resize to exactly the width and height specified while preserving aspect ratio and pad any space left over. Any padded space will be filled in with the &#39;bg-color&#39; value&lt;/li&gt; &lt;li&gt;&lt;b&gt;crop&lt;/b&gt;&lt;br&gt;Resize to exactly the width and height specified while preserving aspect ratio and crop any space which fall outside the area. The cropping window is centered on the original image&lt;/li&gt; &lt;/ul&gt; (optional, default to scale)
     * @param width If set resize the resulting image to this width (in px) (optional)
     * @return ApiResponse&lt;File&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Your API request has been rejected. Check error code for details </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> You have failed to authenticate </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> We messed up, sorry! Your request has caused a fatal exception </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> We messed up, sorry! Your request has caused an error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<File> imageWatermarkWithHttpInfo(String imageUrl, String watermarkUrl, String bgColor, String format, Integer height, Integer opacity, String position, String resizeMode, Integer width) throws ApiException {
        okhttp3.Call localVarCall = imageWatermarkValidateBeforeCall(imageUrl, watermarkUrl, bgColor, format, height, opacity, position, resizeMode, width, null);
        Type localVarReturnType = new TypeToken<File>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Image Watermark (asynchronously)
     * Watermark one image with another image
     * @param imageUrl The URL or Base64 encoded Data URL for the source image. You can also upload an image file directly using multipart/form-data (required)
     * @param watermarkUrl The URL or Base64 encoded Data URL for the watermark image. You can also upload an image file directly using multipart/form-data (required)
     * @param bgColor The image background color in hexadecimal notation (e.g. #0000ff). For PNG output the special value of &#39;transparent&#39; can also be used. For JPG output the default is black (#000000) (optional, default to transparent)
     * @param format The output image format, can be either png or jpg (optional, default to png)
     * @param height If set resize the resulting image to this height (in px) (optional)
     * @param opacity The opacity of the watermark (0 to 100) (optional, default to 50)
     * @param position The position of the watermark image, possible values are: &lt;br&gt;center, top-left, top-center, top-right, bottom-left, bottom-center, bottom-right (optional, default to center)
     * @param resizeMode The resize mode to use, we support 3 main resizing modes: &lt;ul&gt; &lt;li&gt;&lt;b&gt;scale&lt;/b&gt;&lt;br&gt;Resize to within the width and height specified while preserving aspect ratio. In this mode the width or height will be automatically adjusted to fit the aspect ratio&lt;/li&gt; &lt;li&gt;&lt;b&gt;pad&lt;/b&gt;&lt;br&gt;Resize to exactly the width and height specified while preserving aspect ratio and pad any space left over. Any padded space will be filled in with the &#39;bg-color&#39; value&lt;/li&gt; &lt;li&gt;&lt;b&gt;crop&lt;/b&gt;&lt;br&gt;Resize to exactly the width and height specified while preserving aspect ratio and crop any space which fall outside the area. The cropping window is centered on the original image&lt;/li&gt; &lt;/ul&gt; (optional, default to scale)
     * @param width If set resize the resulting image to this width (in px) (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Your API request has been rejected. Check error code for details </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> You have failed to authenticate </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> We messed up, sorry! Your request has caused a fatal exception </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> We messed up, sorry! Your request has caused an error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call imageWatermarkAsync(String imageUrl, String watermarkUrl, String bgColor, String format, Integer height, Integer opacity, String position, String resizeMode, Integer width, final ApiCallback<File> _callback) throws ApiException {

        okhttp3.Call localVarCall = imageWatermarkValidateBeforeCall(imageUrl, watermarkUrl, bgColor, format, height, opacity, position, resizeMode, width, _callback);
        Type localVarReturnType = new TypeToken<File>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for qRCode
     * @param content The content to encode into the QR code (e.g. a URL or a phone number) (required)
     * @param bgColor The QR code background color (optional, default to #ffffff)
     * @param fgColor The QR code foreground color (optional, default to #000000)
     * @param height The height of the QR code (in px) (optional, default to 256)
     * @param width The width of the QR code (in px) (optional, default to 256)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Your API request has been rejected. Check error code for details </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> You have failed to authenticate </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> We messed up, sorry! Your request has caused a fatal exception </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> We messed up, sorry! Your request has caused an error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call qRCodeCall(String content, String bgColor, String fgColor, Integer height, Integer width, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/qr-code";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (bgColor != null) {
            localVarFormParams.put("bg-color", bgColor);
        }

        if (content != null) {
            localVarFormParams.put("content", content);
        }

        if (fgColor != null) {
            localVarFormParams.put("fg-color", fgColor);
        }

        if (height != null) {
            localVarFormParams.put("height", height);
        }

        if (width != null) {
            localVarFormParams.put("width", width);
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/x-www-form-urlencoded"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api-key", "user-id" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call qRCodeValidateBeforeCall(String content, String bgColor, String fgColor, Integer height, Integer width, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'content' is set
        if (content == null) {
            throw new ApiException("Missing the required parameter 'content' when calling qRCode(Async)");
        }

        return qRCodeCall(content, bgColor, fgColor, height, width, _callback);

    }

    /**
     * QR Code
     * Generate a QR code as a PNG image
     * @param content The content to encode into the QR code (e.g. a URL or a phone number) (required)
     * @param bgColor The QR code background color (optional, default to #ffffff)
     * @param fgColor The QR code foreground color (optional, default to #000000)
     * @param height The height of the QR code (in px) (optional, default to 256)
     * @param width The width of the QR code (in px) (optional, default to 256)
     * @return File
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Your API request has been rejected. Check error code for details </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> You have failed to authenticate </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> We messed up, sorry! Your request has caused a fatal exception </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> We messed up, sorry! Your request has caused an error </td><td>  -  </td></tr>
     </table>
     */
    public File qRCode(String content, String bgColor, String fgColor, Integer height, Integer width) throws ApiException {
        ApiResponse<File> localVarResp = qRCodeWithHttpInfo(content, bgColor, fgColor, height, width);
        return localVarResp.getData();
    }

    /**
     * QR Code
     * Generate a QR code as a PNG image
     * @param content The content to encode into the QR code (e.g. a URL or a phone number) (required)
     * @param bgColor The QR code background color (optional, default to #ffffff)
     * @param fgColor The QR code foreground color (optional, default to #000000)
     * @param height The height of the QR code (in px) (optional, default to 256)
     * @param width The width of the QR code (in px) (optional, default to 256)
     * @return ApiResponse&lt;File&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Your API request has been rejected. Check error code for details </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> You have failed to authenticate </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> We messed up, sorry! Your request has caused a fatal exception </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> We messed up, sorry! Your request has caused an error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<File> qRCodeWithHttpInfo(String content, String bgColor, String fgColor, Integer height, Integer width) throws ApiException {
        okhttp3.Call localVarCall = qRCodeValidateBeforeCall(content, bgColor, fgColor, height, width, null);
        Type localVarReturnType = new TypeToken<File>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * QR Code (asynchronously)
     * Generate a QR code as a PNG image
     * @param content The content to encode into the QR code (e.g. a URL or a phone number) (required)
     * @param bgColor The QR code background color (optional, default to #ffffff)
     * @param fgColor The QR code foreground color (optional, default to #000000)
     * @param height The height of the QR code (in px) (optional, default to 256)
     * @param width The width of the QR code (in px) (optional, default to 256)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Your API request has been rejected. Check error code for details </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> You have failed to authenticate </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> We messed up, sorry! Your request has caused a fatal exception </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> We messed up, sorry! Your request has caused an error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call qRCodeAsync(String content, String bgColor, String fgColor, Integer height, Integer width, final ApiCallback<File> _callback) throws ApiException {

        okhttp3.Call localVarCall = qRCodeValidateBeforeCall(content, bgColor, fgColor, height, width, _callback);
        Type localVarReturnType = new TypeToken<File>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
