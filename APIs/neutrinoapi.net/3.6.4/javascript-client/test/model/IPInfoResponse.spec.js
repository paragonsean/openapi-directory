/**
 * Neutrino API
 * The general-purpose API
 *
 * The version of the OpenAPI document: 3.6.4
 * Contact: ops@neutrinoapi.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.NeutrinoApi);
  }
}(this, function(expect, NeutrinoApi) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new NeutrinoApi.IPInfoResponse();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('IPInfoResponse', function() {
    it('should create an instance of IPInfoResponse', function() {
      // uncomment below and update the code to test IPInfoResponse
      //var instance = new NeutrinoApi.IPInfoResponse();
      //expect(instance).to.be.a(NeutrinoApi.IPInfoResponse);
    });

    it('should have the property city (base name: "city")', function() {
      // uncomment below and update the code to test the property city
      //var instance = new NeutrinoApi.IPInfoResponse();
      //expect(instance).to.be();
    });

    it('should have the property continentCode (base name: "continent-code")', function() {
      // uncomment below and update the code to test the property continentCode
      //var instance = new NeutrinoApi.IPInfoResponse();
      //expect(instance).to.be();
    });

    it('should have the property country (base name: "country")', function() {
      // uncomment below and update the code to test the property country
      //var instance = new NeutrinoApi.IPInfoResponse();
      //expect(instance).to.be();
    });

    it('should have the property countryCode (base name: "country-code")', function() {
      // uncomment below and update the code to test the property countryCode
      //var instance = new NeutrinoApi.IPInfoResponse();
      //expect(instance).to.be();
    });

    it('should have the property countryCode3 (base name: "country-code3")', function() {
      // uncomment below and update the code to test the property countryCode3
      //var instance = new NeutrinoApi.IPInfoResponse();
      //expect(instance).to.be();
    });

    it('should have the property currencyCode (base name: "currency-code")', function() {
      // uncomment below and update the code to test the property currencyCode
      //var instance = new NeutrinoApi.IPInfoResponse();
      //expect(instance).to.be();
    });

    it('should have the property hostDomain (base name: "host-domain")', function() {
      // uncomment below and update the code to test the property hostDomain
      //var instance = new NeutrinoApi.IPInfoResponse();
      //expect(instance).to.be();
    });

    it('should have the property hostname (base name: "hostname")', function() {
      // uncomment below and update the code to test the property hostname
      //var instance = new NeutrinoApi.IPInfoResponse();
      //expect(instance).to.be();
    });

    it('should have the property ip (base name: "ip")', function() {
      // uncomment below and update the code to test the property ip
      //var instance = new NeutrinoApi.IPInfoResponse();
      //expect(instance).to.be();
    });

    it('should have the property isBogon (base name: "is-bogon")', function() {
      // uncomment below and update the code to test the property isBogon
      //var instance = new NeutrinoApi.IPInfoResponse();
      //expect(instance).to.be();
    });

    it('should have the property isV4Mapped (base name: "is-v4-mapped")', function() {
      // uncomment below and update the code to test the property isV4Mapped
      //var instance = new NeutrinoApi.IPInfoResponse();
      //expect(instance).to.be();
    });

    it('should have the property isV6 (base name: "is-v6")', function() {
      // uncomment below and update the code to test the property isV6
      //var instance = new NeutrinoApi.IPInfoResponse();
      //expect(instance).to.be();
    });

    it('should have the property latitude (base name: "latitude")', function() {
      // uncomment below and update the code to test the property latitude
      //var instance = new NeutrinoApi.IPInfoResponse();
      //expect(instance).to.be();
    });

    it('should have the property longitude (base name: "longitude")', function() {
      // uncomment below and update the code to test the property longitude
      //var instance = new NeutrinoApi.IPInfoResponse();
      //expect(instance).to.be();
    });

    it('should have the property region (base name: "region")', function() {
      // uncomment below and update the code to test the property region
      //var instance = new NeutrinoApi.IPInfoResponse();
      //expect(instance).to.be();
    });

    it('should have the property regionCode (base name: "region-code")', function() {
      // uncomment below and update the code to test the property regionCode
      //var instance = new NeutrinoApi.IPInfoResponse();
      //expect(instance).to.be();
    });

    it('should have the property timezone (base name: "timezone")', function() {
      // uncomment below and update the code to test the property timezone
      //var instance = new NeutrinoApi.IPInfoResponse();
      //expect(instance).to.be();
    });

    it('should have the property valid (base name: "valid")', function() {
      // uncomment below and update the code to test the property valid
      //var instance = new NeutrinoApi.IPInfoResponse();
      //expect(instance).to.be();
    });

  });

}));
