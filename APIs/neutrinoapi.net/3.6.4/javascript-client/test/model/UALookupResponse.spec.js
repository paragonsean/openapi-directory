/**
 * Neutrino API
 * The general-purpose API
 *
 * The version of the OpenAPI document: 3.6.4
 * Contact: ops@neutrinoapi.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.NeutrinoApi);
  }
}(this, function(expect, NeutrinoApi) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new NeutrinoApi.UALookupResponse();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('UALookupResponse', function() {
    it('should create an instance of UALookupResponse', function() {
      // uncomment below and update the code to test UALookupResponse
      //var instance = new NeutrinoApi.UALookupResponse();
      //expect(instance).to.be.a(NeutrinoApi.UALookupResponse);
    });

    it('should have the property browserEngine (base name: "browser-engine")', function() {
      // uncomment below and update the code to test the property browserEngine
      //var instance = new NeutrinoApi.UALookupResponse();
      //expect(instance).to.be();
    });

    it('should have the property browserRelease (base name: "browser-release")', function() {
      // uncomment below and update the code to test the property browserRelease
      //var instance = new NeutrinoApi.UALookupResponse();
      //expect(instance).to.be();
    });

    it('should have the property deviceBrand (base name: "device-brand")', function() {
      // uncomment below and update the code to test the property deviceBrand
      //var instance = new NeutrinoApi.UALookupResponse();
      //expect(instance).to.be();
    });

    it('should have the property deviceHeightPx (base name: "device-height-px")', function() {
      // uncomment below and update the code to test the property deviceHeightPx
      //var instance = new NeutrinoApi.UALookupResponse();
      //expect(instance).to.be();
    });

    it('should have the property deviceModel (base name: "device-model")', function() {
      // uncomment below and update the code to test the property deviceModel
      //var instance = new NeutrinoApi.UALookupResponse();
      //expect(instance).to.be();
    });

    it('should have the property deviceModelCode (base name: "device-model-code")', function() {
      // uncomment below and update the code to test the property deviceModelCode
      //var instance = new NeutrinoApi.UALookupResponse();
      //expect(instance).to.be();
    });

    it('should have the property devicePixelRatio (base name: "device-pixel-ratio")', function() {
      // uncomment below and update the code to test the property devicePixelRatio
      //var instance = new NeutrinoApi.UALookupResponse();
      //expect(instance).to.be();
    });

    it('should have the property devicePpi (base name: "device-ppi")', function() {
      // uncomment below and update the code to test the property devicePpi
      //var instance = new NeutrinoApi.UALookupResponse();
      //expect(instance).to.be();
    });

    it('should have the property devicePrice (base name: "device-price")', function() {
      // uncomment below and update the code to test the property devicePrice
      //var instance = new NeutrinoApi.UALookupResponse();
      //expect(instance).to.be();
    });

    it('should have the property deviceRelease (base name: "device-release")', function() {
      // uncomment below and update the code to test the property deviceRelease
      //var instance = new NeutrinoApi.UALookupResponse();
      //expect(instance).to.be();
    });

    it('should have the property deviceResolution (base name: "device-resolution")', function() {
      // uncomment below and update the code to test the property deviceResolution
      //var instance = new NeutrinoApi.UALookupResponse();
      //expect(instance).to.be();
    });

    it('should have the property deviceWidthPx (base name: "device-width-px")', function() {
      // uncomment below and update the code to test the property deviceWidthPx
      //var instance = new NeutrinoApi.UALookupResponse();
      //expect(instance).to.be();
    });

    it('should have the property isMobile (base name: "is-mobile")', function() {
      // uncomment below and update the code to test the property isMobile
      //var instance = new NeutrinoApi.UALookupResponse();
      //expect(instance).to.be();
    });

    it('should have the property isWebview (base name: "is-webview")', function() {
      // uncomment below and update the code to test the property isWebview
      //var instance = new NeutrinoApi.UALookupResponse();
      //expect(instance).to.be();
    });

    it('should have the property name (base name: "name")', function() {
      // uncomment below and update the code to test the property name
      //var instance = new NeutrinoApi.UALookupResponse();
      //expect(instance).to.be();
    });

    it('should have the property os (base name: "os")', function() {
      // uncomment below and update the code to test the property os
      //var instance = new NeutrinoApi.UALookupResponse();
      //expect(instance).to.be();
    });

    it('should have the property osFamily (base name: "os-family")', function() {
      // uncomment below and update the code to test the property osFamily
      //var instance = new NeutrinoApi.UALookupResponse();
      //expect(instance).to.be();
    });

    it('should have the property osVersion (base name: "os-version")', function() {
      // uncomment below and update the code to test the property osVersion
      //var instance = new NeutrinoApi.UALookupResponse();
      //expect(instance).to.be();
    });

    it('should have the property osVersionMajor (base name: "os-version-major")', function() {
      // uncomment below and update the code to test the property osVersionMajor
      //var instance = new NeutrinoApi.UALookupResponse();
      //expect(instance).to.be();
    });

    it('should have the property type (base name: "type")', function() {
      // uncomment below and update the code to test the property type
      //var instance = new NeutrinoApi.UALookupResponse();
      //expect(instance).to.be();
    });

    it('should have the property ua (base name: "ua")', function() {
      // uncomment below and update the code to test the property ua
      //var instance = new NeutrinoApi.UALookupResponse();
      //expect(instance).to.be();
    });

    it('should have the property version (base name: "version")', function() {
      // uncomment below and update the code to test the property version
      //var instance = new NeutrinoApi.UALookupResponse();
      //expect(instance).to.be();
    });

    it('should have the property versionMajor (base name: "version-major")', function() {
      // uncomment below and update the code to test the property versionMajor
      //var instance = new NeutrinoApi.UALookupResponse();
      //expect(instance).to.be();
    });

  });

}));
