/**
 * Neutrino API
 * The general-purpose API
 *
 * The version of the OpenAPI document: 3.6.4
 * Contact: ops@neutrinoapi.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.NeutrinoApi);
  }
}(this, function(expect, NeutrinoApi) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new NeutrinoApi.BINLookupResponse();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('BINLookupResponse', function() {
    it('should create an instance of BINLookupResponse', function() {
      // uncomment below and update the code to test BINLookupResponse
      //var instance = new NeutrinoApi.BINLookupResponse();
      //expect(instance).to.be.a(NeutrinoApi.BINLookupResponse);
    });

    it('should have the property binNumber (base name: "bin-number")', function() {
      // uncomment below and update the code to test the property binNumber
      //var instance = new NeutrinoApi.BINLookupResponse();
      //expect(instance).to.be();
    });

    it('should have the property cardBrand (base name: "card-brand")', function() {
      // uncomment below and update the code to test the property cardBrand
      //var instance = new NeutrinoApi.BINLookupResponse();
      //expect(instance).to.be();
    });

    it('should have the property cardCategory (base name: "card-category")', function() {
      // uncomment below and update the code to test the property cardCategory
      //var instance = new NeutrinoApi.BINLookupResponse();
      //expect(instance).to.be();
    });

    it('should have the property cardType (base name: "card-type")', function() {
      // uncomment below and update the code to test the property cardType
      //var instance = new NeutrinoApi.BINLookupResponse();
      //expect(instance).to.be();
    });

    it('should have the property country (base name: "country")', function() {
      // uncomment below and update the code to test the property country
      //var instance = new NeutrinoApi.BINLookupResponse();
      //expect(instance).to.be();
    });

    it('should have the property countryCode (base name: "country-code")', function() {
      // uncomment below and update the code to test the property countryCode
      //var instance = new NeutrinoApi.BINLookupResponse();
      //expect(instance).to.be();
    });

    it('should have the property countryCode3 (base name: "country-code3")', function() {
      // uncomment below and update the code to test the property countryCode3
      //var instance = new NeutrinoApi.BINLookupResponse();
      //expect(instance).to.be();
    });

    it('should have the property currencyCode (base name: "currency-code")', function() {
      // uncomment below and update the code to test the property currencyCode
      //var instance = new NeutrinoApi.BINLookupResponse();
      //expect(instance).to.be();
    });

    it('should have the property ipBlocklisted (base name: "ip-blocklisted")', function() {
      // uncomment below and update the code to test the property ipBlocklisted
      //var instance = new NeutrinoApi.BINLookupResponse();
      //expect(instance).to.be();
    });

    it('should have the property ipBlocklists (base name: "ip-blocklists")', function() {
      // uncomment below and update the code to test the property ipBlocklists
      //var instance = new NeutrinoApi.BINLookupResponse();
      //expect(instance).to.be();
    });

    it('should have the property ipCity (base name: "ip-city")', function() {
      // uncomment below and update the code to test the property ipCity
      //var instance = new NeutrinoApi.BINLookupResponse();
      //expect(instance).to.be();
    });

    it('should have the property ipCountry (base name: "ip-country")', function() {
      // uncomment below and update the code to test the property ipCountry
      //var instance = new NeutrinoApi.BINLookupResponse();
      //expect(instance).to.be();
    });

    it('should have the property ipCountryCode (base name: "ip-country-code")', function() {
      // uncomment below and update the code to test the property ipCountryCode
      //var instance = new NeutrinoApi.BINLookupResponse();
      //expect(instance).to.be();
    });

    it('should have the property ipCountryCode3 (base name: "ip-country-code3")', function() {
      // uncomment below and update the code to test the property ipCountryCode3
      //var instance = new NeutrinoApi.BINLookupResponse();
      //expect(instance).to.be();
    });

    it('should have the property ipMatchesBin (base name: "ip-matches-bin")', function() {
      // uncomment below and update the code to test the property ipMatchesBin
      //var instance = new NeutrinoApi.BINLookupResponse();
      //expect(instance).to.be();
    });

    it('should have the property ipRegion (base name: "ip-region")', function() {
      // uncomment below and update the code to test the property ipRegion
      //var instance = new NeutrinoApi.BINLookupResponse();
      //expect(instance).to.be();
    });

    it('should have the property isCommercial (base name: "is-commercial")', function() {
      // uncomment below and update the code to test the property isCommercial
      //var instance = new NeutrinoApi.BINLookupResponse();
      //expect(instance).to.be();
    });

    it('should have the property isPrepaid (base name: "is-prepaid")', function() {
      // uncomment below and update the code to test the property isPrepaid
      //var instance = new NeutrinoApi.BINLookupResponse();
      //expect(instance).to.be();
    });

    it('should have the property issuer (base name: "issuer")', function() {
      // uncomment below and update the code to test the property issuer
      //var instance = new NeutrinoApi.BINLookupResponse();
      //expect(instance).to.be();
    });

    it('should have the property issuerPhone (base name: "issuer-phone")', function() {
      // uncomment below and update the code to test the property issuerPhone
      //var instance = new NeutrinoApi.BINLookupResponse();
      //expect(instance).to.be();
    });

    it('should have the property issuerWebsite (base name: "issuer-website")', function() {
      // uncomment below and update the code to test the property issuerWebsite
      //var instance = new NeutrinoApi.BINLookupResponse();
      //expect(instance).to.be();
    });

    it('should have the property valid (base name: "valid")', function() {
      // uncomment below and update the code to test the property valid
      //var instance = new NeutrinoApi.BINLookupResponse();
      //expect(instance).to.be();
    });

  });

}));
