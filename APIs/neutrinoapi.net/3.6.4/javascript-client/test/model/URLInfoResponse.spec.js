/**
 * Neutrino API
 * The general-purpose API
 *
 * The version of the OpenAPI document: 3.6.4
 * Contact: ops@neutrinoapi.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.NeutrinoApi);
  }
}(this, function(expect, NeutrinoApi) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new NeutrinoApi.URLInfoResponse();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('URLInfoResponse', function() {
    it('should create an instance of URLInfoResponse', function() {
      // uncomment below and update the code to test URLInfoResponse
      //var instance = new NeutrinoApi.URLInfoResponse();
      //expect(instance).to.be.a(NeutrinoApi.URLInfoResponse);
    });

    it('should have the property content (base name: "content")', function() {
      // uncomment below and update the code to test the property content
      //var instance = new NeutrinoApi.URLInfoResponse();
      //expect(instance).to.be();
    });

    it('should have the property contentEncoding (base name: "content-encoding")', function() {
      // uncomment below and update the code to test the property contentEncoding
      //var instance = new NeutrinoApi.URLInfoResponse();
      //expect(instance).to.be();
    });

    it('should have the property contentSize (base name: "content-size")', function() {
      // uncomment below and update the code to test the property contentSize
      //var instance = new NeutrinoApi.URLInfoResponse();
      //expect(instance).to.be();
    });

    it('should have the property contentType (base name: "content-type")', function() {
      // uncomment below and update the code to test the property contentType
      //var instance = new NeutrinoApi.URLInfoResponse();
      //expect(instance).to.be();
    });

    it('should have the property httpOk (base name: "http-ok")', function() {
      // uncomment below and update the code to test the property httpOk
      //var instance = new NeutrinoApi.URLInfoResponse();
      //expect(instance).to.be();
    });

    it('should have the property httpRedirect (base name: "http-redirect")', function() {
      // uncomment below and update the code to test the property httpRedirect
      //var instance = new NeutrinoApi.URLInfoResponse();
      //expect(instance).to.be();
    });

    it('should have the property httpStatus (base name: "http-status")', function() {
      // uncomment below and update the code to test the property httpStatus
      //var instance = new NeutrinoApi.URLInfoResponse();
      //expect(instance).to.be();
    });

    it('should have the property httpStatusMessage (base name: "http-status-message")', function() {
      // uncomment below and update the code to test the property httpStatusMessage
      //var instance = new NeutrinoApi.URLInfoResponse();
      //expect(instance).to.be();
    });

    it('should have the property isError (base name: "is-error")', function() {
      // uncomment below and update the code to test the property isError
      //var instance = new NeutrinoApi.URLInfoResponse();
      //expect(instance).to.be();
    });

    it('should have the property isTimeout (base name: "is-timeout")', function() {
      // uncomment below and update the code to test the property isTimeout
      //var instance = new NeutrinoApi.URLInfoResponse();
      //expect(instance).to.be();
    });

    it('should have the property languageCode (base name: "language-code")', function() {
      // uncomment below and update the code to test the property languageCode
      //var instance = new NeutrinoApi.URLInfoResponse();
      //expect(instance).to.be();
    });

    it('should have the property loadTime (base name: "load-time")', function() {
      // uncomment below and update the code to test the property loadTime
      //var instance = new NeutrinoApi.URLInfoResponse();
      //expect(instance).to.be();
    });

    it('should have the property query (base name: "query")', function() {
      // uncomment below and update the code to test the property query
      //var instance = new NeutrinoApi.URLInfoResponse();
      //expect(instance).to.be();
    });

    it('should have the property real (base name: "real")', function() {
      // uncomment below and update the code to test the property real
      //var instance = new NeutrinoApi.URLInfoResponse();
      //expect(instance).to.be();
    });

    it('should have the property serverCity (base name: "server-city")', function() {
      // uncomment below and update the code to test the property serverCity
      //var instance = new NeutrinoApi.URLInfoResponse();
      //expect(instance).to.be();
    });

    it('should have the property serverCountry (base name: "server-country")', function() {
      // uncomment below and update the code to test the property serverCountry
      //var instance = new NeutrinoApi.URLInfoResponse();
      //expect(instance).to.be();
    });

    it('should have the property serverCountryCode (base name: "server-country-code")', function() {
      // uncomment below and update the code to test the property serverCountryCode
      //var instance = new NeutrinoApi.URLInfoResponse();
      //expect(instance).to.be();
    });

    it('should have the property serverHostname (base name: "server-hostname")', function() {
      // uncomment below and update the code to test the property serverHostname
      //var instance = new NeutrinoApi.URLInfoResponse();
      //expect(instance).to.be();
    });

    it('should have the property serverIp (base name: "server-ip")', function() {
      // uncomment below and update the code to test the property serverIp
      //var instance = new NeutrinoApi.URLInfoResponse();
      //expect(instance).to.be();
    });

    it('should have the property serverName (base name: "server-name")', function() {
      // uncomment below and update the code to test the property serverName
      //var instance = new NeutrinoApi.URLInfoResponse();
      //expect(instance).to.be();
    });

    it('should have the property serverRegion (base name: "server-region")', function() {
      // uncomment below and update the code to test the property serverRegion
      //var instance = new NeutrinoApi.URLInfoResponse();
      //expect(instance).to.be();
    });

    it('should have the property title (base name: "title")', function() {
      // uncomment below and update the code to test the property title
      //var instance = new NeutrinoApi.URLInfoResponse();
      //expect(instance).to.be();
    });

    it('should have the property url (base name: "url")', function() {
      // uncomment below and update the code to test the property url
      //var instance = new NeutrinoApi.URLInfoResponse();
      //expect(instance).to.be();
    });

    it('should have the property urlPath (base name: "url-path")', function() {
      // uncomment below and update the code to test the property urlPath
      //var instance = new NeutrinoApi.URLInfoResponse();
      //expect(instance).to.be();
    });

    it('should have the property urlPort (base name: "url-port")', function() {
      // uncomment below and update the code to test the property urlPort
      //var instance = new NeutrinoApi.URLInfoResponse();
      //expect(instance).to.be();
    });

    it('should have the property urlProtocol (base name: "url-protocol")', function() {
      // uncomment below and update the code to test the property urlProtocol
      //var instance = new NeutrinoApi.URLInfoResponse();
      //expect(instance).to.be();
    });

    it('should have the property valid (base name: "valid")', function() {
      // uncomment below and update the code to test the property valid
      //var instance = new NeutrinoApi.URLInfoResponse();
      //expect(instance).to.be();
    });

  });

}));
