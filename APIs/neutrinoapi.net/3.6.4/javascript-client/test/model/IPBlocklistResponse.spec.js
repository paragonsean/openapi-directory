/**
 * Neutrino API
 * The general-purpose API
 *
 * The version of the OpenAPI document: 3.6.4
 * Contact: ops@neutrinoapi.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.NeutrinoApi);
  }
}(this, function(expect, NeutrinoApi) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new NeutrinoApi.IPBlocklistResponse();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('IPBlocklistResponse', function() {
    it('should create an instance of IPBlocklistResponse', function() {
      // uncomment below and update the code to test IPBlocklistResponse
      //var instance = new NeutrinoApi.IPBlocklistResponse();
      //expect(instance).to.be.a(NeutrinoApi.IPBlocklistResponse);
    });

    it('should have the property blocklists (base name: "blocklists")', function() {
      // uncomment below and update the code to test the property blocklists
      //var instance = new NeutrinoApi.IPBlocklistResponse();
      //expect(instance).to.be();
    });

    it('should have the property cidr (base name: "cidr")', function() {
      // uncomment below and update the code to test the property cidr
      //var instance = new NeutrinoApi.IPBlocklistResponse();
      //expect(instance).to.be();
    });

    it('should have the property ip (base name: "ip")', function() {
      // uncomment below and update the code to test the property ip
      //var instance = new NeutrinoApi.IPBlocklistResponse();
      //expect(instance).to.be();
    });

    it('should have the property isBot (base name: "is-bot")', function() {
      // uncomment below and update the code to test the property isBot
      //var instance = new NeutrinoApi.IPBlocklistResponse();
      //expect(instance).to.be();
    });

    it('should have the property isDshield (base name: "is-dshield")', function() {
      // uncomment below and update the code to test the property isDshield
      //var instance = new NeutrinoApi.IPBlocklistResponse();
      //expect(instance).to.be();
    });

    it('should have the property isExploitBot (base name: "is-exploit-bot")', function() {
      // uncomment below and update the code to test the property isExploitBot
      //var instance = new NeutrinoApi.IPBlocklistResponse();
      //expect(instance).to.be();
    });

    it('should have the property isHijacked (base name: "is-hijacked")', function() {
      // uncomment below and update the code to test the property isHijacked
      //var instance = new NeutrinoApi.IPBlocklistResponse();
      //expect(instance).to.be();
    });

    it('should have the property isListed (base name: "is-listed")', function() {
      // uncomment below and update the code to test the property isListed
      //var instance = new NeutrinoApi.IPBlocklistResponse();
      //expect(instance).to.be();
    });

    it('should have the property isMalware (base name: "is-malware")', function() {
      // uncomment below and update the code to test the property isMalware
      //var instance = new NeutrinoApi.IPBlocklistResponse();
      //expect(instance).to.be();
    });

    it('should have the property isProxy (base name: "is-proxy")', function() {
      // uncomment below and update the code to test the property isProxy
      //var instance = new NeutrinoApi.IPBlocklistResponse();
      //expect(instance).to.be();
    });

    it('should have the property isSpamBot (base name: "is-spam-bot")', function() {
      // uncomment below and update the code to test the property isSpamBot
      //var instance = new NeutrinoApi.IPBlocklistResponse();
      //expect(instance).to.be();
    });

    it('should have the property isSpider (base name: "is-spider")', function() {
      // uncomment below and update the code to test the property isSpider
      //var instance = new NeutrinoApi.IPBlocklistResponse();
      //expect(instance).to.be();
    });

    it('should have the property isSpyware (base name: "is-spyware")', function() {
      // uncomment below and update the code to test the property isSpyware
      //var instance = new NeutrinoApi.IPBlocklistResponse();
      //expect(instance).to.be();
    });

    it('should have the property isTor (base name: "is-tor")', function() {
      // uncomment below and update the code to test the property isTor
      //var instance = new NeutrinoApi.IPBlocklistResponse();
      //expect(instance).to.be();
    });

    it('should have the property isVpn (base name: "is-vpn")', function() {
      // uncomment below and update the code to test the property isVpn
      //var instance = new NeutrinoApi.IPBlocklistResponse();
      //expect(instance).to.be();
    });

    it('should have the property lastSeen (base name: "last-seen")', function() {
      // uncomment below and update the code to test the property lastSeen
      //var instance = new NeutrinoApi.IPBlocklistResponse();
      //expect(instance).to.be();
    });

    it('should have the property listCount (base name: "list-count")', function() {
      // uncomment below and update the code to test the property listCount
      //var instance = new NeutrinoApi.IPBlocklistResponse();
      //expect(instance).to.be();
    });

    it('should have the property sensors (base name: "sensors")', function() {
      // uncomment below and update the code to test the property sensors
      //var instance = new NeutrinoApi.IPBlocklistResponse();
      //expect(instance).to.be();
    });

  });

}));
