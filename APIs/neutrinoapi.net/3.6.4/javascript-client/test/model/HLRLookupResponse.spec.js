/**
 * Neutrino API
 * The general-purpose API
 *
 * The version of the OpenAPI document: 3.6.4
 * Contact: ops@neutrinoapi.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.NeutrinoApi);
  }
}(this, function(expect, NeutrinoApi) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new NeutrinoApi.HLRLookupResponse();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('HLRLookupResponse', function() {
    it('should create an instance of HLRLookupResponse', function() {
      // uncomment below and update the code to test HLRLookupResponse
      //var instance = new NeutrinoApi.HLRLookupResponse();
      //expect(instance).to.be.a(NeutrinoApi.HLRLookupResponse);
    });

    it('should have the property country (base name: "country")', function() {
      // uncomment below and update the code to test the property country
      //var instance = new NeutrinoApi.HLRLookupResponse();
      //expect(instance).to.be();
    });

    it('should have the property countryCode (base name: "country-code")', function() {
      // uncomment below and update the code to test the property countryCode
      //var instance = new NeutrinoApi.HLRLookupResponse();
      //expect(instance).to.be();
    });

    it('should have the property countryCode3 (base name: "country-code3")', function() {
      // uncomment below and update the code to test the property countryCode3
      //var instance = new NeutrinoApi.HLRLookupResponse();
      //expect(instance).to.be();
    });

    it('should have the property currencyCode (base name: "currency-code")', function() {
      // uncomment below and update the code to test the property currencyCode
      //var instance = new NeutrinoApi.HLRLookupResponse();
      //expect(instance).to.be();
    });

    it('should have the property currentNetwork (base name: "current-network")', function() {
      // uncomment below and update the code to test the property currentNetwork
      //var instance = new NeutrinoApi.HLRLookupResponse();
      //expect(instance).to.be();
    });

    it('should have the property hlrStatus (base name: "hlr-status")', function() {
      // uncomment below and update the code to test the property hlrStatus
      //var instance = new NeutrinoApi.HLRLookupResponse();
      //expect(instance).to.be();
    });

    it('should have the property hlrValid (base name: "hlr-valid")', function() {
      // uncomment below and update the code to test the property hlrValid
      //var instance = new NeutrinoApi.HLRLookupResponse();
      //expect(instance).to.be();
    });

    it('should have the property imsi (base name: "imsi")', function() {
      // uncomment below and update the code to test the property imsi
      //var instance = new NeutrinoApi.HLRLookupResponse();
      //expect(instance).to.be();
    });

    it('should have the property internationalCallingCode (base name: "international-calling-code")', function() {
      // uncomment below and update the code to test the property internationalCallingCode
      //var instance = new NeutrinoApi.HLRLookupResponse();
      //expect(instance).to.be();
    });

    it('should have the property internationalNumber (base name: "international-number")', function() {
      // uncomment below and update the code to test the property internationalNumber
      //var instance = new NeutrinoApi.HLRLookupResponse();
      //expect(instance).to.be();
    });

    it('should have the property isMobile (base name: "is-mobile")', function() {
      // uncomment below and update the code to test the property isMobile
      //var instance = new NeutrinoApi.HLRLookupResponse();
      //expect(instance).to.be();
    });

    it('should have the property isPorted (base name: "is-ported")', function() {
      // uncomment below and update the code to test the property isPorted
      //var instance = new NeutrinoApi.HLRLookupResponse();
      //expect(instance).to.be();
    });

    it('should have the property isRoaming (base name: "is-roaming")', function() {
      // uncomment below and update the code to test the property isRoaming
      //var instance = new NeutrinoApi.HLRLookupResponse();
      //expect(instance).to.be();
    });

    it('should have the property localNumber (base name: "local-number")', function() {
      // uncomment below and update the code to test the property localNumber
      //var instance = new NeutrinoApi.HLRLookupResponse();
      //expect(instance).to.be();
    });

    it('should have the property location (base name: "location")', function() {
      // uncomment below and update the code to test the property location
      //var instance = new NeutrinoApi.HLRLookupResponse();
      //expect(instance).to.be();
    });

    it('should have the property mcc (base name: "mcc")', function() {
      // uncomment below and update the code to test the property mcc
      //var instance = new NeutrinoApi.HLRLookupResponse();
      //expect(instance).to.be();
    });

    it('should have the property mnc (base name: "mnc")', function() {
      // uncomment below and update the code to test the property mnc
      //var instance = new NeutrinoApi.HLRLookupResponse();
      //expect(instance).to.be();
    });

    it('should have the property msc (base name: "msc")', function() {
      // uncomment below and update the code to test the property msc
      //var instance = new NeutrinoApi.HLRLookupResponse();
      //expect(instance).to.be();
    });

    it('should have the property msin (base name: "msin")', function() {
      // uncomment below and update the code to test the property msin
      //var instance = new NeutrinoApi.HLRLookupResponse();
      //expect(instance).to.be();
    });

    it('should have the property numberType (base name: "number-type")', function() {
      // uncomment below and update the code to test the property numberType
      //var instance = new NeutrinoApi.HLRLookupResponse();
      //expect(instance).to.be();
    });

    it('should have the property numberValid (base name: "number-valid")', function() {
      // uncomment below and update the code to test the property numberValid
      //var instance = new NeutrinoApi.HLRLookupResponse();
      //expect(instance).to.be();
    });

    it('should have the property originNetwork (base name: "origin-network")', function() {
      // uncomment below and update the code to test the property originNetwork
      //var instance = new NeutrinoApi.HLRLookupResponse();
      //expect(instance).to.be();
    });

    it('should have the property portedNetwork (base name: "ported-network")', function() {
      // uncomment below and update the code to test the property portedNetwork
      //var instance = new NeutrinoApi.HLRLookupResponse();
      //expect(instance).to.be();
    });

    it('should have the property roamingCountryCode (base name: "roaming-country-code")', function() {
      // uncomment below and update the code to test the property roamingCountryCode
      //var instance = new NeutrinoApi.HLRLookupResponse();
      //expect(instance).to.be();
    });

  });

}));
