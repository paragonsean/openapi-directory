/**
 * Neutrino API
 * The general-purpose API
 *
 * The version of the OpenAPI document: 3.6.4
 * Contact: ops@neutrinoapi.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.NeutrinoApi);
  }
}(this, function(expect, NeutrinoApi) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new NeutrinoApi.DomainLookupResponse();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('DomainLookupResponse', function() {
    it('should create an instance of DomainLookupResponse', function() {
      // uncomment below and update the code to test DomainLookupResponse
      //var instance = new NeutrinoApi.DomainLookupResponse();
      //expect(instance).to.be.a(NeutrinoApi.DomainLookupResponse);
    });

    it('should have the property age (base name: "age")', function() {
      // uncomment below and update the code to test the property age
      //var instance = new NeutrinoApi.DomainLookupResponse();
      //expect(instance).to.be();
    });

    it('should have the property blocklists (base name: "blocklists")', function() {
      // uncomment below and update the code to test the property blocklists
      //var instance = new NeutrinoApi.DomainLookupResponse();
      //expect(instance).to.be();
    });

    it('should have the property dnsProvider (base name: "dns-provider")', function() {
      // uncomment below and update the code to test the property dnsProvider
      //var instance = new NeutrinoApi.DomainLookupResponse();
      //expect(instance).to.be();
    });

    it('should have the property domain (base name: "domain")', function() {
      // uncomment below and update the code to test the property domain
      //var instance = new NeutrinoApi.DomainLookupResponse();
      //expect(instance).to.be();
    });

    it('should have the property fqdn (base name: "fqdn")', function() {
      // uncomment below and update the code to test the property fqdn
      //var instance = new NeutrinoApi.DomainLookupResponse();
      //expect(instance).to.be();
    });

    it('should have the property isAdult (base name: "is-adult")', function() {
      // uncomment below and update the code to test the property isAdult
      //var instance = new NeutrinoApi.DomainLookupResponse();
      //expect(instance).to.be();
    });

    it('should have the property isGov (base name: "is-gov")', function() {
      // uncomment below and update the code to test the property isGov
      //var instance = new NeutrinoApi.DomainLookupResponse();
      //expect(instance).to.be();
    });

    it('should have the property isMalicious (base name: "is-malicious")', function() {
      // uncomment below and update the code to test the property isMalicious
      //var instance = new NeutrinoApi.DomainLookupResponse();
      //expect(instance).to.be();
    });

    it('should have the property isOpennic (base name: "is-opennic")', function() {
      // uncomment below and update the code to test the property isOpennic
      //var instance = new NeutrinoApi.DomainLookupResponse();
      //expect(instance).to.be();
    });

    it('should have the property isPending (base name: "is-pending")', function() {
      // uncomment below and update the code to test the property isPending
      //var instance = new NeutrinoApi.DomainLookupResponse();
      //expect(instance).to.be();
    });

    it('should have the property isSubdomain (base name: "is-subdomain")', function() {
      // uncomment below and update the code to test the property isSubdomain
      //var instance = new NeutrinoApi.DomainLookupResponse();
      //expect(instance).to.be();
    });

    it('should have the property mailProvider (base name: "mail-provider")', function() {
      // uncomment below and update the code to test the property mailProvider
      //var instance = new NeutrinoApi.DomainLookupResponse();
      //expect(instance).to.be();
    });

    it('should have the property rank (base name: "rank")', function() {
      // uncomment below and update the code to test the property rank
      //var instance = new NeutrinoApi.DomainLookupResponse();
      //expect(instance).to.be();
    });

    it('should have the property registeredDate (base name: "registered-date")', function() {
      // uncomment below and update the code to test the property registeredDate
      //var instance = new NeutrinoApi.DomainLookupResponse();
      //expect(instance).to.be();
    });

    it('should have the property registrarId (base name: "registrar-id")', function() {
      // uncomment below and update the code to test the property registrarId
      //var instance = new NeutrinoApi.DomainLookupResponse();
      //expect(instance).to.be();
    });

    it('should have the property registrarName (base name: "registrar-name")', function() {
      // uncomment below and update the code to test the property registrarName
      //var instance = new NeutrinoApi.DomainLookupResponse();
      //expect(instance).to.be();
    });

    it('should have the property sensors (base name: "sensors")', function() {
      // uncomment below and update the code to test the property sensors
      //var instance = new NeutrinoApi.DomainLookupResponse();
      //expect(instance).to.be();
    });

    it('should have the property tld (base name: "tld")', function() {
      // uncomment below and update the code to test the property tld
      //var instance = new NeutrinoApi.DomainLookupResponse();
      //expect(instance).to.be();
    });

    it('should have the property tldCc (base name: "tld-cc")', function() {
      // uncomment below and update the code to test the property tldCc
      //var instance = new NeutrinoApi.DomainLookupResponse();
      //expect(instance).to.be();
    });

    it('should have the property valid (base name: "valid")', function() {
      // uncomment below and update the code to test the property valid
      //var instance = new NeutrinoApi.DomainLookupResponse();
      //expect(instance).to.be();
    });

  });

}));
