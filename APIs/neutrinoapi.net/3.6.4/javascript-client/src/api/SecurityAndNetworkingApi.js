/**
 * Neutrino API
 * The general-purpose API
 *
 * The version of the OpenAPI document: 3.6.4
 * Contact: ops@neutrinoapi.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import APIError from '../model/APIError';
import DomainLookupResponse from '../model/DomainLookupResponse';
import EmailVerifyResponse from '../model/EmailVerifyResponse';
import HostReputationResponse from '../model/HostReputationResponse';
import IPBlocklistResponse from '../model/IPBlocklistResponse';
import IPProbeResponse from '../model/IPProbeResponse';

/**
* SecurityAndNetworking service.
* @module api/SecurityAndNetworkingApi
* @version 3.6.4
*/
export default class SecurityAndNetworkingApi {

    /**
    * Constructs a new SecurityAndNetworkingApi. 
    * @alias module:api/SecurityAndNetworkingApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the domainLookup operation.
     * @callback module:api/SecurityAndNetworkingApi~domainLookupCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DomainLookupResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Domain Lookup
     * Retrieve domain name details and detect potentially malicious or dangerous domains
     * @param {String} host A domain name, hostname, FQDN, URL, HTML link or email address to lookup
     * @param {Object} opts Optional parameters
     * @param {Boolean} [live = true)] For domains that we have never seen before then perform various live checks and realtime reconnaissance. <br>NOTE: this option may add additional non-deterministic delay to the request, if you require consistently fast API response times or just want to check our domain blocklists then you can disable this option
     * @param {module:api/SecurityAndNetworkingApi~domainLookupCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DomainLookupResponse}
     */
    domainLookup(host, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'host' is set
      if (host === undefined || host === null) {
        throw new Error("Missing the required parameter 'host' when calling domainLookup");
      }

      let pathParams = {
      };
      let queryParams = {
        'host': host,
        'live': opts['live']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api-key', 'user-id'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = DomainLookupResponse;
      return this.apiClient.callApi(
        '/domain-lookup', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the emailVerify operation.
     * @callback module:api/SecurityAndNetworkingApi~emailVerifyCallback
     * @param {String} error Error message, if any.
     * @param {module:model/EmailVerifyResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Email Verify
     * SMTP based email address verification
     * @param {String} email An email address
     * @param {Object} opts Optional parameters
     * @param {Boolean} [fixTypos = false)] Automatically attempt to fix typos in the address
     * @param {module:api/SecurityAndNetworkingApi~emailVerifyCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/EmailVerifyResponse}
     */
    emailVerify(email, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'email' is set
      if (email === undefined || email === null) {
        throw new Error("Missing the required parameter 'email' when calling emailVerify");
      }

      let pathParams = {
      };
      let queryParams = {
        'email': email,
        'fix-typos': opts['fixTypos']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api-key', 'user-id'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = EmailVerifyResponse;
      return this.apiClient.callApi(
        '/email-verify', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the hostReputation operation.
     * @callback module:api/SecurityAndNetworkingApi~hostReputationCallback
     * @param {String} error Error message, if any.
     * @param {module:model/HostReputationResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Host Reputation
     * Check the reputation of an IP address, domain name or URL against a comprehensive list of blacklists and blocklists
     * @param {String} host An IP address, domain name, FQDN or URL. <br>If you supply a domain/URL it will be checked against the URI DNSBL lists
     * @param {Object} opts Optional parameters
     * @param {Number} [listRating = 3)] Only check lists with this rating or better
     * @param {String} [zones] Only check these DNSBL zones/hosts. Multiple zones can be supplied as comma-separated values
     * @param {module:api/SecurityAndNetworkingApi~hostReputationCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/HostReputationResponse}
     */
    hostReputation(host, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'host' is set
      if (host === undefined || host === null) {
        throw new Error("Missing the required parameter 'host' when calling hostReputation");
      }

      let pathParams = {
      };
      let queryParams = {
        'host': host,
        'list-rating': opts['listRating'],
        'zones': opts['zones']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api-key', 'user-id'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = HostReputationResponse;
      return this.apiClient.callApi(
        '/host-reputation', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the iPBlocklist operation.
     * @callback module:api/SecurityAndNetworkingApi~iPBlocklistCallback
     * @param {String} error Error message, if any.
     * @param {module:model/IPBlocklistResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * IP Blocklist
     * The IP Blocklist API will detect potentially malicious or dangerous IP addresses
     * @param {String} ip An IPv4 or IPv6 address. Accepts standard IP notation (with or without port number), CIDR notation and IPv6 compressed notation. If multiple IPs are passed using comma-separated values the first non-bogon address on the list will be checked
     * @param {Object} opts Optional parameters
     * @param {Boolean} [vpnLookup = false)] Include public VPN provider IP addresses. <br><b>NOTE</b>: For more advanced VPN detection including the ability to identify private and stealth VPNs use the <a href=\"https://www.neutrinoapi.com/api/ip-probe/\">IP Probe API</a>
     * @param {module:api/SecurityAndNetworkingApi~iPBlocklistCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/IPBlocklistResponse}
     */
    iPBlocklist(ip, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'ip' is set
      if (ip === undefined || ip === null) {
        throw new Error("Missing the required parameter 'ip' when calling iPBlocklist");
      }

      let pathParams = {
      };
      let queryParams = {
        'ip': ip,
        'vpn-lookup': opts['vpnLookup']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api-key', 'user-id'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = IPBlocklistResponse;
      return this.apiClient.callApi(
        '/ip-blocklist', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the iPBlocklistDownload operation.
     * @callback module:api/SecurityAndNetworkingApi~iPBlocklistDownloadCallback
     * @param {String} error Error message, if any.
     * @param {File} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * IP Blocklist Download
     * This API is a direct feed to our IP blocklist data
     * @param {Object} opts Optional parameters
     * @param {String} [format = 'csv')] The data format. Can be either CSV or TXT
     * @param {Boolean} [includeVpn = false)] Include public VPN provider addresses, this option is only available for Tier 3 or higher accounts. Adds any IPs which are solely listed as VPN providers, IPs that are listed on multiple sensors will still be included without enabling this option. <br><b>WARNING</b>: This adds at least an additional 8 million IP addresses to the download if not using CIDR notation
     * @param {Boolean} [cidr = false)] Output IPs using CIDR notation. This option should be preferred but is off by default for backwards compatibility
     * @param {Boolean} [ip6 = false)] Output the IPv6 version of the blocklist, the default is to output IPv4 only. Note that this option enables CIDR notation too as this is the only notation currently supported for IPv6
     * @param {module:api/SecurityAndNetworkingApi~iPBlocklistDownloadCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link File}
     */
    iPBlocklistDownload(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'format': opts['format'],
        'include-vpn': opts['includeVpn'],
        'cidr': opts['cidr'],
        'ip6': opts['ip6']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api-key', 'user-id'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = File;
      return this.apiClient.callApi(
        '/ip-blocklist-download', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the iPProbe operation.
     * @callback module:api/SecurityAndNetworkingApi~iPProbeCallback
     * @param {String} error Error message, if any.
     * @param {module:model/IPProbeResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * IP Probe
     * Execute a realtime network probe against an IPv4 or IPv6 address
     * @param {String} ip IPv4 or IPv6 address
     * @param {module:api/SecurityAndNetworkingApi~iPProbeCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/IPProbeResponse}
     */
    iPProbe(ip, callback) {
      let postBody = null;
      // verify the required parameter 'ip' is set
      if (ip === undefined || ip === null) {
        throw new Error("Missing the required parameter 'ip' when calling iPProbe");
      }

      let pathParams = {
      };
      let queryParams = {
        'ip': ip
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api-key', 'user-id'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = IPProbeResponse;
      return this.apiClient.callApi(
        '/ip-probe', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
