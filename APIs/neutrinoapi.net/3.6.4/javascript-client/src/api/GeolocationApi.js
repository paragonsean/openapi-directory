/**
 * Neutrino API
 * The general-purpose API
 *
 * The version of the OpenAPI document: 3.6.4
 * Contact: ops@neutrinoapi.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import APIError from '../model/APIError';
import GeocodeAddressResponse from '../model/GeocodeAddressResponse';
import GeocodeReverseResponse from '../model/GeocodeReverseResponse';
import IPInfoResponse from '../model/IPInfoResponse';

/**
* Geolocation service.
* @module api/GeolocationApi
* @version 3.6.4
*/
export default class GeolocationApi {

    /**
    * Constructs a new GeolocationApi. 
    * @alias module:api/GeolocationApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the geocodeAddress operation.
     * @callback module:api/GeolocationApi~geocodeAddressCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GeocodeAddressResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Geocode Address
     * Geocode an address, partial address or just the name of a place
     * @param {Object} opts Optional parameters
     * @param {String} [address] The full address, partial address or name of a place to try and locate. Comma separated address components are preferred.
     * @param {String} [houseNumber] The house/building number to locate
     * @param {String} [street] The street/road name to locate
     * @param {String} [city] The city/town name to locate
     * @param {String} [county] The county/region name to locate
     * @param {String} [state] The state name to locate
     * @param {String} [postalCode] The postal code to locate
     * @param {String} [countryCode] Limit result to this country (the default is no country bias)
     * @param {String} [languageCode = 'en')] The language to display results in, available languages are: <ul> <li>de, en, es, fr, it, pt, ru, zh</li> </ul>
     * @param {Boolean} [fuzzySearch = false)] If no matches are found for the given address, start performing a recursive fuzzy search until a geolocation is found. This option is recommended for processing user input or implementing auto-complete. We use a combination of approximate string matching and data cleansing to find possible location matches
     * @param {module:api/GeolocationApi~geocodeAddressCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GeocodeAddressResponse}
     */
    geocodeAddress(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'address': opts['address'],
        'house-number': opts['houseNumber'],
        'street': opts['street'],
        'city': opts['city'],
        'county': opts['county'],
        'state': opts['state'],
        'postal-code': opts['postalCode'],
        'country-code': opts['countryCode'],
        'language-code': opts['languageCode'],
        'fuzzy-search': opts['fuzzySearch']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api-key', 'user-id'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GeocodeAddressResponse;
      return this.apiClient.callApi(
        '/geocode-address', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the geocodeReverse operation.
     * @callback module:api/GeolocationApi~geocodeReverseCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GeocodeReverseResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Geocode Reverse
     * Convert a geographic coordinate (latitude and longitude) into a real world address
     * @param {String} latitude The location latitude in decimal degrees format
     * @param {String} longitude The location longitude in decimal degrees format
     * @param {Object} opts Optional parameters
     * @param {String} [languageCode = 'en')] The language to display results in, available languages are: <ul> <li>de, en, es, fr, it, pt, ru</li> </ul>
     * @param {String} [zoom = 'address')] The zoom level to respond with: <br> <ul> <li>address - the most precise address available</li> <li>street - the street level</li> <li>city - the city level</li> <li>state - the state level</li> <li>country - the country level</li> </ul>
     * @param {module:api/GeolocationApi~geocodeReverseCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GeocodeReverseResponse}
     */
    geocodeReverse(latitude, longitude, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'latitude' is set
      if (latitude === undefined || latitude === null) {
        throw new Error("Missing the required parameter 'latitude' when calling geocodeReverse");
      }
      // verify the required parameter 'longitude' is set
      if (longitude === undefined || longitude === null) {
        throw new Error("Missing the required parameter 'longitude' when calling geocodeReverse");
      }

      let pathParams = {
      };
      let queryParams = {
        'latitude': latitude,
        'longitude': longitude,
        'language-code': opts['languageCode'],
        'zoom': opts['zoom']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api-key', 'user-id'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GeocodeReverseResponse;
      return this.apiClient.callApi(
        '/geocode-reverse', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the iPInfo operation.
     * @callback module:api/GeolocationApi~iPInfoCallback
     * @param {String} error Error message, if any.
     * @param {module:model/IPInfoResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * IP Info
     * Get location information about an IP address and do reverse DNS (PTR) lookups
     * @param {String} ip IPv4 or IPv6 address
     * @param {Object} opts Optional parameters
     * @param {Boolean} [reverseLookup = false)] Do a reverse DNS (PTR) lookup. This option can add extra delay to the request so only use it if you need it
     * @param {module:api/GeolocationApi~iPInfoCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/IPInfoResponse}
     */
    iPInfo(ip, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'ip' is set
      if (ip === undefined || ip === null) {
        throw new Error("Missing the required parameter 'ip' when calling iPInfo");
      }

      let pathParams = {
      };
      let queryParams = {
        'ip': ip,
        'reverse-lookup': opts['reverseLookup']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api-key', 'user-id'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = IPInfoResponse;
      return this.apiClient.callApi(
        '/ip-info', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
