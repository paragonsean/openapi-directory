/**
 * Neutrino API
 * The general-purpose API
 *
 * The version of the OpenAPI document: 3.6.4
 * Contact: ops@neutrinoapi.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import APIError from '../model/APIError';
import BINLookupResponse from '../model/BINLookupResponse';
import ConvertResponse from '../model/ConvertResponse';

/**
* ECommerce service.
* @module api/ECommerceApi
* @version 3.6.4
*/
export default class ECommerceApi {

    /**
    * Constructs a new ECommerceApi. 
    * @alias module:api/ECommerceApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the bINListDownload operation.
     * @callback module:api/ECommerceApi~bINListDownloadCallback
     * @param {String} error Error message, if any.
     * @param {File} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * BIN List Download
     * Download our entire BIN database for direct use on your own systems
     * @param {Object} opts Optional parameters
     * @param {Boolean} [includeIso3 = false)] Include ISO 3-letter country codes and ISO 3-letter currency codes in the data. These will be added to columns 10 and 11 respectively
     * @param {Boolean} [include8digit = false)] Include 8-digit and higher BIN codes. This option includes all 6-digit BINs and all 8-digit and higher BINs (including some 9, 10 and 11 digit BINs where available)
     * @param {module:api/ECommerceApi~bINListDownloadCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link File}
     */
    bINListDownload(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'include-iso3': opts['includeIso3'],
        'include-8digit': opts['include8digit']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api-key', 'user-id'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = File;
      return this.apiClient.callApi(
        '/bin-list-download', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the bINLookup operation.
     * @callback module:api/ECommerceApi~bINLookupCallback
     * @param {String} error Error message, if any.
     * @param {module:model/BINLookupResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * BIN Lookup
     * Perform a BIN (Bank Identification Number) or IIN (Issuer Identification Number) lookup
     * @param {String} binNumber The BIN or IIN number. This is the first 6, 8 or 10 digits of a card number, use 8 (or more) digits for the highest level of accuracy
     * @param {Object} opts Optional parameters
     * @param {String} [customerIp] Pass in the customers IP address and we will return some extra information about them
     * @param {module:api/ECommerceApi~bINLookupCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/BINLookupResponse}
     */
    bINLookup(binNumber, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'binNumber' is set
      if (binNumber === undefined || binNumber === null) {
        throw new Error("Missing the required parameter 'binNumber' when calling bINLookup");
      }

      let pathParams = {
      };
      let queryParams = {
        'bin-number': binNumber,
        'customer-ip': opts['customerIp']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api-key', 'user-id'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = BINLookupResponse;
      return this.apiClient.callApi(
        '/bin-lookup', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the convert operation.
     * @callback module:api/ECommerceApi~convertCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ConvertResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Convert
     * A currency and unit conversion tool
     * @param {String} fromValue The value to convert from (e.g. 10.95)
     * @param {String} fromType The type of the value to convert from (e.g. USD)
     * @param {String} toType The type to convert to (e.g. EUR)
     * @param {module:api/ECommerceApi~convertCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ConvertResponse}
     */
    convert(fromValue, fromType, toType, callback) {
      let postBody = null;
      // verify the required parameter 'fromValue' is set
      if (fromValue === undefined || fromValue === null) {
        throw new Error("Missing the required parameter 'fromValue' when calling convert");
      }
      // verify the required parameter 'fromType' is set
      if (fromType === undefined || fromType === null) {
        throw new Error("Missing the required parameter 'fromType' when calling convert");
      }
      // verify the required parameter 'toType' is set
      if (toType === undefined || toType === null) {
        throw new Error("Missing the required parameter 'toType' when calling convert");
      }

      let pathParams = {
      };
      let queryParams = {
        'from-value': fromValue,
        'from-type': fromType,
        'to-type': toType
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api-key', 'user-id'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ConvertResponse;
      return this.apiClient.callApi(
        '/convert', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
