/**
 * Neutrino API
 * The general-purpose API
 *
 * The version of the OpenAPI document: 3.6.4
 * Contact: ops@neutrinoapi.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import APIError from '../model/APIError';
import BadWordFilterResponse from '../model/BadWordFilterResponse';
import EmailValidateResponse from '../model/EmailValidateResponse';
import PhoneValidateResponse from '../model/PhoneValidateResponse';
import UALookupResponse from '../model/UALookupResponse';

/**
* DataTools service.
* @module api/DataToolsApi
* @version 3.6.4
*/
export default class DataToolsApi {

    /**
    * Constructs a new DataToolsApi. 
    * @alias module:api/DataToolsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the badWordFilter operation.
     * @callback module:api/DataToolsApi~badWordFilterCallback
     * @param {String} error Error message, if any.
     * @param {module:model/BadWordFilterResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Bad Word Filter
     * Detect bad words, swear words and profanity in a given text
     * @param {String} content The content to scan. This can be either a URL to load from, a file upload (multipart/form-data) or an HTML content string
     * @param {Object} opts Optional parameters
     * @param {String} [catalog = 'strict')] Which catalog of bad words to use, we currently maintain two bad word catalogs: <br> <ul> <li>strict - the largest database of bad words which includes profanity, obscenity, sexual, rude, cuss, dirty, swear and objectionable words and phrases. This catalog is suitable for environments of all ages including educational or children's content</li> <li>obscene - like the strict catalog but does not include any mild profanities, idiomatic phrases or words which are considered formal terminology. This catalog is suitable for adult environments where certain types of bad words are considered OK</li> </ul>
     * @param {String} [censorCharacter] The character to use to censor out the bad words found
     * @param {module:api/DataToolsApi~badWordFilterCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/BadWordFilterResponse}
     */
    badWordFilter(content, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'content' is set
      if (content === undefined || content === null) {
        throw new Error("Missing the required parameter 'content' when calling badWordFilter");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
        'catalog': opts['catalog'],
        'censor-character': opts['censorCharacter'],
        'content': content
      };

      let authNames = ['api-key', 'user-id'];
      let contentTypes = ['application/x-www-form-urlencoded'];
      let accepts = ['application/json'];
      let returnType = BadWordFilterResponse;
      return this.apiClient.callApi(
        '/bad-word-filter', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the emailValidate operation.
     * @callback module:api/DataToolsApi~emailValidateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/EmailValidateResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Email Validate
     * Parse, validate and clean an email address
     * @param {String} email An email address
     * @param {Object} opts Optional parameters
     * @param {Boolean} [fixTypos = false)] Automatically attempt to fix typos in the address
     * @param {module:api/DataToolsApi~emailValidateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/EmailValidateResponse}
     */
    emailValidate(email, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'email' is set
      if (email === undefined || email === null) {
        throw new Error("Missing the required parameter 'email' when calling emailValidate");
      }

      let pathParams = {
      };
      let queryParams = {
        'email': email,
        'fix-typos': opts['fixTypos']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api-key', 'user-id'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = EmailValidateResponse;
      return this.apiClient.callApi(
        '/email-validate', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the phoneValidate operation.
     * @callback module:api/DataToolsApi~phoneValidateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PhoneValidateResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Phone Validate
     * Parse, validate and get location information about a phone number
     * @param {String} number A phone number. This can be in international format (E.164) or local format. If passing local format you must also set either the 'country-code' OR 'ip' options as well
     * @param {Object} opts Optional parameters
     * @param {String} [countryCode] ISO 2-letter country code, assume numbers are based in this country. If not set numbers are assumed to be in international format (with or without the leading + sign)
     * @param {String} [ip] Pass in a users IP address and we will assume numbers are based in the country of the IP address
     * @param {module:api/DataToolsApi~phoneValidateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PhoneValidateResponse}
     */
    phoneValidate(number, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'number' is set
      if (number === undefined || number === null) {
        throw new Error("Missing the required parameter 'number' when calling phoneValidate");
      }

      let pathParams = {
      };
      let queryParams = {
        'number': number,
        'country-code': opts['countryCode'],
        'ip': opts['ip']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api-key', 'user-id'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = PhoneValidateResponse;
      return this.apiClient.callApi(
        '/phone-validate', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the uALookup operation.
     * @callback module:api/DataToolsApi~uALookupCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UALookupResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * UA Lookup
     * Parse, validate and get detailed user-agent information from a user agent string or from client hints
     * @param {String} ua The user-agent string to lookup. For client hints use the 'UA' header or the JSON data directly from 'navigator.userAgentData.brands' or 'navigator.userAgentData.getHighEntropyValues()'
     * @param {Object} opts Optional parameters
     * @param {String} [uaVersion] For client hints this corresponds to the 'UA-Full-Version' header or 'uaFullVersion' from NavigatorUAData
     * @param {String} [uaPlatform] For client hints this corresponds to the 'UA-Platform' header or 'platform' from NavigatorUAData
     * @param {String} [uaPlatformVersion] For client hints this corresponds to the 'UA-Platform-Version' header or 'platformVersion' from NavigatorUAData
     * @param {String} [uaMobile] For client hints this corresponds to the 'UA-Mobile' header or 'mobile' from NavigatorUAData
     * @param {String} [deviceModel] For client hints this corresponds to the 'UA-Model' header or 'model' from NavigatorUAData. <br>You can also use this parameter to lookup a device directly by its model name, model code or hardware code, on android you can get the model name from: https://developer.android.com/reference/android/os/Build.html#MODEL
     * @param {String} [deviceBrand] This parameter is only used in combination with 'device-model' when doing direct device lookups without any user-agent data. Set this to the brand or manufacturer name, this is required for accurate device detection with ambiguous model names. On android you can get the device brand from: https://developer.android.com/reference/android/os/Build#MANUFACTURER
     * @param {module:api/DataToolsApi~uALookupCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UALookupResponse}
     */
    uALookup(ua, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'ua' is set
      if (ua === undefined || ua === null) {
        throw new Error("Missing the required parameter 'ua' when calling uALookup");
      }

      let pathParams = {
      };
      let queryParams = {
        'ua': ua,
        'ua-version': opts['uaVersion'],
        'ua-platform': opts['uaPlatform'],
        'ua-platform-version': opts['uaPlatformVersion'],
        'ua-mobile': opts['uaMobile'],
        'device-model': opts['deviceModel'],
        'device-brand': opts['deviceBrand']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api-key', 'user-id'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = UALookupResponse;
      return this.apiClient.callApi(
        '/ua-lookup', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
