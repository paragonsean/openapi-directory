/**
 * Neutrino API
 * The general-purpose API
 *
 * The version of the OpenAPI document: 3.6.4
 * Contact: ops@neutrinoapi.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import APIError from '../model/APIError';
import HLRLookupResponse from '../model/HLRLookupResponse';
import PhonePlaybackResponse from '../model/PhonePlaybackResponse';
import PhoneVerifyResponse from '../model/PhoneVerifyResponse';
import SMSVerifyResponse from '../model/SMSVerifyResponse';
import VerifySecurityCodeResponse from '../model/VerifySecurityCodeResponse';

/**
* Telephony service.
* @module api/TelephonyApi
* @version 3.6.4
*/
export default class TelephonyApi {

    /**
    * Constructs a new TelephonyApi. 
    * @alias module:api/TelephonyApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the hLRLookup operation.
     * @callback module:api/TelephonyApi~hLRLookupCallback
     * @param {String} error Error message, if any.
     * @param {module:model/HLRLookupResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * HLR Lookup
     * Connect to the global mobile cellular network and retrieve the status of a mobile device
     * @param {String} number A phone number
     * @param {Object} opts Optional parameters
     * @param {String} [countryCode] ISO 2-letter country code, assume numbers are based in this country. <br>If not set numbers are assumed to be in international format (with or without the leading + sign)
     * @param {module:api/TelephonyApi~hLRLookupCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/HLRLookupResponse}
     */
    hLRLookup(number, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'number' is set
      if (number === undefined || number === null) {
        throw new Error("Missing the required parameter 'number' when calling hLRLookup");
      }

      let pathParams = {
      };
      let queryParams = {
        'number': number,
        'country-code': opts['countryCode']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api-key', 'user-id'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = HLRLookupResponse;
      return this.apiClient.callApi(
        '/hlr-lookup', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the phonePlayback operation.
     * @callback module:api/TelephonyApi~phonePlaybackCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PhonePlaybackResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Phone Playback
     * Make an automated call to any valid phone number and playback an audio message
     * @param {String} audioUrl A URL to a valid audio file. Accepted audio formats are: <ul> <li>MP3</li> <li>WAV</li> <li>OGG</li> </ul>You can use the following MP3 URL for testing: <br>https://www.neutrinoapi.com/test-files/test1.mp3
     * @param {String} number The phone number to call. Must be in valid international format
     * @param {Object} opts Optional parameters
     * @param {Number} [limit = 3)] Limit the total number of calls allowed to the supplied phone number, if the limit is reached within the TTL then error code 14 will be returned
     * @param {Number} [limitTtl = 1)] Set the TTL in number of days that the 'limit' option will remember a phone number (the default is 1 day and the maximum is 365 days)
     * @param {module:api/TelephonyApi~phonePlaybackCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PhonePlaybackResponse}
     */
    phonePlayback(audioUrl, number, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'audioUrl' is set
      if (audioUrl === undefined || audioUrl === null) {
        throw new Error("Missing the required parameter 'audioUrl' when calling phonePlayback");
      }
      // verify the required parameter 'number' is set
      if (number === undefined || number === null) {
        throw new Error("Missing the required parameter 'number' when calling phonePlayback");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
        'audio-url': audioUrl,
        'limit': opts['limit'],
        'limit-ttl': opts['limitTtl'],
        'number': number
      };

      let authNames = ['api-key', 'user-id'];
      let contentTypes = ['application/x-www-form-urlencoded'];
      let accepts = ['application/json'];
      let returnType = PhonePlaybackResponse;
      return this.apiClient.callApi(
        '/phone-playback', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the phoneVerify operation.
     * @callback module:api/TelephonyApi~phoneVerifyCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PhoneVerifyResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Phone Verify
     * Make an automated call to any valid phone number and playback a unique security code
     * @param {String} number The phone number to send the verification code to
     * @param {Object} opts Optional parameters
     * @param {Number} [codeLength = 6)] The number of digits to use in the security code (between 4 and 12)
     * @param {String} [countryCode] ISO 2-letter country code, assume numbers are based in this country. <br>If not set numbers are assumed to be in international format (with or without the leading + sign)
     * @param {String} [languageCode = 'en')] The language to playback the verification code in, available languages are: <ul> <li>de - German</li> <li>en - English</li> <li>es - Spanish</li> <li>fr - French</li> <li>it - Italian</li> <li>pt - Portuguese</li> <li>ru - Russian</li> </ul>
     * @param {Number} [limit = 3)] Limit the total number of calls allowed to the supplied phone number, if the limit is reached within the TTL then error code 14 will be returned
     * @param {Number} [limitTtl = 1)] Set the TTL in number of days that the 'limit' option will remember a phone number (the default is 1 day and the maximum is 365 days)
     * @param {Number} [playbackDelay = 800)] The delay in milliseconds between the playback of each security code
     * @param {Number} [securityCode] Pass in your own security code. This is useful if you have implemented TOTP or similar 2FA methods. If not set then we will generate a secure random code
     * @param {module:api/TelephonyApi~phoneVerifyCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PhoneVerifyResponse}
     */
    phoneVerify(number, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'number' is set
      if (number === undefined || number === null) {
        throw new Error("Missing the required parameter 'number' when calling phoneVerify");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
        'code-length': opts['codeLength'],
        'country-code': opts['countryCode'],
        'language-code': opts['languageCode'],
        'limit': opts['limit'],
        'limit-ttl': opts['limitTtl'],
        'number': number,
        'playback-delay': opts['playbackDelay'],
        'security-code': opts['securityCode']
      };

      let authNames = ['api-key', 'user-id'];
      let contentTypes = ['application/x-www-form-urlencoded'];
      let accepts = ['application/json'];
      let returnType = PhoneVerifyResponse;
      return this.apiClient.callApi(
        '/phone-verify', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the sMSVerify operation.
     * @callback module:api/TelephonyApi~sMSVerifyCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SMSVerifyResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * SMS Verify
     * Send a unique security code to any mobile device via SMS
     * @param {String} number The phone number to send a verification code to
     * @param {Object} opts Optional parameters
     * @param {Number} [codeLength = 5)] The number of digits to use in the security code (must be between 4 and 12)
     * @param {String} [countryCode] ISO 2-letter country code, assume numbers are based in this country. <br>If not set numbers are assumed to be in international format (with or without the leading + sign)
     * @param {String} [languageCode = 'en')] The language to send the verification code in, available languages are: <ul> <li>de - German</li> <li>en - English</li> <li>es - Spanish</li> <li>fr - French</li> <li>it - Italian</li> <li>pt - Portuguese</li> <li>ru - Russian</li> </ul>
     * @param {Number} [limit = 10)] Limit the total number of SMS allowed to the supplied phone number, if the limit is reached within the TTL then error code 14 will be returned
     * @param {Number} [limitTtl = 1)] Set the TTL in number of days that the 'limit' option will remember a phone number (the default is 1 day and the maximum is 365 days)
     * @param {Number} [securityCode] Pass in your own security code. This is useful if you have implemented TOTP or similar 2FA methods. If not set then we will generate a secure random code
     * @param {module:api/TelephonyApi~sMSVerifyCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SMSVerifyResponse}
     */
    sMSVerify(number, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'number' is set
      if (number === undefined || number === null) {
        throw new Error("Missing the required parameter 'number' when calling sMSVerify");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
        'code-length': opts['codeLength'],
        'country-code': opts['countryCode'],
        'language-code': opts['languageCode'],
        'limit': opts['limit'],
        'limit-ttl': opts['limitTtl'],
        'number': number,
        'security-code': opts['securityCode']
      };

      let authNames = ['api-key', 'user-id'];
      let contentTypes = ['application/x-www-form-urlencoded'];
      let accepts = ['application/json'];
      let returnType = SMSVerifyResponse;
      return this.apiClient.callApi(
        '/sms-verify', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the verifySecurityCode operation.
     * @callback module:api/TelephonyApi~verifySecurityCodeCallback
     * @param {String} error Error message, if any.
     * @param {module:model/VerifySecurityCodeResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Verify Security Code
     * Check if a security code sent via SMS Verify or Phone Verify is valid
     * @param {String} securityCode The security code to verify
     * @param {Object} opts Optional parameters
     * @param {String} [limitBy] If set then enable additional brute-force protection by limiting the number of attempts by the supplied value. This can be set to any unique identifier you would like to limit by, for example a hash of the users email, phone number or IP address. Requests to this API will be ignored after approximately 10 failed verification attempts
     * @param {module:api/TelephonyApi~verifySecurityCodeCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/VerifySecurityCodeResponse}
     */
    verifySecurityCode(securityCode, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'securityCode' is set
      if (securityCode === undefined || securityCode === null) {
        throw new Error("Missing the required parameter 'securityCode' when calling verifySecurityCode");
      }

      let pathParams = {
      };
      let queryParams = {
        'security-code': securityCode,
        'limit-by': opts['limitBy']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api-key', 'user-id'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = VerifySecurityCodeResponse;
      return this.apiClient.callApi(
        '/verify-security-code', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
