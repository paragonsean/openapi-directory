/**
 * Neutrino API
 * The general-purpose API
 *
 * The version of the OpenAPI document: 3.6.4
 * Contact: ops@neutrinoapi.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The ConvertResponse model module.
 * @module model/ConvertResponse
 * @version 3.6.4
 */
class ConvertResponse {
    /**
     * Constructs a new <code>ConvertResponse</code>.
     * @alias module:model/ConvertResponse
     * @param fromType {String} The type of the value being converted from
     * @param fromValue {String} The value being converted from
     * @param result {String} The result of the conversion in string format
     * @param resultFloat {Number} The result of the conversion as a floating-point number
     * @param toType {String} The type being converted to
     * @param valid {Boolean} True if the conversion was successful and produced a valid result
     */
    constructor(fromType, fromValue, result, resultFloat, toType, valid) { 
        
        ConvertResponse.initialize(this, fromType, fromValue, result, resultFloat, toType, valid);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, fromType, fromValue, result, resultFloat, toType, valid) { 
        obj['from-type'] = fromType;
        obj['from-value'] = fromValue;
        obj['result'] = result;
        obj['result-float'] = resultFloat;
        obj['to-type'] = toType;
        obj['valid'] = valid;
    }

    /**
     * Constructs a <code>ConvertResponse</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ConvertResponse} obj Optional instance to populate.
     * @return {module:model/ConvertResponse} The populated <code>ConvertResponse</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ConvertResponse();

            if (data.hasOwnProperty('from-type')) {
                obj['from-type'] = ApiClient.convertToType(data['from-type'], 'String');
            }
            if (data.hasOwnProperty('from-value')) {
                obj['from-value'] = ApiClient.convertToType(data['from-value'], 'String');
            }
            if (data.hasOwnProperty('result')) {
                obj['result'] = ApiClient.convertToType(data['result'], 'String');
            }
            if (data.hasOwnProperty('result-float')) {
                obj['result-float'] = ApiClient.convertToType(data['result-float'], 'Number');
            }
            if (data.hasOwnProperty('to-type')) {
                obj['to-type'] = ApiClient.convertToType(data['to-type'], 'String');
            }
            if (data.hasOwnProperty('valid')) {
                obj['valid'] = ApiClient.convertToType(data['valid'], 'Boolean');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ConvertResponse</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ConvertResponse</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of ConvertResponse.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['from-type'] && !(typeof data['from-type'] === 'string' || data['from-type'] instanceof String)) {
            throw new Error("Expected the field `from-type` to be a primitive type in the JSON string but got " + data['from-type']);
        }
        // ensure the json data is a string
        if (data['from-value'] && !(typeof data['from-value'] === 'string' || data['from-value'] instanceof String)) {
            throw new Error("Expected the field `from-value` to be a primitive type in the JSON string but got " + data['from-value']);
        }
        // ensure the json data is a string
        if (data['result'] && !(typeof data['result'] === 'string' || data['result'] instanceof String)) {
            throw new Error("Expected the field `result` to be a primitive type in the JSON string but got " + data['result']);
        }
        // ensure the json data is a string
        if (data['to-type'] && !(typeof data['to-type'] === 'string' || data['to-type'] instanceof String)) {
            throw new Error("Expected the field `to-type` to be a primitive type in the JSON string but got " + data['to-type']);
        }

        return true;
    }


}

ConvertResponse.RequiredProperties = ["from-type", "from-value", "result", "result-float", "to-type", "valid"];

/**
 * The type of the value being converted from
 * @member {String} from-type
 */
ConvertResponse.prototype['from-type'] = undefined;

/**
 * The value being converted from
 * @member {String} from-value
 */
ConvertResponse.prototype['from-value'] = undefined;

/**
 * The result of the conversion in string format
 * @member {String} result
 */
ConvertResponse.prototype['result'] = undefined;

/**
 * The result of the conversion as a floating-point number
 * @member {Number} result-float
 */
ConvertResponse.prototype['result-float'] = undefined;

/**
 * The type being converted to
 * @member {String} to-type
 */
ConvertResponse.prototype['to-type'] = undefined;

/**
 * True if the conversion was successful and produced a valid result
 * @member {Boolean} valid
 */
ConvertResponse.prototype['valid'] = undefined;






export default ConvertResponse;

