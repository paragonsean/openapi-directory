/**
 * Neutrino API
 * The general-purpose API
 *
 * The version of the OpenAPI document: 3.6.4
 * Contact: ops@neutrinoapi.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The URLInfoResponse model module.
 * @module model/URLInfoResponse
 * @version 3.6.4
 */
class URLInfoResponse {
    /**
     * Constructs a new <code>URLInfoResponse</code>.
     * @alias module:model/URLInfoResponse
     * @param content {String} The actual content this URL responded with. Only set if the 'fetch-content' option was used
     * @param contentEncoding {String} The encoding format the URL uses
     * @param contentSize {Number} The size of the URL content in bytes
     * @param contentType {String} The content-type this URL serves
     * @param httpOk {Boolean} True if this URL responded with an HTTP OK (200) status
     * @param httpRedirect {Boolean} True if this URL responded with an HTTP redirect
     * @param httpStatus {Number} The HTTP status code this URL responded with. An HTTP status of 0 indicates a network level issue
     * @param httpStatusMessage {Number} The HTTP status message assoicated with the status code
     * @param isError {Boolean} True if an error occurred while loading the URL. This includes network errors, TLS errors and timeouts
     * @param isTimeout {Boolean} True if a timeout occurred while loading the URL. You can set the timeout with the request parameter 'timeout'
     * @param languageCode {String} The ISO 2-letter language code of the page. Extracted from either the HTML document or via HTTP headers
     * @param loadTime {Number} The time taken to load the URL content in seconds
     * @param query {Object.<String, String>} A key-value map of the URL query paramaters
     * @param real {Boolean} Is this URL actually serving real content
     * @param serverCity {String} The servers IP geo-location: full city name (if detectable)
     * @param serverCountry {String} The servers IP geo-location: full country name
     * @param serverCountryCode {String} The servers IP geo-location: ISO 2-letter country code
     * @param serverHostname {String} The servers hostname (PTR record)
     * @param serverIp {String} The IP address of the server hosting this URL
     * @param serverName {String} The name of the server software hosting this URL
     * @param serverRegion {String} The servers IP geo-location: full region name (if detectable)
     * @param title {String} The document title
     * @param url {String} The fully qualified URL. This may be different to the URL requested if http-redirect is true
     * @param urlPath {String} The URL path
     * @param urlPort {Number} The URL port
     * @param urlProtocol {String} The URL protocol, usually http or https
     * @param valid {Boolean} Is this a valid well-formed URL
     */
    constructor(content, contentEncoding, contentSize, contentType, httpOk, httpRedirect, httpStatus, httpStatusMessage, isError, isTimeout, languageCode, loadTime, query, real, serverCity, serverCountry, serverCountryCode, serverHostname, serverIp, serverName, serverRegion, title, url, urlPath, urlPort, urlProtocol, valid) { 
        
        URLInfoResponse.initialize(this, content, contentEncoding, contentSize, contentType, httpOk, httpRedirect, httpStatus, httpStatusMessage, isError, isTimeout, languageCode, loadTime, query, real, serverCity, serverCountry, serverCountryCode, serverHostname, serverIp, serverName, serverRegion, title, url, urlPath, urlPort, urlProtocol, valid);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, content, contentEncoding, contentSize, contentType, httpOk, httpRedirect, httpStatus, httpStatusMessage, isError, isTimeout, languageCode, loadTime, query, real, serverCity, serverCountry, serverCountryCode, serverHostname, serverIp, serverName, serverRegion, title, url, urlPath, urlPort, urlProtocol, valid) { 
        obj['content'] = content;
        obj['content-encoding'] = contentEncoding;
        obj['content-size'] = contentSize;
        obj['content-type'] = contentType;
        obj['http-ok'] = httpOk;
        obj['http-redirect'] = httpRedirect;
        obj['http-status'] = httpStatus;
        obj['http-status-message'] = httpStatusMessage;
        obj['is-error'] = isError;
        obj['is-timeout'] = isTimeout;
        obj['language-code'] = languageCode;
        obj['load-time'] = loadTime;
        obj['query'] = query;
        obj['real'] = real;
        obj['server-city'] = serverCity;
        obj['server-country'] = serverCountry;
        obj['server-country-code'] = serverCountryCode;
        obj['server-hostname'] = serverHostname;
        obj['server-ip'] = serverIp;
        obj['server-name'] = serverName;
        obj['server-region'] = serverRegion;
        obj['title'] = title;
        obj['url'] = url;
        obj['url-path'] = urlPath;
        obj['url-port'] = urlPort;
        obj['url-protocol'] = urlProtocol;
        obj['valid'] = valid;
    }

    /**
     * Constructs a <code>URLInfoResponse</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/URLInfoResponse} obj Optional instance to populate.
     * @return {module:model/URLInfoResponse} The populated <code>URLInfoResponse</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new URLInfoResponse();

            if (data.hasOwnProperty('content')) {
                obj['content'] = ApiClient.convertToType(data['content'], 'String');
            }
            if (data.hasOwnProperty('content-encoding')) {
                obj['content-encoding'] = ApiClient.convertToType(data['content-encoding'], 'String');
            }
            if (data.hasOwnProperty('content-size')) {
                obj['content-size'] = ApiClient.convertToType(data['content-size'], 'Number');
            }
            if (data.hasOwnProperty('content-type')) {
                obj['content-type'] = ApiClient.convertToType(data['content-type'], 'String');
            }
            if (data.hasOwnProperty('http-ok')) {
                obj['http-ok'] = ApiClient.convertToType(data['http-ok'], 'Boolean');
            }
            if (data.hasOwnProperty('http-redirect')) {
                obj['http-redirect'] = ApiClient.convertToType(data['http-redirect'], 'Boolean');
            }
            if (data.hasOwnProperty('http-status')) {
                obj['http-status'] = ApiClient.convertToType(data['http-status'], 'Number');
            }
            if (data.hasOwnProperty('http-status-message')) {
                obj['http-status-message'] = ApiClient.convertToType(data['http-status-message'], 'Number');
            }
            if (data.hasOwnProperty('is-error')) {
                obj['is-error'] = ApiClient.convertToType(data['is-error'], 'Boolean');
            }
            if (data.hasOwnProperty('is-timeout')) {
                obj['is-timeout'] = ApiClient.convertToType(data['is-timeout'], 'Boolean');
            }
            if (data.hasOwnProperty('language-code')) {
                obj['language-code'] = ApiClient.convertToType(data['language-code'], 'String');
            }
            if (data.hasOwnProperty('load-time')) {
                obj['load-time'] = ApiClient.convertToType(data['load-time'], 'Number');
            }
            if (data.hasOwnProperty('query')) {
                obj['query'] = ApiClient.convertToType(data['query'], {'String': 'String'});
            }
            if (data.hasOwnProperty('real')) {
                obj['real'] = ApiClient.convertToType(data['real'], 'Boolean');
            }
            if (data.hasOwnProperty('server-city')) {
                obj['server-city'] = ApiClient.convertToType(data['server-city'], 'String');
            }
            if (data.hasOwnProperty('server-country')) {
                obj['server-country'] = ApiClient.convertToType(data['server-country'], 'String');
            }
            if (data.hasOwnProperty('server-country-code')) {
                obj['server-country-code'] = ApiClient.convertToType(data['server-country-code'], 'String');
            }
            if (data.hasOwnProperty('server-hostname')) {
                obj['server-hostname'] = ApiClient.convertToType(data['server-hostname'], 'String');
            }
            if (data.hasOwnProperty('server-ip')) {
                obj['server-ip'] = ApiClient.convertToType(data['server-ip'], 'String');
            }
            if (data.hasOwnProperty('server-name')) {
                obj['server-name'] = ApiClient.convertToType(data['server-name'], 'String');
            }
            if (data.hasOwnProperty('server-region')) {
                obj['server-region'] = ApiClient.convertToType(data['server-region'], 'String');
            }
            if (data.hasOwnProperty('title')) {
                obj['title'] = ApiClient.convertToType(data['title'], 'String');
            }
            if (data.hasOwnProperty('url')) {
                obj['url'] = ApiClient.convertToType(data['url'], 'String');
            }
            if (data.hasOwnProperty('url-path')) {
                obj['url-path'] = ApiClient.convertToType(data['url-path'], 'String');
            }
            if (data.hasOwnProperty('url-port')) {
                obj['url-port'] = ApiClient.convertToType(data['url-port'], 'Number');
            }
            if (data.hasOwnProperty('url-protocol')) {
                obj['url-protocol'] = ApiClient.convertToType(data['url-protocol'], 'String');
            }
            if (data.hasOwnProperty('valid')) {
                obj['valid'] = ApiClient.convertToType(data['valid'], 'Boolean');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>URLInfoResponse</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>URLInfoResponse</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of URLInfoResponse.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['content'] && !(typeof data['content'] === 'string' || data['content'] instanceof String)) {
            throw new Error("Expected the field `content` to be a primitive type in the JSON string but got " + data['content']);
        }
        // ensure the json data is a string
        if (data['content-encoding'] && !(typeof data['content-encoding'] === 'string' || data['content-encoding'] instanceof String)) {
            throw new Error("Expected the field `content-encoding` to be a primitive type in the JSON string but got " + data['content-encoding']);
        }
        // ensure the json data is a string
        if (data['content-type'] && !(typeof data['content-type'] === 'string' || data['content-type'] instanceof String)) {
            throw new Error("Expected the field `content-type` to be a primitive type in the JSON string but got " + data['content-type']);
        }
        // ensure the json data is a string
        if (data['language-code'] && !(typeof data['language-code'] === 'string' || data['language-code'] instanceof String)) {
            throw new Error("Expected the field `language-code` to be a primitive type in the JSON string but got " + data['language-code']);
        }
        // ensure the json data is a string
        if (data['server-city'] && !(typeof data['server-city'] === 'string' || data['server-city'] instanceof String)) {
            throw new Error("Expected the field `server-city` to be a primitive type in the JSON string but got " + data['server-city']);
        }
        // ensure the json data is a string
        if (data['server-country'] && !(typeof data['server-country'] === 'string' || data['server-country'] instanceof String)) {
            throw new Error("Expected the field `server-country` to be a primitive type in the JSON string but got " + data['server-country']);
        }
        // ensure the json data is a string
        if (data['server-country-code'] && !(typeof data['server-country-code'] === 'string' || data['server-country-code'] instanceof String)) {
            throw new Error("Expected the field `server-country-code` to be a primitive type in the JSON string but got " + data['server-country-code']);
        }
        // ensure the json data is a string
        if (data['server-hostname'] && !(typeof data['server-hostname'] === 'string' || data['server-hostname'] instanceof String)) {
            throw new Error("Expected the field `server-hostname` to be a primitive type in the JSON string but got " + data['server-hostname']);
        }
        // ensure the json data is a string
        if (data['server-ip'] && !(typeof data['server-ip'] === 'string' || data['server-ip'] instanceof String)) {
            throw new Error("Expected the field `server-ip` to be a primitive type in the JSON string but got " + data['server-ip']);
        }
        // ensure the json data is a string
        if (data['server-name'] && !(typeof data['server-name'] === 'string' || data['server-name'] instanceof String)) {
            throw new Error("Expected the field `server-name` to be a primitive type in the JSON string but got " + data['server-name']);
        }
        // ensure the json data is a string
        if (data['server-region'] && !(typeof data['server-region'] === 'string' || data['server-region'] instanceof String)) {
            throw new Error("Expected the field `server-region` to be a primitive type in the JSON string but got " + data['server-region']);
        }
        // ensure the json data is a string
        if (data['title'] && !(typeof data['title'] === 'string' || data['title'] instanceof String)) {
            throw new Error("Expected the field `title` to be a primitive type in the JSON string but got " + data['title']);
        }
        // ensure the json data is a string
        if (data['url'] && !(typeof data['url'] === 'string' || data['url'] instanceof String)) {
            throw new Error("Expected the field `url` to be a primitive type in the JSON string but got " + data['url']);
        }
        // ensure the json data is a string
        if (data['url-path'] && !(typeof data['url-path'] === 'string' || data['url-path'] instanceof String)) {
            throw new Error("Expected the field `url-path` to be a primitive type in the JSON string but got " + data['url-path']);
        }
        // ensure the json data is a string
        if (data['url-protocol'] && !(typeof data['url-protocol'] === 'string' || data['url-protocol'] instanceof String)) {
            throw new Error("Expected the field `url-protocol` to be a primitive type in the JSON string but got " + data['url-protocol']);
        }

        return true;
    }


}

URLInfoResponse.RequiredProperties = ["content", "content-encoding", "content-size", "content-type", "http-ok", "http-redirect", "http-status", "http-status-message", "is-error", "is-timeout", "language-code", "load-time", "query", "real", "server-city", "server-country", "server-country-code", "server-hostname", "server-ip", "server-name", "server-region", "title", "url", "url-path", "url-port", "url-protocol", "valid"];

/**
 * The actual content this URL responded with. Only set if the 'fetch-content' option was used
 * @member {String} content
 */
URLInfoResponse.prototype['content'] = undefined;

/**
 * The encoding format the URL uses
 * @member {String} content-encoding
 */
URLInfoResponse.prototype['content-encoding'] = undefined;

/**
 * The size of the URL content in bytes
 * @member {Number} content-size
 */
URLInfoResponse.prototype['content-size'] = undefined;

/**
 * The content-type this URL serves
 * @member {String} content-type
 */
URLInfoResponse.prototype['content-type'] = undefined;

/**
 * True if this URL responded with an HTTP OK (200) status
 * @member {Boolean} http-ok
 */
URLInfoResponse.prototype['http-ok'] = undefined;

/**
 * True if this URL responded with an HTTP redirect
 * @member {Boolean} http-redirect
 */
URLInfoResponse.prototype['http-redirect'] = undefined;

/**
 * The HTTP status code this URL responded with. An HTTP status of 0 indicates a network level issue
 * @member {Number} http-status
 */
URLInfoResponse.prototype['http-status'] = undefined;

/**
 * The HTTP status message assoicated with the status code
 * @member {Number} http-status-message
 */
URLInfoResponse.prototype['http-status-message'] = undefined;

/**
 * True if an error occurred while loading the URL. This includes network errors, TLS errors and timeouts
 * @member {Boolean} is-error
 */
URLInfoResponse.prototype['is-error'] = undefined;

/**
 * True if a timeout occurred while loading the URL. You can set the timeout with the request parameter 'timeout'
 * @member {Boolean} is-timeout
 */
URLInfoResponse.prototype['is-timeout'] = undefined;

/**
 * The ISO 2-letter language code of the page. Extracted from either the HTML document or via HTTP headers
 * @member {String} language-code
 */
URLInfoResponse.prototype['language-code'] = undefined;

/**
 * The time taken to load the URL content in seconds
 * @member {Number} load-time
 */
URLInfoResponse.prototype['load-time'] = undefined;

/**
 * A key-value map of the URL query paramaters
 * @member {Object.<String, String>} query
 */
URLInfoResponse.prototype['query'] = undefined;

/**
 * Is this URL actually serving real content
 * @member {Boolean} real
 */
URLInfoResponse.prototype['real'] = undefined;

/**
 * The servers IP geo-location: full city name (if detectable)
 * @member {String} server-city
 */
URLInfoResponse.prototype['server-city'] = undefined;

/**
 * The servers IP geo-location: full country name
 * @member {String} server-country
 */
URLInfoResponse.prototype['server-country'] = undefined;

/**
 * The servers IP geo-location: ISO 2-letter country code
 * @member {String} server-country-code
 */
URLInfoResponse.prototype['server-country-code'] = undefined;

/**
 * The servers hostname (PTR record)
 * @member {String} server-hostname
 */
URLInfoResponse.prototype['server-hostname'] = undefined;

/**
 * The IP address of the server hosting this URL
 * @member {String} server-ip
 */
URLInfoResponse.prototype['server-ip'] = undefined;

/**
 * The name of the server software hosting this URL
 * @member {String} server-name
 */
URLInfoResponse.prototype['server-name'] = undefined;

/**
 * The servers IP geo-location: full region name (if detectable)
 * @member {String} server-region
 */
URLInfoResponse.prototype['server-region'] = undefined;

/**
 * The document title
 * @member {String} title
 */
URLInfoResponse.prototype['title'] = undefined;

/**
 * The fully qualified URL. This may be different to the URL requested if http-redirect is true
 * @member {String} url
 */
URLInfoResponse.prototype['url'] = undefined;

/**
 * The URL path
 * @member {String} url-path
 */
URLInfoResponse.prototype['url-path'] = undefined;

/**
 * The URL port
 * @member {Number} url-port
 */
URLInfoResponse.prototype['url-port'] = undefined;

/**
 * The URL protocol, usually http or https
 * @member {String} url-protocol
 */
URLInfoResponse.prototype['url-protocol'] = undefined;

/**
 * Is this a valid well-formed URL
 * @member {Boolean} valid
 */
URLInfoResponse.prototype['valid'] = undefined;






export default URLInfoResponse;

