/**
 * Neutrino API
 * The general-purpose API
 *
 * The version of the OpenAPI document: 3.6.4
 * Contact: ops@neutrinoapi.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The IPProbeResponse model module.
 * @module model/IPProbeResponse
 * @version 3.6.4
 */
class IPProbeResponse {
    /**
     * Constructs a new <code>IPProbeResponse</code>.
     * @alias module:model/IPProbeResponse
     * @param asAge {Number} The age of the autonomous system (AS) in number of years since registration
     * @param asCidr {String} The autonomous system (AS) CIDR range
     * @param asCountryCode {String} The autonomous system (AS) ISO 2-letter country code
     * @param asCountryCode3 {String} The autonomous system (AS) ISO 3-letter country code
     * @param asDescription {String} The autonomous system (AS) description / company name
     * @param asDomains {Array.<String>} Array of all the domains associated with the autonomous system (AS)
     * @param asn {String} The autonomous system (AS) number
     * @param city {String} Full city name (if detectable)
     * @param continentCode {String} ISO 2-letter continent code
     * @param country {String} Full country name
     * @param countryCode {String} ISO 2-letter country code
     * @param countryCode3 {String} ISO 3-letter country code
     * @param currencyCode {String} ISO 4217 currency code associated with the country
     * @param hostDomain {String} The IPs host domain
     * @param hostname {String} The IPs full hostname (PTR)
     * @param ip {String} The IP address
     * @param isBogon {Boolean} True if this is a bogon IP address such as a private network, local network or reserved address
     * @param isHosting {Boolean} True if this IP belongs to a hosting company. Note that this can still be true even if the provider type is VPN/proxy, this occurs in the case that the IP is detected as both types
     * @param isIsp {Boolean} True if this IP belongs to an internet service provider. Note that this can still be true even if the provider type is VPN/proxy, this occurs in the case that the IP is detected as both types
     * @param isProxy {Boolean} True if this IP ia a proxy
     * @param isV4Mapped {Boolean} True if this is a <a href=\"https://en.wikipedia.org/wiki/IPv6#IPv4-mapped_IPv6_addresses\">IPv4 mapped IPv6 address</a>
     * @param isV6 {Boolean} True if this is a IPv6 address. False if IPv4
     * @param isVpn {Boolean} True if this IP ia a VPN
     * @param providerDescription {String} A description of the provider (usually extracted from the providers website)
     * @param providerDomain {String} The domain name of the provider
     * @param providerType {String} The detected provider type, possible values are: <br> <ul> <li>isp - IP belongs to an internet service provider. This includes both mobile, home and business internet providers</li> <li>hosting - IP belongs to a hosting company. This includes website hosting, cloud computing platforms and colocation facilities</li> <li>vpn - IP belongs to a VPN provider</li> <li>proxy - IP belongs to a proxy service. This includes HTTP/SOCKS proxies and browser based proxies</li> <li>university - IP belongs to a university/college/campus</li> <li>government - IP belongs to a government department. This includes military facilities</li> <li>commercial - IP belongs to a commercial entity such as a corporate headquarters or company office</li> <li>unknown - could not identify the provider type</li> </ul>
     * @param providerWebsite {String} The website URL for the provider
     * @param region {String} Full region name (if detectable)
     * @param regionCode {String} ISO 3166-2 region code (if detectable)
     * @param valid {Boolean} True if this is a valid IPv4 or IPv6 address
     * @param vpnDomain {String} The domain of the VPN provider (may be empty if the VPN domain is not detectable)
     */
    constructor(asAge, asCidr, asCountryCode, asCountryCode3, asDescription, asDomains, asn, city, continentCode, country, countryCode, countryCode3, currencyCode, hostDomain, hostname, ip, isBogon, isHosting, isIsp, isProxy, isV4Mapped, isV6, isVpn, providerDescription, providerDomain, providerType, providerWebsite, region, regionCode, valid, vpnDomain) { 
        
        IPProbeResponse.initialize(this, asAge, asCidr, asCountryCode, asCountryCode3, asDescription, asDomains, asn, city, continentCode, country, countryCode, countryCode3, currencyCode, hostDomain, hostname, ip, isBogon, isHosting, isIsp, isProxy, isV4Mapped, isV6, isVpn, providerDescription, providerDomain, providerType, providerWebsite, region, regionCode, valid, vpnDomain);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, asAge, asCidr, asCountryCode, asCountryCode3, asDescription, asDomains, asn, city, continentCode, country, countryCode, countryCode3, currencyCode, hostDomain, hostname, ip, isBogon, isHosting, isIsp, isProxy, isV4Mapped, isV6, isVpn, providerDescription, providerDomain, providerType, providerWebsite, region, regionCode, valid, vpnDomain) { 
        obj['as-age'] = asAge;
        obj['as-cidr'] = asCidr;
        obj['as-country-code'] = asCountryCode;
        obj['as-country-code3'] = asCountryCode3;
        obj['as-description'] = asDescription;
        obj['as-domains'] = asDomains;
        obj['asn'] = asn;
        obj['city'] = city;
        obj['continent-code'] = continentCode;
        obj['country'] = country;
        obj['country-code'] = countryCode;
        obj['country-code3'] = countryCode3;
        obj['currency-code'] = currencyCode;
        obj['host-domain'] = hostDomain;
        obj['hostname'] = hostname;
        obj['ip'] = ip;
        obj['is-bogon'] = isBogon;
        obj['is-hosting'] = isHosting;
        obj['is-isp'] = isIsp;
        obj['is-proxy'] = isProxy;
        obj['is-v4-mapped'] = isV4Mapped;
        obj['is-v6'] = isV6;
        obj['is-vpn'] = isVpn;
        obj['provider-description'] = providerDescription;
        obj['provider-domain'] = providerDomain;
        obj['provider-type'] = providerType;
        obj['provider-website'] = providerWebsite;
        obj['region'] = region;
        obj['region-code'] = regionCode;
        obj['valid'] = valid;
        obj['vpn-domain'] = vpnDomain;
    }

    /**
     * Constructs a <code>IPProbeResponse</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/IPProbeResponse} obj Optional instance to populate.
     * @return {module:model/IPProbeResponse} The populated <code>IPProbeResponse</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new IPProbeResponse();

            if (data.hasOwnProperty('as-age')) {
                obj['as-age'] = ApiClient.convertToType(data['as-age'], 'Number');
            }
            if (data.hasOwnProperty('as-cidr')) {
                obj['as-cidr'] = ApiClient.convertToType(data['as-cidr'], 'String');
            }
            if (data.hasOwnProperty('as-country-code')) {
                obj['as-country-code'] = ApiClient.convertToType(data['as-country-code'], 'String');
            }
            if (data.hasOwnProperty('as-country-code3')) {
                obj['as-country-code3'] = ApiClient.convertToType(data['as-country-code3'], 'String');
            }
            if (data.hasOwnProperty('as-description')) {
                obj['as-description'] = ApiClient.convertToType(data['as-description'], 'String');
            }
            if (data.hasOwnProperty('as-domains')) {
                obj['as-domains'] = ApiClient.convertToType(data['as-domains'], ['String']);
            }
            if (data.hasOwnProperty('asn')) {
                obj['asn'] = ApiClient.convertToType(data['asn'], 'String');
            }
            if (data.hasOwnProperty('city')) {
                obj['city'] = ApiClient.convertToType(data['city'], 'String');
            }
            if (data.hasOwnProperty('continent-code')) {
                obj['continent-code'] = ApiClient.convertToType(data['continent-code'], 'String');
            }
            if (data.hasOwnProperty('country')) {
                obj['country'] = ApiClient.convertToType(data['country'], 'String');
            }
            if (data.hasOwnProperty('country-code')) {
                obj['country-code'] = ApiClient.convertToType(data['country-code'], 'String');
            }
            if (data.hasOwnProperty('country-code3')) {
                obj['country-code3'] = ApiClient.convertToType(data['country-code3'], 'String');
            }
            if (data.hasOwnProperty('currency-code')) {
                obj['currency-code'] = ApiClient.convertToType(data['currency-code'], 'String');
            }
            if (data.hasOwnProperty('host-domain')) {
                obj['host-domain'] = ApiClient.convertToType(data['host-domain'], 'String');
            }
            if (data.hasOwnProperty('hostname')) {
                obj['hostname'] = ApiClient.convertToType(data['hostname'], 'String');
            }
            if (data.hasOwnProperty('ip')) {
                obj['ip'] = ApiClient.convertToType(data['ip'], 'String');
            }
            if (data.hasOwnProperty('is-bogon')) {
                obj['is-bogon'] = ApiClient.convertToType(data['is-bogon'], 'Boolean');
            }
            if (data.hasOwnProperty('is-hosting')) {
                obj['is-hosting'] = ApiClient.convertToType(data['is-hosting'], 'Boolean');
            }
            if (data.hasOwnProperty('is-isp')) {
                obj['is-isp'] = ApiClient.convertToType(data['is-isp'], 'Boolean');
            }
            if (data.hasOwnProperty('is-proxy')) {
                obj['is-proxy'] = ApiClient.convertToType(data['is-proxy'], 'Boolean');
            }
            if (data.hasOwnProperty('is-v4-mapped')) {
                obj['is-v4-mapped'] = ApiClient.convertToType(data['is-v4-mapped'], 'Boolean');
            }
            if (data.hasOwnProperty('is-v6')) {
                obj['is-v6'] = ApiClient.convertToType(data['is-v6'], 'Boolean');
            }
            if (data.hasOwnProperty('is-vpn')) {
                obj['is-vpn'] = ApiClient.convertToType(data['is-vpn'], 'Boolean');
            }
            if (data.hasOwnProperty('provider-description')) {
                obj['provider-description'] = ApiClient.convertToType(data['provider-description'], 'String');
            }
            if (data.hasOwnProperty('provider-domain')) {
                obj['provider-domain'] = ApiClient.convertToType(data['provider-domain'], 'String');
            }
            if (data.hasOwnProperty('provider-type')) {
                obj['provider-type'] = ApiClient.convertToType(data['provider-type'], 'String');
            }
            if (data.hasOwnProperty('provider-website')) {
                obj['provider-website'] = ApiClient.convertToType(data['provider-website'], 'String');
            }
            if (data.hasOwnProperty('region')) {
                obj['region'] = ApiClient.convertToType(data['region'], 'String');
            }
            if (data.hasOwnProperty('region-code')) {
                obj['region-code'] = ApiClient.convertToType(data['region-code'], 'String');
            }
            if (data.hasOwnProperty('valid')) {
                obj['valid'] = ApiClient.convertToType(data['valid'], 'Boolean');
            }
            if (data.hasOwnProperty('vpn-domain')) {
                obj['vpn-domain'] = ApiClient.convertToType(data['vpn-domain'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>IPProbeResponse</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>IPProbeResponse</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of IPProbeResponse.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['as-cidr'] && !(typeof data['as-cidr'] === 'string' || data['as-cidr'] instanceof String)) {
            throw new Error("Expected the field `as-cidr` to be a primitive type in the JSON string but got " + data['as-cidr']);
        }
        // ensure the json data is a string
        if (data['as-country-code'] && !(typeof data['as-country-code'] === 'string' || data['as-country-code'] instanceof String)) {
            throw new Error("Expected the field `as-country-code` to be a primitive type in the JSON string but got " + data['as-country-code']);
        }
        // ensure the json data is a string
        if (data['as-country-code3'] && !(typeof data['as-country-code3'] === 'string' || data['as-country-code3'] instanceof String)) {
            throw new Error("Expected the field `as-country-code3` to be a primitive type in the JSON string but got " + data['as-country-code3']);
        }
        // ensure the json data is a string
        if (data['as-description'] && !(typeof data['as-description'] === 'string' || data['as-description'] instanceof String)) {
            throw new Error("Expected the field `as-description` to be a primitive type in the JSON string but got " + data['as-description']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['as-domains'])) {
            throw new Error("Expected the field `as-domains` to be an array in the JSON data but got " + data['as-domains']);
        }
        // ensure the json data is a string
        if (data['asn'] && !(typeof data['asn'] === 'string' || data['asn'] instanceof String)) {
            throw new Error("Expected the field `asn` to be a primitive type in the JSON string but got " + data['asn']);
        }
        // ensure the json data is a string
        if (data['city'] && !(typeof data['city'] === 'string' || data['city'] instanceof String)) {
            throw new Error("Expected the field `city` to be a primitive type in the JSON string but got " + data['city']);
        }
        // ensure the json data is a string
        if (data['continent-code'] && !(typeof data['continent-code'] === 'string' || data['continent-code'] instanceof String)) {
            throw new Error("Expected the field `continent-code` to be a primitive type in the JSON string but got " + data['continent-code']);
        }
        // ensure the json data is a string
        if (data['country'] && !(typeof data['country'] === 'string' || data['country'] instanceof String)) {
            throw new Error("Expected the field `country` to be a primitive type in the JSON string but got " + data['country']);
        }
        // ensure the json data is a string
        if (data['country-code'] && !(typeof data['country-code'] === 'string' || data['country-code'] instanceof String)) {
            throw new Error("Expected the field `country-code` to be a primitive type in the JSON string but got " + data['country-code']);
        }
        // ensure the json data is a string
        if (data['country-code3'] && !(typeof data['country-code3'] === 'string' || data['country-code3'] instanceof String)) {
            throw new Error("Expected the field `country-code3` to be a primitive type in the JSON string but got " + data['country-code3']);
        }
        // ensure the json data is a string
        if (data['currency-code'] && !(typeof data['currency-code'] === 'string' || data['currency-code'] instanceof String)) {
            throw new Error("Expected the field `currency-code` to be a primitive type in the JSON string but got " + data['currency-code']);
        }
        // ensure the json data is a string
        if (data['host-domain'] && !(typeof data['host-domain'] === 'string' || data['host-domain'] instanceof String)) {
            throw new Error("Expected the field `host-domain` to be a primitive type in the JSON string but got " + data['host-domain']);
        }
        // ensure the json data is a string
        if (data['hostname'] && !(typeof data['hostname'] === 'string' || data['hostname'] instanceof String)) {
            throw new Error("Expected the field `hostname` to be a primitive type in the JSON string but got " + data['hostname']);
        }
        // ensure the json data is a string
        if (data['ip'] && !(typeof data['ip'] === 'string' || data['ip'] instanceof String)) {
            throw new Error("Expected the field `ip` to be a primitive type in the JSON string but got " + data['ip']);
        }
        // ensure the json data is a string
        if (data['provider-description'] && !(typeof data['provider-description'] === 'string' || data['provider-description'] instanceof String)) {
            throw new Error("Expected the field `provider-description` to be a primitive type in the JSON string but got " + data['provider-description']);
        }
        // ensure the json data is a string
        if (data['provider-domain'] && !(typeof data['provider-domain'] === 'string' || data['provider-domain'] instanceof String)) {
            throw new Error("Expected the field `provider-domain` to be a primitive type in the JSON string but got " + data['provider-domain']);
        }
        // ensure the json data is a string
        if (data['provider-type'] && !(typeof data['provider-type'] === 'string' || data['provider-type'] instanceof String)) {
            throw new Error("Expected the field `provider-type` to be a primitive type in the JSON string but got " + data['provider-type']);
        }
        // ensure the json data is a string
        if (data['provider-website'] && !(typeof data['provider-website'] === 'string' || data['provider-website'] instanceof String)) {
            throw new Error("Expected the field `provider-website` to be a primitive type in the JSON string but got " + data['provider-website']);
        }
        // ensure the json data is a string
        if (data['region'] && !(typeof data['region'] === 'string' || data['region'] instanceof String)) {
            throw new Error("Expected the field `region` to be a primitive type in the JSON string but got " + data['region']);
        }
        // ensure the json data is a string
        if (data['region-code'] && !(typeof data['region-code'] === 'string' || data['region-code'] instanceof String)) {
            throw new Error("Expected the field `region-code` to be a primitive type in the JSON string but got " + data['region-code']);
        }
        // ensure the json data is a string
        if (data['vpn-domain'] && !(typeof data['vpn-domain'] === 'string' || data['vpn-domain'] instanceof String)) {
            throw new Error("Expected the field `vpn-domain` to be a primitive type in the JSON string but got " + data['vpn-domain']);
        }

        return true;
    }


}

IPProbeResponse.RequiredProperties = ["as-age", "as-cidr", "as-country-code", "as-country-code3", "as-description", "as-domains", "asn", "city", "continent-code", "country", "country-code", "country-code3", "currency-code", "host-domain", "hostname", "ip", "is-bogon", "is-hosting", "is-isp", "is-proxy", "is-v4-mapped", "is-v6", "is-vpn", "provider-description", "provider-domain", "provider-type", "provider-website", "region", "region-code", "valid", "vpn-domain"];

/**
 * The age of the autonomous system (AS) in number of years since registration
 * @member {Number} as-age
 */
IPProbeResponse.prototype['as-age'] = undefined;

/**
 * The autonomous system (AS) CIDR range
 * @member {String} as-cidr
 */
IPProbeResponse.prototype['as-cidr'] = undefined;

/**
 * The autonomous system (AS) ISO 2-letter country code
 * @member {String} as-country-code
 */
IPProbeResponse.prototype['as-country-code'] = undefined;

/**
 * The autonomous system (AS) ISO 3-letter country code
 * @member {String} as-country-code3
 */
IPProbeResponse.prototype['as-country-code3'] = undefined;

/**
 * The autonomous system (AS) description / company name
 * @member {String} as-description
 */
IPProbeResponse.prototype['as-description'] = undefined;

/**
 * Array of all the domains associated with the autonomous system (AS)
 * @member {Array.<String>} as-domains
 */
IPProbeResponse.prototype['as-domains'] = undefined;

/**
 * The autonomous system (AS) number
 * @member {String} asn
 */
IPProbeResponse.prototype['asn'] = undefined;

/**
 * Full city name (if detectable)
 * @member {String} city
 */
IPProbeResponse.prototype['city'] = undefined;

/**
 * ISO 2-letter continent code
 * @member {String} continent-code
 */
IPProbeResponse.prototype['continent-code'] = undefined;

/**
 * Full country name
 * @member {String} country
 */
IPProbeResponse.prototype['country'] = undefined;

/**
 * ISO 2-letter country code
 * @member {String} country-code
 */
IPProbeResponse.prototype['country-code'] = undefined;

/**
 * ISO 3-letter country code
 * @member {String} country-code3
 */
IPProbeResponse.prototype['country-code3'] = undefined;

/**
 * ISO 4217 currency code associated with the country
 * @member {String} currency-code
 */
IPProbeResponse.prototype['currency-code'] = undefined;

/**
 * The IPs host domain
 * @member {String} host-domain
 */
IPProbeResponse.prototype['host-domain'] = undefined;

/**
 * The IPs full hostname (PTR)
 * @member {String} hostname
 */
IPProbeResponse.prototype['hostname'] = undefined;

/**
 * The IP address
 * @member {String} ip
 */
IPProbeResponse.prototype['ip'] = undefined;

/**
 * True if this is a bogon IP address such as a private network, local network or reserved address
 * @member {Boolean} is-bogon
 */
IPProbeResponse.prototype['is-bogon'] = undefined;

/**
 * True if this IP belongs to a hosting company. Note that this can still be true even if the provider type is VPN/proxy, this occurs in the case that the IP is detected as both types
 * @member {Boolean} is-hosting
 */
IPProbeResponse.prototype['is-hosting'] = undefined;

/**
 * True if this IP belongs to an internet service provider. Note that this can still be true even if the provider type is VPN/proxy, this occurs in the case that the IP is detected as both types
 * @member {Boolean} is-isp
 */
IPProbeResponse.prototype['is-isp'] = undefined;

/**
 * True if this IP ia a proxy
 * @member {Boolean} is-proxy
 */
IPProbeResponse.prototype['is-proxy'] = undefined;

/**
 * True if this is a <a href=\"https://en.wikipedia.org/wiki/IPv6#IPv4-mapped_IPv6_addresses\">IPv4 mapped IPv6 address</a>
 * @member {Boolean} is-v4-mapped
 */
IPProbeResponse.prototype['is-v4-mapped'] = undefined;

/**
 * True if this is a IPv6 address. False if IPv4
 * @member {Boolean} is-v6
 */
IPProbeResponse.prototype['is-v6'] = undefined;

/**
 * True if this IP ia a VPN
 * @member {Boolean} is-vpn
 */
IPProbeResponse.prototype['is-vpn'] = undefined;

/**
 * A description of the provider (usually extracted from the providers website)
 * @member {String} provider-description
 */
IPProbeResponse.prototype['provider-description'] = undefined;

/**
 * The domain name of the provider
 * @member {String} provider-domain
 */
IPProbeResponse.prototype['provider-domain'] = undefined;

/**
 * The detected provider type, possible values are: <br> <ul> <li>isp - IP belongs to an internet service provider. This includes both mobile, home and business internet providers</li> <li>hosting - IP belongs to a hosting company. This includes website hosting, cloud computing platforms and colocation facilities</li> <li>vpn - IP belongs to a VPN provider</li> <li>proxy - IP belongs to a proxy service. This includes HTTP/SOCKS proxies and browser based proxies</li> <li>university - IP belongs to a university/college/campus</li> <li>government - IP belongs to a government department. This includes military facilities</li> <li>commercial - IP belongs to a commercial entity such as a corporate headquarters or company office</li> <li>unknown - could not identify the provider type</li> </ul>
 * @member {String} provider-type
 */
IPProbeResponse.prototype['provider-type'] = undefined;

/**
 * The website URL for the provider
 * @member {String} provider-website
 */
IPProbeResponse.prototype['provider-website'] = undefined;

/**
 * Full region name (if detectable)
 * @member {String} region
 */
IPProbeResponse.prototype['region'] = undefined;

/**
 * ISO 3166-2 region code (if detectable)
 * @member {String} region-code
 */
IPProbeResponse.prototype['region-code'] = undefined;

/**
 * True if this is a valid IPv4 or IPv6 address
 * @member {Boolean} valid
 */
IPProbeResponse.prototype['valid'] = undefined;

/**
 * The domain of the VPN provider (may be empty if the VPN domain is not detectable)
 * @member {String} vpn-domain
 */
IPProbeResponse.prototype['vpn-domain'] = undefined;






export default IPProbeResponse;

