/**
 * Neutrino API
 * The general-purpose API
 *
 * The version of the OpenAPI document: 3.6.4
 * Contact: ops@neutrinoapi.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The PhoneValidateResponse model module.
 * @module model/PhoneValidateResponse
 * @version 3.6.4
 */
class PhoneValidateResponse {
    /**
     * Constructs a new <code>PhoneValidateResponse</code>.
     * @alias module:model/PhoneValidateResponse
     * @param country {String} The phone number country
     * @param countryCode {String} The phone number country as an ISO 2-letter country code
     * @param countryCode3 {String} The phone number country as an ISO 3-letter country code
     * @param currencyCode {String} ISO 4217 currency code associated with the country
     * @param internationalCallingCode {String} The international calling code
     * @param internationalNumber {String} The number represented in full international format (E.164)
     * @param isMobile {Boolean} True if this is a mobile number. If the number type is unknown this value will be false
     * @param localNumber {String} The number represented in local dialing format
     * @param location {String} The phone number location. Could be the city, region or country depending on the type of number
     * @param prefixNetwork {String} The network/carrier who owns the prefix (this only works for some countries, use HLR lookup for global network detection)
     * @param type {String} The number type based on the number prefix. <br>Possible values are: <br> <ul> <li>mobile</li> <li>fixed-line</li> <li>premium-rate</li> <li>toll-free</li> <li>voip</li> <li>unknown (use HLR lookup)</li> </ul>
     * @param valid {Boolean} Is this a valid phone number
     */
    constructor(country, countryCode, countryCode3, currencyCode, internationalCallingCode, internationalNumber, isMobile, localNumber, location, prefixNetwork, type, valid) { 
        
        PhoneValidateResponse.initialize(this, country, countryCode, countryCode3, currencyCode, internationalCallingCode, internationalNumber, isMobile, localNumber, location, prefixNetwork, type, valid);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, country, countryCode, countryCode3, currencyCode, internationalCallingCode, internationalNumber, isMobile, localNumber, location, prefixNetwork, type, valid) { 
        obj['country'] = country;
        obj['country-code'] = countryCode;
        obj['country-code3'] = countryCode3;
        obj['currency-code'] = currencyCode;
        obj['international-calling-code'] = internationalCallingCode;
        obj['international-number'] = internationalNumber;
        obj['is-mobile'] = isMobile;
        obj['local-number'] = localNumber;
        obj['location'] = location;
        obj['prefix-network'] = prefixNetwork;
        obj['type'] = type;
        obj['valid'] = valid;
    }

    /**
     * Constructs a <code>PhoneValidateResponse</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/PhoneValidateResponse} obj Optional instance to populate.
     * @return {module:model/PhoneValidateResponse} The populated <code>PhoneValidateResponse</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new PhoneValidateResponse();

            if (data.hasOwnProperty('country')) {
                obj['country'] = ApiClient.convertToType(data['country'], 'String');
            }
            if (data.hasOwnProperty('country-code')) {
                obj['country-code'] = ApiClient.convertToType(data['country-code'], 'String');
            }
            if (data.hasOwnProperty('country-code3')) {
                obj['country-code3'] = ApiClient.convertToType(data['country-code3'], 'String');
            }
            if (data.hasOwnProperty('currency-code')) {
                obj['currency-code'] = ApiClient.convertToType(data['currency-code'], 'String');
            }
            if (data.hasOwnProperty('international-calling-code')) {
                obj['international-calling-code'] = ApiClient.convertToType(data['international-calling-code'], 'String');
            }
            if (data.hasOwnProperty('international-number')) {
                obj['international-number'] = ApiClient.convertToType(data['international-number'], 'String');
            }
            if (data.hasOwnProperty('is-mobile')) {
                obj['is-mobile'] = ApiClient.convertToType(data['is-mobile'], 'Boolean');
            }
            if (data.hasOwnProperty('local-number')) {
                obj['local-number'] = ApiClient.convertToType(data['local-number'], 'String');
            }
            if (data.hasOwnProperty('location')) {
                obj['location'] = ApiClient.convertToType(data['location'], 'String');
            }
            if (data.hasOwnProperty('prefix-network')) {
                obj['prefix-network'] = ApiClient.convertToType(data['prefix-network'], 'String');
            }
            if (data.hasOwnProperty('type')) {
                obj['type'] = ApiClient.convertToType(data['type'], 'String');
            }
            if (data.hasOwnProperty('valid')) {
                obj['valid'] = ApiClient.convertToType(data['valid'], 'Boolean');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>PhoneValidateResponse</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>PhoneValidateResponse</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of PhoneValidateResponse.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['country'] && !(typeof data['country'] === 'string' || data['country'] instanceof String)) {
            throw new Error("Expected the field `country` to be a primitive type in the JSON string but got " + data['country']);
        }
        // ensure the json data is a string
        if (data['country-code'] && !(typeof data['country-code'] === 'string' || data['country-code'] instanceof String)) {
            throw new Error("Expected the field `country-code` to be a primitive type in the JSON string but got " + data['country-code']);
        }
        // ensure the json data is a string
        if (data['country-code3'] && !(typeof data['country-code3'] === 'string' || data['country-code3'] instanceof String)) {
            throw new Error("Expected the field `country-code3` to be a primitive type in the JSON string but got " + data['country-code3']);
        }
        // ensure the json data is a string
        if (data['currency-code'] && !(typeof data['currency-code'] === 'string' || data['currency-code'] instanceof String)) {
            throw new Error("Expected the field `currency-code` to be a primitive type in the JSON string but got " + data['currency-code']);
        }
        // ensure the json data is a string
        if (data['international-calling-code'] && !(typeof data['international-calling-code'] === 'string' || data['international-calling-code'] instanceof String)) {
            throw new Error("Expected the field `international-calling-code` to be a primitive type in the JSON string but got " + data['international-calling-code']);
        }
        // ensure the json data is a string
        if (data['international-number'] && !(typeof data['international-number'] === 'string' || data['international-number'] instanceof String)) {
            throw new Error("Expected the field `international-number` to be a primitive type in the JSON string but got " + data['international-number']);
        }
        // ensure the json data is a string
        if (data['local-number'] && !(typeof data['local-number'] === 'string' || data['local-number'] instanceof String)) {
            throw new Error("Expected the field `local-number` to be a primitive type in the JSON string but got " + data['local-number']);
        }
        // ensure the json data is a string
        if (data['location'] && !(typeof data['location'] === 'string' || data['location'] instanceof String)) {
            throw new Error("Expected the field `location` to be a primitive type in the JSON string but got " + data['location']);
        }
        // ensure the json data is a string
        if (data['prefix-network'] && !(typeof data['prefix-network'] === 'string' || data['prefix-network'] instanceof String)) {
            throw new Error("Expected the field `prefix-network` to be a primitive type in the JSON string but got " + data['prefix-network']);
        }
        // ensure the json data is a string
        if (data['type'] && !(typeof data['type'] === 'string' || data['type'] instanceof String)) {
            throw new Error("Expected the field `type` to be a primitive type in the JSON string but got " + data['type']);
        }

        return true;
    }


}

PhoneValidateResponse.RequiredProperties = ["country", "country-code", "country-code3", "currency-code", "international-calling-code", "international-number", "is-mobile", "local-number", "location", "prefix-network", "type", "valid"];

/**
 * The phone number country
 * @member {String} country
 */
PhoneValidateResponse.prototype['country'] = undefined;

/**
 * The phone number country as an ISO 2-letter country code
 * @member {String} country-code
 */
PhoneValidateResponse.prototype['country-code'] = undefined;

/**
 * The phone number country as an ISO 3-letter country code
 * @member {String} country-code3
 */
PhoneValidateResponse.prototype['country-code3'] = undefined;

/**
 * ISO 4217 currency code associated with the country
 * @member {String} currency-code
 */
PhoneValidateResponse.prototype['currency-code'] = undefined;

/**
 * The international calling code
 * @member {String} international-calling-code
 */
PhoneValidateResponse.prototype['international-calling-code'] = undefined;

/**
 * The number represented in full international format (E.164)
 * @member {String} international-number
 */
PhoneValidateResponse.prototype['international-number'] = undefined;

/**
 * True if this is a mobile number. If the number type is unknown this value will be false
 * @member {Boolean} is-mobile
 */
PhoneValidateResponse.prototype['is-mobile'] = undefined;

/**
 * The number represented in local dialing format
 * @member {String} local-number
 */
PhoneValidateResponse.prototype['local-number'] = undefined;

/**
 * The phone number location. Could be the city, region or country depending on the type of number
 * @member {String} location
 */
PhoneValidateResponse.prototype['location'] = undefined;

/**
 * The network/carrier who owns the prefix (this only works for some countries, use HLR lookup for global network detection)
 * @member {String} prefix-network
 */
PhoneValidateResponse.prototype['prefix-network'] = undefined;

/**
 * The number type based on the number prefix. <br>Possible values are: <br> <ul> <li>mobile</li> <li>fixed-line</li> <li>premium-rate</li> <li>toll-free</li> <li>voip</li> <li>unknown (use HLR lookup)</li> </ul>
 * @member {String} type
 */
PhoneValidateResponse.prototype['type'] = undefined;

/**
 * Is this a valid phone number
 * @member {Boolean} valid
 */
PhoneValidateResponse.prototype['valid'] = undefined;






export default PhoneValidateResponse;

