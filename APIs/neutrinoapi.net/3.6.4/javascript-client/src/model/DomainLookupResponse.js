/**
 * Neutrino API
 * The general-purpose API
 *
 * The version of the OpenAPI document: 3.6.4
 * Contact: ops@neutrinoapi.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import BlocklistSensor from './BlocklistSensor';

/**
 * The DomainLookupResponse model module.
 * @module model/DomainLookupResponse
 * @version 3.6.4
 */
class DomainLookupResponse {
    /**
     * Constructs a new <code>DomainLookupResponse</code>.
     * @alias module:model/DomainLookupResponse
     * @param age {Number} The number of days since the domain was registered. A domain age of under 90 days is generally considered to be potentially risky. A value of 0 indicates no registration date was found for this domain
     * @param blocklists {Array.<String>} An array of strings indicating which blocklist categories this domain is listed on. Current categories are: phishing, malware, spam, anonymizer, nefarious
     * @param dnsProvider {String} The primary domain of the DNS provider for this domain
     * @param domain {String} The primary domain name excluding any subdomains. This is also referred to as the second-level domain (SLD)
     * @param fqdn {String} The fully qualified domain name (FQDN)
     * @param isAdult {Boolean} This domain is hosting adult content such as porn, webcams, escorts, etc
     * @param isGov {Boolean} Is this domain under a government or military TLD
     * @param isMalicious {Boolean} Consider this domain malicious as it is currently listed on at least 1 blocklist
     * @param isOpennic {Boolean} Is this domain under an OpenNIC TLD
     * @param isPending {Boolean} True if this domain is unseen and is currently being processed in the background. This field only matters when the 'live' lookup setting has been explicitly disabled and indicates that not all domain data my be present yet
     * @param isSubdomain {Boolean} Is the FQDN a subdomain of the primary domain
     * @param mailProvider {String} The primary domain of the email provider for this domain. An empty value indicates the domain has no valid MX records
     * @param rank {Number} The domains estimated global traffic rank with the highest rank being 1. A value of 0 indicates the domain is currently ranked outside of the top 1M of domains
     * @param registeredDate {String} The ISO date this domain was registered or first seen on the internet. An empty value indicates we could not reliably determine the date
     * @param registrarId {Number} The IANA registrar ID (0 if no registrar ID was found)
     * @param registrarName {String} The name of the domain registrar owning this domain
     * @param sensors {Array.<module:model/BlocklistSensor>} An array of objects containing details on which specific blocklist sensors have detected this domain
     * @param tld {String} The top-level domain (TLD)
     * @param tldCc {String} For a country code top-level domain (ccTLD) this will contain the associated ISO 2-letter country code
     * @param valid {Boolean} True if a valid domain was found. For a domain to be considered valid it must be registered and have valid DNS NS records
     */
    constructor(age, blocklists, dnsProvider, domain, fqdn, isAdult, isGov, isMalicious, isOpennic, isPending, isSubdomain, mailProvider, rank, registeredDate, registrarId, registrarName, sensors, tld, tldCc, valid) { 
        
        DomainLookupResponse.initialize(this, age, blocklists, dnsProvider, domain, fqdn, isAdult, isGov, isMalicious, isOpennic, isPending, isSubdomain, mailProvider, rank, registeredDate, registrarId, registrarName, sensors, tld, tldCc, valid);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, age, blocklists, dnsProvider, domain, fqdn, isAdult, isGov, isMalicious, isOpennic, isPending, isSubdomain, mailProvider, rank, registeredDate, registrarId, registrarName, sensors, tld, tldCc, valid) { 
        obj['age'] = age;
        obj['blocklists'] = blocklists;
        obj['dns-provider'] = dnsProvider;
        obj['domain'] = domain;
        obj['fqdn'] = fqdn;
        obj['is-adult'] = isAdult;
        obj['is-gov'] = isGov;
        obj['is-malicious'] = isMalicious;
        obj['is-opennic'] = isOpennic;
        obj['is-pending'] = isPending;
        obj['is-subdomain'] = isSubdomain;
        obj['mail-provider'] = mailProvider;
        obj['rank'] = rank;
        obj['registered-date'] = registeredDate;
        obj['registrar-id'] = registrarId;
        obj['registrar-name'] = registrarName;
        obj['sensors'] = sensors;
        obj['tld'] = tld;
        obj['tld-cc'] = tldCc;
        obj['valid'] = valid;
    }

    /**
     * Constructs a <code>DomainLookupResponse</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/DomainLookupResponse} obj Optional instance to populate.
     * @return {module:model/DomainLookupResponse} The populated <code>DomainLookupResponse</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new DomainLookupResponse();

            if (data.hasOwnProperty('age')) {
                obj['age'] = ApiClient.convertToType(data['age'], 'Number');
            }
            if (data.hasOwnProperty('blocklists')) {
                obj['blocklists'] = ApiClient.convertToType(data['blocklists'], ['String']);
            }
            if (data.hasOwnProperty('dns-provider')) {
                obj['dns-provider'] = ApiClient.convertToType(data['dns-provider'], 'String');
            }
            if (data.hasOwnProperty('domain')) {
                obj['domain'] = ApiClient.convertToType(data['domain'], 'String');
            }
            if (data.hasOwnProperty('fqdn')) {
                obj['fqdn'] = ApiClient.convertToType(data['fqdn'], 'String');
            }
            if (data.hasOwnProperty('is-adult')) {
                obj['is-adult'] = ApiClient.convertToType(data['is-adult'], 'Boolean');
            }
            if (data.hasOwnProperty('is-gov')) {
                obj['is-gov'] = ApiClient.convertToType(data['is-gov'], 'Boolean');
            }
            if (data.hasOwnProperty('is-malicious')) {
                obj['is-malicious'] = ApiClient.convertToType(data['is-malicious'], 'Boolean');
            }
            if (data.hasOwnProperty('is-opennic')) {
                obj['is-opennic'] = ApiClient.convertToType(data['is-opennic'], 'Boolean');
            }
            if (data.hasOwnProperty('is-pending')) {
                obj['is-pending'] = ApiClient.convertToType(data['is-pending'], 'Boolean');
            }
            if (data.hasOwnProperty('is-subdomain')) {
                obj['is-subdomain'] = ApiClient.convertToType(data['is-subdomain'], 'Boolean');
            }
            if (data.hasOwnProperty('mail-provider')) {
                obj['mail-provider'] = ApiClient.convertToType(data['mail-provider'], 'String');
            }
            if (data.hasOwnProperty('rank')) {
                obj['rank'] = ApiClient.convertToType(data['rank'], 'Number');
            }
            if (data.hasOwnProperty('registered-date')) {
                obj['registered-date'] = ApiClient.convertToType(data['registered-date'], 'String');
            }
            if (data.hasOwnProperty('registrar-id')) {
                obj['registrar-id'] = ApiClient.convertToType(data['registrar-id'], 'Number');
            }
            if (data.hasOwnProperty('registrar-name')) {
                obj['registrar-name'] = ApiClient.convertToType(data['registrar-name'], 'String');
            }
            if (data.hasOwnProperty('sensors')) {
                obj['sensors'] = ApiClient.convertToType(data['sensors'], [BlocklistSensor]);
            }
            if (data.hasOwnProperty('tld')) {
                obj['tld'] = ApiClient.convertToType(data['tld'], 'String');
            }
            if (data.hasOwnProperty('tld-cc')) {
                obj['tld-cc'] = ApiClient.convertToType(data['tld-cc'], 'String');
            }
            if (data.hasOwnProperty('valid')) {
                obj['valid'] = ApiClient.convertToType(data['valid'], 'Boolean');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>DomainLookupResponse</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>DomainLookupResponse</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of DomainLookupResponse.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is an array
        if (!Array.isArray(data['blocklists'])) {
            throw new Error("Expected the field `blocklists` to be an array in the JSON data but got " + data['blocklists']);
        }
        // ensure the json data is a string
        if (data['dns-provider'] && !(typeof data['dns-provider'] === 'string' || data['dns-provider'] instanceof String)) {
            throw new Error("Expected the field `dns-provider` to be a primitive type in the JSON string but got " + data['dns-provider']);
        }
        // ensure the json data is a string
        if (data['domain'] && !(typeof data['domain'] === 'string' || data['domain'] instanceof String)) {
            throw new Error("Expected the field `domain` to be a primitive type in the JSON string but got " + data['domain']);
        }
        // ensure the json data is a string
        if (data['fqdn'] && !(typeof data['fqdn'] === 'string' || data['fqdn'] instanceof String)) {
            throw new Error("Expected the field `fqdn` to be a primitive type in the JSON string but got " + data['fqdn']);
        }
        // ensure the json data is a string
        if (data['mail-provider'] && !(typeof data['mail-provider'] === 'string' || data['mail-provider'] instanceof String)) {
            throw new Error("Expected the field `mail-provider` to be a primitive type in the JSON string but got " + data['mail-provider']);
        }
        // ensure the json data is a string
        if (data['registered-date'] && !(typeof data['registered-date'] === 'string' || data['registered-date'] instanceof String)) {
            throw new Error("Expected the field `registered-date` to be a primitive type in the JSON string but got " + data['registered-date']);
        }
        // ensure the json data is a string
        if (data['registrar-name'] && !(typeof data['registrar-name'] === 'string' || data['registrar-name'] instanceof String)) {
            throw new Error("Expected the field `registrar-name` to be a primitive type in the JSON string but got " + data['registrar-name']);
        }
        if (data['sensors']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['sensors'])) {
                throw new Error("Expected the field `sensors` to be an array in the JSON data but got " + data['sensors']);
            }
            // validate the optional field `sensors` (array)
            for (const item of data['sensors']) {
                BlocklistSensor.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['tld'] && !(typeof data['tld'] === 'string' || data['tld'] instanceof String)) {
            throw new Error("Expected the field `tld` to be a primitive type in the JSON string but got " + data['tld']);
        }
        // ensure the json data is a string
        if (data['tld-cc'] && !(typeof data['tld-cc'] === 'string' || data['tld-cc'] instanceof String)) {
            throw new Error("Expected the field `tld-cc` to be a primitive type in the JSON string but got " + data['tld-cc']);
        }

        return true;
    }


}

DomainLookupResponse.RequiredProperties = ["age", "blocklists", "dns-provider", "domain", "fqdn", "is-adult", "is-gov", "is-malicious", "is-opennic", "is-pending", "is-subdomain", "mail-provider", "rank", "registered-date", "registrar-id", "registrar-name", "sensors", "tld", "tld-cc", "valid"];

/**
 * The number of days since the domain was registered. A domain age of under 90 days is generally considered to be potentially risky. A value of 0 indicates no registration date was found for this domain
 * @member {Number} age
 */
DomainLookupResponse.prototype['age'] = undefined;

/**
 * An array of strings indicating which blocklist categories this domain is listed on. Current categories are: phishing, malware, spam, anonymizer, nefarious
 * @member {Array.<String>} blocklists
 */
DomainLookupResponse.prototype['blocklists'] = undefined;

/**
 * The primary domain of the DNS provider for this domain
 * @member {String} dns-provider
 */
DomainLookupResponse.prototype['dns-provider'] = undefined;

/**
 * The primary domain name excluding any subdomains. This is also referred to as the second-level domain (SLD)
 * @member {String} domain
 */
DomainLookupResponse.prototype['domain'] = undefined;

/**
 * The fully qualified domain name (FQDN)
 * @member {String} fqdn
 */
DomainLookupResponse.prototype['fqdn'] = undefined;

/**
 * This domain is hosting adult content such as porn, webcams, escorts, etc
 * @member {Boolean} is-adult
 */
DomainLookupResponse.prototype['is-adult'] = undefined;

/**
 * Is this domain under a government or military TLD
 * @member {Boolean} is-gov
 */
DomainLookupResponse.prototype['is-gov'] = undefined;

/**
 * Consider this domain malicious as it is currently listed on at least 1 blocklist
 * @member {Boolean} is-malicious
 */
DomainLookupResponse.prototype['is-malicious'] = undefined;

/**
 * Is this domain under an OpenNIC TLD
 * @member {Boolean} is-opennic
 */
DomainLookupResponse.prototype['is-opennic'] = undefined;

/**
 * True if this domain is unseen and is currently being processed in the background. This field only matters when the 'live' lookup setting has been explicitly disabled and indicates that not all domain data my be present yet
 * @member {Boolean} is-pending
 */
DomainLookupResponse.prototype['is-pending'] = undefined;

/**
 * Is the FQDN a subdomain of the primary domain
 * @member {Boolean} is-subdomain
 */
DomainLookupResponse.prototype['is-subdomain'] = undefined;

/**
 * The primary domain of the email provider for this domain. An empty value indicates the domain has no valid MX records
 * @member {String} mail-provider
 */
DomainLookupResponse.prototype['mail-provider'] = undefined;

/**
 * The domains estimated global traffic rank with the highest rank being 1. A value of 0 indicates the domain is currently ranked outside of the top 1M of domains
 * @member {Number} rank
 */
DomainLookupResponse.prototype['rank'] = undefined;

/**
 * The ISO date this domain was registered or first seen on the internet. An empty value indicates we could not reliably determine the date
 * @member {String} registered-date
 */
DomainLookupResponse.prototype['registered-date'] = undefined;

/**
 * The IANA registrar ID (0 if no registrar ID was found)
 * @member {Number} registrar-id
 */
DomainLookupResponse.prototype['registrar-id'] = undefined;

/**
 * The name of the domain registrar owning this domain
 * @member {String} registrar-name
 */
DomainLookupResponse.prototype['registrar-name'] = undefined;

/**
 * An array of objects containing details on which specific blocklist sensors have detected this domain
 * @member {Array.<module:model/BlocklistSensor>} sensors
 */
DomainLookupResponse.prototype['sensors'] = undefined;

/**
 * The top-level domain (TLD)
 * @member {String} tld
 */
DomainLookupResponse.prototype['tld'] = undefined;

/**
 * For a country code top-level domain (ccTLD) this will contain the associated ISO 2-letter country code
 * @member {String} tld-cc
 */
DomainLookupResponse.prototype['tld-cc'] = undefined;

/**
 * True if a valid domain was found. For a domain to be considered valid it must be registered and have valid DNS NS records
 * @member {Boolean} valid
 */
DomainLookupResponse.prototype['valid'] = undefined;






export default DomainLookupResponse;

