/**
 * Neutrino API
 * The general-purpose API
 *
 * The version of the OpenAPI document: 3.6.4
 * Contact: ops@neutrinoapi.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import BlocklistSensor from './BlocklistSensor';

/**
 * The IPBlocklistResponse model module.
 * @module model/IPBlocklistResponse
 * @version 3.6.4
 */
class IPBlocklistResponse {
    /**
     * Constructs a new <code>IPBlocklistResponse</code>.
     * @alias module:model/IPBlocklistResponse
     * @param blocklists {Array.<String>} An array of strings indicating which blocklist categories this IP is listed on
     * @param cidr {String} The CIDR address for this listing (only set if the IP is listed)
     * @param ip {String} The IP address
     * @param isBot {Boolean} IP is hosting a malicious bot or is part of a botnet. This is a broad category which includes brute-force crackers
     * @param isDshield {Boolean} IP has been flagged as a significant attack source by DShield (dshield.org)
     * @param isExploitBot {Boolean} IP is hosting an exploit finding bot or is running exploit scanning software
     * @param isHijacked {Boolean} IP is part of a hijacked netblock or a netblock controlled by a criminal organization
     * @param isListed {Boolean} Is this IP on a blocklist
     * @param isMalware {Boolean} IP is involved in distributing or is running malware
     * @param isProxy {Boolean} IP has been detected as an anonymous web proxy or anonymous HTTP proxy
     * @param isSpamBot {Boolean} IP address is hosting a spam bot, comment spamming or any other spamming type software
     * @param isSpider {Boolean} IP is running a hostile web spider / web crawler
     * @param isSpyware {Boolean} IP is involved in distributing or is running spyware
     * @param isTor {Boolean} IP is a Tor node or running a Tor related service
     * @param isVpn {Boolean} IP belongs to a public VPN provider (only set if the 'vpn-lookup' option is enabled)
     * @param lastSeen {Number} The unix time when this IP was last seen on any blocklist. IPs are automatically removed after 7 days therefor this value will never be older than 7 days
     * @param listCount {Number} The number of blocklists the IP is listed on
     * @param sensors {Array.<module:model/BlocklistSensor>} An array of objects containing details on which specific sensors detected the IP
     */
    constructor(blocklists, cidr, ip, isBot, isDshield, isExploitBot, isHijacked, isListed, isMalware, isProxy, isSpamBot, isSpider, isSpyware, isTor, isVpn, lastSeen, listCount, sensors) { 
        
        IPBlocklistResponse.initialize(this, blocklists, cidr, ip, isBot, isDshield, isExploitBot, isHijacked, isListed, isMalware, isProxy, isSpamBot, isSpider, isSpyware, isTor, isVpn, lastSeen, listCount, sensors);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, blocklists, cidr, ip, isBot, isDshield, isExploitBot, isHijacked, isListed, isMalware, isProxy, isSpamBot, isSpider, isSpyware, isTor, isVpn, lastSeen, listCount, sensors) { 
        obj['blocklists'] = blocklists;
        obj['cidr'] = cidr;
        obj['ip'] = ip;
        obj['is-bot'] = isBot;
        obj['is-dshield'] = isDshield;
        obj['is-exploit-bot'] = isExploitBot;
        obj['is-hijacked'] = isHijacked;
        obj['is-listed'] = isListed;
        obj['is-malware'] = isMalware;
        obj['is-proxy'] = isProxy;
        obj['is-spam-bot'] = isSpamBot;
        obj['is-spider'] = isSpider;
        obj['is-spyware'] = isSpyware;
        obj['is-tor'] = isTor;
        obj['is-vpn'] = isVpn;
        obj['last-seen'] = lastSeen;
        obj['list-count'] = listCount;
        obj['sensors'] = sensors;
    }

    /**
     * Constructs a <code>IPBlocklistResponse</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/IPBlocklistResponse} obj Optional instance to populate.
     * @return {module:model/IPBlocklistResponse} The populated <code>IPBlocklistResponse</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new IPBlocklistResponse();

            if (data.hasOwnProperty('blocklists')) {
                obj['blocklists'] = ApiClient.convertToType(data['blocklists'], ['String']);
            }
            if (data.hasOwnProperty('cidr')) {
                obj['cidr'] = ApiClient.convertToType(data['cidr'], 'String');
            }
            if (data.hasOwnProperty('ip')) {
                obj['ip'] = ApiClient.convertToType(data['ip'], 'String');
            }
            if (data.hasOwnProperty('is-bot')) {
                obj['is-bot'] = ApiClient.convertToType(data['is-bot'], 'Boolean');
            }
            if (data.hasOwnProperty('is-dshield')) {
                obj['is-dshield'] = ApiClient.convertToType(data['is-dshield'], 'Boolean');
            }
            if (data.hasOwnProperty('is-exploit-bot')) {
                obj['is-exploit-bot'] = ApiClient.convertToType(data['is-exploit-bot'], 'Boolean');
            }
            if (data.hasOwnProperty('is-hijacked')) {
                obj['is-hijacked'] = ApiClient.convertToType(data['is-hijacked'], 'Boolean');
            }
            if (data.hasOwnProperty('is-listed')) {
                obj['is-listed'] = ApiClient.convertToType(data['is-listed'], 'Boolean');
            }
            if (data.hasOwnProperty('is-malware')) {
                obj['is-malware'] = ApiClient.convertToType(data['is-malware'], 'Boolean');
            }
            if (data.hasOwnProperty('is-proxy')) {
                obj['is-proxy'] = ApiClient.convertToType(data['is-proxy'], 'Boolean');
            }
            if (data.hasOwnProperty('is-spam-bot')) {
                obj['is-spam-bot'] = ApiClient.convertToType(data['is-spam-bot'], 'Boolean');
            }
            if (data.hasOwnProperty('is-spider')) {
                obj['is-spider'] = ApiClient.convertToType(data['is-spider'], 'Boolean');
            }
            if (data.hasOwnProperty('is-spyware')) {
                obj['is-spyware'] = ApiClient.convertToType(data['is-spyware'], 'Boolean');
            }
            if (data.hasOwnProperty('is-tor')) {
                obj['is-tor'] = ApiClient.convertToType(data['is-tor'], 'Boolean');
            }
            if (data.hasOwnProperty('is-vpn')) {
                obj['is-vpn'] = ApiClient.convertToType(data['is-vpn'], 'Boolean');
            }
            if (data.hasOwnProperty('last-seen')) {
                obj['last-seen'] = ApiClient.convertToType(data['last-seen'], 'Number');
            }
            if (data.hasOwnProperty('list-count')) {
                obj['list-count'] = ApiClient.convertToType(data['list-count'], 'Number');
            }
            if (data.hasOwnProperty('sensors')) {
                obj['sensors'] = ApiClient.convertToType(data['sensors'], [BlocklistSensor]);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>IPBlocklistResponse</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>IPBlocklistResponse</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of IPBlocklistResponse.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is an array
        if (!Array.isArray(data['blocklists'])) {
            throw new Error("Expected the field `blocklists` to be an array in the JSON data but got " + data['blocklists']);
        }
        // ensure the json data is a string
        if (data['cidr'] && !(typeof data['cidr'] === 'string' || data['cidr'] instanceof String)) {
            throw new Error("Expected the field `cidr` to be a primitive type in the JSON string but got " + data['cidr']);
        }
        // ensure the json data is a string
        if (data['ip'] && !(typeof data['ip'] === 'string' || data['ip'] instanceof String)) {
            throw new Error("Expected the field `ip` to be a primitive type in the JSON string but got " + data['ip']);
        }
        if (data['sensors']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['sensors'])) {
                throw new Error("Expected the field `sensors` to be an array in the JSON data but got " + data['sensors']);
            }
            // validate the optional field `sensors` (array)
            for (const item of data['sensors']) {
                BlocklistSensor.validateJSON(item);
            };
        }

        return true;
    }


}

IPBlocklistResponse.RequiredProperties = ["blocklists", "cidr", "ip", "is-bot", "is-dshield", "is-exploit-bot", "is-hijacked", "is-listed", "is-malware", "is-proxy", "is-spam-bot", "is-spider", "is-spyware", "is-tor", "is-vpn", "last-seen", "list-count", "sensors"];

/**
 * An array of strings indicating which blocklist categories this IP is listed on
 * @member {Array.<String>} blocklists
 */
IPBlocklistResponse.prototype['blocklists'] = undefined;

/**
 * The CIDR address for this listing (only set if the IP is listed)
 * @member {String} cidr
 */
IPBlocklistResponse.prototype['cidr'] = undefined;

/**
 * The IP address
 * @member {String} ip
 */
IPBlocklistResponse.prototype['ip'] = undefined;

/**
 * IP is hosting a malicious bot or is part of a botnet. This is a broad category which includes brute-force crackers
 * @member {Boolean} is-bot
 */
IPBlocklistResponse.prototype['is-bot'] = undefined;

/**
 * IP has been flagged as a significant attack source by DShield (dshield.org)
 * @member {Boolean} is-dshield
 */
IPBlocklistResponse.prototype['is-dshield'] = undefined;

/**
 * IP is hosting an exploit finding bot or is running exploit scanning software
 * @member {Boolean} is-exploit-bot
 */
IPBlocklistResponse.prototype['is-exploit-bot'] = undefined;

/**
 * IP is part of a hijacked netblock or a netblock controlled by a criminal organization
 * @member {Boolean} is-hijacked
 */
IPBlocklistResponse.prototype['is-hijacked'] = undefined;

/**
 * Is this IP on a blocklist
 * @member {Boolean} is-listed
 */
IPBlocklistResponse.prototype['is-listed'] = undefined;

/**
 * IP is involved in distributing or is running malware
 * @member {Boolean} is-malware
 */
IPBlocklistResponse.prototype['is-malware'] = undefined;

/**
 * IP has been detected as an anonymous web proxy or anonymous HTTP proxy
 * @member {Boolean} is-proxy
 */
IPBlocklistResponse.prototype['is-proxy'] = undefined;

/**
 * IP address is hosting a spam bot, comment spamming or any other spamming type software
 * @member {Boolean} is-spam-bot
 */
IPBlocklistResponse.prototype['is-spam-bot'] = undefined;

/**
 * IP is running a hostile web spider / web crawler
 * @member {Boolean} is-spider
 */
IPBlocklistResponse.prototype['is-spider'] = undefined;

/**
 * IP is involved in distributing or is running spyware
 * @member {Boolean} is-spyware
 */
IPBlocklistResponse.prototype['is-spyware'] = undefined;

/**
 * IP is a Tor node or running a Tor related service
 * @member {Boolean} is-tor
 */
IPBlocklistResponse.prototype['is-tor'] = undefined;

/**
 * IP belongs to a public VPN provider (only set if the 'vpn-lookup' option is enabled)
 * @member {Boolean} is-vpn
 */
IPBlocklistResponse.prototype['is-vpn'] = undefined;

/**
 * The unix time when this IP was last seen on any blocklist. IPs are automatically removed after 7 days therefor this value will never be older than 7 days
 * @member {Number} last-seen
 */
IPBlocklistResponse.prototype['last-seen'] = undefined;

/**
 * The number of blocklists the IP is listed on
 * @member {Number} list-count
 */
IPBlocklistResponse.prototype['list-count'] = undefined;

/**
 * An array of objects containing details on which specific sensors detected the IP
 * @member {Array.<module:model/BlocklistSensor>} sensors
 */
IPBlocklistResponse.prototype['sensors'] = undefined;






export default IPBlocklistResponse;

