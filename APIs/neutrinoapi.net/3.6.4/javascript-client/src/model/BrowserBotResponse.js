/**
 * Neutrino API
 * The general-purpose API
 *
 * The version of the OpenAPI document: 3.6.4
 * Contact: ops@neutrinoapi.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The BrowserBotResponse model module.
 * @module model/BrowserBotResponse
 * @version 3.6.4
 */
class BrowserBotResponse {
    /**
     * Constructs a new <code>BrowserBotResponse</code>.
     * @alias module:model/BrowserBotResponse
     * @param content {String} The complete raw, decompressed and decoded page content. Usually will be either HTML, JSON or XML
     * @param elements {Array.<String>} Array containing all the elements matching the supplied selector. <br>Each element object will contain the text content, HTML content and all current element attributes
     * @param errorMessage {String} Contains the error message if an error has occurred ('is-error' will be true)
     * @param execResults {Array.<String>} If you executed any JavaScript this array holds the results as objects
     * @param httpRedirectUrl {String} The redirected URL if the URL responded with an HTTP redirect
     * @param httpStatusCode {Number} The HTTP status code the URL returned
     * @param httpStatusMessage {String} The HTTP status message the URL returned
     * @param isError {Boolean} True if an error has occurred loading the page. Check the 'error-message' field for details
     * @param isHttpOk {Boolean} True if the HTTP status is OK (200)
     * @param isHttpRedirect {Boolean} True if the URL responded with an HTTP redirect
     * @param isSecure {Boolean} True if the page is secured using TLS/SSL
     * @param isTimeout {Boolean} True if a timeout occurred while loading the page. You can set the timeout with the request parameter 'timeout'
     * @param languageCode {String} The ISO 2-letter language code of the page. Extracted from either the HTML document or via HTTP headers
     * @param loadTime {Number} The number of seconds taken to load the page (from initial request until DOM ready)
     * @param mimeType {String} The document MIME type
     * @param responseHeaders {Object.<String, String>} Map containing all the HTTP response headers the URL responded with
     * @param securityDetails {Object.<String, String>} Map containing details of the TLS/SSL setup
     * @param serverIp {String} The HTTP servers IP address
     * @param title {String} The document title
     * @param url {String} The page URL
     */
    constructor(content, elements, errorMessage, execResults, httpRedirectUrl, httpStatusCode, httpStatusMessage, isError, isHttpOk, isHttpRedirect, isSecure, isTimeout, languageCode, loadTime, mimeType, responseHeaders, securityDetails, serverIp, title, url) { 
        
        BrowserBotResponse.initialize(this, content, elements, errorMessage, execResults, httpRedirectUrl, httpStatusCode, httpStatusMessage, isError, isHttpOk, isHttpRedirect, isSecure, isTimeout, languageCode, loadTime, mimeType, responseHeaders, securityDetails, serverIp, title, url);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, content, elements, errorMessage, execResults, httpRedirectUrl, httpStatusCode, httpStatusMessage, isError, isHttpOk, isHttpRedirect, isSecure, isTimeout, languageCode, loadTime, mimeType, responseHeaders, securityDetails, serverIp, title, url) { 
        obj['content'] = content;
        obj['elements'] = elements;
        obj['error-message'] = errorMessage;
        obj['exec-results'] = execResults;
        obj['http-redirect-url'] = httpRedirectUrl;
        obj['http-status-code'] = httpStatusCode;
        obj['http-status-message'] = httpStatusMessage;
        obj['is-error'] = isError;
        obj['is-http-ok'] = isHttpOk;
        obj['is-http-redirect'] = isHttpRedirect;
        obj['is-secure'] = isSecure;
        obj['is-timeout'] = isTimeout;
        obj['language-code'] = languageCode;
        obj['load-time'] = loadTime;
        obj['mime-type'] = mimeType;
        obj['response-headers'] = responseHeaders;
        obj['security-details'] = securityDetails;
        obj['server-ip'] = serverIp;
        obj['title'] = title;
        obj['url'] = url;
    }

    /**
     * Constructs a <code>BrowserBotResponse</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/BrowserBotResponse} obj Optional instance to populate.
     * @return {module:model/BrowserBotResponse} The populated <code>BrowserBotResponse</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new BrowserBotResponse();

            if (data.hasOwnProperty('content')) {
                obj['content'] = ApiClient.convertToType(data['content'], 'String');
            }
            if (data.hasOwnProperty('elements')) {
                obj['elements'] = ApiClient.convertToType(data['elements'], ['String']);
            }
            if (data.hasOwnProperty('error-message')) {
                obj['error-message'] = ApiClient.convertToType(data['error-message'], 'String');
            }
            if (data.hasOwnProperty('exec-results')) {
                obj['exec-results'] = ApiClient.convertToType(data['exec-results'], ['String']);
            }
            if (data.hasOwnProperty('http-redirect-url')) {
                obj['http-redirect-url'] = ApiClient.convertToType(data['http-redirect-url'], 'String');
            }
            if (data.hasOwnProperty('http-status-code')) {
                obj['http-status-code'] = ApiClient.convertToType(data['http-status-code'], 'Number');
            }
            if (data.hasOwnProperty('http-status-message')) {
                obj['http-status-message'] = ApiClient.convertToType(data['http-status-message'], 'String');
            }
            if (data.hasOwnProperty('is-error')) {
                obj['is-error'] = ApiClient.convertToType(data['is-error'], 'Boolean');
            }
            if (data.hasOwnProperty('is-http-ok')) {
                obj['is-http-ok'] = ApiClient.convertToType(data['is-http-ok'], 'Boolean');
            }
            if (data.hasOwnProperty('is-http-redirect')) {
                obj['is-http-redirect'] = ApiClient.convertToType(data['is-http-redirect'], 'Boolean');
            }
            if (data.hasOwnProperty('is-secure')) {
                obj['is-secure'] = ApiClient.convertToType(data['is-secure'], 'Boolean');
            }
            if (data.hasOwnProperty('is-timeout')) {
                obj['is-timeout'] = ApiClient.convertToType(data['is-timeout'], 'Boolean');
            }
            if (data.hasOwnProperty('language-code')) {
                obj['language-code'] = ApiClient.convertToType(data['language-code'], 'String');
            }
            if (data.hasOwnProperty('load-time')) {
                obj['load-time'] = ApiClient.convertToType(data['load-time'], 'Number');
            }
            if (data.hasOwnProperty('mime-type')) {
                obj['mime-type'] = ApiClient.convertToType(data['mime-type'], 'String');
            }
            if (data.hasOwnProperty('response-headers')) {
                obj['response-headers'] = ApiClient.convertToType(data['response-headers'], {'String': 'String'});
            }
            if (data.hasOwnProperty('security-details')) {
                obj['security-details'] = ApiClient.convertToType(data['security-details'], {'String': 'String'});
            }
            if (data.hasOwnProperty('server-ip')) {
                obj['server-ip'] = ApiClient.convertToType(data['server-ip'], 'String');
            }
            if (data.hasOwnProperty('title')) {
                obj['title'] = ApiClient.convertToType(data['title'], 'String');
            }
            if (data.hasOwnProperty('url')) {
                obj['url'] = ApiClient.convertToType(data['url'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>BrowserBotResponse</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>BrowserBotResponse</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of BrowserBotResponse.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['content'] && !(typeof data['content'] === 'string' || data['content'] instanceof String)) {
            throw new Error("Expected the field `content` to be a primitive type in the JSON string but got " + data['content']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['elements'])) {
            throw new Error("Expected the field `elements` to be an array in the JSON data but got " + data['elements']);
        }
        // ensure the json data is a string
        if (data['error-message'] && !(typeof data['error-message'] === 'string' || data['error-message'] instanceof String)) {
            throw new Error("Expected the field `error-message` to be a primitive type in the JSON string but got " + data['error-message']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['exec-results'])) {
            throw new Error("Expected the field `exec-results` to be an array in the JSON data but got " + data['exec-results']);
        }
        // ensure the json data is a string
        if (data['http-redirect-url'] && !(typeof data['http-redirect-url'] === 'string' || data['http-redirect-url'] instanceof String)) {
            throw new Error("Expected the field `http-redirect-url` to be a primitive type in the JSON string but got " + data['http-redirect-url']);
        }
        // ensure the json data is a string
        if (data['http-status-message'] && !(typeof data['http-status-message'] === 'string' || data['http-status-message'] instanceof String)) {
            throw new Error("Expected the field `http-status-message` to be a primitive type in the JSON string but got " + data['http-status-message']);
        }
        // ensure the json data is a string
        if (data['language-code'] && !(typeof data['language-code'] === 'string' || data['language-code'] instanceof String)) {
            throw new Error("Expected the field `language-code` to be a primitive type in the JSON string but got " + data['language-code']);
        }
        // ensure the json data is a string
        if (data['mime-type'] && !(typeof data['mime-type'] === 'string' || data['mime-type'] instanceof String)) {
            throw new Error("Expected the field `mime-type` to be a primitive type in the JSON string but got " + data['mime-type']);
        }
        // ensure the json data is a string
        if (data['server-ip'] && !(typeof data['server-ip'] === 'string' || data['server-ip'] instanceof String)) {
            throw new Error("Expected the field `server-ip` to be a primitive type in the JSON string but got " + data['server-ip']);
        }
        // ensure the json data is a string
        if (data['title'] && !(typeof data['title'] === 'string' || data['title'] instanceof String)) {
            throw new Error("Expected the field `title` to be a primitive type in the JSON string but got " + data['title']);
        }
        // ensure the json data is a string
        if (data['url'] && !(typeof data['url'] === 'string' || data['url'] instanceof String)) {
            throw new Error("Expected the field `url` to be a primitive type in the JSON string but got " + data['url']);
        }

        return true;
    }


}

BrowserBotResponse.RequiredProperties = ["content", "elements", "error-message", "exec-results", "http-redirect-url", "http-status-code", "http-status-message", "is-error", "is-http-ok", "is-http-redirect", "is-secure", "is-timeout", "language-code", "load-time", "mime-type", "response-headers", "security-details", "server-ip", "title", "url"];

/**
 * The complete raw, decompressed and decoded page content. Usually will be either HTML, JSON or XML
 * @member {String} content
 */
BrowserBotResponse.prototype['content'] = undefined;

/**
 * Array containing all the elements matching the supplied selector. <br>Each element object will contain the text content, HTML content and all current element attributes
 * @member {Array.<String>} elements
 */
BrowserBotResponse.prototype['elements'] = undefined;

/**
 * Contains the error message if an error has occurred ('is-error' will be true)
 * @member {String} error-message
 */
BrowserBotResponse.prototype['error-message'] = undefined;

/**
 * If you executed any JavaScript this array holds the results as objects
 * @member {Array.<String>} exec-results
 */
BrowserBotResponse.prototype['exec-results'] = undefined;

/**
 * The redirected URL if the URL responded with an HTTP redirect
 * @member {String} http-redirect-url
 */
BrowserBotResponse.prototype['http-redirect-url'] = undefined;

/**
 * The HTTP status code the URL returned
 * @member {Number} http-status-code
 */
BrowserBotResponse.prototype['http-status-code'] = undefined;

/**
 * The HTTP status message the URL returned
 * @member {String} http-status-message
 */
BrowserBotResponse.prototype['http-status-message'] = undefined;

/**
 * True if an error has occurred loading the page. Check the 'error-message' field for details
 * @member {Boolean} is-error
 */
BrowserBotResponse.prototype['is-error'] = undefined;

/**
 * True if the HTTP status is OK (200)
 * @member {Boolean} is-http-ok
 */
BrowserBotResponse.prototype['is-http-ok'] = undefined;

/**
 * True if the URL responded with an HTTP redirect
 * @member {Boolean} is-http-redirect
 */
BrowserBotResponse.prototype['is-http-redirect'] = undefined;

/**
 * True if the page is secured using TLS/SSL
 * @member {Boolean} is-secure
 */
BrowserBotResponse.prototype['is-secure'] = undefined;

/**
 * True if a timeout occurred while loading the page. You can set the timeout with the request parameter 'timeout'
 * @member {Boolean} is-timeout
 */
BrowserBotResponse.prototype['is-timeout'] = undefined;

/**
 * The ISO 2-letter language code of the page. Extracted from either the HTML document or via HTTP headers
 * @member {String} language-code
 */
BrowserBotResponse.prototype['language-code'] = undefined;

/**
 * The number of seconds taken to load the page (from initial request until DOM ready)
 * @member {Number} load-time
 */
BrowserBotResponse.prototype['load-time'] = undefined;

/**
 * The document MIME type
 * @member {String} mime-type
 */
BrowserBotResponse.prototype['mime-type'] = undefined;

/**
 * Map containing all the HTTP response headers the URL responded with
 * @member {Object.<String, String>} response-headers
 */
BrowserBotResponse.prototype['response-headers'] = undefined;

/**
 * Map containing details of the TLS/SSL setup
 * @member {Object.<String, String>} security-details
 */
BrowserBotResponse.prototype['security-details'] = undefined;

/**
 * The HTTP servers IP address
 * @member {String} server-ip
 */
BrowserBotResponse.prototype['server-ip'] = undefined;

/**
 * The document title
 * @member {String} title
 */
BrowserBotResponse.prototype['title'] = undefined;

/**
 * The page URL
 * @member {String} url
 */
BrowserBotResponse.prototype['url'] = undefined;






export default BrowserBotResponse;

