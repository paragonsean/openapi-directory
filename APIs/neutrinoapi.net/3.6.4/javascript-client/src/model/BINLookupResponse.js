/**
 * Neutrino API
 * The general-purpose API
 *
 * The version of the OpenAPI document: 3.6.4
 * Contact: ops@neutrinoapi.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The BINLookupResponse model module.
 * @module model/BINLookupResponse
 * @version 3.6.4
 */
class BINLookupResponse {
    /**
     * Constructs a new <code>BINLookupResponse</code>.
     * @alias module:model/BINLookupResponse
     * @param binNumber {String} The BIN or IIN number
     * @param cardBrand {String} The card brand (e.g. Visa or Mastercard)
     * @param cardCategory {String} The card category. There are many different card categories the most common card categories are: CLASSIC, BUSINESS, CORPORATE, PLATINUM, PREPAID
     * @param cardType {String} The card type, will always be one of: DEBIT, CREDIT, CHARGE CARD
     * @param country {String} The full country name of the issuer
     * @param countryCode {String} The ISO 2-letter country code of the issuer
     * @param countryCode3 {String} The ISO 3-letter country code of the issuer
     * @param currencyCode {String} ISO 4217 currency code associated with the country of the issuer
     * @param ipBlocklisted {Boolean} True if the customers IP is listed on one of our blocklists, see the <a href=\"http://www.neutrinoapi.com/api/ip-blocklist/\">IP Blocklist API</a>
     * @param ipBlocklists {Array.<String>} An array of strings indicating which blocklists this IP is listed on
     * @param ipCity {String} The city of the customers IP (if detectable)
     * @param ipCountry {String} The country of the customers IP
     * @param ipCountryCode {String} The ISO 2-letter country code of the customers IP
     * @param ipCountryCode3 {String} The ISO 3-letter country code of the customers IP
     * @param ipMatchesBin {Boolean} True if the customers IP country matches the BIN country
     * @param ipRegion {String} The region of the customers IP (if detectable)
     * @param isCommercial {Boolean} Is this a commercial/business use card
     * @param isPrepaid {Boolean} Is this a prepaid or prepaid reloadable card
     * @param issuer {String} The card issuer
     * @param issuerPhone {String} The card issuers phone number
     * @param issuerWebsite {String} The card issuers website
     * @param valid {Boolean} Is this a valid BIN or IIN number
     */
    constructor(binNumber, cardBrand, cardCategory, cardType, country, countryCode, countryCode3, currencyCode, ipBlocklisted, ipBlocklists, ipCity, ipCountry, ipCountryCode, ipCountryCode3, ipMatchesBin, ipRegion, isCommercial, isPrepaid, issuer, issuerPhone, issuerWebsite, valid) { 
        
        BINLookupResponse.initialize(this, binNumber, cardBrand, cardCategory, cardType, country, countryCode, countryCode3, currencyCode, ipBlocklisted, ipBlocklists, ipCity, ipCountry, ipCountryCode, ipCountryCode3, ipMatchesBin, ipRegion, isCommercial, isPrepaid, issuer, issuerPhone, issuerWebsite, valid);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, binNumber, cardBrand, cardCategory, cardType, country, countryCode, countryCode3, currencyCode, ipBlocklisted, ipBlocklists, ipCity, ipCountry, ipCountryCode, ipCountryCode3, ipMatchesBin, ipRegion, isCommercial, isPrepaid, issuer, issuerPhone, issuerWebsite, valid) { 
        obj['bin-number'] = binNumber;
        obj['card-brand'] = cardBrand;
        obj['card-category'] = cardCategory;
        obj['card-type'] = cardType;
        obj['country'] = country;
        obj['country-code'] = countryCode;
        obj['country-code3'] = countryCode3;
        obj['currency-code'] = currencyCode;
        obj['ip-blocklisted'] = ipBlocklisted;
        obj['ip-blocklists'] = ipBlocklists;
        obj['ip-city'] = ipCity;
        obj['ip-country'] = ipCountry;
        obj['ip-country-code'] = ipCountryCode;
        obj['ip-country-code3'] = ipCountryCode3;
        obj['ip-matches-bin'] = ipMatchesBin;
        obj['ip-region'] = ipRegion;
        obj['is-commercial'] = isCommercial;
        obj['is-prepaid'] = isPrepaid;
        obj['issuer'] = issuer;
        obj['issuer-phone'] = issuerPhone;
        obj['issuer-website'] = issuerWebsite;
        obj['valid'] = valid;
    }

    /**
     * Constructs a <code>BINLookupResponse</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/BINLookupResponse} obj Optional instance to populate.
     * @return {module:model/BINLookupResponse} The populated <code>BINLookupResponse</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new BINLookupResponse();

            if (data.hasOwnProperty('bin-number')) {
                obj['bin-number'] = ApiClient.convertToType(data['bin-number'], 'String');
            }
            if (data.hasOwnProperty('card-brand')) {
                obj['card-brand'] = ApiClient.convertToType(data['card-brand'], 'String');
            }
            if (data.hasOwnProperty('card-category')) {
                obj['card-category'] = ApiClient.convertToType(data['card-category'], 'String');
            }
            if (data.hasOwnProperty('card-type')) {
                obj['card-type'] = ApiClient.convertToType(data['card-type'], 'String');
            }
            if (data.hasOwnProperty('country')) {
                obj['country'] = ApiClient.convertToType(data['country'], 'String');
            }
            if (data.hasOwnProperty('country-code')) {
                obj['country-code'] = ApiClient.convertToType(data['country-code'], 'String');
            }
            if (data.hasOwnProperty('country-code3')) {
                obj['country-code3'] = ApiClient.convertToType(data['country-code3'], 'String');
            }
            if (data.hasOwnProperty('currency-code')) {
                obj['currency-code'] = ApiClient.convertToType(data['currency-code'], 'String');
            }
            if (data.hasOwnProperty('ip-blocklisted')) {
                obj['ip-blocklisted'] = ApiClient.convertToType(data['ip-blocklisted'], 'Boolean');
            }
            if (data.hasOwnProperty('ip-blocklists')) {
                obj['ip-blocklists'] = ApiClient.convertToType(data['ip-blocklists'], ['String']);
            }
            if (data.hasOwnProperty('ip-city')) {
                obj['ip-city'] = ApiClient.convertToType(data['ip-city'], 'String');
            }
            if (data.hasOwnProperty('ip-country')) {
                obj['ip-country'] = ApiClient.convertToType(data['ip-country'], 'String');
            }
            if (data.hasOwnProperty('ip-country-code')) {
                obj['ip-country-code'] = ApiClient.convertToType(data['ip-country-code'], 'String');
            }
            if (data.hasOwnProperty('ip-country-code3')) {
                obj['ip-country-code3'] = ApiClient.convertToType(data['ip-country-code3'], 'String');
            }
            if (data.hasOwnProperty('ip-matches-bin')) {
                obj['ip-matches-bin'] = ApiClient.convertToType(data['ip-matches-bin'], 'Boolean');
            }
            if (data.hasOwnProperty('ip-region')) {
                obj['ip-region'] = ApiClient.convertToType(data['ip-region'], 'String');
            }
            if (data.hasOwnProperty('is-commercial')) {
                obj['is-commercial'] = ApiClient.convertToType(data['is-commercial'], 'Boolean');
            }
            if (data.hasOwnProperty('is-prepaid')) {
                obj['is-prepaid'] = ApiClient.convertToType(data['is-prepaid'], 'Boolean');
            }
            if (data.hasOwnProperty('issuer')) {
                obj['issuer'] = ApiClient.convertToType(data['issuer'], 'String');
            }
            if (data.hasOwnProperty('issuer-phone')) {
                obj['issuer-phone'] = ApiClient.convertToType(data['issuer-phone'], 'String');
            }
            if (data.hasOwnProperty('issuer-website')) {
                obj['issuer-website'] = ApiClient.convertToType(data['issuer-website'], 'String');
            }
            if (data.hasOwnProperty('valid')) {
                obj['valid'] = ApiClient.convertToType(data['valid'], 'Boolean');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>BINLookupResponse</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>BINLookupResponse</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of BINLookupResponse.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['bin-number'] && !(typeof data['bin-number'] === 'string' || data['bin-number'] instanceof String)) {
            throw new Error("Expected the field `bin-number` to be a primitive type in the JSON string but got " + data['bin-number']);
        }
        // ensure the json data is a string
        if (data['card-brand'] && !(typeof data['card-brand'] === 'string' || data['card-brand'] instanceof String)) {
            throw new Error("Expected the field `card-brand` to be a primitive type in the JSON string but got " + data['card-brand']);
        }
        // ensure the json data is a string
        if (data['card-category'] && !(typeof data['card-category'] === 'string' || data['card-category'] instanceof String)) {
            throw new Error("Expected the field `card-category` to be a primitive type in the JSON string but got " + data['card-category']);
        }
        // ensure the json data is a string
        if (data['card-type'] && !(typeof data['card-type'] === 'string' || data['card-type'] instanceof String)) {
            throw new Error("Expected the field `card-type` to be a primitive type in the JSON string but got " + data['card-type']);
        }
        // ensure the json data is a string
        if (data['country'] && !(typeof data['country'] === 'string' || data['country'] instanceof String)) {
            throw new Error("Expected the field `country` to be a primitive type in the JSON string but got " + data['country']);
        }
        // ensure the json data is a string
        if (data['country-code'] && !(typeof data['country-code'] === 'string' || data['country-code'] instanceof String)) {
            throw new Error("Expected the field `country-code` to be a primitive type in the JSON string but got " + data['country-code']);
        }
        // ensure the json data is a string
        if (data['country-code3'] && !(typeof data['country-code3'] === 'string' || data['country-code3'] instanceof String)) {
            throw new Error("Expected the field `country-code3` to be a primitive type in the JSON string but got " + data['country-code3']);
        }
        // ensure the json data is a string
        if (data['currency-code'] && !(typeof data['currency-code'] === 'string' || data['currency-code'] instanceof String)) {
            throw new Error("Expected the field `currency-code` to be a primitive type in the JSON string but got " + data['currency-code']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['ip-blocklists'])) {
            throw new Error("Expected the field `ip-blocklists` to be an array in the JSON data but got " + data['ip-blocklists']);
        }
        // ensure the json data is a string
        if (data['ip-city'] && !(typeof data['ip-city'] === 'string' || data['ip-city'] instanceof String)) {
            throw new Error("Expected the field `ip-city` to be a primitive type in the JSON string but got " + data['ip-city']);
        }
        // ensure the json data is a string
        if (data['ip-country'] && !(typeof data['ip-country'] === 'string' || data['ip-country'] instanceof String)) {
            throw new Error("Expected the field `ip-country` to be a primitive type in the JSON string but got " + data['ip-country']);
        }
        // ensure the json data is a string
        if (data['ip-country-code'] && !(typeof data['ip-country-code'] === 'string' || data['ip-country-code'] instanceof String)) {
            throw new Error("Expected the field `ip-country-code` to be a primitive type in the JSON string but got " + data['ip-country-code']);
        }
        // ensure the json data is a string
        if (data['ip-country-code3'] && !(typeof data['ip-country-code3'] === 'string' || data['ip-country-code3'] instanceof String)) {
            throw new Error("Expected the field `ip-country-code3` to be a primitive type in the JSON string but got " + data['ip-country-code3']);
        }
        // ensure the json data is a string
        if (data['ip-region'] && !(typeof data['ip-region'] === 'string' || data['ip-region'] instanceof String)) {
            throw new Error("Expected the field `ip-region` to be a primitive type in the JSON string but got " + data['ip-region']);
        }
        // ensure the json data is a string
        if (data['issuer'] && !(typeof data['issuer'] === 'string' || data['issuer'] instanceof String)) {
            throw new Error("Expected the field `issuer` to be a primitive type in the JSON string but got " + data['issuer']);
        }
        // ensure the json data is a string
        if (data['issuer-phone'] && !(typeof data['issuer-phone'] === 'string' || data['issuer-phone'] instanceof String)) {
            throw new Error("Expected the field `issuer-phone` to be a primitive type in the JSON string but got " + data['issuer-phone']);
        }
        // ensure the json data is a string
        if (data['issuer-website'] && !(typeof data['issuer-website'] === 'string' || data['issuer-website'] instanceof String)) {
            throw new Error("Expected the field `issuer-website` to be a primitive type in the JSON string but got " + data['issuer-website']);
        }

        return true;
    }


}

BINLookupResponse.RequiredProperties = ["bin-number", "card-brand", "card-category", "card-type", "country", "country-code", "country-code3", "currency-code", "ip-blocklisted", "ip-blocklists", "ip-city", "ip-country", "ip-country-code", "ip-country-code3", "ip-matches-bin", "ip-region", "is-commercial", "is-prepaid", "issuer", "issuer-phone", "issuer-website", "valid"];

/**
 * The BIN or IIN number
 * @member {String} bin-number
 */
BINLookupResponse.prototype['bin-number'] = undefined;

/**
 * The card brand (e.g. Visa or Mastercard)
 * @member {String} card-brand
 */
BINLookupResponse.prototype['card-brand'] = undefined;

/**
 * The card category. There are many different card categories the most common card categories are: CLASSIC, BUSINESS, CORPORATE, PLATINUM, PREPAID
 * @member {String} card-category
 */
BINLookupResponse.prototype['card-category'] = undefined;

/**
 * The card type, will always be one of: DEBIT, CREDIT, CHARGE CARD
 * @member {String} card-type
 */
BINLookupResponse.prototype['card-type'] = undefined;

/**
 * The full country name of the issuer
 * @member {String} country
 */
BINLookupResponse.prototype['country'] = undefined;

/**
 * The ISO 2-letter country code of the issuer
 * @member {String} country-code
 */
BINLookupResponse.prototype['country-code'] = undefined;

/**
 * The ISO 3-letter country code of the issuer
 * @member {String} country-code3
 */
BINLookupResponse.prototype['country-code3'] = undefined;

/**
 * ISO 4217 currency code associated with the country of the issuer
 * @member {String} currency-code
 */
BINLookupResponse.prototype['currency-code'] = undefined;

/**
 * True if the customers IP is listed on one of our blocklists, see the <a href=\"http://www.neutrinoapi.com/api/ip-blocklist/\">IP Blocklist API</a>
 * @member {Boolean} ip-blocklisted
 */
BINLookupResponse.prototype['ip-blocklisted'] = undefined;

/**
 * An array of strings indicating which blocklists this IP is listed on
 * @member {Array.<String>} ip-blocklists
 */
BINLookupResponse.prototype['ip-blocklists'] = undefined;

/**
 * The city of the customers IP (if detectable)
 * @member {String} ip-city
 */
BINLookupResponse.prototype['ip-city'] = undefined;

/**
 * The country of the customers IP
 * @member {String} ip-country
 */
BINLookupResponse.prototype['ip-country'] = undefined;

/**
 * The ISO 2-letter country code of the customers IP
 * @member {String} ip-country-code
 */
BINLookupResponse.prototype['ip-country-code'] = undefined;

/**
 * The ISO 3-letter country code of the customers IP
 * @member {String} ip-country-code3
 */
BINLookupResponse.prototype['ip-country-code3'] = undefined;

/**
 * True if the customers IP country matches the BIN country
 * @member {Boolean} ip-matches-bin
 */
BINLookupResponse.prototype['ip-matches-bin'] = undefined;

/**
 * The region of the customers IP (if detectable)
 * @member {String} ip-region
 */
BINLookupResponse.prototype['ip-region'] = undefined;

/**
 * Is this a commercial/business use card
 * @member {Boolean} is-commercial
 */
BINLookupResponse.prototype['is-commercial'] = undefined;

/**
 * Is this a prepaid or prepaid reloadable card
 * @member {Boolean} is-prepaid
 */
BINLookupResponse.prototype['is-prepaid'] = undefined;

/**
 * The card issuer
 * @member {String} issuer
 */
BINLookupResponse.prototype['issuer'] = undefined;

/**
 * The card issuers phone number
 * @member {String} issuer-phone
 */
BINLookupResponse.prototype['issuer-phone'] = undefined;

/**
 * The card issuers website
 * @member {String} issuer-website
 */
BINLookupResponse.prototype['issuer-website'] = undefined;

/**
 * Is this a valid BIN or IIN number
 * @member {Boolean} valid
 */
BINLookupResponse.prototype['valid'] = undefined;






export default BINLookupResponse;

