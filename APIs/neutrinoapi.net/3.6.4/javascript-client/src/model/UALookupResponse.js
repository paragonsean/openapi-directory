/**
 * Neutrino API
 * The general-purpose API
 *
 * The version of the OpenAPI document: 3.6.4
 * Contact: ops@neutrinoapi.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The UALookupResponse model module.
 * @module model/UALookupResponse
 * @version 3.6.4
 */
class UALookupResponse {
    /**
     * Constructs a new <code>UALookupResponse</code>.
     * @alias module:model/UALookupResponse
     * @param browserEngine {String} If the client is a web browser which underlying browser engine does it use
     * @param browserRelease {String} If the client is a web browser which year was this browser version released
     * @param deviceBrand {String} The device brand / manufacturer
     * @param deviceHeightPx {Number} The device display height in CSS 'px'
     * @param deviceModel {String} The device model
     * @param deviceModelCode {String} The device model code
     * @param devicePixelRatio {Number} The device display pixel ratio (the ratio of the resolution in physical pixels to the resolution in CSS pixels)
     * @param devicePpi {Number} The device display PPI (pixels per inch)
     * @param devicePrice {Number} The average device price on release in USD
     * @param deviceRelease {String} The year when this device model was released
     * @param deviceResolution {String} The device display resolution in physical pixels (e.g. 720x1280)
     * @param deviceWidthPx {Number} The device display width in CSS 'px'
     * @param isMobile {Boolean} Is this a mobile device (e.g. a phone or tablet)
     * @param isWebview {Boolean} Is this a WebView / embedded software client
     * @param name {String} The client software name
     * @param os {String} The full operating system name
     * @param osFamily {String} The operating system family. The major OS families are: Android, Windows, macOS, iOS, Linux
     * @param osVersion {String} The operating system full version
     * @param osVersionMajor {String} The operating system major version
     * @param type {String} The user agent type, possible values are: <br> <ul> <li>desktop</li> <li>phone</li> <li>tablet</li> <li>wearable</li> <li>tv</li> <li>console</li> <li>email</li> <li>library</li> <li>robot</li> <li>unknown</li> </ul>
     * @param ua {String} The user agent string
     * @param version {String} The client software full version
     * @param versionMajor {String} The client software major version
     */
    constructor(browserEngine, browserRelease, deviceBrand, deviceHeightPx, deviceModel, deviceModelCode, devicePixelRatio, devicePpi, devicePrice, deviceRelease, deviceResolution, deviceWidthPx, isMobile, isWebview, name, os, osFamily, osVersion, osVersionMajor, type, ua, version, versionMajor) { 
        
        UALookupResponse.initialize(this, browserEngine, browserRelease, deviceBrand, deviceHeightPx, deviceModel, deviceModelCode, devicePixelRatio, devicePpi, devicePrice, deviceRelease, deviceResolution, deviceWidthPx, isMobile, isWebview, name, os, osFamily, osVersion, osVersionMajor, type, ua, version, versionMajor);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, browserEngine, browserRelease, deviceBrand, deviceHeightPx, deviceModel, deviceModelCode, devicePixelRatio, devicePpi, devicePrice, deviceRelease, deviceResolution, deviceWidthPx, isMobile, isWebview, name, os, osFamily, osVersion, osVersionMajor, type, ua, version, versionMajor) { 
        obj['browser-engine'] = browserEngine;
        obj['browser-release'] = browserRelease;
        obj['device-brand'] = deviceBrand;
        obj['device-height-px'] = deviceHeightPx;
        obj['device-model'] = deviceModel;
        obj['device-model-code'] = deviceModelCode;
        obj['device-pixel-ratio'] = devicePixelRatio;
        obj['device-ppi'] = devicePpi;
        obj['device-price'] = devicePrice;
        obj['device-release'] = deviceRelease;
        obj['device-resolution'] = deviceResolution;
        obj['device-width-px'] = deviceWidthPx;
        obj['is-mobile'] = isMobile;
        obj['is-webview'] = isWebview;
        obj['name'] = name;
        obj['os'] = os;
        obj['os-family'] = osFamily;
        obj['os-version'] = osVersion;
        obj['os-version-major'] = osVersionMajor;
        obj['type'] = type;
        obj['ua'] = ua;
        obj['version'] = version;
        obj['version-major'] = versionMajor;
    }

    /**
     * Constructs a <code>UALookupResponse</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/UALookupResponse} obj Optional instance to populate.
     * @return {module:model/UALookupResponse} The populated <code>UALookupResponse</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new UALookupResponse();

            if (data.hasOwnProperty('browser-engine')) {
                obj['browser-engine'] = ApiClient.convertToType(data['browser-engine'], 'String');
            }
            if (data.hasOwnProperty('browser-release')) {
                obj['browser-release'] = ApiClient.convertToType(data['browser-release'], 'String');
            }
            if (data.hasOwnProperty('device-brand')) {
                obj['device-brand'] = ApiClient.convertToType(data['device-brand'], 'String');
            }
            if (data.hasOwnProperty('device-height-px')) {
                obj['device-height-px'] = ApiClient.convertToType(data['device-height-px'], 'Number');
            }
            if (data.hasOwnProperty('device-model')) {
                obj['device-model'] = ApiClient.convertToType(data['device-model'], 'String');
            }
            if (data.hasOwnProperty('device-model-code')) {
                obj['device-model-code'] = ApiClient.convertToType(data['device-model-code'], 'String');
            }
            if (data.hasOwnProperty('device-pixel-ratio')) {
                obj['device-pixel-ratio'] = ApiClient.convertToType(data['device-pixel-ratio'], 'Number');
            }
            if (data.hasOwnProperty('device-ppi')) {
                obj['device-ppi'] = ApiClient.convertToType(data['device-ppi'], 'Number');
            }
            if (data.hasOwnProperty('device-price')) {
                obj['device-price'] = ApiClient.convertToType(data['device-price'], 'Number');
            }
            if (data.hasOwnProperty('device-release')) {
                obj['device-release'] = ApiClient.convertToType(data['device-release'], 'String');
            }
            if (data.hasOwnProperty('device-resolution')) {
                obj['device-resolution'] = ApiClient.convertToType(data['device-resolution'], 'String');
            }
            if (data.hasOwnProperty('device-width-px')) {
                obj['device-width-px'] = ApiClient.convertToType(data['device-width-px'], 'Number');
            }
            if (data.hasOwnProperty('is-mobile')) {
                obj['is-mobile'] = ApiClient.convertToType(data['is-mobile'], 'Boolean');
            }
            if (data.hasOwnProperty('is-webview')) {
                obj['is-webview'] = ApiClient.convertToType(data['is-webview'], 'Boolean');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('os')) {
                obj['os'] = ApiClient.convertToType(data['os'], 'String');
            }
            if (data.hasOwnProperty('os-family')) {
                obj['os-family'] = ApiClient.convertToType(data['os-family'], 'String');
            }
            if (data.hasOwnProperty('os-version')) {
                obj['os-version'] = ApiClient.convertToType(data['os-version'], 'String');
            }
            if (data.hasOwnProperty('os-version-major')) {
                obj['os-version-major'] = ApiClient.convertToType(data['os-version-major'], 'String');
            }
            if (data.hasOwnProperty('type')) {
                obj['type'] = ApiClient.convertToType(data['type'], 'String');
            }
            if (data.hasOwnProperty('ua')) {
                obj['ua'] = ApiClient.convertToType(data['ua'], 'String');
            }
            if (data.hasOwnProperty('version')) {
                obj['version'] = ApiClient.convertToType(data['version'], 'String');
            }
            if (data.hasOwnProperty('version-major')) {
                obj['version-major'] = ApiClient.convertToType(data['version-major'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>UALookupResponse</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>UALookupResponse</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of UALookupResponse.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['browser-engine'] && !(typeof data['browser-engine'] === 'string' || data['browser-engine'] instanceof String)) {
            throw new Error("Expected the field `browser-engine` to be a primitive type in the JSON string but got " + data['browser-engine']);
        }
        // ensure the json data is a string
        if (data['browser-release'] && !(typeof data['browser-release'] === 'string' || data['browser-release'] instanceof String)) {
            throw new Error("Expected the field `browser-release` to be a primitive type in the JSON string but got " + data['browser-release']);
        }
        // ensure the json data is a string
        if (data['device-brand'] && !(typeof data['device-brand'] === 'string' || data['device-brand'] instanceof String)) {
            throw new Error("Expected the field `device-brand` to be a primitive type in the JSON string but got " + data['device-brand']);
        }
        // ensure the json data is a string
        if (data['device-model'] && !(typeof data['device-model'] === 'string' || data['device-model'] instanceof String)) {
            throw new Error("Expected the field `device-model` to be a primitive type in the JSON string but got " + data['device-model']);
        }
        // ensure the json data is a string
        if (data['device-model-code'] && !(typeof data['device-model-code'] === 'string' || data['device-model-code'] instanceof String)) {
            throw new Error("Expected the field `device-model-code` to be a primitive type in the JSON string but got " + data['device-model-code']);
        }
        // ensure the json data is a string
        if (data['device-release'] && !(typeof data['device-release'] === 'string' || data['device-release'] instanceof String)) {
            throw new Error("Expected the field `device-release` to be a primitive type in the JSON string but got " + data['device-release']);
        }
        // ensure the json data is a string
        if (data['device-resolution'] && !(typeof data['device-resolution'] === 'string' || data['device-resolution'] instanceof String)) {
            throw new Error("Expected the field `device-resolution` to be a primitive type in the JSON string but got " + data['device-resolution']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // ensure the json data is a string
        if (data['os'] && !(typeof data['os'] === 'string' || data['os'] instanceof String)) {
            throw new Error("Expected the field `os` to be a primitive type in the JSON string but got " + data['os']);
        }
        // ensure the json data is a string
        if (data['os-family'] && !(typeof data['os-family'] === 'string' || data['os-family'] instanceof String)) {
            throw new Error("Expected the field `os-family` to be a primitive type in the JSON string but got " + data['os-family']);
        }
        // ensure the json data is a string
        if (data['os-version'] && !(typeof data['os-version'] === 'string' || data['os-version'] instanceof String)) {
            throw new Error("Expected the field `os-version` to be a primitive type in the JSON string but got " + data['os-version']);
        }
        // ensure the json data is a string
        if (data['os-version-major'] && !(typeof data['os-version-major'] === 'string' || data['os-version-major'] instanceof String)) {
            throw new Error("Expected the field `os-version-major` to be a primitive type in the JSON string but got " + data['os-version-major']);
        }
        // ensure the json data is a string
        if (data['type'] && !(typeof data['type'] === 'string' || data['type'] instanceof String)) {
            throw new Error("Expected the field `type` to be a primitive type in the JSON string but got " + data['type']);
        }
        // ensure the json data is a string
        if (data['ua'] && !(typeof data['ua'] === 'string' || data['ua'] instanceof String)) {
            throw new Error("Expected the field `ua` to be a primitive type in the JSON string but got " + data['ua']);
        }
        // ensure the json data is a string
        if (data['version'] && !(typeof data['version'] === 'string' || data['version'] instanceof String)) {
            throw new Error("Expected the field `version` to be a primitive type in the JSON string but got " + data['version']);
        }
        // ensure the json data is a string
        if (data['version-major'] && !(typeof data['version-major'] === 'string' || data['version-major'] instanceof String)) {
            throw new Error("Expected the field `version-major` to be a primitive type in the JSON string but got " + data['version-major']);
        }

        return true;
    }


}

UALookupResponse.RequiredProperties = ["browser-engine", "browser-release", "device-brand", "device-height-px", "device-model", "device-model-code", "device-pixel-ratio", "device-ppi", "device-price", "device-release", "device-resolution", "device-width-px", "is-mobile", "is-webview", "name", "os", "os-family", "os-version", "os-version-major", "type", "ua", "version", "version-major"];

/**
 * If the client is a web browser which underlying browser engine does it use
 * @member {String} browser-engine
 */
UALookupResponse.prototype['browser-engine'] = undefined;

/**
 * If the client is a web browser which year was this browser version released
 * @member {String} browser-release
 */
UALookupResponse.prototype['browser-release'] = undefined;

/**
 * The device brand / manufacturer
 * @member {String} device-brand
 */
UALookupResponse.prototype['device-brand'] = undefined;

/**
 * The device display height in CSS 'px'
 * @member {Number} device-height-px
 */
UALookupResponse.prototype['device-height-px'] = undefined;

/**
 * The device model
 * @member {String} device-model
 */
UALookupResponse.prototype['device-model'] = undefined;

/**
 * The device model code
 * @member {String} device-model-code
 */
UALookupResponse.prototype['device-model-code'] = undefined;

/**
 * The device display pixel ratio (the ratio of the resolution in physical pixels to the resolution in CSS pixels)
 * @member {Number} device-pixel-ratio
 */
UALookupResponse.prototype['device-pixel-ratio'] = undefined;

/**
 * The device display PPI (pixels per inch)
 * @member {Number} device-ppi
 */
UALookupResponse.prototype['device-ppi'] = undefined;

/**
 * The average device price on release in USD
 * @member {Number} device-price
 */
UALookupResponse.prototype['device-price'] = undefined;

/**
 * The year when this device model was released
 * @member {String} device-release
 */
UALookupResponse.prototype['device-release'] = undefined;

/**
 * The device display resolution in physical pixels (e.g. 720x1280)
 * @member {String} device-resolution
 */
UALookupResponse.prototype['device-resolution'] = undefined;

/**
 * The device display width in CSS 'px'
 * @member {Number} device-width-px
 */
UALookupResponse.prototype['device-width-px'] = undefined;

/**
 * Is this a mobile device (e.g. a phone or tablet)
 * @member {Boolean} is-mobile
 */
UALookupResponse.prototype['is-mobile'] = undefined;

/**
 * Is this a WebView / embedded software client
 * @member {Boolean} is-webview
 */
UALookupResponse.prototype['is-webview'] = undefined;

/**
 * The client software name
 * @member {String} name
 */
UALookupResponse.prototype['name'] = undefined;

/**
 * The full operating system name
 * @member {String} os
 */
UALookupResponse.prototype['os'] = undefined;

/**
 * The operating system family. The major OS families are: Android, Windows, macOS, iOS, Linux
 * @member {String} os-family
 */
UALookupResponse.prototype['os-family'] = undefined;

/**
 * The operating system full version
 * @member {String} os-version
 */
UALookupResponse.prototype['os-version'] = undefined;

/**
 * The operating system major version
 * @member {String} os-version-major
 */
UALookupResponse.prototype['os-version-major'] = undefined;

/**
 * The user agent type, possible values are: <br> <ul> <li>desktop</li> <li>phone</li> <li>tablet</li> <li>wearable</li> <li>tv</li> <li>console</li> <li>email</li> <li>library</li> <li>robot</li> <li>unknown</li> </ul>
 * @member {String} type
 */
UALookupResponse.prototype['type'] = undefined;

/**
 * The user agent string
 * @member {String} ua
 */
UALookupResponse.prototype['ua'] = undefined;

/**
 * The client software full version
 * @member {String} version
 */
UALookupResponse.prototype['version'] = undefined;

/**
 * The client software major version
 * @member {String} version-major
 */
UALookupResponse.prototype['version-major'] = undefined;






export default UALookupResponse;

