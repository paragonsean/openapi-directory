/**
 * Neutrino API
 * The general-purpose API
 *
 * The version of the OpenAPI document: 3.6.4
 * Contact: ops@neutrinoapi.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Timezone from './Timezone';

/**
 * The IPInfoResponse model module.
 * @module model/IPInfoResponse
 * @version 3.6.4
 */
class IPInfoResponse {
    /**
     * Constructs a new <code>IPInfoResponse</code>.
     * @alias module:model/IPInfoResponse
     * @param city {String} Name of the city (if detectable)
     * @param continentCode {String} ISO 2-letter continent code
     * @param country {String} Full country name
     * @param countryCode {String} ISO 2-letter country code
     * @param countryCode3 {String} ISO 3-letter country code
     * @param currencyCode {String} ISO 4217 currency code associated with the country
     * @param hostDomain {String} The IPs host domain (only set if reverse-lookup has been used)
     * @param hostname {String} The IPs full hostname (only set if reverse-lookup has been used)
     * @param ip {String} The IP address
     * @param isBogon {Boolean} True if this is a bogon IP address such as a private network, local network or reserved address
     * @param isV4Mapped {Boolean} True if this is a <a href=\"https://en.wikipedia.org/wiki/IPv6#IPv4-mapped_IPv6_addresses\">IPv4 mapped IPv6 address</a>
     * @param isV6 {Boolean} True if this is a IPv6 address. False if IPv4
     * @param latitude {Number} Location latitude
     * @param longitude {Number} Location longitude
     * @param region {String} Name of the region (if detectable)
     * @param regionCode {String} ISO 3166-2 region code (if detectable)
     * @param timezone {module:model/Timezone} 
     * @param valid {Boolean} True if this is a valid IPv4 or IPv6 address
     */
    constructor(city, continentCode, country, countryCode, countryCode3, currencyCode, hostDomain, hostname, ip, isBogon, isV4Mapped, isV6, latitude, longitude, region, regionCode, timezone, valid) { 
        
        IPInfoResponse.initialize(this, city, continentCode, country, countryCode, countryCode3, currencyCode, hostDomain, hostname, ip, isBogon, isV4Mapped, isV6, latitude, longitude, region, regionCode, timezone, valid);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, city, continentCode, country, countryCode, countryCode3, currencyCode, hostDomain, hostname, ip, isBogon, isV4Mapped, isV6, latitude, longitude, region, regionCode, timezone, valid) { 
        obj['city'] = city;
        obj['continent-code'] = continentCode;
        obj['country'] = country;
        obj['country-code'] = countryCode;
        obj['country-code3'] = countryCode3;
        obj['currency-code'] = currencyCode;
        obj['host-domain'] = hostDomain;
        obj['hostname'] = hostname;
        obj['ip'] = ip;
        obj['is-bogon'] = isBogon;
        obj['is-v4-mapped'] = isV4Mapped;
        obj['is-v6'] = isV6;
        obj['latitude'] = latitude;
        obj['longitude'] = longitude;
        obj['region'] = region;
        obj['region-code'] = regionCode;
        obj['timezone'] = timezone;
        obj['valid'] = valid;
    }

    /**
     * Constructs a <code>IPInfoResponse</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/IPInfoResponse} obj Optional instance to populate.
     * @return {module:model/IPInfoResponse} The populated <code>IPInfoResponse</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new IPInfoResponse();

            if (data.hasOwnProperty('city')) {
                obj['city'] = ApiClient.convertToType(data['city'], 'String');
            }
            if (data.hasOwnProperty('continent-code')) {
                obj['continent-code'] = ApiClient.convertToType(data['continent-code'], 'String');
            }
            if (data.hasOwnProperty('country')) {
                obj['country'] = ApiClient.convertToType(data['country'], 'String');
            }
            if (data.hasOwnProperty('country-code')) {
                obj['country-code'] = ApiClient.convertToType(data['country-code'], 'String');
            }
            if (data.hasOwnProperty('country-code3')) {
                obj['country-code3'] = ApiClient.convertToType(data['country-code3'], 'String');
            }
            if (data.hasOwnProperty('currency-code')) {
                obj['currency-code'] = ApiClient.convertToType(data['currency-code'], 'String');
            }
            if (data.hasOwnProperty('host-domain')) {
                obj['host-domain'] = ApiClient.convertToType(data['host-domain'], 'String');
            }
            if (data.hasOwnProperty('hostname')) {
                obj['hostname'] = ApiClient.convertToType(data['hostname'], 'String');
            }
            if (data.hasOwnProperty('ip')) {
                obj['ip'] = ApiClient.convertToType(data['ip'], 'String');
            }
            if (data.hasOwnProperty('is-bogon')) {
                obj['is-bogon'] = ApiClient.convertToType(data['is-bogon'], 'Boolean');
            }
            if (data.hasOwnProperty('is-v4-mapped')) {
                obj['is-v4-mapped'] = ApiClient.convertToType(data['is-v4-mapped'], 'Boolean');
            }
            if (data.hasOwnProperty('is-v6')) {
                obj['is-v6'] = ApiClient.convertToType(data['is-v6'], 'Boolean');
            }
            if (data.hasOwnProperty('latitude')) {
                obj['latitude'] = ApiClient.convertToType(data['latitude'], 'Number');
            }
            if (data.hasOwnProperty('longitude')) {
                obj['longitude'] = ApiClient.convertToType(data['longitude'], 'Number');
            }
            if (data.hasOwnProperty('region')) {
                obj['region'] = ApiClient.convertToType(data['region'], 'String');
            }
            if (data.hasOwnProperty('region-code')) {
                obj['region-code'] = ApiClient.convertToType(data['region-code'], 'String');
            }
            if (data.hasOwnProperty('timezone')) {
                obj['timezone'] = Timezone.constructFromObject(data['timezone']);
            }
            if (data.hasOwnProperty('valid')) {
                obj['valid'] = ApiClient.convertToType(data['valid'], 'Boolean');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>IPInfoResponse</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>IPInfoResponse</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of IPInfoResponse.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['city'] && !(typeof data['city'] === 'string' || data['city'] instanceof String)) {
            throw new Error("Expected the field `city` to be a primitive type in the JSON string but got " + data['city']);
        }
        // ensure the json data is a string
        if (data['continent-code'] && !(typeof data['continent-code'] === 'string' || data['continent-code'] instanceof String)) {
            throw new Error("Expected the field `continent-code` to be a primitive type in the JSON string but got " + data['continent-code']);
        }
        // ensure the json data is a string
        if (data['country'] && !(typeof data['country'] === 'string' || data['country'] instanceof String)) {
            throw new Error("Expected the field `country` to be a primitive type in the JSON string but got " + data['country']);
        }
        // ensure the json data is a string
        if (data['country-code'] && !(typeof data['country-code'] === 'string' || data['country-code'] instanceof String)) {
            throw new Error("Expected the field `country-code` to be a primitive type in the JSON string but got " + data['country-code']);
        }
        // ensure the json data is a string
        if (data['country-code3'] && !(typeof data['country-code3'] === 'string' || data['country-code3'] instanceof String)) {
            throw new Error("Expected the field `country-code3` to be a primitive type in the JSON string but got " + data['country-code3']);
        }
        // ensure the json data is a string
        if (data['currency-code'] && !(typeof data['currency-code'] === 'string' || data['currency-code'] instanceof String)) {
            throw new Error("Expected the field `currency-code` to be a primitive type in the JSON string but got " + data['currency-code']);
        }
        // ensure the json data is a string
        if (data['host-domain'] && !(typeof data['host-domain'] === 'string' || data['host-domain'] instanceof String)) {
            throw new Error("Expected the field `host-domain` to be a primitive type in the JSON string but got " + data['host-domain']);
        }
        // ensure the json data is a string
        if (data['hostname'] && !(typeof data['hostname'] === 'string' || data['hostname'] instanceof String)) {
            throw new Error("Expected the field `hostname` to be a primitive type in the JSON string but got " + data['hostname']);
        }
        // ensure the json data is a string
        if (data['ip'] && !(typeof data['ip'] === 'string' || data['ip'] instanceof String)) {
            throw new Error("Expected the field `ip` to be a primitive type in the JSON string but got " + data['ip']);
        }
        // ensure the json data is a string
        if (data['region'] && !(typeof data['region'] === 'string' || data['region'] instanceof String)) {
            throw new Error("Expected the field `region` to be a primitive type in the JSON string but got " + data['region']);
        }
        // ensure the json data is a string
        if (data['region-code'] && !(typeof data['region-code'] === 'string' || data['region-code'] instanceof String)) {
            throw new Error("Expected the field `region-code` to be a primitive type in the JSON string but got " + data['region-code']);
        }
        // validate the optional field `timezone`
        if (data['timezone']) { // data not null
          Timezone.validateJSON(data['timezone']);
        }

        return true;
    }


}

IPInfoResponse.RequiredProperties = ["city", "continent-code", "country", "country-code", "country-code3", "currency-code", "host-domain", "hostname", "ip", "is-bogon", "is-v4-mapped", "is-v6", "latitude", "longitude", "region", "region-code", "timezone", "valid"];

/**
 * Name of the city (if detectable)
 * @member {String} city
 */
IPInfoResponse.prototype['city'] = undefined;

/**
 * ISO 2-letter continent code
 * @member {String} continent-code
 */
IPInfoResponse.prototype['continent-code'] = undefined;

/**
 * Full country name
 * @member {String} country
 */
IPInfoResponse.prototype['country'] = undefined;

/**
 * ISO 2-letter country code
 * @member {String} country-code
 */
IPInfoResponse.prototype['country-code'] = undefined;

/**
 * ISO 3-letter country code
 * @member {String} country-code3
 */
IPInfoResponse.prototype['country-code3'] = undefined;

/**
 * ISO 4217 currency code associated with the country
 * @member {String} currency-code
 */
IPInfoResponse.prototype['currency-code'] = undefined;

/**
 * The IPs host domain (only set if reverse-lookup has been used)
 * @member {String} host-domain
 */
IPInfoResponse.prototype['host-domain'] = undefined;

/**
 * The IPs full hostname (only set if reverse-lookup has been used)
 * @member {String} hostname
 */
IPInfoResponse.prototype['hostname'] = undefined;

/**
 * The IP address
 * @member {String} ip
 */
IPInfoResponse.prototype['ip'] = undefined;

/**
 * True if this is a bogon IP address such as a private network, local network or reserved address
 * @member {Boolean} is-bogon
 */
IPInfoResponse.prototype['is-bogon'] = undefined;

/**
 * True if this is a <a href=\"https://en.wikipedia.org/wiki/IPv6#IPv4-mapped_IPv6_addresses\">IPv4 mapped IPv6 address</a>
 * @member {Boolean} is-v4-mapped
 */
IPInfoResponse.prototype['is-v4-mapped'] = undefined;

/**
 * True if this is a IPv6 address. False if IPv4
 * @member {Boolean} is-v6
 */
IPInfoResponse.prototype['is-v6'] = undefined;

/**
 * Location latitude
 * @member {Number} latitude
 */
IPInfoResponse.prototype['latitude'] = undefined;

/**
 * Location longitude
 * @member {Number} longitude
 */
IPInfoResponse.prototype['longitude'] = undefined;

/**
 * Name of the region (if detectable)
 * @member {String} region
 */
IPInfoResponse.prototype['region'] = undefined;

/**
 * ISO 3166-2 region code (if detectable)
 * @member {String} region-code
 */
IPInfoResponse.prototype['region-code'] = undefined;

/**
 * @member {module:model/Timezone} timezone
 */
IPInfoResponse.prototype['timezone'] = undefined;

/**
 * True if this is a valid IPv4 or IPv6 address
 * @member {Boolean} valid
 */
IPInfoResponse.prototype['valid'] = undefined;






export default IPInfoResponse;

