/**
 * Neutrino API
 * The general-purpose API
 *
 * The version of the OpenAPI document: 3.6.4
 * Contact: ops@neutrinoapi.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Location from './Location';

/**
 * The GeocodeAddressResponse model module.
 * @module model/GeocodeAddressResponse
 * @version 3.6.4
 */
class GeocodeAddressResponse {
    /**
     * Constructs a new <code>GeocodeAddressResponse</code>.
     * @alias module:model/GeocodeAddressResponse
     * @param found {Number} The number of possible matching locations found
     * @param locations {Array.<module:model/Location>} Array of matching location objects
     */
    constructor(found, locations) { 
        
        GeocodeAddressResponse.initialize(this, found, locations);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, found, locations) { 
        obj['found'] = found;
        obj['locations'] = locations;
    }

    /**
     * Constructs a <code>GeocodeAddressResponse</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/GeocodeAddressResponse} obj Optional instance to populate.
     * @return {module:model/GeocodeAddressResponse} The populated <code>GeocodeAddressResponse</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new GeocodeAddressResponse();

            if (data.hasOwnProperty('found')) {
                obj['found'] = ApiClient.convertToType(data['found'], 'Number');
            }
            if (data.hasOwnProperty('locations')) {
                obj['locations'] = ApiClient.convertToType(data['locations'], [Location]);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>GeocodeAddressResponse</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>GeocodeAddressResponse</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of GeocodeAddressResponse.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        if (data['locations']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['locations'])) {
                throw new Error("Expected the field `locations` to be an array in the JSON data but got " + data['locations']);
            }
            // validate the optional field `locations` (array)
            for (const item of data['locations']) {
                Location.validateJSON(item);
            };
        }

        return true;
    }


}

GeocodeAddressResponse.RequiredProperties = ["found", "locations"];

/**
 * The number of possible matching locations found
 * @member {Number} found
 */
GeocodeAddressResponse.prototype['found'] = undefined;

/**
 * Array of matching location objects
 * @member {Array.<module:model/Location>} locations
 */
GeocodeAddressResponse.prototype['locations'] = undefined;






export default GeocodeAddressResponse;

