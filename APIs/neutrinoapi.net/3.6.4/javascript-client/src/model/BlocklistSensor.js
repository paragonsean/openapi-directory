/**
 * Neutrino API
 * The general-purpose API
 *
 * The version of the OpenAPI document: 3.6.4
 * Contact: ops@neutrinoapi.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The BlocklistSensor model module.
 * @module model/BlocklistSensor
 * @version 3.6.4
 */
class BlocklistSensor {
    /**
     * Constructs a new <code>BlocklistSensor</code>.
     * 
     * @alias module:model/BlocklistSensor
     * @param blocklist {String} The primary blocklist category this sensor belongs to
     * @param description {String} Contains details about the sensor source and what type of malicious activity was detected
     * @param id {Number} The sensor ID. This is a permanent and unique ID for each sensor
     */
    constructor(blocklist, description, id) { 
        
        BlocklistSensor.initialize(this, blocklist, description, id);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, blocklist, description, id) { 
        obj['blocklist'] = blocklist;
        obj['description'] = description;
        obj['id'] = id;
    }

    /**
     * Constructs a <code>BlocklistSensor</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/BlocklistSensor} obj Optional instance to populate.
     * @return {module:model/BlocklistSensor} The populated <code>BlocklistSensor</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new BlocklistSensor();

            if (data.hasOwnProperty('blocklist')) {
                obj['blocklist'] = ApiClient.convertToType(data['blocklist'], 'String');
            }
            if (data.hasOwnProperty('description')) {
                obj['description'] = ApiClient.convertToType(data['description'], 'String');
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'Number');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>BlocklistSensor</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>BlocklistSensor</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of BlocklistSensor.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['blocklist'] && !(typeof data['blocklist'] === 'string' || data['blocklist'] instanceof String)) {
            throw new Error("Expected the field `blocklist` to be a primitive type in the JSON string but got " + data['blocklist']);
        }
        // ensure the json data is a string
        if (data['description'] && !(typeof data['description'] === 'string' || data['description'] instanceof String)) {
            throw new Error("Expected the field `description` to be a primitive type in the JSON string but got " + data['description']);
        }

        return true;
    }


}

BlocklistSensor.RequiredProperties = ["blocklist", "description", "id"];

/**
 * The primary blocklist category this sensor belongs to
 * @member {String} blocklist
 */
BlocklistSensor.prototype['blocklist'] = undefined;

/**
 * Contains details about the sensor source and what type of malicious activity was detected
 * @member {String} description
 */
BlocklistSensor.prototype['description'] = undefined;

/**
 * The sensor ID. This is a permanent and unique ID for each sensor
 * @member {Number} id
 */
BlocklistSensor.prototype['id'] = undefined;






export default BlocklistSensor;

