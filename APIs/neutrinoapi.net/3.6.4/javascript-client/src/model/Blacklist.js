/**
 * Neutrino API
 * The general-purpose API
 *
 * The version of the OpenAPI document: 3.6.4
 * Contact: ops@neutrinoapi.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The Blacklist model module.
 * @module model/Blacklist
 * @version 3.6.4
 */
class Blacklist {
    /**
     * Constructs a new <code>Blacklist</code>.
     * @alias module:model/Blacklist
     * @param isListed {Boolean} True if the host is currently black-listed
     * @param listHost {String} The hostname of the DNSBL
     * @param listName {String} The name of the DNSBL
     * @param listRating {Number} The list rating [1-3] with 1 being the best rating and 3 the lowest rating
     * @param responseTime {Number} The DNSBL server response time in milliseconds
     * @param returnCode {String} The specific return code for this listing (only set if listed)
     * @param txtRecord {String} The TXT record returned for this listing (only set if listed)
     */
    constructor(isListed, listHost, listName, listRating, responseTime, returnCode, txtRecord) { 
        
        Blacklist.initialize(this, isListed, listHost, listName, listRating, responseTime, returnCode, txtRecord);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, isListed, listHost, listName, listRating, responseTime, returnCode, txtRecord) { 
        obj['is-listed'] = isListed;
        obj['list-host'] = listHost;
        obj['list-name'] = listName;
        obj['list-rating'] = listRating;
        obj['response-time'] = responseTime;
        obj['return-code'] = returnCode;
        obj['txt-record'] = txtRecord;
    }

    /**
     * Constructs a <code>Blacklist</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Blacklist} obj Optional instance to populate.
     * @return {module:model/Blacklist} The populated <code>Blacklist</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Blacklist();

            if (data.hasOwnProperty('is-listed')) {
                obj['is-listed'] = ApiClient.convertToType(data['is-listed'], 'Boolean');
            }
            if (data.hasOwnProperty('list-host')) {
                obj['list-host'] = ApiClient.convertToType(data['list-host'], 'String');
            }
            if (data.hasOwnProperty('list-name')) {
                obj['list-name'] = ApiClient.convertToType(data['list-name'], 'String');
            }
            if (data.hasOwnProperty('list-rating')) {
                obj['list-rating'] = ApiClient.convertToType(data['list-rating'], 'Number');
            }
            if (data.hasOwnProperty('response-time')) {
                obj['response-time'] = ApiClient.convertToType(data['response-time'], 'Number');
            }
            if (data.hasOwnProperty('return-code')) {
                obj['return-code'] = ApiClient.convertToType(data['return-code'], 'String');
            }
            if (data.hasOwnProperty('txt-record')) {
                obj['txt-record'] = ApiClient.convertToType(data['txt-record'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Blacklist</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Blacklist</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of Blacklist.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['list-host'] && !(typeof data['list-host'] === 'string' || data['list-host'] instanceof String)) {
            throw new Error("Expected the field `list-host` to be a primitive type in the JSON string but got " + data['list-host']);
        }
        // ensure the json data is a string
        if (data['list-name'] && !(typeof data['list-name'] === 'string' || data['list-name'] instanceof String)) {
            throw new Error("Expected the field `list-name` to be a primitive type in the JSON string but got " + data['list-name']);
        }
        // ensure the json data is a string
        if (data['return-code'] && !(typeof data['return-code'] === 'string' || data['return-code'] instanceof String)) {
            throw new Error("Expected the field `return-code` to be a primitive type in the JSON string but got " + data['return-code']);
        }
        // ensure the json data is a string
        if (data['txt-record'] && !(typeof data['txt-record'] === 'string' || data['txt-record'] instanceof String)) {
            throw new Error("Expected the field `txt-record` to be a primitive type in the JSON string but got " + data['txt-record']);
        }

        return true;
    }


}

Blacklist.RequiredProperties = ["is-listed", "list-host", "list-name", "list-rating", "response-time", "return-code", "txt-record"];

/**
 * True if the host is currently black-listed
 * @member {Boolean} is-listed
 */
Blacklist.prototype['is-listed'] = undefined;

/**
 * The hostname of the DNSBL
 * @member {String} list-host
 */
Blacklist.prototype['list-host'] = undefined;

/**
 * The name of the DNSBL
 * @member {String} list-name
 */
Blacklist.prototype['list-name'] = undefined;

/**
 * The list rating [1-3] with 1 being the best rating and 3 the lowest rating
 * @member {Number} list-rating
 */
Blacklist.prototype['list-rating'] = undefined;

/**
 * The DNSBL server response time in milliseconds
 * @member {Number} response-time
 */
Blacklist.prototype['response-time'] = undefined;

/**
 * The specific return code for this listing (only set if listed)
 * @member {String} return-code
 */
Blacklist.prototype['return-code'] = undefined;

/**
 * The TXT record returned for this listing (only set if listed)
 * @member {String} txt-record
 */
Blacklist.prototype['txt-record'] = undefined;






export default Blacklist;

