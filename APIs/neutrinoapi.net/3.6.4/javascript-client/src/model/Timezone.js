/**
 * Neutrino API
 * The general-purpose API
 *
 * The version of the OpenAPI document: 3.6.4
 * Contact: ops@neutrinoapi.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The Timezone model module.
 * @module model/Timezone
 * @version 3.6.4
 */
class Timezone {
    /**
     * Constructs a new <code>Timezone</code>.
     * Map containing timezone details
     * @alias module:model/Timezone
     * @param abbr {String} The time zone abbreviation
     * @param date {String} The current date at the time zone (ISO 8601 format 'YYYY-MM-DD')
     * @param id {String} The time zone ID as per the IANA time zone database (tzdata)
     * @param name {String} The full time zone name
     * @param offset {String} The UTC offset for the time zone (ISO 8601 format '±hh:mm')
     * @param time {String} The current time at the time zone (ISO 8601 format 'hh:mm:ss.sss')
     */
    constructor(abbr, date, id, name, offset, time) { 
        
        Timezone.initialize(this, abbr, date, id, name, offset, time);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, abbr, date, id, name, offset, time) { 
        obj['abbr'] = abbr;
        obj['date'] = date;
        obj['id'] = id;
        obj['name'] = name;
        obj['offset'] = offset;
        obj['time'] = time;
    }

    /**
     * Constructs a <code>Timezone</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Timezone} obj Optional instance to populate.
     * @return {module:model/Timezone} The populated <code>Timezone</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Timezone();

            if (data.hasOwnProperty('abbr')) {
                obj['abbr'] = ApiClient.convertToType(data['abbr'], 'String');
            }
            if (data.hasOwnProperty('date')) {
                obj['date'] = ApiClient.convertToType(data['date'], 'String');
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('offset')) {
                obj['offset'] = ApiClient.convertToType(data['offset'], 'String');
            }
            if (data.hasOwnProperty('time')) {
                obj['time'] = ApiClient.convertToType(data['time'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Timezone</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Timezone</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of Timezone.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['abbr'] && !(typeof data['abbr'] === 'string' || data['abbr'] instanceof String)) {
            throw new Error("Expected the field `abbr` to be a primitive type in the JSON string but got " + data['abbr']);
        }
        // ensure the json data is a string
        if (data['date'] && !(typeof data['date'] === 'string' || data['date'] instanceof String)) {
            throw new Error("Expected the field `date` to be a primitive type in the JSON string but got " + data['date']);
        }
        // ensure the json data is a string
        if (data['id'] && !(typeof data['id'] === 'string' || data['id'] instanceof String)) {
            throw new Error("Expected the field `id` to be a primitive type in the JSON string but got " + data['id']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // ensure the json data is a string
        if (data['offset'] && !(typeof data['offset'] === 'string' || data['offset'] instanceof String)) {
            throw new Error("Expected the field `offset` to be a primitive type in the JSON string but got " + data['offset']);
        }
        // ensure the json data is a string
        if (data['time'] && !(typeof data['time'] === 'string' || data['time'] instanceof String)) {
            throw new Error("Expected the field `time` to be a primitive type in the JSON string but got " + data['time']);
        }

        return true;
    }


}

Timezone.RequiredProperties = ["abbr", "date", "id", "name", "offset", "time"];

/**
 * The time zone abbreviation
 * @member {String} abbr
 */
Timezone.prototype['abbr'] = undefined;

/**
 * The current date at the time zone (ISO 8601 format 'YYYY-MM-DD')
 * @member {String} date
 */
Timezone.prototype['date'] = undefined;

/**
 * The time zone ID as per the IANA time zone database (tzdata)
 * @member {String} id
 */
Timezone.prototype['id'] = undefined;

/**
 * The full time zone name
 * @member {String} name
 */
Timezone.prototype['name'] = undefined;

/**
 * The UTC offset for the time zone (ISO 8601 format '±hh:mm')
 * @member {String} offset
 */
Timezone.prototype['offset'] = undefined;

/**
 * The current time at the time zone (ISO 8601 format 'hh:mm:ss.sss')
 * @member {String} time
 */
Timezone.prototype['time'] = undefined;






export default Timezone;

