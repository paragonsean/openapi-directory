/**
 * Neutrino API
 * The general-purpose API
 *
 * The version of the OpenAPI document: 3.6.4
 * Contact: ops@neutrinoapi.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Blacklist from './Blacklist';

/**
 * The HostReputationResponse model module.
 * @module model/HostReputationResponse
 * @version 3.6.4
 */
class HostReputationResponse {
    /**
     * Constructs a new <code>HostReputationResponse</code>.
     * @alias module:model/HostReputationResponse
     * @param host {String} The IP address or host name
     * @param isListed {Boolean} Is this host blacklisted
     * @param listCount {Number} The number of DNSBLs the host is listed on
     * @param lists {Array.<module:model/Blacklist>} Array of objects for each DNSBL checked
     */
    constructor(host, isListed, listCount, lists) { 
        
        HostReputationResponse.initialize(this, host, isListed, listCount, lists);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, host, isListed, listCount, lists) { 
        obj['host'] = host;
        obj['is-listed'] = isListed;
        obj['list-count'] = listCount;
        obj['lists'] = lists;
    }

    /**
     * Constructs a <code>HostReputationResponse</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/HostReputationResponse} obj Optional instance to populate.
     * @return {module:model/HostReputationResponse} The populated <code>HostReputationResponse</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new HostReputationResponse();

            if (data.hasOwnProperty('host')) {
                obj['host'] = ApiClient.convertToType(data['host'], 'String');
            }
            if (data.hasOwnProperty('is-listed')) {
                obj['is-listed'] = ApiClient.convertToType(data['is-listed'], 'Boolean');
            }
            if (data.hasOwnProperty('list-count')) {
                obj['list-count'] = ApiClient.convertToType(data['list-count'], 'Number');
            }
            if (data.hasOwnProperty('lists')) {
                obj['lists'] = ApiClient.convertToType(data['lists'], [Blacklist]);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>HostReputationResponse</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>HostReputationResponse</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of HostReputationResponse.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['host'] && !(typeof data['host'] === 'string' || data['host'] instanceof String)) {
            throw new Error("Expected the field `host` to be a primitive type in the JSON string but got " + data['host']);
        }
        if (data['lists']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['lists'])) {
                throw new Error("Expected the field `lists` to be an array in the JSON data but got " + data['lists']);
            }
            // validate the optional field `lists` (array)
            for (const item of data['lists']) {
                Blacklist.validateJSON(item);
            };
        }

        return true;
    }


}

HostReputationResponse.RequiredProperties = ["host", "is-listed", "list-count", "lists"];

/**
 * The IP address or host name
 * @member {String} host
 */
HostReputationResponse.prototype['host'] = undefined;

/**
 * Is this host blacklisted
 * @member {Boolean} is-listed
 */
HostReputationResponse.prototype['is-listed'] = undefined;

/**
 * The number of DNSBLs the host is listed on
 * @member {Number} list-count
 */
HostReputationResponse.prototype['list-count'] = undefined;

/**
 * Array of objects for each DNSBL checked
 * @member {Array.<module:model/Blacklist>} lists
 */
HostReputationResponse.prototype['lists'] = undefined;






export default HostReputationResponse;

