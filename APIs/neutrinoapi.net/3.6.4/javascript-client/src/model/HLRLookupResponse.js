/**
 * Neutrino API
 * The general-purpose API
 *
 * The version of the OpenAPI document: 3.6.4
 * Contact: ops@neutrinoapi.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The HLRLookupResponse model module.
 * @module model/HLRLookupResponse
 * @version 3.6.4
 */
class HLRLookupResponse {
    /**
     * Constructs a new <code>HLRLookupResponse</code>.
     * @alias module:model/HLRLookupResponse
     * @param country {String} The phone number country
     * @param countryCode {String} The number location as an ISO 2-letter country code
     * @param countryCode3 {String} The number location as an ISO 3-letter country code
     * @param currencyCode {String} ISO 4217 currency code associated with the country
     * @param currentNetwork {String} The currently used network/carrier name
     * @param hlrStatus {String} The HLR lookup status, possible values are: <br> <ul> <li>ok - the HLR lookup was successful and the device is connected</li> <li>absent - the number was once registered but the device has been switched off or out of network range for some time</li> <li>unknown - the number is not known by the mobile network</li> <li>invalid - the number is not a valid mobile MSISDN number</li> <li>fixed-line - the number is a registered fixed-line not mobile</li> <li>voip - the number has been detected as a VOIP line</li> <li>failed - the HLR lookup has failed, we could not determine the real status of this number</li> </ul>
     * @param hlrValid {Boolean} Was the HLR lookup successful. If true then this is a working and registered cell-phone or mobile device (SMS and phone calls will be delivered)
     * @param imsi {String} The mobile IMSI number (International Mobile Subscriber Identity)
     * @param internationalCallingCode {String} The international calling code
     * @param internationalNumber {String} The number represented in full international format
     * @param isMobile {Boolean} True if this is a mobile number (only true with 100% certainty, if the number type is unknown this value will be false)
     * @param isPorted {Boolean} Has this number been ported to another network
     * @param isRoaming {Boolean} Is this number currently roaming from its origin country
     * @param localNumber {String} The number represented in local dialing format
     * @param location {String} The number location. Could be a city, region or country depending on the type of number
     * @param mcc {String} The mobile MCC number (Mobile Country Code)
     * @param mnc {String} The mobile MNC number (Mobile Network Code)
     * @param msc {String} The mobile MSC number (Mobile Switching Center)
     * @param msin {String} The mobile MSIN number (Mobile Subscription Identification Number)
     * @param numberType {String} The number type, possible values are: <br> <ul> <li>mobile</li> <li>fixed-line</li> <li>premium-rate</li> <li>toll-free</li> <li>voip</li> <li>unknown</li> </ul>
     * @param numberValid {Boolean} True if this a valid phone number
     * @param originNetwork {String} The origin network/carrier name
     * @param portedNetwork {String} The ported to network/carrier name (only set if the number has been ported)
     * @param roamingCountryCode {String} If the number is currently roaming, the ISO 2-letter country code of the roaming in country
     */
    constructor(country, countryCode, countryCode3, currencyCode, currentNetwork, hlrStatus, hlrValid, imsi, internationalCallingCode, internationalNumber, isMobile, isPorted, isRoaming, localNumber, location, mcc, mnc, msc, msin, numberType, numberValid, originNetwork, portedNetwork, roamingCountryCode) { 
        
        HLRLookupResponse.initialize(this, country, countryCode, countryCode3, currencyCode, currentNetwork, hlrStatus, hlrValid, imsi, internationalCallingCode, internationalNumber, isMobile, isPorted, isRoaming, localNumber, location, mcc, mnc, msc, msin, numberType, numberValid, originNetwork, portedNetwork, roamingCountryCode);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, country, countryCode, countryCode3, currencyCode, currentNetwork, hlrStatus, hlrValid, imsi, internationalCallingCode, internationalNumber, isMobile, isPorted, isRoaming, localNumber, location, mcc, mnc, msc, msin, numberType, numberValid, originNetwork, portedNetwork, roamingCountryCode) { 
        obj['country'] = country;
        obj['country-code'] = countryCode;
        obj['country-code3'] = countryCode3;
        obj['currency-code'] = currencyCode;
        obj['current-network'] = currentNetwork;
        obj['hlr-status'] = hlrStatus;
        obj['hlr-valid'] = hlrValid;
        obj['imsi'] = imsi;
        obj['international-calling-code'] = internationalCallingCode;
        obj['international-number'] = internationalNumber;
        obj['is-mobile'] = isMobile;
        obj['is-ported'] = isPorted;
        obj['is-roaming'] = isRoaming;
        obj['local-number'] = localNumber;
        obj['location'] = location;
        obj['mcc'] = mcc;
        obj['mnc'] = mnc;
        obj['msc'] = msc;
        obj['msin'] = msin;
        obj['number-type'] = numberType;
        obj['number-valid'] = numberValid;
        obj['origin-network'] = originNetwork;
        obj['ported-network'] = portedNetwork;
        obj['roaming-country-code'] = roamingCountryCode;
    }

    /**
     * Constructs a <code>HLRLookupResponse</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/HLRLookupResponse} obj Optional instance to populate.
     * @return {module:model/HLRLookupResponse} The populated <code>HLRLookupResponse</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new HLRLookupResponse();

            if (data.hasOwnProperty('country')) {
                obj['country'] = ApiClient.convertToType(data['country'], 'String');
            }
            if (data.hasOwnProperty('country-code')) {
                obj['country-code'] = ApiClient.convertToType(data['country-code'], 'String');
            }
            if (data.hasOwnProperty('country-code3')) {
                obj['country-code3'] = ApiClient.convertToType(data['country-code3'], 'String');
            }
            if (data.hasOwnProperty('currency-code')) {
                obj['currency-code'] = ApiClient.convertToType(data['currency-code'], 'String');
            }
            if (data.hasOwnProperty('current-network')) {
                obj['current-network'] = ApiClient.convertToType(data['current-network'], 'String');
            }
            if (data.hasOwnProperty('hlr-status')) {
                obj['hlr-status'] = ApiClient.convertToType(data['hlr-status'], 'String');
            }
            if (data.hasOwnProperty('hlr-valid')) {
                obj['hlr-valid'] = ApiClient.convertToType(data['hlr-valid'], 'Boolean');
            }
            if (data.hasOwnProperty('imsi')) {
                obj['imsi'] = ApiClient.convertToType(data['imsi'], 'String');
            }
            if (data.hasOwnProperty('international-calling-code')) {
                obj['international-calling-code'] = ApiClient.convertToType(data['international-calling-code'], 'String');
            }
            if (data.hasOwnProperty('international-number')) {
                obj['international-number'] = ApiClient.convertToType(data['international-number'], 'String');
            }
            if (data.hasOwnProperty('is-mobile')) {
                obj['is-mobile'] = ApiClient.convertToType(data['is-mobile'], 'Boolean');
            }
            if (data.hasOwnProperty('is-ported')) {
                obj['is-ported'] = ApiClient.convertToType(data['is-ported'], 'Boolean');
            }
            if (data.hasOwnProperty('is-roaming')) {
                obj['is-roaming'] = ApiClient.convertToType(data['is-roaming'], 'Boolean');
            }
            if (data.hasOwnProperty('local-number')) {
                obj['local-number'] = ApiClient.convertToType(data['local-number'], 'String');
            }
            if (data.hasOwnProperty('location')) {
                obj['location'] = ApiClient.convertToType(data['location'], 'String');
            }
            if (data.hasOwnProperty('mcc')) {
                obj['mcc'] = ApiClient.convertToType(data['mcc'], 'String');
            }
            if (data.hasOwnProperty('mnc')) {
                obj['mnc'] = ApiClient.convertToType(data['mnc'], 'String');
            }
            if (data.hasOwnProperty('msc')) {
                obj['msc'] = ApiClient.convertToType(data['msc'], 'String');
            }
            if (data.hasOwnProperty('msin')) {
                obj['msin'] = ApiClient.convertToType(data['msin'], 'String');
            }
            if (data.hasOwnProperty('number-type')) {
                obj['number-type'] = ApiClient.convertToType(data['number-type'], 'String');
            }
            if (data.hasOwnProperty('number-valid')) {
                obj['number-valid'] = ApiClient.convertToType(data['number-valid'], 'Boolean');
            }
            if (data.hasOwnProperty('origin-network')) {
                obj['origin-network'] = ApiClient.convertToType(data['origin-network'], 'String');
            }
            if (data.hasOwnProperty('ported-network')) {
                obj['ported-network'] = ApiClient.convertToType(data['ported-network'], 'String');
            }
            if (data.hasOwnProperty('roaming-country-code')) {
                obj['roaming-country-code'] = ApiClient.convertToType(data['roaming-country-code'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>HLRLookupResponse</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>HLRLookupResponse</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of HLRLookupResponse.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['country'] && !(typeof data['country'] === 'string' || data['country'] instanceof String)) {
            throw new Error("Expected the field `country` to be a primitive type in the JSON string but got " + data['country']);
        }
        // ensure the json data is a string
        if (data['country-code'] && !(typeof data['country-code'] === 'string' || data['country-code'] instanceof String)) {
            throw new Error("Expected the field `country-code` to be a primitive type in the JSON string but got " + data['country-code']);
        }
        // ensure the json data is a string
        if (data['country-code3'] && !(typeof data['country-code3'] === 'string' || data['country-code3'] instanceof String)) {
            throw new Error("Expected the field `country-code3` to be a primitive type in the JSON string but got " + data['country-code3']);
        }
        // ensure the json data is a string
        if (data['currency-code'] && !(typeof data['currency-code'] === 'string' || data['currency-code'] instanceof String)) {
            throw new Error("Expected the field `currency-code` to be a primitive type in the JSON string but got " + data['currency-code']);
        }
        // ensure the json data is a string
        if (data['current-network'] && !(typeof data['current-network'] === 'string' || data['current-network'] instanceof String)) {
            throw new Error("Expected the field `current-network` to be a primitive type in the JSON string but got " + data['current-network']);
        }
        // ensure the json data is a string
        if (data['hlr-status'] && !(typeof data['hlr-status'] === 'string' || data['hlr-status'] instanceof String)) {
            throw new Error("Expected the field `hlr-status` to be a primitive type in the JSON string but got " + data['hlr-status']);
        }
        // ensure the json data is a string
        if (data['imsi'] && !(typeof data['imsi'] === 'string' || data['imsi'] instanceof String)) {
            throw new Error("Expected the field `imsi` to be a primitive type in the JSON string but got " + data['imsi']);
        }
        // ensure the json data is a string
        if (data['international-calling-code'] && !(typeof data['international-calling-code'] === 'string' || data['international-calling-code'] instanceof String)) {
            throw new Error("Expected the field `international-calling-code` to be a primitive type in the JSON string but got " + data['international-calling-code']);
        }
        // ensure the json data is a string
        if (data['international-number'] && !(typeof data['international-number'] === 'string' || data['international-number'] instanceof String)) {
            throw new Error("Expected the field `international-number` to be a primitive type in the JSON string but got " + data['international-number']);
        }
        // ensure the json data is a string
        if (data['local-number'] && !(typeof data['local-number'] === 'string' || data['local-number'] instanceof String)) {
            throw new Error("Expected the field `local-number` to be a primitive type in the JSON string but got " + data['local-number']);
        }
        // ensure the json data is a string
        if (data['location'] && !(typeof data['location'] === 'string' || data['location'] instanceof String)) {
            throw new Error("Expected the field `location` to be a primitive type in the JSON string but got " + data['location']);
        }
        // ensure the json data is a string
        if (data['mcc'] && !(typeof data['mcc'] === 'string' || data['mcc'] instanceof String)) {
            throw new Error("Expected the field `mcc` to be a primitive type in the JSON string but got " + data['mcc']);
        }
        // ensure the json data is a string
        if (data['mnc'] && !(typeof data['mnc'] === 'string' || data['mnc'] instanceof String)) {
            throw new Error("Expected the field `mnc` to be a primitive type in the JSON string but got " + data['mnc']);
        }
        // ensure the json data is a string
        if (data['msc'] && !(typeof data['msc'] === 'string' || data['msc'] instanceof String)) {
            throw new Error("Expected the field `msc` to be a primitive type in the JSON string but got " + data['msc']);
        }
        // ensure the json data is a string
        if (data['msin'] && !(typeof data['msin'] === 'string' || data['msin'] instanceof String)) {
            throw new Error("Expected the field `msin` to be a primitive type in the JSON string but got " + data['msin']);
        }
        // ensure the json data is a string
        if (data['number-type'] && !(typeof data['number-type'] === 'string' || data['number-type'] instanceof String)) {
            throw new Error("Expected the field `number-type` to be a primitive type in the JSON string but got " + data['number-type']);
        }
        // ensure the json data is a string
        if (data['origin-network'] && !(typeof data['origin-network'] === 'string' || data['origin-network'] instanceof String)) {
            throw new Error("Expected the field `origin-network` to be a primitive type in the JSON string but got " + data['origin-network']);
        }
        // ensure the json data is a string
        if (data['ported-network'] && !(typeof data['ported-network'] === 'string' || data['ported-network'] instanceof String)) {
            throw new Error("Expected the field `ported-network` to be a primitive type in the JSON string but got " + data['ported-network']);
        }
        // ensure the json data is a string
        if (data['roaming-country-code'] && !(typeof data['roaming-country-code'] === 'string' || data['roaming-country-code'] instanceof String)) {
            throw new Error("Expected the field `roaming-country-code` to be a primitive type in the JSON string but got " + data['roaming-country-code']);
        }

        return true;
    }


}

HLRLookupResponse.RequiredProperties = ["country", "country-code", "country-code3", "currency-code", "current-network", "hlr-status", "hlr-valid", "imsi", "international-calling-code", "international-number", "is-mobile", "is-ported", "is-roaming", "local-number", "location", "mcc", "mnc", "msc", "msin", "number-type", "number-valid", "origin-network", "ported-network", "roaming-country-code"];

/**
 * The phone number country
 * @member {String} country
 */
HLRLookupResponse.prototype['country'] = undefined;

/**
 * The number location as an ISO 2-letter country code
 * @member {String} country-code
 */
HLRLookupResponse.prototype['country-code'] = undefined;

/**
 * The number location as an ISO 3-letter country code
 * @member {String} country-code3
 */
HLRLookupResponse.prototype['country-code3'] = undefined;

/**
 * ISO 4217 currency code associated with the country
 * @member {String} currency-code
 */
HLRLookupResponse.prototype['currency-code'] = undefined;

/**
 * The currently used network/carrier name
 * @member {String} current-network
 */
HLRLookupResponse.prototype['current-network'] = undefined;

/**
 * The HLR lookup status, possible values are: <br> <ul> <li>ok - the HLR lookup was successful and the device is connected</li> <li>absent - the number was once registered but the device has been switched off or out of network range for some time</li> <li>unknown - the number is not known by the mobile network</li> <li>invalid - the number is not a valid mobile MSISDN number</li> <li>fixed-line - the number is a registered fixed-line not mobile</li> <li>voip - the number has been detected as a VOIP line</li> <li>failed - the HLR lookup has failed, we could not determine the real status of this number</li> </ul>
 * @member {String} hlr-status
 */
HLRLookupResponse.prototype['hlr-status'] = undefined;

/**
 * Was the HLR lookup successful. If true then this is a working and registered cell-phone or mobile device (SMS and phone calls will be delivered)
 * @member {Boolean} hlr-valid
 */
HLRLookupResponse.prototype['hlr-valid'] = undefined;

/**
 * The mobile IMSI number (International Mobile Subscriber Identity)
 * @member {String} imsi
 */
HLRLookupResponse.prototype['imsi'] = undefined;

/**
 * The international calling code
 * @member {String} international-calling-code
 */
HLRLookupResponse.prototype['international-calling-code'] = undefined;

/**
 * The number represented in full international format
 * @member {String} international-number
 */
HLRLookupResponse.prototype['international-number'] = undefined;

/**
 * True if this is a mobile number (only true with 100% certainty, if the number type is unknown this value will be false)
 * @member {Boolean} is-mobile
 */
HLRLookupResponse.prototype['is-mobile'] = undefined;

/**
 * Has this number been ported to another network
 * @member {Boolean} is-ported
 */
HLRLookupResponse.prototype['is-ported'] = undefined;

/**
 * Is this number currently roaming from its origin country
 * @member {Boolean} is-roaming
 */
HLRLookupResponse.prototype['is-roaming'] = undefined;

/**
 * The number represented in local dialing format
 * @member {String} local-number
 */
HLRLookupResponse.prototype['local-number'] = undefined;

/**
 * The number location. Could be a city, region or country depending on the type of number
 * @member {String} location
 */
HLRLookupResponse.prototype['location'] = undefined;

/**
 * The mobile MCC number (Mobile Country Code)
 * @member {String} mcc
 */
HLRLookupResponse.prototype['mcc'] = undefined;

/**
 * The mobile MNC number (Mobile Network Code)
 * @member {String} mnc
 */
HLRLookupResponse.prototype['mnc'] = undefined;

/**
 * The mobile MSC number (Mobile Switching Center)
 * @member {String} msc
 */
HLRLookupResponse.prototype['msc'] = undefined;

/**
 * The mobile MSIN number (Mobile Subscription Identification Number)
 * @member {String} msin
 */
HLRLookupResponse.prototype['msin'] = undefined;

/**
 * The number type, possible values are: <br> <ul> <li>mobile</li> <li>fixed-line</li> <li>premium-rate</li> <li>toll-free</li> <li>voip</li> <li>unknown</li> </ul>
 * @member {String} number-type
 */
HLRLookupResponse.prototype['number-type'] = undefined;

/**
 * True if this a valid phone number
 * @member {Boolean} number-valid
 */
HLRLookupResponse.prototype['number-valid'] = undefined;

/**
 * The origin network/carrier name
 * @member {String} origin-network
 */
HLRLookupResponse.prototype['origin-network'] = undefined;

/**
 * The ported to network/carrier name (only set if the number has been ported)
 * @member {String} ported-network
 */
HLRLookupResponse.prototype['ported-network'] = undefined;

/**
 * If the number is currently roaming, the ISO 2-letter country code of the roaming in country
 * @member {String} roaming-country-code
 */
HLRLookupResponse.prototype['roaming-country-code'] = undefined;






export default HLRLookupResponse;

