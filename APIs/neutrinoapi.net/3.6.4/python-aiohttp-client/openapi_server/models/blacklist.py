# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class Blacklist(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, is_listed: bool=None, list_host: str=None, list_name: str=None, list_rating: int=None, response_time: int=None, return_code: str=None, txt_record: str=None):
        """Blacklist - a model defined in OpenAPI

        :param is_listed: The is_listed of this Blacklist.
        :param list_host: The list_host of this Blacklist.
        :param list_name: The list_name of this Blacklist.
        :param list_rating: The list_rating of this Blacklist.
        :param response_time: The response_time of this Blacklist.
        :param return_code: The return_code of this Blacklist.
        :param txt_record: The txt_record of this Blacklist.
        """
        self.openapi_types = {
            'is_listed': bool,
            'list_host': str,
            'list_name': str,
            'list_rating': int,
            'response_time': int,
            'return_code': str,
            'txt_record': str
        }

        self.attribute_map = {
            'is_listed': 'is-listed',
            'list_host': 'list-host',
            'list_name': 'list-name',
            'list_rating': 'list-rating',
            'response_time': 'response-time',
            'return_code': 'return-code',
            'txt_record': 'txt-record'
        }

        self._is_listed = is_listed
        self._list_host = list_host
        self._list_name = list_name
        self._list_rating = list_rating
        self._response_time = response_time
        self._return_code = return_code
        self._txt_record = txt_record

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Blacklist':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Blacklist of this Blacklist.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def is_listed(self):
        """Gets the is_listed of this Blacklist.

        True if the host is currently black-listed

        :return: The is_listed of this Blacklist.
        :rtype: bool
        """
        return self._is_listed

    @is_listed.setter
    def is_listed(self, is_listed):
        """Sets the is_listed of this Blacklist.

        True if the host is currently black-listed

        :param is_listed: The is_listed of this Blacklist.
        :type is_listed: bool
        """
        if is_listed is None:
            raise ValueError("Invalid value for `is_listed`, must not be `None`")

        self._is_listed = is_listed

    @property
    def list_host(self):
        """Gets the list_host of this Blacklist.

        The hostname of the DNSBL

        :return: The list_host of this Blacklist.
        :rtype: str
        """
        return self._list_host

    @list_host.setter
    def list_host(self, list_host):
        """Sets the list_host of this Blacklist.

        The hostname of the DNSBL

        :param list_host: The list_host of this Blacklist.
        :type list_host: str
        """
        if list_host is None:
            raise ValueError("Invalid value for `list_host`, must not be `None`")

        self._list_host = list_host

    @property
    def list_name(self):
        """Gets the list_name of this Blacklist.

        The name of the DNSBL

        :return: The list_name of this Blacklist.
        :rtype: str
        """
        return self._list_name

    @list_name.setter
    def list_name(self, list_name):
        """Sets the list_name of this Blacklist.

        The name of the DNSBL

        :param list_name: The list_name of this Blacklist.
        :type list_name: str
        """
        if list_name is None:
            raise ValueError("Invalid value for `list_name`, must not be `None`")

        self._list_name = list_name

    @property
    def list_rating(self):
        """Gets the list_rating of this Blacklist.

        The list rating [1-3] with 1 being the best rating and 3 the lowest rating

        :return: The list_rating of this Blacklist.
        :rtype: int
        """
        return self._list_rating

    @list_rating.setter
    def list_rating(self, list_rating):
        """Sets the list_rating of this Blacklist.

        The list rating [1-3] with 1 being the best rating and 3 the lowest rating

        :param list_rating: The list_rating of this Blacklist.
        :type list_rating: int
        """
        if list_rating is None:
            raise ValueError("Invalid value for `list_rating`, must not be `None`")

        self._list_rating = list_rating

    @property
    def response_time(self):
        """Gets the response_time of this Blacklist.

        The DNSBL server response time in milliseconds

        :return: The response_time of this Blacklist.
        :rtype: int
        """
        return self._response_time

    @response_time.setter
    def response_time(self, response_time):
        """Sets the response_time of this Blacklist.

        The DNSBL server response time in milliseconds

        :param response_time: The response_time of this Blacklist.
        :type response_time: int
        """
        if response_time is None:
            raise ValueError("Invalid value for `response_time`, must not be `None`")

        self._response_time = response_time

    @property
    def return_code(self):
        """Gets the return_code of this Blacklist.

        The specific return code for this listing (only set if listed)

        :return: The return_code of this Blacklist.
        :rtype: str
        """
        return self._return_code

    @return_code.setter
    def return_code(self, return_code):
        """Sets the return_code of this Blacklist.

        The specific return code for this listing (only set if listed)

        :param return_code: The return_code of this Blacklist.
        :type return_code: str
        """
        if return_code is None:
            raise ValueError("Invalid value for `return_code`, must not be `None`")

        self._return_code = return_code

    @property
    def txt_record(self):
        """Gets the txt_record of this Blacklist.

        The TXT record returned for this listing (only set if listed)

        :return: The txt_record of this Blacklist.
        :rtype: str
        """
        return self._txt_record

    @txt_record.setter
    def txt_record(self, txt_record):
        """Sets the txt_record of this Blacklist.

        The TXT record returned for this listing (only set if listed)

        :param txt_record: The txt_record of this Blacklist.
        :type txt_record: str
        """
        if txt_record is None:
            raise ValueError("Invalid value for `txt_record`, must not be `None`")

        self._txt_record = txt_record
