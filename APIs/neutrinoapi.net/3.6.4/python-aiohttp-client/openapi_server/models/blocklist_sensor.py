# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class BlocklistSensor(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, blocklist: str=None, description: str=None, id: int=None):
        """BlocklistSensor - a model defined in OpenAPI

        :param blocklist: The blocklist of this BlocklistSensor.
        :param description: The description of this BlocklistSensor.
        :param id: The id of this BlocklistSensor.
        """
        self.openapi_types = {
            'blocklist': str,
            'description': str,
            'id': int
        }

        self.attribute_map = {
            'blocklist': 'blocklist',
            'description': 'description',
            'id': 'id'
        }

        self._blocklist = blocklist
        self._description = description
        self._id = id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'BlocklistSensor':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The BlocklistSensor of this BlocklistSensor.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def blocklist(self):
        """Gets the blocklist of this BlocklistSensor.

        The primary blocklist category this sensor belongs to

        :return: The blocklist of this BlocklistSensor.
        :rtype: str
        """
        return self._blocklist

    @blocklist.setter
    def blocklist(self, blocklist):
        """Sets the blocklist of this BlocklistSensor.

        The primary blocklist category this sensor belongs to

        :param blocklist: The blocklist of this BlocklistSensor.
        :type blocklist: str
        """
        if blocklist is None:
            raise ValueError("Invalid value for `blocklist`, must not be `None`")

        self._blocklist = blocklist

    @property
    def description(self):
        """Gets the description of this BlocklistSensor.

        Contains details about the sensor source and what type of malicious activity was detected

        :return: The description of this BlocklistSensor.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this BlocklistSensor.

        Contains details about the sensor source and what type of malicious activity was detected

        :param description: The description of this BlocklistSensor.
        :type description: str
        """
        if description is None:
            raise ValueError("Invalid value for `description`, must not be `None`")

        self._description = description

    @property
    def id(self):
        """Gets the id of this BlocklistSensor.

        The sensor ID. This is a permanent and unique ID for each sensor

        :return: The id of this BlocklistSensor.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this BlocklistSensor.

        The sensor ID. This is a permanent and unique ID for each sensor

        :param id: The id of this BlocklistSensor.
        :type id: int
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")

        self._id = id
