# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.blacklist import Blacklist
from openapi_server import util


class HostReputationResponse(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, host: str=None, is_listed: bool=None, list_count: int=None, lists: List[Blacklist]=None):
        """HostReputationResponse - a model defined in OpenAPI

        :param host: The host of this HostReputationResponse.
        :param is_listed: The is_listed of this HostReputationResponse.
        :param list_count: The list_count of this HostReputationResponse.
        :param lists: The lists of this HostReputationResponse.
        """
        self.openapi_types = {
            'host': str,
            'is_listed': bool,
            'list_count': int,
            'lists': List[Blacklist]
        }

        self.attribute_map = {
            'host': 'host',
            'is_listed': 'is-listed',
            'list_count': 'list-count',
            'lists': 'lists'
        }

        self._host = host
        self._is_listed = is_listed
        self._list_count = list_count
        self._lists = lists

    @classmethod
    def from_dict(cls, dikt: dict) -> 'HostReputationResponse':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The HostReputationResponse of this HostReputationResponse.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def host(self):
        """Gets the host of this HostReputationResponse.

        The IP address or host name

        :return: The host of this HostReputationResponse.
        :rtype: str
        """
        return self._host

    @host.setter
    def host(self, host):
        """Sets the host of this HostReputationResponse.

        The IP address or host name

        :param host: The host of this HostReputationResponse.
        :type host: str
        """
        if host is None:
            raise ValueError("Invalid value for `host`, must not be `None`")

        self._host = host

    @property
    def is_listed(self):
        """Gets the is_listed of this HostReputationResponse.

        Is this host blacklisted

        :return: The is_listed of this HostReputationResponse.
        :rtype: bool
        """
        return self._is_listed

    @is_listed.setter
    def is_listed(self, is_listed):
        """Sets the is_listed of this HostReputationResponse.

        Is this host blacklisted

        :param is_listed: The is_listed of this HostReputationResponse.
        :type is_listed: bool
        """
        if is_listed is None:
            raise ValueError("Invalid value for `is_listed`, must not be `None`")

        self._is_listed = is_listed

    @property
    def list_count(self):
        """Gets the list_count of this HostReputationResponse.

        The number of DNSBLs the host is listed on

        :return: The list_count of this HostReputationResponse.
        :rtype: int
        """
        return self._list_count

    @list_count.setter
    def list_count(self, list_count):
        """Sets the list_count of this HostReputationResponse.

        The number of DNSBLs the host is listed on

        :param list_count: The list_count of this HostReputationResponse.
        :type list_count: int
        """
        if list_count is None:
            raise ValueError("Invalid value for `list_count`, must not be `None`")

        self._list_count = list_count

    @property
    def lists(self):
        """Gets the lists of this HostReputationResponse.

        Array of objects for each DNSBL checked

        :return: The lists of this HostReputationResponse.
        :rtype: List[Blacklist]
        """
        return self._lists

    @lists.setter
    def lists(self, lists):
        """Sets the lists of this HostReputationResponse.

        Array of objects for each DNSBL checked

        :param lists: The lists of this HostReputationResponse.
        :type lists: List[Blacklist]
        """
        if lists is None:
            raise ValueError("Invalid value for `lists`, must not be `None`")

        self._lists = lists
