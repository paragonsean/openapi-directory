# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ConvertResponse(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, from_type: str=None, from_value: str=None, result: str=None, result_float: float=None, to_type: str=None, valid: bool=None):
        """ConvertResponse - a model defined in OpenAPI

        :param from_type: The from_type of this ConvertResponse.
        :param from_value: The from_value of this ConvertResponse.
        :param result: The result of this ConvertResponse.
        :param result_float: The result_float of this ConvertResponse.
        :param to_type: The to_type of this ConvertResponse.
        :param valid: The valid of this ConvertResponse.
        """
        self.openapi_types = {
            'from_type': str,
            'from_value': str,
            'result': str,
            'result_float': float,
            'to_type': str,
            'valid': bool
        }

        self.attribute_map = {
            'from_type': 'from-type',
            'from_value': 'from-value',
            'result': 'result',
            'result_float': 'result-float',
            'to_type': 'to-type',
            'valid': 'valid'
        }

        self._from_type = from_type
        self._from_value = from_value
        self._result = result
        self._result_float = result_float
        self._to_type = to_type
        self._valid = valid

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ConvertResponse':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ConvertResponse of this ConvertResponse.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def from_type(self):
        """Gets the from_type of this ConvertResponse.

        The type of the value being converted from

        :return: The from_type of this ConvertResponse.
        :rtype: str
        """
        return self._from_type

    @from_type.setter
    def from_type(self, from_type):
        """Sets the from_type of this ConvertResponse.

        The type of the value being converted from

        :param from_type: The from_type of this ConvertResponse.
        :type from_type: str
        """
        if from_type is None:
            raise ValueError("Invalid value for `from_type`, must not be `None`")

        self._from_type = from_type

    @property
    def from_value(self):
        """Gets the from_value of this ConvertResponse.

        The value being converted from

        :return: The from_value of this ConvertResponse.
        :rtype: str
        """
        return self._from_value

    @from_value.setter
    def from_value(self, from_value):
        """Sets the from_value of this ConvertResponse.

        The value being converted from

        :param from_value: The from_value of this ConvertResponse.
        :type from_value: str
        """
        if from_value is None:
            raise ValueError("Invalid value for `from_value`, must not be `None`")

        self._from_value = from_value

    @property
    def result(self):
        """Gets the result of this ConvertResponse.

        The result of the conversion in string format

        :return: The result of this ConvertResponse.
        :rtype: str
        """
        return self._result

    @result.setter
    def result(self, result):
        """Sets the result of this ConvertResponse.

        The result of the conversion in string format

        :param result: The result of this ConvertResponse.
        :type result: str
        """
        if result is None:
            raise ValueError("Invalid value for `result`, must not be `None`")

        self._result = result

    @property
    def result_float(self):
        """Gets the result_float of this ConvertResponse.

        The result of the conversion as a floating-point number

        :return: The result_float of this ConvertResponse.
        :rtype: float
        """
        return self._result_float

    @result_float.setter
    def result_float(self, result_float):
        """Sets the result_float of this ConvertResponse.

        The result of the conversion as a floating-point number

        :param result_float: The result_float of this ConvertResponse.
        :type result_float: float
        """
        if result_float is None:
            raise ValueError("Invalid value for `result_float`, must not be `None`")

        self._result_float = result_float

    @property
    def to_type(self):
        """Gets the to_type of this ConvertResponse.

        The type being converted to

        :return: The to_type of this ConvertResponse.
        :rtype: str
        """
        return self._to_type

    @to_type.setter
    def to_type(self, to_type):
        """Sets the to_type of this ConvertResponse.

        The type being converted to

        :param to_type: The to_type of this ConvertResponse.
        :type to_type: str
        """
        if to_type is None:
            raise ValueError("Invalid value for `to_type`, must not be `None`")

        self._to_type = to_type

    @property
    def valid(self):
        """Gets the valid of this ConvertResponse.

        True if the conversion was successful and produced a valid result

        :return: The valid of this ConvertResponse.
        :rtype: bool
        """
        return self._valid

    @valid.setter
    def valid(self, valid):
        """Sets the valid of this ConvertResponse.

        True if the conversion was successful and produced a valid result

        :param valid: The valid of this ConvertResponse.
        :type valid: bool
        """
        if valid is None:
            raise ValueError("Invalid value for `valid`, must not be `None`")

        self._valid = valid
