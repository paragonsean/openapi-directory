# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class BINLookupResponse(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, bin_number: str=None, card_brand: str=None, card_category: str=None, card_type: str=None, country: str=None, country_code: str=None, country_code3: str=None, currency_code: str=None, ip_blocklisted: bool=None, ip_blocklists: List[str]=None, ip_city: str=None, ip_country: str=None, ip_country_code: str=None, ip_country_code3: str=None, ip_matches_bin: bool=None, ip_region: str=None, is_commercial: bool=None, is_prepaid: bool=None, issuer: str=None, issuer_phone: str=None, issuer_website: str=None, valid: bool=None):
        """BINLookupResponse - a model defined in OpenAPI

        :param bin_number: The bin_number of this BINLookupResponse.
        :param card_brand: The card_brand of this BINLookupResponse.
        :param card_category: The card_category of this BINLookupResponse.
        :param card_type: The card_type of this BINLookupResponse.
        :param country: The country of this BINLookupResponse.
        :param country_code: The country_code of this BINLookupResponse.
        :param country_code3: The country_code3 of this BINLookupResponse.
        :param currency_code: The currency_code of this BINLookupResponse.
        :param ip_blocklisted: The ip_blocklisted of this BINLookupResponse.
        :param ip_blocklists: The ip_blocklists of this BINLookupResponse.
        :param ip_city: The ip_city of this BINLookupResponse.
        :param ip_country: The ip_country of this BINLookupResponse.
        :param ip_country_code: The ip_country_code of this BINLookupResponse.
        :param ip_country_code3: The ip_country_code3 of this BINLookupResponse.
        :param ip_matches_bin: The ip_matches_bin of this BINLookupResponse.
        :param ip_region: The ip_region of this BINLookupResponse.
        :param is_commercial: The is_commercial of this BINLookupResponse.
        :param is_prepaid: The is_prepaid of this BINLookupResponse.
        :param issuer: The issuer of this BINLookupResponse.
        :param issuer_phone: The issuer_phone of this BINLookupResponse.
        :param issuer_website: The issuer_website of this BINLookupResponse.
        :param valid: The valid of this BINLookupResponse.
        """
        self.openapi_types = {
            'bin_number': str,
            'card_brand': str,
            'card_category': str,
            'card_type': str,
            'country': str,
            'country_code': str,
            'country_code3': str,
            'currency_code': str,
            'ip_blocklisted': bool,
            'ip_blocklists': List[str],
            'ip_city': str,
            'ip_country': str,
            'ip_country_code': str,
            'ip_country_code3': str,
            'ip_matches_bin': bool,
            'ip_region': str,
            'is_commercial': bool,
            'is_prepaid': bool,
            'issuer': str,
            'issuer_phone': str,
            'issuer_website': str,
            'valid': bool
        }

        self.attribute_map = {
            'bin_number': 'bin-number',
            'card_brand': 'card-brand',
            'card_category': 'card-category',
            'card_type': 'card-type',
            'country': 'country',
            'country_code': 'country-code',
            'country_code3': 'country-code3',
            'currency_code': 'currency-code',
            'ip_blocklisted': 'ip-blocklisted',
            'ip_blocklists': 'ip-blocklists',
            'ip_city': 'ip-city',
            'ip_country': 'ip-country',
            'ip_country_code': 'ip-country-code',
            'ip_country_code3': 'ip-country-code3',
            'ip_matches_bin': 'ip-matches-bin',
            'ip_region': 'ip-region',
            'is_commercial': 'is-commercial',
            'is_prepaid': 'is-prepaid',
            'issuer': 'issuer',
            'issuer_phone': 'issuer-phone',
            'issuer_website': 'issuer-website',
            'valid': 'valid'
        }

        self._bin_number = bin_number
        self._card_brand = card_brand
        self._card_category = card_category
        self._card_type = card_type
        self._country = country
        self._country_code = country_code
        self._country_code3 = country_code3
        self._currency_code = currency_code
        self._ip_blocklisted = ip_blocklisted
        self._ip_blocklists = ip_blocklists
        self._ip_city = ip_city
        self._ip_country = ip_country
        self._ip_country_code = ip_country_code
        self._ip_country_code3 = ip_country_code3
        self._ip_matches_bin = ip_matches_bin
        self._ip_region = ip_region
        self._is_commercial = is_commercial
        self._is_prepaid = is_prepaid
        self._issuer = issuer
        self._issuer_phone = issuer_phone
        self._issuer_website = issuer_website
        self._valid = valid

    @classmethod
    def from_dict(cls, dikt: dict) -> 'BINLookupResponse':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The BINLookupResponse of this BINLookupResponse.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def bin_number(self):
        """Gets the bin_number of this BINLookupResponse.

        The BIN or IIN number

        :return: The bin_number of this BINLookupResponse.
        :rtype: str
        """
        return self._bin_number

    @bin_number.setter
    def bin_number(self, bin_number):
        """Sets the bin_number of this BINLookupResponse.

        The BIN or IIN number

        :param bin_number: The bin_number of this BINLookupResponse.
        :type bin_number: str
        """
        if bin_number is None:
            raise ValueError("Invalid value for `bin_number`, must not be `None`")

        self._bin_number = bin_number

    @property
    def card_brand(self):
        """Gets the card_brand of this BINLookupResponse.

        The card brand (e.g. Visa or Mastercard)

        :return: The card_brand of this BINLookupResponse.
        :rtype: str
        """
        return self._card_brand

    @card_brand.setter
    def card_brand(self, card_brand):
        """Sets the card_brand of this BINLookupResponse.

        The card brand (e.g. Visa or Mastercard)

        :param card_brand: The card_brand of this BINLookupResponse.
        :type card_brand: str
        """
        if card_brand is None:
            raise ValueError("Invalid value for `card_brand`, must not be `None`")

        self._card_brand = card_brand

    @property
    def card_category(self):
        """Gets the card_category of this BINLookupResponse.

        The card category. There are many different card categories the most common card categories are: CLASSIC, BUSINESS, CORPORATE, PLATINUM, PREPAID

        :return: The card_category of this BINLookupResponse.
        :rtype: str
        """
        return self._card_category

    @card_category.setter
    def card_category(self, card_category):
        """Sets the card_category of this BINLookupResponse.

        The card category. There are many different card categories the most common card categories are: CLASSIC, BUSINESS, CORPORATE, PLATINUM, PREPAID

        :param card_category: The card_category of this BINLookupResponse.
        :type card_category: str
        """
        if card_category is None:
            raise ValueError("Invalid value for `card_category`, must not be `None`")

        self._card_category = card_category

    @property
    def card_type(self):
        """Gets the card_type of this BINLookupResponse.

        The card type, will always be one of: DEBIT, CREDIT, CHARGE CARD

        :return: The card_type of this BINLookupResponse.
        :rtype: str
        """
        return self._card_type

    @card_type.setter
    def card_type(self, card_type):
        """Sets the card_type of this BINLookupResponse.

        The card type, will always be one of: DEBIT, CREDIT, CHARGE CARD

        :param card_type: The card_type of this BINLookupResponse.
        :type card_type: str
        """
        if card_type is None:
            raise ValueError("Invalid value for `card_type`, must not be `None`")

        self._card_type = card_type

    @property
    def country(self):
        """Gets the country of this BINLookupResponse.

        The full country name of the issuer

        :return: The country of this BINLookupResponse.
        :rtype: str
        """
        return self._country

    @country.setter
    def country(self, country):
        """Sets the country of this BINLookupResponse.

        The full country name of the issuer

        :param country: The country of this BINLookupResponse.
        :type country: str
        """
        if country is None:
            raise ValueError("Invalid value for `country`, must not be `None`")

        self._country = country

    @property
    def country_code(self):
        """Gets the country_code of this BINLookupResponse.

        The ISO 2-letter country code of the issuer

        :return: The country_code of this BINLookupResponse.
        :rtype: str
        """
        return self._country_code

    @country_code.setter
    def country_code(self, country_code):
        """Sets the country_code of this BINLookupResponse.

        The ISO 2-letter country code of the issuer

        :param country_code: The country_code of this BINLookupResponse.
        :type country_code: str
        """
        if country_code is None:
            raise ValueError("Invalid value for `country_code`, must not be `None`")

        self._country_code = country_code

    @property
    def country_code3(self):
        """Gets the country_code3 of this BINLookupResponse.

        The ISO 3-letter country code of the issuer

        :return: The country_code3 of this BINLookupResponse.
        :rtype: str
        """
        return self._country_code3

    @country_code3.setter
    def country_code3(self, country_code3):
        """Sets the country_code3 of this BINLookupResponse.

        The ISO 3-letter country code of the issuer

        :param country_code3: The country_code3 of this BINLookupResponse.
        :type country_code3: str
        """
        if country_code3 is None:
            raise ValueError("Invalid value for `country_code3`, must not be `None`")

        self._country_code3 = country_code3

    @property
    def currency_code(self):
        """Gets the currency_code of this BINLookupResponse.

        ISO 4217 currency code associated with the country of the issuer

        :return: The currency_code of this BINLookupResponse.
        :rtype: str
        """
        return self._currency_code

    @currency_code.setter
    def currency_code(self, currency_code):
        """Sets the currency_code of this BINLookupResponse.

        ISO 4217 currency code associated with the country of the issuer

        :param currency_code: The currency_code of this BINLookupResponse.
        :type currency_code: str
        """
        if currency_code is None:
            raise ValueError("Invalid value for `currency_code`, must not be `None`")

        self._currency_code = currency_code

    @property
    def ip_blocklisted(self):
        """Gets the ip_blocklisted of this BINLookupResponse.

        True if the customers IP is listed on one of our blocklists, see the <a href=\"http://www.neutrinoapi.com/api/ip-blocklist/\">IP Blocklist API</a>

        :return: The ip_blocklisted of this BINLookupResponse.
        :rtype: bool
        """
        return self._ip_blocklisted

    @ip_blocklisted.setter
    def ip_blocklisted(self, ip_blocklisted):
        """Sets the ip_blocklisted of this BINLookupResponse.

        True if the customers IP is listed on one of our blocklists, see the <a href=\"http://www.neutrinoapi.com/api/ip-blocklist/\">IP Blocklist API</a>

        :param ip_blocklisted: The ip_blocklisted of this BINLookupResponse.
        :type ip_blocklisted: bool
        """
        if ip_blocklisted is None:
            raise ValueError("Invalid value for `ip_blocklisted`, must not be `None`")

        self._ip_blocklisted = ip_blocklisted

    @property
    def ip_blocklists(self):
        """Gets the ip_blocklists of this BINLookupResponse.

        An array of strings indicating which blocklists this IP is listed on

        :return: The ip_blocklists of this BINLookupResponse.
        :rtype: List[str]
        """
        return self._ip_blocklists

    @ip_blocklists.setter
    def ip_blocklists(self, ip_blocklists):
        """Sets the ip_blocklists of this BINLookupResponse.

        An array of strings indicating which blocklists this IP is listed on

        :param ip_blocklists: The ip_blocklists of this BINLookupResponse.
        :type ip_blocklists: List[str]
        """
        if ip_blocklists is None:
            raise ValueError("Invalid value for `ip_blocklists`, must not be `None`")

        self._ip_blocklists = ip_blocklists

    @property
    def ip_city(self):
        """Gets the ip_city of this BINLookupResponse.

        The city of the customers IP (if detectable)

        :return: The ip_city of this BINLookupResponse.
        :rtype: str
        """
        return self._ip_city

    @ip_city.setter
    def ip_city(self, ip_city):
        """Sets the ip_city of this BINLookupResponse.

        The city of the customers IP (if detectable)

        :param ip_city: The ip_city of this BINLookupResponse.
        :type ip_city: str
        """
        if ip_city is None:
            raise ValueError("Invalid value for `ip_city`, must not be `None`")

        self._ip_city = ip_city

    @property
    def ip_country(self):
        """Gets the ip_country of this BINLookupResponse.

        The country of the customers IP

        :return: The ip_country of this BINLookupResponse.
        :rtype: str
        """
        return self._ip_country

    @ip_country.setter
    def ip_country(self, ip_country):
        """Sets the ip_country of this BINLookupResponse.

        The country of the customers IP

        :param ip_country: The ip_country of this BINLookupResponse.
        :type ip_country: str
        """
        if ip_country is None:
            raise ValueError("Invalid value for `ip_country`, must not be `None`")

        self._ip_country = ip_country

    @property
    def ip_country_code(self):
        """Gets the ip_country_code of this BINLookupResponse.

        The ISO 2-letter country code of the customers IP

        :return: The ip_country_code of this BINLookupResponse.
        :rtype: str
        """
        return self._ip_country_code

    @ip_country_code.setter
    def ip_country_code(self, ip_country_code):
        """Sets the ip_country_code of this BINLookupResponse.

        The ISO 2-letter country code of the customers IP

        :param ip_country_code: The ip_country_code of this BINLookupResponse.
        :type ip_country_code: str
        """
        if ip_country_code is None:
            raise ValueError("Invalid value for `ip_country_code`, must not be `None`")

        self._ip_country_code = ip_country_code

    @property
    def ip_country_code3(self):
        """Gets the ip_country_code3 of this BINLookupResponse.

        The ISO 3-letter country code of the customers IP

        :return: The ip_country_code3 of this BINLookupResponse.
        :rtype: str
        """
        return self._ip_country_code3

    @ip_country_code3.setter
    def ip_country_code3(self, ip_country_code3):
        """Sets the ip_country_code3 of this BINLookupResponse.

        The ISO 3-letter country code of the customers IP

        :param ip_country_code3: The ip_country_code3 of this BINLookupResponse.
        :type ip_country_code3: str
        """
        if ip_country_code3 is None:
            raise ValueError("Invalid value for `ip_country_code3`, must not be `None`")

        self._ip_country_code3 = ip_country_code3

    @property
    def ip_matches_bin(self):
        """Gets the ip_matches_bin of this BINLookupResponse.

        True if the customers IP country matches the BIN country

        :return: The ip_matches_bin of this BINLookupResponse.
        :rtype: bool
        """
        return self._ip_matches_bin

    @ip_matches_bin.setter
    def ip_matches_bin(self, ip_matches_bin):
        """Sets the ip_matches_bin of this BINLookupResponse.

        True if the customers IP country matches the BIN country

        :param ip_matches_bin: The ip_matches_bin of this BINLookupResponse.
        :type ip_matches_bin: bool
        """
        if ip_matches_bin is None:
            raise ValueError("Invalid value for `ip_matches_bin`, must not be `None`")

        self._ip_matches_bin = ip_matches_bin

    @property
    def ip_region(self):
        """Gets the ip_region of this BINLookupResponse.

        The region of the customers IP (if detectable)

        :return: The ip_region of this BINLookupResponse.
        :rtype: str
        """
        return self._ip_region

    @ip_region.setter
    def ip_region(self, ip_region):
        """Sets the ip_region of this BINLookupResponse.

        The region of the customers IP (if detectable)

        :param ip_region: The ip_region of this BINLookupResponse.
        :type ip_region: str
        """
        if ip_region is None:
            raise ValueError("Invalid value for `ip_region`, must not be `None`")

        self._ip_region = ip_region

    @property
    def is_commercial(self):
        """Gets the is_commercial of this BINLookupResponse.

        Is this a commercial/business use card

        :return: The is_commercial of this BINLookupResponse.
        :rtype: bool
        """
        return self._is_commercial

    @is_commercial.setter
    def is_commercial(self, is_commercial):
        """Sets the is_commercial of this BINLookupResponse.

        Is this a commercial/business use card

        :param is_commercial: The is_commercial of this BINLookupResponse.
        :type is_commercial: bool
        """
        if is_commercial is None:
            raise ValueError("Invalid value for `is_commercial`, must not be `None`")

        self._is_commercial = is_commercial

    @property
    def is_prepaid(self):
        """Gets the is_prepaid of this BINLookupResponse.

        Is this a prepaid or prepaid reloadable card

        :return: The is_prepaid of this BINLookupResponse.
        :rtype: bool
        """
        return self._is_prepaid

    @is_prepaid.setter
    def is_prepaid(self, is_prepaid):
        """Sets the is_prepaid of this BINLookupResponse.

        Is this a prepaid or prepaid reloadable card

        :param is_prepaid: The is_prepaid of this BINLookupResponse.
        :type is_prepaid: bool
        """
        if is_prepaid is None:
            raise ValueError("Invalid value for `is_prepaid`, must not be `None`")

        self._is_prepaid = is_prepaid

    @property
    def issuer(self):
        """Gets the issuer of this BINLookupResponse.

        The card issuer

        :return: The issuer of this BINLookupResponse.
        :rtype: str
        """
        return self._issuer

    @issuer.setter
    def issuer(self, issuer):
        """Sets the issuer of this BINLookupResponse.

        The card issuer

        :param issuer: The issuer of this BINLookupResponse.
        :type issuer: str
        """
        if issuer is None:
            raise ValueError("Invalid value for `issuer`, must not be `None`")

        self._issuer = issuer

    @property
    def issuer_phone(self):
        """Gets the issuer_phone of this BINLookupResponse.

        The card issuers phone number

        :return: The issuer_phone of this BINLookupResponse.
        :rtype: str
        """
        return self._issuer_phone

    @issuer_phone.setter
    def issuer_phone(self, issuer_phone):
        """Sets the issuer_phone of this BINLookupResponse.

        The card issuers phone number

        :param issuer_phone: The issuer_phone of this BINLookupResponse.
        :type issuer_phone: str
        """
        if issuer_phone is None:
            raise ValueError("Invalid value for `issuer_phone`, must not be `None`")

        self._issuer_phone = issuer_phone

    @property
    def issuer_website(self):
        """Gets the issuer_website of this BINLookupResponse.

        The card issuers website

        :return: The issuer_website of this BINLookupResponse.
        :rtype: str
        """
        return self._issuer_website

    @issuer_website.setter
    def issuer_website(self, issuer_website):
        """Sets the issuer_website of this BINLookupResponse.

        The card issuers website

        :param issuer_website: The issuer_website of this BINLookupResponse.
        :type issuer_website: str
        """
        if issuer_website is None:
            raise ValueError("Invalid value for `issuer_website`, must not be `None`")

        self._issuer_website = issuer_website

    @property
    def valid(self):
        """Gets the valid of this BINLookupResponse.

        Is this a valid BIN or IIN number

        :return: The valid of this BINLookupResponse.
        :rtype: bool
        """
        return self._valid

    @valid.setter
    def valid(self, valid):
        """Sets the valid of this BINLookupResponse.

        Is this a valid BIN or IIN number

        :param valid: The valid of this BINLookupResponse.
        :type valid: bool
        """
        if valid is None:
            raise ValueError("Invalid value for `valid`, must not be `None`")

        self._valid = valid
