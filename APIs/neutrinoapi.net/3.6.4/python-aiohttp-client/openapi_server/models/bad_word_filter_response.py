# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class BadWordFilterResponse(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, bad_words_list: List[str]=None, bad_words_total: int=None, censored_content: str=None, is_bad: bool=None):
        """BadWordFilterResponse - a model defined in OpenAPI

        :param bad_words_list: The bad_words_list of this BadWordFilterResponse.
        :param bad_words_total: The bad_words_total of this BadWordFilterResponse.
        :param censored_content: The censored_content of this BadWordFilterResponse.
        :param is_bad: The is_bad of this BadWordFilterResponse.
        """
        self.openapi_types = {
            'bad_words_list': List[str],
            'bad_words_total': int,
            'censored_content': str,
            'is_bad': bool
        }

        self.attribute_map = {
            'bad_words_list': 'bad-words-list',
            'bad_words_total': 'bad-words-total',
            'censored_content': 'censored-content',
            'is_bad': 'is-bad'
        }

        self._bad_words_list = bad_words_list
        self._bad_words_total = bad_words_total
        self._censored_content = censored_content
        self._is_bad = is_bad

    @classmethod
    def from_dict(cls, dikt: dict) -> 'BadWordFilterResponse':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The BadWordFilterResponse of this BadWordFilterResponse.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def bad_words_list(self):
        """Gets the bad_words_list of this BadWordFilterResponse.

        An array of the bad words found

        :return: The bad_words_list of this BadWordFilterResponse.
        :rtype: List[str]
        """
        return self._bad_words_list

    @bad_words_list.setter
    def bad_words_list(self, bad_words_list):
        """Sets the bad_words_list of this BadWordFilterResponse.

        An array of the bad words found

        :param bad_words_list: The bad_words_list of this BadWordFilterResponse.
        :type bad_words_list: List[str]
        """
        if bad_words_list is None:
            raise ValueError("Invalid value for `bad_words_list`, must not be `None`")

        self._bad_words_list = bad_words_list

    @property
    def bad_words_total(self):
        """Gets the bad_words_total of this BadWordFilterResponse.

        Total number of bad words detected

        :return: The bad_words_total of this BadWordFilterResponse.
        :rtype: int
        """
        return self._bad_words_total

    @bad_words_total.setter
    def bad_words_total(self, bad_words_total):
        """Sets the bad_words_total of this BadWordFilterResponse.

        Total number of bad words detected

        :param bad_words_total: The bad_words_total of this BadWordFilterResponse.
        :type bad_words_total: int
        """
        if bad_words_total is None:
            raise ValueError("Invalid value for `bad_words_total`, must not be `None`")

        self._bad_words_total = bad_words_total

    @property
    def censored_content(self):
        """Gets the censored_content of this BadWordFilterResponse.

        The censored content (only set if censor-character has been set)

        :return: The censored_content of this BadWordFilterResponse.
        :rtype: str
        """
        return self._censored_content

    @censored_content.setter
    def censored_content(self, censored_content):
        """Sets the censored_content of this BadWordFilterResponse.

        The censored content (only set if censor-character has been set)

        :param censored_content: The censored_content of this BadWordFilterResponse.
        :type censored_content: str
        """
        if censored_content is None:
            raise ValueError("Invalid value for `censored_content`, must not be `None`")

        self._censored_content = censored_content

    @property
    def is_bad(self):
        """Gets the is_bad of this BadWordFilterResponse.

        Does the text contain bad words

        :return: The is_bad of this BadWordFilterResponse.
        :rtype: bool
        """
        return self._is_bad

    @is_bad.setter
    def is_bad(self, is_bad):
        """Sets the is_bad of this BadWordFilterResponse.

        Does the text contain bad words

        :param is_bad: The is_bad of this BadWordFilterResponse.
        :type is_bad: bool
        """
        if is_bad is None:
            raise ValueError("Invalid value for `is_bad`, must not be `None`")

        self._is_bad = is_bad
