# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.blocklist_sensor import BlocklistSensor
from openapi_server import util


class DomainLookupResponse(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, age: int=None, blocklists: List[str]=None, dns_provider: str=None, domain: str=None, fqdn: str=None, is_adult: bool=None, is_gov: bool=None, is_malicious: bool=None, is_opennic: bool=None, is_pending: bool=None, is_subdomain: bool=None, mail_provider: str=None, rank: int=None, registered_date: str=None, registrar_id: int=None, registrar_name: str=None, sensors: List[BlocklistSensor]=None, tld: str=None, tld_cc: str=None, valid: bool=None):
        """DomainLookupResponse - a model defined in OpenAPI

        :param age: The age of this DomainLookupResponse.
        :param blocklists: The blocklists of this DomainLookupResponse.
        :param dns_provider: The dns_provider of this DomainLookupResponse.
        :param domain: The domain of this DomainLookupResponse.
        :param fqdn: The fqdn of this DomainLookupResponse.
        :param is_adult: The is_adult of this DomainLookupResponse.
        :param is_gov: The is_gov of this DomainLookupResponse.
        :param is_malicious: The is_malicious of this DomainLookupResponse.
        :param is_opennic: The is_opennic of this DomainLookupResponse.
        :param is_pending: The is_pending of this DomainLookupResponse.
        :param is_subdomain: The is_subdomain of this DomainLookupResponse.
        :param mail_provider: The mail_provider of this DomainLookupResponse.
        :param rank: The rank of this DomainLookupResponse.
        :param registered_date: The registered_date of this DomainLookupResponse.
        :param registrar_id: The registrar_id of this DomainLookupResponse.
        :param registrar_name: The registrar_name of this DomainLookupResponse.
        :param sensors: The sensors of this DomainLookupResponse.
        :param tld: The tld of this DomainLookupResponse.
        :param tld_cc: The tld_cc of this DomainLookupResponse.
        :param valid: The valid of this DomainLookupResponse.
        """
        self.openapi_types = {
            'age': int,
            'blocklists': List[str],
            'dns_provider': str,
            'domain': str,
            'fqdn': str,
            'is_adult': bool,
            'is_gov': bool,
            'is_malicious': bool,
            'is_opennic': bool,
            'is_pending': bool,
            'is_subdomain': bool,
            'mail_provider': str,
            'rank': int,
            'registered_date': str,
            'registrar_id': int,
            'registrar_name': str,
            'sensors': List[BlocklistSensor],
            'tld': str,
            'tld_cc': str,
            'valid': bool
        }

        self.attribute_map = {
            'age': 'age',
            'blocklists': 'blocklists',
            'dns_provider': 'dns-provider',
            'domain': 'domain',
            'fqdn': 'fqdn',
            'is_adult': 'is-adult',
            'is_gov': 'is-gov',
            'is_malicious': 'is-malicious',
            'is_opennic': 'is-opennic',
            'is_pending': 'is-pending',
            'is_subdomain': 'is-subdomain',
            'mail_provider': 'mail-provider',
            'rank': 'rank',
            'registered_date': 'registered-date',
            'registrar_id': 'registrar-id',
            'registrar_name': 'registrar-name',
            'sensors': 'sensors',
            'tld': 'tld',
            'tld_cc': 'tld-cc',
            'valid': 'valid'
        }

        self._age = age
        self._blocklists = blocklists
        self._dns_provider = dns_provider
        self._domain = domain
        self._fqdn = fqdn
        self._is_adult = is_adult
        self._is_gov = is_gov
        self._is_malicious = is_malicious
        self._is_opennic = is_opennic
        self._is_pending = is_pending
        self._is_subdomain = is_subdomain
        self._mail_provider = mail_provider
        self._rank = rank
        self._registered_date = registered_date
        self._registrar_id = registrar_id
        self._registrar_name = registrar_name
        self._sensors = sensors
        self._tld = tld
        self._tld_cc = tld_cc
        self._valid = valid

    @classmethod
    def from_dict(cls, dikt: dict) -> 'DomainLookupResponse':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The DomainLookupResponse of this DomainLookupResponse.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def age(self):
        """Gets the age of this DomainLookupResponse.

        The number of days since the domain was registered. A domain age of under 90 days is generally considered to be potentially risky. A value of 0 indicates no registration date was found for this domain

        :return: The age of this DomainLookupResponse.
        :rtype: int
        """
        return self._age

    @age.setter
    def age(self, age):
        """Sets the age of this DomainLookupResponse.

        The number of days since the domain was registered. A domain age of under 90 days is generally considered to be potentially risky. A value of 0 indicates no registration date was found for this domain

        :param age: The age of this DomainLookupResponse.
        :type age: int
        """
        if age is None:
            raise ValueError("Invalid value for `age`, must not be `None`")

        self._age = age

    @property
    def blocklists(self):
        """Gets the blocklists of this DomainLookupResponse.

        An array of strings indicating which blocklist categories this domain is listed on. Current categories are: phishing, malware, spam, anonymizer, nefarious

        :return: The blocklists of this DomainLookupResponse.
        :rtype: List[str]
        """
        return self._blocklists

    @blocklists.setter
    def blocklists(self, blocklists):
        """Sets the blocklists of this DomainLookupResponse.

        An array of strings indicating which blocklist categories this domain is listed on. Current categories are: phishing, malware, spam, anonymizer, nefarious

        :param blocklists: The blocklists of this DomainLookupResponse.
        :type blocklists: List[str]
        """
        if blocklists is None:
            raise ValueError("Invalid value for `blocklists`, must not be `None`")

        self._blocklists = blocklists

    @property
    def dns_provider(self):
        """Gets the dns_provider of this DomainLookupResponse.

        The primary domain of the DNS provider for this domain

        :return: The dns_provider of this DomainLookupResponse.
        :rtype: str
        """
        return self._dns_provider

    @dns_provider.setter
    def dns_provider(self, dns_provider):
        """Sets the dns_provider of this DomainLookupResponse.

        The primary domain of the DNS provider for this domain

        :param dns_provider: The dns_provider of this DomainLookupResponse.
        :type dns_provider: str
        """
        if dns_provider is None:
            raise ValueError("Invalid value for `dns_provider`, must not be `None`")

        self._dns_provider = dns_provider

    @property
    def domain(self):
        """Gets the domain of this DomainLookupResponse.

        The primary domain name excluding any subdomains. This is also referred to as the second-level domain (SLD)

        :return: The domain of this DomainLookupResponse.
        :rtype: str
        """
        return self._domain

    @domain.setter
    def domain(self, domain):
        """Sets the domain of this DomainLookupResponse.

        The primary domain name excluding any subdomains. This is also referred to as the second-level domain (SLD)

        :param domain: The domain of this DomainLookupResponse.
        :type domain: str
        """
        if domain is None:
            raise ValueError("Invalid value for `domain`, must not be `None`")

        self._domain = domain

    @property
    def fqdn(self):
        """Gets the fqdn of this DomainLookupResponse.

        The fully qualified domain name (FQDN)

        :return: The fqdn of this DomainLookupResponse.
        :rtype: str
        """
        return self._fqdn

    @fqdn.setter
    def fqdn(self, fqdn):
        """Sets the fqdn of this DomainLookupResponse.

        The fully qualified domain name (FQDN)

        :param fqdn: The fqdn of this DomainLookupResponse.
        :type fqdn: str
        """
        if fqdn is None:
            raise ValueError("Invalid value for `fqdn`, must not be `None`")

        self._fqdn = fqdn

    @property
    def is_adult(self):
        """Gets the is_adult of this DomainLookupResponse.

        This domain is hosting adult content such as porn, webcams, escorts, etc

        :return: The is_adult of this DomainLookupResponse.
        :rtype: bool
        """
        return self._is_adult

    @is_adult.setter
    def is_adult(self, is_adult):
        """Sets the is_adult of this DomainLookupResponse.

        This domain is hosting adult content such as porn, webcams, escorts, etc

        :param is_adult: The is_adult of this DomainLookupResponse.
        :type is_adult: bool
        """
        if is_adult is None:
            raise ValueError("Invalid value for `is_adult`, must not be `None`")

        self._is_adult = is_adult

    @property
    def is_gov(self):
        """Gets the is_gov of this DomainLookupResponse.

        Is this domain under a government or military TLD

        :return: The is_gov of this DomainLookupResponse.
        :rtype: bool
        """
        return self._is_gov

    @is_gov.setter
    def is_gov(self, is_gov):
        """Sets the is_gov of this DomainLookupResponse.

        Is this domain under a government or military TLD

        :param is_gov: The is_gov of this DomainLookupResponse.
        :type is_gov: bool
        """
        if is_gov is None:
            raise ValueError("Invalid value for `is_gov`, must not be `None`")

        self._is_gov = is_gov

    @property
    def is_malicious(self):
        """Gets the is_malicious of this DomainLookupResponse.

        Consider this domain malicious as it is currently listed on at least 1 blocklist

        :return: The is_malicious of this DomainLookupResponse.
        :rtype: bool
        """
        return self._is_malicious

    @is_malicious.setter
    def is_malicious(self, is_malicious):
        """Sets the is_malicious of this DomainLookupResponse.

        Consider this domain malicious as it is currently listed on at least 1 blocklist

        :param is_malicious: The is_malicious of this DomainLookupResponse.
        :type is_malicious: bool
        """
        if is_malicious is None:
            raise ValueError("Invalid value for `is_malicious`, must not be `None`")

        self._is_malicious = is_malicious

    @property
    def is_opennic(self):
        """Gets the is_opennic of this DomainLookupResponse.

        Is this domain under an OpenNIC TLD

        :return: The is_opennic of this DomainLookupResponse.
        :rtype: bool
        """
        return self._is_opennic

    @is_opennic.setter
    def is_opennic(self, is_opennic):
        """Sets the is_opennic of this DomainLookupResponse.

        Is this domain under an OpenNIC TLD

        :param is_opennic: The is_opennic of this DomainLookupResponse.
        :type is_opennic: bool
        """
        if is_opennic is None:
            raise ValueError("Invalid value for `is_opennic`, must not be `None`")

        self._is_opennic = is_opennic

    @property
    def is_pending(self):
        """Gets the is_pending of this DomainLookupResponse.

        True if this domain is unseen and is currently being processed in the background. This field only matters when the 'live' lookup setting has been explicitly disabled and indicates that not all domain data my be present yet

        :return: The is_pending of this DomainLookupResponse.
        :rtype: bool
        """
        return self._is_pending

    @is_pending.setter
    def is_pending(self, is_pending):
        """Sets the is_pending of this DomainLookupResponse.

        True if this domain is unseen and is currently being processed in the background. This field only matters when the 'live' lookup setting has been explicitly disabled and indicates that not all domain data my be present yet

        :param is_pending: The is_pending of this DomainLookupResponse.
        :type is_pending: bool
        """
        if is_pending is None:
            raise ValueError("Invalid value for `is_pending`, must not be `None`")

        self._is_pending = is_pending

    @property
    def is_subdomain(self):
        """Gets the is_subdomain of this DomainLookupResponse.

        Is the FQDN a subdomain of the primary domain

        :return: The is_subdomain of this DomainLookupResponse.
        :rtype: bool
        """
        return self._is_subdomain

    @is_subdomain.setter
    def is_subdomain(self, is_subdomain):
        """Sets the is_subdomain of this DomainLookupResponse.

        Is the FQDN a subdomain of the primary domain

        :param is_subdomain: The is_subdomain of this DomainLookupResponse.
        :type is_subdomain: bool
        """
        if is_subdomain is None:
            raise ValueError("Invalid value for `is_subdomain`, must not be `None`")

        self._is_subdomain = is_subdomain

    @property
    def mail_provider(self):
        """Gets the mail_provider of this DomainLookupResponse.

        The primary domain of the email provider for this domain. An empty value indicates the domain has no valid MX records

        :return: The mail_provider of this DomainLookupResponse.
        :rtype: str
        """
        return self._mail_provider

    @mail_provider.setter
    def mail_provider(self, mail_provider):
        """Sets the mail_provider of this DomainLookupResponse.

        The primary domain of the email provider for this domain. An empty value indicates the domain has no valid MX records

        :param mail_provider: The mail_provider of this DomainLookupResponse.
        :type mail_provider: str
        """
        if mail_provider is None:
            raise ValueError("Invalid value for `mail_provider`, must not be `None`")

        self._mail_provider = mail_provider

    @property
    def rank(self):
        """Gets the rank of this DomainLookupResponse.

        The domains estimated global traffic rank with the highest rank being 1. A value of 0 indicates the domain is currently ranked outside of the top 1M of domains

        :return: The rank of this DomainLookupResponse.
        :rtype: int
        """
        return self._rank

    @rank.setter
    def rank(self, rank):
        """Sets the rank of this DomainLookupResponse.

        The domains estimated global traffic rank with the highest rank being 1. A value of 0 indicates the domain is currently ranked outside of the top 1M of domains

        :param rank: The rank of this DomainLookupResponse.
        :type rank: int
        """
        if rank is None:
            raise ValueError("Invalid value for `rank`, must not be `None`")

        self._rank = rank

    @property
    def registered_date(self):
        """Gets the registered_date of this DomainLookupResponse.

        The ISO date this domain was registered or first seen on the internet. An empty value indicates we could not reliably determine the date

        :return: The registered_date of this DomainLookupResponse.
        :rtype: str
        """
        return self._registered_date

    @registered_date.setter
    def registered_date(self, registered_date):
        """Sets the registered_date of this DomainLookupResponse.

        The ISO date this domain was registered or first seen on the internet. An empty value indicates we could not reliably determine the date

        :param registered_date: The registered_date of this DomainLookupResponse.
        :type registered_date: str
        """
        if registered_date is None:
            raise ValueError("Invalid value for `registered_date`, must not be `None`")

        self._registered_date = registered_date

    @property
    def registrar_id(self):
        """Gets the registrar_id of this DomainLookupResponse.

        The IANA registrar ID (0 if no registrar ID was found)

        :return: The registrar_id of this DomainLookupResponse.
        :rtype: int
        """
        return self._registrar_id

    @registrar_id.setter
    def registrar_id(self, registrar_id):
        """Sets the registrar_id of this DomainLookupResponse.

        The IANA registrar ID (0 if no registrar ID was found)

        :param registrar_id: The registrar_id of this DomainLookupResponse.
        :type registrar_id: int
        """
        if registrar_id is None:
            raise ValueError("Invalid value for `registrar_id`, must not be `None`")

        self._registrar_id = registrar_id

    @property
    def registrar_name(self):
        """Gets the registrar_name of this DomainLookupResponse.

        The name of the domain registrar owning this domain

        :return: The registrar_name of this DomainLookupResponse.
        :rtype: str
        """
        return self._registrar_name

    @registrar_name.setter
    def registrar_name(self, registrar_name):
        """Sets the registrar_name of this DomainLookupResponse.

        The name of the domain registrar owning this domain

        :param registrar_name: The registrar_name of this DomainLookupResponse.
        :type registrar_name: str
        """
        if registrar_name is None:
            raise ValueError("Invalid value for `registrar_name`, must not be `None`")

        self._registrar_name = registrar_name

    @property
    def sensors(self):
        """Gets the sensors of this DomainLookupResponse.

        An array of objects containing details on which specific blocklist sensors have detected this domain

        :return: The sensors of this DomainLookupResponse.
        :rtype: List[BlocklistSensor]
        """
        return self._sensors

    @sensors.setter
    def sensors(self, sensors):
        """Sets the sensors of this DomainLookupResponse.

        An array of objects containing details on which specific blocklist sensors have detected this domain

        :param sensors: The sensors of this DomainLookupResponse.
        :type sensors: List[BlocklistSensor]
        """
        if sensors is None:
            raise ValueError("Invalid value for `sensors`, must not be `None`")

        self._sensors = sensors

    @property
    def tld(self):
        """Gets the tld of this DomainLookupResponse.

        The top-level domain (TLD)

        :return: The tld of this DomainLookupResponse.
        :rtype: str
        """
        return self._tld

    @tld.setter
    def tld(self, tld):
        """Sets the tld of this DomainLookupResponse.

        The top-level domain (TLD)

        :param tld: The tld of this DomainLookupResponse.
        :type tld: str
        """
        if tld is None:
            raise ValueError("Invalid value for `tld`, must not be `None`")

        self._tld = tld

    @property
    def tld_cc(self):
        """Gets the tld_cc of this DomainLookupResponse.

        For a country code top-level domain (ccTLD) this will contain the associated ISO 2-letter country code

        :return: The tld_cc of this DomainLookupResponse.
        :rtype: str
        """
        return self._tld_cc

    @tld_cc.setter
    def tld_cc(self, tld_cc):
        """Sets the tld_cc of this DomainLookupResponse.

        For a country code top-level domain (ccTLD) this will contain the associated ISO 2-letter country code

        :param tld_cc: The tld_cc of this DomainLookupResponse.
        :type tld_cc: str
        """
        if tld_cc is None:
            raise ValueError("Invalid value for `tld_cc`, must not be `None`")

        self._tld_cc = tld_cc

    @property
    def valid(self):
        """Gets the valid of this DomainLookupResponse.

        True if a valid domain was found. For a domain to be considered valid it must be registered and have valid DNS NS records

        :return: The valid of this DomainLookupResponse.
        :rtype: bool
        """
        return self._valid

    @valid.setter
    def valid(self, valid):
        """Sets the valid of this DomainLookupResponse.

        True if a valid domain was found. For a domain to be considered valid it must be registered and have valid DNS NS records

        :param valid: The valid of this DomainLookupResponse.
        :type valid: bool
        """
        if valid is None:
            raise ValueError("Invalid value for `valid`, must not be `None`")

        self._valid = valid
