# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class APIError(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, api_error: int=None, api_error_msg: str=None):
        """APIError - a model defined in OpenAPI

        :param api_error: The api_error of this APIError.
        :param api_error_msg: The api_error_msg of this APIError.
        """
        self.openapi_types = {
            'api_error': int,
            'api_error_msg': str
        }

        self.attribute_map = {
            'api_error': 'api-error',
            'api_error_msg': 'api-error-msg'
        }

        self._api_error = api_error
        self._api_error_msg = api_error_msg

    @classmethod
    def from_dict(cls, dikt: dict) -> 'APIError':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The APIError of this APIError.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def api_error(self):
        """Gets the api_error of this APIError.

        API error code. If set and > 0 then an API error has occurred your request could not be completed

        :return: The api_error of this APIError.
        :rtype: int
        """
        return self._api_error

    @api_error.setter
    def api_error(self, api_error):
        """Sets the api_error of this APIError.

        API error code. If set and > 0 then an API error has occurred your request could not be completed

        :param api_error: The api_error of this APIError.
        :type api_error: int
        """
        if api_error is None:
            raise ValueError("Invalid value for `api_error`, must not be `None`")

        self._api_error = api_error

    @property
    def api_error_msg(self):
        """Gets the api_error_msg of this APIError.

        API error message

        :return: The api_error_msg of this APIError.
        :rtype: str
        """
        return self._api_error_msg

    @api_error_msg.setter
    def api_error_msg(self, api_error_msg):
        """Sets the api_error_msg of this APIError.

        API error message

        :param api_error_msg: The api_error_msg of this APIError.
        :type api_error_msg: str
        """
        if api_error_msg is None:
            raise ValueError("Invalid value for `api_error_msg`, must not be `None`")

        self._api_error_msg = api_error_msg
