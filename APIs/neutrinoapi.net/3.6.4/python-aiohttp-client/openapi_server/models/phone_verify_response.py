# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class PhoneVerifyResponse(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, calling: bool=None, number_valid: bool=None, security_code: str=None):
        """PhoneVerifyResponse - a model defined in OpenAPI

        :param calling: The calling of this PhoneVerifyResponse.
        :param number_valid: The number_valid of this PhoneVerifyResponse.
        :param security_code: The security_code of this PhoneVerifyResponse.
        """
        self.openapi_types = {
            'calling': bool,
            'number_valid': bool,
            'security_code': str
        }

        self.attribute_map = {
            'calling': 'calling',
            'number_valid': 'number-valid',
            'security_code': 'security-code'
        }

        self._calling = calling
        self._number_valid = number_valid
        self._security_code = security_code

    @classmethod
    def from_dict(cls, dikt: dict) -> 'PhoneVerifyResponse':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The PhoneVerifyResponse of this PhoneVerifyResponse.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def calling(self):
        """Gets the calling of this PhoneVerifyResponse.

        True if the call is being made now

        :return: The calling of this PhoneVerifyResponse.
        :rtype: bool
        """
        return self._calling

    @calling.setter
    def calling(self, calling):
        """Sets the calling of this PhoneVerifyResponse.

        True if the call is being made now

        :param calling: The calling of this PhoneVerifyResponse.
        :type calling: bool
        """
        if calling is None:
            raise ValueError("Invalid value for `calling`, must not be `None`")

        self._calling = calling

    @property
    def number_valid(self):
        """Gets the number_valid of this PhoneVerifyResponse.

        True if this a valid phone number

        :return: The number_valid of this PhoneVerifyResponse.
        :rtype: bool
        """
        return self._number_valid

    @number_valid.setter
    def number_valid(self, number_valid):
        """Sets the number_valid of this PhoneVerifyResponse.

        True if this a valid phone number

        :param number_valid: The number_valid of this PhoneVerifyResponse.
        :type number_valid: bool
        """
        if number_valid is None:
            raise ValueError("Invalid value for `number_valid`, must not be `None`")

        self._number_valid = number_valid

    @property
    def security_code(self):
        """Gets the security_code of this PhoneVerifyResponse.

        The security code generated, you can save this code to perform your own verification or you can use the <a href=\"https://www.neutrinoapi.com/api/verify-security-code/\">Verify Security Code API</a>

        :return: The security_code of this PhoneVerifyResponse.
        :rtype: str
        """
        return self._security_code

    @security_code.setter
    def security_code(self, security_code):
        """Sets the security_code of this PhoneVerifyResponse.

        The security code generated, you can save this code to perform your own verification or you can use the <a href=\"https://www.neutrinoapi.com/api/verify-security-code/\">Verify Security Code API</a>

        :param security_code: The security_code of this PhoneVerifyResponse.
        :type security_code: str
        """
        if security_code is None:
            raise ValueError("Invalid value for `security_code`, must not be `None`")

        self._security_code = security_code
