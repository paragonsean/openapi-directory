# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.location import Location
from openapi_server import util


class GeocodeAddressResponse(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, found: int=None, locations: List[Location]=None):
        """GeocodeAddressResponse - a model defined in OpenAPI

        :param found: The found of this GeocodeAddressResponse.
        :param locations: The locations of this GeocodeAddressResponse.
        """
        self.openapi_types = {
            'found': int,
            'locations': List[Location]
        }

        self.attribute_map = {
            'found': 'found',
            'locations': 'locations'
        }

        self._found = found
        self._locations = locations

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GeocodeAddressResponse':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The GeocodeAddressResponse of this GeocodeAddressResponse.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def found(self):
        """Gets the found of this GeocodeAddressResponse.

        The number of possible matching locations found

        :return: The found of this GeocodeAddressResponse.
        :rtype: int
        """
        return self._found

    @found.setter
    def found(self, found):
        """Sets the found of this GeocodeAddressResponse.

        The number of possible matching locations found

        :param found: The found of this GeocodeAddressResponse.
        :type found: int
        """
        if found is None:
            raise ValueError("Invalid value for `found`, must not be `None`")

        self._found = found

    @property
    def locations(self):
        """Gets the locations of this GeocodeAddressResponse.

        Array of matching location objects

        :return: The locations of this GeocodeAddressResponse.
        :rtype: List[Location]
        """
        return self._locations

    @locations.setter
    def locations(self, locations):
        """Sets the locations of this GeocodeAddressResponse.

        Array of matching location objects

        :param locations: The locations of this GeocodeAddressResponse.
        :type locations: List[Location]
        """
        if locations is None:
            raise ValueError("Invalid value for `locations`, must not be `None`")

        self._locations = locations
