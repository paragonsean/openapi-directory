# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class HLRLookupResponse(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, country: str=None, country_code: str=None, country_code3: str=None, currency_code: str=None, current_network: str=None, hlr_status: str=None, hlr_valid: bool=None, imsi: str=None, international_calling_code: str=None, international_number: str=None, is_mobile: bool=None, is_ported: bool=None, is_roaming: bool=None, local_number: str=None, location: str=None, mcc: str=None, mnc: str=None, msc: str=None, msin: str=None, number_type: str=None, number_valid: bool=None, origin_network: str=None, ported_network: str=None, roaming_country_code: str=None):
        """HLRLookupResponse - a model defined in OpenAPI

        :param country: The country of this HLRLookupResponse.
        :param country_code: The country_code of this HLRLookupResponse.
        :param country_code3: The country_code3 of this HLRLookupResponse.
        :param currency_code: The currency_code of this HLRLookupResponse.
        :param current_network: The current_network of this HLRLookupResponse.
        :param hlr_status: The hlr_status of this HLRLookupResponse.
        :param hlr_valid: The hlr_valid of this HLRLookupResponse.
        :param imsi: The imsi of this HLRLookupResponse.
        :param international_calling_code: The international_calling_code of this HLRLookupResponse.
        :param international_number: The international_number of this HLRLookupResponse.
        :param is_mobile: The is_mobile of this HLRLookupResponse.
        :param is_ported: The is_ported of this HLRLookupResponse.
        :param is_roaming: The is_roaming of this HLRLookupResponse.
        :param local_number: The local_number of this HLRLookupResponse.
        :param location: The location of this HLRLookupResponse.
        :param mcc: The mcc of this HLRLookupResponse.
        :param mnc: The mnc of this HLRLookupResponse.
        :param msc: The msc of this HLRLookupResponse.
        :param msin: The msin of this HLRLookupResponse.
        :param number_type: The number_type of this HLRLookupResponse.
        :param number_valid: The number_valid of this HLRLookupResponse.
        :param origin_network: The origin_network of this HLRLookupResponse.
        :param ported_network: The ported_network of this HLRLookupResponse.
        :param roaming_country_code: The roaming_country_code of this HLRLookupResponse.
        """
        self.openapi_types = {
            'country': str,
            'country_code': str,
            'country_code3': str,
            'currency_code': str,
            'current_network': str,
            'hlr_status': str,
            'hlr_valid': bool,
            'imsi': str,
            'international_calling_code': str,
            'international_number': str,
            'is_mobile': bool,
            'is_ported': bool,
            'is_roaming': bool,
            'local_number': str,
            'location': str,
            'mcc': str,
            'mnc': str,
            'msc': str,
            'msin': str,
            'number_type': str,
            'number_valid': bool,
            'origin_network': str,
            'ported_network': str,
            'roaming_country_code': str
        }

        self.attribute_map = {
            'country': 'country',
            'country_code': 'country-code',
            'country_code3': 'country-code3',
            'currency_code': 'currency-code',
            'current_network': 'current-network',
            'hlr_status': 'hlr-status',
            'hlr_valid': 'hlr-valid',
            'imsi': 'imsi',
            'international_calling_code': 'international-calling-code',
            'international_number': 'international-number',
            'is_mobile': 'is-mobile',
            'is_ported': 'is-ported',
            'is_roaming': 'is-roaming',
            'local_number': 'local-number',
            'location': 'location',
            'mcc': 'mcc',
            'mnc': 'mnc',
            'msc': 'msc',
            'msin': 'msin',
            'number_type': 'number-type',
            'number_valid': 'number-valid',
            'origin_network': 'origin-network',
            'ported_network': 'ported-network',
            'roaming_country_code': 'roaming-country-code'
        }

        self._country = country
        self._country_code = country_code
        self._country_code3 = country_code3
        self._currency_code = currency_code
        self._current_network = current_network
        self._hlr_status = hlr_status
        self._hlr_valid = hlr_valid
        self._imsi = imsi
        self._international_calling_code = international_calling_code
        self._international_number = international_number
        self._is_mobile = is_mobile
        self._is_ported = is_ported
        self._is_roaming = is_roaming
        self._local_number = local_number
        self._location = location
        self._mcc = mcc
        self._mnc = mnc
        self._msc = msc
        self._msin = msin
        self._number_type = number_type
        self._number_valid = number_valid
        self._origin_network = origin_network
        self._ported_network = ported_network
        self._roaming_country_code = roaming_country_code

    @classmethod
    def from_dict(cls, dikt: dict) -> 'HLRLookupResponse':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The HLRLookupResponse of this HLRLookupResponse.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def country(self):
        """Gets the country of this HLRLookupResponse.

        The phone number country

        :return: The country of this HLRLookupResponse.
        :rtype: str
        """
        return self._country

    @country.setter
    def country(self, country):
        """Sets the country of this HLRLookupResponse.

        The phone number country

        :param country: The country of this HLRLookupResponse.
        :type country: str
        """
        if country is None:
            raise ValueError("Invalid value for `country`, must not be `None`")

        self._country = country

    @property
    def country_code(self):
        """Gets the country_code of this HLRLookupResponse.

        The number location as an ISO 2-letter country code

        :return: The country_code of this HLRLookupResponse.
        :rtype: str
        """
        return self._country_code

    @country_code.setter
    def country_code(self, country_code):
        """Sets the country_code of this HLRLookupResponse.

        The number location as an ISO 2-letter country code

        :param country_code: The country_code of this HLRLookupResponse.
        :type country_code: str
        """
        if country_code is None:
            raise ValueError("Invalid value for `country_code`, must not be `None`")

        self._country_code = country_code

    @property
    def country_code3(self):
        """Gets the country_code3 of this HLRLookupResponse.

        The number location as an ISO 3-letter country code

        :return: The country_code3 of this HLRLookupResponse.
        :rtype: str
        """
        return self._country_code3

    @country_code3.setter
    def country_code3(self, country_code3):
        """Sets the country_code3 of this HLRLookupResponse.

        The number location as an ISO 3-letter country code

        :param country_code3: The country_code3 of this HLRLookupResponse.
        :type country_code3: str
        """
        if country_code3 is None:
            raise ValueError("Invalid value for `country_code3`, must not be `None`")

        self._country_code3 = country_code3

    @property
    def currency_code(self):
        """Gets the currency_code of this HLRLookupResponse.

        ISO 4217 currency code associated with the country

        :return: The currency_code of this HLRLookupResponse.
        :rtype: str
        """
        return self._currency_code

    @currency_code.setter
    def currency_code(self, currency_code):
        """Sets the currency_code of this HLRLookupResponse.

        ISO 4217 currency code associated with the country

        :param currency_code: The currency_code of this HLRLookupResponse.
        :type currency_code: str
        """
        if currency_code is None:
            raise ValueError("Invalid value for `currency_code`, must not be `None`")

        self._currency_code = currency_code

    @property
    def current_network(self):
        """Gets the current_network of this HLRLookupResponse.

        The currently used network/carrier name

        :return: The current_network of this HLRLookupResponse.
        :rtype: str
        """
        return self._current_network

    @current_network.setter
    def current_network(self, current_network):
        """Sets the current_network of this HLRLookupResponse.

        The currently used network/carrier name

        :param current_network: The current_network of this HLRLookupResponse.
        :type current_network: str
        """
        if current_network is None:
            raise ValueError("Invalid value for `current_network`, must not be `None`")

        self._current_network = current_network

    @property
    def hlr_status(self):
        """Gets the hlr_status of this HLRLookupResponse.

        The HLR lookup status, possible values are: <br> <ul> <li>ok - the HLR lookup was successful and the device is connected</li> <li>absent - the number was once registered but the device has been switched off or out of network range for some time</li> <li>unknown - the number is not known by the mobile network</li> <li>invalid - the number is not a valid mobile MSISDN number</li> <li>fixed-line - the number is a registered fixed-line not mobile</li> <li>voip - the number has been detected as a VOIP line</li> <li>failed - the HLR lookup has failed, we could not determine the real status of this number</li> </ul>

        :return: The hlr_status of this HLRLookupResponse.
        :rtype: str
        """
        return self._hlr_status

    @hlr_status.setter
    def hlr_status(self, hlr_status):
        """Sets the hlr_status of this HLRLookupResponse.

        The HLR lookup status, possible values are: <br> <ul> <li>ok - the HLR lookup was successful and the device is connected</li> <li>absent - the number was once registered but the device has been switched off or out of network range for some time</li> <li>unknown - the number is not known by the mobile network</li> <li>invalid - the number is not a valid mobile MSISDN number</li> <li>fixed-line - the number is a registered fixed-line not mobile</li> <li>voip - the number has been detected as a VOIP line</li> <li>failed - the HLR lookup has failed, we could not determine the real status of this number</li> </ul>

        :param hlr_status: The hlr_status of this HLRLookupResponse.
        :type hlr_status: str
        """
        if hlr_status is None:
            raise ValueError("Invalid value for `hlr_status`, must not be `None`")

        self._hlr_status = hlr_status

    @property
    def hlr_valid(self):
        """Gets the hlr_valid of this HLRLookupResponse.

        Was the HLR lookup successful. If true then this is a working and registered cell-phone or mobile device (SMS and phone calls will be delivered)

        :return: The hlr_valid of this HLRLookupResponse.
        :rtype: bool
        """
        return self._hlr_valid

    @hlr_valid.setter
    def hlr_valid(self, hlr_valid):
        """Sets the hlr_valid of this HLRLookupResponse.

        Was the HLR lookup successful. If true then this is a working and registered cell-phone or mobile device (SMS and phone calls will be delivered)

        :param hlr_valid: The hlr_valid of this HLRLookupResponse.
        :type hlr_valid: bool
        """
        if hlr_valid is None:
            raise ValueError("Invalid value for `hlr_valid`, must not be `None`")

        self._hlr_valid = hlr_valid

    @property
    def imsi(self):
        """Gets the imsi of this HLRLookupResponse.

        The mobile IMSI number (International Mobile Subscriber Identity)

        :return: The imsi of this HLRLookupResponse.
        :rtype: str
        """
        return self._imsi

    @imsi.setter
    def imsi(self, imsi):
        """Sets the imsi of this HLRLookupResponse.

        The mobile IMSI number (International Mobile Subscriber Identity)

        :param imsi: The imsi of this HLRLookupResponse.
        :type imsi: str
        """
        if imsi is None:
            raise ValueError("Invalid value for `imsi`, must not be `None`")

        self._imsi = imsi

    @property
    def international_calling_code(self):
        """Gets the international_calling_code of this HLRLookupResponse.

        The international calling code

        :return: The international_calling_code of this HLRLookupResponse.
        :rtype: str
        """
        return self._international_calling_code

    @international_calling_code.setter
    def international_calling_code(self, international_calling_code):
        """Sets the international_calling_code of this HLRLookupResponse.

        The international calling code

        :param international_calling_code: The international_calling_code of this HLRLookupResponse.
        :type international_calling_code: str
        """
        if international_calling_code is None:
            raise ValueError("Invalid value for `international_calling_code`, must not be `None`")

        self._international_calling_code = international_calling_code

    @property
    def international_number(self):
        """Gets the international_number of this HLRLookupResponse.

        The number represented in full international format

        :return: The international_number of this HLRLookupResponse.
        :rtype: str
        """
        return self._international_number

    @international_number.setter
    def international_number(self, international_number):
        """Sets the international_number of this HLRLookupResponse.

        The number represented in full international format

        :param international_number: The international_number of this HLRLookupResponse.
        :type international_number: str
        """
        if international_number is None:
            raise ValueError("Invalid value for `international_number`, must not be `None`")

        self._international_number = international_number

    @property
    def is_mobile(self):
        """Gets the is_mobile of this HLRLookupResponse.

        True if this is a mobile number (only true with 100% certainty, if the number type is unknown this value will be false)

        :return: The is_mobile of this HLRLookupResponse.
        :rtype: bool
        """
        return self._is_mobile

    @is_mobile.setter
    def is_mobile(self, is_mobile):
        """Sets the is_mobile of this HLRLookupResponse.

        True if this is a mobile number (only true with 100% certainty, if the number type is unknown this value will be false)

        :param is_mobile: The is_mobile of this HLRLookupResponse.
        :type is_mobile: bool
        """
        if is_mobile is None:
            raise ValueError("Invalid value for `is_mobile`, must not be `None`")

        self._is_mobile = is_mobile

    @property
    def is_ported(self):
        """Gets the is_ported of this HLRLookupResponse.

        Has this number been ported to another network

        :return: The is_ported of this HLRLookupResponse.
        :rtype: bool
        """
        return self._is_ported

    @is_ported.setter
    def is_ported(self, is_ported):
        """Sets the is_ported of this HLRLookupResponse.

        Has this number been ported to another network

        :param is_ported: The is_ported of this HLRLookupResponse.
        :type is_ported: bool
        """
        if is_ported is None:
            raise ValueError("Invalid value for `is_ported`, must not be `None`")

        self._is_ported = is_ported

    @property
    def is_roaming(self):
        """Gets the is_roaming of this HLRLookupResponse.

        Is this number currently roaming from its origin country

        :return: The is_roaming of this HLRLookupResponse.
        :rtype: bool
        """
        return self._is_roaming

    @is_roaming.setter
    def is_roaming(self, is_roaming):
        """Sets the is_roaming of this HLRLookupResponse.

        Is this number currently roaming from its origin country

        :param is_roaming: The is_roaming of this HLRLookupResponse.
        :type is_roaming: bool
        """
        if is_roaming is None:
            raise ValueError("Invalid value for `is_roaming`, must not be `None`")

        self._is_roaming = is_roaming

    @property
    def local_number(self):
        """Gets the local_number of this HLRLookupResponse.

        The number represented in local dialing format

        :return: The local_number of this HLRLookupResponse.
        :rtype: str
        """
        return self._local_number

    @local_number.setter
    def local_number(self, local_number):
        """Sets the local_number of this HLRLookupResponse.

        The number represented in local dialing format

        :param local_number: The local_number of this HLRLookupResponse.
        :type local_number: str
        """
        if local_number is None:
            raise ValueError("Invalid value for `local_number`, must not be `None`")

        self._local_number = local_number

    @property
    def location(self):
        """Gets the location of this HLRLookupResponse.

        The number location. Could be a city, region or country depending on the type of number

        :return: The location of this HLRLookupResponse.
        :rtype: str
        """
        return self._location

    @location.setter
    def location(self, location):
        """Sets the location of this HLRLookupResponse.

        The number location. Could be a city, region or country depending on the type of number

        :param location: The location of this HLRLookupResponse.
        :type location: str
        """
        if location is None:
            raise ValueError("Invalid value for `location`, must not be `None`")

        self._location = location

    @property
    def mcc(self):
        """Gets the mcc of this HLRLookupResponse.

        The mobile MCC number (Mobile Country Code)

        :return: The mcc of this HLRLookupResponse.
        :rtype: str
        """
        return self._mcc

    @mcc.setter
    def mcc(self, mcc):
        """Sets the mcc of this HLRLookupResponse.

        The mobile MCC number (Mobile Country Code)

        :param mcc: The mcc of this HLRLookupResponse.
        :type mcc: str
        """
        if mcc is None:
            raise ValueError("Invalid value for `mcc`, must not be `None`")

        self._mcc = mcc

    @property
    def mnc(self):
        """Gets the mnc of this HLRLookupResponse.

        The mobile MNC number (Mobile Network Code)

        :return: The mnc of this HLRLookupResponse.
        :rtype: str
        """
        return self._mnc

    @mnc.setter
    def mnc(self, mnc):
        """Sets the mnc of this HLRLookupResponse.

        The mobile MNC number (Mobile Network Code)

        :param mnc: The mnc of this HLRLookupResponse.
        :type mnc: str
        """
        if mnc is None:
            raise ValueError("Invalid value for `mnc`, must not be `None`")

        self._mnc = mnc

    @property
    def msc(self):
        """Gets the msc of this HLRLookupResponse.

        The mobile MSC number (Mobile Switching Center)

        :return: The msc of this HLRLookupResponse.
        :rtype: str
        """
        return self._msc

    @msc.setter
    def msc(self, msc):
        """Sets the msc of this HLRLookupResponse.

        The mobile MSC number (Mobile Switching Center)

        :param msc: The msc of this HLRLookupResponse.
        :type msc: str
        """
        if msc is None:
            raise ValueError("Invalid value for `msc`, must not be `None`")

        self._msc = msc

    @property
    def msin(self):
        """Gets the msin of this HLRLookupResponse.

        The mobile MSIN number (Mobile Subscription Identification Number)

        :return: The msin of this HLRLookupResponse.
        :rtype: str
        """
        return self._msin

    @msin.setter
    def msin(self, msin):
        """Sets the msin of this HLRLookupResponse.

        The mobile MSIN number (Mobile Subscription Identification Number)

        :param msin: The msin of this HLRLookupResponse.
        :type msin: str
        """
        if msin is None:
            raise ValueError("Invalid value for `msin`, must not be `None`")

        self._msin = msin

    @property
    def number_type(self):
        """Gets the number_type of this HLRLookupResponse.

        The number type, possible values are: <br> <ul> <li>mobile</li> <li>fixed-line</li> <li>premium-rate</li> <li>toll-free</li> <li>voip</li> <li>unknown</li> </ul>

        :return: The number_type of this HLRLookupResponse.
        :rtype: str
        """
        return self._number_type

    @number_type.setter
    def number_type(self, number_type):
        """Sets the number_type of this HLRLookupResponse.

        The number type, possible values are: <br> <ul> <li>mobile</li> <li>fixed-line</li> <li>premium-rate</li> <li>toll-free</li> <li>voip</li> <li>unknown</li> </ul>

        :param number_type: The number_type of this HLRLookupResponse.
        :type number_type: str
        """
        if number_type is None:
            raise ValueError("Invalid value for `number_type`, must not be `None`")

        self._number_type = number_type

    @property
    def number_valid(self):
        """Gets the number_valid of this HLRLookupResponse.

        True if this a valid phone number

        :return: The number_valid of this HLRLookupResponse.
        :rtype: bool
        """
        return self._number_valid

    @number_valid.setter
    def number_valid(self, number_valid):
        """Sets the number_valid of this HLRLookupResponse.

        True if this a valid phone number

        :param number_valid: The number_valid of this HLRLookupResponse.
        :type number_valid: bool
        """
        if number_valid is None:
            raise ValueError("Invalid value for `number_valid`, must not be `None`")

        self._number_valid = number_valid

    @property
    def origin_network(self):
        """Gets the origin_network of this HLRLookupResponse.

        The origin network/carrier name

        :return: The origin_network of this HLRLookupResponse.
        :rtype: str
        """
        return self._origin_network

    @origin_network.setter
    def origin_network(self, origin_network):
        """Sets the origin_network of this HLRLookupResponse.

        The origin network/carrier name

        :param origin_network: The origin_network of this HLRLookupResponse.
        :type origin_network: str
        """
        if origin_network is None:
            raise ValueError("Invalid value for `origin_network`, must not be `None`")

        self._origin_network = origin_network

    @property
    def ported_network(self):
        """Gets the ported_network of this HLRLookupResponse.

        The ported to network/carrier name (only set if the number has been ported)

        :return: The ported_network of this HLRLookupResponse.
        :rtype: str
        """
        return self._ported_network

    @ported_network.setter
    def ported_network(self, ported_network):
        """Sets the ported_network of this HLRLookupResponse.

        The ported to network/carrier name (only set if the number has been ported)

        :param ported_network: The ported_network of this HLRLookupResponse.
        :type ported_network: str
        """
        if ported_network is None:
            raise ValueError("Invalid value for `ported_network`, must not be `None`")

        self._ported_network = ported_network

    @property
    def roaming_country_code(self):
        """Gets the roaming_country_code of this HLRLookupResponse.

        If the number is currently roaming, the ISO 2-letter country code of the roaming in country

        :return: The roaming_country_code of this HLRLookupResponse.
        :rtype: str
        """
        return self._roaming_country_code

    @roaming_country_code.setter
    def roaming_country_code(self, roaming_country_code):
        """Sets the roaming_country_code of this HLRLookupResponse.

        If the number is currently roaming, the ISO 2-letter country code of the roaming in country

        :param roaming_country_code: The roaming_country_code of this HLRLookupResponse.
        :type roaming_country_code: str
        """
        if roaming_country_code is None:
            raise ValueError("Invalid value for `roaming_country_code`, must not be `None`")

        self._roaming_country_code = roaming_country_code
