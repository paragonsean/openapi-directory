# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.blocklist_sensor import BlocklistSensor
from openapi_server import util


class IPBlocklistResponse(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, blocklists: List[str]=None, cidr: str=None, ip: str=None, is_bot: bool=None, is_dshield: bool=None, is_exploit_bot: bool=None, is_hijacked: bool=None, is_listed: bool=None, is_malware: bool=None, is_proxy: bool=None, is_spam_bot: bool=None, is_spider: bool=None, is_spyware: bool=None, is_tor: bool=None, is_vpn: bool=None, last_seen: int=None, list_count: int=None, sensors: List[BlocklistSensor]=None):
        """IPBlocklistResponse - a model defined in OpenAPI

        :param blocklists: The blocklists of this IPBlocklistResponse.
        :param cidr: The cidr of this IPBlocklistResponse.
        :param ip: The ip of this IPBlocklistResponse.
        :param is_bot: The is_bot of this IPBlocklistResponse.
        :param is_dshield: The is_dshield of this IPBlocklistResponse.
        :param is_exploit_bot: The is_exploit_bot of this IPBlocklistResponse.
        :param is_hijacked: The is_hijacked of this IPBlocklistResponse.
        :param is_listed: The is_listed of this IPBlocklistResponse.
        :param is_malware: The is_malware of this IPBlocklistResponse.
        :param is_proxy: The is_proxy of this IPBlocklistResponse.
        :param is_spam_bot: The is_spam_bot of this IPBlocklistResponse.
        :param is_spider: The is_spider of this IPBlocklistResponse.
        :param is_spyware: The is_spyware of this IPBlocklistResponse.
        :param is_tor: The is_tor of this IPBlocklistResponse.
        :param is_vpn: The is_vpn of this IPBlocklistResponse.
        :param last_seen: The last_seen of this IPBlocklistResponse.
        :param list_count: The list_count of this IPBlocklistResponse.
        :param sensors: The sensors of this IPBlocklistResponse.
        """
        self.openapi_types = {
            'blocklists': List[str],
            'cidr': str,
            'ip': str,
            'is_bot': bool,
            'is_dshield': bool,
            'is_exploit_bot': bool,
            'is_hijacked': bool,
            'is_listed': bool,
            'is_malware': bool,
            'is_proxy': bool,
            'is_spam_bot': bool,
            'is_spider': bool,
            'is_spyware': bool,
            'is_tor': bool,
            'is_vpn': bool,
            'last_seen': int,
            'list_count': int,
            'sensors': List[BlocklistSensor]
        }

        self.attribute_map = {
            'blocklists': 'blocklists',
            'cidr': 'cidr',
            'ip': 'ip',
            'is_bot': 'is-bot',
            'is_dshield': 'is-dshield',
            'is_exploit_bot': 'is-exploit-bot',
            'is_hijacked': 'is-hijacked',
            'is_listed': 'is-listed',
            'is_malware': 'is-malware',
            'is_proxy': 'is-proxy',
            'is_spam_bot': 'is-spam-bot',
            'is_spider': 'is-spider',
            'is_spyware': 'is-spyware',
            'is_tor': 'is-tor',
            'is_vpn': 'is-vpn',
            'last_seen': 'last-seen',
            'list_count': 'list-count',
            'sensors': 'sensors'
        }

        self._blocklists = blocklists
        self._cidr = cidr
        self._ip = ip
        self._is_bot = is_bot
        self._is_dshield = is_dshield
        self._is_exploit_bot = is_exploit_bot
        self._is_hijacked = is_hijacked
        self._is_listed = is_listed
        self._is_malware = is_malware
        self._is_proxy = is_proxy
        self._is_spam_bot = is_spam_bot
        self._is_spider = is_spider
        self._is_spyware = is_spyware
        self._is_tor = is_tor
        self._is_vpn = is_vpn
        self._last_seen = last_seen
        self._list_count = list_count
        self._sensors = sensors

    @classmethod
    def from_dict(cls, dikt: dict) -> 'IPBlocklistResponse':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The IPBlocklistResponse of this IPBlocklistResponse.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def blocklists(self):
        """Gets the blocklists of this IPBlocklistResponse.

        An array of strings indicating which blocklist categories this IP is listed on

        :return: The blocklists of this IPBlocklistResponse.
        :rtype: List[str]
        """
        return self._blocklists

    @blocklists.setter
    def blocklists(self, blocklists):
        """Sets the blocklists of this IPBlocklistResponse.

        An array of strings indicating which blocklist categories this IP is listed on

        :param blocklists: The blocklists of this IPBlocklistResponse.
        :type blocklists: List[str]
        """
        if blocklists is None:
            raise ValueError("Invalid value for `blocklists`, must not be `None`")

        self._blocklists = blocklists

    @property
    def cidr(self):
        """Gets the cidr of this IPBlocklistResponse.

        The CIDR address for this listing (only set if the IP is listed)

        :return: The cidr of this IPBlocklistResponse.
        :rtype: str
        """
        return self._cidr

    @cidr.setter
    def cidr(self, cidr):
        """Sets the cidr of this IPBlocklistResponse.

        The CIDR address for this listing (only set if the IP is listed)

        :param cidr: The cidr of this IPBlocklistResponse.
        :type cidr: str
        """
        if cidr is None:
            raise ValueError("Invalid value for `cidr`, must not be `None`")

        self._cidr = cidr

    @property
    def ip(self):
        """Gets the ip of this IPBlocklistResponse.

        The IP address

        :return: The ip of this IPBlocklistResponse.
        :rtype: str
        """
        return self._ip

    @ip.setter
    def ip(self, ip):
        """Sets the ip of this IPBlocklistResponse.

        The IP address

        :param ip: The ip of this IPBlocklistResponse.
        :type ip: str
        """
        if ip is None:
            raise ValueError("Invalid value for `ip`, must not be `None`")

        self._ip = ip

    @property
    def is_bot(self):
        """Gets the is_bot of this IPBlocklistResponse.

        IP is hosting a malicious bot or is part of a botnet. This is a broad category which includes brute-force crackers

        :return: The is_bot of this IPBlocklistResponse.
        :rtype: bool
        """
        return self._is_bot

    @is_bot.setter
    def is_bot(self, is_bot):
        """Sets the is_bot of this IPBlocklistResponse.

        IP is hosting a malicious bot or is part of a botnet. This is a broad category which includes brute-force crackers

        :param is_bot: The is_bot of this IPBlocklistResponse.
        :type is_bot: bool
        """
        if is_bot is None:
            raise ValueError("Invalid value for `is_bot`, must not be `None`")

        self._is_bot = is_bot

    @property
    def is_dshield(self):
        """Gets the is_dshield of this IPBlocklistResponse.

        IP has been flagged as a significant attack source by DShield (dshield.org)

        :return: The is_dshield of this IPBlocklistResponse.
        :rtype: bool
        """
        return self._is_dshield

    @is_dshield.setter
    def is_dshield(self, is_dshield):
        """Sets the is_dshield of this IPBlocklistResponse.

        IP has been flagged as a significant attack source by DShield (dshield.org)

        :param is_dshield: The is_dshield of this IPBlocklistResponse.
        :type is_dshield: bool
        """
        if is_dshield is None:
            raise ValueError("Invalid value for `is_dshield`, must not be `None`")

        self._is_dshield = is_dshield

    @property
    def is_exploit_bot(self):
        """Gets the is_exploit_bot of this IPBlocklistResponse.

        IP is hosting an exploit finding bot or is running exploit scanning software

        :return: The is_exploit_bot of this IPBlocklistResponse.
        :rtype: bool
        """
        return self._is_exploit_bot

    @is_exploit_bot.setter
    def is_exploit_bot(self, is_exploit_bot):
        """Sets the is_exploit_bot of this IPBlocklistResponse.

        IP is hosting an exploit finding bot or is running exploit scanning software

        :param is_exploit_bot: The is_exploit_bot of this IPBlocklistResponse.
        :type is_exploit_bot: bool
        """
        if is_exploit_bot is None:
            raise ValueError("Invalid value for `is_exploit_bot`, must not be `None`")

        self._is_exploit_bot = is_exploit_bot

    @property
    def is_hijacked(self):
        """Gets the is_hijacked of this IPBlocklistResponse.

        IP is part of a hijacked netblock or a netblock controlled by a criminal organization

        :return: The is_hijacked of this IPBlocklistResponse.
        :rtype: bool
        """
        return self._is_hijacked

    @is_hijacked.setter
    def is_hijacked(self, is_hijacked):
        """Sets the is_hijacked of this IPBlocklistResponse.

        IP is part of a hijacked netblock or a netblock controlled by a criminal organization

        :param is_hijacked: The is_hijacked of this IPBlocklistResponse.
        :type is_hijacked: bool
        """
        if is_hijacked is None:
            raise ValueError("Invalid value for `is_hijacked`, must not be `None`")

        self._is_hijacked = is_hijacked

    @property
    def is_listed(self):
        """Gets the is_listed of this IPBlocklistResponse.

        Is this IP on a blocklist

        :return: The is_listed of this IPBlocklistResponse.
        :rtype: bool
        """
        return self._is_listed

    @is_listed.setter
    def is_listed(self, is_listed):
        """Sets the is_listed of this IPBlocklistResponse.

        Is this IP on a blocklist

        :param is_listed: The is_listed of this IPBlocklistResponse.
        :type is_listed: bool
        """
        if is_listed is None:
            raise ValueError("Invalid value for `is_listed`, must not be `None`")

        self._is_listed = is_listed

    @property
    def is_malware(self):
        """Gets the is_malware of this IPBlocklistResponse.

        IP is involved in distributing or is running malware

        :return: The is_malware of this IPBlocklistResponse.
        :rtype: bool
        """
        return self._is_malware

    @is_malware.setter
    def is_malware(self, is_malware):
        """Sets the is_malware of this IPBlocklistResponse.

        IP is involved in distributing or is running malware

        :param is_malware: The is_malware of this IPBlocklistResponse.
        :type is_malware: bool
        """
        if is_malware is None:
            raise ValueError("Invalid value for `is_malware`, must not be `None`")

        self._is_malware = is_malware

    @property
    def is_proxy(self):
        """Gets the is_proxy of this IPBlocklistResponse.

        IP has been detected as an anonymous web proxy or anonymous HTTP proxy

        :return: The is_proxy of this IPBlocklistResponse.
        :rtype: bool
        """
        return self._is_proxy

    @is_proxy.setter
    def is_proxy(self, is_proxy):
        """Sets the is_proxy of this IPBlocklistResponse.

        IP has been detected as an anonymous web proxy or anonymous HTTP proxy

        :param is_proxy: The is_proxy of this IPBlocklistResponse.
        :type is_proxy: bool
        """
        if is_proxy is None:
            raise ValueError("Invalid value for `is_proxy`, must not be `None`")

        self._is_proxy = is_proxy

    @property
    def is_spam_bot(self):
        """Gets the is_spam_bot of this IPBlocklistResponse.

        IP address is hosting a spam bot, comment spamming or any other spamming type software

        :return: The is_spam_bot of this IPBlocklistResponse.
        :rtype: bool
        """
        return self._is_spam_bot

    @is_spam_bot.setter
    def is_spam_bot(self, is_spam_bot):
        """Sets the is_spam_bot of this IPBlocklistResponse.

        IP address is hosting a spam bot, comment spamming or any other spamming type software

        :param is_spam_bot: The is_spam_bot of this IPBlocklistResponse.
        :type is_spam_bot: bool
        """
        if is_spam_bot is None:
            raise ValueError("Invalid value for `is_spam_bot`, must not be `None`")

        self._is_spam_bot = is_spam_bot

    @property
    def is_spider(self):
        """Gets the is_spider of this IPBlocklistResponse.

        IP is running a hostile web spider / web crawler

        :return: The is_spider of this IPBlocklistResponse.
        :rtype: bool
        """
        return self._is_spider

    @is_spider.setter
    def is_spider(self, is_spider):
        """Sets the is_spider of this IPBlocklistResponse.

        IP is running a hostile web spider / web crawler

        :param is_spider: The is_spider of this IPBlocklistResponse.
        :type is_spider: bool
        """
        if is_spider is None:
            raise ValueError("Invalid value for `is_spider`, must not be `None`")

        self._is_spider = is_spider

    @property
    def is_spyware(self):
        """Gets the is_spyware of this IPBlocklistResponse.

        IP is involved in distributing or is running spyware

        :return: The is_spyware of this IPBlocklistResponse.
        :rtype: bool
        """
        return self._is_spyware

    @is_spyware.setter
    def is_spyware(self, is_spyware):
        """Sets the is_spyware of this IPBlocklistResponse.

        IP is involved in distributing or is running spyware

        :param is_spyware: The is_spyware of this IPBlocklistResponse.
        :type is_spyware: bool
        """
        if is_spyware is None:
            raise ValueError("Invalid value for `is_spyware`, must not be `None`")

        self._is_spyware = is_spyware

    @property
    def is_tor(self):
        """Gets the is_tor of this IPBlocklistResponse.

        IP is a Tor node or running a Tor related service

        :return: The is_tor of this IPBlocklistResponse.
        :rtype: bool
        """
        return self._is_tor

    @is_tor.setter
    def is_tor(self, is_tor):
        """Sets the is_tor of this IPBlocklistResponse.

        IP is a Tor node or running a Tor related service

        :param is_tor: The is_tor of this IPBlocklistResponse.
        :type is_tor: bool
        """
        if is_tor is None:
            raise ValueError("Invalid value for `is_tor`, must not be `None`")

        self._is_tor = is_tor

    @property
    def is_vpn(self):
        """Gets the is_vpn of this IPBlocklistResponse.

        IP belongs to a public VPN provider (only set if the 'vpn-lookup' option is enabled)

        :return: The is_vpn of this IPBlocklistResponse.
        :rtype: bool
        """
        return self._is_vpn

    @is_vpn.setter
    def is_vpn(self, is_vpn):
        """Sets the is_vpn of this IPBlocklistResponse.

        IP belongs to a public VPN provider (only set if the 'vpn-lookup' option is enabled)

        :param is_vpn: The is_vpn of this IPBlocklistResponse.
        :type is_vpn: bool
        """
        if is_vpn is None:
            raise ValueError("Invalid value for `is_vpn`, must not be `None`")

        self._is_vpn = is_vpn

    @property
    def last_seen(self):
        """Gets the last_seen of this IPBlocklistResponse.

        The unix time when this IP was last seen on any blocklist. IPs are automatically removed after 7 days therefor this value will never be older than 7 days

        :return: The last_seen of this IPBlocklistResponse.
        :rtype: int
        """
        return self._last_seen

    @last_seen.setter
    def last_seen(self, last_seen):
        """Sets the last_seen of this IPBlocklistResponse.

        The unix time when this IP was last seen on any blocklist. IPs are automatically removed after 7 days therefor this value will never be older than 7 days

        :param last_seen: The last_seen of this IPBlocklistResponse.
        :type last_seen: int
        """
        if last_seen is None:
            raise ValueError("Invalid value for `last_seen`, must not be `None`")

        self._last_seen = last_seen

    @property
    def list_count(self):
        """Gets the list_count of this IPBlocklistResponse.

        The number of blocklists the IP is listed on

        :return: The list_count of this IPBlocklistResponse.
        :rtype: int
        """
        return self._list_count

    @list_count.setter
    def list_count(self, list_count):
        """Sets the list_count of this IPBlocklistResponse.

        The number of blocklists the IP is listed on

        :param list_count: The list_count of this IPBlocklistResponse.
        :type list_count: int
        """
        if list_count is None:
            raise ValueError("Invalid value for `list_count`, must not be `None`")

        self._list_count = list_count

    @property
    def sensors(self):
        """Gets the sensors of this IPBlocklistResponse.

        An array of objects containing details on which specific sensors detected the IP

        :return: The sensors of this IPBlocklistResponse.
        :rtype: List[BlocklistSensor]
        """
        return self._sensors

    @sensors.setter
    def sensors(self, sensors):
        """Sets the sensors of this IPBlocklistResponse.

        An array of objects containing details on which specific sensors detected the IP

        :param sensors: The sensors of this IPBlocklistResponse.
        :type sensors: List[BlocklistSensor]
        """
        if sensors is None:
            raise ValueError("Invalid value for `sensors`, must not be `None`")

        self._sensors = sensors
