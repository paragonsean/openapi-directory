# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class PhoneValidateResponse(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, country: str=None, country_code: str=None, country_code3: str=None, currency_code: str=None, international_calling_code: str=None, international_number: str=None, is_mobile: bool=None, local_number: str=None, location: str=None, prefix_network: str=None, type: str=None, valid: bool=None):
        """PhoneValidateResponse - a model defined in OpenAPI

        :param country: The country of this PhoneValidateResponse.
        :param country_code: The country_code of this PhoneValidateResponse.
        :param country_code3: The country_code3 of this PhoneValidateResponse.
        :param currency_code: The currency_code of this PhoneValidateResponse.
        :param international_calling_code: The international_calling_code of this PhoneValidateResponse.
        :param international_number: The international_number of this PhoneValidateResponse.
        :param is_mobile: The is_mobile of this PhoneValidateResponse.
        :param local_number: The local_number of this PhoneValidateResponse.
        :param location: The location of this PhoneValidateResponse.
        :param prefix_network: The prefix_network of this PhoneValidateResponse.
        :param type: The type of this PhoneValidateResponse.
        :param valid: The valid of this PhoneValidateResponse.
        """
        self.openapi_types = {
            'country': str,
            'country_code': str,
            'country_code3': str,
            'currency_code': str,
            'international_calling_code': str,
            'international_number': str,
            'is_mobile': bool,
            'local_number': str,
            'location': str,
            'prefix_network': str,
            'type': str,
            'valid': bool
        }

        self.attribute_map = {
            'country': 'country',
            'country_code': 'country-code',
            'country_code3': 'country-code3',
            'currency_code': 'currency-code',
            'international_calling_code': 'international-calling-code',
            'international_number': 'international-number',
            'is_mobile': 'is-mobile',
            'local_number': 'local-number',
            'location': 'location',
            'prefix_network': 'prefix-network',
            'type': 'type',
            'valid': 'valid'
        }

        self._country = country
        self._country_code = country_code
        self._country_code3 = country_code3
        self._currency_code = currency_code
        self._international_calling_code = international_calling_code
        self._international_number = international_number
        self._is_mobile = is_mobile
        self._local_number = local_number
        self._location = location
        self._prefix_network = prefix_network
        self._type = type
        self._valid = valid

    @classmethod
    def from_dict(cls, dikt: dict) -> 'PhoneValidateResponse':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The PhoneValidateResponse of this PhoneValidateResponse.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def country(self):
        """Gets the country of this PhoneValidateResponse.

        The phone number country

        :return: The country of this PhoneValidateResponse.
        :rtype: str
        """
        return self._country

    @country.setter
    def country(self, country):
        """Sets the country of this PhoneValidateResponse.

        The phone number country

        :param country: The country of this PhoneValidateResponse.
        :type country: str
        """
        if country is None:
            raise ValueError("Invalid value for `country`, must not be `None`")

        self._country = country

    @property
    def country_code(self):
        """Gets the country_code of this PhoneValidateResponse.

        The phone number country as an ISO 2-letter country code

        :return: The country_code of this PhoneValidateResponse.
        :rtype: str
        """
        return self._country_code

    @country_code.setter
    def country_code(self, country_code):
        """Sets the country_code of this PhoneValidateResponse.

        The phone number country as an ISO 2-letter country code

        :param country_code: The country_code of this PhoneValidateResponse.
        :type country_code: str
        """
        if country_code is None:
            raise ValueError("Invalid value for `country_code`, must not be `None`")

        self._country_code = country_code

    @property
    def country_code3(self):
        """Gets the country_code3 of this PhoneValidateResponse.

        The phone number country as an ISO 3-letter country code

        :return: The country_code3 of this PhoneValidateResponse.
        :rtype: str
        """
        return self._country_code3

    @country_code3.setter
    def country_code3(self, country_code3):
        """Sets the country_code3 of this PhoneValidateResponse.

        The phone number country as an ISO 3-letter country code

        :param country_code3: The country_code3 of this PhoneValidateResponse.
        :type country_code3: str
        """
        if country_code3 is None:
            raise ValueError("Invalid value for `country_code3`, must not be `None`")

        self._country_code3 = country_code3

    @property
    def currency_code(self):
        """Gets the currency_code of this PhoneValidateResponse.

        ISO 4217 currency code associated with the country

        :return: The currency_code of this PhoneValidateResponse.
        :rtype: str
        """
        return self._currency_code

    @currency_code.setter
    def currency_code(self, currency_code):
        """Sets the currency_code of this PhoneValidateResponse.

        ISO 4217 currency code associated with the country

        :param currency_code: The currency_code of this PhoneValidateResponse.
        :type currency_code: str
        """
        if currency_code is None:
            raise ValueError("Invalid value for `currency_code`, must not be `None`")

        self._currency_code = currency_code

    @property
    def international_calling_code(self):
        """Gets the international_calling_code of this PhoneValidateResponse.

        The international calling code

        :return: The international_calling_code of this PhoneValidateResponse.
        :rtype: str
        """
        return self._international_calling_code

    @international_calling_code.setter
    def international_calling_code(self, international_calling_code):
        """Sets the international_calling_code of this PhoneValidateResponse.

        The international calling code

        :param international_calling_code: The international_calling_code of this PhoneValidateResponse.
        :type international_calling_code: str
        """
        if international_calling_code is None:
            raise ValueError("Invalid value for `international_calling_code`, must not be `None`")

        self._international_calling_code = international_calling_code

    @property
    def international_number(self):
        """Gets the international_number of this PhoneValidateResponse.

        The number represented in full international format (E.164)

        :return: The international_number of this PhoneValidateResponse.
        :rtype: str
        """
        return self._international_number

    @international_number.setter
    def international_number(self, international_number):
        """Sets the international_number of this PhoneValidateResponse.

        The number represented in full international format (E.164)

        :param international_number: The international_number of this PhoneValidateResponse.
        :type international_number: str
        """
        if international_number is None:
            raise ValueError("Invalid value for `international_number`, must not be `None`")

        self._international_number = international_number

    @property
    def is_mobile(self):
        """Gets the is_mobile of this PhoneValidateResponse.

        True if this is a mobile number. If the number type is unknown this value will be false

        :return: The is_mobile of this PhoneValidateResponse.
        :rtype: bool
        """
        return self._is_mobile

    @is_mobile.setter
    def is_mobile(self, is_mobile):
        """Sets the is_mobile of this PhoneValidateResponse.

        True if this is a mobile number. If the number type is unknown this value will be false

        :param is_mobile: The is_mobile of this PhoneValidateResponse.
        :type is_mobile: bool
        """
        if is_mobile is None:
            raise ValueError("Invalid value for `is_mobile`, must not be `None`")

        self._is_mobile = is_mobile

    @property
    def local_number(self):
        """Gets the local_number of this PhoneValidateResponse.

        The number represented in local dialing format

        :return: The local_number of this PhoneValidateResponse.
        :rtype: str
        """
        return self._local_number

    @local_number.setter
    def local_number(self, local_number):
        """Sets the local_number of this PhoneValidateResponse.

        The number represented in local dialing format

        :param local_number: The local_number of this PhoneValidateResponse.
        :type local_number: str
        """
        if local_number is None:
            raise ValueError("Invalid value for `local_number`, must not be `None`")

        self._local_number = local_number

    @property
    def location(self):
        """Gets the location of this PhoneValidateResponse.

        The phone number location. Could be the city, region or country depending on the type of number

        :return: The location of this PhoneValidateResponse.
        :rtype: str
        """
        return self._location

    @location.setter
    def location(self, location):
        """Sets the location of this PhoneValidateResponse.

        The phone number location. Could be the city, region or country depending on the type of number

        :param location: The location of this PhoneValidateResponse.
        :type location: str
        """
        if location is None:
            raise ValueError("Invalid value for `location`, must not be `None`")

        self._location = location

    @property
    def prefix_network(self):
        """Gets the prefix_network of this PhoneValidateResponse.

        The network/carrier who owns the prefix (this only works for some countries, use HLR lookup for global network detection)

        :return: The prefix_network of this PhoneValidateResponse.
        :rtype: str
        """
        return self._prefix_network

    @prefix_network.setter
    def prefix_network(self, prefix_network):
        """Sets the prefix_network of this PhoneValidateResponse.

        The network/carrier who owns the prefix (this only works for some countries, use HLR lookup for global network detection)

        :param prefix_network: The prefix_network of this PhoneValidateResponse.
        :type prefix_network: str
        """
        if prefix_network is None:
            raise ValueError("Invalid value for `prefix_network`, must not be `None`")

        self._prefix_network = prefix_network

    @property
    def type(self):
        """Gets the type of this PhoneValidateResponse.

        The number type based on the number prefix. <br>Possible values are: <br> <ul> <li>mobile</li> <li>fixed-line</li> <li>premium-rate</li> <li>toll-free</li> <li>voip</li> <li>unknown (use HLR lookup)</li> </ul>

        :return: The type of this PhoneValidateResponse.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this PhoneValidateResponse.

        The number type based on the number prefix. <br>Possible values are: <br> <ul> <li>mobile</li> <li>fixed-line</li> <li>premium-rate</li> <li>toll-free</li> <li>voip</li> <li>unknown (use HLR lookup)</li> </ul>

        :param type: The type of this PhoneValidateResponse.
        :type type: str
        """
        if type is None:
            raise ValueError("Invalid value for `type`, must not be `None`")

        self._type = type

    @property
    def valid(self):
        """Gets the valid of this PhoneValidateResponse.

        Is this a valid phone number

        :return: The valid of this PhoneValidateResponse.
        :rtype: bool
        """
        return self._valid

    @valid.setter
    def valid(self, valid):
        """Sets the valid of this PhoneValidateResponse.

        Is this a valid phone number

        :param valid: The valid of this PhoneValidateResponse.
        :type valid: bool
        """
        if valid is None:
            raise ValueError("Invalid value for `valid`, must not be `None`")

        self._valid = valid
