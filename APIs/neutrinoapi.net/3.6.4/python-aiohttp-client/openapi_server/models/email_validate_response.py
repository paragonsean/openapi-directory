# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class EmailValidateResponse(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, domain: str=None, domain_error: bool=None, email: str=None, is_disposable: bool=None, is_freemail: bool=None, is_personal: bool=None, provider: str=None, syntax_error: bool=None, typos_fixed: bool=None, valid: bool=None):
        """EmailValidateResponse - a model defined in OpenAPI

        :param domain: The domain of this EmailValidateResponse.
        :param domain_error: The domain_error of this EmailValidateResponse.
        :param email: The email of this EmailValidateResponse.
        :param is_disposable: The is_disposable of this EmailValidateResponse.
        :param is_freemail: The is_freemail of this EmailValidateResponse.
        :param is_personal: The is_personal of this EmailValidateResponse.
        :param provider: The provider of this EmailValidateResponse.
        :param syntax_error: The syntax_error of this EmailValidateResponse.
        :param typos_fixed: The typos_fixed of this EmailValidateResponse.
        :param valid: The valid of this EmailValidateResponse.
        """
        self.openapi_types = {
            'domain': str,
            'domain_error': bool,
            'email': str,
            'is_disposable': bool,
            'is_freemail': bool,
            'is_personal': bool,
            'provider': str,
            'syntax_error': bool,
            'typos_fixed': bool,
            'valid': bool
        }

        self.attribute_map = {
            'domain': 'domain',
            'domain_error': 'domain-error',
            'email': 'email',
            'is_disposable': 'is-disposable',
            'is_freemail': 'is-freemail',
            'is_personal': 'is-personal',
            'provider': 'provider',
            'syntax_error': 'syntax-error',
            'typos_fixed': 'typos-fixed',
            'valid': 'valid'
        }

        self._domain = domain
        self._domain_error = domain_error
        self._email = email
        self._is_disposable = is_disposable
        self._is_freemail = is_freemail
        self._is_personal = is_personal
        self._provider = provider
        self._syntax_error = syntax_error
        self._typos_fixed = typos_fixed
        self._valid = valid

    @classmethod
    def from_dict(cls, dikt: dict) -> 'EmailValidateResponse':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The EmailValidateResponse of this EmailValidateResponse.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def domain(self):
        """Gets the domain of this EmailValidateResponse.

        The email domain

        :return: The domain of this EmailValidateResponse.
        :rtype: str
        """
        return self._domain

    @domain.setter
    def domain(self, domain):
        """Sets the domain of this EmailValidateResponse.

        The email domain

        :param domain: The domain of this EmailValidateResponse.
        :type domain: str
        """
        if domain is None:
            raise ValueError("Invalid value for `domain`, must not be `None`")

        self._domain = domain

    @property
    def domain_error(self):
        """Gets the domain_error of this EmailValidateResponse.

        True if this address has a domain error (e.g. no valid mail server records)

        :return: The domain_error of this EmailValidateResponse.
        :rtype: bool
        """
        return self._domain_error

    @domain_error.setter
    def domain_error(self, domain_error):
        """Sets the domain_error of this EmailValidateResponse.

        True if this address has a domain error (e.g. no valid mail server records)

        :param domain_error: The domain_error of this EmailValidateResponse.
        :type domain_error: bool
        """
        if domain_error is None:
            raise ValueError("Invalid value for `domain_error`, must not be `None`")

        self._domain_error = domain_error

    @property
    def email(self):
        """Gets the email of this EmailValidateResponse.

        The email address. If you have used the fix-typos option then this will be the fixed address

        :return: The email of this EmailValidateResponse.
        :rtype: str
        """
        return self._email

    @email.setter
    def email(self, email):
        """Sets the email of this EmailValidateResponse.

        The email address. If you have used the fix-typos option then this will be the fixed address

        :param email: The email of this EmailValidateResponse.
        :type email: str
        """
        if email is None:
            raise ValueError("Invalid value for `email`, must not be `None`")

        self._email = email

    @property
    def is_disposable(self):
        """Gets the is_disposable of this EmailValidateResponse.

        True if this address is a disposable, temporary or darknet related email address

        :return: The is_disposable of this EmailValidateResponse.
        :rtype: bool
        """
        return self._is_disposable

    @is_disposable.setter
    def is_disposable(self, is_disposable):
        """Sets the is_disposable of this EmailValidateResponse.

        True if this address is a disposable, temporary or darknet related email address

        :param is_disposable: The is_disposable of this EmailValidateResponse.
        :type is_disposable: bool
        """
        if is_disposable is None:
            raise ValueError("Invalid value for `is_disposable`, must not be `None`")

        self._is_disposable = is_disposable

    @property
    def is_freemail(self):
        """Gets the is_freemail of this EmailValidateResponse.

        True if this address is a free-mail address

        :return: The is_freemail of this EmailValidateResponse.
        :rtype: bool
        """
        return self._is_freemail

    @is_freemail.setter
    def is_freemail(self, is_freemail):
        """Sets the is_freemail of this EmailValidateResponse.

        True if this address is a free-mail address

        :param is_freemail: The is_freemail of this EmailValidateResponse.
        :type is_freemail: bool
        """
        if is_freemail is None:
            raise ValueError("Invalid value for `is_freemail`, must not be `None`")

        self._is_freemail = is_freemail

    @property
    def is_personal(self):
        """Gets the is_personal of this EmailValidateResponse.

        True if this address belongs to a person. False if this is a role based address, e.g. admin@, help@, office@, etc.

        :return: The is_personal of this EmailValidateResponse.
        :rtype: bool
        """
        return self._is_personal

    @is_personal.setter
    def is_personal(self, is_personal):
        """Sets the is_personal of this EmailValidateResponse.

        True if this address belongs to a person. False if this is a role based address, e.g. admin@, help@, office@, etc.

        :param is_personal: The is_personal of this EmailValidateResponse.
        :type is_personal: bool
        """
        if is_personal is None:
            raise ValueError("Invalid value for `is_personal`, must not be `None`")

        self._is_personal = is_personal

    @property
    def provider(self):
        """Gets the provider of this EmailValidateResponse.

        The email service provider domain

        :return: The provider of this EmailValidateResponse.
        :rtype: str
        """
        return self._provider

    @provider.setter
    def provider(self, provider):
        """Sets the provider of this EmailValidateResponse.

        The email service provider domain

        :param provider: The provider of this EmailValidateResponse.
        :type provider: str
        """
        if provider is None:
            raise ValueError("Invalid value for `provider`, must not be `None`")

        self._provider = provider

    @property
    def syntax_error(self):
        """Gets the syntax_error of this EmailValidateResponse.

        True if this address has a syntax error

        :return: The syntax_error of this EmailValidateResponse.
        :rtype: bool
        """
        return self._syntax_error

    @syntax_error.setter
    def syntax_error(self, syntax_error):
        """Sets the syntax_error of this EmailValidateResponse.

        True if this address has a syntax error

        :param syntax_error: The syntax_error of this EmailValidateResponse.
        :type syntax_error: bool
        """
        if syntax_error is None:
            raise ValueError("Invalid value for `syntax_error`, must not be `None`")

        self._syntax_error = syntax_error

    @property
    def typos_fixed(self):
        """Gets the typos_fixed of this EmailValidateResponse.

        True if typos have been fixed

        :return: The typos_fixed of this EmailValidateResponse.
        :rtype: bool
        """
        return self._typos_fixed

    @typos_fixed.setter
    def typos_fixed(self, typos_fixed):
        """Sets the typos_fixed of this EmailValidateResponse.

        True if typos have been fixed

        :param typos_fixed: The typos_fixed of this EmailValidateResponse.
        :type typos_fixed: bool
        """
        if typos_fixed is None:
            raise ValueError("Invalid value for `typos_fixed`, must not be `None`")

        self._typos_fixed = typos_fixed

    @property
    def valid(self):
        """Gets the valid of this EmailValidateResponse.

        Is this a valid email

        :return: The valid of this EmailValidateResponse.
        :rtype: bool
        """
        return self._valid

    @valid.setter
    def valid(self, valid):
        """Sets the valid of this EmailValidateResponse.

        Is this a valid email

        :param valid: The valid of this EmailValidateResponse.
        :type valid: bool
        """
        if valid is None:
            raise ValueError("Invalid value for `valid`, must not be `None`")

        self._valid = valid
