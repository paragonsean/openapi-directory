# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class URLInfoResponse(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, content: str=None, content_encoding: str=None, content_size: int=None, content_type: str=None, http_ok: bool=None, http_redirect: bool=None, http_status: int=None, http_status_message: int=None, is_error: bool=None, is_timeout: bool=None, language_code: str=None, load_time: float=None, query: Dict[str, str]=None, real: bool=None, server_city: str=None, server_country: str=None, server_country_code: str=None, server_hostname: str=None, server_ip: str=None, server_name: str=None, server_region: str=None, title: str=None, url: str=None, url_path: str=None, url_port: int=None, url_protocol: str=None, valid: bool=None):
        """URLInfoResponse - a model defined in OpenAPI

        :param content: The content of this URLInfoResponse.
        :param content_encoding: The content_encoding of this URLInfoResponse.
        :param content_size: The content_size of this URLInfoResponse.
        :param content_type: The content_type of this URLInfoResponse.
        :param http_ok: The http_ok of this URLInfoResponse.
        :param http_redirect: The http_redirect of this URLInfoResponse.
        :param http_status: The http_status of this URLInfoResponse.
        :param http_status_message: The http_status_message of this URLInfoResponse.
        :param is_error: The is_error of this URLInfoResponse.
        :param is_timeout: The is_timeout of this URLInfoResponse.
        :param language_code: The language_code of this URLInfoResponse.
        :param load_time: The load_time of this URLInfoResponse.
        :param query: The query of this URLInfoResponse.
        :param real: The real of this URLInfoResponse.
        :param server_city: The server_city of this URLInfoResponse.
        :param server_country: The server_country of this URLInfoResponse.
        :param server_country_code: The server_country_code of this URLInfoResponse.
        :param server_hostname: The server_hostname of this URLInfoResponse.
        :param server_ip: The server_ip of this URLInfoResponse.
        :param server_name: The server_name of this URLInfoResponse.
        :param server_region: The server_region of this URLInfoResponse.
        :param title: The title of this URLInfoResponse.
        :param url: The url of this URLInfoResponse.
        :param url_path: The url_path of this URLInfoResponse.
        :param url_port: The url_port of this URLInfoResponse.
        :param url_protocol: The url_protocol of this URLInfoResponse.
        :param valid: The valid of this URLInfoResponse.
        """
        self.openapi_types = {
            'content': str,
            'content_encoding': str,
            'content_size': int,
            'content_type': str,
            'http_ok': bool,
            'http_redirect': bool,
            'http_status': int,
            'http_status_message': int,
            'is_error': bool,
            'is_timeout': bool,
            'language_code': str,
            'load_time': float,
            'query': Dict[str, str],
            'real': bool,
            'server_city': str,
            'server_country': str,
            'server_country_code': str,
            'server_hostname': str,
            'server_ip': str,
            'server_name': str,
            'server_region': str,
            'title': str,
            'url': str,
            'url_path': str,
            'url_port': int,
            'url_protocol': str,
            'valid': bool
        }

        self.attribute_map = {
            'content': 'content',
            'content_encoding': 'content-encoding',
            'content_size': 'content-size',
            'content_type': 'content-type',
            'http_ok': 'http-ok',
            'http_redirect': 'http-redirect',
            'http_status': 'http-status',
            'http_status_message': 'http-status-message',
            'is_error': 'is-error',
            'is_timeout': 'is-timeout',
            'language_code': 'language-code',
            'load_time': 'load-time',
            'query': 'query',
            'real': 'real',
            'server_city': 'server-city',
            'server_country': 'server-country',
            'server_country_code': 'server-country-code',
            'server_hostname': 'server-hostname',
            'server_ip': 'server-ip',
            'server_name': 'server-name',
            'server_region': 'server-region',
            'title': 'title',
            'url': 'url',
            'url_path': 'url-path',
            'url_port': 'url-port',
            'url_protocol': 'url-protocol',
            'valid': 'valid'
        }

        self._content = content
        self._content_encoding = content_encoding
        self._content_size = content_size
        self._content_type = content_type
        self._http_ok = http_ok
        self._http_redirect = http_redirect
        self._http_status = http_status
        self._http_status_message = http_status_message
        self._is_error = is_error
        self._is_timeout = is_timeout
        self._language_code = language_code
        self._load_time = load_time
        self._query = query
        self._real = real
        self._server_city = server_city
        self._server_country = server_country
        self._server_country_code = server_country_code
        self._server_hostname = server_hostname
        self._server_ip = server_ip
        self._server_name = server_name
        self._server_region = server_region
        self._title = title
        self._url = url
        self._url_path = url_path
        self._url_port = url_port
        self._url_protocol = url_protocol
        self._valid = valid

    @classmethod
    def from_dict(cls, dikt: dict) -> 'URLInfoResponse':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The URLInfoResponse of this URLInfoResponse.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def content(self):
        """Gets the content of this URLInfoResponse.

        The actual content this URL responded with. Only set if the 'fetch-content' option was used

        :return: The content of this URLInfoResponse.
        :rtype: str
        """
        return self._content

    @content.setter
    def content(self, content):
        """Sets the content of this URLInfoResponse.

        The actual content this URL responded with. Only set if the 'fetch-content' option was used

        :param content: The content of this URLInfoResponse.
        :type content: str
        """
        if content is None:
            raise ValueError("Invalid value for `content`, must not be `None`")

        self._content = content

    @property
    def content_encoding(self):
        """Gets the content_encoding of this URLInfoResponse.

        The encoding format the URL uses

        :return: The content_encoding of this URLInfoResponse.
        :rtype: str
        """
        return self._content_encoding

    @content_encoding.setter
    def content_encoding(self, content_encoding):
        """Sets the content_encoding of this URLInfoResponse.

        The encoding format the URL uses

        :param content_encoding: The content_encoding of this URLInfoResponse.
        :type content_encoding: str
        """
        if content_encoding is None:
            raise ValueError("Invalid value for `content_encoding`, must not be `None`")

        self._content_encoding = content_encoding

    @property
    def content_size(self):
        """Gets the content_size of this URLInfoResponse.

        The size of the URL content in bytes

        :return: The content_size of this URLInfoResponse.
        :rtype: int
        """
        return self._content_size

    @content_size.setter
    def content_size(self, content_size):
        """Sets the content_size of this URLInfoResponse.

        The size of the URL content in bytes

        :param content_size: The content_size of this URLInfoResponse.
        :type content_size: int
        """
        if content_size is None:
            raise ValueError("Invalid value for `content_size`, must not be `None`")

        self._content_size = content_size

    @property
    def content_type(self):
        """Gets the content_type of this URLInfoResponse.

        The content-type this URL serves

        :return: The content_type of this URLInfoResponse.
        :rtype: str
        """
        return self._content_type

    @content_type.setter
    def content_type(self, content_type):
        """Sets the content_type of this URLInfoResponse.

        The content-type this URL serves

        :param content_type: The content_type of this URLInfoResponse.
        :type content_type: str
        """
        if content_type is None:
            raise ValueError("Invalid value for `content_type`, must not be `None`")

        self._content_type = content_type

    @property
    def http_ok(self):
        """Gets the http_ok of this URLInfoResponse.

        True if this URL responded with an HTTP OK (200) status

        :return: The http_ok of this URLInfoResponse.
        :rtype: bool
        """
        return self._http_ok

    @http_ok.setter
    def http_ok(self, http_ok):
        """Sets the http_ok of this URLInfoResponse.

        True if this URL responded with an HTTP OK (200) status

        :param http_ok: The http_ok of this URLInfoResponse.
        :type http_ok: bool
        """
        if http_ok is None:
            raise ValueError("Invalid value for `http_ok`, must not be `None`")

        self._http_ok = http_ok

    @property
    def http_redirect(self):
        """Gets the http_redirect of this URLInfoResponse.

        True if this URL responded with an HTTP redirect

        :return: The http_redirect of this URLInfoResponse.
        :rtype: bool
        """
        return self._http_redirect

    @http_redirect.setter
    def http_redirect(self, http_redirect):
        """Sets the http_redirect of this URLInfoResponse.

        True if this URL responded with an HTTP redirect

        :param http_redirect: The http_redirect of this URLInfoResponse.
        :type http_redirect: bool
        """
        if http_redirect is None:
            raise ValueError("Invalid value for `http_redirect`, must not be `None`")

        self._http_redirect = http_redirect

    @property
    def http_status(self):
        """Gets the http_status of this URLInfoResponse.

        The HTTP status code this URL responded with. An HTTP status of 0 indicates a network level issue

        :return: The http_status of this URLInfoResponse.
        :rtype: int
        """
        return self._http_status

    @http_status.setter
    def http_status(self, http_status):
        """Sets the http_status of this URLInfoResponse.

        The HTTP status code this URL responded with. An HTTP status of 0 indicates a network level issue

        :param http_status: The http_status of this URLInfoResponse.
        :type http_status: int
        """
        if http_status is None:
            raise ValueError("Invalid value for `http_status`, must not be `None`")

        self._http_status = http_status

    @property
    def http_status_message(self):
        """Gets the http_status_message of this URLInfoResponse.

        The HTTP status message assoicated with the status code

        :return: The http_status_message of this URLInfoResponse.
        :rtype: int
        """
        return self._http_status_message

    @http_status_message.setter
    def http_status_message(self, http_status_message):
        """Sets the http_status_message of this URLInfoResponse.

        The HTTP status message assoicated with the status code

        :param http_status_message: The http_status_message of this URLInfoResponse.
        :type http_status_message: int
        """
        if http_status_message is None:
            raise ValueError("Invalid value for `http_status_message`, must not be `None`")

        self._http_status_message = http_status_message

    @property
    def is_error(self):
        """Gets the is_error of this URLInfoResponse.

        True if an error occurred while loading the URL. This includes network errors, TLS errors and timeouts

        :return: The is_error of this URLInfoResponse.
        :rtype: bool
        """
        return self._is_error

    @is_error.setter
    def is_error(self, is_error):
        """Sets the is_error of this URLInfoResponse.

        True if an error occurred while loading the URL. This includes network errors, TLS errors and timeouts

        :param is_error: The is_error of this URLInfoResponse.
        :type is_error: bool
        """
        if is_error is None:
            raise ValueError("Invalid value for `is_error`, must not be `None`")

        self._is_error = is_error

    @property
    def is_timeout(self):
        """Gets the is_timeout of this URLInfoResponse.

        True if a timeout occurred while loading the URL. You can set the timeout with the request parameter 'timeout'

        :return: The is_timeout of this URLInfoResponse.
        :rtype: bool
        """
        return self._is_timeout

    @is_timeout.setter
    def is_timeout(self, is_timeout):
        """Sets the is_timeout of this URLInfoResponse.

        True if a timeout occurred while loading the URL. You can set the timeout with the request parameter 'timeout'

        :param is_timeout: The is_timeout of this URLInfoResponse.
        :type is_timeout: bool
        """
        if is_timeout is None:
            raise ValueError("Invalid value for `is_timeout`, must not be `None`")

        self._is_timeout = is_timeout

    @property
    def language_code(self):
        """Gets the language_code of this URLInfoResponse.

        The ISO 2-letter language code of the page. Extracted from either the HTML document or via HTTP headers

        :return: The language_code of this URLInfoResponse.
        :rtype: str
        """
        return self._language_code

    @language_code.setter
    def language_code(self, language_code):
        """Sets the language_code of this URLInfoResponse.

        The ISO 2-letter language code of the page. Extracted from either the HTML document or via HTTP headers

        :param language_code: The language_code of this URLInfoResponse.
        :type language_code: str
        """
        if language_code is None:
            raise ValueError("Invalid value for `language_code`, must not be `None`")

        self._language_code = language_code

    @property
    def load_time(self):
        """Gets the load_time of this URLInfoResponse.

        The time taken to load the URL content in seconds

        :return: The load_time of this URLInfoResponse.
        :rtype: float
        """
        return self._load_time

    @load_time.setter
    def load_time(self, load_time):
        """Sets the load_time of this URLInfoResponse.

        The time taken to load the URL content in seconds

        :param load_time: The load_time of this URLInfoResponse.
        :type load_time: float
        """
        if load_time is None:
            raise ValueError("Invalid value for `load_time`, must not be `None`")

        self._load_time = load_time

    @property
    def query(self):
        """Gets the query of this URLInfoResponse.

        A key-value map of the URL query paramaters

        :return: The query of this URLInfoResponse.
        :rtype: Dict[str, str]
        """
        return self._query

    @query.setter
    def query(self, query):
        """Sets the query of this URLInfoResponse.

        A key-value map of the URL query paramaters

        :param query: The query of this URLInfoResponse.
        :type query: Dict[str, str]
        """
        if query is None:
            raise ValueError("Invalid value for `query`, must not be `None`")

        self._query = query

    @property
    def real(self):
        """Gets the real of this URLInfoResponse.

        Is this URL actually serving real content

        :return: The real of this URLInfoResponse.
        :rtype: bool
        """
        return self._real

    @real.setter
    def real(self, real):
        """Sets the real of this URLInfoResponse.

        Is this URL actually serving real content

        :param real: The real of this URLInfoResponse.
        :type real: bool
        """
        if real is None:
            raise ValueError("Invalid value for `real`, must not be `None`")

        self._real = real

    @property
    def server_city(self):
        """Gets the server_city of this URLInfoResponse.

        The servers IP geo-location: full city name (if detectable)

        :return: The server_city of this URLInfoResponse.
        :rtype: str
        """
        return self._server_city

    @server_city.setter
    def server_city(self, server_city):
        """Sets the server_city of this URLInfoResponse.

        The servers IP geo-location: full city name (if detectable)

        :param server_city: The server_city of this URLInfoResponse.
        :type server_city: str
        """
        if server_city is None:
            raise ValueError("Invalid value for `server_city`, must not be `None`")

        self._server_city = server_city

    @property
    def server_country(self):
        """Gets the server_country of this URLInfoResponse.

        The servers IP geo-location: full country name

        :return: The server_country of this URLInfoResponse.
        :rtype: str
        """
        return self._server_country

    @server_country.setter
    def server_country(self, server_country):
        """Sets the server_country of this URLInfoResponse.

        The servers IP geo-location: full country name

        :param server_country: The server_country of this URLInfoResponse.
        :type server_country: str
        """
        if server_country is None:
            raise ValueError("Invalid value for `server_country`, must not be `None`")

        self._server_country = server_country

    @property
    def server_country_code(self):
        """Gets the server_country_code of this URLInfoResponse.

        The servers IP geo-location: ISO 2-letter country code

        :return: The server_country_code of this URLInfoResponse.
        :rtype: str
        """
        return self._server_country_code

    @server_country_code.setter
    def server_country_code(self, server_country_code):
        """Sets the server_country_code of this URLInfoResponse.

        The servers IP geo-location: ISO 2-letter country code

        :param server_country_code: The server_country_code of this URLInfoResponse.
        :type server_country_code: str
        """
        if server_country_code is None:
            raise ValueError("Invalid value for `server_country_code`, must not be `None`")

        self._server_country_code = server_country_code

    @property
    def server_hostname(self):
        """Gets the server_hostname of this URLInfoResponse.

        The servers hostname (PTR record)

        :return: The server_hostname of this URLInfoResponse.
        :rtype: str
        """
        return self._server_hostname

    @server_hostname.setter
    def server_hostname(self, server_hostname):
        """Sets the server_hostname of this URLInfoResponse.

        The servers hostname (PTR record)

        :param server_hostname: The server_hostname of this URLInfoResponse.
        :type server_hostname: str
        """
        if server_hostname is None:
            raise ValueError("Invalid value for `server_hostname`, must not be `None`")

        self._server_hostname = server_hostname

    @property
    def server_ip(self):
        """Gets the server_ip of this URLInfoResponse.

        The IP address of the server hosting this URL

        :return: The server_ip of this URLInfoResponse.
        :rtype: str
        """
        return self._server_ip

    @server_ip.setter
    def server_ip(self, server_ip):
        """Sets the server_ip of this URLInfoResponse.

        The IP address of the server hosting this URL

        :param server_ip: The server_ip of this URLInfoResponse.
        :type server_ip: str
        """
        if server_ip is None:
            raise ValueError("Invalid value for `server_ip`, must not be `None`")

        self._server_ip = server_ip

    @property
    def server_name(self):
        """Gets the server_name of this URLInfoResponse.

        The name of the server software hosting this URL

        :return: The server_name of this URLInfoResponse.
        :rtype: str
        """
        return self._server_name

    @server_name.setter
    def server_name(self, server_name):
        """Sets the server_name of this URLInfoResponse.

        The name of the server software hosting this URL

        :param server_name: The server_name of this URLInfoResponse.
        :type server_name: str
        """
        if server_name is None:
            raise ValueError("Invalid value for `server_name`, must not be `None`")

        self._server_name = server_name

    @property
    def server_region(self):
        """Gets the server_region of this URLInfoResponse.

        The servers IP geo-location: full region name (if detectable)

        :return: The server_region of this URLInfoResponse.
        :rtype: str
        """
        return self._server_region

    @server_region.setter
    def server_region(self, server_region):
        """Sets the server_region of this URLInfoResponse.

        The servers IP geo-location: full region name (if detectable)

        :param server_region: The server_region of this URLInfoResponse.
        :type server_region: str
        """
        if server_region is None:
            raise ValueError("Invalid value for `server_region`, must not be `None`")

        self._server_region = server_region

    @property
    def title(self):
        """Gets the title of this URLInfoResponse.

        The document title

        :return: The title of this URLInfoResponse.
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this URLInfoResponse.

        The document title

        :param title: The title of this URLInfoResponse.
        :type title: str
        """
        if title is None:
            raise ValueError("Invalid value for `title`, must not be `None`")

        self._title = title

    @property
    def url(self):
        """Gets the url of this URLInfoResponse.

        The fully qualified URL. This may be different to the URL requested if http-redirect is true

        :return: The url of this URLInfoResponse.
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url):
        """Sets the url of this URLInfoResponse.

        The fully qualified URL. This may be different to the URL requested if http-redirect is true

        :param url: The url of this URLInfoResponse.
        :type url: str
        """
        if url is None:
            raise ValueError("Invalid value for `url`, must not be `None`")

        self._url = url

    @property
    def url_path(self):
        """Gets the url_path of this URLInfoResponse.

        The URL path

        :return: The url_path of this URLInfoResponse.
        :rtype: str
        """
        return self._url_path

    @url_path.setter
    def url_path(self, url_path):
        """Sets the url_path of this URLInfoResponse.

        The URL path

        :param url_path: The url_path of this URLInfoResponse.
        :type url_path: str
        """
        if url_path is None:
            raise ValueError("Invalid value for `url_path`, must not be `None`")

        self._url_path = url_path

    @property
    def url_port(self):
        """Gets the url_port of this URLInfoResponse.

        The URL port

        :return: The url_port of this URLInfoResponse.
        :rtype: int
        """
        return self._url_port

    @url_port.setter
    def url_port(self, url_port):
        """Sets the url_port of this URLInfoResponse.

        The URL port

        :param url_port: The url_port of this URLInfoResponse.
        :type url_port: int
        """
        if url_port is None:
            raise ValueError("Invalid value for `url_port`, must not be `None`")

        self._url_port = url_port

    @property
    def url_protocol(self):
        """Gets the url_protocol of this URLInfoResponse.

        The URL protocol, usually http or https

        :return: The url_protocol of this URLInfoResponse.
        :rtype: str
        """
        return self._url_protocol

    @url_protocol.setter
    def url_protocol(self, url_protocol):
        """Sets the url_protocol of this URLInfoResponse.

        The URL protocol, usually http or https

        :param url_protocol: The url_protocol of this URLInfoResponse.
        :type url_protocol: str
        """
        if url_protocol is None:
            raise ValueError("Invalid value for `url_protocol`, must not be `None`")

        self._url_protocol = url_protocol

    @property
    def valid(self):
        """Gets the valid of this URLInfoResponse.

        Is this a valid well-formed URL

        :return: The valid of this URLInfoResponse.
        :rtype: bool
        """
        return self._valid

    @valid.setter
    def valid(self, valid):
        """Sets the valid of this URLInfoResponse.

        Is this a valid well-formed URL

        :param valid: The valid of this URLInfoResponse.
        :type valid: bool
        """
        if valid is None:
            raise ValueError("Invalid value for `valid`, must not be `None`")

        self._valid = valid
