# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.timezone import Timezone
from openapi_server import util


class IPInfoResponse(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, city: str=None, continent_code: str=None, country: str=None, country_code: str=None, country_code3: str=None, currency_code: str=None, host_domain: str=None, hostname: str=None, ip: str=None, is_bogon: bool=None, is_v4_mapped: bool=None, is_v6: bool=None, latitude: float=None, longitude: float=None, region: str=None, region_code: str=None, timezone: Timezone=None, valid: bool=None):
        """IPInfoResponse - a model defined in OpenAPI

        :param city: The city of this IPInfoResponse.
        :param continent_code: The continent_code of this IPInfoResponse.
        :param country: The country of this IPInfoResponse.
        :param country_code: The country_code of this IPInfoResponse.
        :param country_code3: The country_code3 of this IPInfoResponse.
        :param currency_code: The currency_code of this IPInfoResponse.
        :param host_domain: The host_domain of this IPInfoResponse.
        :param hostname: The hostname of this IPInfoResponse.
        :param ip: The ip of this IPInfoResponse.
        :param is_bogon: The is_bogon of this IPInfoResponse.
        :param is_v4_mapped: The is_v4_mapped of this IPInfoResponse.
        :param is_v6: The is_v6 of this IPInfoResponse.
        :param latitude: The latitude of this IPInfoResponse.
        :param longitude: The longitude of this IPInfoResponse.
        :param region: The region of this IPInfoResponse.
        :param region_code: The region_code of this IPInfoResponse.
        :param timezone: The timezone of this IPInfoResponse.
        :param valid: The valid of this IPInfoResponse.
        """
        self.openapi_types = {
            'city': str,
            'continent_code': str,
            'country': str,
            'country_code': str,
            'country_code3': str,
            'currency_code': str,
            'host_domain': str,
            'hostname': str,
            'ip': str,
            'is_bogon': bool,
            'is_v4_mapped': bool,
            'is_v6': bool,
            'latitude': float,
            'longitude': float,
            'region': str,
            'region_code': str,
            'timezone': Timezone,
            'valid': bool
        }

        self.attribute_map = {
            'city': 'city',
            'continent_code': 'continent-code',
            'country': 'country',
            'country_code': 'country-code',
            'country_code3': 'country-code3',
            'currency_code': 'currency-code',
            'host_domain': 'host-domain',
            'hostname': 'hostname',
            'ip': 'ip',
            'is_bogon': 'is-bogon',
            'is_v4_mapped': 'is-v4-mapped',
            'is_v6': 'is-v6',
            'latitude': 'latitude',
            'longitude': 'longitude',
            'region': 'region',
            'region_code': 'region-code',
            'timezone': 'timezone',
            'valid': 'valid'
        }

        self._city = city
        self._continent_code = continent_code
        self._country = country
        self._country_code = country_code
        self._country_code3 = country_code3
        self._currency_code = currency_code
        self._host_domain = host_domain
        self._hostname = hostname
        self._ip = ip
        self._is_bogon = is_bogon
        self._is_v4_mapped = is_v4_mapped
        self._is_v6 = is_v6
        self._latitude = latitude
        self._longitude = longitude
        self._region = region
        self._region_code = region_code
        self._timezone = timezone
        self._valid = valid

    @classmethod
    def from_dict(cls, dikt: dict) -> 'IPInfoResponse':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The IPInfoResponse of this IPInfoResponse.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def city(self):
        """Gets the city of this IPInfoResponse.

        Name of the city (if detectable)

        :return: The city of this IPInfoResponse.
        :rtype: str
        """
        return self._city

    @city.setter
    def city(self, city):
        """Sets the city of this IPInfoResponse.

        Name of the city (if detectable)

        :param city: The city of this IPInfoResponse.
        :type city: str
        """
        if city is None:
            raise ValueError("Invalid value for `city`, must not be `None`")

        self._city = city

    @property
    def continent_code(self):
        """Gets the continent_code of this IPInfoResponse.

        ISO 2-letter continent code

        :return: The continent_code of this IPInfoResponse.
        :rtype: str
        """
        return self._continent_code

    @continent_code.setter
    def continent_code(self, continent_code):
        """Sets the continent_code of this IPInfoResponse.

        ISO 2-letter continent code

        :param continent_code: The continent_code of this IPInfoResponse.
        :type continent_code: str
        """
        if continent_code is None:
            raise ValueError("Invalid value for `continent_code`, must not be `None`")

        self._continent_code = continent_code

    @property
    def country(self):
        """Gets the country of this IPInfoResponse.

        Full country name

        :return: The country of this IPInfoResponse.
        :rtype: str
        """
        return self._country

    @country.setter
    def country(self, country):
        """Sets the country of this IPInfoResponse.

        Full country name

        :param country: The country of this IPInfoResponse.
        :type country: str
        """
        if country is None:
            raise ValueError("Invalid value for `country`, must not be `None`")

        self._country = country

    @property
    def country_code(self):
        """Gets the country_code of this IPInfoResponse.

        ISO 2-letter country code

        :return: The country_code of this IPInfoResponse.
        :rtype: str
        """
        return self._country_code

    @country_code.setter
    def country_code(self, country_code):
        """Sets the country_code of this IPInfoResponse.

        ISO 2-letter country code

        :param country_code: The country_code of this IPInfoResponse.
        :type country_code: str
        """
        if country_code is None:
            raise ValueError("Invalid value for `country_code`, must not be `None`")

        self._country_code = country_code

    @property
    def country_code3(self):
        """Gets the country_code3 of this IPInfoResponse.

        ISO 3-letter country code

        :return: The country_code3 of this IPInfoResponse.
        :rtype: str
        """
        return self._country_code3

    @country_code3.setter
    def country_code3(self, country_code3):
        """Sets the country_code3 of this IPInfoResponse.

        ISO 3-letter country code

        :param country_code3: The country_code3 of this IPInfoResponse.
        :type country_code3: str
        """
        if country_code3 is None:
            raise ValueError("Invalid value for `country_code3`, must not be `None`")

        self._country_code3 = country_code3

    @property
    def currency_code(self):
        """Gets the currency_code of this IPInfoResponse.

        ISO 4217 currency code associated with the country

        :return: The currency_code of this IPInfoResponse.
        :rtype: str
        """
        return self._currency_code

    @currency_code.setter
    def currency_code(self, currency_code):
        """Sets the currency_code of this IPInfoResponse.

        ISO 4217 currency code associated with the country

        :param currency_code: The currency_code of this IPInfoResponse.
        :type currency_code: str
        """
        if currency_code is None:
            raise ValueError("Invalid value for `currency_code`, must not be `None`")

        self._currency_code = currency_code

    @property
    def host_domain(self):
        """Gets the host_domain of this IPInfoResponse.

        The IPs host domain (only set if reverse-lookup has been used)

        :return: The host_domain of this IPInfoResponse.
        :rtype: str
        """
        return self._host_domain

    @host_domain.setter
    def host_domain(self, host_domain):
        """Sets the host_domain of this IPInfoResponse.

        The IPs host domain (only set if reverse-lookup has been used)

        :param host_domain: The host_domain of this IPInfoResponse.
        :type host_domain: str
        """
        if host_domain is None:
            raise ValueError("Invalid value for `host_domain`, must not be `None`")

        self._host_domain = host_domain

    @property
    def hostname(self):
        """Gets the hostname of this IPInfoResponse.

        The IPs full hostname (only set if reverse-lookup has been used)

        :return: The hostname of this IPInfoResponse.
        :rtype: str
        """
        return self._hostname

    @hostname.setter
    def hostname(self, hostname):
        """Sets the hostname of this IPInfoResponse.

        The IPs full hostname (only set if reverse-lookup has been used)

        :param hostname: The hostname of this IPInfoResponse.
        :type hostname: str
        """
        if hostname is None:
            raise ValueError("Invalid value for `hostname`, must not be `None`")

        self._hostname = hostname

    @property
    def ip(self):
        """Gets the ip of this IPInfoResponse.

        The IP address

        :return: The ip of this IPInfoResponse.
        :rtype: str
        """
        return self._ip

    @ip.setter
    def ip(self, ip):
        """Sets the ip of this IPInfoResponse.

        The IP address

        :param ip: The ip of this IPInfoResponse.
        :type ip: str
        """
        if ip is None:
            raise ValueError("Invalid value for `ip`, must not be `None`")

        self._ip = ip

    @property
    def is_bogon(self):
        """Gets the is_bogon of this IPInfoResponse.

        True if this is a bogon IP address such as a private network, local network or reserved address

        :return: The is_bogon of this IPInfoResponse.
        :rtype: bool
        """
        return self._is_bogon

    @is_bogon.setter
    def is_bogon(self, is_bogon):
        """Sets the is_bogon of this IPInfoResponse.

        True if this is a bogon IP address such as a private network, local network or reserved address

        :param is_bogon: The is_bogon of this IPInfoResponse.
        :type is_bogon: bool
        """
        if is_bogon is None:
            raise ValueError("Invalid value for `is_bogon`, must not be `None`")

        self._is_bogon = is_bogon

    @property
    def is_v4_mapped(self):
        """Gets the is_v4_mapped of this IPInfoResponse.

        True if this is a <a href=\"https://en.wikipedia.org/wiki/IPv6#IPv4-mapped_IPv6_addresses\">IPv4 mapped IPv6 address</a>

        :return: The is_v4_mapped of this IPInfoResponse.
        :rtype: bool
        """
        return self._is_v4_mapped

    @is_v4_mapped.setter
    def is_v4_mapped(self, is_v4_mapped):
        """Sets the is_v4_mapped of this IPInfoResponse.

        True if this is a <a href=\"https://en.wikipedia.org/wiki/IPv6#IPv4-mapped_IPv6_addresses\">IPv4 mapped IPv6 address</a>

        :param is_v4_mapped: The is_v4_mapped of this IPInfoResponse.
        :type is_v4_mapped: bool
        """
        if is_v4_mapped is None:
            raise ValueError("Invalid value for `is_v4_mapped`, must not be `None`")

        self._is_v4_mapped = is_v4_mapped

    @property
    def is_v6(self):
        """Gets the is_v6 of this IPInfoResponse.

        True if this is a IPv6 address. False if IPv4

        :return: The is_v6 of this IPInfoResponse.
        :rtype: bool
        """
        return self._is_v6

    @is_v6.setter
    def is_v6(self, is_v6):
        """Sets the is_v6 of this IPInfoResponse.

        True if this is a IPv6 address. False if IPv4

        :param is_v6: The is_v6 of this IPInfoResponse.
        :type is_v6: bool
        """
        if is_v6 is None:
            raise ValueError("Invalid value for `is_v6`, must not be `None`")

        self._is_v6 = is_v6

    @property
    def latitude(self):
        """Gets the latitude of this IPInfoResponse.

        Location latitude

        :return: The latitude of this IPInfoResponse.
        :rtype: float
        """
        return self._latitude

    @latitude.setter
    def latitude(self, latitude):
        """Sets the latitude of this IPInfoResponse.

        Location latitude

        :param latitude: The latitude of this IPInfoResponse.
        :type latitude: float
        """
        if latitude is None:
            raise ValueError("Invalid value for `latitude`, must not be `None`")

        self._latitude = latitude

    @property
    def longitude(self):
        """Gets the longitude of this IPInfoResponse.

        Location longitude

        :return: The longitude of this IPInfoResponse.
        :rtype: float
        """
        return self._longitude

    @longitude.setter
    def longitude(self, longitude):
        """Sets the longitude of this IPInfoResponse.

        Location longitude

        :param longitude: The longitude of this IPInfoResponse.
        :type longitude: float
        """
        if longitude is None:
            raise ValueError("Invalid value for `longitude`, must not be `None`")

        self._longitude = longitude

    @property
    def region(self):
        """Gets the region of this IPInfoResponse.

        Name of the region (if detectable)

        :return: The region of this IPInfoResponse.
        :rtype: str
        """
        return self._region

    @region.setter
    def region(self, region):
        """Sets the region of this IPInfoResponse.

        Name of the region (if detectable)

        :param region: The region of this IPInfoResponse.
        :type region: str
        """
        if region is None:
            raise ValueError("Invalid value for `region`, must not be `None`")

        self._region = region

    @property
    def region_code(self):
        """Gets the region_code of this IPInfoResponse.

        ISO 3166-2 region code (if detectable)

        :return: The region_code of this IPInfoResponse.
        :rtype: str
        """
        return self._region_code

    @region_code.setter
    def region_code(self, region_code):
        """Sets the region_code of this IPInfoResponse.

        ISO 3166-2 region code (if detectable)

        :param region_code: The region_code of this IPInfoResponse.
        :type region_code: str
        """
        if region_code is None:
            raise ValueError("Invalid value for `region_code`, must not be `None`")

        self._region_code = region_code

    @property
    def timezone(self):
        """Gets the timezone of this IPInfoResponse.


        :return: The timezone of this IPInfoResponse.
        :rtype: Timezone
        """
        return self._timezone

    @timezone.setter
    def timezone(self, timezone):
        """Sets the timezone of this IPInfoResponse.


        :param timezone: The timezone of this IPInfoResponse.
        :type timezone: Timezone
        """
        if timezone is None:
            raise ValueError("Invalid value for `timezone`, must not be `None`")

        self._timezone = timezone

    @property
    def valid(self):
        """Gets the valid of this IPInfoResponse.

        True if this is a valid IPv4 or IPv6 address

        :return: The valid of this IPInfoResponse.
        :rtype: bool
        """
        return self._valid

    @valid.setter
    def valid(self, valid):
        """Sets the valid of this IPInfoResponse.

        True if this is a valid IPv4 or IPv6 address

        :param valid: The valid of this IPInfoResponse.
        :type valid: bool
        """
        if valid is None:
            raise ValueError("Invalid value for `valid`, must not be `None`")

        self._valid = valid
