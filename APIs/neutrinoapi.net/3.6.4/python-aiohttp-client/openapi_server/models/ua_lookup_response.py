# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class UALookupResponse(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, browser_engine: str=None, browser_release: str=None, device_brand: str=None, device_height_px: float=None, device_model: str=None, device_model_code: str=None, device_pixel_ratio: float=None, device_ppi: float=None, device_price: float=None, device_release: str=None, device_resolution: str=None, device_width_px: float=None, is_mobile: bool=None, is_webview: bool=None, name: str=None, os: str=None, os_family: str=None, os_version: str=None, os_version_major: str=None, type: str=None, ua: str=None, version: str=None, version_major: str=None):
        """UALookupResponse - a model defined in OpenAPI

        :param browser_engine: The browser_engine of this UALookupResponse.
        :param browser_release: The browser_release of this UALookupResponse.
        :param device_brand: The device_brand of this UALookupResponse.
        :param device_height_px: The device_height_px of this UALookupResponse.
        :param device_model: The device_model of this UALookupResponse.
        :param device_model_code: The device_model_code of this UALookupResponse.
        :param device_pixel_ratio: The device_pixel_ratio of this UALookupResponse.
        :param device_ppi: The device_ppi of this UALookupResponse.
        :param device_price: The device_price of this UALookupResponse.
        :param device_release: The device_release of this UALookupResponse.
        :param device_resolution: The device_resolution of this UALookupResponse.
        :param device_width_px: The device_width_px of this UALookupResponse.
        :param is_mobile: The is_mobile of this UALookupResponse.
        :param is_webview: The is_webview of this UALookupResponse.
        :param name: The name of this UALookupResponse.
        :param os: The os of this UALookupResponse.
        :param os_family: The os_family of this UALookupResponse.
        :param os_version: The os_version of this UALookupResponse.
        :param os_version_major: The os_version_major of this UALookupResponse.
        :param type: The type of this UALookupResponse.
        :param ua: The ua of this UALookupResponse.
        :param version: The version of this UALookupResponse.
        :param version_major: The version_major of this UALookupResponse.
        """
        self.openapi_types = {
            'browser_engine': str,
            'browser_release': str,
            'device_brand': str,
            'device_height_px': float,
            'device_model': str,
            'device_model_code': str,
            'device_pixel_ratio': float,
            'device_ppi': float,
            'device_price': float,
            'device_release': str,
            'device_resolution': str,
            'device_width_px': float,
            'is_mobile': bool,
            'is_webview': bool,
            'name': str,
            'os': str,
            'os_family': str,
            'os_version': str,
            'os_version_major': str,
            'type': str,
            'ua': str,
            'version': str,
            'version_major': str
        }

        self.attribute_map = {
            'browser_engine': 'browser-engine',
            'browser_release': 'browser-release',
            'device_brand': 'device-brand',
            'device_height_px': 'device-height-px',
            'device_model': 'device-model',
            'device_model_code': 'device-model-code',
            'device_pixel_ratio': 'device-pixel-ratio',
            'device_ppi': 'device-ppi',
            'device_price': 'device-price',
            'device_release': 'device-release',
            'device_resolution': 'device-resolution',
            'device_width_px': 'device-width-px',
            'is_mobile': 'is-mobile',
            'is_webview': 'is-webview',
            'name': 'name',
            'os': 'os',
            'os_family': 'os-family',
            'os_version': 'os-version',
            'os_version_major': 'os-version-major',
            'type': 'type',
            'ua': 'ua',
            'version': 'version',
            'version_major': 'version-major'
        }

        self._browser_engine = browser_engine
        self._browser_release = browser_release
        self._device_brand = device_brand
        self._device_height_px = device_height_px
        self._device_model = device_model
        self._device_model_code = device_model_code
        self._device_pixel_ratio = device_pixel_ratio
        self._device_ppi = device_ppi
        self._device_price = device_price
        self._device_release = device_release
        self._device_resolution = device_resolution
        self._device_width_px = device_width_px
        self._is_mobile = is_mobile
        self._is_webview = is_webview
        self._name = name
        self._os = os
        self._os_family = os_family
        self._os_version = os_version
        self._os_version_major = os_version_major
        self._type = type
        self._ua = ua
        self._version = version
        self._version_major = version_major

    @classmethod
    def from_dict(cls, dikt: dict) -> 'UALookupResponse':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The UALookupResponse of this UALookupResponse.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def browser_engine(self):
        """Gets the browser_engine of this UALookupResponse.

        If the client is a web browser which underlying browser engine does it use

        :return: The browser_engine of this UALookupResponse.
        :rtype: str
        """
        return self._browser_engine

    @browser_engine.setter
    def browser_engine(self, browser_engine):
        """Sets the browser_engine of this UALookupResponse.

        If the client is a web browser which underlying browser engine does it use

        :param browser_engine: The browser_engine of this UALookupResponse.
        :type browser_engine: str
        """
        if browser_engine is None:
            raise ValueError("Invalid value for `browser_engine`, must not be `None`")

        self._browser_engine = browser_engine

    @property
    def browser_release(self):
        """Gets the browser_release of this UALookupResponse.

        If the client is a web browser which year was this browser version released

        :return: The browser_release of this UALookupResponse.
        :rtype: str
        """
        return self._browser_release

    @browser_release.setter
    def browser_release(self, browser_release):
        """Sets the browser_release of this UALookupResponse.

        If the client is a web browser which year was this browser version released

        :param browser_release: The browser_release of this UALookupResponse.
        :type browser_release: str
        """
        if browser_release is None:
            raise ValueError("Invalid value for `browser_release`, must not be `None`")

        self._browser_release = browser_release

    @property
    def device_brand(self):
        """Gets the device_brand of this UALookupResponse.

        The device brand / manufacturer

        :return: The device_brand of this UALookupResponse.
        :rtype: str
        """
        return self._device_brand

    @device_brand.setter
    def device_brand(self, device_brand):
        """Sets the device_brand of this UALookupResponse.

        The device brand / manufacturer

        :param device_brand: The device_brand of this UALookupResponse.
        :type device_brand: str
        """
        if device_brand is None:
            raise ValueError("Invalid value for `device_brand`, must not be `None`")

        self._device_brand = device_brand

    @property
    def device_height_px(self):
        """Gets the device_height_px of this UALookupResponse.

        The device display height in CSS 'px'

        :return: The device_height_px of this UALookupResponse.
        :rtype: float
        """
        return self._device_height_px

    @device_height_px.setter
    def device_height_px(self, device_height_px):
        """Sets the device_height_px of this UALookupResponse.

        The device display height in CSS 'px'

        :param device_height_px: The device_height_px of this UALookupResponse.
        :type device_height_px: float
        """
        if device_height_px is None:
            raise ValueError("Invalid value for `device_height_px`, must not be `None`")

        self._device_height_px = device_height_px

    @property
    def device_model(self):
        """Gets the device_model of this UALookupResponse.

        The device model

        :return: The device_model of this UALookupResponse.
        :rtype: str
        """
        return self._device_model

    @device_model.setter
    def device_model(self, device_model):
        """Sets the device_model of this UALookupResponse.

        The device model

        :param device_model: The device_model of this UALookupResponse.
        :type device_model: str
        """
        if device_model is None:
            raise ValueError("Invalid value for `device_model`, must not be `None`")

        self._device_model = device_model

    @property
    def device_model_code(self):
        """Gets the device_model_code of this UALookupResponse.

        The device model code

        :return: The device_model_code of this UALookupResponse.
        :rtype: str
        """
        return self._device_model_code

    @device_model_code.setter
    def device_model_code(self, device_model_code):
        """Sets the device_model_code of this UALookupResponse.

        The device model code

        :param device_model_code: The device_model_code of this UALookupResponse.
        :type device_model_code: str
        """
        if device_model_code is None:
            raise ValueError("Invalid value for `device_model_code`, must not be `None`")

        self._device_model_code = device_model_code

    @property
    def device_pixel_ratio(self):
        """Gets the device_pixel_ratio of this UALookupResponse.

        The device display pixel ratio (the ratio of the resolution in physical pixels to the resolution in CSS pixels)

        :return: The device_pixel_ratio of this UALookupResponse.
        :rtype: float
        """
        return self._device_pixel_ratio

    @device_pixel_ratio.setter
    def device_pixel_ratio(self, device_pixel_ratio):
        """Sets the device_pixel_ratio of this UALookupResponse.

        The device display pixel ratio (the ratio of the resolution in physical pixels to the resolution in CSS pixels)

        :param device_pixel_ratio: The device_pixel_ratio of this UALookupResponse.
        :type device_pixel_ratio: float
        """
        if device_pixel_ratio is None:
            raise ValueError("Invalid value for `device_pixel_ratio`, must not be `None`")

        self._device_pixel_ratio = device_pixel_ratio

    @property
    def device_ppi(self):
        """Gets the device_ppi of this UALookupResponse.

        The device display PPI (pixels per inch)

        :return: The device_ppi of this UALookupResponse.
        :rtype: float
        """
        return self._device_ppi

    @device_ppi.setter
    def device_ppi(self, device_ppi):
        """Sets the device_ppi of this UALookupResponse.

        The device display PPI (pixels per inch)

        :param device_ppi: The device_ppi of this UALookupResponse.
        :type device_ppi: float
        """
        if device_ppi is None:
            raise ValueError("Invalid value for `device_ppi`, must not be `None`")

        self._device_ppi = device_ppi

    @property
    def device_price(self):
        """Gets the device_price of this UALookupResponse.

        The average device price on release in USD

        :return: The device_price of this UALookupResponse.
        :rtype: float
        """
        return self._device_price

    @device_price.setter
    def device_price(self, device_price):
        """Sets the device_price of this UALookupResponse.

        The average device price on release in USD

        :param device_price: The device_price of this UALookupResponse.
        :type device_price: float
        """
        if device_price is None:
            raise ValueError("Invalid value for `device_price`, must not be `None`")

        self._device_price = device_price

    @property
    def device_release(self):
        """Gets the device_release of this UALookupResponse.

        The year when this device model was released

        :return: The device_release of this UALookupResponse.
        :rtype: str
        """
        return self._device_release

    @device_release.setter
    def device_release(self, device_release):
        """Sets the device_release of this UALookupResponse.

        The year when this device model was released

        :param device_release: The device_release of this UALookupResponse.
        :type device_release: str
        """
        if device_release is None:
            raise ValueError("Invalid value for `device_release`, must not be `None`")

        self._device_release = device_release

    @property
    def device_resolution(self):
        """Gets the device_resolution of this UALookupResponse.

        The device display resolution in physical pixels (e.g. 720x1280)

        :return: The device_resolution of this UALookupResponse.
        :rtype: str
        """
        return self._device_resolution

    @device_resolution.setter
    def device_resolution(self, device_resolution):
        """Sets the device_resolution of this UALookupResponse.

        The device display resolution in physical pixels (e.g. 720x1280)

        :param device_resolution: The device_resolution of this UALookupResponse.
        :type device_resolution: str
        """
        if device_resolution is None:
            raise ValueError("Invalid value for `device_resolution`, must not be `None`")

        self._device_resolution = device_resolution

    @property
    def device_width_px(self):
        """Gets the device_width_px of this UALookupResponse.

        The device display width in CSS 'px'

        :return: The device_width_px of this UALookupResponse.
        :rtype: float
        """
        return self._device_width_px

    @device_width_px.setter
    def device_width_px(self, device_width_px):
        """Sets the device_width_px of this UALookupResponse.

        The device display width in CSS 'px'

        :param device_width_px: The device_width_px of this UALookupResponse.
        :type device_width_px: float
        """
        if device_width_px is None:
            raise ValueError("Invalid value for `device_width_px`, must not be `None`")

        self._device_width_px = device_width_px

    @property
    def is_mobile(self):
        """Gets the is_mobile of this UALookupResponse.

        Is this a mobile device (e.g. a phone or tablet)

        :return: The is_mobile of this UALookupResponse.
        :rtype: bool
        """
        return self._is_mobile

    @is_mobile.setter
    def is_mobile(self, is_mobile):
        """Sets the is_mobile of this UALookupResponse.

        Is this a mobile device (e.g. a phone or tablet)

        :param is_mobile: The is_mobile of this UALookupResponse.
        :type is_mobile: bool
        """
        if is_mobile is None:
            raise ValueError("Invalid value for `is_mobile`, must not be `None`")

        self._is_mobile = is_mobile

    @property
    def is_webview(self):
        """Gets the is_webview of this UALookupResponse.

        Is this a WebView / embedded software client

        :return: The is_webview of this UALookupResponse.
        :rtype: bool
        """
        return self._is_webview

    @is_webview.setter
    def is_webview(self, is_webview):
        """Sets the is_webview of this UALookupResponse.

        Is this a WebView / embedded software client

        :param is_webview: The is_webview of this UALookupResponse.
        :type is_webview: bool
        """
        if is_webview is None:
            raise ValueError("Invalid value for `is_webview`, must not be `None`")

        self._is_webview = is_webview

    @property
    def name(self):
        """Gets the name of this UALookupResponse.

        The client software name

        :return: The name of this UALookupResponse.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this UALookupResponse.

        The client software name

        :param name: The name of this UALookupResponse.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name

    @property
    def os(self):
        """Gets the os of this UALookupResponse.

        The full operating system name

        :return: The os of this UALookupResponse.
        :rtype: str
        """
        return self._os

    @os.setter
    def os(self, os):
        """Sets the os of this UALookupResponse.

        The full operating system name

        :param os: The os of this UALookupResponse.
        :type os: str
        """
        if os is None:
            raise ValueError("Invalid value for `os`, must not be `None`")

        self._os = os

    @property
    def os_family(self):
        """Gets the os_family of this UALookupResponse.

        The operating system family. The major OS families are: Android, Windows, macOS, iOS, Linux

        :return: The os_family of this UALookupResponse.
        :rtype: str
        """
        return self._os_family

    @os_family.setter
    def os_family(self, os_family):
        """Sets the os_family of this UALookupResponse.

        The operating system family. The major OS families are: Android, Windows, macOS, iOS, Linux

        :param os_family: The os_family of this UALookupResponse.
        :type os_family: str
        """
        if os_family is None:
            raise ValueError("Invalid value for `os_family`, must not be `None`")

        self._os_family = os_family

    @property
    def os_version(self):
        """Gets the os_version of this UALookupResponse.

        The operating system full version

        :return: The os_version of this UALookupResponse.
        :rtype: str
        """
        return self._os_version

    @os_version.setter
    def os_version(self, os_version):
        """Sets the os_version of this UALookupResponse.

        The operating system full version

        :param os_version: The os_version of this UALookupResponse.
        :type os_version: str
        """
        if os_version is None:
            raise ValueError("Invalid value for `os_version`, must not be `None`")

        self._os_version = os_version

    @property
    def os_version_major(self):
        """Gets the os_version_major of this UALookupResponse.

        The operating system major version

        :return: The os_version_major of this UALookupResponse.
        :rtype: str
        """
        return self._os_version_major

    @os_version_major.setter
    def os_version_major(self, os_version_major):
        """Sets the os_version_major of this UALookupResponse.

        The operating system major version

        :param os_version_major: The os_version_major of this UALookupResponse.
        :type os_version_major: str
        """
        if os_version_major is None:
            raise ValueError("Invalid value for `os_version_major`, must not be `None`")

        self._os_version_major = os_version_major

    @property
    def type(self):
        """Gets the type of this UALookupResponse.

        The user agent type, possible values are: <br> <ul> <li>desktop</li> <li>phone</li> <li>tablet</li> <li>wearable</li> <li>tv</li> <li>console</li> <li>email</li> <li>library</li> <li>robot</li> <li>unknown</li> </ul>

        :return: The type of this UALookupResponse.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this UALookupResponse.

        The user agent type, possible values are: <br> <ul> <li>desktop</li> <li>phone</li> <li>tablet</li> <li>wearable</li> <li>tv</li> <li>console</li> <li>email</li> <li>library</li> <li>robot</li> <li>unknown</li> </ul>

        :param type: The type of this UALookupResponse.
        :type type: str
        """
        if type is None:
            raise ValueError("Invalid value for `type`, must not be `None`")

        self._type = type

    @property
    def ua(self):
        """Gets the ua of this UALookupResponse.

        The user agent string

        :return: The ua of this UALookupResponse.
        :rtype: str
        """
        return self._ua

    @ua.setter
    def ua(self, ua):
        """Sets the ua of this UALookupResponse.

        The user agent string

        :param ua: The ua of this UALookupResponse.
        :type ua: str
        """
        if ua is None:
            raise ValueError("Invalid value for `ua`, must not be `None`")

        self._ua = ua

    @property
    def version(self):
        """Gets the version of this UALookupResponse.

        The client software full version

        :return: The version of this UALookupResponse.
        :rtype: str
        """
        return self._version

    @version.setter
    def version(self, version):
        """Sets the version of this UALookupResponse.

        The client software full version

        :param version: The version of this UALookupResponse.
        :type version: str
        """
        if version is None:
            raise ValueError("Invalid value for `version`, must not be `None`")

        self._version = version

    @property
    def version_major(self):
        """Gets the version_major of this UALookupResponse.

        The client software major version

        :return: The version_major of this UALookupResponse.
        :rtype: str
        """
        return self._version_major

    @version_major.setter
    def version_major(self, version_major):
        """Sets the version_major of this UALookupResponse.

        The client software major version

        :param version_major: The version_major of this UALookupResponse.
        :type version_major: str
        """
        if version_major is None:
            raise ValueError("Invalid value for `version_major`, must not be `None`")

        self._version_major = version_major
