# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class IPProbeResponse(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, as_age: int=None, as_cidr: str=None, as_country_code: str=None, as_country_code3: str=None, as_description: str=None, as_domains: List[str]=None, asn: str=None, city: str=None, continent_code: str=None, country: str=None, country_code: str=None, country_code3: str=None, currency_code: str=None, host_domain: str=None, hostname: str=None, ip: str=None, is_bogon: bool=None, is_hosting: bool=None, is_isp: bool=None, is_proxy: bool=None, is_v4_mapped: bool=None, is_v6: bool=None, is_vpn: bool=None, provider_description: str=None, provider_domain: str=None, provider_type: str=None, provider_website: str=None, region: str=None, region_code: str=None, valid: bool=None, vpn_domain: str=None):
        """IPProbeResponse - a model defined in OpenAPI

        :param as_age: The as_age of this IPProbeResponse.
        :param as_cidr: The as_cidr of this IPProbeResponse.
        :param as_country_code: The as_country_code of this IPProbeResponse.
        :param as_country_code3: The as_country_code3 of this IPProbeResponse.
        :param as_description: The as_description of this IPProbeResponse.
        :param as_domains: The as_domains of this IPProbeResponse.
        :param asn: The asn of this IPProbeResponse.
        :param city: The city of this IPProbeResponse.
        :param continent_code: The continent_code of this IPProbeResponse.
        :param country: The country of this IPProbeResponse.
        :param country_code: The country_code of this IPProbeResponse.
        :param country_code3: The country_code3 of this IPProbeResponse.
        :param currency_code: The currency_code of this IPProbeResponse.
        :param host_domain: The host_domain of this IPProbeResponse.
        :param hostname: The hostname of this IPProbeResponse.
        :param ip: The ip of this IPProbeResponse.
        :param is_bogon: The is_bogon of this IPProbeResponse.
        :param is_hosting: The is_hosting of this IPProbeResponse.
        :param is_isp: The is_isp of this IPProbeResponse.
        :param is_proxy: The is_proxy of this IPProbeResponse.
        :param is_v4_mapped: The is_v4_mapped of this IPProbeResponse.
        :param is_v6: The is_v6 of this IPProbeResponse.
        :param is_vpn: The is_vpn of this IPProbeResponse.
        :param provider_description: The provider_description of this IPProbeResponse.
        :param provider_domain: The provider_domain of this IPProbeResponse.
        :param provider_type: The provider_type of this IPProbeResponse.
        :param provider_website: The provider_website of this IPProbeResponse.
        :param region: The region of this IPProbeResponse.
        :param region_code: The region_code of this IPProbeResponse.
        :param valid: The valid of this IPProbeResponse.
        :param vpn_domain: The vpn_domain of this IPProbeResponse.
        """
        self.openapi_types = {
            'as_age': int,
            'as_cidr': str,
            'as_country_code': str,
            'as_country_code3': str,
            'as_description': str,
            'as_domains': List[str],
            'asn': str,
            'city': str,
            'continent_code': str,
            'country': str,
            'country_code': str,
            'country_code3': str,
            'currency_code': str,
            'host_domain': str,
            'hostname': str,
            'ip': str,
            'is_bogon': bool,
            'is_hosting': bool,
            'is_isp': bool,
            'is_proxy': bool,
            'is_v4_mapped': bool,
            'is_v6': bool,
            'is_vpn': bool,
            'provider_description': str,
            'provider_domain': str,
            'provider_type': str,
            'provider_website': str,
            'region': str,
            'region_code': str,
            'valid': bool,
            'vpn_domain': str
        }

        self.attribute_map = {
            'as_age': 'as-age',
            'as_cidr': 'as-cidr',
            'as_country_code': 'as-country-code',
            'as_country_code3': 'as-country-code3',
            'as_description': 'as-description',
            'as_domains': 'as-domains',
            'asn': 'asn',
            'city': 'city',
            'continent_code': 'continent-code',
            'country': 'country',
            'country_code': 'country-code',
            'country_code3': 'country-code3',
            'currency_code': 'currency-code',
            'host_domain': 'host-domain',
            'hostname': 'hostname',
            'ip': 'ip',
            'is_bogon': 'is-bogon',
            'is_hosting': 'is-hosting',
            'is_isp': 'is-isp',
            'is_proxy': 'is-proxy',
            'is_v4_mapped': 'is-v4-mapped',
            'is_v6': 'is-v6',
            'is_vpn': 'is-vpn',
            'provider_description': 'provider-description',
            'provider_domain': 'provider-domain',
            'provider_type': 'provider-type',
            'provider_website': 'provider-website',
            'region': 'region',
            'region_code': 'region-code',
            'valid': 'valid',
            'vpn_domain': 'vpn-domain'
        }

        self._as_age = as_age
        self._as_cidr = as_cidr
        self._as_country_code = as_country_code
        self._as_country_code3 = as_country_code3
        self._as_description = as_description
        self._as_domains = as_domains
        self._asn = asn
        self._city = city
        self._continent_code = continent_code
        self._country = country
        self._country_code = country_code
        self._country_code3 = country_code3
        self._currency_code = currency_code
        self._host_domain = host_domain
        self._hostname = hostname
        self._ip = ip
        self._is_bogon = is_bogon
        self._is_hosting = is_hosting
        self._is_isp = is_isp
        self._is_proxy = is_proxy
        self._is_v4_mapped = is_v4_mapped
        self._is_v6 = is_v6
        self._is_vpn = is_vpn
        self._provider_description = provider_description
        self._provider_domain = provider_domain
        self._provider_type = provider_type
        self._provider_website = provider_website
        self._region = region
        self._region_code = region_code
        self._valid = valid
        self._vpn_domain = vpn_domain

    @classmethod
    def from_dict(cls, dikt: dict) -> 'IPProbeResponse':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The IPProbeResponse of this IPProbeResponse.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def as_age(self):
        """Gets the as_age of this IPProbeResponse.

        The age of the autonomous system (AS) in number of years since registration

        :return: The as_age of this IPProbeResponse.
        :rtype: int
        """
        return self._as_age

    @as_age.setter
    def as_age(self, as_age):
        """Sets the as_age of this IPProbeResponse.

        The age of the autonomous system (AS) in number of years since registration

        :param as_age: The as_age of this IPProbeResponse.
        :type as_age: int
        """
        if as_age is None:
            raise ValueError("Invalid value for `as_age`, must not be `None`")

        self._as_age = as_age

    @property
    def as_cidr(self):
        """Gets the as_cidr of this IPProbeResponse.

        The autonomous system (AS) CIDR range

        :return: The as_cidr of this IPProbeResponse.
        :rtype: str
        """
        return self._as_cidr

    @as_cidr.setter
    def as_cidr(self, as_cidr):
        """Sets the as_cidr of this IPProbeResponse.

        The autonomous system (AS) CIDR range

        :param as_cidr: The as_cidr of this IPProbeResponse.
        :type as_cidr: str
        """
        if as_cidr is None:
            raise ValueError("Invalid value for `as_cidr`, must not be `None`")

        self._as_cidr = as_cidr

    @property
    def as_country_code(self):
        """Gets the as_country_code of this IPProbeResponse.

        The autonomous system (AS) ISO 2-letter country code

        :return: The as_country_code of this IPProbeResponse.
        :rtype: str
        """
        return self._as_country_code

    @as_country_code.setter
    def as_country_code(self, as_country_code):
        """Sets the as_country_code of this IPProbeResponse.

        The autonomous system (AS) ISO 2-letter country code

        :param as_country_code: The as_country_code of this IPProbeResponse.
        :type as_country_code: str
        """
        if as_country_code is None:
            raise ValueError("Invalid value for `as_country_code`, must not be `None`")

        self._as_country_code = as_country_code

    @property
    def as_country_code3(self):
        """Gets the as_country_code3 of this IPProbeResponse.

        The autonomous system (AS) ISO 3-letter country code

        :return: The as_country_code3 of this IPProbeResponse.
        :rtype: str
        """
        return self._as_country_code3

    @as_country_code3.setter
    def as_country_code3(self, as_country_code3):
        """Sets the as_country_code3 of this IPProbeResponse.

        The autonomous system (AS) ISO 3-letter country code

        :param as_country_code3: The as_country_code3 of this IPProbeResponse.
        :type as_country_code3: str
        """
        if as_country_code3 is None:
            raise ValueError("Invalid value for `as_country_code3`, must not be `None`")

        self._as_country_code3 = as_country_code3

    @property
    def as_description(self):
        """Gets the as_description of this IPProbeResponse.

        The autonomous system (AS) description / company name

        :return: The as_description of this IPProbeResponse.
        :rtype: str
        """
        return self._as_description

    @as_description.setter
    def as_description(self, as_description):
        """Sets the as_description of this IPProbeResponse.

        The autonomous system (AS) description / company name

        :param as_description: The as_description of this IPProbeResponse.
        :type as_description: str
        """
        if as_description is None:
            raise ValueError("Invalid value for `as_description`, must not be `None`")

        self._as_description = as_description

    @property
    def as_domains(self):
        """Gets the as_domains of this IPProbeResponse.

        Array of all the domains associated with the autonomous system (AS)

        :return: The as_domains of this IPProbeResponse.
        :rtype: List[str]
        """
        return self._as_domains

    @as_domains.setter
    def as_domains(self, as_domains):
        """Sets the as_domains of this IPProbeResponse.

        Array of all the domains associated with the autonomous system (AS)

        :param as_domains: The as_domains of this IPProbeResponse.
        :type as_domains: List[str]
        """
        if as_domains is None:
            raise ValueError("Invalid value for `as_domains`, must not be `None`")

        self._as_domains = as_domains

    @property
    def asn(self):
        """Gets the asn of this IPProbeResponse.

        The autonomous system (AS) number

        :return: The asn of this IPProbeResponse.
        :rtype: str
        """
        return self._asn

    @asn.setter
    def asn(self, asn):
        """Sets the asn of this IPProbeResponse.

        The autonomous system (AS) number

        :param asn: The asn of this IPProbeResponse.
        :type asn: str
        """
        if asn is None:
            raise ValueError("Invalid value for `asn`, must not be `None`")

        self._asn = asn

    @property
    def city(self):
        """Gets the city of this IPProbeResponse.

        Full city name (if detectable)

        :return: The city of this IPProbeResponse.
        :rtype: str
        """
        return self._city

    @city.setter
    def city(self, city):
        """Sets the city of this IPProbeResponse.

        Full city name (if detectable)

        :param city: The city of this IPProbeResponse.
        :type city: str
        """
        if city is None:
            raise ValueError("Invalid value for `city`, must not be `None`")

        self._city = city

    @property
    def continent_code(self):
        """Gets the continent_code of this IPProbeResponse.

        ISO 2-letter continent code

        :return: The continent_code of this IPProbeResponse.
        :rtype: str
        """
        return self._continent_code

    @continent_code.setter
    def continent_code(self, continent_code):
        """Sets the continent_code of this IPProbeResponse.

        ISO 2-letter continent code

        :param continent_code: The continent_code of this IPProbeResponse.
        :type continent_code: str
        """
        if continent_code is None:
            raise ValueError("Invalid value for `continent_code`, must not be `None`")

        self._continent_code = continent_code

    @property
    def country(self):
        """Gets the country of this IPProbeResponse.

        Full country name

        :return: The country of this IPProbeResponse.
        :rtype: str
        """
        return self._country

    @country.setter
    def country(self, country):
        """Sets the country of this IPProbeResponse.

        Full country name

        :param country: The country of this IPProbeResponse.
        :type country: str
        """
        if country is None:
            raise ValueError("Invalid value for `country`, must not be `None`")

        self._country = country

    @property
    def country_code(self):
        """Gets the country_code of this IPProbeResponse.

        ISO 2-letter country code

        :return: The country_code of this IPProbeResponse.
        :rtype: str
        """
        return self._country_code

    @country_code.setter
    def country_code(self, country_code):
        """Sets the country_code of this IPProbeResponse.

        ISO 2-letter country code

        :param country_code: The country_code of this IPProbeResponse.
        :type country_code: str
        """
        if country_code is None:
            raise ValueError("Invalid value for `country_code`, must not be `None`")

        self._country_code = country_code

    @property
    def country_code3(self):
        """Gets the country_code3 of this IPProbeResponse.

        ISO 3-letter country code

        :return: The country_code3 of this IPProbeResponse.
        :rtype: str
        """
        return self._country_code3

    @country_code3.setter
    def country_code3(self, country_code3):
        """Sets the country_code3 of this IPProbeResponse.

        ISO 3-letter country code

        :param country_code3: The country_code3 of this IPProbeResponse.
        :type country_code3: str
        """
        if country_code3 is None:
            raise ValueError("Invalid value for `country_code3`, must not be `None`")

        self._country_code3 = country_code3

    @property
    def currency_code(self):
        """Gets the currency_code of this IPProbeResponse.

        ISO 4217 currency code associated with the country

        :return: The currency_code of this IPProbeResponse.
        :rtype: str
        """
        return self._currency_code

    @currency_code.setter
    def currency_code(self, currency_code):
        """Sets the currency_code of this IPProbeResponse.

        ISO 4217 currency code associated with the country

        :param currency_code: The currency_code of this IPProbeResponse.
        :type currency_code: str
        """
        if currency_code is None:
            raise ValueError("Invalid value for `currency_code`, must not be `None`")

        self._currency_code = currency_code

    @property
    def host_domain(self):
        """Gets the host_domain of this IPProbeResponse.

        The IPs host domain

        :return: The host_domain of this IPProbeResponse.
        :rtype: str
        """
        return self._host_domain

    @host_domain.setter
    def host_domain(self, host_domain):
        """Sets the host_domain of this IPProbeResponse.

        The IPs host domain

        :param host_domain: The host_domain of this IPProbeResponse.
        :type host_domain: str
        """
        if host_domain is None:
            raise ValueError("Invalid value for `host_domain`, must not be `None`")

        self._host_domain = host_domain

    @property
    def hostname(self):
        """Gets the hostname of this IPProbeResponse.

        The IPs full hostname (PTR)

        :return: The hostname of this IPProbeResponse.
        :rtype: str
        """
        return self._hostname

    @hostname.setter
    def hostname(self, hostname):
        """Sets the hostname of this IPProbeResponse.

        The IPs full hostname (PTR)

        :param hostname: The hostname of this IPProbeResponse.
        :type hostname: str
        """
        if hostname is None:
            raise ValueError("Invalid value for `hostname`, must not be `None`")

        self._hostname = hostname

    @property
    def ip(self):
        """Gets the ip of this IPProbeResponse.

        The IP address

        :return: The ip of this IPProbeResponse.
        :rtype: str
        """
        return self._ip

    @ip.setter
    def ip(self, ip):
        """Sets the ip of this IPProbeResponse.

        The IP address

        :param ip: The ip of this IPProbeResponse.
        :type ip: str
        """
        if ip is None:
            raise ValueError("Invalid value for `ip`, must not be `None`")

        self._ip = ip

    @property
    def is_bogon(self):
        """Gets the is_bogon of this IPProbeResponse.

        True if this is a bogon IP address such as a private network, local network or reserved address

        :return: The is_bogon of this IPProbeResponse.
        :rtype: bool
        """
        return self._is_bogon

    @is_bogon.setter
    def is_bogon(self, is_bogon):
        """Sets the is_bogon of this IPProbeResponse.

        True if this is a bogon IP address such as a private network, local network or reserved address

        :param is_bogon: The is_bogon of this IPProbeResponse.
        :type is_bogon: bool
        """
        if is_bogon is None:
            raise ValueError("Invalid value for `is_bogon`, must not be `None`")

        self._is_bogon = is_bogon

    @property
    def is_hosting(self):
        """Gets the is_hosting of this IPProbeResponse.

        True if this IP belongs to a hosting company. Note that this can still be true even if the provider type is VPN/proxy, this occurs in the case that the IP is detected as both types

        :return: The is_hosting of this IPProbeResponse.
        :rtype: bool
        """
        return self._is_hosting

    @is_hosting.setter
    def is_hosting(self, is_hosting):
        """Sets the is_hosting of this IPProbeResponse.

        True if this IP belongs to a hosting company. Note that this can still be true even if the provider type is VPN/proxy, this occurs in the case that the IP is detected as both types

        :param is_hosting: The is_hosting of this IPProbeResponse.
        :type is_hosting: bool
        """
        if is_hosting is None:
            raise ValueError("Invalid value for `is_hosting`, must not be `None`")

        self._is_hosting = is_hosting

    @property
    def is_isp(self):
        """Gets the is_isp of this IPProbeResponse.

        True if this IP belongs to an internet service provider. Note that this can still be true even if the provider type is VPN/proxy, this occurs in the case that the IP is detected as both types

        :return: The is_isp of this IPProbeResponse.
        :rtype: bool
        """
        return self._is_isp

    @is_isp.setter
    def is_isp(self, is_isp):
        """Sets the is_isp of this IPProbeResponse.

        True if this IP belongs to an internet service provider. Note that this can still be true even if the provider type is VPN/proxy, this occurs in the case that the IP is detected as both types

        :param is_isp: The is_isp of this IPProbeResponse.
        :type is_isp: bool
        """
        if is_isp is None:
            raise ValueError("Invalid value for `is_isp`, must not be `None`")

        self._is_isp = is_isp

    @property
    def is_proxy(self):
        """Gets the is_proxy of this IPProbeResponse.

        True if this IP ia a proxy

        :return: The is_proxy of this IPProbeResponse.
        :rtype: bool
        """
        return self._is_proxy

    @is_proxy.setter
    def is_proxy(self, is_proxy):
        """Sets the is_proxy of this IPProbeResponse.

        True if this IP ia a proxy

        :param is_proxy: The is_proxy of this IPProbeResponse.
        :type is_proxy: bool
        """
        if is_proxy is None:
            raise ValueError("Invalid value for `is_proxy`, must not be `None`")

        self._is_proxy = is_proxy

    @property
    def is_v4_mapped(self):
        """Gets the is_v4_mapped of this IPProbeResponse.

        True if this is a <a href=\"https://en.wikipedia.org/wiki/IPv6#IPv4-mapped_IPv6_addresses\">IPv4 mapped IPv6 address</a>

        :return: The is_v4_mapped of this IPProbeResponse.
        :rtype: bool
        """
        return self._is_v4_mapped

    @is_v4_mapped.setter
    def is_v4_mapped(self, is_v4_mapped):
        """Sets the is_v4_mapped of this IPProbeResponse.

        True if this is a <a href=\"https://en.wikipedia.org/wiki/IPv6#IPv4-mapped_IPv6_addresses\">IPv4 mapped IPv6 address</a>

        :param is_v4_mapped: The is_v4_mapped of this IPProbeResponse.
        :type is_v4_mapped: bool
        """
        if is_v4_mapped is None:
            raise ValueError("Invalid value for `is_v4_mapped`, must not be `None`")

        self._is_v4_mapped = is_v4_mapped

    @property
    def is_v6(self):
        """Gets the is_v6 of this IPProbeResponse.

        True if this is a IPv6 address. False if IPv4

        :return: The is_v6 of this IPProbeResponse.
        :rtype: bool
        """
        return self._is_v6

    @is_v6.setter
    def is_v6(self, is_v6):
        """Sets the is_v6 of this IPProbeResponse.

        True if this is a IPv6 address. False if IPv4

        :param is_v6: The is_v6 of this IPProbeResponse.
        :type is_v6: bool
        """
        if is_v6 is None:
            raise ValueError("Invalid value for `is_v6`, must not be `None`")

        self._is_v6 = is_v6

    @property
    def is_vpn(self):
        """Gets the is_vpn of this IPProbeResponse.

        True if this IP ia a VPN

        :return: The is_vpn of this IPProbeResponse.
        :rtype: bool
        """
        return self._is_vpn

    @is_vpn.setter
    def is_vpn(self, is_vpn):
        """Sets the is_vpn of this IPProbeResponse.

        True if this IP ia a VPN

        :param is_vpn: The is_vpn of this IPProbeResponse.
        :type is_vpn: bool
        """
        if is_vpn is None:
            raise ValueError("Invalid value for `is_vpn`, must not be `None`")

        self._is_vpn = is_vpn

    @property
    def provider_description(self):
        """Gets the provider_description of this IPProbeResponse.

        A description of the provider (usually extracted from the providers website)

        :return: The provider_description of this IPProbeResponse.
        :rtype: str
        """
        return self._provider_description

    @provider_description.setter
    def provider_description(self, provider_description):
        """Sets the provider_description of this IPProbeResponse.

        A description of the provider (usually extracted from the providers website)

        :param provider_description: The provider_description of this IPProbeResponse.
        :type provider_description: str
        """
        if provider_description is None:
            raise ValueError("Invalid value for `provider_description`, must not be `None`")

        self._provider_description = provider_description

    @property
    def provider_domain(self):
        """Gets the provider_domain of this IPProbeResponse.

        The domain name of the provider

        :return: The provider_domain of this IPProbeResponse.
        :rtype: str
        """
        return self._provider_domain

    @provider_domain.setter
    def provider_domain(self, provider_domain):
        """Sets the provider_domain of this IPProbeResponse.

        The domain name of the provider

        :param provider_domain: The provider_domain of this IPProbeResponse.
        :type provider_domain: str
        """
        if provider_domain is None:
            raise ValueError("Invalid value for `provider_domain`, must not be `None`")

        self._provider_domain = provider_domain

    @property
    def provider_type(self):
        """Gets the provider_type of this IPProbeResponse.

        The detected provider type, possible values are: <br> <ul> <li>isp - IP belongs to an internet service provider. This includes both mobile, home and business internet providers</li> <li>hosting - IP belongs to a hosting company. This includes website hosting, cloud computing platforms and colocation facilities</li> <li>vpn - IP belongs to a VPN provider</li> <li>proxy - IP belongs to a proxy service. This includes HTTP/SOCKS proxies and browser based proxies</li> <li>university - IP belongs to a university/college/campus</li> <li>government - IP belongs to a government department. This includes military facilities</li> <li>commercial - IP belongs to a commercial entity such as a corporate headquarters or company office</li> <li>unknown - could not identify the provider type</li> </ul>

        :return: The provider_type of this IPProbeResponse.
        :rtype: str
        """
        return self._provider_type

    @provider_type.setter
    def provider_type(self, provider_type):
        """Sets the provider_type of this IPProbeResponse.

        The detected provider type, possible values are: <br> <ul> <li>isp - IP belongs to an internet service provider. This includes both mobile, home and business internet providers</li> <li>hosting - IP belongs to a hosting company. This includes website hosting, cloud computing platforms and colocation facilities</li> <li>vpn - IP belongs to a VPN provider</li> <li>proxy - IP belongs to a proxy service. This includes HTTP/SOCKS proxies and browser based proxies</li> <li>university - IP belongs to a university/college/campus</li> <li>government - IP belongs to a government department. This includes military facilities</li> <li>commercial - IP belongs to a commercial entity such as a corporate headquarters or company office</li> <li>unknown - could not identify the provider type</li> </ul>

        :param provider_type: The provider_type of this IPProbeResponse.
        :type provider_type: str
        """
        if provider_type is None:
            raise ValueError("Invalid value for `provider_type`, must not be `None`")

        self._provider_type = provider_type

    @property
    def provider_website(self):
        """Gets the provider_website of this IPProbeResponse.

        The website URL for the provider

        :return: The provider_website of this IPProbeResponse.
        :rtype: str
        """
        return self._provider_website

    @provider_website.setter
    def provider_website(self, provider_website):
        """Sets the provider_website of this IPProbeResponse.

        The website URL for the provider

        :param provider_website: The provider_website of this IPProbeResponse.
        :type provider_website: str
        """
        if provider_website is None:
            raise ValueError("Invalid value for `provider_website`, must not be `None`")

        self._provider_website = provider_website

    @property
    def region(self):
        """Gets the region of this IPProbeResponse.

        Full region name (if detectable)

        :return: The region of this IPProbeResponse.
        :rtype: str
        """
        return self._region

    @region.setter
    def region(self, region):
        """Sets the region of this IPProbeResponse.

        Full region name (if detectable)

        :param region: The region of this IPProbeResponse.
        :type region: str
        """
        if region is None:
            raise ValueError("Invalid value for `region`, must not be `None`")

        self._region = region

    @property
    def region_code(self):
        """Gets the region_code of this IPProbeResponse.

        ISO 3166-2 region code (if detectable)

        :return: The region_code of this IPProbeResponse.
        :rtype: str
        """
        return self._region_code

    @region_code.setter
    def region_code(self, region_code):
        """Sets the region_code of this IPProbeResponse.

        ISO 3166-2 region code (if detectable)

        :param region_code: The region_code of this IPProbeResponse.
        :type region_code: str
        """
        if region_code is None:
            raise ValueError("Invalid value for `region_code`, must not be `None`")

        self._region_code = region_code

    @property
    def valid(self):
        """Gets the valid of this IPProbeResponse.

        True if this is a valid IPv4 or IPv6 address

        :return: The valid of this IPProbeResponse.
        :rtype: bool
        """
        return self._valid

    @valid.setter
    def valid(self, valid):
        """Sets the valid of this IPProbeResponse.

        True if this is a valid IPv4 or IPv6 address

        :param valid: The valid of this IPProbeResponse.
        :type valid: bool
        """
        if valid is None:
            raise ValueError("Invalid value for `valid`, must not be `None`")

        self._valid = valid

    @property
    def vpn_domain(self):
        """Gets the vpn_domain of this IPProbeResponse.

        The domain of the VPN provider (may be empty if the VPN domain is not detectable)

        :return: The vpn_domain of this IPProbeResponse.
        :rtype: str
        """
        return self._vpn_domain

    @vpn_domain.setter
    def vpn_domain(self, vpn_domain):
        """Sets the vpn_domain of this IPProbeResponse.

        The domain of the VPN provider (may be empty if the VPN domain is not detectable)

        :param vpn_domain: The vpn_domain of this IPProbeResponse.
        :type vpn_domain: str
        """
        if vpn_domain is None:
            raise ValueError("Invalid value for `vpn_domain`, must not be `None`")

        self._vpn_domain = vpn_domain
