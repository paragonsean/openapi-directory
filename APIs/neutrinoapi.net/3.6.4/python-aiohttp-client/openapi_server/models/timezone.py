# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class Timezone(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, abbr: str=None, _date: str=None, id: str=None, name: str=None, offset: str=None, time: str=None):
        """Timezone - a model defined in OpenAPI

        :param abbr: The abbr of this Timezone.
        :param _date: The _date of this Timezone.
        :param id: The id of this Timezone.
        :param name: The name of this Timezone.
        :param offset: The offset of this Timezone.
        :param time: The time of this Timezone.
        """
        self.openapi_types = {
            'abbr': str,
            '_date': str,
            'id': str,
            'name': str,
            'offset': str,
            'time': str
        }

        self.attribute_map = {
            'abbr': 'abbr',
            '_date': 'date',
            'id': 'id',
            'name': 'name',
            'offset': 'offset',
            'time': 'time'
        }

        self._abbr = abbr
        self.__date = _date
        self._id = id
        self._name = name
        self._offset = offset
        self._time = time

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Timezone':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Timezone of this Timezone.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def abbr(self):
        """Gets the abbr of this Timezone.

        The time zone abbreviation

        :return: The abbr of this Timezone.
        :rtype: str
        """
        return self._abbr

    @abbr.setter
    def abbr(self, abbr):
        """Sets the abbr of this Timezone.

        The time zone abbreviation

        :param abbr: The abbr of this Timezone.
        :type abbr: str
        """
        if abbr is None:
            raise ValueError("Invalid value for `abbr`, must not be `None`")

        self._abbr = abbr

    @property
    def _date(self):
        """Gets the _date of this Timezone.

        The current date at the time zone (ISO 8601 format 'YYYY-MM-DD')

        :return: The _date of this Timezone.
        :rtype: str
        """
        return self.__date

    @_date.setter
    def _date(self, _date):
        """Sets the _date of this Timezone.

        The current date at the time zone (ISO 8601 format 'YYYY-MM-DD')

        :param _date: The _date of this Timezone.
        :type _date: str
        """
        if _date is None:
            raise ValueError("Invalid value for `_date`, must not be `None`")

        self.__date = _date

    @property
    def id(self):
        """Gets the id of this Timezone.

        The time zone ID as per the IANA time zone database (tzdata)

        :return: The id of this Timezone.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Timezone.

        The time zone ID as per the IANA time zone database (tzdata)

        :param id: The id of this Timezone.
        :type id: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")

        self._id = id

    @property
    def name(self):
        """Gets the name of this Timezone.

        The full time zone name

        :return: The name of this Timezone.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Timezone.

        The full time zone name

        :param name: The name of this Timezone.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name

    @property
    def offset(self):
        """Gets the offset of this Timezone.

        The UTC offset for the time zone (ISO 8601 format '±hh:mm')

        :return: The offset of this Timezone.
        :rtype: str
        """
        return self._offset

    @offset.setter
    def offset(self, offset):
        """Sets the offset of this Timezone.

        The UTC offset for the time zone (ISO 8601 format '±hh:mm')

        :param offset: The offset of this Timezone.
        :type offset: str
        """
        if offset is None:
            raise ValueError("Invalid value for `offset`, must not be `None`")

        self._offset = offset

    @property
    def time(self):
        """Gets the time of this Timezone.

        The current time at the time zone (ISO 8601 format 'hh:mm:ss.sss')

        :return: The time of this Timezone.
        :rtype: str
        """
        return self._time

    @time.setter
    def time(self, time):
        """Sets the time of this Timezone.

        The current time at the time zone (ISO 8601 format 'hh:mm:ss.sss')

        :param time: The time of this Timezone.
        :type time: str
        """
        if time is None:
            raise ValueError("Invalid value for `time`, must not be `None`")

        self._time = time
