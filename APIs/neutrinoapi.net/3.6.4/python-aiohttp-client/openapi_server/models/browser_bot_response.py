# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class BrowserBotResponse(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, content: str=None, elements: List[str]=None, error_message: str=None, exec_results: List[str]=None, http_redirect_url: str=None, http_status_code: int=None, http_status_message: str=None, is_error: bool=None, is_http_ok: bool=None, is_http_redirect: bool=None, is_secure: bool=None, is_timeout: bool=None, language_code: str=None, load_time: float=None, mime_type: str=None, response_headers: Dict[str, str]=None, security_details: Dict[str, str]=None, server_ip: str=None, title: str=None, url: str=None):
        """BrowserBotResponse - a model defined in OpenAPI

        :param content: The content of this BrowserBotResponse.
        :param elements: The elements of this BrowserBotResponse.
        :param error_message: The error_message of this BrowserBotResponse.
        :param exec_results: The exec_results of this BrowserBotResponse.
        :param http_redirect_url: The http_redirect_url of this BrowserBotResponse.
        :param http_status_code: The http_status_code of this BrowserBotResponse.
        :param http_status_message: The http_status_message of this BrowserBotResponse.
        :param is_error: The is_error of this BrowserBotResponse.
        :param is_http_ok: The is_http_ok of this BrowserBotResponse.
        :param is_http_redirect: The is_http_redirect of this BrowserBotResponse.
        :param is_secure: The is_secure of this BrowserBotResponse.
        :param is_timeout: The is_timeout of this BrowserBotResponse.
        :param language_code: The language_code of this BrowserBotResponse.
        :param load_time: The load_time of this BrowserBotResponse.
        :param mime_type: The mime_type of this BrowserBotResponse.
        :param response_headers: The response_headers of this BrowserBotResponse.
        :param security_details: The security_details of this BrowserBotResponse.
        :param server_ip: The server_ip of this BrowserBotResponse.
        :param title: The title of this BrowserBotResponse.
        :param url: The url of this BrowserBotResponse.
        """
        self.openapi_types = {
            'content': str,
            'elements': List[str],
            'error_message': str,
            'exec_results': List[str],
            'http_redirect_url': str,
            'http_status_code': int,
            'http_status_message': str,
            'is_error': bool,
            'is_http_ok': bool,
            'is_http_redirect': bool,
            'is_secure': bool,
            'is_timeout': bool,
            'language_code': str,
            'load_time': float,
            'mime_type': str,
            'response_headers': Dict[str, str],
            'security_details': Dict[str, str],
            'server_ip': str,
            'title': str,
            'url': str
        }

        self.attribute_map = {
            'content': 'content',
            'elements': 'elements',
            'error_message': 'error-message',
            'exec_results': 'exec-results',
            'http_redirect_url': 'http-redirect-url',
            'http_status_code': 'http-status-code',
            'http_status_message': 'http-status-message',
            'is_error': 'is-error',
            'is_http_ok': 'is-http-ok',
            'is_http_redirect': 'is-http-redirect',
            'is_secure': 'is-secure',
            'is_timeout': 'is-timeout',
            'language_code': 'language-code',
            'load_time': 'load-time',
            'mime_type': 'mime-type',
            'response_headers': 'response-headers',
            'security_details': 'security-details',
            'server_ip': 'server-ip',
            'title': 'title',
            'url': 'url'
        }

        self._content = content
        self._elements = elements
        self._error_message = error_message
        self._exec_results = exec_results
        self._http_redirect_url = http_redirect_url
        self._http_status_code = http_status_code
        self._http_status_message = http_status_message
        self._is_error = is_error
        self._is_http_ok = is_http_ok
        self._is_http_redirect = is_http_redirect
        self._is_secure = is_secure
        self._is_timeout = is_timeout
        self._language_code = language_code
        self._load_time = load_time
        self._mime_type = mime_type
        self._response_headers = response_headers
        self._security_details = security_details
        self._server_ip = server_ip
        self._title = title
        self._url = url

    @classmethod
    def from_dict(cls, dikt: dict) -> 'BrowserBotResponse':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The BrowserBotResponse of this BrowserBotResponse.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def content(self):
        """Gets the content of this BrowserBotResponse.

        The complete raw, decompressed and decoded page content. Usually will be either HTML, JSON or XML

        :return: The content of this BrowserBotResponse.
        :rtype: str
        """
        return self._content

    @content.setter
    def content(self, content):
        """Sets the content of this BrowserBotResponse.

        The complete raw, decompressed and decoded page content. Usually will be either HTML, JSON or XML

        :param content: The content of this BrowserBotResponse.
        :type content: str
        """
        if content is None:
            raise ValueError("Invalid value for `content`, must not be `None`")

        self._content = content

    @property
    def elements(self):
        """Gets the elements of this BrowserBotResponse.

        Array containing all the elements matching the supplied selector. <br>Each element object will contain the text content, HTML content and all current element attributes

        :return: The elements of this BrowserBotResponse.
        :rtype: List[str]
        """
        return self._elements

    @elements.setter
    def elements(self, elements):
        """Sets the elements of this BrowserBotResponse.

        Array containing all the elements matching the supplied selector. <br>Each element object will contain the text content, HTML content and all current element attributes

        :param elements: The elements of this BrowserBotResponse.
        :type elements: List[str]
        """
        if elements is None:
            raise ValueError("Invalid value for `elements`, must not be `None`")

        self._elements = elements

    @property
    def error_message(self):
        """Gets the error_message of this BrowserBotResponse.

        Contains the error message if an error has occurred ('is-error' will be true)

        :return: The error_message of this BrowserBotResponse.
        :rtype: str
        """
        return self._error_message

    @error_message.setter
    def error_message(self, error_message):
        """Sets the error_message of this BrowserBotResponse.

        Contains the error message if an error has occurred ('is-error' will be true)

        :param error_message: The error_message of this BrowserBotResponse.
        :type error_message: str
        """
        if error_message is None:
            raise ValueError("Invalid value for `error_message`, must not be `None`")

        self._error_message = error_message

    @property
    def exec_results(self):
        """Gets the exec_results of this BrowserBotResponse.

        If you executed any JavaScript this array holds the results as objects

        :return: The exec_results of this BrowserBotResponse.
        :rtype: List[str]
        """
        return self._exec_results

    @exec_results.setter
    def exec_results(self, exec_results):
        """Sets the exec_results of this BrowserBotResponse.

        If you executed any JavaScript this array holds the results as objects

        :param exec_results: The exec_results of this BrowserBotResponse.
        :type exec_results: List[str]
        """
        if exec_results is None:
            raise ValueError("Invalid value for `exec_results`, must not be `None`")

        self._exec_results = exec_results

    @property
    def http_redirect_url(self):
        """Gets the http_redirect_url of this BrowserBotResponse.

        The redirected URL if the URL responded with an HTTP redirect

        :return: The http_redirect_url of this BrowserBotResponse.
        :rtype: str
        """
        return self._http_redirect_url

    @http_redirect_url.setter
    def http_redirect_url(self, http_redirect_url):
        """Sets the http_redirect_url of this BrowserBotResponse.

        The redirected URL if the URL responded with an HTTP redirect

        :param http_redirect_url: The http_redirect_url of this BrowserBotResponse.
        :type http_redirect_url: str
        """
        if http_redirect_url is None:
            raise ValueError("Invalid value for `http_redirect_url`, must not be `None`")

        self._http_redirect_url = http_redirect_url

    @property
    def http_status_code(self):
        """Gets the http_status_code of this BrowserBotResponse.

        The HTTP status code the URL returned

        :return: The http_status_code of this BrowserBotResponse.
        :rtype: int
        """
        return self._http_status_code

    @http_status_code.setter
    def http_status_code(self, http_status_code):
        """Sets the http_status_code of this BrowserBotResponse.

        The HTTP status code the URL returned

        :param http_status_code: The http_status_code of this BrowserBotResponse.
        :type http_status_code: int
        """
        if http_status_code is None:
            raise ValueError("Invalid value for `http_status_code`, must not be `None`")

        self._http_status_code = http_status_code

    @property
    def http_status_message(self):
        """Gets the http_status_message of this BrowserBotResponse.

        The HTTP status message the URL returned

        :return: The http_status_message of this BrowserBotResponse.
        :rtype: str
        """
        return self._http_status_message

    @http_status_message.setter
    def http_status_message(self, http_status_message):
        """Sets the http_status_message of this BrowserBotResponse.

        The HTTP status message the URL returned

        :param http_status_message: The http_status_message of this BrowserBotResponse.
        :type http_status_message: str
        """
        if http_status_message is None:
            raise ValueError("Invalid value for `http_status_message`, must not be `None`")

        self._http_status_message = http_status_message

    @property
    def is_error(self):
        """Gets the is_error of this BrowserBotResponse.

        True if an error has occurred loading the page. Check the 'error-message' field for details

        :return: The is_error of this BrowserBotResponse.
        :rtype: bool
        """
        return self._is_error

    @is_error.setter
    def is_error(self, is_error):
        """Sets the is_error of this BrowserBotResponse.

        True if an error has occurred loading the page. Check the 'error-message' field for details

        :param is_error: The is_error of this BrowserBotResponse.
        :type is_error: bool
        """
        if is_error is None:
            raise ValueError("Invalid value for `is_error`, must not be `None`")

        self._is_error = is_error

    @property
    def is_http_ok(self):
        """Gets the is_http_ok of this BrowserBotResponse.

        True if the HTTP status is OK (200)

        :return: The is_http_ok of this BrowserBotResponse.
        :rtype: bool
        """
        return self._is_http_ok

    @is_http_ok.setter
    def is_http_ok(self, is_http_ok):
        """Sets the is_http_ok of this BrowserBotResponse.

        True if the HTTP status is OK (200)

        :param is_http_ok: The is_http_ok of this BrowserBotResponse.
        :type is_http_ok: bool
        """
        if is_http_ok is None:
            raise ValueError("Invalid value for `is_http_ok`, must not be `None`")

        self._is_http_ok = is_http_ok

    @property
    def is_http_redirect(self):
        """Gets the is_http_redirect of this BrowserBotResponse.

        True if the URL responded with an HTTP redirect

        :return: The is_http_redirect of this BrowserBotResponse.
        :rtype: bool
        """
        return self._is_http_redirect

    @is_http_redirect.setter
    def is_http_redirect(self, is_http_redirect):
        """Sets the is_http_redirect of this BrowserBotResponse.

        True if the URL responded with an HTTP redirect

        :param is_http_redirect: The is_http_redirect of this BrowserBotResponse.
        :type is_http_redirect: bool
        """
        if is_http_redirect is None:
            raise ValueError("Invalid value for `is_http_redirect`, must not be `None`")

        self._is_http_redirect = is_http_redirect

    @property
    def is_secure(self):
        """Gets the is_secure of this BrowserBotResponse.

        True if the page is secured using TLS/SSL

        :return: The is_secure of this BrowserBotResponse.
        :rtype: bool
        """
        return self._is_secure

    @is_secure.setter
    def is_secure(self, is_secure):
        """Sets the is_secure of this BrowserBotResponse.

        True if the page is secured using TLS/SSL

        :param is_secure: The is_secure of this BrowserBotResponse.
        :type is_secure: bool
        """
        if is_secure is None:
            raise ValueError("Invalid value for `is_secure`, must not be `None`")

        self._is_secure = is_secure

    @property
    def is_timeout(self):
        """Gets the is_timeout of this BrowserBotResponse.

        True if a timeout occurred while loading the page. You can set the timeout with the request parameter 'timeout'

        :return: The is_timeout of this BrowserBotResponse.
        :rtype: bool
        """
        return self._is_timeout

    @is_timeout.setter
    def is_timeout(self, is_timeout):
        """Sets the is_timeout of this BrowserBotResponse.

        True if a timeout occurred while loading the page. You can set the timeout with the request parameter 'timeout'

        :param is_timeout: The is_timeout of this BrowserBotResponse.
        :type is_timeout: bool
        """
        if is_timeout is None:
            raise ValueError("Invalid value for `is_timeout`, must not be `None`")

        self._is_timeout = is_timeout

    @property
    def language_code(self):
        """Gets the language_code of this BrowserBotResponse.

        The ISO 2-letter language code of the page. Extracted from either the HTML document or via HTTP headers

        :return: The language_code of this BrowserBotResponse.
        :rtype: str
        """
        return self._language_code

    @language_code.setter
    def language_code(self, language_code):
        """Sets the language_code of this BrowserBotResponse.

        The ISO 2-letter language code of the page. Extracted from either the HTML document or via HTTP headers

        :param language_code: The language_code of this BrowserBotResponse.
        :type language_code: str
        """
        if language_code is None:
            raise ValueError("Invalid value for `language_code`, must not be `None`")

        self._language_code = language_code

    @property
    def load_time(self):
        """Gets the load_time of this BrowserBotResponse.

        The number of seconds taken to load the page (from initial request until DOM ready)

        :return: The load_time of this BrowserBotResponse.
        :rtype: float
        """
        return self._load_time

    @load_time.setter
    def load_time(self, load_time):
        """Sets the load_time of this BrowserBotResponse.

        The number of seconds taken to load the page (from initial request until DOM ready)

        :param load_time: The load_time of this BrowserBotResponse.
        :type load_time: float
        """
        if load_time is None:
            raise ValueError("Invalid value for `load_time`, must not be `None`")

        self._load_time = load_time

    @property
    def mime_type(self):
        """Gets the mime_type of this BrowserBotResponse.

        The document MIME type

        :return: The mime_type of this BrowserBotResponse.
        :rtype: str
        """
        return self._mime_type

    @mime_type.setter
    def mime_type(self, mime_type):
        """Sets the mime_type of this BrowserBotResponse.

        The document MIME type

        :param mime_type: The mime_type of this BrowserBotResponse.
        :type mime_type: str
        """
        if mime_type is None:
            raise ValueError("Invalid value for `mime_type`, must not be `None`")

        self._mime_type = mime_type

    @property
    def response_headers(self):
        """Gets the response_headers of this BrowserBotResponse.

        Map containing all the HTTP response headers the URL responded with

        :return: The response_headers of this BrowserBotResponse.
        :rtype: Dict[str, str]
        """
        return self._response_headers

    @response_headers.setter
    def response_headers(self, response_headers):
        """Sets the response_headers of this BrowserBotResponse.

        Map containing all the HTTP response headers the URL responded with

        :param response_headers: The response_headers of this BrowserBotResponse.
        :type response_headers: Dict[str, str]
        """
        if response_headers is None:
            raise ValueError("Invalid value for `response_headers`, must not be `None`")

        self._response_headers = response_headers

    @property
    def security_details(self):
        """Gets the security_details of this BrowserBotResponse.

        Map containing details of the TLS/SSL setup

        :return: The security_details of this BrowserBotResponse.
        :rtype: Dict[str, str]
        """
        return self._security_details

    @security_details.setter
    def security_details(self, security_details):
        """Sets the security_details of this BrowserBotResponse.

        Map containing details of the TLS/SSL setup

        :param security_details: The security_details of this BrowserBotResponse.
        :type security_details: Dict[str, str]
        """
        if security_details is None:
            raise ValueError("Invalid value for `security_details`, must not be `None`")

        self._security_details = security_details

    @property
    def server_ip(self):
        """Gets the server_ip of this BrowserBotResponse.

        The HTTP servers IP address

        :return: The server_ip of this BrowserBotResponse.
        :rtype: str
        """
        return self._server_ip

    @server_ip.setter
    def server_ip(self, server_ip):
        """Sets the server_ip of this BrowserBotResponse.

        The HTTP servers IP address

        :param server_ip: The server_ip of this BrowserBotResponse.
        :type server_ip: str
        """
        if server_ip is None:
            raise ValueError("Invalid value for `server_ip`, must not be `None`")

        self._server_ip = server_ip

    @property
    def title(self):
        """Gets the title of this BrowserBotResponse.

        The document title

        :return: The title of this BrowserBotResponse.
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this BrowserBotResponse.

        The document title

        :param title: The title of this BrowserBotResponse.
        :type title: str
        """
        if title is None:
            raise ValueError("Invalid value for `title`, must not be `None`")

        self._title = title

    @property
    def url(self):
        """Gets the url of this BrowserBotResponse.

        The page URL

        :return: The url of this BrowserBotResponse.
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url):
        """Sets the url of this BrowserBotResponse.

        The page URL

        :param url: The url of this BrowserBotResponse.
        :type url: str
        """
        if url is None:
            raise ValueError("Invalid value for `url`, must not be `None`")

        self._url = url
