# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.timezone import Timezone
from openapi_server import util


class Location(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, address: str=None, address_components: Dict[str, str]=None, city: str=None, country: str=None, country_code: str=None, country_code3: str=None, currency_code: str=None, latitude: float=None, location_tags: List[str]=None, location_type: str=None, longitude: float=None, postal_address: str=None, postal_code: str=None, region_code: str=None, state: str=None, timezone: Timezone=None):
        """Location - a model defined in OpenAPI

        :param address: The address of this Location.
        :param address_components: The address_components of this Location.
        :param city: The city of this Location.
        :param country: The country of this Location.
        :param country_code: The country_code of this Location.
        :param country_code3: The country_code3 of this Location.
        :param currency_code: The currency_code of this Location.
        :param latitude: The latitude of this Location.
        :param location_tags: The location_tags of this Location.
        :param location_type: The location_type of this Location.
        :param longitude: The longitude of this Location.
        :param postal_address: The postal_address of this Location.
        :param postal_code: The postal_code of this Location.
        :param region_code: The region_code of this Location.
        :param state: The state of this Location.
        :param timezone: The timezone of this Location.
        """
        self.openapi_types = {
            'address': str,
            'address_components': Dict[str, str],
            'city': str,
            'country': str,
            'country_code': str,
            'country_code3': str,
            'currency_code': str,
            'latitude': float,
            'location_tags': List[str],
            'location_type': str,
            'longitude': float,
            'postal_address': str,
            'postal_code': str,
            'region_code': str,
            'state': str,
            'timezone': Timezone
        }

        self.attribute_map = {
            'address': 'address',
            'address_components': 'address-components',
            'city': 'city',
            'country': 'country',
            'country_code': 'country-code',
            'country_code3': 'country-code3',
            'currency_code': 'currency-code',
            'latitude': 'latitude',
            'location_tags': 'location-tags',
            'location_type': 'location-type',
            'longitude': 'longitude',
            'postal_address': 'postal-address',
            'postal_code': 'postal-code',
            'region_code': 'region-code',
            'state': 'state',
            'timezone': 'timezone'
        }

        self._address = address
        self._address_components = address_components
        self._city = city
        self._country = country
        self._country_code = country_code
        self._country_code3 = country_code3
        self._currency_code = currency_code
        self._latitude = latitude
        self._location_tags = location_tags
        self._location_type = location_type
        self._longitude = longitude
        self._postal_address = postal_address
        self._postal_code = postal_code
        self._region_code = region_code
        self._state = state
        self._timezone = timezone

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Location':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Location of this Location.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def address(self):
        """Gets the address of this Location.

        The complete address using comma-separated values

        :return: The address of this Location.
        :rtype: str
        """
        return self._address

    @address.setter
    def address(self, address):
        """Sets the address of this Location.

        The complete address using comma-separated values

        :param address: The address of this Location.
        :type address: str
        """
        if address is None:
            raise ValueError("Invalid value for `address`, must not be `None`")

        self._address = address

    @property
    def address_components(self):
        """Gets the address_components of this Location.

        The components which make up the address such as road, city, state, etc

        :return: The address_components of this Location.
        :rtype: Dict[str, str]
        """
        return self._address_components

    @address_components.setter
    def address_components(self, address_components):
        """Sets the address_components of this Location.

        The components which make up the address such as road, city, state, etc

        :param address_components: The address_components of this Location.
        :type address_components: Dict[str, str]
        """
        if address_components is None:
            raise ValueError("Invalid value for `address_components`, must not be `None`")

        self._address_components = address_components

    @property
    def city(self):
        """Gets the city of this Location.

        The city of the location

        :return: The city of this Location.
        :rtype: str
        """
        return self._city

    @city.setter
    def city(self, city):
        """Sets the city of this Location.

        The city of the location

        :param city: The city of this Location.
        :type city: str
        """
        if city is None:
            raise ValueError("Invalid value for `city`, must not be `None`")

        self._city = city

    @property
    def country(self):
        """Gets the country of this Location.

        The country of the location

        :return: The country of this Location.
        :rtype: str
        """
        return self._country

    @country.setter
    def country(self, country):
        """Sets the country of this Location.

        The country of the location

        :param country: The country of this Location.
        :type country: str
        """
        if country is None:
            raise ValueError("Invalid value for `country`, must not be `None`")

        self._country = country

    @property
    def country_code(self):
        """Gets the country_code of this Location.

        The ISO 2-letter country code of the location

        :return: The country_code of this Location.
        :rtype: str
        """
        return self._country_code

    @country_code.setter
    def country_code(self, country_code):
        """Sets the country_code of this Location.

        The ISO 2-letter country code of the location

        :param country_code: The country_code of this Location.
        :type country_code: str
        """
        if country_code is None:
            raise ValueError("Invalid value for `country_code`, must not be `None`")

        self._country_code = country_code

    @property
    def country_code3(self):
        """Gets the country_code3 of this Location.

        The ISO 3-letter country code of the location

        :return: The country_code3 of this Location.
        :rtype: str
        """
        return self._country_code3

    @country_code3.setter
    def country_code3(self, country_code3):
        """Sets the country_code3 of this Location.

        The ISO 3-letter country code of the location

        :param country_code3: The country_code3 of this Location.
        :type country_code3: str
        """
        if country_code3 is None:
            raise ValueError("Invalid value for `country_code3`, must not be `None`")

        self._country_code3 = country_code3

    @property
    def currency_code(self):
        """Gets the currency_code of this Location.

        ISO 4217 currency code associated with the country

        :return: The currency_code of this Location.
        :rtype: str
        """
        return self._currency_code

    @currency_code.setter
    def currency_code(self, currency_code):
        """Sets the currency_code of this Location.

        ISO 4217 currency code associated with the country

        :param currency_code: The currency_code of this Location.
        :type currency_code: str
        """
        if currency_code is None:
            raise ValueError("Invalid value for `currency_code`, must not be `None`")

        self._currency_code = currency_code

    @property
    def latitude(self):
        """Gets the latitude of this Location.

        The location latitude

        :return: The latitude of this Location.
        :rtype: float
        """
        return self._latitude

    @latitude.setter
    def latitude(self, latitude):
        """Sets the latitude of this Location.

        The location latitude

        :param latitude: The latitude of this Location.
        :type latitude: float
        """
        if latitude is None:
            raise ValueError("Invalid value for `latitude`, must not be `None`")

        self._latitude = latitude

    @property
    def location_tags(self):
        """Gets the location_tags of this Location.

        Array of strings containing any location tags associated with the address. Tags are additional pieces of metadata about a specific location, there are thousands of different tags. Some examples of tags: shop, office, cafe, bank, pub

        :return: The location_tags of this Location.
        :rtype: List[str]
        """
        return self._location_tags

    @location_tags.setter
    def location_tags(self, location_tags):
        """Sets the location_tags of this Location.

        Array of strings containing any location tags associated with the address. Tags are additional pieces of metadata about a specific location, there are thousands of different tags. Some examples of tags: shop, office, cafe, bank, pub

        :param location_tags: The location_tags of this Location.
        :type location_tags: List[str]
        """
        if location_tags is None:
            raise ValueError("Invalid value for `location_tags`, must not be `None`")

        self._location_tags = location_tags

    @property
    def location_type(self):
        """Gets the location_type of this Location.

        The detected location type ordered roughly from most to least precise, possible values are: <br> <ul> <li>address - indicates a precise street address</li> <li>street - accurate to the street level but may not point to the exact location of the house/building number</li> <li>city - accurate to the city level, this includes villages, towns, suburbs, etc</li> <li>postal-code - indicates a postal code area (no house or street information present)</li> <li>railway - location is part of a rail network such as a station or railway track</li> <li>natural - indicates a natural feature, for example a mountain peak or a waterway</li> <li>island - location is an island or archipelago</li> <li>administrative - indicates an administrative boundary such as a country, state or province</li> </ul>

        :return: The location_type of this Location.
        :rtype: str
        """
        return self._location_type

    @location_type.setter
    def location_type(self, location_type):
        """Sets the location_type of this Location.

        The detected location type ordered roughly from most to least precise, possible values are: <br> <ul> <li>address - indicates a precise street address</li> <li>street - accurate to the street level but may not point to the exact location of the house/building number</li> <li>city - accurate to the city level, this includes villages, towns, suburbs, etc</li> <li>postal-code - indicates a postal code area (no house or street information present)</li> <li>railway - location is part of a rail network such as a station or railway track</li> <li>natural - indicates a natural feature, for example a mountain peak or a waterway</li> <li>island - location is an island or archipelago</li> <li>administrative - indicates an administrative boundary such as a country, state or province</li> </ul>

        :param location_type: The location_type of this Location.
        :type location_type: str
        """
        if location_type is None:
            raise ValueError("Invalid value for `location_type`, must not be `None`")

        self._location_type = location_type

    @property
    def longitude(self):
        """Gets the longitude of this Location.

        The location longitude

        :return: The longitude of this Location.
        :rtype: float
        """
        return self._longitude

    @longitude.setter
    def longitude(self, longitude):
        """Sets the longitude of this Location.

        The location longitude

        :param longitude: The longitude of this Location.
        :type longitude: float
        """
        if longitude is None:
            raise ValueError("Invalid value for `longitude`, must not be `None`")

        self._longitude = longitude

    @property
    def postal_address(self):
        """Gets the postal_address of this Location.

        The formatted address using local standards suitable for printing on an envelope

        :return: The postal_address of this Location.
        :rtype: str
        """
        return self._postal_address

    @postal_address.setter
    def postal_address(self, postal_address):
        """Sets the postal_address of this Location.

        The formatted address using local standards suitable for printing on an envelope

        :param postal_address: The postal_address of this Location.
        :type postal_address: str
        """
        if postal_address is None:
            raise ValueError("Invalid value for `postal_address`, must not be `None`")

        self._postal_address = postal_address

    @property
    def postal_code(self):
        """Gets the postal_code of this Location.

        The postal code for the location

        :return: The postal_code of this Location.
        :rtype: str
        """
        return self._postal_code

    @postal_code.setter
    def postal_code(self, postal_code):
        """Sets the postal_code of this Location.

        The postal code for the location

        :param postal_code: The postal_code of this Location.
        :type postal_code: str
        """
        if postal_code is None:
            raise ValueError("Invalid value for `postal_code`, must not be `None`")

        self._postal_code = postal_code

    @property
    def region_code(self):
        """Gets the region_code of this Location.

        The ISO 3166-2 region code for the location

        :return: The region_code of this Location.
        :rtype: str
        """
        return self._region_code

    @region_code.setter
    def region_code(self, region_code):
        """Sets the region_code of this Location.

        The ISO 3166-2 region code for the location

        :param region_code: The region_code of this Location.
        :type region_code: str
        """
        if region_code is None:
            raise ValueError("Invalid value for `region_code`, must not be `None`")

        self._region_code = region_code

    @property
    def state(self):
        """Gets the state of this Location.

        The state of the location

        :return: The state of this Location.
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this Location.

        The state of the location

        :param state: The state of this Location.
        :type state: str
        """
        if state is None:
            raise ValueError("Invalid value for `state`, must not be `None`")

        self._state = state

    @property
    def timezone(self):
        """Gets the timezone of this Location.


        :return: The timezone of this Location.
        :rtype: Timezone
        """
        return self._timezone

    @timezone.setter
    def timezone(self, timezone):
        """Sets the timezone of this Location.


        :param timezone: The timezone of this Location.
        :type timezone: Timezone
        """
        if timezone is None:
            raise ValueError("Invalid value for `timezone`, must not be `None`")

        self._timezone = timezone
