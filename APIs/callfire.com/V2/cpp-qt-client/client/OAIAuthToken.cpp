/**
 * CallFire API Documentation
 * CallFire
 *
 * The version of the OpenAPI document: V2
 * Contact: support@callfire.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAuthToken.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAuthToken::OAIAuthToken(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAuthToken::OAIAuthToken() {
    this->initializeModel();
}

OAIAuthToken::~OAIAuthToken() {}

void OAIAuthToken::initializeModel() {

    m_account_id_isSet = false;
    m_account_id_isValid = false;

    m_admin_client_isSet = false;
    m_admin_client_isValid = false;

    m_admin_token_isSet = false;
    m_admin_token_isValid = false;

    m_attributes_isSet = false;
    m_attributes_isValid = false;

    m_brand_isSet = false;
    m_brand_isValid = false;

    m_ez_spa_client_isSet = false;
    m_ez_spa_client_isValid = false;

    m_migration_isSet = false;
    m_migration_isValid = false;

    m_session_isSet = false;
    m_session_isValid = false;

    m_session_id_isSet = false;
    m_session_id_isValid = false;

    m_user_id_isSet = false;
    m_user_id_isValid = false;
}

void OAIAuthToken::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAuthToken::fromJsonObject(QJsonObject json) {

    m_account_id_isValid = ::OpenAPI::fromJsonValue(m_account_id, json[QString("accountId")]);
    m_account_id_isSet = !json[QString("accountId")].isNull() && m_account_id_isValid;

    m_admin_client_isValid = ::OpenAPI::fromJsonValue(m_admin_client, json[QString("adminClient")]);
    m_admin_client_isSet = !json[QString("adminClient")].isNull() && m_admin_client_isValid;

    m_admin_token_isValid = ::OpenAPI::fromJsonValue(m_admin_token, json[QString("adminToken")]);
    m_admin_token_isSet = !json[QString("adminToken")].isNull() && m_admin_token_isValid;

    m_attributes_isValid = ::OpenAPI::fromJsonValue(m_attributes, json[QString("attributes")]);
    m_attributes_isSet = !json[QString("attributes")].isNull() && m_attributes_isValid;

    m_brand_isValid = ::OpenAPI::fromJsonValue(m_brand, json[QString("brand")]);
    m_brand_isSet = !json[QString("brand")].isNull() && m_brand_isValid;

    m_ez_spa_client_isValid = ::OpenAPI::fromJsonValue(m_ez_spa_client, json[QString("ezSpaClient")]);
    m_ez_spa_client_isSet = !json[QString("ezSpaClient")].isNull() && m_ez_spa_client_isValid;

    m_migration_isValid = ::OpenAPI::fromJsonValue(m_migration, json[QString("migration")]);
    m_migration_isSet = !json[QString("migration")].isNull() && m_migration_isValid;

    m_session_isValid = ::OpenAPI::fromJsonValue(m_session, json[QString("session")]);
    m_session_isSet = !json[QString("session")].isNull() && m_session_isValid;

    m_session_id_isValid = ::OpenAPI::fromJsonValue(m_session_id, json[QString("sessionId")]);
    m_session_id_isSet = !json[QString("sessionId")].isNull() && m_session_id_isValid;

    m_user_id_isValid = ::OpenAPI::fromJsonValue(m_user_id, json[QString("userId")]);
    m_user_id_isSet = !json[QString("userId")].isNull() && m_user_id_isValid;
}

QString OAIAuthToken::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAuthToken::asJsonObject() const {
    QJsonObject obj;
    if (m_account_id_isSet) {
        obj.insert(QString("accountId"), ::OpenAPI::toJsonValue(m_account_id));
    }
    if (m_admin_client_isSet) {
        obj.insert(QString("adminClient"), ::OpenAPI::toJsonValue(m_admin_client));
    }
    if (m_admin_token.isSet()) {
        obj.insert(QString("adminToken"), ::OpenAPI::toJsonValue(m_admin_token));
    }
    if (m_attributes.size() > 0) {
        obj.insert(QString("attributes"), ::OpenAPI::toJsonValue(m_attributes));
    }
    if (m_brand_isSet) {
        obj.insert(QString("brand"), ::OpenAPI::toJsonValue(m_brand));
    }
    if (m_ez_spa_client_isSet) {
        obj.insert(QString("ezSpaClient"), ::OpenAPI::toJsonValue(m_ez_spa_client));
    }
    if (m_migration_isSet) {
        obj.insert(QString("migration"), ::OpenAPI::toJsonValue(m_migration));
    }
    if (m_session.isSet()) {
        obj.insert(QString("session"), ::OpenAPI::toJsonValue(m_session));
    }
    if (m_session_id_isSet) {
        obj.insert(QString("sessionId"), ::OpenAPI::toJsonValue(m_session_id));
    }
    if (m_user_id_isSet) {
        obj.insert(QString("userId"), ::OpenAPI::toJsonValue(m_user_id));
    }
    return obj;
}

qint64 OAIAuthToken::getAccountId() const {
    return m_account_id;
}
void OAIAuthToken::setAccountId(const qint64 &account_id) {
    m_account_id = account_id;
    m_account_id_isSet = true;
}

bool OAIAuthToken::is_account_id_Set() const{
    return m_account_id_isSet;
}

bool OAIAuthToken::is_account_id_Valid() const{
    return m_account_id_isValid;
}

bool OAIAuthToken::isAdminClient() const {
    return m_admin_client;
}
void OAIAuthToken::setAdminClient(const bool &admin_client) {
    m_admin_client = admin_client;
    m_admin_client_isSet = true;
}

bool OAIAuthToken::is_admin_client_Set() const{
    return m_admin_client_isSet;
}

bool OAIAuthToken::is_admin_client_Valid() const{
    return m_admin_client_isValid;
}

OAIAuthToken OAIAuthToken::getAdminToken() const {
    return m_admin_token;
}
void OAIAuthToken::setAdminToken(const OAIAuthToken &admin_token) {
    m_admin_token = admin_token;
    m_admin_token_isSet = true;
}

bool OAIAuthToken::is_admin_token_Set() const{
    return m_admin_token_isSet;
}

bool OAIAuthToken::is_admin_token_Valid() const{
    return m_admin_token_isValid;
}

QMap<QString, QString> OAIAuthToken::getAttributes() const {
    return m_attributes;
}
void OAIAuthToken::setAttributes(const QMap<QString, QString> &attributes) {
    m_attributes = attributes;
    m_attributes_isSet = true;
}

bool OAIAuthToken::is_attributes_Set() const{
    return m_attributes_isSet;
}

bool OAIAuthToken::is_attributes_Valid() const{
    return m_attributes_isValid;
}

QString OAIAuthToken::getBrand() const {
    return m_brand;
}
void OAIAuthToken::setBrand(const QString &brand) {
    m_brand = brand;
    m_brand_isSet = true;
}

bool OAIAuthToken::is_brand_Set() const{
    return m_brand_isSet;
}

bool OAIAuthToken::is_brand_Valid() const{
    return m_brand_isValid;
}

bool OAIAuthToken::isEzSpaClient() const {
    return m_ez_spa_client;
}
void OAIAuthToken::setEzSpaClient(const bool &ez_spa_client) {
    m_ez_spa_client = ez_spa_client;
    m_ez_spa_client_isSet = true;
}

bool OAIAuthToken::is_ez_spa_client_Set() const{
    return m_ez_spa_client_isSet;
}

bool OAIAuthToken::is_ez_spa_client_Valid() const{
    return m_ez_spa_client_isValid;
}

bool OAIAuthToken::isMigration() const {
    return m_migration;
}
void OAIAuthToken::setMigration(const bool &migration) {
    m_migration = migration;
    m_migration_isSet = true;
}

bool OAIAuthToken::is_migration_Set() const{
    return m_migration_isSet;
}

bool OAIAuthToken::is_migration_Valid() const{
    return m_migration_isValid;
}

OAIOAuthSession OAIAuthToken::getSession() const {
    return m_session;
}
void OAIAuthToken::setSession(const OAIOAuthSession &session) {
    m_session = session;
    m_session_isSet = true;
}

bool OAIAuthToken::is_session_Set() const{
    return m_session_isSet;
}

bool OAIAuthToken::is_session_Valid() const{
    return m_session_isValid;
}

QString OAIAuthToken::getSessionId() const {
    return m_session_id;
}
void OAIAuthToken::setSessionId(const QString &session_id) {
    m_session_id = session_id;
    m_session_id_isSet = true;
}

bool OAIAuthToken::is_session_id_Set() const{
    return m_session_id_isSet;
}

bool OAIAuthToken::is_session_id_Valid() const{
    return m_session_id_isValid;
}

qint64 OAIAuthToken::getUserId() const {
    return m_user_id;
}
void OAIAuthToken::setUserId(const qint64 &user_id) {
    m_user_id = user_id;
    m_user_id_isSet = true;
}

bool OAIAuthToken::is_user_id_Set() const{
    return m_user_id_isSet;
}

bool OAIAuthToken::is_user_id_Valid() const{
    return m_user_id_isValid;
}

bool OAIAuthToken::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_account_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_admin_client_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_admin_token.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_attributes.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_brand_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_ez_spa_client_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_migration_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_session.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_session_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_user_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAuthToken::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
