/**
 * CallFire API Documentation
 * CallFire
 *
 * The version of the OpenAPI document: V2
 * Contact: support@callfire.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIWeeklySchedule.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIWeeklySchedule::OAIWeeklySchedule(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIWeeklySchedule::OAIWeeklySchedule() {
    this->initializeModel();
}

OAIWeeklySchedule::~OAIWeeklySchedule() {}

void OAIWeeklySchedule::initializeModel() {

    m_days_of_week_isSet = false;
    m_days_of_week_isValid = false;

    m_start_time_of_day_isSet = false;
    m_start_time_of_day_isValid = false;

    m_stop_time_of_day_isSet = false;
    m_stop_time_of_day_isValid = false;

    m_time_zone_isSet = false;
    m_time_zone_isValid = false;
}

void OAIWeeklySchedule::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIWeeklySchedule::fromJsonObject(QJsonObject json) {

    m_days_of_week_isValid = ::OpenAPI::fromJsonValue(m_days_of_week, json[QString("daysOfWeek")]);
    m_days_of_week_isSet = !json[QString("daysOfWeek")].isNull() && m_days_of_week_isValid;

    m_start_time_of_day_isValid = ::OpenAPI::fromJsonValue(m_start_time_of_day, json[QString("startTimeOfDay")]);
    m_start_time_of_day_isSet = !json[QString("startTimeOfDay")].isNull() && m_start_time_of_day_isValid;

    m_stop_time_of_day_isValid = ::OpenAPI::fromJsonValue(m_stop_time_of_day, json[QString("stopTimeOfDay")]);
    m_stop_time_of_day_isSet = !json[QString("stopTimeOfDay")].isNull() && m_stop_time_of_day_isValid;

    m_time_zone_isValid = ::OpenAPI::fromJsonValue(m_time_zone, json[QString("timeZone")]);
    m_time_zone_isSet = !json[QString("timeZone")].isNull() && m_time_zone_isValid;
}

QString OAIWeeklySchedule::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIWeeklySchedule::asJsonObject() const {
    QJsonObject obj;
    if (m_days_of_week.size() > 0) {
        obj.insert(QString("daysOfWeek"), ::OpenAPI::toJsonValue(m_days_of_week));
    }
    if (m_start_time_of_day.isSet()) {
        obj.insert(QString("startTimeOfDay"), ::OpenAPI::toJsonValue(m_start_time_of_day));
    }
    if (m_stop_time_of_day.isSet()) {
        obj.insert(QString("stopTimeOfDay"), ::OpenAPI::toJsonValue(m_stop_time_of_day));
    }
    if (m_time_zone_isSet) {
        obj.insert(QString("timeZone"), ::OpenAPI::toJsonValue(m_time_zone));
    }
    return obj;
}

QSet<QString> OAIWeeklySchedule::getDaysOfWeek() const {
    return m_days_of_week;
}
void OAIWeeklySchedule::setDaysOfWeek(const QSet<QString> &days_of_week) {
    m_days_of_week = days_of_week;
    m_days_of_week_isSet = true;
}

bool OAIWeeklySchedule::is_days_of_week_Set() const{
    return m_days_of_week_isSet;
}

bool OAIWeeklySchedule::is_days_of_week_Valid() const{
    return m_days_of_week_isValid;
}

OAILocalTime OAIWeeklySchedule::getStartTimeOfDay() const {
    return m_start_time_of_day;
}
void OAIWeeklySchedule::setStartTimeOfDay(const OAILocalTime &start_time_of_day) {
    m_start_time_of_day = start_time_of_day;
    m_start_time_of_day_isSet = true;
}

bool OAIWeeklySchedule::is_start_time_of_day_Set() const{
    return m_start_time_of_day_isSet;
}

bool OAIWeeklySchedule::is_start_time_of_day_Valid() const{
    return m_start_time_of_day_isValid;
}

OAILocalTime OAIWeeklySchedule::getStopTimeOfDay() const {
    return m_stop_time_of_day;
}
void OAIWeeklySchedule::setStopTimeOfDay(const OAILocalTime &stop_time_of_day) {
    m_stop_time_of_day = stop_time_of_day;
    m_stop_time_of_day_isSet = true;
}

bool OAIWeeklySchedule::is_stop_time_of_day_Set() const{
    return m_stop_time_of_day_isSet;
}

bool OAIWeeklySchedule::is_stop_time_of_day_Valid() const{
    return m_stop_time_of_day_isValid;
}

QString OAIWeeklySchedule::getTimeZone() const {
    return m_time_zone;
}
void OAIWeeklySchedule::setTimeZone(const QString &time_zone) {
    m_time_zone = time_zone;
    m_time_zone_isSet = true;
}

bool OAIWeeklySchedule::is_time_zone_Set() const{
    return m_time_zone_isSet;
}

bool OAIWeeklySchedule::is_time_zone_Valid() const{
    return m_time_zone_isValid;
}

bool OAIWeeklySchedule::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_days_of_week.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_start_time_of_day.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_stop_time_of_day.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_time_zone_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIWeeklySchedule::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
