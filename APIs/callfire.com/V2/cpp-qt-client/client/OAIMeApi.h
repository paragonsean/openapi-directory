/**
 * CallFire API Documentation
 * CallFire
 *
 * The version of the OpenAPI document: V2
 * Contact: support@callfire.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIMeApi_H
#define OAI_OAIMeApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIAccount.h"
#include "OAIApiCredential.h"
#include "OAIApiCredentialPage.h"
#include "OAIBillingPlanUsage.h"
#include "OAICallerIdList.h"
#include "OAICallerIdVerificationRequest.h"
#include "OAICreditUsage.h"
#include "OAIErrorResponse.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIMeApi : public QObject {
    Q_OBJECT

public:
    OAIMeApi(const int timeOut = 0);
    ~OAIMeApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  oai_api_credential OAIApiCredential [optional]
    */
    virtual void createApiCredential(const ::OpenAPI::OptionalParam<OAIApiCredential> &oai_api_credential = ::OpenAPI::OptionalParam<OAIApiCredential>());

    /**
    * @param[in]  id qint64 [required]
    */
    virtual void deleteApiCredential(const qint64 &id);

    /**
    * @param[in]  id qint64 [required]
    */
    virtual void disableApiCredentials(const qint64 &id);

    /**
    * @param[in]  id qint64 [required]
    */
    virtual void enableApiCredentials(const qint64 &id);

    /**
    * @param[in]  name QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  limit qint32 [optional]
    * @param[in]  offset qint32 [optional]
    */
    virtual void findApiCredentials(const ::OpenAPI::OptionalParam<QString> &name = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &limit = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &offset = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  fields QString [optional]
    */
    virtual void getAccount(const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  id qint64 [required]
    * @param[in]  fields QString [optional]
    */
    virtual void getApiCredential(const qint64 &id, const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>());


    virtual void getBillingPlanUsage();


    virtual void getCallerIds();

    /**
    * @param[in]  interval_begin qint64 [optional]
    * @param[in]  interval_end qint64 [optional]
    */
    virtual void getCreditUsage(const ::OpenAPI::OptionalParam<qint64> &interval_begin = ::OpenAPI::OptionalParam<qint64>(), const ::OpenAPI::OptionalParam<qint64> &interval_end = ::OpenAPI::OptionalParam<qint64>());

    /**
    * @param[in]  callerid QString [required]
    */
    virtual void sendVerificationCodeToCallerId(const QString &callerid);

    /**
    * @param[in]  callerid QString [required]
    * @param[in]  oai_caller_id_verification_request OAICallerIdVerificationRequest [optional]
    */
    virtual void verifyCallerId(const QString &callerid, const ::OpenAPI::OptionalParam<OAICallerIdVerificationRequest> &oai_caller_id_verification_request = ::OpenAPI::OptionalParam<OAICallerIdVerificationRequest>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void createApiCredentialCallback(OAIHttpRequestWorker *worker);
    void deleteApiCredentialCallback(OAIHttpRequestWorker *worker);
    void disableApiCredentialsCallback(OAIHttpRequestWorker *worker);
    void enableApiCredentialsCallback(OAIHttpRequestWorker *worker);
    void findApiCredentialsCallback(OAIHttpRequestWorker *worker);
    void getAccountCallback(OAIHttpRequestWorker *worker);
    void getApiCredentialCallback(OAIHttpRequestWorker *worker);
    void getBillingPlanUsageCallback(OAIHttpRequestWorker *worker);
    void getCallerIdsCallback(OAIHttpRequestWorker *worker);
    void getCreditUsageCallback(OAIHttpRequestWorker *worker);
    void sendVerificationCodeToCallerIdCallback(OAIHttpRequestWorker *worker);
    void verifyCallerIdCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void createApiCredentialSignal(OAIApiCredential summary);
    void deleteApiCredentialSignal();
    void disableApiCredentialsSignal();
    void enableApiCredentialsSignal();
    void findApiCredentialsSignal(OAIApiCredentialPage summary);
    void getAccountSignal(OAIAccount summary);
    void getApiCredentialSignal(OAIApiCredential summary);
    void getBillingPlanUsageSignal(OAIBillingPlanUsage summary);
    void getCallerIdsSignal(OAICallerIdList summary);
    void getCreditUsageSignal(OAICreditUsage summary);
    void sendVerificationCodeToCallerIdSignal();
    void verifyCallerIdSignal(bool summary);


    void createApiCredentialSignalFull(OAIHttpRequestWorker *worker, OAIApiCredential summary);
    void deleteApiCredentialSignalFull(OAIHttpRequestWorker *worker);
    void disableApiCredentialsSignalFull(OAIHttpRequestWorker *worker);
    void enableApiCredentialsSignalFull(OAIHttpRequestWorker *worker);
    void findApiCredentialsSignalFull(OAIHttpRequestWorker *worker, OAIApiCredentialPage summary);
    void getAccountSignalFull(OAIHttpRequestWorker *worker, OAIAccount summary);
    void getApiCredentialSignalFull(OAIHttpRequestWorker *worker, OAIApiCredential summary);
    void getBillingPlanUsageSignalFull(OAIHttpRequestWorker *worker, OAIBillingPlanUsage summary);
    void getCallerIdsSignalFull(OAIHttpRequestWorker *worker, OAICallerIdList summary);
    void getCreditUsageSignalFull(OAIHttpRequestWorker *worker, OAICreditUsage summary);
    void sendVerificationCodeToCallerIdSignalFull(OAIHttpRequestWorker *worker);
    void verifyCallerIdSignalFull(OAIHttpRequestWorker *worker, bool summary);

    Q_DECL_DEPRECATED_X("Use createApiCredentialSignalError() instead")
    void createApiCredentialSignalE(OAIApiCredential summary, QNetworkReply::NetworkError error_type, QString error_str);
    void createApiCredentialSignalError(OAIApiCredential summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteApiCredentialSignalError() instead")
    void deleteApiCredentialSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void deleteApiCredentialSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use disableApiCredentialsSignalError() instead")
    void disableApiCredentialsSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void disableApiCredentialsSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use enableApiCredentialsSignalError() instead")
    void enableApiCredentialsSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void enableApiCredentialsSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use findApiCredentialsSignalError() instead")
    void findApiCredentialsSignalE(OAIApiCredentialPage summary, QNetworkReply::NetworkError error_type, QString error_str);
    void findApiCredentialsSignalError(OAIApiCredentialPage summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getAccountSignalError() instead")
    void getAccountSignalE(OAIAccount summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getAccountSignalError(OAIAccount summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getApiCredentialSignalError() instead")
    void getApiCredentialSignalE(OAIApiCredential summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getApiCredentialSignalError(OAIApiCredential summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getBillingPlanUsageSignalError() instead")
    void getBillingPlanUsageSignalE(OAIBillingPlanUsage summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getBillingPlanUsageSignalError(OAIBillingPlanUsage summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getCallerIdsSignalError() instead")
    void getCallerIdsSignalE(OAICallerIdList summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getCallerIdsSignalError(OAICallerIdList summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getCreditUsageSignalError() instead")
    void getCreditUsageSignalE(OAICreditUsage summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getCreditUsageSignalError(OAICreditUsage summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use sendVerificationCodeToCallerIdSignalError() instead")
    void sendVerificationCodeToCallerIdSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void sendVerificationCodeToCallerIdSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use verifyCallerIdSignalError() instead")
    void verifyCallerIdSignalE(bool summary, QNetworkReply::NetworkError error_type, QString error_str);
    void verifyCallerIdSignalError(bool summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use createApiCredentialSignalErrorFull() instead")
    void createApiCredentialSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void createApiCredentialSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteApiCredentialSignalErrorFull() instead")
    void deleteApiCredentialSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteApiCredentialSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use disableApiCredentialsSignalErrorFull() instead")
    void disableApiCredentialsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void disableApiCredentialsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use enableApiCredentialsSignalErrorFull() instead")
    void enableApiCredentialsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void enableApiCredentialsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use findApiCredentialsSignalErrorFull() instead")
    void findApiCredentialsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void findApiCredentialsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getAccountSignalErrorFull() instead")
    void getAccountSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getAccountSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getApiCredentialSignalErrorFull() instead")
    void getApiCredentialSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getApiCredentialSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getBillingPlanUsageSignalErrorFull() instead")
    void getBillingPlanUsageSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getBillingPlanUsageSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getCallerIdsSignalErrorFull() instead")
    void getCallerIdsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getCallerIdsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getCreditUsageSignalErrorFull() instead")
    void getCreditUsageSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getCreditUsageSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use sendVerificationCodeToCallerIdSignalErrorFull() instead")
    void sendVerificationCodeToCallerIdSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void sendVerificationCodeToCallerIdSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use verifyCallerIdSignalErrorFull() instead")
    void verifyCallerIdSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void verifyCallerIdSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
