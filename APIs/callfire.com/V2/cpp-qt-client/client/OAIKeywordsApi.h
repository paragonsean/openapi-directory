/**
 * CallFire API Documentation
 * CallFire
 *
 * The version of the OpenAPI document: V2
 * Contact: support@callfire.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIKeywordsApi_H
#define OAI_OAIKeywordsApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIErrorResponse.h"
#include "OAIKeywordConfig.h"
#include "OAIKeywordLease.h"
#include "OAIKeywordLeasePage.h"
#include "OAIKeywordList.h"
#include "OAIPage.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIKeywordsApi : public QObject {
    Q_OBJECT

public:
    OAIKeywordsApi(const int timeOut = 0);
    ~OAIKeywordsApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  limit qint32 [optional]
    * @param[in]  offset qint32 [optional]
    * @param[in]  filter QString [optional]
    * @param[in]  label_name QString [optional]
    * @param[in]  fields QString [optional]
    */
    virtual void findKeywordLeaseConfigs(const ::OpenAPI::OptionalParam<qint32> &limit = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &offset = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &filter = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &label_name = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  limit qint32 [optional]
    * @param[in]  offset qint32 [optional]
    * @param[in]  filter QString [optional]
    * @param[in]  label_name QString [optional]
    * @param[in]  fields QString [optional]
    */
    virtual void findKeywordLeases(const ::OpenAPI::OptionalParam<qint32> &limit = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &offset = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &filter = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &label_name = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  keywords QList<QString> [optional]
    */
    virtual void findKeywords(const ::OpenAPI::OptionalParam<QList<QString>> &keywords = ::OpenAPI::OptionalParam<QList<QString>>());

    /**
    * @param[in]  keyword QString [required]
    * @param[in]  fields QString [optional]
    */
    virtual void getKeywordLease(const QString &keyword, const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  id qint64 [required]
    * @param[in]  fields QString [optional]
    */
    virtual void getKeywordLeaseById(const qint64 &id, const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  keyword QString [required]
    * @param[in]  fields QString [optional]
    */
    virtual void getKeywordLeaseConfig(const QString &keyword, const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  keyword QString [required]
    */
    virtual void isKeywordAvailable(const QString &keyword);

    /**
    * @param[in]  keyword QString [required]
    * @param[in]  oai_keyword_lease OAIKeywordLease [optional]
    */
    virtual void updateKeywordLease(const QString &keyword, const ::OpenAPI::OptionalParam<OAIKeywordLease> &oai_keyword_lease = ::OpenAPI::OptionalParam<OAIKeywordLease>());

    /**
    * @param[in]  keyword QString [required]
    * @param[in]  oai_keyword_config OAIKeywordConfig [optional]
    */
    virtual void updateKeywordLeaseConfig(const QString &keyword, const ::OpenAPI::OptionalParam<OAIKeywordConfig> &oai_keyword_config = ::OpenAPI::OptionalParam<OAIKeywordConfig>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void findKeywordLeaseConfigsCallback(OAIHttpRequestWorker *worker);
    void findKeywordLeasesCallback(OAIHttpRequestWorker *worker);
    void findKeywordsCallback(OAIHttpRequestWorker *worker);
    void getKeywordLeaseCallback(OAIHttpRequestWorker *worker);
    void getKeywordLeaseByIdCallback(OAIHttpRequestWorker *worker);
    void getKeywordLeaseConfigCallback(OAIHttpRequestWorker *worker);
    void isKeywordAvailableCallback(OAIHttpRequestWorker *worker);
    void updateKeywordLeaseCallback(OAIHttpRequestWorker *worker);
    void updateKeywordLeaseConfigCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void findKeywordLeaseConfigsSignal(OAIPage summary);
    void findKeywordLeasesSignal(OAIKeywordLeasePage summary);
    void findKeywordsSignal(OAIKeywordList summary);
    void getKeywordLeaseSignal(OAIKeywordLease summary);
    void getKeywordLeaseByIdSignal(OAIKeywordLease summary);
    void getKeywordLeaseConfigSignal(OAIKeywordConfig summary);
    void isKeywordAvailableSignal(bool summary);
    void updateKeywordLeaseSignal();
    void updateKeywordLeaseConfigSignal();


    void findKeywordLeaseConfigsSignalFull(OAIHttpRequestWorker *worker, OAIPage summary);
    void findKeywordLeasesSignalFull(OAIHttpRequestWorker *worker, OAIKeywordLeasePage summary);
    void findKeywordsSignalFull(OAIHttpRequestWorker *worker, OAIKeywordList summary);
    void getKeywordLeaseSignalFull(OAIHttpRequestWorker *worker, OAIKeywordLease summary);
    void getKeywordLeaseByIdSignalFull(OAIHttpRequestWorker *worker, OAIKeywordLease summary);
    void getKeywordLeaseConfigSignalFull(OAIHttpRequestWorker *worker, OAIKeywordConfig summary);
    void isKeywordAvailableSignalFull(OAIHttpRequestWorker *worker, bool summary);
    void updateKeywordLeaseSignalFull(OAIHttpRequestWorker *worker);
    void updateKeywordLeaseConfigSignalFull(OAIHttpRequestWorker *worker);

    Q_DECL_DEPRECATED_X("Use findKeywordLeaseConfigsSignalError() instead")
    void findKeywordLeaseConfigsSignalE(OAIPage summary, QNetworkReply::NetworkError error_type, QString error_str);
    void findKeywordLeaseConfigsSignalError(OAIPage summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use findKeywordLeasesSignalError() instead")
    void findKeywordLeasesSignalE(OAIKeywordLeasePage summary, QNetworkReply::NetworkError error_type, QString error_str);
    void findKeywordLeasesSignalError(OAIKeywordLeasePage summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use findKeywordsSignalError() instead")
    void findKeywordsSignalE(OAIKeywordList summary, QNetworkReply::NetworkError error_type, QString error_str);
    void findKeywordsSignalError(OAIKeywordList summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getKeywordLeaseSignalError() instead")
    void getKeywordLeaseSignalE(OAIKeywordLease summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getKeywordLeaseSignalError(OAIKeywordLease summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getKeywordLeaseByIdSignalError() instead")
    void getKeywordLeaseByIdSignalE(OAIKeywordLease summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getKeywordLeaseByIdSignalError(OAIKeywordLease summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getKeywordLeaseConfigSignalError() instead")
    void getKeywordLeaseConfigSignalE(OAIKeywordConfig summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getKeywordLeaseConfigSignalError(OAIKeywordConfig summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use isKeywordAvailableSignalError() instead")
    void isKeywordAvailableSignalE(bool summary, QNetworkReply::NetworkError error_type, QString error_str);
    void isKeywordAvailableSignalError(bool summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateKeywordLeaseSignalError() instead")
    void updateKeywordLeaseSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void updateKeywordLeaseSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateKeywordLeaseConfigSignalError() instead")
    void updateKeywordLeaseConfigSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void updateKeywordLeaseConfigSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use findKeywordLeaseConfigsSignalErrorFull() instead")
    void findKeywordLeaseConfigsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void findKeywordLeaseConfigsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use findKeywordLeasesSignalErrorFull() instead")
    void findKeywordLeasesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void findKeywordLeasesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use findKeywordsSignalErrorFull() instead")
    void findKeywordsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void findKeywordsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getKeywordLeaseSignalErrorFull() instead")
    void getKeywordLeaseSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getKeywordLeaseSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getKeywordLeaseByIdSignalErrorFull() instead")
    void getKeywordLeaseByIdSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getKeywordLeaseByIdSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getKeywordLeaseConfigSignalErrorFull() instead")
    void getKeywordLeaseConfigSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getKeywordLeaseConfigSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use isKeywordAvailableSignalErrorFull() instead")
    void isKeywordAvailableSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void isKeywordAvailableSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateKeywordLeaseSignalErrorFull() instead")
    void updateKeywordLeaseSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateKeywordLeaseSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateKeywordLeaseConfigSignalErrorFull() instead")
    void updateKeywordLeaseConfigSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateKeywordLeaseConfigSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
