/**
 * CallFire API Documentation
 * CallFire
 *
 * The version of the OpenAPI document: V2
 * Contact: support@callfire.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIZoneRules.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIZoneRules::OAIZoneRules(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIZoneRules::OAIZoneRules() {
    this->initializeModel();
}

OAIZoneRules::~OAIZoneRules() {}

void OAIZoneRules::initializeModel() {

    m_fixed_offset_isSet = false;
    m_fixed_offset_isValid = false;

    m_transition_rules_isSet = false;
    m_transition_rules_isValid = false;

    m_transitions_isSet = false;
    m_transitions_isValid = false;
}

void OAIZoneRules::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIZoneRules::fromJsonObject(QJsonObject json) {

    m_fixed_offset_isValid = ::OpenAPI::fromJsonValue(m_fixed_offset, json[QString("fixedOffset")]);
    m_fixed_offset_isSet = !json[QString("fixedOffset")].isNull() && m_fixed_offset_isValid;

    m_transition_rules_isValid = ::OpenAPI::fromJsonValue(m_transition_rules, json[QString("transitionRules")]);
    m_transition_rules_isSet = !json[QString("transitionRules")].isNull() && m_transition_rules_isValid;

    m_transitions_isValid = ::OpenAPI::fromJsonValue(m_transitions, json[QString("transitions")]);
    m_transitions_isSet = !json[QString("transitions")].isNull() && m_transitions_isValid;
}

QString OAIZoneRules::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIZoneRules::asJsonObject() const {
    QJsonObject obj;
    if (m_fixed_offset_isSet) {
        obj.insert(QString("fixedOffset"), ::OpenAPI::toJsonValue(m_fixed_offset));
    }
    if (m_transition_rules.size() > 0) {
        obj.insert(QString("transitionRules"), ::OpenAPI::toJsonValue(m_transition_rules));
    }
    if (m_transitions.size() > 0) {
        obj.insert(QString("transitions"), ::OpenAPI::toJsonValue(m_transitions));
    }
    return obj;
}

bool OAIZoneRules::isFixedOffset() const {
    return m_fixed_offset;
}
void OAIZoneRules::setFixedOffset(const bool &fixed_offset) {
    m_fixed_offset = fixed_offset;
    m_fixed_offset_isSet = true;
}

bool OAIZoneRules::is_fixed_offset_Set() const{
    return m_fixed_offset_isSet;
}

bool OAIZoneRules::is_fixed_offset_Valid() const{
    return m_fixed_offset_isValid;
}

QList<OAIZoneOffsetTransitionRule> OAIZoneRules::getTransitionRules() const {
    return m_transition_rules;
}
void OAIZoneRules::setTransitionRules(const QList<OAIZoneOffsetTransitionRule> &transition_rules) {
    m_transition_rules = transition_rules;
    m_transition_rules_isSet = true;
}

bool OAIZoneRules::is_transition_rules_Set() const{
    return m_transition_rules_isSet;
}

bool OAIZoneRules::is_transition_rules_Valid() const{
    return m_transition_rules_isValid;
}

QList<OAIZoneOffsetTransition> OAIZoneRules::getTransitions() const {
    return m_transitions;
}
void OAIZoneRules::setTransitions(const QList<OAIZoneOffsetTransition> &transitions) {
    m_transitions = transitions;
    m_transitions_isSet = true;
}

bool OAIZoneRules::is_transitions_Set() const{
    return m_transitions_isSet;
}

bool OAIZoneRules::is_transitions_Valid() const{
    return m_transitions_isValid;
}

bool OAIZoneRules::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_fixed_offset_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_transition_rules.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_transitions.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIZoneRules::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
