/**
 * CallFire API Documentation
 * CallFire
 *
 * The version of the OpenAPI document: V2
 * Contact: support@callfire.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAINumbersApi_H
#define OAI_OAINumbersApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIErrorResponse.h"
#include "OAINumberConfig.h"
#include "OAINumberConfigPage.h"
#include "OAINumberLease.h"
#include "OAINumberLeasePage.h"
#include "OAINumberList.h"
#include "OAIRegionPage.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAINumbersApi : public QObject {
    Q_OBJECT

public:
    OAINumbersApi(const int timeOut = 0);
    ~OAINumbersApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  limit qint32 [optional]
    * @param[in]  offset qint32 [optional]
    * @param[in]  prefix QString [optional]
    * @param[in]  city QString [optional]
    * @param[in]  state QString [optional]
    * @param[in]  zipcode QString [optional]
    * @param[in]  label_name QString [optional]
    * @param[in]  fields QString [optional]
    */
    virtual void findNumberLeaseConfigs(const ::OpenAPI::OptionalParam<qint32> &limit = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &offset = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &prefix = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &city = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &state = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &zipcode = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &label_name = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  limit qint32 [optional]
    * @param[in]  offset qint32 [optional]
    * @param[in]  prefix QString [optional]
    * @param[in]  city QString [optional]
    * @param[in]  state QString [optional]
    * @param[in]  zipcode QString [optional]
    * @param[in]  label_name QString [optional]
    * @param[in]  toll_free bool [optional]
    * @param[in]  fields QString [optional]
    */
    virtual void findNumberLeases(const ::OpenAPI::OptionalParam<qint32> &limit = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &offset = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &prefix = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &city = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &state = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &zipcode = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &label_name = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &toll_free = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  limit qint32 [optional]
    * @param[in]  offset qint32 [optional]
    * @param[in]  prefix QString [optional]
    * @param[in]  city QString [optional]
    * @param[in]  city_prefix QString [optional]
    * @param[in]  state QString [optional]
    * @param[in]  zipcode QString [optional]
    * @param[in]  country QString [optional]
    * @param[in]  fields QString [optional]
    */
    virtual void findNumberRegions(const ::OpenAPI::OptionalParam<qint32> &limit = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &offset = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &prefix = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &city = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &city_prefix = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &state = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &zipcode = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &country = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  limit qint32 [optional]
    * @param[in]  prefix QString [optional]
    * @param[in]  city QString [optional]
    * @param[in]  state QString [optional]
    * @param[in]  zipcode QString [optional]
    * @param[in]  fields QString [optional]
    */
    virtual void findNumbersLocal(const ::OpenAPI::OptionalParam<qint32> &limit = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &prefix = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &city = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &state = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &zipcode = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  pattern QString [optional]
    * @param[in]  limit qint32 [optional]
    * @param[in]  fields QString [optional]
    */
    virtual void findNumbersTollfree(const ::OpenAPI::OptionalParam<QString> &pattern = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &limit = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  number QString [required]
    * @param[in]  fields QString [optional]
    */
    virtual void getNumberLease(const QString &number, const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  number QString [required]
    * @param[in]  fields QString [optional]
    */
    virtual void getNumberLeaseConfig(const QString &number, const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  number QString [required]
    * @param[in]  oai_number_lease OAINumberLease [optional]
    */
    virtual void updateNumberLease(const QString &number, const ::OpenAPI::OptionalParam<OAINumberLease> &oai_number_lease = ::OpenAPI::OptionalParam<OAINumberLease>());

    /**
    * @param[in]  number QString [required]
    * @param[in]  oai_number_config OAINumberConfig [optional]
    */
    virtual void updateNumberLeaseConfig(const QString &number, const ::OpenAPI::OptionalParam<OAINumberConfig> &oai_number_config = ::OpenAPI::OptionalParam<OAINumberConfig>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void findNumberLeaseConfigsCallback(OAIHttpRequestWorker *worker);
    void findNumberLeasesCallback(OAIHttpRequestWorker *worker);
    void findNumberRegionsCallback(OAIHttpRequestWorker *worker);
    void findNumbersLocalCallback(OAIHttpRequestWorker *worker);
    void findNumbersTollfreeCallback(OAIHttpRequestWorker *worker);
    void getNumberLeaseCallback(OAIHttpRequestWorker *worker);
    void getNumberLeaseConfigCallback(OAIHttpRequestWorker *worker);
    void updateNumberLeaseCallback(OAIHttpRequestWorker *worker);
    void updateNumberLeaseConfigCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void findNumberLeaseConfigsSignal(OAINumberConfigPage summary);
    void findNumberLeasesSignal(OAINumberLeasePage summary);
    void findNumberRegionsSignal(OAIRegionPage summary);
    void findNumbersLocalSignal(OAINumberList summary);
    void findNumbersTollfreeSignal(OAINumberList summary);
    void getNumberLeaseSignal(OAINumberLease summary);
    void getNumberLeaseConfigSignal(OAINumberConfig summary);
    void updateNumberLeaseSignal();
    void updateNumberLeaseConfigSignal();


    void findNumberLeaseConfigsSignalFull(OAIHttpRequestWorker *worker, OAINumberConfigPage summary);
    void findNumberLeasesSignalFull(OAIHttpRequestWorker *worker, OAINumberLeasePage summary);
    void findNumberRegionsSignalFull(OAIHttpRequestWorker *worker, OAIRegionPage summary);
    void findNumbersLocalSignalFull(OAIHttpRequestWorker *worker, OAINumberList summary);
    void findNumbersTollfreeSignalFull(OAIHttpRequestWorker *worker, OAINumberList summary);
    void getNumberLeaseSignalFull(OAIHttpRequestWorker *worker, OAINumberLease summary);
    void getNumberLeaseConfigSignalFull(OAIHttpRequestWorker *worker, OAINumberConfig summary);
    void updateNumberLeaseSignalFull(OAIHttpRequestWorker *worker);
    void updateNumberLeaseConfigSignalFull(OAIHttpRequestWorker *worker);

    Q_DECL_DEPRECATED_X("Use findNumberLeaseConfigsSignalError() instead")
    void findNumberLeaseConfigsSignalE(OAINumberConfigPage summary, QNetworkReply::NetworkError error_type, QString error_str);
    void findNumberLeaseConfigsSignalError(OAINumberConfigPage summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use findNumberLeasesSignalError() instead")
    void findNumberLeasesSignalE(OAINumberLeasePage summary, QNetworkReply::NetworkError error_type, QString error_str);
    void findNumberLeasesSignalError(OAINumberLeasePage summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use findNumberRegionsSignalError() instead")
    void findNumberRegionsSignalE(OAIRegionPage summary, QNetworkReply::NetworkError error_type, QString error_str);
    void findNumberRegionsSignalError(OAIRegionPage summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use findNumbersLocalSignalError() instead")
    void findNumbersLocalSignalE(OAINumberList summary, QNetworkReply::NetworkError error_type, QString error_str);
    void findNumbersLocalSignalError(OAINumberList summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use findNumbersTollfreeSignalError() instead")
    void findNumbersTollfreeSignalE(OAINumberList summary, QNetworkReply::NetworkError error_type, QString error_str);
    void findNumbersTollfreeSignalError(OAINumberList summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNumberLeaseSignalError() instead")
    void getNumberLeaseSignalE(OAINumberLease summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getNumberLeaseSignalError(OAINumberLease summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNumberLeaseConfigSignalError() instead")
    void getNumberLeaseConfigSignalE(OAINumberConfig summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getNumberLeaseConfigSignalError(OAINumberConfig summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateNumberLeaseSignalError() instead")
    void updateNumberLeaseSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void updateNumberLeaseSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateNumberLeaseConfigSignalError() instead")
    void updateNumberLeaseConfigSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void updateNumberLeaseConfigSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use findNumberLeaseConfigsSignalErrorFull() instead")
    void findNumberLeaseConfigsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void findNumberLeaseConfigsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use findNumberLeasesSignalErrorFull() instead")
    void findNumberLeasesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void findNumberLeasesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use findNumberRegionsSignalErrorFull() instead")
    void findNumberRegionsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void findNumberRegionsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use findNumbersLocalSignalErrorFull() instead")
    void findNumbersLocalSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void findNumbersLocalSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use findNumbersTollfreeSignalErrorFull() instead")
    void findNumbersTollfreeSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void findNumbersTollfreeSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNumberLeaseSignalErrorFull() instead")
    void getNumberLeaseSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getNumberLeaseSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNumberLeaseConfigSignalErrorFull() instead")
    void getNumberLeaseConfigSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getNumberLeaseConfigSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateNumberLeaseSignalErrorFull() instead")
    void updateNumberLeaseSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateNumberLeaseSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateNumberLeaseConfigSignalErrorFull() instead")
    void updateNumberLeaseConfigSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateNumberLeaseConfigSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
