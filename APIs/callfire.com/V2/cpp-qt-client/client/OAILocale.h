/**
 * CallFire API Documentation
 * CallFire
 *
 * The version of the OpenAPI document: V2
 * Contact: support@callfire.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAILocale.h
 *
 * ~
 */

#ifndef OAILocale_H
#define OAILocale_H

#include <QJsonObject>

#include <QSet>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAILocale : public OAIObject {
public:
    OAILocale();
    OAILocale(QString json);
    ~OAILocale() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getCountry() const;
    void setCountry(const QString &country);
    bool is_country_Set() const;
    bool is_country_Valid() const;

    QString getDisplayCountry() const;
    void setDisplayCountry(const QString &display_country);
    bool is_display_country_Set() const;
    bool is_display_country_Valid() const;

    QString getDisplayLanguage() const;
    void setDisplayLanguage(const QString &display_language);
    bool is_display_language_Set() const;
    bool is_display_language_Valid() const;

    QString getDisplayName() const;
    void setDisplayName(const QString &display_name);
    bool is_display_name_Set() const;
    bool is_display_name_Valid() const;

    QString getDisplayScript() const;
    void setDisplayScript(const QString &display_script);
    bool is_display_script_Set() const;
    bool is_display_script_Valid() const;

    QString getDisplayVariant() const;
    void setDisplayVariant(const QString &display_variant);
    bool is_display_variant_Set() const;
    bool is_display_variant_Valid() const;

    QSet<QString> getExtensionKeys() const;
    void setExtensionKeys(const QSet<QString> &extension_keys);
    bool is_extension_keys_Set() const;
    bool is_extension_keys_Valid() const;

    QString getIso3Country() const;
    void setIso3Country(const QString &iso3_country);
    bool is_iso3_country_Set() const;
    bool is_iso3_country_Valid() const;

    QString getIso3Language() const;
    void setIso3Language(const QString &iso3_language);
    bool is_iso3_language_Set() const;
    bool is_iso3_language_Valid() const;

    QString getLanguage() const;
    void setLanguage(const QString &language);
    bool is_language_Set() const;
    bool is_language_Valid() const;

    QString getScript() const;
    void setScript(const QString &script);
    bool is_script_Set() const;
    bool is_script_Valid() const;

    QSet<QString> getUnicodeLocaleAttributes() const;
    void setUnicodeLocaleAttributes(const QSet<QString> &unicode_locale_attributes);
    bool is_unicode_locale_attributes_Set() const;
    bool is_unicode_locale_attributes_Valid() const;

    QSet<QString> getUnicodeLocaleKeys() const;
    void setUnicodeLocaleKeys(const QSet<QString> &unicode_locale_keys);
    bool is_unicode_locale_keys_Set() const;
    bool is_unicode_locale_keys_Valid() const;

    QString getVariant() const;
    void setVariant(const QString &variant);
    bool is_variant_Set() const;
    bool is_variant_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_country;
    bool m_country_isSet;
    bool m_country_isValid;

    QString m_display_country;
    bool m_display_country_isSet;
    bool m_display_country_isValid;

    QString m_display_language;
    bool m_display_language_isSet;
    bool m_display_language_isValid;

    QString m_display_name;
    bool m_display_name_isSet;
    bool m_display_name_isValid;

    QString m_display_script;
    bool m_display_script_isSet;
    bool m_display_script_isValid;

    QString m_display_variant;
    bool m_display_variant_isSet;
    bool m_display_variant_isValid;

    QSet<QString> m_extension_keys;
    bool m_extension_keys_isSet;
    bool m_extension_keys_isValid;

    QString m_iso3_country;
    bool m_iso3_country_isSet;
    bool m_iso3_country_isValid;

    QString m_iso3_language;
    bool m_iso3_language_isSet;
    bool m_iso3_language_isValid;

    QString m_language;
    bool m_language_isSet;
    bool m_language_isValid;

    QString m_script;
    bool m_script_isSet;
    bool m_script_isValid;

    QSet<QString> m_unicode_locale_attributes;
    bool m_unicode_locale_attributes_isSet;
    bool m_unicode_locale_attributes_isValid;

    QSet<QString> m_unicode_locale_keys;
    bool m_unicode_locale_keys_isSet;
    bool m_unicode_locale_keys_isValid;

    QString m_variant;
    bool m_variant_isSet;
    bool m_variant_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAILocale)

#endif // OAILocale_H
