/**
 * CallFire API Documentation
 * CallFire
 *
 * The version of the OpenAPI document: V2
 * Contact: support@callfire.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAINumber.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAINumber::OAINumber(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAINumber::OAINumber() {
    this->initializeModel();
}

OAINumber::~OAINumber() {}

void OAINumber::initializeModel() {

    m_national_format_isSet = false;
    m_national_format_isValid = false;

    m_number_isSet = false;
    m_number_isValid = false;

    m_region_isSet = false;
    m_region_isValid = false;

    m_send_email_on_create_isSet = false;
    m_send_email_on_create_isValid = false;

    m_toll_free_isSet = false;
    m_toll_free_isValid = false;
}

void OAINumber::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAINumber::fromJsonObject(QJsonObject json) {

    m_national_format_isValid = ::OpenAPI::fromJsonValue(m_national_format, json[QString("nationalFormat")]);
    m_national_format_isSet = !json[QString("nationalFormat")].isNull() && m_national_format_isValid;

    m_number_isValid = ::OpenAPI::fromJsonValue(m_number, json[QString("number")]);
    m_number_isSet = !json[QString("number")].isNull() && m_number_isValid;

    m_region_isValid = ::OpenAPI::fromJsonValue(m_region, json[QString("region")]);
    m_region_isSet = !json[QString("region")].isNull() && m_region_isValid;

    m_send_email_on_create_isValid = ::OpenAPI::fromJsonValue(m_send_email_on_create, json[QString("sendEmailOnCreate")]);
    m_send_email_on_create_isSet = !json[QString("sendEmailOnCreate")].isNull() && m_send_email_on_create_isValid;

    m_toll_free_isValid = ::OpenAPI::fromJsonValue(m_toll_free, json[QString("tollFree")]);
    m_toll_free_isSet = !json[QString("tollFree")].isNull() && m_toll_free_isValid;
}

QString OAINumber::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAINumber::asJsonObject() const {
    QJsonObject obj;
    if (m_national_format_isSet) {
        obj.insert(QString("nationalFormat"), ::OpenAPI::toJsonValue(m_national_format));
    }
    if (m_number_isSet) {
        obj.insert(QString("number"), ::OpenAPI::toJsonValue(m_number));
    }
    if (m_region.isSet()) {
        obj.insert(QString("region"), ::OpenAPI::toJsonValue(m_region));
    }
    if (m_send_email_on_create_isSet) {
        obj.insert(QString("sendEmailOnCreate"), ::OpenAPI::toJsonValue(m_send_email_on_create));
    }
    if (m_toll_free_isSet) {
        obj.insert(QString("tollFree"), ::OpenAPI::toJsonValue(m_toll_free));
    }
    return obj;
}

QString OAINumber::getNationalFormat() const {
    return m_national_format;
}
void OAINumber::setNationalFormat(const QString &national_format) {
    m_national_format = national_format;
    m_national_format_isSet = true;
}

bool OAINumber::is_national_format_Set() const{
    return m_national_format_isSet;
}

bool OAINumber::is_national_format_Valid() const{
    return m_national_format_isValid;
}

QString OAINumber::getNumber() const {
    return m_number;
}
void OAINumber::setNumber(const QString &number) {
    m_number = number;
    m_number_isSet = true;
}

bool OAINumber::is_number_Set() const{
    return m_number_isSet;
}

bool OAINumber::is_number_Valid() const{
    return m_number_isValid;
}

OAIRegion OAINumber::getRegion() const {
    return m_region;
}
void OAINumber::setRegion(const OAIRegion &region) {
    m_region = region;
    m_region_isSet = true;
}

bool OAINumber::is_region_Set() const{
    return m_region_isSet;
}

bool OAINumber::is_region_Valid() const{
    return m_region_isValid;
}

bool OAINumber::isSendEmailOnCreate() const {
    return m_send_email_on_create;
}
void OAINumber::setSendEmailOnCreate(const bool &send_email_on_create) {
    m_send_email_on_create = send_email_on_create;
    m_send_email_on_create_isSet = true;
}

bool OAINumber::is_send_email_on_create_Set() const{
    return m_send_email_on_create_isSet;
}

bool OAINumber::is_send_email_on_create_Valid() const{
    return m_send_email_on_create_isValid;
}

bool OAINumber::isTollFree() const {
    return m_toll_free;
}
void OAINumber::setTollFree(const bool &toll_free) {
    m_toll_free = toll_free;
    m_toll_free_isSet = true;
}

bool OAINumber::is_toll_free_Set() const{
    return m_toll_free_isSet;
}

bool OAINumber::is_toll_free_Valid() const{
    return m_toll_free_isValid;
}

bool OAINumber::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_national_format_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_number_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_region.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_send_email_on_create_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_toll_free_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAINumber::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
