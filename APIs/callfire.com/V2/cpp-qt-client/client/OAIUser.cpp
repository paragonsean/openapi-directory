/**
 * CallFire API Documentation
 * CallFire
 *
 * The version of the OpenAPI document: V2
 * Contact: support@callfire.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIUser.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIUser::OAIUser(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIUser::OAIUser() {
    this->initializeModel();
}

OAIUser::~OAIUser() {}

void OAIUser::initializeModel() {

    m_account_isSet = false;
    m_account_isValid = false;

    m_account_holder_isSet = false;
    m_account_holder_isValid = false;

    m_account_id_isSet = false;
    m_account_id_isValid = false;

    m_active_isSet = false;
    m_active_isValid = false;

    m_api_password_last_four_isSet = false;
    m_api_password_last_four_isValid = false;

    m_brand_isSet = false;
    m_brand_isValid = false;

    m_ccc_agent_isSet = false;
    m_ccc_agent_isValid = false;

    m_created_isSet = false;
    m_created_isValid = false;

    m_date_of_birth_isSet = false;
    m_date_of_birth_isValid = false;

    m_disabled_isSet = false;
    m_disabled_isValid = false;

    m_first_name_isSet = false;
    m_first_name_isValid = false;

    m_full_name_isSet = false;
    m_full_name_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_industry_name_isSet = false;
    m_industry_name_isValid = false;

    m_last_name_isSet = false;
    m_last_name_isValid = false;

    m_music_on_hold_isSet = false;
    m_music_on_hold_isValid = false;

    m_notification_sound_enabled_isSet = false;
    m_notification_sound_enabled_isValid = false;

    m_opt_in_isSet = false;
    m_opt_in_isValid = false;

    m_opt_in_number_isSet = false;
    m_opt_in_number_isValid = false;

    m_permissions_isSet = false;
    m_permissions_isValid = false;

    m_phone_number_isSet = false;
    m_phone_number_isValid = false;

    m_phone_number_extension_isSet = false;
    m_phone_number_extension_isValid = false;

    m_phone_number_extension_delay_sec_isSet = false;
    m_phone_number_extension_delay_sec_isValid = false;

    m_phone_number_for_display_isSet = false;
    m_phone_number_for_display_isValid = false;

    m_phone_number_verified_isSet = false;
    m_phone_number_verified_isValid = false;

    m_profile_email_isSet = false;
    m_profile_email_isValid = false;

    m_signup_complete_isSet = false;
    m_signup_complete_isValid = false;

    m_soa_user_isSet = false;
    m_soa_user_isValid = false;

    m_team_seat_isSet = false;
    m_team_seat_isValid = false;

    m_user_state_isSet = false;
    m_user_state_isValid = false;

    m_user_state_pending_isSet = false;
    m_user_state_pending_isValid = false;

    m_visible_isSet = false;
    m_visible_isValid = false;
}

void OAIUser::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIUser::fromJsonObject(QJsonObject json) {

    m_account_isValid = ::OpenAPI::fromJsonValue(m_account, json[QString("account")]);
    m_account_isSet = !json[QString("account")].isNull() && m_account_isValid;

    m_account_holder_isValid = ::OpenAPI::fromJsonValue(m_account_holder, json[QString("accountHolder")]);
    m_account_holder_isSet = !json[QString("accountHolder")].isNull() && m_account_holder_isValid;

    m_account_id_isValid = ::OpenAPI::fromJsonValue(m_account_id, json[QString("accountId")]);
    m_account_id_isSet = !json[QString("accountId")].isNull() && m_account_id_isValid;

    m_active_isValid = ::OpenAPI::fromJsonValue(m_active, json[QString("active")]);
    m_active_isSet = !json[QString("active")].isNull() && m_active_isValid;

    m_api_password_last_four_isValid = ::OpenAPI::fromJsonValue(m_api_password_last_four, json[QString("apiPasswordLastFour")]);
    m_api_password_last_four_isSet = !json[QString("apiPasswordLastFour")].isNull() && m_api_password_last_four_isValid;

    m_brand_isValid = ::OpenAPI::fromJsonValue(m_brand, json[QString("brand")]);
    m_brand_isSet = !json[QString("brand")].isNull() && m_brand_isValid;

    m_ccc_agent_isValid = ::OpenAPI::fromJsonValue(m_ccc_agent, json[QString("cccAgent")]);
    m_ccc_agent_isSet = !json[QString("cccAgent")].isNull() && m_ccc_agent_isValid;

    m_created_isValid = ::OpenAPI::fromJsonValue(m_created, json[QString("created")]);
    m_created_isSet = !json[QString("created")].isNull() && m_created_isValid;

    m_date_of_birth_isValid = ::OpenAPI::fromJsonValue(m_date_of_birth, json[QString("dateOfBirth")]);
    m_date_of_birth_isSet = !json[QString("dateOfBirth")].isNull() && m_date_of_birth_isValid;

    m_disabled_isValid = ::OpenAPI::fromJsonValue(m_disabled, json[QString("disabled")]);
    m_disabled_isSet = !json[QString("disabled")].isNull() && m_disabled_isValid;

    m_first_name_isValid = ::OpenAPI::fromJsonValue(m_first_name, json[QString("firstName")]);
    m_first_name_isSet = !json[QString("firstName")].isNull() && m_first_name_isValid;

    m_full_name_isValid = ::OpenAPI::fromJsonValue(m_full_name, json[QString("fullName")]);
    m_full_name_isSet = !json[QString("fullName")].isNull() && m_full_name_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_industry_name_isValid = ::OpenAPI::fromJsonValue(m_industry_name, json[QString("industryName")]);
    m_industry_name_isSet = !json[QString("industryName")].isNull() && m_industry_name_isValid;

    m_last_name_isValid = ::OpenAPI::fromJsonValue(m_last_name, json[QString("lastName")]);
    m_last_name_isSet = !json[QString("lastName")].isNull() && m_last_name_isValid;

    m_music_on_hold_isValid = ::OpenAPI::fromJsonValue(m_music_on_hold, json[QString("musicOnHold")]);
    m_music_on_hold_isSet = !json[QString("musicOnHold")].isNull() && m_music_on_hold_isValid;

    m_notification_sound_enabled_isValid = ::OpenAPI::fromJsonValue(m_notification_sound_enabled, json[QString("notificationSoundEnabled")]);
    m_notification_sound_enabled_isSet = !json[QString("notificationSoundEnabled")].isNull() && m_notification_sound_enabled_isValid;

    m_opt_in_isValid = ::OpenAPI::fromJsonValue(m_opt_in, json[QString("optIn")]);
    m_opt_in_isSet = !json[QString("optIn")].isNull() && m_opt_in_isValid;

    m_opt_in_number_isValid = ::OpenAPI::fromJsonValue(m_opt_in_number, json[QString("optInNumber")]);
    m_opt_in_number_isSet = !json[QString("optInNumber")].isNull() && m_opt_in_number_isValid;

    m_permissions_isValid = ::OpenAPI::fromJsonValue(m_permissions, json[QString("permissions")]);
    m_permissions_isSet = !json[QString("permissions")].isNull() && m_permissions_isValid;

    m_phone_number_isValid = ::OpenAPI::fromJsonValue(m_phone_number, json[QString("phoneNumber")]);
    m_phone_number_isSet = !json[QString("phoneNumber")].isNull() && m_phone_number_isValid;

    m_phone_number_extension_isValid = ::OpenAPI::fromJsonValue(m_phone_number_extension, json[QString("phoneNumberExtension")]);
    m_phone_number_extension_isSet = !json[QString("phoneNumberExtension")].isNull() && m_phone_number_extension_isValid;

    m_phone_number_extension_delay_sec_isValid = ::OpenAPI::fromJsonValue(m_phone_number_extension_delay_sec, json[QString("phoneNumberExtensionDelaySec")]);
    m_phone_number_extension_delay_sec_isSet = !json[QString("phoneNumberExtensionDelaySec")].isNull() && m_phone_number_extension_delay_sec_isValid;

    m_phone_number_for_display_isValid = ::OpenAPI::fromJsonValue(m_phone_number_for_display, json[QString("phoneNumberForDisplay")]);
    m_phone_number_for_display_isSet = !json[QString("phoneNumberForDisplay")].isNull() && m_phone_number_for_display_isValid;

    m_phone_number_verified_isValid = ::OpenAPI::fromJsonValue(m_phone_number_verified, json[QString("phoneNumberVerified")]);
    m_phone_number_verified_isSet = !json[QString("phoneNumberVerified")].isNull() && m_phone_number_verified_isValid;

    m_profile_email_isValid = ::OpenAPI::fromJsonValue(m_profile_email, json[QString("profileEmail")]);
    m_profile_email_isSet = !json[QString("profileEmail")].isNull() && m_profile_email_isValid;

    m_signup_complete_isValid = ::OpenAPI::fromJsonValue(m_signup_complete, json[QString("signupComplete")]);
    m_signup_complete_isSet = !json[QString("signupComplete")].isNull() && m_signup_complete_isValid;

    m_soa_user_isValid = ::OpenAPI::fromJsonValue(m_soa_user, json[QString("soaUser")]);
    m_soa_user_isSet = !json[QString("soaUser")].isNull() && m_soa_user_isValid;

    m_team_seat_isValid = ::OpenAPI::fromJsonValue(m_team_seat, json[QString("teamSeat")]);
    m_team_seat_isSet = !json[QString("teamSeat")].isNull() && m_team_seat_isValid;

    m_user_state_isValid = ::OpenAPI::fromJsonValue(m_user_state, json[QString("userState")]);
    m_user_state_isSet = !json[QString("userState")].isNull() && m_user_state_isValid;

    m_user_state_pending_isValid = ::OpenAPI::fromJsonValue(m_user_state_pending, json[QString("userStatePending")]);
    m_user_state_pending_isSet = !json[QString("userStatePending")].isNull() && m_user_state_pending_isValid;

    m_visible_isValid = ::OpenAPI::fromJsonValue(m_visible, json[QString("visible")]);
    m_visible_isSet = !json[QString("visible")].isNull() && m_visible_isValid;
}

QString OAIUser::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIUser::asJsonObject() const {
    QJsonObject obj;
    if (m_account.isSet()) {
        obj.insert(QString("account"), ::OpenAPI::toJsonValue(m_account));
    }
    if (m_account_holder_isSet) {
        obj.insert(QString("accountHolder"), ::OpenAPI::toJsonValue(m_account_holder));
    }
    if (m_account_id_isSet) {
        obj.insert(QString("accountId"), ::OpenAPI::toJsonValue(m_account_id));
    }
    if (m_active_isSet) {
        obj.insert(QString("active"), ::OpenAPI::toJsonValue(m_active));
    }
    if (m_api_password_last_four_isSet) {
        obj.insert(QString("apiPasswordLastFour"), ::OpenAPI::toJsonValue(m_api_password_last_four));
    }
    if (m_brand_isSet) {
        obj.insert(QString("brand"), ::OpenAPI::toJsonValue(m_brand));
    }
    if (m_ccc_agent_isSet) {
        obj.insert(QString("cccAgent"), ::OpenAPI::toJsonValue(m_ccc_agent));
    }
    if (m_created_isSet) {
        obj.insert(QString("created"), ::OpenAPI::toJsonValue(m_created));
    }
    if (m_date_of_birth_isSet) {
        obj.insert(QString("dateOfBirth"), ::OpenAPI::toJsonValue(m_date_of_birth));
    }
    if (m_disabled_isSet) {
        obj.insert(QString("disabled"), ::OpenAPI::toJsonValue(m_disabled));
    }
    if (m_first_name_isSet) {
        obj.insert(QString("firstName"), ::OpenAPI::toJsonValue(m_first_name));
    }
    if (m_full_name_isSet) {
        obj.insert(QString("fullName"), ::OpenAPI::toJsonValue(m_full_name));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_industry_name_isSet) {
        obj.insert(QString("industryName"), ::OpenAPI::toJsonValue(m_industry_name));
    }
    if (m_last_name_isSet) {
        obj.insert(QString("lastName"), ::OpenAPI::toJsonValue(m_last_name));
    }
    if (m_music_on_hold_isSet) {
        obj.insert(QString("musicOnHold"), ::OpenAPI::toJsonValue(m_music_on_hold));
    }
    if (m_notification_sound_enabled_isSet) {
        obj.insert(QString("notificationSoundEnabled"), ::OpenAPI::toJsonValue(m_notification_sound_enabled));
    }
    if (m_opt_in_isSet) {
        obj.insert(QString("optIn"), ::OpenAPI::toJsonValue(m_opt_in));
    }
    if (m_opt_in_number_isSet) {
        obj.insert(QString("optInNumber"), ::OpenAPI::toJsonValue(m_opt_in_number));
    }
    if (m_permissions.size() > 0) {
        obj.insert(QString("permissions"), ::OpenAPI::toJsonValue(m_permissions));
    }
    if (m_phone_number_isSet) {
        obj.insert(QString("phoneNumber"), ::OpenAPI::toJsonValue(m_phone_number));
    }
    if (m_phone_number_extension_isSet) {
        obj.insert(QString("phoneNumberExtension"), ::OpenAPI::toJsonValue(m_phone_number_extension));
    }
    if (m_phone_number_extension_delay_sec_isSet) {
        obj.insert(QString("phoneNumberExtensionDelaySec"), ::OpenAPI::toJsonValue(m_phone_number_extension_delay_sec));
    }
    if (m_phone_number_for_display_isSet) {
        obj.insert(QString("phoneNumberForDisplay"), ::OpenAPI::toJsonValue(m_phone_number_for_display));
    }
    if (m_phone_number_verified_isSet) {
        obj.insert(QString("phoneNumberVerified"), ::OpenAPI::toJsonValue(m_phone_number_verified));
    }
    if (m_profile_email_isSet) {
        obj.insert(QString("profileEmail"), ::OpenAPI::toJsonValue(m_profile_email));
    }
    if (m_signup_complete_isSet) {
        obj.insert(QString("signupComplete"), ::OpenAPI::toJsonValue(m_signup_complete));
    }
    if (m_soa_user.isSet()) {
        obj.insert(QString("soaUser"), ::OpenAPI::toJsonValue(m_soa_user));
    }
    if (m_team_seat_isSet) {
        obj.insert(QString("teamSeat"), ::OpenAPI::toJsonValue(m_team_seat));
    }
    if (m_user_state_isSet) {
        obj.insert(QString("userState"), ::OpenAPI::toJsonValue(m_user_state));
    }
    if (m_user_state_pending_isSet) {
        obj.insert(QString("userStatePending"), ::OpenAPI::toJsonValue(m_user_state_pending));
    }
    if (m_visible_isSet) {
        obj.insert(QString("visible"), ::OpenAPI::toJsonValue(m_visible));
    }
    return obj;
}

OAIAccount OAIUser::getAccount() const {
    return m_account;
}
void OAIUser::setAccount(const OAIAccount &account) {
    m_account = account;
    m_account_isSet = true;
}

bool OAIUser::is_account_Set() const{
    return m_account_isSet;
}

bool OAIUser::is_account_Valid() const{
    return m_account_isValid;
}

bool OAIUser::isAccountHolder() const {
    return m_account_holder;
}
void OAIUser::setAccountHolder(const bool &account_holder) {
    m_account_holder = account_holder;
    m_account_holder_isSet = true;
}

bool OAIUser::is_account_holder_Set() const{
    return m_account_holder_isSet;
}

bool OAIUser::is_account_holder_Valid() const{
    return m_account_holder_isValid;
}

qint64 OAIUser::getAccountId() const {
    return m_account_id;
}
void OAIUser::setAccountId(const qint64 &account_id) {
    m_account_id = account_id;
    m_account_id_isSet = true;
}

bool OAIUser::is_account_id_Set() const{
    return m_account_id_isSet;
}

bool OAIUser::is_account_id_Valid() const{
    return m_account_id_isValid;
}

bool OAIUser::isActive() const {
    return m_active;
}
void OAIUser::setActive(const bool &active) {
    m_active = active;
    m_active_isSet = true;
}

bool OAIUser::is_active_Set() const{
    return m_active_isSet;
}

bool OAIUser::is_active_Valid() const{
    return m_active_isValid;
}

QString OAIUser::getApiPasswordLastFour() const {
    return m_api_password_last_four;
}
void OAIUser::setApiPasswordLastFour(const QString &api_password_last_four) {
    m_api_password_last_four = api_password_last_four;
    m_api_password_last_four_isSet = true;
}

bool OAIUser::is_api_password_last_four_Set() const{
    return m_api_password_last_four_isSet;
}

bool OAIUser::is_api_password_last_four_Valid() const{
    return m_api_password_last_four_isValid;
}

QString OAIUser::getBrand() const {
    return m_brand;
}
void OAIUser::setBrand(const QString &brand) {
    m_brand = brand;
    m_brand_isSet = true;
}

bool OAIUser::is_brand_Set() const{
    return m_brand_isSet;
}

bool OAIUser::is_brand_Valid() const{
    return m_brand_isValid;
}

bool OAIUser::isCccAgent() const {
    return m_ccc_agent;
}
void OAIUser::setCccAgent(const bool &ccc_agent) {
    m_ccc_agent = ccc_agent;
    m_ccc_agent_isSet = true;
}

bool OAIUser::is_ccc_agent_Set() const{
    return m_ccc_agent_isSet;
}

bool OAIUser::is_ccc_agent_Valid() const{
    return m_ccc_agent_isValid;
}

QDateTime OAIUser::getCreated() const {
    return m_created;
}
void OAIUser::setCreated(const QDateTime &created) {
    m_created = created;
    m_created_isSet = true;
}

bool OAIUser::is_created_Set() const{
    return m_created_isSet;
}

bool OAIUser::is_created_Valid() const{
    return m_created_isValid;
}

QDateTime OAIUser::getDateOfBirth() const {
    return m_date_of_birth;
}
void OAIUser::setDateOfBirth(const QDateTime &date_of_birth) {
    m_date_of_birth = date_of_birth;
    m_date_of_birth_isSet = true;
}

bool OAIUser::is_date_of_birth_Set() const{
    return m_date_of_birth_isSet;
}

bool OAIUser::is_date_of_birth_Valid() const{
    return m_date_of_birth_isValid;
}

bool OAIUser::isDisabled() const {
    return m_disabled;
}
void OAIUser::setDisabled(const bool &disabled) {
    m_disabled = disabled;
    m_disabled_isSet = true;
}

bool OAIUser::is_disabled_Set() const{
    return m_disabled_isSet;
}

bool OAIUser::is_disabled_Valid() const{
    return m_disabled_isValid;
}

QString OAIUser::getFirstName() const {
    return m_first_name;
}
void OAIUser::setFirstName(const QString &first_name) {
    m_first_name = first_name;
    m_first_name_isSet = true;
}

bool OAIUser::is_first_name_Set() const{
    return m_first_name_isSet;
}

bool OAIUser::is_first_name_Valid() const{
    return m_first_name_isValid;
}

QString OAIUser::getFullName() const {
    return m_full_name;
}
void OAIUser::setFullName(const QString &full_name) {
    m_full_name = full_name;
    m_full_name_isSet = true;
}

bool OAIUser::is_full_name_Set() const{
    return m_full_name_isSet;
}

bool OAIUser::is_full_name_Valid() const{
    return m_full_name_isValid;
}

qint64 OAIUser::getId() const {
    return m_id;
}
void OAIUser::setId(const qint64 &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIUser::is_id_Set() const{
    return m_id_isSet;
}

bool OAIUser::is_id_Valid() const{
    return m_id_isValid;
}

QString OAIUser::getIndustryName() const {
    return m_industry_name;
}
void OAIUser::setIndustryName(const QString &industry_name) {
    m_industry_name = industry_name;
    m_industry_name_isSet = true;
}

bool OAIUser::is_industry_name_Set() const{
    return m_industry_name_isSet;
}

bool OAIUser::is_industry_name_Valid() const{
    return m_industry_name_isValid;
}

QString OAIUser::getLastName() const {
    return m_last_name;
}
void OAIUser::setLastName(const QString &last_name) {
    m_last_name = last_name;
    m_last_name_isSet = true;
}

bool OAIUser::is_last_name_Set() const{
    return m_last_name_isSet;
}

bool OAIUser::is_last_name_Valid() const{
    return m_last_name_isValid;
}

QString OAIUser::getMusicOnHold() const {
    return m_music_on_hold;
}
void OAIUser::setMusicOnHold(const QString &music_on_hold) {
    m_music_on_hold = music_on_hold;
    m_music_on_hold_isSet = true;
}

bool OAIUser::is_music_on_hold_Set() const{
    return m_music_on_hold_isSet;
}

bool OAIUser::is_music_on_hold_Valid() const{
    return m_music_on_hold_isValid;
}

bool OAIUser::isNotificationSoundEnabled() const {
    return m_notification_sound_enabled;
}
void OAIUser::setNotificationSoundEnabled(const bool &notification_sound_enabled) {
    m_notification_sound_enabled = notification_sound_enabled;
    m_notification_sound_enabled_isSet = true;
}

bool OAIUser::is_notification_sound_enabled_Set() const{
    return m_notification_sound_enabled_isSet;
}

bool OAIUser::is_notification_sound_enabled_Valid() const{
    return m_notification_sound_enabled_isValid;
}

bool OAIUser::isOptIn() const {
    return m_opt_in;
}
void OAIUser::setOptIn(const bool &opt_in) {
    m_opt_in = opt_in;
    m_opt_in_isSet = true;
}

bool OAIUser::is_opt_in_Set() const{
    return m_opt_in_isSet;
}

bool OAIUser::is_opt_in_Valid() const{
    return m_opt_in_isValid;
}

QString OAIUser::getOptInNumber() const {
    return m_opt_in_number;
}
void OAIUser::setOptInNumber(const QString &opt_in_number) {
    m_opt_in_number = opt_in_number;
    m_opt_in_number_isSet = true;
}

bool OAIUser::is_opt_in_number_Set() const{
    return m_opt_in_number_isSet;
}

bool OAIUser::is_opt_in_number_Valid() const{
    return m_opt_in_number_isValid;
}

QSet<QString> OAIUser::getPermissions() const {
    return m_permissions;
}
void OAIUser::setPermissions(const QSet<QString> &permissions) {
    m_permissions = permissions;
    m_permissions_isSet = true;
}

bool OAIUser::is_permissions_Set() const{
    return m_permissions_isSet;
}

bool OAIUser::is_permissions_Valid() const{
    return m_permissions_isValid;
}

QString OAIUser::getPhoneNumber() const {
    return m_phone_number;
}
void OAIUser::setPhoneNumber(const QString &phone_number) {
    m_phone_number = phone_number;
    m_phone_number_isSet = true;
}

bool OAIUser::is_phone_number_Set() const{
    return m_phone_number_isSet;
}

bool OAIUser::is_phone_number_Valid() const{
    return m_phone_number_isValid;
}

QString OAIUser::getPhoneNumberExtension() const {
    return m_phone_number_extension;
}
void OAIUser::setPhoneNumberExtension(const QString &phone_number_extension) {
    m_phone_number_extension = phone_number_extension;
    m_phone_number_extension_isSet = true;
}

bool OAIUser::is_phone_number_extension_Set() const{
    return m_phone_number_extension_isSet;
}

bool OAIUser::is_phone_number_extension_Valid() const{
    return m_phone_number_extension_isValid;
}

qint32 OAIUser::getPhoneNumberExtensionDelaySec() const {
    return m_phone_number_extension_delay_sec;
}
void OAIUser::setPhoneNumberExtensionDelaySec(const qint32 &phone_number_extension_delay_sec) {
    m_phone_number_extension_delay_sec = phone_number_extension_delay_sec;
    m_phone_number_extension_delay_sec_isSet = true;
}

bool OAIUser::is_phone_number_extension_delay_sec_Set() const{
    return m_phone_number_extension_delay_sec_isSet;
}

bool OAIUser::is_phone_number_extension_delay_sec_Valid() const{
    return m_phone_number_extension_delay_sec_isValid;
}

QString OAIUser::getPhoneNumberForDisplay() const {
    return m_phone_number_for_display;
}
void OAIUser::setPhoneNumberForDisplay(const QString &phone_number_for_display) {
    m_phone_number_for_display = phone_number_for_display;
    m_phone_number_for_display_isSet = true;
}

bool OAIUser::is_phone_number_for_display_Set() const{
    return m_phone_number_for_display_isSet;
}

bool OAIUser::is_phone_number_for_display_Valid() const{
    return m_phone_number_for_display_isValid;
}

bool OAIUser::isPhoneNumberVerified() const {
    return m_phone_number_verified;
}
void OAIUser::setPhoneNumberVerified(const bool &phone_number_verified) {
    m_phone_number_verified = phone_number_verified;
    m_phone_number_verified_isSet = true;
}

bool OAIUser::is_phone_number_verified_Set() const{
    return m_phone_number_verified_isSet;
}

bool OAIUser::is_phone_number_verified_Valid() const{
    return m_phone_number_verified_isValid;
}

QString OAIUser::getProfileEmail() const {
    return m_profile_email;
}
void OAIUser::setProfileEmail(const QString &profile_email) {
    m_profile_email = profile_email;
    m_profile_email_isSet = true;
}

bool OAIUser::is_profile_email_Set() const{
    return m_profile_email_isSet;
}

bool OAIUser::is_profile_email_Valid() const{
    return m_profile_email_isValid;
}

bool OAIUser::isSignupComplete() const {
    return m_signup_complete;
}
void OAIUser::setSignupComplete(const bool &signup_complete) {
    m_signup_complete = signup_complete;
    m_signup_complete_isSet = true;
}

bool OAIUser::is_signup_complete_Set() const{
    return m_signup_complete_isSet;
}

bool OAIUser::is_signup_complete_Valid() const{
    return m_signup_complete_isValid;
}

OAIUser OAIUser::getSoaUser() const {
    return m_soa_user;
}
void OAIUser::setSoaUser(const OAIUser &soa_user) {
    m_soa_user = soa_user;
    m_soa_user_isSet = true;
}

bool OAIUser::is_soa_user_Set() const{
    return m_soa_user_isSet;
}

bool OAIUser::is_soa_user_Valid() const{
    return m_soa_user_isValid;
}

bool OAIUser::isTeamSeat() const {
    return m_team_seat;
}
void OAIUser::setTeamSeat(const bool &team_seat) {
    m_team_seat = team_seat;
    m_team_seat_isSet = true;
}

bool OAIUser::is_team_seat_Set() const{
    return m_team_seat_isSet;
}

bool OAIUser::is_team_seat_Valid() const{
    return m_team_seat_isValid;
}

QString OAIUser::getUserState() const {
    return m_user_state;
}
void OAIUser::setUserState(const QString &user_state) {
    m_user_state = user_state;
    m_user_state_isSet = true;
}

bool OAIUser::is_user_state_Set() const{
    return m_user_state_isSet;
}

bool OAIUser::is_user_state_Valid() const{
    return m_user_state_isValid;
}

bool OAIUser::isUserStatePending() const {
    return m_user_state_pending;
}
void OAIUser::setUserStatePending(const bool &user_state_pending) {
    m_user_state_pending = user_state_pending;
    m_user_state_pending_isSet = true;
}

bool OAIUser::is_user_state_pending_Set() const{
    return m_user_state_pending_isSet;
}

bool OAIUser::is_user_state_pending_Valid() const{
    return m_user_state_pending_isValid;
}

bool OAIUser::isVisible() const {
    return m_visible;
}
void OAIUser::setVisible(const bool &visible) {
    m_visible = visible;
    m_visible_isSet = true;
}

bool OAIUser::is_visible_Set() const{
    return m_visible_isSet;
}

bool OAIUser::is_visible_Valid() const{
    return m_visible_isValid;
}

bool OAIUser::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_account.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_account_holder_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_account_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_active_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_api_password_last_four_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_brand_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_ccc_agent_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_created_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_date_of_birth_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_disabled_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_first_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_full_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_industry_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_music_on_hold_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_notification_sound_enabled_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_opt_in_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_opt_in_number_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_permissions.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_phone_number_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_phone_number_extension_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_phone_number_extension_delay_sec_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_phone_number_for_display_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_phone_number_verified_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_profile_email_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_signup_complete_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_soa_user.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_team_seat_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_user_state_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_user_state_pending_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_visible_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIUser::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
