/**
 * CallFire API Documentation
 * CallFire
 *
 * The version of the OpenAPI document: V2
 * Contact: support@callfire.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAITextBroadcastStatsDto.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAITextBroadcastStatsDto::OAITextBroadcastStatsDto(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAITextBroadcastStatsDto::OAITextBroadcastStatsDto() {
    this->initializeModel();
}

OAITextBroadcastStatsDto::~OAITextBroadcastStatsDto() {}

void OAITextBroadcastStatsDto::initializeModel() {

    m_billed_amount_isSet = false;
    m_billed_amount_isValid = false;

    m_do_not_text_count_isSet = false;
    m_do_not_text_count_isValid = false;

    m_error_count_isSet = false;
    m_error_count_isValid = false;

    m_recieved_count_isSet = false;
    m_recieved_count_isValid = false;

    m_remaining_outbound_count_isSet = false;
    m_remaining_outbound_count_isValid = false;

    m_sent_count_isSet = false;
    m_sent_count_isValid = false;

    m_too_big_count_isSet = false;
    m_too_big_count_isValid = false;

    m_total_outbound_count_isSet = false;
    m_total_outbound_count_isValid = false;

    m_unsent_count_isSet = false;
    m_unsent_count_isValid = false;
}

void OAITextBroadcastStatsDto::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAITextBroadcastStatsDto::fromJsonObject(QJsonObject json) {

    m_billed_amount_isValid = ::OpenAPI::fromJsonValue(m_billed_amount, json[QString("billedAmount")]);
    m_billed_amount_isSet = !json[QString("billedAmount")].isNull() && m_billed_amount_isValid;

    m_do_not_text_count_isValid = ::OpenAPI::fromJsonValue(m_do_not_text_count, json[QString("doNotTextCount")]);
    m_do_not_text_count_isSet = !json[QString("doNotTextCount")].isNull() && m_do_not_text_count_isValid;

    m_error_count_isValid = ::OpenAPI::fromJsonValue(m_error_count, json[QString("errorCount")]);
    m_error_count_isSet = !json[QString("errorCount")].isNull() && m_error_count_isValid;

    m_recieved_count_isValid = ::OpenAPI::fromJsonValue(m_recieved_count, json[QString("recievedCount")]);
    m_recieved_count_isSet = !json[QString("recievedCount")].isNull() && m_recieved_count_isValid;

    m_remaining_outbound_count_isValid = ::OpenAPI::fromJsonValue(m_remaining_outbound_count, json[QString("remainingOutboundCount")]);
    m_remaining_outbound_count_isSet = !json[QString("remainingOutboundCount")].isNull() && m_remaining_outbound_count_isValid;

    m_sent_count_isValid = ::OpenAPI::fromJsonValue(m_sent_count, json[QString("sentCount")]);
    m_sent_count_isSet = !json[QString("sentCount")].isNull() && m_sent_count_isValid;

    m_too_big_count_isValid = ::OpenAPI::fromJsonValue(m_too_big_count, json[QString("tooBigCount")]);
    m_too_big_count_isSet = !json[QString("tooBigCount")].isNull() && m_too_big_count_isValid;

    m_total_outbound_count_isValid = ::OpenAPI::fromJsonValue(m_total_outbound_count, json[QString("totalOutboundCount")]);
    m_total_outbound_count_isSet = !json[QString("totalOutboundCount")].isNull() && m_total_outbound_count_isValid;

    m_unsent_count_isValid = ::OpenAPI::fromJsonValue(m_unsent_count, json[QString("unsentCount")]);
    m_unsent_count_isSet = !json[QString("unsentCount")].isNull() && m_unsent_count_isValid;
}

QString OAITextBroadcastStatsDto::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAITextBroadcastStatsDto::asJsonObject() const {
    QJsonObject obj;
    if (m_billed_amount_isSet) {
        obj.insert(QString("billedAmount"), ::OpenAPI::toJsonValue(m_billed_amount));
    }
    if (m_do_not_text_count_isSet) {
        obj.insert(QString("doNotTextCount"), ::OpenAPI::toJsonValue(m_do_not_text_count));
    }
    if (m_error_count_isSet) {
        obj.insert(QString("errorCount"), ::OpenAPI::toJsonValue(m_error_count));
    }
    if (m_recieved_count_isSet) {
        obj.insert(QString("recievedCount"), ::OpenAPI::toJsonValue(m_recieved_count));
    }
    if (m_remaining_outbound_count_isSet) {
        obj.insert(QString("remainingOutboundCount"), ::OpenAPI::toJsonValue(m_remaining_outbound_count));
    }
    if (m_sent_count_isSet) {
        obj.insert(QString("sentCount"), ::OpenAPI::toJsonValue(m_sent_count));
    }
    if (m_too_big_count_isSet) {
        obj.insert(QString("tooBigCount"), ::OpenAPI::toJsonValue(m_too_big_count));
    }
    if (m_total_outbound_count_isSet) {
        obj.insert(QString("totalOutboundCount"), ::OpenAPI::toJsonValue(m_total_outbound_count));
    }
    if (m_unsent_count_isSet) {
        obj.insert(QString("unsentCount"), ::OpenAPI::toJsonValue(m_unsent_count));
    }
    return obj;
}

double OAITextBroadcastStatsDto::getBilledAmount() const {
    return m_billed_amount;
}
void OAITextBroadcastStatsDto::setBilledAmount(const double &billed_amount) {
    m_billed_amount = billed_amount;
    m_billed_amount_isSet = true;
}

bool OAITextBroadcastStatsDto::is_billed_amount_Set() const{
    return m_billed_amount_isSet;
}

bool OAITextBroadcastStatsDto::is_billed_amount_Valid() const{
    return m_billed_amount_isValid;
}

qint32 OAITextBroadcastStatsDto::getDoNotTextCount() const {
    return m_do_not_text_count;
}
void OAITextBroadcastStatsDto::setDoNotTextCount(const qint32 &do_not_text_count) {
    m_do_not_text_count = do_not_text_count;
    m_do_not_text_count_isSet = true;
}

bool OAITextBroadcastStatsDto::is_do_not_text_count_Set() const{
    return m_do_not_text_count_isSet;
}

bool OAITextBroadcastStatsDto::is_do_not_text_count_Valid() const{
    return m_do_not_text_count_isValid;
}

qint32 OAITextBroadcastStatsDto::getErrorCount() const {
    return m_error_count;
}
void OAITextBroadcastStatsDto::setErrorCount(const qint32 &error_count) {
    m_error_count = error_count;
    m_error_count_isSet = true;
}

bool OAITextBroadcastStatsDto::is_error_count_Set() const{
    return m_error_count_isSet;
}

bool OAITextBroadcastStatsDto::is_error_count_Valid() const{
    return m_error_count_isValid;
}

qint32 OAITextBroadcastStatsDto::getRecievedCount() const {
    return m_recieved_count;
}
void OAITextBroadcastStatsDto::setRecievedCount(const qint32 &recieved_count) {
    m_recieved_count = recieved_count;
    m_recieved_count_isSet = true;
}

bool OAITextBroadcastStatsDto::is_recieved_count_Set() const{
    return m_recieved_count_isSet;
}

bool OAITextBroadcastStatsDto::is_recieved_count_Valid() const{
    return m_recieved_count_isValid;
}

qint32 OAITextBroadcastStatsDto::getRemainingOutboundCount() const {
    return m_remaining_outbound_count;
}
void OAITextBroadcastStatsDto::setRemainingOutboundCount(const qint32 &remaining_outbound_count) {
    m_remaining_outbound_count = remaining_outbound_count;
    m_remaining_outbound_count_isSet = true;
}

bool OAITextBroadcastStatsDto::is_remaining_outbound_count_Set() const{
    return m_remaining_outbound_count_isSet;
}

bool OAITextBroadcastStatsDto::is_remaining_outbound_count_Valid() const{
    return m_remaining_outbound_count_isValid;
}

qint32 OAITextBroadcastStatsDto::getSentCount() const {
    return m_sent_count;
}
void OAITextBroadcastStatsDto::setSentCount(const qint32 &sent_count) {
    m_sent_count = sent_count;
    m_sent_count_isSet = true;
}

bool OAITextBroadcastStatsDto::is_sent_count_Set() const{
    return m_sent_count_isSet;
}

bool OAITextBroadcastStatsDto::is_sent_count_Valid() const{
    return m_sent_count_isValid;
}

qint32 OAITextBroadcastStatsDto::getTooBigCount() const {
    return m_too_big_count;
}
void OAITextBroadcastStatsDto::setTooBigCount(const qint32 &too_big_count) {
    m_too_big_count = too_big_count;
    m_too_big_count_isSet = true;
}

bool OAITextBroadcastStatsDto::is_too_big_count_Set() const{
    return m_too_big_count_isSet;
}

bool OAITextBroadcastStatsDto::is_too_big_count_Valid() const{
    return m_too_big_count_isValid;
}

qint32 OAITextBroadcastStatsDto::getTotalOutboundCount() const {
    return m_total_outbound_count;
}
void OAITextBroadcastStatsDto::setTotalOutboundCount(const qint32 &total_outbound_count) {
    m_total_outbound_count = total_outbound_count;
    m_total_outbound_count_isSet = true;
}

bool OAITextBroadcastStatsDto::is_total_outbound_count_Set() const{
    return m_total_outbound_count_isSet;
}

bool OAITextBroadcastStatsDto::is_total_outbound_count_Valid() const{
    return m_total_outbound_count_isValid;
}

qint32 OAITextBroadcastStatsDto::getUnsentCount() const {
    return m_unsent_count;
}
void OAITextBroadcastStatsDto::setUnsentCount(const qint32 &unsent_count) {
    m_unsent_count = unsent_count;
    m_unsent_count_isSet = true;
}

bool OAITextBroadcastStatsDto::is_unsent_count_Set() const{
    return m_unsent_count_isSet;
}

bool OAITextBroadcastStatsDto::is_unsent_count_Valid() const{
    return m_unsent_count_isValid;
}

bool OAITextBroadcastStatsDto::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_billed_amount_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_do_not_text_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_error_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_recieved_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_remaining_outbound_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sent_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_too_big_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_total_outbound_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_unsent_count_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAITextBroadcastStatsDto::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
