/**
 * CallFire API Documentation
 * CallFire
 *
 * The version of the OpenAPI document: V2
 * Contact: support@callfire.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAddDoNotContactRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAddDoNotContactRequest::OAIAddDoNotContactRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAddDoNotContactRequest::OAIAddDoNotContactRequest() {
    this->initializeModel();
}

OAIAddDoNotContactRequest::~OAIAddDoNotContactRequest() {}

void OAIAddDoNotContactRequest::initializeModel() {

    m_call_isSet = false;
    m_call_isValid = false;

    m_inbound_call_isSet = false;
    m_inbound_call_isValid = false;

    m_inbound_text_isSet = false;
    m_inbound_text_isValid = false;

    m_numbers_isSet = false;
    m_numbers_isValid = false;

    m_source_isSet = false;
    m_source_isValid = false;

    m_text_isSet = false;
    m_text_isValid = false;
}

void OAIAddDoNotContactRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAddDoNotContactRequest::fromJsonObject(QJsonObject json) {

    m_call_isValid = ::OpenAPI::fromJsonValue(m_call, json[QString("call")]);
    m_call_isSet = !json[QString("call")].isNull() && m_call_isValid;

    m_inbound_call_isValid = ::OpenAPI::fromJsonValue(m_inbound_call, json[QString("inboundCall")]);
    m_inbound_call_isSet = !json[QString("inboundCall")].isNull() && m_inbound_call_isValid;

    m_inbound_text_isValid = ::OpenAPI::fromJsonValue(m_inbound_text, json[QString("inboundText")]);
    m_inbound_text_isSet = !json[QString("inboundText")].isNull() && m_inbound_text_isValid;

    m_numbers_isValid = ::OpenAPI::fromJsonValue(m_numbers, json[QString("numbers")]);
    m_numbers_isSet = !json[QString("numbers")].isNull() && m_numbers_isValid;

    m_source_isValid = ::OpenAPI::fromJsonValue(m_source, json[QString("source")]);
    m_source_isSet = !json[QString("source")].isNull() && m_source_isValid;

    m_text_isValid = ::OpenAPI::fromJsonValue(m_text, json[QString("text")]);
    m_text_isSet = !json[QString("text")].isNull() && m_text_isValid;
}

QString OAIAddDoNotContactRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAddDoNotContactRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_call_isSet) {
        obj.insert(QString("call"), ::OpenAPI::toJsonValue(m_call));
    }
    if (m_inbound_call_isSet) {
        obj.insert(QString("inboundCall"), ::OpenAPI::toJsonValue(m_inbound_call));
    }
    if (m_inbound_text_isSet) {
        obj.insert(QString("inboundText"), ::OpenAPI::toJsonValue(m_inbound_text));
    }
    if (m_numbers.size() > 0) {
        obj.insert(QString("numbers"), ::OpenAPI::toJsonValue(m_numbers));
    }
    if (m_source_isSet) {
        obj.insert(QString("source"), ::OpenAPI::toJsonValue(m_source));
    }
    if (m_text_isSet) {
        obj.insert(QString("text"), ::OpenAPI::toJsonValue(m_text));
    }
    return obj;
}

bool OAIAddDoNotContactRequest::isCall() const {
    return m_call;
}
void OAIAddDoNotContactRequest::setCall(const bool &call) {
    m_call = call;
    m_call_isSet = true;
}

bool OAIAddDoNotContactRequest::is_call_Set() const{
    return m_call_isSet;
}

bool OAIAddDoNotContactRequest::is_call_Valid() const{
    return m_call_isValid;
}

bool OAIAddDoNotContactRequest::isInboundCall() const {
    return m_inbound_call;
}
void OAIAddDoNotContactRequest::setInboundCall(const bool &inbound_call) {
    m_inbound_call = inbound_call;
    m_inbound_call_isSet = true;
}

bool OAIAddDoNotContactRequest::is_inbound_call_Set() const{
    return m_inbound_call_isSet;
}

bool OAIAddDoNotContactRequest::is_inbound_call_Valid() const{
    return m_inbound_call_isValid;
}

bool OAIAddDoNotContactRequest::isInboundText() const {
    return m_inbound_text;
}
void OAIAddDoNotContactRequest::setInboundText(const bool &inbound_text) {
    m_inbound_text = inbound_text;
    m_inbound_text_isSet = true;
}

bool OAIAddDoNotContactRequest::is_inbound_text_Set() const{
    return m_inbound_text_isSet;
}

bool OAIAddDoNotContactRequest::is_inbound_text_Valid() const{
    return m_inbound_text_isValid;
}

QList<QString> OAIAddDoNotContactRequest::getNumbers() const {
    return m_numbers;
}
void OAIAddDoNotContactRequest::setNumbers(const QList<QString> &numbers) {
    m_numbers = numbers;
    m_numbers_isSet = true;
}

bool OAIAddDoNotContactRequest::is_numbers_Set() const{
    return m_numbers_isSet;
}

bool OAIAddDoNotContactRequest::is_numbers_Valid() const{
    return m_numbers_isValid;
}

QString OAIAddDoNotContactRequest::getSource() const {
    return m_source;
}
void OAIAddDoNotContactRequest::setSource(const QString &source) {
    m_source = source;
    m_source_isSet = true;
}

bool OAIAddDoNotContactRequest::is_source_Set() const{
    return m_source_isSet;
}

bool OAIAddDoNotContactRequest::is_source_Valid() const{
    return m_source_isValid;
}

bool OAIAddDoNotContactRequest::isText() const {
    return m_text;
}
void OAIAddDoNotContactRequest::setText(const bool &text) {
    m_text = text;
    m_text_isSet = true;
}

bool OAIAddDoNotContactRequest::is_text_Set() const{
    return m_text_isSet;
}

bool OAIAddDoNotContactRequest::is_text_Valid() const{
    return m_text_isValid;
}

bool OAIAddDoNotContactRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_call_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_inbound_call_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_inbound_text_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_numbers.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_source_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_text_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAddDoNotContactRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
