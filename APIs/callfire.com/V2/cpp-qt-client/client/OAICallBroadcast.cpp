/**
 * CallFire API Documentation
 * CallFire
 *
 * The version of the OpenAPI document: V2
 * Contact: support@callfire.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICallBroadcast.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICallBroadcast::OAICallBroadcast(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICallBroadcast::OAICallBroadcast() {
    this->initializeModel();
}

OAICallBroadcast::~OAICallBroadcast() {}

void OAICallBroadcast::initializeModel() {

    m_answering_machine_config_isSet = false;
    m_answering_machine_config_isValid = false;

    m_dialplan_xml_isSet = false;
    m_dialplan_xml_isValid = false;

    m_from_number_isSet = false;
    m_from_number_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_labels_isSet = false;
    m_labels_isValid = false;

    m_last_modified_isSet = false;
    m_last_modified_isValid = false;

    m_local_time_restriction_isSet = false;
    m_local_time_restriction_isValid = false;

    m_max_active_isSet = false;
    m_max_active_isValid = false;

    m_max_active_transfers_isSet = false;
    m_max_active_transfers_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_recipients_isSet = false;
    m_recipients_isValid = false;

    m_resume_next_day_isSet = false;
    m_resume_next_day_isValid = false;

    m_retry_config_isSet = false;
    m_retry_config_isValid = false;

    m_schedules_isSet = false;
    m_schedules_isValid = false;

    m_sounds_isSet = false;
    m_sounds_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;
}

void OAICallBroadcast::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICallBroadcast::fromJsonObject(QJsonObject json) {

    m_answering_machine_config_isValid = ::OpenAPI::fromJsonValue(m_answering_machine_config, json[QString("answeringMachineConfig")]);
    m_answering_machine_config_isSet = !json[QString("answeringMachineConfig")].isNull() && m_answering_machine_config_isValid;

    m_dialplan_xml_isValid = ::OpenAPI::fromJsonValue(m_dialplan_xml, json[QString("dialplanXml")]);
    m_dialplan_xml_isSet = !json[QString("dialplanXml")].isNull() && m_dialplan_xml_isValid;

    m_from_number_isValid = ::OpenAPI::fromJsonValue(m_from_number, json[QString("fromNumber")]);
    m_from_number_isSet = !json[QString("fromNumber")].isNull() && m_from_number_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_labels_isValid = ::OpenAPI::fromJsonValue(m_labels, json[QString("labels")]);
    m_labels_isSet = !json[QString("labels")].isNull() && m_labels_isValid;

    m_last_modified_isValid = ::OpenAPI::fromJsonValue(m_last_modified, json[QString("lastModified")]);
    m_last_modified_isSet = !json[QString("lastModified")].isNull() && m_last_modified_isValid;

    m_local_time_restriction_isValid = ::OpenAPI::fromJsonValue(m_local_time_restriction, json[QString("localTimeRestriction")]);
    m_local_time_restriction_isSet = !json[QString("localTimeRestriction")].isNull() && m_local_time_restriction_isValid;

    m_max_active_isValid = ::OpenAPI::fromJsonValue(m_max_active, json[QString("maxActive")]);
    m_max_active_isSet = !json[QString("maxActive")].isNull() && m_max_active_isValid;

    m_max_active_transfers_isValid = ::OpenAPI::fromJsonValue(m_max_active_transfers, json[QString("maxActiveTransfers")]);
    m_max_active_transfers_isSet = !json[QString("maxActiveTransfers")].isNull() && m_max_active_transfers_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_recipients_isValid = ::OpenAPI::fromJsonValue(m_recipients, json[QString("recipients")]);
    m_recipients_isSet = !json[QString("recipients")].isNull() && m_recipients_isValid;

    m_resume_next_day_isValid = ::OpenAPI::fromJsonValue(m_resume_next_day, json[QString("resumeNextDay")]);
    m_resume_next_day_isSet = !json[QString("resumeNextDay")].isNull() && m_resume_next_day_isValid;

    m_retry_config_isValid = ::OpenAPI::fromJsonValue(m_retry_config, json[QString("retryConfig")]);
    m_retry_config_isSet = !json[QString("retryConfig")].isNull() && m_retry_config_isValid;

    m_schedules_isValid = ::OpenAPI::fromJsonValue(m_schedules, json[QString("schedules")]);
    m_schedules_isSet = !json[QString("schedules")].isNull() && m_schedules_isValid;

    m_sounds_isValid = ::OpenAPI::fromJsonValue(m_sounds, json[QString("sounds")]);
    m_sounds_isSet = !json[QString("sounds")].isNull() && m_sounds_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("status")]);
    m_status_isSet = !json[QString("status")].isNull() && m_status_isValid;
}

QString OAICallBroadcast::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICallBroadcast::asJsonObject() const {
    QJsonObject obj;
    if (m_answering_machine_config_isSet) {
        obj.insert(QString("answeringMachineConfig"), ::OpenAPI::toJsonValue(m_answering_machine_config));
    }
    if (m_dialplan_xml_isSet) {
        obj.insert(QString("dialplanXml"), ::OpenAPI::toJsonValue(m_dialplan_xml));
    }
    if (m_from_number_isSet) {
        obj.insert(QString("fromNumber"), ::OpenAPI::toJsonValue(m_from_number));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_labels.size() > 0) {
        obj.insert(QString("labels"), ::OpenAPI::toJsonValue(m_labels));
    }
    if (m_last_modified_isSet) {
        obj.insert(QString("lastModified"), ::OpenAPI::toJsonValue(m_last_modified));
    }
    if (m_local_time_restriction.isSet()) {
        obj.insert(QString("localTimeRestriction"), ::OpenAPI::toJsonValue(m_local_time_restriction));
    }
    if (m_max_active_isSet) {
        obj.insert(QString("maxActive"), ::OpenAPI::toJsonValue(m_max_active));
    }
    if (m_max_active_transfers_isSet) {
        obj.insert(QString("maxActiveTransfers"), ::OpenAPI::toJsonValue(m_max_active_transfers));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_recipients.size() > 0) {
        obj.insert(QString("recipients"), ::OpenAPI::toJsonValue(m_recipients));
    }
    if (m_resume_next_day_isSet) {
        obj.insert(QString("resumeNextDay"), ::OpenAPI::toJsonValue(m_resume_next_day));
    }
    if (m_retry_config.isSet()) {
        obj.insert(QString("retryConfig"), ::OpenAPI::toJsonValue(m_retry_config));
    }
    if (m_schedules.size() > 0) {
        obj.insert(QString("schedules"), ::OpenAPI::toJsonValue(m_schedules));
    }
    if (m_sounds.isSet()) {
        obj.insert(QString("sounds"), ::OpenAPI::toJsonValue(m_sounds));
    }
    if (m_status_isSet) {
        obj.insert(QString("status"), ::OpenAPI::toJsonValue(m_status));
    }
    return obj;
}

QString OAICallBroadcast::getAnsweringMachineConfig() const {
    return m_answering_machine_config;
}
void OAICallBroadcast::setAnsweringMachineConfig(const QString &answering_machine_config) {
    m_answering_machine_config = answering_machine_config;
    m_answering_machine_config_isSet = true;
}

bool OAICallBroadcast::is_answering_machine_config_Set() const{
    return m_answering_machine_config_isSet;
}

bool OAICallBroadcast::is_answering_machine_config_Valid() const{
    return m_answering_machine_config_isValid;
}

QString OAICallBroadcast::getDialplanXml() const {
    return m_dialplan_xml;
}
void OAICallBroadcast::setDialplanXml(const QString &dialplan_xml) {
    m_dialplan_xml = dialplan_xml;
    m_dialplan_xml_isSet = true;
}

bool OAICallBroadcast::is_dialplan_xml_Set() const{
    return m_dialplan_xml_isSet;
}

bool OAICallBroadcast::is_dialplan_xml_Valid() const{
    return m_dialplan_xml_isValid;
}

QString OAICallBroadcast::getFromNumber() const {
    return m_from_number;
}
void OAICallBroadcast::setFromNumber(const QString &from_number) {
    m_from_number = from_number;
    m_from_number_isSet = true;
}

bool OAICallBroadcast::is_from_number_Set() const{
    return m_from_number_isSet;
}

bool OAICallBroadcast::is_from_number_Valid() const{
    return m_from_number_isValid;
}

qint64 OAICallBroadcast::getId() const {
    return m_id;
}
void OAICallBroadcast::setId(const qint64 &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAICallBroadcast::is_id_Set() const{
    return m_id_isSet;
}

bool OAICallBroadcast::is_id_Valid() const{
    return m_id_isValid;
}

QSet<QString> OAICallBroadcast::getLabels() const {
    return m_labels;
}
void OAICallBroadcast::setLabels(const QSet<QString> &labels) {
    m_labels = labels;
    m_labels_isSet = true;
}

bool OAICallBroadcast::is_labels_Set() const{
    return m_labels_isSet;
}

bool OAICallBroadcast::is_labels_Valid() const{
    return m_labels_isValid;
}

qint64 OAICallBroadcast::getLastModified() const {
    return m_last_modified;
}
void OAICallBroadcast::setLastModified(const qint64 &last_modified) {
    m_last_modified = last_modified;
    m_last_modified_isSet = true;
}

bool OAICallBroadcast::is_last_modified_Set() const{
    return m_last_modified_isSet;
}

bool OAICallBroadcast::is_last_modified_Valid() const{
    return m_last_modified_isValid;
}

OAILocalTimeRestriction OAICallBroadcast::getLocalTimeRestriction() const {
    return m_local_time_restriction;
}
void OAICallBroadcast::setLocalTimeRestriction(const OAILocalTimeRestriction &local_time_restriction) {
    m_local_time_restriction = local_time_restriction;
    m_local_time_restriction_isSet = true;
}

bool OAICallBroadcast::is_local_time_restriction_Set() const{
    return m_local_time_restriction_isSet;
}

bool OAICallBroadcast::is_local_time_restriction_Valid() const{
    return m_local_time_restriction_isValid;
}

qint32 OAICallBroadcast::getMaxActive() const {
    return m_max_active;
}
void OAICallBroadcast::setMaxActive(const qint32 &max_active) {
    m_max_active = max_active;
    m_max_active_isSet = true;
}

bool OAICallBroadcast::is_max_active_Set() const{
    return m_max_active_isSet;
}

bool OAICallBroadcast::is_max_active_Valid() const{
    return m_max_active_isValid;
}

qint32 OAICallBroadcast::getMaxActiveTransfers() const {
    return m_max_active_transfers;
}
void OAICallBroadcast::setMaxActiveTransfers(const qint32 &max_active_transfers) {
    m_max_active_transfers = max_active_transfers;
    m_max_active_transfers_isSet = true;
}

bool OAICallBroadcast::is_max_active_transfers_Set() const{
    return m_max_active_transfers_isSet;
}

bool OAICallBroadcast::is_max_active_transfers_Valid() const{
    return m_max_active_transfers_isValid;
}

QString OAICallBroadcast::getName() const {
    return m_name;
}
void OAICallBroadcast::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAICallBroadcast::is_name_Set() const{
    return m_name_isSet;
}

bool OAICallBroadcast::is_name_Valid() const{
    return m_name_isValid;
}

QList<OAIRecipient> OAICallBroadcast::getRecipients() const {
    return m_recipients;
}
void OAICallBroadcast::setRecipients(const QList<OAIRecipient> &recipients) {
    m_recipients = recipients;
    m_recipients_isSet = true;
}

bool OAICallBroadcast::is_recipients_Set() const{
    return m_recipients_isSet;
}

bool OAICallBroadcast::is_recipients_Valid() const{
    return m_recipients_isValid;
}

bool OAICallBroadcast::isResumeNextDay() const {
    return m_resume_next_day;
}
void OAICallBroadcast::setResumeNextDay(const bool &resume_next_day) {
    m_resume_next_day = resume_next_day;
    m_resume_next_day_isSet = true;
}

bool OAICallBroadcast::is_resume_next_day_Set() const{
    return m_resume_next_day_isSet;
}

bool OAICallBroadcast::is_resume_next_day_Valid() const{
    return m_resume_next_day_isValid;
}

OAIRetryConfig OAICallBroadcast::getRetryConfig() const {
    return m_retry_config;
}
void OAICallBroadcast::setRetryConfig(const OAIRetryConfig &retry_config) {
    m_retry_config = retry_config;
    m_retry_config_isSet = true;
}

bool OAICallBroadcast::is_retry_config_Set() const{
    return m_retry_config_isSet;
}

bool OAICallBroadcast::is_retry_config_Valid() const{
    return m_retry_config_isValid;
}

QList<OAISchedule> OAICallBroadcast::getSchedules() const {
    return m_schedules;
}
void OAICallBroadcast::setSchedules(const QList<OAISchedule> &schedules) {
    m_schedules = schedules;
    m_schedules_isSet = true;
}

bool OAICallBroadcast::is_schedules_Set() const{
    return m_schedules_isSet;
}

bool OAICallBroadcast::is_schedules_Valid() const{
    return m_schedules_isValid;
}

OAICallBroadcastSounds OAICallBroadcast::getSounds() const {
    return m_sounds;
}
void OAICallBroadcast::setSounds(const OAICallBroadcastSounds &sounds) {
    m_sounds = sounds;
    m_sounds_isSet = true;
}

bool OAICallBroadcast::is_sounds_Set() const{
    return m_sounds_isSet;
}

bool OAICallBroadcast::is_sounds_Valid() const{
    return m_sounds_isValid;
}

QString OAICallBroadcast::getStatus() const {
    return m_status;
}
void OAICallBroadcast::setStatus(const QString &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAICallBroadcast::is_status_Set() const{
    return m_status_isSet;
}

bool OAICallBroadcast::is_status_Valid() const{
    return m_status_isValid;
}

bool OAICallBroadcast::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_answering_machine_config_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_dialplan_xml_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_from_number_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_labels.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_modified_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_local_time_restriction.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_max_active_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_max_active_transfers_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_recipients.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_resume_next_day_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_retry_config.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_schedules.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_sounds.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_status_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICallBroadcast::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
