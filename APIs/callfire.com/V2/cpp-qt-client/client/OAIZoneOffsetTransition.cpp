/**
 * CallFire API Documentation
 * CallFire
 *
 * The version of the OpenAPI document: V2
 * Contact: support@callfire.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIZoneOffsetTransition.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIZoneOffsetTransition::OAIZoneOffsetTransition(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIZoneOffsetTransition::OAIZoneOffsetTransition() {
    this->initializeModel();
}

OAIZoneOffsetTransition::~OAIZoneOffsetTransition() {}

void OAIZoneOffsetTransition::initializeModel() {

    m_date_time_after_isSet = false;
    m_date_time_after_isValid = false;

    m_date_time_before_isSet = false;
    m_date_time_before_isValid = false;

    m_duration_isSet = false;
    m_duration_isValid = false;

    m_gap_isSet = false;
    m_gap_isValid = false;

    m_instant_isSet = false;
    m_instant_isValid = false;

    m_offset_after_isSet = false;
    m_offset_after_isValid = false;

    m_offset_before_isSet = false;
    m_offset_before_isValid = false;

    m_overlap_isSet = false;
    m_overlap_isValid = false;
}

void OAIZoneOffsetTransition::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIZoneOffsetTransition::fromJsonObject(QJsonObject json) {

    m_date_time_after_isValid = ::OpenAPI::fromJsonValue(m_date_time_after, json[QString("dateTimeAfter")]);
    m_date_time_after_isSet = !json[QString("dateTimeAfter")].isNull() && m_date_time_after_isValid;

    m_date_time_before_isValid = ::OpenAPI::fromJsonValue(m_date_time_before, json[QString("dateTimeBefore")]);
    m_date_time_before_isSet = !json[QString("dateTimeBefore")].isNull() && m_date_time_before_isValid;

    m_duration_isValid = ::OpenAPI::fromJsonValue(m_duration, json[QString("duration")]);
    m_duration_isSet = !json[QString("duration")].isNull() && m_duration_isValid;

    m_gap_isValid = ::OpenAPI::fromJsonValue(m_gap, json[QString("gap")]);
    m_gap_isSet = !json[QString("gap")].isNull() && m_gap_isValid;

    m_instant_isValid = ::OpenAPI::fromJsonValue(m_instant, json[QString("instant")]);
    m_instant_isSet = !json[QString("instant")].isNull() && m_instant_isValid;

    m_offset_after_isValid = ::OpenAPI::fromJsonValue(m_offset_after, json[QString("offsetAfter")]);
    m_offset_after_isSet = !json[QString("offsetAfter")].isNull() && m_offset_after_isValid;

    m_offset_before_isValid = ::OpenAPI::fromJsonValue(m_offset_before, json[QString("offsetBefore")]);
    m_offset_before_isSet = !json[QString("offsetBefore")].isNull() && m_offset_before_isValid;

    m_overlap_isValid = ::OpenAPI::fromJsonValue(m_overlap, json[QString("overlap")]);
    m_overlap_isSet = !json[QString("overlap")].isNull() && m_overlap_isValid;
}

QString OAIZoneOffsetTransition::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIZoneOffsetTransition::asJsonObject() const {
    QJsonObject obj;
    if (m_date_time_after_isSet) {
        obj.insert(QString("dateTimeAfter"), ::OpenAPI::toJsonValue(m_date_time_after));
    }
    if (m_date_time_before_isSet) {
        obj.insert(QString("dateTimeBefore"), ::OpenAPI::toJsonValue(m_date_time_before));
    }
    if (m_duration.isSet()) {
        obj.insert(QString("duration"), ::OpenAPI::toJsonValue(m_duration));
    }
    if (m_gap_isSet) {
        obj.insert(QString("gap"), ::OpenAPI::toJsonValue(m_gap));
    }
    if (m_instant_isSet) {
        obj.insert(QString("instant"), ::OpenAPI::toJsonValue(m_instant));
    }
    if (m_offset_after.isSet()) {
        obj.insert(QString("offsetAfter"), ::OpenAPI::toJsonValue(m_offset_after));
    }
    if (m_offset_before.isSet()) {
        obj.insert(QString("offsetBefore"), ::OpenAPI::toJsonValue(m_offset_before));
    }
    if (m_overlap_isSet) {
        obj.insert(QString("overlap"), ::OpenAPI::toJsonValue(m_overlap));
    }
    return obj;
}

QDateTime OAIZoneOffsetTransition::getDateTimeAfter() const {
    return m_date_time_after;
}
void OAIZoneOffsetTransition::setDateTimeAfter(const QDateTime &date_time_after) {
    m_date_time_after = date_time_after;
    m_date_time_after_isSet = true;
}

bool OAIZoneOffsetTransition::is_date_time_after_Set() const{
    return m_date_time_after_isSet;
}

bool OAIZoneOffsetTransition::is_date_time_after_Valid() const{
    return m_date_time_after_isValid;
}

QDateTime OAIZoneOffsetTransition::getDateTimeBefore() const {
    return m_date_time_before;
}
void OAIZoneOffsetTransition::setDateTimeBefore(const QDateTime &date_time_before) {
    m_date_time_before = date_time_before;
    m_date_time_before_isSet = true;
}

bool OAIZoneOffsetTransition::is_date_time_before_Set() const{
    return m_date_time_before_isSet;
}

bool OAIZoneOffsetTransition::is_date_time_before_Valid() const{
    return m_date_time_before_isValid;
}

OAIDuration OAIZoneOffsetTransition::getDuration() const {
    return m_duration;
}
void OAIZoneOffsetTransition::setDuration(const OAIDuration &duration) {
    m_duration = duration;
    m_duration_isSet = true;
}

bool OAIZoneOffsetTransition::is_duration_Set() const{
    return m_duration_isSet;
}

bool OAIZoneOffsetTransition::is_duration_Valid() const{
    return m_duration_isValid;
}

bool OAIZoneOffsetTransition::isGap() const {
    return m_gap;
}
void OAIZoneOffsetTransition::setGap(const bool &gap) {
    m_gap = gap;
    m_gap_isSet = true;
}

bool OAIZoneOffsetTransition::is_gap_Set() const{
    return m_gap_isSet;
}

bool OAIZoneOffsetTransition::is_gap_Valid() const{
    return m_gap_isValid;
}

qint64 OAIZoneOffsetTransition::getInstant() const {
    return m_instant;
}
void OAIZoneOffsetTransition::setInstant(const qint64 &instant) {
    m_instant = instant;
    m_instant_isSet = true;
}

bool OAIZoneOffsetTransition::is_instant_Set() const{
    return m_instant_isSet;
}

bool OAIZoneOffsetTransition::is_instant_Valid() const{
    return m_instant_isValid;
}

OAIZoneOffset OAIZoneOffsetTransition::getOffsetAfter() const {
    return m_offset_after;
}
void OAIZoneOffsetTransition::setOffsetAfter(const OAIZoneOffset &offset_after) {
    m_offset_after = offset_after;
    m_offset_after_isSet = true;
}

bool OAIZoneOffsetTransition::is_offset_after_Set() const{
    return m_offset_after_isSet;
}

bool OAIZoneOffsetTransition::is_offset_after_Valid() const{
    return m_offset_after_isValid;
}

OAIZoneOffset OAIZoneOffsetTransition::getOffsetBefore() const {
    return m_offset_before;
}
void OAIZoneOffsetTransition::setOffsetBefore(const OAIZoneOffset &offset_before) {
    m_offset_before = offset_before;
    m_offset_before_isSet = true;
}

bool OAIZoneOffsetTransition::is_offset_before_Set() const{
    return m_offset_before_isSet;
}

bool OAIZoneOffsetTransition::is_offset_before_Valid() const{
    return m_offset_before_isValid;
}

bool OAIZoneOffsetTransition::isOverlap() const {
    return m_overlap;
}
void OAIZoneOffsetTransition::setOverlap(const bool &overlap) {
    m_overlap = overlap;
    m_overlap_isSet = true;
}

bool OAIZoneOffsetTransition::is_overlap_Set() const{
    return m_overlap_isSet;
}

bool OAIZoneOffsetTransition::is_overlap_Valid() const{
    return m_overlap_isValid;
}

bool OAIZoneOffsetTransition::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_date_time_after_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_date_time_before_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_duration.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_gap_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_instant_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_offset_after.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_offset_before.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_overlap_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIZoneOffsetTransition::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
