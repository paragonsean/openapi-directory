/**
 * CallFire API Documentation
 * CallFire
 *
 * The version of the OpenAPI document: V2
 * Contact: support@callfire.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAITextBroadcast.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAITextBroadcast::OAITextBroadcast(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAITextBroadcast::OAITextBroadcast() {
    this->initializeModel();
}

OAITextBroadcast::~OAITextBroadcast() {}

void OAITextBroadcast::initializeModel() {

    m_big_message_strategy_isSet = false;
    m_big_message_strategy_isValid = false;

    m_from_number_isSet = false;
    m_from_number_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_labels_isSet = false;
    m_labels_isValid = false;

    m_last_modified_isSet = false;
    m_last_modified_isValid = false;

    m_local_time_restriction_isSet = false;
    m_local_time_restriction_isValid = false;

    m_max_active_isSet = false;
    m_max_active_isValid = false;

    m_media_isSet = false;
    m_media_isValid = false;

    m_message_isSet = false;
    m_message_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_recipients_isSet = false;
    m_recipients_isValid = false;

    m_resume_next_day_isSet = false;
    m_resume_next_day_isValid = false;

    m_schedules_isSet = false;
    m_schedules_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;
}

void OAITextBroadcast::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAITextBroadcast::fromJsonObject(QJsonObject json) {

    m_big_message_strategy_isValid = ::OpenAPI::fromJsonValue(m_big_message_strategy, json[QString("bigMessageStrategy")]);
    m_big_message_strategy_isSet = !json[QString("bigMessageStrategy")].isNull() && m_big_message_strategy_isValid;

    m_from_number_isValid = ::OpenAPI::fromJsonValue(m_from_number, json[QString("fromNumber")]);
    m_from_number_isSet = !json[QString("fromNumber")].isNull() && m_from_number_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_labels_isValid = ::OpenAPI::fromJsonValue(m_labels, json[QString("labels")]);
    m_labels_isSet = !json[QString("labels")].isNull() && m_labels_isValid;

    m_last_modified_isValid = ::OpenAPI::fromJsonValue(m_last_modified, json[QString("lastModified")]);
    m_last_modified_isSet = !json[QString("lastModified")].isNull() && m_last_modified_isValid;

    m_local_time_restriction_isValid = ::OpenAPI::fromJsonValue(m_local_time_restriction, json[QString("localTimeRestriction")]);
    m_local_time_restriction_isSet = !json[QString("localTimeRestriction")].isNull() && m_local_time_restriction_isValid;

    m_max_active_isValid = ::OpenAPI::fromJsonValue(m_max_active, json[QString("maxActive")]);
    m_max_active_isSet = !json[QString("maxActive")].isNull() && m_max_active_isValid;

    m_media_isValid = ::OpenAPI::fromJsonValue(m_media, json[QString("media")]);
    m_media_isSet = !json[QString("media")].isNull() && m_media_isValid;

    m_message_isValid = ::OpenAPI::fromJsonValue(m_message, json[QString("message")]);
    m_message_isSet = !json[QString("message")].isNull() && m_message_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_recipients_isValid = ::OpenAPI::fromJsonValue(m_recipients, json[QString("recipients")]);
    m_recipients_isSet = !json[QString("recipients")].isNull() && m_recipients_isValid;

    m_resume_next_day_isValid = ::OpenAPI::fromJsonValue(m_resume_next_day, json[QString("resumeNextDay")]);
    m_resume_next_day_isSet = !json[QString("resumeNextDay")].isNull() && m_resume_next_day_isValid;

    m_schedules_isValid = ::OpenAPI::fromJsonValue(m_schedules, json[QString("schedules")]);
    m_schedules_isSet = !json[QString("schedules")].isNull() && m_schedules_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("status")]);
    m_status_isSet = !json[QString("status")].isNull() && m_status_isValid;
}

QString OAITextBroadcast::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAITextBroadcast::asJsonObject() const {
    QJsonObject obj;
    if (m_big_message_strategy_isSet) {
        obj.insert(QString("bigMessageStrategy"), ::OpenAPI::toJsonValue(m_big_message_strategy));
    }
    if (m_from_number_isSet) {
        obj.insert(QString("fromNumber"), ::OpenAPI::toJsonValue(m_from_number));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_labels.size() > 0) {
        obj.insert(QString("labels"), ::OpenAPI::toJsonValue(m_labels));
    }
    if (m_last_modified_isSet) {
        obj.insert(QString("lastModified"), ::OpenAPI::toJsonValue(m_last_modified));
    }
    if (m_local_time_restriction.isSet()) {
        obj.insert(QString("localTimeRestriction"), ::OpenAPI::toJsonValue(m_local_time_restriction));
    }
    if (m_max_active_isSet) {
        obj.insert(QString("maxActive"), ::OpenAPI::toJsonValue(m_max_active));
    }
    if (m_media.size() > 0) {
        obj.insert(QString("media"), ::OpenAPI::toJsonValue(m_media));
    }
    if (m_message_isSet) {
        obj.insert(QString("message"), ::OpenAPI::toJsonValue(m_message));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_recipients.size() > 0) {
        obj.insert(QString("recipients"), ::OpenAPI::toJsonValue(m_recipients));
    }
    if (m_resume_next_day_isSet) {
        obj.insert(QString("resumeNextDay"), ::OpenAPI::toJsonValue(m_resume_next_day));
    }
    if (m_schedules.size() > 0) {
        obj.insert(QString("schedules"), ::OpenAPI::toJsonValue(m_schedules));
    }
    if (m_status_isSet) {
        obj.insert(QString("status"), ::OpenAPI::toJsonValue(m_status));
    }
    return obj;
}

QString OAITextBroadcast::getBigMessageStrategy() const {
    return m_big_message_strategy;
}
void OAITextBroadcast::setBigMessageStrategy(const QString &big_message_strategy) {
    m_big_message_strategy = big_message_strategy;
    m_big_message_strategy_isSet = true;
}

bool OAITextBroadcast::is_big_message_strategy_Set() const{
    return m_big_message_strategy_isSet;
}

bool OAITextBroadcast::is_big_message_strategy_Valid() const{
    return m_big_message_strategy_isValid;
}

QString OAITextBroadcast::getFromNumber() const {
    return m_from_number;
}
void OAITextBroadcast::setFromNumber(const QString &from_number) {
    m_from_number = from_number;
    m_from_number_isSet = true;
}

bool OAITextBroadcast::is_from_number_Set() const{
    return m_from_number_isSet;
}

bool OAITextBroadcast::is_from_number_Valid() const{
    return m_from_number_isValid;
}

qint64 OAITextBroadcast::getId() const {
    return m_id;
}
void OAITextBroadcast::setId(const qint64 &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAITextBroadcast::is_id_Set() const{
    return m_id_isSet;
}

bool OAITextBroadcast::is_id_Valid() const{
    return m_id_isValid;
}

QSet<QString> OAITextBroadcast::getLabels() const {
    return m_labels;
}
void OAITextBroadcast::setLabels(const QSet<QString> &labels) {
    m_labels = labels;
    m_labels_isSet = true;
}

bool OAITextBroadcast::is_labels_Set() const{
    return m_labels_isSet;
}

bool OAITextBroadcast::is_labels_Valid() const{
    return m_labels_isValid;
}

qint64 OAITextBroadcast::getLastModified() const {
    return m_last_modified;
}
void OAITextBroadcast::setLastModified(const qint64 &last_modified) {
    m_last_modified = last_modified;
    m_last_modified_isSet = true;
}

bool OAITextBroadcast::is_last_modified_Set() const{
    return m_last_modified_isSet;
}

bool OAITextBroadcast::is_last_modified_Valid() const{
    return m_last_modified_isValid;
}

OAILocalTimeRestriction OAITextBroadcast::getLocalTimeRestriction() const {
    return m_local_time_restriction;
}
void OAITextBroadcast::setLocalTimeRestriction(const OAILocalTimeRestriction &local_time_restriction) {
    m_local_time_restriction = local_time_restriction;
    m_local_time_restriction_isSet = true;
}

bool OAITextBroadcast::is_local_time_restriction_Set() const{
    return m_local_time_restriction_isSet;
}

bool OAITextBroadcast::is_local_time_restriction_Valid() const{
    return m_local_time_restriction_isValid;
}

qint32 OAITextBroadcast::getMaxActive() const {
    return m_max_active;
}
void OAITextBroadcast::setMaxActive(const qint32 &max_active) {
    m_max_active = max_active;
    m_max_active_isSet = true;
}

bool OAITextBroadcast::is_max_active_Set() const{
    return m_max_active_isSet;
}

bool OAITextBroadcast::is_max_active_Valid() const{
    return m_max_active_isValid;
}

QList<OAIMedia> OAITextBroadcast::getMedia() const {
    return m_media;
}
void OAITextBroadcast::setMedia(const QList<OAIMedia> &media) {
    m_media = media;
    m_media_isSet = true;
}

bool OAITextBroadcast::is_media_Set() const{
    return m_media_isSet;
}

bool OAITextBroadcast::is_media_Valid() const{
    return m_media_isValid;
}

QString OAITextBroadcast::getMessage() const {
    return m_message;
}
void OAITextBroadcast::setMessage(const QString &message) {
    m_message = message;
    m_message_isSet = true;
}

bool OAITextBroadcast::is_message_Set() const{
    return m_message_isSet;
}

bool OAITextBroadcast::is_message_Valid() const{
    return m_message_isValid;
}

QString OAITextBroadcast::getName() const {
    return m_name;
}
void OAITextBroadcast::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAITextBroadcast::is_name_Set() const{
    return m_name_isSet;
}

bool OAITextBroadcast::is_name_Valid() const{
    return m_name_isValid;
}

QList<OAITextRecipient> OAITextBroadcast::getRecipients() const {
    return m_recipients;
}
void OAITextBroadcast::setRecipients(const QList<OAITextRecipient> &recipients) {
    m_recipients = recipients;
    m_recipients_isSet = true;
}

bool OAITextBroadcast::is_recipients_Set() const{
    return m_recipients_isSet;
}

bool OAITextBroadcast::is_recipients_Valid() const{
    return m_recipients_isValid;
}

bool OAITextBroadcast::isResumeNextDay() const {
    return m_resume_next_day;
}
void OAITextBroadcast::setResumeNextDay(const bool &resume_next_day) {
    m_resume_next_day = resume_next_day;
    m_resume_next_day_isSet = true;
}

bool OAITextBroadcast::is_resume_next_day_Set() const{
    return m_resume_next_day_isSet;
}

bool OAITextBroadcast::is_resume_next_day_Valid() const{
    return m_resume_next_day_isValid;
}

QList<OAISchedule> OAITextBroadcast::getSchedules() const {
    return m_schedules;
}
void OAITextBroadcast::setSchedules(const QList<OAISchedule> &schedules) {
    m_schedules = schedules;
    m_schedules_isSet = true;
}

bool OAITextBroadcast::is_schedules_Set() const{
    return m_schedules_isSet;
}

bool OAITextBroadcast::is_schedules_Valid() const{
    return m_schedules_isValid;
}

QString OAITextBroadcast::getStatus() const {
    return m_status;
}
void OAITextBroadcast::setStatus(const QString &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAITextBroadcast::is_status_Set() const{
    return m_status_isSet;
}

bool OAITextBroadcast::is_status_Valid() const{
    return m_status_isValid;
}

bool OAITextBroadcast::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_big_message_strategy_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_from_number_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_labels.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_modified_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_local_time_restriction.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_max_active_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_media.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_message_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_recipients.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_resume_next_day_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_schedules.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_status_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAITextBroadcast::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
