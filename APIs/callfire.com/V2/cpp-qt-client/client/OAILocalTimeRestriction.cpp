/**
 * CallFire API Documentation
 * CallFire
 *
 * The version of the OpenAPI document: V2
 * Contact: support@callfire.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAILocalTimeRestriction.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAILocalTimeRestriction::OAILocalTimeRestriction(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAILocalTimeRestriction::OAILocalTimeRestriction() {
    this->initializeModel();
}

OAILocalTimeRestriction::~OAILocalTimeRestriction() {}

void OAILocalTimeRestriction::initializeModel() {

    m_begin_hour_isSet = false;
    m_begin_hour_isValid = false;

    m_begin_minute_isSet = false;
    m_begin_minute_isValid = false;

    m_enabled_isSet = false;
    m_enabled_isValid = false;

    m_end_hour_isSet = false;
    m_end_hour_isValid = false;

    m_end_minute_isSet = false;
    m_end_minute_isValid = false;
}

void OAILocalTimeRestriction::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAILocalTimeRestriction::fromJsonObject(QJsonObject json) {

    m_begin_hour_isValid = ::OpenAPI::fromJsonValue(m_begin_hour, json[QString("beginHour")]);
    m_begin_hour_isSet = !json[QString("beginHour")].isNull() && m_begin_hour_isValid;

    m_begin_minute_isValid = ::OpenAPI::fromJsonValue(m_begin_minute, json[QString("beginMinute")]);
    m_begin_minute_isSet = !json[QString("beginMinute")].isNull() && m_begin_minute_isValid;

    m_enabled_isValid = ::OpenAPI::fromJsonValue(m_enabled, json[QString("enabled")]);
    m_enabled_isSet = !json[QString("enabled")].isNull() && m_enabled_isValid;

    m_end_hour_isValid = ::OpenAPI::fromJsonValue(m_end_hour, json[QString("endHour")]);
    m_end_hour_isSet = !json[QString("endHour")].isNull() && m_end_hour_isValid;

    m_end_minute_isValid = ::OpenAPI::fromJsonValue(m_end_minute, json[QString("endMinute")]);
    m_end_minute_isSet = !json[QString("endMinute")].isNull() && m_end_minute_isValid;
}

QString OAILocalTimeRestriction::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAILocalTimeRestriction::asJsonObject() const {
    QJsonObject obj;
    if (m_begin_hour_isSet) {
        obj.insert(QString("beginHour"), ::OpenAPI::toJsonValue(m_begin_hour));
    }
    if (m_begin_minute_isSet) {
        obj.insert(QString("beginMinute"), ::OpenAPI::toJsonValue(m_begin_minute));
    }
    if (m_enabled_isSet) {
        obj.insert(QString("enabled"), ::OpenAPI::toJsonValue(m_enabled));
    }
    if (m_end_hour_isSet) {
        obj.insert(QString("endHour"), ::OpenAPI::toJsonValue(m_end_hour));
    }
    if (m_end_minute_isSet) {
        obj.insert(QString("endMinute"), ::OpenAPI::toJsonValue(m_end_minute));
    }
    return obj;
}

qint32 OAILocalTimeRestriction::getBeginHour() const {
    return m_begin_hour;
}
void OAILocalTimeRestriction::setBeginHour(const qint32 &begin_hour) {
    m_begin_hour = begin_hour;
    m_begin_hour_isSet = true;
}

bool OAILocalTimeRestriction::is_begin_hour_Set() const{
    return m_begin_hour_isSet;
}

bool OAILocalTimeRestriction::is_begin_hour_Valid() const{
    return m_begin_hour_isValid;
}

qint32 OAILocalTimeRestriction::getBeginMinute() const {
    return m_begin_minute;
}
void OAILocalTimeRestriction::setBeginMinute(const qint32 &begin_minute) {
    m_begin_minute = begin_minute;
    m_begin_minute_isSet = true;
}

bool OAILocalTimeRestriction::is_begin_minute_Set() const{
    return m_begin_minute_isSet;
}

bool OAILocalTimeRestriction::is_begin_minute_Valid() const{
    return m_begin_minute_isValid;
}

bool OAILocalTimeRestriction::isEnabled() const {
    return m_enabled;
}
void OAILocalTimeRestriction::setEnabled(const bool &enabled) {
    m_enabled = enabled;
    m_enabled_isSet = true;
}

bool OAILocalTimeRestriction::is_enabled_Set() const{
    return m_enabled_isSet;
}

bool OAILocalTimeRestriction::is_enabled_Valid() const{
    return m_enabled_isValid;
}

qint32 OAILocalTimeRestriction::getEndHour() const {
    return m_end_hour;
}
void OAILocalTimeRestriction::setEndHour(const qint32 &end_hour) {
    m_end_hour = end_hour;
    m_end_hour_isSet = true;
}

bool OAILocalTimeRestriction::is_end_hour_Set() const{
    return m_end_hour_isSet;
}

bool OAILocalTimeRestriction::is_end_hour_Valid() const{
    return m_end_hour_isValid;
}

qint32 OAILocalTimeRestriction::getEndMinute() const {
    return m_end_minute;
}
void OAILocalTimeRestriction::setEndMinute(const qint32 &end_minute) {
    m_end_minute = end_minute;
    m_end_minute_isSet = true;
}

bool OAILocalTimeRestriction::is_end_minute_Set() const{
    return m_end_minute_isSet;
}

bool OAILocalTimeRestriction::is_end_minute_Valid() const{
    return m_end_minute_isValid;
}

bool OAILocalTimeRestriction::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_begin_hour_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_begin_minute_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_enabled_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_end_hour_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_end_minute_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAILocalTimeRestriction::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
