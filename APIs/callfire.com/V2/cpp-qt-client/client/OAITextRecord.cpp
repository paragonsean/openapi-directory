/**
 * CallFire API Documentation
 * CallFire
 *
 * The version of the OpenAPI document: V2
 * Contact: support@callfire.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAITextRecord.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAITextRecord::OAITextRecord(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAITextRecord::OAITextRecord() {
    this->initializeModel();
}

OAITextRecord::~OAITextRecord() {}

void OAITextRecord::initializeModel() {

    m_billed_amount_isSet = false;
    m_billed_amount_isValid = false;

    m_caller_name_isSet = false;
    m_caller_name_isValid = false;

    m_finish_time_isSet = false;
    m_finish_time_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_labels_isSet = false;
    m_labels_isValid = false;

    m_message_isSet = false;
    m_message_isValid = false;

    m_switch_id_isSet = false;
    m_switch_id_isValid = false;

    m_text_result_isSet = false;
    m_text_result_isValid = false;

    m_to_number_isSet = false;
    m_to_number_isValid = false;
}

void OAITextRecord::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAITextRecord::fromJsonObject(QJsonObject json) {

    m_billed_amount_isValid = ::OpenAPI::fromJsonValue(m_billed_amount, json[QString("billedAmount")]);
    m_billed_amount_isSet = !json[QString("billedAmount")].isNull() && m_billed_amount_isValid;

    m_caller_name_isValid = ::OpenAPI::fromJsonValue(m_caller_name, json[QString("callerName")]);
    m_caller_name_isSet = !json[QString("callerName")].isNull() && m_caller_name_isValid;

    m_finish_time_isValid = ::OpenAPI::fromJsonValue(m_finish_time, json[QString("finishTime")]);
    m_finish_time_isSet = !json[QString("finishTime")].isNull() && m_finish_time_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_labels_isValid = ::OpenAPI::fromJsonValue(m_labels, json[QString("labels")]);
    m_labels_isSet = !json[QString("labels")].isNull() && m_labels_isValid;

    m_message_isValid = ::OpenAPI::fromJsonValue(m_message, json[QString("message")]);
    m_message_isSet = !json[QString("message")].isNull() && m_message_isValid;

    m_switch_id_isValid = ::OpenAPI::fromJsonValue(m_switch_id, json[QString("switchId")]);
    m_switch_id_isSet = !json[QString("switchId")].isNull() && m_switch_id_isValid;

    m_text_result_isValid = ::OpenAPI::fromJsonValue(m_text_result, json[QString("textResult")]);
    m_text_result_isSet = !json[QString("textResult")].isNull() && m_text_result_isValid;

    m_to_number_isValid = ::OpenAPI::fromJsonValue(m_to_number, json[QString("toNumber")]);
    m_to_number_isSet = !json[QString("toNumber")].isNull() && m_to_number_isValid;
}

QString OAITextRecord::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAITextRecord::asJsonObject() const {
    QJsonObject obj;
    if (m_billed_amount_isSet) {
        obj.insert(QString("billedAmount"), ::OpenAPI::toJsonValue(m_billed_amount));
    }
    if (m_caller_name_isSet) {
        obj.insert(QString("callerName"), ::OpenAPI::toJsonValue(m_caller_name));
    }
    if (m_finish_time_isSet) {
        obj.insert(QString("finishTime"), ::OpenAPI::toJsonValue(m_finish_time));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_labels.size() > 0) {
        obj.insert(QString("labels"), ::OpenAPI::toJsonValue(m_labels));
    }
    if (m_message_isSet) {
        obj.insert(QString("message"), ::OpenAPI::toJsonValue(m_message));
    }
    if (m_switch_id_isSet) {
        obj.insert(QString("switchId"), ::OpenAPI::toJsonValue(m_switch_id));
    }
    if (m_text_result_isSet) {
        obj.insert(QString("textResult"), ::OpenAPI::toJsonValue(m_text_result));
    }
    if (m_to_number_isSet) {
        obj.insert(QString("toNumber"), ::OpenAPI::toJsonValue(m_to_number));
    }
    return obj;
}

float OAITextRecord::getBilledAmount() const {
    return m_billed_amount;
}
void OAITextRecord::setBilledAmount(const float &billed_amount) {
    m_billed_amount = billed_amount;
    m_billed_amount_isSet = true;
}

bool OAITextRecord::is_billed_amount_Set() const{
    return m_billed_amount_isSet;
}

bool OAITextRecord::is_billed_amount_Valid() const{
    return m_billed_amount_isValid;
}

QString OAITextRecord::getCallerName() const {
    return m_caller_name;
}
void OAITextRecord::setCallerName(const QString &caller_name) {
    m_caller_name = caller_name;
    m_caller_name_isSet = true;
}

bool OAITextRecord::is_caller_name_Set() const{
    return m_caller_name_isSet;
}

bool OAITextRecord::is_caller_name_Valid() const{
    return m_caller_name_isValid;
}

qint64 OAITextRecord::getFinishTime() const {
    return m_finish_time;
}
void OAITextRecord::setFinishTime(const qint64 &finish_time) {
    m_finish_time = finish_time;
    m_finish_time_isSet = true;
}

bool OAITextRecord::is_finish_time_Set() const{
    return m_finish_time_isSet;
}

bool OAITextRecord::is_finish_time_Valid() const{
    return m_finish_time_isValid;
}

qint64 OAITextRecord::getId() const {
    return m_id;
}
void OAITextRecord::setId(const qint64 &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAITextRecord::is_id_Set() const{
    return m_id_isSet;
}

bool OAITextRecord::is_id_Valid() const{
    return m_id_isValid;
}

QSet<QString> OAITextRecord::getLabels() const {
    return m_labels;
}
void OAITextRecord::setLabels(const QSet<QString> &labels) {
    m_labels = labels;
    m_labels_isSet = true;
}

bool OAITextRecord::is_labels_Set() const{
    return m_labels_isSet;
}

bool OAITextRecord::is_labels_Valid() const{
    return m_labels_isValid;
}

QString OAITextRecord::getMessage() const {
    return m_message;
}
void OAITextRecord::setMessage(const QString &message) {
    m_message = message;
    m_message_isSet = true;
}

bool OAITextRecord::is_message_Set() const{
    return m_message_isSet;
}

bool OAITextRecord::is_message_Valid() const{
    return m_message_isValid;
}

QString OAITextRecord::getSwitchId() const {
    return m_switch_id;
}
void OAITextRecord::setSwitchId(const QString &switch_id) {
    m_switch_id = switch_id;
    m_switch_id_isSet = true;
}

bool OAITextRecord::is_switch_id_Set() const{
    return m_switch_id_isSet;
}

bool OAITextRecord::is_switch_id_Valid() const{
    return m_switch_id_isValid;
}

QString OAITextRecord::getTextResult() const {
    return m_text_result;
}
void OAITextRecord::setTextResult(const QString &text_result) {
    m_text_result = text_result;
    m_text_result_isSet = true;
}

bool OAITextRecord::is_text_result_Set() const{
    return m_text_result_isSet;
}

bool OAITextRecord::is_text_result_Valid() const{
    return m_text_result_isValid;
}

QString OAITextRecord::getToNumber() const {
    return m_to_number;
}
void OAITextRecord::setToNumber(const QString &to_number) {
    m_to_number = to_number;
    m_to_number_isSet = true;
}

bool OAITextRecord::is_to_number_Set() const{
    return m_to_number_isSet;
}

bool OAITextRecord::is_to_number_Valid() const{
    return m_to_number_isValid;
}

bool OAITextRecord::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_billed_amount_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_caller_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_finish_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_labels.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_message_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_switch_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_text_result_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_to_number_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAITextRecord::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
