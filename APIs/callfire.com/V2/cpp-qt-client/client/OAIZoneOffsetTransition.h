/**
 * CallFire API Documentation
 * CallFire
 *
 * The version of the OpenAPI document: V2
 * Contact: support@callfire.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIZoneOffsetTransition.h
 *
 * ~
 */

#ifndef OAIZoneOffsetTransition_H
#define OAIZoneOffsetTransition_H

#include <QJsonObject>

#include "OAIDuration.h"
#include "OAIZoneOffset.h"
#include <QDateTime>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIDuration;
class OAIZoneOffset;

class OAIZoneOffsetTransition : public OAIObject {
public:
    OAIZoneOffsetTransition();
    OAIZoneOffsetTransition(QString json);
    ~OAIZoneOffsetTransition() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QDateTime getDateTimeAfter() const;
    void setDateTimeAfter(const QDateTime &date_time_after);
    bool is_date_time_after_Set() const;
    bool is_date_time_after_Valid() const;

    QDateTime getDateTimeBefore() const;
    void setDateTimeBefore(const QDateTime &date_time_before);
    bool is_date_time_before_Set() const;
    bool is_date_time_before_Valid() const;

    OAIDuration getDuration() const;
    void setDuration(const OAIDuration &duration);
    bool is_duration_Set() const;
    bool is_duration_Valid() const;

    bool isGap() const;
    void setGap(const bool &gap);
    bool is_gap_Set() const;
    bool is_gap_Valid() const;

    qint64 getInstant() const;
    void setInstant(const qint64 &instant);
    bool is_instant_Set() const;
    bool is_instant_Valid() const;

    OAIZoneOffset getOffsetAfter() const;
    void setOffsetAfter(const OAIZoneOffset &offset_after);
    bool is_offset_after_Set() const;
    bool is_offset_after_Valid() const;

    OAIZoneOffset getOffsetBefore() const;
    void setOffsetBefore(const OAIZoneOffset &offset_before);
    bool is_offset_before_Set() const;
    bool is_offset_before_Valid() const;

    bool isOverlap() const;
    void setOverlap(const bool &overlap);
    bool is_overlap_Set() const;
    bool is_overlap_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QDateTime m_date_time_after;
    bool m_date_time_after_isSet;
    bool m_date_time_after_isValid;

    QDateTime m_date_time_before;
    bool m_date_time_before_isSet;
    bool m_date_time_before_isValid;

    OAIDuration m_duration;
    bool m_duration_isSet;
    bool m_duration_isValid;

    bool m_gap;
    bool m_gap_isSet;
    bool m_gap_isValid;

    qint64 m_instant;
    bool m_instant_isSet;
    bool m_instant_isValid;

    OAIZoneOffset m_offset_after;
    bool m_offset_after_isSet;
    bool m_offset_after_isValid;

    OAIZoneOffset m_offset_before;
    bool m_offset_before_isSet;
    bool m_offset_before_isValid;

    bool m_overlap;
    bool m_overlap_isSet;
    bool m_overlap_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIZoneOffsetTransition)

#endif // OAIZoneOffsetTransition_H
