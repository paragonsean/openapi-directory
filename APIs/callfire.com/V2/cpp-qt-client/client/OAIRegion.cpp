/**
 * CallFire API Documentation
 * CallFire
 *
 * The version of the OpenAPI document: V2
 * Contact: support@callfire.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIRegion.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIRegion::OAIRegion(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIRegion::OAIRegion() {
    this->initializeModel();
}

OAIRegion::~OAIRegion() {}

void OAIRegion::initializeModel() {

    m_city_isSet = false;
    m_city_isValid = false;

    m_country_isSet = false;
    m_country_isValid = false;

    m_latitude_isSet = false;
    m_latitude_isValid = false;

    m_longitude_isSet = false;
    m_longitude_isValid = false;

    m_prefix_isSet = false;
    m_prefix_isValid = false;

    m_state_isSet = false;
    m_state_isValid = false;

    m_time_zone_isSet = false;
    m_time_zone_isValid = false;

    m_zipcode_isSet = false;
    m_zipcode_isValid = false;
}

void OAIRegion::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIRegion::fromJsonObject(QJsonObject json) {

    m_city_isValid = ::OpenAPI::fromJsonValue(m_city, json[QString("city")]);
    m_city_isSet = !json[QString("city")].isNull() && m_city_isValid;

    m_country_isValid = ::OpenAPI::fromJsonValue(m_country, json[QString("country")]);
    m_country_isSet = !json[QString("country")].isNull() && m_country_isValid;

    m_latitude_isValid = ::OpenAPI::fromJsonValue(m_latitude, json[QString("latitude")]);
    m_latitude_isSet = !json[QString("latitude")].isNull() && m_latitude_isValid;

    m_longitude_isValid = ::OpenAPI::fromJsonValue(m_longitude, json[QString("longitude")]);
    m_longitude_isSet = !json[QString("longitude")].isNull() && m_longitude_isValid;

    m_prefix_isValid = ::OpenAPI::fromJsonValue(m_prefix, json[QString("prefix")]);
    m_prefix_isSet = !json[QString("prefix")].isNull() && m_prefix_isValid;

    m_state_isValid = ::OpenAPI::fromJsonValue(m_state, json[QString("state")]);
    m_state_isSet = !json[QString("state")].isNull() && m_state_isValid;

    m_time_zone_isValid = ::OpenAPI::fromJsonValue(m_time_zone, json[QString("timeZone")]);
    m_time_zone_isSet = !json[QString("timeZone")].isNull() && m_time_zone_isValid;

    m_zipcode_isValid = ::OpenAPI::fromJsonValue(m_zipcode, json[QString("zipcode")]);
    m_zipcode_isSet = !json[QString("zipcode")].isNull() && m_zipcode_isValid;
}

QString OAIRegion::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIRegion::asJsonObject() const {
    QJsonObject obj;
    if (m_city_isSet) {
        obj.insert(QString("city"), ::OpenAPI::toJsonValue(m_city));
    }
    if (m_country_isSet) {
        obj.insert(QString("country"), ::OpenAPI::toJsonValue(m_country));
    }
    if (m_latitude_isSet) {
        obj.insert(QString("latitude"), ::OpenAPI::toJsonValue(m_latitude));
    }
    if (m_longitude_isSet) {
        obj.insert(QString("longitude"), ::OpenAPI::toJsonValue(m_longitude));
    }
    if (m_prefix_isSet) {
        obj.insert(QString("prefix"), ::OpenAPI::toJsonValue(m_prefix));
    }
    if (m_state_isSet) {
        obj.insert(QString("state"), ::OpenAPI::toJsonValue(m_state));
    }
    if (m_time_zone_isSet) {
        obj.insert(QString("timeZone"), ::OpenAPI::toJsonValue(m_time_zone));
    }
    if (m_zipcode_isSet) {
        obj.insert(QString("zipcode"), ::OpenAPI::toJsonValue(m_zipcode));
    }
    return obj;
}

QString OAIRegion::getCity() const {
    return m_city;
}
void OAIRegion::setCity(const QString &city) {
    m_city = city;
    m_city_isSet = true;
}

bool OAIRegion::is_city_Set() const{
    return m_city_isSet;
}

bool OAIRegion::is_city_Valid() const{
    return m_city_isValid;
}

QString OAIRegion::getCountry() const {
    return m_country;
}
void OAIRegion::setCountry(const QString &country) {
    m_country = country;
    m_country_isSet = true;
}

bool OAIRegion::is_country_Set() const{
    return m_country_isSet;
}

bool OAIRegion::is_country_Valid() const{
    return m_country_isValid;
}

float OAIRegion::getLatitude() const {
    return m_latitude;
}
void OAIRegion::setLatitude(const float &latitude) {
    m_latitude = latitude;
    m_latitude_isSet = true;
}

bool OAIRegion::is_latitude_Set() const{
    return m_latitude_isSet;
}

bool OAIRegion::is_latitude_Valid() const{
    return m_latitude_isValid;
}

float OAIRegion::getLongitude() const {
    return m_longitude;
}
void OAIRegion::setLongitude(const float &longitude) {
    m_longitude = longitude;
    m_longitude_isSet = true;
}

bool OAIRegion::is_longitude_Set() const{
    return m_longitude_isSet;
}

bool OAIRegion::is_longitude_Valid() const{
    return m_longitude_isValid;
}

QString OAIRegion::getPrefix() const {
    return m_prefix;
}
void OAIRegion::setPrefix(const QString &prefix) {
    m_prefix = prefix;
    m_prefix_isSet = true;
}

bool OAIRegion::is_prefix_Set() const{
    return m_prefix_isSet;
}

bool OAIRegion::is_prefix_Valid() const{
    return m_prefix_isValid;
}

QString OAIRegion::getState() const {
    return m_state;
}
void OAIRegion::setState(const QString &state) {
    m_state = state;
    m_state_isSet = true;
}

bool OAIRegion::is_state_Set() const{
    return m_state_isSet;
}

bool OAIRegion::is_state_Valid() const{
    return m_state_isValid;
}

QString OAIRegion::getTimeZone() const {
    return m_time_zone;
}
void OAIRegion::setTimeZone(const QString &time_zone) {
    m_time_zone = time_zone;
    m_time_zone_isSet = true;
}

bool OAIRegion::is_time_zone_Set() const{
    return m_time_zone_isSet;
}

bool OAIRegion::is_time_zone_Valid() const{
    return m_time_zone_isValid;
}

QString OAIRegion::getZipcode() const {
    return m_zipcode;
}
void OAIRegion::setZipcode(const QString &zipcode) {
    m_zipcode = zipcode;
    m_zipcode_isSet = true;
}

bool OAIRegion::is_zipcode_Set() const{
    return m_zipcode_isSet;
}

bool OAIRegion::is_zipcode_Valid() const{
    return m_zipcode_isValid;
}

bool OAIRegion::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_city_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_country_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_latitude_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_longitude_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_prefix_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_state_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_time_zone_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_zipcode_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIRegion::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
