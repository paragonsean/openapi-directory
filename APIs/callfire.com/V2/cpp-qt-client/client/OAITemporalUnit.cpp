/**
 * CallFire API Documentation
 * CallFire
 *
 * The version of the OpenAPI document: V2
 * Contact: support@callfire.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAITemporalUnit.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAITemporalUnit::OAITemporalUnit(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAITemporalUnit::OAITemporalUnit() {
    this->initializeModel();
}

OAITemporalUnit::~OAITemporalUnit() {}

void OAITemporalUnit::initializeModel() {

    m_date_based_isSet = false;
    m_date_based_isValid = false;

    m_duration_isSet = false;
    m_duration_isValid = false;

    m_duration_estimated_isSet = false;
    m_duration_estimated_isValid = false;

    m_time_based_isSet = false;
    m_time_based_isValid = false;
}

void OAITemporalUnit::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAITemporalUnit::fromJsonObject(QJsonObject json) {

    m_date_based_isValid = ::OpenAPI::fromJsonValue(m_date_based, json[QString("dateBased")]);
    m_date_based_isSet = !json[QString("dateBased")].isNull() && m_date_based_isValid;

    m_duration_isValid = ::OpenAPI::fromJsonValue(m_duration, json[QString("duration")]);
    m_duration_isSet = !json[QString("duration")].isNull() && m_duration_isValid;

    m_duration_estimated_isValid = ::OpenAPI::fromJsonValue(m_duration_estimated, json[QString("durationEstimated")]);
    m_duration_estimated_isSet = !json[QString("durationEstimated")].isNull() && m_duration_estimated_isValid;

    m_time_based_isValid = ::OpenAPI::fromJsonValue(m_time_based, json[QString("timeBased")]);
    m_time_based_isSet = !json[QString("timeBased")].isNull() && m_time_based_isValid;
}

QString OAITemporalUnit::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAITemporalUnit::asJsonObject() const {
    QJsonObject obj;
    if (m_date_based_isSet) {
        obj.insert(QString("dateBased"), ::OpenAPI::toJsonValue(m_date_based));
    }
    if (m_duration.isSet()) {
        obj.insert(QString("duration"), ::OpenAPI::toJsonValue(m_duration));
    }
    if (m_duration_estimated_isSet) {
        obj.insert(QString("durationEstimated"), ::OpenAPI::toJsonValue(m_duration_estimated));
    }
    if (m_time_based_isSet) {
        obj.insert(QString("timeBased"), ::OpenAPI::toJsonValue(m_time_based));
    }
    return obj;
}

bool OAITemporalUnit::isDateBased() const {
    return m_date_based;
}
void OAITemporalUnit::setDateBased(const bool &date_based) {
    m_date_based = date_based;
    m_date_based_isSet = true;
}

bool OAITemporalUnit::is_date_based_Set() const{
    return m_date_based_isSet;
}

bool OAITemporalUnit::is_date_based_Valid() const{
    return m_date_based_isValid;
}

OAIDuration OAITemporalUnit::getDuration() const {
    return m_duration;
}
void OAITemporalUnit::setDuration(const OAIDuration &duration) {
    m_duration = duration;
    m_duration_isSet = true;
}

bool OAITemporalUnit::is_duration_Set() const{
    return m_duration_isSet;
}

bool OAITemporalUnit::is_duration_Valid() const{
    return m_duration_isValid;
}

bool OAITemporalUnit::isDurationEstimated() const {
    return m_duration_estimated;
}
void OAITemporalUnit::setDurationEstimated(const bool &duration_estimated) {
    m_duration_estimated = duration_estimated;
    m_duration_estimated_isSet = true;
}

bool OAITemporalUnit::is_duration_estimated_Set() const{
    return m_duration_estimated_isSet;
}

bool OAITemporalUnit::is_duration_estimated_Valid() const{
    return m_duration_estimated_isValid;
}

bool OAITemporalUnit::isTimeBased() const {
    return m_time_based;
}
void OAITemporalUnit::setTimeBased(const bool &time_based) {
    m_time_based = time_based;
    m_time_based_isSet = true;
}

bool OAITemporalUnit::is_time_based_Set() const{
    return m_time_based_isSet;
}

bool OAITemporalUnit::is_time_based_Valid() const{
    return m_time_based_isValid;
}

bool OAITemporalUnit::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_date_based_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_duration.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_duration_estimated_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_time_based_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAITemporalUnit::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
