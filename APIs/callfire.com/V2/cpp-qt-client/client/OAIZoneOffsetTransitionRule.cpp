/**
 * CallFire API Documentation
 * CallFire
 *
 * The version of the OpenAPI document: V2
 * Contact: support@callfire.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIZoneOffsetTransitionRule.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIZoneOffsetTransitionRule::OAIZoneOffsetTransitionRule(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIZoneOffsetTransitionRule::OAIZoneOffsetTransitionRule() {
    this->initializeModel();
}

OAIZoneOffsetTransitionRule::~OAIZoneOffsetTransitionRule() {}

void OAIZoneOffsetTransitionRule::initializeModel() {

    m_day_of_month_indicator_isSet = false;
    m_day_of_month_indicator_isValid = false;

    m_day_of_week_isSet = false;
    m_day_of_week_isValid = false;

    m_local_time_isSet = false;
    m_local_time_isValid = false;

    m_midnight_end_of_day_isSet = false;
    m_midnight_end_of_day_isValid = false;

    m_month_isSet = false;
    m_month_isValid = false;

    m_offset_after_isSet = false;
    m_offset_after_isValid = false;

    m_offset_before_isSet = false;
    m_offset_before_isValid = false;

    m_standard_offset_isSet = false;
    m_standard_offset_isValid = false;

    m_time_definition_isSet = false;
    m_time_definition_isValid = false;
}

void OAIZoneOffsetTransitionRule::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIZoneOffsetTransitionRule::fromJsonObject(QJsonObject json) {

    m_day_of_month_indicator_isValid = ::OpenAPI::fromJsonValue(m_day_of_month_indicator, json[QString("dayOfMonthIndicator")]);
    m_day_of_month_indicator_isSet = !json[QString("dayOfMonthIndicator")].isNull() && m_day_of_month_indicator_isValid;

    m_day_of_week_isValid = ::OpenAPI::fromJsonValue(m_day_of_week, json[QString("dayOfWeek")]);
    m_day_of_week_isSet = !json[QString("dayOfWeek")].isNull() && m_day_of_week_isValid;

    m_local_time_isValid = ::OpenAPI::fromJsonValue(m_local_time, json[QString("localTime")]);
    m_local_time_isSet = !json[QString("localTime")].isNull() && m_local_time_isValid;

    m_midnight_end_of_day_isValid = ::OpenAPI::fromJsonValue(m_midnight_end_of_day, json[QString("midnightEndOfDay")]);
    m_midnight_end_of_day_isSet = !json[QString("midnightEndOfDay")].isNull() && m_midnight_end_of_day_isValid;

    m_month_isValid = ::OpenAPI::fromJsonValue(m_month, json[QString("month")]);
    m_month_isSet = !json[QString("month")].isNull() && m_month_isValid;

    m_offset_after_isValid = ::OpenAPI::fromJsonValue(m_offset_after, json[QString("offsetAfter")]);
    m_offset_after_isSet = !json[QString("offsetAfter")].isNull() && m_offset_after_isValid;

    m_offset_before_isValid = ::OpenAPI::fromJsonValue(m_offset_before, json[QString("offsetBefore")]);
    m_offset_before_isSet = !json[QString("offsetBefore")].isNull() && m_offset_before_isValid;

    m_standard_offset_isValid = ::OpenAPI::fromJsonValue(m_standard_offset, json[QString("standardOffset")]);
    m_standard_offset_isSet = !json[QString("standardOffset")].isNull() && m_standard_offset_isValid;

    m_time_definition_isValid = ::OpenAPI::fromJsonValue(m_time_definition, json[QString("timeDefinition")]);
    m_time_definition_isSet = !json[QString("timeDefinition")].isNull() && m_time_definition_isValid;
}

QString OAIZoneOffsetTransitionRule::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIZoneOffsetTransitionRule::asJsonObject() const {
    QJsonObject obj;
    if (m_day_of_month_indicator_isSet) {
        obj.insert(QString("dayOfMonthIndicator"), ::OpenAPI::toJsonValue(m_day_of_month_indicator));
    }
    if (m_day_of_week_isSet) {
        obj.insert(QString("dayOfWeek"), ::OpenAPI::toJsonValue(m_day_of_week));
    }
    if (m_local_time.isSet()) {
        obj.insert(QString("localTime"), ::OpenAPI::toJsonValue(m_local_time));
    }
    if (m_midnight_end_of_day_isSet) {
        obj.insert(QString("midnightEndOfDay"), ::OpenAPI::toJsonValue(m_midnight_end_of_day));
    }
    if (m_month_isSet) {
        obj.insert(QString("month"), ::OpenAPI::toJsonValue(m_month));
    }
    if (m_offset_after.isSet()) {
        obj.insert(QString("offsetAfter"), ::OpenAPI::toJsonValue(m_offset_after));
    }
    if (m_offset_before.isSet()) {
        obj.insert(QString("offsetBefore"), ::OpenAPI::toJsonValue(m_offset_before));
    }
    if (m_standard_offset.isSet()) {
        obj.insert(QString("standardOffset"), ::OpenAPI::toJsonValue(m_standard_offset));
    }
    if (m_time_definition_isSet) {
        obj.insert(QString("timeDefinition"), ::OpenAPI::toJsonValue(m_time_definition));
    }
    return obj;
}

qint32 OAIZoneOffsetTransitionRule::getDayOfMonthIndicator() const {
    return m_day_of_month_indicator;
}
void OAIZoneOffsetTransitionRule::setDayOfMonthIndicator(const qint32 &day_of_month_indicator) {
    m_day_of_month_indicator = day_of_month_indicator;
    m_day_of_month_indicator_isSet = true;
}

bool OAIZoneOffsetTransitionRule::is_day_of_month_indicator_Set() const{
    return m_day_of_month_indicator_isSet;
}

bool OAIZoneOffsetTransitionRule::is_day_of_month_indicator_Valid() const{
    return m_day_of_month_indicator_isValid;
}

QString OAIZoneOffsetTransitionRule::getDayOfWeek() const {
    return m_day_of_week;
}
void OAIZoneOffsetTransitionRule::setDayOfWeek(const QString &day_of_week) {
    m_day_of_week = day_of_week;
    m_day_of_week_isSet = true;
}

bool OAIZoneOffsetTransitionRule::is_day_of_week_Set() const{
    return m_day_of_week_isSet;
}

bool OAIZoneOffsetTransitionRule::is_day_of_week_Valid() const{
    return m_day_of_week_isValid;
}

OAILocalTime OAIZoneOffsetTransitionRule::getLocalTime() const {
    return m_local_time;
}
void OAIZoneOffsetTransitionRule::setLocalTime(const OAILocalTime &local_time) {
    m_local_time = local_time;
    m_local_time_isSet = true;
}

bool OAIZoneOffsetTransitionRule::is_local_time_Set() const{
    return m_local_time_isSet;
}

bool OAIZoneOffsetTransitionRule::is_local_time_Valid() const{
    return m_local_time_isValid;
}

bool OAIZoneOffsetTransitionRule::isMidnightEndOfDay() const {
    return m_midnight_end_of_day;
}
void OAIZoneOffsetTransitionRule::setMidnightEndOfDay(const bool &midnight_end_of_day) {
    m_midnight_end_of_day = midnight_end_of_day;
    m_midnight_end_of_day_isSet = true;
}

bool OAIZoneOffsetTransitionRule::is_midnight_end_of_day_Set() const{
    return m_midnight_end_of_day_isSet;
}

bool OAIZoneOffsetTransitionRule::is_midnight_end_of_day_Valid() const{
    return m_midnight_end_of_day_isValid;
}

QString OAIZoneOffsetTransitionRule::getMonth() const {
    return m_month;
}
void OAIZoneOffsetTransitionRule::setMonth(const QString &month) {
    m_month = month;
    m_month_isSet = true;
}

bool OAIZoneOffsetTransitionRule::is_month_Set() const{
    return m_month_isSet;
}

bool OAIZoneOffsetTransitionRule::is_month_Valid() const{
    return m_month_isValid;
}

OAIZoneOffset OAIZoneOffsetTransitionRule::getOffsetAfter() const {
    return m_offset_after;
}
void OAIZoneOffsetTransitionRule::setOffsetAfter(const OAIZoneOffset &offset_after) {
    m_offset_after = offset_after;
    m_offset_after_isSet = true;
}

bool OAIZoneOffsetTransitionRule::is_offset_after_Set() const{
    return m_offset_after_isSet;
}

bool OAIZoneOffsetTransitionRule::is_offset_after_Valid() const{
    return m_offset_after_isValid;
}

OAIZoneOffset OAIZoneOffsetTransitionRule::getOffsetBefore() const {
    return m_offset_before;
}
void OAIZoneOffsetTransitionRule::setOffsetBefore(const OAIZoneOffset &offset_before) {
    m_offset_before = offset_before;
    m_offset_before_isSet = true;
}

bool OAIZoneOffsetTransitionRule::is_offset_before_Set() const{
    return m_offset_before_isSet;
}

bool OAIZoneOffsetTransitionRule::is_offset_before_Valid() const{
    return m_offset_before_isValid;
}

OAIZoneOffset OAIZoneOffsetTransitionRule::getStandardOffset() const {
    return m_standard_offset;
}
void OAIZoneOffsetTransitionRule::setStandardOffset(const OAIZoneOffset &standard_offset) {
    m_standard_offset = standard_offset;
    m_standard_offset_isSet = true;
}

bool OAIZoneOffsetTransitionRule::is_standard_offset_Set() const{
    return m_standard_offset_isSet;
}

bool OAIZoneOffsetTransitionRule::is_standard_offset_Valid() const{
    return m_standard_offset_isValid;
}

QString OAIZoneOffsetTransitionRule::getTimeDefinition() const {
    return m_time_definition;
}
void OAIZoneOffsetTransitionRule::setTimeDefinition(const QString &time_definition) {
    m_time_definition = time_definition;
    m_time_definition_isSet = true;
}

bool OAIZoneOffsetTransitionRule::is_time_definition_Set() const{
    return m_time_definition_isSet;
}

bool OAIZoneOffsetTransitionRule::is_time_definition_Valid() const{
    return m_time_definition_isValid;
}

bool OAIZoneOffsetTransitionRule::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_day_of_month_indicator_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_day_of_week_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_local_time.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_midnight_end_of_day_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_month_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_offset_after.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_offset_before.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_standard_offset.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_time_definition_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIZoneOffsetTransitionRule::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
