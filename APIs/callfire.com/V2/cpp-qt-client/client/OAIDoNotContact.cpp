/**
 * CallFire API Documentation
 * CallFire
 *
 * The version of the OpenAPI document: V2
 * Contact: support@callfire.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDoNotContact.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDoNotContact::OAIDoNotContact(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDoNotContact::OAIDoNotContact() {
    this->initializeModel();
}

OAIDoNotContact::~OAIDoNotContact() {}

void OAIDoNotContact::initializeModel() {

    m_call_isSet = false;
    m_call_isValid = false;

    m_campaign_id_isSet = false;
    m_campaign_id_isValid = false;

    m_created_isSet = false;
    m_created_isValid = false;

    m_inbound_call_isSet = false;
    m_inbound_call_isValid = false;

    m_inbound_text_isSet = false;
    m_inbound_text_isValid = false;

    m_number_isSet = false;
    m_number_isValid = false;

    m_source_isSet = false;
    m_source_isValid = false;

    m_text_isSet = false;
    m_text_isValid = false;
}

void OAIDoNotContact::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDoNotContact::fromJsonObject(QJsonObject json) {

    m_call_isValid = ::OpenAPI::fromJsonValue(m_call, json[QString("call")]);
    m_call_isSet = !json[QString("call")].isNull() && m_call_isValid;

    m_campaign_id_isValid = ::OpenAPI::fromJsonValue(m_campaign_id, json[QString("campaignId")]);
    m_campaign_id_isSet = !json[QString("campaignId")].isNull() && m_campaign_id_isValid;

    m_created_isValid = ::OpenAPI::fromJsonValue(m_created, json[QString("created")]);
    m_created_isSet = !json[QString("created")].isNull() && m_created_isValid;

    m_inbound_call_isValid = ::OpenAPI::fromJsonValue(m_inbound_call, json[QString("inboundCall")]);
    m_inbound_call_isSet = !json[QString("inboundCall")].isNull() && m_inbound_call_isValid;

    m_inbound_text_isValid = ::OpenAPI::fromJsonValue(m_inbound_text, json[QString("inboundText")]);
    m_inbound_text_isSet = !json[QString("inboundText")].isNull() && m_inbound_text_isValid;

    m_number_isValid = ::OpenAPI::fromJsonValue(m_number, json[QString("number")]);
    m_number_isSet = !json[QString("number")].isNull() && m_number_isValid;

    m_source_isValid = ::OpenAPI::fromJsonValue(m_source, json[QString("source")]);
    m_source_isSet = !json[QString("source")].isNull() && m_source_isValid;

    m_text_isValid = ::OpenAPI::fromJsonValue(m_text, json[QString("text")]);
    m_text_isSet = !json[QString("text")].isNull() && m_text_isValid;
}

QString OAIDoNotContact::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDoNotContact::asJsonObject() const {
    QJsonObject obj;
    if (m_call_isSet) {
        obj.insert(QString("call"), ::OpenAPI::toJsonValue(m_call));
    }
    if (m_campaign_id_isSet) {
        obj.insert(QString("campaignId"), ::OpenAPI::toJsonValue(m_campaign_id));
    }
    if (m_created_isSet) {
        obj.insert(QString("created"), ::OpenAPI::toJsonValue(m_created));
    }
    if (m_inbound_call_isSet) {
        obj.insert(QString("inboundCall"), ::OpenAPI::toJsonValue(m_inbound_call));
    }
    if (m_inbound_text_isSet) {
        obj.insert(QString("inboundText"), ::OpenAPI::toJsonValue(m_inbound_text));
    }
    if (m_number_isSet) {
        obj.insert(QString("number"), ::OpenAPI::toJsonValue(m_number));
    }
    if (m_source_isSet) {
        obj.insert(QString("source"), ::OpenAPI::toJsonValue(m_source));
    }
    if (m_text_isSet) {
        obj.insert(QString("text"), ::OpenAPI::toJsonValue(m_text));
    }
    return obj;
}

bool OAIDoNotContact::isCall() const {
    return m_call;
}
void OAIDoNotContact::setCall(const bool &call) {
    m_call = call;
    m_call_isSet = true;
}

bool OAIDoNotContact::is_call_Set() const{
    return m_call_isSet;
}

bool OAIDoNotContact::is_call_Valid() const{
    return m_call_isValid;
}

qint64 OAIDoNotContact::getCampaignId() const {
    return m_campaign_id;
}
void OAIDoNotContact::setCampaignId(const qint64 &campaign_id) {
    m_campaign_id = campaign_id;
    m_campaign_id_isSet = true;
}

bool OAIDoNotContact::is_campaign_id_Set() const{
    return m_campaign_id_isSet;
}

bool OAIDoNotContact::is_campaign_id_Valid() const{
    return m_campaign_id_isValid;
}

qint64 OAIDoNotContact::getCreated() const {
    return m_created;
}
void OAIDoNotContact::setCreated(const qint64 &created) {
    m_created = created;
    m_created_isSet = true;
}

bool OAIDoNotContact::is_created_Set() const{
    return m_created_isSet;
}

bool OAIDoNotContact::is_created_Valid() const{
    return m_created_isValid;
}

bool OAIDoNotContact::isInboundCall() const {
    return m_inbound_call;
}
void OAIDoNotContact::setInboundCall(const bool &inbound_call) {
    m_inbound_call = inbound_call;
    m_inbound_call_isSet = true;
}

bool OAIDoNotContact::is_inbound_call_Set() const{
    return m_inbound_call_isSet;
}

bool OAIDoNotContact::is_inbound_call_Valid() const{
    return m_inbound_call_isValid;
}

bool OAIDoNotContact::isInboundText() const {
    return m_inbound_text;
}
void OAIDoNotContact::setInboundText(const bool &inbound_text) {
    m_inbound_text = inbound_text;
    m_inbound_text_isSet = true;
}

bool OAIDoNotContact::is_inbound_text_Set() const{
    return m_inbound_text_isSet;
}

bool OAIDoNotContact::is_inbound_text_Valid() const{
    return m_inbound_text_isValid;
}

QString OAIDoNotContact::getNumber() const {
    return m_number;
}
void OAIDoNotContact::setNumber(const QString &number) {
    m_number = number;
    m_number_isSet = true;
}

bool OAIDoNotContact::is_number_Set() const{
    return m_number_isSet;
}

bool OAIDoNotContact::is_number_Valid() const{
    return m_number_isValid;
}

QString OAIDoNotContact::getSource() const {
    return m_source;
}
void OAIDoNotContact::setSource(const QString &source) {
    m_source = source;
    m_source_isSet = true;
}

bool OAIDoNotContact::is_source_Set() const{
    return m_source_isSet;
}

bool OAIDoNotContact::is_source_Valid() const{
    return m_source_isValid;
}

bool OAIDoNotContact::isText() const {
    return m_text;
}
void OAIDoNotContact::setText(const bool &text) {
    m_text = text;
    m_text_isSet = true;
}

bool OAIDoNotContact::is_text_Set() const{
    return m_text_isSet;
}

bool OAIDoNotContact::is_text_Valid() const{
    return m_text_isValid;
}

bool OAIDoNotContact::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_call_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_campaign_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_created_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_inbound_call_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_inbound_text_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_number_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_source_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_text_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDoNotContact::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
