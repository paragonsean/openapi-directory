/**
 * CallFire API Documentation
 * CallFire
 *
 * The version of the OpenAPI document: V2
 * Contact: support@callfire.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIZoneOffsetTransitionRule.h
 *
 * ~
 */

#ifndef OAIZoneOffsetTransitionRule_H
#define OAIZoneOffsetTransitionRule_H

#include <QJsonObject>

#include "OAILocalTime.h"
#include "OAIZoneOffset.h"
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAILocalTime;
class OAIZoneOffset;

class OAIZoneOffsetTransitionRule : public OAIObject {
public:
    OAIZoneOffsetTransitionRule();
    OAIZoneOffsetTransitionRule(QString json);
    ~OAIZoneOffsetTransitionRule() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    qint32 getDayOfMonthIndicator() const;
    void setDayOfMonthIndicator(const qint32 &day_of_month_indicator);
    bool is_day_of_month_indicator_Set() const;
    bool is_day_of_month_indicator_Valid() const;

    QString getDayOfWeek() const;
    void setDayOfWeek(const QString &day_of_week);
    bool is_day_of_week_Set() const;
    bool is_day_of_week_Valid() const;

    OAILocalTime getLocalTime() const;
    void setLocalTime(const OAILocalTime &local_time);
    bool is_local_time_Set() const;
    bool is_local_time_Valid() const;

    bool isMidnightEndOfDay() const;
    void setMidnightEndOfDay(const bool &midnight_end_of_day);
    bool is_midnight_end_of_day_Set() const;
    bool is_midnight_end_of_day_Valid() const;

    QString getMonth() const;
    void setMonth(const QString &month);
    bool is_month_Set() const;
    bool is_month_Valid() const;

    OAIZoneOffset getOffsetAfter() const;
    void setOffsetAfter(const OAIZoneOffset &offset_after);
    bool is_offset_after_Set() const;
    bool is_offset_after_Valid() const;

    OAIZoneOffset getOffsetBefore() const;
    void setOffsetBefore(const OAIZoneOffset &offset_before);
    bool is_offset_before_Set() const;
    bool is_offset_before_Valid() const;

    OAIZoneOffset getStandardOffset() const;
    void setStandardOffset(const OAIZoneOffset &standard_offset);
    bool is_standard_offset_Set() const;
    bool is_standard_offset_Valid() const;

    QString getTimeDefinition() const;
    void setTimeDefinition(const QString &time_definition);
    bool is_time_definition_Set() const;
    bool is_time_definition_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    qint32 m_day_of_month_indicator;
    bool m_day_of_month_indicator_isSet;
    bool m_day_of_month_indicator_isValid;

    QString m_day_of_week;
    bool m_day_of_week_isSet;
    bool m_day_of_week_isValid;

    OAILocalTime m_local_time;
    bool m_local_time_isSet;
    bool m_local_time_isValid;

    bool m_midnight_end_of_day;
    bool m_midnight_end_of_day_isSet;
    bool m_midnight_end_of_day_isValid;

    QString m_month;
    bool m_month_isSet;
    bool m_month_isValid;

    OAIZoneOffset m_offset_after;
    bool m_offset_after_isSet;
    bool m_offset_after_isValid;

    OAIZoneOffset m_offset_before;
    bool m_offset_before_isSet;
    bool m_offset_before_isValid;

    OAIZoneOffset m_standard_offset;
    bool m_standard_offset_isSet;
    bool m_standard_offset_isValid;

    QString m_time_definition;
    bool m_time_definition_isSet;
    bool m_time_definition_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIZoneOffsetTransitionRule)

#endif // OAIZoneOffsetTransitionRule_H
