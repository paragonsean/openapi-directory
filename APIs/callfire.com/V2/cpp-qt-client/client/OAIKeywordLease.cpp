/**
 * CallFire API Documentation
 * CallFire
 *
 * The version of the OpenAPI document: V2
 * Contact: support@callfire.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIKeywordLease.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIKeywordLease::OAIKeywordLease(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIKeywordLease::OAIKeywordLease() {
    this->initializeModel();
}

OAIKeywordLease::~OAIKeywordLease() {}

void OAIKeywordLease::initializeModel() {

    m_auto_renew_isSet = false;
    m_auto_renew_isValid = false;

    m_contact_list_id_isSet = false;
    m_contact_list_id_isValid = false;

    m_double_opt_in_enabled_isSet = false;
    m_double_opt_in_enabled_isValid = false;

    m_keyword_isSet = false;
    m_keyword_isValid = false;

    m_labels_isSet = false;
    m_labels_isValid = false;

    m_lease_begin_isSet = false;
    m_lease_begin_isValid = false;

    m_lease_end_isSet = false;
    m_lease_end_isValid = false;

    m_number_isSet = false;
    m_number_isValid = false;

    m_opt_in_confirmation_message_isSet = false;
    m_opt_in_confirmation_message_isValid = false;

    m_short_code_isSet = false;
    m_short_code_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;
}

void OAIKeywordLease::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIKeywordLease::fromJsonObject(QJsonObject json) {

    m_auto_renew_isValid = ::OpenAPI::fromJsonValue(m_auto_renew, json[QString("autoRenew")]);
    m_auto_renew_isSet = !json[QString("autoRenew")].isNull() && m_auto_renew_isValid;

    m_contact_list_id_isValid = ::OpenAPI::fromJsonValue(m_contact_list_id, json[QString("contactListId")]);
    m_contact_list_id_isSet = !json[QString("contactListId")].isNull() && m_contact_list_id_isValid;

    m_double_opt_in_enabled_isValid = ::OpenAPI::fromJsonValue(m_double_opt_in_enabled, json[QString("doubleOptInEnabled")]);
    m_double_opt_in_enabled_isSet = !json[QString("doubleOptInEnabled")].isNull() && m_double_opt_in_enabled_isValid;

    m_keyword_isValid = ::OpenAPI::fromJsonValue(m_keyword, json[QString("keyword")]);
    m_keyword_isSet = !json[QString("keyword")].isNull() && m_keyword_isValid;

    m_labels_isValid = ::OpenAPI::fromJsonValue(m_labels, json[QString("labels")]);
    m_labels_isSet = !json[QString("labels")].isNull() && m_labels_isValid;

    m_lease_begin_isValid = ::OpenAPI::fromJsonValue(m_lease_begin, json[QString("leaseBegin")]);
    m_lease_begin_isSet = !json[QString("leaseBegin")].isNull() && m_lease_begin_isValid;

    m_lease_end_isValid = ::OpenAPI::fromJsonValue(m_lease_end, json[QString("leaseEnd")]);
    m_lease_end_isSet = !json[QString("leaseEnd")].isNull() && m_lease_end_isValid;

    m_number_isValid = ::OpenAPI::fromJsonValue(m_number, json[QString("number")]);
    m_number_isSet = !json[QString("number")].isNull() && m_number_isValid;

    m_opt_in_confirmation_message_isValid = ::OpenAPI::fromJsonValue(m_opt_in_confirmation_message, json[QString("optInConfirmationMessage")]);
    m_opt_in_confirmation_message_isSet = !json[QString("optInConfirmationMessage")].isNull() && m_opt_in_confirmation_message_isValid;

    m_short_code_isValid = ::OpenAPI::fromJsonValue(m_short_code, json[QString("shortCode")]);
    m_short_code_isSet = !json[QString("shortCode")].isNull() && m_short_code_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("status")]);
    m_status_isSet = !json[QString("status")].isNull() && m_status_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;
}

QString OAIKeywordLease::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIKeywordLease::asJsonObject() const {
    QJsonObject obj;
    if (m_auto_renew_isSet) {
        obj.insert(QString("autoRenew"), ::OpenAPI::toJsonValue(m_auto_renew));
    }
    if (m_contact_list_id_isSet) {
        obj.insert(QString("contactListId"), ::OpenAPI::toJsonValue(m_contact_list_id));
    }
    if (m_double_opt_in_enabled_isSet) {
        obj.insert(QString("doubleOptInEnabled"), ::OpenAPI::toJsonValue(m_double_opt_in_enabled));
    }
    if (m_keyword_isSet) {
        obj.insert(QString("keyword"), ::OpenAPI::toJsonValue(m_keyword));
    }
    if (m_labels.size() > 0) {
        obj.insert(QString("labels"), ::OpenAPI::toJsonValue(m_labels));
    }
    if (m_lease_begin_isSet) {
        obj.insert(QString("leaseBegin"), ::OpenAPI::toJsonValue(m_lease_begin));
    }
    if (m_lease_end_isSet) {
        obj.insert(QString("leaseEnd"), ::OpenAPI::toJsonValue(m_lease_end));
    }
    if (m_number_isSet) {
        obj.insert(QString("number"), ::OpenAPI::toJsonValue(m_number));
    }
    if (m_opt_in_confirmation_message_isSet) {
        obj.insert(QString("optInConfirmationMessage"), ::OpenAPI::toJsonValue(m_opt_in_confirmation_message));
    }
    if (m_short_code_isSet) {
        obj.insert(QString("shortCode"), ::OpenAPI::toJsonValue(m_short_code));
    }
    if (m_status_isSet) {
        obj.insert(QString("status"), ::OpenAPI::toJsonValue(m_status));
    }
    if (m_type_isSet) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    return obj;
}

bool OAIKeywordLease::isAutoRenew() const {
    return m_auto_renew;
}
void OAIKeywordLease::setAutoRenew(const bool &auto_renew) {
    m_auto_renew = auto_renew;
    m_auto_renew_isSet = true;
}

bool OAIKeywordLease::is_auto_renew_Set() const{
    return m_auto_renew_isSet;
}

bool OAIKeywordLease::is_auto_renew_Valid() const{
    return m_auto_renew_isValid;
}

qint64 OAIKeywordLease::getContactListId() const {
    return m_contact_list_id;
}
void OAIKeywordLease::setContactListId(const qint64 &contact_list_id) {
    m_contact_list_id = contact_list_id;
    m_contact_list_id_isSet = true;
}

bool OAIKeywordLease::is_contact_list_id_Set() const{
    return m_contact_list_id_isSet;
}

bool OAIKeywordLease::is_contact_list_id_Valid() const{
    return m_contact_list_id_isValid;
}

bool OAIKeywordLease::isDoubleOptInEnabled() const {
    return m_double_opt_in_enabled;
}
void OAIKeywordLease::setDoubleOptInEnabled(const bool &double_opt_in_enabled) {
    m_double_opt_in_enabled = double_opt_in_enabled;
    m_double_opt_in_enabled_isSet = true;
}

bool OAIKeywordLease::is_double_opt_in_enabled_Set() const{
    return m_double_opt_in_enabled_isSet;
}

bool OAIKeywordLease::is_double_opt_in_enabled_Valid() const{
    return m_double_opt_in_enabled_isValid;
}

QString OAIKeywordLease::getKeyword() const {
    return m_keyword;
}
void OAIKeywordLease::setKeyword(const QString &keyword) {
    m_keyword = keyword;
    m_keyword_isSet = true;
}

bool OAIKeywordLease::is_keyword_Set() const{
    return m_keyword_isSet;
}

bool OAIKeywordLease::is_keyword_Valid() const{
    return m_keyword_isValid;
}

QList<QString> OAIKeywordLease::getLabels() const {
    return m_labels;
}
void OAIKeywordLease::setLabels(const QList<QString> &labels) {
    m_labels = labels;
    m_labels_isSet = true;
}

bool OAIKeywordLease::is_labels_Set() const{
    return m_labels_isSet;
}

bool OAIKeywordLease::is_labels_Valid() const{
    return m_labels_isValid;
}

qint64 OAIKeywordLease::getLeaseBegin() const {
    return m_lease_begin;
}
void OAIKeywordLease::setLeaseBegin(const qint64 &lease_begin) {
    m_lease_begin = lease_begin;
    m_lease_begin_isSet = true;
}

bool OAIKeywordLease::is_lease_begin_Set() const{
    return m_lease_begin_isSet;
}

bool OAIKeywordLease::is_lease_begin_Valid() const{
    return m_lease_begin_isValid;
}

qint64 OAIKeywordLease::getLeaseEnd() const {
    return m_lease_end;
}
void OAIKeywordLease::setLeaseEnd(const qint64 &lease_end) {
    m_lease_end = lease_end;
    m_lease_end_isSet = true;
}

bool OAIKeywordLease::is_lease_end_Set() const{
    return m_lease_end_isSet;
}

bool OAIKeywordLease::is_lease_end_Valid() const{
    return m_lease_end_isValid;
}

QString OAIKeywordLease::getNumber() const {
    return m_number;
}
void OAIKeywordLease::setNumber(const QString &number) {
    m_number = number;
    m_number_isSet = true;
}

bool OAIKeywordLease::is_number_Set() const{
    return m_number_isSet;
}

bool OAIKeywordLease::is_number_Valid() const{
    return m_number_isValid;
}

QString OAIKeywordLease::getOptInConfirmationMessage() const {
    return m_opt_in_confirmation_message;
}
void OAIKeywordLease::setOptInConfirmationMessage(const QString &opt_in_confirmation_message) {
    m_opt_in_confirmation_message = opt_in_confirmation_message;
    m_opt_in_confirmation_message_isSet = true;
}

bool OAIKeywordLease::is_opt_in_confirmation_message_Set() const{
    return m_opt_in_confirmation_message_isSet;
}

bool OAIKeywordLease::is_opt_in_confirmation_message_Valid() const{
    return m_opt_in_confirmation_message_isValid;
}

QString OAIKeywordLease::getShortCode() const {
    return m_short_code;
}
void OAIKeywordLease::setShortCode(const QString &short_code) {
    m_short_code = short_code;
    m_short_code_isSet = true;
}

bool OAIKeywordLease::is_short_code_Set() const{
    return m_short_code_isSet;
}

bool OAIKeywordLease::is_short_code_Valid() const{
    return m_short_code_isValid;
}

QString OAIKeywordLease::getStatus() const {
    return m_status;
}
void OAIKeywordLease::setStatus(const QString &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAIKeywordLease::is_status_Set() const{
    return m_status_isSet;
}

bool OAIKeywordLease::is_status_Valid() const{
    return m_status_isValid;
}

QString OAIKeywordLease::getType() const {
    return m_type;
}
void OAIKeywordLease::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIKeywordLease::is_type_Set() const{
    return m_type_isSet;
}

bool OAIKeywordLease::is_type_Valid() const{
    return m_type_isValid;
}

bool OAIKeywordLease::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_auto_renew_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_contact_list_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_double_opt_in_enabled_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_keyword_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_labels.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_lease_begin_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_lease_end_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_number_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_opt_in_confirmation_message_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_short_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIKeywordLease::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
