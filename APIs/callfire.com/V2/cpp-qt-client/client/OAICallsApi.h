/**
 * CallFire API Documentation
 * CallFire
 *
 * The version of the OpenAPI document: V2
 * Contact: support@callfire.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAICallsApi_H
#define OAI_OAICallsApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIBatchPage.h"
#include "OAIBatchRequest.h"
#include "OAICall.h"
#include "OAICallBroadcast.h"
#include "OAICallBroadcastPage.h"
#include "OAICallBroadcastStats.h"
#include "OAICallList.h"
#include "OAICallPage.h"
#include "OAICallRecipient.h"
#include "OAICallRecording.h"
#include "OAICallRecordingList.h"
#include "OAIErrorResponse.h"
#include "OAIObject.h"
#include "OAIRecipient.h"
#include "OAIResourceId.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAICallsApi : public QObject {
    Q_OBJECT

public:
    OAICallsApi(const int timeOut = 0);
    ~OAICallsApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  id qint64 [required]
    * @param[in]  strict_validation bool [optional]
    * @param[in]  oai_batch_request OAIBatchRequest [optional]
    */
    virtual void addCallBroadcastBatch(const qint64 &id, const ::OpenAPI::OptionalParam<bool> &strict_validation = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<OAIBatchRequest> &oai_batch_request = ::OpenAPI::OptionalParam<OAIBatchRequest>());

    /**
    * @param[in]  id qint64 [required]
    * @param[in]  fields QString [optional]
    * @param[in]  strict_validation bool [optional]
    * @param[in]  oai_recipient QList<OAIRecipient> [optional]
    */
    virtual void addCallBroadcastRecipients(const qint64 &id, const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &strict_validation = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QList<OAIRecipient>> &oai_recipient = ::OpenAPI::OptionalParam<QList<OAIRecipient>>());

    /**
    * @param[in]  id qint64 [required]
    */
    virtual void archiveVoiceBroadcast(const qint64 &id);

    /**
    * @param[in]  start bool [optional]
    * @param[in]  strict_validation bool [optional]
    * @param[in]  oai_call_broadcast OAICallBroadcast [optional]
    */
    virtual void createCallBroadcast(const ::OpenAPI::OptionalParam<bool> &start = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &strict_validation = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<OAICallBroadcast> &oai_call_broadcast = ::OpenAPI::OptionalParam<OAICallBroadcast>());

    /**
    * @param[in]  fields QString [optional]
    * @param[in]  limit qint32 [optional]
    * @param[in]  offset qint32 [optional]
    * @param[in]  label QString [optional]
    * @param[in]  name QString [optional]
    * @param[in]  running bool [optional]
    * @param[in]  scheduled bool [optional]
    * @param[in]  interval_begin qint64 [optional]
    * @param[in]  interval_end qint64 [optional]
    */
    virtual void findCallBroadcasts(const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &limit = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &offset = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &label = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &name = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &running = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &scheduled = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<qint64> &interval_begin = ::OpenAPI::OptionalParam<qint64>(), const ::OpenAPI::OptionalParam<qint64> &interval_end = ::OpenAPI::OptionalParam<qint64>());

    /**
    * @param[in]  fields QString [optional]
    * @param[in]  limit qint32 [optional]
    * @param[in]  offset qint32 [optional]
    * @param[in]  id QList<qint64> [optional]
    * @param[in]  campaign_id qint64 [optional]
    * @param[in]  batch_id qint64 [optional]
    * @param[in]  from_number QString [optional]
    * @param[in]  to_number QString [optional]
    * @param[in]  label QString [optional]
    * @param[in]  states QString [optional]
    * @param[in]  results QString [optional]
    * @param[in]  inbound bool [optional]
    * @param[in]  interval_begin qint64 [optional]
    * @param[in]  interval_end qint64 [optional]
    */
    virtual void findCalls(const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &limit = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &offset = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QList<qint64>> &id = ::OpenAPI::OptionalParam<QList<qint64>>(), const ::OpenAPI::OptionalParam<qint64> &campaign_id = ::OpenAPI::OptionalParam<qint64>(), const ::OpenAPI::OptionalParam<qint64> &batch_id = ::OpenAPI::OptionalParam<qint64>(), const ::OpenAPI::OptionalParam<QString> &from_number = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &to_number = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &label = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &states = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &results = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &inbound = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<qint64> &interval_begin = ::OpenAPI::OptionalParam<qint64>(), const ::OpenAPI::OptionalParam<qint64> &interval_end = ::OpenAPI::OptionalParam<qint64>());

    /**
    * @param[in]  id qint64 [required]
    * @param[in]  fields QString [optional]
    */
    virtual void getCall(const qint64 &id, const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  id qint64 [required]
    * @param[in]  fields QString [optional]
    */
    virtual void getCallBroadcast(const qint64 &id, const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  id qint64 [required]
    * @param[in]  fields QString [optional]
    * @param[in]  limit qint32 [optional]
    * @param[in]  offset qint32 [optional]
    */
    virtual void getCallBroadcastBatches(const qint64 &id, const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &limit = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &offset = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  id qint64 [required]
    * @param[in]  batch_id qint64 [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  limit qint32 [optional]
    * @param[in]  offset qint32 [optional]
    */
    virtual void getCallBroadcastCalls(const qint64 &id, const ::OpenAPI::OptionalParam<qint64> &batch_id = ::OpenAPI::OptionalParam<qint64>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &limit = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &offset = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  id qint64 [required]
    * @param[in]  fields QString [optional]
    * @param[in]  begin qint64 [optional]
    * @param[in]  end qint64 [optional]
    */
    virtual void getCallBroadcastStats(const qint64 &id, const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint64> &begin = ::OpenAPI::OptionalParam<qint64>(), const ::OpenAPI::OptionalParam<qint64> &end = ::OpenAPI::OptionalParam<qint64>());

    /**
    * @param[in]  id qint64 [required]
    * @param[in]  fields QString [optional]
    */
    virtual void getCallRecording(const qint64 &id, const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  id qint64 [required]
    * @param[in]  name QString [required]
    * @param[in]  fields QString [optional]
    */
    virtual void getCallRecordingByName(const qint64 &id, const QString &name, const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  id qint64 [required]
    */
    virtual void getCallRecordingMp3(const qint64 &id);

    /**
    * @param[in]  id qint64 [required]
    * @param[in]  name QString [required]
    */
    virtual void getCallRecordingMp3ByName(const qint64 &id, const QString &name);

    /**
    * @param[in]  id qint64 [required]
    * @param[in]  fields QString [optional]
    */
    virtual void getCallRecordings(const qint64 &id, const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  fields QString [optional]
    * @param[in]  campaign_id qint64 [optional]
    * @param[in]  default_live_message QString [optional]
    * @param[in]  default_machine_message QString [optional]
    * @param[in]  default_live_message_sound_id qint64 [optional]
    * @param[in]  default_machine_message_sound_id qint64 [optional]
    * @param[in]  default_voice QString [optional]
    * @param[in]  strict_validation bool [optional]
    * @param[in]  oai_call_recipient QList<OAICallRecipient> [optional]
    */
    virtual void sendCalls(const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint64> &campaign_id = ::OpenAPI::OptionalParam<qint64>(), const ::OpenAPI::OptionalParam<QString> &default_live_message = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &default_machine_message = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint64> &default_live_message_sound_id = ::OpenAPI::OptionalParam<qint64>(), const ::OpenAPI::OptionalParam<qint64> &default_machine_message_sound_id = ::OpenAPI::OptionalParam<qint64>(), const ::OpenAPI::OptionalParam<QString> &default_voice = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &strict_validation = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QList<OAICallRecipient>> &oai_call_recipient = ::OpenAPI::OptionalParam<QList<OAICallRecipient>>());

    /**
    * @param[in]  id qint64 [required]
    */
    virtual void startVoiceBroadcast(const qint64 &id);

    /**
    * @param[in]  id qint64 [required]
    */
    virtual void stopVoiceBroadcast(const qint64 &id);

    /**
    * @param[in]  id qint64 [required]
    * @param[in]  enable bool [optional]
    * @param[in]  oai_recipient QList<OAIRecipient> [optional]
    */
    virtual void toggleCallBroadcastRecipientsStatus(const qint64 &id, const ::OpenAPI::OptionalParam<bool> &enable = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QList<OAIRecipient>> &oai_recipient = ::OpenAPI::OptionalParam<QList<OAIRecipient>>());

    /**
    * @param[in]  id qint64 [required]
    * @param[in]  strict_validation bool [optional]
    * @param[in]  oai_call_broadcast OAICallBroadcast [optional]
    */
    virtual void updateCallBroadcast(const qint64 &id, const ::OpenAPI::OptionalParam<bool> &strict_validation = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<OAICallBroadcast> &oai_call_broadcast = ::OpenAPI::OptionalParam<OAICallBroadcast>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void addCallBroadcastBatchCallback(OAIHttpRequestWorker *worker);
    void addCallBroadcastRecipientsCallback(OAIHttpRequestWorker *worker);
    void archiveVoiceBroadcastCallback(OAIHttpRequestWorker *worker);
    void createCallBroadcastCallback(OAIHttpRequestWorker *worker);
    void findCallBroadcastsCallback(OAIHttpRequestWorker *worker);
    void findCallsCallback(OAIHttpRequestWorker *worker);
    void getCallCallback(OAIHttpRequestWorker *worker);
    void getCallBroadcastCallback(OAIHttpRequestWorker *worker);
    void getCallBroadcastBatchesCallback(OAIHttpRequestWorker *worker);
    void getCallBroadcastCallsCallback(OAIHttpRequestWorker *worker);
    void getCallBroadcastStatsCallback(OAIHttpRequestWorker *worker);
    void getCallRecordingCallback(OAIHttpRequestWorker *worker);
    void getCallRecordingByNameCallback(OAIHttpRequestWorker *worker);
    void getCallRecordingMp3Callback(OAIHttpRequestWorker *worker);
    void getCallRecordingMp3ByNameCallback(OAIHttpRequestWorker *worker);
    void getCallRecordingsCallback(OAIHttpRequestWorker *worker);
    void sendCallsCallback(OAIHttpRequestWorker *worker);
    void startVoiceBroadcastCallback(OAIHttpRequestWorker *worker);
    void stopVoiceBroadcastCallback(OAIHttpRequestWorker *worker);
    void toggleCallBroadcastRecipientsStatusCallback(OAIHttpRequestWorker *worker);
    void updateCallBroadcastCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void addCallBroadcastBatchSignal(OAIResourceId summary);
    void addCallBroadcastRecipientsSignal(OAICallList summary);
    void archiveVoiceBroadcastSignal();
    void createCallBroadcastSignal(OAIResourceId summary);
    void findCallBroadcastsSignal(OAICallBroadcastPage summary);
    void findCallsSignal(OAICallPage summary);
    void getCallSignal(OAICall summary);
    void getCallBroadcastSignal(OAICallBroadcast summary);
    void getCallBroadcastBatchesSignal(OAIBatchPage summary);
    void getCallBroadcastCallsSignal(OAICallPage summary);
    void getCallBroadcastStatsSignal(OAICallBroadcastStats summary);
    void getCallRecordingSignal(OAICallRecording summary);
    void getCallRecordingByNameSignal(OAICallRecording summary);
    void getCallRecordingMp3Signal(OAIObject summary);
    void getCallRecordingMp3ByNameSignal(OAIObject summary);
    void getCallRecordingsSignal(OAICallRecordingList summary);
    void sendCallsSignal(OAICallList summary);
    void startVoiceBroadcastSignal();
    void stopVoiceBroadcastSignal();
    void toggleCallBroadcastRecipientsStatusSignal();
    void updateCallBroadcastSignal();


    void addCallBroadcastBatchSignalFull(OAIHttpRequestWorker *worker, OAIResourceId summary);
    void addCallBroadcastRecipientsSignalFull(OAIHttpRequestWorker *worker, OAICallList summary);
    void archiveVoiceBroadcastSignalFull(OAIHttpRequestWorker *worker);
    void createCallBroadcastSignalFull(OAIHttpRequestWorker *worker, OAIResourceId summary);
    void findCallBroadcastsSignalFull(OAIHttpRequestWorker *worker, OAICallBroadcastPage summary);
    void findCallsSignalFull(OAIHttpRequestWorker *worker, OAICallPage summary);
    void getCallSignalFull(OAIHttpRequestWorker *worker, OAICall summary);
    void getCallBroadcastSignalFull(OAIHttpRequestWorker *worker, OAICallBroadcast summary);
    void getCallBroadcastBatchesSignalFull(OAIHttpRequestWorker *worker, OAIBatchPage summary);
    void getCallBroadcastCallsSignalFull(OAIHttpRequestWorker *worker, OAICallPage summary);
    void getCallBroadcastStatsSignalFull(OAIHttpRequestWorker *worker, OAICallBroadcastStats summary);
    void getCallRecordingSignalFull(OAIHttpRequestWorker *worker, OAICallRecording summary);
    void getCallRecordingByNameSignalFull(OAIHttpRequestWorker *worker, OAICallRecording summary);
    void getCallRecordingMp3SignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void getCallRecordingMp3ByNameSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void getCallRecordingsSignalFull(OAIHttpRequestWorker *worker, OAICallRecordingList summary);
    void sendCallsSignalFull(OAIHttpRequestWorker *worker, OAICallList summary);
    void startVoiceBroadcastSignalFull(OAIHttpRequestWorker *worker);
    void stopVoiceBroadcastSignalFull(OAIHttpRequestWorker *worker);
    void toggleCallBroadcastRecipientsStatusSignalFull(OAIHttpRequestWorker *worker);
    void updateCallBroadcastSignalFull(OAIHttpRequestWorker *worker);

    Q_DECL_DEPRECATED_X("Use addCallBroadcastBatchSignalError() instead")
    void addCallBroadcastBatchSignalE(OAIResourceId summary, QNetworkReply::NetworkError error_type, QString error_str);
    void addCallBroadcastBatchSignalError(OAIResourceId summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use addCallBroadcastRecipientsSignalError() instead")
    void addCallBroadcastRecipientsSignalE(OAICallList summary, QNetworkReply::NetworkError error_type, QString error_str);
    void addCallBroadcastRecipientsSignalError(OAICallList summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use archiveVoiceBroadcastSignalError() instead")
    void archiveVoiceBroadcastSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void archiveVoiceBroadcastSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createCallBroadcastSignalError() instead")
    void createCallBroadcastSignalE(OAIResourceId summary, QNetworkReply::NetworkError error_type, QString error_str);
    void createCallBroadcastSignalError(OAIResourceId summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use findCallBroadcastsSignalError() instead")
    void findCallBroadcastsSignalE(OAICallBroadcastPage summary, QNetworkReply::NetworkError error_type, QString error_str);
    void findCallBroadcastsSignalError(OAICallBroadcastPage summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use findCallsSignalError() instead")
    void findCallsSignalE(OAICallPage summary, QNetworkReply::NetworkError error_type, QString error_str);
    void findCallsSignalError(OAICallPage summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getCallSignalError() instead")
    void getCallSignalE(OAICall summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getCallSignalError(OAICall summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getCallBroadcastSignalError() instead")
    void getCallBroadcastSignalE(OAICallBroadcast summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getCallBroadcastSignalError(OAICallBroadcast summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getCallBroadcastBatchesSignalError() instead")
    void getCallBroadcastBatchesSignalE(OAIBatchPage summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getCallBroadcastBatchesSignalError(OAIBatchPage summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getCallBroadcastCallsSignalError() instead")
    void getCallBroadcastCallsSignalE(OAICallPage summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getCallBroadcastCallsSignalError(OAICallPage summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getCallBroadcastStatsSignalError() instead")
    void getCallBroadcastStatsSignalE(OAICallBroadcastStats summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getCallBroadcastStatsSignalError(OAICallBroadcastStats summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getCallRecordingSignalError() instead")
    void getCallRecordingSignalE(OAICallRecording summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getCallRecordingSignalError(OAICallRecording summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getCallRecordingByNameSignalError() instead")
    void getCallRecordingByNameSignalE(OAICallRecording summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getCallRecordingByNameSignalError(OAICallRecording summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getCallRecordingMp3SignalError() instead")
    void getCallRecordingMp3SignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getCallRecordingMp3SignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getCallRecordingMp3ByNameSignalError() instead")
    void getCallRecordingMp3ByNameSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getCallRecordingMp3ByNameSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getCallRecordingsSignalError() instead")
    void getCallRecordingsSignalE(OAICallRecordingList summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getCallRecordingsSignalError(OAICallRecordingList summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use sendCallsSignalError() instead")
    void sendCallsSignalE(OAICallList summary, QNetworkReply::NetworkError error_type, QString error_str);
    void sendCallsSignalError(OAICallList summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use startVoiceBroadcastSignalError() instead")
    void startVoiceBroadcastSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void startVoiceBroadcastSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use stopVoiceBroadcastSignalError() instead")
    void stopVoiceBroadcastSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void stopVoiceBroadcastSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use toggleCallBroadcastRecipientsStatusSignalError() instead")
    void toggleCallBroadcastRecipientsStatusSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void toggleCallBroadcastRecipientsStatusSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateCallBroadcastSignalError() instead")
    void updateCallBroadcastSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void updateCallBroadcastSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use addCallBroadcastBatchSignalErrorFull() instead")
    void addCallBroadcastBatchSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void addCallBroadcastBatchSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use addCallBroadcastRecipientsSignalErrorFull() instead")
    void addCallBroadcastRecipientsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void addCallBroadcastRecipientsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use archiveVoiceBroadcastSignalErrorFull() instead")
    void archiveVoiceBroadcastSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void archiveVoiceBroadcastSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createCallBroadcastSignalErrorFull() instead")
    void createCallBroadcastSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void createCallBroadcastSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use findCallBroadcastsSignalErrorFull() instead")
    void findCallBroadcastsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void findCallBroadcastsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use findCallsSignalErrorFull() instead")
    void findCallsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void findCallsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getCallSignalErrorFull() instead")
    void getCallSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getCallSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getCallBroadcastSignalErrorFull() instead")
    void getCallBroadcastSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getCallBroadcastSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getCallBroadcastBatchesSignalErrorFull() instead")
    void getCallBroadcastBatchesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getCallBroadcastBatchesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getCallBroadcastCallsSignalErrorFull() instead")
    void getCallBroadcastCallsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getCallBroadcastCallsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getCallBroadcastStatsSignalErrorFull() instead")
    void getCallBroadcastStatsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getCallBroadcastStatsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getCallRecordingSignalErrorFull() instead")
    void getCallRecordingSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getCallRecordingSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getCallRecordingByNameSignalErrorFull() instead")
    void getCallRecordingByNameSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getCallRecordingByNameSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getCallRecordingMp3SignalErrorFull() instead")
    void getCallRecordingMp3SignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getCallRecordingMp3SignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getCallRecordingMp3ByNameSignalErrorFull() instead")
    void getCallRecordingMp3ByNameSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getCallRecordingMp3ByNameSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getCallRecordingsSignalErrorFull() instead")
    void getCallRecordingsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getCallRecordingsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use sendCallsSignalErrorFull() instead")
    void sendCallsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void sendCallsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use startVoiceBroadcastSignalErrorFull() instead")
    void startVoiceBroadcastSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void startVoiceBroadcastSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use stopVoiceBroadcastSignalErrorFull() instead")
    void stopVoiceBroadcastSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void stopVoiceBroadcastSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use toggleCallBroadcastRecipientsStatusSignalErrorFull() instead")
    void toggleCallBroadcastRecipientsStatusSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void toggleCallBroadcastRecipientsStatusSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateCallBroadcastSignalErrorFull() instead")
    void updateCallBroadcastSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateCallBroadcastSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
