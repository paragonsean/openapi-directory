/**
 * CallFire API Documentation
 * CallFire
 *
 * The version of the OpenAPI document: V2
 * Contact: support@callfire.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAINumberOrder.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAINumberOrder::OAINumberOrder(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAINumberOrder::OAINumberOrder() {
    this->initializeModel();
}

OAINumberOrder::~OAINumberOrder() {}

void OAINumberOrder::initializeModel() {

    m_created_isSet = false;
    m_created_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_keywords_isSet = false;
    m_keywords_isValid = false;

    m_local_numbers_isSet = false;
    m_local_numbers_isValid = false;

    m_sales_tax_isSet = false;
    m_sales_tax_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;

    m_summary_isSet = false;
    m_summary_isValid = false;

    m_toll_free_numbers_isSet = false;
    m_toll_free_numbers_isValid = false;

    m_total_isSet = false;
    m_total_isValid = false;

    m_total_cost_isSet = false;
    m_total_cost_isValid = false;
}

void OAINumberOrder::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAINumberOrder::fromJsonObject(QJsonObject json) {

    m_created_isValid = ::OpenAPI::fromJsonValue(m_created, json[QString("created")]);
    m_created_isSet = !json[QString("created")].isNull() && m_created_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_keywords_isValid = ::OpenAPI::fromJsonValue(m_keywords, json[QString("keywords")]);
    m_keywords_isSet = !json[QString("keywords")].isNull() && m_keywords_isValid;

    m_local_numbers_isValid = ::OpenAPI::fromJsonValue(m_local_numbers, json[QString("localNumbers")]);
    m_local_numbers_isSet = !json[QString("localNumbers")].isNull() && m_local_numbers_isValid;

    m_sales_tax_isValid = ::OpenAPI::fromJsonValue(m_sales_tax, json[QString("salesTax")]);
    m_sales_tax_isSet = !json[QString("salesTax")].isNull() && m_sales_tax_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("status")]);
    m_status_isSet = !json[QString("status")].isNull() && m_status_isValid;

    m_summary_isValid = ::OpenAPI::fromJsonValue(m_summary, json[QString("summary")]);
    m_summary_isSet = !json[QString("summary")].isNull() && m_summary_isValid;

    m_toll_free_numbers_isValid = ::OpenAPI::fromJsonValue(m_toll_free_numbers, json[QString("tollFreeNumbers")]);
    m_toll_free_numbers_isSet = !json[QString("tollFreeNumbers")].isNull() && m_toll_free_numbers_isValid;

    m_total_isValid = ::OpenAPI::fromJsonValue(m_total, json[QString("total")]);
    m_total_isSet = !json[QString("total")].isNull() && m_total_isValid;

    m_total_cost_isValid = ::OpenAPI::fromJsonValue(m_total_cost, json[QString("totalCost")]);
    m_total_cost_isSet = !json[QString("totalCost")].isNull() && m_total_cost_isValid;
}

QString OAINumberOrder::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAINumberOrder::asJsonObject() const {
    QJsonObject obj;
    if (m_created_isSet) {
        obj.insert(QString("created"), ::OpenAPI::toJsonValue(m_created));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_keywords.isSet()) {
        obj.insert(QString("keywords"), ::OpenAPI::toJsonValue(m_keywords));
    }
    if (m_local_numbers.isSet()) {
        obj.insert(QString("localNumbers"), ::OpenAPI::toJsonValue(m_local_numbers));
    }
    if (m_sales_tax_isSet) {
        obj.insert(QString("salesTax"), ::OpenAPI::toJsonValue(m_sales_tax));
    }
    if (m_status_isSet) {
        obj.insert(QString("status"), ::OpenAPI::toJsonValue(m_status));
    }
    if (m_summary_isSet) {
        obj.insert(QString("summary"), ::OpenAPI::toJsonValue(m_summary));
    }
    if (m_toll_free_numbers.isSet()) {
        obj.insert(QString("tollFreeNumbers"), ::OpenAPI::toJsonValue(m_toll_free_numbers));
    }
    if (m_total_isSet) {
        obj.insert(QString("total"), ::OpenAPI::toJsonValue(m_total));
    }
    if (m_total_cost_isSet) {
        obj.insert(QString("totalCost"), ::OpenAPI::toJsonValue(m_total_cost));
    }
    return obj;
}

qint64 OAINumberOrder::getCreated() const {
    return m_created;
}
void OAINumberOrder::setCreated(const qint64 &created) {
    m_created = created;
    m_created_isSet = true;
}

bool OAINumberOrder::is_created_Set() const{
    return m_created_isSet;
}

bool OAINumberOrder::is_created_Valid() const{
    return m_created_isValid;
}

qint64 OAINumberOrder::getId() const {
    return m_id;
}
void OAINumberOrder::setId(const qint64 &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAINumberOrder::is_id_Set() const{
    return m_id_isSet;
}

bool OAINumberOrder::is_id_Valid() const{
    return m_id_isValid;
}

OAINumberOrderItem OAINumberOrder::getKeywords() const {
    return m_keywords;
}
void OAINumberOrder::setKeywords(const OAINumberOrderItem &keywords) {
    m_keywords = keywords;
    m_keywords_isSet = true;
}

bool OAINumberOrder::is_keywords_Set() const{
    return m_keywords_isSet;
}

bool OAINumberOrder::is_keywords_Valid() const{
    return m_keywords_isValid;
}

OAINumberOrderItem OAINumberOrder::getLocalNumbers() const {
    return m_local_numbers;
}
void OAINumberOrder::setLocalNumbers(const OAINumberOrderItem &local_numbers) {
    m_local_numbers = local_numbers;
    m_local_numbers_isSet = true;
}

bool OAINumberOrder::is_local_numbers_Set() const{
    return m_local_numbers_isSet;
}

bool OAINumberOrder::is_local_numbers_Valid() const{
    return m_local_numbers_isValid;
}

float OAINumberOrder::getSalesTax() const {
    return m_sales_tax;
}
void OAINumberOrder::setSalesTax(const float &sales_tax) {
    m_sales_tax = sales_tax;
    m_sales_tax_isSet = true;
}

bool OAINumberOrder::is_sales_tax_Set() const{
    return m_sales_tax_isSet;
}

bool OAINumberOrder::is_sales_tax_Valid() const{
    return m_sales_tax_isValid;
}

QString OAINumberOrder::getStatus() const {
    return m_status;
}
void OAINumberOrder::setStatus(const QString &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAINumberOrder::is_status_Set() const{
    return m_status_isSet;
}

bool OAINumberOrder::is_status_Valid() const{
    return m_status_isValid;
}

float OAINumberOrder::getSummary() const {
    return m_summary;
}
void OAINumberOrder::setSummary(const float &summary) {
    m_summary = summary;
    m_summary_isSet = true;
}

bool OAINumberOrder::is_summary_Set() const{
    return m_summary_isSet;
}

bool OAINumberOrder::is_summary_Valid() const{
    return m_summary_isValid;
}

OAINumberOrderItem OAINumberOrder::getTollFreeNumbers() const {
    return m_toll_free_numbers;
}
void OAINumberOrder::setTollFreeNumbers(const OAINumberOrderItem &toll_free_numbers) {
    m_toll_free_numbers = toll_free_numbers;
    m_toll_free_numbers_isSet = true;
}

bool OAINumberOrder::is_toll_free_numbers_Set() const{
    return m_toll_free_numbers_isSet;
}

bool OAINumberOrder::is_toll_free_numbers_Valid() const{
    return m_toll_free_numbers_isValid;
}

float OAINumberOrder::getTotal() const {
    return m_total;
}
void OAINumberOrder::setTotal(const float &total) {
    m_total = total;
    m_total_isSet = true;
}

bool OAINumberOrder::is_total_Set() const{
    return m_total_isSet;
}

bool OAINumberOrder::is_total_Valid() const{
    return m_total_isValid;
}

float OAINumberOrder::getTotalCost() const {
    return m_total_cost;
}
void OAINumberOrder::setTotalCost(const float &total_cost) {
    m_total_cost = total_cost;
    m_total_cost_isSet = true;
}

bool OAINumberOrder::is_total_cost_Set() const{
    return m_total_cost_isSet;
}

bool OAINumberOrder::is_total_cost_Valid() const{
    return m_total_cost_isValid;
}

bool OAINumberOrder::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_created_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_keywords.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_local_numbers.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_sales_tax_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_summary_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_toll_free_numbers.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_total_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_total_cost_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAINumberOrder::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
