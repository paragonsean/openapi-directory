/**
 * CallFire API Documentation
 * CallFire
 *
 * The version of the OpenAPI document: V2
 * Contact: support@callfire.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICall.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICall::OAICall(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICall::OAICall() {
    this->initializeModel();
}

OAICall::~OAICall() {}

void OAICall::initializeModel() {

    m_agent_call_isSet = false;
    m_agent_call_isValid = false;

    m_attributes_isSet = false;
    m_attributes_isValid = false;

    m_batch_id_isSet = false;
    m_batch_id_isValid = false;

    m_campaign_id_isSet = false;
    m_campaign_id_isValid = false;

    m_contact_isSet = false;
    m_contact_isValid = false;

    m_created_isSet = false;
    m_created_isValid = false;

    m_final_call_result_isSet = false;
    m_final_call_result_isValid = false;

    m_from_number_isSet = false;
    m_from_number_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_inbound_isSet = false;
    m_inbound_isValid = false;

    m_labels_isSet = false;
    m_labels_isValid = false;

    m_modified_isSet = false;
    m_modified_isValid = false;

    m_notes_isSet = false;
    m_notes_isValid = false;

    m_records_isSet = false;
    m_records_isValid = false;

    m_state_isSet = false;
    m_state_isValid = false;

    m_to_number_isSet = false;
    m_to_number_isValid = false;
}

void OAICall::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICall::fromJsonObject(QJsonObject json) {

    m_agent_call_isValid = ::OpenAPI::fromJsonValue(m_agent_call, json[QString("agentCall")]);
    m_agent_call_isSet = !json[QString("agentCall")].isNull() && m_agent_call_isValid;

    m_attributes_isValid = ::OpenAPI::fromJsonValue(m_attributes, json[QString("attributes")]);
    m_attributes_isSet = !json[QString("attributes")].isNull() && m_attributes_isValid;

    m_batch_id_isValid = ::OpenAPI::fromJsonValue(m_batch_id, json[QString("batchId")]);
    m_batch_id_isSet = !json[QString("batchId")].isNull() && m_batch_id_isValid;

    m_campaign_id_isValid = ::OpenAPI::fromJsonValue(m_campaign_id, json[QString("campaignId")]);
    m_campaign_id_isSet = !json[QString("campaignId")].isNull() && m_campaign_id_isValid;

    m_contact_isValid = ::OpenAPI::fromJsonValue(m_contact, json[QString("contact")]);
    m_contact_isSet = !json[QString("contact")].isNull() && m_contact_isValid;

    m_created_isValid = ::OpenAPI::fromJsonValue(m_created, json[QString("created")]);
    m_created_isSet = !json[QString("created")].isNull() && m_created_isValid;

    m_final_call_result_isValid = ::OpenAPI::fromJsonValue(m_final_call_result, json[QString("finalCallResult")]);
    m_final_call_result_isSet = !json[QString("finalCallResult")].isNull() && m_final_call_result_isValid;

    m_from_number_isValid = ::OpenAPI::fromJsonValue(m_from_number, json[QString("fromNumber")]);
    m_from_number_isSet = !json[QString("fromNumber")].isNull() && m_from_number_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_inbound_isValid = ::OpenAPI::fromJsonValue(m_inbound, json[QString("inbound")]);
    m_inbound_isSet = !json[QString("inbound")].isNull() && m_inbound_isValid;

    m_labels_isValid = ::OpenAPI::fromJsonValue(m_labels, json[QString("labels")]);
    m_labels_isSet = !json[QString("labels")].isNull() && m_labels_isValid;

    m_modified_isValid = ::OpenAPI::fromJsonValue(m_modified, json[QString("modified")]);
    m_modified_isSet = !json[QString("modified")].isNull() && m_modified_isValid;

    m_notes_isValid = ::OpenAPI::fromJsonValue(m_notes, json[QString("notes")]);
    m_notes_isSet = !json[QString("notes")].isNull() && m_notes_isValid;

    m_records_isValid = ::OpenAPI::fromJsonValue(m_records, json[QString("records")]);
    m_records_isSet = !json[QString("records")].isNull() && m_records_isValid;

    m_state_isValid = ::OpenAPI::fromJsonValue(m_state, json[QString("state")]);
    m_state_isSet = !json[QString("state")].isNull() && m_state_isValid;

    m_to_number_isValid = ::OpenAPI::fromJsonValue(m_to_number, json[QString("toNumber")]);
    m_to_number_isSet = !json[QString("toNumber")].isNull() && m_to_number_isValid;
}

QString OAICall::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICall::asJsonObject() const {
    QJsonObject obj;
    if (m_agent_call_isSet) {
        obj.insert(QString("agentCall"), ::OpenAPI::toJsonValue(m_agent_call));
    }
    if (m_attributes.size() > 0) {
        obj.insert(QString("attributes"), ::OpenAPI::toJsonValue(m_attributes));
    }
    if (m_batch_id_isSet) {
        obj.insert(QString("batchId"), ::OpenAPI::toJsonValue(m_batch_id));
    }
    if (m_campaign_id_isSet) {
        obj.insert(QString("campaignId"), ::OpenAPI::toJsonValue(m_campaign_id));
    }
    if (m_contact.isSet()) {
        obj.insert(QString("contact"), ::OpenAPI::toJsonValue(m_contact));
    }
    if (m_created_isSet) {
        obj.insert(QString("created"), ::OpenAPI::toJsonValue(m_created));
    }
    if (m_final_call_result_isSet) {
        obj.insert(QString("finalCallResult"), ::OpenAPI::toJsonValue(m_final_call_result));
    }
    if (m_from_number_isSet) {
        obj.insert(QString("fromNumber"), ::OpenAPI::toJsonValue(m_from_number));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_inbound_isSet) {
        obj.insert(QString("inbound"), ::OpenAPI::toJsonValue(m_inbound));
    }
    if (m_labels.size() > 0) {
        obj.insert(QString("labels"), ::OpenAPI::toJsonValue(m_labels));
    }
    if (m_modified_isSet) {
        obj.insert(QString("modified"), ::OpenAPI::toJsonValue(m_modified));
    }
    if (m_notes.size() > 0) {
        obj.insert(QString("notes"), ::OpenAPI::toJsonValue(m_notes));
    }
    if (m_records.size() > 0) {
        obj.insert(QString("records"), ::OpenAPI::toJsonValue(m_records));
    }
    if (m_state_isSet) {
        obj.insert(QString("state"), ::OpenAPI::toJsonValue(m_state));
    }
    if (m_to_number_isSet) {
        obj.insert(QString("toNumber"), ::OpenAPI::toJsonValue(m_to_number));
    }
    return obj;
}

bool OAICall::isAgentCall() const {
    return m_agent_call;
}
void OAICall::setAgentCall(const bool &agent_call) {
    m_agent_call = agent_call;
    m_agent_call_isSet = true;
}

bool OAICall::is_agent_call_Set() const{
    return m_agent_call_isSet;
}

bool OAICall::is_agent_call_Valid() const{
    return m_agent_call_isValid;
}

QMap<QString, QString> OAICall::getAttributes() const {
    return m_attributes;
}
void OAICall::setAttributes(const QMap<QString, QString> &attributes) {
    m_attributes = attributes;
    m_attributes_isSet = true;
}

bool OAICall::is_attributes_Set() const{
    return m_attributes_isSet;
}

bool OAICall::is_attributes_Valid() const{
    return m_attributes_isValid;
}

qint64 OAICall::getBatchId() const {
    return m_batch_id;
}
void OAICall::setBatchId(const qint64 &batch_id) {
    m_batch_id = batch_id;
    m_batch_id_isSet = true;
}

bool OAICall::is_batch_id_Set() const{
    return m_batch_id_isSet;
}

bool OAICall::is_batch_id_Valid() const{
    return m_batch_id_isValid;
}

qint64 OAICall::getCampaignId() const {
    return m_campaign_id;
}
void OAICall::setCampaignId(const qint64 &campaign_id) {
    m_campaign_id = campaign_id;
    m_campaign_id_isSet = true;
}

bool OAICall::is_campaign_id_Set() const{
    return m_campaign_id_isSet;
}

bool OAICall::is_campaign_id_Valid() const{
    return m_campaign_id_isValid;
}

OAIContact OAICall::getContact() const {
    return m_contact;
}
void OAICall::setContact(const OAIContact &contact) {
    m_contact = contact;
    m_contact_isSet = true;
}

bool OAICall::is_contact_Set() const{
    return m_contact_isSet;
}

bool OAICall::is_contact_Valid() const{
    return m_contact_isValid;
}

qint64 OAICall::getCreated() const {
    return m_created;
}
void OAICall::setCreated(const qint64 &created) {
    m_created = created;
    m_created_isSet = true;
}

bool OAICall::is_created_Set() const{
    return m_created_isSet;
}

bool OAICall::is_created_Valid() const{
    return m_created_isValid;
}

QString OAICall::getFinalCallResult() const {
    return m_final_call_result;
}
void OAICall::setFinalCallResult(const QString &final_call_result) {
    m_final_call_result = final_call_result;
    m_final_call_result_isSet = true;
}

bool OAICall::is_final_call_result_Set() const{
    return m_final_call_result_isSet;
}

bool OAICall::is_final_call_result_Valid() const{
    return m_final_call_result_isValid;
}

QString OAICall::getFromNumber() const {
    return m_from_number;
}
void OAICall::setFromNumber(const QString &from_number) {
    m_from_number = from_number;
    m_from_number_isSet = true;
}

bool OAICall::is_from_number_Set() const{
    return m_from_number_isSet;
}

bool OAICall::is_from_number_Valid() const{
    return m_from_number_isValid;
}

qint64 OAICall::getId() const {
    return m_id;
}
void OAICall::setId(const qint64 &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAICall::is_id_Set() const{
    return m_id_isSet;
}

bool OAICall::is_id_Valid() const{
    return m_id_isValid;
}

bool OAICall::isInbound() const {
    return m_inbound;
}
void OAICall::setInbound(const bool &inbound) {
    m_inbound = inbound;
    m_inbound_isSet = true;
}

bool OAICall::is_inbound_Set() const{
    return m_inbound_isSet;
}

bool OAICall::is_inbound_Valid() const{
    return m_inbound_isValid;
}

QSet<QString> OAICall::getLabels() const {
    return m_labels;
}
void OAICall::setLabels(const QSet<QString> &labels) {
    m_labels = labels;
    m_labels_isSet = true;
}

bool OAICall::is_labels_Set() const{
    return m_labels_isSet;
}

bool OAICall::is_labels_Valid() const{
    return m_labels_isValid;
}

qint64 OAICall::getModified() const {
    return m_modified;
}
void OAICall::setModified(const qint64 &modified) {
    m_modified = modified;
    m_modified_isSet = true;
}

bool OAICall::is_modified_Set() const{
    return m_modified_isSet;
}

bool OAICall::is_modified_Valid() const{
    return m_modified_isValid;
}

QList<OAINote> OAICall::getNotes() const {
    return m_notes;
}
void OAICall::setNotes(const QList<OAINote> &notes) {
    m_notes = notes;
    m_notes_isSet = true;
}

bool OAICall::is_notes_Set() const{
    return m_notes_isSet;
}

bool OAICall::is_notes_Valid() const{
    return m_notes_isValid;
}

QList<OAICallRecord> OAICall::getRecords() const {
    return m_records;
}
void OAICall::setRecords(const QList<OAICallRecord> &records) {
    m_records = records;
    m_records_isSet = true;
}

bool OAICall::is_records_Set() const{
    return m_records_isSet;
}

bool OAICall::is_records_Valid() const{
    return m_records_isValid;
}

QString OAICall::getState() const {
    return m_state;
}
void OAICall::setState(const QString &state) {
    m_state = state;
    m_state_isSet = true;
}

bool OAICall::is_state_Set() const{
    return m_state_isSet;
}

bool OAICall::is_state_Valid() const{
    return m_state_isValid;
}

QString OAICall::getToNumber() const {
    return m_to_number;
}
void OAICall::setToNumber(const QString &to_number) {
    m_to_number = to_number;
    m_to_number_isSet = true;
}

bool OAICall::is_to_number_Set() const{
    return m_to_number_isSet;
}

bool OAICall::is_to_number_Valid() const{
    return m_to_number_isValid;
}

bool OAICall::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_agent_call_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_attributes.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_batch_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_campaign_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_contact.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_created_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_final_call_result_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_from_number_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_inbound_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_labels.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_modified_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_notes.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_records.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_state_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_to_number_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICall::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
