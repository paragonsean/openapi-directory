/**
 * CallFire API Documentation
 * CallFire
 *
 * The version of the OpenAPI document: V2
 * Contact: support@callfire.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICreditUsage.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICreditUsage::OAICreditUsage(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICreditUsage::OAICreditUsage() {
    this->initializeModel();
}

OAICreditUsage::~OAICreditUsage() {}

void OAICreditUsage::initializeModel() {

    m_calls_duration_minutes_isSet = false;
    m_calls_duration_minutes_isValid = false;

    m_credits_used_isSet = false;
    m_credits_used_isValid = false;

    m_interval_begin_isSet = false;
    m_interval_begin_isValid = false;

    m_interval_end_isSet = false;
    m_interval_end_isValid = false;

    m_texts_sent_isSet = false;
    m_texts_sent_isValid = false;
}

void OAICreditUsage::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICreditUsage::fromJsonObject(QJsonObject json) {

    m_calls_duration_minutes_isValid = ::OpenAPI::fromJsonValue(m_calls_duration_minutes, json[QString("callsDurationMinutes")]);
    m_calls_duration_minutes_isSet = !json[QString("callsDurationMinutes")].isNull() && m_calls_duration_minutes_isValid;

    m_credits_used_isValid = ::OpenAPI::fromJsonValue(m_credits_used, json[QString("creditsUsed")]);
    m_credits_used_isSet = !json[QString("creditsUsed")].isNull() && m_credits_used_isValid;

    m_interval_begin_isValid = ::OpenAPI::fromJsonValue(m_interval_begin, json[QString("intervalBegin")]);
    m_interval_begin_isSet = !json[QString("intervalBegin")].isNull() && m_interval_begin_isValid;

    m_interval_end_isValid = ::OpenAPI::fromJsonValue(m_interval_end, json[QString("intervalEnd")]);
    m_interval_end_isSet = !json[QString("intervalEnd")].isNull() && m_interval_end_isValid;

    m_texts_sent_isValid = ::OpenAPI::fromJsonValue(m_texts_sent, json[QString("textsSent")]);
    m_texts_sent_isSet = !json[QString("textsSent")].isNull() && m_texts_sent_isValid;
}

QString OAICreditUsage::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICreditUsage::asJsonObject() const {
    QJsonObject obj;
    if (m_calls_duration_minutes_isSet) {
        obj.insert(QString("callsDurationMinutes"), ::OpenAPI::toJsonValue(m_calls_duration_minutes));
    }
    if (m_credits_used_isSet) {
        obj.insert(QString("creditsUsed"), ::OpenAPI::toJsonValue(m_credits_used));
    }
    if (m_interval_begin_isSet) {
        obj.insert(QString("intervalBegin"), ::OpenAPI::toJsonValue(m_interval_begin));
    }
    if (m_interval_end_isSet) {
        obj.insert(QString("intervalEnd"), ::OpenAPI::toJsonValue(m_interval_end));
    }
    if (m_texts_sent_isSet) {
        obj.insert(QString("textsSent"), ::OpenAPI::toJsonValue(m_texts_sent));
    }
    return obj;
}

qint32 OAICreditUsage::getCallsDurationMinutes() const {
    return m_calls_duration_minutes;
}
void OAICreditUsage::setCallsDurationMinutes(const qint32 &calls_duration_minutes) {
    m_calls_duration_minutes = calls_duration_minutes;
    m_calls_duration_minutes_isSet = true;
}

bool OAICreditUsage::is_calls_duration_minutes_Set() const{
    return m_calls_duration_minutes_isSet;
}

bool OAICreditUsage::is_calls_duration_minutes_Valid() const{
    return m_calls_duration_minutes_isValid;
}

double OAICreditUsage::getCreditsUsed() const {
    return m_credits_used;
}
void OAICreditUsage::setCreditsUsed(const double &credits_used) {
    m_credits_used = credits_used;
    m_credits_used_isSet = true;
}

bool OAICreditUsage::is_credits_used_Set() const{
    return m_credits_used_isSet;
}

bool OAICreditUsage::is_credits_used_Valid() const{
    return m_credits_used_isValid;
}

qint64 OAICreditUsage::getIntervalBegin() const {
    return m_interval_begin;
}
void OAICreditUsage::setIntervalBegin(const qint64 &interval_begin) {
    m_interval_begin = interval_begin;
    m_interval_begin_isSet = true;
}

bool OAICreditUsage::is_interval_begin_Set() const{
    return m_interval_begin_isSet;
}

bool OAICreditUsage::is_interval_begin_Valid() const{
    return m_interval_begin_isValid;
}

qint64 OAICreditUsage::getIntervalEnd() const {
    return m_interval_end;
}
void OAICreditUsage::setIntervalEnd(const qint64 &interval_end) {
    m_interval_end = interval_end;
    m_interval_end_isSet = true;
}

bool OAICreditUsage::is_interval_end_Set() const{
    return m_interval_end_isSet;
}

bool OAICreditUsage::is_interval_end_Valid() const{
    return m_interval_end_isValid;
}

qint32 OAICreditUsage::getTextsSent() const {
    return m_texts_sent;
}
void OAICreditUsage::setTextsSent(const qint32 &texts_sent) {
    m_texts_sent = texts_sent;
    m_texts_sent_isSet = true;
}

bool OAICreditUsage::is_texts_sent_Set() const{
    return m_texts_sent_isSet;
}

bool OAICreditUsage::is_texts_sent_Valid() const{
    return m_texts_sent_isValid;
}

bool OAICreditUsage::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_calls_duration_minutes_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_credits_used_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_interval_begin_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_interval_end_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_texts_sent_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICreditUsage::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
