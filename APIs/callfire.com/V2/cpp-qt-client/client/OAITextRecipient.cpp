/**
 * CallFire API Documentation
 * CallFire
 *
 * The version of the OpenAPI document: V2
 * Contact: support@callfire.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAITextRecipient.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAITextRecipient::OAITextRecipient(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAITextRecipient::OAITextRecipient() {
    this->initializeModel();
}

OAITextRecipient::~OAITextRecipient() {}

void OAITextRecipient::initializeModel() {

    m_attributes_isSet = false;
    m_attributes_isValid = false;

    m_contact_id_isSet = false;
    m_contact_id_isValid = false;

    m_from_number_isSet = false;
    m_from_number_isValid = false;

    m_media_isSet = false;
    m_media_isValid = false;

    m_message_isSet = false;
    m_message_isValid = false;

    m_phone_number_isSet = false;
    m_phone_number_isValid = false;
}

void OAITextRecipient::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAITextRecipient::fromJsonObject(QJsonObject json) {

    m_attributes_isValid = ::OpenAPI::fromJsonValue(m_attributes, json[QString("attributes")]);
    m_attributes_isSet = !json[QString("attributes")].isNull() && m_attributes_isValid;

    m_contact_id_isValid = ::OpenAPI::fromJsonValue(m_contact_id, json[QString("contactId")]);
    m_contact_id_isSet = !json[QString("contactId")].isNull() && m_contact_id_isValid;

    m_from_number_isValid = ::OpenAPI::fromJsonValue(m_from_number, json[QString("fromNumber")]);
    m_from_number_isSet = !json[QString("fromNumber")].isNull() && m_from_number_isValid;

    m_media_isValid = ::OpenAPI::fromJsonValue(m_media, json[QString("media")]);
    m_media_isSet = !json[QString("media")].isNull() && m_media_isValid;

    m_message_isValid = ::OpenAPI::fromJsonValue(m_message, json[QString("message")]);
    m_message_isSet = !json[QString("message")].isNull() && m_message_isValid;

    m_phone_number_isValid = ::OpenAPI::fromJsonValue(m_phone_number, json[QString("phoneNumber")]);
    m_phone_number_isSet = !json[QString("phoneNumber")].isNull() && m_phone_number_isValid;
}

QString OAITextRecipient::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAITextRecipient::asJsonObject() const {
    QJsonObject obj;
    if (m_attributes.size() > 0) {
        obj.insert(QString("attributes"), ::OpenAPI::toJsonValue(m_attributes));
    }
    if (m_contact_id_isSet) {
        obj.insert(QString("contactId"), ::OpenAPI::toJsonValue(m_contact_id));
    }
    if (m_from_number_isSet) {
        obj.insert(QString("fromNumber"), ::OpenAPI::toJsonValue(m_from_number));
    }
    if (m_media.size() > 0) {
        obj.insert(QString("media"), ::OpenAPI::toJsonValue(m_media));
    }
    if (m_message_isSet) {
        obj.insert(QString("message"), ::OpenAPI::toJsonValue(m_message));
    }
    if (m_phone_number_isSet) {
        obj.insert(QString("phoneNumber"), ::OpenAPI::toJsonValue(m_phone_number));
    }
    return obj;
}

QMap<QString, QString> OAITextRecipient::getAttributes() const {
    return m_attributes;
}
void OAITextRecipient::setAttributes(const QMap<QString, QString> &attributes) {
    m_attributes = attributes;
    m_attributes_isSet = true;
}

bool OAITextRecipient::is_attributes_Set() const{
    return m_attributes_isSet;
}

bool OAITextRecipient::is_attributes_Valid() const{
    return m_attributes_isValid;
}

qint64 OAITextRecipient::getContactId() const {
    return m_contact_id;
}
void OAITextRecipient::setContactId(const qint64 &contact_id) {
    m_contact_id = contact_id;
    m_contact_id_isSet = true;
}

bool OAITextRecipient::is_contact_id_Set() const{
    return m_contact_id_isSet;
}

bool OAITextRecipient::is_contact_id_Valid() const{
    return m_contact_id_isValid;
}

QString OAITextRecipient::getFromNumber() const {
    return m_from_number;
}
void OAITextRecipient::setFromNumber(const QString &from_number) {
    m_from_number = from_number;
    m_from_number_isSet = true;
}

bool OAITextRecipient::is_from_number_Set() const{
    return m_from_number_isSet;
}

bool OAITextRecipient::is_from_number_Valid() const{
    return m_from_number_isValid;
}

QList<OAIMedia> OAITextRecipient::getMedia() const {
    return m_media;
}
void OAITextRecipient::setMedia(const QList<OAIMedia> &media) {
    m_media = media;
    m_media_isSet = true;
}

bool OAITextRecipient::is_media_Set() const{
    return m_media_isSet;
}

bool OAITextRecipient::is_media_Valid() const{
    return m_media_isValid;
}

QString OAITextRecipient::getMessage() const {
    return m_message;
}
void OAITextRecipient::setMessage(const QString &message) {
    m_message = message;
    m_message_isSet = true;
}

bool OAITextRecipient::is_message_Set() const{
    return m_message_isSet;
}

bool OAITextRecipient::is_message_Valid() const{
    return m_message_isValid;
}

QString OAITextRecipient::getPhoneNumber() const {
    return m_phone_number;
}
void OAITextRecipient::setPhoneNumber(const QString &phone_number) {
    m_phone_number = phone_number;
    m_phone_number_isSet = true;
}

bool OAITextRecipient::is_phone_number_Set() const{
    return m_phone_number_isSet;
}

bool OAITextRecipient::is_phone_number_Valid() const{
    return m_phone_number_isValid;
}

bool OAITextRecipient::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_attributes.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_contact_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_from_number_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_media.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_message_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_phone_number_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAITextRecipient::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
