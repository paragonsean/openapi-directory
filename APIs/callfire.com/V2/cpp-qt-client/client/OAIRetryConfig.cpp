/**
 * CallFire API Documentation
 * CallFire
 *
 * The version of the OpenAPI document: V2
 * Contact: support@callfire.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIRetryConfig.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIRetryConfig::OAIRetryConfig(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIRetryConfig::OAIRetryConfig() {
    this->initializeModel();
}

OAIRetryConfig::~OAIRetryConfig() {}

void OAIRetryConfig::initializeModel() {

    m_max_attempts_isSet = false;
    m_max_attempts_isValid = false;

    m_minutes_between_attempts_isSet = false;
    m_minutes_between_attempts_isValid = false;

    m_retry_phone_types_isSet = false;
    m_retry_phone_types_isValid = false;

    m_retry_results_isSet = false;
    m_retry_results_isValid = false;
}

void OAIRetryConfig::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIRetryConfig::fromJsonObject(QJsonObject json) {

    m_max_attempts_isValid = ::OpenAPI::fromJsonValue(m_max_attempts, json[QString("maxAttempts")]);
    m_max_attempts_isSet = !json[QString("maxAttempts")].isNull() && m_max_attempts_isValid;

    m_minutes_between_attempts_isValid = ::OpenAPI::fromJsonValue(m_minutes_between_attempts, json[QString("minutesBetweenAttempts")]);
    m_minutes_between_attempts_isSet = !json[QString("minutesBetweenAttempts")].isNull() && m_minutes_between_attempts_isValid;

    m_retry_phone_types_isValid = ::OpenAPI::fromJsonValue(m_retry_phone_types, json[QString("retryPhoneTypes")]);
    m_retry_phone_types_isSet = !json[QString("retryPhoneTypes")].isNull() && m_retry_phone_types_isValid;

    m_retry_results_isValid = ::OpenAPI::fromJsonValue(m_retry_results, json[QString("retryResults")]);
    m_retry_results_isSet = !json[QString("retryResults")].isNull() && m_retry_results_isValid;
}

QString OAIRetryConfig::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIRetryConfig::asJsonObject() const {
    QJsonObject obj;
    if (m_max_attempts_isSet) {
        obj.insert(QString("maxAttempts"), ::OpenAPI::toJsonValue(m_max_attempts));
    }
    if (m_minutes_between_attempts_isSet) {
        obj.insert(QString("minutesBetweenAttempts"), ::OpenAPI::toJsonValue(m_minutes_between_attempts));
    }
    if (m_retry_phone_types.size() > 0) {
        obj.insert(QString("retryPhoneTypes"), ::OpenAPI::toJsonValue(m_retry_phone_types));
    }
    if (m_retry_results.size() > 0) {
        obj.insert(QString("retryResults"), ::OpenAPI::toJsonValue(m_retry_results));
    }
    return obj;
}

qint32 OAIRetryConfig::getMaxAttempts() const {
    return m_max_attempts;
}
void OAIRetryConfig::setMaxAttempts(const qint32 &max_attempts) {
    m_max_attempts = max_attempts;
    m_max_attempts_isSet = true;
}

bool OAIRetryConfig::is_max_attempts_Set() const{
    return m_max_attempts_isSet;
}

bool OAIRetryConfig::is_max_attempts_Valid() const{
    return m_max_attempts_isValid;
}

qint32 OAIRetryConfig::getMinutesBetweenAttempts() const {
    return m_minutes_between_attempts;
}
void OAIRetryConfig::setMinutesBetweenAttempts(const qint32 &minutes_between_attempts) {
    m_minutes_between_attempts = minutes_between_attempts;
    m_minutes_between_attempts_isSet = true;
}

bool OAIRetryConfig::is_minutes_between_attempts_Set() const{
    return m_minutes_between_attempts_isSet;
}

bool OAIRetryConfig::is_minutes_between_attempts_Valid() const{
    return m_minutes_between_attempts_isValid;
}

QList<QString> OAIRetryConfig::getRetryPhoneTypes() const {
    return m_retry_phone_types;
}
void OAIRetryConfig::setRetryPhoneTypes(const QList<QString> &retry_phone_types) {
    m_retry_phone_types = retry_phone_types;
    m_retry_phone_types_isSet = true;
}

bool OAIRetryConfig::is_retry_phone_types_Set() const{
    return m_retry_phone_types_isSet;
}

bool OAIRetryConfig::is_retry_phone_types_Valid() const{
    return m_retry_phone_types_isValid;
}

QList<QString> OAIRetryConfig::getRetryResults() const {
    return m_retry_results;
}
void OAIRetryConfig::setRetryResults(const QList<QString> &retry_results) {
    m_retry_results = retry_results;
    m_retry_results_isSet = true;
}

bool OAIRetryConfig::is_retry_results_Set() const{
    return m_retry_results_isSet;
}

bool OAIRetryConfig::is_retry_results_Valid() const{
    return m_retry_results_isValid;
}

bool OAIRetryConfig::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_max_attempts_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_minutes_between_attempts_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_retry_phone_types.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_retry_results.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIRetryConfig::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
