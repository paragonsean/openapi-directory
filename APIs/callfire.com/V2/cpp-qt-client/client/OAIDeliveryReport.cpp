/**
 * CallFire API Documentation
 * CallFire
 *
 * The version of the OpenAPI document: V2
 * Contact: support@callfire.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDeliveryReport.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDeliveryReport::OAIDeliveryReport(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDeliveryReport::OAIDeliveryReport() {
    this->initializeModel();
}

OAIDeliveryReport::~OAIDeliveryReport() {}

void OAIDeliveryReport::initializeModel() {

    m_campaign_id_isSet = false;
    m_campaign_id_isValid = false;

    m_carrier_isSet = false;
    m_carrier_isValid = false;

    m_delivery_category_isSet = false;
    m_delivery_category_isValid = false;

    m_delivery_state_isSet = false;
    m_delivery_state_isValid = false;

    m_from_number_isSet = false;
    m_from_number_isValid = false;

    m_message_text_isSet = false;
    m_message_text_isValid = false;

    m_to_number_isSet = false;
    m_to_number_isValid = false;

    m_updated_isSet = false;
    m_updated_isValid = false;
}

void OAIDeliveryReport::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDeliveryReport::fromJsonObject(QJsonObject json) {

    m_campaign_id_isValid = ::OpenAPI::fromJsonValue(m_campaign_id, json[QString("campaignId")]);
    m_campaign_id_isSet = !json[QString("campaignId")].isNull() && m_campaign_id_isValid;

    m_carrier_isValid = ::OpenAPI::fromJsonValue(m_carrier, json[QString("carrier")]);
    m_carrier_isSet = !json[QString("carrier")].isNull() && m_carrier_isValid;

    m_delivery_category_isValid = ::OpenAPI::fromJsonValue(m_delivery_category, json[QString("deliveryCategory")]);
    m_delivery_category_isSet = !json[QString("deliveryCategory")].isNull() && m_delivery_category_isValid;

    m_delivery_state_isValid = ::OpenAPI::fromJsonValue(m_delivery_state, json[QString("deliveryState")]);
    m_delivery_state_isSet = !json[QString("deliveryState")].isNull() && m_delivery_state_isValid;

    m_from_number_isValid = ::OpenAPI::fromJsonValue(m_from_number, json[QString("fromNumber")]);
    m_from_number_isSet = !json[QString("fromNumber")].isNull() && m_from_number_isValid;

    m_message_text_isValid = ::OpenAPI::fromJsonValue(m_message_text, json[QString("messageText")]);
    m_message_text_isSet = !json[QString("messageText")].isNull() && m_message_text_isValid;

    m_to_number_isValid = ::OpenAPI::fromJsonValue(m_to_number, json[QString("toNumber")]);
    m_to_number_isSet = !json[QString("toNumber")].isNull() && m_to_number_isValid;

    m_updated_isValid = ::OpenAPI::fromJsonValue(m_updated, json[QString("updated")]);
    m_updated_isSet = !json[QString("updated")].isNull() && m_updated_isValid;
}

QString OAIDeliveryReport::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDeliveryReport::asJsonObject() const {
    QJsonObject obj;
    if (m_campaign_id_isSet) {
        obj.insert(QString("campaignId"), ::OpenAPI::toJsonValue(m_campaign_id));
    }
    if (m_carrier_isSet) {
        obj.insert(QString("carrier"), ::OpenAPI::toJsonValue(m_carrier));
    }
    if (m_delivery_category_isSet) {
        obj.insert(QString("deliveryCategory"), ::OpenAPI::toJsonValue(m_delivery_category));
    }
    if (m_delivery_state_isSet) {
        obj.insert(QString("deliveryState"), ::OpenAPI::toJsonValue(m_delivery_state));
    }
    if (m_from_number_isSet) {
        obj.insert(QString("fromNumber"), ::OpenAPI::toJsonValue(m_from_number));
    }
    if (m_message_text_isSet) {
        obj.insert(QString("messageText"), ::OpenAPI::toJsonValue(m_message_text));
    }
    if (m_to_number_isSet) {
        obj.insert(QString("toNumber"), ::OpenAPI::toJsonValue(m_to_number));
    }
    if (m_updated_isSet) {
        obj.insert(QString("updated"), ::OpenAPI::toJsonValue(m_updated));
    }
    return obj;
}

qint64 OAIDeliveryReport::getCampaignId() const {
    return m_campaign_id;
}
void OAIDeliveryReport::setCampaignId(const qint64 &campaign_id) {
    m_campaign_id = campaign_id;
    m_campaign_id_isSet = true;
}

bool OAIDeliveryReport::is_campaign_id_Set() const{
    return m_campaign_id_isSet;
}

bool OAIDeliveryReport::is_campaign_id_Valid() const{
    return m_campaign_id_isValid;
}

QString OAIDeliveryReport::getCarrier() const {
    return m_carrier;
}
void OAIDeliveryReport::setCarrier(const QString &carrier) {
    m_carrier = carrier;
    m_carrier_isSet = true;
}

bool OAIDeliveryReport::is_carrier_Set() const{
    return m_carrier_isSet;
}

bool OAIDeliveryReport::is_carrier_Valid() const{
    return m_carrier_isValid;
}

QString OAIDeliveryReport::getDeliveryCategory() const {
    return m_delivery_category;
}
void OAIDeliveryReport::setDeliveryCategory(const QString &delivery_category) {
    m_delivery_category = delivery_category;
    m_delivery_category_isSet = true;
}

bool OAIDeliveryReport::is_delivery_category_Set() const{
    return m_delivery_category_isSet;
}

bool OAIDeliveryReport::is_delivery_category_Valid() const{
    return m_delivery_category_isValid;
}

QString OAIDeliveryReport::getDeliveryState() const {
    return m_delivery_state;
}
void OAIDeliveryReport::setDeliveryState(const QString &delivery_state) {
    m_delivery_state = delivery_state;
    m_delivery_state_isSet = true;
}

bool OAIDeliveryReport::is_delivery_state_Set() const{
    return m_delivery_state_isSet;
}

bool OAIDeliveryReport::is_delivery_state_Valid() const{
    return m_delivery_state_isValid;
}

QString OAIDeliveryReport::getFromNumber() const {
    return m_from_number;
}
void OAIDeliveryReport::setFromNumber(const QString &from_number) {
    m_from_number = from_number;
    m_from_number_isSet = true;
}

bool OAIDeliveryReport::is_from_number_Set() const{
    return m_from_number_isSet;
}

bool OAIDeliveryReport::is_from_number_Valid() const{
    return m_from_number_isValid;
}

QString OAIDeliveryReport::getMessageText() const {
    return m_message_text;
}
void OAIDeliveryReport::setMessageText(const QString &message_text) {
    m_message_text = message_text;
    m_message_text_isSet = true;
}

bool OAIDeliveryReport::is_message_text_Set() const{
    return m_message_text_isSet;
}

bool OAIDeliveryReport::is_message_text_Valid() const{
    return m_message_text_isValid;
}

QString OAIDeliveryReport::getToNumber() const {
    return m_to_number;
}
void OAIDeliveryReport::setToNumber(const QString &to_number) {
    m_to_number = to_number;
    m_to_number_isSet = true;
}

bool OAIDeliveryReport::is_to_number_Set() const{
    return m_to_number_isSet;
}

bool OAIDeliveryReport::is_to_number_Valid() const{
    return m_to_number_isValid;
}

QDateTime OAIDeliveryReport::getUpdated() const {
    return m_updated;
}
void OAIDeliveryReport::setUpdated(const QDateTime &updated) {
    m_updated = updated;
    m_updated_isSet = true;
}

bool OAIDeliveryReport::is_updated_Set() const{
    return m_updated_isSet;
}

bool OAIDeliveryReport::is_updated_Valid() const{
    return m_updated_isValid;
}

bool OAIDeliveryReport::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_campaign_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_carrier_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_delivery_category_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_delivery_state_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_from_number_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_message_text_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_to_number_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_updated_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDeliveryReport::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
