/**
 * CallFire API Documentation
 * CallFire
 *
 * The version of the OpenAPI document: V2
 * Contact: support@callfire.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAITextsApi_H
#define OAI_OAITextsApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIBatchPage.h"
#include "OAIBatchRequest.h"
#include "OAIErrorResponse.h"
#include "OAIRecipient.h"
#include "OAIResourceId.h"
#include "OAIText.h"
#include "OAITextAutoReply.h"
#include "OAITextAutoReplyPage.h"
#include "OAITextBroadcast.h"
#include "OAITextBroadcastCreateResponse.h"
#include "OAITextBroadcastPage.h"
#include "OAITextBroadcastStatsDto.h"
#include "OAITextList.h"
#include "OAITextPage.h"
#include "OAITextRecipient.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAITextsApi : public QObject {
    Q_OBJECT

public:
    OAITextsApi(const int timeOut = 0);
    ~OAITextsApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  id qint64 [required]
    * @param[in]  strict_validation bool [optional]
    * @param[in]  oai_batch_request OAIBatchRequest [optional]
    */
    virtual void addTextBroadcastBatch(const qint64 &id, const ::OpenAPI::OptionalParam<bool> &strict_validation = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<OAIBatchRequest> &oai_batch_request = ::OpenAPI::OptionalParam<OAIBatchRequest>());

    /**
    * @param[in]  id qint64 [required]
    * @param[in]  fields QString [optional]
    * @param[in]  strict_validation bool [optional]
    * @param[in]  oai_text_recipient QList<OAITextRecipient> [optional]
    */
    virtual void addTextBroadcastRecipients(const qint64 &id, const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &strict_validation = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QList<OAITextRecipient>> &oai_text_recipient = ::OpenAPI::OptionalParam<QList<OAITextRecipient>>());

    /**
    * @param[in]  id qint64 [required]
    */
    virtual void archiveTextBroadcast(const qint64 &id);

    /**
    * @param[in]  oai_text_auto_reply OAITextAutoReply [optional]
    */
    virtual void createTextAutoReply(const ::OpenAPI::OptionalParam<OAITextAutoReply> &oai_text_auto_reply = ::OpenAPI::OptionalParam<OAITextAutoReply>());

    /**
    * @param[in]  start bool [optional]
    * @param[in]  strict_validation bool [optional]
    * @param[in]  oai_text_broadcast OAITextBroadcast [optional]
    */
    virtual void createTextBroadcast(const ::OpenAPI::OptionalParam<bool> &start = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &strict_validation = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<OAITextBroadcast> &oai_text_broadcast = ::OpenAPI::OptionalParam<OAITextBroadcast>());

    /**
    * @param[in]  id qint64 [required]
    */
    virtual void deleteTextAutoReply(const qint64 &id);

    /**
    * @param[in]  fields QString [optional]
    * @param[in]  limit qint32 [optional]
    * @param[in]  offset qint32 [optional]
    * @param[in]  number QString [optional]
    */
    virtual void findTextAutoReplys(const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &limit = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &offset = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &number = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  name QString [optional]
    * @param[in]  label QString [optional]
    * @param[in]  running bool [optional]
    * @param[in]  scheduled bool [optional]
    * @param[in]  interval_begin qint64 [optional]
    * @param[in]  interval_end qint64 [optional]
    * @param[in]  limit qint32 [optional]
    * @param[in]  offset qint32 [optional]
    * @param[in]  fields QString [optional]
    */
    virtual void findTextBroadcasts(const ::OpenAPI::OptionalParam<QString> &name = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &label = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &running = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &scheduled = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<qint64> &interval_begin = ::OpenAPI::OptionalParam<qint64>(), const ::OpenAPI::OptionalParam<qint64> &interval_end = ::OpenAPI::OptionalParam<qint64>(), const ::OpenAPI::OptionalParam<qint32> &limit = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &offset = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  id QList<qint64> [optional]
    * @param[in]  campaign_id qint64 [optional]
    * @param[in]  batch_id qint64 [optional]
    * @param[in]  from_number QString [optional]
    * @param[in]  to_number QString [optional]
    * @param[in]  label QString [optional]
    * @param[in]  states QString [optional]
    * @param[in]  results QString [optional]
    * @param[in]  inbound bool [optional]
    * @param[in]  interval_begin qint64 [optional]
    * @param[in]  interval_end qint64 [optional]
    * @param[in]  limit qint32 [optional]
    * @param[in]  offset qint32 [optional]
    * @param[in]  fields QString [optional]
    */
    virtual void findTexts(const ::OpenAPI::OptionalParam<QList<qint64>> &id = ::OpenAPI::OptionalParam<QList<qint64>>(), const ::OpenAPI::OptionalParam<qint64> &campaign_id = ::OpenAPI::OptionalParam<qint64>(), const ::OpenAPI::OptionalParam<qint64> &batch_id = ::OpenAPI::OptionalParam<qint64>(), const ::OpenAPI::OptionalParam<QString> &from_number = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &to_number = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &label = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &states = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &results = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &inbound = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<qint64> &interval_begin = ::OpenAPI::OptionalParam<qint64>(), const ::OpenAPI::OptionalParam<qint64> &interval_end = ::OpenAPI::OptionalParam<qint64>(), const ::OpenAPI::OptionalParam<qint32> &limit = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &offset = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  id qint64 [required]
    * @param[in]  fields QString [optional]
    */
    virtual void getText(const qint64 &id, const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  id qint64 [required]
    * @param[in]  fields QString [optional]
    */
    virtual void getTextAutoReply(const qint64 &id, const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  id qint64 [required]
    * @param[in]  fields QString [optional]
    */
    virtual void getTextBroadcast(const qint64 &id, const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  id qint64 [required]
    * @param[in]  fields QString [optional]
    * @param[in]  limit qint32 [optional]
    * @param[in]  offset qint32 [optional]
    */
    virtual void getTextBroadcastBatches(const qint64 &id, const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &limit = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &offset = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  id qint64 [required]
    * @param[in]  fields QString [optional]
    * @param[in]  begin qint64 [optional]
    * @param[in]  end qint64 [optional]
    */
    virtual void getTextBroadcastStats(const qint64 &id, const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint64> &begin = ::OpenAPI::OptionalParam<qint64>(), const ::OpenAPI::OptionalParam<qint64> &end = ::OpenAPI::OptionalParam<qint64>());

    /**
    * @param[in]  id qint64 [required]
    * @param[in]  batch_id qint64 [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  limit qint32 [optional]
    * @param[in]  offset qint32 [optional]
    */
    virtual void getTextBroadcastTexts(const qint64 &id, const ::OpenAPI::OptionalParam<qint64> &batch_id = ::OpenAPI::OptionalParam<qint64>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &limit = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &offset = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  fields QString [optional]
    * @param[in]  campaign_id qint64 [optional]
    * @param[in]  default_message QString [optional]
    * @param[in]  strict_validation bool [optional]
    * @param[in]  oai_text_recipient QList<OAITextRecipient> [optional]
    */
    virtual void sendTexts(const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint64> &campaign_id = ::OpenAPI::OptionalParam<qint64>(), const ::OpenAPI::OptionalParam<QString> &default_message = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &strict_validation = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QList<OAITextRecipient>> &oai_text_recipient = ::OpenAPI::OptionalParam<QList<OAITextRecipient>>());

    /**
    * @param[in]  id qint64 [required]
    */
    virtual void startTextBroadcast(const qint64 &id);

    /**
    * @param[in]  id qint64 [required]
    */
    virtual void stopTextBroadcast(const qint64 &id);

    /**
    * @param[in]  id qint64 [required]
    * @param[in]  enable bool [optional]
    * @param[in]  oai_recipient QList<OAIRecipient> [optional]
    */
    virtual void toggleTextBroadcastRecipientsStatus(const qint64 &id, const ::OpenAPI::OptionalParam<bool> &enable = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QList<OAIRecipient>> &oai_recipient = ::OpenAPI::OptionalParam<QList<OAIRecipient>>());

    /**
    * @param[in]  id qint64 [required]
    * @param[in]  strict_validation bool [optional]
    * @param[in]  oai_text_broadcast OAITextBroadcast [optional]
    */
    virtual void updateTextBroadcast(const qint64 &id, const ::OpenAPI::OptionalParam<bool> &strict_validation = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<OAITextBroadcast> &oai_text_broadcast = ::OpenAPI::OptionalParam<OAITextBroadcast>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void addTextBroadcastBatchCallback(OAIHttpRequestWorker *worker);
    void addTextBroadcastRecipientsCallback(OAIHttpRequestWorker *worker);
    void archiveTextBroadcastCallback(OAIHttpRequestWorker *worker);
    void createTextAutoReplyCallback(OAIHttpRequestWorker *worker);
    void createTextBroadcastCallback(OAIHttpRequestWorker *worker);
    void deleteTextAutoReplyCallback(OAIHttpRequestWorker *worker);
    void findTextAutoReplysCallback(OAIHttpRequestWorker *worker);
    void findTextBroadcastsCallback(OAIHttpRequestWorker *worker);
    void findTextsCallback(OAIHttpRequestWorker *worker);
    void getTextCallback(OAIHttpRequestWorker *worker);
    void getTextAutoReplyCallback(OAIHttpRequestWorker *worker);
    void getTextBroadcastCallback(OAIHttpRequestWorker *worker);
    void getTextBroadcastBatchesCallback(OAIHttpRequestWorker *worker);
    void getTextBroadcastStatsCallback(OAIHttpRequestWorker *worker);
    void getTextBroadcastTextsCallback(OAIHttpRequestWorker *worker);
    void sendTextsCallback(OAIHttpRequestWorker *worker);
    void startTextBroadcastCallback(OAIHttpRequestWorker *worker);
    void stopTextBroadcastCallback(OAIHttpRequestWorker *worker);
    void toggleTextBroadcastRecipientsStatusCallback(OAIHttpRequestWorker *worker);
    void updateTextBroadcastCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void addTextBroadcastBatchSignal(OAIResourceId summary);
    void addTextBroadcastRecipientsSignal(OAITextList summary);
    void archiveTextBroadcastSignal();
    void createTextAutoReplySignal(OAIResourceId summary);
    void createTextBroadcastSignal(OAIResourceId summary);
    void deleteTextAutoReplySignal();
    void findTextAutoReplysSignal(OAITextAutoReplyPage summary);
    void findTextBroadcastsSignal(OAITextBroadcastPage summary);
    void findTextsSignal(OAITextPage summary);
    void getTextSignal(OAIText summary);
    void getTextAutoReplySignal(OAITextAutoReply summary);
    void getTextBroadcastSignal(OAITextBroadcast summary);
    void getTextBroadcastBatchesSignal(OAIBatchPage summary);
    void getTextBroadcastStatsSignal(OAITextBroadcastStatsDto summary);
    void getTextBroadcastTextsSignal(OAITextPage summary);
    void sendTextsSignal(OAITextList summary);
    void startTextBroadcastSignal();
    void stopTextBroadcastSignal();
    void toggleTextBroadcastRecipientsStatusSignal();
    void updateTextBroadcastSignal(OAITextBroadcastCreateResponse summary);


    void addTextBroadcastBatchSignalFull(OAIHttpRequestWorker *worker, OAIResourceId summary);
    void addTextBroadcastRecipientsSignalFull(OAIHttpRequestWorker *worker, OAITextList summary);
    void archiveTextBroadcastSignalFull(OAIHttpRequestWorker *worker);
    void createTextAutoReplySignalFull(OAIHttpRequestWorker *worker, OAIResourceId summary);
    void createTextBroadcastSignalFull(OAIHttpRequestWorker *worker, OAIResourceId summary);
    void deleteTextAutoReplySignalFull(OAIHttpRequestWorker *worker);
    void findTextAutoReplysSignalFull(OAIHttpRequestWorker *worker, OAITextAutoReplyPage summary);
    void findTextBroadcastsSignalFull(OAIHttpRequestWorker *worker, OAITextBroadcastPage summary);
    void findTextsSignalFull(OAIHttpRequestWorker *worker, OAITextPage summary);
    void getTextSignalFull(OAIHttpRequestWorker *worker, OAIText summary);
    void getTextAutoReplySignalFull(OAIHttpRequestWorker *worker, OAITextAutoReply summary);
    void getTextBroadcastSignalFull(OAIHttpRequestWorker *worker, OAITextBroadcast summary);
    void getTextBroadcastBatchesSignalFull(OAIHttpRequestWorker *worker, OAIBatchPage summary);
    void getTextBroadcastStatsSignalFull(OAIHttpRequestWorker *worker, OAITextBroadcastStatsDto summary);
    void getTextBroadcastTextsSignalFull(OAIHttpRequestWorker *worker, OAITextPage summary);
    void sendTextsSignalFull(OAIHttpRequestWorker *worker, OAITextList summary);
    void startTextBroadcastSignalFull(OAIHttpRequestWorker *worker);
    void stopTextBroadcastSignalFull(OAIHttpRequestWorker *worker);
    void toggleTextBroadcastRecipientsStatusSignalFull(OAIHttpRequestWorker *worker);
    void updateTextBroadcastSignalFull(OAIHttpRequestWorker *worker, OAITextBroadcastCreateResponse summary);

    Q_DECL_DEPRECATED_X("Use addTextBroadcastBatchSignalError() instead")
    void addTextBroadcastBatchSignalE(OAIResourceId summary, QNetworkReply::NetworkError error_type, QString error_str);
    void addTextBroadcastBatchSignalError(OAIResourceId summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use addTextBroadcastRecipientsSignalError() instead")
    void addTextBroadcastRecipientsSignalE(OAITextList summary, QNetworkReply::NetworkError error_type, QString error_str);
    void addTextBroadcastRecipientsSignalError(OAITextList summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use archiveTextBroadcastSignalError() instead")
    void archiveTextBroadcastSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void archiveTextBroadcastSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createTextAutoReplySignalError() instead")
    void createTextAutoReplySignalE(OAIResourceId summary, QNetworkReply::NetworkError error_type, QString error_str);
    void createTextAutoReplySignalError(OAIResourceId summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createTextBroadcastSignalError() instead")
    void createTextBroadcastSignalE(OAIResourceId summary, QNetworkReply::NetworkError error_type, QString error_str);
    void createTextBroadcastSignalError(OAIResourceId summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteTextAutoReplySignalError() instead")
    void deleteTextAutoReplySignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void deleteTextAutoReplySignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use findTextAutoReplysSignalError() instead")
    void findTextAutoReplysSignalE(OAITextAutoReplyPage summary, QNetworkReply::NetworkError error_type, QString error_str);
    void findTextAutoReplysSignalError(OAITextAutoReplyPage summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use findTextBroadcastsSignalError() instead")
    void findTextBroadcastsSignalE(OAITextBroadcastPage summary, QNetworkReply::NetworkError error_type, QString error_str);
    void findTextBroadcastsSignalError(OAITextBroadcastPage summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use findTextsSignalError() instead")
    void findTextsSignalE(OAITextPage summary, QNetworkReply::NetworkError error_type, QString error_str);
    void findTextsSignalError(OAITextPage summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getTextSignalError() instead")
    void getTextSignalE(OAIText summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getTextSignalError(OAIText summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getTextAutoReplySignalError() instead")
    void getTextAutoReplySignalE(OAITextAutoReply summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getTextAutoReplySignalError(OAITextAutoReply summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getTextBroadcastSignalError() instead")
    void getTextBroadcastSignalE(OAITextBroadcast summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getTextBroadcastSignalError(OAITextBroadcast summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getTextBroadcastBatchesSignalError() instead")
    void getTextBroadcastBatchesSignalE(OAIBatchPage summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getTextBroadcastBatchesSignalError(OAIBatchPage summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getTextBroadcastStatsSignalError() instead")
    void getTextBroadcastStatsSignalE(OAITextBroadcastStatsDto summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getTextBroadcastStatsSignalError(OAITextBroadcastStatsDto summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getTextBroadcastTextsSignalError() instead")
    void getTextBroadcastTextsSignalE(OAITextPage summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getTextBroadcastTextsSignalError(OAITextPage summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use sendTextsSignalError() instead")
    void sendTextsSignalE(OAITextList summary, QNetworkReply::NetworkError error_type, QString error_str);
    void sendTextsSignalError(OAITextList summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use startTextBroadcastSignalError() instead")
    void startTextBroadcastSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void startTextBroadcastSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use stopTextBroadcastSignalError() instead")
    void stopTextBroadcastSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void stopTextBroadcastSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use toggleTextBroadcastRecipientsStatusSignalError() instead")
    void toggleTextBroadcastRecipientsStatusSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void toggleTextBroadcastRecipientsStatusSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateTextBroadcastSignalError() instead")
    void updateTextBroadcastSignalE(OAITextBroadcastCreateResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateTextBroadcastSignalError(OAITextBroadcastCreateResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use addTextBroadcastBatchSignalErrorFull() instead")
    void addTextBroadcastBatchSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void addTextBroadcastBatchSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use addTextBroadcastRecipientsSignalErrorFull() instead")
    void addTextBroadcastRecipientsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void addTextBroadcastRecipientsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use archiveTextBroadcastSignalErrorFull() instead")
    void archiveTextBroadcastSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void archiveTextBroadcastSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createTextAutoReplySignalErrorFull() instead")
    void createTextAutoReplySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void createTextAutoReplySignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createTextBroadcastSignalErrorFull() instead")
    void createTextBroadcastSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void createTextBroadcastSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteTextAutoReplySignalErrorFull() instead")
    void deleteTextAutoReplySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteTextAutoReplySignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use findTextAutoReplysSignalErrorFull() instead")
    void findTextAutoReplysSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void findTextAutoReplysSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use findTextBroadcastsSignalErrorFull() instead")
    void findTextBroadcastsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void findTextBroadcastsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use findTextsSignalErrorFull() instead")
    void findTextsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void findTextsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getTextSignalErrorFull() instead")
    void getTextSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getTextSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getTextAutoReplySignalErrorFull() instead")
    void getTextAutoReplySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getTextAutoReplySignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getTextBroadcastSignalErrorFull() instead")
    void getTextBroadcastSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getTextBroadcastSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getTextBroadcastBatchesSignalErrorFull() instead")
    void getTextBroadcastBatchesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getTextBroadcastBatchesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getTextBroadcastStatsSignalErrorFull() instead")
    void getTextBroadcastStatsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getTextBroadcastStatsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getTextBroadcastTextsSignalErrorFull() instead")
    void getTextBroadcastTextsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getTextBroadcastTextsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use sendTextsSignalErrorFull() instead")
    void sendTextsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void sendTextsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use startTextBroadcastSignalErrorFull() instead")
    void startTextBroadcastSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void startTextBroadcastSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use stopTextBroadcastSignalErrorFull() instead")
    void stopTextBroadcastSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void stopTextBroadcastSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use toggleTextBroadcastRecipientsStatusSignalErrorFull() instead")
    void toggleTextBroadcastRecipientsStatusSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void toggleTextBroadcastRecipientsStatusSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateTextBroadcastSignalErrorFull() instead")
    void updateTextBroadcastSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateTextBroadcastSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
