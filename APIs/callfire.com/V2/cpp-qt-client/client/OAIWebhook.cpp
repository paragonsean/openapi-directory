/**
 * CallFire API Documentation
 * CallFire
 *
 * The version of the OpenAPI document: V2
 * Contact: support@callfire.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIWebhook.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIWebhook::OAIWebhook(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIWebhook::OAIWebhook() {
    this->initializeModel();
}

OAIWebhook::~OAIWebhook() {}

void OAIWebhook::initializeModel() {

    m_callback_isSet = false;
    m_callback_isValid = false;

    m_created_at_isSet = false;
    m_created_at_isValid = false;

    m_enabled_isSet = false;
    m_enabled_isValid = false;

    m_events_isSet = false;
    m_events_isValid = false;

    m_expires_at_isSet = false;
    m_expires_at_isValid = false;

    m_fields_isSet = false;
    m_fields_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_non_strict_ssl_isSet = false;
    m_non_strict_ssl_isValid = false;

    m_resource_isSet = false;
    m_resource_isValid = false;

    m_secret_isSet = false;
    m_secret_isValid = false;

    m_single_use_isSet = false;
    m_single_use_isValid = false;

    m_updated_at_isSet = false;
    m_updated_at_isValid = false;
}

void OAIWebhook::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIWebhook::fromJsonObject(QJsonObject json) {

    m_callback_isValid = ::OpenAPI::fromJsonValue(m_callback, json[QString("callback")]);
    m_callback_isSet = !json[QString("callback")].isNull() && m_callback_isValid;

    m_created_at_isValid = ::OpenAPI::fromJsonValue(m_created_at, json[QString("createdAt")]);
    m_created_at_isSet = !json[QString("createdAt")].isNull() && m_created_at_isValid;

    m_enabled_isValid = ::OpenAPI::fromJsonValue(m_enabled, json[QString("enabled")]);
    m_enabled_isSet = !json[QString("enabled")].isNull() && m_enabled_isValid;

    m_events_isValid = ::OpenAPI::fromJsonValue(m_events, json[QString("events")]);
    m_events_isSet = !json[QString("events")].isNull() && m_events_isValid;

    m_expires_at_isValid = ::OpenAPI::fromJsonValue(m_expires_at, json[QString("expiresAt")]);
    m_expires_at_isSet = !json[QString("expiresAt")].isNull() && m_expires_at_isValid;

    m_fields_isValid = ::OpenAPI::fromJsonValue(m_fields, json[QString("fields")]);
    m_fields_isSet = !json[QString("fields")].isNull() && m_fields_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_non_strict_ssl_isValid = ::OpenAPI::fromJsonValue(m_non_strict_ssl, json[QString("nonStrictSsl")]);
    m_non_strict_ssl_isSet = !json[QString("nonStrictSsl")].isNull() && m_non_strict_ssl_isValid;

    m_resource_isValid = ::OpenAPI::fromJsonValue(m_resource, json[QString("resource")]);
    m_resource_isSet = !json[QString("resource")].isNull() && m_resource_isValid;

    m_secret_isValid = ::OpenAPI::fromJsonValue(m_secret, json[QString("secret")]);
    m_secret_isSet = !json[QString("secret")].isNull() && m_secret_isValid;

    m_single_use_isValid = ::OpenAPI::fromJsonValue(m_single_use, json[QString("singleUse")]);
    m_single_use_isSet = !json[QString("singleUse")].isNull() && m_single_use_isValid;

    m_updated_at_isValid = ::OpenAPI::fromJsonValue(m_updated_at, json[QString("updatedAt")]);
    m_updated_at_isSet = !json[QString("updatedAt")].isNull() && m_updated_at_isValid;
}

QString OAIWebhook::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIWebhook::asJsonObject() const {
    QJsonObject obj;
    if (m_callback_isSet) {
        obj.insert(QString("callback"), ::OpenAPI::toJsonValue(m_callback));
    }
    if (m_created_at_isSet) {
        obj.insert(QString("createdAt"), ::OpenAPI::toJsonValue(m_created_at));
    }
    if (m_enabled_isSet) {
        obj.insert(QString("enabled"), ::OpenAPI::toJsonValue(m_enabled));
    }
    if (m_events.size() > 0) {
        obj.insert(QString("events"), ::OpenAPI::toJsonValue(m_events));
    }
    if (m_expires_at_isSet) {
        obj.insert(QString("expiresAt"), ::OpenAPI::toJsonValue(m_expires_at));
    }
    if (m_fields_isSet) {
        obj.insert(QString("fields"), ::OpenAPI::toJsonValue(m_fields));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_non_strict_ssl_isSet) {
        obj.insert(QString("nonStrictSsl"), ::OpenAPI::toJsonValue(m_non_strict_ssl));
    }
    if (m_resource_isSet) {
        obj.insert(QString("resource"), ::OpenAPI::toJsonValue(m_resource));
    }
    if (m_secret_isSet) {
        obj.insert(QString("secret"), ::OpenAPI::toJsonValue(m_secret));
    }
    if (m_single_use_isSet) {
        obj.insert(QString("singleUse"), ::OpenAPI::toJsonValue(m_single_use));
    }
    if (m_updated_at_isSet) {
        obj.insert(QString("updatedAt"), ::OpenAPI::toJsonValue(m_updated_at));
    }
    return obj;
}

QString OAIWebhook::getCallback() const {
    return m_callback;
}
void OAIWebhook::setCallback(const QString &callback) {
    m_callback = callback;
    m_callback_isSet = true;
}

bool OAIWebhook::is_callback_Set() const{
    return m_callback_isSet;
}

bool OAIWebhook::is_callback_Valid() const{
    return m_callback_isValid;
}

qint64 OAIWebhook::getCreatedAt() const {
    return m_created_at;
}
void OAIWebhook::setCreatedAt(const qint64 &created_at) {
    m_created_at = created_at;
    m_created_at_isSet = true;
}

bool OAIWebhook::is_created_at_Set() const{
    return m_created_at_isSet;
}

bool OAIWebhook::is_created_at_Valid() const{
    return m_created_at_isValid;
}

bool OAIWebhook::isEnabled() const {
    return m_enabled;
}
void OAIWebhook::setEnabled(const bool &enabled) {
    m_enabled = enabled;
    m_enabled_isSet = true;
}

bool OAIWebhook::is_enabled_Set() const{
    return m_enabled_isSet;
}

bool OAIWebhook::is_enabled_Valid() const{
    return m_enabled_isValid;
}

QSet<QString> OAIWebhook::getEvents() const {
    return m_events;
}
void OAIWebhook::setEvents(const QSet<QString> &events) {
    m_events = events;
    m_events_isSet = true;
}

bool OAIWebhook::is_events_Set() const{
    return m_events_isSet;
}

bool OAIWebhook::is_events_Valid() const{
    return m_events_isValid;
}

qint64 OAIWebhook::getExpiresAt() const {
    return m_expires_at;
}
void OAIWebhook::setExpiresAt(const qint64 &expires_at) {
    m_expires_at = expires_at;
    m_expires_at_isSet = true;
}

bool OAIWebhook::is_expires_at_Set() const{
    return m_expires_at_isSet;
}

bool OAIWebhook::is_expires_at_Valid() const{
    return m_expires_at_isValid;
}

QString OAIWebhook::getFields() const {
    return m_fields;
}
void OAIWebhook::setFields(const QString &fields) {
    m_fields = fields;
    m_fields_isSet = true;
}

bool OAIWebhook::is_fields_Set() const{
    return m_fields_isSet;
}

bool OAIWebhook::is_fields_Valid() const{
    return m_fields_isValid;
}

qint64 OAIWebhook::getId() const {
    return m_id;
}
void OAIWebhook::setId(const qint64 &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIWebhook::is_id_Set() const{
    return m_id_isSet;
}

bool OAIWebhook::is_id_Valid() const{
    return m_id_isValid;
}

QString OAIWebhook::getName() const {
    return m_name;
}
void OAIWebhook::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIWebhook::is_name_Set() const{
    return m_name_isSet;
}

bool OAIWebhook::is_name_Valid() const{
    return m_name_isValid;
}

bool OAIWebhook::isNonStrictSsl() const {
    return m_non_strict_ssl;
}
void OAIWebhook::setNonStrictSsl(const bool &non_strict_ssl) {
    m_non_strict_ssl = non_strict_ssl;
    m_non_strict_ssl_isSet = true;
}

bool OAIWebhook::is_non_strict_ssl_Set() const{
    return m_non_strict_ssl_isSet;
}

bool OAIWebhook::is_non_strict_ssl_Valid() const{
    return m_non_strict_ssl_isValid;
}

QString OAIWebhook::getResource() const {
    return m_resource;
}
void OAIWebhook::setResource(const QString &resource) {
    m_resource = resource;
    m_resource_isSet = true;
}

bool OAIWebhook::is_resource_Set() const{
    return m_resource_isSet;
}

bool OAIWebhook::is_resource_Valid() const{
    return m_resource_isValid;
}

QString OAIWebhook::getSecret() const {
    return m_secret;
}
void OAIWebhook::setSecret(const QString &secret) {
    m_secret = secret;
    m_secret_isSet = true;
}

bool OAIWebhook::is_secret_Set() const{
    return m_secret_isSet;
}

bool OAIWebhook::is_secret_Valid() const{
    return m_secret_isValid;
}

bool OAIWebhook::isSingleUse() const {
    return m_single_use;
}
void OAIWebhook::setSingleUse(const bool &single_use) {
    m_single_use = single_use;
    m_single_use_isSet = true;
}

bool OAIWebhook::is_single_use_Set() const{
    return m_single_use_isSet;
}

bool OAIWebhook::is_single_use_Valid() const{
    return m_single_use_isValid;
}

qint64 OAIWebhook::getUpdatedAt() const {
    return m_updated_at;
}
void OAIWebhook::setUpdatedAt(const qint64 &updated_at) {
    m_updated_at = updated_at;
    m_updated_at_isSet = true;
}

bool OAIWebhook::is_updated_at_Set() const{
    return m_updated_at_isSet;
}

bool OAIWebhook::is_updated_at_Valid() const{
    return m_updated_at_isValid;
}

bool OAIWebhook::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_callback_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_created_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_enabled_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_events.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_expires_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_fields_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_non_strict_ssl_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_resource_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_secret_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_single_use_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_updated_at_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIWebhook::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
