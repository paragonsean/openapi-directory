/**
 * CallFire API Documentation
 * CallFire
 *
 * The version of the OpenAPI document: V2
 * Contact: support@callfire.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICallTrackingConfig.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICallTrackingConfig::OAICallTrackingConfig(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICallTrackingConfig::OAICallTrackingConfig() {
    this->initializeModel();
}

OAICallTrackingConfig::~OAICallTrackingConfig() {}

void OAICallTrackingConfig::initializeModel() {

    m_failed_transfer_sound_id_isSet = false;
    m_failed_transfer_sound_id_isValid = false;

    m_google_analytics_isSet = false;
    m_google_analytics_isValid = false;

    m_intro_sound_id_isSet = false;
    m_intro_sound_id_isValid = false;

    m_recorded_isSet = false;
    m_recorded_isValid = false;

    m_screen_isSet = false;
    m_screen_isValid = false;

    m_transfer_numbers_isSet = false;
    m_transfer_numbers_isValid = false;

    m_voicemail_isSet = false;
    m_voicemail_isValid = false;

    m_voicemail_sound_id_isSet = false;
    m_voicemail_sound_id_isValid = false;

    m_weekly_schedule_isSet = false;
    m_weekly_schedule_isValid = false;

    m_whisper_sound_id_isSet = false;
    m_whisper_sound_id_isValid = false;
}

void OAICallTrackingConfig::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICallTrackingConfig::fromJsonObject(QJsonObject json) {

    m_failed_transfer_sound_id_isValid = ::OpenAPI::fromJsonValue(m_failed_transfer_sound_id, json[QString("failedTransferSoundId")]);
    m_failed_transfer_sound_id_isSet = !json[QString("failedTransferSoundId")].isNull() && m_failed_transfer_sound_id_isValid;

    m_google_analytics_isValid = ::OpenAPI::fromJsonValue(m_google_analytics, json[QString("googleAnalytics")]);
    m_google_analytics_isSet = !json[QString("googleAnalytics")].isNull() && m_google_analytics_isValid;

    m_intro_sound_id_isValid = ::OpenAPI::fromJsonValue(m_intro_sound_id, json[QString("introSoundId")]);
    m_intro_sound_id_isSet = !json[QString("introSoundId")].isNull() && m_intro_sound_id_isValid;

    m_recorded_isValid = ::OpenAPI::fromJsonValue(m_recorded, json[QString("recorded")]);
    m_recorded_isSet = !json[QString("recorded")].isNull() && m_recorded_isValid;

    m_screen_isValid = ::OpenAPI::fromJsonValue(m_screen, json[QString("screen")]);
    m_screen_isSet = !json[QString("screen")].isNull() && m_screen_isValid;

    m_transfer_numbers_isValid = ::OpenAPI::fromJsonValue(m_transfer_numbers, json[QString("transferNumbers")]);
    m_transfer_numbers_isSet = !json[QString("transferNumbers")].isNull() && m_transfer_numbers_isValid;

    m_voicemail_isValid = ::OpenAPI::fromJsonValue(m_voicemail, json[QString("voicemail")]);
    m_voicemail_isSet = !json[QString("voicemail")].isNull() && m_voicemail_isValid;

    m_voicemail_sound_id_isValid = ::OpenAPI::fromJsonValue(m_voicemail_sound_id, json[QString("voicemailSoundId")]);
    m_voicemail_sound_id_isSet = !json[QString("voicemailSoundId")].isNull() && m_voicemail_sound_id_isValid;

    m_weekly_schedule_isValid = ::OpenAPI::fromJsonValue(m_weekly_schedule, json[QString("weeklySchedule")]);
    m_weekly_schedule_isSet = !json[QString("weeklySchedule")].isNull() && m_weekly_schedule_isValid;

    m_whisper_sound_id_isValid = ::OpenAPI::fromJsonValue(m_whisper_sound_id, json[QString("whisperSoundId")]);
    m_whisper_sound_id_isSet = !json[QString("whisperSoundId")].isNull() && m_whisper_sound_id_isValid;
}

QString OAICallTrackingConfig::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICallTrackingConfig::asJsonObject() const {
    QJsonObject obj;
    if (m_failed_transfer_sound_id_isSet) {
        obj.insert(QString("failedTransferSoundId"), ::OpenAPI::toJsonValue(m_failed_transfer_sound_id));
    }
    if (m_google_analytics.isSet()) {
        obj.insert(QString("googleAnalytics"), ::OpenAPI::toJsonValue(m_google_analytics));
    }
    if (m_intro_sound_id_isSet) {
        obj.insert(QString("introSoundId"), ::OpenAPI::toJsonValue(m_intro_sound_id));
    }
    if (m_recorded_isSet) {
        obj.insert(QString("recorded"), ::OpenAPI::toJsonValue(m_recorded));
    }
    if (m_screen_isSet) {
        obj.insert(QString("screen"), ::OpenAPI::toJsonValue(m_screen));
    }
    if (m_transfer_numbers.size() > 0) {
        obj.insert(QString("transferNumbers"), ::OpenAPI::toJsonValue(m_transfer_numbers));
    }
    if (m_voicemail_isSet) {
        obj.insert(QString("voicemail"), ::OpenAPI::toJsonValue(m_voicemail));
    }
    if (m_voicemail_sound_id_isSet) {
        obj.insert(QString("voicemailSoundId"), ::OpenAPI::toJsonValue(m_voicemail_sound_id));
    }
    if (m_weekly_schedule.isSet()) {
        obj.insert(QString("weeklySchedule"), ::OpenAPI::toJsonValue(m_weekly_schedule));
    }
    if (m_whisper_sound_id_isSet) {
        obj.insert(QString("whisperSoundId"), ::OpenAPI::toJsonValue(m_whisper_sound_id));
    }
    return obj;
}

qint64 OAICallTrackingConfig::getFailedTransferSoundId() const {
    return m_failed_transfer_sound_id;
}
void OAICallTrackingConfig::setFailedTransferSoundId(const qint64 &failed_transfer_sound_id) {
    m_failed_transfer_sound_id = failed_transfer_sound_id;
    m_failed_transfer_sound_id_isSet = true;
}

bool OAICallTrackingConfig::is_failed_transfer_sound_id_Set() const{
    return m_failed_transfer_sound_id_isSet;
}

bool OAICallTrackingConfig::is_failed_transfer_sound_id_Valid() const{
    return m_failed_transfer_sound_id_isValid;
}

OAIGoogleAnalytics OAICallTrackingConfig::getGoogleAnalytics() const {
    return m_google_analytics;
}
void OAICallTrackingConfig::setGoogleAnalytics(const OAIGoogleAnalytics &google_analytics) {
    m_google_analytics = google_analytics;
    m_google_analytics_isSet = true;
}

bool OAICallTrackingConfig::is_google_analytics_Set() const{
    return m_google_analytics_isSet;
}

bool OAICallTrackingConfig::is_google_analytics_Valid() const{
    return m_google_analytics_isValid;
}

qint64 OAICallTrackingConfig::getIntroSoundId() const {
    return m_intro_sound_id;
}
void OAICallTrackingConfig::setIntroSoundId(const qint64 &intro_sound_id) {
    m_intro_sound_id = intro_sound_id;
    m_intro_sound_id_isSet = true;
}

bool OAICallTrackingConfig::is_intro_sound_id_Set() const{
    return m_intro_sound_id_isSet;
}

bool OAICallTrackingConfig::is_intro_sound_id_Valid() const{
    return m_intro_sound_id_isValid;
}

bool OAICallTrackingConfig::isRecorded() const {
    return m_recorded;
}
void OAICallTrackingConfig::setRecorded(const bool &recorded) {
    m_recorded = recorded;
    m_recorded_isSet = true;
}

bool OAICallTrackingConfig::is_recorded_Set() const{
    return m_recorded_isSet;
}

bool OAICallTrackingConfig::is_recorded_Valid() const{
    return m_recorded_isValid;
}

bool OAICallTrackingConfig::isScreen() const {
    return m_screen;
}
void OAICallTrackingConfig::setScreen(const bool &screen) {
    m_screen = screen;
    m_screen_isSet = true;
}

bool OAICallTrackingConfig::is_screen_Set() const{
    return m_screen_isSet;
}

bool OAICallTrackingConfig::is_screen_Valid() const{
    return m_screen_isValid;
}

QList<QString> OAICallTrackingConfig::getTransferNumbers() const {
    return m_transfer_numbers;
}
void OAICallTrackingConfig::setTransferNumbers(const QList<QString> &transfer_numbers) {
    m_transfer_numbers = transfer_numbers;
    m_transfer_numbers_isSet = true;
}

bool OAICallTrackingConfig::is_transfer_numbers_Set() const{
    return m_transfer_numbers_isSet;
}

bool OAICallTrackingConfig::is_transfer_numbers_Valid() const{
    return m_transfer_numbers_isValid;
}

bool OAICallTrackingConfig::isVoicemail() const {
    return m_voicemail;
}
void OAICallTrackingConfig::setVoicemail(const bool &voicemail) {
    m_voicemail = voicemail;
    m_voicemail_isSet = true;
}

bool OAICallTrackingConfig::is_voicemail_Set() const{
    return m_voicemail_isSet;
}

bool OAICallTrackingConfig::is_voicemail_Valid() const{
    return m_voicemail_isValid;
}

qint64 OAICallTrackingConfig::getVoicemailSoundId() const {
    return m_voicemail_sound_id;
}
void OAICallTrackingConfig::setVoicemailSoundId(const qint64 &voicemail_sound_id) {
    m_voicemail_sound_id = voicemail_sound_id;
    m_voicemail_sound_id_isSet = true;
}

bool OAICallTrackingConfig::is_voicemail_sound_id_Set() const{
    return m_voicemail_sound_id_isSet;
}

bool OAICallTrackingConfig::is_voicemail_sound_id_Valid() const{
    return m_voicemail_sound_id_isValid;
}

OAIWeeklySchedule OAICallTrackingConfig::getWeeklySchedule() const {
    return m_weekly_schedule;
}
void OAICallTrackingConfig::setWeeklySchedule(const OAIWeeklySchedule &weekly_schedule) {
    m_weekly_schedule = weekly_schedule;
    m_weekly_schedule_isSet = true;
}

bool OAICallTrackingConfig::is_weekly_schedule_Set() const{
    return m_weekly_schedule_isSet;
}

bool OAICallTrackingConfig::is_weekly_schedule_Valid() const{
    return m_weekly_schedule_isValid;
}

qint64 OAICallTrackingConfig::getWhisperSoundId() const {
    return m_whisper_sound_id;
}
void OAICallTrackingConfig::setWhisperSoundId(const qint64 &whisper_sound_id) {
    m_whisper_sound_id = whisper_sound_id;
    m_whisper_sound_id_isSet = true;
}

bool OAICallTrackingConfig::is_whisper_sound_id_Set() const{
    return m_whisper_sound_id_isSet;
}

bool OAICallTrackingConfig::is_whisper_sound_id_Valid() const{
    return m_whisper_sound_id_isValid;
}

bool OAICallTrackingConfig::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_failed_transfer_sound_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_google_analytics.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_intro_sound_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_recorded_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_screen_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_transfer_numbers.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_voicemail_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_voicemail_sound_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_weekly_schedule.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_whisper_sound_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICallTrackingConfig::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
