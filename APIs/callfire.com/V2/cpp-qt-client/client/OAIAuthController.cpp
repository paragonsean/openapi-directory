/**
 * CallFire API Documentation
 * CallFire
 *
 * The version of the OpenAPI document: V2
 * Contact: support@callfire.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAuthController.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAuthController::OAIAuthController(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAuthController::OAIAuthController() {
    this->initializeModel();
}

OAIAuthController::~OAIAuthController() {}

void OAIAuthController::initializeModel() {

    m_admin_isSet = false;
    m_admin_isValid = false;

    m_auth_brand_isSet = false;
    m_auth_brand_isValid = false;

    m_auth_token_isSet = false;
    m_auth_token_isValid = false;

    m_migration_isSet = false;
    m_migration_isValid = false;
}

void OAIAuthController::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAuthController::fromJsonObject(QJsonObject json) {

    m_admin_isValid = ::OpenAPI::fromJsonValue(m_admin, json[QString("admin")]);
    m_admin_isSet = !json[QString("admin")].isNull() && m_admin_isValid;

    m_auth_brand_isValid = ::OpenAPI::fromJsonValue(m_auth_brand, json[QString("authBrand")]);
    m_auth_brand_isSet = !json[QString("authBrand")].isNull() && m_auth_brand_isValid;

    m_auth_token_isValid = ::OpenAPI::fromJsonValue(m_auth_token, json[QString("authToken")]);
    m_auth_token_isSet = !json[QString("authToken")].isNull() && m_auth_token_isValid;

    m_migration_isValid = ::OpenAPI::fromJsonValue(m_migration, json[QString("migration")]);
    m_migration_isSet = !json[QString("migration")].isNull() && m_migration_isValid;
}

QString OAIAuthController::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAuthController::asJsonObject() const {
    QJsonObject obj;
    if (m_admin_isSet) {
        obj.insert(QString("admin"), ::OpenAPI::toJsonValue(m_admin));
    }
    if (m_auth_brand_isSet) {
        obj.insert(QString("authBrand"), ::OpenAPI::toJsonValue(m_auth_brand));
    }
    if (m_auth_token.isSet()) {
        obj.insert(QString("authToken"), ::OpenAPI::toJsonValue(m_auth_token));
    }
    if (m_migration_isSet) {
        obj.insert(QString("migration"), ::OpenAPI::toJsonValue(m_migration));
    }
    return obj;
}

bool OAIAuthController::isAdmin() const {
    return m_admin;
}
void OAIAuthController::setAdmin(const bool &admin) {
    m_admin = admin;
    m_admin_isSet = true;
}

bool OAIAuthController::is_admin_Set() const{
    return m_admin_isSet;
}

bool OAIAuthController::is_admin_Valid() const{
    return m_admin_isValid;
}

QString OAIAuthController::getAuthBrand() const {
    return m_auth_brand;
}
void OAIAuthController::setAuthBrand(const QString &auth_brand) {
    m_auth_brand = auth_brand;
    m_auth_brand_isSet = true;
}

bool OAIAuthController::is_auth_brand_Set() const{
    return m_auth_brand_isSet;
}

bool OAIAuthController::is_auth_brand_Valid() const{
    return m_auth_brand_isValid;
}

OAIAuthToken OAIAuthController::getAuthToken() const {
    return m_auth_token;
}
void OAIAuthController::setAuthToken(const OAIAuthToken &auth_token) {
    m_auth_token = auth_token;
    m_auth_token_isSet = true;
}

bool OAIAuthController::is_auth_token_Set() const{
    return m_auth_token_isSet;
}

bool OAIAuthController::is_auth_token_Valid() const{
    return m_auth_token_isValid;
}

bool OAIAuthController::isMigration() const {
    return m_migration;
}
void OAIAuthController::setMigration(const bool &migration) {
    m_migration = migration;
    m_migration_isSet = true;
}

bool OAIAuthController::is_migration_Set() const{
    return m_migration_isSet;
}

bool OAIAuthController::is_migration_Valid() const{
    return m_migration_isValid;
}

bool OAIAuthController::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_admin_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_auth_brand_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_auth_token.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_migration_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAuthController::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
