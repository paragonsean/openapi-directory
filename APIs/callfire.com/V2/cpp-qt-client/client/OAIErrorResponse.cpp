/**
 * CallFire API Documentation
 * CallFire
 *
 * The version of the OpenAPI document: V2
 * Contact: support@callfire.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIErrorResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIErrorResponse::OAIErrorResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIErrorResponse::OAIErrorResponse() {
    this->initializeModel();
}

OAIErrorResponse::~OAIErrorResponse() {}

void OAIErrorResponse::initializeModel() {

    m_developer_message_isSet = false;
    m_developer_message_isValid = false;

    m_help_link_isSet = false;
    m_help_link_isValid = false;

    m_http_status_code_isSet = false;
    m_http_status_code_isValid = false;

    m_internal_code_isSet = false;
    m_internal_code_isValid = false;

    m_message_isSet = false;
    m_message_isValid = false;
}

void OAIErrorResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIErrorResponse::fromJsonObject(QJsonObject json) {

    m_developer_message_isValid = ::OpenAPI::fromJsonValue(m_developer_message, json[QString("developerMessage")]);
    m_developer_message_isSet = !json[QString("developerMessage")].isNull() && m_developer_message_isValid;

    m_help_link_isValid = ::OpenAPI::fromJsonValue(m_help_link, json[QString("helpLink")]);
    m_help_link_isSet = !json[QString("helpLink")].isNull() && m_help_link_isValid;

    m_http_status_code_isValid = ::OpenAPI::fromJsonValue(m_http_status_code, json[QString("httpStatusCode")]);
    m_http_status_code_isSet = !json[QString("httpStatusCode")].isNull() && m_http_status_code_isValid;

    m_internal_code_isValid = ::OpenAPI::fromJsonValue(m_internal_code, json[QString("internalCode")]);
    m_internal_code_isSet = !json[QString("internalCode")].isNull() && m_internal_code_isValid;

    m_message_isValid = ::OpenAPI::fromJsonValue(m_message, json[QString("message")]);
    m_message_isSet = !json[QString("message")].isNull() && m_message_isValid;
}

QString OAIErrorResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIErrorResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_developer_message_isSet) {
        obj.insert(QString("developerMessage"), ::OpenAPI::toJsonValue(m_developer_message));
    }
    if (m_help_link_isSet) {
        obj.insert(QString("helpLink"), ::OpenAPI::toJsonValue(m_help_link));
    }
    if (m_http_status_code_isSet) {
        obj.insert(QString("httpStatusCode"), ::OpenAPI::toJsonValue(m_http_status_code));
    }
    if (m_internal_code_isSet) {
        obj.insert(QString("internalCode"), ::OpenAPI::toJsonValue(m_internal_code));
    }
    if (m_message_isSet) {
        obj.insert(QString("message"), ::OpenAPI::toJsonValue(m_message));
    }
    return obj;
}

QString OAIErrorResponse::getDeveloperMessage() const {
    return m_developer_message;
}
void OAIErrorResponse::setDeveloperMessage(const QString &developer_message) {
    m_developer_message = developer_message;
    m_developer_message_isSet = true;
}

bool OAIErrorResponse::is_developer_message_Set() const{
    return m_developer_message_isSet;
}

bool OAIErrorResponse::is_developer_message_Valid() const{
    return m_developer_message_isValid;
}

QString OAIErrorResponse::getHelpLink() const {
    return m_help_link;
}
void OAIErrorResponse::setHelpLink(const QString &help_link) {
    m_help_link = help_link;
    m_help_link_isSet = true;
}

bool OAIErrorResponse::is_help_link_Set() const{
    return m_help_link_isSet;
}

bool OAIErrorResponse::is_help_link_Valid() const{
    return m_help_link_isValid;
}

qint32 OAIErrorResponse::getHttpStatusCode() const {
    return m_http_status_code;
}
void OAIErrorResponse::setHttpStatusCode(const qint32 &http_status_code) {
    m_http_status_code = http_status_code;
    m_http_status_code_isSet = true;
}

bool OAIErrorResponse::is_http_status_code_Set() const{
    return m_http_status_code_isSet;
}

bool OAIErrorResponse::is_http_status_code_Valid() const{
    return m_http_status_code_isValid;
}

QString OAIErrorResponse::getInternalCode() const {
    return m_internal_code;
}
void OAIErrorResponse::setInternalCode(const QString &internal_code) {
    m_internal_code = internal_code;
    m_internal_code_isSet = true;
}

bool OAIErrorResponse::is_internal_code_Set() const{
    return m_internal_code_isSet;
}

bool OAIErrorResponse::is_internal_code_Valid() const{
    return m_internal_code_isValid;
}

QString OAIErrorResponse::getMessage() const {
    return m_message;
}
void OAIErrorResponse::setMessage(const QString &message) {
    m_message = message;
    m_message_isSet = true;
}

bool OAIErrorResponse::is_message_Set() const{
    return m_message_isSet;
}

bool OAIErrorResponse::is_message_Valid() const{
    return m_message_isValid;
}

bool OAIErrorResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_developer_message_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_help_link_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_http_status_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_internal_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_message_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIErrorResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
