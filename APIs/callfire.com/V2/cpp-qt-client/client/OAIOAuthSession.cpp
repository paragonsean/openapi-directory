/**
 * CallFire API Documentation
 * CallFire
 *
 * The version of the OpenAPI document: V2
 * Contact: support@callfire.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIOAuthSession.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIOAuthSession::OAIOAuthSession(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIOAuthSession::OAIOAuthSession() {
    this->initializeModel();
}

OAIOAuthSession::~OAIOAuthSession() {}

void OAIOAuthSession::initializeModel() {

    m_account_id_isSet = false;
    m_account_id_isValid = false;

    m_actor_isSet = false;
    m_actor_isValid = false;

    m_brand_isSet = false;
    m_brand_isValid = false;

    m_client_id_isSet = false;
    m_client_id_isValid = false;

    m_email_isSet = false;
    m_email_isValid = false;

    m_expires_isSet = false;
    m_expires_isValid = false;

    m_grant_type_isSet = false;
    m_grant_type_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_ip_address_isSet = false;
    m_ip_address_isValid = false;

    m_issued_isSet = false;
    m_issued_isValid = false;

    m_scope_isSet = false;
    m_scope_isValid = false;

    m_sid_isSet = false;
    m_sid_isValid = false;

    m_user_id_isSet = false;
    m_user_id_isValid = false;

    m_username_isSet = false;
    m_username_isValid = false;

    m_verification_required_isSet = false;
    m_verification_required_isValid = false;
}

void OAIOAuthSession::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIOAuthSession::fromJsonObject(QJsonObject json) {

    m_account_id_isValid = ::OpenAPI::fromJsonValue(m_account_id, json[QString("accountId")]);
    m_account_id_isSet = !json[QString("accountId")].isNull() && m_account_id_isValid;

    m_actor_isValid = ::OpenAPI::fromJsonValue(m_actor, json[QString("actor")]);
    m_actor_isSet = !json[QString("actor")].isNull() && m_actor_isValid;

    m_brand_isValid = ::OpenAPI::fromJsonValue(m_brand, json[QString("brand")]);
    m_brand_isSet = !json[QString("brand")].isNull() && m_brand_isValid;

    m_client_id_isValid = ::OpenAPI::fromJsonValue(m_client_id, json[QString("clientId")]);
    m_client_id_isSet = !json[QString("clientId")].isNull() && m_client_id_isValid;

    m_email_isValid = ::OpenAPI::fromJsonValue(m_email, json[QString("email")]);
    m_email_isSet = !json[QString("email")].isNull() && m_email_isValid;

    m_expires_isValid = ::OpenAPI::fromJsonValue(m_expires, json[QString("expires")]);
    m_expires_isSet = !json[QString("expires")].isNull() && m_expires_isValid;

    m_grant_type_isValid = ::OpenAPI::fromJsonValue(m_grant_type, json[QString("grantType")]);
    m_grant_type_isSet = !json[QString("grantType")].isNull() && m_grant_type_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_ip_address_isValid = ::OpenAPI::fromJsonValue(m_ip_address, json[QString("ipAddress")]);
    m_ip_address_isSet = !json[QString("ipAddress")].isNull() && m_ip_address_isValid;

    m_issued_isValid = ::OpenAPI::fromJsonValue(m_issued, json[QString("issued")]);
    m_issued_isSet = !json[QString("issued")].isNull() && m_issued_isValid;

    m_scope_isValid = ::OpenAPI::fromJsonValue(m_scope, json[QString("scope")]);
    m_scope_isSet = !json[QString("scope")].isNull() && m_scope_isValid;

    m_sid_isValid = ::OpenAPI::fromJsonValue(m_sid, json[QString("sid")]);
    m_sid_isSet = !json[QString("sid")].isNull() && m_sid_isValid;

    m_user_id_isValid = ::OpenAPI::fromJsonValue(m_user_id, json[QString("userId")]);
    m_user_id_isSet = !json[QString("userId")].isNull() && m_user_id_isValid;

    m_username_isValid = ::OpenAPI::fromJsonValue(m_username, json[QString("username")]);
    m_username_isSet = !json[QString("username")].isNull() && m_username_isValid;

    m_verification_required_isValid = ::OpenAPI::fromJsonValue(m_verification_required, json[QString("verificationRequired")]);
    m_verification_required_isSet = !json[QString("verificationRequired")].isNull() && m_verification_required_isValid;
}

QString OAIOAuthSession::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIOAuthSession::asJsonObject() const {
    QJsonObject obj;
    if (m_account_id_isSet) {
        obj.insert(QString("accountId"), ::OpenAPI::toJsonValue(m_account_id));
    }
    if (m_actor.isSet()) {
        obj.insert(QString("actor"), ::OpenAPI::toJsonValue(m_actor));
    }
    if (m_brand_isSet) {
        obj.insert(QString("brand"), ::OpenAPI::toJsonValue(m_brand));
    }
    if (m_client_id_isSet) {
        obj.insert(QString("clientId"), ::OpenAPI::toJsonValue(m_client_id));
    }
    if (m_email_isSet) {
        obj.insert(QString("email"), ::OpenAPI::toJsonValue(m_email));
    }
    if (m_expires_isSet) {
        obj.insert(QString("expires"), ::OpenAPI::toJsonValue(m_expires));
    }
    if (m_grant_type_isSet) {
        obj.insert(QString("grantType"), ::OpenAPI::toJsonValue(m_grant_type));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_ip_address_isSet) {
        obj.insert(QString("ipAddress"), ::OpenAPI::toJsonValue(m_ip_address));
    }
    if (m_issued_isSet) {
        obj.insert(QString("issued"), ::OpenAPI::toJsonValue(m_issued));
    }
    if (m_scope_isSet) {
        obj.insert(QString("scope"), ::OpenAPI::toJsonValue(m_scope));
    }
    if (m_sid_isSet) {
        obj.insert(QString("sid"), ::OpenAPI::toJsonValue(m_sid));
    }
    if (m_user_id_isSet) {
        obj.insert(QString("userId"), ::OpenAPI::toJsonValue(m_user_id));
    }
    if (m_username_isSet) {
        obj.insert(QString("username"), ::OpenAPI::toJsonValue(m_username));
    }
    if (m_verification_required_isSet) {
        obj.insert(QString("verificationRequired"), ::OpenAPI::toJsonValue(m_verification_required));
    }
    return obj;
}

QString OAIOAuthSession::getAccountId() const {
    return m_account_id;
}
void OAIOAuthSession::setAccountId(const QString &account_id) {
    m_account_id = account_id;
    m_account_id_isSet = true;
}

bool OAIOAuthSession::is_account_id_Set() const{
    return m_account_id_isSet;
}

bool OAIOAuthSession::is_account_id_Valid() const{
    return m_account_id_isValid;
}

OAIOAuthSession OAIOAuthSession::getActor() const {
    return m_actor;
}
void OAIOAuthSession::setActor(const OAIOAuthSession &actor) {
    m_actor = actor;
    m_actor_isSet = true;
}

bool OAIOAuthSession::is_actor_Set() const{
    return m_actor_isSet;
}

bool OAIOAuthSession::is_actor_Valid() const{
    return m_actor_isValid;
}

QString OAIOAuthSession::getBrand() const {
    return m_brand;
}
void OAIOAuthSession::setBrand(const QString &brand) {
    m_brand = brand;
    m_brand_isSet = true;
}

bool OAIOAuthSession::is_brand_Set() const{
    return m_brand_isSet;
}

bool OAIOAuthSession::is_brand_Valid() const{
    return m_brand_isValid;
}

QString OAIOAuthSession::getClientId() const {
    return m_client_id;
}
void OAIOAuthSession::setClientId(const QString &client_id) {
    m_client_id = client_id;
    m_client_id_isSet = true;
}

bool OAIOAuthSession::is_client_id_Set() const{
    return m_client_id_isSet;
}

bool OAIOAuthSession::is_client_id_Valid() const{
    return m_client_id_isValid;
}

QString OAIOAuthSession::getEmail() const {
    return m_email;
}
void OAIOAuthSession::setEmail(const QString &email) {
    m_email = email;
    m_email_isSet = true;
}

bool OAIOAuthSession::is_email_Set() const{
    return m_email_isSet;
}

bool OAIOAuthSession::is_email_Valid() const{
    return m_email_isValid;
}

QDateTime OAIOAuthSession::getExpires() const {
    return m_expires;
}
void OAIOAuthSession::setExpires(const QDateTime &expires) {
    m_expires = expires;
    m_expires_isSet = true;
}

bool OAIOAuthSession::is_expires_Set() const{
    return m_expires_isSet;
}

bool OAIOAuthSession::is_expires_Valid() const{
    return m_expires_isValid;
}

QString OAIOAuthSession::getGrantType() const {
    return m_grant_type;
}
void OAIOAuthSession::setGrantType(const QString &grant_type) {
    m_grant_type = grant_type;
    m_grant_type_isSet = true;
}

bool OAIOAuthSession::is_grant_type_Set() const{
    return m_grant_type_isSet;
}

bool OAIOAuthSession::is_grant_type_Valid() const{
    return m_grant_type_isValid;
}

QString OAIOAuthSession::getId() const {
    return m_id;
}
void OAIOAuthSession::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIOAuthSession::is_id_Set() const{
    return m_id_isSet;
}

bool OAIOAuthSession::is_id_Valid() const{
    return m_id_isValid;
}

QString OAIOAuthSession::getIpAddress() const {
    return m_ip_address;
}
void OAIOAuthSession::setIpAddress(const QString &ip_address) {
    m_ip_address = ip_address;
    m_ip_address_isSet = true;
}

bool OAIOAuthSession::is_ip_address_Set() const{
    return m_ip_address_isSet;
}

bool OAIOAuthSession::is_ip_address_Valid() const{
    return m_ip_address_isValid;
}

QDateTime OAIOAuthSession::getIssued() const {
    return m_issued;
}
void OAIOAuthSession::setIssued(const QDateTime &issued) {
    m_issued = issued;
    m_issued_isSet = true;
}

bool OAIOAuthSession::is_issued_Set() const{
    return m_issued_isSet;
}

bool OAIOAuthSession::is_issued_Valid() const{
    return m_issued_isValid;
}

QString OAIOAuthSession::getScope() const {
    return m_scope;
}
void OAIOAuthSession::setScope(const QString &scope) {
    m_scope = scope;
    m_scope_isSet = true;
}

bool OAIOAuthSession::is_scope_Set() const{
    return m_scope_isSet;
}

bool OAIOAuthSession::is_scope_Valid() const{
    return m_scope_isValid;
}

qint64 OAIOAuthSession::getSid() const {
    return m_sid;
}
void OAIOAuthSession::setSid(const qint64 &sid) {
    m_sid = sid;
    m_sid_isSet = true;
}

bool OAIOAuthSession::is_sid_Set() const{
    return m_sid_isSet;
}

bool OAIOAuthSession::is_sid_Valid() const{
    return m_sid_isValid;
}

QString OAIOAuthSession::getUserId() const {
    return m_user_id;
}
void OAIOAuthSession::setUserId(const QString &user_id) {
    m_user_id = user_id;
    m_user_id_isSet = true;
}

bool OAIOAuthSession::is_user_id_Set() const{
    return m_user_id_isSet;
}

bool OAIOAuthSession::is_user_id_Valid() const{
    return m_user_id_isValid;
}

QString OAIOAuthSession::getUsername() const {
    return m_username;
}
void OAIOAuthSession::setUsername(const QString &username) {
    m_username = username;
    m_username_isSet = true;
}

bool OAIOAuthSession::is_username_Set() const{
    return m_username_isSet;
}

bool OAIOAuthSession::is_username_Valid() const{
    return m_username_isValid;
}

bool OAIOAuthSession::isVerificationRequired() const {
    return m_verification_required;
}
void OAIOAuthSession::setVerificationRequired(const bool &verification_required) {
    m_verification_required = verification_required;
    m_verification_required_isSet = true;
}

bool OAIOAuthSession::is_verification_required_Set() const{
    return m_verification_required_isSet;
}

bool OAIOAuthSession::is_verification_required_Valid() const{
    return m_verification_required_isValid;
}

bool OAIOAuthSession::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_account_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_actor.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_brand_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_client_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_email_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_expires_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_grant_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_ip_address_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_issued_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_scope_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sid_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_user_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_username_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_verification_required_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIOAuthSession::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
