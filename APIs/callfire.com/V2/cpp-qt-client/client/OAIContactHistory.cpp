/**
 * CallFire API Documentation
 * CallFire
 *
 * The version of the OpenAPI document: V2
 * Contact: support@callfire.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIContactHistory.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIContactHistory::OAIContactHistory(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIContactHistory::OAIContactHistory() {
    this->initializeModel();
}

OAIContactHistory::~OAIContactHistory() {}

void OAIContactHistory::initializeModel() {

    m_calls_isSet = false;
    m_calls_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_texts_isSet = false;
    m_texts_isValid = false;
}

void OAIContactHistory::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIContactHistory::fromJsonObject(QJsonObject json) {

    m_calls_isValid = ::OpenAPI::fromJsonValue(m_calls, json[QString("calls")]);
    m_calls_isSet = !json[QString("calls")].isNull() && m_calls_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_texts_isValid = ::OpenAPI::fromJsonValue(m_texts, json[QString("texts")]);
    m_texts_isSet = !json[QString("texts")].isNull() && m_texts_isValid;
}

QString OAIContactHistory::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIContactHistory::asJsonObject() const {
    QJsonObject obj;
    if (m_calls.size() > 0) {
        obj.insert(QString("calls"), ::OpenAPI::toJsonValue(m_calls));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_texts.size() > 0) {
        obj.insert(QString("texts"), ::OpenAPI::toJsonValue(m_texts));
    }
    return obj;
}

QList<OAICall> OAIContactHistory::getCalls() const {
    return m_calls;
}
void OAIContactHistory::setCalls(const QList<OAICall> &calls) {
    m_calls = calls;
    m_calls_isSet = true;
}

bool OAIContactHistory::is_calls_Set() const{
    return m_calls_isSet;
}

bool OAIContactHistory::is_calls_Valid() const{
    return m_calls_isValid;
}

qint64 OAIContactHistory::getId() const {
    return m_id;
}
void OAIContactHistory::setId(const qint64 &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIContactHistory::is_id_Set() const{
    return m_id_isSet;
}

bool OAIContactHistory::is_id_Valid() const{
    return m_id_isValid;
}

QList<OAIText> OAIContactHistory::getTexts() const {
    return m_texts;
}
void OAIContactHistory::setTexts(const QList<OAIText> &texts) {
    m_texts = texts;
    m_texts_isSet = true;
}

bool OAIContactHistory::is_texts_Set() const{
    return m_texts_isSet;
}

bool OAIContactHistory::is_texts_Valid() const{
    return m_texts_isValid;
}

bool OAIContactHistory::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_calls.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_texts.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIContactHistory::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
