/**
 * CallFire API Documentation
 * CallFire
 *
 * The version of the OpenAPI document: V2
 * Contact: support@callfire.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAccount.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAccount::OAIAccount(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAccount::OAIAccount() {
    this->initializeModel();
}

OAIAccount::~OAIAccount() {}

void OAIAccount::initializeModel() {

    m_active_isSet = false;
    m_active_isValid = false;

    m_address_isSet = false;
    m_address_isValid = false;

    m_age_isSet = false;
    m_age_isValid = false;

    m_agency_managed_accounts_isSet = false;
    m_agency_managed_accounts_isValid = false;

    m_allowed_to_create_campaign_isSet = false;
    m_allowed_to_create_campaign_isValid = false;

    m_api_call_limit_isSet = false;
    m_api_call_limit_isValid = false;

    m_archived_isSet = false;
    m_archived_isValid = false;

    m_auto_add_do_not_contact_isSet = false;
    m_auto_add_do_not_contact_isValid = false;

    m_brand_isSet = false;
    m_brand_isValid = false;

    m_canceled_isSet = false;
    m_canceled_isValid = false;

    m_canceled_or_archived_isSet = false;
    m_canceled_or_archived_isValid = false;

    m_city_isSet = false;
    m_city_isValid = false;

    m_company_name_isSet = false;
    m_company_name_isValid = false;

    m_country_isSet = false;
    m_country_isValid = false;

    m_country_or_default_isSet = false;
    m_country_or_default_isValid = false;

    m_created_isSet = false;
    m_created_isValid = false;

    m_date_time_zone_isSet = false;
    m_date_time_zone_isValid = false;

    m_default_notification_ttl_millis_isSet = false;
    m_default_notification_ttl_millis_isValid = false;

    m_default_number_id_isSet = false;
    m_default_number_id_isValid = false;

    m_ein_isSet = false;
    m_ein_isValid = false;

    m_entity_type_isSet = false;
    m_entity_type_isValid = false;

    m_ez_isSet = false;
    m_ez_isValid = false;

    m_failed_verification_attempts_isSet = false;
    m_failed_verification_attempts_isValid = false;

    m_from_number_pool_isSet = false;
    m_from_number_pool_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_industry_isSet = false;
    m_industry_isValid = false;

    m_industry_name_isSet = false;
    m_industry_name_isValid = false;

    m_key_isSet = false;
    m_key_isValid = false;

    m_local_time_zone_restriction_isSet = false;
    m_local_time_zone_restriction_isValid = false;

    m_locale_isSet = false;
    m_locale_isValid = false;

    m_max_agents_isSet = false;
    m_max_agents_isValid = false;

    m_message_class_isSet = false;
    m_message_class_isValid = false;

    m_message_flows_isSet = false;
    m_message_flows_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_outbound_threshold_isSet = false;
    m_outbound_threshold_isValid = false;

    m_receiver_period_call_isSet = false;
    m_receiver_period_call_isValid = false;

    m_receiver_period_enabled_isSet = false;
    m_receiver_period_enabled_isValid = false;

    m_receiver_period_global_isSet = false;
    m_receiver_period_global_isValid = false;

    m_receiver_period_text_isSet = false;
    m_receiver_period_text_isValid = false;

    m_receiver_period_time_unit_isSet = false;
    m_receiver_period_time_unit_isValid = false;

    m_retain_only_metadata_isSet = false;
    m_retain_only_metadata_isValid = false;

    m_retain_only_metadata_last_detail_record_id_isSet = false;
    m_retain_only_metadata_last_detail_record_id_isValid = false;

    m_retain_only_metadata_last_modified_isSet = false;
    m_retain_only_metadata_last_modified_isValid = false;

    m_scrub_isSet = false;
    m_scrub_isValid = false;

    m_shared_short_code_allowed_isSet = false;
    m_shared_short_code_allowed_isValid = false;

    m_shared_short_code_id_isSet = false;
    m_shared_short_code_id_isValid = false;

    m_soa_account_isSet = false;
    m_soa_account_isValid = false;

    m_start_capable_isSet = false;
    m_start_capable_isValid = false;

    m_state_isSet = false;
    m_state_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;

    m_text_outbound_threshold_isSet = false;
    m_text_outbound_threshold_isValid = false;

    m_time_zone_isSet = false;
    m_time_zone_isValid = false;

    m_time_zone_id_isSet = false;
    m_time_zone_id_isValid = false;

    m_trust_level_isSet = false;
    m_trust_level_isValid = false;

    m_tsr_agreement_isSet = false;
    m_tsr_agreement_isValid = false;

    m_tsr_initials_isSet = false;
    m_tsr_initials_isValid = false;

    m_ui_context_isSet = false;
    m_ui_context_isValid = false;

    m_universal_isSet = false;
    m_universal_isValid = false;

    m_website_isSet = false;
    m_website_isValid = false;

    m_zipcode_isSet = false;
    m_zipcode_isValid = false;
}

void OAIAccount::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAccount::fromJsonObject(QJsonObject json) {

    m_active_isValid = ::OpenAPI::fromJsonValue(m_active, json[QString("active")]);
    m_active_isSet = !json[QString("active")].isNull() && m_active_isValid;

    m_address_isValid = ::OpenAPI::fromJsonValue(m_address, json[QString("address")]);
    m_address_isSet = !json[QString("address")].isNull() && m_address_isValid;

    m_age_isValid = ::OpenAPI::fromJsonValue(m_age, json[QString("age")]);
    m_age_isSet = !json[QString("age")].isNull() && m_age_isValid;

    m_agency_managed_accounts_isValid = ::OpenAPI::fromJsonValue(m_agency_managed_accounts, json[QString("agencyManagedAccounts")]);
    m_agency_managed_accounts_isSet = !json[QString("agencyManagedAccounts")].isNull() && m_agency_managed_accounts_isValid;

    m_allowed_to_create_campaign_isValid = ::OpenAPI::fromJsonValue(m_allowed_to_create_campaign, json[QString("allowedToCreateCampaign")]);
    m_allowed_to_create_campaign_isSet = !json[QString("allowedToCreateCampaign")].isNull() && m_allowed_to_create_campaign_isValid;

    m_api_call_limit_isValid = ::OpenAPI::fromJsonValue(m_api_call_limit, json[QString("apiCallLimit")]);
    m_api_call_limit_isSet = !json[QString("apiCallLimit")].isNull() && m_api_call_limit_isValid;

    m_archived_isValid = ::OpenAPI::fromJsonValue(m_archived, json[QString("archived")]);
    m_archived_isSet = !json[QString("archived")].isNull() && m_archived_isValid;

    m_auto_add_do_not_contact_isValid = ::OpenAPI::fromJsonValue(m_auto_add_do_not_contact, json[QString("autoAddDoNotContact")]);
    m_auto_add_do_not_contact_isSet = !json[QString("autoAddDoNotContact")].isNull() && m_auto_add_do_not_contact_isValid;

    m_brand_isValid = ::OpenAPI::fromJsonValue(m_brand, json[QString("brand")]);
    m_brand_isSet = !json[QString("brand")].isNull() && m_brand_isValid;

    m_canceled_isValid = ::OpenAPI::fromJsonValue(m_canceled, json[QString("canceled")]);
    m_canceled_isSet = !json[QString("canceled")].isNull() && m_canceled_isValid;

    m_canceled_or_archived_isValid = ::OpenAPI::fromJsonValue(m_canceled_or_archived, json[QString("canceledOrArchived")]);
    m_canceled_or_archived_isSet = !json[QString("canceledOrArchived")].isNull() && m_canceled_or_archived_isValid;

    m_city_isValid = ::OpenAPI::fromJsonValue(m_city, json[QString("city")]);
    m_city_isSet = !json[QString("city")].isNull() && m_city_isValid;

    m_company_name_isValid = ::OpenAPI::fromJsonValue(m_company_name, json[QString("companyName")]);
    m_company_name_isSet = !json[QString("companyName")].isNull() && m_company_name_isValid;

    m_country_isValid = ::OpenAPI::fromJsonValue(m_country, json[QString("country")]);
    m_country_isSet = !json[QString("country")].isNull() && m_country_isValid;

    m_country_or_default_isValid = ::OpenAPI::fromJsonValue(m_country_or_default, json[QString("countryOrDefault")]);
    m_country_or_default_isSet = !json[QString("countryOrDefault")].isNull() && m_country_or_default_isValid;

    m_created_isValid = ::OpenAPI::fromJsonValue(m_created, json[QString("created")]);
    m_created_isSet = !json[QString("created")].isNull() && m_created_isValid;

    m_date_time_zone_isValid = ::OpenAPI::fromJsonValue(m_date_time_zone, json[QString("dateTimeZone")]);
    m_date_time_zone_isSet = !json[QString("dateTimeZone")].isNull() && m_date_time_zone_isValid;

    m_default_notification_ttl_millis_isValid = ::OpenAPI::fromJsonValue(m_default_notification_ttl_millis, json[QString("defaultNotificationTtlMillis")]);
    m_default_notification_ttl_millis_isSet = !json[QString("defaultNotificationTtlMillis")].isNull() && m_default_notification_ttl_millis_isValid;

    m_default_number_id_isValid = ::OpenAPI::fromJsonValue(m_default_number_id, json[QString("defaultNumberId")]);
    m_default_number_id_isSet = !json[QString("defaultNumberId")].isNull() && m_default_number_id_isValid;

    m_ein_isValid = ::OpenAPI::fromJsonValue(m_ein, json[QString("ein")]);
    m_ein_isSet = !json[QString("ein")].isNull() && m_ein_isValid;

    m_entity_type_isValid = ::OpenAPI::fromJsonValue(m_entity_type, json[QString("entityType")]);
    m_entity_type_isSet = !json[QString("entityType")].isNull() && m_entity_type_isValid;

    m_ez_isValid = ::OpenAPI::fromJsonValue(m_ez, json[QString("ez")]);
    m_ez_isSet = !json[QString("ez")].isNull() && m_ez_isValid;

    m_failed_verification_attempts_isValid = ::OpenAPI::fromJsonValue(m_failed_verification_attempts, json[QString("failedVerificationAttempts")]);
    m_failed_verification_attempts_isSet = !json[QString("failedVerificationAttempts")].isNull() && m_failed_verification_attempts_isValid;

    m_from_number_pool_isValid = ::OpenAPI::fromJsonValue(m_from_number_pool, json[QString("fromNumberPool")]);
    m_from_number_pool_isSet = !json[QString("fromNumberPool")].isNull() && m_from_number_pool_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_industry_isValid = ::OpenAPI::fromJsonValue(m_industry, json[QString("industry")]);
    m_industry_isSet = !json[QString("industry")].isNull() && m_industry_isValid;

    m_industry_name_isValid = ::OpenAPI::fromJsonValue(m_industry_name, json[QString("industryName")]);
    m_industry_name_isSet = !json[QString("industryName")].isNull() && m_industry_name_isValid;

    m_key_isValid = ::OpenAPI::fromJsonValue(m_key, json[QString("key")]);
    m_key_isSet = !json[QString("key")].isNull() && m_key_isValid;

    m_local_time_zone_restriction_isValid = ::OpenAPI::fromJsonValue(m_local_time_zone_restriction, json[QString("localTimeZoneRestriction")]);
    m_local_time_zone_restriction_isSet = !json[QString("localTimeZoneRestriction")].isNull() && m_local_time_zone_restriction_isValid;

    m_locale_isValid = ::OpenAPI::fromJsonValue(m_locale, json[QString("locale")]);
    m_locale_isSet = !json[QString("locale")].isNull() && m_locale_isValid;

    m_max_agents_isValid = ::OpenAPI::fromJsonValue(m_max_agents, json[QString("maxAgents")]);
    m_max_agents_isSet = !json[QString("maxAgents")].isNull() && m_max_agents_isValid;

    m_message_class_isValid = ::OpenAPI::fromJsonValue(m_message_class, json[QString("messageClass")]);
    m_message_class_isSet = !json[QString("messageClass")].isNull() && m_message_class_isValid;

    m_message_flows_isValid = ::OpenAPI::fromJsonValue(m_message_flows, json[QString("messageFlows")]);
    m_message_flows_isSet = !json[QString("messageFlows")].isNull() && m_message_flows_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_outbound_threshold_isValid = ::OpenAPI::fromJsonValue(m_outbound_threshold, json[QString("outboundThreshold")]);
    m_outbound_threshold_isSet = !json[QString("outboundThreshold")].isNull() && m_outbound_threshold_isValid;

    m_receiver_period_call_isValid = ::OpenAPI::fromJsonValue(m_receiver_period_call, json[QString("receiverPeriodCall")]);
    m_receiver_period_call_isSet = !json[QString("receiverPeriodCall")].isNull() && m_receiver_period_call_isValid;

    m_receiver_period_enabled_isValid = ::OpenAPI::fromJsonValue(m_receiver_period_enabled, json[QString("receiverPeriodEnabled")]);
    m_receiver_period_enabled_isSet = !json[QString("receiverPeriodEnabled")].isNull() && m_receiver_period_enabled_isValid;

    m_receiver_period_global_isValid = ::OpenAPI::fromJsonValue(m_receiver_period_global, json[QString("receiverPeriodGlobal")]);
    m_receiver_period_global_isSet = !json[QString("receiverPeriodGlobal")].isNull() && m_receiver_period_global_isValid;

    m_receiver_period_text_isValid = ::OpenAPI::fromJsonValue(m_receiver_period_text, json[QString("receiverPeriodText")]);
    m_receiver_period_text_isSet = !json[QString("receiverPeriodText")].isNull() && m_receiver_period_text_isValid;

    m_receiver_period_time_unit_isValid = ::OpenAPI::fromJsonValue(m_receiver_period_time_unit, json[QString("receiverPeriodTimeUnit")]);
    m_receiver_period_time_unit_isSet = !json[QString("receiverPeriodTimeUnit")].isNull() && m_receiver_period_time_unit_isValid;

    m_retain_only_metadata_isValid = ::OpenAPI::fromJsonValue(m_retain_only_metadata, json[QString("retainOnlyMetadata")]);
    m_retain_only_metadata_isSet = !json[QString("retainOnlyMetadata")].isNull() && m_retain_only_metadata_isValid;

    m_retain_only_metadata_last_detail_record_id_isValid = ::OpenAPI::fromJsonValue(m_retain_only_metadata_last_detail_record_id, json[QString("retainOnlyMetadataLastDetailRecordId")]);
    m_retain_only_metadata_last_detail_record_id_isSet = !json[QString("retainOnlyMetadataLastDetailRecordId")].isNull() && m_retain_only_metadata_last_detail_record_id_isValid;

    m_retain_only_metadata_last_modified_isValid = ::OpenAPI::fromJsonValue(m_retain_only_metadata_last_modified, json[QString("retainOnlyMetadataLastModified")]);
    m_retain_only_metadata_last_modified_isSet = !json[QString("retainOnlyMetadataLastModified")].isNull() && m_retain_only_metadata_last_modified_isValid;

    m_scrub_isValid = ::OpenAPI::fromJsonValue(m_scrub, json[QString("scrub")]);
    m_scrub_isSet = !json[QString("scrub")].isNull() && m_scrub_isValid;

    m_shared_short_code_allowed_isValid = ::OpenAPI::fromJsonValue(m_shared_short_code_allowed, json[QString("sharedShortCodeAllowed")]);
    m_shared_short_code_allowed_isSet = !json[QString("sharedShortCodeAllowed")].isNull() && m_shared_short_code_allowed_isValid;

    m_shared_short_code_id_isValid = ::OpenAPI::fromJsonValue(m_shared_short_code_id, json[QString("sharedShortCodeId")]);
    m_shared_short_code_id_isSet = !json[QString("sharedShortCodeId")].isNull() && m_shared_short_code_id_isValid;

    m_soa_account_isValid = ::OpenAPI::fromJsonValue(m_soa_account, json[QString("soaAccount")]);
    m_soa_account_isSet = !json[QString("soaAccount")].isNull() && m_soa_account_isValid;

    m_start_capable_isValid = ::OpenAPI::fromJsonValue(m_start_capable, json[QString("startCapable")]);
    m_start_capable_isSet = !json[QString("startCapable")].isNull() && m_start_capable_isValid;

    m_state_isValid = ::OpenAPI::fromJsonValue(m_state, json[QString("state")]);
    m_state_isSet = !json[QString("state")].isNull() && m_state_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("status")]);
    m_status_isSet = !json[QString("status")].isNull() && m_status_isValid;

    m_text_outbound_threshold_isValid = ::OpenAPI::fromJsonValue(m_text_outbound_threshold, json[QString("textOutboundThreshold")]);
    m_text_outbound_threshold_isSet = !json[QString("textOutboundThreshold")].isNull() && m_text_outbound_threshold_isValid;

    m_time_zone_isValid = ::OpenAPI::fromJsonValue(m_time_zone, json[QString("timeZone")]);
    m_time_zone_isSet = !json[QString("timeZone")].isNull() && m_time_zone_isValid;

    m_time_zone_id_isValid = ::OpenAPI::fromJsonValue(m_time_zone_id, json[QString("timeZoneId")]);
    m_time_zone_id_isSet = !json[QString("timeZoneId")].isNull() && m_time_zone_id_isValid;

    m_trust_level_isValid = ::OpenAPI::fromJsonValue(m_trust_level, json[QString("trustLevel")]);
    m_trust_level_isSet = !json[QString("trustLevel")].isNull() && m_trust_level_isValid;

    m_tsr_agreement_isValid = ::OpenAPI::fromJsonValue(m_tsr_agreement, json[QString("tsrAgreement")]);
    m_tsr_agreement_isSet = !json[QString("tsrAgreement")].isNull() && m_tsr_agreement_isValid;

    m_tsr_initials_isValid = ::OpenAPI::fromJsonValue(m_tsr_initials, json[QString("tsrInitials")]);
    m_tsr_initials_isSet = !json[QString("tsrInitials")].isNull() && m_tsr_initials_isValid;

    m_ui_context_isValid = ::OpenAPI::fromJsonValue(m_ui_context, json[QString("uiContext")]);
    m_ui_context_isSet = !json[QString("uiContext")].isNull() && m_ui_context_isValid;

    m_universal_isValid = ::OpenAPI::fromJsonValue(m_universal, json[QString("universal")]);
    m_universal_isSet = !json[QString("universal")].isNull() && m_universal_isValid;

    m_website_isValid = ::OpenAPI::fromJsonValue(m_website, json[QString("website")]);
    m_website_isSet = !json[QString("website")].isNull() && m_website_isValid;

    m_zipcode_isValid = ::OpenAPI::fromJsonValue(m_zipcode, json[QString("zipcode")]);
    m_zipcode_isSet = !json[QString("zipcode")].isNull() && m_zipcode_isValid;
}

QString OAIAccount::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAccount::asJsonObject() const {
    QJsonObject obj;
    if (m_active_isSet) {
        obj.insert(QString("active"), ::OpenAPI::toJsonValue(m_active));
    }
    if (m_address_isSet) {
        obj.insert(QString("address"), ::OpenAPI::toJsonValue(m_address));
    }
    if (m_age.isSet()) {
        obj.insert(QString("age"), ::OpenAPI::toJsonValue(m_age));
    }
    if (m_agency_managed_accounts_isSet) {
        obj.insert(QString("agencyManagedAccounts"), ::OpenAPI::toJsonValue(m_agency_managed_accounts));
    }
    if (m_allowed_to_create_campaign_isSet) {
        obj.insert(QString("allowedToCreateCampaign"), ::OpenAPI::toJsonValue(m_allowed_to_create_campaign));
    }
    if (m_api_call_limit_isSet) {
        obj.insert(QString("apiCallLimit"), ::OpenAPI::toJsonValue(m_api_call_limit));
    }
    if (m_archived_isSet) {
        obj.insert(QString("archived"), ::OpenAPI::toJsonValue(m_archived));
    }
    if (m_auto_add_do_not_contact_isSet) {
        obj.insert(QString("autoAddDoNotContact"), ::OpenAPI::toJsonValue(m_auto_add_do_not_contact));
    }
    if (m_brand_isSet) {
        obj.insert(QString("brand"), ::OpenAPI::toJsonValue(m_brand));
    }
    if (m_canceled_isSet) {
        obj.insert(QString("canceled"), ::OpenAPI::toJsonValue(m_canceled));
    }
    if (m_canceled_or_archived_isSet) {
        obj.insert(QString("canceledOrArchived"), ::OpenAPI::toJsonValue(m_canceled_or_archived));
    }
    if (m_city_isSet) {
        obj.insert(QString("city"), ::OpenAPI::toJsonValue(m_city));
    }
    if (m_company_name_isSet) {
        obj.insert(QString("companyName"), ::OpenAPI::toJsonValue(m_company_name));
    }
    if (m_country_isSet) {
        obj.insert(QString("country"), ::OpenAPI::toJsonValue(m_country));
    }
    if (m_country_or_default_isSet) {
        obj.insert(QString("countryOrDefault"), ::OpenAPI::toJsonValue(m_country_or_default));
    }
    if (m_created_isSet) {
        obj.insert(QString("created"), ::OpenAPI::toJsonValue(m_created));
    }
    if (m_date_time_zone.isSet()) {
        obj.insert(QString("dateTimeZone"), ::OpenAPI::toJsonValue(m_date_time_zone));
    }
    if (m_default_notification_ttl_millis_isSet) {
        obj.insert(QString("defaultNotificationTtlMillis"), ::OpenAPI::toJsonValue(m_default_notification_ttl_millis));
    }
    if (m_default_number_id_isSet) {
        obj.insert(QString("defaultNumberId"), ::OpenAPI::toJsonValue(m_default_number_id));
    }
    if (m_ein_isSet) {
        obj.insert(QString("ein"), ::OpenAPI::toJsonValue(m_ein));
    }
    if (m_entity_type_isSet) {
        obj.insert(QString("entityType"), ::OpenAPI::toJsonValue(m_entity_type));
    }
    if (m_ez_isSet) {
        obj.insert(QString("ez"), ::OpenAPI::toJsonValue(m_ez));
    }
    if (m_failed_verification_attempts_isSet) {
        obj.insert(QString("failedVerificationAttempts"), ::OpenAPI::toJsonValue(m_failed_verification_attempts));
    }
    if (m_from_number_pool_isSet) {
        obj.insert(QString("fromNumberPool"), ::OpenAPI::toJsonValue(m_from_number_pool));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_industry_isSet) {
        obj.insert(QString("industry"), ::OpenAPI::toJsonValue(m_industry));
    }
    if (m_industry_name_isSet) {
        obj.insert(QString("industryName"), ::OpenAPI::toJsonValue(m_industry_name));
    }
    if (m_key_isSet) {
        obj.insert(QString("key"), ::OpenAPI::toJsonValue(m_key));
    }
    if (m_local_time_zone_restriction.isSet()) {
        obj.insert(QString("localTimeZoneRestriction"), ::OpenAPI::toJsonValue(m_local_time_zone_restriction));
    }
    if (m_locale.isSet()) {
        obj.insert(QString("locale"), ::OpenAPI::toJsonValue(m_locale));
    }
    if (m_max_agents_isSet) {
        obj.insert(QString("maxAgents"), ::OpenAPI::toJsonValue(m_max_agents));
    }
    if (m_message_class_isSet) {
        obj.insert(QString("messageClass"), ::OpenAPI::toJsonValue(m_message_class));
    }
    if (m_message_flows.size() > 0) {
        obj.insert(QString("messageFlows"), ::OpenAPI::toJsonValue(m_message_flows));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_outbound_threshold_isSet) {
        obj.insert(QString("outboundThreshold"), ::OpenAPI::toJsonValue(m_outbound_threshold));
    }
    if (m_receiver_period_call_isSet) {
        obj.insert(QString("receiverPeriodCall"), ::OpenAPI::toJsonValue(m_receiver_period_call));
    }
    if (m_receiver_period_enabled_isSet) {
        obj.insert(QString("receiverPeriodEnabled"), ::OpenAPI::toJsonValue(m_receiver_period_enabled));
    }
    if (m_receiver_period_global_isSet) {
        obj.insert(QString("receiverPeriodGlobal"), ::OpenAPI::toJsonValue(m_receiver_period_global));
    }
    if (m_receiver_period_text_isSet) {
        obj.insert(QString("receiverPeriodText"), ::OpenAPI::toJsonValue(m_receiver_period_text));
    }
    if (m_receiver_period_time_unit_isSet) {
        obj.insert(QString("receiverPeriodTimeUnit"), ::OpenAPI::toJsonValue(m_receiver_period_time_unit));
    }
    if (m_retain_only_metadata_isSet) {
        obj.insert(QString("retainOnlyMetadata"), ::OpenAPI::toJsonValue(m_retain_only_metadata));
    }
    if (m_retain_only_metadata_last_detail_record_id_isSet) {
        obj.insert(QString("retainOnlyMetadataLastDetailRecordId"), ::OpenAPI::toJsonValue(m_retain_only_metadata_last_detail_record_id));
    }
    if (m_retain_only_metadata_last_modified_isSet) {
        obj.insert(QString("retainOnlyMetadataLastModified"), ::OpenAPI::toJsonValue(m_retain_only_metadata_last_modified));
    }
    if (m_scrub_isSet) {
        obj.insert(QString("scrub"), ::OpenAPI::toJsonValue(m_scrub));
    }
    if (m_shared_short_code_allowed_isSet) {
        obj.insert(QString("sharedShortCodeAllowed"), ::OpenAPI::toJsonValue(m_shared_short_code_allowed));
    }
    if (m_shared_short_code_id_isSet) {
        obj.insert(QString("sharedShortCodeId"), ::OpenAPI::toJsonValue(m_shared_short_code_id));
    }
    if (m_soa_account.isSet()) {
        obj.insert(QString("soaAccount"), ::OpenAPI::toJsonValue(m_soa_account));
    }
    if (m_start_capable_isSet) {
        obj.insert(QString("startCapable"), ::OpenAPI::toJsonValue(m_start_capable));
    }
    if (m_state_isSet) {
        obj.insert(QString("state"), ::OpenAPI::toJsonValue(m_state));
    }
    if (m_status_isSet) {
        obj.insert(QString("status"), ::OpenAPI::toJsonValue(m_status));
    }
    if (m_text_outbound_threshold_isSet) {
        obj.insert(QString("textOutboundThreshold"), ::OpenAPI::toJsonValue(m_text_outbound_threshold));
    }
    if (m_time_zone.isSet()) {
        obj.insert(QString("timeZone"), ::OpenAPI::toJsonValue(m_time_zone));
    }
    if (m_time_zone_id.isSet()) {
        obj.insert(QString("timeZoneId"), ::OpenAPI::toJsonValue(m_time_zone_id));
    }
    if (m_trust_level_isSet) {
        obj.insert(QString("trustLevel"), ::OpenAPI::toJsonValue(m_trust_level));
    }
    if (m_tsr_agreement_isSet) {
        obj.insert(QString("tsrAgreement"), ::OpenAPI::toJsonValue(m_tsr_agreement));
    }
    if (m_tsr_initials_isSet) {
        obj.insert(QString("tsrInitials"), ::OpenAPI::toJsonValue(m_tsr_initials));
    }
    if (m_ui_context_isSet) {
        obj.insert(QString("uiContext"), ::OpenAPI::toJsonValue(m_ui_context));
    }
    if (m_universal_isSet) {
        obj.insert(QString("universal"), ::OpenAPI::toJsonValue(m_universal));
    }
    if (m_website_isSet) {
        obj.insert(QString("website"), ::OpenAPI::toJsonValue(m_website));
    }
    if (m_zipcode_isSet) {
        obj.insert(QString("zipcode"), ::OpenAPI::toJsonValue(m_zipcode));
    }
    return obj;
}

bool OAIAccount::isActive() const {
    return m_active;
}
void OAIAccount::setActive(const bool &active) {
    m_active = active;
    m_active_isSet = true;
}

bool OAIAccount::is_active_Set() const{
    return m_active_isSet;
}

bool OAIAccount::is_active_Valid() const{
    return m_active_isValid;
}

QString OAIAccount::getAddress() const {
    return m_address;
}
void OAIAccount::setAddress(const QString &address) {
    m_address = address;
    m_address_isSet = true;
}

bool OAIAccount::is_address_Set() const{
    return m_address_isSet;
}

bool OAIAccount::is_address_Valid() const{
    return m_address_isValid;
}

OAIDuration OAIAccount::getAge() const {
    return m_age;
}
void OAIAccount::setAge(const OAIDuration &age) {
    m_age = age;
    m_age_isSet = true;
}

bool OAIAccount::is_age_Set() const{
    return m_age_isSet;
}

bool OAIAccount::is_age_Valid() const{
    return m_age_isValid;
}

bool OAIAccount::isAgencyManagedAccounts() const {
    return m_agency_managed_accounts;
}
void OAIAccount::setAgencyManagedAccounts(const bool &agency_managed_accounts) {
    m_agency_managed_accounts = agency_managed_accounts;
    m_agency_managed_accounts_isSet = true;
}

bool OAIAccount::is_agency_managed_accounts_Set() const{
    return m_agency_managed_accounts_isSet;
}

bool OAIAccount::is_agency_managed_accounts_Valid() const{
    return m_agency_managed_accounts_isValid;
}

bool OAIAccount::isAllowedToCreateCampaign() const {
    return m_allowed_to_create_campaign;
}
void OAIAccount::setAllowedToCreateCampaign(const bool &allowed_to_create_campaign) {
    m_allowed_to_create_campaign = allowed_to_create_campaign;
    m_allowed_to_create_campaign_isSet = true;
}

bool OAIAccount::is_allowed_to_create_campaign_Set() const{
    return m_allowed_to_create_campaign_isSet;
}

bool OAIAccount::is_allowed_to_create_campaign_Valid() const{
    return m_allowed_to_create_campaign_isValid;
}

qint32 OAIAccount::getApiCallLimit() const {
    return m_api_call_limit;
}
void OAIAccount::setApiCallLimit(const qint32 &api_call_limit) {
    m_api_call_limit = api_call_limit;
    m_api_call_limit_isSet = true;
}

bool OAIAccount::is_api_call_limit_Set() const{
    return m_api_call_limit_isSet;
}

bool OAIAccount::is_api_call_limit_Valid() const{
    return m_api_call_limit_isValid;
}

bool OAIAccount::isArchived() const {
    return m_archived;
}
void OAIAccount::setArchived(const bool &archived) {
    m_archived = archived;
    m_archived_isSet = true;
}

bool OAIAccount::is_archived_Set() const{
    return m_archived_isSet;
}

bool OAIAccount::is_archived_Valid() const{
    return m_archived_isValid;
}

bool OAIAccount::isAutoAddDoNotContact() const {
    return m_auto_add_do_not_contact;
}
void OAIAccount::setAutoAddDoNotContact(const bool &auto_add_do_not_contact) {
    m_auto_add_do_not_contact = auto_add_do_not_contact;
    m_auto_add_do_not_contact_isSet = true;
}

bool OAIAccount::is_auto_add_do_not_contact_Set() const{
    return m_auto_add_do_not_contact_isSet;
}

bool OAIAccount::is_auto_add_do_not_contact_Valid() const{
    return m_auto_add_do_not_contact_isValid;
}

QString OAIAccount::getBrand() const {
    return m_brand;
}
void OAIAccount::setBrand(const QString &brand) {
    m_brand = brand;
    m_brand_isSet = true;
}

bool OAIAccount::is_brand_Set() const{
    return m_brand_isSet;
}

bool OAIAccount::is_brand_Valid() const{
    return m_brand_isValid;
}

bool OAIAccount::isCanceled() const {
    return m_canceled;
}
void OAIAccount::setCanceled(const bool &canceled) {
    m_canceled = canceled;
    m_canceled_isSet = true;
}

bool OAIAccount::is_canceled_Set() const{
    return m_canceled_isSet;
}

bool OAIAccount::is_canceled_Valid() const{
    return m_canceled_isValid;
}

bool OAIAccount::isCanceledOrArchived() const {
    return m_canceled_or_archived;
}
void OAIAccount::setCanceledOrArchived(const bool &canceled_or_archived) {
    m_canceled_or_archived = canceled_or_archived;
    m_canceled_or_archived_isSet = true;
}

bool OAIAccount::is_canceled_or_archived_Set() const{
    return m_canceled_or_archived_isSet;
}

bool OAIAccount::is_canceled_or_archived_Valid() const{
    return m_canceled_or_archived_isValid;
}

QString OAIAccount::getCity() const {
    return m_city;
}
void OAIAccount::setCity(const QString &city) {
    m_city = city;
    m_city_isSet = true;
}

bool OAIAccount::is_city_Set() const{
    return m_city_isSet;
}

bool OAIAccount::is_city_Valid() const{
    return m_city_isValid;
}

QString OAIAccount::getCompanyName() const {
    return m_company_name;
}
void OAIAccount::setCompanyName(const QString &company_name) {
    m_company_name = company_name;
    m_company_name_isSet = true;
}

bool OAIAccount::is_company_name_Set() const{
    return m_company_name_isSet;
}

bool OAIAccount::is_company_name_Valid() const{
    return m_company_name_isValid;
}

QString OAIAccount::getCountry() const {
    return m_country;
}
void OAIAccount::setCountry(const QString &country) {
    m_country = country;
    m_country_isSet = true;
}

bool OAIAccount::is_country_Set() const{
    return m_country_isSet;
}

bool OAIAccount::is_country_Valid() const{
    return m_country_isValid;
}

QString OAIAccount::getCountryOrDefault() const {
    return m_country_or_default;
}
void OAIAccount::setCountryOrDefault(const QString &country_or_default) {
    m_country_or_default = country_or_default;
    m_country_or_default_isSet = true;
}

bool OAIAccount::is_country_or_default_Set() const{
    return m_country_or_default_isSet;
}

bool OAIAccount::is_country_or_default_Valid() const{
    return m_country_or_default_isValid;
}

QDateTime OAIAccount::getCreated() const {
    return m_created;
}
void OAIAccount::setCreated(const QDateTime &created) {
    m_created = created;
    m_created_isSet = true;
}

bool OAIAccount::is_created_Set() const{
    return m_created_isSet;
}

bool OAIAccount::is_created_Valid() const{
    return m_created_isValid;
}

OAIDateTimeZone OAIAccount::getDateTimeZone() const {
    return m_date_time_zone;
}
void OAIAccount::setDateTimeZone(const OAIDateTimeZone &date_time_zone) {
    m_date_time_zone = date_time_zone;
    m_date_time_zone_isSet = true;
}

bool OAIAccount::is_date_time_zone_Set() const{
    return m_date_time_zone_isSet;
}

bool OAIAccount::is_date_time_zone_Valid() const{
    return m_date_time_zone_isValid;
}

qint64 OAIAccount::getDefaultNotificationTtlMillis() const {
    return m_default_notification_ttl_millis;
}
void OAIAccount::setDefaultNotificationTtlMillis(const qint64 &default_notification_ttl_millis) {
    m_default_notification_ttl_millis = default_notification_ttl_millis;
    m_default_notification_ttl_millis_isSet = true;
}

bool OAIAccount::is_default_notification_ttl_millis_Set() const{
    return m_default_notification_ttl_millis_isSet;
}

bool OAIAccount::is_default_notification_ttl_millis_Valid() const{
    return m_default_notification_ttl_millis_isValid;
}

qint64 OAIAccount::getDefaultNumberId() const {
    return m_default_number_id;
}
void OAIAccount::setDefaultNumberId(const qint64 &default_number_id) {
    m_default_number_id = default_number_id;
    m_default_number_id_isSet = true;
}

bool OAIAccount::is_default_number_id_Set() const{
    return m_default_number_id_isSet;
}

bool OAIAccount::is_default_number_id_Valid() const{
    return m_default_number_id_isValid;
}

QString OAIAccount::getEin() const {
    return m_ein;
}
void OAIAccount::setEin(const QString &ein) {
    m_ein = ein;
    m_ein_isSet = true;
}

bool OAIAccount::is_ein_Set() const{
    return m_ein_isSet;
}

bool OAIAccount::is_ein_Valid() const{
    return m_ein_isValid;
}

QString OAIAccount::getEntityType() const {
    return m_entity_type;
}
void OAIAccount::setEntityType(const QString &entity_type) {
    m_entity_type = entity_type;
    m_entity_type_isSet = true;
}

bool OAIAccount::is_entity_type_Set() const{
    return m_entity_type_isSet;
}

bool OAIAccount::is_entity_type_Valid() const{
    return m_entity_type_isValid;
}

bool OAIAccount::isEz() const {
    return m_ez;
}
void OAIAccount::setEz(const bool &ez) {
    m_ez = ez;
    m_ez_isSet = true;
}

bool OAIAccount::is_ez_Set() const{
    return m_ez_isSet;
}

bool OAIAccount::is_ez_Valid() const{
    return m_ez_isValid;
}

qint32 OAIAccount::getFailedVerificationAttempts() const {
    return m_failed_verification_attempts;
}
void OAIAccount::setFailedVerificationAttempts(const qint32 &failed_verification_attempts) {
    m_failed_verification_attempts = failed_verification_attempts;
    m_failed_verification_attempts_isSet = true;
}

bool OAIAccount::is_failed_verification_attempts_Set() const{
    return m_failed_verification_attempts_isSet;
}

bool OAIAccount::is_failed_verification_attempts_Valid() const{
    return m_failed_verification_attempts_isValid;
}

QString OAIAccount::getFromNumberPool() const {
    return m_from_number_pool;
}
void OAIAccount::setFromNumberPool(const QString &from_number_pool) {
    m_from_number_pool = from_number_pool;
    m_from_number_pool_isSet = true;
}

bool OAIAccount::is_from_number_pool_Set() const{
    return m_from_number_pool_isSet;
}

bool OAIAccount::is_from_number_pool_Valid() const{
    return m_from_number_pool_isValid;
}

qint64 OAIAccount::getId() const {
    return m_id;
}
void OAIAccount::setId(const qint64 &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIAccount::is_id_Set() const{
    return m_id_isSet;
}

bool OAIAccount::is_id_Valid() const{
    return m_id_isValid;
}

QString OAIAccount::getIndustry() const {
    return m_industry;
}
void OAIAccount::setIndustry(const QString &industry) {
    m_industry = industry;
    m_industry_isSet = true;
}

bool OAIAccount::is_industry_Set() const{
    return m_industry_isSet;
}

bool OAIAccount::is_industry_Valid() const{
    return m_industry_isValid;
}

QString OAIAccount::getIndustryName() const {
    return m_industry_name;
}
void OAIAccount::setIndustryName(const QString &industry_name) {
    m_industry_name = industry_name;
    m_industry_name_isSet = true;
}

bool OAIAccount::is_industry_name_Set() const{
    return m_industry_name_isSet;
}

bool OAIAccount::is_industry_name_Valid() const{
    return m_industry_name_isValid;
}

QString OAIAccount::getKey() const {
    return m_key;
}
void OAIAccount::setKey(const QString &key) {
    m_key = key;
    m_key_isSet = true;
}

bool OAIAccount::is_key_Set() const{
    return m_key_isSet;
}

bool OAIAccount::is_key_Valid() const{
    return m_key_isValid;
}

OAILocalTimeZoneRestriction OAIAccount::getLocalTimeZoneRestriction() const {
    return m_local_time_zone_restriction;
}
void OAIAccount::setLocalTimeZoneRestriction(const OAILocalTimeZoneRestriction &local_time_zone_restriction) {
    m_local_time_zone_restriction = local_time_zone_restriction;
    m_local_time_zone_restriction_isSet = true;
}

bool OAIAccount::is_local_time_zone_restriction_Set() const{
    return m_local_time_zone_restriction_isSet;
}

bool OAIAccount::is_local_time_zone_restriction_Valid() const{
    return m_local_time_zone_restriction_isValid;
}

OAILocale OAIAccount::getLocale() const {
    return m_locale;
}
void OAIAccount::setLocale(const OAILocale &locale) {
    m_locale = locale;
    m_locale_isSet = true;
}

bool OAIAccount::is_locale_Set() const{
    return m_locale_isSet;
}

bool OAIAccount::is_locale_Valid() const{
    return m_locale_isValid;
}

qint32 OAIAccount::getMaxAgents() const {
    return m_max_agents;
}
void OAIAccount::setMaxAgents(const qint32 &max_agents) {
    m_max_agents = max_agents;
    m_max_agents_isSet = true;
}

bool OAIAccount::is_max_agents_Set() const{
    return m_max_agents_isSet;
}

bool OAIAccount::is_max_agents_Valid() const{
    return m_max_agents_isValid;
}

QString OAIAccount::getMessageClass() const {
    return m_message_class;
}
void OAIAccount::setMessageClass(const QString &message_class) {
    m_message_class = message_class;
    m_message_class_isSet = true;
}

bool OAIAccount::is_message_class_Set() const{
    return m_message_class_isSet;
}

bool OAIAccount::is_message_class_Valid() const{
    return m_message_class_isValid;
}

QSet<QString> OAIAccount::getMessageFlows() const {
    return m_message_flows;
}
void OAIAccount::setMessageFlows(const QSet<QString> &message_flows) {
    m_message_flows = message_flows;
    m_message_flows_isSet = true;
}

bool OAIAccount::is_message_flows_Set() const{
    return m_message_flows_isSet;
}

bool OAIAccount::is_message_flows_Valid() const{
    return m_message_flows_isValid;
}

QString OAIAccount::getName() const {
    return m_name;
}
void OAIAccount::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIAccount::is_name_Set() const{
    return m_name_isSet;
}

bool OAIAccount::is_name_Valid() const{
    return m_name_isValid;
}

qint32 OAIAccount::getOutboundThreshold() const {
    return m_outbound_threshold;
}
void OAIAccount::setOutboundThreshold(const qint32 &outbound_threshold) {
    m_outbound_threshold = outbound_threshold;
    m_outbound_threshold_isSet = true;
}

bool OAIAccount::is_outbound_threshold_Set() const{
    return m_outbound_threshold_isSet;
}

bool OAIAccount::is_outbound_threshold_Valid() const{
    return m_outbound_threshold_isValid;
}

qint32 OAIAccount::getReceiverPeriodCall() const {
    return m_receiver_period_call;
}
void OAIAccount::setReceiverPeriodCall(const qint32 &receiver_period_call) {
    m_receiver_period_call = receiver_period_call;
    m_receiver_period_call_isSet = true;
}

bool OAIAccount::is_receiver_period_call_Set() const{
    return m_receiver_period_call_isSet;
}

bool OAIAccount::is_receiver_period_call_Valid() const{
    return m_receiver_period_call_isValid;
}

bool OAIAccount::isReceiverPeriodEnabled() const {
    return m_receiver_period_enabled;
}
void OAIAccount::setReceiverPeriodEnabled(const bool &receiver_period_enabled) {
    m_receiver_period_enabled = receiver_period_enabled;
    m_receiver_period_enabled_isSet = true;
}

bool OAIAccount::is_receiver_period_enabled_Set() const{
    return m_receiver_period_enabled_isSet;
}

bool OAIAccount::is_receiver_period_enabled_Valid() const{
    return m_receiver_period_enabled_isValid;
}

qint32 OAIAccount::getReceiverPeriodGlobal() const {
    return m_receiver_period_global;
}
void OAIAccount::setReceiverPeriodGlobal(const qint32 &receiver_period_global) {
    m_receiver_period_global = receiver_period_global;
    m_receiver_period_global_isSet = true;
}

bool OAIAccount::is_receiver_period_global_Set() const{
    return m_receiver_period_global_isSet;
}

bool OAIAccount::is_receiver_period_global_Valid() const{
    return m_receiver_period_global_isValid;
}

qint32 OAIAccount::getReceiverPeriodText() const {
    return m_receiver_period_text;
}
void OAIAccount::setReceiverPeriodText(const qint32 &receiver_period_text) {
    m_receiver_period_text = receiver_period_text;
    m_receiver_period_text_isSet = true;
}

bool OAIAccount::is_receiver_period_text_Set() const{
    return m_receiver_period_text_isSet;
}

bool OAIAccount::is_receiver_period_text_Valid() const{
    return m_receiver_period_text_isValid;
}

QString OAIAccount::getReceiverPeriodTimeUnit() const {
    return m_receiver_period_time_unit;
}
void OAIAccount::setReceiverPeriodTimeUnit(const QString &receiver_period_time_unit) {
    m_receiver_period_time_unit = receiver_period_time_unit;
    m_receiver_period_time_unit_isSet = true;
}

bool OAIAccount::is_receiver_period_time_unit_Set() const{
    return m_receiver_period_time_unit_isSet;
}

bool OAIAccount::is_receiver_period_time_unit_Valid() const{
    return m_receiver_period_time_unit_isValid;
}

bool OAIAccount::isRetainOnlyMetadata() const {
    return m_retain_only_metadata;
}
void OAIAccount::setRetainOnlyMetadata(const bool &retain_only_metadata) {
    m_retain_only_metadata = retain_only_metadata;
    m_retain_only_metadata_isSet = true;
}

bool OAIAccount::is_retain_only_metadata_Set() const{
    return m_retain_only_metadata_isSet;
}

bool OAIAccount::is_retain_only_metadata_Valid() const{
    return m_retain_only_metadata_isValid;
}

qint64 OAIAccount::getRetainOnlyMetadataLastDetailRecordId() const {
    return m_retain_only_metadata_last_detail_record_id;
}
void OAIAccount::setRetainOnlyMetadataLastDetailRecordId(const qint64 &retain_only_metadata_last_detail_record_id) {
    m_retain_only_metadata_last_detail_record_id = retain_only_metadata_last_detail_record_id;
    m_retain_only_metadata_last_detail_record_id_isSet = true;
}

bool OAIAccount::is_retain_only_metadata_last_detail_record_id_Set() const{
    return m_retain_only_metadata_last_detail_record_id_isSet;
}

bool OAIAccount::is_retain_only_metadata_last_detail_record_id_Valid() const{
    return m_retain_only_metadata_last_detail_record_id_isValid;
}

QDateTime OAIAccount::getRetainOnlyMetadataLastModified() const {
    return m_retain_only_metadata_last_modified;
}
void OAIAccount::setRetainOnlyMetadataLastModified(const QDateTime &retain_only_metadata_last_modified) {
    m_retain_only_metadata_last_modified = retain_only_metadata_last_modified;
    m_retain_only_metadata_last_modified_isSet = true;
}

bool OAIAccount::is_retain_only_metadata_last_modified_Set() const{
    return m_retain_only_metadata_last_modified_isSet;
}

bool OAIAccount::is_retain_only_metadata_last_modified_Valid() const{
    return m_retain_only_metadata_last_modified_isValid;
}

bool OAIAccount::isScrub() const {
    return m_scrub;
}
void OAIAccount::setScrub(const bool &scrub) {
    m_scrub = scrub;
    m_scrub_isSet = true;
}

bool OAIAccount::is_scrub_Set() const{
    return m_scrub_isSet;
}

bool OAIAccount::is_scrub_Valid() const{
    return m_scrub_isValid;
}

bool OAIAccount::isSharedShortCodeAllowed() const {
    return m_shared_short_code_allowed;
}
void OAIAccount::setSharedShortCodeAllowed(const bool &shared_short_code_allowed) {
    m_shared_short_code_allowed = shared_short_code_allowed;
    m_shared_short_code_allowed_isSet = true;
}

bool OAIAccount::is_shared_short_code_allowed_Set() const{
    return m_shared_short_code_allowed_isSet;
}

bool OAIAccount::is_shared_short_code_allowed_Valid() const{
    return m_shared_short_code_allowed_isValid;
}

qint64 OAIAccount::getSharedShortCodeId() const {
    return m_shared_short_code_id;
}
void OAIAccount::setSharedShortCodeId(const qint64 &shared_short_code_id) {
    m_shared_short_code_id = shared_short_code_id;
    m_shared_short_code_id_isSet = true;
}

bool OAIAccount::is_shared_short_code_id_Set() const{
    return m_shared_short_code_id_isSet;
}

bool OAIAccount::is_shared_short_code_id_Valid() const{
    return m_shared_short_code_id_isValid;
}

OAIAccount OAIAccount::getSoaAccount() const {
    return m_soa_account;
}
void OAIAccount::setSoaAccount(const OAIAccount &soa_account) {
    m_soa_account = soa_account;
    m_soa_account_isSet = true;
}

bool OAIAccount::is_soa_account_Set() const{
    return m_soa_account_isSet;
}

bool OAIAccount::is_soa_account_Valid() const{
    return m_soa_account_isValid;
}

bool OAIAccount::isStartCapable() const {
    return m_start_capable;
}
void OAIAccount::setStartCapable(const bool &start_capable) {
    m_start_capable = start_capable;
    m_start_capable_isSet = true;
}

bool OAIAccount::is_start_capable_Set() const{
    return m_start_capable_isSet;
}

bool OAIAccount::is_start_capable_Valid() const{
    return m_start_capable_isValid;
}

QString OAIAccount::getState() const {
    return m_state;
}
void OAIAccount::setState(const QString &state) {
    m_state = state;
    m_state_isSet = true;
}

bool OAIAccount::is_state_Set() const{
    return m_state_isSet;
}

bool OAIAccount::is_state_Valid() const{
    return m_state_isValid;
}

QString OAIAccount::getStatus() const {
    return m_status;
}
void OAIAccount::setStatus(const QString &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAIAccount::is_status_Set() const{
    return m_status_isSet;
}

bool OAIAccount::is_status_Valid() const{
    return m_status_isValid;
}

qint32 OAIAccount::getTextOutboundThreshold() const {
    return m_text_outbound_threshold;
}
void OAIAccount::setTextOutboundThreshold(const qint32 &text_outbound_threshold) {
    m_text_outbound_threshold = text_outbound_threshold;
    m_text_outbound_threshold_isSet = true;
}

bool OAIAccount::is_text_outbound_threshold_Set() const{
    return m_text_outbound_threshold_isSet;
}

bool OAIAccount::is_text_outbound_threshold_Valid() const{
    return m_text_outbound_threshold_isValid;
}

OAITimeZone OAIAccount::getTimeZone() const {
    return m_time_zone;
}
void OAIAccount::setTimeZone(const OAITimeZone &time_zone) {
    m_time_zone = time_zone;
    m_time_zone_isSet = true;
}

bool OAIAccount::is_time_zone_Set() const{
    return m_time_zone_isSet;
}

bool OAIAccount::is_time_zone_Valid() const{
    return m_time_zone_isValid;
}

OAIZoneId OAIAccount::getTimeZoneId() const {
    return m_time_zone_id;
}
void OAIAccount::setTimeZoneId(const OAIZoneId &time_zone_id) {
    m_time_zone_id = time_zone_id;
    m_time_zone_id_isSet = true;
}

bool OAIAccount::is_time_zone_id_Set() const{
    return m_time_zone_id_isSet;
}

bool OAIAccount::is_time_zone_id_Valid() const{
    return m_time_zone_id_isValid;
}

QString OAIAccount::getTrustLevel() const {
    return m_trust_level;
}
void OAIAccount::setTrustLevel(const QString &trust_level) {
    m_trust_level = trust_level;
    m_trust_level_isSet = true;
}

bool OAIAccount::is_trust_level_Set() const{
    return m_trust_level_isSet;
}

bool OAIAccount::is_trust_level_Valid() const{
    return m_trust_level_isValid;
}

QDateTime OAIAccount::getTsrAgreement() const {
    return m_tsr_agreement;
}
void OAIAccount::setTsrAgreement(const QDateTime &tsr_agreement) {
    m_tsr_agreement = tsr_agreement;
    m_tsr_agreement_isSet = true;
}

bool OAIAccount::is_tsr_agreement_Set() const{
    return m_tsr_agreement_isSet;
}

bool OAIAccount::is_tsr_agreement_Valid() const{
    return m_tsr_agreement_isValid;
}

QString OAIAccount::getTsrInitials() const {
    return m_tsr_initials;
}
void OAIAccount::setTsrInitials(const QString &tsr_initials) {
    m_tsr_initials = tsr_initials;
    m_tsr_initials_isSet = true;
}

bool OAIAccount::is_tsr_initials_Set() const{
    return m_tsr_initials_isSet;
}

bool OAIAccount::is_tsr_initials_Valid() const{
    return m_tsr_initials_isValid;
}

QString OAIAccount::getUiContext() const {
    return m_ui_context;
}
void OAIAccount::setUiContext(const QString &ui_context) {
    m_ui_context = ui_context;
    m_ui_context_isSet = true;
}

bool OAIAccount::is_ui_context_Set() const{
    return m_ui_context_isSet;
}

bool OAIAccount::is_ui_context_Valid() const{
    return m_ui_context_isValid;
}

bool OAIAccount::isUniversal() const {
    return m_universal;
}
void OAIAccount::setUniversal(const bool &universal) {
    m_universal = universal;
    m_universal_isSet = true;
}

bool OAIAccount::is_universal_Set() const{
    return m_universal_isSet;
}

bool OAIAccount::is_universal_Valid() const{
    return m_universal_isValid;
}

QString OAIAccount::getWebsite() const {
    return m_website;
}
void OAIAccount::setWebsite(const QString &website) {
    m_website = website;
    m_website_isSet = true;
}

bool OAIAccount::is_website_Set() const{
    return m_website_isSet;
}

bool OAIAccount::is_website_Valid() const{
    return m_website_isValid;
}

QString OAIAccount::getZipcode() const {
    return m_zipcode;
}
void OAIAccount::setZipcode(const QString &zipcode) {
    m_zipcode = zipcode;
    m_zipcode_isSet = true;
}

bool OAIAccount::is_zipcode_Set() const{
    return m_zipcode_isSet;
}

bool OAIAccount::is_zipcode_Valid() const{
    return m_zipcode_isValid;
}

bool OAIAccount::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_active_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_address_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_age.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_agency_managed_accounts_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_allowed_to_create_campaign_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_api_call_limit_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_archived_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_auto_add_do_not_contact_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_brand_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_canceled_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_canceled_or_archived_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_city_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_company_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_country_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_country_or_default_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_created_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_date_time_zone.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_default_notification_ttl_millis_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_default_number_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_ein_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_entity_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_ez_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_failed_verification_attempts_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_from_number_pool_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_industry_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_industry_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_key_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_local_time_zone_restriction.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_locale.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_max_agents_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_message_class_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_message_flows.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_outbound_threshold_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_receiver_period_call_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_receiver_period_enabled_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_receiver_period_global_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_receiver_period_text_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_receiver_period_time_unit_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_retain_only_metadata_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_retain_only_metadata_last_detail_record_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_retain_only_metadata_last_modified_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_scrub_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_shared_short_code_allowed_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_shared_short_code_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_soa_account.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_start_capable_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_state_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_text_outbound_threshold_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_time_zone.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_time_zone_id.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_trust_level_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tsr_agreement_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tsr_initials_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_ui_context_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_universal_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_website_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_zipcode_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAccount::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
