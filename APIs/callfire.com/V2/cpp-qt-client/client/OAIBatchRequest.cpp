/**
 * CallFire API Documentation
 * CallFire
 *
 * The version of the OpenAPI document: V2
 * Contact: support@callfire.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIBatchRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIBatchRequest::OAIBatchRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIBatchRequest::OAIBatchRequest() {
    this->initializeModel();
}

OAIBatchRequest::~OAIBatchRequest() {}

void OAIBatchRequest::initializeModel() {

    m_contact_list_id_isSet = false;
    m_contact_list_id_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_recipients_isSet = false;
    m_recipients_isValid = false;

    m_scrub_duplicates_isSet = false;
    m_scrub_duplicates_isValid = false;
}

void OAIBatchRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIBatchRequest::fromJsonObject(QJsonObject json) {

    m_contact_list_id_isValid = ::OpenAPI::fromJsonValue(m_contact_list_id, json[QString("contactListId")]);
    m_contact_list_id_isSet = !json[QString("contactListId")].isNull() && m_contact_list_id_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_recipients_isValid = ::OpenAPI::fromJsonValue(m_recipients, json[QString("recipients")]);
    m_recipients_isSet = !json[QString("recipients")].isNull() && m_recipients_isValid;

    m_scrub_duplicates_isValid = ::OpenAPI::fromJsonValue(m_scrub_duplicates, json[QString("scrubDuplicates")]);
    m_scrub_duplicates_isSet = !json[QString("scrubDuplicates")].isNull() && m_scrub_duplicates_isValid;
}

QString OAIBatchRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIBatchRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_contact_list_id_isSet) {
        obj.insert(QString("contactListId"), ::OpenAPI::toJsonValue(m_contact_list_id));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_recipients.size() > 0) {
        obj.insert(QString("recipients"), ::OpenAPI::toJsonValue(m_recipients));
    }
    if (m_scrub_duplicates_isSet) {
        obj.insert(QString("scrubDuplicates"), ::OpenAPI::toJsonValue(m_scrub_duplicates));
    }
    return obj;
}

qint64 OAIBatchRequest::getContactListId() const {
    return m_contact_list_id;
}
void OAIBatchRequest::setContactListId(const qint64 &contact_list_id) {
    m_contact_list_id = contact_list_id;
    m_contact_list_id_isSet = true;
}

bool OAIBatchRequest::is_contact_list_id_Set() const{
    return m_contact_list_id_isSet;
}

bool OAIBatchRequest::is_contact_list_id_Valid() const{
    return m_contact_list_id_isValid;
}

QString OAIBatchRequest::getName() const {
    return m_name;
}
void OAIBatchRequest::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIBatchRequest::is_name_Set() const{
    return m_name_isSet;
}

bool OAIBatchRequest::is_name_Valid() const{
    return m_name_isValid;
}

QList<OAIRecipient> OAIBatchRequest::getRecipients() const {
    return m_recipients;
}
void OAIBatchRequest::setRecipients(const QList<OAIRecipient> &recipients) {
    m_recipients = recipients;
    m_recipients_isSet = true;
}

bool OAIBatchRequest::is_recipients_Set() const{
    return m_recipients_isSet;
}

bool OAIBatchRequest::is_recipients_Valid() const{
    return m_recipients_isValid;
}

bool OAIBatchRequest::isScrubDuplicates() const {
    return m_scrub_duplicates;
}
void OAIBatchRequest::setScrubDuplicates(const bool &scrub_duplicates) {
    m_scrub_duplicates = scrub_duplicates;
    m_scrub_duplicates_isSet = true;
}

bool OAIBatchRequest::is_scrub_duplicates_Set() const{
    return m_scrub_duplicates_isSet;
}

bool OAIBatchRequest::is_scrub_duplicates_Valid() const{
    return m_scrub_duplicates_isValid;
}

bool OAIBatchRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_contact_list_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_recipients.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_scrub_duplicates_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIBatchRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
