/**
 * CallFire API Documentation
 * CallFire
 *
 * The version of the OpenAPI document: V2
 * Contact: support@callfire.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIContactsApi_H
#define OAI_OAIContactsApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIAddContactListContactsRequest.h"
#include "OAIAddDoNotContactRequest.h"
#include "OAIContact.h"
#include "OAIContactHistory.h"
#include "OAIContactList.h"
#include "OAIContactListPage.h"
#include "OAIContactPage.h"
#include "OAICreateContactListRequest.h"
#include "OAIDoNotContact.h"
#include "OAIDoNotContactPage.h"
#include "OAIErrorResponse.h"
#include "OAIHttpFileElement.h"
#include "OAIItemListUniversalDoNotContact.h"
#include "OAIResourceId.h"
#include "OAIResourceIdList.h"
#include "OAIUpdateContactListRequest.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIContactsApi : public QObject {
    Q_OBJECT

public:
    OAIContactsApi(const int timeOut = 0);
    ~OAIContactsApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  id qint64 [required]
    * @param[in]  oai_add_contact_list_contacts_request OAIAddContactListContactsRequest [optional]
    */
    virtual void addContactListItems(const qint64 &id, const ::OpenAPI::OptionalParam<OAIAddContactListContactsRequest> &oai_add_contact_list_contacts_request = ::OpenAPI::OptionalParam<OAIAddContactListContactsRequest>());

    /**
    * @param[in]  oai_add_do_not_contact_request OAIAddDoNotContactRequest [optional]
    */
    virtual void addDoNotContacts(const ::OpenAPI::OptionalParam<OAIAddDoNotContactRequest> &oai_add_do_not_contact_request = ::OpenAPI::OptionalParam<OAIAddDoNotContactRequest>());

    /**
    * @param[in]  fields QString [optional]
    * @param[in]  oai_create_contact_list_request OAICreateContactListRequest [optional]
    */
    virtual void createContactList(const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAICreateContactListRequest> &oai_create_contact_list_request = ::OpenAPI::OptionalParam<OAICreateContactListRequest>());

    /**
    * @param[in]  file OAIHttpFileElement [required]
    * @param[in]  name QString [optional]
    * @param[in]  use_custom_fields bool [optional]
    */
    virtual void createContactListFromFile(const OAIHttpFileElement &file, const ::OpenAPI::OptionalParam<QString> &name = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &use_custom_fields = ::OpenAPI::OptionalParam<bool>());

    /**
    * @param[in]  oai_contact QList<OAIContact> [optional]
    */
    virtual void createContacts(const ::OpenAPI::OptionalParam<QList<OAIContact>> &oai_contact = ::OpenAPI::OptionalParam<QList<OAIContact>>());

    /**
    * @param[in]  id qint64 [required]
    */
    virtual void deleteContact(const qint64 &id);

    /**
    * @param[in]  id qint64 [required]
    */
    virtual void deleteContactList(const qint64 &id);

    /**
    * @param[in]  number QString [required]
    */
    virtual void deleteDoNotContact(const QString &number);

    /**
    * @param[in]  source QString [required]
    */
    virtual void deleteDoNotContactsBySource(const QString &source);

    /**
    * @param[in]  fields QString [optional]
    * @param[in]  limit qint32 [optional]
    * @param[in]  offset qint32 [optional]
    * @param[in]  name QString [optional]
    * @param[in]  exact_match bool [optional]
    * @param[in]  contact_count qint32 [optional]
    * @param[in]  order_by QString [optional]
    */
    virtual void findContactLists(const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &limit = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &offset = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &name = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &exact_match = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<qint32> &contact_count = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &order_by = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  fields QString [optional]
    * @param[in]  limit qint32 [optional]
    * @param[in]  offset qint32 [optional]
    * @param[in]  id QList<qint64> [optional]
    * @param[in]  number QList<QString> [optional]
    * @param[in]  contact_list_id qint64 [optional]
    * @param[in]  property_name QString [optional]
    * @param[in]  property_value QString [optional]
    */
    virtual void findContacts(const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &limit = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &offset = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QList<qint64>> &id = ::OpenAPI::OptionalParam<QList<qint64>>(), const ::OpenAPI::OptionalParam<QList<QString>> &number = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<qint64> &contact_list_id = ::OpenAPI::OptionalParam<qint64>(), const ::OpenAPI::OptionalParam<QString> &property_name = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &property_value = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  fields QString [optional]
    * @param[in]  limit qint32 [optional]
    * @param[in]  offset qint32 [optional]
    * @param[in]  prefix QString [optional]
    * @param[in]  campaign_id qint64 [optional]
    * @param[in]  source QString [optional]
    * @param[in]  call bool [optional]
    * @param[in]  text bool [optional]
    * @param[in]  inbound_call bool [optional]
    * @param[in]  inbound_text bool [optional]
    * @param[in]  number QList<QString> [optional]
    */
    virtual void findDoNotContacts(const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &limit = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &offset = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &prefix = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint64> &campaign_id = ::OpenAPI::OptionalParam<qint64>(), const ::OpenAPI::OptionalParam<QString> &source = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &call = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &text = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &inbound_call = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &inbound_text = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QList<QString>> &number = ::OpenAPI::OptionalParam<QList<QString>>());

    /**
    * @param[in]  id qint64 [required]
    * @param[in]  fields QString [optional]
    */
    virtual void getContact(const qint64 &id, const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  id qint64 [required]
    * @param[in]  limit qint32 [optional]
    * @param[in]  offset qint32 [optional]
    * @param[in]  fields QString [optional]
    */
    virtual void getContactHistory(const qint64 &id, const ::OpenAPI::OptionalParam<qint32> &limit = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &offset = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  id qint64 [required]
    * @param[in]  fields QString [optional]
    */
    virtual void getContactList(const qint64 &id, const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  id qint64 [required]
    * @param[in]  fields QString [optional]
    * @param[in]  limit qint32 [optional]
    * @param[in]  offset qint32 [optional]
    */
    virtual void getContactListItems(const qint64 &id, const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &limit = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &offset = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  number QString [required]
    */
    virtual void getDoNotContact(const QString &number);

    /**
    * @param[in]  to_number QString [required]
    * @param[in]  from_number QString [optional]
    * @param[in]  fields QString [optional]
    */
    virtual void getUniversalDoNotContacts(const QString &to_number, const ::OpenAPI::OptionalParam<QString> &from_number = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  id qint64 [required]
    * @param[in]  contact_id qint64 [required]
    */
    virtual void removeContactListItem(const qint64 &id, const qint64 &contact_id);

    /**
    * @param[in]  id qint64 [required]
    * @param[in]  contact_id QList<qint64> [optional]
    */
    virtual void removeContactListItems(const qint64 &id, const ::OpenAPI::OptionalParam<QList<qint64>> &contact_id = ::OpenAPI::OptionalParam<QList<qint64>>());

    /**
    * @param[in]  id qint64 [required]
    * @param[in]  oai_contact OAIContact [optional]
    */
    virtual void updateContact(const qint64 &id, const ::OpenAPI::OptionalParam<OAIContact> &oai_contact = ::OpenAPI::OptionalParam<OAIContact>());

    /**
    * @param[in]  id qint64 [required]
    * @param[in]  oai_update_contact_list_request OAIUpdateContactListRequest [optional]
    */
    virtual void updateContactList(const qint64 &id, const ::OpenAPI::OptionalParam<OAIUpdateContactListRequest> &oai_update_contact_list_request = ::OpenAPI::OptionalParam<OAIUpdateContactListRequest>());

    /**
    * @param[in]  number QString [required]
    * @param[in]  oaido_not_contact OAIDoNotContact [optional]
    */
    virtual void updateDoNotContact(const QString &number, const ::OpenAPI::OptionalParam<OAIDoNotContact> &oaido_not_contact = ::OpenAPI::OptionalParam<OAIDoNotContact>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void addContactListItemsCallback(OAIHttpRequestWorker *worker);
    void addDoNotContactsCallback(OAIHttpRequestWorker *worker);
    void createContactListCallback(OAIHttpRequestWorker *worker);
    void createContactListFromFileCallback(OAIHttpRequestWorker *worker);
    void createContactsCallback(OAIHttpRequestWorker *worker);
    void deleteContactCallback(OAIHttpRequestWorker *worker);
    void deleteContactListCallback(OAIHttpRequestWorker *worker);
    void deleteDoNotContactCallback(OAIHttpRequestWorker *worker);
    void deleteDoNotContactsBySourceCallback(OAIHttpRequestWorker *worker);
    void findContactListsCallback(OAIHttpRequestWorker *worker);
    void findContactsCallback(OAIHttpRequestWorker *worker);
    void findDoNotContactsCallback(OAIHttpRequestWorker *worker);
    void getContactCallback(OAIHttpRequestWorker *worker);
    void getContactHistoryCallback(OAIHttpRequestWorker *worker);
    void getContactListCallback(OAIHttpRequestWorker *worker);
    void getContactListItemsCallback(OAIHttpRequestWorker *worker);
    void getDoNotContactCallback(OAIHttpRequestWorker *worker);
    void getUniversalDoNotContactsCallback(OAIHttpRequestWorker *worker);
    void removeContactListItemCallback(OAIHttpRequestWorker *worker);
    void removeContactListItemsCallback(OAIHttpRequestWorker *worker);
    void updateContactCallback(OAIHttpRequestWorker *worker);
    void updateContactListCallback(OAIHttpRequestWorker *worker);
    void updateDoNotContactCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void addContactListItemsSignal();
    void addDoNotContactsSignal();
    void createContactListSignal(OAIContactList summary);
    void createContactListFromFileSignal(OAIResourceId summary);
    void createContactsSignal(OAIResourceIdList summary);
    void deleteContactSignal();
    void deleteContactListSignal();
    void deleteDoNotContactSignal();
    void deleteDoNotContactsBySourceSignal();
    void findContactListsSignal(OAIContactListPage summary);
    void findContactsSignal(OAIContactPage summary);
    void findDoNotContactsSignal(OAIDoNotContactPage summary);
    void getContactSignal(OAIContact summary);
    void getContactHistorySignal(OAIContactHistory summary);
    void getContactListSignal(OAIContactList summary);
    void getContactListItemsSignal(OAIContactPage summary);
    void getDoNotContactSignal(OAIDoNotContact summary);
    void getUniversalDoNotContactsSignal(OAIItemListUniversalDoNotContact summary);
    void removeContactListItemSignal();
    void removeContactListItemsSignal();
    void updateContactSignal();
    void updateContactListSignal();
    void updateDoNotContactSignal();


    void addContactListItemsSignalFull(OAIHttpRequestWorker *worker);
    void addDoNotContactsSignalFull(OAIHttpRequestWorker *worker);
    void createContactListSignalFull(OAIHttpRequestWorker *worker, OAIContactList summary);
    void createContactListFromFileSignalFull(OAIHttpRequestWorker *worker, OAIResourceId summary);
    void createContactsSignalFull(OAIHttpRequestWorker *worker, OAIResourceIdList summary);
    void deleteContactSignalFull(OAIHttpRequestWorker *worker);
    void deleteContactListSignalFull(OAIHttpRequestWorker *worker);
    void deleteDoNotContactSignalFull(OAIHttpRequestWorker *worker);
    void deleteDoNotContactsBySourceSignalFull(OAIHttpRequestWorker *worker);
    void findContactListsSignalFull(OAIHttpRequestWorker *worker, OAIContactListPage summary);
    void findContactsSignalFull(OAIHttpRequestWorker *worker, OAIContactPage summary);
    void findDoNotContactsSignalFull(OAIHttpRequestWorker *worker, OAIDoNotContactPage summary);
    void getContactSignalFull(OAIHttpRequestWorker *worker, OAIContact summary);
    void getContactHistorySignalFull(OAIHttpRequestWorker *worker, OAIContactHistory summary);
    void getContactListSignalFull(OAIHttpRequestWorker *worker, OAIContactList summary);
    void getContactListItemsSignalFull(OAIHttpRequestWorker *worker, OAIContactPage summary);
    void getDoNotContactSignalFull(OAIHttpRequestWorker *worker, OAIDoNotContact summary);
    void getUniversalDoNotContactsSignalFull(OAIHttpRequestWorker *worker, OAIItemListUniversalDoNotContact summary);
    void removeContactListItemSignalFull(OAIHttpRequestWorker *worker);
    void removeContactListItemsSignalFull(OAIHttpRequestWorker *worker);
    void updateContactSignalFull(OAIHttpRequestWorker *worker);
    void updateContactListSignalFull(OAIHttpRequestWorker *worker);
    void updateDoNotContactSignalFull(OAIHttpRequestWorker *worker);

    Q_DECL_DEPRECATED_X("Use addContactListItemsSignalError() instead")
    void addContactListItemsSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void addContactListItemsSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use addDoNotContactsSignalError() instead")
    void addDoNotContactsSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void addDoNotContactsSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createContactListSignalError() instead")
    void createContactListSignalE(OAIContactList summary, QNetworkReply::NetworkError error_type, QString error_str);
    void createContactListSignalError(OAIContactList summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createContactListFromFileSignalError() instead")
    void createContactListFromFileSignalE(OAIResourceId summary, QNetworkReply::NetworkError error_type, QString error_str);
    void createContactListFromFileSignalError(OAIResourceId summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createContactsSignalError() instead")
    void createContactsSignalE(OAIResourceIdList summary, QNetworkReply::NetworkError error_type, QString error_str);
    void createContactsSignalError(OAIResourceIdList summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteContactSignalError() instead")
    void deleteContactSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void deleteContactSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteContactListSignalError() instead")
    void deleteContactListSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void deleteContactListSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteDoNotContactSignalError() instead")
    void deleteDoNotContactSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void deleteDoNotContactSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteDoNotContactsBySourceSignalError() instead")
    void deleteDoNotContactsBySourceSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void deleteDoNotContactsBySourceSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use findContactListsSignalError() instead")
    void findContactListsSignalE(OAIContactListPage summary, QNetworkReply::NetworkError error_type, QString error_str);
    void findContactListsSignalError(OAIContactListPage summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use findContactsSignalError() instead")
    void findContactsSignalE(OAIContactPage summary, QNetworkReply::NetworkError error_type, QString error_str);
    void findContactsSignalError(OAIContactPage summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use findDoNotContactsSignalError() instead")
    void findDoNotContactsSignalE(OAIDoNotContactPage summary, QNetworkReply::NetworkError error_type, QString error_str);
    void findDoNotContactsSignalError(OAIDoNotContactPage summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getContactSignalError() instead")
    void getContactSignalE(OAIContact summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getContactSignalError(OAIContact summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getContactHistorySignalError() instead")
    void getContactHistorySignalE(OAIContactHistory summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getContactHistorySignalError(OAIContactHistory summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getContactListSignalError() instead")
    void getContactListSignalE(OAIContactList summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getContactListSignalError(OAIContactList summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getContactListItemsSignalError() instead")
    void getContactListItemsSignalE(OAIContactPage summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getContactListItemsSignalError(OAIContactPage summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getDoNotContactSignalError() instead")
    void getDoNotContactSignalE(OAIDoNotContact summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getDoNotContactSignalError(OAIDoNotContact summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getUniversalDoNotContactsSignalError() instead")
    void getUniversalDoNotContactsSignalE(OAIItemListUniversalDoNotContact summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getUniversalDoNotContactsSignalError(OAIItemListUniversalDoNotContact summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use removeContactListItemSignalError() instead")
    void removeContactListItemSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void removeContactListItemSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use removeContactListItemsSignalError() instead")
    void removeContactListItemsSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void removeContactListItemsSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateContactSignalError() instead")
    void updateContactSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void updateContactSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateContactListSignalError() instead")
    void updateContactListSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void updateContactListSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateDoNotContactSignalError() instead")
    void updateDoNotContactSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void updateDoNotContactSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use addContactListItemsSignalErrorFull() instead")
    void addContactListItemsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void addContactListItemsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use addDoNotContactsSignalErrorFull() instead")
    void addDoNotContactsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void addDoNotContactsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createContactListSignalErrorFull() instead")
    void createContactListSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void createContactListSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createContactListFromFileSignalErrorFull() instead")
    void createContactListFromFileSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void createContactListFromFileSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createContactsSignalErrorFull() instead")
    void createContactsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void createContactsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteContactSignalErrorFull() instead")
    void deleteContactSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteContactSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteContactListSignalErrorFull() instead")
    void deleteContactListSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteContactListSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteDoNotContactSignalErrorFull() instead")
    void deleteDoNotContactSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteDoNotContactSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteDoNotContactsBySourceSignalErrorFull() instead")
    void deleteDoNotContactsBySourceSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteDoNotContactsBySourceSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use findContactListsSignalErrorFull() instead")
    void findContactListsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void findContactListsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use findContactsSignalErrorFull() instead")
    void findContactsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void findContactsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use findDoNotContactsSignalErrorFull() instead")
    void findDoNotContactsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void findDoNotContactsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getContactSignalErrorFull() instead")
    void getContactSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getContactSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getContactHistorySignalErrorFull() instead")
    void getContactHistorySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getContactHistorySignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getContactListSignalErrorFull() instead")
    void getContactListSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getContactListSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getContactListItemsSignalErrorFull() instead")
    void getContactListItemsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getContactListItemsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getDoNotContactSignalErrorFull() instead")
    void getDoNotContactSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getDoNotContactSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getUniversalDoNotContactsSignalErrorFull() instead")
    void getUniversalDoNotContactsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getUniversalDoNotContactsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use removeContactListItemSignalErrorFull() instead")
    void removeContactListItemSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void removeContactListItemSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use removeContactListItemsSignalErrorFull() instead")
    void removeContactListItemsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void removeContactListItemsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateContactSignalErrorFull() instead")
    void updateContactSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateContactSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateContactListSignalErrorFull() instead")
    void updateContactListSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateContactListSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateDoNotContactSignalErrorFull() instead")
    void updateDoNotContactSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateDoNotContactSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
