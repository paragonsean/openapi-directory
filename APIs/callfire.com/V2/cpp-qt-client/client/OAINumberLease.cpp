/**
 * CallFire API Documentation
 * CallFire
 *
 * The version of the OpenAPI document: V2
 * Contact: support@callfire.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAINumberLease.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAINumberLease::OAINumberLease(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAINumberLease::OAINumberLease() {
    this->initializeModel();
}

OAINumberLease::~OAINumberLease() {}

void OAINumberLease::initializeModel() {

    m_auto_renew_isSet = false;
    m_auto_renew_isValid = false;

    m_call_feature_status_isSet = false;
    m_call_feature_status_isValid = false;

    m_labels_isSet = false;
    m_labels_isValid = false;

    m_lease_begin_isSet = false;
    m_lease_begin_isValid = false;

    m_lease_end_isSet = false;
    m_lease_end_isValid = false;

    m_national_format_isSet = false;
    m_national_format_isValid = false;

    m_number_isSet = false;
    m_number_isValid = false;

    m_region_isSet = false;
    m_region_isValid = false;

    m_send_email_on_create_isSet = false;
    m_send_email_on_create_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;

    m_text_feature_status_isSet = false;
    m_text_feature_status_isValid = false;

    m_toll_free_isSet = false;
    m_toll_free_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;
}

void OAINumberLease::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAINumberLease::fromJsonObject(QJsonObject json) {

    m_auto_renew_isValid = ::OpenAPI::fromJsonValue(m_auto_renew, json[QString("autoRenew")]);
    m_auto_renew_isSet = !json[QString("autoRenew")].isNull() && m_auto_renew_isValid;

    m_call_feature_status_isValid = ::OpenAPI::fromJsonValue(m_call_feature_status, json[QString("callFeatureStatus")]);
    m_call_feature_status_isSet = !json[QString("callFeatureStatus")].isNull() && m_call_feature_status_isValid;

    m_labels_isValid = ::OpenAPI::fromJsonValue(m_labels, json[QString("labels")]);
    m_labels_isSet = !json[QString("labels")].isNull() && m_labels_isValid;

    m_lease_begin_isValid = ::OpenAPI::fromJsonValue(m_lease_begin, json[QString("leaseBegin")]);
    m_lease_begin_isSet = !json[QString("leaseBegin")].isNull() && m_lease_begin_isValid;

    m_lease_end_isValid = ::OpenAPI::fromJsonValue(m_lease_end, json[QString("leaseEnd")]);
    m_lease_end_isSet = !json[QString("leaseEnd")].isNull() && m_lease_end_isValid;

    m_national_format_isValid = ::OpenAPI::fromJsonValue(m_national_format, json[QString("nationalFormat")]);
    m_national_format_isSet = !json[QString("nationalFormat")].isNull() && m_national_format_isValid;

    m_number_isValid = ::OpenAPI::fromJsonValue(m_number, json[QString("number")]);
    m_number_isSet = !json[QString("number")].isNull() && m_number_isValid;

    m_region_isValid = ::OpenAPI::fromJsonValue(m_region, json[QString("region")]);
    m_region_isSet = !json[QString("region")].isNull() && m_region_isValid;

    m_send_email_on_create_isValid = ::OpenAPI::fromJsonValue(m_send_email_on_create, json[QString("sendEmailOnCreate")]);
    m_send_email_on_create_isSet = !json[QString("sendEmailOnCreate")].isNull() && m_send_email_on_create_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("status")]);
    m_status_isSet = !json[QString("status")].isNull() && m_status_isValid;

    m_text_feature_status_isValid = ::OpenAPI::fromJsonValue(m_text_feature_status, json[QString("textFeatureStatus")]);
    m_text_feature_status_isSet = !json[QString("textFeatureStatus")].isNull() && m_text_feature_status_isValid;

    m_toll_free_isValid = ::OpenAPI::fromJsonValue(m_toll_free, json[QString("tollFree")]);
    m_toll_free_isSet = !json[QString("tollFree")].isNull() && m_toll_free_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;
}

QString OAINumberLease::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAINumberLease::asJsonObject() const {
    QJsonObject obj;
    if (m_auto_renew_isSet) {
        obj.insert(QString("autoRenew"), ::OpenAPI::toJsonValue(m_auto_renew));
    }
    if (m_call_feature_status_isSet) {
        obj.insert(QString("callFeatureStatus"), ::OpenAPI::toJsonValue(m_call_feature_status));
    }
    if (m_labels.size() > 0) {
        obj.insert(QString("labels"), ::OpenAPI::toJsonValue(m_labels));
    }
    if (m_lease_begin_isSet) {
        obj.insert(QString("leaseBegin"), ::OpenAPI::toJsonValue(m_lease_begin));
    }
    if (m_lease_end_isSet) {
        obj.insert(QString("leaseEnd"), ::OpenAPI::toJsonValue(m_lease_end));
    }
    if (m_national_format_isSet) {
        obj.insert(QString("nationalFormat"), ::OpenAPI::toJsonValue(m_national_format));
    }
    if (m_number_isSet) {
        obj.insert(QString("number"), ::OpenAPI::toJsonValue(m_number));
    }
    if (m_region.isSet()) {
        obj.insert(QString("region"), ::OpenAPI::toJsonValue(m_region));
    }
    if (m_send_email_on_create_isSet) {
        obj.insert(QString("sendEmailOnCreate"), ::OpenAPI::toJsonValue(m_send_email_on_create));
    }
    if (m_status_isSet) {
        obj.insert(QString("status"), ::OpenAPI::toJsonValue(m_status));
    }
    if (m_text_feature_status_isSet) {
        obj.insert(QString("textFeatureStatus"), ::OpenAPI::toJsonValue(m_text_feature_status));
    }
    if (m_toll_free_isSet) {
        obj.insert(QString("tollFree"), ::OpenAPI::toJsonValue(m_toll_free));
    }
    if (m_type_isSet) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    return obj;
}

bool OAINumberLease::isAutoRenew() const {
    return m_auto_renew;
}
void OAINumberLease::setAutoRenew(const bool &auto_renew) {
    m_auto_renew = auto_renew;
    m_auto_renew_isSet = true;
}

bool OAINumberLease::is_auto_renew_Set() const{
    return m_auto_renew_isSet;
}

bool OAINumberLease::is_auto_renew_Valid() const{
    return m_auto_renew_isValid;
}

QString OAINumberLease::getCallFeatureStatus() const {
    return m_call_feature_status;
}
void OAINumberLease::setCallFeatureStatus(const QString &call_feature_status) {
    m_call_feature_status = call_feature_status;
    m_call_feature_status_isSet = true;
}

bool OAINumberLease::is_call_feature_status_Set() const{
    return m_call_feature_status_isSet;
}

bool OAINumberLease::is_call_feature_status_Valid() const{
    return m_call_feature_status_isValid;
}

QList<QString> OAINumberLease::getLabels() const {
    return m_labels;
}
void OAINumberLease::setLabels(const QList<QString> &labels) {
    m_labels = labels;
    m_labels_isSet = true;
}

bool OAINumberLease::is_labels_Set() const{
    return m_labels_isSet;
}

bool OAINumberLease::is_labels_Valid() const{
    return m_labels_isValid;
}

qint64 OAINumberLease::getLeaseBegin() const {
    return m_lease_begin;
}
void OAINumberLease::setLeaseBegin(const qint64 &lease_begin) {
    m_lease_begin = lease_begin;
    m_lease_begin_isSet = true;
}

bool OAINumberLease::is_lease_begin_Set() const{
    return m_lease_begin_isSet;
}

bool OAINumberLease::is_lease_begin_Valid() const{
    return m_lease_begin_isValid;
}

qint64 OAINumberLease::getLeaseEnd() const {
    return m_lease_end;
}
void OAINumberLease::setLeaseEnd(const qint64 &lease_end) {
    m_lease_end = lease_end;
    m_lease_end_isSet = true;
}

bool OAINumberLease::is_lease_end_Set() const{
    return m_lease_end_isSet;
}

bool OAINumberLease::is_lease_end_Valid() const{
    return m_lease_end_isValid;
}

QString OAINumberLease::getNationalFormat() const {
    return m_national_format;
}
void OAINumberLease::setNationalFormat(const QString &national_format) {
    m_national_format = national_format;
    m_national_format_isSet = true;
}

bool OAINumberLease::is_national_format_Set() const{
    return m_national_format_isSet;
}

bool OAINumberLease::is_national_format_Valid() const{
    return m_national_format_isValid;
}

QString OAINumberLease::getNumber() const {
    return m_number;
}
void OAINumberLease::setNumber(const QString &number) {
    m_number = number;
    m_number_isSet = true;
}

bool OAINumberLease::is_number_Set() const{
    return m_number_isSet;
}

bool OAINumberLease::is_number_Valid() const{
    return m_number_isValid;
}

OAIRegion OAINumberLease::getRegion() const {
    return m_region;
}
void OAINumberLease::setRegion(const OAIRegion &region) {
    m_region = region;
    m_region_isSet = true;
}

bool OAINumberLease::is_region_Set() const{
    return m_region_isSet;
}

bool OAINumberLease::is_region_Valid() const{
    return m_region_isValid;
}

bool OAINumberLease::isSendEmailOnCreate() const {
    return m_send_email_on_create;
}
void OAINumberLease::setSendEmailOnCreate(const bool &send_email_on_create) {
    m_send_email_on_create = send_email_on_create;
    m_send_email_on_create_isSet = true;
}

bool OAINumberLease::is_send_email_on_create_Set() const{
    return m_send_email_on_create_isSet;
}

bool OAINumberLease::is_send_email_on_create_Valid() const{
    return m_send_email_on_create_isValid;
}

QString OAINumberLease::getStatus() const {
    return m_status;
}
void OAINumberLease::setStatus(const QString &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAINumberLease::is_status_Set() const{
    return m_status_isSet;
}

bool OAINumberLease::is_status_Valid() const{
    return m_status_isValid;
}

QString OAINumberLease::getTextFeatureStatus() const {
    return m_text_feature_status;
}
void OAINumberLease::setTextFeatureStatus(const QString &text_feature_status) {
    m_text_feature_status = text_feature_status;
    m_text_feature_status_isSet = true;
}

bool OAINumberLease::is_text_feature_status_Set() const{
    return m_text_feature_status_isSet;
}

bool OAINumberLease::is_text_feature_status_Valid() const{
    return m_text_feature_status_isValid;
}

bool OAINumberLease::isTollFree() const {
    return m_toll_free;
}
void OAINumberLease::setTollFree(const bool &toll_free) {
    m_toll_free = toll_free;
    m_toll_free_isSet = true;
}

bool OAINumberLease::is_toll_free_Set() const{
    return m_toll_free_isSet;
}

bool OAINumberLease::is_toll_free_Valid() const{
    return m_toll_free_isValid;
}

QString OAINumberLease::getType() const {
    return m_type;
}
void OAINumberLease::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAINumberLease::is_type_Set() const{
    return m_type_isSet;
}

bool OAINumberLease::is_type_Valid() const{
    return m_type_isValid;
}

bool OAINumberLease::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_auto_renew_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_call_feature_status_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_labels.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_lease_begin_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_lease_end_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_national_format_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_number_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_region.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_send_email_on_create_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_text_feature_status_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_toll_free_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAINumberLease::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
