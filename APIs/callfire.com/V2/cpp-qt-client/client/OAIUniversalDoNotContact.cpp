/**
 * CallFire API Documentation
 * CallFire
 *
 * The version of the OpenAPI document: V2
 * Contact: support@callfire.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIUniversalDoNotContact.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIUniversalDoNotContact::OAIUniversalDoNotContact(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIUniversalDoNotContact::OAIUniversalDoNotContact() {
    this->initializeModel();
}

OAIUniversalDoNotContact::~OAIUniversalDoNotContact() {}

void OAIUniversalDoNotContact::initializeModel() {

    m_from_number_isSet = false;
    m_from_number_isValid = false;

    m_inbound_call_isSet = false;
    m_inbound_call_isValid = false;

    m_inbound_text_isSet = false;
    m_inbound_text_isValid = false;

    m_outbound_call_isSet = false;
    m_outbound_call_isValid = false;

    m_outbound_text_isSet = false;
    m_outbound_text_isValid = false;

    m_to_number_isSet = false;
    m_to_number_isValid = false;
}

void OAIUniversalDoNotContact::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIUniversalDoNotContact::fromJsonObject(QJsonObject json) {

    m_from_number_isValid = ::OpenAPI::fromJsonValue(m_from_number, json[QString("fromNumber")]);
    m_from_number_isSet = !json[QString("fromNumber")].isNull() && m_from_number_isValid;

    m_inbound_call_isValid = ::OpenAPI::fromJsonValue(m_inbound_call, json[QString("inboundCall")]);
    m_inbound_call_isSet = !json[QString("inboundCall")].isNull() && m_inbound_call_isValid;

    m_inbound_text_isValid = ::OpenAPI::fromJsonValue(m_inbound_text, json[QString("inboundText")]);
    m_inbound_text_isSet = !json[QString("inboundText")].isNull() && m_inbound_text_isValid;

    m_outbound_call_isValid = ::OpenAPI::fromJsonValue(m_outbound_call, json[QString("outboundCall")]);
    m_outbound_call_isSet = !json[QString("outboundCall")].isNull() && m_outbound_call_isValid;

    m_outbound_text_isValid = ::OpenAPI::fromJsonValue(m_outbound_text, json[QString("outboundText")]);
    m_outbound_text_isSet = !json[QString("outboundText")].isNull() && m_outbound_text_isValid;

    m_to_number_isValid = ::OpenAPI::fromJsonValue(m_to_number, json[QString("toNumber")]);
    m_to_number_isSet = !json[QString("toNumber")].isNull() && m_to_number_isValid;
}

QString OAIUniversalDoNotContact::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIUniversalDoNotContact::asJsonObject() const {
    QJsonObject obj;
    if (m_from_number_isSet) {
        obj.insert(QString("fromNumber"), ::OpenAPI::toJsonValue(m_from_number));
    }
    if (m_inbound_call_isSet) {
        obj.insert(QString("inboundCall"), ::OpenAPI::toJsonValue(m_inbound_call));
    }
    if (m_inbound_text_isSet) {
        obj.insert(QString("inboundText"), ::OpenAPI::toJsonValue(m_inbound_text));
    }
    if (m_outbound_call_isSet) {
        obj.insert(QString("outboundCall"), ::OpenAPI::toJsonValue(m_outbound_call));
    }
    if (m_outbound_text_isSet) {
        obj.insert(QString("outboundText"), ::OpenAPI::toJsonValue(m_outbound_text));
    }
    if (m_to_number_isSet) {
        obj.insert(QString("toNumber"), ::OpenAPI::toJsonValue(m_to_number));
    }
    return obj;
}

QString OAIUniversalDoNotContact::getFromNumber() const {
    return m_from_number;
}
void OAIUniversalDoNotContact::setFromNumber(const QString &from_number) {
    m_from_number = from_number;
    m_from_number_isSet = true;
}

bool OAIUniversalDoNotContact::is_from_number_Set() const{
    return m_from_number_isSet;
}

bool OAIUniversalDoNotContact::is_from_number_Valid() const{
    return m_from_number_isValid;
}

bool OAIUniversalDoNotContact::isInboundCall() const {
    return m_inbound_call;
}
void OAIUniversalDoNotContact::setInboundCall(const bool &inbound_call) {
    m_inbound_call = inbound_call;
    m_inbound_call_isSet = true;
}

bool OAIUniversalDoNotContact::is_inbound_call_Set() const{
    return m_inbound_call_isSet;
}

bool OAIUniversalDoNotContact::is_inbound_call_Valid() const{
    return m_inbound_call_isValid;
}

bool OAIUniversalDoNotContact::isInboundText() const {
    return m_inbound_text;
}
void OAIUniversalDoNotContact::setInboundText(const bool &inbound_text) {
    m_inbound_text = inbound_text;
    m_inbound_text_isSet = true;
}

bool OAIUniversalDoNotContact::is_inbound_text_Set() const{
    return m_inbound_text_isSet;
}

bool OAIUniversalDoNotContact::is_inbound_text_Valid() const{
    return m_inbound_text_isValid;
}

bool OAIUniversalDoNotContact::isOutboundCall() const {
    return m_outbound_call;
}
void OAIUniversalDoNotContact::setOutboundCall(const bool &outbound_call) {
    m_outbound_call = outbound_call;
    m_outbound_call_isSet = true;
}

bool OAIUniversalDoNotContact::is_outbound_call_Set() const{
    return m_outbound_call_isSet;
}

bool OAIUniversalDoNotContact::is_outbound_call_Valid() const{
    return m_outbound_call_isValid;
}

bool OAIUniversalDoNotContact::isOutboundText() const {
    return m_outbound_text;
}
void OAIUniversalDoNotContact::setOutboundText(const bool &outbound_text) {
    m_outbound_text = outbound_text;
    m_outbound_text_isSet = true;
}

bool OAIUniversalDoNotContact::is_outbound_text_Set() const{
    return m_outbound_text_isSet;
}

bool OAIUniversalDoNotContact::is_outbound_text_Valid() const{
    return m_outbound_text_isValid;
}

QString OAIUniversalDoNotContact::getToNumber() const {
    return m_to_number;
}
void OAIUniversalDoNotContact::setToNumber(const QString &to_number) {
    m_to_number = to_number;
    m_to_number_isSet = true;
}

bool OAIUniversalDoNotContact::is_to_number_Set() const{
    return m_to_number_isSet;
}

bool OAIUniversalDoNotContact::is_to_number_Valid() const{
    return m_to_number_isValid;
}

bool OAIUniversalDoNotContact::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_from_number_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_inbound_call_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_inbound_text_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_outbound_call_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_outbound_text_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_to_number_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIUniversalDoNotContact::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
