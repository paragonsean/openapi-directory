/**
 * CallFire API Documentation
 * CallFire
 *
 * The version of the OpenAPI document: V2
 * Contact: support@callfire.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICallRecording.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICallRecording::OAICallRecording(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICallRecording::OAICallRecording() {
    this->initializeModel();
}

OAICallRecording::~OAICallRecording() {}

void OAICallRecording::initializeModel() {

    m_call_id_isSet = false;
    m_call_id_isValid = false;

    m_campaign_id_isSet = false;
    m_campaign_id_isValid = false;

    m_created_isSet = false;
    m_created_isValid = false;

    m_hash_isSet = false;
    m_hash_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_length_in_bytes_isSet = false;
    m_length_in_bytes_isValid = false;

    m_length_in_seconds_isSet = false;
    m_length_in_seconds_isValid = false;

    m_mp3_url_isSet = false;
    m_mp3_url_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_state_isSet = false;
    m_state_isValid = false;
}

void OAICallRecording::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICallRecording::fromJsonObject(QJsonObject json) {

    m_call_id_isValid = ::OpenAPI::fromJsonValue(m_call_id, json[QString("callId")]);
    m_call_id_isSet = !json[QString("callId")].isNull() && m_call_id_isValid;

    m_campaign_id_isValid = ::OpenAPI::fromJsonValue(m_campaign_id, json[QString("campaignId")]);
    m_campaign_id_isSet = !json[QString("campaignId")].isNull() && m_campaign_id_isValid;

    m_created_isValid = ::OpenAPI::fromJsonValue(m_created, json[QString("created")]);
    m_created_isSet = !json[QString("created")].isNull() && m_created_isValid;

    m_hash_isValid = ::OpenAPI::fromJsonValue(m_hash, json[QString("hash")]);
    m_hash_isSet = !json[QString("hash")].isNull() && m_hash_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_length_in_bytes_isValid = ::OpenAPI::fromJsonValue(m_length_in_bytes, json[QString("lengthInBytes")]);
    m_length_in_bytes_isSet = !json[QString("lengthInBytes")].isNull() && m_length_in_bytes_isValid;

    m_length_in_seconds_isValid = ::OpenAPI::fromJsonValue(m_length_in_seconds, json[QString("lengthInSeconds")]);
    m_length_in_seconds_isSet = !json[QString("lengthInSeconds")].isNull() && m_length_in_seconds_isValid;

    m_mp3_url_isValid = ::OpenAPI::fromJsonValue(m_mp3_url, json[QString("mp3Url")]);
    m_mp3_url_isSet = !json[QString("mp3Url")].isNull() && m_mp3_url_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_state_isValid = ::OpenAPI::fromJsonValue(m_state, json[QString("state")]);
    m_state_isSet = !json[QString("state")].isNull() && m_state_isValid;
}

QString OAICallRecording::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICallRecording::asJsonObject() const {
    QJsonObject obj;
    if (m_call_id_isSet) {
        obj.insert(QString("callId"), ::OpenAPI::toJsonValue(m_call_id));
    }
    if (m_campaign_id_isSet) {
        obj.insert(QString("campaignId"), ::OpenAPI::toJsonValue(m_campaign_id));
    }
    if (m_created_isSet) {
        obj.insert(QString("created"), ::OpenAPI::toJsonValue(m_created));
    }
    if (m_hash_isSet) {
        obj.insert(QString("hash"), ::OpenAPI::toJsonValue(m_hash));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_length_in_bytes_isSet) {
        obj.insert(QString("lengthInBytes"), ::OpenAPI::toJsonValue(m_length_in_bytes));
    }
    if (m_length_in_seconds_isSet) {
        obj.insert(QString("lengthInSeconds"), ::OpenAPI::toJsonValue(m_length_in_seconds));
    }
    if (m_mp3_url_isSet) {
        obj.insert(QString("mp3Url"), ::OpenAPI::toJsonValue(m_mp3_url));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_state_isSet) {
        obj.insert(QString("state"), ::OpenAPI::toJsonValue(m_state));
    }
    return obj;
}

qint64 OAICallRecording::getCallId() const {
    return m_call_id;
}
void OAICallRecording::setCallId(const qint64 &call_id) {
    m_call_id = call_id;
    m_call_id_isSet = true;
}

bool OAICallRecording::is_call_id_Set() const{
    return m_call_id_isSet;
}

bool OAICallRecording::is_call_id_Valid() const{
    return m_call_id_isValid;
}

qint64 OAICallRecording::getCampaignId() const {
    return m_campaign_id;
}
void OAICallRecording::setCampaignId(const qint64 &campaign_id) {
    m_campaign_id = campaign_id;
    m_campaign_id_isSet = true;
}

bool OAICallRecording::is_campaign_id_Set() const{
    return m_campaign_id_isSet;
}

bool OAICallRecording::is_campaign_id_Valid() const{
    return m_campaign_id_isValid;
}

qint64 OAICallRecording::getCreated() const {
    return m_created;
}
void OAICallRecording::setCreated(const qint64 &created) {
    m_created = created;
    m_created_isSet = true;
}

bool OAICallRecording::is_created_Set() const{
    return m_created_isSet;
}

bool OAICallRecording::is_created_Valid() const{
    return m_created_isValid;
}

QString OAICallRecording::getHash() const {
    return m_hash;
}
void OAICallRecording::setHash(const QString &hash) {
    m_hash = hash;
    m_hash_isSet = true;
}

bool OAICallRecording::is_hash_Set() const{
    return m_hash_isSet;
}

bool OAICallRecording::is_hash_Valid() const{
    return m_hash_isValid;
}

qint64 OAICallRecording::getId() const {
    return m_id;
}
void OAICallRecording::setId(const qint64 &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAICallRecording::is_id_Set() const{
    return m_id_isSet;
}

bool OAICallRecording::is_id_Valid() const{
    return m_id_isValid;
}

qint64 OAICallRecording::getLengthInBytes() const {
    return m_length_in_bytes;
}
void OAICallRecording::setLengthInBytes(const qint64 &length_in_bytes) {
    m_length_in_bytes = length_in_bytes;
    m_length_in_bytes_isSet = true;
}

bool OAICallRecording::is_length_in_bytes_Set() const{
    return m_length_in_bytes_isSet;
}

bool OAICallRecording::is_length_in_bytes_Valid() const{
    return m_length_in_bytes_isValid;
}

qint32 OAICallRecording::getLengthInSeconds() const {
    return m_length_in_seconds;
}
void OAICallRecording::setLengthInSeconds(const qint32 &length_in_seconds) {
    m_length_in_seconds = length_in_seconds;
    m_length_in_seconds_isSet = true;
}

bool OAICallRecording::is_length_in_seconds_Set() const{
    return m_length_in_seconds_isSet;
}

bool OAICallRecording::is_length_in_seconds_Valid() const{
    return m_length_in_seconds_isValid;
}

QString OAICallRecording::getMp3Url() const {
    return m_mp3_url;
}
void OAICallRecording::setMp3Url(const QString &mp3_url) {
    m_mp3_url = mp3_url;
    m_mp3_url_isSet = true;
}

bool OAICallRecording::is_mp3_url_Set() const{
    return m_mp3_url_isSet;
}

bool OAICallRecording::is_mp3_url_Valid() const{
    return m_mp3_url_isValid;
}

QString OAICallRecording::getName() const {
    return m_name;
}
void OAICallRecording::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAICallRecording::is_name_Set() const{
    return m_name_isSet;
}

bool OAICallRecording::is_name_Valid() const{
    return m_name_isValid;
}

QString OAICallRecording::getState() const {
    return m_state;
}
void OAICallRecording::setState(const QString &state) {
    m_state = state;
    m_state_isSet = true;
}

bool OAICallRecording::is_state_Set() const{
    return m_state_isSet;
}

bool OAICallRecording::is_state_Valid() const{
    return m_state_isValid;
}

bool OAICallRecording::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_call_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_campaign_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_created_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_hash_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_length_in_bytes_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_length_in_seconds_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_mp3_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_state_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICallRecording::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
