/**
 * CallFire API Documentation
 * CallFire
 *
 * The version of the OpenAPI document: V2
 * Contact: support@callfire.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIMediaApi_H
#define OAI_OAIMediaApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIErrorResponse.h"
#include "OAIHttpFileElement.h"
#include "OAIMedia.h"
#include "OAIMediaPage.h"
#include "OAIObject.h"
#include "OAIResourceId.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIMediaApi : public QObject {
    Q_OBJECT

public:
    OAIMediaApi(const int timeOut = 0);
    ~OAIMediaApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  file OAIHttpFileElement [required]
    * @param[in]  name QString [optional]
    */
    virtual void createMedia(const OAIHttpFileElement &file, const ::OpenAPI::OptionalParam<QString> &name = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  limit qint32 [optional]
    * @param[in]  offset qint32 [optional]
    * @param[in]  filter QString [optional]
    * @param[in]  fields QString [optional]
    */
    virtual void findMedia(const ::OpenAPI::OptionalParam<qint32> &limit = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &offset = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &filter = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  id qint64 [required]
    * @param[in]  fields QString [optional]
    */
    virtual void getMedia(const qint64 &id, const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  id qint64 [required]
    * @param[in]  extension QString [required]
    */
    virtual void getMediaData(const qint64 &id, const QString &extension);

    /**
    * @param[in]  id qint64 [required]
    */
    virtual void getMediaDataBinary(const qint64 &id);

    /**
    * @param[in]  key QString [required]
    * @param[in]  extension QString [required]
    */
    virtual void getMediaDataByKey(const QString &key, const QString &extension);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void createMediaCallback(OAIHttpRequestWorker *worker);
    void findMediaCallback(OAIHttpRequestWorker *worker);
    void getMediaCallback(OAIHttpRequestWorker *worker);
    void getMediaDataCallback(OAIHttpRequestWorker *worker);
    void getMediaDataBinaryCallback(OAIHttpRequestWorker *worker);
    void getMediaDataByKeyCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void createMediaSignal(OAIResourceId summary);
    void findMediaSignal(OAIMediaPage summary);
    void getMediaSignal(OAIMedia summary);
    void getMediaDataSignal(OAIObject summary);
    void getMediaDataBinarySignal(OAIObject summary);
    void getMediaDataByKeySignal(OAIObject summary);


    void createMediaSignalFull(OAIHttpRequestWorker *worker, OAIResourceId summary);
    void findMediaSignalFull(OAIHttpRequestWorker *worker, OAIMediaPage summary);
    void getMediaSignalFull(OAIHttpRequestWorker *worker, OAIMedia summary);
    void getMediaDataSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void getMediaDataBinarySignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void getMediaDataByKeySignalFull(OAIHttpRequestWorker *worker, OAIObject summary);

    Q_DECL_DEPRECATED_X("Use createMediaSignalError() instead")
    void createMediaSignalE(OAIResourceId summary, QNetworkReply::NetworkError error_type, QString error_str);
    void createMediaSignalError(OAIResourceId summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use findMediaSignalError() instead")
    void findMediaSignalE(OAIMediaPage summary, QNetworkReply::NetworkError error_type, QString error_str);
    void findMediaSignalError(OAIMediaPage summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getMediaSignalError() instead")
    void getMediaSignalE(OAIMedia summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getMediaSignalError(OAIMedia summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getMediaDataSignalError() instead")
    void getMediaDataSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getMediaDataSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getMediaDataBinarySignalError() instead")
    void getMediaDataBinarySignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getMediaDataBinarySignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getMediaDataByKeySignalError() instead")
    void getMediaDataByKeySignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getMediaDataByKeySignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use createMediaSignalErrorFull() instead")
    void createMediaSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void createMediaSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use findMediaSignalErrorFull() instead")
    void findMediaSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void findMediaSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getMediaSignalErrorFull() instead")
    void getMediaSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getMediaSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getMediaDataSignalErrorFull() instead")
    void getMediaDataSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getMediaDataSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getMediaDataBinarySignalErrorFull() instead")
    void getMediaDataBinarySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getMediaDataBinarySignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getMediaDataByKeySignalErrorFull() instead")
    void getMediaDataByKeySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getMediaDataByKeySignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
