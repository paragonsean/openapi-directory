/**
 * CallFire API Documentation
 * CallFire
 *
 * The version of the OpenAPI document: V2
 * Contact: support@callfire.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAICampaignsApi_H
#define OAI_OAICampaignsApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIBatch.h"
#include "OAICallCreateSound.h"
#include "OAICampaignSound.h"
#include "OAICampaignSoundPage.h"
#include "OAIErrorResponse.h"
#include "OAIHttpFileElement.h"
#include "OAIObject.h"
#include "OAITextToSpeech.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAICampaignsApi : public QObject {
    Q_OBJECT

public:
    OAICampaignsApi(const int timeOut = 0);
    ~OAICampaignsApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  id qint64 [required]
    */
    virtual void deleteCampaignSound(const qint64 &id);

    /**
    * @param[in]  limit qint32 [optional]
    * @param[in]  offset qint32 [optional]
    * @param[in]  filter QString [optional]
    * @param[in]  include_archived bool [optional]
    * @param[in]  include_pending bool [optional]
    * @param[in]  include_scrubbed bool [optional]
    * @param[in]  fields QString [optional]
    */
    virtual void findCampaignSounds(const ::OpenAPI::OptionalParam<qint32> &limit = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &offset = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &filter = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &include_archived = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &include_pending = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &include_scrubbed = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  id qint64 [required]
    * @param[in]  fields QString [optional]
    */
    virtual void getCampaignBatch(const qint64 &id, const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  id qint64 [required]
    * @param[in]  fields QString [optional]
    */
    virtual void getCampaignSound(const qint64 &id, const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  id qint64 [required]
    */
    virtual void getCampaignSoundDataMp3(const qint64 &id);

    /**
    * @param[in]  id qint64 [required]
    */
    virtual void getCampaignSoundDataWav(const qint64 &id);

    /**
    * @param[in]  fields QString [optional]
    * @param[in]  oai_call_create_sound OAICallCreateSound [optional]
    */
    virtual void postCallCampaignSound(const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAICallCreateSound> &oai_call_create_sound = ::OpenAPI::OptionalParam<OAICallCreateSound>());

    /**
    * @param[in]  file OAIHttpFileElement [required]
    * @param[in]  fields QString [optional]
    * @param[in]  name QString [optional]
    */
    virtual void postFileCampaignSound(const OAIHttpFileElement &file, const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &name = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  fields QString [optional]
    * @param[in]  oai_text_to_speech OAITextToSpeech [optional]
    */
    virtual void postTTSCampaignSound(const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAITextToSpeech> &oai_text_to_speech = ::OpenAPI::OptionalParam<OAITextToSpeech>());

    /**
    * @param[in]  id qint64 [required]
    * @param[in]  oai_batch OAIBatch [optional]
    */
    virtual void updateCampaignBatch(const qint64 &id, const ::OpenAPI::OptionalParam<OAIBatch> &oai_batch = ::OpenAPI::OptionalParam<OAIBatch>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void deleteCampaignSoundCallback(OAIHttpRequestWorker *worker);
    void findCampaignSoundsCallback(OAIHttpRequestWorker *worker);
    void getCampaignBatchCallback(OAIHttpRequestWorker *worker);
    void getCampaignSoundCallback(OAIHttpRequestWorker *worker);
    void getCampaignSoundDataMp3Callback(OAIHttpRequestWorker *worker);
    void getCampaignSoundDataWavCallback(OAIHttpRequestWorker *worker);
    void postCallCampaignSoundCallback(OAIHttpRequestWorker *worker);
    void postFileCampaignSoundCallback(OAIHttpRequestWorker *worker);
    void postTTSCampaignSoundCallback(OAIHttpRequestWorker *worker);
    void updateCampaignBatchCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void deleteCampaignSoundSignal();
    void findCampaignSoundsSignal(OAICampaignSoundPage summary);
    void getCampaignBatchSignal(OAIBatch summary);
    void getCampaignSoundSignal(OAICampaignSound summary);
    void getCampaignSoundDataMp3Signal(OAIObject summary);
    void getCampaignSoundDataWavSignal(OAIObject summary);
    void postCallCampaignSoundSignal(OAICampaignSound summary);
    void postFileCampaignSoundSignal(OAICampaignSound summary);
    void postTTSCampaignSoundSignal(OAICampaignSound summary);
    void updateCampaignBatchSignal();


    void deleteCampaignSoundSignalFull(OAIHttpRequestWorker *worker);
    void findCampaignSoundsSignalFull(OAIHttpRequestWorker *worker, OAICampaignSoundPage summary);
    void getCampaignBatchSignalFull(OAIHttpRequestWorker *worker, OAIBatch summary);
    void getCampaignSoundSignalFull(OAIHttpRequestWorker *worker, OAICampaignSound summary);
    void getCampaignSoundDataMp3SignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void getCampaignSoundDataWavSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void postCallCampaignSoundSignalFull(OAIHttpRequestWorker *worker, OAICampaignSound summary);
    void postFileCampaignSoundSignalFull(OAIHttpRequestWorker *worker, OAICampaignSound summary);
    void postTTSCampaignSoundSignalFull(OAIHttpRequestWorker *worker, OAICampaignSound summary);
    void updateCampaignBatchSignalFull(OAIHttpRequestWorker *worker);

    Q_DECL_DEPRECATED_X("Use deleteCampaignSoundSignalError() instead")
    void deleteCampaignSoundSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void deleteCampaignSoundSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use findCampaignSoundsSignalError() instead")
    void findCampaignSoundsSignalE(OAICampaignSoundPage summary, QNetworkReply::NetworkError error_type, QString error_str);
    void findCampaignSoundsSignalError(OAICampaignSoundPage summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getCampaignBatchSignalError() instead")
    void getCampaignBatchSignalE(OAIBatch summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getCampaignBatchSignalError(OAIBatch summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getCampaignSoundSignalError() instead")
    void getCampaignSoundSignalE(OAICampaignSound summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getCampaignSoundSignalError(OAICampaignSound summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getCampaignSoundDataMp3SignalError() instead")
    void getCampaignSoundDataMp3SignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getCampaignSoundDataMp3SignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getCampaignSoundDataWavSignalError() instead")
    void getCampaignSoundDataWavSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getCampaignSoundDataWavSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use postCallCampaignSoundSignalError() instead")
    void postCallCampaignSoundSignalE(OAICampaignSound summary, QNetworkReply::NetworkError error_type, QString error_str);
    void postCallCampaignSoundSignalError(OAICampaignSound summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use postFileCampaignSoundSignalError() instead")
    void postFileCampaignSoundSignalE(OAICampaignSound summary, QNetworkReply::NetworkError error_type, QString error_str);
    void postFileCampaignSoundSignalError(OAICampaignSound summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use postTTSCampaignSoundSignalError() instead")
    void postTTSCampaignSoundSignalE(OAICampaignSound summary, QNetworkReply::NetworkError error_type, QString error_str);
    void postTTSCampaignSoundSignalError(OAICampaignSound summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateCampaignBatchSignalError() instead")
    void updateCampaignBatchSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void updateCampaignBatchSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use deleteCampaignSoundSignalErrorFull() instead")
    void deleteCampaignSoundSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteCampaignSoundSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use findCampaignSoundsSignalErrorFull() instead")
    void findCampaignSoundsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void findCampaignSoundsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getCampaignBatchSignalErrorFull() instead")
    void getCampaignBatchSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getCampaignBatchSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getCampaignSoundSignalErrorFull() instead")
    void getCampaignSoundSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getCampaignSoundSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getCampaignSoundDataMp3SignalErrorFull() instead")
    void getCampaignSoundDataMp3SignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getCampaignSoundDataMp3SignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getCampaignSoundDataWavSignalErrorFull() instead")
    void getCampaignSoundDataWavSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getCampaignSoundDataWavSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use postCallCampaignSoundSignalErrorFull() instead")
    void postCallCampaignSoundSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void postCallCampaignSoundSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use postFileCampaignSoundSignalErrorFull() instead")
    void postFileCampaignSoundSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void postFileCampaignSoundSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use postTTSCampaignSoundSignalErrorFull() instead")
    void postTTSCampaignSoundSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void postTTSCampaignSoundSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateCampaignBatchSignalErrorFull() instead")
    void updateCampaignBatchSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateCampaignBatchSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
