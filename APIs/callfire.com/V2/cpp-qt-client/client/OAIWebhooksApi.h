/**
 * CallFire API Documentation
 * CallFire
 *
 * The version of the OpenAPI document: V2
 * Contact: support@callfire.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIWebhooksApi_H
#define OAI_OAIWebhooksApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIErrorResponse.h"
#include "OAIItemListWebhookResource.h"
#include "OAIResourceId.h"
#include "OAIWebhook.h"
#include "OAIWebhookPage.h"
#include "OAIWebhookResource.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIWebhooksApi : public QObject {
    Q_OBJECT

public:
    OAIWebhooksApi(const int timeOut = 0);
    ~OAIWebhooksApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  oai_webhook OAIWebhook [optional]
    */
    virtual void createWebhook(const ::OpenAPI::OptionalParam<OAIWebhook> &oai_webhook = ::OpenAPI::OptionalParam<OAIWebhook>());

    /**
    * @param[in]  id qint64 [required]
    */
    virtual void deleteWebhook(const qint64 &id);

    /**
    * @param[in]  fields QString [optional]
    */
    virtual void findWebhookResources(const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  fields QString [optional]
    * @param[in]  limit qint32 [optional]
    * @param[in]  offset qint32 [optional]
    * @param[in]  name QString [optional]
    * @param[in]  resource QString [optional]
    * @param[in]  event QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  enabled bool [optional]
    */
    virtual void findWebhooks(const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &limit = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &offset = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &name = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &resource = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &event = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &enabled = ::OpenAPI::OptionalParam<bool>());

    /**
    * @param[in]  id qint64 [required]
    * @param[in]  fields QString [optional]
    */
    virtual void getWebhook(const qint64 &id, const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  resource QString [required]
    * @param[in]  fields QString [optional]
    */
    virtual void getWebhookResource(const QString &resource, const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  id qint64 [required]
    * @param[in]  oai_webhook OAIWebhook [optional]
    */
    virtual void updateWebhook(const qint64 &id, const ::OpenAPI::OptionalParam<OAIWebhook> &oai_webhook = ::OpenAPI::OptionalParam<OAIWebhook>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void createWebhookCallback(OAIHttpRequestWorker *worker);
    void deleteWebhookCallback(OAIHttpRequestWorker *worker);
    void findWebhookResourcesCallback(OAIHttpRequestWorker *worker);
    void findWebhooksCallback(OAIHttpRequestWorker *worker);
    void getWebhookCallback(OAIHttpRequestWorker *worker);
    void getWebhookResourceCallback(OAIHttpRequestWorker *worker);
    void updateWebhookCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void createWebhookSignal(OAIResourceId summary);
    void deleteWebhookSignal();
    void findWebhookResourcesSignal(OAIItemListWebhookResource summary);
    void findWebhooksSignal(OAIWebhookPage summary);
    void getWebhookSignal(OAIWebhook summary);
    void getWebhookResourceSignal(OAIWebhookResource summary);
    void updateWebhookSignal();


    void createWebhookSignalFull(OAIHttpRequestWorker *worker, OAIResourceId summary);
    void deleteWebhookSignalFull(OAIHttpRequestWorker *worker);
    void findWebhookResourcesSignalFull(OAIHttpRequestWorker *worker, OAIItemListWebhookResource summary);
    void findWebhooksSignalFull(OAIHttpRequestWorker *worker, OAIWebhookPage summary);
    void getWebhookSignalFull(OAIHttpRequestWorker *worker, OAIWebhook summary);
    void getWebhookResourceSignalFull(OAIHttpRequestWorker *worker, OAIWebhookResource summary);
    void updateWebhookSignalFull(OAIHttpRequestWorker *worker);

    Q_DECL_DEPRECATED_X("Use createWebhookSignalError() instead")
    void createWebhookSignalE(OAIResourceId summary, QNetworkReply::NetworkError error_type, QString error_str);
    void createWebhookSignalError(OAIResourceId summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteWebhookSignalError() instead")
    void deleteWebhookSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void deleteWebhookSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use findWebhookResourcesSignalError() instead")
    void findWebhookResourcesSignalE(OAIItemListWebhookResource summary, QNetworkReply::NetworkError error_type, QString error_str);
    void findWebhookResourcesSignalError(OAIItemListWebhookResource summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use findWebhooksSignalError() instead")
    void findWebhooksSignalE(OAIWebhookPage summary, QNetworkReply::NetworkError error_type, QString error_str);
    void findWebhooksSignalError(OAIWebhookPage summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getWebhookSignalError() instead")
    void getWebhookSignalE(OAIWebhook summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getWebhookSignalError(OAIWebhook summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getWebhookResourceSignalError() instead")
    void getWebhookResourceSignalE(OAIWebhookResource summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getWebhookResourceSignalError(OAIWebhookResource summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateWebhookSignalError() instead")
    void updateWebhookSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void updateWebhookSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use createWebhookSignalErrorFull() instead")
    void createWebhookSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void createWebhookSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteWebhookSignalErrorFull() instead")
    void deleteWebhookSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteWebhookSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use findWebhookResourcesSignalErrorFull() instead")
    void findWebhookResourcesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void findWebhookResourcesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use findWebhooksSignalErrorFull() instead")
    void findWebhooksSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void findWebhooksSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getWebhookSignalErrorFull() instead")
    void getWebhookSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getWebhookSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getWebhookResourceSignalErrorFull() instead")
    void getWebhookResourceSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getWebhookResourceSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateWebhookSignalErrorFull() instead")
    void updateWebhookSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateWebhookSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
