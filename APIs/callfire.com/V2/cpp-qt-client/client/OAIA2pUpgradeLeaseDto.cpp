/**
 * CallFire API Documentation
 * CallFire
 *
 * The version of the OpenAPI document: V2
 * Contact: support@callfire.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIA2pUpgradeLeaseDto.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIA2pUpgradeLeaseDto::OAIA2pUpgradeLeaseDto(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIA2pUpgradeLeaseDto::OAIA2pUpgradeLeaseDto() {
    this->initializeModel();
}

OAIA2pUpgradeLeaseDto::~OAIA2pUpgradeLeaseDto() {}

void OAIA2pUpgradeLeaseDto::initializeModel() {

    m_blocked_isSet = false;
    m_blocked_isValid = false;

    m_canceled_isSet = false;
    m_canceled_isValid = false;

    m_created_at_isSet = false;
    m_created_at_isValid = false;

    m_deleted_isSet = false;
    m_deleted_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_invoice_id_isSet = false;
    m_invoice_id_isValid = false;

    m_next_billing_isSet = false;
    m_next_billing_isValid = false;

    m_packaged_isSet = false;
    m_packaged_isValid = false;

    m_prepaid_discount_id_isSet = false;
    m_prepaid_discount_id_isValid = false;

    m_price_isSet = false;
    m_price_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;

    m_updated_at_isSet = false;
    m_updated_at_isValid = false;
}

void OAIA2pUpgradeLeaseDto::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIA2pUpgradeLeaseDto::fromJsonObject(QJsonObject json) {

    m_blocked_isValid = ::OpenAPI::fromJsonValue(m_blocked, json[QString("blocked")]);
    m_blocked_isSet = !json[QString("blocked")].isNull() && m_blocked_isValid;

    m_canceled_isValid = ::OpenAPI::fromJsonValue(m_canceled, json[QString("canceled")]);
    m_canceled_isSet = !json[QString("canceled")].isNull() && m_canceled_isValid;

    m_created_at_isValid = ::OpenAPI::fromJsonValue(m_created_at, json[QString("createdAt")]);
    m_created_at_isSet = !json[QString("createdAt")].isNull() && m_created_at_isValid;

    m_deleted_isValid = ::OpenAPI::fromJsonValue(m_deleted, json[QString("deleted")]);
    m_deleted_isSet = !json[QString("deleted")].isNull() && m_deleted_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_invoice_id_isValid = ::OpenAPI::fromJsonValue(m_invoice_id, json[QString("invoiceId")]);
    m_invoice_id_isSet = !json[QString("invoiceId")].isNull() && m_invoice_id_isValid;

    m_next_billing_isValid = ::OpenAPI::fromJsonValue(m_next_billing, json[QString("nextBilling")]);
    m_next_billing_isSet = !json[QString("nextBilling")].isNull() && m_next_billing_isValid;

    m_packaged_isValid = ::OpenAPI::fromJsonValue(m_packaged, json[QString("packaged")]);
    m_packaged_isSet = !json[QString("packaged")].isNull() && m_packaged_isValid;

    m_prepaid_discount_id_isValid = ::OpenAPI::fromJsonValue(m_prepaid_discount_id, json[QString("prepaidDiscountId")]);
    m_prepaid_discount_id_isSet = !json[QString("prepaidDiscountId")].isNull() && m_prepaid_discount_id_isValid;

    m_price_isValid = ::OpenAPI::fromJsonValue(m_price, json[QString("price")]);
    m_price_isSet = !json[QString("price")].isNull() && m_price_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;

    m_updated_at_isValid = ::OpenAPI::fromJsonValue(m_updated_at, json[QString("updatedAt")]);
    m_updated_at_isSet = !json[QString("updatedAt")].isNull() && m_updated_at_isValid;
}

QString OAIA2pUpgradeLeaseDto::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIA2pUpgradeLeaseDto::asJsonObject() const {
    QJsonObject obj;
    if (m_blocked_isSet) {
        obj.insert(QString("blocked"), ::OpenAPI::toJsonValue(m_blocked));
    }
    if (m_canceled_isSet) {
        obj.insert(QString("canceled"), ::OpenAPI::toJsonValue(m_canceled));
    }
    if (m_created_at_isSet) {
        obj.insert(QString("createdAt"), ::OpenAPI::toJsonValue(m_created_at));
    }
    if (m_deleted_isSet) {
        obj.insert(QString("deleted"), ::OpenAPI::toJsonValue(m_deleted));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_invoice_id_isSet) {
        obj.insert(QString("invoiceId"), ::OpenAPI::toJsonValue(m_invoice_id));
    }
    if (m_next_billing_isSet) {
        obj.insert(QString("nextBilling"), ::OpenAPI::toJsonValue(m_next_billing));
    }
    if (m_packaged_isSet) {
        obj.insert(QString("packaged"), ::OpenAPI::toJsonValue(m_packaged));
    }
    if (m_prepaid_discount_id_isSet) {
        obj.insert(QString("prepaidDiscountId"), ::OpenAPI::toJsonValue(m_prepaid_discount_id));
    }
    if (m_price_isSet) {
        obj.insert(QString("price"), ::OpenAPI::toJsonValue(m_price));
    }
    if (m_type_isSet) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    if (m_updated_at_isSet) {
        obj.insert(QString("updatedAt"), ::OpenAPI::toJsonValue(m_updated_at));
    }
    return obj;
}

QDateTime OAIA2pUpgradeLeaseDto::getBlocked() const {
    return m_blocked;
}
void OAIA2pUpgradeLeaseDto::setBlocked(const QDateTime &blocked) {
    m_blocked = blocked;
    m_blocked_isSet = true;
}

bool OAIA2pUpgradeLeaseDto::is_blocked_Set() const{
    return m_blocked_isSet;
}

bool OAIA2pUpgradeLeaseDto::is_blocked_Valid() const{
    return m_blocked_isValid;
}

bool OAIA2pUpgradeLeaseDto::isCanceled() const {
    return m_canceled;
}
void OAIA2pUpgradeLeaseDto::setCanceled(const bool &canceled) {
    m_canceled = canceled;
    m_canceled_isSet = true;
}

bool OAIA2pUpgradeLeaseDto::is_canceled_Set() const{
    return m_canceled_isSet;
}

bool OAIA2pUpgradeLeaseDto::is_canceled_Valid() const{
    return m_canceled_isValid;
}

QDateTime OAIA2pUpgradeLeaseDto::getCreatedAt() const {
    return m_created_at;
}
void OAIA2pUpgradeLeaseDto::setCreatedAt(const QDateTime &created_at) {
    m_created_at = created_at;
    m_created_at_isSet = true;
}

bool OAIA2pUpgradeLeaseDto::is_created_at_Set() const{
    return m_created_at_isSet;
}

bool OAIA2pUpgradeLeaseDto::is_created_at_Valid() const{
    return m_created_at_isValid;
}

bool OAIA2pUpgradeLeaseDto::isDeleted() const {
    return m_deleted;
}
void OAIA2pUpgradeLeaseDto::setDeleted(const bool &deleted) {
    m_deleted = deleted;
    m_deleted_isSet = true;
}

bool OAIA2pUpgradeLeaseDto::is_deleted_Set() const{
    return m_deleted_isSet;
}

bool OAIA2pUpgradeLeaseDto::is_deleted_Valid() const{
    return m_deleted_isValid;
}

qint64 OAIA2pUpgradeLeaseDto::getId() const {
    return m_id;
}
void OAIA2pUpgradeLeaseDto::setId(const qint64 &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIA2pUpgradeLeaseDto::is_id_Set() const{
    return m_id_isSet;
}

bool OAIA2pUpgradeLeaseDto::is_id_Valid() const{
    return m_id_isValid;
}

qint64 OAIA2pUpgradeLeaseDto::getInvoiceId() const {
    return m_invoice_id;
}
void OAIA2pUpgradeLeaseDto::setInvoiceId(const qint64 &invoice_id) {
    m_invoice_id = invoice_id;
    m_invoice_id_isSet = true;
}

bool OAIA2pUpgradeLeaseDto::is_invoice_id_Set() const{
    return m_invoice_id_isSet;
}

bool OAIA2pUpgradeLeaseDto::is_invoice_id_Valid() const{
    return m_invoice_id_isValid;
}

QDateTime OAIA2pUpgradeLeaseDto::getNextBilling() const {
    return m_next_billing;
}
void OAIA2pUpgradeLeaseDto::setNextBilling(const QDateTime &next_billing) {
    m_next_billing = next_billing;
    m_next_billing_isSet = true;
}

bool OAIA2pUpgradeLeaseDto::is_next_billing_Set() const{
    return m_next_billing_isSet;
}

bool OAIA2pUpgradeLeaseDto::is_next_billing_Valid() const{
    return m_next_billing_isValid;
}

bool OAIA2pUpgradeLeaseDto::isPackaged() const {
    return m_packaged;
}
void OAIA2pUpgradeLeaseDto::setPackaged(const bool &packaged) {
    m_packaged = packaged;
    m_packaged_isSet = true;
}

bool OAIA2pUpgradeLeaseDto::is_packaged_Set() const{
    return m_packaged_isSet;
}

bool OAIA2pUpgradeLeaseDto::is_packaged_Valid() const{
    return m_packaged_isValid;
}

qint64 OAIA2pUpgradeLeaseDto::getPrepaidDiscountId() const {
    return m_prepaid_discount_id;
}
void OAIA2pUpgradeLeaseDto::setPrepaidDiscountId(const qint64 &prepaid_discount_id) {
    m_prepaid_discount_id = prepaid_discount_id;
    m_prepaid_discount_id_isSet = true;
}

bool OAIA2pUpgradeLeaseDto::is_prepaid_discount_id_Set() const{
    return m_prepaid_discount_id_isSet;
}

bool OAIA2pUpgradeLeaseDto::is_prepaid_discount_id_Valid() const{
    return m_prepaid_discount_id_isValid;
}

double OAIA2pUpgradeLeaseDto::getPrice() const {
    return m_price;
}
void OAIA2pUpgradeLeaseDto::setPrice(const double &price) {
    m_price = price;
    m_price_isSet = true;
}

bool OAIA2pUpgradeLeaseDto::is_price_Set() const{
    return m_price_isSet;
}

bool OAIA2pUpgradeLeaseDto::is_price_Valid() const{
    return m_price_isValid;
}

QString OAIA2pUpgradeLeaseDto::getType() const {
    return m_type;
}
void OAIA2pUpgradeLeaseDto::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIA2pUpgradeLeaseDto::is_type_Set() const{
    return m_type_isSet;
}

bool OAIA2pUpgradeLeaseDto::is_type_Valid() const{
    return m_type_isValid;
}

QDateTime OAIA2pUpgradeLeaseDto::getUpdatedAt() const {
    return m_updated_at;
}
void OAIA2pUpgradeLeaseDto::setUpdatedAt(const QDateTime &updated_at) {
    m_updated_at = updated_at;
    m_updated_at_isSet = true;
}

bool OAIA2pUpgradeLeaseDto::is_updated_at_Set() const{
    return m_updated_at_isSet;
}

bool OAIA2pUpgradeLeaseDto::is_updated_at_Valid() const{
    return m_updated_at_isValid;
}

bool OAIA2pUpgradeLeaseDto::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_blocked_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_canceled_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_created_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_deleted_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_invoice_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_next_billing_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_packaged_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_prepaid_discount_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_price_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_updated_at_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIA2pUpgradeLeaseDto::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
