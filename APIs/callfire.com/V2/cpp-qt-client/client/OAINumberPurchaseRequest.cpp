/**
 * CallFire API Documentation
 * CallFire
 *
 * The version of the OpenAPI document: V2
 * Contact: support@callfire.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAINumberPurchaseRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAINumberPurchaseRequest::OAINumberPurchaseRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAINumberPurchaseRequest::OAINumberPurchaseRequest() {
    this->initializeModel();
}

OAINumberPurchaseRequest::~OAINumberPurchaseRequest() {}

void OAINumberPurchaseRequest::initializeModel() {

    m_city_isSet = false;
    m_city_isValid = false;

    m_local_count_isSet = false;
    m_local_count_isValid = false;

    m_numbers_isSet = false;
    m_numbers_isValid = false;

    m_prefix_isSet = false;
    m_prefix_isValid = false;

    m_promo_isSet = false;
    m_promo_isValid = false;

    m_state_isSet = false;
    m_state_isValid = false;

    m_toll_free_count_isSet = false;
    m_toll_free_count_isValid = false;

    m_zipcode_isSet = false;
    m_zipcode_isValid = false;
}

void OAINumberPurchaseRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAINumberPurchaseRequest::fromJsonObject(QJsonObject json) {

    m_city_isValid = ::OpenAPI::fromJsonValue(m_city, json[QString("city")]);
    m_city_isSet = !json[QString("city")].isNull() && m_city_isValid;

    m_local_count_isValid = ::OpenAPI::fromJsonValue(m_local_count, json[QString("localCount")]);
    m_local_count_isSet = !json[QString("localCount")].isNull() && m_local_count_isValid;

    m_numbers_isValid = ::OpenAPI::fromJsonValue(m_numbers, json[QString("numbers")]);
    m_numbers_isSet = !json[QString("numbers")].isNull() && m_numbers_isValid;

    m_prefix_isValid = ::OpenAPI::fromJsonValue(m_prefix, json[QString("prefix")]);
    m_prefix_isSet = !json[QString("prefix")].isNull() && m_prefix_isValid;

    m_promo_isValid = ::OpenAPI::fromJsonValue(m_promo, json[QString("promo")]);
    m_promo_isSet = !json[QString("promo")].isNull() && m_promo_isValid;

    m_state_isValid = ::OpenAPI::fromJsonValue(m_state, json[QString("state")]);
    m_state_isSet = !json[QString("state")].isNull() && m_state_isValid;

    m_toll_free_count_isValid = ::OpenAPI::fromJsonValue(m_toll_free_count, json[QString("tollFreeCount")]);
    m_toll_free_count_isSet = !json[QString("tollFreeCount")].isNull() && m_toll_free_count_isValid;

    m_zipcode_isValid = ::OpenAPI::fromJsonValue(m_zipcode, json[QString("zipcode")]);
    m_zipcode_isSet = !json[QString("zipcode")].isNull() && m_zipcode_isValid;
}

QString OAINumberPurchaseRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAINumberPurchaseRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_city_isSet) {
        obj.insert(QString("city"), ::OpenAPI::toJsonValue(m_city));
    }
    if (m_local_count_isSet) {
        obj.insert(QString("localCount"), ::OpenAPI::toJsonValue(m_local_count));
    }
    if (m_numbers.size() > 0) {
        obj.insert(QString("numbers"), ::OpenAPI::toJsonValue(m_numbers));
    }
    if (m_prefix_isSet) {
        obj.insert(QString("prefix"), ::OpenAPI::toJsonValue(m_prefix));
    }
    if (m_promo_isSet) {
        obj.insert(QString("promo"), ::OpenAPI::toJsonValue(m_promo));
    }
    if (m_state_isSet) {
        obj.insert(QString("state"), ::OpenAPI::toJsonValue(m_state));
    }
    if (m_toll_free_count_isSet) {
        obj.insert(QString("tollFreeCount"), ::OpenAPI::toJsonValue(m_toll_free_count));
    }
    if (m_zipcode_isSet) {
        obj.insert(QString("zipcode"), ::OpenAPI::toJsonValue(m_zipcode));
    }
    return obj;
}

QString OAINumberPurchaseRequest::getCity() const {
    return m_city;
}
void OAINumberPurchaseRequest::setCity(const QString &city) {
    m_city = city;
    m_city_isSet = true;
}

bool OAINumberPurchaseRequest::is_city_Set() const{
    return m_city_isSet;
}

bool OAINumberPurchaseRequest::is_city_Valid() const{
    return m_city_isValid;
}

qint32 OAINumberPurchaseRequest::getLocalCount() const {
    return m_local_count;
}
void OAINumberPurchaseRequest::setLocalCount(const qint32 &local_count) {
    m_local_count = local_count;
    m_local_count_isSet = true;
}

bool OAINumberPurchaseRequest::is_local_count_Set() const{
    return m_local_count_isSet;
}

bool OAINumberPurchaseRequest::is_local_count_Valid() const{
    return m_local_count_isValid;
}

QList<QString> OAINumberPurchaseRequest::getNumbers() const {
    return m_numbers;
}
void OAINumberPurchaseRequest::setNumbers(const QList<QString> &numbers) {
    m_numbers = numbers;
    m_numbers_isSet = true;
}

bool OAINumberPurchaseRequest::is_numbers_Set() const{
    return m_numbers_isSet;
}

bool OAINumberPurchaseRequest::is_numbers_Valid() const{
    return m_numbers_isValid;
}

QString OAINumberPurchaseRequest::getPrefix() const {
    return m_prefix;
}
void OAINumberPurchaseRequest::setPrefix(const QString &prefix) {
    m_prefix = prefix;
    m_prefix_isSet = true;
}

bool OAINumberPurchaseRequest::is_prefix_Set() const{
    return m_prefix_isSet;
}

bool OAINumberPurchaseRequest::is_prefix_Valid() const{
    return m_prefix_isValid;
}

QString OAINumberPurchaseRequest::getPromo() const {
    return m_promo;
}
void OAINumberPurchaseRequest::setPromo(const QString &promo) {
    m_promo = promo;
    m_promo_isSet = true;
}

bool OAINumberPurchaseRequest::is_promo_Set() const{
    return m_promo_isSet;
}

bool OAINumberPurchaseRequest::is_promo_Valid() const{
    return m_promo_isValid;
}

QString OAINumberPurchaseRequest::getState() const {
    return m_state;
}
void OAINumberPurchaseRequest::setState(const QString &state) {
    m_state = state;
    m_state_isSet = true;
}

bool OAINumberPurchaseRequest::is_state_Set() const{
    return m_state_isSet;
}

bool OAINumberPurchaseRequest::is_state_Valid() const{
    return m_state_isValid;
}

qint32 OAINumberPurchaseRequest::getTollFreeCount() const {
    return m_toll_free_count;
}
void OAINumberPurchaseRequest::setTollFreeCount(const qint32 &toll_free_count) {
    m_toll_free_count = toll_free_count;
    m_toll_free_count_isSet = true;
}

bool OAINumberPurchaseRequest::is_toll_free_count_Set() const{
    return m_toll_free_count_isSet;
}

bool OAINumberPurchaseRequest::is_toll_free_count_Valid() const{
    return m_toll_free_count_isValid;
}

QString OAINumberPurchaseRequest::getZipcode() const {
    return m_zipcode;
}
void OAINumberPurchaseRequest::setZipcode(const QString &zipcode) {
    m_zipcode = zipcode;
    m_zipcode_isSet = true;
}

bool OAINumberPurchaseRequest::is_zipcode_Set() const{
    return m_zipcode_isSet;
}

bool OAINumberPurchaseRequest::is_zipcode_Valid() const{
    return m_zipcode_isValid;
}

bool OAINumberPurchaseRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_city_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_local_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_numbers.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_prefix_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_promo_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_state_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_toll_free_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_zipcode_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAINumberPurchaseRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
