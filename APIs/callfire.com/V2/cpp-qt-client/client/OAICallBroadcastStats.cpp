/**
 * CallFire API Documentation
 * CallFire
 *
 * The version of the OpenAPI document: V2
 * Contact: support@callfire.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICallBroadcastStats.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICallBroadcastStats::OAICallBroadcastStats(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICallBroadcastStats::OAICallBroadcastStats() {
    this->initializeModel();
}

OAICallBroadcastStats::~OAICallBroadcastStats() {}

void OAICallBroadcastStats::initializeModel() {

    m_answering_machine_count_isSet = false;
    m_answering_machine_count_isValid = false;

    m_billed_amount_isSet = false;
    m_billed_amount_isValid = false;

    m_billed_duration_isSet = false;
    m_billed_duration_isValid = false;

    m_busy_count_isSet = false;
    m_busy_count_isValid = false;

    m_calls_attempted_isSet = false;
    m_calls_attempted_isValid = false;

    m_calls_awaiting_redial_isSet = false;
    m_calls_awaiting_redial_isValid = false;

    m_calls_duration_isSet = false;
    m_calls_duration_isValid = false;

    m_calls_live_answer_isSet = false;
    m_calls_live_answer_isValid = false;

    m_calls_placed_isSet = false;
    m_calls_placed_isValid = false;

    m_calls_remaining_isSet = false;
    m_calls_remaining_isValid = false;

    m_dialed_count_isSet = false;
    m_dialed_count_isValid = false;

    m_do_not_call_count_isSet = false;
    m_do_not_call_count_isValid = false;

    m_error_count_isSet = false;
    m_error_count_isValid = false;

    m_live_count_isSet = false;
    m_live_count_isValid = false;

    m_misc_count_isSet = false;
    m_misc_count_isValid = false;

    m_no_answer_count_isSet = false;
    m_no_answer_count_isValid = false;

    m_remaining_outbound_count_isSet = false;
    m_remaining_outbound_count_isValid = false;

    m_response_rate_percent_isSet = false;
    m_response_rate_percent_isValid = false;

    m_total_count_isSet = false;
    m_total_count_isValid = false;

    m_total_outbound_count_isSet = false;
    m_total_outbound_count_isValid = false;

    m_transfer_count_isSet = false;
    m_transfer_count_isValid = false;
}

void OAICallBroadcastStats::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICallBroadcastStats::fromJsonObject(QJsonObject json) {

    m_answering_machine_count_isValid = ::OpenAPI::fromJsonValue(m_answering_machine_count, json[QString("answeringMachineCount")]);
    m_answering_machine_count_isSet = !json[QString("answeringMachineCount")].isNull() && m_answering_machine_count_isValid;

    m_billed_amount_isValid = ::OpenAPI::fromJsonValue(m_billed_amount, json[QString("billedAmount")]);
    m_billed_amount_isSet = !json[QString("billedAmount")].isNull() && m_billed_amount_isValid;

    m_billed_duration_isValid = ::OpenAPI::fromJsonValue(m_billed_duration, json[QString("billedDuration")]);
    m_billed_duration_isSet = !json[QString("billedDuration")].isNull() && m_billed_duration_isValid;

    m_busy_count_isValid = ::OpenAPI::fromJsonValue(m_busy_count, json[QString("busyCount")]);
    m_busy_count_isSet = !json[QString("busyCount")].isNull() && m_busy_count_isValid;

    m_calls_attempted_isValid = ::OpenAPI::fromJsonValue(m_calls_attempted, json[QString("callsAttempted")]);
    m_calls_attempted_isSet = !json[QString("callsAttempted")].isNull() && m_calls_attempted_isValid;

    m_calls_awaiting_redial_isValid = ::OpenAPI::fromJsonValue(m_calls_awaiting_redial, json[QString("callsAwaitingRedial")]);
    m_calls_awaiting_redial_isSet = !json[QString("callsAwaitingRedial")].isNull() && m_calls_awaiting_redial_isValid;

    m_calls_duration_isValid = ::OpenAPI::fromJsonValue(m_calls_duration, json[QString("callsDuration")]);
    m_calls_duration_isSet = !json[QString("callsDuration")].isNull() && m_calls_duration_isValid;

    m_calls_live_answer_isValid = ::OpenAPI::fromJsonValue(m_calls_live_answer, json[QString("callsLiveAnswer")]);
    m_calls_live_answer_isSet = !json[QString("callsLiveAnswer")].isNull() && m_calls_live_answer_isValid;

    m_calls_placed_isValid = ::OpenAPI::fromJsonValue(m_calls_placed, json[QString("callsPlaced")]);
    m_calls_placed_isSet = !json[QString("callsPlaced")].isNull() && m_calls_placed_isValid;

    m_calls_remaining_isValid = ::OpenAPI::fromJsonValue(m_calls_remaining, json[QString("callsRemaining")]);
    m_calls_remaining_isSet = !json[QString("callsRemaining")].isNull() && m_calls_remaining_isValid;

    m_dialed_count_isValid = ::OpenAPI::fromJsonValue(m_dialed_count, json[QString("dialedCount")]);
    m_dialed_count_isSet = !json[QString("dialedCount")].isNull() && m_dialed_count_isValid;

    m_do_not_call_count_isValid = ::OpenAPI::fromJsonValue(m_do_not_call_count, json[QString("doNotCallCount")]);
    m_do_not_call_count_isSet = !json[QString("doNotCallCount")].isNull() && m_do_not_call_count_isValid;

    m_error_count_isValid = ::OpenAPI::fromJsonValue(m_error_count, json[QString("errorCount")]);
    m_error_count_isSet = !json[QString("errorCount")].isNull() && m_error_count_isValid;

    m_live_count_isValid = ::OpenAPI::fromJsonValue(m_live_count, json[QString("liveCount")]);
    m_live_count_isSet = !json[QString("liveCount")].isNull() && m_live_count_isValid;

    m_misc_count_isValid = ::OpenAPI::fromJsonValue(m_misc_count, json[QString("miscCount")]);
    m_misc_count_isSet = !json[QString("miscCount")].isNull() && m_misc_count_isValid;

    m_no_answer_count_isValid = ::OpenAPI::fromJsonValue(m_no_answer_count, json[QString("noAnswerCount")]);
    m_no_answer_count_isSet = !json[QString("noAnswerCount")].isNull() && m_no_answer_count_isValid;

    m_remaining_outbound_count_isValid = ::OpenAPI::fromJsonValue(m_remaining_outbound_count, json[QString("remainingOutboundCount")]);
    m_remaining_outbound_count_isSet = !json[QString("remainingOutboundCount")].isNull() && m_remaining_outbound_count_isValid;

    m_response_rate_percent_isValid = ::OpenAPI::fromJsonValue(m_response_rate_percent, json[QString("responseRatePercent")]);
    m_response_rate_percent_isSet = !json[QString("responseRatePercent")].isNull() && m_response_rate_percent_isValid;

    m_total_count_isValid = ::OpenAPI::fromJsonValue(m_total_count, json[QString("totalCount")]);
    m_total_count_isSet = !json[QString("totalCount")].isNull() && m_total_count_isValid;

    m_total_outbound_count_isValid = ::OpenAPI::fromJsonValue(m_total_outbound_count, json[QString("totalOutboundCount")]);
    m_total_outbound_count_isSet = !json[QString("totalOutboundCount")].isNull() && m_total_outbound_count_isValid;

    m_transfer_count_isValid = ::OpenAPI::fromJsonValue(m_transfer_count, json[QString("transferCount")]);
    m_transfer_count_isSet = !json[QString("transferCount")].isNull() && m_transfer_count_isValid;
}

QString OAICallBroadcastStats::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICallBroadcastStats::asJsonObject() const {
    QJsonObject obj;
    if (m_answering_machine_count_isSet) {
        obj.insert(QString("answeringMachineCount"), ::OpenAPI::toJsonValue(m_answering_machine_count));
    }
    if (m_billed_amount_isSet) {
        obj.insert(QString("billedAmount"), ::OpenAPI::toJsonValue(m_billed_amount));
    }
    if (m_billed_duration_isSet) {
        obj.insert(QString("billedDuration"), ::OpenAPI::toJsonValue(m_billed_duration));
    }
    if (m_busy_count_isSet) {
        obj.insert(QString("busyCount"), ::OpenAPI::toJsonValue(m_busy_count));
    }
    if (m_calls_attempted_isSet) {
        obj.insert(QString("callsAttempted"), ::OpenAPI::toJsonValue(m_calls_attempted));
    }
    if (m_calls_awaiting_redial_isSet) {
        obj.insert(QString("callsAwaitingRedial"), ::OpenAPI::toJsonValue(m_calls_awaiting_redial));
    }
    if (m_calls_duration_isSet) {
        obj.insert(QString("callsDuration"), ::OpenAPI::toJsonValue(m_calls_duration));
    }
    if (m_calls_live_answer_isSet) {
        obj.insert(QString("callsLiveAnswer"), ::OpenAPI::toJsonValue(m_calls_live_answer));
    }
    if (m_calls_placed_isSet) {
        obj.insert(QString("callsPlaced"), ::OpenAPI::toJsonValue(m_calls_placed));
    }
    if (m_calls_remaining_isSet) {
        obj.insert(QString("callsRemaining"), ::OpenAPI::toJsonValue(m_calls_remaining));
    }
    if (m_dialed_count_isSet) {
        obj.insert(QString("dialedCount"), ::OpenAPI::toJsonValue(m_dialed_count));
    }
    if (m_do_not_call_count_isSet) {
        obj.insert(QString("doNotCallCount"), ::OpenAPI::toJsonValue(m_do_not_call_count));
    }
    if (m_error_count_isSet) {
        obj.insert(QString("errorCount"), ::OpenAPI::toJsonValue(m_error_count));
    }
    if (m_live_count_isSet) {
        obj.insert(QString("liveCount"), ::OpenAPI::toJsonValue(m_live_count));
    }
    if (m_misc_count_isSet) {
        obj.insert(QString("miscCount"), ::OpenAPI::toJsonValue(m_misc_count));
    }
    if (m_no_answer_count_isSet) {
        obj.insert(QString("noAnswerCount"), ::OpenAPI::toJsonValue(m_no_answer_count));
    }
    if (m_remaining_outbound_count_isSet) {
        obj.insert(QString("remainingOutboundCount"), ::OpenAPI::toJsonValue(m_remaining_outbound_count));
    }
    if (m_response_rate_percent_isSet) {
        obj.insert(QString("responseRatePercent"), ::OpenAPI::toJsonValue(m_response_rate_percent));
    }
    if (m_total_count_isSet) {
        obj.insert(QString("totalCount"), ::OpenAPI::toJsonValue(m_total_count));
    }
    if (m_total_outbound_count_isSet) {
        obj.insert(QString("totalOutboundCount"), ::OpenAPI::toJsonValue(m_total_outbound_count));
    }
    if (m_transfer_count_isSet) {
        obj.insert(QString("transferCount"), ::OpenAPI::toJsonValue(m_transfer_count));
    }
    return obj;
}

qint32 OAICallBroadcastStats::getAnsweringMachineCount() const {
    return m_answering_machine_count;
}
void OAICallBroadcastStats::setAnsweringMachineCount(const qint32 &answering_machine_count) {
    m_answering_machine_count = answering_machine_count;
    m_answering_machine_count_isSet = true;
}

bool OAICallBroadcastStats::is_answering_machine_count_Set() const{
    return m_answering_machine_count_isSet;
}

bool OAICallBroadcastStats::is_answering_machine_count_Valid() const{
    return m_answering_machine_count_isValid;
}

double OAICallBroadcastStats::getBilledAmount() const {
    return m_billed_amount;
}
void OAICallBroadcastStats::setBilledAmount(const double &billed_amount) {
    m_billed_amount = billed_amount;
    m_billed_amount_isSet = true;
}

bool OAICallBroadcastStats::is_billed_amount_Set() const{
    return m_billed_amount_isSet;
}

bool OAICallBroadcastStats::is_billed_amount_Valid() const{
    return m_billed_amount_isValid;
}

qint32 OAICallBroadcastStats::getBilledDuration() const {
    return m_billed_duration;
}
void OAICallBroadcastStats::setBilledDuration(const qint32 &billed_duration) {
    m_billed_duration = billed_duration;
    m_billed_duration_isSet = true;
}

bool OAICallBroadcastStats::is_billed_duration_Set() const{
    return m_billed_duration_isSet;
}

bool OAICallBroadcastStats::is_billed_duration_Valid() const{
    return m_billed_duration_isValid;
}

qint32 OAICallBroadcastStats::getBusyCount() const {
    return m_busy_count;
}
void OAICallBroadcastStats::setBusyCount(const qint32 &busy_count) {
    m_busy_count = busy_count;
    m_busy_count_isSet = true;
}

bool OAICallBroadcastStats::is_busy_count_Set() const{
    return m_busy_count_isSet;
}

bool OAICallBroadcastStats::is_busy_count_Valid() const{
    return m_busy_count_isValid;
}

qint32 OAICallBroadcastStats::getCallsAttempted() const {
    return m_calls_attempted;
}
void OAICallBroadcastStats::setCallsAttempted(const qint32 &calls_attempted) {
    m_calls_attempted = calls_attempted;
    m_calls_attempted_isSet = true;
}

bool OAICallBroadcastStats::is_calls_attempted_Set() const{
    return m_calls_attempted_isSet;
}

bool OAICallBroadcastStats::is_calls_attempted_Valid() const{
    return m_calls_attempted_isValid;
}

qint32 OAICallBroadcastStats::getCallsAwaitingRedial() const {
    return m_calls_awaiting_redial;
}
void OAICallBroadcastStats::setCallsAwaitingRedial(const qint32 &calls_awaiting_redial) {
    m_calls_awaiting_redial = calls_awaiting_redial;
    m_calls_awaiting_redial_isSet = true;
}

bool OAICallBroadcastStats::is_calls_awaiting_redial_Set() const{
    return m_calls_awaiting_redial_isSet;
}

bool OAICallBroadcastStats::is_calls_awaiting_redial_Valid() const{
    return m_calls_awaiting_redial_isValid;
}

qint32 OAICallBroadcastStats::getCallsDuration() const {
    return m_calls_duration;
}
void OAICallBroadcastStats::setCallsDuration(const qint32 &calls_duration) {
    m_calls_duration = calls_duration;
    m_calls_duration_isSet = true;
}

bool OAICallBroadcastStats::is_calls_duration_Set() const{
    return m_calls_duration_isSet;
}

bool OAICallBroadcastStats::is_calls_duration_Valid() const{
    return m_calls_duration_isValid;
}

qint32 OAICallBroadcastStats::getCallsLiveAnswer() const {
    return m_calls_live_answer;
}
void OAICallBroadcastStats::setCallsLiveAnswer(const qint32 &calls_live_answer) {
    m_calls_live_answer = calls_live_answer;
    m_calls_live_answer_isSet = true;
}

bool OAICallBroadcastStats::is_calls_live_answer_Set() const{
    return m_calls_live_answer_isSet;
}

bool OAICallBroadcastStats::is_calls_live_answer_Valid() const{
    return m_calls_live_answer_isValid;
}

qint32 OAICallBroadcastStats::getCallsPlaced() const {
    return m_calls_placed;
}
void OAICallBroadcastStats::setCallsPlaced(const qint32 &calls_placed) {
    m_calls_placed = calls_placed;
    m_calls_placed_isSet = true;
}

bool OAICallBroadcastStats::is_calls_placed_Set() const{
    return m_calls_placed_isSet;
}

bool OAICallBroadcastStats::is_calls_placed_Valid() const{
    return m_calls_placed_isValid;
}

qint32 OAICallBroadcastStats::getCallsRemaining() const {
    return m_calls_remaining;
}
void OAICallBroadcastStats::setCallsRemaining(const qint32 &calls_remaining) {
    m_calls_remaining = calls_remaining;
    m_calls_remaining_isSet = true;
}

bool OAICallBroadcastStats::is_calls_remaining_Set() const{
    return m_calls_remaining_isSet;
}

bool OAICallBroadcastStats::is_calls_remaining_Valid() const{
    return m_calls_remaining_isValid;
}

qint32 OAICallBroadcastStats::getDialedCount() const {
    return m_dialed_count;
}
void OAICallBroadcastStats::setDialedCount(const qint32 &dialed_count) {
    m_dialed_count = dialed_count;
    m_dialed_count_isSet = true;
}

bool OAICallBroadcastStats::is_dialed_count_Set() const{
    return m_dialed_count_isSet;
}

bool OAICallBroadcastStats::is_dialed_count_Valid() const{
    return m_dialed_count_isValid;
}

qint32 OAICallBroadcastStats::getDoNotCallCount() const {
    return m_do_not_call_count;
}
void OAICallBroadcastStats::setDoNotCallCount(const qint32 &do_not_call_count) {
    m_do_not_call_count = do_not_call_count;
    m_do_not_call_count_isSet = true;
}

bool OAICallBroadcastStats::is_do_not_call_count_Set() const{
    return m_do_not_call_count_isSet;
}

bool OAICallBroadcastStats::is_do_not_call_count_Valid() const{
    return m_do_not_call_count_isValid;
}

qint32 OAICallBroadcastStats::getErrorCount() const {
    return m_error_count;
}
void OAICallBroadcastStats::setErrorCount(const qint32 &error_count) {
    m_error_count = error_count;
    m_error_count_isSet = true;
}

bool OAICallBroadcastStats::is_error_count_Set() const{
    return m_error_count_isSet;
}

bool OAICallBroadcastStats::is_error_count_Valid() const{
    return m_error_count_isValid;
}

qint32 OAICallBroadcastStats::getLiveCount() const {
    return m_live_count;
}
void OAICallBroadcastStats::setLiveCount(const qint32 &live_count) {
    m_live_count = live_count;
    m_live_count_isSet = true;
}

bool OAICallBroadcastStats::is_live_count_Set() const{
    return m_live_count_isSet;
}

bool OAICallBroadcastStats::is_live_count_Valid() const{
    return m_live_count_isValid;
}

qint32 OAICallBroadcastStats::getMiscCount() const {
    return m_misc_count;
}
void OAICallBroadcastStats::setMiscCount(const qint32 &misc_count) {
    m_misc_count = misc_count;
    m_misc_count_isSet = true;
}

bool OAICallBroadcastStats::is_misc_count_Set() const{
    return m_misc_count_isSet;
}

bool OAICallBroadcastStats::is_misc_count_Valid() const{
    return m_misc_count_isValid;
}

qint32 OAICallBroadcastStats::getNoAnswerCount() const {
    return m_no_answer_count;
}
void OAICallBroadcastStats::setNoAnswerCount(const qint32 &no_answer_count) {
    m_no_answer_count = no_answer_count;
    m_no_answer_count_isSet = true;
}

bool OAICallBroadcastStats::is_no_answer_count_Set() const{
    return m_no_answer_count_isSet;
}

bool OAICallBroadcastStats::is_no_answer_count_Valid() const{
    return m_no_answer_count_isValid;
}

qint32 OAICallBroadcastStats::getRemainingOutboundCount() const {
    return m_remaining_outbound_count;
}
void OAICallBroadcastStats::setRemainingOutboundCount(const qint32 &remaining_outbound_count) {
    m_remaining_outbound_count = remaining_outbound_count;
    m_remaining_outbound_count_isSet = true;
}

bool OAICallBroadcastStats::is_remaining_outbound_count_Set() const{
    return m_remaining_outbound_count_isSet;
}

bool OAICallBroadcastStats::is_remaining_outbound_count_Valid() const{
    return m_remaining_outbound_count_isValid;
}

qint32 OAICallBroadcastStats::getResponseRatePercent() const {
    return m_response_rate_percent;
}
void OAICallBroadcastStats::setResponseRatePercent(const qint32 &response_rate_percent) {
    m_response_rate_percent = response_rate_percent;
    m_response_rate_percent_isSet = true;
}

bool OAICallBroadcastStats::is_response_rate_percent_Set() const{
    return m_response_rate_percent_isSet;
}

bool OAICallBroadcastStats::is_response_rate_percent_Valid() const{
    return m_response_rate_percent_isValid;
}

qint32 OAICallBroadcastStats::getTotalCount() const {
    return m_total_count;
}
void OAICallBroadcastStats::setTotalCount(const qint32 &total_count) {
    m_total_count = total_count;
    m_total_count_isSet = true;
}

bool OAICallBroadcastStats::is_total_count_Set() const{
    return m_total_count_isSet;
}

bool OAICallBroadcastStats::is_total_count_Valid() const{
    return m_total_count_isValid;
}

qint32 OAICallBroadcastStats::getTotalOutboundCount() const {
    return m_total_outbound_count;
}
void OAICallBroadcastStats::setTotalOutboundCount(const qint32 &total_outbound_count) {
    m_total_outbound_count = total_outbound_count;
    m_total_outbound_count_isSet = true;
}

bool OAICallBroadcastStats::is_total_outbound_count_Set() const{
    return m_total_outbound_count_isSet;
}

bool OAICallBroadcastStats::is_total_outbound_count_Valid() const{
    return m_total_outbound_count_isValid;
}

qint32 OAICallBroadcastStats::getTransferCount() const {
    return m_transfer_count;
}
void OAICallBroadcastStats::setTransferCount(const qint32 &transfer_count) {
    m_transfer_count = transfer_count;
    m_transfer_count_isSet = true;
}

bool OAICallBroadcastStats::is_transfer_count_Set() const{
    return m_transfer_count_isSet;
}

bool OAICallBroadcastStats::is_transfer_count_Valid() const{
    return m_transfer_count_isValid;
}

bool OAICallBroadcastStats::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_answering_machine_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_billed_amount_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_billed_duration_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_busy_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_calls_attempted_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_calls_awaiting_redial_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_calls_duration_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_calls_live_answer_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_calls_placed_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_calls_remaining_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_dialed_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_do_not_call_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_error_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_live_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_misc_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_no_answer_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_remaining_outbound_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_response_rate_percent_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_total_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_total_outbound_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_transfer_count_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICallBroadcastStats::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
