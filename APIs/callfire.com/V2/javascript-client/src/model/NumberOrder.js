/**
 * CallFire API Documentation
 * CallFire
 *
 * The version of the OpenAPI document: V2
 * Contact: support@callfire.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import NumberOrderItem from './NumberOrderItem';

/**
 * The NumberOrder model module.
 * @module model/NumberOrder
 * @version V2
 */
class NumberOrder {
    /**
     * Constructs a new <code>NumberOrder</code>.
     * Represents an order created on the CallFire platform
     * @alias module:model/NumberOrder
     */
    constructor() { 
        
        NumberOrder.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>NumberOrder</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/NumberOrder} obj Optional instance to populate.
     * @return {module:model/NumberOrder} The populated <code>NumberOrder</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new NumberOrder();

            if (data.hasOwnProperty('created')) {
                obj['created'] = ApiClient.convertToType(data['created'], 'Number');
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'Number');
            }
            if (data.hasOwnProperty('keywords')) {
                obj['keywords'] = NumberOrderItem.constructFromObject(data['keywords']);
            }
            if (data.hasOwnProperty('localNumbers')) {
                obj['localNumbers'] = NumberOrderItem.constructFromObject(data['localNumbers']);
            }
            if (data.hasOwnProperty('salesTax')) {
                obj['salesTax'] = ApiClient.convertToType(data['salesTax'], 'Number');
            }
            if (data.hasOwnProperty('status')) {
                obj['status'] = ApiClient.convertToType(data['status'], 'String');
            }
            if (data.hasOwnProperty('summary')) {
                obj['summary'] = ApiClient.convertToType(data['summary'], 'Number');
            }
            if (data.hasOwnProperty('tollFreeNumbers')) {
                obj['tollFreeNumbers'] = NumberOrderItem.constructFromObject(data['tollFreeNumbers']);
            }
            if (data.hasOwnProperty('total')) {
                obj['total'] = ApiClient.convertToType(data['total'], 'Number');
            }
            if (data.hasOwnProperty('totalCost')) {
                obj['totalCost'] = ApiClient.convertToType(data['totalCost'], 'Number');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>NumberOrder</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>NumberOrder</code>.
     */
    static validateJSON(data) {
        // validate the optional field `keywords`
        if (data['keywords']) { // data not null
          NumberOrderItem.validateJSON(data['keywords']);
        }
        // validate the optional field `localNumbers`
        if (data['localNumbers']) { // data not null
          NumberOrderItem.validateJSON(data['localNumbers']);
        }
        // ensure the json data is a string
        if (data['status'] && !(typeof data['status'] === 'string' || data['status'] instanceof String)) {
            throw new Error("Expected the field `status` to be a primitive type in the JSON string but got " + data['status']);
        }
        // validate the optional field `tollFreeNumbers`
        if (data['tollFreeNumbers']) { // data not null
          NumberOrderItem.validateJSON(data['tollFreeNumbers']);
        }

        return true;
    }


}



/**
 * The time when the given resource was created, formatted in unix time milliseconds (read only). Example: 1473781817000
 * @member {Number} created
 */
NumberOrder.prototype['created'] = undefined;

/**
 * An id of an order
 * @member {Number} id
 */
NumberOrder.prototype['id'] = undefined;

/**
 * @member {module:model/NumberOrderItem} keywords
 */
NumberOrder.prototype['keywords'] = undefined;

/**
 * @member {module:model/NumberOrderItem} localNumbers
 */
NumberOrder.prototype['localNumbers'] = undefined;

/**
 * ~
 * @member {Number} salesTax
 */
NumberOrder.prototype['salesTax'] = undefined;

/**
 * A current status of an order. Available values: NEW, PROCESSING, FINISHED, ERRORED, VOID, WAIT_FOR_PAYMENT, REJECTED
 * @member {module:model/NumberOrder.StatusEnum} status
 */
NumberOrder.prototype['status'] = undefined;

/**
 * ~
 * @member {Number} summary
 */
NumberOrder.prototype['summary'] = undefined;

/**
 * @member {module:model/NumberOrderItem} tollFreeNumbers
 */
NumberOrder.prototype['tollFreeNumbers'] = undefined;

/**
 * ~
 * @member {Number} total
 */
NumberOrder.prototype['total'] = undefined;

/**
 * A total cost of an order
 * @member {Number} totalCost
 */
NumberOrder.prototype['totalCost'] = undefined;





/**
 * Allowed values for the <code>status</code> property.
 * @enum {String}
 * @readonly
 */
NumberOrder['StatusEnum'] = {

    /**
     * value: "PROCESSING"
     * @const
     */
    "PROCESSING": "PROCESSING",

    /**
     * value: "FINISHED"
     * @const
     */
    "FINISHED": "FINISHED",

    /**
     * value: "PAYMENT_ERROR"
     * @const
     */
    "PAYMENT_ERROR": "PAYMENT_ERROR",

    /**
     * value: "VOID"
     * @const
     */
    "VOID": "VOID",

    /**
     * value: "WAIT_FOR_PAYMENT"
     * @const
     */
    "WAIT_FOR_PAYMENT": "WAIT_FOR_PAYMENT",

    /**
     * value: "PARTIALLY_ADJUSTED"
     * @const
     */
    "PARTIALLY_ADJUSTED": "PARTIALLY_ADJUSTED",

    /**
     * value: "ADJUSTED"
     * @const
     */
    "ADJUSTED": "ADJUSTED",

    /**
     * value: "NEW"
     * @const
     */
    "NEW": "NEW",

    /**
     * value: "ERRORED"
     * @const
     */
    "ERRORED": "ERRORED",

    /**
     * value: "APPROVE_TIER_ONE"
     * @const
     */
    "APPROVE_TIER_ONE": "APPROVE_TIER_ONE",

    /**
     * value: "APPROVE_TIER_TWO"
     * @const
     */
    "APPROVE_TIER_TWO": "APPROVE_TIER_TWO",

    /**
     * value: "REJECTED"
     * @const
     */
    "REJECTED": "REJECTED"
};



export default NumberOrder;

