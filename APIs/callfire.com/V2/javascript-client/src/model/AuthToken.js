/**
 * CallFire API Documentation
 * CallFire
 *
 * The version of the OpenAPI document: V2
 * Contact: support@callfire.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import OAuthSession from './OAuthSession';

/**
 * The AuthToken model module.
 * @module model/AuthToken
 * @version V2
 */
class AuthToken {
    /**
     * Constructs a new <code>AuthToken</code>.
     * ~
     * @alias module:model/AuthToken
     */
    constructor() { 
        
        AuthToken.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>AuthToken</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/AuthToken} obj Optional instance to populate.
     * @return {module:model/AuthToken} The populated <code>AuthToken</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new AuthToken();

            if (data.hasOwnProperty('accountId')) {
                obj['accountId'] = ApiClient.convertToType(data['accountId'], 'Number');
            }
            if (data.hasOwnProperty('adminClient')) {
                obj['adminClient'] = ApiClient.convertToType(data['adminClient'], 'Boolean');
            }
            if (data.hasOwnProperty('adminToken')) {
                obj['adminToken'] = AuthToken.constructFromObject(data['adminToken']);
            }
            if (data.hasOwnProperty('attributes')) {
                obj['attributes'] = ApiClient.convertToType(data['attributes'], {'String': 'String'});
            }
            if (data.hasOwnProperty('brand')) {
                obj['brand'] = ApiClient.convertToType(data['brand'], 'String');
            }
            if (data.hasOwnProperty('ezSpaClient')) {
                obj['ezSpaClient'] = ApiClient.convertToType(data['ezSpaClient'], 'Boolean');
            }
            if (data.hasOwnProperty('migration')) {
                obj['migration'] = ApiClient.convertToType(data['migration'], 'Boolean');
            }
            if (data.hasOwnProperty('session')) {
                obj['session'] = OAuthSession.constructFromObject(data['session']);
            }
            if (data.hasOwnProperty('sessionId')) {
                obj['sessionId'] = ApiClient.convertToType(data['sessionId'], 'String');
            }
            if (data.hasOwnProperty('userId')) {
                obj['userId'] = ApiClient.convertToType(data['userId'], 'Number');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>AuthToken</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>AuthToken</code>.
     */
    static validateJSON(data) {
        // validate the optional field `adminToken`
        if (data['adminToken']) { // data not null
          AuthToken.validateJSON(data['adminToken']);
        }
        // ensure the json data is a string
        if (data['brand'] && !(typeof data['brand'] === 'string' || data['brand'] instanceof String)) {
            throw new Error("Expected the field `brand` to be a primitive type in the JSON string but got " + data['brand']);
        }
        // validate the optional field `session`
        if (data['session']) { // data not null
          OAuthSession.validateJSON(data['session']);
        }
        // ensure the json data is a string
        if (data['sessionId'] && !(typeof data['sessionId'] === 'string' || data['sessionId'] instanceof String)) {
            throw new Error("Expected the field `sessionId` to be a primitive type in the JSON string but got " + data['sessionId']);
        }

        return true;
    }


}



/**
 * ~
 * @member {Number} accountId
 */
AuthToken.prototype['accountId'] = undefined;

/**
 * ~
 * @member {Boolean} adminClient
 */
AuthToken.prototype['adminClient'] = undefined;

/**
 * @member {module:model/AuthToken} adminToken
 */
AuthToken.prototype['adminToken'] = undefined;

/**
 * ~
 * @member {Object.<String, String>} attributes
 */
AuthToken.prototype['attributes'] = undefined;

/**
 * ~
 * @member {module:model/AuthToken.BrandEnum} brand
 */
AuthToken.prototype['brand'] = undefined;

/**
 * ~
 * @member {Boolean} ezSpaClient
 */
AuthToken.prototype['ezSpaClient'] = undefined;

/**
 * ~
 * @member {Boolean} migration
 */
AuthToken.prototype['migration'] = undefined;

/**
 * @member {module:model/OAuthSession} session
 */
AuthToken.prototype['session'] = undefined;

/**
 * ~
 * @member {String} sessionId
 */
AuthToken.prototype['sessionId'] = undefined;

/**
 * ~
 * @member {Number} userId
 */
AuthToken.prototype['userId'] = undefined;





/**
 * Allowed values for the <code>brand</code> property.
 * @enum {String}
 * @readonly
 */
AuthToken['BrandEnum'] = {

    /**
     * value: "EZTEXTING"
     * @const
     */
    "EZTEXTING": "EZTEXTING",

    /**
     * value: "CLUBTEXTING"
     * @const
     */
    "CLUBTEXTING": "CLUBTEXTING",

    /**
     * value: "GROUPTEXTING"
     * @const
     */
    "GROUPTEXTING": "GROUPTEXTING",

    /**
     * value: "TELLMYCELL"
     * @const
     */
    "TELLMYCELL": "TELLMYCELL",

    /**
     * value: "EZ"
     * @const
     */
    "EZ": "EZ",

    /**
     * value: "CALLFIRE"
     * @const
     */
    "CALLFIRE": "CALLFIRE",

    /**
     * value: "TESLA"
     * @const
     */
    "TESLA": "TESLA"
};



export default AuthToken;

