/**
 * CallFire API Documentation
 * CallFire
 *
 * The version of the OpenAPI document: V2
 * Contact: support@callfire.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Region from './Region';

/**
 * The NumberLease model module.
 * @module model/NumberLease
 * @version V2
 */
class NumberLease {
    /**
     * Constructs a new <code>NumberLease</code>.
     * Represents a lease object for a given phone number
     * @alias module:model/NumberLease
     */
    constructor() { 
        
        NumberLease.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>NumberLease</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/NumberLease} obj Optional instance to populate.
     * @return {module:model/NumberLease} The populated <code>NumberLease</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new NumberLease();

            if (data.hasOwnProperty('autoRenew')) {
                obj['autoRenew'] = ApiClient.convertToType(data['autoRenew'], 'Boolean');
            }
            if (data.hasOwnProperty('callFeatureStatus')) {
                obj['callFeatureStatus'] = ApiClient.convertToType(data['callFeatureStatus'], 'String');
            }
            if (data.hasOwnProperty('labels')) {
                obj['labels'] = ApiClient.convertToType(data['labels'], ['String']);
            }
            if (data.hasOwnProperty('leaseBegin')) {
                obj['leaseBegin'] = ApiClient.convertToType(data['leaseBegin'], 'Number');
            }
            if (data.hasOwnProperty('leaseEnd')) {
                obj['leaseEnd'] = ApiClient.convertToType(data['leaseEnd'], 'Number');
            }
            if (data.hasOwnProperty('nationalFormat')) {
                obj['nationalFormat'] = ApiClient.convertToType(data['nationalFormat'], 'String');
            }
            if (data.hasOwnProperty('number')) {
                obj['number'] = ApiClient.convertToType(data['number'], 'String');
            }
            if (data.hasOwnProperty('region')) {
                obj['region'] = Region.constructFromObject(data['region']);
            }
            if (data.hasOwnProperty('sendEmailOnCreate')) {
                obj['sendEmailOnCreate'] = ApiClient.convertToType(data['sendEmailOnCreate'], 'Boolean');
            }
            if (data.hasOwnProperty('status')) {
                obj['status'] = ApiClient.convertToType(data['status'], 'String');
            }
            if (data.hasOwnProperty('textFeatureStatus')) {
                obj['textFeatureStatus'] = ApiClient.convertToType(data['textFeatureStatus'], 'String');
            }
            if (data.hasOwnProperty('tollFree')) {
                obj['tollFree'] = ApiClient.convertToType(data['tollFree'], 'Boolean');
            }
            if (data.hasOwnProperty('type')) {
                obj['type'] = ApiClient.convertToType(data['type'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>NumberLease</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>NumberLease</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['callFeatureStatus'] && !(typeof data['callFeatureStatus'] === 'string' || data['callFeatureStatus'] instanceof String)) {
            throw new Error("Expected the field `callFeatureStatus` to be a primitive type in the JSON string but got " + data['callFeatureStatus']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['labels'])) {
            throw new Error("Expected the field `labels` to be an array in the JSON data but got " + data['labels']);
        }
        // ensure the json data is a string
        if (data['nationalFormat'] && !(typeof data['nationalFormat'] === 'string' || data['nationalFormat'] instanceof String)) {
            throw new Error("Expected the field `nationalFormat` to be a primitive type in the JSON string but got " + data['nationalFormat']);
        }
        // ensure the json data is a string
        if (data['number'] && !(typeof data['number'] === 'string' || data['number'] instanceof String)) {
            throw new Error("Expected the field `number` to be a primitive type in the JSON string but got " + data['number']);
        }
        // validate the optional field `region`
        if (data['region']) { // data not null
          Region.validateJSON(data['region']);
        }
        // ensure the json data is a string
        if (data['status'] && !(typeof data['status'] === 'string' || data['status'] instanceof String)) {
            throw new Error("Expected the field `status` to be a primitive type in the JSON string but got " + data['status']);
        }
        // ensure the json data is a string
        if (data['textFeatureStatus'] && !(typeof data['textFeatureStatus'] === 'string' || data['textFeatureStatus'] instanceof String)) {
            throw new Error("Expected the field `textFeatureStatus` to be a primitive type in the JSON string but got " + data['textFeatureStatus']);
        }
        // ensure the json data is a string
        if (data['type'] && !(typeof data['type'] === 'string' || data['type'] instanceof String)) {
            throw new Error("Expected the field `type` to be a primitive type in the JSON string but got " + data['type']);
        }

        return true;
    }


}



/**
 * Enables the auto renewal of number lease at end of each billing cycle
 * @member {Boolean} autoRenew
 */
NumberLease.prototype['autoRenew'] = undefined;

/**
 * A status of a call feature. Available values: DISABLED, ENABLED
 * @member {module:model/NumberLease.CallFeatureStatusEnum} callFeatureStatus
 */
NumberLease.prototype['callFeatureStatus'] = undefined;

/**
 * ~
 * @member {Array.<String>} labels
 */
NumberLease.prototype['labels'] = undefined;

/**
 * A date and time of a lease start. Timestamp, formatted in unix time milliseconds (read only). Example: 1473781817000
 * @member {Number} leaseBegin
 */
NumberLease.prototype['leaseBegin'] = undefined;

/**
 * A data and time of a lease finish. Timestamp, formatted in unix time milliseconds (read only). Example: 1473781817000
 * @member {Number} leaseEnd
 */
NumberLease.prototype['leaseEnd'] = undefined;

/**
 * Formatted number with a country code
 * @member {String} nationalFormat
 */
NumberLease.prototype['nationalFormat'] = undefined;

/**
 * A phone number in E.164 format (11-digit). Example: 12132000384
 * @member {String} number
 */
NumberLease.prototype['number'] = undefined;

/**
 * @member {module:model/Region} region
 */
NumberLease.prototype['region'] = undefined;

/**
 * ~
 * @member {Boolean} sendEmailOnCreate
 */
NumberLease.prototype['sendEmailOnCreate'] = undefined;

/**
 * A lease status. Available values: PENDING, ACTIVE, RELEASED, UNAVAILABLE
 * @member {module:model/NumberLease.StatusEnum} status
 */
NumberLease.prototype['status'] = undefined;

/**
 * A status of a text feature. Available values: DISABLED, ENABLED
 * @member {module:model/NumberLease.TextFeatureStatusEnum} textFeatureStatus
 */
NumberLease.prototype['textFeatureStatus'] = undefined;

/**
 * A  toll-free number
 * @member {Boolean} tollFree
 */
NumberLease.prototype['tollFree'] = undefined;

/**
 * ~
 * @member {module:model/NumberLease.TypeEnum} type
 */
NumberLease.prototype['type'] = undefined;





/**
 * Allowed values for the <code>callFeatureStatus</code> property.
 * @enum {String}
 * @readonly
 */
NumberLease['CallFeatureStatusEnum'] = {

    /**
     * value: "UNSUPPORTED"
     * @const
     */
    "UNSUPPORTED": "UNSUPPORTED",

    /**
     * value: "PENDING"
     * @const
     */
    "PENDING": "PENDING",

    /**
     * value: "DISABLED"
     * @const
     */
    "DISABLED": "DISABLED",

    /**
     * value: "ENABLED"
     * @const
     */
    "ENABLED": "ENABLED"
};


/**
 * Allowed values for the <code>status</code> property.
 * @enum {String}
 * @readonly
 */
NumberLease['StatusEnum'] = {

    /**
     * value: "PENDING"
     * @const
     */
    "PENDING": "PENDING",

    /**
     * value: "ACTIVE"
     * @const
     */
    "ACTIVE": "ACTIVE",

    /**
     * value: "RELEASED"
     * @const
     */
    "RELEASED": "RELEASED",

    /**
     * value: "UNAVAILABLE"
     * @const
     */
    "UNAVAILABLE": "UNAVAILABLE"
};


/**
 * Allowed values for the <code>textFeatureStatus</code> property.
 * @enum {String}
 * @readonly
 */
NumberLease['TextFeatureStatusEnum'] = {

    /**
     * value: "UNSUPPORTED"
     * @const
     */
    "UNSUPPORTED": "UNSUPPORTED",

    /**
     * value: "PENDING"
     * @const
     */
    "PENDING": "PENDING",

    /**
     * value: "DISABLED"
     * @const
     */
    "DISABLED": "DISABLED",

    /**
     * value: "ENABLED"
     * @const
     */
    "ENABLED": "ENABLED"
};


/**
 * Allowed values for the <code>type</code> property.
 * @enum {String}
 * @readonly
 */
NumberLease['TypeEnum'] = {

    /**
     * value: "PLAN"
     * @const
     */
    "PLAN": "PLAN",

    /**
     * value: "EXTRA"
     * @const
     */
    "EXTRA": "EXTRA"
};



export default NumberLease;

