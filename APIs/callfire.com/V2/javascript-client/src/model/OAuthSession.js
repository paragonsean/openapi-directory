/**
 * CallFire API Documentation
 * CallFire
 *
 * The version of the OpenAPI document: V2
 * Contact: support@callfire.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The OAuthSession model module.
 * @module model/OAuthSession
 * @version V2
 */
class OAuthSession {
    /**
     * Constructs a new <code>OAuthSession</code>.
     * ~
     * @alias module:model/OAuthSession
     */
    constructor() { 
        
        OAuthSession.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>OAuthSession</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/OAuthSession} obj Optional instance to populate.
     * @return {module:model/OAuthSession} The populated <code>OAuthSession</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new OAuthSession();

            if (data.hasOwnProperty('accountId')) {
                obj['accountId'] = ApiClient.convertToType(data['accountId'], 'String');
            }
            if (data.hasOwnProperty('actor')) {
                obj['actor'] = OAuthSession.constructFromObject(data['actor']);
            }
            if (data.hasOwnProperty('brand')) {
                obj['brand'] = ApiClient.convertToType(data['brand'], 'String');
            }
            if (data.hasOwnProperty('clientId')) {
                obj['clientId'] = ApiClient.convertToType(data['clientId'], 'String');
            }
            if (data.hasOwnProperty('email')) {
                obj['email'] = ApiClient.convertToType(data['email'], 'String');
            }
            if (data.hasOwnProperty('expires')) {
                obj['expires'] = ApiClient.convertToType(data['expires'], 'Date');
            }
            if (data.hasOwnProperty('grantType')) {
                obj['grantType'] = ApiClient.convertToType(data['grantType'], 'String');
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('ipAddress')) {
                obj['ipAddress'] = ApiClient.convertToType(data['ipAddress'], 'String');
            }
            if (data.hasOwnProperty('issued')) {
                obj['issued'] = ApiClient.convertToType(data['issued'], 'Date');
            }
            if (data.hasOwnProperty('scope')) {
                obj['scope'] = ApiClient.convertToType(data['scope'], 'String');
            }
            if (data.hasOwnProperty('sid')) {
                obj['sid'] = ApiClient.convertToType(data['sid'], 'Number');
            }
            if (data.hasOwnProperty('userId')) {
                obj['userId'] = ApiClient.convertToType(data['userId'], 'String');
            }
            if (data.hasOwnProperty('username')) {
                obj['username'] = ApiClient.convertToType(data['username'], 'String');
            }
            if (data.hasOwnProperty('verificationRequired')) {
                obj['verificationRequired'] = ApiClient.convertToType(data['verificationRequired'], 'Boolean');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>OAuthSession</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>OAuthSession</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['accountId'] && !(typeof data['accountId'] === 'string' || data['accountId'] instanceof String)) {
            throw new Error("Expected the field `accountId` to be a primitive type in the JSON string but got " + data['accountId']);
        }
        // validate the optional field `actor`
        if (data['actor']) { // data not null
          OAuthSession.validateJSON(data['actor']);
        }
        // ensure the json data is a string
        if (data['brand'] && !(typeof data['brand'] === 'string' || data['brand'] instanceof String)) {
            throw new Error("Expected the field `brand` to be a primitive type in the JSON string but got " + data['brand']);
        }
        // ensure the json data is a string
        if (data['clientId'] && !(typeof data['clientId'] === 'string' || data['clientId'] instanceof String)) {
            throw new Error("Expected the field `clientId` to be a primitive type in the JSON string but got " + data['clientId']);
        }
        // ensure the json data is a string
        if (data['email'] && !(typeof data['email'] === 'string' || data['email'] instanceof String)) {
            throw new Error("Expected the field `email` to be a primitive type in the JSON string but got " + data['email']);
        }
        // ensure the json data is a string
        if (data['grantType'] && !(typeof data['grantType'] === 'string' || data['grantType'] instanceof String)) {
            throw new Error("Expected the field `grantType` to be a primitive type in the JSON string but got " + data['grantType']);
        }
        // ensure the json data is a string
        if (data['id'] && !(typeof data['id'] === 'string' || data['id'] instanceof String)) {
            throw new Error("Expected the field `id` to be a primitive type in the JSON string but got " + data['id']);
        }
        // ensure the json data is a string
        if (data['ipAddress'] && !(typeof data['ipAddress'] === 'string' || data['ipAddress'] instanceof String)) {
            throw new Error("Expected the field `ipAddress` to be a primitive type in the JSON string but got " + data['ipAddress']);
        }
        // ensure the json data is a string
        if (data['scope'] && !(typeof data['scope'] === 'string' || data['scope'] instanceof String)) {
            throw new Error("Expected the field `scope` to be a primitive type in the JSON string but got " + data['scope']);
        }
        // ensure the json data is a string
        if (data['userId'] && !(typeof data['userId'] === 'string' || data['userId'] instanceof String)) {
            throw new Error("Expected the field `userId` to be a primitive type in the JSON string but got " + data['userId']);
        }
        // ensure the json data is a string
        if (data['username'] && !(typeof data['username'] === 'string' || data['username'] instanceof String)) {
            throw new Error("Expected the field `username` to be a primitive type in the JSON string but got " + data['username']);
        }

        return true;
    }


}



/**
 * ~
 * @member {String} accountId
 */
OAuthSession.prototype['accountId'] = undefined;

/**
 * @member {module:model/OAuthSession} actor
 */
OAuthSession.prototype['actor'] = undefined;

/**
 * ~
 * @member {module:model/OAuthSession.BrandEnum} brand
 */
OAuthSession.prototype['brand'] = undefined;

/**
 * ~
 * @member {String} clientId
 */
OAuthSession.prototype['clientId'] = undefined;

/**
 * ~
 * @member {String} email
 */
OAuthSession.prototype['email'] = undefined;

/**
 * ~
 * @member {Date} expires
 */
OAuthSession.prototype['expires'] = undefined;

/**
 * ~
 * @member {module:model/OAuthSession.GrantTypeEnum} grantType
 */
OAuthSession.prototype['grantType'] = undefined;

/**
 * ~
 * @member {String} id
 */
OAuthSession.prototype['id'] = undefined;

/**
 * ~
 * @member {String} ipAddress
 */
OAuthSession.prototype['ipAddress'] = undefined;

/**
 * ~
 * @member {Date} issued
 */
OAuthSession.prototype['issued'] = undefined;

/**
 * ~
 * @member {String} scope
 */
OAuthSession.prototype['scope'] = undefined;

/**
 * ~
 * @member {Number} sid
 */
OAuthSession.prototype['sid'] = undefined;

/**
 * ~
 * @member {String} userId
 */
OAuthSession.prototype['userId'] = undefined;

/**
 * ~
 * @member {String} username
 */
OAuthSession.prototype['username'] = undefined;

/**
 * ~
 * @member {Boolean} verificationRequired
 */
OAuthSession.prototype['verificationRequired'] = undefined;





/**
 * Allowed values for the <code>brand</code> property.
 * @enum {String}
 * @readonly
 */
OAuthSession['BrandEnum'] = {

    /**
     * value: "EZTEXTING"
     * @const
     */
    "EZTEXTING": "EZTEXTING",

    /**
     * value: "CLUBTEXTING"
     * @const
     */
    "CLUBTEXTING": "CLUBTEXTING",

    /**
     * value: "GROUPTEXTING"
     * @const
     */
    "GROUPTEXTING": "GROUPTEXTING",

    /**
     * value: "TELLMYCELL"
     * @const
     */
    "TELLMYCELL": "TELLMYCELL",

    /**
     * value: "EZ"
     * @const
     */
    "EZ": "EZ",

    /**
     * value: "CALLFIRE"
     * @const
     */
    "CALLFIRE": "CALLFIRE",

    /**
     * value: "TESLA"
     * @const
     */
    "TESLA": "TESLA"
};


/**
 * Allowed values for the <code>grantType</code> property.
 * @enum {String}
 * @readonly
 */
OAuthSession['GrantTypeEnum'] = {

    /**
     * value: "AUTHORIZATION_CODE"
     * @const
     */
    "AUTHORIZATION_CODE": "AUTHORIZATION_CODE",

    /**
     * value: "PASSWORD"
     * @const
     */
    "PASSWORD": "PASSWORD",

    /**
     * value: "REFRESH_TOKEN"
     * @const
     */
    "REFRESH_TOKEN": "REFRESH_TOKEN",

    /**
     * value: "CLIENT_CREDENTIALS"
     * @const
     */
    "CLIENT_CREDENTIALS": "CLIENT_CREDENTIALS",

    /**
     * value: "JWT_BEARER"
     * @const
     */
    "JWT_BEARER": "JWT_BEARER",

    /**
     * value: "IMPERSONATE"
     * @const
     */
    "IMPERSONATE": "IMPERSONATE",

    /**
     * value: "EXCHANGE"
     * @const
     */
    "EXCHANGE": "EXCHANGE"
};



export default OAuthSession;

