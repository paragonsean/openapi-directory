/**
 * CallFire API Documentation
 * CallFire
 *
 * The version of the OpenAPI document: V2
 * Contact: support@callfire.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The NumberOrderItem model module.
 * @module model/NumberOrderItem
 * @version V2
 */
class NumberOrderItem {
    /**
     * Constructs a new <code>NumberOrderItem</code>.
     * Represents an order item of a particular order
     * @alias module:model/NumberOrderItem
     */
    constructor() { 
        
        NumberOrderItem.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>NumberOrderItem</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/NumberOrderItem} obj Optional instance to populate.
     * @return {module:model/NumberOrderItem} The populated <code>NumberOrderItem</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new NumberOrderItem();

            if (data.hasOwnProperty('fulfilled')) {
                obj['fulfilled'] = ApiClient.convertToType(data['fulfilled'], ['String']);
            }
            if (data.hasOwnProperty('ordered')) {
                obj['ordered'] = ApiClient.convertToType(data['ordered'], 'Number');
            }
            if (data.hasOwnProperty('unitCost')) {
                obj['unitCost'] = ApiClient.convertToType(data['unitCost'], 'Number');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>NumberOrderItem</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>NumberOrderItem</code>.
     */
    static validateJSON(data) {
        // ensure the json data is an array
        if (!Array.isArray(data['fulfilled'])) {
            throw new Error("Expected the field `fulfilled` to be an array in the JSON data but got " + data['fulfilled']);
        }

        return true;
    }


}



/**
 * List of fulfilled items, e.g. phone numbers, keywords
 * @member {Array.<String>} fulfilled
 */
NumberOrderItem.prototype['fulfilled'] = undefined;

/**
 * A total number of items bought within a single order item
 * @member {Number} ordered
 */
NumberOrderItem.prototype['ordered'] = undefined;

/**
 * A cost of unit
 * @member {Number} unitCost
 */
NumberOrderItem.prototype['unitCost'] = undefined;






export default NumberOrderItem;

