/**
 * CallFire API Documentation
 * CallFire
 *
 * The version of the OpenAPI document: V2
 * Contact: support@callfire.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The Contact model module.
 * @module model/Contact
 * @version V2
 */
class Contact {
    /**
     * Constructs a new <code>Contact</code>.
     * Represents a contact in CallFire platform. Contains info about the people you want to contact. It allows you to store a user-defined properties for each contact
     * @alias module:model/Contact
     */
    constructor() { 
        
        Contact.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>Contact</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Contact} obj Optional instance to populate.
     * @return {module:model/Contact} The populated <code>Contact</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Contact();

            if (data.hasOwnProperty('deleted')) {
                obj['deleted'] = ApiClient.convertToType(data['deleted'], 'Boolean');
            }
            if (data.hasOwnProperty('externalId')) {
                obj['externalId'] = ApiClient.convertToType(data['externalId'], 'String');
            }
            if (data.hasOwnProperty('externalSystem')) {
                obj['externalSystem'] = ApiClient.convertToType(data['externalSystem'], 'String');
            }
            if (data.hasOwnProperty('extraPhone1')) {
                obj['extraPhone1'] = ApiClient.convertToType(data['extraPhone1'], 'String');
            }
            if (data.hasOwnProperty('extraPhone2')) {
                obj['extraPhone2'] = ApiClient.convertToType(data['extraPhone2'], 'String');
            }
            if (data.hasOwnProperty('extraPhone3')) {
                obj['extraPhone3'] = ApiClient.convertToType(data['extraPhone3'], 'String');
            }
            if (data.hasOwnProperty('firstName')) {
                obj['firstName'] = ApiClient.convertToType(data['firstName'], 'String');
            }
            if (data.hasOwnProperty('homePhone')) {
                obj['homePhone'] = ApiClient.convertToType(data['homePhone'], 'String');
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'Number');
            }
            if (data.hasOwnProperty('lastName')) {
                obj['lastName'] = ApiClient.convertToType(data['lastName'], 'String');
            }
            if (data.hasOwnProperty('mobilePhone')) {
                obj['mobilePhone'] = ApiClient.convertToType(data['mobilePhone'], 'String');
            }
            if (data.hasOwnProperty('properties')) {
                obj['properties'] = ApiClient.convertToType(data['properties'], {'String': 'String'});
            }
            if (data.hasOwnProperty('workPhone')) {
                obj['workPhone'] = ApiClient.convertToType(data['workPhone'], 'String');
            }
            if (data.hasOwnProperty('zipcode')) {
                obj['zipcode'] = ApiClient.convertToType(data['zipcode'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Contact</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Contact</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['externalId'] && !(typeof data['externalId'] === 'string' || data['externalId'] instanceof String)) {
            throw new Error("Expected the field `externalId` to be a primitive type in the JSON string but got " + data['externalId']);
        }
        // ensure the json data is a string
        if (data['externalSystem'] && !(typeof data['externalSystem'] === 'string' || data['externalSystem'] instanceof String)) {
            throw new Error("Expected the field `externalSystem` to be a primitive type in the JSON string but got " + data['externalSystem']);
        }
        // ensure the json data is a string
        if (data['extraPhone1'] && !(typeof data['extraPhone1'] === 'string' || data['extraPhone1'] instanceof String)) {
            throw new Error("Expected the field `extraPhone1` to be a primitive type in the JSON string but got " + data['extraPhone1']);
        }
        // ensure the json data is a string
        if (data['extraPhone2'] && !(typeof data['extraPhone2'] === 'string' || data['extraPhone2'] instanceof String)) {
            throw new Error("Expected the field `extraPhone2` to be a primitive type in the JSON string but got " + data['extraPhone2']);
        }
        // ensure the json data is a string
        if (data['extraPhone3'] && !(typeof data['extraPhone3'] === 'string' || data['extraPhone3'] instanceof String)) {
            throw new Error("Expected the field `extraPhone3` to be a primitive type in the JSON string but got " + data['extraPhone3']);
        }
        // ensure the json data is a string
        if (data['firstName'] && !(typeof data['firstName'] === 'string' || data['firstName'] instanceof String)) {
            throw new Error("Expected the field `firstName` to be a primitive type in the JSON string but got " + data['firstName']);
        }
        // ensure the json data is a string
        if (data['homePhone'] && !(typeof data['homePhone'] === 'string' || data['homePhone'] instanceof String)) {
            throw new Error("Expected the field `homePhone` to be a primitive type in the JSON string but got " + data['homePhone']);
        }
        // ensure the json data is a string
        if (data['lastName'] && !(typeof data['lastName'] === 'string' || data['lastName'] instanceof String)) {
            throw new Error("Expected the field `lastName` to be a primitive type in the JSON string but got " + data['lastName']);
        }
        // ensure the json data is a string
        if (data['mobilePhone'] && !(typeof data['mobilePhone'] === 'string' || data['mobilePhone'] instanceof String)) {
            throw new Error("Expected the field `mobilePhone` to be a primitive type in the JSON string but got " + data['mobilePhone']);
        }
        // ensure the json data is a string
        if (data['workPhone'] && !(typeof data['workPhone'] === 'string' || data['workPhone'] instanceof String)) {
            throw new Error("Expected the field `workPhone` to be a primitive type in the JSON string but got " + data['workPhone']);
        }
        // ensure the json data is a string
        if (data['zipcode'] && !(typeof data['zipcode'] === 'string' || data['zipcode'] instanceof String)) {
            throw new Error("Expected the field `zipcode` to be a primitive type in the JSON string but got " + data['zipcode']);
        }

        return true;
    }


}



/**
 * A deleted contact, deleted contacts are hidden from search results
 * @member {Boolean} deleted
 */
Contact.prototype['deleted'] = undefined;

/**
 * An external id of a contact for syncing with external sources
 * @member {String} externalId
 */
Contact.prototype['externalId'] = undefined;

/**
 * External system that external id refers to
 * @member {String} externalSystem
 */
Contact.prototype['externalSystem'] = undefined;

/**
 * Phone number in E.164 format (11-digit). Example: 12132000384
 * @member {String} extraPhone1
 */
Contact.prototype['extraPhone1'] = undefined;

/**
 * Phone number in E.164 format (11-digit). Example: 12132000384
 * @member {String} extraPhone2
 */
Contact.prototype['extraPhone2'] = undefined;

/**
 * Phone number in E.164 format (11-digit). Example: 12132000384
 * @member {String} extraPhone3
 */
Contact.prototype['extraPhone3'] = undefined;

/**
 * A first name of a contact
 * @member {String} firstName
 */
Contact.prototype['firstName'] = undefined;

/**
 * Phone number in E.164 format (11-digit). Example: 12132000384
 * @member {String} homePhone
 */
Contact.prototype['homePhone'] = undefined;

/**
 * An id of a contact
 * @member {Number} id
 */
Contact.prototype['id'] = undefined;

/**
 * A last name of a contact
 * @member {String} lastName
 */
Contact.prototype['lastName'] = undefined;

/**
 * Phone number in E.164 format (11-digit). Example: 12132000384
 * @member {String} mobilePhone
 */
Contact.prototype['mobilePhone'] = undefined;

/**
 * Map of user-defined string properties for contact
 * @member {Object.<String, String>} properties
 */
Contact.prototype['properties'] = undefined;

/**
 * Phone number in E.164 format (11-digit). Example: 12132000384
 * @member {String} workPhone
 */
Contact.prototype['workPhone'] = undefined;

/**
 * A Zip code of a contact
 * @member {String} zipcode
 */
Contact.prototype['zipcode'] = undefined;






export default Contact;

