/**
 * CallFire API Documentation
 * CallFire
 *
 * The version of the OpenAPI document: V2
 * Contact: support@callfire.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import CallTrackingConfig from './CallTrackingConfig';
import IvrInboundConfig from './IvrInboundConfig';
import TextInboundConfig from './TextInboundConfig';

/**
 * The NumberConfig model module.
 * @module model/NumberConfig
 * @version V2
 */
class NumberConfig {
    /**
     * Constructs a new <code>NumberConfig</code>.
     * Represents the configuration of a phone number purchased by user. You can configure number to accept inbound calls, play sounds to customer, make a transfer or setup an IVR script to interact with customer. See [CallFire IVR](https://www.callfire.com/products/ivr) for more info
     * @alias module:model/NumberConfig
     */
    constructor() { 
        
        NumberConfig.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>NumberConfig</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/NumberConfig} obj Optional instance to populate.
     * @return {module:model/NumberConfig} The populated <code>NumberConfig</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new NumberConfig();

            if (data.hasOwnProperty('callTrackingConfig')) {
                obj['callTrackingConfig'] = CallTrackingConfig.constructFromObject(data['callTrackingConfig']);
            }
            if (data.hasOwnProperty('configType')) {
                obj['configType'] = ApiClient.convertToType(data['configType'], 'String');
            }
            if (data.hasOwnProperty('ivrInboundConfig')) {
                obj['ivrInboundConfig'] = IvrInboundConfig.constructFromObject(data['ivrInboundConfig']);
            }
            if (data.hasOwnProperty('number')) {
                obj['number'] = ApiClient.convertToType(data['number'], 'String');
            }
            if (data.hasOwnProperty('textInboundConfig')) {
                obj['textInboundConfig'] = TextInboundConfig.constructFromObject(data['textInboundConfig']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>NumberConfig</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>NumberConfig</code>.
     */
    static validateJSON(data) {
        // validate the optional field `callTrackingConfig`
        if (data['callTrackingConfig']) { // data not null
          CallTrackingConfig.validateJSON(data['callTrackingConfig']);
        }
        // ensure the json data is a string
        if (data['configType'] && !(typeof data['configType'] === 'string' || data['configType'] instanceof String)) {
            throw new Error("Expected the field `configType` to be a primitive type in the JSON string but got " + data['configType']);
        }
        // validate the optional field `ivrInboundConfig`
        if (data['ivrInboundConfig']) { // data not null
          IvrInboundConfig.validateJSON(data['ivrInboundConfig']);
        }
        // ensure the json data is a string
        if (data['number'] && !(typeof data['number'] === 'string' || data['number'] instanceof String)) {
            throw new Error("Expected the field `number` to be a primitive type in the JSON string but got " + data['number']);
        }
        // validate the optional field `textInboundConfig`
        if (data['textInboundConfig']) { // data not null
          TextInboundConfig.validateJSON(data['textInboundConfig']);
        }

        return true;
    }


}



/**
 * @member {module:model/CallTrackingConfig} callTrackingConfig
 */
NumberConfig.prototype['callTrackingConfig'] = undefined;

/**
 * A type of config. Available values: TRACKING, IVR
 * @member {module:model/NumberConfig.ConfigTypeEnum} configType
 */
NumberConfig.prototype['configType'] = undefined;

/**
 * @member {module:model/IvrInboundConfig} ivrInboundConfig
 */
NumberConfig.prototype['ivrInboundConfig'] = undefined;

/**
 * Phone number in E.164 format (11-digit). Example: 12132000384
 * @member {String} number
 */
NumberConfig.prototype['number'] = undefined;

/**
 * @member {module:model/TextInboundConfig} textInboundConfig
 */
NumberConfig.prototype['textInboundConfig'] = undefined;





/**
 * Allowed values for the <code>configType</code> property.
 * @enum {String}
 * @readonly
 */
NumberConfig['ConfigTypeEnum'] = {

    /**
     * value: "IVR"
     * @const
     */
    "IVR": "IVR",

    /**
     * value: "TRACKING"
     * @const
     */
    "TRACKING": "TRACKING"
};



export default NumberConfig;

