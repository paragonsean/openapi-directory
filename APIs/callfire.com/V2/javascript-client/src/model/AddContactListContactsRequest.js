/**
 * CallFire API Documentation
 * CallFire
 *
 * The version of the OpenAPI document: V2
 * Contact: support@callfire.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Contact from './Contact';

/**
 * The AddContactListContactsRequest model module.
 * @module model/AddContactListContactsRequest
 * @version V2
 */
class AddContactListContactsRequest {
    /**
     * Constructs a new <code>AddContactListContactsRequest</code>.
     * Request object for adding new contacts to an existing contact list
     * @alias module:model/AddContactListContactsRequest
     */
    constructor() { 
        
        AddContactListContactsRequest.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>AddContactListContactsRequest</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/AddContactListContactsRequest} obj Optional instance to populate.
     * @return {module:model/AddContactListContactsRequest} The populated <code>AddContactListContactsRequest</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new AddContactListContactsRequest();

            if (data.hasOwnProperty('contactIds')) {
                obj['contactIds'] = ApiClient.convertToType(data['contactIds'], ['Number']);
            }
            if (data.hasOwnProperty('contactNumbers')) {
                obj['contactNumbers'] = ApiClient.convertToType(data['contactNumbers'], ['String']);
            }
            if (data.hasOwnProperty('contactNumbersField')) {
                obj['contactNumbersField'] = ApiClient.convertToType(data['contactNumbersField'], 'String');
            }
            if (data.hasOwnProperty('contacts')) {
                obj['contacts'] = ApiClient.convertToType(data['contacts'], [Contact]);
            }
            if (data.hasOwnProperty('useCustomFields')) {
                obj['useCustomFields'] = ApiClient.convertToType(data['useCustomFields'], 'Boolean');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>AddContactListContactsRequest</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>AddContactListContactsRequest</code>.
     */
    static validateJSON(data) {
        // ensure the json data is an array
        if (!Array.isArray(data['contactIds'])) {
            throw new Error("Expected the field `contactIds` to be an array in the JSON data but got " + data['contactIds']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['contactNumbers'])) {
            throw new Error("Expected the field `contactNumbers` to be an array in the JSON data but got " + data['contactNumbers']);
        }
        // ensure the json data is a string
        if (data['contactNumbersField'] && !(typeof data['contactNumbersField'] === 'string' || data['contactNumbersField'] instanceof String)) {
            throw new Error("Expected the field `contactNumbersField` to be a primitive type in the JSON string but got " + data['contactNumbersField']);
        }
        if (data['contacts']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['contacts'])) {
                throw new Error("Expected the field `contacts` to be an array in the JSON data but got " + data['contacts']);
            }
            // validate the optional field `contacts` (array)
            for (const item of data['contacts']) {
                Contact.validateJSON(item);
            };
        }

        return true;
    }


}



/**
 * A list of ids of existing contacts in CallFire system
 * @member {Array.<Number>} contactIds
 */
AddContactListContactsRequest.prototype['contactIds'] = undefined;

/**
 * A phone number in E.164 format (11-digit). Examples: 12132000384
 * @member {Array.<String>} contactNumbers
 */
AddContactListContactsRequest.prototype['contactNumbers'] = undefined;

/**
 * A type of phone number (homePhone, workPhone, mobilePhone). This parameter works together with contactNumbers and specifies which types of numbers are included to a list
 * @member {String} contactNumbersField
 */
AddContactListContactsRequest.prototype['contactNumbersField'] = undefined;

/**
 * A list of new contact objects which need to be added
 * @member {Array.<module:model/Contact>} contacts
 */
AddContactListContactsRequest.prototype['contacts'] = undefined;

/**
 * A flag to indicate how to define property names for contacts. If true, uses the field and property names exactly as defined. If false will assign custom properties and fields to A, B, C, etc
 * @member {Boolean} useCustomFields
 */
AddContactListContactsRequest.prototype['useCustomFields'] = undefined;






export default AddContactListContactsRequest;

