/**
 * CallFire API Documentation
 * CallFire
 *
 * The version of the OpenAPI document: V2
 * Contact: support@callfire.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Contact from './Contact';
import Media from './Media';
import TextRecord from './TextRecord';

/**
 * The Text model module.
 * @module model/Text
 * @version V2
 */
class Text {
    /**
     * Constructs a new <code>Text</code>.
     * Represents a text action sent or received by CallFire platform
     * @alias module:model/Text
     */
    constructor() { 
        
        Text.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>Text</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Text} obj Optional instance to populate.
     * @return {module:model/Text} The populated <code>Text</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Text();

            if (data.hasOwnProperty('attributes')) {
                obj['attributes'] = ApiClient.convertToType(data['attributes'], {'String': 'String'});
            }
            if (data.hasOwnProperty('batchId')) {
                obj['batchId'] = ApiClient.convertToType(data['batchId'], 'Number');
            }
            if (data.hasOwnProperty('campaignId')) {
                obj['campaignId'] = ApiClient.convertToType(data['campaignId'], 'Number');
            }
            if (data.hasOwnProperty('contact')) {
                obj['contact'] = Contact.constructFromObject(data['contact']);
            }
            if (data.hasOwnProperty('created')) {
                obj['created'] = ApiClient.convertToType(data['created'], 'Number');
            }
            if (data.hasOwnProperty('finalTextResult')) {
                obj['finalTextResult'] = ApiClient.convertToType(data['finalTextResult'], 'String');
            }
            if (data.hasOwnProperty('fromNumber')) {
                obj['fromNumber'] = ApiClient.convertToType(data['fromNumber'], 'String');
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'Number');
            }
            if (data.hasOwnProperty('inbound')) {
                obj['inbound'] = ApiClient.convertToType(data['inbound'], 'Boolean');
            }
            if (data.hasOwnProperty('labels')) {
                obj['labels'] = ApiClient.convertToType(data['labels'], ['String']);
            }
            if (data.hasOwnProperty('media')) {
                obj['media'] = ApiClient.convertToType(data['media'], [Media]);
            }
            if (data.hasOwnProperty('message')) {
                obj['message'] = ApiClient.convertToType(data['message'], 'String');
            }
            if (data.hasOwnProperty('modified')) {
                obj['modified'] = ApiClient.convertToType(data['modified'], 'Number');
            }
            if (data.hasOwnProperty('records')) {
                obj['records'] = ApiClient.convertToType(data['records'], [TextRecord]);
            }
            if (data.hasOwnProperty('state')) {
                obj['state'] = ApiClient.convertToType(data['state'], 'String');
            }
            if (data.hasOwnProperty('toNumber')) {
                obj['toNumber'] = ApiClient.convertToType(data['toNumber'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Text</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Text</code>.
     */
    static validateJSON(data) {
        // validate the optional field `contact`
        if (data['contact']) { // data not null
          Contact.validateJSON(data['contact']);
        }
        // ensure the json data is a string
        if (data['finalTextResult'] && !(typeof data['finalTextResult'] === 'string' || data['finalTextResult'] instanceof String)) {
            throw new Error("Expected the field `finalTextResult` to be a primitive type in the JSON string but got " + data['finalTextResult']);
        }
        // ensure the json data is a string
        if (data['fromNumber'] && !(typeof data['fromNumber'] === 'string' || data['fromNumber'] instanceof String)) {
            throw new Error("Expected the field `fromNumber` to be a primitive type in the JSON string but got " + data['fromNumber']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['labels'])) {
            throw new Error("Expected the field `labels` to be an array in the JSON data but got " + data['labels']);
        }
        if (data['media']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['media'])) {
                throw new Error("Expected the field `media` to be an array in the JSON data but got " + data['media']);
            }
            // validate the optional field `media` (array)
            for (const item of data['media']) {
                Media.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['message'] && !(typeof data['message'] === 'string' || data['message'] instanceof String)) {
            throw new Error("Expected the field `message` to be a primitive type in the JSON string but got " + data['message']);
        }
        if (data['records']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['records'])) {
                throw new Error("Expected the field `records` to be an array in the JSON data but got " + data['records']);
            }
            // validate the optional field `records` (array)
            for (const item of data['records']) {
                TextRecord.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['state'] && !(typeof data['state'] === 'string' || data['state'] instanceof String)) {
            throw new Error("Expected the field `state` to be a primitive type in the JSON string but got " + data['state']);
        }
        // ensure the json data is a string
        if (data['toNumber'] && !(typeof data['toNumber'] === 'string' || data['toNumber'] instanceof String)) {
            throw new Error("Expected the field `toNumber` to be a primitive type in the JSON string but got " + data['toNumber']);
        }

        return true;
    }


}



/**
 * Map of user-defined string attributes associated with an action
 * @member {Object.<String, String>} attributes
 */
Text.prototype['attributes'] = undefined;

/**
 * An id of contact batch associated with an action
 * @member {Number} batchId
 */
Text.prototype['batchId'] = undefined;

/**
 * An id of broadcast if given text was sent as a part of text broadcast
 * @member {Number} campaignId
 */
Text.prototype['campaignId'] = undefined;

/**
 * @member {module:model/Contact} contact
 */
Text.prototype['contact'] = undefined;

/**
 * The time when the given resource was created, formatted in unix time milliseconds (read only). Example: 1473781817000 for Sat, 05 Jan 1985 14:03:37 GMT
 * @member {Number} created
 */
Text.prototype['created'] = undefined;

/**
 * Result of text (SENT, RECEIVED, DNT, TOO_BIG, INTERNAL_ERROR, CARRIER_ERROR, CARRIER_TEMP_ERROR, UNDIALED). See [call states and results](https://developers.callfire.com/results-responses-errors.html)
 * @member {module:model/Text.FinalTextResultEnum} finalTextResult
 */
Text.prototype['finalTextResult'] = undefined;

/**
 * Sender's phone number in E.164 format (11-digit) or short code. Example: 12132000384, 67076
 * @member {String} fromNumber
 */
Text.prototype['fromNumber'] = undefined;

/**
 * An id of an action
 * @member {Number} id
 */
Text.prototype['id'] = undefined;

/**
 * An action inbound
 * @member {Boolean} inbound
 */
Text.prototype['inbound'] = undefined;

/**
 * Labels associated with an action
 * @member {Array.<String>} labels
 */
Text.prototype['labels'] = undefined;

/**
 * ~
 * @member {Array.<module:model/Media>} media
 */
Text.prototype['media'] = undefined;

/**
 * A text message
 * @member {String} message
 */
Text.prototype['message'] = undefined;

/**
 * The time when the given resource was modified, formatted in unix time milliseconds (read only). Example: 1473781817000 for Sat, 05 Jan 1985 14:03:37 GMT
 * @member {Number} modified
 */
Text.prototype['modified'] = undefined;

/**
 * List of text records, each record contains additional details: time of sending, cost, current state.  A single contact may have multiple numbers. If given text was sent as part of broadcast with configured retry logic then each text record will contain details about attempted number
 * @member {Array.<module:model/TextRecord>} records
 */
Text.prototype['records'] = undefined;

/**
 * Current state of an action (READY, SELECTED, CALLBACK, DISABLED, FINISHED, DNC, DUP, INVALID, TIMEOUT, PERIOD_LIMIT). See [call states and results](https://developers.callfire.com/results-responses-errors.html)
 * @member {module:model/Text.StateEnum} state
 */
Text.prototype['state'] = undefined;

/**
 * Recipient's phone number in E.164 format (11-digit) or short code. Example: 12132000384, 67076
 * @member {String} toNumber
 */
Text.prototype['toNumber'] = undefined;





/**
 * Allowed values for the <code>finalTextResult</code> property.
 * @enum {String}
 * @readonly
 */
Text['FinalTextResultEnum'] = {

    /**
     * value: "SENT"
     * @const
     */
    "SENT": "SENT",

    /**
     * value: "RECEIVED"
     * @const
     */
    "RECEIVED": "RECEIVED",

    /**
     * value: "DNT"
     * @const
     */
    "DNT": "DNT",

    /**
     * value: "TOO_BIG"
     * @const
     */
    "TOO_BIG": "TOO_BIG",

    /**
     * value: "INTERNAL_ERROR"
     * @const
     */
    "INTERNAL_ERROR": "INTERNAL_ERROR",

    /**
     * value: "CARRIER_ERROR"
     * @const
     */
    "CARRIER_ERROR": "CARRIER_ERROR",

    /**
     * value: "CARRIER_TEMP_ERROR"
     * @const
     */
    "CARRIER_TEMP_ERROR": "CARRIER_TEMP_ERROR",

    /**
     * value: "UNDIALED"
     * @const
     */
    "UNDIALED": "UNDIALED",

    /**
     * value: "INVALID_NUMBER"
     * @const
     */
    "INVALID_NUMBER": "INVALID_NUMBER"
};


/**
 * Allowed values for the <code>state</code> property.
 * @enum {String}
 * @readonly
 */
Text['StateEnum'] = {

    /**
     * value: "READY"
     * @const
     */
    "READY": "READY",

    /**
     * value: "SELECTED"
     * @const
     */
    "SELECTED": "SELECTED",

    /**
     * value: "CALLBACK"
     * @const
     */
    "CALLBACK": "CALLBACK",

    /**
     * value: "FINISHED"
     * @const
     */
    "FINISHED": "FINISHED",

    /**
     * value: "DISABLED"
     * @const
     */
    "DISABLED": "DISABLED",

    /**
     * value: "SKIPPED"
     * @const
     */
    "SKIPPED": "SKIPPED",

    /**
     * value: "DNC"
     * @const
     */
    "DNC": "DNC",

    /**
     * value: "DUP"
     * @const
     */
    "DUP": "DUP",

    /**
     * value: "INVALID"
     * @const
     */
    "INVALID": "INVALID",

    /**
     * value: "TIMEOUT"
     * @const
     */
    "TIMEOUT": "TIMEOUT",

    /**
     * value: "PERIOD_LIMIT"
     * @const
     */
    "PERIOD_LIMIT": "PERIOD_LIMIT",

    /**
     * value: "RESTRICTED_NUMBER"
     * @const
     */
    "RESTRICTED_NUMBER": "RESTRICTED_NUMBER"
};



export default Text;

