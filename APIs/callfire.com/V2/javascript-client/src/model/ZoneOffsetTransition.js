/**
 * CallFire API Documentation
 * CallFire
 *
 * The version of the OpenAPI document: V2
 * Contact: support@callfire.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Duration from './Duration';
import ZoneOffset from './ZoneOffset';

/**
 * The ZoneOffsetTransition model module.
 * @module model/ZoneOffsetTransition
 * @version V2
 */
class ZoneOffsetTransition {
    /**
     * Constructs a new <code>ZoneOffsetTransition</code>.
     * ~
     * @alias module:model/ZoneOffsetTransition
     */
    constructor() { 
        
        ZoneOffsetTransition.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>ZoneOffsetTransition</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ZoneOffsetTransition} obj Optional instance to populate.
     * @return {module:model/ZoneOffsetTransition} The populated <code>ZoneOffsetTransition</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ZoneOffsetTransition();

            if (data.hasOwnProperty('dateTimeAfter')) {
                obj['dateTimeAfter'] = ApiClient.convertToType(data['dateTimeAfter'], 'Date');
            }
            if (data.hasOwnProperty('dateTimeBefore')) {
                obj['dateTimeBefore'] = ApiClient.convertToType(data['dateTimeBefore'], 'Date');
            }
            if (data.hasOwnProperty('duration')) {
                obj['duration'] = Duration.constructFromObject(data['duration']);
            }
            if (data.hasOwnProperty('gap')) {
                obj['gap'] = ApiClient.convertToType(data['gap'], 'Boolean');
            }
            if (data.hasOwnProperty('instant')) {
                obj['instant'] = ApiClient.convertToType(data['instant'], 'Number');
            }
            if (data.hasOwnProperty('offsetAfter')) {
                obj['offsetAfter'] = ZoneOffset.constructFromObject(data['offsetAfter']);
            }
            if (data.hasOwnProperty('offsetBefore')) {
                obj['offsetBefore'] = ZoneOffset.constructFromObject(data['offsetBefore']);
            }
            if (data.hasOwnProperty('overlap')) {
                obj['overlap'] = ApiClient.convertToType(data['overlap'], 'Boolean');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ZoneOffsetTransition</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ZoneOffsetTransition</code>.
     */
    static validateJSON(data) {
        // validate the optional field `duration`
        if (data['duration']) { // data not null
          Duration.validateJSON(data['duration']);
        }
        // validate the optional field `offsetAfter`
        if (data['offsetAfter']) { // data not null
          ZoneOffset.validateJSON(data['offsetAfter']);
        }
        // validate the optional field `offsetBefore`
        if (data['offsetBefore']) { // data not null
          ZoneOffset.validateJSON(data['offsetBefore']);
        }

        return true;
    }


}



/**
 * ~
 * @member {Date} dateTimeAfter
 */
ZoneOffsetTransition.prototype['dateTimeAfter'] = undefined;

/**
 * ~
 * @member {Date} dateTimeBefore
 */
ZoneOffsetTransition.prototype['dateTimeBefore'] = undefined;

/**
 * @member {module:model/Duration} duration
 */
ZoneOffsetTransition.prototype['duration'] = undefined;

/**
 * ~
 * @member {Boolean} gap
 */
ZoneOffsetTransition.prototype['gap'] = undefined;

/**
 * ~
 * @member {Number} instant
 */
ZoneOffsetTransition.prototype['instant'] = undefined;

/**
 * @member {module:model/ZoneOffset} offsetAfter
 */
ZoneOffsetTransition.prototype['offsetAfter'] = undefined;

/**
 * @member {module:model/ZoneOffset} offsetBefore
 */
ZoneOffsetTransition.prototype['offsetBefore'] = undefined;

/**
 * ~
 * @member {Boolean} overlap
 */
ZoneOffsetTransition.prototype['overlap'] = undefined;






export default ZoneOffsetTransition;

