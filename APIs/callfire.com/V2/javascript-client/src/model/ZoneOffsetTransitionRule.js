/**
 * CallFire API Documentation
 * CallFire
 *
 * The version of the OpenAPI document: V2
 * Contact: support@callfire.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import LocalTime from './LocalTime';
import ZoneOffset from './ZoneOffset';

/**
 * The ZoneOffsetTransitionRule model module.
 * @module model/ZoneOffsetTransitionRule
 * @version V2
 */
class ZoneOffsetTransitionRule {
    /**
     * Constructs a new <code>ZoneOffsetTransitionRule</code>.
     * ~
     * @alias module:model/ZoneOffsetTransitionRule
     */
    constructor() { 
        
        ZoneOffsetTransitionRule.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>ZoneOffsetTransitionRule</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ZoneOffsetTransitionRule} obj Optional instance to populate.
     * @return {module:model/ZoneOffsetTransitionRule} The populated <code>ZoneOffsetTransitionRule</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ZoneOffsetTransitionRule();

            if (data.hasOwnProperty('dayOfMonthIndicator')) {
                obj['dayOfMonthIndicator'] = ApiClient.convertToType(data['dayOfMonthIndicator'], 'Number');
            }
            if (data.hasOwnProperty('dayOfWeek')) {
                obj['dayOfWeek'] = ApiClient.convertToType(data['dayOfWeek'], 'String');
            }
            if (data.hasOwnProperty('localTime')) {
                obj['localTime'] = LocalTime.constructFromObject(data['localTime']);
            }
            if (data.hasOwnProperty('midnightEndOfDay')) {
                obj['midnightEndOfDay'] = ApiClient.convertToType(data['midnightEndOfDay'], 'Boolean');
            }
            if (data.hasOwnProperty('month')) {
                obj['month'] = ApiClient.convertToType(data['month'], 'String');
            }
            if (data.hasOwnProperty('offsetAfter')) {
                obj['offsetAfter'] = ZoneOffset.constructFromObject(data['offsetAfter']);
            }
            if (data.hasOwnProperty('offsetBefore')) {
                obj['offsetBefore'] = ZoneOffset.constructFromObject(data['offsetBefore']);
            }
            if (data.hasOwnProperty('standardOffset')) {
                obj['standardOffset'] = ZoneOffset.constructFromObject(data['standardOffset']);
            }
            if (data.hasOwnProperty('timeDefinition')) {
                obj['timeDefinition'] = ApiClient.convertToType(data['timeDefinition'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ZoneOffsetTransitionRule</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ZoneOffsetTransitionRule</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['dayOfWeek'] && !(typeof data['dayOfWeek'] === 'string' || data['dayOfWeek'] instanceof String)) {
            throw new Error("Expected the field `dayOfWeek` to be a primitive type in the JSON string but got " + data['dayOfWeek']);
        }
        // validate the optional field `localTime`
        if (data['localTime']) { // data not null
          LocalTime.validateJSON(data['localTime']);
        }
        // ensure the json data is a string
        if (data['month'] && !(typeof data['month'] === 'string' || data['month'] instanceof String)) {
            throw new Error("Expected the field `month` to be a primitive type in the JSON string but got " + data['month']);
        }
        // validate the optional field `offsetAfter`
        if (data['offsetAfter']) { // data not null
          ZoneOffset.validateJSON(data['offsetAfter']);
        }
        // validate the optional field `offsetBefore`
        if (data['offsetBefore']) { // data not null
          ZoneOffset.validateJSON(data['offsetBefore']);
        }
        // validate the optional field `standardOffset`
        if (data['standardOffset']) { // data not null
          ZoneOffset.validateJSON(data['standardOffset']);
        }
        // ensure the json data is a string
        if (data['timeDefinition'] && !(typeof data['timeDefinition'] === 'string' || data['timeDefinition'] instanceof String)) {
            throw new Error("Expected the field `timeDefinition` to be a primitive type in the JSON string but got " + data['timeDefinition']);
        }

        return true;
    }


}



/**
 * ~
 * @member {Number} dayOfMonthIndicator
 */
ZoneOffsetTransitionRule.prototype['dayOfMonthIndicator'] = undefined;

/**
 * ~
 * @member {module:model/ZoneOffsetTransitionRule.DayOfWeekEnum} dayOfWeek
 */
ZoneOffsetTransitionRule.prototype['dayOfWeek'] = undefined;

/**
 * @member {module:model/LocalTime} localTime
 */
ZoneOffsetTransitionRule.prototype['localTime'] = undefined;

/**
 * ~
 * @member {Boolean} midnightEndOfDay
 */
ZoneOffsetTransitionRule.prototype['midnightEndOfDay'] = undefined;

/**
 * ~
 * @member {module:model/ZoneOffsetTransitionRule.MonthEnum} month
 */
ZoneOffsetTransitionRule.prototype['month'] = undefined;

/**
 * @member {module:model/ZoneOffset} offsetAfter
 */
ZoneOffsetTransitionRule.prototype['offsetAfter'] = undefined;

/**
 * @member {module:model/ZoneOffset} offsetBefore
 */
ZoneOffsetTransitionRule.prototype['offsetBefore'] = undefined;

/**
 * @member {module:model/ZoneOffset} standardOffset
 */
ZoneOffsetTransitionRule.prototype['standardOffset'] = undefined;

/**
 * ~
 * @member {module:model/ZoneOffsetTransitionRule.TimeDefinitionEnum} timeDefinition
 */
ZoneOffsetTransitionRule.prototype['timeDefinition'] = undefined;





/**
 * Allowed values for the <code>dayOfWeek</code> property.
 * @enum {String}
 * @readonly
 */
ZoneOffsetTransitionRule['DayOfWeekEnum'] = {

    /**
     * value: "MONDAY"
     * @const
     */
    "MONDAY": "MONDAY",

    /**
     * value: "TUESDAY"
     * @const
     */
    "TUESDAY": "TUESDAY",

    /**
     * value: "WEDNESDAY"
     * @const
     */
    "WEDNESDAY": "WEDNESDAY",

    /**
     * value: "THURSDAY"
     * @const
     */
    "THURSDAY": "THURSDAY",

    /**
     * value: "FRIDAY"
     * @const
     */
    "FRIDAY": "FRIDAY",

    /**
     * value: "SATURDAY"
     * @const
     */
    "SATURDAY": "SATURDAY",

    /**
     * value: "SUNDAY"
     * @const
     */
    "SUNDAY": "SUNDAY"
};


/**
 * Allowed values for the <code>month</code> property.
 * @enum {String}
 * @readonly
 */
ZoneOffsetTransitionRule['MonthEnum'] = {

    /**
     * value: "JANUARY"
     * @const
     */
    "JANUARY": "JANUARY",

    /**
     * value: "FEBRUARY"
     * @const
     */
    "FEBRUARY": "FEBRUARY",

    /**
     * value: "MARCH"
     * @const
     */
    "MARCH": "MARCH",

    /**
     * value: "APRIL"
     * @const
     */
    "APRIL": "APRIL",

    /**
     * value: "MAY"
     * @const
     */
    "MAY": "MAY",

    /**
     * value: "JUNE"
     * @const
     */
    "JUNE": "JUNE",

    /**
     * value: "JULY"
     * @const
     */
    "JULY": "JULY",

    /**
     * value: "AUGUST"
     * @const
     */
    "AUGUST": "AUGUST",

    /**
     * value: "SEPTEMBER"
     * @const
     */
    "SEPTEMBER": "SEPTEMBER",

    /**
     * value: "OCTOBER"
     * @const
     */
    "OCTOBER": "OCTOBER",

    /**
     * value: "NOVEMBER"
     * @const
     */
    "NOVEMBER": "NOVEMBER",

    /**
     * value: "DECEMBER"
     * @const
     */
    "DECEMBER": "DECEMBER"
};


/**
 * Allowed values for the <code>timeDefinition</code> property.
 * @enum {String}
 * @readonly
 */
ZoneOffsetTransitionRule['TimeDefinitionEnum'] = {

    /**
     * value: "UTC"
     * @const
     */
    "UTC": "UTC",

    /**
     * value: "WALL"
     * @const
     */
    "WALL": "WALL",

    /**
     * value: "STANDARD"
     * @const
     */
    "STANDARD": "STANDARD"
};



export default ZoneOffsetTransitionRule;

