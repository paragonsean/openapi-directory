/**
 * CallFire API Documentation
 * CallFire
 *
 * The version of the OpenAPI document: V2
 * Contact: support@callfire.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The KeywordLease model module.
 * @module model/KeywordLease
 * @version V2
 */
class KeywordLease {
    /**
     * Constructs a new <code>KeywordLease</code>.
     * Represents a lease object for a given keyword
     * @alias module:model/KeywordLease
     */
    constructor() { 
        
        KeywordLease.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>KeywordLease</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/KeywordLease} obj Optional instance to populate.
     * @return {module:model/KeywordLease} The populated <code>KeywordLease</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new KeywordLease();

            if (data.hasOwnProperty('autoRenew')) {
                obj['autoRenew'] = ApiClient.convertToType(data['autoRenew'], 'Boolean');
            }
            if (data.hasOwnProperty('contactListId')) {
                obj['contactListId'] = ApiClient.convertToType(data['contactListId'], 'Number');
            }
            if (data.hasOwnProperty('doubleOptInEnabled')) {
                obj['doubleOptInEnabled'] = ApiClient.convertToType(data['doubleOptInEnabled'], 'Boolean');
            }
            if (data.hasOwnProperty('keyword')) {
                obj['keyword'] = ApiClient.convertToType(data['keyword'], 'String');
            }
            if (data.hasOwnProperty('labels')) {
                obj['labels'] = ApiClient.convertToType(data['labels'], ['String']);
            }
            if (data.hasOwnProperty('leaseBegin')) {
                obj['leaseBegin'] = ApiClient.convertToType(data['leaseBegin'], 'Number');
            }
            if (data.hasOwnProperty('leaseEnd')) {
                obj['leaseEnd'] = ApiClient.convertToType(data['leaseEnd'], 'Number');
            }
            if (data.hasOwnProperty('number')) {
                obj['number'] = ApiClient.convertToType(data['number'], 'String');
            }
            if (data.hasOwnProperty('optInConfirmationMessage')) {
                obj['optInConfirmationMessage'] = ApiClient.convertToType(data['optInConfirmationMessage'], 'String');
            }
            if (data.hasOwnProperty('shortCode')) {
                obj['shortCode'] = ApiClient.convertToType(data['shortCode'], 'String');
            }
            if (data.hasOwnProperty('status')) {
                obj['status'] = ApiClient.convertToType(data['status'], 'String');
            }
            if (data.hasOwnProperty('type')) {
                obj['type'] = ApiClient.convertToType(data['type'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>KeywordLease</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>KeywordLease</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['keyword'] && !(typeof data['keyword'] === 'string' || data['keyword'] instanceof String)) {
            throw new Error("Expected the field `keyword` to be a primitive type in the JSON string but got " + data['keyword']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['labels'])) {
            throw new Error("Expected the field `labels` to be an array in the JSON data but got " + data['labels']);
        }
        // ensure the json data is a string
        if (data['number'] && !(typeof data['number'] === 'string' || data['number'] instanceof String)) {
            throw new Error("Expected the field `number` to be a primitive type in the JSON string but got " + data['number']);
        }
        // ensure the json data is a string
        if (data['optInConfirmationMessage'] && !(typeof data['optInConfirmationMessage'] === 'string' || data['optInConfirmationMessage'] instanceof String)) {
            throw new Error("Expected the field `optInConfirmationMessage` to be a primitive type in the JSON string but got " + data['optInConfirmationMessage']);
        }
        // ensure the json data is a string
        if (data['shortCode'] && !(typeof data['shortCode'] === 'string' || data['shortCode'] instanceof String)) {
            throw new Error("Expected the field `shortCode` to be a primitive type in the JSON string but got " + data['shortCode']);
        }
        // ensure the json data is a string
        if (data['status'] && !(typeof data['status'] === 'string' || data['status'] instanceof String)) {
            throw new Error("Expected the field `status` to be a primitive type in the JSON string but got " + data['status']);
        }
        // ensure the json data is a string
        if (data['type'] && !(typeof data['type'] === 'string' || data['type'] instanceof String)) {
            throw new Error("Expected the field `type` to be a primitive type in the JSON string but got " + data['type']);
        }

        return true;
    }


}



/**
 * Enables the auto renewal of a keyword lease at the end of each billing cycle
 * @member {Boolean} autoRenew
 */
KeywordLease.prototype['autoRenew'] = undefined;

/**
 * Existing contact list ID
 * @member {Number} contactListId
 */
KeywordLease.prototype['contactListId'] = undefined;

/**
 * Enable/disable double opt in feature
 * @member {Boolean} doubleOptInEnabled
 */
KeywordLease.prototype['doubleOptInEnabled'] = undefined;

/**
 * A text used as a keyword
 * @member {String} keyword
 */
KeywordLease.prototype['keyword'] = undefined;

/**
 * ~
 * @member {Array.<String>} labels
 */
KeywordLease.prototype['labels'] = undefined;

/**
 * A time of a lease timestamp, formatted in unix time milliseconds (read only). Example: 1473781817000 for Sat, 05 Jan 1985 14:03:37 GMT
 * @member {Number} leaseBegin
 */
KeywordLease.prototype['leaseBegin'] = undefined;

/**
 * A date and time when the keyword lease is finishes. Timestamp, formatted in unix time milliseconds (read only). Example: 1473781817000
 * @member {Number} leaseEnd
 */
KeywordLease.prototype['leaseEnd'] = undefined;

/**
 * A number assigned to keyword. Example: 12132212344
 * @member {String} number
 */
KeywordLease.prototype['number'] = undefined;

/**
 * Opt in confirmation message
 * @member {String} optInConfirmationMessage
 */
KeywordLease.prototype['optInConfirmationMessage'] = undefined;

/**
 * A short code assigned to keyword. Example: 67076 (Deprecated - please use number instead)
 * @member {String} shortCode
 */
KeywordLease.prototype['shortCode'] = undefined;

/**
 * A lease status. Available values: PENDING, ACTIVE, RELEASED, UNAVAILABLE
 * @member {module:model/KeywordLease.StatusEnum} status
 */
KeywordLease.prototype['status'] = undefined;

/**
 * ~
 * @member {module:model/KeywordLease.TypeEnum} type
 */
KeywordLease.prototype['type'] = undefined;





/**
 * Allowed values for the <code>status</code> property.
 * @enum {String}
 * @readonly
 */
KeywordLease['StatusEnum'] = {

    /**
     * value: "PENDING"
     * @const
     */
    "PENDING": "PENDING",

    /**
     * value: "ACTIVE"
     * @const
     */
    "ACTIVE": "ACTIVE",

    /**
     * value: "RELEASED"
     * @const
     */
    "RELEASED": "RELEASED",

    /**
     * value: "UNAVAILABLE"
     * @const
     */
    "UNAVAILABLE": "UNAVAILABLE"
};


/**
 * Allowed values for the <code>type</code> property.
 * @enum {String}
 * @readonly
 */
KeywordLease['TypeEnum'] = {

    /**
     * value: "PLAN"
     * @const
     */
    "PLAN": "PLAN",

    /**
     * value: "EXTRA"
     * @const
     */
    "EXTRA": "EXTRA"
};



export default KeywordLease;

