/**
 * CallFire API Documentation
 * CallFire
 *
 * The version of the OpenAPI document: V2
 * Contact: support@callfire.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import DateTimeZone from './DateTimeZone';
import Duration from './Duration';
import LocalTimeZoneRestriction from './LocalTimeZoneRestriction';
import Locale from './Locale';
import TimeZone from './TimeZone';
import ZoneId from './ZoneId';

/**
 * The Account model module.
 * @module model/Account
 * @version V2
 */
class Account {
    /**
     * Constructs a new <code>Account</code>.
     * Object represents user account in Callfire system
     * @alias module:model/Account
     */
    constructor() { 
        
        Account.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>Account</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Account} obj Optional instance to populate.
     * @return {module:model/Account} The populated <code>Account</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Account();

            if (data.hasOwnProperty('active')) {
                obj['active'] = ApiClient.convertToType(data['active'], 'Boolean');
            }
            if (data.hasOwnProperty('address')) {
                obj['address'] = ApiClient.convertToType(data['address'], 'String');
            }
            if (data.hasOwnProperty('age')) {
                obj['age'] = Duration.constructFromObject(data['age']);
            }
            if (data.hasOwnProperty('agencyManagedAccounts')) {
                obj['agencyManagedAccounts'] = ApiClient.convertToType(data['agencyManagedAccounts'], 'Boolean');
            }
            if (data.hasOwnProperty('allowedToCreateCampaign')) {
                obj['allowedToCreateCampaign'] = ApiClient.convertToType(data['allowedToCreateCampaign'], 'Boolean');
            }
            if (data.hasOwnProperty('apiCallLimit')) {
                obj['apiCallLimit'] = ApiClient.convertToType(data['apiCallLimit'], 'Number');
            }
            if (data.hasOwnProperty('archived')) {
                obj['archived'] = ApiClient.convertToType(data['archived'], 'Boolean');
            }
            if (data.hasOwnProperty('autoAddDoNotContact')) {
                obj['autoAddDoNotContact'] = ApiClient.convertToType(data['autoAddDoNotContact'], 'Boolean');
            }
            if (data.hasOwnProperty('brand')) {
                obj['brand'] = ApiClient.convertToType(data['brand'], 'String');
            }
            if (data.hasOwnProperty('canceled')) {
                obj['canceled'] = ApiClient.convertToType(data['canceled'], 'Boolean');
            }
            if (data.hasOwnProperty('canceledOrArchived')) {
                obj['canceledOrArchived'] = ApiClient.convertToType(data['canceledOrArchived'], 'Boolean');
            }
            if (data.hasOwnProperty('city')) {
                obj['city'] = ApiClient.convertToType(data['city'], 'String');
            }
            if (data.hasOwnProperty('companyName')) {
                obj['companyName'] = ApiClient.convertToType(data['companyName'], 'String');
            }
            if (data.hasOwnProperty('country')) {
                obj['country'] = ApiClient.convertToType(data['country'], 'String');
            }
            if (data.hasOwnProperty('countryOrDefault')) {
                obj['countryOrDefault'] = ApiClient.convertToType(data['countryOrDefault'], 'String');
            }
            if (data.hasOwnProperty('created')) {
                obj['created'] = ApiClient.convertToType(data['created'], 'Date');
            }
            if (data.hasOwnProperty('dateTimeZone')) {
                obj['dateTimeZone'] = DateTimeZone.constructFromObject(data['dateTimeZone']);
            }
            if (data.hasOwnProperty('defaultNotificationTtlMillis')) {
                obj['defaultNotificationTtlMillis'] = ApiClient.convertToType(data['defaultNotificationTtlMillis'], 'Number');
            }
            if (data.hasOwnProperty('defaultNumberId')) {
                obj['defaultNumberId'] = ApiClient.convertToType(data['defaultNumberId'], 'Number');
            }
            if (data.hasOwnProperty('ein')) {
                obj['ein'] = ApiClient.convertToType(data['ein'], 'String');
            }
            if (data.hasOwnProperty('entityType')) {
                obj['entityType'] = ApiClient.convertToType(data['entityType'], 'String');
            }
            if (data.hasOwnProperty('ez')) {
                obj['ez'] = ApiClient.convertToType(data['ez'], 'Boolean');
            }
            if (data.hasOwnProperty('failedVerificationAttempts')) {
                obj['failedVerificationAttempts'] = ApiClient.convertToType(data['failedVerificationAttempts'], 'Number');
            }
            if (data.hasOwnProperty('fromNumberPool')) {
                obj['fromNumberPool'] = ApiClient.convertToType(data['fromNumberPool'], 'String');
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'Number');
            }
            if (data.hasOwnProperty('industry')) {
                obj['industry'] = ApiClient.convertToType(data['industry'], 'String');
            }
            if (data.hasOwnProperty('industryName')) {
                obj['industryName'] = ApiClient.convertToType(data['industryName'], 'String');
            }
            if (data.hasOwnProperty('key')) {
                obj['key'] = ApiClient.convertToType(data['key'], 'String');
            }
            if (data.hasOwnProperty('localTimeZoneRestriction')) {
                obj['localTimeZoneRestriction'] = LocalTimeZoneRestriction.constructFromObject(data['localTimeZoneRestriction']);
            }
            if (data.hasOwnProperty('locale')) {
                obj['locale'] = Locale.constructFromObject(data['locale']);
            }
            if (data.hasOwnProperty('maxAgents')) {
                obj['maxAgents'] = ApiClient.convertToType(data['maxAgents'], 'Number');
            }
            if (data.hasOwnProperty('messageClass')) {
                obj['messageClass'] = ApiClient.convertToType(data['messageClass'], 'String');
            }
            if (data.hasOwnProperty('messageFlows')) {
                obj['messageFlows'] = ApiClient.convertToType(data['messageFlows'], ['String']);
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('outboundThreshold')) {
                obj['outboundThreshold'] = ApiClient.convertToType(data['outboundThreshold'], 'Number');
            }
            if (data.hasOwnProperty('receiverPeriodCall')) {
                obj['receiverPeriodCall'] = ApiClient.convertToType(data['receiverPeriodCall'], 'Number');
            }
            if (data.hasOwnProperty('receiverPeriodEnabled')) {
                obj['receiverPeriodEnabled'] = ApiClient.convertToType(data['receiverPeriodEnabled'], 'Boolean');
            }
            if (data.hasOwnProperty('receiverPeriodGlobal')) {
                obj['receiverPeriodGlobal'] = ApiClient.convertToType(data['receiverPeriodGlobal'], 'Number');
            }
            if (data.hasOwnProperty('receiverPeriodText')) {
                obj['receiverPeriodText'] = ApiClient.convertToType(data['receiverPeriodText'], 'Number');
            }
            if (data.hasOwnProperty('receiverPeriodTimeUnit')) {
                obj['receiverPeriodTimeUnit'] = ApiClient.convertToType(data['receiverPeriodTimeUnit'], 'String');
            }
            if (data.hasOwnProperty('retainOnlyMetadata')) {
                obj['retainOnlyMetadata'] = ApiClient.convertToType(data['retainOnlyMetadata'], 'Boolean');
            }
            if (data.hasOwnProperty('retainOnlyMetadataLastDetailRecordId')) {
                obj['retainOnlyMetadataLastDetailRecordId'] = ApiClient.convertToType(data['retainOnlyMetadataLastDetailRecordId'], 'Number');
            }
            if (data.hasOwnProperty('retainOnlyMetadataLastModified')) {
                obj['retainOnlyMetadataLastModified'] = ApiClient.convertToType(data['retainOnlyMetadataLastModified'], 'Date');
            }
            if (data.hasOwnProperty('scrub')) {
                obj['scrub'] = ApiClient.convertToType(data['scrub'], 'Boolean');
            }
            if (data.hasOwnProperty('sharedShortCodeAllowed')) {
                obj['sharedShortCodeAllowed'] = ApiClient.convertToType(data['sharedShortCodeAllowed'], 'Boolean');
            }
            if (data.hasOwnProperty('sharedShortCodeId')) {
                obj['sharedShortCodeId'] = ApiClient.convertToType(data['sharedShortCodeId'], 'Number');
            }
            if (data.hasOwnProperty('soaAccount')) {
                obj['soaAccount'] = Account.constructFromObject(data['soaAccount']);
            }
            if (data.hasOwnProperty('startCapable')) {
                obj['startCapable'] = ApiClient.convertToType(data['startCapable'], 'Boolean');
            }
            if (data.hasOwnProperty('state')) {
                obj['state'] = ApiClient.convertToType(data['state'], 'String');
            }
            if (data.hasOwnProperty('status')) {
                obj['status'] = ApiClient.convertToType(data['status'], 'String');
            }
            if (data.hasOwnProperty('textOutboundThreshold')) {
                obj['textOutboundThreshold'] = ApiClient.convertToType(data['textOutboundThreshold'], 'Number');
            }
            if (data.hasOwnProperty('timeZone')) {
                obj['timeZone'] = TimeZone.constructFromObject(data['timeZone']);
            }
            if (data.hasOwnProperty('timeZoneId')) {
                obj['timeZoneId'] = ZoneId.constructFromObject(data['timeZoneId']);
            }
            if (data.hasOwnProperty('trustLevel')) {
                obj['trustLevel'] = ApiClient.convertToType(data['trustLevel'], 'String');
            }
            if (data.hasOwnProperty('tsrAgreement')) {
                obj['tsrAgreement'] = ApiClient.convertToType(data['tsrAgreement'], 'Date');
            }
            if (data.hasOwnProperty('tsrInitials')) {
                obj['tsrInitials'] = ApiClient.convertToType(data['tsrInitials'], 'String');
            }
            if (data.hasOwnProperty('uiContext')) {
                obj['uiContext'] = ApiClient.convertToType(data['uiContext'], 'String');
            }
            if (data.hasOwnProperty('universal')) {
                obj['universal'] = ApiClient.convertToType(data['universal'], 'Boolean');
            }
            if (data.hasOwnProperty('website')) {
                obj['website'] = ApiClient.convertToType(data['website'], 'String');
            }
            if (data.hasOwnProperty('zipcode')) {
                obj['zipcode'] = ApiClient.convertToType(data['zipcode'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Account</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Account</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['address'] && !(typeof data['address'] === 'string' || data['address'] instanceof String)) {
            throw new Error("Expected the field `address` to be a primitive type in the JSON string but got " + data['address']);
        }
        // validate the optional field `age`
        if (data['age']) { // data not null
          Duration.validateJSON(data['age']);
        }
        // ensure the json data is a string
        if (data['brand'] && !(typeof data['brand'] === 'string' || data['brand'] instanceof String)) {
            throw new Error("Expected the field `brand` to be a primitive type in the JSON string but got " + data['brand']);
        }
        // ensure the json data is a string
        if (data['city'] && !(typeof data['city'] === 'string' || data['city'] instanceof String)) {
            throw new Error("Expected the field `city` to be a primitive type in the JSON string but got " + data['city']);
        }
        // ensure the json data is a string
        if (data['companyName'] && !(typeof data['companyName'] === 'string' || data['companyName'] instanceof String)) {
            throw new Error("Expected the field `companyName` to be a primitive type in the JSON string but got " + data['companyName']);
        }
        // ensure the json data is a string
        if (data['country'] && !(typeof data['country'] === 'string' || data['country'] instanceof String)) {
            throw new Error("Expected the field `country` to be a primitive type in the JSON string but got " + data['country']);
        }
        // ensure the json data is a string
        if (data['countryOrDefault'] && !(typeof data['countryOrDefault'] === 'string' || data['countryOrDefault'] instanceof String)) {
            throw new Error("Expected the field `countryOrDefault` to be a primitive type in the JSON string but got " + data['countryOrDefault']);
        }
        // validate the optional field `dateTimeZone`
        if (data['dateTimeZone']) { // data not null
          DateTimeZone.validateJSON(data['dateTimeZone']);
        }
        // ensure the json data is a string
        if (data['ein'] && !(typeof data['ein'] === 'string' || data['ein'] instanceof String)) {
            throw new Error("Expected the field `ein` to be a primitive type in the JSON string but got " + data['ein']);
        }
        // ensure the json data is a string
        if (data['entityType'] && !(typeof data['entityType'] === 'string' || data['entityType'] instanceof String)) {
            throw new Error("Expected the field `entityType` to be a primitive type in the JSON string but got " + data['entityType']);
        }
        // ensure the json data is a string
        if (data['fromNumberPool'] && !(typeof data['fromNumberPool'] === 'string' || data['fromNumberPool'] instanceof String)) {
            throw new Error("Expected the field `fromNumberPool` to be a primitive type in the JSON string but got " + data['fromNumberPool']);
        }
        // ensure the json data is a string
        if (data['industry'] && !(typeof data['industry'] === 'string' || data['industry'] instanceof String)) {
            throw new Error("Expected the field `industry` to be a primitive type in the JSON string but got " + data['industry']);
        }
        // ensure the json data is a string
        if (data['industryName'] && !(typeof data['industryName'] === 'string' || data['industryName'] instanceof String)) {
            throw new Error("Expected the field `industryName` to be a primitive type in the JSON string but got " + data['industryName']);
        }
        // ensure the json data is a string
        if (data['key'] && !(typeof data['key'] === 'string' || data['key'] instanceof String)) {
            throw new Error("Expected the field `key` to be a primitive type in the JSON string but got " + data['key']);
        }
        // validate the optional field `localTimeZoneRestriction`
        if (data['localTimeZoneRestriction']) { // data not null
          LocalTimeZoneRestriction.validateJSON(data['localTimeZoneRestriction']);
        }
        // validate the optional field `locale`
        if (data['locale']) { // data not null
          Locale.validateJSON(data['locale']);
        }
        // ensure the json data is a string
        if (data['messageClass'] && !(typeof data['messageClass'] === 'string' || data['messageClass'] instanceof String)) {
            throw new Error("Expected the field `messageClass` to be a primitive type in the JSON string but got " + data['messageClass']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['messageFlows'])) {
            throw new Error("Expected the field `messageFlows` to be an array in the JSON data but got " + data['messageFlows']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // ensure the json data is a string
        if (data['receiverPeriodTimeUnit'] && !(typeof data['receiverPeriodTimeUnit'] === 'string' || data['receiverPeriodTimeUnit'] instanceof String)) {
            throw new Error("Expected the field `receiverPeriodTimeUnit` to be a primitive type in the JSON string but got " + data['receiverPeriodTimeUnit']);
        }
        // validate the optional field `soaAccount`
        if (data['soaAccount']) { // data not null
          Account.validateJSON(data['soaAccount']);
        }
        // ensure the json data is a string
        if (data['state'] && !(typeof data['state'] === 'string' || data['state'] instanceof String)) {
            throw new Error("Expected the field `state` to be a primitive type in the JSON string but got " + data['state']);
        }
        // ensure the json data is a string
        if (data['status'] && !(typeof data['status'] === 'string' || data['status'] instanceof String)) {
            throw new Error("Expected the field `status` to be a primitive type in the JSON string but got " + data['status']);
        }
        // validate the optional field `timeZone`
        if (data['timeZone']) { // data not null
          TimeZone.validateJSON(data['timeZone']);
        }
        // validate the optional field `timeZoneId`
        if (data['timeZoneId']) { // data not null
          ZoneId.validateJSON(data['timeZoneId']);
        }
        // ensure the json data is a string
        if (data['trustLevel'] && !(typeof data['trustLevel'] === 'string' || data['trustLevel'] instanceof String)) {
            throw new Error("Expected the field `trustLevel` to be a primitive type in the JSON string but got " + data['trustLevel']);
        }
        // ensure the json data is a string
        if (data['tsrInitials'] && !(typeof data['tsrInitials'] === 'string' || data['tsrInitials'] instanceof String)) {
            throw new Error("Expected the field `tsrInitials` to be a primitive type in the JSON string but got " + data['tsrInitials']);
        }
        // ensure the json data is a string
        if (data['uiContext'] && !(typeof data['uiContext'] === 'string' || data['uiContext'] instanceof String)) {
            throw new Error("Expected the field `uiContext` to be a primitive type in the JSON string but got " + data['uiContext']);
        }
        // ensure the json data is a string
        if (data['website'] && !(typeof data['website'] === 'string' || data['website'] instanceof String)) {
            throw new Error("Expected the field `website` to be a primitive type in the JSON string but got " + data['website']);
        }
        // ensure the json data is a string
        if (data['zipcode'] && !(typeof data['zipcode'] === 'string' || data['zipcode'] instanceof String)) {
            throw new Error("Expected the field `zipcode` to be a primitive type in the JSON string but got " + data['zipcode']);
        }

        return true;
    }


}



/**
 * ~
 * @member {Boolean} active
 */
Account.prototype['active'] = undefined;

/**
 * ~
 * @member {String} address
 */
Account.prototype['address'] = undefined;

/**
 * @member {module:model/Duration} age
 */
Account.prototype['age'] = undefined;

/**
 * ~
 * @member {Boolean} agencyManagedAccounts
 */
Account.prototype['agencyManagedAccounts'] = undefined;

/**
 * ~
 * @member {Boolean} allowedToCreateCampaign
 */
Account.prototype['allowedToCreateCampaign'] = undefined;

/**
 * ~
 * @member {Number} apiCallLimit
 */
Account.prototype['apiCallLimit'] = undefined;

/**
 * ~
 * @member {Boolean} archived
 */
Account.prototype['archived'] = undefined;

/**
 * ~
 * @member {Boolean} autoAddDoNotContact
 */
Account.prototype['autoAddDoNotContact'] = undefined;

/**
 * ~
 * @member {module:model/Account.BrandEnum} brand
 */
Account.prototype['brand'] = undefined;

/**
 * ~
 * @member {Boolean} canceled
 */
Account.prototype['canceled'] = undefined;

/**
 * ~
 * @member {Boolean} canceledOrArchived
 */
Account.prototype['canceledOrArchived'] = undefined;

/**
 * ~
 * @member {String} city
 */
Account.prototype['city'] = undefined;

/**
 * ~
 * @member {String} companyName
 */
Account.prototype['companyName'] = undefined;

/**
 * ~
 * @member {module:model/Account.CountryEnum} country
 */
Account.prototype['country'] = undefined;

/**
 * ~
 * @member {module:model/Account.CountryOrDefaultEnum} countryOrDefault
 */
Account.prototype['countryOrDefault'] = undefined;

/**
 * ~
 * @member {Date} created
 */
Account.prototype['created'] = undefined;

/**
 * @member {module:model/DateTimeZone} dateTimeZone
 */
Account.prototype['dateTimeZone'] = undefined;

/**
 * ~
 * @member {Number} defaultNotificationTtlMillis
 */
Account.prototype['defaultNotificationTtlMillis'] = undefined;

/**
 * ~
 * @member {Number} defaultNumberId
 */
Account.prototype['defaultNumberId'] = undefined;

/**
 * ~
 * @member {String} ein
 */
Account.prototype['ein'] = undefined;

/**
 * ~
 * @member {module:model/Account.EntityTypeEnum} entityType
 */
Account.prototype['entityType'] = undefined;

/**
 * ~
 * @member {Boolean} ez
 */
Account.prototype['ez'] = undefined;

/**
 * ~
 * @member {Number} failedVerificationAttempts
 */
Account.prototype['failedVerificationAttempts'] = undefined;

/**
 * ~
 * @member {String} fromNumberPool
 */
Account.prototype['fromNumberPool'] = undefined;

/**
 * An id of an account
 * @member {Number} id
 */
Account.prototype['id'] = undefined;

/**
 * ~
 * @member {module:model/Account.IndustryEnum} industry
 */
Account.prototype['industry'] = undefined;

/**
 * ~
 * @member {String} industryName
 */
Account.prototype['industryName'] = undefined;

/**
 * ~
 * @member {String} key
 */
Account.prototype['key'] = undefined;

/**
 * @member {module:model/LocalTimeZoneRestriction} localTimeZoneRestriction
 */
Account.prototype['localTimeZoneRestriction'] = undefined;

/**
 * @member {module:model/Locale} locale
 */
Account.prototype['locale'] = undefined;

/**
 * ~
 * @member {Number} maxAgents
 */
Account.prototype['maxAgents'] = undefined;

/**
 * ~
 * @member {String} messageClass
 */
Account.prototype['messageClass'] = undefined;

/**
 * ~
 * @member {Array.<String>} messageFlows
 */
Account.prototype['messageFlows'] = undefined;

/**
 * Name associated with an account
 * @member {String} name
 */
Account.prototype['name'] = undefined;

/**
 * ~
 * @member {Number} outboundThreshold
 */
Account.prototype['outboundThreshold'] = undefined;

/**
 * ~
 * @member {Number} receiverPeriodCall
 */
Account.prototype['receiverPeriodCall'] = undefined;

/**
 * ~
 * @member {Boolean} receiverPeriodEnabled
 */
Account.prototype['receiverPeriodEnabled'] = undefined;

/**
 * ~
 * @member {Number} receiverPeriodGlobal
 */
Account.prototype['receiverPeriodGlobal'] = undefined;

/**
 * ~
 * @member {Number} receiverPeriodText
 */
Account.prototype['receiverPeriodText'] = undefined;

/**
 * ~
 * @member {module:model/Account.ReceiverPeriodTimeUnitEnum} receiverPeriodTimeUnit
 */
Account.prototype['receiverPeriodTimeUnit'] = undefined;

/**
 * ~
 * @member {Boolean} retainOnlyMetadata
 */
Account.prototype['retainOnlyMetadata'] = undefined;

/**
 * ~
 * @member {Number} retainOnlyMetadataLastDetailRecordId
 */
Account.prototype['retainOnlyMetadataLastDetailRecordId'] = undefined;

/**
 * ~
 * @member {Date} retainOnlyMetadataLastModified
 */
Account.prototype['retainOnlyMetadataLastModified'] = undefined;

/**
 * ~
 * @member {Boolean} scrub
 */
Account.prototype['scrub'] = undefined;

/**
 * ~
 * @member {Boolean} sharedShortCodeAllowed
 */
Account.prototype['sharedShortCodeAllowed'] = undefined;

/**
 * ~
 * @member {Number} sharedShortCodeId
 */
Account.prototype['sharedShortCodeId'] = undefined;

/**
 * @member {module:model/Account} soaAccount
 */
Account.prototype['soaAccount'] = undefined;

/**
 * ~
 * @member {Boolean} startCapable
 */
Account.prototype['startCapable'] = undefined;

/**
 * ~
 * @member {String} state
 */
Account.prototype['state'] = undefined;

/**
 * ~
 * @member {module:model/Account.StatusEnum} status
 */
Account.prototype['status'] = undefined;

/**
 * ~
 * @member {Number} textOutboundThreshold
 */
Account.prototype['textOutboundThreshold'] = undefined;

/**
 * @member {module:model/TimeZone} timeZone
 */
Account.prototype['timeZone'] = undefined;

/**
 * @member {module:model/ZoneId} timeZoneId
 */
Account.prototype['timeZoneId'] = undefined;

/**
 * ~
 * @member {module:model/Account.TrustLevelEnum} trustLevel
 */
Account.prototype['trustLevel'] = undefined;

/**
 * ~
 * @member {Date} tsrAgreement
 */
Account.prototype['tsrAgreement'] = undefined;

/**
 * ~
 * @member {String} tsrInitials
 */
Account.prototype['tsrInitials'] = undefined;

/**
 * ~
 * @member {String} uiContext
 */
Account.prototype['uiContext'] = undefined;

/**
 * ~
 * @member {Boolean} universal
 */
Account.prototype['universal'] = undefined;

/**
 * ~
 * @member {String} website
 */
Account.prototype['website'] = undefined;

/**
 * ~
 * @member {String} zipcode
 */
Account.prototype['zipcode'] = undefined;





/**
 * Allowed values for the <code>brand</code> property.
 * @enum {String}
 * @readonly
 */
Account['BrandEnum'] = {

    /**
     * value: "EZTEXTING"
     * @const
     */
    "EZTEXTING": "EZTEXTING",

    /**
     * value: "CLUBTEXTING"
     * @const
     */
    "CLUBTEXTING": "CLUBTEXTING",

    /**
     * value: "GROUPTEXTING"
     * @const
     */
    "GROUPTEXTING": "GROUPTEXTING",

    /**
     * value: "TELLMYCELL"
     * @const
     */
    "TELLMYCELL": "TELLMYCELL",

    /**
     * value: "EZ"
     * @const
     */
    "EZ": "EZ",

    /**
     * value: "CALLFIRE"
     * @const
     */
    "CALLFIRE": "CALLFIRE",

    /**
     * value: "TESLA"
     * @const
     */
    "TESLA": "TESLA"
};


/**
 * Allowed values for the <code>country</code> property.
 * @enum {String}
 * @readonly
 */
Account['CountryEnum'] = {

    /**
     * value: "US"
     * @const
     */
    "US": "US",

    /**
     * value: "CA"
     * @const
     */
    "CA": "CA"
};


/**
 * Allowed values for the <code>countryOrDefault</code> property.
 * @enum {String}
 * @readonly
 */
Account['CountryOrDefaultEnum'] = {

    /**
     * value: "US"
     * @const
     */
    "US": "US",

    /**
     * value: "CA"
     * @const
     */
    "CA": "CA"
};


/**
 * Allowed values for the <code>entityType</code> property.
 * @enum {String}
 * @readonly
 */
Account['EntityTypeEnum'] = {

    /**
     * value: "SP"
     * @const
     */
    "SP": "SP",

    /**
     * value: "COMPANY"
     * @const
     */
    "COMPANY": "COMPANY"
};


/**
 * Allowed values for the <code>industry</code> property.
 * @enum {String}
 * @readonly
 */
Account['IndustryEnum'] = {

    /**
     * value: "UNKNOWN"
     * @const
     */
    "UNKNOWN": "UNKNOWN",

    /**
     * value: "ADVERTISING"
     * @const
     */
    "ADVERTISING": "ADVERTISING",

    /**
     * value: "AUTOMOTIVE"
     * @const
     */
    "AUTOMOTIVE": "AUTOMOTIVE",

    /**
     * value: "COLLECTIONS"
     * @const
     */
    "COLLECTIONS": "COLLECTIONS",

    /**
     * value: "CONSULTING"
     * @const
     */
    "CONSULTING": "CONSULTING",

    /**
     * value: "DECLINE"
     * @const
     */
    "DECLINE": "DECLINE",

    /**
     * value: "EDUCATION"
     * @const
     */
    "EDUCATION": "EDUCATION",

    /**
     * value: "EMERGENCY"
     * @const
     */
    "EMERGENCY": "EMERGENCY",

    /**
     * value: "ENTERTAINMENT"
     * @const
     */
    "ENTERTAINMENT": "ENTERTAINMENT",

    /**
     * value: "FINANCE"
     * @const
     */
    "FINANCE": "FINANCE",

    /**
     * value: "HOSPITALITY"
     * @const
     */
    "HOSPITALITY": "HOSPITALITY",

    /**
     * value: "HEALTHFITNESS"
     * @const
     */
    "HEALTHFITNESS": "HEALTHFITNESS",

    /**
     * value: "HEALTHCARE"
     * @const
     */
    "HEALTHCARE": "HEALTHCARE",

    /**
     * value: "INSURANCE"
     * @const
     */
    "INSURANCE": "INSURANCE",

    /**
     * value: "LEAD"
     * @const
     */
    "LEAD": "LEAD",

    /**
     * value: "OTHER"
     * @const
     */
    "OTHER": "OTHER",

    /**
     * value: "POLITICAL"
     * @const
     */
    "POLITICAL": "POLITICAL",

    /**
     * value: "REAL_ESTATE"
     * @const
     */
    "REAL_ESTATE": "REAL_ESTATE",

    /**
     * value: "RETAIL"
     * @const
     */
    "RETAIL": "RETAIL",

    /**
     * value: "SEARCH_MARKETING"
     * @const
     */
    "SEARCH_MARKETING": "SEARCH_MARKETING",

    /**
     * value: "TELECOM"
     * @const
     */
    "TELECOM": "TELECOM"
};


/**
 * Allowed values for the <code>receiverPeriodTimeUnit</code> property.
 * @enum {String}
 * @readonly
 */
Account['ReceiverPeriodTimeUnitEnum'] = {

    /**
     * value: "NANOSECONDS"
     * @const
     */
    "NANOSECONDS": "NANOSECONDS",

    /**
     * value: "MICROSECONDS"
     * @const
     */
    "MICROSECONDS": "MICROSECONDS",

    /**
     * value: "MILLISECONDS"
     * @const
     */
    "MILLISECONDS": "MILLISECONDS",

    /**
     * value: "SECONDS"
     * @const
     */
    "SECONDS": "SECONDS",

    /**
     * value: "MINUTES"
     * @const
     */
    "MINUTES": "MINUTES",

    /**
     * value: "HOURS"
     * @const
     */
    "HOURS": "HOURS",

    /**
     * value: "DAYS"
     * @const
     */
    "DAYS": "DAYS"
};


/**
 * Allowed values for the <code>status</code> property.
 * @enum {String}
 * @readonly
 */
Account['StatusEnum'] = {

    /**
     * value: "ACTIVE"
     * @const
     */
    "ACTIVE": "ACTIVE",

    /**
     * value: "PENDING_CANCELLED"
     * @const
     */
    "PENDING_CANCELLED": "PENDING_CANCELLED",

    /**
     * value: "CANCELLED"
     * @const
     */
    "CANCELLED": "CANCELLED",

    /**
     * value: "ARCHIVING"
     * @const
     */
    "ARCHIVING": "ARCHIVING",

    /**
     * value: "ARCHIVED"
     * @const
     */
    "ARCHIVED": "ARCHIVED"
};


/**
 * Allowed values for the <code>trustLevel</code> property.
 * @enum {String}
 * @readonly
 */
Account['TrustLevelEnum'] = {

    /**
     * value: "LOCKED"
     * @const
     */
    "LOCKED": "LOCKED",

    /**
     * value: "SUSPENDED"
     * @const
     */
    "SUSPENDED": "SUSPENDED",

    /**
     * value: "PROBATION"
     * @const
     */
    "PROBATION": "PROBATION",

    /**
     * value: "NORMAL"
     * @const
     */
    "NORMAL": "NORMAL",

    /**
     * value: "TRUSTED"
     * @const
     */
    "TRUSTED": "TRUSTED"
};



export default Account;

