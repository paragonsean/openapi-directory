/**
 * CallFire API Documentation
 * CallFire
 *
 * The version of the OpenAPI document: V2
 * Contact: support@callfire.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The TextRecord model module.
 * @module model/TextRecord
 * @version V2
 */
class TextRecord {
    /**
     * Constructs a new <code>TextRecord</code>.
     * Represents a text message sent to a contact&#39;s number
     * @alias module:model/TextRecord
     */
    constructor() { 
        
        TextRecord.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>TextRecord</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/TextRecord} obj Optional instance to populate.
     * @return {module:model/TextRecord} The populated <code>TextRecord</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new TextRecord();

            if (data.hasOwnProperty('billedAmount')) {
                obj['billedAmount'] = ApiClient.convertToType(data['billedAmount'], 'Number');
            }
            if (data.hasOwnProperty('callerName')) {
                obj['callerName'] = ApiClient.convertToType(data['callerName'], 'String');
            }
            if (data.hasOwnProperty('finishTime')) {
                obj['finishTime'] = ApiClient.convertToType(data['finishTime'], 'Number');
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'Number');
            }
            if (data.hasOwnProperty('labels')) {
                obj['labels'] = ApiClient.convertToType(data['labels'], ['String']);
            }
            if (data.hasOwnProperty('message')) {
                obj['message'] = ApiClient.convertToType(data['message'], 'String');
            }
            if (data.hasOwnProperty('switchId')) {
                obj['switchId'] = ApiClient.convertToType(data['switchId'], 'String');
            }
            if (data.hasOwnProperty('textResult')) {
                obj['textResult'] = ApiClient.convertToType(data['textResult'], 'String');
            }
            if (data.hasOwnProperty('toNumber')) {
                obj['toNumber'] = ApiClient.convertToType(data['toNumber'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>TextRecord</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>TextRecord</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['callerName'] && !(typeof data['callerName'] === 'string' || data['callerName'] instanceof String)) {
            throw new Error("Expected the field `callerName` to be a primitive type in the JSON string but got " + data['callerName']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['labels'])) {
            throw new Error("Expected the field `labels` to be an array in the JSON data but got " + data['labels']);
        }
        // ensure the json data is a string
        if (data['message'] && !(typeof data['message'] === 'string' || data['message'] instanceof String)) {
            throw new Error("Expected the field `message` to be a primitive type in the JSON string but got " + data['message']);
        }
        // ensure the json data is a string
        if (data['switchId'] && !(typeof data['switchId'] === 'string' || data['switchId'] instanceof String)) {
            throw new Error("Expected the field `switchId` to be a primitive type in the JSON string but got " + data['switchId']);
        }
        // ensure the json data is a string
        if (data['textResult'] && !(typeof data['textResult'] === 'string' || data['textResult'] instanceof String)) {
            throw new Error("Expected the field `textResult` to be a primitive type in the JSON string but got " + data['textResult']);
        }
        // ensure the json data is a string
        if (data['toNumber'] && !(typeof data['toNumber'] === 'string' || data['toNumber'] instanceof String)) {
            throw new Error("Expected the field `toNumber` to be a primitive type in the JSON string but got " + data['toNumber']);
        }

        return true;
    }


}



/**
 * A cost of a sent text
 * @member {Number} billedAmount
 */
TextRecord.prototype['billedAmount'] = undefined;

/**
 * ~
 * @member {String} callerName
 */
TextRecord.prototype['callerName'] = undefined;

/**
 * A time when the given resource was updated, formatted in unix time milliseconds (read only). Example: 1473781817000
 * @member {Number} finishTime
 */
TextRecord.prototype['finishTime'] = undefined;

/**
 * An id of a text record
 * @member {Number} id
 */
TextRecord.prototype['id'] = undefined;

/**
 * Labels associated with a text action
 * @member {Array.<String>} labels
 */
TextRecord.prototype['labels'] = undefined;

/**
 * A text message
 * @member {String} message
 */
TextRecord.prototype['message'] = undefined;

/**
 * ~
 * @member {String} switchId
 */
TextRecord.prototype['switchId'] = undefined;

/**
 * Result of a text (SENT, RECEIVED, DNT, TOO_BIG, INTERNAL_ERROR, CARRIER_ERROR, CARRIER_TEMP_ERROR, UNDIALED). See [call states and results](https://developers.callfire.com/results-responses-errors.html)
 * @member {module:model/TextRecord.TextResultEnum} textResult
 */
TextRecord.prototype['textResult'] = undefined;

/**
 * An attempted phone number
 * @member {String} toNumber
 */
TextRecord.prototype['toNumber'] = undefined;





/**
 * Allowed values for the <code>textResult</code> property.
 * @enum {String}
 * @readonly
 */
TextRecord['TextResultEnum'] = {

    /**
     * value: "SENT"
     * @const
     */
    "SENT": "SENT",

    /**
     * value: "RECEIVED"
     * @const
     */
    "RECEIVED": "RECEIVED",

    /**
     * value: "DNT"
     * @const
     */
    "DNT": "DNT",

    /**
     * value: "TOO_BIG"
     * @const
     */
    "TOO_BIG": "TOO_BIG",

    /**
     * value: "INTERNAL_ERROR"
     * @const
     */
    "INTERNAL_ERROR": "INTERNAL_ERROR",

    /**
     * value: "CARRIER_ERROR"
     * @const
     */
    "CARRIER_ERROR": "CARRIER_ERROR",

    /**
     * value: "CARRIER_TEMP_ERROR"
     * @const
     */
    "CARRIER_TEMP_ERROR": "CARRIER_TEMP_ERROR",

    /**
     * value: "UNDIALED"
     * @const
     */
    "UNDIALED": "UNDIALED",

    /**
     * value: "INVALID_NUMBER"
     * @const
     */
    "INVALID_NUMBER": "INVALID_NUMBER"
};



export default TextRecord;

