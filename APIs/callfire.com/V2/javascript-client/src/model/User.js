/**
 * CallFire API Documentation
 * CallFire
 *
 * The version of the OpenAPI document: V2
 * Contact: support@callfire.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Account from './Account';

/**
 * The User model module.
 * @module model/User
 * @version V2
 */
class User {
    /**
     * Constructs a new <code>User</code>.
     * ~
     * @alias module:model/User
     */
    constructor() { 
        
        User.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>User</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/User} obj Optional instance to populate.
     * @return {module:model/User} The populated <code>User</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new User();

            if (data.hasOwnProperty('account')) {
                obj['account'] = Account.constructFromObject(data['account']);
            }
            if (data.hasOwnProperty('accountHolder')) {
                obj['accountHolder'] = ApiClient.convertToType(data['accountHolder'], 'Boolean');
            }
            if (data.hasOwnProperty('accountId')) {
                obj['accountId'] = ApiClient.convertToType(data['accountId'], 'Number');
            }
            if (data.hasOwnProperty('active')) {
                obj['active'] = ApiClient.convertToType(data['active'], 'Boolean');
            }
            if (data.hasOwnProperty('apiPasswordLastFour')) {
                obj['apiPasswordLastFour'] = ApiClient.convertToType(data['apiPasswordLastFour'], 'String');
            }
            if (data.hasOwnProperty('brand')) {
                obj['brand'] = ApiClient.convertToType(data['brand'], 'String');
            }
            if (data.hasOwnProperty('cccAgent')) {
                obj['cccAgent'] = ApiClient.convertToType(data['cccAgent'], 'Boolean');
            }
            if (data.hasOwnProperty('created')) {
                obj['created'] = ApiClient.convertToType(data['created'], 'Date');
            }
            if (data.hasOwnProperty('dateOfBirth')) {
                obj['dateOfBirth'] = ApiClient.convertToType(data['dateOfBirth'], 'Date');
            }
            if (data.hasOwnProperty('disabled')) {
                obj['disabled'] = ApiClient.convertToType(data['disabled'], 'Boolean');
            }
            if (data.hasOwnProperty('firstName')) {
                obj['firstName'] = ApiClient.convertToType(data['firstName'], 'String');
            }
            if (data.hasOwnProperty('fullName')) {
                obj['fullName'] = ApiClient.convertToType(data['fullName'], 'String');
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'Number');
            }
            if (data.hasOwnProperty('industryName')) {
                obj['industryName'] = ApiClient.convertToType(data['industryName'], 'String');
            }
            if (data.hasOwnProperty('lastName')) {
                obj['lastName'] = ApiClient.convertToType(data['lastName'], 'String');
            }
            if (data.hasOwnProperty('musicOnHold')) {
                obj['musicOnHold'] = ApiClient.convertToType(data['musicOnHold'], 'String');
            }
            if (data.hasOwnProperty('notificationSoundEnabled')) {
                obj['notificationSoundEnabled'] = ApiClient.convertToType(data['notificationSoundEnabled'], 'Boolean');
            }
            if (data.hasOwnProperty('optIn')) {
                obj['optIn'] = ApiClient.convertToType(data['optIn'], 'Boolean');
            }
            if (data.hasOwnProperty('optInNumber')) {
                obj['optInNumber'] = ApiClient.convertToType(data['optInNumber'], 'String');
            }
            if (data.hasOwnProperty('permissions')) {
                obj['permissions'] = ApiClient.convertToType(data['permissions'], ['String']);
            }
            if (data.hasOwnProperty('phoneNumber')) {
                obj['phoneNumber'] = ApiClient.convertToType(data['phoneNumber'], 'String');
            }
            if (data.hasOwnProperty('phoneNumberExtension')) {
                obj['phoneNumberExtension'] = ApiClient.convertToType(data['phoneNumberExtension'], 'String');
            }
            if (data.hasOwnProperty('phoneNumberExtensionDelaySec')) {
                obj['phoneNumberExtensionDelaySec'] = ApiClient.convertToType(data['phoneNumberExtensionDelaySec'], 'Number');
            }
            if (data.hasOwnProperty('phoneNumberForDisplay')) {
                obj['phoneNumberForDisplay'] = ApiClient.convertToType(data['phoneNumberForDisplay'], 'String');
            }
            if (data.hasOwnProperty('phoneNumberVerified')) {
                obj['phoneNumberVerified'] = ApiClient.convertToType(data['phoneNumberVerified'], 'Boolean');
            }
            if (data.hasOwnProperty('profileEmail')) {
                obj['profileEmail'] = ApiClient.convertToType(data['profileEmail'], 'String');
            }
            if (data.hasOwnProperty('signupComplete')) {
                obj['signupComplete'] = ApiClient.convertToType(data['signupComplete'], 'Boolean');
            }
            if (data.hasOwnProperty('soaUser')) {
                obj['soaUser'] = User.constructFromObject(data['soaUser']);
            }
            if (data.hasOwnProperty('teamSeat')) {
                obj['teamSeat'] = ApiClient.convertToType(data['teamSeat'], 'Boolean');
            }
            if (data.hasOwnProperty('userState')) {
                obj['userState'] = ApiClient.convertToType(data['userState'], 'String');
            }
            if (data.hasOwnProperty('userStatePending')) {
                obj['userStatePending'] = ApiClient.convertToType(data['userStatePending'], 'Boolean');
            }
            if (data.hasOwnProperty('visible')) {
                obj['visible'] = ApiClient.convertToType(data['visible'], 'Boolean');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>User</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>User</code>.
     */
    static validateJSON(data) {
        // validate the optional field `account`
        if (data['account']) { // data not null
          Account.validateJSON(data['account']);
        }
        // ensure the json data is a string
        if (data['apiPasswordLastFour'] && !(typeof data['apiPasswordLastFour'] === 'string' || data['apiPasswordLastFour'] instanceof String)) {
            throw new Error("Expected the field `apiPasswordLastFour` to be a primitive type in the JSON string but got " + data['apiPasswordLastFour']);
        }
        // ensure the json data is a string
        if (data['brand'] && !(typeof data['brand'] === 'string' || data['brand'] instanceof String)) {
            throw new Error("Expected the field `brand` to be a primitive type in the JSON string but got " + data['brand']);
        }
        // ensure the json data is a string
        if (data['firstName'] && !(typeof data['firstName'] === 'string' || data['firstName'] instanceof String)) {
            throw new Error("Expected the field `firstName` to be a primitive type in the JSON string but got " + data['firstName']);
        }
        // ensure the json data is a string
        if (data['fullName'] && !(typeof data['fullName'] === 'string' || data['fullName'] instanceof String)) {
            throw new Error("Expected the field `fullName` to be a primitive type in the JSON string but got " + data['fullName']);
        }
        // ensure the json data is a string
        if (data['industryName'] && !(typeof data['industryName'] === 'string' || data['industryName'] instanceof String)) {
            throw new Error("Expected the field `industryName` to be a primitive type in the JSON string but got " + data['industryName']);
        }
        // ensure the json data is a string
        if (data['lastName'] && !(typeof data['lastName'] === 'string' || data['lastName'] instanceof String)) {
            throw new Error("Expected the field `lastName` to be a primitive type in the JSON string but got " + data['lastName']);
        }
        // ensure the json data is a string
        if (data['musicOnHold'] && !(typeof data['musicOnHold'] === 'string' || data['musicOnHold'] instanceof String)) {
            throw new Error("Expected the field `musicOnHold` to be a primitive type in the JSON string but got " + data['musicOnHold']);
        }
        // ensure the json data is a string
        if (data['optInNumber'] && !(typeof data['optInNumber'] === 'string' || data['optInNumber'] instanceof String)) {
            throw new Error("Expected the field `optInNumber` to be a primitive type in the JSON string but got " + data['optInNumber']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['permissions'])) {
            throw new Error("Expected the field `permissions` to be an array in the JSON data but got " + data['permissions']);
        }
        // ensure the json data is a string
        if (data['phoneNumber'] && !(typeof data['phoneNumber'] === 'string' || data['phoneNumber'] instanceof String)) {
            throw new Error("Expected the field `phoneNumber` to be a primitive type in the JSON string but got " + data['phoneNumber']);
        }
        // ensure the json data is a string
        if (data['phoneNumberExtension'] && !(typeof data['phoneNumberExtension'] === 'string' || data['phoneNumberExtension'] instanceof String)) {
            throw new Error("Expected the field `phoneNumberExtension` to be a primitive type in the JSON string but got " + data['phoneNumberExtension']);
        }
        // ensure the json data is a string
        if (data['phoneNumberForDisplay'] && !(typeof data['phoneNumberForDisplay'] === 'string' || data['phoneNumberForDisplay'] instanceof String)) {
            throw new Error("Expected the field `phoneNumberForDisplay` to be a primitive type in the JSON string but got " + data['phoneNumberForDisplay']);
        }
        // ensure the json data is a string
        if (data['profileEmail'] && !(typeof data['profileEmail'] === 'string' || data['profileEmail'] instanceof String)) {
            throw new Error("Expected the field `profileEmail` to be a primitive type in the JSON string but got " + data['profileEmail']);
        }
        // validate the optional field `soaUser`
        if (data['soaUser']) { // data not null
          User.validateJSON(data['soaUser']);
        }
        // ensure the json data is a string
        if (data['userState'] && !(typeof data['userState'] === 'string' || data['userState'] instanceof String)) {
            throw new Error("Expected the field `userState` to be a primitive type in the JSON string but got " + data['userState']);
        }

        return true;
    }


}



/**
 * @member {module:model/Account} account
 */
User.prototype['account'] = undefined;

/**
 * ~
 * @member {Boolean} accountHolder
 */
User.prototype['accountHolder'] = undefined;

/**
 * ~
 * @member {Number} accountId
 */
User.prototype['accountId'] = undefined;

/**
 * ~
 * @member {Boolean} active
 */
User.prototype['active'] = undefined;

/**
 * ~
 * @member {String} apiPasswordLastFour
 */
User.prototype['apiPasswordLastFour'] = undefined;

/**
 * ~
 * @member {module:model/User.BrandEnum} brand
 */
User.prototype['brand'] = undefined;

/**
 * ~
 * @member {Boolean} cccAgent
 */
User.prototype['cccAgent'] = undefined;

/**
 * ~
 * @member {Date} created
 */
User.prototype['created'] = undefined;

/**
 * ~
 * @member {Date} dateOfBirth
 */
User.prototype['dateOfBirth'] = undefined;

/**
 * ~
 * @member {Boolean} disabled
 */
User.prototype['disabled'] = undefined;

/**
 * ~
 * @member {String} firstName
 */
User.prototype['firstName'] = undefined;

/**
 * ~
 * @member {String} fullName
 */
User.prototype['fullName'] = undefined;

/**
 * ~
 * @member {Number} id
 */
User.prototype['id'] = undefined;

/**
 * ~
 * @member {String} industryName
 */
User.prototype['industryName'] = undefined;

/**
 * ~
 * @member {String} lastName
 */
User.prototype['lastName'] = undefined;

/**
 * ~
 * @member {module:model/User.MusicOnHoldEnum} musicOnHold
 */
User.prototype['musicOnHold'] = undefined;

/**
 * ~
 * @member {Boolean} notificationSoundEnabled
 */
User.prototype['notificationSoundEnabled'] = undefined;

/**
 * ~
 * @member {Boolean} optIn
 */
User.prototype['optIn'] = undefined;

/**
 * ~
 * @member {String} optInNumber
 */
User.prototype['optInNumber'] = undefined;

/**
 * ~
 * @member {Array.<String>} permissions
 */
User.prototype['permissions'] = undefined;

/**
 * ~
 * @member {String} phoneNumber
 */
User.prototype['phoneNumber'] = undefined;

/**
 * ~
 * @member {String} phoneNumberExtension
 */
User.prototype['phoneNumberExtension'] = undefined;

/**
 * ~
 * @member {Number} phoneNumberExtensionDelaySec
 */
User.prototype['phoneNumberExtensionDelaySec'] = undefined;

/**
 * ~
 * @member {String} phoneNumberForDisplay
 */
User.prototype['phoneNumberForDisplay'] = undefined;

/**
 * ~
 * @member {Boolean} phoneNumberVerified
 */
User.prototype['phoneNumberVerified'] = undefined;

/**
 * ~
 * @member {String} profileEmail
 */
User.prototype['profileEmail'] = undefined;

/**
 * ~
 * @member {Boolean} signupComplete
 */
User.prototype['signupComplete'] = undefined;

/**
 * @member {module:model/User} soaUser
 */
User.prototype['soaUser'] = undefined;

/**
 * ~
 * @member {Boolean} teamSeat
 */
User.prototype['teamSeat'] = undefined;

/**
 * ~
 * @member {module:model/User.UserStateEnum} userState
 */
User.prototype['userState'] = undefined;

/**
 * ~
 * @member {Boolean} userStatePending
 */
User.prototype['userStatePending'] = undefined;

/**
 * ~
 * @member {Boolean} visible
 */
User.prototype['visible'] = undefined;





/**
 * Allowed values for the <code>brand</code> property.
 * @enum {String}
 * @readonly
 */
User['BrandEnum'] = {

    /**
     * value: "EZTEXTING"
     * @const
     */
    "EZTEXTING": "EZTEXTING",

    /**
     * value: "CLUBTEXTING"
     * @const
     */
    "CLUBTEXTING": "CLUBTEXTING",

    /**
     * value: "GROUPTEXTING"
     * @const
     */
    "GROUPTEXTING": "GROUPTEXTING",

    /**
     * value: "TELLMYCELL"
     * @const
     */
    "TELLMYCELL": "TELLMYCELL",

    /**
     * value: "EZ"
     * @const
     */
    "EZ": "EZ",

    /**
     * value: "CALLFIRE"
     * @const
     */
    "CALLFIRE": "CALLFIRE",

    /**
     * value: "TESLA"
     * @const
     */
    "TESLA": "TESLA"
};


/**
 * Allowed values for the <code>musicOnHold</code> property.
 * @enum {String}
 * @readonly
 */
User['MusicOnHoldEnum'] = {

    /**
     * value: "DEFAULT"
     * @const
     */
    "DEFAULT": "DEFAULT",

    /**
     * value: "SILENCE"
     * @const
     */
    "SILENCE": "SILENCE",

    /**
     * value: "ALTERNATIVE"
     * @const
     */
    "ALTERNATIVE": "ALTERNATIVE",

    /**
     * value: "BLUES"
     * @const
     */
    "BLUES": "BLUES",

    /**
     * value: "CELTIC"
     * @const
     */
    "CELTIC": "CELTIC",

    /**
     * value: "CLASSICAL"
     * @const
     */
    "CLASSICAL": "CLASSICAL",

    /**
     * value: "COUNTRY"
     * @const
     */
    "COUNTRY": "COUNTRY",

    /**
     * value: "INSTRUMENTAL"
     * @const
     */
    "INSTRUMENTAL": "INSTRUMENTAL",

    /**
     * value: "JAZZ"
     * @const
     */
    "JAZZ": "JAZZ",

    /**
     * value: "NEOPUNK"
     * @const
     */
    "NEOPUNK": "NEOPUNK",

    /**
     * value: "NEW_AGE"
     * @const
     */
    "NEW_AGE": "NEW_AGE",

    /**
     * value: "POP"
     * @const
     */
    "POP": "POP",

    /**
     * value: "ROCK"
     * @const
     */
    "ROCK": "ROCK",

    /**
     * value: "SWING"
     * @const
     */
    "SWING": "SWING",

    /**
     * value: "TECHNO"
     * @const
     */
    "TECHNO": "TECHNO"
};


/**
 * Allowed values for the <code>userState</code> property.
 * @enum {String}
 * @readonly
 */
User['UserStateEnum'] = {

    /**
     * value: "ACTIVE"
     * @const
     */
    "ACTIVE": "ACTIVE",

    /**
     * value: "NEW_AUTH_INVITE"
     * @const
     */
    "NEW_AUTH_INVITE": "NEW_AUTH_INVITE",

    /**
     * value: "NEW_USER_INVITE"
     * @const
     */
    "NEW_USER_INVITE": "NEW_USER_INVITE",

    /**
     * value: "EXISTING_USER_INVITE"
     * @const
     */
    "EXISTING_USER_INVITE": "EXISTING_USER_INVITE"
};



export default User;

