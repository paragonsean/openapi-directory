/**
 * CallFire API Documentation
 * CallFire
 *
 * The version of the OpenAPI document: V2
 * Contact: support@callfire.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The ContactList model module.
 * @module model/ContactList
 * @version V2
 */
class ContactList {
    /**
     * Constructs a new <code>ContactList</code>.
     * Represents a contact list in CallFire system
     * @alias module:model/ContactList
     */
    constructor() { 
        
        ContactList.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>ContactList</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ContactList} obj Optional instance to populate.
     * @return {module:model/ContactList} The populated <code>ContactList</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ContactList();

            if (data.hasOwnProperty('created')) {
                obj['created'] = ApiClient.convertToType(data['created'], 'Number');
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'Number');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('size')) {
                obj['size'] = ApiClient.convertToType(data['size'], 'Number');
            }
            if (data.hasOwnProperty('status')) {
                obj['status'] = ApiClient.convertToType(data['status'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ContactList</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ContactList</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // ensure the json data is a string
        if (data['status'] && !(typeof data['status'] === 'string' || data['status'] instanceof String)) {
            throw new Error("Expected the field `status` to be a primitive type in the JSON string but got " + data['status']);
        }

        return true;
    }


}



/**
 * A time when a given resource was created, formatted in unix time milliseconds (read only). Example: 1473781817000 for Sat, 05 Jan 1985 14:03:37 GMT
 * @member {Number} created
 */
ContactList.prototype['created'] = undefined;

/**
 * An Id of a contact list
 * @member {Number} id
 */
ContactList.prototype['id'] = undefined;

/**
 * A name of a contact list
 * @member {String} name
 */
ContactList.prototype['name'] = undefined;

/**
 * A number of contacts in a contact list
 * @member {Number} size
 */
ContactList.prototype['size'] = undefined;

/**
 * A current status of a contact list, available values: ACTIVE - contact list is ready, VALIDATING - contact list validation is in progress, IMPORTING - importing is in progress, IMPORT_FAILED - in case of errors occurred during the importing, ERRORS - contact list has validation errors, DELETED - contact list was deleted, PARSE_FAILED - contacts cannot be parsed, COLUMN_TOO_LARGE - if size of phone number or any other column exceeds 255 characters
 * @member {module:model/ContactList.StatusEnum} status
 */
ContactList.prototype['status'] = undefined;





/**
 * Allowed values for the <code>status</code> property.
 * @enum {String}
 * @readonly
 */
ContactList['StatusEnum'] = {

    /**
     * value: "ACTIVE"
     * @const
     */
    "ACTIVE": "ACTIVE",

    /**
     * value: "VALIDATING"
     * @const
     */
    "VALIDATING": "VALIDATING",

    /**
     * value: "IMPORTING"
     * @const
     */
    "IMPORTING": "IMPORTING",

    /**
     * value: "IMPORT_FAILED"
     * @const
     */
    "IMPORT_FAILED": "IMPORT_FAILED",

    /**
     * value: "ERRORS"
     * @const
     */
    "ERRORS": "ERRORS",

    /**
     * value: "DELETED"
     * @const
     */
    "DELETED": "DELETED",

    /**
     * value: "PARSE_FAILED"
     * @const
     */
    "PARSE_FAILED": "PARSE_FAILED",

    /**
     * value: "COLUMN_TOO_LARGE"
     * @const
     */
    "COLUMN_TOO_LARGE": "COLUMN_TOO_LARGE"
};



export default ContactList;

