/**
 * CallFire API Documentation
 * CallFire
 *
 * The version of the OpenAPI document: V2
 * Contact: support@callfire.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import CallBroadcastSounds from './CallBroadcastSounds';
import LocalTimeRestriction from './LocalTimeRestriction';
import Recipient from './Recipient';
import RetryConfig from './RetryConfig';
import Schedule from './Schedule';

/**
 * The CallBroadcast model module.
 * @module model/CallBroadcast
 * @version V2
 */
class CallBroadcast {
    /**
     * Constructs a new <code>CallBroadcast</code>.
     * Call broadcast can be used to send out a voice message to a group of numbers. It supports IVR scripting, scheduling, retry logic, playing pre-recorded sounds, answering machine detection
     * @alias module:model/CallBroadcast
     */
    constructor() { 
        
        CallBroadcast.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>CallBroadcast</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/CallBroadcast} obj Optional instance to populate.
     * @return {module:model/CallBroadcast} The populated <code>CallBroadcast</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new CallBroadcast();

            if (data.hasOwnProperty('answeringMachineConfig')) {
                obj['answeringMachineConfig'] = ApiClient.convertToType(data['answeringMachineConfig'], 'String');
            }
            if (data.hasOwnProperty('dialplanXml')) {
                obj['dialplanXml'] = ApiClient.convertToType(data['dialplanXml'], 'String');
            }
            if (data.hasOwnProperty('fromNumber')) {
                obj['fromNumber'] = ApiClient.convertToType(data['fromNumber'], 'String');
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'Number');
            }
            if (data.hasOwnProperty('labels')) {
                obj['labels'] = ApiClient.convertToType(data['labels'], ['String']);
            }
            if (data.hasOwnProperty('lastModified')) {
                obj['lastModified'] = ApiClient.convertToType(data['lastModified'], 'Number');
            }
            if (data.hasOwnProperty('localTimeRestriction')) {
                obj['localTimeRestriction'] = LocalTimeRestriction.constructFromObject(data['localTimeRestriction']);
            }
            if (data.hasOwnProperty('maxActive')) {
                obj['maxActive'] = ApiClient.convertToType(data['maxActive'], 'Number');
            }
            if (data.hasOwnProperty('maxActiveTransfers')) {
                obj['maxActiveTransfers'] = ApiClient.convertToType(data['maxActiveTransfers'], 'Number');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('recipients')) {
                obj['recipients'] = ApiClient.convertToType(data['recipients'], [Recipient]);
            }
            if (data.hasOwnProperty('resumeNextDay')) {
                obj['resumeNextDay'] = ApiClient.convertToType(data['resumeNextDay'], 'Boolean');
            }
            if (data.hasOwnProperty('retryConfig')) {
                obj['retryConfig'] = RetryConfig.constructFromObject(data['retryConfig']);
            }
            if (data.hasOwnProperty('schedules')) {
                obj['schedules'] = ApiClient.convertToType(data['schedules'], [Schedule]);
            }
            if (data.hasOwnProperty('sounds')) {
                obj['sounds'] = CallBroadcastSounds.constructFromObject(data['sounds']);
            }
            if (data.hasOwnProperty('status')) {
                obj['status'] = ApiClient.convertToType(data['status'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>CallBroadcast</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>CallBroadcast</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['answeringMachineConfig'] && !(typeof data['answeringMachineConfig'] === 'string' || data['answeringMachineConfig'] instanceof String)) {
            throw new Error("Expected the field `answeringMachineConfig` to be a primitive type in the JSON string but got " + data['answeringMachineConfig']);
        }
        // ensure the json data is a string
        if (data['dialplanXml'] && !(typeof data['dialplanXml'] === 'string' || data['dialplanXml'] instanceof String)) {
            throw new Error("Expected the field `dialplanXml` to be a primitive type in the JSON string but got " + data['dialplanXml']);
        }
        // ensure the json data is a string
        if (data['fromNumber'] && !(typeof data['fromNumber'] === 'string' || data['fromNumber'] instanceof String)) {
            throw new Error("Expected the field `fromNumber` to be a primitive type in the JSON string but got " + data['fromNumber']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['labels'])) {
            throw new Error("Expected the field `labels` to be an array in the JSON data but got " + data['labels']);
        }
        // validate the optional field `localTimeRestriction`
        if (data['localTimeRestriction']) { // data not null
          LocalTimeRestriction.validateJSON(data['localTimeRestriction']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        if (data['recipients']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['recipients'])) {
                throw new Error("Expected the field `recipients` to be an array in the JSON data but got " + data['recipients']);
            }
            // validate the optional field `recipients` (array)
            for (const item of data['recipients']) {
                Recipient.validateJSON(item);
            };
        }
        // validate the optional field `retryConfig`
        if (data['retryConfig']) { // data not null
          RetryConfig.validateJSON(data['retryConfig']);
        }
        if (data['schedules']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['schedules'])) {
                throw new Error("Expected the field `schedules` to be an array in the JSON data but got " + data['schedules']);
            }
            // validate the optional field `schedules` (array)
            for (const item of data['schedules']) {
                Schedule.validateJSON(item);
            };
        }
        // validate the optional field `sounds`
        if (data['sounds']) { // data not null
          CallBroadcastSounds.validateJSON(data['sounds']);
        }
        // ensure the json data is a string
        if (data['status'] && !(typeof data['status'] === 'string' || data['status'] instanceof String)) {
            throw new Error("Expected the field `status` to be a primitive type in the JSON string but got " + data['status']);
        }

        return true;
    }


}



/**
 * Specifies which action should be taken if answering machine was detected, default value: AM_AND_LIVE. Available values: AM_ONLY - run AMD (Answering Machine Detection), hang up if LA (Live Answer); AM_AND_LIVE - run AMD, play separate live vs. machine sound; LIVE_WITH_AMD, run AMD, hang up if machine answers; LIVE_IMMEDIATE - no AMD, play live sound immediately
 * @member {module:model/CallBroadcast.AnsweringMachineConfigEnum} answeringMachineConfig
 */
CallBroadcast.prototype['answeringMachineConfig'] = undefined;

/**
 * IVR xml is a document which describes the dialplan to setup the IVR broadcast
 * @member {String} dialplanXml
 */
CallBroadcast.prototype['dialplanXml'] = undefined;

/**
 * Phone number in E.164 format (11-digit) or short code for text. Example: 12132000384, 67076
 * @member {String} fromNumber
 */
CallBroadcast.prototype['fromNumber'] = undefined;

/**
 * A unique id of broadcast (readonly)
 * @member {Number} id
 */
CallBroadcast.prototype['id'] = undefined;

/**
 * Labels of a broadcast
 * @member {Array.<String>} labels
 */
CallBroadcast.prototype['labels'] = undefined;

/**
 * The time when a given resource was updated, formatted in unix time milliseconds (read only). Example: 1473781817000 for Sat, 05 Jan 1985 14:03:37 GMT 
 * @member {Number} lastModified
 */
CallBroadcast.prototype['lastModified'] = undefined;

/**
 * @member {module:model/LocalTimeRestriction} localTimeRestriction
 */
CallBroadcast.prototype['localTimeRestriction'] = undefined;

/**
 * Sets a maximum number of calls to be dialed by CallFire at once
 * @member {Number} maxActive
 */
CallBroadcast.prototype['maxActive'] = undefined;

/**
 * A maximum number of active transfers
 * @member {Number} maxActiveTransfers
 */
CallBroadcast.prototype['maxActiveTransfers'] = undefined;

/**
 * A name of a broadcast
 * @member {String} name
 */
CallBroadcast.prototype['name'] = undefined;

/**
 * Recipients of a call broadcast, can be either existing contacts or a new ones
 * @member {Array.<module:model/Recipient>} recipients
 */
CallBroadcast.prototype['recipients'] = undefined;

/**
 * If true resumes the unfinished campaign to the next day
 * @member {Boolean} resumeNextDay
 */
CallBroadcast.prototype['resumeNextDay'] = undefined;

/**
 * @member {module:model/RetryConfig} retryConfig
 */
CallBroadcast.prototype['retryConfig'] = undefined;

/**
 * A list of schedule objects which specifies a range of time when broadcast should be started and stopped. Supports the scheduling per day of week
 * @member {Array.<module:model/Schedule>} schedules
 */
CallBroadcast.prototype['schedules'] = undefined;

/**
 * @member {module:model/CallBroadcastSounds} sounds
 */
CallBroadcast.prototype['sounds'] = undefined;

/**
 * A status of a broadcast (read only). SETUP - campaign isn't configured yet; START_PENDING - waiting for contact batch population; RUNNING - campaign is running; STOPPED - campaign is stopped; FINISHED - campaign is finished; ARCHIVED - campaign was archived
 * @member {module:model/CallBroadcast.StatusEnum} status
 */
CallBroadcast.prototype['status'] = undefined;





/**
 * Allowed values for the <code>answeringMachineConfig</code> property.
 * @enum {String}
 * @readonly
 */
CallBroadcast['AnsweringMachineConfigEnum'] = {

    /**
     * value: "AM_ONLY"
     * @const
     */
    "AM_ONLY": "AM_ONLY",

    /**
     * value: "AM_AND_LIVE"
     * @const
     */
    "AM_AND_LIVE": "AM_AND_LIVE",

    /**
     * value: "LIVE_WITH_AMD"
     * @const
     */
    "LIVE_WITH_AMD": "LIVE_WITH_AMD",

    /**
     * value: "LIVE_IMMEDIATE"
     * @const
     */
    "LIVE_IMMEDIATE": "LIVE_IMMEDIATE"
};


/**
 * Allowed values for the <code>status</code> property.
 * @enum {String}
 * @readonly
 */
CallBroadcast['StatusEnum'] = {

    /**
     * value: "TEST"
     * @const
     */
    "TEST": "TEST",

    /**
     * value: "SETUP"
     * @const
     */
    "SETUP": "SETUP",

    /**
     * value: "START_PENDING"
     * @const
     */
    "START_PENDING": "START_PENDING",

    /**
     * value: "RUNNING"
     * @const
     */
    "RUNNING": "RUNNING",

    /**
     * value: "SCHEDULED"
     * @const
     */
    "SCHEDULED": "SCHEDULED",

    /**
     * value: "STOPPED"
     * @const
     */
    "STOPPED": "STOPPED",

    /**
     * value: "SUSPENDED"
     * @const
     */
    "SUSPENDED": "SUSPENDED",

    /**
     * value: "FINISHED"
     * @const
     */
    "FINISHED": "FINISHED",

    /**
     * value: "ARCHIVED"
     * @const
     */
    "ARCHIVED": "ARCHIVED",

    /**
     * value: "VALIDATING_START"
     * @const
     */
    "VALIDATING_START": "VALIDATING_START",

    /**
     * value: "VALIDATING_EMAIL"
     * @const
     */
    "VALIDATING_EMAIL": "VALIDATING_EMAIL",

    /**
     * value: "BLOCKED_SUSPICIOUS"
     * @const
     */
    "BLOCKED_SUSPICIOUS": "BLOCKED_SUSPICIOUS",

    /**
     * value: "DECLINED"
     * @const
     */
    "DECLINED": "DECLINED",

    /**
     * value: "APPROVED"
     * @const
     */
    "APPROVED": "APPROVED"
};



export default CallBroadcast;

