/**
 * CallFire API Documentation
 * CallFire
 *
 * The version of the OpenAPI document: V2
 * Contact: support@callfire.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import CallRecord from './CallRecord';
import Contact from './Contact';
import Note from './Note';

/**
 * The Call model module.
 * @module model/Call
 * @version V2
 */
class Call {
    /**
     * Constructs a new <code>Call</code>.
     * Represents a call action sent or received by CallFire platform
     * @alias module:model/Call
     */
    constructor() { 
        
        Call.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>Call</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Call} obj Optional instance to populate.
     * @return {module:model/Call} The populated <code>Call</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Call();

            if (data.hasOwnProperty('agentCall')) {
                obj['agentCall'] = ApiClient.convertToType(data['agentCall'], 'Boolean');
            }
            if (data.hasOwnProperty('attributes')) {
                obj['attributes'] = ApiClient.convertToType(data['attributes'], {'String': 'String'});
            }
            if (data.hasOwnProperty('batchId')) {
                obj['batchId'] = ApiClient.convertToType(data['batchId'], 'Number');
            }
            if (data.hasOwnProperty('campaignId')) {
                obj['campaignId'] = ApiClient.convertToType(data['campaignId'], 'Number');
            }
            if (data.hasOwnProperty('contact')) {
                obj['contact'] = Contact.constructFromObject(data['contact']);
            }
            if (data.hasOwnProperty('created')) {
                obj['created'] = ApiClient.convertToType(data['created'], 'Number');
            }
            if (data.hasOwnProperty('finalCallResult')) {
                obj['finalCallResult'] = ApiClient.convertToType(data['finalCallResult'], 'String');
            }
            if (data.hasOwnProperty('fromNumber')) {
                obj['fromNumber'] = ApiClient.convertToType(data['fromNumber'], 'String');
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'Number');
            }
            if (data.hasOwnProperty('inbound')) {
                obj['inbound'] = ApiClient.convertToType(data['inbound'], 'Boolean');
            }
            if (data.hasOwnProperty('labels')) {
                obj['labels'] = ApiClient.convertToType(data['labels'], ['String']);
            }
            if (data.hasOwnProperty('modified')) {
                obj['modified'] = ApiClient.convertToType(data['modified'], 'Number');
            }
            if (data.hasOwnProperty('notes')) {
                obj['notes'] = ApiClient.convertToType(data['notes'], [Note]);
            }
            if (data.hasOwnProperty('records')) {
                obj['records'] = ApiClient.convertToType(data['records'], [CallRecord]);
            }
            if (data.hasOwnProperty('state')) {
                obj['state'] = ApiClient.convertToType(data['state'], 'String');
            }
            if (data.hasOwnProperty('toNumber')) {
                obj['toNumber'] = ApiClient.convertToType(data['toNumber'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Call</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Call</code>.
     */
    static validateJSON(data) {
        // validate the optional field `contact`
        if (data['contact']) { // data not null
          Contact.validateJSON(data['contact']);
        }
        // ensure the json data is a string
        if (data['finalCallResult'] && !(typeof data['finalCallResult'] === 'string' || data['finalCallResult'] instanceof String)) {
            throw new Error("Expected the field `finalCallResult` to be a primitive type in the JSON string but got " + data['finalCallResult']);
        }
        // ensure the json data is a string
        if (data['fromNumber'] && !(typeof data['fromNumber'] === 'string' || data['fromNumber'] instanceof String)) {
            throw new Error("Expected the field `fromNumber` to be a primitive type in the JSON string but got " + data['fromNumber']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['labels'])) {
            throw new Error("Expected the field `labels` to be an array in the JSON data but got " + data['labels']);
        }
        if (data['notes']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['notes'])) {
                throw new Error("Expected the field `notes` to be an array in the JSON data but got " + data['notes']);
            }
            // validate the optional field `notes` (array)
            for (const item of data['notes']) {
                Note.validateJSON(item);
            };
        }
        if (data['records']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['records'])) {
                throw new Error("Expected the field `records` to be an array in the JSON data but got " + data['records']);
            }
            // validate the optional field `records` (array)
            for (const item of data['records']) {
                CallRecord.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['state'] && !(typeof data['state'] === 'string' || data['state'] instanceof String)) {
            throw new Error("Expected the field `state` to be a primitive type in the JSON string but got " + data['state']);
        }
        // ensure the json data is a string
        if (data['toNumber'] && !(typeof data['toNumber'] === 'string' || data['toNumber'] instanceof String)) {
            throw new Error("Expected the field `toNumber` to be a primitive type in the JSON string but got " + data['toNumber']);
        }

        return true;
    }


}



/**
 * An internal call to an agent
 * @member {Boolean} agentCall
 */
Call.prototype['agentCall'] = undefined;

/**
 * Map of user-defined string attributes associated with an action
 * @member {Object.<String, String>} attributes
 */
Call.prototype['attributes'] = undefined;

/**
 * An id of contact batch associated with an action
 * @member {Number} batchId
 */
Call.prototype['batchId'] = undefined;

/**
 * An id of broadcast associated with an action if call is sent as part of call broadcast
 * @member {Number} campaignId
 */
Call.prototype['campaignId'] = undefined;

/**
 * @member {module:model/Contact} contact
 */
Call.prototype['contact'] = undefined;

/**
 * The time when the given resource was created, formatted in unix time milliseconds (read only). Example: 1473781817000 for Sat, 05 Jan 1985 14:03:37 GMT 
 * @member {Number} created
 */
Call.prototype['created'] = undefined;

/**
 * Result of a call (LA, AM, BUSY, DNC, XFER, NO_ANS, XFER_LEG, INTERNAL_ERROR, CARRIER_ERROR, CARRIER_TEMP_ERROR, UNDIALED, SD, POSTPONED, ABANDONED, SKIPPED). See [call states and results](https://developers.callfire.com/results-responses-errors.html)
 * @member {module:model/Call.FinalCallResultEnum} finalCallResult
 */
Call.prototype['finalCallResult'] = undefined;

/**
 * A sender's phone number in E.164 (11-digit) format
 * @member {String} fromNumber
 */
Call.prototype['fromNumber'] = undefined;

/**
 * An id of  an action
 * @member {Number} id
 */
Call.prototype['id'] = undefined;

/**
 * Is action inbound
 * @member {Boolean} inbound
 */
Call.prototype['inbound'] = undefined;

/**
 * Labels associated with action or broadcast for this action
 * @member {Array.<String>} labels
 */
Call.prototype['labels'] = undefined;

/**
 * The time when the given resource was modified, formatted in unix time milliseconds (read only). Example: 1473781817000 for Sat, 05 Jan 1985 14:03:37 GMT 
 * @member {Number} modified
 */
Call.prototype['modified'] = undefined;

/**
 * Notes of call added by an agent
 * @member {Array.<module:model/Note>} notes
 */
Call.prototype['notes'] = undefined;

/**
 * List of call records, each record contains call details like originate time, duration, cost, notes made by agents. A single contact may have a multiple phone numbers. In this case if given call was sent as a part of broadcast with configured retry logic then each call record will contain details about attempted phone number
 * @member {Array.<module:model/CallRecord>} records
 */
Call.prototype['records'] = undefined;

/**
 * State of an action (READY, SELECTED, CALLBACK, DISABLED, FINISHED, DNC, DUP, INVALID, TIMEOUT, PERIOD_LIMIT). See [call states and results](https://developers.callfire.com/results-responses-errors.html)
 * @member {module:model/Call.StateEnum} state
 */
Call.prototype['state'] = undefined;

/**
 * A recipient's phone number in E.164 (11-digit) format
 * @member {String} toNumber
 */
Call.prototype['toNumber'] = undefined;





/**
 * Allowed values for the <code>finalCallResult</code> property.
 * @enum {String}
 * @readonly
 */
Call['FinalCallResultEnum'] = {

    /**
     * value: "LA"
     * @const
     */
    "LA": "LA",

    /**
     * value: "AM"
     * @const
     */
    "AM": "AM",

    /**
     * value: "BUSY"
     * @const
     */
    "BUSY": "BUSY",

    /**
     * value: "DNC"
     * @const
     */
    "DNC": "DNC",

    /**
     * value: "XFER"
     * @const
     */
    "XFER": "XFER",

    /**
     * value: "NO_ANS"
     * @const
     */
    "NO_ANS": "NO_ANS",

    /**
     * value: "XFER_LEG"
     * @const
     */
    "XFER_LEG": "XFER_LEG",

    /**
     * value: "INTERNAL_ERROR"
     * @const
     */
    "INTERNAL_ERROR": "INTERNAL_ERROR",

    /**
     * value: "CARRIER_ERROR"
     * @const
     */
    "CARRIER_ERROR": "CARRIER_ERROR",

    /**
     * value: "CARRIER_TEMP_ERROR"
     * @const
     */
    "CARRIER_TEMP_ERROR": "CARRIER_TEMP_ERROR",

    /**
     * value: "UNDIALED"
     * @const
     */
    "UNDIALED": "UNDIALED",

    /**
     * value: "SD"
     * @const
     */
    "SD": "SD",

    /**
     * value: "POSTPONED"
     * @const
     */
    "POSTPONED": "POSTPONED",

    /**
     * value: "ABANDONED"
     * @const
     */
    "ABANDONED": "ABANDONED",

    /**
     * value: "SKIPPED"
     * @const
     */
    "SKIPPED": "SKIPPED"
};


/**
 * Allowed values for the <code>state</code> property.
 * @enum {String}
 * @readonly
 */
Call['StateEnum'] = {

    /**
     * value: "READY"
     * @const
     */
    "READY": "READY",

    /**
     * value: "SELECTED"
     * @const
     */
    "SELECTED": "SELECTED",

    /**
     * value: "CALLBACK"
     * @const
     */
    "CALLBACK": "CALLBACK",

    /**
     * value: "FINISHED"
     * @const
     */
    "FINISHED": "FINISHED",

    /**
     * value: "DISABLED"
     * @const
     */
    "DISABLED": "DISABLED",

    /**
     * value: "SKIPPED"
     * @const
     */
    "SKIPPED": "SKIPPED",

    /**
     * value: "DNC"
     * @const
     */
    "DNC": "DNC",

    /**
     * value: "DUP"
     * @const
     */
    "DUP": "DUP",

    /**
     * value: "INVALID"
     * @const
     */
    "INVALID": "INVALID",

    /**
     * value: "TIMEOUT"
     * @const
     */
    "TIMEOUT": "TIMEOUT",

    /**
     * value: "PERIOD_LIMIT"
     * @const
     */
    "PERIOD_LIMIT": "PERIOD_LIMIT",

    /**
     * value: "RESTRICTED_NUMBER"
     * @const
     */
    "RESTRICTED_NUMBER": "RESTRICTED_NUMBER"
};



export default Call;

