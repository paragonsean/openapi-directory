/**
 * CallFire API Documentation
 * CallFire
 *
 * The version of the OpenAPI document: V2
 * Contact: support@callfire.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The NumberPurchaseRequest model module.
 * @module model/NumberPurchaseRequest
 * @version V2
 */
class NumberPurchaseRequest {
    /**
     * Constructs a new <code>NumberPurchaseRequest</code>.
     * Request object is used to order a local or toll-free numbers
     * @alias module:model/NumberPurchaseRequest
     */
    constructor() { 
        
        NumberPurchaseRequest.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>NumberPurchaseRequest</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/NumberPurchaseRequest} obj Optional instance to populate.
     * @return {module:model/NumberPurchaseRequest} The populated <code>NumberPurchaseRequest</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new NumberPurchaseRequest();

            if (data.hasOwnProperty('city')) {
                obj['city'] = ApiClient.convertToType(data['city'], 'String');
            }
            if (data.hasOwnProperty('localCount')) {
                obj['localCount'] = ApiClient.convertToType(data['localCount'], 'Number');
            }
            if (data.hasOwnProperty('numbers')) {
                obj['numbers'] = ApiClient.convertToType(data['numbers'], ['String']);
            }
            if (data.hasOwnProperty('prefix')) {
                obj['prefix'] = ApiClient.convertToType(data['prefix'], 'String');
            }
            if (data.hasOwnProperty('promo')) {
                obj['promo'] = ApiClient.convertToType(data['promo'], 'String');
            }
            if (data.hasOwnProperty('state')) {
                obj['state'] = ApiClient.convertToType(data['state'], 'String');
            }
            if (data.hasOwnProperty('tollFreeCount')) {
                obj['tollFreeCount'] = ApiClient.convertToType(data['tollFreeCount'], 'Number');
            }
            if (data.hasOwnProperty('zipcode')) {
                obj['zipcode'] = ApiClient.convertToType(data['zipcode'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>NumberPurchaseRequest</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>NumberPurchaseRequest</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['city'] && !(typeof data['city'] === 'string' || data['city'] instanceof String)) {
            throw new Error("Expected the field `city` to be a primitive type in the JSON string but got " + data['city']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['numbers'])) {
            throw new Error("Expected the field `numbers` to be an array in the JSON data but got " + data['numbers']);
        }
        // ensure the json data is a string
        if (data['prefix'] && !(typeof data['prefix'] === 'string' || data['prefix'] instanceof String)) {
            throw new Error("Expected the field `prefix` to be a primitive type in the JSON string but got " + data['prefix']);
        }
        // ensure the json data is a string
        if (data['promo'] && !(typeof data['promo'] === 'string' || data['promo'] instanceof String)) {
            throw new Error("Expected the field `promo` to be a primitive type in the JSON string but got " + data['promo']);
        }
        // ensure the json data is a string
        if (data['state'] && !(typeof data['state'] === 'string' || data['state'] instanceof String)) {
            throw new Error("Expected the field `state` to be a primitive type in the JSON string but got " + data['state']);
        }
        // ensure the json data is a string
        if (data['zipcode'] && !(typeof data['zipcode'] === 'string' || data['zipcode'] instanceof String)) {
            throw new Error("Expected the field `zipcode` to be a primitive type in the JSON string but got " + data['zipcode']);
        }

        return true;
    }


}



/**
 * City of requested numbers
 * @member {String} city
 */
NumberPurchaseRequest.prototype['city'] = undefined;

/**
 * Total count of local numbers requested
 * @member {Number} localCount
 */
NumberPurchaseRequest.prototype['localCount'] = undefined;

/**
 * A list of phone numbers in E.164 format (11-digit) to buy. Example: 12132000384
 * @member {Array.<String>} numbers
 */
NumberPurchaseRequest.prototype['numbers'] = undefined;

/**
 * Country prefix of requested numbers
 * @member {String} prefix
 */
NumberPurchaseRequest.prototype['prefix'] = undefined;

/**
 * ~
 * @member {String} promo
 */
NumberPurchaseRequest.prototype['promo'] = undefined;

/**
 * A two-letter state code of requested numbers
 * @member {String} state
 */
NumberPurchaseRequest.prototype['state'] = undefined;

/**
 * Total count of toll-free numbers requested
 * @member {Number} tollFreeCount
 */
NumberPurchaseRequest.prototype['tollFreeCount'] = undefined;

/**
 * A five-digit Zip code of requested numbers
 * @member {String} zipcode
 */
NumberPurchaseRequest.prototype['zipcode'] = undefined;






export default NumberPurchaseRequest;

