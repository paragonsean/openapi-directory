/**
 * CallFire API Documentation
 * CallFire
 *
 * The version of the OpenAPI document: V2
 * Contact: support@callfire.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import CallRecording from './CallRecording';
import Note from './Note';
import QuestionResponse from './QuestionResponse';

/**
 * The CallRecord model module.
 * @module model/CallRecord
 * @version V2
 */
class CallRecord {
    /**
     * Constructs a new <code>CallRecord</code>.
     * Represents a call sent to a contact&#39;s number
     * @alias module:model/CallRecord
     */
    constructor() { 
        
        CallRecord.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>CallRecord</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/CallRecord} obj Optional instance to populate.
     * @return {module:model/CallRecord} The populated <code>CallRecord</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new CallRecord();

            if (data.hasOwnProperty('answerTime')) {
                obj['answerTime'] = ApiClient.convertToType(data['answerTime'], 'Number');
            }
            if (data.hasOwnProperty('billedAmount')) {
                obj['billedAmount'] = ApiClient.convertToType(data['billedAmount'], 'Number');
            }
            if (data.hasOwnProperty('callerName')) {
                obj['callerName'] = ApiClient.convertToType(data['callerName'], 'String');
            }
            if (data.hasOwnProperty('duration')) {
                obj['duration'] = ApiClient.convertToType(data['duration'], 'Number');
            }
            if (data.hasOwnProperty('finishTime')) {
                obj['finishTime'] = ApiClient.convertToType(data['finishTime'], 'Number');
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'Number');
            }
            if (data.hasOwnProperty('labels')) {
                obj['labels'] = ApiClient.convertToType(data['labels'], ['String']);
            }
            if (data.hasOwnProperty('notes')) {
                obj['notes'] = ApiClient.convertToType(data['notes'], [Note]);
            }
            if (data.hasOwnProperty('originateTime')) {
                obj['originateTime'] = ApiClient.convertToType(data['originateTime'], 'Number');
            }
            if (data.hasOwnProperty('questionResponses')) {
                obj['questionResponses'] = ApiClient.convertToType(data['questionResponses'], [QuestionResponse]);
            }
            if (data.hasOwnProperty('recordings')) {
                obj['recordings'] = ApiClient.convertToType(data['recordings'], [CallRecording]);
            }
            if (data.hasOwnProperty('result')) {
                obj['result'] = ApiClient.convertToType(data['result'], 'String');
            }
            if (data.hasOwnProperty('switchId')) {
                obj['switchId'] = ApiClient.convertToType(data['switchId'], 'String');
            }
            if (data.hasOwnProperty('toNumber')) {
                obj['toNumber'] = ApiClient.convertToType(data['toNumber'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>CallRecord</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>CallRecord</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['callerName'] && !(typeof data['callerName'] === 'string' || data['callerName'] instanceof String)) {
            throw new Error("Expected the field `callerName` to be a primitive type in the JSON string but got " + data['callerName']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['labels'])) {
            throw new Error("Expected the field `labels` to be an array in the JSON data but got " + data['labels']);
        }
        if (data['notes']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['notes'])) {
                throw new Error("Expected the field `notes` to be an array in the JSON data but got " + data['notes']);
            }
            // validate the optional field `notes` (array)
            for (const item of data['notes']) {
                Note.validateJSON(item);
            };
        }
        if (data['questionResponses']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['questionResponses'])) {
                throw new Error("Expected the field `questionResponses` to be an array in the JSON data but got " + data['questionResponses']);
            }
            // validate the optional field `questionResponses` (array)
            for (const item of data['questionResponses']) {
                QuestionResponse.validateJSON(item);
            };
        }
        if (data['recordings']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['recordings'])) {
                throw new Error("Expected the field `recordings` to be an array in the JSON data but got " + data['recordings']);
            }
            // validate the optional field `recordings` (array)
            for (const item of data['recordings']) {
                CallRecording.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['result'] && !(typeof data['result'] === 'string' || data['result'] instanceof String)) {
            throw new Error("Expected the field `result` to be a primitive type in the JSON string but got " + data['result']);
        }
        // ensure the json data is a string
        if (data['switchId'] && !(typeof data['switchId'] === 'string' || data['switchId'] instanceof String)) {
            throw new Error("Expected the field `switchId` to be a primitive type in the JSON string but got " + data['switchId']);
        }
        // ensure the json data is a string
        if (data['toNumber'] && !(typeof data['toNumber'] === 'string' || data['toNumber'] instanceof String)) {
            throw new Error("Expected the field `toNumber` to be a primitive type in the JSON string but got " + data['toNumber']);
        }

        return true;
    }


}



/**
 * Timestamp when call was answered, formatted in unix time milliseconds (read only). Example: 1473781817000 for Sat, 05 Jan 1985 14:03:37 GMT
 * @member {Number} answerTime
 */
CallRecord.prototype['answerTime'] = undefined;

/**
 * A cost of the call
 * @member {Number} billedAmount
 */
CallRecord.prototype['billedAmount'] = undefined;

/**
 * ~
 * @member {String} callerName
 */
CallRecord.prototype['callerName'] = undefined;

/**
 * Duration of the call in seconds
 * @member {Number} duration
 */
CallRecord.prototype['duration'] = undefined;

/**
 * Timestamp when call was finished, formatted in unix time milliseconds (read only). Example: 1473781817000 for Sat, 05 Jan 1985 14:03:37 GMT
 * @member {Number} finishTime
 */
CallRecord.prototype['finishTime'] = undefined;

/**
 * An id of a call record
 * @member {Number} id
 */
CallRecord.prototype['id'] = undefined;

/**
 * Labels associated with a call action
 * @member {Array.<String>} labels
 */
CallRecord.prototype['labels'] = undefined;

/**
 * Notes of call added by agent
 * @member {Array.<module:model/Note>} notes
 */
CallRecord.prototype['notes'] = undefined;

/**
 * A date and time (timestamp) when call was originated by CallFire platform and went to downstream provider, formatted in unix time milliseconds (read only). Example: 1473781817000 
 * @member {Number} originateTime
 */
CallRecord.prototype['originateTime'] = undefined;

/**
 * Notes of call added by an agent
 * @member {Array.<module:model/QuestionResponse>} questionResponses
 */
CallRecord.prototype['questionResponses'] = undefined;

/**
 * A list of voice recordings of the call
 * @member {Array.<module:model/CallRecording>} recordings
 */
CallRecord.prototype['recordings'] = undefined;

/**
 * ~
 * @member {module:model/CallRecord.ResultEnum} result
 */
CallRecord.prototype['result'] = undefined;

/**
 * ~
 * @member {String} switchId
 */
CallRecord.prototype['switchId'] = undefined;

/**
 * A phone number to which a call was addressed. Phone number in E.164 format (11-digit). Example: 12132000384
 * @member {String} toNumber
 */
CallRecord.prototype['toNumber'] = undefined;





/**
 * Allowed values for the <code>result</code> property.
 * @enum {String}
 * @readonly
 */
CallRecord['ResultEnum'] = {

    /**
     * value: "LA"
     * @const
     */
    "LA": "LA",

    /**
     * value: "AM"
     * @const
     */
    "AM": "AM",

    /**
     * value: "BUSY"
     * @const
     */
    "BUSY": "BUSY",

    /**
     * value: "DNC"
     * @const
     */
    "DNC": "DNC",

    /**
     * value: "XFER"
     * @const
     */
    "XFER": "XFER",

    /**
     * value: "NO_ANS"
     * @const
     */
    "NO_ANS": "NO_ANS",

    /**
     * value: "XFER_LEG"
     * @const
     */
    "XFER_LEG": "XFER_LEG",

    /**
     * value: "INTERNAL_ERROR"
     * @const
     */
    "INTERNAL_ERROR": "INTERNAL_ERROR",

    /**
     * value: "CARRIER_ERROR"
     * @const
     */
    "CARRIER_ERROR": "CARRIER_ERROR",

    /**
     * value: "CARRIER_TEMP_ERROR"
     * @const
     */
    "CARRIER_TEMP_ERROR": "CARRIER_TEMP_ERROR",

    /**
     * value: "UNDIALED"
     * @const
     */
    "UNDIALED": "UNDIALED",

    /**
     * value: "SD"
     * @const
     */
    "SD": "SD",

    /**
     * value: "POSTPONED"
     * @const
     */
    "POSTPONED": "POSTPONED",

    /**
     * value: "ABANDONED"
     * @const
     */
    "ABANDONED": "ABANDONED",

    /**
     * value: "SKIPPED"
     * @const
     */
    "SKIPPED": "SKIPPED"
};



export default CallRecord;

