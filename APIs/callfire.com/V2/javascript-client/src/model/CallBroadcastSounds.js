/**
 * CallFire API Documentation
 * CallFire
 *
 * The version of the OpenAPI document: V2
 * Contact: support@callfire.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The CallBroadcastSounds model module.
 * @module model/CallBroadcastSounds
 * @version V2
 */
class CallBroadcastSounds {
    /**
     * Constructs a new <code>CallBroadcastSounds</code>.
     * A set of sounds assigned to a voice broadcast to play according to an answering machine configuration. You can add the existing sounds from the account&#39;s sound library or to provide a text which will be converted into a speech. There are four sound options available for a Voice Broadcast campaign
     * @alias module:model/CallBroadcastSounds
     */
    constructor() { 
        
        CallBroadcastSounds.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>CallBroadcastSounds</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/CallBroadcastSounds} obj Optional instance to populate.
     * @return {module:model/CallBroadcastSounds} The populated <code>CallBroadcastSounds</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new CallBroadcastSounds();

            if (data.hasOwnProperty('dncDigit')) {
                obj['dncDigit'] = ApiClient.convertToType(data['dncDigit'], 'String');
            }
            if (data.hasOwnProperty('dncSoundId')) {
                obj['dncSoundId'] = ApiClient.convertToType(data['dncSoundId'], 'Number');
            }
            if (data.hasOwnProperty('dncSoundText')) {
                obj['dncSoundText'] = ApiClient.convertToType(data['dncSoundText'], 'String');
            }
            if (data.hasOwnProperty('dncSoundTextVoice')) {
                obj['dncSoundTextVoice'] = ApiClient.convertToType(data['dncSoundTextVoice'], 'String');
            }
            if (data.hasOwnProperty('liveSoundId')) {
                obj['liveSoundId'] = ApiClient.convertToType(data['liveSoundId'], 'Number');
            }
            if (data.hasOwnProperty('liveSoundText')) {
                obj['liveSoundText'] = ApiClient.convertToType(data['liveSoundText'], 'String');
            }
            if (data.hasOwnProperty('liveSoundTextVoice')) {
                obj['liveSoundTextVoice'] = ApiClient.convertToType(data['liveSoundTextVoice'], 'String');
            }
            if (data.hasOwnProperty('machineSoundId')) {
                obj['machineSoundId'] = ApiClient.convertToType(data['machineSoundId'], 'Number');
            }
            if (data.hasOwnProperty('machineSoundText')) {
                obj['machineSoundText'] = ApiClient.convertToType(data['machineSoundText'], 'String');
            }
            if (data.hasOwnProperty('machineSoundTextVoice')) {
                obj['machineSoundTextVoice'] = ApiClient.convertToType(data['machineSoundTextVoice'], 'String');
            }
            if (data.hasOwnProperty('transferDigit')) {
                obj['transferDigit'] = ApiClient.convertToType(data['transferDigit'], 'String');
            }
            if (data.hasOwnProperty('transferNumber')) {
                obj['transferNumber'] = ApiClient.convertToType(data['transferNumber'], 'String');
            }
            if (data.hasOwnProperty('transferSoundId')) {
                obj['transferSoundId'] = ApiClient.convertToType(data['transferSoundId'], 'Number');
            }
            if (data.hasOwnProperty('transferSoundText')) {
                obj['transferSoundText'] = ApiClient.convertToType(data['transferSoundText'], 'String');
            }
            if (data.hasOwnProperty('transferSoundTextVoice')) {
                obj['transferSoundTextVoice'] = ApiClient.convertToType(data['transferSoundTextVoice'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>CallBroadcastSounds</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>CallBroadcastSounds</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['dncDigit'] && !(typeof data['dncDigit'] === 'string' || data['dncDigit'] instanceof String)) {
            throw new Error("Expected the field `dncDigit` to be a primitive type in the JSON string but got " + data['dncDigit']);
        }
        // ensure the json data is a string
        if (data['dncSoundText'] && !(typeof data['dncSoundText'] === 'string' || data['dncSoundText'] instanceof String)) {
            throw new Error("Expected the field `dncSoundText` to be a primitive type in the JSON string but got " + data['dncSoundText']);
        }
        // ensure the json data is a string
        if (data['dncSoundTextVoice'] && !(typeof data['dncSoundTextVoice'] === 'string' || data['dncSoundTextVoice'] instanceof String)) {
            throw new Error("Expected the field `dncSoundTextVoice` to be a primitive type in the JSON string but got " + data['dncSoundTextVoice']);
        }
        // ensure the json data is a string
        if (data['liveSoundText'] && !(typeof data['liveSoundText'] === 'string' || data['liveSoundText'] instanceof String)) {
            throw new Error("Expected the field `liveSoundText` to be a primitive type in the JSON string but got " + data['liveSoundText']);
        }
        // ensure the json data is a string
        if (data['liveSoundTextVoice'] && !(typeof data['liveSoundTextVoice'] === 'string' || data['liveSoundTextVoice'] instanceof String)) {
            throw new Error("Expected the field `liveSoundTextVoice` to be a primitive type in the JSON string but got " + data['liveSoundTextVoice']);
        }
        // ensure the json data is a string
        if (data['machineSoundText'] && !(typeof data['machineSoundText'] === 'string' || data['machineSoundText'] instanceof String)) {
            throw new Error("Expected the field `machineSoundText` to be a primitive type in the JSON string but got " + data['machineSoundText']);
        }
        // ensure the json data is a string
        if (data['machineSoundTextVoice'] && !(typeof data['machineSoundTextVoice'] === 'string' || data['machineSoundTextVoice'] instanceof String)) {
            throw new Error("Expected the field `machineSoundTextVoice` to be a primitive type in the JSON string but got " + data['machineSoundTextVoice']);
        }
        // ensure the json data is a string
        if (data['transferDigit'] && !(typeof data['transferDigit'] === 'string' || data['transferDigit'] instanceof String)) {
            throw new Error("Expected the field `transferDigit` to be a primitive type in the JSON string but got " + data['transferDigit']);
        }
        // ensure the json data is a string
        if (data['transferNumber'] && !(typeof data['transferNumber'] === 'string' || data['transferNumber'] instanceof String)) {
            throw new Error("Expected the field `transferNumber` to be a primitive type in the JSON string but got " + data['transferNumber']);
        }
        // ensure the json data is a string
        if (data['transferSoundText'] && !(typeof data['transferSoundText'] === 'string' || data['transferSoundText'] instanceof String)) {
            throw new Error("Expected the field `transferSoundText` to be a primitive type in the JSON string but got " + data['transferSoundText']);
        }
        // ensure the json data is a string
        if (data['transferSoundTextVoice'] && !(typeof data['transferSoundTextVoice'] === 'string' || data['transferSoundTextVoice'] instanceof String)) {
            throw new Error("Expected the field `transferSoundTextVoice` to be a primitive type in the JSON string but got " + data['transferSoundTextVoice']);
        }

        return true;
    }


}



/**
 * Digit pressed to place contact in DNC list
 * @member {String} dncDigit
 */
CallBroadcastSounds.prototype['dncDigit'] = undefined;

/**
 * An id of sound file to play when recipient decided to opt out and pressed DNC digit
 * @member {Number} dncSoundId
 */
CallBroadcastSounds.prototype['dncSoundId'] = undefined;

/**
 * Text to be turned into sound, plays to notify that Do Not Call digit has been pressed and inform your contact of their placement on the Do Not Call list
 * @member {String} dncSoundText
 */
CallBroadcastSounds.prototype['dncSoundText'] = undefined;

/**
 * The voice to be used (MALE1, FEMALE1, FEMALE2, SPANISH1, FRENCHCANADIAN1)
 * @member {module:model/CallBroadcastSounds.DncSoundTextVoiceEnum} dncSoundTextVoice
 */
CallBroadcastSounds.prototype['dncSoundTextVoice'] = undefined;

/**
 * An id of sound file to play if phone is answered
 * @member {Number} liveSoundId
 */
CallBroadcastSounds.prototype['liveSoundId'] = undefined;

/**
 * Text to be used to turned into a sound. This text will be played when the phone is answered
 * @member {String} liveSoundText
 */
CallBroadcastSounds.prototype['liveSoundText'] = undefined;

/**
 * The voice to be used (MALE1, FEMALE1, FEMALE2, SPANISH1, FRENCHCANADIAN1) for a live sound
 * @member {module:model/CallBroadcastSounds.LiveSoundTextVoiceEnum} liveSoundTextVoice
 */
CallBroadcastSounds.prototype['liveSoundTextVoice'] = undefined;

/**
 * An id of a sound file to play if answering machine is detected
 * @member {Number} machineSoundId
 */
CallBroadcastSounds.prototype['machineSoundId'] = undefined;

/**
 * Text to be turned into a sound. This text will be played when answering machine is detected
 * @member {String} machineSoundText
 */
CallBroadcastSounds.prototype['machineSoundText'] = undefined;

/**
 * The voice to be used (MALE1, FEMALE1 , FEMALE2, SPANISH1, FRENCHCANADIAN1) for a machine sound
 * @member {module:model/CallBroadcastSounds.MachineSoundTextVoiceEnum} machineSoundTextVoice
 */
CallBroadcastSounds.prototype['machineSoundTextVoice'] = undefined;

/**
 * Digit pressed to initiate a transfer
 * @member {String} transferDigit
 */
CallBroadcastSounds.prototype['transferDigit'] = undefined;

/**
 * Phone number in E.164 format (11-digit) to transfer call to.  Example: 12132000384, 67076
 * @member {String} transferNumber
 */
CallBroadcastSounds.prototype['transferNumber'] = undefined;

/**
 * An id of a file to play if call is transferred
 * @member {Number} transferSoundId
 */
CallBroadcastSounds.prototype['transferSoundId'] = undefined;

/**
 * Text to be turned into a sound. This text will be played when the transfer digit is played
 * @member {String} transferSoundText
 */
CallBroadcastSounds.prototype['transferSoundText'] = undefined;

/**
 * The voice to be used (MALE1, FEMALE1, FEMALE2, SPANISH1, FRENCHCANADIAN1) for a sound transfer
 * @member {module:model/CallBroadcastSounds.TransferSoundTextVoiceEnum} transferSoundTextVoice
 */
CallBroadcastSounds.prototype['transferSoundTextVoice'] = undefined;





/**
 * Allowed values for the <code>dncSoundTextVoice</code> property.
 * @enum {String}
 * @readonly
 */
CallBroadcastSounds['DncSoundTextVoiceEnum'] = {

    /**
     * value: "MALE1"
     * @const
     */
    "MALE1": "MALE1",

    /**
     * value: "FEMALE1"
     * @const
     */
    "FEMALE1": "FEMALE1",

    /**
     * value: "FEMALE2"
     * @const
     */
    "FEMALE2": "FEMALE2",

    /**
     * value: "SPANISH1"
     * @const
     */
    "SPANISH1": "SPANISH1",

    /**
     * value: "FRENCHCANADIAN1"
     * @const
     */
    "FRENCHCANADIAN1": "FRENCHCANADIAN1"
};


/**
 * Allowed values for the <code>liveSoundTextVoice</code> property.
 * @enum {String}
 * @readonly
 */
CallBroadcastSounds['LiveSoundTextVoiceEnum'] = {

    /**
     * value: "MALE1"
     * @const
     */
    "MALE1": "MALE1",

    /**
     * value: "FEMALE1"
     * @const
     */
    "FEMALE1": "FEMALE1",

    /**
     * value: "FEMALE2"
     * @const
     */
    "FEMALE2": "FEMALE2",

    /**
     * value: "SPANISH1"
     * @const
     */
    "SPANISH1": "SPANISH1",

    /**
     * value: "FRENCHCANADIAN1"
     * @const
     */
    "FRENCHCANADIAN1": "FRENCHCANADIAN1"
};


/**
 * Allowed values for the <code>machineSoundTextVoice</code> property.
 * @enum {String}
 * @readonly
 */
CallBroadcastSounds['MachineSoundTextVoiceEnum'] = {

    /**
     * value: "MALE1"
     * @const
     */
    "MALE1": "MALE1",

    /**
     * value: "FEMALE1"
     * @const
     */
    "FEMALE1": "FEMALE1",

    /**
     * value: "FEMALE2"
     * @const
     */
    "FEMALE2": "FEMALE2",

    /**
     * value: "SPANISH1"
     * @const
     */
    "SPANISH1": "SPANISH1",

    /**
     * value: "FRENCHCANADIAN1"
     * @const
     */
    "FRENCHCANADIAN1": "FRENCHCANADIAN1"
};


/**
 * Allowed values for the <code>transferSoundTextVoice</code> property.
 * @enum {String}
 * @readonly
 */
CallBroadcastSounds['TransferSoundTextVoiceEnum'] = {

    /**
     * value: "MALE1"
     * @const
     */
    "MALE1": "MALE1",

    /**
     * value: "FEMALE1"
     * @const
     */
    "FEMALE1": "FEMALE1",

    /**
     * value: "FEMALE2"
     * @const
     */
    "FEMALE2": "FEMALE2",

    /**
     * value: "SPANISH1"
     * @const
     */
    "SPANISH1": "SPANISH1",

    /**
     * value: "FRENCHCANADIAN1"
     * @const
     */
    "FRENCHCANADIAN1": "FRENCHCANADIAN1"
};



export default CallBroadcastSounds;

