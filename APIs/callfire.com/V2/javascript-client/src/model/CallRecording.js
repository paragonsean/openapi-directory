/**
 * CallFire API Documentation
 * CallFire
 *
 * The version of the OpenAPI document: V2
 * Contact: support@callfire.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The CallRecording model module.
 * @module model/CallRecording
 * @version V2
 */
class CallRecording {
    /**
     * Constructs a new <code>CallRecording</code>.
     * Represents a recording of a voice call
     * @alias module:model/CallRecording
     */
    constructor() { 
        
        CallRecording.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>CallRecording</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/CallRecording} obj Optional instance to populate.
     * @return {module:model/CallRecording} The populated <code>CallRecording</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new CallRecording();

            if (data.hasOwnProperty('callId')) {
                obj['callId'] = ApiClient.convertToType(data['callId'], 'Number');
            }
            if (data.hasOwnProperty('campaignId')) {
                obj['campaignId'] = ApiClient.convertToType(data['campaignId'], 'Number');
            }
            if (data.hasOwnProperty('created')) {
                obj['created'] = ApiClient.convertToType(data['created'], 'Number');
            }
            if (data.hasOwnProperty('hash')) {
                obj['hash'] = ApiClient.convertToType(data['hash'], 'String');
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'Number');
            }
            if (data.hasOwnProperty('lengthInBytes')) {
                obj['lengthInBytes'] = ApiClient.convertToType(data['lengthInBytes'], 'Number');
            }
            if (data.hasOwnProperty('lengthInSeconds')) {
                obj['lengthInSeconds'] = ApiClient.convertToType(data['lengthInSeconds'], 'Number');
            }
            if (data.hasOwnProperty('mp3Url')) {
                obj['mp3Url'] = ApiClient.convertToType(data['mp3Url'], 'String');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('state')) {
                obj['state'] = ApiClient.convertToType(data['state'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>CallRecording</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>CallRecording</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['hash'] && !(typeof data['hash'] === 'string' || data['hash'] instanceof String)) {
            throw new Error("Expected the field `hash` to be a primitive type in the JSON string but got " + data['hash']);
        }
        // ensure the json data is a string
        if (data['mp3Url'] && !(typeof data['mp3Url'] === 'string' || data['mp3Url'] instanceof String)) {
            throw new Error("Expected the field `mp3Url` to be a primitive type in the JSON string but got " + data['mp3Url']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // ensure the json data is a string
        if (data['state'] && !(typeof data['state'] === 'string' || data['state'] instanceof String)) {
            throw new Error("Expected the field `state` to be a primitive type in the JSON string but got " + data['state']);
        }

        return true;
    }


}



/**
 * An id of a call action
 * @member {Number} callId
 */
CallRecording.prototype['callId'] = undefined;

/**
 * Contains broadcast id if call was sent as a part of voice broadcast
 * @member {Number} campaignId
 */
CallRecording.prototype['campaignId'] = undefined;

/**
 * The time when the given resource was created, formatted in unix time milliseconds (read only). Example: 1473781817000 for Sat, 05 Jan 1985 14:03:37 GMT
 * @member {Number} created
 */
CallRecording.prototype['created'] = undefined;

/**
 * A unique string hash identifier of a recording
 * @member {String} hash
 */
CallRecording.prototype['hash'] = undefined;

/**
 * An id of a call recording
 * @member {Number} id
 */
CallRecording.prototype['id'] = undefined;

/**
 * A size of a recording file in bytes
 * @member {Number} lengthInBytes
 */
CallRecording.prototype['lengthInBytes'] = undefined;

/**
 * Duration of a recording in seconds
 * @member {Number} lengthInSeconds
 */
CallRecording.prototype['lengthInSeconds'] = undefined;

/**
 * A public URL of a call recording
 * @member {String} mp3Url
 */
CallRecording.prototype['mp3Url'] = undefined;

/**
 * A name of a recording
 * @member {String} name
 */
CallRecording.prototype['name'] = undefined;

/**
 * Current state of a recording, available values: RECORDING - recording is in progress, READY - recording is ready, ERROR - error has occurred and recording can be broken
 * @member {module:model/CallRecording.StateEnum} state
 */
CallRecording.prototype['state'] = undefined;





/**
 * Allowed values for the <code>state</code> property.
 * @enum {String}
 * @readonly
 */
CallRecording['StateEnum'] = {

    /**
     * value: "RECORDING"
     * @const
     */
    "RECORDING": "RECORDING",

    /**
     * value: "READY"
     * @const
     */
    "READY": "READY",

    /**
     * value: "ERROR"
     * @const
     */
    "ERROR": "ERROR"
};



export default CallRecording;

