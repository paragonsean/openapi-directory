/**
 * CallFire API Documentation
 * CallFire
 *
 * The version of the OpenAPI document: V2
 * Contact: support@callfire.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The Media model module.
 * @module model/Media
 * @version V2
 */
class Media {
    /**
     * Constructs a new <code>Media</code>.
     * Represents a media file which can be added to a text message
     * @alias module:model/Media
     */
    constructor() { 
        
        Media.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>Media</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Media} obj Optional instance to populate.
     * @return {module:model/Media} The populated <code>Media</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Media();

            if (data.hasOwnProperty('accountId')) {
                obj['accountId'] = ApiClient.convertToType(data['accountId'], 'Number');
            }
            if (data.hasOwnProperty('created')) {
                obj['created'] = ApiClient.convertToType(data['created'], 'Number');
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'Number');
            }
            if (data.hasOwnProperty('lengthInBytes')) {
                obj['lengthInBytes'] = ApiClient.convertToType(data['lengthInBytes'], 'Number');
            }
            if (data.hasOwnProperty('mediaType')) {
                obj['mediaType'] = ApiClient.convertToType(data['mediaType'], 'String');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('publicUrl')) {
                obj['publicUrl'] = ApiClient.convertToType(data['publicUrl'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Media</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Media</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['mediaType'] && !(typeof data['mediaType'] === 'string' || data['mediaType'] instanceof String)) {
            throw new Error("Expected the field `mediaType` to be a primitive type in the JSON string but got " + data['mediaType']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // ensure the json data is a string
        if (data['publicUrl'] && !(typeof data['publicUrl'] === 'string' || data['publicUrl'] instanceof String)) {
            throw new Error("Expected the field `publicUrl` to be a primitive type in the JSON string but got " + data['publicUrl']);
        }

        return true;
    }


}



/**
 * ~
 * @member {Number} accountId
 */
Media.prototype['accountId'] = undefined;

/**
 * The time when the given resource was created, formatted in unix time milliseconds (read only). Example: 1473781817000 
 * @member {Number} created
 */
Media.prototype['created'] = undefined;

/**
 * An id of a media file
 * @member {Number} id
 */
Media.prototype['id'] = undefined;

/**
 * A size of a media file in bytes
 * @member {Number} lengthInBytes
 */
Media.prototype['lengthInBytes'] = undefined;

/**
 * A MIME type of media file, ex: image/jpeg, image/png, video/mp4, audio/mp3, etc
 * @member {String} mediaType
 */
Media.prototype['mediaType'] = undefined;

/**
 * A name of a media file
 * @member {String} name
 */
Media.prototype['name'] = undefined;

/**
 * A public URL of a media file
 * @member {String} publicUrl
 */
Media.prototype['publicUrl'] = undefined;






export default Media;

