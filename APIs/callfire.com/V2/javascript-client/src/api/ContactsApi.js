/**
 * CallFire API Documentation
 * CallFire
 *
 * The version of the OpenAPI document: V2
 * Contact: support@callfire.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import AddContactListContactsRequest from '../model/AddContactListContactsRequest';
import AddDoNotContactRequest from '../model/AddDoNotContactRequest';
import Contact from '../model/Contact';
import ContactHistory from '../model/ContactHistory';
import ContactList from '../model/ContactList';
import ContactListPage from '../model/ContactListPage';
import ContactPage from '../model/ContactPage';
import CreateContactListRequest from '../model/CreateContactListRequest';
import DoNotContact from '../model/DoNotContact';
import DoNotContactPage from '../model/DoNotContactPage';
import ErrorResponse from '../model/ErrorResponse';
import ItemListUniversalDoNotContact from '../model/ItemListUniversalDoNotContact';
import ResourceId from '../model/ResourceId';
import ResourceIdList from '../model/ResourceIdList';
import UpdateContactListRequest from '../model/UpdateContactListRequest';

/**
* Contacts service.
* @module api/ContactsApi
* @version V2
*/
export default class ContactsApi {

    /**
    * Constructs a new ContactsApi. 
    * @alias module:api/ContactsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the addContactListItems operation.
     * @callback module:api/ContactsApi~addContactListItemsCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Add contacts to a contact list
     * Adds contacts to a contact list. Available contact sources are: list of the contact entities, list of ids of existing contacts in user's account, list of phone numbers in E.164 format (11-digits)
     * @param {Number} id An id of a contact list
     * @param {Object} opts Optional parameters
     * @param {module:model/AddContactListContactsRequest} [addContactListContactsRequest] A request object
     * @param {module:api/ContactsApi~addContactListItemsCallback} callback The callback function, accepting three arguments: error, data, response
     */
    addContactListItems(id, opts, callback) {
      opts = opts || {};
      let postBody = opts['addContactListContactsRequest'];
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling addContactListItems");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/contacts/lists/{id}/items', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the addDoNotContacts operation.
     * @callback module:api/ContactsApi~addDoNotContactsCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Add do not contact (dnc) numbers
     * Add or update a list of Do Not Contact (DNC) contact entries. Can toggle whether the DNCs are enabled for calls/texts.
     * @param {Object} opts Optional parameters
     * @param {module:model/AddDoNotContactRequest} [addDoNotContactRequest] AddDoNotContactsRequest object
     * @param {module:api/ContactsApi~addDoNotContactsCallback} callback The callback function, accepting three arguments: error, data, response
     */
    addDoNotContacts(opts, callback) {
      opts = opts || {};
      let postBody = opts['addDoNotContactRequest'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/contacts/dncs', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createContactList operation.
     * @callback module:api/ContactsApi~createContactListCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ContactList} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create contact lists
     * Creates a contact list for use with campaigns using 1 of 3 inputs. A List of Contact objects, a list of String E.164 numbers, or a list of CallFire contactIds can be used as the data source for the created contact list. After contact list is added into the CallFire system, contact lists goes through seven system safeguards that check the accuracy and consistency of the data. For example, our system checks that contact number is formatted correctly, is valid, is not duplicated in another contact list, or is not added on a specific DNC list. You can configure to keep/merge or remove contacts which do not complies these rules. If contacts were not added to a contact list after the validation, this means the data needs to be properly formatted and corrected before calling this API
     * @param {Object} opts Optional parameters
     * @param {String} [fields] Limit fields received in response. E.g. fields: id, name or fields items (id, name), see more at [partial response](https://developers.callfire.com/docs.html#partial-response) page.
     * @param {module:model/CreateContactListRequest} [createContactListRequest] A request object
     * @param {module:api/ContactsApi~createContactListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ContactList}
     */
    createContactList(opts, callback) {
      opts = opts || {};
      let postBody = opts['createContactListRequest'];

      let pathParams = {
      };
      let queryParams = {
        'fields': opts['fields']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ContactList;
      return this.apiClient.callApi(
        '/contacts/lists', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createContactListFromFile operation.
     * @callback module:api/ContactsApi~createContactListFromFileCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ResourceId} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create contact list from file
     * Creates a contact list to be used with campaigns through uploading a .csv file. Returns the id of created list
     * @param {File} file CSV file to be uploaded
     * @param {Object} opts Optional parameters
     * @param {String} [name] A name of a contact list
     * @param {Boolean} [useCustomFields] A flag to indicate how to define property names for contacts. If true, uses the field and property names exactly as defined. If false will assign custom properties and fields to A, B, C, etc
     * @param {module:api/ContactsApi~createContactListFromFileCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ResourceId}
     */
    createContactListFromFile(file, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'file' is set
      if (file === undefined || file === null) {
        throw new Error("Missing the required parameter 'file' when calling createContactListFromFile");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
        'file': file,
        'name': opts['name'],
        'useCustomFields': opts['useCustomFields']
      };

      let authNames = ['basicAuth'];
      let contentTypes = ['multipart/form-data'];
      let accepts = ['application/json'];
      let returnType = ResourceId;
      return this.apiClient.callApi(
        '/contacts/lists/upload', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createContacts operation.
     * @callback module:api/ContactsApi~createContactsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ResourceIdList} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create contacts
     * Creates contacts in CallFire system. Only values from the next list can be used as external system parameter in contact creation: **NATION_BUILDER, SALES_FORCE_CONTACTS, SALES_FORCE_LEADS, SALES_FORCE_REPORTS, ZOHO, MAIL_CHIMP**. See [contacts validation rules](https://www.callfire.com/help/docs/getting-started/managing-contacts/validating-contacts#section1)
     * @param {Object} opts Optional parameters
     * @param {Array.<module:model/Contact>} [contact] A list of a contact objects
     * @param {module:api/ContactsApi~createContactsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ResourceIdList}
     */
    createContacts(opts, callback) {
      opts = opts || {};
      let postBody = opts['contact'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ResourceIdList;
      return this.apiClient.callApi(
        '/contacts', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteContact operation.
     * @callback module:api/ContactsApi~deleteContactCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a contact
     * Deletes a contact instance from account
     * @param {Number} id An Id of a contact
     * @param {module:api/ContactsApi~deleteContactCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteContact(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling deleteContact");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/contacts/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteContactList operation.
     * @callback module:api/ContactsApi~deleteContactListCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a contact list
     * Deletes a contact list, included contacts will not be deleted.
     * @param {Number} id An id of the contact list to be deleted
     * @param {module:api/ContactsApi~deleteContactListCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteContactList(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling deleteContactList");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/contacts/lists/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteDoNotContact operation.
     * @callback module:api/ContactsApi~deleteDoNotContactCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete do not contact (dnc) number. If number contains commas treat as list of numbers
     * Delete a Do Not Contact (DNC) contact entry.
     * @param {String} number Number associated with Do Not Contact (DNC) entry.
     * @param {module:api/ContactsApi~deleteDoNotContactCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteDoNotContact(number, callback) {
      let postBody = null;
      // verify the required parameter 'number' is set
      if (number === undefined || number === null) {
        throw new Error("Missing the required parameter 'number' when calling deleteDoNotContact");
      }

      let pathParams = {
        'number': number
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/contacts/dncs/{number}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteDoNotContactsBySource operation.
     * @callback module:api/ContactsApi~deleteDoNotContactsBySourceCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete do not contact (dnc) numbers contained in source.
     * Delete Do Not Contact (DNC) contact entries contained in source.
     * @param {String} source Source associated with Do Not Contact (DNC) entry.
     * @param {module:api/ContactsApi~deleteDoNotContactsBySourceCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteDoNotContactsBySource(source, callback) {
      let postBody = null;
      // verify the required parameter 'source' is set
      if (source === undefined || source === null) {
        throw new Error("Missing the required parameter 'source' when calling deleteDoNotContactsBySource");
      }

      let pathParams = {
        'source': source
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/contacts/dncs/sources/{source}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the findContactLists operation.
     * @callback module:api/ContactsApi~findContactListsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ContactListPage} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Find contact lists
     * Searches for all contact lists which are available for the current user. Returns a paged list of contact lists
     * @param {Object} opts Optional parameters
     * @param {String} [fields] Limit fields received in response. E.g. fields: id, name or fields items (id, name), see more at [partial response](https://developers.callfire.com/docs.html#partial-response) page.
     * @param {Number} [limit = 100)] To set the maximum number of records to return in a paged list response. The default is 100
     * @param {Number} [offset = 0)] Offset to the start of a given page. The default is 0. Check [pagination](https://developers.callfire.com/docs.html#pagination) page for more information about pagination in CallFire API.
     * @param {String} [name] A name or a partial name of a contact list
     * @param {Boolean} [exactMatch] ~
     * @param {Number} [contactCount] ~
     * @param {String} [orderBy] ~
     * @param {module:api/ContactsApi~findContactListsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ContactListPage}
     */
    findContactLists(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'fields': opts['fields'],
        'limit': opts['limit'],
        'offset': opts['offset'],
        'name': opts['name'],
        'exactMatch': opts['exactMatch'],
        'contactCount': opts['contactCount'],
        'orderBy': opts['orderBy']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ContactListPage;
      return this.apiClient.callApi(
        '/contacts/lists', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the findContacts operation.
     * @callback module:api/ContactsApi~findContactsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ContactPage} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Find contacts
     * Find user's contacts by id, contact list, or on any property name. Returns a paged list of contacts
     * @param {Object} opts Optional parameters
     * @param {String} [fields] Limit fields received in response. E.g. fields: id, name or fields items (id, name), see more at [partial response](https://developers.callfire.com/docs.html#partial-response) page.
     * @param {Number} [limit = 100)] To set the maximum number of records to return in a paged list response. The default is 100
     * @param {Number} [offset = 0)] Offset to the start of a given page. The default is 0. Check [pagination](https://developers.callfire.com/docs.html#pagination) page for more information about pagination in CallFire API.
     * @param {Array.<Number>} [id] A list of contact IDs. If the id parameter is included, the other query parameters are ignored.
     * @param {Array.<String>} [number] Multiple contact numbers can be specified. If the number parameter is included, the other query parameters are ignored.
     * @param {Number} [contactListId] Filters contacts by a particular contact list
     * @param {String} [propertyName] Name of a contact property to search by
     * @param {String} [propertyValue] Value of a contact property to search by
     * @param {module:api/ContactsApi~findContactsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ContactPage}
     */
    findContacts(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'fields': opts['fields'],
        'limit': opts['limit'],
        'offset': opts['offset'],
        'id': this.apiClient.buildCollectionParam(opts['id'], 'multi'),
        'number': this.apiClient.buildCollectionParam(opts['number'], 'multi'),
        'contactListId': opts['contactListId'],
        'propertyName': opts['propertyName'],
        'propertyValue': opts['propertyValue']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ContactPage;
      return this.apiClient.callApi(
        '/contacts', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the findDoNotContacts operation.
     * @callback module:api/ContactsApi~findDoNotContactsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DoNotContactPage} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Find do not contact (dnc) items
     * Searches for all Do Not Contact (DNC) objects created by user. These DoNotContact entries only affect calls/texts/campaigns on this account. Returns a paged list of DoNotContact objects
     * @param {Object} opts Optional parameters
     * @param {String} [fields] Limit fields received in response. E.g. fields: id, name or fields items (id, name), see more at [partial response](https://developers.callfire.com/docs.html#partial-response) page.
     * @param {Number} [limit = 100)] To set the maximum number of records to return in a paged list response. The default is 100
     * @param {Number} [offset = 0)] Offset to the start of a given page. The default is 0. Check [pagination](https://developers.callfire.com/docs.html#pagination) page for more information about pagination in CallFire API.
     * @param {String} [prefix] Prefix (1-10 digits) of phone numbers
     * @param {Number} [campaignId] A campaign id which was used to send a message to a DNC number
     * @param {String} [source] A DNC source name to search for DNCs
     * @param {Boolean} [call] Show only Do-Not-Call numbers
     * @param {Boolean} [text] Show only Do-Not-Text numbers
     * @param {Boolean} [inboundCall] ~
     * @param {Boolean} [inboundText] ~
     * @param {Array.<String>} [number] ~
     * @param {module:api/ContactsApi~findDoNotContactsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DoNotContactPage}
     */
    findDoNotContacts(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'fields': opts['fields'],
        'limit': opts['limit'],
        'offset': opts['offset'],
        'prefix': opts['prefix'],
        'campaignId': opts['campaignId'],
        'source': opts['source'],
        'call': opts['call'],
        'text': opts['text'],
        'inboundCall': opts['inboundCall'],
        'inboundText': opts['inboundText'],
        'number': this.apiClient.buildCollectionParam(opts['number'], 'multi')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = DoNotContactPage;
      return this.apiClient.callApi(
        '/contacts/dncs', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getContact operation.
     * @callback module:api/ContactsApi~getContactCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Contact} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Find a specific contact
     * Returns a Contact instance for a given contact id. Deleted contacts can be still retrieved but will be marked as deleted. Deleted contacts will not be shown in search request.
     * @param {Number} id An id of a contact
     * @param {Object} opts Optional parameters
     * @param {String} [fields] Limit fields received in response. E.g. fields: id, name or fields items (id, name), see more at [partial response](https://developers.callfire.com/docs.html#partial-response) page.
     * @param {module:api/ContactsApi~getContactCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Contact}
     */
    getContact(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getContact");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'fields': opts['fields']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Contact;
      return this.apiClient.callApi(
        '/contacts/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getContactHistory operation.
     * @callback module:api/ContactsApi~getContactHistoryCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ContactHistory} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Find a contact's history
     * Searches for all texts and calls attributed to a contact. Returns a list of calls and texts a contact has been involved with
     * @param {Number} id An Id of a contact
     * @param {Object} opts Optional parameters
     * @param {Number} [limit] To set the maximum number of records to return in a paged list response. The default is 100
     * @param {Number} [offset] Offset to the start of a given page. The default is 0. Check [pagination](https://developers.callfire.com/docs.html#pagination) page for more information about pagination in CallFire API.
     * @param {String} [fields] Limit fields received in response. E.g. fields: id, name or fields items (id, name), see more at [partial response](https://developers.callfire.com/docs.html#partial-response) page.
     * @param {module:api/ContactsApi~getContactHistoryCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ContactHistory}
     */
    getContactHistory(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getContactHistory");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'limit': opts['limit'],
        'offset': opts['offset'],
        'fields': opts['fields']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ContactHistory;
      return this.apiClient.callApi(
        '/contacts/{id}/history', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getContactList operation.
     * @callback module:api/ContactsApi~getContactListCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ContactList} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Find a specific contact list
     * Returns a single ContactList instance for a given contact list id
     * @param {Number} id An id of a contact list to return
     * @param {Object} opts Optional parameters
     * @param {String} [fields] Limit fields received in response. E.g. fields: id, name or fields items (id, name), see more at [partial response](https://developers.callfire.com/docs.html#partial-response) page.
     * @param {module:api/ContactsApi~getContactListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ContactList}
     */
    getContactList(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getContactList");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'fields': opts['fields']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ContactList;
      return this.apiClient.callApi(
        '/contacts/lists/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getContactListItems operation.
     * @callback module:api/ContactsApi~getContactListItemsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ContactPage} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Find contacts in a contact list
     * Searches for all entries in a contact list with specified id. Returns a paged list of contact entries
     * @param {Number} id An id of a contact list
     * @param {Object} opts Optional parameters
     * @param {String} [fields] Limit fields received in response. E.g. fields: id, name or fields items (id, name), see more at [partial response](https://developers.callfire.com/docs.html#partial-response) page.
     * @param {Number} [limit] To set the maximum number of records to return in a paged list response. The default is 100
     * @param {Number} [offset] Offset to the start of a given page. The default is 0. Check [pagination](https://developers.callfire.com/docs.html#pagination) page for more information about pagination in CallFire API.
     * @param {module:api/ContactsApi~getContactListItemsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ContactPage}
     */
    getContactListItems(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getContactListItems");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'fields': opts['fields'],
        'limit': opts['limit'],
        'offset': opts['offset']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ContactPage;
      return this.apiClient.callApi(
        '/contacts/lists/{id}/items', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getDoNotContact operation.
     * @callback module:api/ContactsApi~getDoNotContactCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DoNotContact} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get do not contact (dnc)
     * Get Do Not Contact (DNC) object create by user. This DoNotContact entry only affects calls/texts/campaigns on this account.
     * @param {String} number Number associated with Do Not Contact (DNC) entry.
     * @param {module:api/ContactsApi~getDoNotContactCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DoNotContact}
     */
    getDoNotContact(number, callback) {
      let postBody = null;
      // verify the required parameter 'number' is set
      if (number === undefined || number === null) {
        throw new Error("Missing the required parameter 'number' when calling getDoNotContact");
      }

      let pathParams = {
        'number': number
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = DoNotContact;
      return this.apiClient.callApi(
        '/contacts/dncs/{number}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getUniversalDoNotContacts operation.
     * @callback module:api/ContactsApi~getUniversalDoNotContactsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ItemListUniversalDoNotContact} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Find universal do not contacts (udnc) associated with toNumber
     * Searches for a UniversalDoNotContact object for a given phone number. Shows whether inbound/outbound actions are allowed for a given number
     * @param {String} toNumber A required destination phone number in E.164 format (11-digit). Example: 12132000384
     * @param {Object} opts Optional parameters
     * @param {String} [fromNumber] An optional destination/source number for DNC, specified in E.164 format (11-digit). Example: 12132000384
     * @param {String} [fields] Limit fields received in response. E.g. fields: id, name or fields items (id, name), see more at [partial response](https://developers.callfire.com/docs.html#partial-response) page.
     * @param {module:api/ContactsApi~getUniversalDoNotContactsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ItemListUniversalDoNotContact}
     */
    getUniversalDoNotContacts(toNumber, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'toNumber' is set
      if (toNumber === undefined || toNumber === null) {
        throw new Error("Missing the required parameter 'toNumber' when calling getUniversalDoNotContacts");
      }

      let pathParams = {
        'toNumber': toNumber
      };
      let queryParams = {
        'fromNumber': opts['fromNumber'],
        'fields': opts['fields']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ItemListUniversalDoNotContact;
      return this.apiClient.callApi(
        '/contacts/dncs/universals/{toNumber}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the removeContactListItem operation.
     * @callback module:api/ContactsApi~removeContactListItemCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a contact from a contact list
     * Deletes a single contact from a contact list
     * @param {Number} id An id of a contact list
     * @param {Number} contactId An id of a contact
     * @param {module:api/ContactsApi~removeContactListItemCallback} callback The callback function, accepting three arguments: error, data, response
     */
    removeContactListItem(id, contactId, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling removeContactListItem");
      }
      // verify the required parameter 'contactId' is set
      if (contactId === undefined || contactId === null) {
        throw new Error("Missing the required parameter 'contactId' when calling removeContactListItem");
      }

      let pathParams = {
        'id': id,
        'contactId': contactId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/contacts/lists/{id}/items/{contactId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the removeContactListItems operation.
     * @callback module:api/ContactsApi~removeContactListItemsCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete contacts from a contact list
     * Deletes contacts from a contact list. List the contact ids in request to delete multiple contacts with one request.
     * @param {Number} id A id of a contact list
     * @param {Object} opts Optional parameters
     * @param {Array.<Number>} [contactId] An id of a contact entity in the CallFire system
     * @param {module:api/ContactsApi~removeContactListItemsCallback} callback The callback function, accepting three arguments: error, data, response
     */
    removeContactListItems(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling removeContactListItems");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'contactId': this.apiClient.buildCollectionParam(opts['contactId'], 'multi')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/contacts/lists/{id}/items', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateContact operation.
     * @callback module:api/ContactsApi~updateContactCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update a contact
     * Updates a single contact instance with id specified. See [contact validation rules](https://www.callfire.com/help/docs/getting-started/managing-contacts/validating-contacts#section1)
     * @param {Number} id An id of a contact
     * @param {Object} opts Optional parameters
     * @param {module:model/Contact} [contact] A contact object
     * @param {module:api/ContactsApi~updateContactCallback} callback The callback function, accepting three arguments: error, data, response
     */
    updateContact(id, opts, callback) {
      opts = opts || {};
      let postBody = opts['contact'];
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling updateContact");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/contacts/{id}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateContactList operation.
     * @callback module:api/ContactsApi~updateContactListCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update a contact list
     * Updates contact list instance.
     * @param {Number} id An id of contact list to update
     * @param {Object} opts Optional parameters
     * @param {module:model/UpdateContactListRequest} [updateContactListRequest] A request object
     * @param {module:api/ContactsApi~updateContactListCallback} callback The callback function, accepting three arguments: error, data, response
     */
    updateContactList(id, opts, callback) {
      opts = opts || {};
      let postBody = opts['updateContactListRequest'];
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling updateContactList");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/contacts/lists/{id}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateDoNotContact operation.
     * @callback module:api/ContactsApi~updateDoNotContactCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update an individual do not contact (dnc) number
     * Update a Do Not Contact (DNC) contact entry. Can toggle whether the DNC is enabled for calls/texts.
     * @param {String} number ~
     * @param {Object} opts Optional parameters
     * @param {module:model/DoNotContact} [doNotContact] DoNotContact object
     * @param {module:api/ContactsApi~updateDoNotContactCallback} callback The callback function, accepting three arguments: error, data, response
     */
    updateDoNotContact(number, opts, callback) {
      opts = opts || {};
      let postBody = opts['doNotContact'];
      // verify the required parameter 'number' is set
      if (number === undefined || number === null) {
        throw new Error("Missing the required parameter 'number' when calling updateDoNotContact");
      }

      let pathParams = {
        'number': number
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/contacts/dncs/{number}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
