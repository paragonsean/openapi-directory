/**
 * CallFire API Documentation
 * CallFire
 *
 * The version of the OpenAPI document: V2
 * Contact: support@callfire.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import Account from '../model/Account';
import ApiCredential from '../model/ApiCredential';
import ApiCredentialPage from '../model/ApiCredentialPage';
import BillingPlanUsage from '../model/BillingPlanUsage';
import CallerIdList from '../model/CallerIdList';
import CallerIdVerificationRequest from '../model/CallerIdVerificationRequest';
import CreditUsage from '../model/CreditUsage';
import ErrorResponse from '../model/ErrorResponse';

/**
* Me service.
* @module api/MeApi
* @version V2
*/
export default class MeApi {

    /**
    * Constructs a new MeApi. 
    * @alias module:api/MeApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the createApiCredential operation.
     * @callback module:api/MeApi~createApiCredentialCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ApiCredential} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create api credentials
     * Creates an API credentials for the CallFire API. This endpoint requires full CallFire account credentials to be used, authenticated using Basic Authentication. At the moment user provides only the name for the credentials. The generated credentials can be used to access any CallFire APIs. For authentication use account credentials.
     * @param {Object} opts Optional parameters
     * @param {module:model/ApiCredential} [apiCredential] To create the API credentials
     * @param {module:api/MeApi~createApiCredentialCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ApiCredential}
     */
    createApiCredential(opts, callback) {
      opts = opts || {};
      let postBody = opts['apiCredential'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ApiCredential;
      return this.apiClient.callApi(
        '/me/api/credentials', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteApiCredential operation.
     * @callback module:api/MeApi~deleteApiCredentialCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete api credentials
     * Deletes a specified API credential. Currently, removes the ability to access the API. Only ACCOUNT_HOLDER can invoke this API. For authentication use account credentials.
     * @param {Number} id An id of an API credential
     * @param {module:api/MeApi~deleteApiCredentialCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteApiCredential(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling deleteApiCredential");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/me/api/credentials/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the disableApiCredentials operation.
     * @callback module:api/MeApi~disableApiCredentialsCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Disable specified API credentials
     * Disables a specified API credential. Currently, removes the ability to access the API. Only ACCOUNT_HOLDER can invoke this API. For authentication use account credentials.
     * @param {Number} id An id of an API credential
     * @param {module:api/MeApi~disableApiCredentialsCallback} callback The callback function, accepting three arguments: error, data, response
     */
    disableApiCredentials(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling disableApiCredentials");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/me/api/credentials/{id}/disable', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the enableApiCredentials operation.
     * @callback module:api/MeApi~enableApiCredentialsCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Enable specified API credentials
     * Enables a specified API credential. Currently, adds the ability to access the API. Only ACCOUNT_HOLDER can invoke this API. For authentication use account credentials.
     * @param {Number} id An id of an API credential
     * @param {module:api/MeApi~enableApiCredentialsCallback} callback The callback function, accepting three arguments: error, data, response
     */
    enableApiCredentials(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling enableApiCredentials");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/me/api/credentials/{id}/enable', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the findApiCredentials operation.
     * @callback module:api/MeApi~findApiCredentialsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ApiCredentialPage} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Find api credentials
     * Searches for all credentials generated by user. Returns a paged list of the API credentials. Only ACCOUNT_HOLDER can invoke this API. For authentication use account credentials.
     * @param {Object} opts Optional parameters
     * @param {String} [name] Filter by name
     * @param {String} [fields] Limit fields received in response. E.g. fields: id, name or fields items (id, name), see more at [partial response](https://developers.callfire.com/docs.html#partial-response) page.
     * @param {Number} [limit = 100)] To set the maximum number of records to return in a paged list response. The default is 100
     * @param {Number} [offset = 0)] Offset to the start of a given page. The default is 0. Check [pagination](https://developers.callfire.com/docs.html#pagination) page for more information about pagination in CallFire API.
     * @param {module:api/MeApi~findApiCredentialsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ApiCredentialPage}
     */
    findApiCredentials(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'name': opts['name'],
        'fields': opts['fields'],
        'limit': opts['limit'],
        'offset': opts['offset']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ApiCredentialPage;
      return this.apiClient.callApi(
        '/me/api/credentials', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getAccount operation.
     * @callback module:api/MeApi~getAccountCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Account} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Find account details
     * Searches for the user account details. Details include name, email, and basic account permissions. For authentication use api credentials.
     * @param {Object} opts Optional parameters
     * @param {String} [fields] Limit fields received in response. E.g. fields: id, name or fields items (id, name), see more at [partial response](https://developers.callfire.com/docs.html#partial-response) page.
     * @param {module:api/MeApi~getAccountCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Account}
     */
    getAccount(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'fields': opts['fields']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Account;
      return this.apiClient.callApi(
        '/me/account', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getApiCredential operation.
     * @callback module:api/MeApi~getApiCredentialCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ApiCredential} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Find a specific api credential
     * Returns an API credential instance for a given api credential id. Only ACCOUNT_HOLDER can invoke this API. For authentication use account credentials.
     * @param {Number} id An id of an API credential
     * @param {Object} opts Optional parameters
     * @param {String} [fields] Limit fields received in response. E.g. fields: id, name or fields items (id, name), see more at [partial response](https://developers.callfire.com/docs.html#partial-response) page.
     * @param {module:api/MeApi~getApiCredentialCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ApiCredential}
     */
    getApiCredential(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getApiCredential");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'fields': opts['fields']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ApiCredential;
      return this.apiClient.callApi(
        '/me/api/credentials/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getBillingPlanUsage operation.
     * @callback module:api/MeApi~getBillingPlanUsageCallback
     * @param {String} error Error message, if any.
     * @param {module:model/BillingPlanUsage} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Find plan usage
     * Searches for the data of a billing plan usage for the user. Returns the data of a billing plan usage for the current month. For authentication use api credentials.
     * @param {module:api/MeApi~getBillingPlanUsageCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/BillingPlanUsage}
     */
    getBillingPlanUsage(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = BillingPlanUsage;
      return this.apiClient.callApi(
        '/me/billing/plan-usage', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getCallerIds operation.
     * @callback module:api/MeApi~getCallerIdsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CallerIdList} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Find caller ids
     * Returns a list of verified caller ids. If the number is not shown in the list, then it is not verified. In this case sending of a verification code is required. For authentication use api credentials.
     * @param {module:api/MeApi~getCallerIdsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CallerIdList}
     */
    getCallerIds(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = CallerIdList;
      return this.apiClient.callApi(
        '/me/callerids', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getCreditUsage operation.
     * @callback module:api/MeApi~getCreditUsageCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CreditUsage} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Find credit usage
     * Find credit usage for the user. Returns credits usage for time period specified or if unspecified then total for all time. For authentication use api credentials.
     * @param {Object} opts Optional parameters
     * @param {Number} [intervalBegin] Beginning of usage period formatted in unix time milliseconds. Example: 1473781817000
     * @param {Number} [intervalEnd] End of usage period formatted in unix time milliseconds. Example: 1473781817000
     * @param {module:api/MeApi~getCreditUsageCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CreditUsage}
     */
    getCreditUsage(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'intervalBegin': opts['intervalBegin'],
        'intervalEnd': opts['intervalEnd']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = CreditUsage;
      return this.apiClient.callApi(
        '/me/billing/credit-usage', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the sendVerificationCodeToCallerId operation.
     * @callback module:api/MeApi~sendVerificationCodeToCallerIdCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a caller id
     * Generates and sends a verification code to the phone number provided in the path. The verification code is delivered via a phone call. This code needs to be submitted to the verify caller id API endpoint to complete verification. For authentication use api credentials.
     * @param {String} callerid A phone number in E.164 format (11-digit) which needs to be verified. Example: 12132000384
     * @param {module:api/MeApi~sendVerificationCodeToCallerIdCallback} callback The callback function, accepting three arguments: error, data, response
     */
    sendVerificationCodeToCallerId(callerid, callback) {
      let postBody = null;
      // verify the required parameter 'callerid' is set
      if (callerid === undefined || callerid === null) {
        throw new Error("Missing the required parameter 'callerid' when calling sendVerificationCodeToCallerId");
      }

      let pathParams = {
        'callerid': callerid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/me/callerids/{callerid}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the verifyCallerId operation.
     * @callback module:api/MeApi~verifyCallerIdCallback
     * @param {String} error Error message, if any.
     * @param {Boolean} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Verify a caller id
     * With the verification code received from the Create caller id endpoint, a call to this endpoint is required to finish verification. For authentication use api credentials.
     * @param {String} callerid A phone number in E.164 format (11-digit) which needs to be verified. Example: 12132000384
     * @param {Object} opts Optional parameters
     * @param {module:model/CallerIdVerificationRequest} [callerIdVerificationRequest] request
     * @param {module:api/MeApi~verifyCallerIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Boolean}
     */
    verifyCallerId(callerid, opts, callback) {
      opts = opts || {};
      let postBody = opts['callerIdVerificationRequest'];
      // verify the required parameter 'callerid' is set
      if (callerid === undefined || callerid === null) {
        throw new Error("Missing the required parameter 'callerid' when calling verifyCallerId");
      }

      let pathParams = {
        'callerid': callerid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = 'Boolean';
      return this.apiClient.callApi(
        '/me/callerids/{callerid}/verification-code', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
