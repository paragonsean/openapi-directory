/**
 * CallFire API Documentation
 * CallFire
 *
 * The version of the OpenAPI document: V2
 * Contact: support@callfire.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import BatchPage from '../model/BatchPage';
import BatchRequest from '../model/BatchRequest';
import ErrorResponse from '../model/ErrorResponse';
import Recipient from '../model/Recipient';
import ResourceId from '../model/ResourceId';
import Text from '../model/Text';
import TextAutoReply from '../model/TextAutoReply';
import TextAutoReplyPage from '../model/TextAutoReplyPage';
import TextBroadcast from '../model/TextBroadcast';
import TextBroadcastCreateResponse from '../model/TextBroadcastCreateResponse';
import TextBroadcastPage from '../model/TextBroadcastPage';
import TextBroadcastStatsDto from '../model/TextBroadcastStatsDto';
import TextList from '../model/TextList';
import TextPage from '../model/TextPage';
import TextRecipient from '../model/TextRecipient';

/**
* Texts service.
* @module api/TextsApi
* @version V2
*/
export default class TextsApi {

    /**
    * Constructs a new TextsApi. 
    * @alias module:api/TextsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the addTextBroadcastBatch operation.
     * @callback module:api/TextsApi~addTextBroadcastBatchCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ResourceId} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Add batches to a text broadcast
     * Allows adding an extra batches to an already created text broadcast campaign. The batches which being  added pass the CallFire validation process (unlike in the recipients version of this API). That is why using of a scrubDuplicates flag remove duplicates from your batch. Batches may be added as a contact list id, a list of contact ids, or a list of numbers
     * @param {Number} id An id of a text broadcast
     * @param {Object} opts Optional parameters
     * @param {Boolean} [strictValidation] Turns on strict validation for recipients. System will reply with BAD_REQUEST(400) if strictValidation = true and one of numbers didn't pass validation
     * @param {module:model/BatchRequest} [batchRequest] A request object
     * @param {module:api/TextsApi~addTextBroadcastBatchCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ResourceId}
     */
    addTextBroadcastBatch(id, opts, callback) {
      opts = opts || {};
      let postBody = opts['batchRequest'];
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling addTextBroadcastBatch");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'strictValidation': opts['strictValidation']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ResourceId;
      return this.apiClient.callApi(
        '/texts/broadcasts/{id}/batches', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the addTextBroadcastRecipients operation.
     * @callback module:api/TextsApi~addTextBroadcastRecipientsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/TextList} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Add recipients to a text broadcast
     * Use this API to add recipients to a text broadcast which is already created. Post a list of Recipient objects to be immediately added to the text broadcast campaign. These contacts will not go through validation process, and will be acted upon as they are added. Recipients may be added as a list of contact ids, or list of numbers
     * @param {Number} id An id of a text broadcast
     * @param {Object} opts Optional parameters
     * @param {String} [fields] Limit fields received in response. E.g. fields: id, name or fields items (id, name), see more at [partial response](https://developers.callfire.com/docs.html#partial-response) page.
     * @param {Boolean} [strictValidation] Turns on strict validation for recipients. System will reply with BAD_REQUEST(400) if strictValidation = true and one of numbers didn't pass validation
     * @param {Array.<module:model/TextRecipient>} [textRecipient] A list of the TextRecipient objects
     * @param {module:api/TextsApi~addTextBroadcastRecipientsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/TextList}
     */
    addTextBroadcastRecipients(id, opts, callback) {
      opts = opts || {};
      let postBody = opts['textRecipient'];
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling addTextBroadcastRecipients");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'fields': opts['fields'],
        'strictValidation': opts['strictValidation']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = TextList;
      return this.apiClient.callApi(
        '/texts/broadcasts/{id}/recipients', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the archiveTextBroadcast operation.
     * @callback module:api/TextsApi~archiveTextBroadcastCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Archive text broadcast
     * Archives a text broadcast (and hides it in the search results)
     * @param {Number} id An id of a text broadcast to archive
     * @param {module:api/TextsApi~archiveTextBroadcastCallback} callback The callback function, accepting three arguments: error, data, response
     */
    archiveTextBroadcast(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling archiveTextBroadcast");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/texts/broadcasts/{id}/archive', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createTextAutoReply operation.
     * @callback module:api/TextsApi~createTextAutoReplyCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ResourceId} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create an auto reply
     * CallFire gives you possibility to set up auto reply messages for your numbers and keywords. You can set a general auto reply for anyone who texts your number, keyword, and/or include a text to match, so that the auto reply would be sent only to those who text the matched text
     * @param {Object} opts Optional parameters
     * @param {module:model/TextAutoReply} [textAutoReply] TextAutoReply object, keyword or number should be specified with response message and text to match if needed
     * @param {module:api/TextsApi~createTextAutoReplyCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ResourceId}
     */
    createTextAutoReply(opts, callback) {
      opts = opts || {};
      let postBody = opts['textAutoReply'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ResourceId;
      return this.apiClient.callApi(
        '/texts/auto-replys', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createTextBroadcast operation.
     * @callback module:api/TextsApi~createTextBroadcastCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ResourceId} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a text broadcast
     * Creates a text broadcast campaign using the Text Broadcast API. Send a TextBroadcast object in the message body to detail a text broadcast campaign. A campaign can be created without contacts and with bare minimum configuration, but contacts have to be added further on to use the campaign. It supports scheduling, retry logic, pattern-based messages.
     * @param {Object} opts Optional parameters
     * @param {Boolean} [start] If true then starts the campaign immediately (not required).
     * @param {Boolean} [strictValidation] Turns on strict validation for recipients. System will reply with BAD_REQUEST(400) if strictValidation = true and one of numbers didn't pass validation
     * @param {module:model/TextBroadcast} [textBroadcast] A TextBroadcast object
     * @param {module:api/TextsApi~createTextBroadcastCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ResourceId}
     */
    createTextBroadcast(opts, callback) {
      opts = opts || {};
      let postBody = opts['textBroadcast'];

      let pathParams = {
      };
      let queryParams = {
        'start': opts['start'],
        'strictValidation': opts['strictValidation']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ResourceId;
      return this.apiClient.callApi(
        '/texts/broadcasts', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteTextAutoReply operation.
     * @callback module:api/TextsApi~deleteTextAutoReplyCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete an auto reply
     * Deletes a text auto reply and removes the configuration. Can not delete a TextAutoReply which is currently active for a campaign
     * @param {Number} id An id of a text auto reply
     * @param {module:api/TextsApi~deleteTextAutoReplyCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteTextAutoReply(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling deleteTextAutoReply");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/texts/auto-replys/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the findTextAutoReplys operation.
     * @callback module:api/TextsApi~findTextAutoReplysCallback
     * @param {String} error Error message, if any.
     * @param {module:model/TextAutoReplyPage} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Find auto replies
     * Find all text autoreplies created by user. Returns a paged list of TextAutoReply
     * @param {Object} opts Optional parameters
     * @param {String} [fields] Limit fields received in response. E.g. fields: id, name or fields items (id, name), see more at [partial response](https://developers.callfire.com/docs.html#partial-response) page.
     * @param {Number} [limit = 100)] To set the maximum number of records to return in a paged list response. The default is 100
     * @param {Number} [offset = 0)] Offset to the start of a given page. The default is 0. Check [pagination](https://developers.callfire.com/docs.html#pagination) page for more information about pagination in CallFire API.
     * @param {String} [number] Phone number in E.164 format (11-digit) which contains a TextAutoReply. Example: 12132000384. If number is empty then operator returns all autoreplies configured for the user's account
     * @param {module:api/TextsApi~findTextAutoReplysCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/TextAutoReplyPage}
     */
    findTextAutoReplys(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'fields': opts['fields'],
        'limit': opts['limit'],
        'offset': opts['offset'],
        'number': opts['number']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = TextAutoReplyPage;
      return this.apiClient.callApi(
        '/texts/auto-replys', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the findTextBroadcasts operation.
     * @callback module:api/TextsApi~findTextBroadcastsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/TextBroadcastPage} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Find text broadcasts
     * Searches for all text broadcasts created by user. Can query on label, name, and the current running status of the campaign. Returns a paged list of text broadcasts
     * @param {Object} opts Optional parameters
     * @param {String} [name] A name of text broadcast
     * @param {String} [label] A label of a text broadcast
     * @param {Boolean} [running] Returns broadcasts only in running state.
     * @param {Boolean} [scheduled] Specify whether the campaigns should be scheduled or not
     * @param {Number} [intervalBegin] Start of the find time interval, formatted in unix time milliseconds. Example: 1473781817000 for Sat, 05 Jan 1985 14:03:37 GMT
     * @param {Number} [intervalEnd] End of the find time interval, formatted in unix time milliseconds. Example: 1473781817000 for Sat, 05 Jan 1985 14:03:37 GMT
     * @param {Number} [limit = 10)] To set the maximum number of records to return in a paged list response. The default is 100
     * @param {Number} [offset = 0)] Offset to the start of a given page. The default is 0. Check [pagination](https://developers.callfire.com/docs.html#pagination) page for more information about pagination in CallFire API.
     * @param {String} [fields] Limit fields received in response. E.g. fields: id, name or fields items (id, name), see more at [partial response](https://developers.callfire.com/docs.html#partial-response) page.
     * @param {module:api/TextsApi~findTextBroadcastsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/TextBroadcastPage}
     */
    findTextBroadcasts(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'name': opts['name'],
        'label': opts['label'],
        'running': opts['running'],
        'scheduled': opts['scheduled'],
        'intervalBegin': opts['intervalBegin'],
        'intervalEnd': opts['intervalEnd'],
        'limit': opts['limit'],
        'offset': opts['offset'],
        'fields': opts['fields']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = TextBroadcastPage;
      return this.apiClient.callApi(
        '/texts/broadcasts', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the findTexts operation.
     * @callback module:api/TextsApi~findTextsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/TextPage} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Find texts
     * Searches for texts sent or received by user. Use \"campaignId=0\" parameter to query for all texts sent through the POST /texts API. See [call states and results](https://developers.callfire.com/results-responses-errors.html)
     * @param {Object} opts Optional parameters
     * @param {Array.<Number>} [id] List of Text ids to search for, if ids specified other query params ignored
     * @param {Number} [campaignId] An id of a campaign, queries for texts inside a particular campaign. Specify null to list texts of all campaigns or 0 for a default campaign
     * @param {Number} [batchId] An Id of a contact batch, queries for texts which are used in the particular contact batch
     * @param {String} [fromNumber] A phone number in E.164 format (11-digit). Example: 12132000384, 67076
     * @param {String} [toNumber] A phone number in E.164 format (11-digit). Example: 12132000384, 67076
     * @param {String} [label] A label of a text message
     * @param {String} [states] Expected text statuses in comma separated string, available values: READY, SELECTED, CALLBACK, FINISHED, DISABLED, DNC, DUP, INVALID, TIMEOUT, PERIOD_LIMIT. See [call states and results](https://developers.callfire.com/results-responses-errors.html)
     * @param {String} [results] Expected text results in comma separated string, available values: SENT, RECEIVED, DNT, TOO_BIG, INTERNAL_ERROR, CARRIER_ERROR, CARRIER_TEMP_ERROR, UNDIALED. See [call states and results](https://developers.callfire.com/results-responses-errors.html)
     * @param {Boolean} [inbound] Specify true for inbound or false for outbounds. Do not specify this parameter if you need to get both inbound and outbound texts listed in response
     * @param {Number} [intervalBegin] Start of the find time interval, formatted in unix time milliseconds. Example: 1473781817000
     * @param {Number} [intervalEnd] End of the find time interval, formatted in unix time milliseconds. Example: 1473781817000
     * @param {Number} [limit = 10)] To set the maximum number of records to return in a paged list response. The default is 100
     * @param {Number} [offset = 0)] Offset to the start of a given page. The default is 0. Check [pagination](https://developers.callfire.com/docs.html#pagination) page for more information about pagination in CallFire API.
     * @param {String} [fields] Limit fields received in response. E.g. fields: id, name or fields items (id, name), see more at [partial response](https://developers.callfire.com/docs.html#partial-response) page.
     * @param {module:api/TextsApi~findTextsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/TextPage}
     */
    findTexts(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'id': this.apiClient.buildCollectionParam(opts['id'], 'multi'),
        'campaignId': opts['campaignId'],
        'batchId': opts['batchId'],
        'fromNumber': opts['fromNumber'],
        'toNumber': opts['toNumber'],
        'label': opts['label'],
        'states': opts['states'],
        'results': opts['results'],
        'inbound': opts['inbound'],
        'intervalBegin': opts['intervalBegin'],
        'intervalEnd': opts['intervalEnd'],
        'limit': opts['limit'],
        'offset': opts['offset'],
        'fields': opts['fields']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = TextPage;
      return this.apiClient.callApi(
        '/texts', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getText operation.
     * @callback module:api/TextsApi~getTextCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Text} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Find a specific text
     * Returns a single Text instance for a given text id
     * @param {Number} id An id of a text
     * @param {Object} opts Optional parameters
     * @param {String} [fields] Limit fields received in response. E.g. fields: id, name or fields items (id, name), see more at [partial response](https://developers.callfire.com/docs.html#partial-response) page.
     * @param {module:api/TextsApi~getTextCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Text}
     */
    getText(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getText");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'fields': opts['fields']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Text;
      return this.apiClient.callApi(
        '/texts/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getTextAutoReply operation.
     * @callback module:api/TextsApi~getTextAutoReplyCallback
     * @param {String} error Error message, if any.
     * @param {module:model/TextAutoReply} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Find a specific auto reply
     * Returns a single TextAutoReply instance for a given text auto reply id
     * @param {Number} id An id of a text auto reply
     * @param {Object} opts Optional parameters
     * @param {String} [fields] Limit fields received in response. E.g. fields: id, name or fields items (id, name), see more at [partial response](https://developers.callfire.com/docs.html#partial-response) page.
     * @param {module:api/TextsApi~getTextAutoReplyCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/TextAutoReply}
     */
    getTextAutoReply(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getTextAutoReply");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'fields': opts['fields']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = TextAutoReply;
      return this.apiClient.callApi(
        '/texts/auto-replys/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getTextBroadcast operation.
     * @callback module:api/TextsApi~getTextBroadcastCallback
     * @param {String} error Error message, if any.
     * @param {module:model/TextBroadcast} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Find a specific text broadcast
     * Returns a single TextBroadcast instance for a given text broadcast id
     * @param {Number} id An id of a text broadcast
     * @param {Object} opts Optional parameters
     * @param {String} [fields] Limit fields received in response. E.g. fields: id, name or fields items (id, name), see more at [partial response](https://developers.callfire.com/docs.html#partial-response) page.
     * @param {module:api/TextsApi~getTextBroadcastCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/TextBroadcast}
     */
    getTextBroadcast(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getTextBroadcast");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'fields': opts['fields']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = TextBroadcast;
      return this.apiClient.callApi(
        '/texts/broadcasts/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getTextBroadcastBatches operation.
     * @callback module:api/TextsApi~getTextBroadcastBatchesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/BatchPage} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Find batches in a text broadcast
     * This endpoint will enable the user to page through all of the batches for a particular text broadcast campaign
     * @param {Number} id An id of a text broadcast
     * @param {Object} opts Optional parameters
     * @param {String} [fields] Limit fields received in response. E.g. fields: id, name or fields items (id, name), see more at [partial response](https://developers.callfire.com/docs.html#partial-response) page.
     * @param {Number} [limit = 100)] To set the maximum number of records to return in a paged list response. The default is 100
     * @param {Number} [offset = 0)] Offset to the start of a given page. The default is 0. Check [pagination](https://developers.callfire.com/docs.html#pagination) page for more information about pagination in CallFire API.
     * @param {module:api/TextsApi~getTextBroadcastBatchesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/BatchPage}
     */
    getTextBroadcastBatches(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getTextBroadcastBatches");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'fields': opts['fields'],
        'limit': opts['limit'],
        'offset': opts['offset']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = BatchPage;
      return this.apiClient.callApi(
        '/texts/broadcasts/{id}/batches', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getTextBroadcastStats operation.
     * @callback module:api/TextsApi~getTextBroadcastStatsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/TextBroadcastStatsDto} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get statistics on text broadcast
     * Returns the broadcast statistics. Example: total number of the sent/received actions, total cost, number of remaining outbound actions, error count, etc
     * @param {Number} id An id of a text broadcast
     * @param {Object} opts Optional parameters
     * @param {String} [fields] Limit fields received in response. E.g. fields: id, name or fields items (id, name), see more at [partial response](https://developers.callfire.com/docs.html#partial-response) page.
     * @param {Number} [begin] Start of a search find time interval, formatted in unix time milliseconds. Example: 1473781817000 for Sat, 05 Jan 1985 14:03:37 GMT
     * @param {Number} [end] End of a search time interval, formatted in unix time milliseconds. Example: 1473781817000 for Sat, 05 Jan 1985 14:03:37 GMT
     * @param {module:api/TextsApi~getTextBroadcastStatsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/TextBroadcastStatsDto}
     */
    getTextBroadcastStats(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getTextBroadcastStats");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'fields': opts['fields'],
        'begin': opts['begin'],
        'end': opts['end']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = TextBroadcastStatsDto;
      return this.apiClient.callApi(
        '/texts/broadcasts/{id}/stats', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getTextBroadcastTexts operation.
     * @callback module:api/TextsApi~getTextBroadcastTextsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/TextPage} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Find texts in a text broadcast
     * This endpoint will enable the user to page through all of the texts for a particular text broadcast campaign
     * @param {Number} id An id of a text broadcast
     * @param {Object} opts Optional parameters
     * @param {Number} [batchId] ~
     * @param {String} [fields] Limit fields received in response. E.g. fields: id, name or fields items (id, name), see more at [partial response](https://developers.callfire.com/docs.html#partial-response) page.
     * @param {Number} [limit = 100)] To set the maximum number of records to return in a paged list response. The default is 100
     * @param {Number} [offset = 0)] Offset to the start of a given page. The default is 0. Check [pagination](https://developers.callfire.com/docs.html#pagination) page for more information about pagination in CallFire API.
     * @param {module:api/TextsApi~getTextBroadcastTextsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/TextPage}
     */
    getTextBroadcastTexts(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getTextBroadcastTexts");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'batchId': opts['batchId'],
        'fields': opts['fields'],
        'limit': opts['limit'],
        'offset': opts['offset']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = TextPage;
      return this.apiClient.callApi(
        '/texts/broadcasts/{id}/texts', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the sendTexts operation.
     * @callback module:api/TextsApi~sendTextsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/TextList} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Send texts
     * Use the /texts API to send individual texts quickly. By default all texts are going out from CallFire's dedicated short code. Example: 67076, 818818 etc
     * @param {Object} opts Optional parameters
     * @param {String} [fields] Limit fields received in response. E.g. fields: id, name or fields items (id, name), see more at [partial response](https://developers.callfire.com/docs.html#partial-response) page.
     * @param {Number} [campaignId] Specifies a campaignId to send texts through a previously created campaign
     * @param {String} [defaultMessage] Text message can be overridden by TextRecipient.message field. If multiple recipients have the same text message to a different recipients it is better to specify a single default message and do not duplicate it in each recipient.
     * @param {Boolean} [strictValidation] Turns on strict validation for recipients
     * @param {Array.<module:model/TextRecipient>} [textRecipient] List of TextRecipient objects. By recipient we mean either phone number or contact with user-defined attributes added to action. Text messaging supports media files, provide a list of ids of media files for recipient to attach media to the message.
     * @param {module:api/TextsApi~sendTextsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/TextList}
     */
    sendTexts(opts, callback) {
      opts = opts || {};
      let postBody = opts['textRecipient'];

      let pathParams = {
      };
      let queryParams = {
        'fields': opts['fields'],
        'campaignId': opts['campaignId'],
        'defaultMessage': opts['defaultMessage'],
        'strictValidation': opts['strictValidation']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = TextList;
      return this.apiClient.callApi(
        '/texts', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the startTextBroadcast operation.
     * @callback module:api/TextsApi~startTextBroadcastCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Start text broadcast
     * Starts a text broadcast
     * @param {Number} id An id of a text broadcast to start
     * @param {module:api/TextsApi~startTextBroadcastCallback} callback The callback function, accepting three arguments: error, data, response
     */
    startTextBroadcast(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling startTextBroadcast");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/texts/broadcasts/{id}/start', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the stopTextBroadcast operation.
     * @callback module:api/TextsApi~stopTextBroadcastCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Stop text broadcast
     * Stops a text broadcast
     * @param {Number} id An Id of a text broadcast. To stop the broadcast
     * @param {module:api/TextsApi~stopTextBroadcastCallback} callback The callback function, accepting three arguments: error, data, response
     */
    stopTextBroadcast(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling stopTextBroadcast");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/texts/broadcasts/{id}/stop', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the toggleTextBroadcastRecipientsStatus operation.
     * @callback module:api/TextsApi~toggleTextBroadcastRecipientsStatusCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Disable/enable undialed recipients in broadcast
     * This operation lets the user to disable/enable undialed contacts in created broadcast
     * @param {Number} id An id of a text broadcast
     * @param {Object} opts Optional parameters
     * @param {Boolean} [enable = false)] Flag which indicate what to do with texts (true will enable texts in DISABLED status and vice versa)
     * @param {Array.<module:model/Recipient>} [recipient] List of Recipient objects. By recipient we mean either phone number or contact id.
     * @param {module:api/TextsApi~toggleTextBroadcastRecipientsStatusCallback} callback The callback function, accepting three arguments: error, data, response
     */
    toggleTextBroadcastRecipientsStatus(id, opts, callback) {
      opts = opts || {};
      let postBody = opts['recipient'];
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling toggleTextBroadcastRecipientsStatus");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'enable': opts['enable']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/texts/broadcasts/{id}/toggleRecipientsStatus', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateTextBroadcast operation.
     * @callback module:api/TextsApi~updateTextBroadcastCallback
     * @param {String} error Error message, if any.
     * @param {module:model/TextBroadcastCreateResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update a text broadcast
     * Allows modifying the configuration of existing text broadcast campaign. See TextBroadcast for more information on what can/can't be updated on this API
     * @param {Number} id An id of a text broadcast
     * @param {Object} opts Optional parameters
     * @param {Boolean} [strictValidation] Turns on strict validation for recipients. System will reply with BAD_REQUEST(400) if strictValidation = true and one of numbers didn't pass validation
     * @param {module:model/TextBroadcast} [textBroadcast] A TextBroadcast object
     * @param {module:api/TextsApi~updateTextBroadcastCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/TextBroadcastCreateResponse}
     */
    updateTextBroadcast(id, opts, callback) {
      opts = opts || {};
      let postBody = opts['textBroadcast'];
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling updateTextBroadcast");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'strictValidation': opts['strictValidation']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = TextBroadcastCreateResponse;
      return this.apiClient.callApi(
        '/texts/broadcasts/{id}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
