/**
 * CallFire API Documentation
 * CallFire
 *
 * The version of the OpenAPI document: V2
 * Contact: support@callfire.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import BatchPage from '../model/BatchPage';
import BatchRequest from '../model/BatchRequest';
import Call from '../model/Call';
import CallBroadcast from '../model/CallBroadcast';
import CallBroadcastPage from '../model/CallBroadcastPage';
import CallBroadcastStats from '../model/CallBroadcastStats';
import CallList from '../model/CallList';
import CallPage from '../model/CallPage';
import CallRecipient from '../model/CallRecipient';
import CallRecording from '../model/CallRecording';
import CallRecordingList from '../model/CallRecordingList';
import ErrorResponse from '../model/ErrorResponse';
import Recipient from '../model/Recipient';
import ResourceId from '../model/ResourceId';

/**
* Calls service.
* @module api/CallsApi
* @version V2
*/
export default class CallsApi {

    /**
    * Constructs a new CallsApi. 
    * @alias module:api/CallsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the addCallBroadcastBatch operation.
     * @callback module:api/CallsApi~addCallBroadcastBatchCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ResourceId} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Add batches to a call broadcast
     * The 'add batch' API allows user to add additional batches to an already created voice broadcast campaign. The added batch will go through the CallFire validation process, unlike in the recipients version of this API. That is why you can use the scrubDuplicates flag to remove duplicates from your batch. Batches may be added as a contact list id, a list of contact ids, or a list of numbers
     * @param {Number} id An id of a call broadcast
     * @param {Object} opts Optional parameters
     * @param {Boolean} [strictValidation] Turns on strict validation for recipients. System will reply with BAD_REQUEST(400) if strictValidation = true and one of numbers didn't pass validation
     * @param {module:model/BatchRequest} [batchRequest] A request object
     * @param {module:api/CallsApi~addCallBroadcastBatchCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ResourceId}
     */
    addCallBroadcastBatch(id, opts, callback) {
      opts = opts || {};
      let postBody = opts['batchRequest'];
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling addCallBroadcastBatch");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'strictValidation': opts['strictValidation']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ResourceId;
      return this.apiClient.callApi(
        '/calls/broadcasts/{id}/batches', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the addCallBroadcastRecipients operation.
     * @callback module:api/CallsApi~addCallBroadcastRecipientsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CallList} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Add recipients to a call broadcast
     * Use this API to add the recipients to an existing voice broadcast. Post a list of Recipient objects to be added to the voice broadcast campaign. These contacts will not go through validation process, and will be acted upon as they are added. Recipients may be added as a list of contact ids, or list of numbers
     * @param {Number} id An id of a call broadcast
     * @param {Object} opts Optional parameters
     * @param {String} [fields] Limit fields received in response. E.g. fields: id, name or fields items (id, name), see more at [partial response](https://developers.callfire.com/docs.html#partial-response) page.
     * @param {Boolean} [strictValidation] Turns on strict validation for recipients. System will reply with BAD_REQUEST(400) if strictValidation = true and one of numbers didn't pass validation
     * @param {Array.<module:model/Recipient>} [recipient] A list of CallRecipient objects
     * @param {module:api/CallsApi~addCallBroadcastRecipientsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CallList}
     */
    addCallBroadcastRecipients(id, opts, callback) {
      opts = opts || {};
      let postBody = opts['recipient'];
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling addCallBroadcastRecipients");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'fields': opts['fields'],
        'strictValidation': opts['strictValidation']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CallList;
      return this.apiClient.callApi(
        '/calls/broadcasts/{id}/recipients', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the archiveVoiceBroadcast operation.
     * @callback module:api/CallsApi~archiveVoiceBroadcastCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Archive voice broadcast
     * Archives a voice broadcast (voice broadcast will be hidden in search results)
     * @param {Number} id An id of a voice broadcast to archive
     * @param {module:api/CallsApi~archiveVoiceBroadcastCallback} callback The callback function, accepting three arguments: error, data, response
     */
    archiveVoiceBroadcast(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling archiveVoiceBroadcast");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/calls/broadcasts/{id}/archive', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createCallBroadcast operation.
     * @callback module:api/CallsApi~createCallBroadcastCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ResourceId} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a call broadcast
     * Creates a call broadcast campaign using the Call Broadcast API. Send a CallBroadcast in the message body to add details in a voice broadcast campaign. The campaign can be created without contacts and bare minimum configuration, but contacts will have to be added further on to use the campaign
     * @param {Object} opts Optional parameters
     * @param {Boolean} [start] Specify whether to immediately start this campaign (not required)
     * @param {Boolean} [strictValidation] Turns on strict validation for recipients. System will reply with BAD_REQUEST(400) if strictValidation = true and one of numbers didn't pass validation
     * @param {module:model/CallBroadcast} [callBroadcast] A CallBroadcast object
     * @param {module:api/CallsApi~createCallBroadcastCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ResourceId}
     */
    createCallBroadcast(opts, callback) {
      opts = opts || {};
      let postBody = opts['callBroadcast'];

      let pathParams = {
      };
      let queryParams = {
        'start': opts['start'],
        'strictValidation': opts['strictValidation']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ResourceId;
      return this.apiClient.callApi(
        '/calls/broadcasts', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the findCallBroadcasts operation.
     * @callback module:api/CallsApi~findCallBroadcastsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CallBroadcastPage} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Find call broadcasts
     * Searches for all voice broadcasts created by user. Can query on label, name, and the current running status of the campaign. Returns a paged list of voice broadcasts
     * @param {Object} opts Optional parameters
     * @param {String} [fields] Limit fields received in response. E.g. fields: id, name or fields items (id, name), see more at [partial response](https://developers.callfire.com/docs.html#partial-response) page.
     * @param {Number} [limit = 10)] To set the maximum number of records to return in a paged list response. The default is 100
     * @param {Number} [offset = 0)] Offset to the start of a given page. The default is 0. Check [pagination](https://developers.callfire.com/docs.html#pagination) page for more information about pagination in CallFire API.
     * @param {String} [label] A label of a voice broadcast
     * @param {String} [name] A name of voice broadcast
     * @param {Boolean} [running] Specify whether the campaigns should be running or not
     * @param {Boolean} [scheduled] Specify whether the campaigns should be scheduled or not
     * @param {Number} [intervalBegin] Start of the find time interval, formatted in unix time milliseconds. Example: 1473781817000 for Sat, 05 Jan 1985 14:03:37 GMT
     * @param {Number} [intervalEnd] End of the find time interval, formatted in unix time milliseconds. Example: 1473781817000 for Sat, 05 Jan 1985 14:03:37 GMT
     * @param {module:api/CallsApi~findCallBroadcastsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CallBroadcastPage}
     */
    findCallBroadcasts(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'fields': opts['fields'],
        'limit': opts['limit'],
        'offset': opts['offset'],
        'label': opts['label'],
        'name': opts['name'],
        'running': opts['running'],
        'scheduled': opts['scheduled'],
        'intervalBegin': opts['intervalBegin'],
        'intervalEnd': opts['intervalEnd']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = CallBroadcastPage;
      return this.apiClient.callApi(
        '/calls/broadcasts', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the findCalls operation.
     * @callback module:api/CallsApi~findCallsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CallPage} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Find calls
     * To search for all calls sent or received by the user. Use \"id=0\" for the campaignId parameter to query for all calls sent through the POST /calls API. See [call states and results](https://developers.callfire.com/results-responses-errors.html)
     * @param {Object} opts Optional parameters
     * @param {String} [fields] Limit fields received in response. E.g. fields: id, name or fields items (id, name), see more at [partial response](https://developers.callfire.com/docs.html#partial-response) page.
     * @param {Number} [limit = 100)] To set the maximum number of records to return in a paged list response. The default is 100
     * @param {Number} [offset = 0)] Offset to the start of a given page. The default is 0. Check [pagination](https://developers.callfire.com/docs.html#pagination) page for more information about pagination in CallFire API.
     * @param {Array.<Number>} [id] Lists the Call ids to search for. If calls ids are specified then other query parameters can be ignored
     * @param {Number} [campaignId] An id of a campaign, queries for calls included to a particular campaign. Specify null for all campaigns and 0 for default campaign
     * @param {Number} [batchId] An id of a contact batch, queries for calls of a particular contact batch
     * @param {String} [fromNumber] Phone number in E.164 format (11-digit) that call was from. Example: 12132000384
     * @param {String} [toNumber] Phone number in E.164 format (11-digit) that call was sent to. Example: 12132000384
     * @param {String} [label] A label for a specific call
     * @param {String} [states] Searches for all calls which correspond to statuses listed in a comma separated string. Available values: READY, SELECTED, CALLBACK, FINISHED, DISABLED, DNC, DUP, INVALID, TIMEOUT, PERIOD_LIMIT. See [call states and results](https://developers.callfire.com/results-responses-errors.html)
     * @param {String} [results] Searches for all calls with statuses listed in a comma separated string. Available values: SENT, RECEIVED, DNT, TOO_BIG, INTERNAL_ERROR, CARRIER_ERROR, CARRIER_TEMP_ERROR, UNDIALED. See [call states and results](https://developers.callfire.com/results-responses-errors.html)
     * @param {Boolean} [inbound] Filters inbound calls for \"true\" value and outbound calls for \"false\" value
     * @param {Number} [intervalBegin] Start of the find time interval, formatted in unix time milliseconds. Example: 1473781817000 for Sat, 05 Jan 1985 14:03:37 GMT
     * @param {Number} [intervalEnd] End of the find time interval, formatted in unix time milliseconds. Example: 1473781817000 for Sat, 05 Jan 1985 14:03:37 GMT
     * @param {module:api/CallsApi~findCallsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CallPage}
     */
    findCalls(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'fields': opts['fields'],
        'limit': opts['limit'],
        'offset': opts['offset'],
        'id': this.apiClient.buildCollectionParam(opts['id'], 'multi'),
        'campaignId': opts['campaignId'],
        'batchId': opts['batchId'],
        'fromNumber': opts['fromNumber'],
        'toNumber': opts['toNumber'],
        'label': opts['label'],
        'states': opts['states'],
        'results': opts['results'],
        'inbound': opts['inbound'],
        'intervalBegin': opts['intervalBegin'],
        'intervalEnd': opts['intervalEnd']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = CallPage;
      return this.apiClient.callApi(
        '/calls', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getCall operation.
     * @callback module:api/CallsApi~getCallCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Call} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Find a specific call
     * Returns a single Call instance for a given call id.
     * @param {Number} id An id of a call
     * @param {Object} opts Optional parameters
     * @param {String} [fields] Limit fields received in response. E.g. fields: id, name or fields items (id, name), see more at [partial response](https://developers.callfire.com/docs.html#partial-response) page.
     * @param {module:api/CallsApi~getCallCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Call}
     */
    getCall(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getCall");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'fields': opts['fields']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Call;
      return this.apiClient.callApi(
        '/calls/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getCallBroadcast operation.
     * @callback module:api/CallsApi~getCallBroadcastCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CallBroadcast} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Find a specific call broadcast
     * Returns a single CallBroadcast instance for a given call broadcast campaign id
     * @param {Number} id An id of a CallBroadcast
     * @param {Object} opts Optional parameters
     * @param {String} [fields] Limit fields received in response. E.g. fields: id, name or fields items (id, name), see more at [partial response](https://developers.callfire.com/docs.html#partial-response) page.
     * @param {module:api/CallsApi~getCallBroadcastCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CallBroadcast}
     */
    getCallBroadcast(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getCallBroadcast");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'fields': opts['fields']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = CallBroadcast;
      return this.apiClient.callApi(
        '/calls/broadcasts/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getCallBroadcastBatches operation.
     * @callback module:api/CallsApi~getCallBroadcastBatchesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/BatchPage} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Find batches in a call broadcast
     * This endpoint will enable the user to page through all of the batches for a particular voice broadcast campaign
     * @param {Number} id An id of a call broadcast
     * @param {Object} opts Optional parameters
     * @param {String} [fields] Limit fields received in response. E.g. fields: id, name or fields items (id, name), see more at [partial response](https://developers.callfire.com/docs.html#partial-response) page.
     * @param {Number} [limit = 100)] To set the maximum number of records to return in a paged list response. The default is 100
     * @param {Number} [offset = 0)] Offset to the start of a given page. The default is 0. Check [pagination](https://developers.callfire.com/docs.html#pagination) page for more information about pagination in CallFire API.
     * @param {module:api/CallsApi~getCallBroadcastBatchesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/BatchPage}
     */
    getCallBroadcastBatches(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getCallBroadcastBatches");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'fields': opts['fields'],
        'limit': opts['limit'],
        'offset': opts['offset']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = BatchPage;
      return this.apiClient.callApi(
        '/calls/broadcasts/{id}/batches', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getCallBroadcastCalls operation.
     * @callback module:api/CallsApi~getCallBroadcastCallsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CallPage} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Find calls in a call broadcast
     * This endpoint will enable the user to page through all calls for a particular call broadcast campaign
     * @param {Number} id An Id of a call broadcast
     * @param {Object} opts Optional parameters
     * @param {Number} [batchId] An id of a particular batch associated with broadcast
     * @param {String} [fields] Limit fields received in response. E.g. fields: id, name or fields items (id, name), see more at [partial response](https://developers.callfire.com/docs.html#partial-response) page.
     * @param {Number} [limit = 100)] To set the maximum number of records to return in a paged list response. The default is 100
     * @param {Number} [offset = 0)] Offset to the start of a given page. The default is 0. Check [pagination](https://developers.callfire.com/docs.html#pagination) page for more information about pagination in CallFire API.
     * @param {module:api/CallsApi~getCallBroadcastCallsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CallPage}
     */
    getCallBroadcastCalls(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getCallBroadcastCalls");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'batchId': opts['batchId'],
        'fields': opts['fields'],
        'limit': opts['limit'],
        'offset': opts['offset']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = CallPage;
      return this.apiClient.callApi(
        '/calls/broadcasts/{id}/calls', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getCallBroadcastStats operation.
     * @callback module:api/CallsApi~getCallBroadcastStatsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CallBroadcastStats} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get statistics on call broadcast
     * Returns broadcast statistics like total number of sent/received actions, total cost, number of remaining outbound actions, error count, etc
     * @param {Number} id An id of a call broadcast
     * @param {Object} opts Optional parameters
     * @param {String} [fields] Limit fields received in response. E.g. fields: id, name or fields items (id, name), see more at [partial response](https://developers.callfire.com/docs.html#partial-response) page.
     * @param {Number} [begin] Start of the search time interval, formatted in unix time milliseconds. Example: 1473781817000 for Sat, 05 Jan 1985 14:03:37 GMT
     * @param {Number} [end] End of the search time interval, formatted in unix time milliseconds. Example: 1473781817000 for Sat, 05 Jan 1985 14:03:37 GMT
     * @param {module:api/CallsApi~getCallBroadcastStatsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CallBroadcastStats}
     */
    getCallBroadcastStats(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getCallBroadcastStats");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'fields': opts['fields'],
        'begin': opts['begin'],
        'end': opts['end']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = CallBroadcastStats;
      return this.apiClient.callApi(
        '/calls/broadcasts/{id}/stats', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getCallRecording operation.
     * @callback module:api/CallsApi~getCallRecordingCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CallRecording} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get call recording by id
     * Returns metadata of recording of a particular call. Metadata contains a link to a MP3 recording
     * @param {Number} id ~
     * @param {Object} opts Optional parameters
     * @param {String} [fields] Limit fields received in response. E.g. fields: id, name or fields items (id, name), see more at [partial response](https://developers.callfire.com/docs.html#partial-response) page.
     * @param {module:api/CallsApi~getCallRecordingCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CallRecording}
     */
    getCallRecording(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getCallRecording");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'fields': opts['fields']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = CallRecording;
      return this.apiClient.callApi(
        '/calls/recordings/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getCallRecordingByName operation.
     * @callback module:api/CallsApi~getCallRecordingByNameCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CallRecording} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get call recording by name
     * Returns recording metadata of particular call. Metadata contains link to a MP3 recording
     * @param {Number} id An id of a call
     * @param {String} name A name of a recording
     * @param {Object} opts Optional parameters
     * @param {String} [fields] Limit fields received in response. E.g. fields: id, name or fields items (id, name), see more at [partial response](https://developers.callfire.com/docs.html#partial-response) page.
     * @param {module:api/CallsApi~getCallRecordingByNameCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CallRecording}
     */
    getCallRecordingByName(id, name, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getCallRecordingByName");
      }
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling getCallRecordingByName");
      }

      let pathParams = {
        'id': id,
        'name': name
      };
      let queryParams = {
        'fields': opts['fields']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = CallRecording;
      return this.apiClient.callApi(
        '/calls/{id}/recordings/{name}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getCallRecordingMp3 operation.
     * @callback module:api/CallsApi~getCallRecordingMp3Callback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get call recording in mp3 format
     * Returns an MP3 recording of particular call, response contains binary data, content type is 'audio/mpeg'
     * @param {Number} id An id of a call
     * @param {module:api/CallsApi~getCallRecordingMp3Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    getCallRecordingMp3(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getCallRecordingMp3");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/calls/recordings/{id}.mp3', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getCallRecordingMp3ByName operation.
     * @callback module:api/CallsApi~getCallRecordingMp3ByNameCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get call mp3 recording by name
     * Returns a MP3 recording of a particular call, response contains binary data, content type is 'audio/mpeg'
     * @param {Number} id An id of a call
     * @param {String} name A name of a recording
     * @param {module:api/CallsApi~getCallRecordingMp3ByNameCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    getCallRecordingMp3ByName(id, name, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getCallRecordingMp3ByName");
      }
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling getCallRecordingMp3ByName");
      }

      let pathParams = {
        'id': id,
        'name': name
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth'];
      let contentTypes = [];
      let accepts = ['audio/mpeg'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/calls/{id}/recordings/{name}.mp3', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getCallRecordings operation.
     * @callback module:api/CallsApi~getCallRecordingsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CallRecordingList} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get call recordings for a call
     * Returns a list of recordings metadata of particular call. Metadata contains link to a MP3 recording
     * @param {Number} id An id of a call
     * @param {Object} opts Optional parameters
     * @param {String} [fields] Limit fields received in response. E.g. fields: id, name or fields items (id, name), see more at [partial response](https://developers.callfire.com/docs.html#partial-response) page.
     * @param {module:api/CallsApi~getCallRecordingsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CallRecordingList}
     */
    getCallRecordings(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getCallRecordings");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'fields': opts['fields']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = CallRecordingList;
      return this.apiClient.callApi(
        '/calls/{id}/recordings', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the sendCalls operation.
     * @callback module:api/CallsApi~sendCallsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CallList} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Send calls
     * Use the /calls API to send individual calls quickly. A verified Caller ID and sufficient credits are required to make a call. CallRecipient represents a single recipient identified by phone number or contact id in CallFire system. You can attach user-defined attributes to a Call action via CallRecipient.attributes property, attributes are available in Call action response
     * @param {Object} opts Optional parameters
     * @param {String} [fields] Limit fields received in response. E.g. fields: id, name or fields items (id, name), see more at [partial response](https://developers.callfire.com/docs.html#partial-response) page.
     * @param {Number} [campaignId] Specifies a campaignId to send calls quickly on a previously created campaign
     * @param {String} [defaultLiveMessage] Text to be turned into a sound, this text will be played when the phone is answered. Parameter can be overridden for any particular CallRecipient
     * @param {String} [defaultMachineMessage] Text to be turned into a sound, this text will be played when answering machine is detected. Parameter can be overridden for any particular CallRecipient
     * @param {Number} [defaultLiveMessageSoundId] Id of sound file to play if phone is answered. Parameter can be overridden for any particular CallRecipient
     * @param {Number} [defaultMachineMessageSoundId] An id of a sound file to play if answering machine is detected. Parameter can be overridden for any particular CallRecipient
     * @param {module:model/String} [defaultVoice] The voice set by default for all text-to-speech messages defined in CallRecipient objects or as default *Message properties
     * @param {Boolean} [strictValidation] Turns on strict validation for recipients. System will reply with BAD_REQUEST(400) if strictValidation = true and one of numbers didn't pass validation
     * @param {Array.<module:model/CallRecipient>} [callRecipient] An array of CallRecipient objects.  Limitations: 1. Max number of CallRecipient objects is 10 
     * @param {module:api/CallsApi~sendCallsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CallList}
     */
    sendCalls(opts, callback) {
      opts = opts || {};
      let postBody = opts['callRecipient'];

      let pathParams = {
      };
      let queryParams = {
        'fields': opts['fields'],
        'campaignId': opts['campaignId'],
        'defaultLiveMessage': opts['defaultLiveMessage'],
        'defaultMachineMessage': opts['defaultMachineMessage'],
        'defaultLiveMessageSoundId': opts['defaultLiveMessageSoundId'],
        'defaultMachineMessageSoundId': opts['defaultMachineMessageSoundId'],
        'defaultVoice': opts['defaultVoice'],
        'strictValidation': opts['strictValidation']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CallList;
      return this.apiClient.callApi(
        '/calls', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the startVoiceBroadcast operation.
     * @callback module:api/CallsApi~startVoiceBroadcastCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Start voice broadcast
     * Start a voice broadcast
     * @param {Number} id An id of voice broadcast to start
     * @param {module:api/CallsApi~startVoiceBroadcastCallback} callback The callback function, accepting three arguments: error, data, response
     */
    startVoiceBroadcast(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling startVoiceBroadcast");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/calls/broadcasts/{id}/start', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the stopVoiceBroadcast operation.
     * @callback module:api/CallsApi~stopVoiceBroadcastCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Stop voice broadcast
     * Stop a voice broadcast
     * @param {Number} id An id of voice broadcast to stop
     * @param {module:api/CallsApi~stopVoiceBroadcastCallback} callback The callback function, accepting three arguments: error, data, response
     */
    stopVoiceBroadcast(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling stopVoiceBroadcast");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/calls/broadcasts/{id}/stop', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the toggleCallBroadcastRecipientsStatus operation.
     * @callback module:api/CallsApi~toggleCallBroadcastRecipientsStatusCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Disable/enable undialed recipients in broadcast
     * This operation lets the user to disable/enable undialed recipients in created broadcast
     * @param {Number} id An id of a voice broadcast
     * @param {Object} opts Optional parameters
     * @param {Boolean} [enable = false)] Flag which indicate what to do with calls (true will enable call in DISABLED status and vice versa)
     * @param {Array.<module:model/Recipient>} [recipient] List of Recipient objects. By recipient we mean either phone number or contact id.
     * @param {module:api/CallsApi~toggleCallBroadcastRecipientsStatusCallback} callback The callback function, accepting three arguments: error, data, response
     */
    toggleCallBroadcastRecipientsStatus(id, opts, callback) {
      opts = opts || {};
      let postBody = opts['recipient'];
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling toggleCallBroadcastRecipientsStatus");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'enable': opts['enable']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/calls/broadcasts/{id}/toggleRecipientsStatus', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateCallBroadcast operation.
     * @callback module:api/CallsApi~updateCallBroadcastCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update a call broadcast
     * This operation lets the user modify the configuration of a voice broadcast campaign after call broadcast campaign is created. See CallBroadcast for more information on what can/can't be updated on this API
     * @param {Number} id An id of a voice broadcast
     * @param {Object} opts Optional parameters
     * @param {Boolean} [strictValidation] Turns on strict validation for recipients. System will reply with BAD_REQUEST(400) if strictValidation = true and one of numbers didn't pass validation
     * @param {module:model/CallBroadcast} [callBroadcast] A CallBroadcast object
     * @param {module:api/CallsApi~updateCallBroadcastCallback} callback The callback function, accepting three arguments: error, data, response
     */
    updateCallBroadcast(id, opts, callback) {
      opts = opts || {};
      let postBody = opts['callBroadcast'];
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling updateCallBroadcast");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'strictValidation': opts['strictValidation']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/calls/broadcasts/{id}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
