/**
 * CallFire API Documentation
 * CallFire
 *
 * The version of the OpenAPI document: V2
 * Contact: support@callfire.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import ErrorResponse from '../model/ErrorResponse';
import ItemListWebhookResource from '../model/ItemListWebhookResource';
import ResourceId from '../model/ResourceId';
import Webhook from '../model/Webhook';
import WebhookPage from '../model/WebhookPage';
import WebhookResource from '../model/WebhookResource';

/**
* Webhooks service.
* @module api/WebhooksApi
* @version V2
*/
export default class WebhooksApi {

    /**
    * Constructs a new WebhooksApi. 
    * @alias module:api/WebhooksApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the createWebhook operation.
     * @callback module:api/WebhooksApi~createWebhookCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ResourceId} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a webhook
     * Create a Webhook for notification in the CallFire system. Use the webhooks API to receive notifications of important CallFire events. Select the resource to listen to, and then choose the resource events to receive notifications on. When an event triggers, a POST will be made to the callback URL with a payload of notification information. Available resources and their events include 'CccCampaign': ['started', 'stopped', 'finished'], 'CallBroadcast': ['started', 'stopped', 'finished'], 'TextBroadcast': ['started', 'stopped', 'finished'], 'OutboundCall': ['finished'], 'InboundCall': ['finished'], 'OutboundText': ['finished'], 'InboundText': ['finished'], 'ContactList': ['validationFinished', 'validationFailed'], 'MonthlyRenewal': ['failed', 'finished'], 'LowBalance': ['failed', 'finished']. Webhooks support secret token which is used as signing key to HmacSHA1 hash of json payload which is returned in 'X-CallFire-Signature' header. This header can be used to verify callback POST is coming from CallFire. See [security guide](https://developers.callfire.com/security-guide.html)
     * @param {Object} opts Optional parameters
     * @param {module:model/Webhook} [webhook] A webhook object
     * @param {module:api/WebhooksApi~createWebhookCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ResourceId}
     */
    createWebhook(opts, callback) {
      opts = opts || {};
      let postBody = opts['webhook'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ResourceId;
      return this.apiClient.callApi(
        '/webhooks', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteWebhook operation.
     * @callback module:api/WebhooksApi~deleteWebhookCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a webhook
     * Deletes a webhook instance. Will be removed permanently
     * @param {Number} id An Id of a webhook
     * @param {module:api/WebhooksApi~deleteWebhookCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteWebhook(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling deleteWebhook");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/webhooks/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the findWebhookResources operation.
     * @callback module:api/WebhooksApi~findWebhookResourcesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ItemListWebhookResource} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Find webhook resources
     * Searches for webhook resources. Available resources include 'CccCampaign': ['started', 'stopped', 'finished'], 'CallBroadcast': ['started', 'stopped', 'finished'], 'TextBroadcast': ['started', 'stopped', 'finished'], 'OutboundCall': ['finished'], 'InboundCall': ['finished'], 'OutboundText': ['finished'], 'InboundText': ['finished'], 'ContactList': ['validationFinished', 'validationFailed'], 'MonthlyRenewal': ['failed', 'finished'], 'LowBalance': ['failed', 'finished']
     * @param {Object} opts Optional parameters
     * @param {String} [fields] Limit fields received in response. E.g. fields: id, name or fields items (id, name), see more at [partial response](https://developers.callfire.com/docs.html#partial-response) page.
     * @param {module:api/WebhooksApi~findWebhookResourcesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ItemListWebhookResource}
     */
    findWebhookResources(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'fields': opts['fields']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ItemListWebhookResource;
      return this.apiClient.callApi(
        '/webhooks/resources', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the findWebhooks operation.
     * @callback module:api/WebhooksApi~findWebhooksCallback
     * @param {String} error Error message, if any.
     * @param {module:model/WebhookPage} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Find webhooks
     * Searches all webhooks available for a current user. Searches by name, resource, event, callback URL, or whether they are enabled. Returns a paged list of Webhooks
     * @param {Object} opts Optional parameters
     * @param {String} [fields] Limit fields received in response. E.g. fields: id, name or fields items (id, name), see more at [partial response](https://developers.callfire.com/docs.html#partial-response) page.
     * @param {Number} [limit = 100)] To set the maximum number of records to return in a paged list response. The default is 100
     * @param {Number} [offset = 0)] Offset to the start of a given page. The default is 0. Check [pagination](https://developers.callfire.com/docs.html#pagination) page for more information about pagination in CallFire API.
     * @param {String} [name] A name of a webhook
     * @param {String} [resource] A name of a resource, available values: 'CccCampaign', 'CallBroadcast', 'TextBroadcast',  'OutboundCall', 'OutboundText', 'InboundCall', 'InboundText', 'ContactList'
     * @param {String} [event] A name of event, available values: 'started', 'stopped', 'finished'
     * @param {String} [callback] A callback URL
     * @param {Boolean} [enabled] Specifies whether webhook is enabled
     * @param {module:api/WebhooksApi~findWebhooksCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/WebhookPage}
     */
    findWebhooks(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'fields': opts['fields'],
        'limit': opts['limit'],
        'offset': opts['offset'],
        'name': opts['name'],
        'resource': opts['resource'],
        'event': opts['event'],
        'callback': opts['callback'],
        'enabled': opts['enabled']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = WebhookPage;
      return this.apiClient.callApi(
        '/webhooks', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getWebhook operation.
     * @callback module:api/WebhooksApi~getWebhookCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Webhook} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Find a specific webhook
     * Returns a single Webhook instance for a given webhook id
     * @param {Number} id An id of a webhook
     * @param {Object} opts Optional parameters
     * @param {String} [fields] Limit fields received in response. E.g. fields: id, name or fields items (id, name), see more at [partial response](https://developers.callfire.com/docs.html#partial-response) page.
     * @param {module:api/WebhooksApi~getWebhookCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Webhook}
     */
    getWebhook(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getWebhook");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'fields': opts['fields']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Webhook;
      return this.apiClient.callApi(
        '/webhooks/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getWebhookResource operation.
     * @callback module:api/WebhooksApi~getWebhookResourceCallback
     * @param {String} error Error message, if any.
     * @param {module:model/WebhookResource} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Find specific webhook resource
     * Returns information about supported events for a given webhook resource
     * @param {String} resource A name of a webhook resource. Available resources include 'CccCampaign': ['started', 'stopped', 'finished'], 'CallBroadcast': ['started', 'stopped', 'finished'], 'TextBroadcast': ['started', 'stopped', 'finished'], 'OutboundCall': ['finished'], 'InboundCall': ['finished'], 'OutboundText': ['finished'], 'InboundText': ['finished'], 'ContactList': ['validationFinished', 'validationFailed'], 'MonthlyRenewal': ['failed', 'finished'], 'LowBalance': ['failed', 'finished']
     * @param {Object} opts Optional parameters
     * @param {String} [fields] Limit fields received in response. E.g. fields: id, name or fields items (id, name), see more at [partial response](https://developers.callfire.com/docs.html#partial-response) page.
     * @param {module:api/WebhooksApi~getWebhookResourceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/WebhookResource}
     */
    getWebhookResource(resource, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'resource' is set
      if (resource === undefined || resource === null) {
        throw new Error("Missing the required parameter 'resource' when calling getWebhookResource");
      }

      let pathParams = {
        'resource': resource
      };
      let queryParams = {
        'fields': opts['fields']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = WebhookResource;
      return this.apiClient.callApi(
        '/webhooks/resources/{resource}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateWebhook operation.
     * @callback module:api/WebhooksApi~updateWebhookCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update a webhook
     * Updates the information in existing webhook
     * @param {Number} id An id of a webhook
     * @param {Object} opts Optional parameters
     * @param {module:model/Webhook} [webhook] A webhook object
     * @param {module:api/WebhooksApi~updateWebhookCallback} callback The callback function, accepting three arguments: error, data, response
     */
    updateWebhook(id, opts, callback) {
      opts = opts || {};
      let postBody = opts['webhook'];
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling updateWebhook");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/webhooks/{id}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
