/**
 * CallFire API Documentation
 * CallFire
 *
 * The version of the OpenAPI document: V2
 * Contact: support@callfire.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import ErrorResponse from '../model/ErrorResponse';
import Media from '../model/Media';
import MediaPage from '../model/MediaPage';
import ResourceId from '../model/ResourceId';

/**
* Media service.
* @module api/MediaApi
* @version V2
*/
export default class MediaApi {

    /**
    * Constructs a new MediaApi. 
    * @alias module:api/MediaApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the createMedia operation.
     * @callback module:api/MediaApi~createMediaCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ResourceId} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create media
     * Uploads media file to account, acceptable media formats: bmp, gif, jpg, m4a, mp3, mp4, png, wav
     * @param {File} file Binary media file
     * @param {Object} opts Optional parameters
     * @param {String} [name] A name of a media file
     * @param {module:api/MediaApi~createMediaCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ResourceId}
     */
    createMedia(file, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'file' is set
      if (file === undefined || file === null) {
        throw new Error("Missing the required parameter 'file' when calling createMedia");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
        'file': file,
        'name': opts['name']
      };

      let authNames = ['basicAuth'];
      let contentTypes = ['multipart/form-data'];
      let accepts = ['application/json'];
      let returnType = ResourceId;
      return this.apiClient.callApi(
        '/media', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the findMedia operation.
     * @callback module:api/MediaApi~findMediaCallback
     * @param {String} error Error message, if any.
     * @param {module:model/MediaPage} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Find media
     * Find media files created by user
     * @param {Object} opts Optional parameters
     * @param {Number} [limit = 100)] To set the maximum number of records to return in a paged list response. The default is 100
     * @param {Number} [offset = 0)] Offset to the start of a given page. The default is 0. Check [pagination](https://developers.callfire.com/docs.html#pagination) page for more information about pagination in CallFire API.
     * @param {String} [filter] value to filter file names again; this value is used to check if the filename contains the filter value.
     * @param {String} [fields] Limit fields received in response. E.g. fields: id, name or fields items (id, name), see more at [partial response](https://developers.callfire.com/docs.html#partial-response) page.
     * @param {module:api/MediaApi~findMediaCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/MediaPage}
     */
    findMedia(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'limit': opts['limit'],
        'offset': opts['offset'],
        'filter': opts['filter'],
        'fields': opts['fields']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = MediaPage;
      return this.apiClient.callApi(
        '/media', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getMedia operation.
     * @callback module:api/MediaApi~getMediaCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Media} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a specific media
     * Get media resource by id
     * @param {Number} id An id of a media resource
     * @param {Object} opts Optional parameters
     * @param {String} [fields] Limit fields received in response. E.g. fields: id, name or fields items (id, name), see more at [partial response](https://developers.callfire.com/docs.html#partial-response) page.
     * @param {module:api/MediaApi~getMediaCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Media}
     */
    getMedia(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getMedia");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'fields': opts['fields']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Media;
      return this.apiClient.callApi(
        '/media/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getMediaData operation.
     * @callback module:api/MediaApi~getMediaDataCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Download media by extension
     * Download a media file. Available types of files: bmp, gif, jpg, m4a, mp3, mp4, png, wav. Content type in response depends on 'extension' parameter, e.g. image/jpeg, image/png, audio/mp3, etc
     * @param {Number} id An id of a media resource
     * @param {String} extension Media file type. Available types: bmp, gif, jpg, m4a, mp3, mp4, png, wav
     * @param {module:api/MediaApi~getMediaDataCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    getMediaData(id, extension, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getMediaData");
      }
      // verify the required parameter 'extension' is set
      if (extension === undefined || extension === null) {
        throw new Error("Missing the required parameter 'extension' when calling getMediaData");
      }

      let pathParams = {
        'id': id,
        'extension': extension
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth'];
      let contentTypes = [];
      let accepts = ['audio/m4a', 'audio/mp3', 'audio/wav', 'image/gif', 'image/jpeg', 'image/png', 'image/x-bmp', 'video/3gpp', 'video/mp4'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/media/{id}.{extension}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getMediaDataBinary operation.
     * @callback module:api/MediaApi~getMediaDataBinaryCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Download a MP3 media
     * Download a MP3 media, endpoint returns application/binary content-type
     * @param {Number} id An id of a media resource
     * @param {module:api/MediaApi~getMediaDataBinaryCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    getMediaDataBinary(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getMediaDataBinary");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth'];
      let contentTypes = [];
      let accepts = ['application/binary'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/media/{id}/file', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getMediaDataByKey operation.
     * @callback module:api/MediaApi~getMediaDataByKeyCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Download media by extension
     * Download a media file. Available types of files: bmp, gif, jpg, m4a, mp3, mp4, png, wav. Content type in response depends on 'extension' parameter, e.g. image/jpeg, image/png, audio/mp3, etc
     * @param {String} key A hash-key of a media resource
     * @param {String} extension Media file type, available types: bmp, gif, jpg, m4a, mp3, mp4, png, wav
     * @param {module:api/MediaApi~getMediaDataByKeyCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    getMediaDataByKey(key, extension, callback) {
      let postBody = null;
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling getMediaDataByKey");
      }
      // verify the required parameter 'extension' is set
      if (extension === undefined || extension === null) {
        throw new Error("Missing the required parameter 'extension' when calling getMediaDataByKey");
      }

      let pathParams = {
        'key': key,
        'extension': extension
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth'];
      let contentTypes = [];
      let accepts = ['audio/m4a', 'audio/mp3', 'audio/wav', 'image/gif', 'image/jpeg', 'image/png', 'image/x-bmp', 'video/3gpp', 'video/mp4'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/media/public/{key}.{extension}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
