/**
 * CallFire API Documentation
 * CallFire
 *
 * The version of the OpenAPI document: V2
 * Contact: support@callfire.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import Batch from '../model/Batch';
import CallCreateSound from '../model/CallCreateSound';
import CampaignSound from '../model/CampaignSound';
import CampaignSoundPage from '../model/CampaignSoundPage';
import ErrorResponse from '../model/ErrorResponse';
import TextToSpeech from '../model/TextToSpeech';

/**
* Campaigns service.
* @module api/CampaignsApi
* @version V2
*/
export default class CampaignsApi {

    /**
    * Constructs a new CampaignsApi. 
    * @alias module:api/CampaignsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the deleteCampaignSound operation.
     * @callback module:api/CampaignsApi~deleteCampaignSoundCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a specific sound
     * Deletes a single campaign sound instance for a specific campaign sound id, this operation does not delete sound completely, it sets sound status to ARCHIVED which means that sound will no longer appear in 'find' operation results, but still accessible via 'get' operation
     * @param {Number} id An id of a campaign sound
     * @param {module:api/CampaignsApi~deleteCampaignSoundCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteCampaignSound(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling deleteCampaignSound");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/campaigns/sounds/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the findCampaignSounds operation.
     * @callback module:api/CampaignsApi~findCampaignSoundsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CampaignSoundPage} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Find sounds
     * To find all campaign sounds which were created by user. Returns all sounds available to be used in campaigns
     * @param {Object} opts Optional parameters
     * @param {Number} [limit = 100)] To set the maximum number of records to return in a paged list response. The default is 100
     * @param {Number} [offset = 0)] Offset to the start of a given page. The default is 0. Check [pagination](https://developers.callfire.com/docs.html#pagination) page for more information about pagination in CallFire API.
     * @param {String} [filter] value to filter file names again; this value is used to check if the filename contains the filter value.
     * @param {Boolean} [includeArchived] Includes ARCHIVED sounds for \"true\" value
     * @param {Boolean} [includePending] Includes UPLOAD/RECORDING sounds for \"true\" value
     * @param {Boolean} [includeScrubbed] Includes SCRUBBED sounds for \"true\" value
     * @param {String} [fields] Limit fields received in response. E.g. fields: id, name or fields items (id, name), see more at [partial response](https://developers.callfire.com/docs.html#partial-response) page.
     * @param {module:api/CampaignsApi~findCampaignSoundsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CampaignSoundPage}
     */
    findCampaignSounds(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'limit': opts['limit'],
        'offset': opts['offset'],
        'filter': opts['filter'],
        'includeArchived': opts['includeArchived'],
        'includePending': opts['includePending'],
        'includeScrubbed': opts['includeScrubbed'],
        'fields': opts['fields']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = CampaignSoundPage;
      return this.apiClient.callApi(
        '/campaigns/sounds', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getCampaignBatch operation.
     * @callback module:api/CampaignsApi~getCampaignBatchCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Batch} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Find a specific batch
     * Returns a single Batch instance for a given batch id. This API is useful for determining the state of a validating batch
     * @param {Number} id An id of a batch
     * @param {Object} opts Optional parameters
     * @param {String} [fields] Limit fields received in response. E.g. fields: id, name or fields items (id, name), see more at [partial response](https://developers.callfire.com/docs.html#partial-response) page.
     * @param {module:api/CampaignsApi~getCampaignBatchCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Batch}
     */
    getCampaignBatch(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getCampaignBatch");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'fields': opts['fields']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Batch;
      return this.apiClient.callApi(
        '/campaigns/batches/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getCampaignSound operation.
     * @callback module:api/CampaignsApi~getCampaignSoundCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CampaignSound} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Find a specific sound
     * Returns a single CampaignSound instance for a given sound id in campaign. This is a meta data to the sounds. No audio data is returned from this API
     * @param {Number} id An id of a sound campaign
     * @param {Object} opts Optional parameters
     * @param {String} [fields] Limit fields received in response. E.g. fields: id, name or fields items (id, name), see more at [partial response](https://developers.callfire.com/docs.html#partial-response) page.
     * @param {module:api/CampaignsApi~getCampaignSoundCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CampaignSound}
     */
    getCampaignSound(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getCampaignSound");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'fields': opts['fields']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = CampaignSound;
      return this.apiClient.callApi(
        '/campaigns/sounds/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getCampaignSoundDataMp3 operation.
     * @callback module:api/CampaignsApi~getCampaignSoundDataMp3Callback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Download a MP3 sound
     * Download the MP3 version of a hosted file. This is an audio data endpoint. Returns binary response of the 'audio/mpeg' content type
     * @param {Number} id An id of a campaign sound
     * @param {module:api/CampaignsApi~getCampaignSoundDataMp3Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    getCampaignSoundDataMp3(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getCampaignSoundDataMp3");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth'];
      let contentTypes = [];
      let accepts = ['audio/mpeg'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/campaigns/sounds/{id}.mp3', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getCampaignSoundDataWav operation.
     * @callback module:api/CampaignsApi~getCampaignSoundDataWavCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Download a WAV sound
     * Download the WAV version of the hosted file. This is an audio data endpoint. Returns binary response of the 'audio/mpeg' content type
     * @param {Number} id An id of a campaign sound
     * @param {module:api/CampaignsApi~getCampaignSoundDataWavCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    getCampaignSoundDataWav(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getCampaignSoundDataWav");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth'];
      let contentTypes = [];
      let accepts = ['audio/wav'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/campaigns/sounds/{id}.wav', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the postCallCampaignSound operation.
     * @callback module:api/CampaignsApi~postCallCampaignSoundCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CampaignSound} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Add sound via call
     * Use this API to create a sound via a phone call. Provide the required phone number in the CallCreateSound object inside the request, and user will receive a call shortly after with instructions on how to record a sound over the phone.
     * @param {Object} opts Optional parameters
     * @param {String} [fields] Limit fields received in response. E.g. fields: id, name or fields items (id, name), see more at [partial response](https://developers.callfire.com/docs.html#partial-response) page.
     * @param {module:model/CallCreateSound} [callCreateSound] Request object containing the name of a new campaign sound and phone number to call up
     * @param {module:api/CampaignsApi~postCallCampaignSoundCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CampaignSound}
     */
    postCallCampaignSound(opts, callback) {
      opts = opts || {};
      let postBody = opts['callCreateSound'];

      let pathParams = {
      };
      let queryParams = {
        'fields': opts['fields']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CampaignSound;
      return this.apiClient.callApi(
        '/campaigns/sounds/calls', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the postFileCampaignSound operation.
     * @callback module:api/CampaignsApi~postFileCampaignSoundCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CampaignSound} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Add sound via file
     * Create a campaign sound file via a supplied .mp3 or .wav file
     * @param {File} file A sound file encoded in binary form
     * @param {Object} opts Optional parameters
     * @param {String} [fields] Limit fields received in response. E.g. fields: id, name or fields items (id, name), see more at [partial response](https://developers.callfire.com/docs.html#partial-response) page.
     * @param {String} [name] Optional name of a sound file, if the name is empty than it will be taken from a file
     * @param {module:api/CampaignsApi~postFileCampaignSoundCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CampaignSound}
     */
    postFileCampaignSound(file, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'file' is set
      if (file === undefined || file === null) {
        throw new Error("Missing the required parameter 'file' when calling postFileCampaignSound");
      }

      let pathParams = {
      };
      let queryParams = {
        'fields': opts['fields']
      };
      let headerParams = {
      };
      let formParams = {
        'file': file,
        'name': opts['name']
      };

      let authNames = ['basicAuth'];
      let contentTypes = ['multipart/form-data'];
      let accepts = ['application/json'];
      let returnType = CampaignSound;
      return this.apiClient.callApi(
        '/campaigns/sounds/files', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the postTTSCampaignSound operation.
     * @callback module:api/CampaignsApi~postTTSCampaignSoundCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CampaignSound} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Add sound via text-to-speech
     * Use this API to create a sound file via a supplied string of text. Add a text in the TextToSpeech.message field, and pick a voice in the TextToSpeech.voice field. Available voices are: MALE1, FEMALE1, FEMALE2, SPANISH1, FRENCHCANADIAN1
     * @param {Object} opts Optional parameters
     * @param {String} [fields] Limit fields received in response. E.g. fields: id, name or fields items (id, name), see more at [partial response](https://developers.callfire.com/docs.html#partial-response) page.
     * @param {module:model/TextToSpeech} [textToSpeech] textToSpeech
     * @param {module:api/CampaignsApi~postTTSCampaignSoundCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CampaignSound}
     */
    postTTSCampaignSound(opts, callback) {
      opts = opts || {};
      let postBody = opts['textToSpeech'];

      let pathParams = {
      };
      let queryParams = {
        'fields': opts['fields']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CampaignSound;
      return this.apiClient.callApi(
        '/campaigns/sounds/tts', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateCampaignBatch operation.
     * @callback module:api/CampaignsApi~updateCampaignBatchCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update a batch
     * Updates a single Batch instance, currently batch can only be turned \"on/off\"
     * @param {Number} id An id of a batch to update
     * @param {Object} opts Optional parameters
     * @param {module:model/Batch} [batch] A batch instance
     * @param {module:api/CampaignsApi~updateCampaignBatchCallback} callback The callback function, accepting three arguments: error, data, response
     */
    updateCampaignBatch(id, opts, callback) {
      opts = opts || {};
      let postBody = opts['batch'];
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling updateCampaignBatch");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/campaigns/batches/{id}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
