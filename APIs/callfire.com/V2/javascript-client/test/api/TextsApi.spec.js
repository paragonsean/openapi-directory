/**
 * CallFire API Documentation
 * CallFire
 *
 * The version of the OpenAPI document: V2
 * Contact: support@callfire.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.CallFireApiDocumentation);
  }
}(this, function(expect, CallFireApiDocumentation) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new CallFireApiDocumentation.TextsApi();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('TextsApi', function() {
    describe('addTextBroadcastBatch', function() {
      it('should call addTextBroadcastBatch successfully', function(done) {
        //uncomment below and update the code to test addTextBroadcastBatch
        //instance.addTextBroadcastBatch(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('addTextBroadcastRecipients', function() {
      it('should call addTextBroadcastRecipients successfully', function(done) {
        //uncomment below and update the code to test addTextBroadcastRecipients
        //instance.addTextBroadcastRecipients(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('archiveTextBroadcast', function() {
      it('should call archiveTextBroadcast successfully', function(done) {
        //uncomment below and update the code to test archiveTextBroadcast
        //instance.archiveTextBroadcast(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('createTextAutoReply', function() {
      it('should call createTextAutoReply successfully', function(done) {
        //uncomment below and update the code to test createTextAutoReply
        //instance.createTextAutoReply(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('createTextBroadcast', function() {
      it('should call createTextBroadcast successfully', function(done) {
        //uncomment below and update the code to test createTextBroadcast
        //instance.createTextBroadcast(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteTextAutoReply', function() {
      it('should call deleteTextAutoReply successfully', function(done) {
        //uncomment below and update the code to test deleteTextAutoReply
        //instance.deleteTextAutoReply(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('findTextAutoReplys', function() {
      it('should call findTextAutoReplys successfully', function(done) {
        //uncomment below and update the code to test findTextAutoReplys
        //instance.findTextAutoReplys(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('findTextBroadcasts', function() {
      it('should call findTextBroadcasts successfully', function(done) {
        //uncomment below and update the code to test findTextBroadcasts
        //instance.findTextBroadcasts(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('findTexts', function() {
      it('should call findTexts successfully', function(done) {
        //uncomment below and update the code to test findTexts
        //instance.findTexts(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getText', function() {
      it('should call getText successfully', function(done) {
        //uncomment below and update the code to test getText
        //instance.getText(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getTextAutoReply', function() {
      it('should call getTextAutoReply successfully', function(done) {
        //uncomment below and update the code to test getTextAutoReply
        //instance.getTextAutoReply(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getTextBroadcast', function() {
      it('should call getTextBroadcast successfully', function(done) {
        //uncomment below and update the code to test getTextBroadcast
        //instance.getTextBroadcast(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getTextBroadcastBatches', function() {
      it('should call getTextBroadcastBatches successfully', function(done) {
        //uncomment below and update the code to test getTextBroadcastBatches
        //instance.getTextBroadcastBatches(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getTextBroadcastStats', function() {
      it('should call getTextBroadcastStats successfully', function(done) {
        //uncomment below and update the code to test getTextBroadcastStats
        //instance.getTextBroadcastStats(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getTextBroadcastTexts', function() {
      it('should call getTextBroadcastTexts successfully', function(done) {
        //uncomment below and update the code to test getTextBroadcastTexts
        //instance.getTextBroadcastTexts(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('sendTexts', function() {
      it('should call sendTexts successfully', function(done) {
        //uncomment below and update the code to test sendTexts
        //instance.sendTexts(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('startTextBroadcast', function() {
      it('should call startTextBroadcast successfully', function(done) {
        //uncomment below and update the code to test startTextBroadcast
        //instance.startTextBroadcast(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('stopTextBroadcast', function() {
      it('should call stopTextBroadcast successfully', function(done) {
        //uncomment below and update the code to test stopTextBroadcast
        //instance.stopTextBroadcast(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('toggleTextBroadcastRecipientsStatus', function() {
      it('should call toggleTextBroadcastRecipientsStatus successfully', function(done) {
        //uncomment below and update the code to test toggleTextBroadcastRecipientsStatus
        //instance.toggleTextBroadcastRecipientsStatus(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('updateTextBroadcast', function() {
      it('should call updateTextBroadcast successfully', function(done) {
        //uncomment below and update the code to test updateTextBroadcast
        //instance.updateTextBroadcast(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
  });

}));
