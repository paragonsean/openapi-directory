/*
 * CallFire API Documentation
 * CallFire
 *
 * The version of the OpenAPI document: V2
 * Contact: support@callfire.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.ErrorResponse;
import org.openapitools.client.model.ItemListWebhookResource;
import org.openapitools.client.model.ResourceId;
import org.openapitools.client.model.Webhook;
import org.openapitools.client.model.WebhookPage;
import org.openapitools.client.model.WebhookResource;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for WebhooksApi
 */
@Disabled
public class WebhooksApiTest {

    private final WebhooksApi api = new WebhooksApi();

    /**
     * Create a webhook
     *
     * Create a Webhook for notification in the CallFire system. Use the webhooks API to receive notifications of important CallFire events. Select the resource to listen to, and then choose the resource events to receive notifications on. When an event triggers, a POST will be made to the callback URL with a payload of notification information. Available resources and their events include &#39;CccCampaign&#39;: [&#39;started&#39;, &#39;stopped&#39;, &#39;finished&#39;], &#39;CallBroadcast&#39;: [&#39;started&#39;, &#39;stopped&#39;, &#39;finished&#39;], &#39;TextBroadcast&#39;: [&#39;started&#39;, &#39;stopped&#39;, &#39;finished&#39;], &#39;OutboundCall&#39;: [&#39;finished&#39;], &#39;InboundCall&#39;: [&#39;finished&#39;], &#39;OutboundText&#39;: [&#39;finished&#39;], &#39;InboundText&#39;: [&#39;finished&#39;], &#39;ContactList&#39;: [&#39;validationFinished&#39;, &#39;validationFailed&#39;], &#39;MonthlyRenewal&#39;: [&#39;failed&#39;, &#39;finished&#39;], &#39;LowBalance&#39;: [&#39;failed&#39;, &#39;finished&#39;]. Webhooks support secret token which is used as signing key to HmacSHA1 hash of json payload which is returned in &#39;X-CallFire-Signature&#39; header. This header can be used to verify callback POST is coming from CallFire. See [security guide](https://developers.callfire.com/security-guide.html)
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createWebhookTest() throws ApiException {
        Webhook webhook = null;
        ResourceId response = api.createWebhook(webhook);
        // TODO: test validations
    }

    /**
     * Delete a webhook
     *
     * Deletes a webhook instance. Will be removed permanently
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteWebhookTest() throws ApiException {
        Long id = null;
        api.deleteWebhook(id);
        // TODO: test validations
    }

    /**
     * Find webhook resources
     *
     * Searches for webhook resources. Available resources include &#39;CccCampaign&#39;: [&#39;started&#39;, &#39;stopped&#39;, &#39;finished&#39;], &#39;CallBroadcast&#39;: [&#39;started&#39;, &#39;stopped&#39;, &#39;finished&#39;], &#39;TextBroadcast&#39;: [&#39;started&#39;, &#39;stopped&#39;, &#39;finished&#39;], &#39;OutboundCall&#39;: [&#39;finished&#39;], &#39;InboundCall&#39;: [&#39;finished&#39;], &#39;OutboundText&#39;: [&#39;finished&#39;], &#39;InboundText&#39;: [&#39;finished&#39;], &#39;ContactList&#39;: [&#39;validationFinished&#39;, &#39;validationFailed&#39;], &#39;MonthlyRenewal&#39;: [&#39;failed&#39;, &#39;finished&#39;], &#39;LowBalance&#39;: [&#39;failed&#39;, &#39;finished&#39;]
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void findWebhookResourcesTest() throws ApiException {
        String fields = null;
        ItemListWebhookResource response = api.findWebhookResources(fields);
        // TODO: test validations
    }

    /**
     * Find webhooks
     *
     * Searches all webhooks available for a current user. Searches by name, resource, event, callback URL, or whether they are enabled. Returns a paged list of Webhooks
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void findWebhooksTest() throws ApiException {
        String fields = null;
        Integer limit = null;
        Integer offset = null;
        String name = null;
        String resource = null;
        String event = null;
        String paramCallback = null;
        Boolean enabled = null;
        WebhookPage response = api.findWebhooks(fields, limit, offset, name, resource, event, paramCallback, enabled);
        // TODO: test validations
    }

    /**
     * Find a specific webhook
     *
     * Returns a single Webhook instance for a given webhook id
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getWebhookTest() throws ApiException {
        Long id = null;
        String fields = null;
        Webhook response = api.getWebhook(id, fields);
        // TODO: test validations
    }

    /**
     * Find specific webhook resource
     *
     * Returns information about supported events for a given webhook resource
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getWebhookResourceTest() throws ApiException {
        String resource = null;
        String fields = null;
        WebhookResource response = api.getWebhookResource(resource, fields);
        // TODO: test validations
    }

    /**
     * Update a webhook
     *
     * Updates the information in existing webhook
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateWebhookTest() throws ApiException {
        Long id = null;
        Webhook webhook = null;
        api.updateWebhook(id, webhook);
        // TODO: test validations
    }

}
