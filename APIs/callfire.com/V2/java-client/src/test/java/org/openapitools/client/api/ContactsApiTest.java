/*
 * CallFire API Documentation
 * CallFire
 *
 * The version of the OpenAPI document: V2
 * Contact: support@callfire.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.AddContactListContactsRequest;
import org.openapitools.client.model.AddDoNotContactRequest;
import org.openapitools.client.model.Contact;
import org.openapitools.client.model.ContactHistory;
import org.openapitools.client.model.ContactList;
import org.openapitools.client.model.ContactListPage;
import org.openapitools.client.model.ContactPage;
import org.openapitools.client.model.CreateContactListRequest;
import org.openapitools.client.model.DoNotContact;
import org.openapitools.client.model.DoNotContactPage;
import org.openapitools.client.model.ErrorResponse;
import java.io.File;
import org.openapitools.client.model.ItemListUniversalDoNotContact;
import org.openapitools.client.model.ResourceId;
import org.openapitools.client.model.ResourceIdList;
import org.openapitools.client.model.UpdateContactListRequest;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for ContactsApi
 */
@Disabled
public class ContactsApiTest {

    private final ContactsApi api = new ContactsApi();

    /**
     * Add contacts to a contact list
     *
     * Adds contacts to a contact list. Available contact sources are: list of the contact entities, list of ids of existing contacts in user&#39;s account, list of phone numbers in E.164 format (11-digits)
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void addContactListItemsTest() throws ApiException {
        Long id = null;
        AddContactListContactsRequest addContactListContactsRequest = null;
        api.addContactListItems(id, addContactListContactsRequest);
        // TODO: test validations
    }

    /**
     * Add do not contact (dnc) numbers
     *
     * Add or update a list of Do Not Contact (DNC) contact entries. Can toggle whether the DNCs are enabled for calls/texts.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void addDoNotContactsTest() throws ApiException {
        AddDoNotContactRequest addDoNotContactRequest = null;
        api.addDoNotContacts(addDoNotContactRequest);
        // TODO: test validations
    }

    /**
     * Create contact lists
     *
     * Creates a contact list for use with campaigns using 1 of 3 inputs. A List of Contact objects, a list of String E.164 numbers, or a list of CallFire contactIds can be used as the data source for the created contact list. After contact list is added into the CallFire system, contact lists goes through seven system safeguards that check the accuracy and consistency of the data. For example, our system checks that contact number is formatted correctly, is valid, is not duplicated in another contact list, or is not added on a specific DNC list. You can configure to keep/merge or remove contacts which do not complies these rules. If contacts were not added to a contact list after the validation, this means the data needs to be properly formatted and corrected before calling this API
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createContactListTest() throws ApiException {
        String fields = null;
        CreateContactListRequest createContactListRequest = null;
        ContactList response = api.createContactList(fields, createContactListRequest);
        // TODO: test validations
    }

    /**
     * Create contact list from file
     *
     * Creates a contact list to be used with campaigns through uploading a .csv file. Returns the id of created list
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createContactListFromFileTest() throws ApiException {
        File _file = null;
        String name = null;
        Boolean useCustomFields = null;
        ResourceId response = api.createContactListFromFile(_file, name, useCustomFields);
        // TODO: test validations
    }

    /**
     * Create contacts
     *
     * Creates contacts in CallFire system. Only values from the next list can be used as external system parameter in contact creation: **NATION_BUILDER, SALES_FORCE_CONTACTS, SALES_FORCE_LEADS, SALES_FORCE_REPORTS, ZOHO, MAIL_CHIMP**. See [contacts validation rules](https://www.callfire.com/help/docs/getting-started/managing-contacts/validating-contacts#section1)
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createContactsTest() throws ApiException {
        List<Contact> contact = null;
        ResourceIdList response = api.createContacts(contact);
        // TODO: test validations
    }

    /**
     * Delete a contact
     *
     * Deletes a contact instance from account
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteContactTest() throws ApiException {
        Long id = null;
        api.deleteContact(id);
        // TODO: test validations
    }

    /**
     * Delete a contact list
     *
     * Deletes a contact list, included contacts will not be deleted.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteContactListTest() throws ApiException {
        Long id = null;
        api.deleteContactList(id);
        // TODO: test validations
    }

    /**
     * Delete do not contact (dnc) number. If number contains commas treat as list of numbers
     *
     * Delete a Do Not Contact (DNC) contact entry.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteDoNotContactTest() throws ApiException {
        String number = null;
        api.deleteDoNotContact(number);
        // TODO: test validations
    }

    /**
     * Delete do not contact (dnc) numbers contained in source.
     *
     * Delete Do Not Contact (DNC) contact entries contained in source.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteDoNotContactsBySourceTest() throws ApiException {
        String source = null;
        api.deleteDoNotContactsBySource(source);
        // TODO: test validations
    }

    /**
     * Find contact lists
     *
     * Searches for all contact lists which are available for the current user. Returns a paged list of contact lists
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void findContactListsTest() throws ApiException {
        String fields = null;
        Integer limit = null;
        Integer offset = null;
        String name = null;
        Boolean exactMatch = null;
        Integer contactCount = null;
        String orderBy = null;
        ContactListPage response = api.findContactLists(fields, limit, offset, name, exactMatch, contactCount, orderBy);
        // TODO: test validations
    }

    /**
     * Find contacts
     *
     * Find user&#39;s contacts by id, contact list, or on any property name. Returns a paged list of contacts
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void findContactsTest() throws ApiException {
        String fields = null;
        Integer limit = null;
        Integer offset = null;
        List<Long> id = null;
        List<String> number = null;
        Long contactListId = null;
        String propertyName = null;
        String propertyValue = null;
        ContactPage response = api.findContacts(fields, limit, offset, id, number, contactListId, propertyName, propertyValue);
        // TODO: test validations
    }

    /**
     * Find do not contact (dnc) items
     *
     * Searches for all Do Not Contact (DNC) objects created by user. These DoNotContact entries only affect calls/texts/campaigns on this account. Returns a paged list of DoNotContact objects
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void findDoNotContactsTest() throws ApiException {
        String fields = null;
        Integer limit = null;
        Integer offset = null;
        String prefix = null;
        Long campaignId = null;
        String source = null;
        Boolean call = null;
        Boolean text = null;
        Boolean inboundCall = null;
        Boolean inboundText = null;
        List<String> number = null;
        DoNotContactPage response = api.findDoNotContacts(fields, limit, offset, prefix, campaignId, source, call, text, inboundCall, inboundText, number);
        // TODO: test validations
    }

    /**
     * Find a specific contact
     *
     * Returns a Contact instance for a given contact id. Deleted contacts can be still retrieved but will be marked as deleted. Deleted contacts will not be shown in search request.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getContactTest() throws ApiException {
        Long id = null;
        String fields = null;
        Contact response = api.getContact(id, fields);
        // TODO: test validations
    }

    /**
     * Find a contact&#39;s history
     *
     * Searches for all texts and calls attributed to a contact. Returns a list of calls and texts a contact has been involved with
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getContactHistoryTest() throws ApiException {
        Long id = null;
        Integer limit = null;
        Integer offset = null;
        String fields = null;
        ContactHistory response = api.getContactHistory(id, limit, offset, fields);
        // TODO: test validations
    }

    /**
     * Find a specific contact list
     *
     * Returns a single ContactList instance for a given contact list id
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getContactListTest() throws ApiException {
        Long id = null;
        String fields = null;
        ContactList response = api.getContactList(id, fields);
        // TODO: test validations
    }

    /**
     * Find contacts in a contact list
     *
     * Searches for all entries in a contact list with specified id. Returns a paged list of contact entries
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getContactListItemsTest() throws ApiException {
        Long id = null;
        String fields = null;
        Integer limit = null;
        Integer offset = null;
        ContactPage response = api.getContactListItems(id, fields, limit, offset);
        // TODO: test validations
    }

    /**
     * Get do not contact (dnc)
     *
     * Get Do Not Contact (DNC) object create by user. This DoNotContact entry only affects calls/texts/campaigns on this account.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getDoNotContactTest() throws ApiException {
        String number = null;
        DoNotContact response = api.getDoNotContact(number);
        // TODO: test validations
    }

    /**
     * Find universal do not contacts (udnc) associated with toNumber
     *
     * Searches for a UniversalDoNotContact object for a given phone number. Shows whether inbound/outbound actions are allowed for a given number
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getUniversalDoNotContactsTest() throws ApiException {
        String toNumber = null;
        String fromNumber = null;
        String fields = null;
        ItemListUniversalDoNotContact response = api.getUniversalDoNotContacts(toNumber, fromNumber, fields);
        // TODO: test validations
    }

    /**
     * Delete a contact from a contact list
     *
     * Deletes a single contact from a contact list
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void removeContactListItemTest() throws ApiException {
        Long id = null;
        Long contactId = null;
        api.removeContactListItem(id, contactId);
        // TODO: test validations
    }

    /**
     * Delete contacts from a contact list
     *
     * Deletes contacts from a contact list. List the contact ids in request to delete multiple contacts with one request.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void removeContactListItemsTest() throws ApiException {
        Long id = null;
        List<Long> contactId = null;
        api.removeContactListItems(id, contactId);
        // TODO: test validations
    }

    /**
     * Update a contact
     *
     * Updates a single contact instance with id specified. See [contact validation rules](https://www.callfire.com/help/docs/getting-started/managing-contacts/validating-contacts#section1)
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateContactTest() throws ApiException {
        Long id = null;
        Contact contact = null;
        api.updateContact(id, contact);
        // TODO: test validations
    }

    /**
     * Update a contact list
     *
     * Updates contact list instance.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateContactListTest() throws ApiException {
        Long id = null;
        UpdateContactListRequest updateContactListRequest = null;
        api.updateContactList(id, updateContactListRequest);
        // TODO: test validations
    }

    /**
     * Update an individual do not contact (dnc) number
     *
     * Update a Do Not Contact (DNC) contact entry. Can toggle whether the DNC is enabled for calls/texts.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateDoNotContactTest() throws ApiException {
        String number = null;
        DoNotContact doNotContact = null;
        api.updateDoNotContact(number, doNotContact);
        // TODO: test validations
    }

}
