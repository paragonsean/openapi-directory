/*
 * CallFire API Documentation
 * CallFire
 *
 * The version of the OpenAPI document: V2
 * Contact: support@callfire.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.BatchPage;
import org.openapitools.client.model.BatchRequest;
import org.openapitools.client.model.Call;
import org.openapitools.client.model.CallBroadcast;
import org.openapitools.client.model.CallBroadcastPage;
import org.openapitools.client.model.CallBroadcastStats;
import org.openapitools.client.model.CallList;
import org.openapitools.client.model.CallPage;
import org.openapitools.client.model.CallRecipient;
import org.openapitools.client.model.CallRecording;
import org.openapitools.client.model.CallRecordingList;
import org.openapitools.client.model.ErrorResponse;
import org.openapitools.client.model.Recipient;
import org.openapitools.client.model.ResourceId;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for CallsApi
 */
@Disabled
public class CallsApiTest {

    private final CallsApi api = new CallsApi();

    /**
     * Add batches to a call broadcast
     *
     * The &#39;add batch&#39; API allows user to add additional batches to an already created voice broadcast campaign. The added batch will go through the CallFire validation process, unlike in the recipients version of this API. That is why you can use the scrubDuplicates flag to remove duplicates from your batch. Batches may be added as a contact list id, a list of contact ids, or a list of numbers
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void addCallBroadcastBatchTest() throws ApiException {
        Long id = null;
        Boolean strictValidation = null;
        BatchRequest batchRequest = null;
        ResourceId response = api.addCallBroadcastBatch(id, strictValidation, batchRequest);
        // TODO: test validations
    }

    /**
     * Add recipients to a call broadcast
     *
     * Use this API to add the recipients to an existing voice broadcast. Post a list of Recipient objects to be added to the voice broadcast campaign. These contacts will not go through validation process, and will be acted upon as they are added. Recipients may be added as a list of contact ids, or list of numbers
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void addCallBroadcastRecipientsTest() throws ApiException {
        Long id = null;
        String fields = null;
        Boolean strictValidation = null;
        List<Recipient> recipient = null;
        CallList response = api.addCallBroadcastRecipients(id, fields, strictValidation, recipient);
        // TODO: test validations
    }

    /**
     * Archive voice broadcast
     *
     * Archives a voice broadcast (voice broadcast will be hidden in search results)
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void archiveVoiceBroadcastTest() throws ApiException {
        Long id = null;
        api.archiveVoiceBroadcast(id);
        // TODO: test validations
    }

    /**
     * Create a call broadcast
     *
     * Creates a call broadcast campaign using the Call Broadcast API. Send a CallBroadcast in the message body to add details in a voice broadcast campaign. The campaign can be created without contacts and bare minimum configuration, but contacts will have to be added further on to use the campaign
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createCallBroadcastTest() throws ApiException {
        Boolean start = null;
        Boolean strictValidation = null;
        CallBroadcast callBroadcast = null;
        ResourceId response = api.createCallBroadcast(start, strictValidation, callBroadcast);
        // TODO: test validations
    }

    /**
     * Find call broadcasts
     *
     * Searches for all voice broadcasts created by user. Can query on label, name, and the current running status of the campaign. Returns a paged list of voice broadcasts
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void findCallBroadcastsTest() throws ApiException {
        String fields = null;
        Integer limit = null;
        Integer offset = null;
        String label = null;
        String name = null;
        Boolean running = null;
        Boolean scheduled = null;
        Long intervalBegin = null;
        Long intervalEnd = null;
        CallBroadcastPage response = api.findCallBroadcasts(fields, limit, offset, label, name, running, scheduled, intervalBegin, intervalEnd);
        // TODO: test validations
    }

    /**
     * Find calls
     *
     * To search for all calls sent or received by the user. Use \&quot;id&#x3D;0\&quot; for the campaignId parameter to query for all calls sent through the POST /calls API. See [call states and results](https://developers.callfire.com/results-responses-errors.html)
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void findCallsTest() throws ApiException {
        String fields = null;
        Integer limit = null;
        Integer offset = null;
        List<Long> id = null;
        Long campaignId = null;
        Long batchId = null;
        String fromNumber = null;
        String toNumber = null;
        String label = null;
        String states = null;
        String results = null;
        Boolean inbound = null;
        Long intervalBegin = null;
        Long intervalEnd = null;
        CallPage response = api.findCalls(fields, limit, offset, id, campaignId, batchId, fromNumber, toNumber, label, states, results, inbound, intervalBegin, intervalEnd);
        // TODO: test validations
    }

    /**
     * Find a specific call
     *
     * Returns a single Call instance for a given call id.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getCallTest() throws ApiException {
        Long id = null;
        String fields = null;
        Call response = api.getCall(id, fields);
        // TODO: test validations
    }

    /**
     * Find a specific call broadcast
     *
     * Returns a single CallBroadcast instance for a given call broadcast campaign id
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getCallBroadcastTest() throws ApiException {
        Long id = null;
        String fields = null;
        CallBroadcast response = api.getCallBroadcast(id, fields);
        // TODO: test validations
    }

    /**
     * Find batches in a call broadcast
     *
     * This endpoint will enable the user to page through all of the batches for a particular voice broadcast campaign
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getCallBroadcastBatchesTest() throws ApiException {
        Long id = null;
        String fields = null;
        Integer limit = null;
        Integer offset = null;
        BatchPage response = api.getCallBroadcastBatches(id, fields, limit, offset);
        // TODO: test validations
    }

    /**
     * Find calls in a call broadcast
     *
     * This endpoint will enable the user to page through all calls for a particular call broadcast campaign
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getCallBroadcastCallsTest() throws ApiException {
        Long id = null;
        Long batchId = null;
        String fields = null;
        Integer limit = null;
        Integer offset = null;
        CallPage response = api.getCallBroadcastCalls(id, batchId, fields, limit, offset);
        // TODO: test validations
    }

    /**
     * Get statistics on call broadcast
     *
     * Returns broadcast statistics like total number of sent/received actions, total cost, number of remaining outbound actions, error count, etc
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getCallBroadcastStatsTest() throws ApiException {
        Long id = null;
        String fields = null;
        Long begin = null;
        Long end = null;
        CallBroadcastStats response = api.getCallBroadcastStats(id, fields, begin, end);
        // TODO: test validations
    }

    /**
     * Get call recording by id
     *
     * Returns metadata of recording of a particular call. Metadata contains a link to a MP3 recording
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getCallRecordingTest() throws ApiException {
        Long id = null;
        String fields = null;
        CallRecording response = api.getCallRecording(id, fields);
        // TODO: test validations
    }

    /**
     * Get call recording by name
     *
     * Returns recording metadata of particular call. Metadata contains link to a MP3 recording
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getCallRecordingByNameTest() throws ApiException {
        Long id = null;
        String name = null;
        String fields = null;
        CallRecording response = api.getCallRecordingByName(id, name, fields);
        // TODO: test validations
    }

    /**
     * Get call recording in mp3 format
     *
     * Returns an MP3 recording of particular call, response contains binary data, content type is &#39;audio/mpeg&#39;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getCallRecordingMp3Test() throws ApiException {
        Long id = null;
        Object response = api.getCallRecordingMp3(id);
        // TODO: test validations
    }

    /**
     * Get call mp3 recording by name
     *
     * Returns a MP3 recording of a particular call, response contains binary data, content type is &#39;audio/mpeg&#39;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getCallRecordingMp3ByNameTest() throws ApiException {
        Long id = null;
        String name = null;
        Object response = api.getCallRecordingMp3ByName(id, name);
        // TODO: test validations
    }

    /**
     * Get call recordings for a call
     *
     * Returns a list of recordings metadata of particular call. Metadata contains link to a MP3 recording
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getCallRecordingsTest() throws ApiException {
        Long id = null;
        String fields = null;
        CallRecordingList response = api.getCallRecordings(id, fields);
        // TODO: test validations
    }

    /**
     * Send calls
     *
     * Use the /calls API to send individual calls quickly. A verified Caller ID and sufficient credits are required to make a call. CallRecipient represents a single recipient identified by phone number or contact id in CallFire system. You can attach user-defined attributes to a Call action via CallRecipient.attributes property, attributes are available in Call action response
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void sendCallsTest() throws ApiException {
        String fields = null;
        Long campaignId = null;
        String defaultLiveMessage = null;
        String defaultMachineMessage = null;
        Long defaultLiveMessageSoundId = null;
        Long defaultMachineMessageSoundId = null;
        String defaultVoice = null;
        Boolean strictValidation = null;
        List<CallRecipient> callRecipient = null;
        CallList response = api.sendCalls(fields, campaignId, defaultLiveMessage, defaultMachineMessage, defaultLiveMessageSoundId, defaultMachineMessageSoundId, defaultVoice, strictValidation, callRecipient);
        // TODO: test validations
    }

    /**
     * Start voice broadcast
     *
     * Start a voice broadcast
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void startVoiceBroadcastTest() throws ApiException {
        Long id = null;
        api.startVoiceBroadcast(id);
        // TODO: test validations
    }

    /**
     * Stop voice broadcast
     *
     * Stop a voice broadcast
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void stopVoiceBroadcastTest() throws ApiException {
        Long id = null;
        api.stopVoiceBroadcast(id);
        // TODO: test validations
    }

    /**
     * Disable/enable undialed recipients in broadcast
     *
     * This operation lets the user to disable/enable undialed recipients in created broadcast
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void toggleCallBroadcastRecipientsStatusTest() throws ApiException {
        Long id = null;
        Boolean enable = null;
        List<Recipient> recipient = null;
        api.toggleCallBroadcastRecipientsStatus(id, enable, recipient);
        // TODO: test validations
    }

    /**
     * Update a call broadcast
     *
     * This operation lets the user modify the configuration of a voice broadcast campaign after call broadcast campaign is created. See CallBroadcast for more information on what can/can&#39;t be updated on this API
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateCallBroadcastTest() throws ApiException {
        Long id = null;
        Boolean strictValidation = null;
        CallBroadcast callBroadcast = null;
        api.updateCallBroadcast(id, strictValidation, callBroadcast);
        // TODO: test validations
    }

}
