/*
 * CallFire API Documentation
 * CallFire
 *
 * The version of the OpenAPI document: V2
 * Contact: support@callfire.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.Account;
import org.openapitools.client.model.ApiCredential;
import org.openapitools.client.model.ApiCredentialPage;
import org.openapitools.client.model.BillingPlanUsage;
import org.openapitools.client.model.CallerIdList;
import org.openapitools.client.model.CallerIdVerificationRequest;
import org.openapitools.client.model.CreditUsage;
import org.openapitools.client.model.ErrorResponse;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for MeApi
 */
@Disabled
public class MeApiTest {

    private final MeApi api = new MeApi();

    /**
     * Create api credentials
     *
     * Creates an API credentials for the CallFire API. This endpoint requires full CallFire account credentials to be used, authenticated using Basic Authentication. At the moment user provides only the name for the credentials. The generated credentials can be used to access any CallFire APIs. For authentication use account credentials.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createApiCredentialTest() throws ApiException {
        ApiCredential apiCredential = null;
        ApiCredential response = api.createApiCredential(apiCredential);
        // TODO: test validations
    }

    /**
     * Delete api credentials
     *
     * Deletes a specified API credential. Currently, removes the ability to access the API. Only ACCOUNT_HOLDER can invoke this API. For authentication use account credentials.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteApiCredentialTest() throws ApiException {
        Long id = null;
        api.deleteApiCredential(id);
        // TODO: test validations
    }

    /**
     * Disable specified API credentials
     *
     * Disables a specified API credential. Currently, removes the ability to access the API. Only ACCOUNT_HOLDER can invoke this API. For authentication use account credentials.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void disableApiCredentialsTest() throws ApiException {
        Long id = null;
        api.disableApiCredentials(id);
        // TODO: test validations
    }

    /**
     * Enable specified API credentials
     *
     * Enables a specified API credential. Currently, adds the ability to access the API. Only ACCOUNT_HOLDER can invoke this API. For authentication use account credentials.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void enableApiCredentialsTest() throws ApiException {
        Long id = null;
        api.enableApiCredentials(id);
        // TODO: test validations
    }

    /**
     * Find api credentials
     *
     * Searches for all credentials generated by user. Returns a paged list of the API credentials. Only ACCOUNT_HOLDER can invoke this API. For authentication use account credentials.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void findApiCredentialsTest() throws ApiException {
        String name = null;
        String fields = null;
        Integer limit = null;
        Integer offset = null;
        ApiCredentialPage response = api.findApiCredentials(name, fields, limit, offset);
        // TODO: test validations
    }

    /**
     * Find account details
     *
     * Searches for the user account details. Details include name, email, and basic account permissions. For authentication use api credentials.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getAccountTest() throws ApiException {
        String fields = null;
        Account response = api.getAccount(fields);
        // TODO: test validations
    }

    /**
     * Find a specific api credential
     *
     * Returns an API credential instance for a given api credential id. Only ACCOUNT_HOLDER can invoke this API. For authentication use account credentials.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getApiCredentialTest() throws ApiException {
        Long id = null;
        String fields = null;
        ApiCredential response = api.getApiCredential(id, fields);
        // TODO: test validations
    }

    /**
     * Find plan usage
     *
     * Searches for the data of a billing plan usage for the user. Returns the data of a billing plan usage for the current month. For authentication use api credentials.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getBillingPlanUsageTest() throws ApiException {
        BillingPlanUsage response = api.getBillingPlanUsage();
        // TODO: test validations
    }

    /**
     * Find caller ids
     *
     * Returns a list of verified caller ids. If the number is not shown in the list, then it is not verified. In this case sending of a verification code is required. For authentication use api credentials.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getCallerIdsTest() throws ApiException {
        CallerIdList response = api.getCallerIds();
        // TODO: test validations
    }

    /**
     * Find credit usage
     *
     * Find credit usage for the user. Returns credits usage for time period specified or if unspecified then total for all time. For authentication use api credentials.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getCreditUsageTest() throws ApiException {
        Long intervalBegin = null;
        Long intervalEnd = null;
        CreditUsage response = api.getCreditUsage(intervalBegin, intervalEnd);
        // TODO: test validations
    }

    /**
     * Create a caller id
     *
     * Generates and sends a verification code to the phone number provided in the path. The verification code is delivered via a phone call. This code needs to be submitted to the verify caller id API endpoint to complete verification. For authentication use api credentials.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void sendVerificationCodeToCallerIdTest() throws ApiException {
        String callerid = null;
        api.sendVerificationCodeToCallerId(callerid);
        // TODO: test validations
    }

    /**
     * Verify a caller id
     *
     * With the verification code received from the Create caller id endpoint, a call to this endpoint is required to finish verification. For authentication use api credentials.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void verifyCallerIdTest() throws ApiException {
        String callerid = null;
        CallerIdVerificationRequest callerIdVerificationRequest = null;
        Boolean response = api.verifyCallerId(callerid, callerIdVerificationRequest);
        // TODO: test validations
    }

}
