/*
 * CallFire API Documentation
 * CallFire
 *
 * The version of the OpenAPI document: V2
 * Contact: support@callfire.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Represents a Universal (platform-wide) Do-Not-Contact object for a given phone number. Shows whether inbound/outbound actions are allowed for a given number.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T09:59:09.684594-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class UniversalDoNotContact {
  public static final String SERIALIZED_NAME_FROM_NUMBER = "fromNumber";
  @SerializedName(SERIALIZED_NAME_FROM_NUMBER)
  private String fromNumber;

  public static final String SERIALIZED_NAME_INBOUND_CALL = "inboundCall";
  @SerializedName(SERIALIZED_NAME_INBOUND_CALL)
  private Boolean inboundCall;

  public static final String SERIALIZED_NAME_INBOUND_TEXT = "inboundText";
  @SerializedName(SERIALIZED_NAME_INBOUND_TEXT)
  private Boolean inboundText;

  public static final String SERIALIZED_NAME_OUTBOUND_CALL = "outboundCall";
  @SerializedName(SERIALIZED_NAME_OUTBOUND_CALL)
  private Boolean outboundCall;

  public static final String SERIALIZED_NAME_OUTBOUND_TEXT = "outboundText";
  @SerializedName(SERIALIZED_NAME_OUTBOUND_TEXT)
  private Boolean outboundText;

  public static final String SERIALIZED_NAME_TO_NUMBER = "toNumber";
  @SerializedName(SERIALIZED_NAME_TO_NUMBER)
  private String toNumber;

  public UniversalDoNotContact() {
  }

  public UniversalDoNotContact fromNumber(String fromNumber) {
    this.fromNumber = fromNumber;
    return this;
  }

  /**
   * Optional source number in E.164 format (11-digit). Example: 12132000384
   * @return fromNumber
   */
  @javax.annotation.Nullable
  public String getFromNumber() {
    return fromNumber;
  }

  public void setFromNumber(String fromNumber) {
    this.fromNumber = fromNumber;
  }


  public UniversalDoNotContact inboundCall(Boolean inboundCall) {
    this.inboundCall = inboundCall;
    return this;
  }

  /**
   * If toNumber can receive calls or If toNumber can call fromNumber.
   * @return inboundCall
   */
  @javax.annotation.Nullable
  public Boolean getInboundCall() {
    return inboundCall;
  }

  public void setInboundCall(Boolean inboundCall) {
    this.inboundCall = inboundCall;
  }


  public UniversalDoNotContact inboundText(Boolean inboundText) {
    this.inboundText = inboundText;
    return this;
  }

  /**
   * If toNumber can receive texts or If toNumber can text fromNumber.
   * @return inboundText
   */
  @javax.annotation.Nullable
  public Boolean getInboundText() {
    return inboundText;
  }

  public void setInboundText(Boolean inboundText) {
    this.inboundText = inboundText;
  }


  public UniversalDoNotContact outboundCall(Boolean outboundCall) {
    this.outboundCall = outboundCall;
    return this;
  }

  /**
   * If toNumber can send calls or If fromNumber can call toNumber.
   * @return outboundCall
   */
  @javax.annotation.Nullable
  public Boolean getOutboundCall() {
    return outboundCall;
  }

  public void setOutboundCall(Boolean outboundCall) {
    this.outboundCall = outboundCall;
  }


  public UniversalDoNotContact outboundText(Boolean outboundText) {
    this.outboundText = outboundText;
    return this;
  }

  /**
   * If toNumber can send texts or If fromNumber can text toNumber.
   * @return outboundText
   */
  @javax.annotation.Nullable
  public Boolean getOutboundText() {
    return outboundText;
  }

  public void setOutboundText(Boolean outboundText) {
    this.outboundText = outboundText;
  }


  public UniversalDoNotContact toNumber(String toNumber) {
    this.toNumber = toNumber;
    return this;
  }

  /**
   * destination DNC number in E.164 format (11-digit). Example: 12132000384
   * @return toNumber
   */
  @javax.annotation.Nullable
  public String getToNumber() {
    return toNumber;
  }

  public void setToNumber(String toNumber) {
    this.toNumber = toNumber;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    UniversalDoNotContact universalDoNotContact = (UniversalDoNotContact) o;
    return Objects.equals(this.fromNumber, universalDoNotContact.fromNumber) &&
        Objects.equals(this.inboundCall, universalDoNotContact.inboundCall) &&
        Objects.equals(this.inboundText, universalDoNotContact.inboundText) &&
        Objects.equals(this.outboundCall, universalDoNotContact.outboundCall) &&
        Objects.equals(this.outboundText, universalDoNotContact.outboundText) &&
        Objects.equals(this.toNumber, universalDoNotContact.toNumber);
  }

  @Override
  public int hashCode() {
    return Objects.hash(fromNumber, inboundCall, inboundText, outboundCall, outboundText, toNumber);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class UniversalDoNotContact {\n");
    sb.append("    fromNumber: ").append(toIndentedString(fromNumber)).append("\n");
    sb.append("    inboundCall: ").append(toIndentedString(inboundCall)).append("\n");
    sb.append("    inboundText: ").append(toIndentedString(inboundText)).append("\n");
    sb.append("    outboundCall: ").append(toIndentedString(outboundCall)).append("\n");
    sb.append("    outboundText: ").append(toIndentedString(outboundText)).append("\n");
    sb.append("    toNumber: ").append(toIndentedString(toNumber)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("fromNumber");
    openapiFields.add("inboundCall");
    openapiFields.add("inboundText");
    openapiFields.add("outboundCall");
    openapiFields.add("outboundText");
    openapiFields.add("toNumber");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to UniversalDoNotContact
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!UniversalDoNotContact.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in UniversalDoNotContact is not found in the empty JSON string", UniversalDoNotContact.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!UniversalDoNotContact.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `UniversalDoNotContact` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("fromNumber") != null && !jsonObj.get("fromNumber").isJsonNull()) && !jsonObj.get("fromNumber").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `fromNumber` to be a primitive type in the JSON string but got `%s`", jsonObj.get("fromNumber").toString()));
      }
      if ((jsonObj.get("toNumber") != null && !jsonObj.get("toNumber").isJsonNull()) && !jsonObj.get("toNumber").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `toNumber` to be a primitive type in the JSON string but got `%s`", jsonObj.get("toNumber").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!UniversalDoNotContact.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'UniversalDoNotContact' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<UniversalDoNotContact> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(UniversalDoNotContact.class));

       return (TypeAdapter<T>) new TypeAdapter<UniversalDoNotContact>() {
           @Override
           public void write(JsonWriter out, UniversalDoNotContact value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public UniversalDoNotContact read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of UniversalDoNotContact given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of UniversalDoNotContact
   * @throws IOException if the JSON string is invalid with respect to UniversalDoNotContact
   */
  public static UniversalDoNotContact fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, UniversalDoNotContact.class);
  }

  /**
   * Convert an instance of UniversalDoNotContact to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

