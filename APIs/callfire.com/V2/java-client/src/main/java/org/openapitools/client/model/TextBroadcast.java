/*
 * CallFire API Documentation
 * CallFire
 *
 * The version of the OpenAPI document: V2
 * Contact: support@callfire.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.LinkedHashSet;
import java.util.List;
import java.util.Set;
import org.openapitools.client.model.LocalTimeRestriction;
import org.openapitools.client.model.Media;
import org.openapitools.client.model.Schedule;
import org.openapitools.client.model.TextRecipient;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * A text campaign allows you to send a text message to a number of recipients. It supports scheduling, retry logic and pattern-based messages
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T09:59:09.684594-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class TextBroadcast {
  /**
   * If message length exceeds 160 characters, multiple messages will be sent, SEND_MULTIPLE strategy is chosen by default. Available values: SEND_MULTIPLE - send text as multiple messages, DO_NOT_SEND - do not send text if it exceeds 160 characters, TRIM - trims text message to 160 characters
   */
  @JsonAdapter(BigMessageStrategyEnum.Adapter.class)
  public enum BigMessageStrategyEnum {
    SEND_MULTIPLE("SEND_MULTIPLE"),
    
    DO_NOT_SEND("DO_NOT_SEND"),
    
    TRIM("TRIM"),
    
    MMS("MMS");

    private String value;

    BigMessageStrategyEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static BigMessageStrategyEnum fromValue(String value) {
      for (BigMessageStrategyEnum b : BigMessageStrategyEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<BigMessageStrategyEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final BigMessageStrategyEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public BigMessageStrategyEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return BigMessageStrategyEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      BigMessageStrategyEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_BIG_MESSAGE_STRATEGY = "bigMessageStrategy";
  @SerializedName(SERIALIZED_NAME_BIG_MESSAGE_STRATEGY)
  private BigMessageStrategyEnum bigMessageStrategy;

  public static final String SERIALIZED_NAME_FROM_NUMBER = "fromNumber";
  @SerializedName(SERIALIZED_NAME_FROM_NUMBER)
  private String fromNumber;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private Long id;

  public static final String SERIALIZED_NAME_LABELS = "labels";
  @SerializedName(SERIALIZED_NAME_LABELS)
  private Set<String> labels = new LinkedHashSet<>();

  public static final String SERIALIZED_NAME_LAST_MODIFIED = "lastModified";
  @SerializedName(SERIALIZED_NAME_LAST_MODIFIED)
  private Long lastModified;

  public static final String SERIALIZED_NAME_LOCAL_TIME_RESTRICTION = "localTimeRestriction";
  @SerializedName(SERIALIZED_NAME_LOCAL_TIME_RESTRICTION)
  private LocalTimeRestriction localTimeRestriction;

  public static final String SERIALIZED_NAME_MAX_ACTIVE = "maxActive";
  @SerializedName(SERIALIZED_NAME_MAX_ACTIVE)
  private Integer maxActive;

  public static final String SERIALIZED_NAME_MEDIA = "media";
  @SerializedName(SERIALIZED_NAME_MEDIA)
  private List<Media> media = new ArrayList<>();

  public static final String SERIALIZED_NAME_MESSAGE = "message";
  @SerializedName(SERIALIZED_NAME_MESSAGE)
  private String message;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_RECIPIENTS = "recipients";
  @SerializedName(SERIALIZED_NAME_RECIPIENTS)
  private List<TextRecipient> recipients = new ArrayList<>();

  public static final String SERIALIZED_NAME_RESUME_NEXT_DAY = "resumeNextDay";
  @SerializedName(SERIALIZED_NAME_RESUME_NEXT_DAY)
  private Boolean resumeNextDay;

  public static final String SERIALIZED_NAME_SCHEDULES = "schedules";
  @SerializedName(SERIALIZED_NAME_SCHEDULES)
  private List<Schedule> schedules = new ArrayList<>();

  /**
   * A status of a broadcast. SETUP - campaign isn&#39;t configured yet; START_PENDING - waiting for contact batch population; RUNNING - campaign is running; STOPPED - campaign is stopped; FINISHED - campaign is finished; ARCHIVED - campaign was archived
   */
  @JsonAdapter(StatusEnum.Adapter.class)
  public enum StatusEnum {
    TEST("TEST"),
    
    SETUP("SETUP"),
    
    START_PENDING("START_PENDING"),
    
    RUNNING("RUNNING"),
    
    SCHEDULED("SCHEDULED"),
    
    STOPPED("STOPPED"),
    
    SUSPENDED("SUSPENDED"),
    
    FINISHED("FINISHED"),
    
    ARCHIVED("ARCHIVED"),
    
    VALIDATING_START("VALIDATING_START"),
    
    VALIDATING_EMAIL("VALIDATING_EMAIL"),
    
    BLOCKED_SUSPICIOUS("BLOCKED_SUSPICIOUS"),
    
    DECLINED("DECLINED"),
    
    APPROVED("APPROVED");

    private String value;

    StatusEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static StatusEnum fromValue(String value) {
      for (StatusEnum b : StatusEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<StatusEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final StatusEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public StatusEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return StatusEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      StatusEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_STATUS = "status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  private StatusEnum status;

  public TextBroadcast() {
  }

  public TextBroadcast(
     Long lastModified, 
     StatusEnum status
  ) {
    this();
    this.lastModified = lastModified;
    this.status = status;
  }

  public TextBroadcast bigMessageStrategy(BigMessageStrategyEnum bigMessageStrategy) {
    this.bigMessageStrategy = bigMessageStrategy;
    return this;
  }

  /**
   * If message length exceeds 160 characters, multiple messages will be sent, SEND_MULTIPLE strategy is chosen by default. Available values: SEND_MULTIPLE - send text as multiple messages, DO_NOT_SEND - do not send text if it exceeds 160 characters, TRIM - trims text message to 160 characters
   * @return bigMessageStrategy
   */
  @javax.annotation.Nullable
  public BigMessageStrategyEnum getBigMessageStrategy() {
    return bigMessageStrategy;
  }

  public void setBigMessageStrategy(BigMessageStrategyEnum bigMessageStrategy) {
    this.bigMessageStrategy = bigMessageStrategy;
  }


  public TextBroadcast fromNumber(String fromNumber) {
    this.fromNumber = fromNumber;
    return this;
  }

  /**
   * A phone number in E.164 format (11-digit) or short code. Example: 12132000384, 67076, etc
   * @return fromNumber
   */
  @javax.annotation.Nullable
  public String getFromNumber() {
    return fromNumber;
  }

  public void setFromNumber(String fromNumber) {
    this.fromNumber = fromNumber;
  }


  public TextBroadcast id(Long id) {
    this.id = id;
    return this;
  }

  /**
   * A unique id of a broadcast
   * @return id
   */
  @javax.annotation.Nullable
  public Long getId() {
    return id;
  }

  public void setId(Long id) {
    this.id = id;
  }


  public TextBroadcast labels(Set<String> labels) {
    this.labels = labels;
    return this;
  }

  public TextBroadcast addLabelsItem(String labelsItem) {
    if (this.labels == null) {
      this.labels = new LinkedHashSet<>();
    }
    this.labels.add(labelsItem);
    return this;
  }

  /**
   * A labels of a broadcast
   * @return labels
   */
  @javax.annotation.Nullable
  public Set<String> getLabels() {
    return labels;
  }

  public void setLabels(Set<String> labels) {
    this.labels = labels;
  }


  /**
   * A time when the given resource was updated, formatted in unix time milliseconds (read only). Example: 1473781817000
   * @return lastModified
   */
  @javax.annotation.Nullable
  public Long getLastModified() {
    return lastModified;
  }



  public TextBroadcast localTimeRestriction(LocalTimeRestriction localTimeRestriction) {
    this.localTimeRestriction = localTimeRestriction;
    return this;
  }

  /**
   * Get localTimeRestriction
   * @return localTimeRestriction
   */
  @javax.annotation.Nullable
  public LocalTimeRestriction getLocalTimeRestriction() {
    return localTimeRestriction;
  }

  public void setLocalTimeRestriction(LocalTimeRestriction localTimeRestriction) {
    this.localTimeRestriction = localTimeRestriction;
  }


  public TextBroadcast maxActive(Integer maxActive) {
    this.maxActive = maxActive;
    return this;
  }

  /**
   * A maximum number of texts that CallFire dials at once
   * @return maxActive
   */
  @javax.annotation.Nullable
  public Integer getMaxActive() {
    return maxActive;
  }

  public void setMaxActive(Integer maxActive) {
    this.maxActive = maxActive;
  }


  public TextBroadcast media(List<Media> media) {
    this.media = media;
    return this;
  }

  public TextBroadcast addMediaItem(Media mediaItem) {
    if (this.media == null) {
      this.media = new ArrayList<>();
    }
    this.media.add(mediaItem);
    return this;
  }

  /**
   * ~
   * @return media
   */
  @javax.annotation.Nullable
  public List<Media> getMedia() {
    return media;
  }

  public void setMedia(List<Media> media) {
    this.media = media;
  }


  public TextBroadcast message(String message) {
    this.message = message;
    return this;
  }

  /**
   * A text message
   * @return message
   */
  @javax.annotation.Nullable
  public String getMessage() {
    return message;
  }

  public void setMessage(String message) {
    this.message = message;
  }


  public TextBroadcast name(String name) {
    this.name = name;
    return this;
  }

  /**
   * A name of a broadcast
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public TextBroadcast recipients(List<TextRecipient> recipients) {
    this.recipients = recipients;
    return this;
  }

  public TextBroadcast addRecipientsItem(TextRecipient recipientsItem) {
    if (this.recipients == null) {
      this.recipients = new ArrayList<>();
    }
    this.recipients.add(recipientsItem);
    return this;
  }

  /**
   * Recipients of a text campaign, can be an existing contacts or a new one
   * @return recipients
   */
  @javax.annotation.Nullable
  public List<TextRecipient> getRecipients() {
    return recipients;
  }

  public void setRecipients(List<TextRecipient> recipients) {
    this.recipients = recipients;
  }


  public TextBroadcast resumeNextDay(Boolean resumeNextDay) {
    this.resumeNextDay = resumeNextDay;
    return this;
  }

  /**
   * ~
   * @return resumeNextDay
   */
  @javax.annotation.Nullable
  public Boolean getResumeNextDay() {
    return resumeNextDay;
  }

  public void setResumeNextDay(Boolean resumeNextDay) {
    this.resumeNextDay = resumeNextDay;
  }


  public TextBroadcast schedules(List<Schedule> schedules) {
    this.schedules = schedules;
    return this;
  }

  public TextBroadcast addSchedulesItem(Schedule schedulesItem) {
    if (this.schedules == null) {
      this.schedules = new ArrayList<>();
    }
    this.schedules.add(schedulesItem);
    return this;
  }

  /**
   * ~
   * @return schedules
   */
  @javax.annotation.Nullable
  public List<Schedule> getSchedules() {
    return schedules;
  }

  public void setSchedules(List<Schedule> schedules) {
    this.schedules = schedules;
  }


  /**
   * A status of a broadcast. SETUP - campaign isn&#39;t configured yet; START_PENDING - waiting for contact batch population; RUNNING - campaign is running; STOPPED - campaign is stopped; FINISHED - campaign is finished; ARCHIVED - campaign was archived
   * @return status
   */
  @javax.annotation.Nullable
  public StatusEnum getStatus() {
    return status;
  }




  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    TextBroadcast textBroadcast = (TextBroadcast) o;
    return Objects.equals(this.bigMessageStrategy, textBroadcast.bigMessageStrategy) &&
        Objects.equals(this.fromNumber, textBroadcast.fromNumber) &&
        Objects.equals(this.id, textBroadcast.id) &&
        Objects.equals(this.labels, textBroadcast.labels) &&
        Objects.equals(this.lastModified, textBroadcast.lastModified) &&
        Objects.equals(this.localTimeRestriction, textBroadcast.localTimeRestriction) &&
        Objects.equals(this.maxActive, textBroadcast.maxActive) &&
        Objects.equals(this.media, textBroadcast.media) &&
        Objects.equals(this.message, textBroadcast.message) &&
        Objects.equals(this.name, textBroadcast.name) &&
        Objects.equals(this.recipients, textBroadcast.recipients) &&
        Objects.equals(this.resumeNextDay, textBroadcast.resumeNextDay) &&
        Objects.equals(this.schedules, textBroadcast.schedules) &&
        Objects.equals(this.status, textBroadcast.status);
  }

  @Override
  public int hashCode() {
    return Objects.hash(bigMessageStrategy, fromNumber, id, labels, lastModified, localTimeRestriction, maxActive, media, message, name, recipients, resumeNextDay, schedules, status);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class TextBroadcast {\n");
    sb.append("    bigMessageStrategy: ").append(toIndentedString(bigMessageStrategy)).append("\n");
    sb.append("    fromNumber: ").append(toIndentedString(fromNumber)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    labels: ").append(toIndentedString(labels)).append("\n");
    sb.append("    lastModified: ").append(toIndentedString(lastModified)).append("\n");
    sb.append("    localTimeRestriction: ").append(toIndentedString(localTimeRestriction)).append("\n");
    sb.append("    maxActive: ").append(toIndentedString(maxActive)).append("\n");
    sb.append("    media: ").append(toIndentedString(media)).append("\n");
    sb.append("    message: ").append(toIndentedString(message)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    recipients: ").append(toIndentedString(recipients)).append("\n");
    sb.append("    resumeNextDay: ").append(toIndentedString(resumeNextDay)).append("\n");
    sb.append("    schedules: ").append(toIndentedString(schedules)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("bigMessageStrategy");
    openapiFields.add("fromNumber");
    openapiFields.add("id");
    openapiFields.add("labels");
    openapiFields.add("lastModified");
    openapiFields.add("localTimeRestriction");
    openapiFields.add("maxActive");
    openapiFields.add("media");
    openapiFields.add("message");
    openapiFields.add("name");
    openapiFields.add("recipients");
    openapiFields.add("resumeNextDay");
    openapiFields.add("schedules");
    openapiFields.add("status");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to TextBroadcast
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!TextBroadcast.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in TextBroadcast is not found in the empty JSON string", TextBroadcast.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!TextBroadcast.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `TextBroadcast` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("bigMessageStrategy") != null && !jsonObj.get("bigMessageStrategy").isJsonNull()) && !jsonObj.get("bigMessageStrategy").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `bigMessageStrategy` to be a primitive type in the JSON string but got `%s`", jsonObj.get("bigMessageStrategy").toString()));
      }
      // validate the optional field `bigMessageStrategy`
      if (jsonObj.get("bigMessageStrategy") != null && !jsonObj.get("bigMessageStrategy").isJsonNull()) {
        BigMessageStrategyEnum.validateJsonElement(jsonObj.get("bigMessageStrategy"));
      }
      if ((jsonObj.get("fromNumber") != null && !jsonObj.get("fromNumber").isJsonNull()) && !jsonObj.get("fromNumber").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `fromNumber` to be a primitive type in the JSON string but got `%s`", jsonObj.get("fromNumber").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("labels") != null && !jsonObj.get("labels").isJsonNull() && !jsonObj.get("labels").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `labels` to be an array in the JSON string but got `%s`", jsonObj.get("labels").toString()));
      }
      // validate the optional field `localTimeRestriction`
      if (jsonObj.get("localTimeRestriction") != null && !jsonObj.get("localTimeRestriction").isJsonNull()) {
        LocalTimeRestriction.validateJsonElement(jsonObj.get("localTimeRestriction"));
      }
      if (jsonObj.get("media") != null && !jsonObj.get("media").isJsonNull()) {
        JsonArray jsonArraymedia = jsonObj.getAsJsonArray("media");
        if (jsonArraymedia != null) {
          // ensure the json data is an array
          if (!jsonObj.get("media").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `media` to be an array in the JSON string but got `%s`", jsonObj.get("media").toString()));
          }

          // validate the optional field `media` (array)
          for (int i = 0; i < jsonArraymedia.size(); i++) {
            Media.validateJsonElement(jsonArraymedia.get(i));
          };
        }
      }
      if ((jsonObj.get("message") != null && !jsonObj.get("message").isJsonNull()) && !jsonObj.get("message").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `message` to be a primitive type in the JSON string but got `%s`", jsonObj.get("message").toString()));
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if (jsonObj.get("recipients") != null && !jsonObj.get("recipients").isJsonNull()) {
        JsonArray jsonArrayrecipients = jsonObj.getAsJsonArray("recipients");
        if (jsonArrayrecipients != null) {
          // ensure the json data is an array
          if (!jsonObj.get("recipients").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `recipients` to be an array in the JSON string but got `%s`", jsonObj.get("recipients").toString()));
          }

          // validate the optional field `recipients` (array)
          for (int i = 0; i < jsonArrayrecipients.size(); i++) {
            TextRecipient.validateJsonElement(jsonArrayrecipients.get(i));
          };
        }
      }
      if (jsonObj.get("schedules") != null && !jsonObj.get("schedules").isJsonNull()) {
        JsonArray jsonArrayschedules = jsonObj.getAsJsonArray("schedules");
        if (jsonArrayschedules != null) {
          // ensure the json data is an array
          if (!jsonObj.get("schedules").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `schedules` to be an array in the JSON string but got `%s`", jsonObj.get("schedules").toString()));
          }

          // validate the optional field `schedules` (array)
          for (int i = 0; i < jsonArrayschedules.size(); i++) {
            Schedule.validateJsonElement(jsonArrayschedules.get(i));
          };
        }
      }
      if ((jsonObj.get("status") != null && !jsonObj.get("status").isJsonNull()) && !jsonObj.get("status").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `status` to be a primitive type in the JSON string but got `%s`", jsonObj.get("status").toString()));
      }
      // validate the optional field `status`
      if (jsonObj.get("status") != null && !jsonObj.get("status").isJsonNull()) {
        StatusEnum.validateJsonElement(jsonObj.get("status"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!TextBroadcast.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'TextBroadcast' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<TextBroadcast> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(TextBroadcast.class));

       return (TypeAdapter<T>) new TypeAdapter<TextBroadcast>() {
           @Override
           public void write(JsonWriter out, TextBroadcast value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public TextBroadcast read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of TextBroadcast given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of TextBroadcast
   * @throws IOException if the JSON string is invalid with respect to TextBroadcast
   */
  public static TextBroadcast fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, TextBroadcast.class);
  }

  /**
   * Convert an instance of TextBroadcast to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

