/*
 * CallFire API Documentation
 * CallFire
 *
 * The version of the OpenAPI document: V2
 * Contact: support@callfire.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.Contact;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * A request object is used to create a contact list from one of available contact sources
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T09:59:09.684594-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class CreateContactListRequest {
  public static final String SERIALIZED_NAME_CONTACT_IDS = "contactIds";
  @SerializedName(SERIALIZED_NAME_CONTACT_IDS)
  private List<Long> contactIds = new ArrayList<>();

  public static final String SERIALIZED_NAME_CONTACT_NUMBERS = "contactNumbers";
  @SerializedName(SERIALIZED_NAME_CONTACT_NUMBERS)
  private List<String> contactNumbers = new ArrayList<>();

  public static final String SERIALIZED_NAME_CONTACT_NUMBERS_FIELD = "contactNumbersField";
  @SerializedName(SERIALIZED_NAME_CONTACT_NUMBERS_FIELD)
  private String contactNumbersField;

  public static final String SERIALIZED_NAME_CONTACTS = "contacts";
  @SerializedName(SERIALIZED_NAME_CONTACTS)
  private List<Contact> contacts = new ArrayList<>();

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_USE_CUSTOM_FIELDS = "useCustomFields";
  @SerializedName(SERIALIZED_NAME_USE_CUSTOM_FIELDS)
  private Boolean useCustomFields;

  public CreateContactListRequest() {
  }

  public CreateContactListRequest contactIds(List<Long> contactIds) {
    this.contactIds = contactIds;
    return this;
  }

  public CreateContactListRequest addContactIdsItem(Long contactIdsItem) {
    if (this.contactIds == null) {
      this.contactIds = new ArrayList<>();
    }
    this.contactIds.add(contactIdsItem);
    return this;
  }

  /**
   * A list of ids of existing contacts in CallFire system
   * @return contactIds
   */
  @javax.annotation.Nullable
  public List<Long> getContactIds() {
    return contactIds;
  }

  public void setContactIds(List<Long> contactIds) {
    this.contactIds = contactIds;
  }


  public CreateContactListRequest contactNumbers(List<String> contactNumbers) {
    this.contactNumbers = contactNumbers;
    return this;
  }

  public CreateContactListRequest addContactNumbersItem(String contactNumbersItem) {
    if (this.contactNumbers == null) {
      this.contactNumbers = new ArrayList<>();
    }
    this.contactNumbers.add(contactNumbersItem);
    return this;
  }

  /**
   * List of numbers in E.164 format (11-digit). Example: 12132000384
   * @return contactNumbers
   */
  @javax.annotation.Nullable
  public List<String> getContactNumbers() {
    return contactNumbers;
  }

  public void setContactNumbers(List<String> contactNumbers) {
    this.contactNumbers = contactNumbers;
  }


  public CreateContactListRequest contactNumbersField(String contactNumbersField) {
    this.contactNumbersField = contactNumbersField;
    return this;
  }

  /**
   * A type of a phone number (homePhone, workPhone, mobilePhone). This parameter is used with contactNumbers and specifies which types of phone numbers are included to a contact list
   * @return contactNumbersField
   */
  @javax.annotation.Nullable
  public String getContactNumbersField() {
    return contactNumbersField;
  }

  public void setContactNumbersField(String contactNumbersField) {
    this.contactNumbersField = contactNumbersField;
  }


  public CreateContactListRequest contacts(List<Contact> contacts) {
    this.contacts = contacts;
    return this;
  }

  public CreateContactListRequest addContactsItem(Contact contactsItem) {
    if (this.contacts == null) {
      this.contacts = new ArrayList<>();
    }
    this.contacts.add(contactsItem);
    return this;
  }

  /**
   * A list of new contact objects to be added
   * @return contacts
   */
  @javax.annotation.Nullable
  public List<Contact> getContacts() {
    return contacts;
  }

  public void setContacts(List<Contact> contacts) {
    this.contacts = contacts;
  }


  public CreateContactListRequest name(String name) {
    this.name = name;
    return this;
  }

  /**
   * A name of a contact list
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public CreateContactListRequest useCustomFields(Boolean useCustomFields) {
    this.useCustomFields = useCustomFields;
    return this;
  }

  /**
   * A flag to indicate how to define property names for contacts. If true, uses the field and property names exactly as defined. If false will assign custom properties and fields to A, B, C, etc
   * @return useCustomFields
   */
  @javax.annotation.Nullable
  public Boolean getUseCustomFields() {
    return useCustomFields;
  }

  public void setUseCustomFields(Boolean useCustomFields) {
    this.useCustomFields = useCustomFields;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CreateContactListRequest createContactListRequest = (CreateContactListRequest) o;
    return Objects.equals(this.contactIds, createContactListRequest.contactIds) &&
        Objects.equals(this.contactNumbers, createContactListRequest.contactNumbers) &&
        Objects.equals(this.contactNumbersField, createContactListRequest.contactNumbersField) &&
        Objects.equals(this.contacts, createContactListRequest.contacts) &&
        Objects.equals(this.name, createContactListRequest.name) &&
        Objects.equals(this.useCustomFields, createContactListRequest.useCustomFields);
  }

  @Override
  public int hashCode() {
    return Objects.hash(contactIds, contactNumbers, contactNumbersField, contacts, name, useCustomFields);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CreateContactListRequest {\n");
    sb.append("    contactIds: ").append(toIndentedString(contactIds)).append("\n");
    sb.append("    contactNumbers: ").append(toIndentedString(contactNumbers)).append("\n");
    sb.append("    contactNumbersField: ").append(toIndentedString(contactNumbersField)).append("\n");
    sb.append("    contacts: ").append(toIndentedString(contacts)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    useCustomFields: ").append(toIndentedString(useCustomFields)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("contactIds");
    openapiFields.add("contactNumbers");
    openapiFields.add("contactNumbersField");
    openapiFields.add("contacts");
    openapiFields.add("name");
    openapiFields.add("useCustomFields");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to CreateContactListRequest
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!CreateContactListRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CreateContactListRequest is not found in the empty JSON string", CreateContactListRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!CreateContactListRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CreateContactListRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // ensure the optional json data is an array if present
      if (jsonObj.get("contactIds") != null && !jsonObj.get("contactIds").isJsonNull() && !jsonObj.get("contactIds").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `contactIds` to be an array in the JSON string but got `%s`", jsonObj.get("contactIds").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("contactNumbers") != null && !jsonObj.get("contactNumbers").isJsonNull() && !jsonObj.get("contactNumbers").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `contactNumbers` to be an array in the JSON string but got `%s`", jsonObj.get("contactNumbers").toString()));
      }
      if ((jsonObj.get("contactNumbersField") != null && !jsonObj.get("contactNumbersField").isJsonNull()) && !jsonObj.get("contactNumbersField").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `contactNumbersField` to be a primitive type in the JSON string but got `%s`", jsonObj.get("contactNumbersField").toString()));
      }
      if (jsonObj.get("contacts") != null && !jsonObj.get("contacts").isJsonNull()) {
        JsonArray jsonArraycontacts = jsonObj.getAsJsonArray("contacts");
        if (jsonArraycontacts != null) {
          // ensure the json data is an array
          if (!jsonObj.get("contacts").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `contacts` to be an array in the JSON string but got `%s`", jsonObj.get("contacts").toString()));
          }

          // validate the optional field `contacts` (array)
          for (int i = 0; i < jsonArraycontacts.size(); i++) {
            Contact.validateJsonElement(jsonArraycontacts.get(i));
          };
        }
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CreateContactListRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CreateContactListRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CreateContactListRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CreateContactListRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<CreateContactListRequest>() {
           @Override
           public void write(JsonWriter out, CreateContactListRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CreateContactListRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of CreateContactListRequest given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of CreateContactListRequest
   * @throws IOException if the JSON string is invalid with respect to CreateContactListRequest
   */
  public static CreateContactListRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CreateContactListRequest.class);
  }

  /**
   * Convert an instance of CreateContactListRequest to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

