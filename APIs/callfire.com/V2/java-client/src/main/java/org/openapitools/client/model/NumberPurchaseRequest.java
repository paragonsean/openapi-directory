/*
 * CallFire API Documentation
 * CallFire
 *
 * The version of the OpenAPI document: V2
 * Contact: support@callfire.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Request object is used to order a local or toll-free numbers
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T09:59:09.684594-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class NumberPurchaseRequest {
  public static final String SERIALIZED_NAME_CITY = "city";
  @SerializedName(SERIALIZED_NAME_CITY)
  private String city;

  public static final String SERIALIZED_NAME_LOCAL_COUNT = "localCount";
  @SerializedName(SERIALIZED_NAME_LOCAL_COUNT)
  private Integer localCount;

  public static final String SERIALIZED_NAME_NUMBERS = "numbers";
  @SerializedName(SERIALIZED_NAME_NUMBERS)
  private List<String> numbers = new ArrayList<>();

  public static final String SERIALIZED_NAME_PREFIX = "prefix";
  @SerializedName(SERIALIZED_NAME_PREFIX)
  private String prefix;

  public static final String SERIALIZED_NAME_PROMO = "promo";
  @SerializedName(SERIALIZED_NAME_PROMO)
  private String promo;

  public static final String SERIALIZED_NAME_STATE = "state";
  @SerializedName(SERIALIZED_NAME_STATE)
  private String state;

  public static final String SERIALIZED_NAME_TOLL_FREE_COUNT = "tollFreeCount";
  @SerializedName(SERIALIZED_NAME_TOLL_FREE_COUNT)
  private Integer tollFreeCount;

  public static final String SERIALIZED_NAME_ZIPCODE = "zipcode";
  @SerializedName(SERIALIZED_NAME_ZIPCODE)
  private String zipcode;

  public NumberPurchaseRequest() {
  }

  public NumberPurchaseRequest city(String city) {
    this.city = city;
    return this;
  }

  /**
   * City of requested numbers
   * @return city
   */
  @javax.annotation.Nullable
  public String getCity() {
    return city;
  }

  public void setCity(String city) {
    this.city = city;
  }


  public NumberPurchaseRequest localCount(Integer localCount) {
    this.localCount = localCount;
    return this;
  }

  /**
   * Total count of local numbers requested
   * @return localCount
   */
  @javax.annotation.Nullable
  public Integer getLocalCount() {
    return localCount;
  }

  public void setLocalCount(Integer localCount) {
    this.localCount = localCount;
  }


  public NumberPurchaseRequest numbers(List<String> numbers) {
    this.numbers = numbers;
    return this;
  }

  public NumberPurchaseRequest addNumbersItem(String numbersItem) {
    if (this.numbers == null) {
      this.numbers = new ArrayList<>();
    }
    this.numbers.add(numbersItem);
    return this;
  }

  /**
   * A list of phone numbers in E.164 format (11-digit) to buy. Example: 12132000384
   * @return numbers
   */
  @javax.annotation.Nullable
  public List<String> getNumbers() {
    return numbers;
  }

  public void setNumbers(List<String> numbers) {
    this.numbers = numbers;
  }


  public NumberPurchaseRequest prefix(String prefix) {
    this.prefix = prefix;
    return this;
  }

  /**
   * Country prefix of requested numbers
   * @return prefix
   */
  @javax.annotation.Nullable
  public String getPrefix() {
    return prefix;
  }

  public void setPrefix(String prefix) {
    this.prefix = prefix;
  }


  public NumberPurchaseRequest promo(String promo) {
    this.promo = promo;
    return this;
  }

  /**
   * ~
   * @return promo
   */
  @javax.annotation.Nullable
  public String getPromo() {
    return promo;
  }

  public void setPromo(String promo) {
    this.promo = promo;
  }


  public NumberPurchaseRequest state(String state) {
    this.state = state;
    return this;
  }

  /**
   * A two-letter state code of requested numbers
   * @return state
   */
  @javax.annotation.Nullable
  public String getState() {
    return state;
  }

  public void setState(String state) {
    this.state = state;
  }


  public NumberPurchaseRequest tollFreeCount(Integer tollFreeCount) {
    this.tollFreeCount = tollFreeCount;
    return this;
  }

  /**
   * Total count of toll-free numbers requested
   * @return tollFreeCount
   */
  @javax.annotation.Nullable
  public Integer getTollFreeCount() {
    return tollFreeCount;
  }

  public void setTollFreeCount(Integer tollFreeCount) {
    this.tollFreeCount = tollFreeCount;
  }


  public NumberPurchaseRequest zipcode(String zipcode) {
    this.zipcode = zipcode;
    return this;
  }

  /**
   * A five-digit Zip code of requested numbers
   * @return zipcode
   */
  @javax.annotation.Nullable
  public String getZipcode() {
    return zipcode;
  }

  public void setZipcode(String zipcode) {
    this.zipcode = zipcode;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    NumberPurchaseRequest numberPurchaseRequest = (NumberPurchaseRequest) o;
    return Objects.equals(this.city, numberPurchaseRequest.city) &&
        Objects.equals(this.localCount, numberPurchaseRequest.localCount) &&
        Objects.equals(this.numbers, numberPurchaseRequest.numbers) &&
        Objects.equals(this.prefix, numberPurchaseRequest.prefix) &&
        Objects.equals(this.promo, numberPurchaseRequest.promo) &&
        Objects.equals(this.state, numberPurchaseRequest.state) &&
        Objects.equals(this.tollFreeCount, numberPurchaseRequest.tollFreeCount) &&
        Objects.equals(this.zipcode, numberPurchaseRequest.zipcode);
  }

  @Override
  public int hashCode() {
    return Objects.hash(city, localCount, numbers, prefix, promo, state, tollFreeCount, zipcode);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class NumberPurchaseRequest {\n");
    sb.append("    city: ").append(toIndentedString(city)).append("\n");
    sb.append("    localCount: ").append(toIndentedString(localCount)).append("\n");
    sb.append("    numbers: ").append(toIndentedString(numbers)).append("\n");
    sb.append("    prefix: ").append(toIndentedString(prefix)).append("\n");
    sb.append("    promo: ").append(toIndentedString(promo)).append("\n");
    sb.append("    state: ").append(toIndentedString(state)).append("\n");
    sb.append("    tollFreeCount: ").append(toIndentedString(tollFreeCount)).append("\n");
    sb.append("    zipcode: ").append(toIndentedString(zipcode)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("city");
    openapiFields.add("localCount");
    openapiFields.add("numbers");
    openapiFields.add("prefix");
    openapiFields.add("promo");
    openapiFields.add("state");
    openapiFields.add("tollFreeCount");
    openapiFields.add("zipcode");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to NumberPurchaseRequest
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!NumberPurchaseRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in NumberPurchaseRequest is not found in the empty JSON string", NumberPurchaseRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!NumberPurchaseRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `NumberPurchaseRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("city") != null && !jsonObj.get("city").isJsonNull()) && !jsonObj.get("city").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `city` to be a primitive type in the JSON string but got `%s`", jsonObj.get("city").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("numbers") != null && !jsonObj.get("numbers").isJsonNull() && !jsonObj.get("numbers").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `numbers` to be an array in the JSON string but got `%s`", jsonObj.get("numbers").toString()));
      }
      if ((jsonObj.get("prefix") != null && !jsonObj.get("prefix").isJsonNull()) && !jsonObj.get("prefix").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `prefix` to be a primitive type in the JSON string but got `%s`", jsonObj.get("prefix").toString()));
      }
      if ((jsonObj.get("promo") != null && !jsonObj.get("promo").isJsonNull()) && !jsonObj.get("promo").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `promo` to be a primitive type in the JSON string but got `%s`", jsonObj.get("promo").toString()));
      }
      if ((jsonObj.get("state") != null && !jsonObj.get("state").isJsonNull()) && !jsonObj.get("state").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `state` to be a primitive type in the JSON string but got `%s`", jsonObj.get("state").toString()));
      }
      if ((jsonObj.get("zipcode") != null && !jsonObj.get("zipcode").isJsonNull()) && !jsonObj.get("zipcode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `zipcode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("zipcode").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!NumberPurchaseRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'NumberPurchaseRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<NumberPurchaseRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(NumberPurchaseRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<NumberPurchaseRequest>() {
           @Override
           public void write(JsonWriter out, NumberPurchaseRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public NumberPurchaseRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of NumberPurchaseRequest given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of NumberPurchaseRequest
   * @throws IOException if the JSON string is invalid with respect to NumberPurchaseRequest
   */
  public static NumberPurchaseRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, NumberPurchaseRequest.class);
  }

  /**
   * Convert an instance of NumberPurchaseRequest to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

