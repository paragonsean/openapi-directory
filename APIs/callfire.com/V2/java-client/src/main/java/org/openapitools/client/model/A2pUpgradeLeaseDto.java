/*
 * CallFire API Documentation
 * CallFire
 *
 * The version of the OpenAPI document: V2
 * Contact: support@callfire.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.math.BigDecimal;
import java.time.OffsetDateTime;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * ~
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T09:59:09.684594-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class A2pUpgradeLeaseDto {
  public static final String SERIALIZED_NAME_BLOCKED = "blocked";
  @SerializedName(SERIALIZED_NAME_BLOCKED)
  private OffsetDateTime blocked;

  public static final String SERIALIZED_NAME_CANCELED = "canceled";
  @SerializedName(SERIALIZED_NAME_CANCELED)
  private Boolean canceled;

  public static final String SERIALIZED_NAME_CREATED_AT = "createdAt";
  @SerializedName(SERIALIZED_NAME_CREATED_AT)
  private OffsetDateTime createdAt;

  public static final String SERIALIZED_NAME_DELETED = "deleted";
  @SerializedName(SERIALIZED_NAME_DELETED)
  private Boolean deleted;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private Long id;

  public static final String SERIALIZED_NAME_INVOICE_ID = "invoiceId";
  @SerializedName(SERIALIZED_NAME_INVOICE_ID)
  private Long invoiceId;

  public static final String SERIALIZED_NAME_NEXT_BILLING = "nextBilling";
  @SerializedName(SERIALIZED_NAME_NEXT_BILLING)
  private OffsetDateTime nextBilling;

  public static final String SERIALIZED_NAME_PACKAGED = "packaged";
  @SerializedName(SERIALIZED_NAME_PACKAGED)
  private Boolean packaged;

  public static final String SERIALIZED_NAME_PREPAID_DISCOUNT_ID = "prepaidDiscountId";
  @SerializedName(SERIALIZED_NAME_PREPAID_DISCOUNT_ID)
  private Long prepaidDiscountId;

  public static final String SERIALIZED_NAME_PRICE = "price";
  @SerializedName(SERIALIZED_NAME_PRICE)
  private BigDecimal price;

  /**
   * ~
   */
  @JsonAdapter(TypeEnum.Adapter.class)
  public enum TypeEnum {
    PLAN("PLAN"),
    
    EXTRA("EXTRA");

    private String value;

    TypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static TypeEnum fromValue(String value) {
      for (TypeEnum b : TypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<TypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final TypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public TypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return TypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      TypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_TYPE = "type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  private TypeEnum type;

  public static final String SERIALIZED_NAME_UPDATED_AT = "updatedAt";
  @SerializedName(SERIALIZED_NAME_UPDATED_AT)
  private OffsetDateTime updatedAt;

  public A2pUpgradeLeaseDto() {
  }

  public A2pUpgradeLeaseDto blocked(OffsetDateTime blocked) {
    this.blocked = blocked;
    return this;
  }

  /**
   * ~
   * @return blocked
   */
  @javax.annotation.Nullable
  public OffsetDateTime getBlocked() {
    return blocked;
  }

  public void setBlocked(OffsetDateTime blocked) {
    this.blocked = blocked;
  }


  public A2pUpgradeLeaseDto canceled(Boolean canceled) {
    this.canceled = canceled;
    return this;
  }

  /**
   * ~
   * @return canceled
   */
  @javax.annotation.Nullable
  public Boolean getCanceled() {
    return canceled;
  }

  public void setCanceled(Boolean canceled) {
    this.canceled = canceled;
  }


  public A2pUpgradeLeaseDto createdAt(OffsetDateTime createdAt) {
    this.createdAt = createdAt;
    return this;
  }

  /**
   * ~
   * @return createdAt
   */
  @javax.annotation.Nullable
  public OffsetDateTime getCreatedAt() {
    return createdAt;
  }

  public void setCreatedAt(OffsetDateTime createdAt) {
    this.createdAt = createdAt;
  }


  public A2pUpgradeLeaseDto deleted(Boolean deleted) {
    this.deleted = deleted;
    return this;
  }

  /**
   * ~
   * @return deleted
   */
  @javax.annotation.Nullable
  public Boolean getDeleted() {
    return deleted;
  }

  public void setDeleted(Boolean deleted) {
    this.deleted = deleted;
  }


  public A2pUpgradeLeaseDto id(Long id) {
    this.id = id;
    return this;
  }

  /**
   * ~
   * @return id
   */
  @javax.annotation.Nullable
  public Long getId() {
    return id;
  }

  public void setId(Long id) {
    this.id = id;
  }


  public A2pUpgradeLeaseDto invoiceId(Long invoiceId) {
    this.invoiceId = invoiceId;
    return this;
  }

  /**
   * ~
   * @return invoiceId
   */
  @javax.annotation.Nullable
  public Long getInvoiceId() {
    return invoiceId;
  }

  public void setInvoiceId(Long invoiceId) {
    this.invoiceId = invoiceId;
  }


  public A2pUpgradeLeaseDto nextBilling(OffsetDateTime nextBilling) {
    this.nextBilling = nextBilling;
    return this;
  }

  /**
   * ~
   * @return nextBilling
   */
  @javax.annotation.Nullable
  public OffsetDateTime getNextBilling() {
    return nextBilling;
  }

  public void setNextBilling(OffsetDateTime nextBilling) {
    this.nextBilling = nextBilling;
  }


  public A2pUpgradeLeaseDto packaged(Boolean packaged) {
    this.packaged = packaged;
    return this;
  }

  /**
   * ~
   * @return packaged
   */
  @javax.annotation.Nullable
  public Boolean getPackaged() {
    return packaged;
  }

  public void setPackaged(Boolean packaged) {
    this.packaged = packaged;
  }


  public A2pUpgradeLeaseDto prepaidDiscountId(Long prepaidDiscountId) {
    this.prepaidDiscountId = prepaidDiscountId;
    return this;
  }

  /**
   * ~
   * @return prepaidDiscountId
   */
  @javax.annotation.Nullable
  public Long getPrepaidDiscountId() {
    return prepaidDiscountId;
  }

  public void setPrepaidDiscountId(Long prepaidDiscountId) {
    this.prepaidDiscountId = prepaidDiscountId;
  }


  public A2pUpgradeLeaseDto price(BigDecimal price) {
    this.price = price;
    return this;
  }

  /**
   * ~
   * @return price
   */
  @javax.annotation.Nullable
  public BigDecimal getPrice() {
    return price;
  }

  public void setPrice(BigDecimal price) {
    this.price = price;
  }


  public A2pUpgradeLeaseDto type(TypeEnum type) {
    this.type = type;
    return this;
  }

  /**
   * ~
   * @return type
   */
  @javax.annotation.Nullable
  public TypeEnum getType() {
    return type;
  }

  public void setType(TypeEnum type) {
    this.type = type;
  }


  public A2pUpgradeLeaseDto updatedAt(OffsetDateTime updatedAt) {
    this.updatedAt = updatedAt;
    return this;
  }

  /**
   * ~
   * @return updatedAt
   */
  @javax.annotation.Nullable
  public OffsetDateTime getUpdatedAt() {
    return updatedAt;
  }

  public void setUpdatedAt(OffsetDateTime updatedAt) {
    this.updatedAt = updatedAt;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    A2pUpgradeLeaseDto a2pUpgradeLeaseDto = (A2pUpgradeLeaseDto) o;
    return Objects.equals(this.blocked, a2pUpgradeLeaseDto.blocked) &&
        Objects.equals(this.canceled, a2pUpgradeLeaseDto.canceled) &&
        Objects.equals(this.createdAt, a2pUpgradeLeaseDto.createdAt) &&
        Objects.equals(this.deleted, a2pUpgradeLeaseDto.deleted) &&
        Objects.equals(this.id, a2pUpgradeLeaseDto.id) &&
        Objects.equals(this.invoiceId, a2pUpgradeLeaseDto.invoiceId) &&
        Objects.equals(this.nextBilling, a2pUpgradeLeaseDto.nextBilling) &&
        Objects.equals(this.packaged, a2pUpgradeLeaseDto.packaged) &&
        Objects.equals(this.prepaidDiscountId, a2pUpgradeLeaseDto.prepaidDiscountId) &&
        Objects.equals(this.price, a2pUpgradeLeaseDto.price) &&
        Objects.equals(this.type, a2pUpgradeLeaseDto.type) &&
        Objects.equals(this.updatedAt, a2pUpgradeLeaseDto.updatedAt);
  }

  @Override
  public int hashCode() {
    return Objects.hash(blocked, canceled, createdAt, deleted, id, invoiceId, nextBilling, packaged, prepaidDiscountId, price, type, updatedAt);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class A2pUpgradeLeaseDto {\n");
    sb.append("    blocked: ").append(toIndentedString(blocked)).append("\n");
    sb.append("    canceled: ").append(toIndentedString(canceled)).append("\n");
    sb.append("    createdAt: ").append(toIndentedString(createdAt)).append("\n");
    sb.append("    deleted: ").append(toIndentedString(deleted)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    invoiceId: ").append(toIndentedString(invoiceId)).append("\n");
    sb.append("    nextBilling: ").append(toIndentedString(nextBilling)).append("\n");
    sb.append("    packaged: ").append(toIndentedString(packaged)).append("\n");
    sb.append("    prepaidDiscountId: ").append(toIndentedString(prepaidDiscountId)).append("\n");
    sb.append("    price: ").append(toIndentedString(price)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    updatedAt: ").append(toIndentedString(updatedAt)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("blocked");
    openapiFields.add("canceled");
    openapiFields.add("createdAt");
    openapiFields.add("deleted");
    openapiFields.add("id");
    openapiFields.add("invoiceId");
    openapiFields.add("nextBilling");
    openapiFields.add("packaged");
    openapiFields.add("prepaidDiscountId");
    openapiFields.add("price");
    openapiFields.add("type");
    openapiFields.add("updatedAt");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to A2pUpgradeLeaseDto
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!A2pUpgradeLeaseDto.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in A2pUpgradeLeaseDto is not found in the empty JSON string", A2pUpgradeLeaseDto.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!A2pUpgradeLeaseDto.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `A2pUpgradeLeaseDto` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("type") != null && !jsonObj.get("type").isJsonNull()) && !jsonObj.get("type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("type").toString()));
      }
      // validate the optional field `type`
      if (jsonObj.get("type") != null && !jsonObj.get("type").isJsonNull()) {
        TypeEnum.validateJsonElement(jsonObj.get("type"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!A2pUpgradeLeaseDto.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'A2pUpgradeLeaseDto' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<A2pUpgradeLeaseDto> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(A2pUpgradeLeaseDto.class));

       return (TypeAdapter<T>) new TypeAdapter<A2pUpgradeLeaseDto>() {
           @Override
           public void write(JsonWriter out, A2pUpgradeLeaseDto value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public A2pUpgradeLeaseDto read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of A2pUpgradeLeaseDto given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of A2pUpgradeLeaseDto
   * @throws IOException if the JSON string is invalid with respect to A2pUpgradeLeaseDto
   */
  public static A2pUpgradeLeaseDto fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, A2pUpgradeLeaseDto.class);
  }

  /**
   * Convert an instance of A2pUpgradeLeaseDto to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

