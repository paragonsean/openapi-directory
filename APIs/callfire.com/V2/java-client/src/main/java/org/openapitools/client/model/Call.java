/*
 * CallFire API Documentation
 * CallFire
 *
 * The version of the OpenAPI document: V2
 * Contact: support@callfire.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.LinkedHashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;
import org.openapitools.client.model.CallRecord;
import org.openapitools.client.model.Contact;
import org.openapitools.client.model.Note;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Represents a call action sent or received by CallFire platform
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T09:59:09.684594-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Call {
  public static final String SERIALIZED_NAME_AGENT_CALL = "agentCall";
  @SerializedName(SERIALIZED_NAME_AGENT_CALL)
  private Boolean agentCall;

  public static final String SERIALIZED_NAME_ATTRIBUTES = "attributes";
  @SerializedName(SERIALIZED_NAME_ATTRIBUTES)
  private Map<String, String> attributes = new HashMap<>();

  public static final String SERIALIZED_NAME_BATCH_ID = "batchId";
  @SerializedName(SERIALIZED_NAME_BATCH_ID)
  private Long batchId;

  public static final String SERIALIZED_NAME_CAMPAIGN_ID = "campaignId";
  @SerializedName(SERIALIZED_NAME_CAMPAIGN_ID)
  private Long campaignId;

  public static final String SERIALIZED_NAME_CONTACT = "contact";
  @SerializedName(SERIALIZED_NAME_CONTACT)
  private Contact contact;

  public static final String SERIALIZED_NAME_CREATED = "created";
  @SerializedName(SERIALIZED_NAME_CREATED)
  private Long created;

  /**
   * Result of a call (LA, AM, BUSY, DNC, XFER, NO_ANS, XFER_LEG, INTERNAL_ERROR, CARRIER_ERROR, CARRIER_TEMP_ERROR, UNDIALED, SD, POSTPONED, ABANDONED, SKIPPED). See [call states and results](https://developers.callfire.com/results-responses-errors.html)
   */
  @JsonAdapter(FinalCallResultEnum.Adapter.class)
  public enum FinalCallResultEnum {
    LA("LA"),
    
    AM("AM"),
    
    BUSY("BUSY"),
    
    DNC("DNC"),
    
    XFER("XFER"),
    
    NO_ANS("NO_ANS"),
    
    XFER_LEG("XFER_LEG"),
    
    INTERNAL_ERROR("INTERNAL_ERROR"),
    
    CARRIER_ERROR("CARRIER_ERROR"),
    
    CARRIER_TEMP_ERROR("CARRIER_TEMP_ERROR"),
    
    UNDIALED("UNDIALED"),
    
    SD("SD"),
    
    POSTPONED("POSTPONED"),
    
    ABANDONED("ABANDONED"),
    
    SKIPPED("SKIPPED");

    private String value;

    FinalCallResultEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static FinalCallResultEnum fromValue(String value) {
      for (FinalCallResultEnum b : FinalCallResultEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<FinalCallResultEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final FinalCallResultEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public FinalCallResultEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return FinalCallResultEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      FinalCallResultEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_FINAL_CALL_RESULT = "finalCallResult";
  @SerializedName(SERIALIZED_NAME_FINAL_CALL_RESULT)
  private FinalCallResultEnum finalCallResult;

  public static final String SERIALIZED_NAME_FROM_NUMBER = "fromNumber";
  @SerializedName(SERIALIZED_NAME_FROM_NUMBER)
  private String fromNumber;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private Long id;

  public static final String SERIALIZED_NAME_INBOUND = "inbound";
  @SerializedName(SERIALIZED_NAME_INBOUND)
  private Boolean inbound;

  public static final String SERIALIZED_NAME_LABELS = "labels";
  @SerializedName(SERIALIZED_NAME_LABELS)
  private Set<String> labels = new LinkedHashSet<>();

  public static final String SERIALIZED_NAME_MODIFIED = "modified";
  @SerializedName(SERIALIZED_NAME_MODIFIED)
  private Long modified;

  public static final String SERIALIZED_NAME_NOTES = "notes";
  @SerializedName(SERIALIZED_NAME_NOTES)
  private List<Note> notes = new ArrayList<>();

  public static final String SERIALIZED_NAME_RECORDS = "records";
  @SerializedName(SERIALIZED_NAME_RECORDS)
  private List<CallRecord> records = new ArrayList<>();

  /**
   * State of an action (READY, SELECTED, CALLBACK, DISABLED, FINISHED, DNC, DUP, INVALID, TIMEOUT, PERIOD_LIMIT). See [call states and results](https://developers.callfire.com/results-responses-errors.html)
   */
  @JsonAdapter(StateEnum.Adapter.class)
  public enum StateEnum {
    READY("READY"),
    
    SELECTED("SELECTED"),
    
    CALLBACK("CALLBACK"),
    
    FINISHED("FINISHED"),
    
    DISABLED("DISABLED"),
    
    SKIPPED("SKIPPED"),
    
    DNC("DNC"),
    
    DUP("DUP"),
    
    INVALID("INVALID"),
    
    TIMEOUT("TIMEOUT"),
    
    PERIOD_LIMIT("PERIOD_LIMIT"),
    
    RESTRICTED_NUMBER("RESTRICTED_NUMBER");

    private String value;

    StateEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static StateEnum fromValue(String value) {
      for (StateEnum b : StateEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<StateEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final StateEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public StateEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return StateEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      StateEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_STATE = "state";
  @SerializedName(SERIALIZED_NAME_STATE)
  private StateEnum state;

  public static final String SERIALIZED_NAME_TO_NUMBER = "toNumber";
  @SerializedName(SERIALIZED_NAME_TO_NUMBER)
  private String toNumber;

  public Call() {
  }

  public Call(
     Boolean agentCall, 
     Long batchId, 
     Long campaignId, 
     Long created, 
     FinalCallResultEnum finalCallResult, 
     Long modified, 
     List<CallRecord> records, 
     StateEnum state
  ) {
    this();
    this.agentCall = agentCall;
    this.batchId = batchId;
    this.campaignId = campaignId;
    this.created = created;
    this.finalCallResult = finalCallResult;
    this.modified = modified;
    this.records = records;
    this.state = state;
  }

  /**
   * An internal call to an agent
   * @return agentCall
   */
  @javax.annotation.Nullable
  public Boolean getAgentCall() {
    return agentCall;
  }



  public Call attributes(Map<String, String> attributes) {
    this.attributes = attributes;
    return this;
  }

  public Call putAttributesItem(String key, String attributesItem) {
    if (this.attributes == null) {
      this.attributes = new HashMap<>();
    }
    this.attributes.put(key, attributesItem);
    return this;
  }

  /**
   * Map of user-defined string attributes associated with an action
   * @return attributes
   */
  @javax.annotation.Nullable
  public Map<String, String> getAttributes() {
    return attributes;
  }

  public void setAttributes(Map<String, String> attributes) {
    this.attributes = attributes;
  }


  /**
   * An id of contact batch associated with an action
   * @return batchId
   */
  @javax.annotation.Nullable
  public Long getBatchId() {
    return batchId;
  }



  /**
   * An id of broadcast associated with an action if call is sent as part of call broadcast
   * @return campaignId
   */
  @javax.annotation.Nullable
  public Long getCampaignId() {
    return campaignId;
  }



  public Call contact(Contact contact) {
    this.contact = contact;
    return this;
  }

  /**
   * Get contact
   * @return contact
   */
  @javax.annotation.Nullable
  public Contact getContact() {
    return contact;
  }

  public void setContact(Contact contact) {
    this.contact = contact;
  }


  /**
   * The time when the given resource was created, formatted in unix time milliseconds (read only). Example: 1473781817000 for Sat, 05 Jan 1985 14:03:37 GMT 
   * @return created
   */
  @javax.annotation.Nullable
  public Long getCreated() {
    return created;
  }



  /**
   * Result of a call (LA, AM, BUSY, DNC, XFER, NO_ANS, XFER_LEG, INTERNAL_ERROR, CARRIER_ERROR, CARRIER_TEMP_ERROR, UNDIALED, SD, POSTPONED, ABANDONED, SKIPPED). See [call states and results](https://developers.callfire.com/results-responses-errors.html)
   * @return finalCallResult
   */
  @javax.annotation.Nullable
  public FinalCallResultEnum getFinalCallResult() {
    return finalCallResult;
  }



  public Call fromNumber(String fromNumber) {
    this.fromNumber = fromNumber;
    return this;
  }

  /**
   * A sender&#39;s phone number in E.164 (11-digit) format
   * @return fromNumber
   */
  @javax.annotation.Nullable
  public String getFromNumber() {
    return fromNumber;
  }

  public void setFromNumber(String fromNumber) {
    this.fromNumber = fromNumber;
  }


  public Call id(Long id) {
    this.id = id;
    return this;
  }

  /**
   * An id of  an action
   * @return id
   */
  @javax.annotation.Nullable
  public Long getId() {
    return id;
  }

  public void setId(Long id) {
    this.id = id;
  }


  public Call inbound(Boolean inbound) {
    this.inbound = inbound;
    return this;
  }

  /**
   * Is action inbound
   * @return inbound
   */
  @javax.annotation.Nullable
  public Boolean getInbound() {
    return inbound;
  }

  public void setInbound(Boolean inbound) {
    this.inbound = inbound;
  }


  public Call labels(Set<String> labels) {
    this.labels = labels;
    return this;
  }

  public Call addLabelsItem(String labelsItem) {
    if (this.labels == null) {
      this.labels = new LinkedHashSet<>();
    }
    this.labels.add(labelsItem);
    return this;
  }

  /**
   * Labels associated with action or broadcast for this action
   * @return labels
   */
  @javax.annotation.Nullable
  public Set<String> getLabels() {
    return labels;
  }

  public void setLabels(Set<String> labels) {
    this.labels = labels;
  }


  /**
   * The time when the given resource was modified, formatted in unix time milliseconds (read only). Example: 1473781817000 for Sat, 05 Jan 1985 14:03:37 GMT 
   * @return modified
   */
  @javax.annotation.Nullable
  public Long getModified() {
    return modified;
  }



  public Call notes(List<Note> notes) {
    this.notes = notes;
    return this;
  }

  public Call addNotesItem(Note notesItem) {
    if (this.notes == null) {
      this.notes = new ArrayList<>();
    }
    this.notes.add(notesItem);
    return this;
  }

  /**
   * Notes of call added by an agent
   * @return notes
   */
  @javax.annotation.Nullable
  public List<Note> getNotes() {
    return notes;
  }

  public void setNotes(List<Note> notes) {
    this.notes = notes;
  }


  /**
   * List of call records, each record contains call details like originate time, duration, cost, notes made by agents. A single contact may have a multiple phone numbers. In this case if given call was sent as a part of broadcast with configured retry logic then each call record will contain details about attempted phone number
   * @return records
   */
  @javax.annotation.Nullable
  public List<CallRecord> getRecords() {
    return records;
  }



  /**
   * State of an action (READY, SELECTED, CALLBACK, DISABLED, FINISHED, DNC, DUP, INVALID, TIMEOUT, PERIOD_LIMIT). See [call states and results](https://developers.callfire.com/results-responses-errors.html)
   * @return state
   */
  @javax.annotation.Nullable
  public StateEnum getState() {
    return state;
  }



  public Call toNumber(String toNumber) {
    this.toNumber = toNumber;
    return this;
  }

  /**
   * A recipient&#39;s phone number in E.164 (11-digit) format
   * @return toNumber
   */
  @javax.annotation.Nullable
  public String getToNumber() {
    return toNumber;
  }

  public void setToNumber(String toNumber) {
    this.toNumber = toNumber;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Call call = (Call) o;
    return Objects.equals(this.agentCall, call.agentCall) &&
        Objects.equals(this.attributes, call.attributes) &&
        Objects.equals(this.batchId, call.batchId) &&
        Objects.equals(this.campaignId, call.campaignId) &&
        Objects.equals(this.contact, call.contact) &&
        Objects.equals(this.created, call.created) &&
        Objects.equals(this.finalCallResult, call.finalCallResult) &&
        Objects.equals(this.fromNumber, call.fromNumber) &&
        Objects.equals(this.id, call.id) &&
        Objects.equals(this.inbound, call.inbound) &&
        Objects.equals(this.labels, call.labels) &&
        Objects.equals(this.modified, call.modified) &&
        Objects.equals(this.notes, call.notes) &&
        Objects.equals(this.records, call.records) &&
        Objects.equals(this.state, call.state) &&
        Objects.equals(this.toNumber, call.toNumber);
  }

  @Override
  public int hashCode() {
    return Objects.hash(agentCall, attributes, batchId, campaignId, contact, created, finalCallResult, fromNumber, id, inbound, labels, modified, notes, records, state, toNumber);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Call {\n");
    sb.append("    agentCall: ").append(toIndentedString(agentCall)).append("\n");
    sb.append("    attributes: ").append(toIndentedString(attributes)).append("\n");
    sb.append("    batchId: ").append(toIndentedString(batchId)).append("\n");
    sb.append("    campaignId: ").append(toIndentedString(campaignId)).append("\n");
    sb.append("    contact: ").append(toIndentedString(contact)).append("\n");
    sb.append("    created: ").append(toIndentedString(created)).append("\n");
    sb.append("    finalCallResult: ").append(toIndentedString(finalCallResult)).append("\n");
    sb.append("    fromNumber: ").append(toIndentedString(fromNumber)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    inbound: ").append(toIndentedString(inbound)).append("\n");
    sb.append("    labels: ").append(toIndentedString(labels)).append("\n");
    sb.append("    modified: ").append(toIndentedString(modified)).append("\n");
    sb.append("    notes: ").append(toIndentedString(notes)).append("\n");
    sb.append("    records: ").append(toIndentedString(records)).append("\n");
    sb.append("    state: ").append(toIndentedString(state)).append("\n");
    sb.append("    toNumber: ").append(toIndentedString(toNumber)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("agentCall");
    openapiFields.add("attributes");
    openapiFields.add("batchId");
    openapiFields.add("campaignId");
    openapiFields.add("contact");
    openapiFields.add("created");
    openapiFields.add("finalCallResult");
    openapiFields.add("fromNumber");
    openapiFields.add("id");
    openapiFields.add("inbound");
    openapiFields.add("labels");
    openapiFields.add("modified");
    openapiFields.add("notes");
    openapiFields.add("records");
    openapiFields.add("state");
    openapiFields.add("toNumber");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Call
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Call.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Call is not found in the empty JSON string", Call.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Call.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Call` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `contact`
      if (jsonObj.get("contact") != null && !jsonObj.get("contact").isJsonNull()) {
        Contact.validateJsonElement(jsonObj.get("contact"));
      }
      if ((jsonObj.get("finalCallResult") != null && !jsonObj.get("finalCallResult").isJsonNull()) && !jsonObj.get("finalCallResult").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `finalCallResult` to be a primitive type in the JSON string but got `%s`", jsonObj.get("finalCallResult").toString()));
      }
      // validate the optional field `finalCallResult`
      if (jsonObj.get("finalCallResult") != null && !jsonObj.get("finalCallResult").isJsonNull()) {
        FinalCallResultEnum.validateJsonElement(jsonObj.get("finalCallResult"));
      }
      if ((jsonObj.get("fromNumber") != null && !jsonObj.get("fromNumber").isJsonNull()) && !jsonObj.get("fromNumber").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `fromNumber` to be a primitive type in the JSON string but got `%s`", jsonObj.get("fromNumber").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("labels") != null && !jsonObj.get("labels").isJsonNull() && !jsonObj.get("labels").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `labels` to be an array in the JSON string but got `%s`", jsonObj.get("labels").toString()));
      }
      if (jsonObj.get("notes") != null && !jsonObj.get("notes").isJsonNull()) {
        JsonArray jsonArraynotes = jsonObj.getAsJsonArray("notes");
        if (jsonArraynotes != null) {
          // ensure the json data is an array
          if (!jsonObj.get("notes").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `notes` to be an array in the JSON string but got `%s`", jsonObj.get("notes").toString()));
          }

          // validate the optional field `notes` (array)
          for (int i = 0; i < jsonArraynotes.size(); i++) {
            Note.validateJsonElement(jsonArraynotes.get(i));
          };
        }
      }
      if (jsonObj.get("records") != null && !jsonObj.get("records").isJsonNull()) {
        JsonArray jsonArrayrecords = jsonObj.getAsJsonArray("records");
        if (jsonArrayrecords != null) {
          // ensure the json data is an array
          if (!jsonObj.get("records").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `records` to be an array in the JSON string but got `%s`", jsonObj.get("records").toString()));
          }

          // validate the optional field `records` (array)
          for (int i = 0; i < jsonArrayrecords.size(); i++) {
            CallRecord.validateJsonElement(jsonArrayrecords.get(i));
          };
        }
      }
      if ((jsonObj.get("state") != null && !jsonObj.get("state").isJsonNull()) && !jsonObj.get("state").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `state` to be a primitive type in the JSON string but got `%s`", jsonObj.get("state").toString()));
      }
      // validate the optional field `state`
      if (jsonObj.get("state") != null && !jsonObj.get("state").isJsonNull()) {
        StateEnum.validateJsonElement(jsonObj.get("state"));
      }
      if ((jsonObj.get("toNumber") != null && !jsonObj.get("toNumber").isJsonNull()) && !jsonObj.get("toNumber").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `toNumber` to be a primitive type in the JSON string but got `%s`", jsonObj.get("toNumber").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Call.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Call' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Call> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Call.class));

       return (TypeAdapter<T>) new TypeAdapter<Call>() {
           @Override
           public void write(JsonWriter out, Call value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Call read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Call given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Call
   * @throws IOException if the JSON string is invalid with respect to Call
   */
  public static Call fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Call.class);
  }

  /**
   * Convert an instance of Call to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

