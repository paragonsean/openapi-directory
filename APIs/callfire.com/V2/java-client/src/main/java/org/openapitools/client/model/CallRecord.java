/*
 * CallFire API Documentation
 * CallFire
 *
 * The version of the OpenAPI document: V2
 * Contact: support@callfire.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.LinkedHashSet;
import java.util.List;
import java.util.Set;
import org.openapitools.client.model.CallRecording;
import org.openapitools.client.model.Note;
import org.openapitools.client.model.QuestionResponse;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Represents a call sent to a contact&#39;s number
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T09:59:09.684594-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class CallRecord {
  public static final String SERIALIZED_NAME_ANSWER_TIME = "answerTime";
  @SerializedName(SERIALIZED_NAME_ANSWER_TIME)
  private Long answerTime;

  public static final String SERIALIZED_NAME_BILLED_AMOUNT = "billedAmount";
  @SerializedName(SERIALIZED_NAME_BILLED_AMOUNT)
  private Float billedAmount;

  public static final String SERIALIZED_NAME_CALLER_NAME = "callerName";
  @SerializedName(SERIALIZED_NAME_CALLER_NAME)
  private String callerName;

  public static final String SERIALIZED_NAME_DURATION = "duration";
  @SerializedName(SERIALIZED_NAME_DURATION)
  private Long duration;

  public static final String SERIALIZED_NAME_FINISH_TIME = "finishTime";
  @SerializedName(SERIALIZED_NAME_FINISH_TIME)
  private Long finishTime;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private Long id;

  public static final String SERIALIZED_NAME_LABELS = "labels";
  @SerializedName(SERIALIZED_NAME_LABELS)
  private Set<String> labels = new LinkedHashSet<>();

  public static final String SERIALIZED_NAME_NOTES = "notes";
  @SerializedName(SERIALIZED_NAME_NOTES)
  private List<Note> notes = new ArrayList<>();

  public static final String SERIALIZED_NAME_ORIGINATE_TIME = "originateTime";
  @SerializedName(SERIALIZED_NAME_ORIGINATE_TIME)
  private Long originateTime;

  public static final String SERIALIZED_NAME_QUESTION_RESPONSES = "questionResponses";
  @SerializedName(SERIALIZED_NAME_QUESTION_RESPONSES)
  private List<QuestionResponse> questionResponses = new ArrayList<>();

  public static final String SERIALIZED_NAME_RECORDINGS = "recordings";
  @SerializedName(SERIALIZED_NAME_RECORDINGS)
  private List<CallRecording> recordings = new ArrayList<>();

  /**
   * ~
   */
  @JsonAdapter(ResultEnum.Adapter.class)
  public enum ResultEnum {
    LA("LA"),
    
    AM("AM"),
    
    BUSY("BUSY"),
    
    DNC("DNC"),
    
    XFER("XFER"),
    
    NO_ANS("NO_ANS"),
    
    XFER_LEG("XFER_LEG"),
    
    INTERNAL_ERROR("INTERNAL_ERROR"),
    
    CARRIER_ERROR("CARRIER_ERROR"),
    
    CARRIER_TEMP_ERROR("CARRIER_TEMP_ERROR"),
    
    UNDIALED("UNDIALED"),
    
    SD("SD"),
    
    POSTPONED("POSTPONED"),
    
    ABANDONED("ABANDONED"),
    
    SKIPPED("SKIPPED");

    private String value;

    ResultEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ResultEnum fromValue(String value) {
      for (ResultEnum b : ResultEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ResultEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ResultEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ResultEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ResultEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      ResultEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_RESULT = "result";
  @SerializedName(SERIALIZED_NAME_RESULT)
  private ResultEnum result;

  public static final String SERIALIZED_NAME_SWITCH_ID = "switchId";
  @SerializedName(SERIALIZED_NAME_SWITCH_ID)
  private String switchId;

  public static final String SERIALIZED_NAME_TO_NUMBER = "toNumber";
  @SerializedName(SERIALIZED_NAME_TO_NUMBER)
  private String toNumber;

  public CallRecord() {
  }

  public CallRecord(
     Long answerTime, 
     Float billedAmount, 
     String callerName, 
     Long duration, 
     Long finishTime, 
     Set<String> labels, 
     Long originateTime, 
     ResultEnum result, 
     String switchId, 
     String toNumber
  ) {
    this();
    this.answerTime = answerTime;
    this.billedAmount = billedAmount;
    this.callerName = callerName;
    this.duration = duration;
    this.finishTime = finishTime;
    this.labels = labels;
    this.originateTime = originateTime;
    this.result = result;
    this.switchId = switchId;
    this.toNumber = toNumber;
  }

  /**
   * Timestamp when call was answered, formatted in unix time milliseconds (read only). Example: 1473781817000 for Sat, 05 Jan 1985 14:03:37 GMT
   * @return answerTime
   */
  @javax.annotation.Nullable
  public Long getAnswerTime() {
    return answerTime;
  }



  /**
   * A cost of the call
   * @return billedAmount
   */
  @javax.annotation.Nullable
  public Float getBilledAmount() {
    return billedAmount;
  }



  /**
   * ~
   * @return callerName
   */
  @javax.annotation.Nullable
  public String getCallerName() {
    return callerName;
  }



  /**
   * Duration of the call in seconds
   * @return duration
   */
  @javax.annotation.Nullable
  public Long getDuration() {
    return duration;
  }



  /**
   * Timestamp when call was finished, formatted in unix time milliseconds (read only). Example: 1473781817000 for Sat, 05 Jan 1985 14:03:37 GMT
   * @return finishTime
   */
  @javax.annotation.Nullable
  public Long getFinishTime() {
    return finishTime;
  }



  public CallRecord id(Long id) {
    this.id = id;
    return this;
  }

  /**
   * An id of a call record
   * @return id
   */
  @javax.annotation.Nullable
  public Long getId() {
    return id;
  }

  public void setId(Long id) {
    this.id = id;
  }


  /**
   * Labels associated with a call action
   * @return labels
   */
  @javax.annotation.Nullable
  public Set<String> getLabels() {
    return labels;
  }



  public CallRecord notes(List<Note> notes) {
    this.notes = notes;
    return this;
  }

  public CallRecord addNotesItem(Note notesItem) {
    if (this.notes == null) {
      this.notes = new ArrayList<>();
    }
    this.notes.add(notesItem);
    return this;
  }

  /**
   * Notes of call added by agent
   * @return notes
   */
  @javax.annotation.Nullable
  public List<Note> getNotes() {
    return notes;
  }

  public void setNotes(List<Note> notes) {
    this.notes = notes;
  }


  /**
   * A date and time (timestamp) when call was originated by CallFire platform and went to downstream provider, formatted in unix time milliseconds (read only). Example: 1473781817000 
   * @return originateTime
   */
  @javax.annotation.Nullable
  public Long getOriginateTime() {
    return originateTime;
  }



  public CallRecord questionResponses(List<QuestionResponse> questionResponses) {
    this.questionResponses = questionResponses;
    return this;
  }

  public CallRecord addQuestionResponsesItem(QuestionResponse questionResponsesItem) {
    if (this.questionResponses == null) {
      this.questionResponses = new ArrayList<>();
    }
    this.questionResponses.add(questionResponsesItem);
    return this;
  }

  /**
   * Notes of call added by an agent
   * @return questionResponses
   */
  @javax.annotation.Nullable
  public List<QuestionResponse> getQuestionResponses() {
    return questionResponses;
  }

  public void setQuestionResponses(List<QuestionResponse> questionResponses) {
    this.questionResponses = questionResponses;
  }


  public CallRecord recordings(List<CallRecording> recordings) {
    this.recordings = recordings;
    return this;
  }

  public CallRecord addRecordingsItem(CallRecording recordingsItem) {
    if (this.recordings == null) {
      this.recordings = new ArrayList<>();
    }
    this.recordings.add(recordingsItem);
    return this;
  }

  /**
   * A list of voice recordings of the call
   * @return recordings
   */
  @javax.annotation.Nullable
  public List<CallRecording> getRecordings() {
    return recordings;
  }

  public void setRecordings(List<CallRecording> recordings) {
    this.recordings = recordings;
  }


  /**
   * ~
   * @return result
   */
  @javax.annotation.Nullable
  public ResultEnum getResult() {
    return result;
  }



  /**
   * ~
   * @return switchId
   */
  @javax.annotation.Nullable
  public String getSwitchId() {
    return switchId;
  }



  /**
   * A phone number to which a call was addressed. Phone number in E.164 format (11-digit). Example: 12132000384
   * @return toNumber
   */
  @javax.annotation.Nullable
  public String getToNumber() {
    return toNumber;
  }




  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CallRecord callRecord = (CallRecord) o;
    return Objects.equals(this.answerTime, callRecord.answerTime) &&
        Objects.equals(this.billedAmount, callRecord.billedAmount) &&
        Objects.equals(this.callerName, callRecord.callerName) &&
        Objects.equals(this.duration, callRecord.duration) &&
        Objects.equals(this.finishTime, callRecord.finishTime) &&
        Objects.equals(this.id, callRecord.id) &&
        Objects.equals(this.labels, callRecord.labels) &&
        Objects.equals(this.notes, callRecord.notes) &&
        Objects.equals(this.originateTime, callRecord.originateTime) &&
        Objects.equals(this.questionResponses, callRecord.questionResponses) &&
        Objects.equals(this.recordings, callRecord.recordings) &&
        Objects.equals(this.result, callRecord.result) &&
        Objects.equals(this.switchId, callRecord.switchId) &&
        Objects.equals(this.toNumber, callRecord.toNumber);
  }

  @Override
  public int hashCode() {
    return Objects.hash(answerTime, billedAmount, callerName, duration, finishTime, id, labels, notes, originateTime, questionResponses, recordings, result, switchId, toNumber);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CallRecord {\n");
    sb.append("    answerTime: ").append(toIndentedString(answerTime)).append("\n");
    sb.append("    billedAmount: ").append(toIndentedString(billedAmount)).append("\n");
    sb.append("    callerName: ").append(toIndentedString(callerName)).append("\n");
    sb.append("    duration: ").append(toIndentedString(duration)).append("\n");
    sb.append("    finishTime: ").append(toIndentedString(finishTime)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    labels: ").append(toIndentedString(labels)).append("\n");
    sb.append("    notes: ").append(toIndentedString(notes)).append("\n");
    sb.append("    originateTime: ").append(toIndentedString(originateTime)).append("\n");
    sb.append("    questionResponses: ").append(toIndentedString(questionResponses)).append("\n");
    sb.append("    recordings: ").append(toIndentedString(recordings)).append("\n");
    sb.append("    result: ").append(toIndentedString(result)).append("\n");
    sb.append("    switchId: ").append(toIndentedString(switchId)).append("\n");
    sb.append("    toNumber: ").append(toIndentedString(toNumber)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("answerTime");
    openapiFields.add("billedAmount");
    openapiFields.add("callerName");
    openapiFields.add("duration");
    openapiFields.add("finishTime");
    openapiFields.add("id");
    openapiFields.add("labels");
    openapiFields.add("notes");
    openapiFields.add("originateTime");
    openapiFields.add("questionResponses");
    openapiFields.add("recordings");
    openapiFields.add("result");
    openapiFields.add("switchId");
    openapiFields.add("toNumber");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to CallRecord
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!CallRecord.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CallRecord is not found in the empty JSON string", CallRecord.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!CallRecord.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CallRecord` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("callerName") != null && !jsonObj.get("callerName").isJsonNull()) && !jsonObj.get("callerName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `callerName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("callerName").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("labels") != null && !jsonObj.get("labels").isJsonNull() && !jsonObj.get("labels").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `labels` to be an array in the JSON string but got `%s`", jsonObj.get("labels").toString()));
      }
      if (jsonObj.get("notes") != null && !jsonObj.get("notes").isJsonNull()) {
        JsonArray jsonArraynotes = jsonObj.getAsJsonArray("notes");
        if (jsonArraynotes != null) {
          // ensure the json data is an array
          if (!jsonObj.get("notes").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `notes` to be an array in the JSON string but got `%s`", jsonObj.get("notes").toString()));
          }

          // validate the optional field `notes` (array)
          for (int i = 0; i < jsonArraynotes.size(); i++) {
            Note.validateJsonElement(jsonArraynotes.get(i));
          };
        }
      }
      if (jsonObj.get("questionResponses") != null && !jsonObj.get("questionResponses").isJsonNull()) {
        JsonArray jsonArrayquestionResponses = jsonObj.getAsJsonArray("questionResponses");
        if (jsonArrayquestionResponses != null) {
          // ensure the json data is an array
          if (!jsonObj.get("questionResponses").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `questionResponses` to be an array in the JSON string but got `%s`", jsonObj.get("questionResponses").toString()));
          }

          // validate the optional field `questionResponses` (array)
          for (int i = 0; i < jsonArrayquestionResponses.size(); i++) {
            QuestionResponse.validateJsonElement(jsonArrayquestionResponses.get(i));
          };
        }
      }
      if (jsonObj.get("recordings") != null && !jsonObj.get("recordings").isJsonNull()) {
        JsonArray jsonArrayrecordings = jsonObj.getAsJsonArray("recordings");
        if (jsonArrayrecordings != null) {
          // ensure the json data is an array
          if (!jsonObj.get("recordings").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `recordings` to be an array in the JSON string but got `%s`", jsonObj.get("recordings").toString()));
          }

          // validate the optional field `recordings` (array)
          for (int i = 0; i < jsonArrayrecordings.size(); i++) {
            CallRecording.validateJsonElement(jsonArrayrecordings.get(i));
          };
        }
      }
      if ((jsonObj.get("result") != null && !jsonObj.get("result").isJsonNull()) && !jsonObj.get("result").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `result` to be a primitive type in the JSON string but got `%s`", jsonObj.get("result").toString()));
      }
      // validate the optional field `result`
      if (jsonObj.get("result") != null && !jsonObj.get("result").isJsonNull()) {
        ResultEnum.validateJsonElement(jsonObj.get("result"));
      }
      if ((jsonObj.get("switchId") != null && !jsonObj.get("switchId").isJsonNull()) && !jsonObj.get("switchId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `switchId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("switchId").toString()));
      }
      if ((jsonObj.get("toNumber") != null && !jsonObj.get("toNumber").isJsonNull()) && !jsonObj.get("toNumber").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `toNumber` to be a primitive type in the JSON string but got `%s`", jsonObj.get("toNumber").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CallRecord.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CallRecord' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CallRecord> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CallRecord.class));

       return (TypeAdapter<T>) new TypeAdapter<CallRecord>() {
           @Override
           public void write(JsonWriter out, CallRecord value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CallRecord read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of CallRecord given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of CallRecord
   * @throws IOException if the JSON string is invalid with respect to CallRecord
   */
  public static CallRecord fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CallRecord.class);
  }

  /**
   * Convert an instance of CallRecord to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

