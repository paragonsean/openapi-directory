/*
 * CallFire API Documentation
 * CallFire
 *
 * The version of the OpenAPI document: V2
 * Contact: support@callfire.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.math.BigDecimal;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Contains statistics of billing plan usage
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T09:59:09.684594-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class CreditUsage {
  public static final String SERIALIZED_NAME_CALLS_DURATION_MINUTES = "callsDurationMinutes";
  @SerializedName(SERIALIZED_NAME_CALLS_DURATION_MINUTES)
  private Integer callsDurationMinutes;

  public static final String SERIALIZED_NAME_CREDITS_USED = "creditsUsed";
  @SerializedName(SERIALIZED_NAME_CREDITS_USED)
  private BigDecimal creditsUsed;

  public static final String SERIALIZED_NAME_INTERVAL_BEGIN = "intervalBegin";
  @SerializedName(SERIALIZED_NAME_INTERVAL_BEGIN)
  private Long intervalBegin;

  public static final String SERIALIZED_NAME_INTERVAL_END = "intervalEnd";
  @SerializedName(SERIALIZED_NAME_INTERVAL_END)
  private Long intervalEnd;

  public static final String SERIALIZED_NAME_TEXTS_SENT = "textsSent";
  @SerializedName(SERIALIZED_NAME_TEXTS_SENT)
  private Integer textsSent;

  public CreditUsage() {
  }

  public CreditUsage(
     Integer callsDurationMinutes, 
     BigDecimal creditsUsed, 
     Long intervalBegin, 
     Long intervalEnd, 
     Integer textsSent
  ) {
    this();
    this.callsDurationMinutes = callsDurationMinutes;
    this.creditsUsed = creditsUsed;
    this.intervalBegin = intervalBegin;
    this.intervalEnd = intervalEnd;
    this.textsSent = textsSent;
  }

  /**
   * Sum of calls duration rounded to nearest whole minute
   * @return callsDurationMinutes
   */
  @javax.annotation.Nullable
  public Integer getCallsDurationMinutes() {
    return callsDurationMinutes;
  }



  /**
   * Total credits used calls and texts.
   * @return creditsUsed
   */
  @javax.annotation.Nullable
  public BigDecimal getCreditsUsed() {
    return creditsUsed;
  }



  /**
   * Start of usage period formatted in unix time milliseconds. Example: 1473781817000 for Sat, 05 Jan 1985 14:03:37 GMT
   * @return intervalBegin
   */
  @javax.annotation.Nullable
  public Long getIntervalBegin() {
    return intervalBegin;
  }



  /**
   * End of usage period formatted in unix time milliseconds. Example: 1473781817000 for Sat, 05 Jan 1985 14:03:37 GMT
   * @return intervalEnd
   */
  @javax.annotation.Nullable
  public Long getIntervalEnd() {
    return intervalEnd;
  }



  /**
   * Number of texts sent
   * @return textsSent
   */
  @javax.annotation.Nullable
  public Integer getTextsSent() {
    return textsSent;
  }




  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CreditUsage creditUsage = (CreditUsage) o;
    return Objects.equals(this.callsDurationMinutes, creditUsage.callsDurationMinutes) &&
        Objects.equals(this.creditsUsed, creditUsage.creditsUsed) &&
        Objects.equals(this.intervalBegin, creditUsage.intervalBegin) &&
        Objects.equals(this.intervalEnd, creditUsage.intervalEnd) &&
        Objects.equals(this.textsSent, creditUsage.textsSent);
  }

  @Override
  public int hashCode() {
    return Objects.hash(callsDurationMinutes, creditsUsed, intervalBegin, intervalEnd, textsSent);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CreditUsage {\n");
    sb.append("    callsDurationMinutes: ").append(toIndentedString(callsDurationMinutes)).append("\n");
    sb.append("    creditsUsed: ").append(toIndentedString(creditsUsed)).append("\n");
    sb.append("    intervalBegin: ").append(toIndentedString(intervalBegin)).append("\n");
    sb.append("    intervalEnd: ").append(toIndentedString(intervalEnd)).append("\n");
    sb.append("    textsSent: ").append(toIndentedString(textsSent)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("callsDurationMinutes");
    openapiFields.add("creditsUsed");
    openapiFields.add("intervalBegin");
    openapiFields.add("intervalEnd");
    openapiFields.add("textsSent");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to CreditUsage
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!CreditUsage.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CreditUsage is not found in the empty JSON string", CreditUsage.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!CreditUsage.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CreditUsage` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CreditUsage.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CreditUsage' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CreditUsage> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CreditUsage.class));

       return (TypeAdapter<T>) new TypeAdapter<CreditUsage>() {
           @Override
           public void write(JsonWriter out, CreditUsage value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CreditUsage read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of CreditUsage given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of CreditUsage
   * @throws IOException if the JSON string is invalid with respect to CreditUsage
   */
  public static CreditUsage fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CreditUsage.class);
  }

  /**
   * Convert an instance of CreditUsage to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

