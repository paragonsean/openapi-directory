/*
 * CallFire API Documentation
 * CallFire
 *
 * The version of the OpenAPI document: V2
 * Contact: support@callfire.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.Call;
import org.openapitools.client.model.Text;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Contains history of all calls and texts addressed to a given contact
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T09:59:09.684594-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ContactHistory {
  public static final String SERIALIZED_NAME_CALLS = "calls";
  @SerializedName(SERIALIZED_NAME_CALLS)
  private List<Call> calls = new ArrayList<>();

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private Long id;

  public static final String SERIALIZED_NAME_TEXTS = "texts";
  @SerializedName(SERIALIZED_NAME_TEXTS)
  private List<Text> texts = new ArrayList<>();

  public ContactHistory() {
  }

  public ContactHistory calls(List<Call> calls) {
    this.calls = calls;
    return this;
  }

  public ContactHistory addCallsItem(Call callsItem) {
    if (this.calls == null) {
      this.calls = new ArrayList<>();
    }
    this.calls.add(callsItem);
    return this;
  }

  /**
   * List of Call objects addressed to a given contact
   * @return calls
   */
  @javax.annotation.Nullable
  public List<Call> getCalls() {
    return calls;
  }

  public void setCalls(List<Call> calls) {
    this.calls = calls;
  }


  public ContactHistory id(Long id) {
    this.id = id;
    return this;
  }

  /**
   * An id of a contact
   * @return id
   */
  @javax.annotation.Nullable
  public Long getId() {
    return id;
  }

  public void setId(Long id) {
    this.id = id;
  }


  public ContactHistory texts(List<Text> texts) {
    this.texts = texts;
    return this;
  }

  public ContactHistory addTextsItem(Text textsItem) {
    if (this.texts == null) {
      this.texts = new ArrayList<>();
    }
    this.texts.add(textsItem);
    return this;
  }

  /**
   * List of Text objects addressed to a given contact
   * @return texts
   */
  @javax.annotation.Nullable
  public List<Text> getTexts() {
    return texts;
  }

  public void setTexts(List<Text> texts) {
    this.texts = texts;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ContactHistory contactHistory = (ContactHistory) o;
    return Objects.equals(this.calls, contactHistory.calls) &&
        Objects.equals(this.id, contactHistory.id) &&
        Objects.equals(this.texts, contactHistory.texts);
  }

  @Override
  public int hashCode() {
    return Objects.hash(calls, id, texts);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ContactHistory {\n");
    sb.append("    calls: ").append(toIndentedString(calls)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    texts: ").append(toIndentedString(texts)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("calls");
    openapiFields.add("id");
    openapiFields.add("texts");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ContactHistory
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ContactHistory.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ContactHistory is not found in the empty JSON string", ContactHistory.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ContactHistory.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ContactHistory` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (jsonObj.get("calls") != null && !jsonObj.get("calls").isJsonNull()) {
        JsonArray jsonArraycalls = jsonObj.getAsJsonArray("calls");
        if (jsonArraycalls != null) {
          // ensure the json data is an array
          if (!jsonObj.get("calls").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `calls` to be an array in the JSON string but got `%s`", jsonObj.get("calls").toString()));
          }

          // validate the optional field `calls` (array)
          for (int i = 0; i < jsonArraycalls.size(); i++) {
            Call.validateJsonElement(jsonArraycalls.get(i));
          };
        }
      }
      if (jsonObj.get("texts") != null && !jsonObj.get("texts").isJsonNull()) {
        JsonArray jsonArraytexts = jsonObj.getAsJsonArray("texts");
        if (jsonArraytexts != null) {
          // ensure the json data is an array
          if (!jsonObj.get("texts").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `texts` to be an array in the JSON string but got `%s`", jsonObj.get("texts").toString()));
          }

          // validate the optional field `texts` (array)
          for (int i = 0; i < jsonArraytexts.size(); i++) {
            Text.validateJsonElement(jsonArraytexts.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ContactHistory.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ContactHistory' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ContactHistory> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ContactHistory.class));

       return (TypeAdapter<T>) new TypeAdapter<ContactHistory>() {
           @Override
           public void write(JsonWriter out, ContactHistory value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ContactHistory read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ContactHistory given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ContactHistory
   * @throws IOException if the JSON string is invalid with respect to ContactHistory
   */
  public static ContactHistory fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ContactHistory.class);
  }

  /**
   * Convert an instance of ContactHistory to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

