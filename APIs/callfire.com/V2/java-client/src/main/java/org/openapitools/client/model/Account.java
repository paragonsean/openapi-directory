/*
 * CallFire API Documentation
 * CallFire
 *
 * The version of the OpenAPI document: V2
 * Contact: support@callfire.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.LinkedHashSet;
import java.util.Set;
import org.openapitools.client.model.DateTimeZone;
import org.openapitools.client.model.Duration;
import org.openapitools.client.model.LocalTimeZoneRestriction;
import org.openapitools.client.model.Locale;
import org.openapitools.client.model.TimeZone;
import org.openapitools.client.model.ZoneId;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Object represents user account in Callfire system
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T09:59:09.684594-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Account {
  public static final String SERIALIZED_NAME_ACTIVE = "active";
  @SerializedName(SERIALIZED_NAME_ACTIVE)
  private Boolean active;

  public static final String SERIALIZED_NAME_ADDRESS = "address";
  @SerializedName(SERIALIZED_NAME_ADDRESS)
  private String address;

  public static final String SERIALIZED_NAME_AGE = "age";
  @SerializedName(SERIALIZED_NAME_AGE)
  private Duration age;

  public static final String SERIALIZED_NAME_AGENCY_MANAGED_ACCOUNTS = "agencyManagedAccounts";
  @SerializedName(SERIALIZED_NAME_AGENCY_MANAGED_ACCOUNTS)
  private Boolean agencyManagedAccounts;

  public static final String SERIALIZED_NAME_ALLOWED_TO_CREATE_CAMPAIGN = "allowedToCreateCampaign";
  @SerializedName(SERIALIZED_NAME_ALLOWED_TO_CREATE_CAMPAIGN)
  private Boolean allowedToCreateCampaign;

  public static final String SERIALIZED_NAME_API_CALL_LIMIT = "apiCallLimit";
  @SerializedName(SERIALIZED_NAME_API_CALL_LIMIT)
  private Integer apiCallLimit;

  public static final String SERIALIZED_NAME_ARCHIVED = "archived";
  @SerializedName(SERIALIZED_NAME_ARCHIVED)
  private Boolean archived;

  public static final String SERIALIZED_NAME_AUTO_ADD_DO_NOT_CONTACT = "autoAddDoNotContact";
  @SerializedName(SERIALIZED_NAME_AUTO_ADD_DO_NOT_CONTACT)
  private Boolean autoAddDoNotContact;

  /**
   * ~
   */
  @JsonAdapter(BrandEnum.Adapter.class)
  public enum BrandEnum {
    EZTEXTING("EZTEXTING"),
    
    CLUBTEXTING("CLUBTEXTING"),
    
    GROUPTEXTING("GROUPTEXTING"),
    
    TELLMYCELL("TELLMYCELL"),
    
    EZ("EZ"),
    
    CALLFIRE("CALLFIRE"),
    
    TESLA("TESLA");

    private String value;

    BrandEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static BrandEnum fromValue(String value) {
      for (BrandEnum b : BrandEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<BrandEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final BrandEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public BrandEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return BrandEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      BrandEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_BRAND = "brand";
  @SerializedName(SERIALIZED_NAME_BRAND)
  private BrandEnum brand;

  public static final String SERIALIZED_NAME_CANCELED = "canceled";
  @SerializedName(SERIALIZED_NAME_CANCELED)
  private Boolean canceled;

  public static final String SERIALIZED_NAME_CANCELED_OR_ARCHIVED = "canceledOrArchived";
  @SerializedName(SERIALIZED_NAME_CANCELED_OR_ARCHIVED)
  private Boolean canceledOrArchived;

  public static final String SERIALIZED_NAME_CITY = "city";
  @SerializedName(SERIALIZED_NAME_CITY)
  private String city;

  public static final String SERIALIZED_NAME_COMPANY_NAME = "companyName";
  @SerializedName(SERIALIZED_NAME_COMPANY_NAME)
  private String companyName;

  /**
   * ~
   */
  @JsonAdapter(CountryEnum.Adapter.class)
  public enum CountryEnum {
    US("US"),
    
    CA("CA");

    private String value;

    CountryEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static CountryEnum fromValue(String value) {
      for (CountryEnum b : CountryEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<CountryEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final CountryEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public CountryEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return CountryEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      CountryEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_COUNTRY = "country";
  @SerializedName(SERIALIZED_NAME_COUNTRY)
  private CountryEnum country;

  /**
   * ~
   */
  @JsonAdapter(CountryOrDefaultEnum.Adapter.class)
  public enum CountryOrDefaultEnum {
    US("US"),
    
    CA("CA");

    private String value;

    CountryOrDefaultEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static CountryOrDefaultEnum fromValue(String value) {
      for (CountryOrDefaultEnum b : CountryOrDefaultEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<CountryOrDefaultEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final CountryOrDefaultEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public CountryOrDefaultEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return CountryOrDefaultEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      CountryOrDefaultEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_COUNTRY_OR_DEFAULT = "countryOrDefault";
  @SerializedName(SERIALIZED_NAME_COUNTRY_OR_DEFAULT)
  private CountryOrDefaultEnum countryOrDefault;

  public static final String SERIALIZED_NAME_CREATED = "created";
  @SerializedName(SERIALIZED_NAME_CREATED)
  private OffsetDateTime created;

  public static final String SERIALIZED_NAME_DATE_TIME_ZONE = "dateTimeZone";
  @SerializedName(SERIALIZED_NAME_DATE_TIME_ZONE)
  private DateTimeZone dateTimeZone;

  public static final String SERIALIZED_NAME_DEFAULT_NOTIFICATION_TTL_MILLIS = "defaultNotificationTtlMillis";
  @SerializedName(SERIALIZED_NAME_DEFAULT_NOTIFICATION_TTL_MILLIS)
  private Long defaultNotificationTtlMillis;

  public static final String SERIALIZED_NAME_DEFAULT_NUMBER_ID = "defaultNumberId";
  @SerializedName(SERIALIZED_NAME_DEFAULT_NUMBER_ID)
  private Long defaultNumberId;

  public static final String SERIALIZED_NAME_EIN = "ein";
  @SerializedName(SERIALIZED_NAME_EIN)
  private String ein;

  /**
   * ~
   */
  @JsonAdapter(EntityTypeEnum.Adapter.class)
  public enum EntityTypeEnum {
    SP("SP"),
    
    COMPANY("COMPANY");

    private String value;

    EntityTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static EntityTypeEnum fromValue(String value) {
      for (EntityTypeEnum b : EntityTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<EntityTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final EntityTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public EntityTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return EntityTypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      EntityTypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_ENTITY_TYPE = "entityType";
  @SerializedName(SERIALIZED_NAME_ENTITY_TYPE)
  private EntityTypeEnum entityType;

  public static final String SERIALIZED_NAME_EZ = "ez";
  @SerializedName(SERIALIZED_NAME_EZ)
  private Boolean ez;

  public static final String SERIALIZED_NAME_FAILED_VERIFICATION_ATTEMPTS = "failedVerificationAttempts";
  @SerializedName(SERIALIZED_NAME_FAILED_VERIFICATION_ATTEMPTS)
  private Integer failedVerificationAttempts;

  public static final String SERIALIZED_NAME_FROM_NUMBER_POOL = "fromNumberPool";
  @SerializedName(SERIALIZED_NAME_FROM_NUMBER_POOL)
  private String fromNumberPool;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private Long id;

  /**
   * ~
   */
  @JsonAdapter(IndustryEnum.Adapter.class)
  public enum IndustryEnum {
    UNKNOWN("UNKNOWN"),
    
    ADVERTISING("ADVERTISING"),
    
    AUTOMOTIVE("AUTOMOTIVE"),
    
    COLLECTIONS("COLLECTIONS"),
    
    CONSULTING("CONSULTING"),
    
    DECLINE("DECLINE"),
    
    EDUCATION("EDUCATION"),
    
    EMERGENCY("EMERGENCY"),
    
    ENTERTAINMENT("ENTERTAINMENT"),
    
    FINANCE("FINANCE"),
    
    HOSPITALITY("HOSPITALITY"),
    
    HEALTHFITNESS("HEALTHFITNESS"),
    
    HEALTHCARE("HEALTHCARE"),
    
    INSURANCE("INSURANCE"),
    
    LEAD("LEAD"),
    
    OTHER("OTHER"),
    
    POLITICAL("POLITICAL"),
    
    REAL_ESTATE("REAL_ESTATE"),
    
    RETAIL("RETAIL"),
    
    SEARCH_MARKETING("SEARCH_MARKETING"),
    
    TELECOM("TELECOM");

    private String value;

    IndustryEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static IndustryEnum fromValue(String value) {
      for (IndustryEnum b : IndustryEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<IndustryEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final IndustryEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public IndustryEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return IndustryEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      IndustryEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_INDUSTRY = "industry";
  @SerializedName(SERIALIZED_NAME_INDUSTRY)
  private IndustryEnum industry;

  public static final String SERIALIZED_NAME_INDUSTRY_NAME = "industryName";
  @SerializedName(SERIALIZED_NAME_INDUSTRY_NAME)
  private String industryName;

  public static final String SERIALIZED_NAME_KEY = "key";
  @SerializedName(SERIALIZED_NAME_KEY)
  private String key;

  public static final String SERIALIZED_NAME_LOCAL_TIME_ZONE_RESTRICTION = "localTimeZoneRestriction";
  @SerializedName(SERIALIZED_NAME_LOCAL_TIME_ZONE_RESTRICTION)
  private LocalTimeZoneRestriction localTimeZoneRestriction;

  public static final String SERIALIZED_NAME_LOCALE = "locale";
  @SerializedName(SERIALIZED_NAME_LOCALE)
  private Locale locale;

  public static final String SERIALIZED_NAME_MAX_AGENTS = "maxAgents";
  @SerializedName(SERIALIZED_NAME_MAX_AGENTS)
  private Integer maxAgents;

  public static final String SERIALIZED_NAME_MESSAGE_CLASS = "messageClass";
  @SerializedName(SERIALIZED_NAME_MESSAGE_CLASS)
  private String messageClass;

  public static final String SERIALIZED_NAME_MESSAGE_FLOWS = "messageFlows";
  @SerializedName(SERIALIZED_NAME_MESSAGE_FLOWS)
  private Set<String> messageFlows = new LinkedHashSet<>();

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_OUTBOUND_THRESHOLD = "outboundThreshold";
  @SerializedName(SERIALIZED_NAME_OUTBOUND_THRESHOLD)
  private Integer outboundThreshold;

  public static final String SERIALIZED_NAME_RECEIVER_PERIOD_CALL = "receiverPeriodCall";
  @SerializedName(SERIALIZED_NAME_RECEIVER_PERIOD_CALL)
  private Integer receiverPeriodCall;

  public static final String SERIALIZED_NAME_RECEIVER_PERIOD_ENABLED = "receiverPeriodEnabled";
  @SerializedName(SERIALIZED_NAME_RECEIVER_PERIOD_ENABLED)
  private Boolean receiverPeriodEnabled;

  public static final String SERIALIZED_NAME_RECEIVER_PERIOD_GLOBAL = "receiverPeriodGlobal";
  @SerializedName(SERIALIZED_NAME_RECEIVER_PERIOD_GLOBAL)
  private Integer receiverPeriodGlobal;

  public static final String SERIALIZED_NAME_RECEIVER_PERIOD_TEXT = "receiverPeriodText";
  @SerializedName(SERIALIZED_NAME_RECEIVER_PERIOD_TEXT)
  private Integer receiverPeriodText;

  /**
   * ~
   */
  @JsonAdapter(ReceiverPeriodTimeUnitEnum.Adapter.class)
  public enum ReceiverPeriodTimeUnitEnum {
    NANOSECONDS("NANOSECONDS"),
    
    MICROSECONDS("MICROSECONDS"),
    
    MILLISECONDS("MILLISECONDS"),
    
    SECONDS("SECONDS"),
    
    MINUTES("MINUTES"),
    
    HOURS("HOURS"),
    
    DAYS("DAYS");

    private String value;

    ReceiverPeriodTimeUnitEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ReceiverPeriodTimeUnitEnum fromValue(String value) {
      for (ReceiverPeriodTimeUnitEnum b : ReceiverPeriodTimeUnitEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ReceiverPeriodTimeUnitEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ReceiverPeriodTimeUnitEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ReceiverPeriodTimeUnitEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ReceiverPeriodTimeUnitEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      ReceiverPeriodTimeUnitEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_RECEIVER_PERIOD_TIME_UNIT = "receiverPeriodTimeUnit";
  @SerializedName(SERIALIZED_NAME_RECEIVER_PERIOD_TIME_UNIT)
  private ReceiverPeriodTimeUnitEnum receiverPeriodTimeUnit;

  public static final String SERIALIZED_NAME_RETAIN_ONLY_METADATA = "retainOnlyMetadata";
  @SerializedName(SERIALIZED_NAME_RETAIN_ONLY_METADATA)
  private Boolean retainOnlyMetadata;

  public static final String SERIALIZED_NAME_RETAIN_ONLY_METADATA_LAST_DETAIL_RECORD_ID = "retainOnlyMetadataLastDetailRecordId";
  @SerializedName(SERIALIZED_NAME_RETAIN_ONLY_METADATA_LAST_DETAIL_RECORD_ID)
  private Long retainOnlyMetadataLastDetailRecordId;

  public static final String SERIALIZED_NAME_RETAIN_ONLY_METADATA_LAST_MODIFIED = "retainOnlyMetadataLastModified";
  @SerializedName(SERIALIZED_NAME_RETAIN_ONLY_METADATA_LAST_MODIFIED)
  private OffsetDateTime retainOnlyMetadataLastModified;

  public static final String SERIALIZED_NAME_SCRUB = "scrub";
  @SerializedName(SERIALIZED_NAME_SCRUB)
  private Boolean scrub;

  public static final String SERIALIZED_NAME_SHARED_SHORT_CODE_ALLOWED = "sharedShortCodeAllowed";
  @SerializedName(SERIALIZED_NAME_SHARED_SHORT_CODE_ALLOWED)
  private Boolean sharedShortCodeAllowed;

  public static final String SERIALIZED_NAME_SHARED_SHORT_CODE_ID = "sharedShortCodeId";
  @SerializedName(SERIALIZED_NAME_SHARED_SHORT_CODE_ID)
  private Long sharedShortCodeId;

  public static final String SERIALIZED_NAME_SOA_ACCOUNT = "soaAccount";
  @SerializedName(SERIALIZED_NAME_SOA_ACCOUNT)
  private Account soaAccount;

  public static final String SERIALIZED_NAME_START_CAPABLE = "startCapable";
  @SerializedName(SERIALIZED_NAME_START_CAPABLE)
  private Boolean startCapable;

  public static final String SERIALIZED_NAME_STATE = "state";
  @SerializedName(SERIALIZED_NAME_STATE)
  private String state;

  /**
   * ~
   */
  @JsonAdapter(StatusEnum.Adapter.class)
  public enum StatusEnum {
    ACTIVE("ACTIVE"),
    
    PENDING_CANCELLED("PENDING_CANCELLED"),
    
    CANCELLED("CANCELLED"),
    
    ARCHIVING("ARCHIVING"),
    
    ARCHIVED("ARCHIVED");

    private String value;

    StatusEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static StatusEnum fromValue(String value) {
      for (StatusEnum b : StatusEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<StatusEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final StatusEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public StatusEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return StatusEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      StatusEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_STATUS = "status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  private StatusEnum status;

  public static final String SERIALIZED_NAME_TEXT_OUTBOUND_THRESHOLD = "textOutboundThreshold";
  @SerializedName(SERIALIZED_NAME_TEXT_OUTBOUND_THRESHOLD)
  private Integer textOutboundThreshold;

  public static final String SERIALIZED_NAME_TIME_ZONE = "timeZone";
  @SerializedName(SERIALIZED_NAME_TIME_ZONE)
  private TimeZone timeZone;

  public static final String SERIALIZED_NAME_TIME_ZONE_ID = "timeZoneId";
  @SerializedName(SERIALIZED_NAME_TIME_ZONE_ID)
  private ZoneId timeZoneId;

  /**
   * ~
   */
  @JsonAdapter(TrustLevelEnum.Adapter.class)
  public enum TrustLevelEnum {
    LOCKED("LOCKED"),
    
    SUSPENDED("SUSPENDED"),
    
    PROBATION("PROBATION"),
    
    NORMAL("NORMAL"),
    
    TRUSTED("TRUSTED");

    private String value;

    TrustLevelEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static TrustLevelEnum fromValue(String value) {
      for (TrustLevelEnum b : TrustLevelEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<TrustLevelEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final TrustLevelEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public TrustLevelEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return TrustLevelEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      TrustLevelEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_TRUST_LEVEL = "trustLevel";
  @SerializedName(SERIALIZED_NAME_TRUST_LEVEL)
  private TrustLevelEnum trustLevel;

  public static final String SERIALIZED_NAME_TSR_AGREEMENT = "tsrAgreement";
  @SerializedName(SERIALIZED_NAME_TSR_AGREEMENT)
  private OffsetDateTime tsrAgreement;

  public static final String SERIALIZED_NAME_TSR_INITIALS = "tsrInitials";
  @SerializedName(SERIALIZED_NAME_TSR_INITIALS)
  private String tsrInitials;

  public static final String SERIALIZED_NAME_UI_CONTEXT = "uiContext";
  @SerializedName(SERIALIZED_NAME_UI_CONTEXT)
  private String uiContext;

  public static final String SERIALIZED_NAME_UNIVERSAL = "universal";
  @SerializedName(SERIALIZED_NAME_UNIVERSAL)
  private Boolean universal;

  public static final String SERIALIZED_NAME_WEBSITE = "website";
  @SerializedName(SERIALIZED_NAME_WEBSITE)
  private String website;

  public static final String SERIALIZED_NAME_ZIPCODE = "zipcode";
  @SerializedName(SERIALIZED_NAME_ZIPCODE)
  private String zipcode;

  public Account() {
  }

  public Account active(Boolean active) {
    this.active = active;
    return this;
  }

  /**
   * ~
   * @return active
   */
  @javax.annotation.Nullable
  public Boolean getActive() {
    return active;
  }

  public void setActive(Boolean active) {
    this.active = active;
  }


  public Account address(String address) {
    this.address = address;
    return this;
  }

  /**
   * ~
   * @return address
   */
  @javax.annotation.Nullable
  public String getAddress() {
    return address;
  }

  public void setAddress(String address) {
    this.address = address;
  }


  public Account age(Duration age) {
    this.age = age;
    return this;
  }

  /**
   * Get age
   * @return age
   */
  @javax.annotation.Nullable
  public Duration getAge() {
    return age;
  }

  public void setAge(Duration age) {
    this.age = age;
  }


  public Account agencyManagedAccounts(Boolean agencyManagedAccounts) {
    this.agencyManagedAccounts = agencyManagedAccounts;
    return this;
  }

  /**
   * ~
   * @return agencyManagedAccounts
   */
  @javax.annotation.Nullable
  public Boolean getAgencyManagedAccounts() {
    return agencyManagedAccounts;
  }

  public void setAgencyManagedAccounts(Boolean agencyManagedAccounts) {
    this.agencyManagedAccounts = agencyManagedAccounts;
  }


  public Account allowedToCreateCampaign(Boolean allowedToCreateCampaign) {
    this.allowedToCreateCampaign = allowedToCreateCampaign;
    return this;
  }

  /**
   * ~
   * @return allowedToCreateCampaign
   */
  @javax.annotation.Nullable
  public Boolean getAllowedToCreateCampaign() {
    return allowedToCreateCampaign;
  }

  public void setAllowedToCreateCampaign(Boolean allowedToCreateCampaign) {
    this.allowedToCreateCampaign = allowedToCreateCampaign;
  }


  public Account apiCallLimit(Integer apiCallLimit) {
    this.apiCallLimit = apiCallLimit;
    return this;
  }

  /**
   * ~
   * @return apiCallLimit
   */
  @javax.annotation.Nullable
  public Integer getApiCallLimit() {
    return apiCallLimit;
  }

  public void setApiCallLimit(Integer apiCallLimit) {
    this.apiCallLimit = apiCallLimit;
  }


  public Account archived(Boolean archived) {
    this.archived = archived;
    return this;
  }

  /**
   * ~
   * @return archived
   */
  @javax.annotation.Nullable
  public Boolean getArchived() {
    return archived;
  }

  public void setArchived(Boolean archived) {
    this.archived = archived;
  }


  public Account autoAddDoNotContact(Boolean autoAddDoNotContact) {
    this.autoAddDoNotContact = autoAddDoNotContact;
    return this;
  }

  /**
   * ~
   * @return autoAddDoNotContact
   */
  @javax.annotation.Nullable
  public Boolean getAutoAddDoNotContact() {
    return autoAddDoNotContact;
  }

  public void setAutoAddDoNotContact(Boolean autoAddDoNotContact) {
    this.autoAddDoNotContact = autoAddDoNotContact;
  }


  public Account brand(BrandEnum brand) {
    this.brand = brand;
    return this;
  }

  /**
   * ~
   * @return brand
   */
  @javax.annotation.Nullable
  public BrandEnum getBrand() {
    return brand;
  }

  public void setBrand(BrandEnum brand) {
    this.brand = brand;
  }


  public Account canceled(Boolean canceled) {
    this.canceled = canceled;
    return this;
  }

  /**
   * ~
   * @return canceled
   */
  @javax.annotation.Nullable
  public Boolean getCanceled() {
    return canceled;
  }

  public void setCanceled(Boolean canceled) {
    this.canceled = canceled;
  }


  public Account canceledOrArchived(Boolean canceledOrArchived) {
    this.canceledOrArchived = canceledOrArchived;
    return this;
  }

  /**
   * ~
   * @return canceledOrArchived
   */
  @javax.annotation.Nullable
  public Boolean getCanceledOrArchived() {
    return canceledOrArchived;
  }

  public void setCanceledOrArchived(Boolean canceledOrArchived) {
    this.canceledOrArchived = canceledOrArchived;
  }


  public Account city(String city) {
    this.city = city;
    return this;
  }

  /**
   * ~
   * @return city
   */
  @javax.annotation.Nullable
  public String getCity() {
    return city;
  }

  public void setCity(String city) {
    this.city = city;
  }


  public Account companyName(String companyName) {
    this.companyName = companyName;
    return this;
  }

  /**
   * ~
   * @return companyName
   */
  @javax.annotation.Nullable
  public String getCompanyName() {
    return companyName;
  }

  public void setCompanyName(String companyName) {
    this.companyName = companyName;
  }


  public Account country(CountryEnum country) {
    this.country = country;
    return this;
  }

  /**
   * ~
   * @return country
   */
  @javax.annotation.Nullable
  public CountryEnum getCountry() {
    return country;
  }

  public void setCountry(CountryEnum country) {
    this.country = country;
  }


  public Account countryOrDefault(CountryOrDefaultEnum countryOrDefault) {
    this.countryOrDefault = countryOrDefault;
    return this;
  }

  /**
   * ~
   * @return countryOrDefault
   */
  @javax.annotation.Nullable
  public CountryOrDefaultEnum getCountryOrDefault() {
    return countryOrDefault;
  }

  public void setCountryOrDefault(CountryOrDefaultEnum countryOrDefault) {
    this.countryOrDefault = countryOrDefault;
  }


  public Account created(OffsetDateTime created) {
    this.created = created;
    return this;
  }

  /**
   * ~
   * @return created
   */
  @javax.annotation.Nullable
  public OffsetDateTime getCreated() {
    return created;
  }

  public void setCreated(OffsetDateTime created) {
    this.created = created;
  }


  public Account dateTimeZone(DateTimeZone dateTimeZone) {
    this.dateTimeZone = dateTimeZone;
    return this;
  }

  /**
   * Get dateTimeZone
   * @return dateTimeZone
   */
  @javax.annotation.Nullable
  public DateTimeZone getDateTimeZone() {
    return dateTimeZone;
  }

  public void setDateTimeZone(DateTimeZone dateTimeZone) {
    this.dateTimeZone = dateTimeZone;
  }


  public Account defaultNotificationTtlMillis(Long defaultNotificationTtlMillis) {
    this.defaultNotificationTtlMillis = defaultNotificationTtlMillis;
    return this;
  }

  /**
   * ~
   * @return defaultNotificationTtlMillis
   */
  @javax.annotation.Nullable
  public Long getDefaultNotificationTtlMillis() {
    return defaultNotificationTtlMillis;
  }

  public void setDefaultNotificationTtlMillis(Long defaultNotificationTtlMillis) {
    this.defaultNotificationTtlMillis = defaultNotificationTtlMillis;
  }


  public Account defaultNumberId(Long defaultNumberId) {
    this.defaultNumberId = defaultNumberId;
    return this;
  }

  /**
   * ~
   * @return defaultNumberId
   */
  @javax.annotation.Nullable
  public Long getDefaultNumberId() {
    return defaultNumberId;
  }

  public void setDefaultNumberId(Long defaultNumberId) {
    this.defaultNumberId = defaultNumberId;
  }


  public Account ein(String ein) {
    this.ein = ein;
    return this;
  }

  /**
   * ~
   * @return ein
   */
  @javax.annotation.Nullable
  public String getEin() {
    return ein;
  }

  public void setEin(String ein) {
    this.ein = ein;
  }


  public Account entityType(EntityTypeEnum entityType) {
    this.entityType = entityType;
    return this;
  }

  /**
   * ~
   * @return entityType
   */
  @javax.annotation.Nullable
  public EntityTypeEnum getEntityType() {
    return entityType;
  }

  public void setEntityType(EntityTypeEnum entityType) {
    this.entityType = entityType;
  }


  public Account ez(Boolean ez) {
    this.ez = ez;
    return this;
  }

  /**
   * ~
   * @return ez
   */
  @javax.annotation.Nullable
  public Boolean getEz() {
    return ez;
  }

  public void setEz(Boolean ez) {
    this.ez = ez;
  }


  public Account failedVerificationAttempts(Integer failedVerificationAttempts) {
    this.failedVerificationAttempts = failedVerificationAttempts;
    return this;
  }

  /**
   * ~
   * @return failedVerificationAttempts
   */
  @javax.annotation.Nullable
  public Integer getFailedVerificationAttempts() {
    return failedVerificationAttempts;
  }

  public void setFailedVerificationAttempts(Integer failedVerificationAttempts) {
    this.failedVerificationAttempts = failedVerificationAttempts;
  }


  public Account fromNumberPool(String fromNumberPool) {
    this.fromNumberPool = fromNumberPool;
    return this;
  }

  /**
   * ~
   * @return fromNumberPool
   */
  @javax.annotation.Nullable
  public String getFromNumberPool() {
    return fromNumberPool;
  }

  public void setFromNumberPool(String fromNumberPool) {
    this.fromNumberPool = fromNumberPool;
  }


  public Account id(Long id) {
    this.id = id;
    return this;
  }

  /**
   * An id of an account
   * @return id
   */
  @javax.annotation.Nullable
  public Long getId() {
    return id;
  }

  public void setId(Long id) {
    this.id = id;
  }


  public Account industry(IndustryEnum industry) {
    this.industry = industry;
    return this;
  }

  /**
   * ~
   * @return industry
   */
  @javax.annotation.Nullable
  public IndustryEnum getIndustry() {
    return industry;
  }

  public void setIndustry(IndustryEnum industry) {
    this.industry = industry;
  }


  public Account industryName(String industryName) {
    this.industryName = industryName;
    return this;
  }

  /**
   * ~
   * @return industryName
   */
  @javax.annotation.Nullable
  public String getIndustryName() {
    return industryName;
  }

  public void setIndustryName(String industryName) {
    this.industryName = industryName;
  }


  public Account key(String key) {
    this.key = key;
    return this;
  }

  /**
   * ~
   * @return key
   */
  @javax.annotation.Nullable
  public String getKey() {
    return key;
  }

  public void setKey(String key) {
    this.key = key;
  }


  public Account localTimeZoneRestriction(LocalTimeZoneRestriction localTimeZoneRestriction) {
    this.localTimeZoneRestriction = localTimeZoneRestriction;
    return this;
  }

  /**
   * Get localTimeZoneRestriction
   * @return localTimeZoneRestriction
   */
  @javax.annotation.Nullable
  public LocalTimeZoneRestriction getLocalTimeZoneRestriction() {
    return localTimeZoneRestriction;
  }

  public void setLocalTimeZoneRestriction(LocalTimeZoneRestriction localTimeZoneRestriction) {
    this.localTimeZoneRestriction = localTimeZoneRestriction;
  }


  public Account locale(Locale locale) {
    this.locale = locale;
    return this;
  }

  /**
   * Get locale
   * @return locale
   */
  @javax.annotation.Nullable
  public Locale getLocale() {
    return locale;
  }

  public void setLocale(Locale locale) {
    this.locale = locale;
  }


  public Account maxAgents(Integer maxAgents) {
    this.maxAgents = maxAgents;
    return this;
  }

  /**
   * ~
   * @return maxAgents
   */
  @javax.annotation.Nullable
  public Integer getMaxAgents() {
    return maxAgents;
  }

  public void setMaxAgents(Integer maxAgents) {
    this.maxAgents = maxAgents;
  }


  public Account messageClass(String messageClass) {
    this.messageClass = messageClass;
    return this;
  }

  /**
   * ~
   * @return messageClass
   */
  @javax.annotation.Nullable
  public String getMessageClass() {
    return messageClass;
  }

  public void setMessageClass(String messageClass) {
    this.messageClass = messageClass;
  }


  public Account messageFlows(Set<String> messageFlows) {
    this.messageFlows = messageFlows;
    return this;
  }

  public Account addMessageFlowsItem(String messageFlowsItem) {
    if (this.messageFlows == null) {
      this.messageFlows = new LinkedHashSet<>();
    }
    this.messageFlows.add(messageFlowsItem);
    return this;
  }

  /**
   * ~
   * @return messageFlows
   */
  @javax.annotation.Nullable
  public Set<String> getMessageFlows() {
    return messageFlows;
  }

  public void setMessageFlows(Set<String> messageFlows) {
    this.messageFlows = messageFlows;
  }


  public Account name(String name) {
    this.name = name;
    return this;
  }

  /**
   * Name associated with an account
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public Account outboundThreshold(Integer outboundThreshold) {
    this.outboundThreshold = outboundThreshold;
    return this;
  }

  /**
   * ~
   * @return outboundThreshold
   */
  @javax.annotation.Nullable
  public Integer getOutboundThreshold() {
    return outboundThreshold;
  }

  public void setOutboundThreshold(Integer outboundThreshold) {
    this.outboundThreshold = outboundThreshold;
  }


  public Account receiverPeriodCall(Integer receiverPeriodCall) {
    this.receiverPeriodCall = receiverPeriodCall;
    return this;
  }

  /**
   * ~
   * @return receiverPeriodCall
   */
  @javax.annotation.Nullable
  public Integer getReceiverPeriodCall() {
    return receiverPeriodCall;
  }

  public void setReceiverPeriodCall(Integer receiverPeriodCall) {
    this.receiverPeriodCall = receiverPeriodCall;
  }


  public Account receiverPeriodEnabled(Boolean receiverPeriodEnabled) {
    this.receiverPeriodEnabled = receiverPeriodEnabled;
    return this;
  }

  /**
   * ~
   * @return receiverPeriodEnabled
   */
  @javax.annotation.Nullable
  public Boolean getReceiverPeriodEnabled() {
    return receiverPeriodEnabled;
  }

  public void setReceiverPeriodEnabled(Boolean receiverPeriodEnabled) {
    this.receiverPeriodEnabled = receiverPeriodEnabled;
  }


  public Account receiverPeriodGlobal(Integer receiverPeriodGlobal) {
    this.receiverPeriodGlobal = receiverPeriodGlobal;
    return this;
  }

  /**
   * ~
   * @return receiverPeriodGlobal
   */
  @javax.annotation.Nullable
  public Integer getReceiverPeriodGlobal() {
    return receiverPeriodGlobal;
  }

  public void setReceiverPeriodGlobal(Integer receiverPeriodGlobal) {
    this.receiverPeriodGlobal = receiverPeriodGlobal;
  }


  public Account receiverPeriodText(Integer receiverPeriodText) {
    this.receiverPeriodText = receiverPeriodText;
    return this;
  }

  /**
   * ~
   * @return receiverPeriodText
   */
  @javax.annotation.Nullable
  public Integer getReceiverPeriodText() {
    return receiverPeriodText;
  }

  public void setReceiverPeriodText(Integer receiverPeriodText) {
    this.receiverPeriodText = receiverPeriodText;
  }


  public Account receiverPeriodTimeUnit(ReceiverPeriodTimeUnitEnum receiverPeriodTimeUnit) {
    this.receiverPeriodTimeUnit = receiverPeriodTimeUnit;
    return this;
  }

  /**
   * ~
   * @return receiverPeriodTimeUnit
   */
  @javax.annotation.Nullable
  public ReceiverPeriodTimeUnitEnum getReceiverPeriodTimeUnit() {
    return receiverPeriodTimeUnit;
  }

  public void setReceiverPeriodTimeUnit(ReceiverPeriodTimeUnitEnum receiverPeriodTimeUnit) {
    this.receiverPeriodTimeUnit = receiverPeriodTimeUnit;
  }


  public Account retainOnlyMetadata(Boolean retainOnlyMetadata) {
    this.retainOnlyMetadata = retainOnlyMetadata;
    return this;
  }

  /**
   * ~
   * @return retainOnlyMetadata
   */
  @javax.annotation.Nullable
  public Boolean getRetainOnlyMetadata() {
    return retainOnlyMetadata;
  }

  public void setRetainOnlyMetadata(Boolean retainOnlyMetadata) {
    this.retainOnlyMetadata = retainOnlyMetadata;
  }


  public Account retainOnlyMetadataLastDetailRecordId(Long retainOnlyMetadataLastDetailRecordId) {
    this.retainOnlyMetadataLastDetailRecordId = retainOnlyMetadataLastDetailRecordId;
    return this;
  }

  /**
   * ~
   * @return retainOnlyMetadataLastDetailRecordId
   */
  @javax.annotation.Nullable
  public Long getRetainOnlyMetadataLastDetailRecordId() {
    return retainOnlyMetadataLastDetailRecordId;
  }

  public void setRetainOnlyMetadataLastDetailRecordId(Long retainOnlyMetadataLastDetailRecordId) {
    this.retainOnlyMetadataLastDetailRecordId = retainOnlyMetadataLastDetailRecordId;
  }


  public Account retainOnlyMetadataLastModified(OffsetDateTime retainOnlyMetadataLastModified) {
    this.retainOnlyMetadataLastModified = retainOnlyMetadataLastModified;
    return this;
  }

  /**
   * ~
   * @return retainOnlyMetadataLastModified
   */
  @javax.annotation.Nullable
  public OffsetDateTime getRetainOnlyMetadataLastModified() {
    return retainOnlyMetadataLastModified;
  }

  public void setRetainOnlyMetadataLastModified(OffsetDateTime retainOnlyMetadataLastModified) {
    this.retainOnlyMetadataLastModified = retainOnlyMetadataLastModified;
  }


  public Account scrub(Boolean scrub) {
    this.scrub = scrub;
    return this;
  }

  /**
   * ~
   * @return scrub
   */
  @javax.annotation.Nullable
  public Boolean getScrub() {
    return scrub;
  }

  public void setScrub(Boolean scrub) {
    this.scrub = scrub;
  }


  public Account sharedShortCodeAllowed(Boolean sharedShortCodeAllowed) {
    this.sharedShortCodeAllowed = sharedShortCodeAllowed;
    return this;
  }

  /**
   * ~
   * @return sharedShortCodeAllowed
   */
  @javax.annotation.Nullable
  public Boolean getSharedShortCodeAllowed() {
    return sharedShortCodeAllowed;
  }

  public void setSharedShortCodeAllowed(Boolean sharedShortCodeAllowed) {
    this.sharedShortCodeAllowed = sharedShortCodeAllowed;
  }


  public Account sharedShortCodeId(Long sharedShortCodeId) {
    this.sharedShortCodeId = sharedShortCodeId;
    return this;
  }

  /**
   * ~
   * @return sharedShortCodeId
   */
  @javax.annotation.Nullable
  public Long getSharedShortCodeId() {
    return sharedShortCodeId;
  }

  public void setSharedShortCodeId(Long sharedShortCodeId) {
    this.sharedShortCodeId = sharedShortCodeId;
  }


  public Account soaAccount(Account soaAccount) {
    this.soaAccount = soaAccount;
    return this;
  }

  /**
   * Get soaAccount
   * @return soaAccount
   */
  @javax.annotation.Nullable
  public Account getSoaAccount() {
    return soaAccount;
  }

  public void setSoaAccount(Account soaAccount) {
    this.soaAccount = soaAccount;
  }


  public Account startCapable(Boolean startCapable) {
    this.startCapable = startCapable;
    return this;
  }

  /**
   * ~
   * @return startCapable
   */
  @javax.annotation.Nullable
  public Boolean getStartCapable() {
    return startCapable;
  }

  public void setStartCapable(Boolean startCapable) {
    this.startCapable = startCapable;
  }


  public Account state(String state) {
    this.state = state;
    return this;
  }

  /**
   * ~
   * @return state
   */
  @javax.annotation.Nullable
  public String getState() {
    return state;
  }

  public void setState(String state) {
    this.state = state;
  }


  public Account status(StatusEnum status) {
    this.status = status;
    return this;
  }

  /**
   * ~
   * @return status
   */
  @javax.annotation.Nullable
  public StatusEnum getStatus() {
    return status;
  }

  public void setStatus(StatusEnum status) {
    this.status = status;
  }


  public Account textOutboundThreshold(Integer textOutboundThreshold) {
    this.textOutboundThreshold = textOutboundThreshold;
    return this;
  }

  /**
   * ~
   * @return textOutboundThreshold
   */
  @javax.annotation.Nullable
  public Integer getTextOutboundThreshold() {
    return textOutboundThreshold;
  }

  public void setTextOutboundThreshold(Integer textOutboundThreshold) {
    this.textOutboundThreshold = textOutboundThreshold;
  }


  public Account timeZone(TimeZone timeZone) {
    this.timeZone = timeZone;
    return this;
  }

  /**
   * Get timeZone
   * @return timeZone
   */
  @javax.annotation.Nullable
  public TimeZone getTimeZone() {
    return timeZone;
  }

  public void setTimeZone(TimeZone timeZone) {
    this.timeZone = timeZone;
  }


  public Account timeZoneId(ZoneId timeZoneId) {
    this.timeZoneId = timeZoneId;
    return this;
  }

  /**
   * Get timeZoneId
   * @return timeZoneId
   */
  @javax.annotation.Nullable
  public ZoneId getTimeZoneId() {
    return timeZoneId;
  }

  public void setTimeZoneId(ZoneId timeZoneId) {
    this.timeZoneId = timeZoneId;
  }


  public Account trustLevel(TrustLevelEnum trustLevel) {
    this.trustLevel = trustLevel;
    return this;
  }

  /**
   * ~
   * @return trustLevel
   */
  @javax.annotation.Nullable
  public TrustLevelEnum getTrustLevel() {
    return trustLevel;
  }

  public void setTrustLevel(TrustLevelEnum trustLevel) {
    this.trustLevel = trustLevel;
  }


  public Account tsrAgreement(OffsetDateTime tsrAgreement) {
    this.tsrAgreement = tsrAgreement;
    return this;
  }

  /**
   * ~
   * @return tsrAgreement
   */
  @javax.annotation.Nullable
  public OffsetDateTime getTsrAgreement() {
    return tsrAgreement;
  }

  public void setTsrAgreement(OffsetDateTime tsrAgreement) {
    this.tsrAgreement = tsrAgreement;
  }


  public Account tsrInitials(String tsrInitials) {
    this.tsrInitials = tsrInitials;
    return this;
  }

  /**
   * ~
   * @return tsrInitials
   */
  @javax.annotation.Nullable
  public String getTsrInitials() {
    return tsrInitials;
  }

  public void setTsrInitials(String tsrInitials) {
    this.tsrInitials = tsrInitials;
  }


  public Account uiContext(String uiContext) {
    this.uiContext = uiContext;
    return this;
  }

  /**
   * ~
   * @return uiContext
   */
  @javax.annotation.Nullable
  public String getUiContext() {
    return uiContext;
  }

  public void setUiContext(String uiContext) {
    this.uiContext = uiContext;
  }


  public Account universal(Boolean universal) {
    this.universal = universal;
    return this;
  }

  /**
   * ~
   * @return universal
   */
  @javax.annotation.Nullable
  public Boolean getUniversal() {
    return universal;
  }

  public void setUniversal(Boolean universal) {
    this.universal = universal;
  }


  public Account website(String website) {
    this.website = website;
    return this;
  }

  /**
   * ~
   * @return website
   */
  @javax.annotation.Nullable
  public String getWebsite() {
    return website;
  }

  public void setWebsite(String website) {
    this.website = website;
  }


  public Account zipcode(String zipcode) {
    this.zipcode = zipcode;
    return this;
  }

  /**
   * ~
   * @return zipcode
   */
  @javax.annotation.Nullable
  public String getZipcode() {
    return zipcode;
  }

  public void setZipcode(String zipcode) {
    this.zipcode = zipcode;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Account account = (Account) o;
    return Objects.equals(this.active, account.active) &&
        Objects.equals(this.address, account.address) &&
        Objects.equals(this.age, account.age) &&
        Objects.equals(this.agencyManagedAccounts, account.agencyManagedAccounts) &&
        Objects.equals(this.allowedToCreateCampaign, account.allowedToCreateCampaign) &&
        Objects.equals(this.apiCallLimit, account.apiCallLimit) &&
        Objects.equals(this.archived, account.archived) &&
        Objects.equals(this.autoAddDoNotContact, account.autoAddDoNotContact) &&
        Objects.equals(this.brand, account.brand) &&
        Objects.equals(this.canceled, account.canceled) &&
        Objects.equals(this.canceledOrArchived, account.canceledOrArchived) &&
        Objects.equals(this.city, account.city) &&
        Objects.equals(this.companyName, account.companyName) &&
        Objects.equals(this.country, account.country) &&
        Objects.equals(this.countryOrDefault, account.countryOrDefault) &&
        Objects.equals(this.created, account.created) &&
        Objects.equals(this.dateTimeZone, account.dateTimeZone) &&
        Objects.equals(this.defaultNotificationTtlMillis, account.defaultNotificationTtlMillis) &&
        Objects.equals(this.defaultNumberId, account.defaultNumberId) &&
        Objects.equals(this.ein, account.ein) &&
        Objects.equals(this.entityType, account.entityType) &&
        Objects.equals(this.ez, account.ez) &&
        Objects.equals(this.failedVerificationAttempts, account.failedVerificationAttempts) &&
        Objects.equals(this.fromNumberPool, account.fromNumberPool) &&
        Objects.equals(this.id, account.id) &&
        Objects.equals(this.industry, account.industry) &&
        Objects.equals(this.industryName, account.industryName) &&
        Objects.equals(this.key, account.key) &&
        Objects.equals(this.localTimeZoneRestriction, account.localTimeZoneRestriction) &&
        Objects.equals(this.locale, account.locale) &&
        Objects.equals(this.maxAgents, account.maxAgents) &&
        Objects.equals(this.messageClass, account.messageClass) &&
        Objects.equals(this.messageFlows, account.messageFlows) &&
        Objects.equals(this.name, account.name) &&
        Objects.equals(this.outboundThreshold, account.outboundThreshold) &&
        Objects.equals(this.receiverPeriodCall, account.receiverPeriodCall) &&
        Objects.equals(this.receiverPeriodEnabled, account.receiverPeriodEnabled) &&
        Objects.equals(this.receiverPeriodGlobal, account.receiverPeriodGlobal) &&
        Objects.equals(this.receiverPeriodText, account.receiverPeriodText) &&
        Objects.equals(this.receiverPeriodTimeUnit, account.receiverPeriodTimeUnit) &&
        Objects.equals(this.retainOnlyMetadata, account.retainOnlyMetadata) &&
        Objects.equals(this.retainOnlyMetadataLastDetailRecordId, account.retainOnlyMetadataLastDetailRecordId) &&
        Objects.equals(this.retainOnlyMetadataLastModified, account.retainOnlyMetadataLastModified) &&
        Objects.equals(this.scrub, account.scrub) &&
        Objects.equals(this.sharedShortCodeAllowed, account.sharedShortCodeAllowed) &&
        Objects.equals(this.sharedShortCodeId, account.sharedShortCodeId) &&
        Objects.equals(this.soaAccount, account.soaAccount) &&
        Objects.equals(this.startCapable, account.startCapable) &&
        Objects.equals(this.state, account.state) &&
        Objects.equals(this.status, account.status) &&
        Objects.equals(this.textOutboundThreshold, account.textOutboundThreshold) &&
        Objects.equals(this.timeZone, account.timeZone) &&
        Objects.equals(this.timeZoneId, account.timeZoneId) &&
        Objects.equals(this.trustLevel, account.trustLevel) &&
        Objects.equals(this.tsrAgreement, account.tsrAgreement) &&
        Objects.equals(this.tsrInitials, account.tsrInitials) &&
        Objects.equals(this.uiContext, account.uiContext) &&
        Objects.equals(this.universal, account.universal) &&
        Objects.equals(this.website, account.website) &&
        Objects.equals(this.zipcode, account.zipcode);
  }

  @Override
  public int hashCode() {
    return Objects.hash(active, address, age, agencyManagedAccounts, allowedToCreateCampaign, apiCallLimit, archived, autoAddDoNotContact, brand, canceled, canceledOrArchived, city, companyName, country, countryOrDefault, created, dateTimeZone, defaultNotificationTtlMillis, defaultNumberId, ein, entityType, ez, failedVerificationAttempts, fromNumberPool, id, industry, industryName, key, localTimeZoneRestriction, locale, maxAgents, messageClass, messageFlows, name, outboundThreshold, receiverPeriodCall, receiverPeriodEnabled, receiverPeriodGlobal, receiverPeriodText, receiverPeriodTimeUnit, retainOnlyMetadata, retainOnlyMetadataLastDetailRecordId, retainOnlyMetadataLastModified, scrub, sharedShortCodeAllowed, sharedShortCodeId, soaAccount, startCapable, state, status, textOutboundThreshold, timeZone, timeZoneId, trustLevel, tsrAgreement, tsrInitials, uiContext, universal, website, zipcode);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Account {\n");
    sb.append("    active: ").append(toIndentedString(active)).append("\n");
    sb.append("    address: ").append(toIndentedString(address)).append("\n");
    sb.append("    age: ").append(toIndentedString(age)).append("\n");
    sb.append("    agencyManagedAccounts: ").append(toIndentedString(agencyManagedAccounts)).append("\n");
    sb.append("    allowedToCreateCampaign: ").append(toIndentedString(allowedToCreateCampaign)).append("\n");
    sb.append("    apiCallLimit: ").append(toIndentedString(apiCallLimit)).append("\n");
    sb.append("    archived: ").append(toIndentedString(archived)).append("\n");
    sb.append("    autoAddDoNotContact: ").append(toIndentedString(autoAddDoNotContact)).append("\n");
    sb.append("    brand: ").append(toIndentedString(brand)).append("\n");
    sb.append("    canceled: ").append(toIndentedString(canceled)).append("\n");
    sb.append("    canceledOrArchived: ").append(toIndentedString(canceledOrArchived)).append("\n");
    sb.append("    city: ").append(toIndentedString(city)).append("\n");
    sb.append("    companyName: ").append(toIndentedString(companyName)).append("\n");
    sb.append("    country: ").append(toIndentedString(country)).append("\n");
    sb.append("    countryOrDefault: ").append(toIndentedString(countryOrDefault)).append("\n");
    sb.append("    created: ").append(toIndentedString(created)).append("\n");
    sb.append("    dateTimeZone: ").append(toIndentedString(dateTimeZone)).append("\n");
    sb.append("    defaultNotificationTtlMillis: ").append(toIndentedString(defaultNotificationTtlMillis)).append("\n");
    sb.append("    defaultNumberId: ").append(toIndentedString(defaultNumberId)).append("\n");
    sb.append("    ein: ").append(toIndentedString(ein)).append("\n");
    sb.append("    entityType: ").append(toIndentedString(entityType)).append("\n");
    sb.append("    ez: ").append(toIndentedString(ez)).append("\n");
    sb.append("    failedVerificationAttempts: ").append(toIndentedString(failedVerificationAttempts)).append("\n");
    sb.append("    fromNumberPool: ").append(toIndentedString(fromNumberPool)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    industry: ").append(toIndentedString(industry)).append("\n");
    sb.append("    industryName: ").append(toIndentedString(industryName)).append("\n");
    sb.append("    key: ").append(toIndentedString(key)).append("\n");
    sb.append("    localTimeZoneRestriction: ").append(toIndentedString(localTimeZoneRestriction)).append("\n");
    sb.append("    locale: ").append(toIndentedString(locale)).append("\n");
    sb.append("    maxAgents: ").append(toIndentedString(maxAgents)).append("\n");
    sb.append("    messageClass: ").append(toIndentedString(messageClass)).append("\n");
    sb.append("    messageFlows: ").append(toIndentedString(messageFlows)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    outboundThreshold: ").append(toIndentedString(outboundThreshold)).append("\n");
    sb.append("    receiverPeriodCall: ").append(toIndentedString(receiverPeriodCall)).append("\n");
    sb.append("    receiverPeriodEnabled: ").append(toIndentedString(receiverPeriodEnabled)).append("\n");
    sb.append("    receiverPeriodGlobal: ").append(toIndentedString(receiverPeriodGlobal)).append("\n");
    sb.append("    receiverPeriodText: ").append(toIndentedString(receiverPeriodText)).append("\n");
    sb.append("    receiverPeriodTimeUnit: ").append(toIndentedString(receiverPeriodTimeUnit)).append("\n");
    sb.append("    retainOnlyMetadata: ").append(toIndentedString(retainOnlyMetadata)).append("\n");
    sb.append("    retainOnlyMetadataLastDetailRecordId: ").append(toIndentedString(retainOnlyMetadataLastDetailRecordId)).append("\n");
    sb.append("    retainOnlyMetadataLastModified: ").append(toIndentedString(retainOnlyMetadataLastModified)).append("\n");
    sb.append("    scrub: ").append(toIndentedString(scrub)).append("\n");
    sb.append("    sharedShortCodeAllowed: ").append(toIndentedString(sharedShortCodeAllowed)).append("\n");
    sb.append("    sharedShortCodeId: ").append(toIndentedString(sharedShortCodeId)).append("\n");
    sb.append("    soaAccount: ").append(toIndentedString(soaAccount)).append("\n");
    sb.append("    startCapable: ").append(toIndentedString(startCapable)).append("\n");
    sb.append("    state: ").append(toIndentedString(state)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    textOutboundThreshold: ").append(toIndentedString(textOutboundThreshold)).append("\n");
    sb.append("    timeZone: ").append(toIndentedString(timeZone)).append("\n");
    sb.append("    timeZoneId: ").append(toIndentedString(timeZoneId)).append("\n");
    sb.append("    trustLevel: ").append(toIndentedString(trustLevel)).append("\n");
    sb.append("    tsrAgreement: ").append(toIndentedString(tsrAgreement)).append("\n");
    sb.append("    tsrInitials: ").append(toIndentedString(tsrInitials)).append("\n");
    sb.append("    uiContext: ").append(toIndentedString(uiContext)).append("\n");
    sb.append("    universal: ").append(toIndentedString(universal)).append("\n");
    sb.append("    website: ").append(toIndentedString(website)).append("\n");
    sb.append("    zipcode: ").append(toIndentedString(zipcode)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("active");
    openapiFields.add("address");
    openapiFields.add("age");
    openapiFields.add("agencyManagedAccounts");
    openapiFields.add("allowedToCreateCampaign");
    openapiFields.add("apiCallLimit");
    openapiFields.add("archived");
    openapiFields.add("autoAddDoNotContact");
    openapiFields.add("brand");
    openapiFields.add("canceled");
    openapiFields.add("canceledOrArchived");
    openapiFields.add("city");
    openapiFields.add("companyName");
    openapiFields.add("country");
    openapiFields.add("countryOrDefault");
    openapiFields.add("created");
    openapiFields.add("dateTimeZone");
    openapiFields.add("defaultNotificationTtlMillis");
    openapiFields.add("defaultNumberId");
    openapiFields.add("ein");
    openapiFields.add("entityType");
    openapiFields.add("ez");
    openapiFields.add("failedVerificationAttempts");
    openapiFields.add("fromNumberPool");
    openapiFields.add("id");
    openapiFields.add("industry");
    openapiFields.add("industryName");
    openapiFields.add("key");
    openapiFields.add("localTimeZoneRestriction");
    openapiFields.add("locale");
    openapiFields.add("maxAgents");
    openapiFields.add("messageClass");
    openapiFields.add("messageFlows");
    openapiFields.add("name");
    openapiFields.add("outboundThreshold");
    openapiFields.add("receiverPeriodCall");
    openapiFields.add("receiverPeriodEnabled");
    openapiFields.add("receiverPeriodGlobal");
    openapiFields.add("receiverPeriodText");
    openapiFields.add("receiverPeriodTimeUnit");
    openapiFields.add("retainOnlyMetadata");
    openapiFields.add("retainOnlyMetadataLastDetailRecordId");
    openapiFields.add("retainOnlyMetadataLastModified");
    openapiFields.add("scrub");
    openapiFields.add("sharedShortCodeAllowed");
    openapiFields.add("sharedShortCodeId");
    openapiFields.add("soaAccount");
    openapiFields.add("startCapable");
    openapiFields.add("state");
    openapiFields.add("status");
    openapiFields.add("textOutboundThreshold");
    openapiFields.add("timeZone");
    openapiFields.add("timeZoneId");
    openapiFields.add("trustLevel");
    openapiFields.add("tsrAgreement");
    openapiFields.add("tsrInitials");
    openapiFields.add("uiContext");
    openapiFields.add("universal");
    openapiFields.add("website");
    openapiFields.add("zipcode");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Account
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Account.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Account is not found in the empty JSON string", Account.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Account.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Account` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("address") != null && !jsonObj.get("address").isJsonNull()) && !jsonObj.get("address").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `address` to be a primitive type in the JSON string but got `%s`", jsonObj.get("address").toString()));
      }
      // validate the optional field `age`
      if (jsonObj.get("age") != null && !jsonObj.get("age").isJsonNull()) {
        Duration.validateJsonElement(jsonObj.get("age"));
      }
      if ((jsonObj.get("brand") != null && !jsonObj.get("brand").isJsonNull()) && !jsonObj.get("brand").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `brand` to be a primitive type in the JSON string but got `%s`", jsonObj.get("brand").toString()));
      }
      // validate the optional field `brand`
      if (jsonObj.get("brand") != null && !jsonObj.get("brand").isJsonNull()) {
        BrandEnum.validateJsonElement(jsonObj.get("brand"));
      }
      if ((jsonObj.get("city") != null && !jsonObj.get("city").isJsonNull()) && !jsonObj.get("city").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `city` to be a primitive type in the JSON string but got `%s`", jsonObj.get("city").toString()));
      }
      if ((jsonObj.get("companyName") != null && !jsonObj.get("companyName").isJsonNull()) && !jsonObj.get("companyName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `companyName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("companyName").toString()));
      }
      if ((jsonObj.get("country") != null && !jsonObj.get("country").isJsonNull()) && !jsonObj.get("country").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `country` to be a primitive type in the JSON string but got `%s`", jsonObj.get("country").toString()));
      }
      // validate the optional field `country`
      if (jsonObj.get("country") != null && !jsonObj.get("country").isJsonNull()) {
        CountryEnum.validateJsonElement(jsonObj.get("country"));
      }
      if ((jsonObj.get("countryOrDefault") != null && !jsonObj.get("countryOrDefault").isJsonNull()) && !jsonObj.get("countryOrDefault").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `countryOrDefault` to be a primitive type in the JSON string but got `%s`", jsonObj.get("countryOrDefault").toString()));
      }
      // validate the optional field `countryOrDefault`
      if (jsonObj.get("countryOrDefault") != null && !jsonObj.get("countryOrDefault").isJsonNull()) {
        CountryOrDefaultEnum.validateJsonElement(jsonObj.get("countryOrDefault"));
      }
      // validate the optional field `dateTimeZone`
      if (jsonObj.get("dateTimeZone") != null && !jsonObj.get("dateTimeZone").isJsonNull()) {
        DateTimeZone.validateJsonElement(jsonObj.get("dateTimeZone"));
      }
      if ((jsonObj.get("ein") != null && !jsonObj.get("ein").isJsonNull()) && !jsonObj.get("ein").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ein` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ein").toString()));
      }
      if ((jsonObj.get("entityType") != null && !jsonObj.get("entityType").isJsonNull()) && !jsonObj.get("entityType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `entityType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("entityType").toString()));
      }
      // validate the optional field `entityType`
      if (jsonObj.get("entityType") != null && !jsonObj.get("entityType").isJsonNull()) {
        EntityTypeEnum.validateJsonElement(jsonObj.get("entityType"));
      }
      if ((jsonObj.get("fromNumberPool") != null && !jsonObj.get("fromNumberPool").isJsonNull()) && !jsonObj.get("fromNumberPool").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `fromNumberPool` to be a primitive type in the JSON string but got `%s`", jsonObj.get("fromNumberPool").toString()));
      }
      if ((jsonObj.get("industry") != null && !jsonObj.get("industry").isJsonNull()) && !jsonObj.get("industry").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `industry` to be a primitive type in the JSON string but got `%s`", jsonObj.get("industry").toString()));
      }
      // validate the optional field `industry`
      if (jsonObj.get("industry") != null && !jsonObj.get("industry").isJsonNull()) {
        IndustryEnum.validateJsonElement(jsonObj.get("industry"));
      }
      if ((jsonObj.get("industryName") != null && !jsonObj.get("industryName").isJsonNull()) && !jsonObj.get("industryName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `industryName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("industryName").toString()));
      }
      if ((jsonObj.get("key") != null && !jsonObj.get("key").isJsonNull()) && !jsonObj.get("key").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `key` to be a primitive type in the JSON string but got `%s`", jsonObj.get("key").toString()));
      }
      // validate the optional field `localTimeZoneRestriction`
      if (jsonObj.get("localTimeZoneRestriction") != null && !jsonObj.get("localTimeZoneRestriction").isJsonNull()) {
        LocalTimeZoneRestriction.validateJsonElement(jsonObj.get("localTimeZoneRestriction"));
      }
      // validate the optional field `locale`
      if (jsonObj.get("locale") != null && !jsonObj.get("locale").isJsonNull()) {
        Locale.validateJsonElement(jsonObj.get("locale"));
      }
      if ((jsonObj.get("messageClass") != null && !jsonObj.get("messageClass").isJsonNull()) && !jsonObj.get("messageClass").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `messageClass` to be a primitive type in the JSON string but got `%s`", jsonObj.get("messageClass").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("messageFlows") != null && !jsonObj.get("messageFlows").isJsonNull() && !jsonObj.get("messageFlows").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `messageFlows` to be an array in the JSON string but got `%s`", jsonObj.get("messageFlows").toString()));
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if ((jsonObj.get("receiverPeriodTimeUnit") != null && !jsonObj.get("receiverPeriodTimeUnit").isJsonNull()) && !jsonObj.get("receiverPeriodTimeUnit").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `receiverPeriodTimeUnit` to be a primitive type in the JSON string but got `%s`", jsonObj.get("receiverPeriodTimeUnit").toString()));
      }
      // validate the optional field `receiverPeriodTimeUnit`
      if (jsonObj.get("receiverPeriodTimeUnit") != null && !jsonObj.get("receiverPeriodTimeUnit").isJsonNull()) {
        ReceiverPeriodTimeUnitEnum.validateJsonElement(jsonObj.get("receiverPeriodTimeUnit"));
      }
      // validate the optional field `soaAccount`
      if (jsonObj.get("soaAccount") != null && !jsonObj.get("soaAccount").isJsonNull()) {
        Account.validateJsonElement(jsonObj.get("soaAccount"));
      }
      if ((jsonObj.get("state") != null && !jsonObj.get("state").isJsonNull()) && !jsonObj.get("state").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `state` to be a primitive type in the JSON string but got `%s`", jsonObj.get("state").toString()));
      }
      if ((jsonObj.get("status") != null && !jsonObj.get("status").isJsonNull()) && !jsonObj.get("status").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `status` to be a primitive type in the JSON string but got `%s`", jsonObj.get("status").toString()));
      }
      // validate the optional field `status`
      if (jsonObj.get("status") != null && !jsonObj.get("status").isJsonNull()) {
        StatusEnum.validateJsonElement(jsonObj.get("status"));
      }
      // validate the optional field `timeZone`
      if (jsonObj.get("timeZone") != null && !jsonObj.get("timeZone").isJsonNull()) {
        TimeZone.validateJsonElement(jsonObj.get("timeZone"));
      }
      // validate the optional field `timeZoneId`
      if (jsonObj.get("timeZoneId") != null && !jsonObj.get("timeZoneId").isJsonNull()) {
        ZoneId.validateJsonElement(jsonObj.get("timeZoneId"));
      }
      if ((jsonObj.get("trustLevel") != null && !jsonObj.get("trustLevel").isJsonNull()) && !jsonObj.get("trustLevel").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `trustLevel` to be a primitive type in the JSON string but got `%s`", jsonObj.get("trustLevel").toString()));
      }
      // validate the optional field `trustLevel`
      if (jsonObj.get("trustLevel") != null && !jsonObj.get("trustLevel").isJsonNull()) {
        TrustLevelEnum.validateJsonElement(jsonObj.get("trustLevel"));
      }
      if ((jsonObj.get("tsrInitials") != null && !jsonObj.get("tsrInitials").isJsonNull()) && !jsonObj.get("tsrInitials").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `tsrInitials` to be a primitive type in the JSON string but got `%s`", jsonObj.get("tsrInitials").toString()));
      }
      if ((jsonObj.get("uiContext") != null && !jsonObj.get("uiContext").isJsonNull()) && !jsonObj.get("uiContext").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `uiContext` to be a primitive type in the JSON string but got `%s`", jsonObj.get("uiContext").toString()));
      }
      if ((jsonObj.get("website") != null && !jsonObj.get("website").isJsonNull()) && !jsonObj.get("website").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `website` to be a primitive type in the JSON string but got `%s`", jsonObj.get("website").toString()));
      }
      if ((jsonObj.get("zipcode") != null && !jsonObj.get("zipcode").isJsonNull()) && !jsonObj.get("zipcode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `zipcode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("zipcode").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Account.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Account' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Account> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Account.class));

       return (TypeAdapter<T>) new TypeAdapter<Account>() {
           @Override
           public void write(JsonWriter out, Account value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Account read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Account given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Account
   * @throws IOException if the JSON string is invalid with respect to Account
   */
  public static Account fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Account.class);
  }

  /**
   * Convert an instance of Account to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

