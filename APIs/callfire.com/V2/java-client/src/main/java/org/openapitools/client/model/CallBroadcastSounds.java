/*
 * CallFire API Documentation
 * CallFire
 *
 * The version of the OpenAPI document: V2
 * Contact: support@callfire.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * A set of sounds assigned to a voice broadcast to play according to an answering machine configuration. You can add the existing sounds from the account&#39;s sound library or to provide a text which will be converted into a speech. There are four sound options available for a Voice Broadcast campaign
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T09:59:09.684594-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class CallBroadcastSounds {
  public static final String SERIALIZED_NAME_DNC_DIGIT = "dncDigit";
  @SerializedName(SERIALIZED_NAME_DNC_DIGIT)
  private String dncDigit;

  public static final String SERIALIZED_NAME_DNC_SOUND_ID = "dncSoundId";
  @SerializedName(SERIALIZED_NAME_DNC_SOUND_ID)
  private Long dncSoundId;

  public static final String SERIALIZED_NAME_DNC_SOUND_TEXT = "dncSoundText";
  @SerializedName(SERIALIZED_NAME_DNC_SOUND_TEXT)
  private String dncSoundText;

  /**
   * The voice to be used (MALE1, FEMALE1, FEMALE2, SPANISH1, FRENCHCANADIAN1)
   */
  @JsonAdapter(DncSoundTextVoiceEnum.Adapter.class)
  public enum DncSoundTextVoiceEnum {
    MALE1("MALE1"),
    
    FEMALE1("FEMALE1"),
    
    FEMALE2("FEMALE2"),
    
    SPANISH1("SPANISH1"),
    
    FRENCHCANADIAN1("FRENCHCANADIAN1");

    private String value;

    DncSoundTextVoiceEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static DncSoundTextVoiceEnum fromValue(String value) {
      for (DncSoundTextVoiceEnum b : DncSoundTextVoiceEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<DncSoundTextVoiceEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final DncSoundTextVoiceEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public DncSoundTextVoiceEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return DncSoundTextVoiceEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      DncSoundTextVoiceEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_DNC_SOUND_TEXT_VOICE = "dncSoundTextVoice";
  @SerializedName(SERIALIZED_NAME_DNC_SOUND_TEXT_VOICE)
  private DncSoundTextVoiceEnum dncSoundTextVoice;

  public static final String SERIALIZED_NAME_LIVE_SOUND_ID = "liveSoundId";
  @SerializedName(SERIALIZED_NAME_LIVE_SOUND_ID)
  private Long liveSoundId;

  public static final String SERIALIZED_NAME_LIVE_SOUND_TEXT = "liveSoundText";
  @SerializedName(SERIALIZED_NAME_LIVE_SOUND_TEXT)
  private String liveSoundText;

  /**
   * The voice to be used (MALE1, FEMALE1, FEMALE2, SPANISH1, FRENCHCANADIAN1) for a live sound
   */
  @JsonAdapter(LiveSoundTextVoiceEnum.Adapter.class)
  public enum LiveSoundTextVoiceEnum {
    MALE1("MALE1"),
    
    FEMALE1("FEMALE1"),
    
    FEMALE2("FEMALE2"),
    
    SPANISH1("SPANISH1"),
    
    FRENCHCANADIAN1("FRENCHCANADIAN1");

    private String value;

    LiveSoundTextVoiceEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static LiveSoundTextVoiceEnum fromValue(String value) {
      for (LiveSoundTextVoiceEnum b : LiveSoundTextVoiceEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<LiveSoundTextVoiceEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final LiveSoundTextVoiceEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public LiveSoundTextVoiceEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return LiveSoundTextVoiceEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      LiveSoundTextVoiceEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_LIVE_SOUND_TEXT_VOICE = "liveSoundTextVoice";
  @SerializedName(SERIALIZED_NAME_LIVE_SOUND_TEXT_VOICE)
  private LiveSoundTextVoiceEnum liveSoundTextVoice;

  public static final String SERIALIZED_NAME_MACHINE_SOUND_ID = "machineSoundId";
  @SerializedName(SERIALIZED_NAME_MACHINE_SOUND_ID)
  private Long machineSoundId;

  public static final String SERIALIZED_NAME_MACHINE_SOUND_TEXT = "machineSoundText";
  @SerializedName(SERIALIZED_NAME_MACHINE_SOUND_TEXT)
  private String machineSoundText;

  /**
   * The voice to be used (MALE1, FEMALE1 , FEMALE2, SPANISH1, FRENCHCANADIAN1) for a machine sound
   */
  @JsonAdapter(MachineSoundTextVoiceEnum.Adapter.class)
  public enum MachineSoundTextVoiceEnum {
    MALE1("MALE1"),
    
    FEMALE1("FEMALE1"),
    
    FEMALE2("FEMALE2"),
    
    SPANISH1("SPANISH1"),
    
    FRENCHCANADIAN1("FRENCHCANADIAN1");

    private String value;

    MachineSoundTextVoiceEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static MachineSoundTextVoiceEnum fromValue(String value) {
      for (MachineSoundTextVoiceEnum b : MachineSoundTextVoiceEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<MachineSoundTextVoiceEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final MachineSoundTextVoiceEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public MachineSoundTextVoiceEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return MachineSoundTextVoiceEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      MachineSoundTextVoiceEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_MACHINE_SOUND_TEXT_VOICE = "machineSoundTextVoice";
  @SerializedName(SERIALIZED_NAME_MACHINE_SOUND_TEXT_VOICE)
  private MachineSoundTextVoiceEnum machineSoundTextVoice;

  public static final String SERIALIZED_NAME_TRANSFER_DIGIT = "transferDigit";
  @SerializedName(SERIALIZED_NAME_TRANSFER_DIGIT)
  private String transferDigit;

  public static final String SERIALIZED_NAME_TRANSFER_NUMBER = "transferNumber";
  @SerializedName(SERIALIZED_NAME_TRANSFER_NUMBER)
  private String transferNumber;

  public static final String SERIALIZED_NAME_TRANSFER_SOUND_ID = "transferSoundId";
  @SerializedName(SERIALIZED_NAME_TRANSFER_SOUND_ID)
  private Long transferSoundId;

  public static final String SERIALIZED_NAME_TRANSFER_SOUND_TEXT = "transferSoundText";
  @SerializedName(SERIALIZED_NAME_TRANSFER_SOUND_TEXT)
  private String transferSoundText;

  /**
   * The voice to be used (MALE1, FEMALE1, FEMALE2, SPANISH1, FRENCHCANADIAN1) for a sound transfer
   */
  @JsonAdapter(TransferSoundTextVoiceEnum.Adapter.class)
  public enum TransferSoundTextVoiceEnum {
    MALE1("MALE1"),
    
    FEMALE1("FEMALE1"),
    
    FEMALE2("FEMALE2"),
    
    SPANISH1("SPANISH1"),
    
    FRENCHCANADIAN1("FRENCHCANADIAN1");

    private String value;

    TransferSoundTextVoiceEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static TransferSoundTextVoiceEnum fromValue(String value) {
      for (TransferSoundTextVoiceEnum b : TransferSoundTextVoiceEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<TransferSoundTextVoiceEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final TransferSoundTextVoiceEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public TransferSoundTextVoiceEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return TransferSoundTextVoiceEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      TransferSoundTextVoiceEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_TRANSFER_SOUND_TEXT_VOICE = "transferSoundTextVoice";
  @SerializedName(SERIALIZED_NAME_TRANSFER_SOUND_TEXT_VOICE)
  private TransferSoundTextVoiceEnum transferSoundTextVoice;

  public CallBroadcastSounds() {
  }

  public CallBroadcastSounds dncDigit(String dncDigit) {
    this.dncDigit = dncDigit;
    return this;
  }

  /**
   * Digit pressed to place contact in DNC list
   * @return dncDigit
   */
  @javax.annotation.Nullable
  public String getDncDigit() {
    return dncDigit;
  }

  public void setDncDigit(String dncDigit) {
    this.dncDigit = dncDigit;
  }


  public CallBroadcastSounds dncSoundId(Long dncSoundId) {
    this.dncSoundId = dncSoundId;
    return this;
  }

  /**
   * An id of sound file to play when recipient decided to opt out and pressed DNC digit
   * @return dncSoundId
   */
  @javax.annotation.Nullable
  public Long getDncSoundId() {
    return dncSoundId;
  }

  public void setDncSoundId(Long dncSoundId) {
    this.dncSoundId = dncSoundId;
  }


  public CallBroadcastSounds dncSoundText(String dncSoundText) {
    this.dncSoundText = dncSoundText;
    return this;
  }

  /**
   * Text to be turned into sound, plays to notify that Do Not Call digit has been pressed and inform your contact of their placement on the Do Not Call list
   * @return dncSoundText
   */
  @javax.annotation.Nullable
  public String getDncSoundText() {
    return dncSoundText;
  }

  public void setDncSoundText(String dncSoundText) {
    this.dncSoundText = dncSoundText;
  }


  public CallBroadcastSounds dncSoundTextVoice(DncSoundTextVoiceEnum dncSoundTextVoice) {
    this.dncSoundTextVoice = dncSoundTextVoice;
    return this;
  }

  /**
   * The voice to be used (MALE1, FEMALE1, FEMALE2, SPANISH1, FRENCHCANADIAN1)
   * @return dncSoundTextVoice
   */
  @javax.annotation.Nullable
  public DncSoundTextVoiceEnum getDncSoundTextVoice() {
    return dncSoundTextVoice;
  }

  public void setDncSoundTextVoice(DncSoundTextVoiceEnum dncSoundTextVoice) {
    this.dncSoundTextVoice = dncSoundTextVoice;
  }


  public CallBroadcastSounds liveSoundId(Long liveSoundId) {
    this.liveSoundId = liveSoundId;
    return this;
  }

  /**
   * An id of sound file to play if phone is answered
   * @return liveSoundId
   */
  @javax.annotation.Nullable
  public Long getLiveSoundId() {
    return liveSoundId;
  }

  public void setLiveSoundId(Long liveSoundId) {
    this.liveSoundId = liveSoundId;
  }


  public CallBroadcastSounds liveSoundText(String liveSoundText) {
    this.liveSoundText = liveSoundText;
    return this;
  }

  /**
   * Text to be used to turned into a sound. This text will be played when the phone is answered
   * @return liveSoundText
   */
  @javax.annotation.Nullable
  public String getLiveSoundText() {
    return liveSoundText;
  }

  public void setLiveSoundText(String liveSoundText) {
    this.liveSoundText = liveSoundText;
  }


  public CallBroadcastSounds liveSoundTextVoice(LiveSoundTextVoiceEnum liveSoundTextVoice) {
    this.liveSoundTextVoice = liveSoundTextVoice;
    return this;
  }

  /**
   * The voice to be used (MALE1, FEMALE1, FEMALE2, SPANISH1, FRENCHCANADIAN1) for a live sound
   * @return liveSoundTextVoice
   */
  @javax.annotation.Nullable
  public LiveSoundTextVoiceEnum getLiveSoundTextVoice() {
    return liveSoundTextVoice;
  }

  public void setLiveSoundTextVoice(LiveSoundTextVoiceEnum liveSoundTextVoice) {
    this.liveSoundTextVoice = liveSoundTextVoice;
  }


  public CallBroadcastSounds machineSoundId(Long machineSoundId) {
    this.machineSoundId = machineSoundId;
    return this;
  }

  /**
   * An id of a sound file to play if answering machine is detected
   * @return machineSoundId
   */
  @javax.annotation.Nullable
  public Long getMachineSoundId() {
    return machineSoundId;
  }

  public void setMachineSoundId(Long machineSoundId) {
    this.machineSoundId = machineSoundId;
  }


  public CallBroadcastSounds machineSoundText(String machineSoundText) {
    this.machineSoundText = machineSoundText;
    return this;
  }

  /**
   * Text to be turned into a sound. This text will be played when answering machine is detected
   * @return machineSoundText
   */
  @javax.annotation.Nullable
  public String getMachineSoundText() {
    return machineSoundText;
  }

  public void setMachineSoundText(String machineSoundText) {
    this.machineSoundText = machineSoundText;
  }


  public CallBroadcastSounds machineSoundTextVoice(MachineSoundTextVoiceEnum machineSoundTextVoice) {
    this.machineSoundTextVoice = machineSoundTextVoice;
    return this;
  }

  /**
   * The voice to be used (MALE1, FEMALE1 , FEMALE2, SPANISH1, FRENCHCANADIAN1) for a machine sound
   * @return machineSoundTextVoice
   */
  @javax.annotation.Nullable
  public MachineSoundTextVoiceEnum getMachineSoundTextVoice() {
    return machineSoundTextVoice;
  }

  public void setMachineSoundTextVoice(MachineSoundTextVoiceEnum machineSoundTextVoice) {
    this.machineSoundTextVoice = machineSoundTextVoice;
  }


  public CallBroadcastSounds transferDigit(String transferDigit) {
    this.transferDigit = transferDigit;
    return this;
  }

  /**
   * Digit pressed to initiate a transfer
   * @return transferDigit
   */
  @javax.annotation.Nullable
  public String getTransferDigit() {
    return transferDigit;
  }

  public void setTransferDigit(String transferDigit) {
    this.transferDigit = transferDigit;
  }


  public CallBroadcastSounds transferNumber(String transferNumber) {
    this.transferNumber = transferNumber;
    return this;
  }

  /**
   * Phone number in E.164 format (11-digit) to transfer call to.  Example: 12132000384, 67076
   * @return transferNumber
   */
  @javax.annotation.Nullable
  public String getTransferNumber() {
    return transferNumber;
  }

  public void setTransferNumber(String transferNumber) {
    this.transferNumber = transferNumber;
  }


  public CallBroadcastSounds transferSoundId(Long transferSoundId) {
    this.transferSoundId = transferSoundId;
    return this;
  }

  /**
   * An id of a file to play if call is transferred
   * @return transferSoundId
   */
  @javax.annotation.Nullable
  public Long getTransferSoundId() {
    return transferSoundId;
  }

  public void setTransferSoundId(Long transferSoundId) {
    this.transferSoundId = transferSoundId;
  }


  public CallBroadcastSounds transferSoundText(String transferSoundText) {
    this.transferSoundText = transferSoundText;
    return this;
  }

  /**
   * Text to be turned into a sound. This text will be played when the transfer digit is played
   * @return transferSoundText
   */
  @javax.annotation.Nullable
  public String getTransferSoundText() {
    return transferSoundText;
  }

  public void setTransferSoundText(String transferSoundText) {
    this.transferSoundText = transferSoundText;
  }


  public CallBroadcastSounds transferSoundTextVoice(TransferSoundTextVoiceEnum transferSoundTextVoice) {
    this.transferSoundTextVoice = transferSoundTextVoice;
    return this;
  }

  /**
   * The voice to be used (MALE1, FEMALE1, FEMALE2, SPANISH1, FRENCHCANADIAN1) for a sound transfer
   * @return transferSoundTextVoice
   */
  @javax.annotation.Nullable
  public TransferSoundTextVoiceEnum getTransferSoundTextVoice() {
    return transferSoundTextVoice;
  }

  public void setTransferSoundTextVoice(TransferSoundTextVoiceEnum transferSoundTextVoice) {
    this.transferSoundTextVoice = transferSoundTextVoice;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CallBroadcastSounds callBroadcastSounds = (CallBroadcastSounds) o;
    return Objects.equals(this.dncDigit, callBroadcastSounds.dncDigit) &&
        Objects.equals(this.dncSoundId, callBroadcastSounds.dncSoundId) &&
        Objects.equals(this.dncSoundText, callBroadcastSounds.dncSoundText) &&
        Objects.equals(this.dncSoundTextVoice, callBroadcastSounds.dncSoundTextVoice) &&
        Objects.equals(this.liveSoundId, callBroadcastSounds.liveSoundId) &&
        Objects.equals(this.liveSoundText, callBroadcastSounds.liveSoundText) &&
        Objects.equals(this.liveSoundTextVoice, callBroadcastSounds.liveSoundTextVoice) &&
        Objects.equals(this.machineSoundId, callBroadcastSounds.machineSoundId) &&
        Objects.equals(this.machineSoundText, callBroadcastSounds.machineSoundText) &&
        Objects.equals(this.machineSoundTextVoice, callBroadcastSounds.machineSoundTextVoice) &&
        Objects.equals(this.transferDigit, callBroadcastSounds.transferDigit) &&
        Objects.equals(this.transferNumber, callBroadcastSounds.transferNumber) &&
        Objects.equals(this.transferSoundId, callBroadcastSounds.transferSoundId) &&
        Objects.equals(this.transferSoundText, callBroadcastSounds.transferSoundText) &&
        Objects.equals(this.transferSoundTextVoice, callBroadcastSounds.transferSoundTextVoice);
  }

  @Override
  public int hashCode() {
    return Objects.hash(dncDigit, dncSoundId, dncSoundText, dncSoundTextVoice, liveSoundId, liveSoundText, liveSoundTextVoice, machineSoundId, machineSoundText, machineSoundTextVoice, transferDigit, transferNumber, transferSoundId, transferSoundText, transferSoundTextVoice);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CallBroadcastSounds {\n");
    sb.append("    dncDigit: ").append(toIndentedString(dncDigit)).append("\n");
    sb.append("    dncSoundId: ").append(toIndentedString(dncSoundId)).append("\n");
    sb.append("    dncSoundText: ").append(toIndentedString(dncSoundText)).append("\n");
    sb.append("    dncSoundTextVoice: ").append(toIndentedString(dncSoundTextVoice)).append("\n");
    sb.append("    liveSoundId: ").append(toIndentedString(liveSoundId)).append("\n");
    sb.append("    liveSoundText: ").append(toIndentedString(liveSoundText)).append("\n");
    sb.append("    liveSoundTextVoice: ").append(toIndentedString(liveSoundTextVoice)).append("\n");
    sb.append("    machineSoundId: ").append(toIndentedString(machineSoundId)).append("\n");
    sb.append("    machineSoundText: ").append(toIndentedString(machineSoundText)).append("\n");
    sb.append("    machineSoundTextVoice: ").append(toIndentedString(machineSoundTextVoice)).append("\n");
    sb.append("    transferDigit: ").append(toIndentedString(transferDigit)).append("\n");
    sb.append("    transferNumber: ").append(toIndentedString(transferNumber)).append("\n");
    sb.append("    transferSoundId: ").append(toIndentedString(transferSoundId)).append("\n");
    sb.append("    transferSoundText: ").append(toIndentedString(transferSoundText)).append("\n");
    sb.append("    transferSoundTextVoice: ").append(toIndentedString(transferSoundTextVoice)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("dncDigit");
    openapiFields.add("dncSoundId");
    openapiFields.add("dncSoundText");
    openapiFields.add("dncSoundTextVoice");
    openapiFields.add("liveSoundId");
    openapiFields.add("liveSoundText");
    openapiFields.add("liveSoundTextVoice");
    openapiFields.add("machineSoundId");
    openapiFields.add("machineSoundText");
    openapiFields.add("machineSoundTextVoice");
    openapiFields.add("transferDigit");
    openapiFields.add("transferNumber");
    openapiFields.add("transferSoundId");
    openapiFields.add("transferSoundText");
    openapiFields.add("transferSoundTextVoice");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to CallBroadcastSounds
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!CallBroadcastSounds.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CallBroadcastSounds is not found in the empty JSON string", CallBroadcastSounds.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!CallBroadcastSounds.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CallBroadcastSounds` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("dncDigit") != null && !jsonObj.get("dncDigit").isJsonNull()) && !jsonObj.get("dncDigit").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `dncDigit` to be a primitive type in the JSON string but got `%s`", jsonObj.get("dncDigit").toString()));
      }
      if ((jsonObj.get("dncSoundText") != null && !jsonObj.get("dncSoundText").isJsonNull()) && !jsonObj.get("dncSoundText").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `dncSoundText` to be a primitive type in the JSON string but got `%s`", jsonObj.get("dncSoundText").toString()));
      }
      if ((jsonObj.get("dncSoundTextVoice") != null && !jsonObj.get("dncSoundTextVoice").isJsonNull()) && !jsonObj.get("dncSoundTextVoice").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `dncSoundTextVoice` to be a primitive type in the JSON string but got `%s`", jsonObj.get("dncSoundTextVoice").toString()));
      }
      // validate the optional field `dncSoundTextVoice`
      if (jsonObj.get("dncSoundTextVoice") != null && !jsonObj.get("dncSoundTextVoice").isJsonNull()) {
        DncSoundTextVoiceEnum.validateJsonElement(jsonObj.get("dncSoundTextVoice"));
      }
      if ((jsonObj.get("liveSoundText") != null && !jsonObj.get("liveSoundText").isJsonNull()) && !jsonObj.get("liveSoundText").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `liveSoundText` to be a primitive type in the JSON string but got `%s`", jsonObj.get("liveSoundText").toString()));
      }
      if ((jsonObj.get("liveSoundTextVoice") != null && !jsonObj.get("liveSoundTextVoice").isJsonNull()) && !jsonObj.get("liveSoundTextVoice").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `liveSoundTextVoice` to be a primitive type in the JSON string but got `%s`", jsonObj.get("liveSoundTextVoice").toString()));
      }
      // validate the optional field `liveSoundTextVoice`
      if (jsonObj.get("liveSoundTextVoice") != null && !jsonObj.get("liveSoundTextVoice").isJsonNull()) {
        LiveSoundTextVoiceEnum.validateJsonElement(jsonObj.get("liveSoundTextVoice"));
      }
      if ((jsonObj.get("machineSoundText") != null && !jsonObj.get("machineSoundText").isJsonNull()) && !jsonObj.get("machineSoundText").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `machineSoundText` to be a primitive type in the JSON string but got `%s`", jsonObj.get("machineSoundText").toString()));
      }
      if ((jsonObj.get("machineSoundTextVoice") != null && !jsonObj.get("machineSoundTextVoice").isJsonNull()) && !jsonObj.get("machineSoundTextVoice").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `machineSoundTextVoice` to be a primitive type in the JSON string but got `%s`", jsonObj.get("machineSoundTextVoice").toString()));
      }
      // validate the optional field `machineSoundTextVoice`
      if (jsonObj.get("machineSoundTextVoice") != null && !jsonObj.get("machineSoundTextVoice").isJsonNull()) {
        MachineSoundTextVoiceEnum.validateJsonElement(jsonObj.get("machineSoundTextVoice"));
      }
      if ((jsonObj.get("transferDigit") != null && !jsonObj.get("transferDigit").isJsonNull()) && !jsonObj.get("transferDigit").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `transferDigit` to be a primitive type in the JSON string but got `%s`", jsonObj.get("transferDigit").toString()));
      }
      if ((jsonObj.get("transferNumber") != null && !jsonObj.get("transferNumber").isJsonNull()) && !jsonObj.get("transferNumber").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `transferNumber` to be a primitive type in the JSON string but got `%s`", jsonObj.get("transferNumber").toString()));
      }
      if ((jsonObj.get("transferSoundText") != null && !jsonObj.get("transferSoundText").isJsonNull()) && !jsonObj.get("transferSoundText").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `transferSoundText` to be a primitive type in the JSON string but got `%s`", jsonObj.get("transferSoundText").toString()));
      }
      if ((jsonObj.get("transferSoundTextVoice") != null && !jsonObj.get("transferSoundTextVoice").isJsonNull()) && !jsonObj.get("transferSoundTextVoice").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `transferSoundTextVoice` to be a primitive type in the JSON string but got `%s`", jsonObj.get("transferSoundTextVoice").toString()));
      }
      // validate the optional field `transferSoundTextVoice`
      if (jsonObj.get("transferSoundTextVoice") != null && !jsonObj.get("transferSoundTextVoice").isJsonNull()) {
        TransferSoundTextVoiceEnum.validateJsonElement(jsonObj.get("transferSoundTextVoice"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CallBroadcastSounds.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CallBroadcastSounds' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CallBroadcastSounds> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CallBroadcastSounds.class));

       return (TypeAdapter<T>) new TypeAdapter<CallBroadcastSounds>() {
           @Override
           public void write(JsonWriter out, CallBroadcastSounds value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CallBroadcastSounds read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of CallBroadcastSounds given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of CallBroadcastSounds
   * @throws IOException if the JSON string is invalid with respect to CallBroadcastSounds
   */
  public static CallBroadcastSounds fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CallBroadcastSounds.class);
  }

  /**
   * Convert an instance of CallBroadcastSounds to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

