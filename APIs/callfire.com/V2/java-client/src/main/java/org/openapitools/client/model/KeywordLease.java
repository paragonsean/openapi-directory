/*
 * CallFire API Documentation
 * CallFire
 *
 * The version of the OpenAPI document: V2
 * Contact: support@callfire.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Represents a lease object for a given keyword
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T09:59:09.684594-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class KeywordLease {
  public static final String SERIALIZED_NAME_AUTO_RENEW = "autoRenew";
  @SerializedName(SERIALIZED_NAME_AUTO_RENEW)
  private Boolean autoRenew;

  public static final String SERIALIZED_NAME_CONTACT_LIST_ID = "contactListId";
  @SerializedName(SERIALIZED_NAME_CONTACT_LIST_ID)
  private Long contactListId;

  public static final String SERIALIZED_NAME_DOUBLE_OPT_IN_ENABLED = "doubleOptInEnabled";
  @SerializedName(SERIALIZED_NAME_DOUBLE_OPT_IN_ENABLED)
  private Boolean doubleOptInEnabled;

  public static final String SERIALIZED_NAME_KEYWORD = "keyword";
  @SerializedName(SERIALIZED_NAME_KEYWORD)
  private String keyword;

  public static final String SERIALIZED_NAME_LABELS = "labels";
  @SerializedName(SERIALIZED_NAME_LABELS)
  private List<String> labels = new ArrayList<>();

  public static final String SERIALIZED_NAME_LEASE_BEGIN = "leaseBegin";
  @SerializedName(SERIALIZED_NAME_LEASE_BEGIN)
  private Long leaseBegin;

  public static final String SERIALIZED_NAME_LEASE_END = "leaseEnd";
  @SerializedName(SERIALIZED_NAME_LEASE_END)
  private Long leaseEnd;

  public static final String SERIALIZED_NAME_NUMBER = "number";
  @SerializedName(SERIALIZED_NAME_NUMBER)
  private String number;

  public static final String SERIALIZED_NAME_OPT_IN_CONFIRMATION_MESSAGE = "optInConfirmationMessage";
  @SerializedName(SERIALIZED_NAME_OPT_IN_CONFIRMATION_MESSAGE)
  private String optInConfirmationMessage;

  public static final String SERIALIZED_NAME_SHORT_CODE = "shortCode";
  @SerializedName(SERIALIZED_NAME_SHORT_CODE)
  private String shortCode;

  /**
   * A lease status. Available values: PENDING, ACTIVE, RELEASED, UNAVAILABLE
   */
  @JsonAdapter(StatusEnum.Adapter.class)
  public enum StatusEnum {
    PENDING("PENDING"),
    
    ACTIVE("ACTIVE"),
    
    RELEASED("RELEASED"),
    
    UNAVAILABLE("UNAVAILABLE");

    private String value;

    StatusEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static StatusEnum fromValue(String value) {
      for (StatusEnum b : StatusEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<StatusEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final StatusEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public StatusEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return StatusEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      StatusEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_STATUS = "status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  private StatusEnum status;

  /**
   * ~
   */
  @JsonAdapter(TypeEnum.Adapter.class)
  public enum TypeEnum {
    PLAN("PLAN"),
    
    EXTRA("EXTRA");

    private String value;

    TypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static TypeEnum fromValue(String value) {
      for (TypeEnum b : TypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<TypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final TypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public TypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return TypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      TypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_TYPE = "type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  private TypeEnum type;

  public KeywordLease() {
  }

  public KeywordLease autoRenew(Boolean autoRenew) {
    this.autoRenew = autoRenew;
    return this;
  }

  /**
   * Enables the auto renewal of a keyword lease at the end of each billing cycle
   * @return autoRenew
   */
  @javax.annotation.Nullable
  public Boolean getAutoRenew() {
    return autoRenew;
  }

  public void setAutoRenew(Boolean autoRenew) {
    this.autoRenew = autoRenew;
  }


  public KeywordLease contactListId(Long contactListId) {
    this.contactListId = contactListId;
    return this;
  }

  /**
   * Existing contact list ID
   * @return contactListId
   */
  @javax.annotation.Nullable
  public Long getContactListId() {
    return contactListId;
  }

  public void setContactListId(Long contactListId) {
    this.contactListId = contactListId;
  }


  public KeywordLease doubleOptInEnabled(Boolean doubleOptInEnabled) {
    this.doubleOptInEnabled = doubleOptInEnabled;
    return this;
  }

  /**
   * Enable/disable double opt in feature
   * @return doubleOptInEnabled
   */
  @javax.annotation.Nullable
  public Boolean getDoubleOptInEnabled() {
    return doubleOptInEnabled;
  }

  public void setDoubleOptInEnabled(Boolean doubleOptInEnabled) {
    this.doubleOptInEnabled = doubleOptInEnabled;
  }


  public KeywordLease keyword(String keyword) {
    this.keyword = keyword;
    return this;
  }

  /**
   * A text used as a keyword
   * @return keyword
   */
  @javax.annotation.Nullable
  public String getKeyword() {
    return keyword;
  }

  public void setKeyword(String keyword) {
    this.keyword = keyword;
  }


  public KeywordLease labels(List<String> labels) {
    this.labels = labels;
    return this;
  }

  public KeywordLease addLabelsItem(String labelsItem) {
    if (this.labels == null) {
      this.labels = new ArrayList<>();
    }
    this.labels.add(labelsItem);
    return this;
  }

  /**
   * ~
   * @return labels
   */
  @javax.annotation.Nullable
  public List<String> getLabels() {
    return labels;
  }

  public void setLabels(List<String> labels) {
    this.labels = labels;
  }


  public KeywordLease leaseBegin(Long leaseBegin) {
    this.leaseBegin = leaseBegin;
    return this;
  }

  /**
   * A time of a lease timestamp, formatted in unix time milliseconds (read only). Example: 1473781817000 for Sat, 05 Jan 1985 14:03:37 GMT
   * @return leaseBegin
   */
  @javax.annotation.Nullable
  public Long getLeaseBegin() {
    return leaseBegin;
  }

  public void setLeaseBegin(Long leaseBegin) {
    this.leaseBegin = leaseBegin;
  }


  public KeywordLease leaseEnd(Long leaseEnd) {
    this.leaseEnd = leaseEnd;
    return this;
  }

  /**
   * A date and time when the keyword lease is finishes. Timestamp, formatted in unix time milliseconds (read only). Example: 1473781817000
   * @return leaseEnd
   */
  @javax.annotation.Nullable
  public Long getLeaseEnd() {
    return leaseEnd;
  }

  public void setLeaseEnd(Long leaseEnd) {
    this.leaseEnd = leaseEnd;
  }


  public KeywordLease number(String number) {
    this.number = number;
    return this;
  }

  /**
   * A number assigned to keyword. Example: 12132212344
   * @return number
   */
  @javax.annotation.Nullable
  public String getNumber() {
    return number;
  }

  public void setNumber(String number) {
    this.number = number;
  }


  public KeywordLease optInConfirmationMessage(String optInConfirmationMessage) {
    this.optInConfirmationMessage = optInConfirmationMessage;
    return this;
  }

  /**
   * Opt in confirmation message
   * @return optInConfirmationMessage
   */
  @javax.annotation.Nullable
  public String getOptInConfirmationMessage() {
    return optInConfirmationMessage;
  }

  public void setOptInConfirmationMessage(String optInConfirmationMessage) {
    this.optInConfirmationMessage = optInConfirmationMessage;
  }


  public KeywordLease shortCode(String shortCode) {
    this.shortCode = shortCode;
    return this;
  }

  /**
   * A short code assigned to keyword. Example: 67076 (Deprecated - please use number instead)
   * @return shortCode
   */
  @javax.annotation.Nullable
  public String getShortCode() {
    return shortCode;
  }

  public void setShortCode(String shortCode) {
    this.shortCode = shortCode;
  }


  public KeywordLease status(StatusEnum status) {
    this.status = status;
    return this;
  }

  /**
   * A lease status. Available values: PENDING, ACTIVE, RELEASED, UNAVAILABLE
   * @return status
   */
  @javax.annotation.Nullable
  public StatusEnum getStatus() {
    return status;
  }

  public void setStatus(StatusEnum status) {
    this.status = status;
  }


  public KeywordLease type(TypeEnum type) {
    this.type = type;
    return this;
  }

  /**
   * ~
   * @return type
   */
  @javax.annotation.Nullable
  public TypeEnum getType() {
    return type;
  }

  public void setType(TypeEnum type) {
    this.type = type;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    KeywordLease keywordLease = (KeywordLease) o;
    return Objects.equals(this.autoRenew, keywordLease.autoRenew) &&
        Objects.equals(this.contactListId, keywordLease.contactListId) &&
        Objects.equals(this.doubleOptInEnabled, keywordLease.doubleOptInEnabled) &&
        Objects.equals(this.keyword, keywordLease.keyword) &&
        Objects.equals(this.labels, keywordLease.labels) &&
        Objects.equals(this.leaseBegin, keywordLease.leaseBegin) &&
        Objects.equals(this.leaseEnd, keywordLease.leaseEnd) &&
        Objects.equals(this.number, keywordLease.number) &&
        Objects.equals(this.optInConfirmationMessage, keywordLease.optInConfirmationMessage) &&
        Objects.equals(this.shortCode, keywordLease.shortCode) &&
        Objects.equals(this.status, keywordLease.status) &&
        Objects.equals(this.type, keywordLease.type);
  }

  @Override
  public int hashCode() {
    return Objects.hash(autoRenew, contactListId, doubleOptInEnabled, keyword, labels, leaseBegin, leaseEnd, number, optInConfirmationMessage, shortCode, status, type);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class KeywordLease {\n");
    sb.append("    autoRenew: ").append(toIndentedString(autoRenew)).append("\n");
    sb.append("    contactListId: ").append(toIndentedString(contactListId)).append("\n");
    sb.append("    doubleOptInEnabled: ").append(toIndentedString(doubleOptInEnabled)).append("\n");
    sb.append("    keyword: ").append(toIndentedString(keyword)).append("\n");
    sb.append("    labels: ").append(toIndentedString(labels)).append("\n");
    sb.append("    leaseBegin: ").append(toIndentedString(leaseBegin)).append("\n");
    sb.append("    leaseEnd: ").append(toIndentedString(leaseEnd)).append("\n");
    sb.append("    number: ").append(toIndentedString(number)).append("\n");
    sb.append("    optInConfirmationMessage: ").append(toIndentedString(optInConfirmationMessage)).append("\n");
    sb.append("    shortCode: ").append(toIndentedString(shortCode)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("autoRenew");
    openapiFields.add("contactListId");
    openapiFields.add("doubleOptInEnabled");
    openapiFields.add("keyword");
    openapiFields.add("labels");
    openapiFields.add("leaseBegin");
    openapiFields.add("leaseEnd");
    openapiFields.add("number");
    openapiFields.add("optInConfirmationMessage");
    openapiFields.add("shortCode");
    openapiFields.add("status");
    openapiFields.add("type");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to KeywordLease
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!KeywordLease.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in KeywordLease is not found in the empty JSON string", KeywordLease.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!KeywordLease.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `KeywordLease` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("keyword") != null && !jsonObj.get("keyword").isJsonNull()) && !jsonObj.get("keyword").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `keyword` to be a primitive type in the JSON string but got `%s`", jsonObj.get("keyword").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("labels") != null && !jsonObj.get("labels").isJsonNull() && !jsonObj.get("labels").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `labels` to be an array in the JSON string but got `%s`", jsonObj.get("labels").toString()));
      }
      if ((jsonObj.get("number") != null && !jsonObj.get("number").isJsonNull()) && !jsonObj.get("number").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `number` to be a primitive type in the JSON string but got `%s`", jsonObj.get("number").toString()));
      }
      if ((jsonObj.get("optInConfirmationMessage") != null && !jsonObj.get("optInConfirmationMessage").isJsonNull()) && !jsonObj.get("optInConfirmationMessage").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `optInConfirmationMessage` to be a primitive type in the JSON string but got `%s`", jsonObj.get("optInConfirmationMessage").toString()));
      }
      if ((jsonObj.get("shortCode") != null && !jsonObj.get("shortCode").isJsonNull()) && !jsonObj.get("shortCode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `shortCode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("shortCode").toString()));
      }
      if ((jsonObj.get("status") != null && !jsonObj.get("status").isJsonNull()) && !jsonObj.get("status").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `status` to be a primitive type in the JSON string but got `%s`", jsonObj.get("status").toString()));
      }
      // validate the optional field `status`
      if (jsonObj.get("status") != null && !jsonObj.get("status").isJsonNull()) {
        StatusEnum.validateJsonElement(jsonObj.get("status"));
      }
      if ((jsonObj.get("type") != null && !jsonObj.get("type").isJsonNull()) && !jsonObj.get("type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("type").toString()));
      }
      // validate the optional field `type`
      if (jsonObj.get("type") != null && !jsonObj.get("type").isJsonNull()) {
        TypeEnum.validateJsonElement(jsonObj.get("type"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!KeywordLease.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'KeywordLease' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<KeywordLease> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(KeywordLease.class));

       return (TypeAdapter<T>) new TypeAdapter<KeywordLease>() {
           @Override
           public void write(JsonWriter out, KeywordLease value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public KeywordLease read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of KeywordLease given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of KeywordLease
   * @throws IOException if the JSON string is invalid with respect to KeywordLease
   */
  public static KeywordLease fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, KeywordLease.class);
  }

  /**
   * Convert an instance of KeywordLease to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

