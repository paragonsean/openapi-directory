/*
 * CallFire API Documentation
 * CallFire
 *
 * The version of the OpenAPI document: V2
 * Contact: support@callfire.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.Region;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Represents a lease object for a given phone number
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T09:59:09.684594-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class NumberLease {
  public static final String SERIALIZED_NAME_AUTO_RENEW = "autoRenew";
  @SerializedName(SERIALIZED_NAME_AUTO_RENEW)
  private Boolean autoRenew;

  /**
   * A status of a call feature. Available values: DISABLED, ENABLED
   */
  @JsonAdapter(CallFeatureStatusEnum.Adapter.class)
  public enum CallFeatureStatusEnum {
    UNSUPPORTED("UNSUPPORTED"),
    
    PENDING("PENDING"),
    
    DISABLED("DISABLED"),
    
    ENABLED("ENABLED");

    private String value;

    CallFeatureStatusEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static CallFeatureStatusEnum fromValue(String value) {
      for (CallFeatureStatusEnum b : CallFeatureStatusEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<CallFeatureStatusEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final CallFeatureStatusEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public CallFeatureStatusEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return CallFeatureStatusEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      CallFeatureStatusEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_CALL_FEATURE_STATUS = "callFeatureStatus";
  @SerializedName(SERIALIZED_NAME_CALL_FEATURE_STATUS)
  private CallFeatureStatusEnum callFeatureStatus;

  public static final String SERIALIZED_NAME_LABELS = "labels";
  @SerializedName(SERIALIZED_NAME_LABELS)
  private List<String> labels = new ArrayList<>();

  public static final String SERIALIZED_NAME_LEASE_BEGIN = "leaseBegin";
  @SerializedName(SERIALIZED_NAME_LEASE_BEGIN)
  private Long leaseBegin;

  public static final String SERIALIZED_NAME_LEASE_END = "leaseEnd";
  @SerializedName(SERIALIZED_NAME_LEASE_END)
  private Long leaseEnd;

  public static final String SERIALIZED_NAME_NATIONAL_FORMAT = "nationalFormat";
  @SerializedName(SERIALIZED_NAME_NATIONAL_FORMAT)
  private String nationalFormat;

  public static final String SERIALIZED_NAME_NUMBER = "number";
  @SerializedName(SERIALIZED_NAME_NUMBER)
  private String number;

  public static final String SERIALIZED_NAME_REGION = "region";
  @SerializedName(SERIALIZED_NAME_REGION)
  private Region region;

  public static final String SERIALIZED_NAME_SEND_EMAIL_ON_CREATE = "sendEmailOnCreate";
  @SerializedName(SERIALIZED_NAME_SEND_EMAIL_ON_CREATE)
  private Boolean sendEmailOnCreate;

  /**
   * A lease status. Available values: PENDING, ACTIVE, RELEASED, UNAVAILABLE
   */
  @JsonAdapter(StatusEnum.Adapter.class)
  public enum StatusEnum {
    PENDING("PENDING"),
    
    ACTIVE("ACTIVE"),
    
    RELEASED("RELEASED"),
    
    UNAVAILABLE("UNAVAILABLE");

    private String value;

    StatusEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static StatusEnum fromValue(String value) {
      for (StatusEnum b : StatusEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<StatusEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final StatusEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public StatusEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return StatusEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      StatusEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_STATUS = "status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  private StatusEnum status;

  /**
   * A status of a text feature. Available values: DISABLED, ENABLED
   */
  @JsonAdapter(TextFeatureStatusEnum.Adapter.class)
  public enum TextFeatureStatusEnum {
    UNSUPPORTED("UNSUPPORTED"),
    
    PENDING("PENDING"),
    
    DISABLED("DISABLED"),
    
    ENABLED("ENABLED");

    private String value;

    TextFeatureStatusEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static TextFeatureStatusEnum fromValue(String value) {
      for (TextFeatureStatusEnum b : TextFeatureStatusEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<TextFeatureStatusEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final TextFeatureStatusEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public TextFeatureStatusEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return TextFeatureStatusEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      TextFeatureStatusEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_TEXT_FEATURE_STATUS = "textFeatureStatus";
  @SerializedName(SERIALIZED_NAME_TEXT_FEATURE_STATUS)
  private TextFeatureStatusEnum textFeatureStatus;

  public static final String SERIALIZED_NAME_TOLL_FREE = "tollFree";
  @SerializedName(SERIALIZED_NAME_TOLL_FREE)
  private Boolean tollFree;

  /**
   * ~
   */
  @JsonAdapter(TypeEnum.Adapter.class)
  public enum TypeEnum {
    PLAN("PLAN"),
    
    EXTRA("EXTRA");

    private String value;

    TypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static TypeEnum fromValue(String value) {
      for (TypeEnum b : TypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<TypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final TypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public TypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return TypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      TypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_TYPE = "type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  private TypeEnum type;

  public NumberLease() {
  }

  public NumberLease(
     StatusEnum status
  ) {
    this();
    this.status = status;
  }

  public NumberLease autoRenew(Boolean autoRenew) {
    this.autoRenew = autoRenew;
    return this;
  }

  /**
   * Enables the auto renewal of number lease at end of each billing cycle
   * @return autoRenew
   */
  @javax.annotation.Nullable
  public Boolean getAutoRenew() {
    return autoRenew;
  }

  public void setAutoRenew(Boolean autoRenew) {
    this.autoRenew = autoRenew;
  }


  public NumberLease callFeatureStatus(CallFeatureStatusEnum callFeatureStatus) {
    this.callFeatureStatus = callFeatureStatus;
    return this;
  }

  /**
   * A status of a call feature. Available values: DISABLED, ENABLED
   * @return callFeatureStatus
   */
  @javax.annotation.Nullable
  public CallFeatureStatusEnum getCallFeatureStatus() {
    return callFeatureStatus;
  }

  public void setCallFeatureStatus(CallFeatureStatusEnum callFeatureStatus) {
    this.callFeatureStatus = callFeatureStatus;
  }


  public NumberLease labels(List<String> labels) {
    this.labels = labels;
    return this;
  }

  public NumberLease addLabelsItem(String labelsItem) {
    if (this.labels == null) {
      this.labels = new ArrayList<>();
    }
    this.labels.add(labelsItem);
    return this;
  }

  /**
   * ~
   * @return labels
   */
  @javax.annotation.Nullable
  public List<String> getLabels() {
    return labels;
  }

  public void setLabels(List<String> labels) {
    this.labels = labels;
  }


  public NumberLease leaseBegin(Long leaseBegin) {
    this.leaseBegin = leaseBegin;
    return this;
  }

  /**
   * A date and time of a lease start. Timestamp, formatted in unix time milliseconds (read only). Example: 1473781817000
   * @return leaseBegin
   */
  @javax.annotation.Nullable
  public Long getLeaseBegin() {
    return leaseBegin;
  }

  public void setLeaseBegin(Long leaseBegin) {
    this.leaseBegin = leaseBegin;
  }


  public NumberLease leaseEnd(Long leaseEnd) {
    this.leaseEnd = leaseEnd;
    return this;
  }

  /**
   * A data and time of a lease finish. Timestamp, formatted in unix time milliseconds (read only). Example: 1473781817000
   * @return leaseEnd
   */
  @javax.annotation.Nullable
  public Long getLeaseEnd() {
    return leaseEnd;
  }

  public void setLeaseEnd(Long leaseEnd) {
    this.leaseEnd = leaseEnd;
  }


  public NumberLease nationalFormat(String nationalFormat) {
    this.nationalFormat = nationalFormat;
    return this;
  }

  /**
   * Formatted number with a country code
   * @return nationalFormat
   */
  @javax.annotation.Nullable
  public String getNationalFormat() {
    return nationalFormat;
  }

  public void setNationalFormat(String nationalFormat) {
    this.nationalFormat = nationalFormat;
  }


  public NumberLease number(String number) {
    this.number = number;
    return this;
  }

  /**
   * A phone number in E.164 format (11-digit). Example: 12132000384
   * @return number
   */
  @javax.annotation.Nullable
  public String getNumber() {
    return number;
  }

  public void setNumber(String number) {
    this.number = number;
  }


  public NumberLease region(Region region) {
    this.region = region;
    return this;
  }

  /**
   * Get region
   * @return region
   */
  @javax.annotation.Nullable
  public Region getRegion() {
    return region;
  }

  public void setRegion(Region region) {
    this.region = region;
  }


  public NumberLease sendEmailOnCreate(Boolean sendEmailOnCreate) {
    this.sendEmailOnCreate = sendEmailOnCreate;
    return this;
  }

  /**
   * ~
   * @return sendEmailOnCreate
   */
  @javax.annotation.Nullable
  public Boolean getSendEmailOnCreate() {
    return sendEmailOnCreate;
  }

  public void setSendEmailOnCreate(Boolean sendEmailOnCreate) {
    this.sendEmailOnCreate = sendEmailOnCreate;
  }


  /**
   * A lease status. Available values: PENDING, ACTIVE, RELEASED, UNAVAILABLE
   * @return status
   */
  @javax.annotation.Nullable
  public StatusEnum getStatus() {
    return status;
  }



  public NumberLease textFeatureStatus(TextFeatureStatusEnum textFeatureStatus) {
    this.textFeatureStatus = textFeatureStatus;
    return this;
  }

  /**
   * A status of a text feature. Available values: DISABLED, ENABLED
   * @return textFeatureStatus
   */
  @javax.annotation.Nullable
  public TextFeatureStatusEnum getTextFeatureStatus() {
    return textFeatureStatus;
  }

  public void setTextFeatureStatus(TextFeatureStatusEnum textFeatureStatus) {
    this.textFeatureStatus = textFeatureStatus;
  }


  public NumberLease tollFree(Boolean tollFree) {
    this.tollFree = tollFree;
    return this;
  }

  /**
   * A  toll-free number
   * @return tollFree
   */
  @javax.annotation.Nullable
  public Boolean getTollFree() {
    return tollFree;
  }

  public void setTollFree(Boolean tollFree) {
    this.tollFree = tollFree;
  }


  public NumberLease type(TypeEnum type) {
    this.type = type;
    return this;
  }

  /**
   * ~
   * @return type
   */
  @javax.annotation.Nullable
  public TypeEnum getType() {
    return type;
  }

  public void setType(TypeEnum type) {
    this.type = type;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    NumberLease numberLease = (NumberLease) o;
    return Objects.equals(this.autoRenew, numberLease.autoRenew) &&
        Objects.equals(this.callFeatureStatus, numberLease.callFeatureStatus) &&
        Objects.equals(this.labels, numberLease.labels) &&
        Objects.equals(this.leaseBegin, numberLease.leaseBegin) &&
        Objects.equals(this.leaseEnd, numberLease.leaseEnd) &&
        Objects.equals(this.nationalFormat, numberLease.nationalFormat) &&
        Objects.equals(this.number, numberLease.number) &&
        Objects.equals(this.region, numberLease.region) &&
        Objects.equals(this.sendEmailOnCreate, numberLease.sendEmailOnCreate) &&
        Objects.equals(this.status, numberLease.status) &&
        Objects.equals(this.textFeatureStatus, numberLease.textFeatureStatus) &&
        Objects.equals(this.tollFree, numberLease.tollFree) &&
        Objects.equals(this.type, numberLease.type);
  }

  @Override
  public int hashCode() {
    return Objects.hash(autoRenew, callFeatureStatus, labels, leaseBegin, leaseEnd, nationalFormat, number, region, sendEmailOnCreate, status, textFeatureStatus, tollFree, type);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class NumberLease {\n");
    sb.append("    autoRenew: ").append(toIndentedString(autoRenew)).append("\n");
    sb.append("    callFeatureStatus: ").append(toIndentedString(callFeatureStatus)).append("\n");
    sb.append("    labels: ").append(toIndentedString(labels)).append("\n");
    sb.append("    leaseBegin: ").append(toIndentedString(leaseBegin)).append("\n");
    sb.append("    leaseEnd: ").append(toIndentedString(leaseEnd)).append("\n");
    sb.append("    nationalFormat: ").append(toIndentedString(nationalFormat)).append("\n");
    sb.append("    number: ").append(toIndentedString(number)).append("\n");
    sb.append("    region: ").append(toIndentedString(region)).append("\n");
    sb.append("    sendEmailOnCreate: ").append(toIndentedString(sendEmailOnCreate)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    textFeatureStatus: ").append(toIndentedString(textFeatureStatus)).append("\n");
    sb.append("    tollFree: ").append(toIndentedString(tollFree)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("autoRenew");
    openapiFields.add("callFeatureStatus");
    openapiFields.add("labels");
    openapiFields.add("leaseBegin");
    openapiFields.add("leaseEnd");
    openapiFields.add("nationalFormat");
    openapiFields.add("number");
    openapiFields.add("region");
    openapiFields.add("sendEmailOnCreate");
    openapiFields.add("status");
    openapiFields.add("textFeatureStatus");
    openapiFields.add("tollFree");
    openapiFields.add("type");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to NumberLease
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!NumberLease.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in NumberLease is not found in the empty JSON string", NumberLease.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!NumberLease.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `NumberLease` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("callFeatureStatus") != null && !jsonObj.get("callFeatureStatus").isJsonNull()) && !jsonObj.get("callFeatureStatus").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `callFeatureStatus` to be a primitive type in the JSON string but got `%s`", jsonObj.get("callFeatureStatus").toString()));
      }
      // validate the optional field `callFeatureStatus`
      if (jsonObj.get("callFeatureStatus") != null && !jsonObj.get("callFeatureStatus").isJsonNull()) {
        CallFeatureStatusEnum.validateJsonElement(jsonObj.get("callFeatureStatus"));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("labels") != null && !jsonObj.get("labels").isJsonNull() && !jsonObj.get("labels").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `labels` to be an array in the JSON string but got `%s`", jsonObj.get("labels").toString()));
      }
      if ((jsonObj.get("nationalFormat") != null && !jsonObj.get("nationalFormat").isJsonNull()) && !jsonObj.get("nationalFormat").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `nationalFormat` to be a primitive type in the JSON string but got `%s`", jsonObj.get("nationalFormat").toString()));
      }
      if ((jsonObj.get("number") != null && !jsonObj.get("number").isJsonNull()) && !jsonObj.get("number").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `number` to be a primitive type in the JSON string but got `%s`", jsonObj.get("number").toString()));
      }
      // validate the optional field `region`
      if (jsonObj.get("region") != null && !jsonObj.get("region").isJsonNull()) {
        Region.validateJsonElement(jsonObj.get("region"));
      }
      if ((jsonObj.get("status") != null && !jsonObj.get("status").isJsonNull()) && !jsonObj.get("status").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `status` to be a primitive type in the JSON string but got `%s`", jsonObj.get("status").toString()));
      }
      // validate the optional field `status`
      if (jsonObj.get("status") != null && !jsonObj.get("status").isJsonNull()) {
        StatusEnum.validateJsonElement(jsonObj.get("status"));
      }
      if ((jsonObj.get("textFeatureStatus") != null && !jsonObj.get("textFeatureStatus").isJsonNull()) && !jsonObj.get("textFeatureStatus").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `textFeatureStatus` to be a primitive type in the JSON string but got `%s`", jsonObj.get("textFeatureStatus").toString()));
      }
      // validate the optional field `textFeatureStatus`
      if (jsonObj.get("textFeatureStatus") != null && !jsonObj.get("textFeatureStatus").isJsonNull()) {
        TextFeatureStatusEnum.validateJsonElement(jsonObj.get("textFeatureStatus"));
      }
      if ((jsonObj.get("type") != null && !jsonObj.get("type").isJsonNull()) && !jsonObj.get("type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("type").toString()));
      }
      // validate the optional field `type`
      if (jsonObj.get("type") != null && !jsonObj.get("type").isJsonNull()) {
        TypeEnum.validateJsonElement(jsonObj.get("type"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!NumberLease.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'NumberLease' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<NumberLease> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(NumberLease.class));

       return (TypeAdapter<T>) new TypeAdapter<NumberLease>() {
           @Override
           public void write(JsonWriter out, NumberLease value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public NumberLease read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of NumberLease given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of NumberLease
   * @throws IOException if the JSON string is invalid with respect to NumberLease
   */
  public static NumberLease fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, NumberLease.class);
  }

  /**
   * Convert an instance of NumberLease to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

