/*
 * CallFire API Documentation
 * CallFire
 *
 * The version of the OpenAPI document: V2
 * Contact: support@callfire.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.CallTrackingConfig;
import org.openapitools.client.model.IvrInboundConfig;
import org.openapitools.client.model.TextInboundConfig;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Represents the configuration of a phone number purchased by user. You can configure number to accept inbound calls, play sounds to customer, make a transfer or setup an IVR script to interact with customer. See [CallFire IVR](https://www.callfire.com/products/ivr) for more info
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T09:59:09.684594-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class NumberConfig {
  public static final String SERIALIZED_NAME_CALL_TRACKING_CONFIG = "callTrackingConfig";
  @SerializedName(SERIALIZED_NAME_CALL_TRACKING_CONFIG)
  private CallTrackingConfig callTrackingConfig;

  /**
   * A type of config. Available values: TRACKING, IVR
   */
  @JsonAdapter(ConfigTypeEnum.Adapter.class)
  public enum ConfigTypeEnum {
    IVR("IVR"),
    
    TRACKING("TRACKING");

    private String value;

    ConfigTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ConfigTypeEnum fromValue(String value) {
      for (ConfigTypeEnum b : ConfigTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ConfigTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ConfigTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ConfigTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ConfigTypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      ConfigTypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_CONFIG_TYPE = "configType";
  @SerializedName(SERIALIZED_NAME_CONFIG_TYPE)
  private ConfigTypeEnum configType;

  public static final String SERIALIZED_NAME_IVR_INBOUND_CONFIG = "ivrInboundConfig";
  @SerializedName(SERIALIZED_NAME_IVR_INBOUND_CONFIG)
  private IvrInboundConfig ivrInboundConfig;

  public static final String SERIALIZED_NAME_NUMBER = "number";
  @SerializedName(SERIALIZED_NAME_NUMBER)
  private String number;

  public static final String SERIALIZED_NAME_TEXT_INBOUND_CONFIG = "textInboundConfig";
  @SerializedName(SERIALIZED_NAME_TEXT_INBOUND_CONFIG)
  private TextInboundConfig textInboundConfig;

  public NumberConfig() {
  }

  public NumberConfig callTrackingConfig(CallTrackingConfig callTrackingConfig) {
    this.callTrackingConfig = callTrackingConfig;
    return this;
  }

  /**
   * Get callTrackingConfig
   * @return callTrackingConfig
   */
  @javax.annotation.Nullable
  public CallTrackingConfig getCallTrackingConfig() {
    return callTrackingConfig;
  }

  public void setCallTrackingConfig(CallTrackingConfig callTrackingConfig) {
    this.callTrackingConfig = callTrackingConfig;
  }


  public NumberConfig configType(ConfigTypeEnum configType) {
    this.configType = configType;
    return this;
  }

  /**
   * A type of config. Available values: TRACKING, IVR
   * @return configType
   */
  @javax.annotation.Nullable
  public ConfigTypeEnum getConfigType() {
    return configType;
  }

  public void setConfigType(ConfigTypeEnum configType) {
    this.configType = configType;
  }


  public NumberConfig ivrInboundConfig(IvrInboundConfig ivrInboundConfig) {
    this.ivrInboundConfig = ivrInboundConfig;
    return this;
  }

  /**
   * Get ivrInboundConfig
   * @return ivrInboundConfig
   */
  @javax.annotation.Nullable
  public IvrInboundConfig getIvrInboundConfig() {
    return ivrInboundConfig;
  }

  public void setIvrInboundConfig(IvrInboundConfig ivrInboundConfig) {
    this.ivrInboundConfig = ivrInboundConfig;
  }


  public NumberConfig number(String number) {
    this.number = number;
    return this;
  }

  /**
   * Phone number in E.164 format (11-digit). Example: 12132000384
   * @return number
   */
  @javax.annotation.Nullable
  public String getNumber() {
    return number;
  }

  public void setNumber(String number) {
    this.number = number;
  }


  public NumberConfig textInboundConfig(TextInboundConfig textInboundConfig) {
    this.textInboundConfig = textInboundConfig;
    return this;
  }

  /**
   * Get textInboundConfig
   * @return textInboundConfig
   */
  @javax.annotation.Nullable
  public TextInboundConfig getTextInboundConfig() {
    return textInboundConfig;
  }

  public void setTextInboundConfig(TextInboundConfig textInboundConfig) {
    this.textInboundConfig = textInboundConfig;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    NumberConfig numberConfig = (NumberConfig) o;
    return Objects.equals(this.callTrackingConfig, numberConfig.callTrackingConfig) &&
        Objects.equals(this.configType, numberConfig.configType) &&
        Objects.equals(this.ivrInboundConfig, numberConfig.ivrInboundConfig) &&
        Objects.equals(this.number, numberConfig.number) &&
        Objects.equals(this.textInboundConfig, numberConfig.textInboundConfig);
  }

  @Override
  public int hashCode() {
    return Objects.hash(callTrackingConfig, configType, ivrInboundConfig, number, textInboundConfig);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class NumberConfig {\n");
    sb.append("    callTrackingConfig: ").append(toIndentedString(callTrackingConfig)).append("\n");
    sb.append("    configType: ").append(toIndentedString(configType)).append("\n");
    sb.append("    ivrInboundConfig: ").append(toIndentedString(ivrInboundConfig)).append("\n");
    sb.append("    number: ").append(toIndentedString(number)).append("\n");
    sb.append("    textInboundConfig: ").append(toIndentedString(textInboundConfig)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("callTrackingConfig");
    openapiFields.add("configType");
    openapiFields.add("ivrInboundConfig");
    openapiFields.add("number");
    openapiFields.add("textInboundConfig");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to NumberConfig
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!NumberConfig.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in NumberConfig is not found in the empty JSON string", NumberConfig.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!NumberConfig.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `NumberConfig` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `callTrackingConfig`
      if (jsonObj.get("callTrackingConfig") != null && !jsonObj.get("callTrackingConfig").isJsonNull()) {
        CallTrackingConfig.validateJsonElement(jsonObj.get("callTrackingConfig"));
      }
      if ((jsonObj.get("configType") != null && !jsonObj.get("configType").isJsonNull()) && !jsonObj.get("configType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `configType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("configType").toString()));
      }
      // validate the optional field `configType`
      if (jsonObj.get("configType") != null && !jsonObj.get("configType").isJsonNull()) {
        ConfigTypeEnum.validateJsonElement(jsonObj.get("configType"));
      }
      // validate the optional field `ivrInboundConfig`
      if (jsonObj.get("ivrInboundConfig") != null && !jsonObj.get("ivrInboundConfig").isJsonNull()) {
        IvrInboundConfig.validateJsonElement(jsonObj.get("ivrInboundConfig"));
      }
      if ((jsonObj.get("number") != null && !jsonObj.get("number").isJsonNull()) && !jsonObj.get("number").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `number` to be a primitive type in the JSON string but got `%s`", jsonObj.get("number").toString()));
      }
      // validate the optional field `textInboundConfig`
      if (jsonObj.get("textInboundConfig") != null && !jsonObj.get("textInboundConfig").isJsonNull()) {
        TextInboundConfig.validateJsonElement(jsonObj.get("textInboundConfig"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!NumberConfig.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'NumberConfig' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<NumberConfig> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(NumberConfig.class));

       return (TypeAdapter<T>) new TypeAdapter<NumberConfig>() {
           @Override
           public void write(JsonWriter out, NumberConfig value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public NumberConfig read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of NumberConfig given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of NumberConfig
   * @throws IOException if the JSON string is invalid with respect to NumberConfig
   */
  public static NumberConfig fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, NumberConfig.class);
  }

  /**
   * Convert an instance of NumberConfig to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

