/*
 * CallFire API Documentation
 * CallFire
 *
 * The version of the OpenAPI document: V2
 * Contact: support@callfire.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Retry configuration will help you to resend a call or text if it was not delivered first time
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T09:59:09.684594-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class RetryConfig {
  public static final String SERIALIZED_NAME_MAX_ATTEMPTS = "maxAttempts";
  @SerializedName(SERIALIZED_NAME_MAX_ATTEMPTS)
  private Integer maxAttempts;

  public static final String SERIALIZED_NAME_MINUTES_BETWEEN_ATTEMPTS = "minutesBetweenAttempts";
  @SerializedName(SERIALIZED_NAME_MINUTES_BETWEEN_ATTEMPTS)
  private Integer minutesBetweenAttempts;

  public static final String SERIALIZED_NAME_RETRY_PHONE_TYPES = "retryPhoneTypes";
  @SerializedName(SERIALIZED_NAME_RETRY_PHONE_TYPES)
  private List<String> retryPhoneTypes = new ArrayList<>();

  public static final String SERIALIZED_NAME_RETRY_RESULTS = "retryResults";
  @SerializedName(SERIALIZED_NAME_RETRY_RESULTS)
  private List<String> retryResults = new ArrayList<>();

  public RetryConfig() {
  }

  public RetryConfig maxAttempts(Integer maxAttempts) {
    this.maxAttempts = maxAttempts;
    return this;
  }

  /**
   * Maximum number of retry attempts. Default value: 1
   * @return maxAttempts
   */
  @javax.annotation.Nullable
  public Integer getMaxAttempts() {
    return maxAttempts;
  }

  public void setMaxAttempts(Integer maxAttempts) {
    this.maxAttempts = maxAttempts;
  }


  public RetryConfig minutesBetweenAttempts(Integer minutesBetweenAttempts) {
    this.minutesBetweenAttempts = minutesBetweenAttempts;
    return this;
  }

  /**
   * A number of minutes between retry attempts. Default value: 60
   * @return minutesBetweenAttempts
   */
  @javax.annotation.Nullable
  public Integer getMinutesBetweenAttempts() {
    return minutesBetweenAttempts;
  }

  public void setMinutesBetweenAttempts(Integer minutesBetweenAttempts) {
    this.minutesBetweenAttempts = minutesBetweenAttempts;
  }


  public RetryConfig retryPhoneTypes(List<String> retryPhoneTypes) {
    this.retryPhoneTypes = retryPhoneTypes;
    return this;
  }

  public RetryConfig addRetryPhoneTypesItem(String retryPhoneTypesItem) {
    if (this.retryPhoneTypes == null) {
      this.retryPhoneTypes = new ArrayList<>();
    }
    this.retryPhoneTypes.add(retryPhoneTypesItem);
    return this;
  }

  /**
   * A list of phone number types to retry. Available values: FIRST_NUMBER, HOME_PHONE, WORK_PHONE, MOBILE_PHONE
   * @return retryPhoneTypes
   */
  @javax.annotation.Nullable
  public List<String> getRetryPhoneTypes() {
    return retryPhoneTypes;
  }

  public void setRetryPhoneTypes(List<String> retryPhoneTypes) {
    this.retryPhoneTypes = retryPhoneTypes;
  }


  public RetryConfig retryResults(List<String> retryResults) {
    this.retryResults = retryResults;
    return this;
  }

  public RetryConfig addRetryResultsItem(String retryResultsItem) {
    if (this.retryResults == null) {
      this.retryResults = new ArrayList<>();
    }
    this.retryResults.add(retryResultsItem);
    return this;
  }

  /**
   * List of result states when a call/text should be addressed to this contact again. Supports any combination of result statuses. Available values: LA, BUSY, AM, NO_ANS, SENT, RECEIVED, etc. See [call/text states and results](https://developers.callfire.com/results-responses-errors.html)
   * @return retryResults
   */
  @javax.annotation.Nullable
  public List<String> getRetryResults() {
    return retryResults;
  }

  public void setRetryResults(List<String> retryResults) {
    this.retryResults = retryResults;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    RetryConfig retryConfig = (RetryConfig) o;
    return Objects.equals(this.maxAttempts, retryConfig.maxAttempts) &&
        Objects.equals(this.minutesBetweenAttempts, retryConfig.minutesBetweenAttempts) &&
        Objects.equals(this.retryPhoneTypes, retryConfig.retryPhoneTypes) &&
        Objects.equals(this.retryResults, retryConfig.retryResults);
  }

  @Override
  public int hashCode() {
    return Objects.hash(maxAttempts, minutesBetweenAttempts, retryPhoneTypes, retryResults);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class RetryConfig {\n");
    sb.append("    maxAttempts: ").append(toIndentedString(maxAttempts)).append("\n");
    sb.append("    minutesBetweenAttempts: ").append(toIndentedString(minutesBetweenAttempts)).append("\n");
    sb.append("    retryPhoneTypes: ").append(toIndentedString(retryPhoneTypes)).append("\n");
    sb.append("    retryResults: ").append(toIndentedString(retryResults)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("maxAttempts");
    openapiFields.add("minutesBetweenAttempts");
    openapiFields.add("retryPhoneTypes");
    openapiFields.add("retryResults");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to RetryConfig
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!RetryConfig.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in RetryConfig is not found in the empty JSON string", RetryConfig.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!RetryConfig.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `RetryConfig` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // ensure the optional json data is an array if present
      if (jsonObj.get("retryPhoneTypes") != null && !jsonObj.get("retryPhoneTypes").isJsonNull() && !jsonObj.get("retryPhoneTypes").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `retryPhoneTypes` to be an array in the JSON string but got `%s`", jsonObj.get("retryPhoneTypes").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("retryResults") != null && !jsonObj.get("retryResults").isJsonNull() && !jsonObj.get("retryResults").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `retryResults` to be an array in the JSON string but got `%s`", jsonObj.get("retryResults").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!RetryConfig.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'RetryConfig' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<RetryConfig> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(RetryConfig.class));

       return (TypeAdapter<T>) new TypeAdapter<RetryConfig>() {
           @Override
           public void write(JsonWriter out, RetryConfig value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public RetryConfig read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of RetryConfig given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of RetryConfig
   * @throws IOException if the JSON string is invalid with respect to RetryConfig
   */
  public static RetryConfig fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, RetryConfig.class);
  }

  /**
   * Convert an instance of RetryConfig to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

