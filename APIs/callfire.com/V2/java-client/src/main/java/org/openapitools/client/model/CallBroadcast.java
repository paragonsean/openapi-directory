/*
 * CallFire API Documentation
 * CallFire
 *
 * The version of the OpenAPI document: V2
 * Contact: support@callfire.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.LinkedHashSet;
import java.util.List;
import java.util.Set;
import org.openapitools.client.model.CallBroadcastSounds;
import org.openapitools.client.model.LocalTimeRestriction;
import org.openapitools.client.model.Recipient;
import org.openapitools.client.model.RetryConfig;
import org.openapitools.client.model.Schedule;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Call broadcast can be used to send out a voice message to a group of numbers. It supports IVR scripting, scheduling, retry logic, playing pre-recorded sounds, answering machine detection
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T09:59:09.684594-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class CallBroadcast {
  /**
   * Specifies which action should be taken if answering machine was detected, default value: AM_AND_LIVE. Available values: AM_ONLY - run AMD (Answering Machine Detection), hang up if LA (Live Answer); AM_AND_LIVE - run AMD, play separate live vs. machine sound; LIVE_WITH_AMD, run AMD, hang up if machine answers; LIVE_IMMEDIATE - no AMD, play live sound immediately
   */
  @JsonAdapter(AnsweringMachineConfigEnum.Adapter.class)
  public enum AnsweringMachineConfigEnum {
    AM_ONLY("AM_ONLY"),
    
    AM_AND_LIVE("AM_AND_LIVE"),
    
    LIVE_WITH_AMD("LIVE_WITH_AMD"),
    
    LIVE_IMMEDIATE("LIVE_IMMEDIATE");

    private String value;

    AnsweringMachineConfigEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static AnsweringMachineConfigEnum fromValue(String value) {
      for (AnsweringMachineConfigEnum b : AnsweringMachineConfigEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<AnsweringMachineConfigEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final AnsweringMachineConfigEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public AnsweringMachineConfigEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return AnsweringMachineConfigEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      AnsweringMachineConfigEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_ANSWERING_MACHINE_CONFIG = "answeringMachineConfig";
  @SerializedName(SERIALIZED_NAME_ANSWERING_MACHINE_CONFIG)
  private AnsweringMachineConfigEnum answeringMachineConfig;

  public static final String SERIALIZED_NAME_DIALPLAN_XML = "dialplanXml";
  @SerializedName(SERIALIZED_NAME_DIALPLAN_XML)
  private String dialplanXml;

  public static final String SERIALIZED_NAME_FROM_NUMBER = "fromNumber";
  @SerializedName(SERIALIZED_NAME_FROM_NUMBER)
  private String fromNumber;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private Long id;

  public static final String SERIALIZED_NAME_LABELS = "labels";
  @SerializedName(SERIALIZED_NAME_LABELS)
  private Set<String> labels = new LinkedHashSet<>();

  public static final String SERIALIZED_NAME_LAST_MODIFIED = "lastModified";
  @SerializedName(SERIALIZED_NAME_LAST_MODIFIED)
  private Long lastModified;

  public static final String SERIALIZED_NAME_LOCAL_TIME_RESTRICTION = "localTimeRestriction";
  @SerializedName(SERIALIZED_NAME_LOCAL_TIME_RESTRICTION)
  private LocalTimeRestriction localTimeRestriction;

  public static final String SERIALIZED_NAME_MAX_ACTIVE = "maxActive";
  @SerializedName(SERIALIZED_NAME_MAX_ACTIVE)
  private Integer maxActive;

  public static final String SERIALIZED_NAME_MAX_ACTIVE_TRANSFERS = "maxActiveTransfers";
  @SerializedName(SERIALIZED_NAME_MAX_ACTIVE_TRANSFERS)
  private Integer maxActiveTransfers;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_RECIPIENTS = "recipients";
  @SerializedName(SERIALIZED_NAME_RECIPIENTS)
  private List<Recipient> recipients = new ArrayList<>();

  public static final String SERIALIZED_NAME_RESUME_NEXT_DAY = "resumeNextDay";
  @SerializedName(SERIALIZED_NAME_RESUME_NEXT_DAY)
  private Boolean resumeNextDay;

  public static final String SERIALIZED_NAME_RETRY_CONFIG = "retryConfig";
  @SerializedName(SERIALIZED_NAME_RETRY_CONFIG)
  private RetryConfig retryConfig;

  public static final String SERIALIZED_NAME_SCHEDULES = "schedules";
  @SerializedName(SERIALIZED_NAME_SCHEDULES)
  private List<Schedule> schedules = new ArrayList<>();

  public static final String SERIALIZED_NAME_SOUNDS = "sounds";
  @SerializedName(SERIALIZED_NAME_SOUNDS)
  private CallBroadcastSounds sounds;

  /**
   * A status of a broadcast (read only). SETUP - campaign isn&#39;t configured yet; START_PENDING - waiting for contact batch population; RUNNING - campaign is running; STOPPED - campaign is stopped; FINISHED - campaign is finished; ARCHIVED - campaign was archived
   */
  @JsonAdapter(StatusEnum.Adapter.class)
  public enum StatusEnum {
    TEST("TEST"),
    
    SETUP("SETUP"),
    
    START_PENDING("START_PENDING"),
    
    RUNNING("RUNNING"),
    
    SCHEDULED("SCHEDULED"),
    
    STOPPED("STOPPED"),
    
    SUSPENDED("SUSPENDED"),
    
    FINISHED("FINISHED"),
    
    ARCHIVED("ARCHIVED"),
    
    VALIDATING_START("VALIDATING_START"),
    
    VALIDATING_EMAIL("VALIDATING_EMAIL"),
    
    BLOCKED_SUSPICIOUS("BLOCKED_SUSPICIOUS"),
    
    DECLINED("DECLINED"),
    
    APPROVED("APPROVED");

    private String value;

    StatusEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static StatusEnum fromValue(String value) {
      for (StatusEnum b : StatusEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<StatusEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final StatusEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public StatusEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return StatusEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      StatusEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_STATUS = "status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  private StatusEnum status;

  public CallBroadcast() {
  }

  public CallBroadcast(
     Long lastModified, 
     StatusEnum status
  ) {
    this();
    this.lastModified = lastModified;
    this.status = status;
  }

  public CallBroadcast answeringMachineConfig(AnsweringMachineConfigEnum answeringMachineConfig) {
    this.answeringMachineConfig = answeringMachineConfig;
    return this;
  }

  /**
   * Specifies which action should be taken if answering machine was detected, default value: AM_AND_LIVE. Available values: AM_ONLY - run AMD (Answering Machine Detection), hang up if LA (Live Answer); AM_AND_LIVE - run AMD, play separate live vs. machine sound; LIVE_WITH_AMD, run AMD, hang up if machine answers; LIVE_IMMEDIATE - no AMD, play live sound immediately
   * @return answeringMachineConfig
   */
  @javax.annotation.Nullable
  public AnsweringMachineConfigEnum getAnsweringMachineConfig() {
    return answeringMachineConfig;
  }

  public void setAnsweringMachineConfig(AnsweringMachineConfigEnum answeringMachineConfig) {
    this.answeringMachineConfig = answeringMachineConfig;
  }


  public CallBroadcast dialplanXml(String dialplanXml) {
    this.dialplanXml = dialplanXml;
    return this;
  }

  /**
   * IVR xml is a document which describes the dialplan to setup the IVR broadcast
   * @return dialplanXml
   */
  @javax.annotation.Nullable
  public String getDialplanXml() {
    return dialplanXml;
  }

  public void setDialplanXml(String dialplanXml) {
    this.dialplanXml = dialplanXml;
  }


  public CallBroadcast fromNumber(String fromNumber) {
    this.fromNumber = fromNumber;
    return this;
  }

  /**
   * Phone number in E.164 format (11-digit) or short code for text. Example: 12132000384, 67076
   * @return fromNumber
   */
  @javax.annotation.Nullable
  public String getFromNumber() {
    return fromNumber;
  }

  public void setFromNumber(String fromNumber) {
    this.fromNumber = fromNumber;
  }


  public CallBroadcast id(Long id) {
    this.id = id;
    return this;
  }

  /**
   * A unique id of broadcast (readonly)
   * @return id
   */
  @javax.annotation.Nullable
  public Long getId() {
    return id;
  }

  public void setId(Long id) {
    this.id = id;
  }


  public CallBroadcast labels(Set<String> labels) {
    this.labels = labels;
    return this;
  }

  public CallBroadcast addLabelsItem(String labelsItem) {
    if (this.labels == null) {
      this.labels = new LinkedHashSet<>();
    }
    this.labels.add(labelsItem);
    return this;
  }

  /**
   * Labels of a broadcast
   * @return labels
   */
  @javax.annotation.Nullable
  public Set<String> getLabels() {
    return labels;
  }

  public void setLabels(Set<String> labels) {
    this.labels = labels;
  }


  /**
   * The time when a given resource was updated, formatted in unix time milliseconds (read only). Example: 1473781817000 for Sat, 05 Jan 1985 14:03:37 GMT 
   * @return lastModified
   */
  @javax.annotation.Nullable
  public Long getLastModified() {
    return lastModified;
  }



  public CallBroadcast localTimeRestriction(LocalTimeRestriction localTimeRestriction) {
    this.localTimeRestriction = localTimeRestriction;
    return this;
  }

  /**
   * Get localTimeRestriction
   * @return localTimeRestriction
   */
  @javax.annotation.Nullable
  public LocalTimeRestriction getLocalTimeRestriction() {
    return localTimeRestriction;
  }

  public void setLocalTimeRestriction(LocalTimeRestriction localTimeRestriction) {
    this.localTimeRestriction = localTimeRestriction;
  }


  public CallBroadcast maxActive(Integer maxActive) {
    this.maxActive = maxActive;
    return this;
  }

  /**
   * Sets a maximum number of calls to be dialed by CallFire at once
   * @return maxActive
   */
  @javax.annotation.Nullable
  public Integer getMaxActive() {
    return maxActive;
  }

  public void setMaxActive(Integer maxActive) {
    this.maxActive = maxActive;
  }


  public CallBroadcast maxActiveTransfers(Integer maxActiveTransfers) {
    this.maxActiveTransfers = maxActiveTransfers;
    return this;
  }

  /**
   * A maximum number of active transfers
   * @return maxActiveTransfers
   */
  @javax.annotation.Nullable
  public Integer getMaxActiveTransfers() {
    return maxActiveTransfers;
  }

  public void setMaxActiveTransfers(Integer maxActiveTransfers) {
    this.maxActiveTransfers = maxActiveTransfers;
  }


  public CallBroadcast name(String name) {
    this.name = name;
    return this;
  }

  /**
   * A name of a broadcast
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public CallBroadcast recipients(List<Recipient> recipients) {
    this.recipients = recipients;
    return this;
  }

  public CallBroadcast addRecipientsItem(Recipient recipientsItem) {
    if (this.recipients == null) {
      this.recipients = new ArrayList<>();
    }
    this.recipients.add(recipientsItem);
    return this;
  }

  /**
   * Recipients of a call broadcast, can be either existing contacts or a new ones
   * @return recipients
   */
  @javax.annotation.Nullable
  public List<Recipient> getRecipients() {
    return recipients;
  }

  public void setRecipients(List<Recipient> recipients) {
    this.recipients = recipients;
  }


  public CallBroadcast resumeNextDay(Boolean resumeNextDay) {
    this.resumeNextDay = resumeNextDay;
    return this;
  }

  /**
   * If true resumes the unfinished campaign to the next day
   * @return resumeNextDay
   */
  @javax.annotation.Nullable
  public Boolean getResumeNextDay() {
    return resumeNextDay;
  }

  public void setResumeNextDay(Boolean resumeNextDay) {
    this.resumeNextDay = resumeNextDay;
  }


  public CallBroadcast retryConfig(RetryConfig retryConfig) {
    this.retryConfig = retryConfig;
    return this;
  }

  /**
   * Get retryConfig
   * @return retryConfig
   */
  @javax.annotation.Nullable
  public RetryConfig getRetryConfig() {
    return retryConfig;
  }

  public void setRetryConfig(RetryConfig retryConfig) {
    this.retryConfig = retryConfig;
  }


  public CallBroadcast schedules(List<Schedule> schedules) {
    this.schedules = schedules;
    return this;
  }

  public CallBroadcast addSchedulesItem(Schedule schedulesItem) {
    if (this.schedules == null) {
      this.schedules = new ArrayList<>();
    }
    this.schedules.add(schedulesItem);
    return this;
  }

  /**
   * A list of schedule objects which specifies a range of time when broadcast should be started and stopped. Supports the scheduling per day of week
   * @return schedules
   */
  @javax.annotation.Nullable
  public List<Schedule> getSchedules() {
    return schedules;
  }

  public void setSchedules(List<Schedule> schedules) {
    this.schedules = schedules;
  }


  public CallBroadcast sounds(CallBroadcastSounds sounds) {
    this.sounds = sounds;
    return this;
  }

  /**
   * Get sounds
   * @return sounds
   */
  @javax.annotation.Nullable
  public CallBroadcastSounds getSounds() {
    return sounds;
  }

  public void setSounds(CallBroadcastSounds sounds) {
    this.sounds = sounds;
  }


  /**
   * A status of a broadcast (read only). SETUP - campaign isn&#39;t configured yet; START_PENDING - waiting for contact batch population; RUNNING - campaign is running; STOPPED - campaign is stopped; FINISHED - campaign is finished; ARCHIVED - campaign was archived
   * @return status
   */
  @javax.annotation.Nullable
  public StatusEnum getStatus() {
    return status;
  }




  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CallBroadcast callBroadcast = (CallBroadcast) o;
    return Objects.equals(this.answeringMachineConfig, callBroadcast.answeringMachineConfig) &&
        Objects.equals(this.dialplanXml, callBroadcast.dialplanXml) &&
        Objects.equals(this.fromNumber, callBroadcast.fromNumber) &&
        Objects.equals(this.id, callBroadcast.id) &&
        Objects.equals(this.labels, callBroadcast.labels) &&
        Objects.equals(this.lastModified, callBroadcast.lastModified) &&
        Objects.equals(this.localTimeRestriction, callBroadcast.localTimeRestriction) &&
        Objects.equals(this.maxActive, callBroadcast.maxActive) &&
        Objects.equals(this.maxActiveTransfers, callBroadcast.maxActiveTransfers) &&
        Objects.equals(this.name, callBroadcast.name) &&
        Objects.equals(this.recipients, callBroadcast.recipients) &&
        Objects.equals(this.resumeNextDay, callBroadcast.resumeNextDay) &&
        Objects.equals(this.retryConfig, callBroadcast.retryConfig) &&
        Objects.equals(this.schedules, callBroadcast.schedules) &&
        Objects.equals(this.sounds, callBroadcast.sounds) &&
        Objects.equals(this.status, callBroadcast.status);
  }

  @Override
  public int hashCode() {
    return Objects.hash(answeringMachineConfig, dialplanXml, fromNumber, id, labels, lastModified, localTimeRestriction, maxActive, maxActiveTransfers, name, recipients, resumeNextDay, retryConfig, schedules, sounds, status);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CallBroadcast {\n");
    sb.append("    answeringMachineConfig: ").append(toIndentedString(answeringMachineConfig)).append("\n");
    sb.append("    dialplanXml: ").append(toIndentedString(dialplanXml)).append("\n");
    sb.append("    fromNumber: ").append(toIndentedString(fromNumber)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    labels: ").append(toIndentedString(labels)).append("\n");
    sb.append("    lastModified: ").append(toIndentedString(lastModified)).append("\n");
    sb.append("    localTimeRestriction: ").append(toIndentedString(localTimeRestriction)).append("\n");
    sb.append("    maxActive: ").append(toIndentedString(maxActive)).append("\n");
    sb.append("    maxActiveTransfers: ").append(toIndentedString(maxActiveTransfers)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    recipients: ").append(toIndentedString(recipients)).append("\n");
    sb.append("    resumeNextDay: ").append(toIndentedString(resumeNextDay)).append("\n");
    sb.append("    retryConfig: ").append(toIndentedString(retryConfig)).append("\n");
    sb.append("    schedules: ").append(toIndentedString(schedules)).append("\n");
    sb.append("    sounds: ").append(toIndentedString(sounds)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("answeringMachineConfig");
    openapiFields.add("dialplanXml");
    openapiFields.add("fromNumber");
    openapiFields.add("id");
    openapiFields.add("labels");
    openapiFields.add("lastModified");
    openapiFields.add("localTimeRestriction");
    openapiFields.add("maxActive");
    openapiFields.add("maxActiveTransfers");
    openapiFields.add("name");
    openapiFields.add("recipients");
    openapiFields.add("resumeNextDay");
    openapiFields.add("retryConfig");
    openapiFields.add("schedules");
    openapiFields.add("sounds");
    openapiFields.add("status");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to CallBroadcast
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!CallBroadcast.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CallBroadcast is not found in the empty JSON string", CallBroadcast.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!CallBroadcast.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CallBroadcast` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("answeringMachineConfig") != null && !jsonObj.get("answeringMachineConfig").isJsonNull()) && !jsonObj.get("answeringMachineConfig").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `answeringMachineConfig` to be a primitive type in the JSON string but got `%s`", jsonObj.get("answeringMachineConfig").toString()));
      }
      // validate the optional field `answeringMachineConfig`
      if (jsonObj.get("answeringMachineConfig") != null && !jsonObj.get("answeringMachineConfig").isJsonNull()) {
        AnsweringMachineConfigEnum.validateJsonElement(jsonObj.get("answeringMachineConfig"));
      }
      if ((jsonObj.get("dialplanXml") != null && !jsonObj.get("dialplanXml").isJsonNull()) && !jsonObj.get("dialplanXml").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `dialplanXml` to be a primitive type in the JSON string but got `%s`", jsonObj.get("dialplanXml").toString()));
      }
      if ((jsonObj.get("fromNumber") != null && !jsonObj.get("fromNumber").isJsonNull()) && !jsonObj.get("fromNumber").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `fromNumber` to be a primitive type in the JSON string but got `%s`", jsonObj.get("fromNumber").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("labels") != null && !jsonObj.get("labels").isJsonNull() && !jsonObj.get("labels").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `labels` to be an array in the JSON string but got `%s`", jsonObj.get("labels").toString()));
      }
      // validate the optional field `localTimeRestriction`
      if (jsonObj.get("localTimeRestriction") != null && !jsonObj.get("localTimeRestriction").isJsonNull()) {
        LocalTimeRestriction.validateJsonElement(jsonObj.get("localTimeRestriction"));
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if (jsonObj.get("recipients") != null && !jsonObj.get("recipients").isJsonNull()) {
        JsonArray jsonArrayrecipients = jsonObj.getAsJsonArray("recipients");
        if (jsonArrayrecipients != null) {
          // ensure the json data is an array
          if (!jsonObj.get("recipients").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `recipients` to be an array in the JSON string but got `%s`", jsonObj.get("recipients").toString()));
          }

          // validate the optional field `recipients` (array)
          for (int i = 0; i < jsonArrayrecipients.size(); i++) {
            Recipient.validateJsonElement(jsonArrayrecipients.get(i));
          };
        }
      }
      // validate the optional field `retryConfig`
      if (jsonObj.get("retryConfig") != null && !jsonObj.get("retryConfig").isJsonNull()) {
        RetryConfig.validateJsonElement(jsonObj.get("retryConfig"));
      }
      if (jsonObj.get("schedules") != null && !jsonObj.get("schedules").isJsonNull()) {
        JsonArray jsonArrayschedules = jsonObj.getAsJsonArray("schedules");
        if (jsonArrayschedules != null) {
          // ensure the json data is an array
          if (!jsonObj.get("schedules").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `schedules` to be an array in the JSON string but got `%s`", jsonObj.get("schedules").toString()));
          }

          // validate the optional field `schedules` (array)
          for (int i = 0; i < jsonArrayschedules.size(); i++) {
            Schedule.validateJsonElement(jsonArrayschedules.get(i));
          };
        }
      }
      // validate the optional field `sounds`
      if (jsonObj.get("sounds") != null && !jsonObj.get("sounds").isJsonNull()) {
        CallBroadcastSounds.validateJsonElement(jsonObj.get("sounds"));
      }
      if ((jsonObj.get("status") != null && !jsonObj.get("status").isJsonNull()) && !jsonObj.get("status").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `status` to be a primitive type in the JSON string but got `%s`", jsonObj.get("status").toString()));
      }
      // validate the optional field `status`
      if (jsonObj.get("status") != null && !jsonObj.get("status").isJsonNull()) {
        StatusEnum.validateJsonElement(jsonObj.get("status"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CallBroadcast.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CallBroadcast' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CallBroadcast> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CallBroadcast.class));

       return (TypeAdapter<T>) new TypeAdapter<CallBroadcast>() {
           @Override
           public void write(JsonWriter out, CallBroadcast value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CallBroadcast read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of CallBroadcast given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of CallBroadcast
   * @throws IOException if the JSON string is invalid with respect to CallBroadcast
   */
  public static CallBroadcast fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CallBroadcast.class);
  }

  /**
   * Convert an instance of CallBroadcast to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

