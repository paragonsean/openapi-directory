/*
 * CallFire API Documentation
 * CallFire
 *
 * The version of the OpenAPI document: V2
 * Contact: support@callfire.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Represents a recording of a voice call
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T09:59:09.684594-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class CallRecording {
  public static final String SERIALIZED_NAME_CALL_ID = "callId";
  @SerializedName(SERIALIZED_NAME_CALL_ID)
  private Long callId;

  public static final String SERIALIZED_NAME_CAMPAIGN_ID = "campaignId";
  @SerializedName(SERIALIZED_NAME_CAMPAIGN_ID)
  private Long campaignId;

  public static final String SERIALIZED_NAME_CREATED = "created";
  @SerializedName(SERIALIZED_NAME_CREATED)
  private Long created;

  public static final String SERIALIZED_NAME_HASH = "hash";
  @SerializedName(SERIALIZED_NAME_HASH)
  private String hash;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private Long id;

  public static final String SERIALIZED_NAME_LENGTH_IN_BYTES = "lengthInBytes";
  @SerializedName(SERIALIZED_NAME_LENGTH_IN_BYTES)
  private Long lengthInBytes;

  public static final String SERIALIZED_NAME_LENGTH_IN_SECONDS = "lengthInSeconds";
  @SerializedName(SERIALIZED_NAME_LENGTH_IN_SECONDS)
  private Integer lengthInSeconds;

  public static final String SERIALIZED_NAME_MP3_URL = "mp3Url";
  @SerializedName(SERIALIZED_NAME_MP3_URL)
  private String mp3Url;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  /**
   * Current state of a recording, available values: RECORDING - recording is in progress, READY - recording is ready, ERROR - error has occurred and recording can be broken
   */
  @JsonAdapter(StateEnum.Adapter.class)
  public enum StateEnum {
    RECORDING("RECORDING"),
    
    READY("READY"),
    
    ERROR("ERROR");

    private String value;

    StateEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static StateEnum fromValue(String value) {
      for (StateEnum b : StateEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<StateEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final StateEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public StateEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return StateEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      StateEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_STATE = "state";
  @SerializedName(SERIALIZED_NAME_STATE)
  private StateEnum state;

  public CallRecording() {
  }

  public CallRecording callId(Long callId) {
    this.callId = callId;
    return this;
  }

  /**
   * An id of a call action
   * @return callId
   */
  @javax.annotation.Nullable
  public Long getCallId() {
    return callId;
  }

  public void setCallId(Long callId) {
    this.callId = callId;
  }


  public CallRecording campaignId(Long campaignId) {
    this.campaignId = campaignId;
    return this;
  }

  /**
   * Contains broadcast id if call was sent as a part of voice broadcast
   * @return campaignId
   */
  @javax.annotation.Nullable
  public Long getCampaignId() {
    return campaignId;
  }

  public void setCampaignId(Long campaignId) {
    this.campaignId = campaignId;
  }


  public CallRecording created(Long created) {
    this.created = created;
    return this;
  }

  /**
   * The time when the given resource was created, formatted in unix time milliseconds (read only). Example: 1473781817000 for Sat, 05 Jan 1985 14:03:37 GMT
   * @return created
   */
  @javax.annotation.Nullable
  public Long getCreated() {
    return created;
  }

  public void setCreated(Long created) {
    this.created = created;
  }


  public CallRecording hash(String hash) {
    this.hash = hash;
    return this;
  }

  /**
   * A unique string hash identifier of a recording
   * @return hash
   */
  @javax.annotation.Nullable
  public String getHash() {
    return hash;
  }

  public void setHash(String hash) {
    this.hash = hash;
  }


  public CallRecording id(Long id) {
    this.id = id;
    return this;
  }

  /**
   * An id of a call recording
   * @return id
   */
  @javax.annotation.Nullable
  public Long getId() {
    return id;
  }

  public void setId(Long id) {
    this.id = id;
  }


  public CallRecording lengthInBytes(Long lengthInBytes) {
    this.lengthInBytes = lengthInBytes;
    return this;
  }

  /**
   * A size of a recording file in bytes
   * @return lengthInBytes
   */
  @javax.annotation.Nullable
  public Long getLengthInBytes() {
    return lengthInBytes;
  }

  public void setLengthInBytes(Long lengthInBytes) {
    this.lengthInBytes = lengthInBytes;
  }


  public CallRecording lengthInSeconds(Integer lengthInSeconds) {
    this.lengthInSeconds = lengthInSeconds;
    return this;
  }

  /**
   * Duration of a recording in seconds
   * @return lengthInSeconds
   */
  @javax.annotation.Nullable
  public Integer getLengthInSeconds() {
    return lengthInSeconds;
  }

  public void setLengthInSeconds(Integer lengthInSeconds) {
    this.lengthInSeconds = lengthInSeconds;
  }


  public CallRecording mp3Url(String mp3Url) {
    this.mp3Url = mp3Url;
    return this;
  }

  /**
   * A public URL of a call recording
   * @return mp3Url
   */
  @javax.annotation.Nullable
  public String getMp3Url() {
    return mp3Url;
  }

  public void setMp3Url(String mp3Url) {
    this.mp3Url = mp3Url;
  }


  public CallRecording name(String name) {
    this.name = name;
    return this;
  }

  /**
   * A name of a recording
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public CallRecording state(StateEnum state) {
    this.state = state;
    return this;
  }

  /**
   * Current state of a recording, available values: RECORDING - recording is in progress, READY - recording is ready, ERROR - error has occurred and recording can be broken
   * @return state
   */
  @javax.annotation.Nullable
  public StateEnum getState() {
    return state;
  }

  public void setState(StateEnum state) {
    this.state = state;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CallRecording callRecording = (CallRecording) o;
    return Objects.equals(this.callId, callRecording.callId) &&
        Objects.equals(this.campaignId, callRecording.campaignId) &&
        Objects.equals(this.created, callRecording.created) &&
        Objects.equals(this.hash, callRecording.hash) &&
        Objects.equals(this.id, callRecording.id) &&
        Objects.equals(this.lengthInBytes, callRecording.lengthInBytes) &&
        Objects.equals(this.lengthInSeconds, callRecording.lengthInSeconds) &&
        Objects.equals(this.mp3Url, callRecording.mp3Url) &&
        Objects.equals(this.name, callRecording.name) &&
        Objects.equals(this.state, callRecording.state);
  }

  @Override
  public int hashCode() {
    return Objects.hash(callId, campaignId, created, hash, id, lengthInBytes, lengthInSeconds, mp3Url, name, state);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CallRecording {\n");
    sb.append("    callId: ").append(toIndentedString(callId)).append("\n");
    sb.append("    campaignId: ").append(toIndentedString(campaignId)).append("\n");
    sb.append("    created: ").append(toIndentedString(created)).append("\n");
    sb.append("    hash: ").append(toIndentedString(hash)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    lengthInBytes: ").append(toIndentedString(lengthInBytes)).append("\n");
    sb.append("    lengthInSeconds: ").append(toIndentedString(lengthInSeconds)).append("\n");
    sb.append("    mp3Url: ").append(toIndentedString(mp3Url)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    state: ").append(toIndentedString(state)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("callId");
    openapiFields.add("campaignId");
    openapiFields.add("created");
    openapiFields.add("hash");
    openapiFields.add("id");
    openapiFields.add("lengthInBytes");
    openapiFields.add("lengthInSeconds");
    openapiFields.add("mp3Url");
    openapiFields.add("name");
    openapiFields.add("state");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to CallRecording
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!CallRecording.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CallRecording is not found in the empty JSON string", CallRecording.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!CallRecording.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CallRecording` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("hash") != null && !jsonObj.get("hash").isJsonNull()) && !jsonObj.get("hash").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `hash` to be a primitive type in the JSON string but got `%s`", jsonObj.get("hash").toString()));
      }
      if ((jsonObj.get("mp3Url") != null && !jsonObj.get("mp3Url").isJsonNull()) && !jsonObj.get("mp3Url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `mp3Url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("mp3Url").toString()));
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if ((jsonObj.get("state") != null && !jsonObj.get("state").isJsonNull()) && !jsonObj.get("state").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `state` to be a primitive type in the JSON string but got `%s`", jsonObj.get("state").toString()));
      }
      // validate the optional field `state`
      if (jsonObj.get("state") != null && !jsonObj.get("state").isJsonNull()) {
        StateEnum.validateJsonElement(jsonObj.get("state"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CallRecording.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CallRecording' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CallRecording> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CallRecording.class));

       return (TypeAdapter<T>) new TypeAdapter<CallRecording>() {
           @Override
           public void write(JsonWriter out, CallRecording value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CallRecording read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of CallRecording given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of CallRecording
   * @throws IOException if the JSON string is invalid with respect to CallRecording
   */
  public static CallRecording fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CallRecording.class);
  }

  /**
   * Convert an instance of CallRecording to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

