/*
 * CallFire API Documentation
 * CallFire
 *
 * The version of the OpenAPI document: V2
 * Contact: support@callfire.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.AuthToken;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * ~
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T09:59:09.684594-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class AuthController {
  public static final String SERIALIZED_NAME_ADMIN = "admin";
  @SerializedName(SERIALIZED_NAME_ADMIN)
  private Boolean admin;

  /**
   * ~
   */
  @JsonAdapter(AuthBrandEnum.Adapter.class)
  public enum AuthBrandEnum {
    EZTEXTING("EZTEXTING"),
    
    CLUBTEXTING("CLUBTEXTING"),
    
    GROUPTEXTING("GROUPTEXTING"),
    
    TELLMYCELL("TELLMYCELL"),
    
    EZ("EZ"),
    
    CALLFIRE("CALLFIRE"),
    
    TESLA("TESLA");

    private String value;

    AuthBrandEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static AuthBrandEnum fromValue(String value) {
      for (AuthBrandEnum b : AuthBrandEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<AuthBrandEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final AuthBrandEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public AuthBrandEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return AuthBrandEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      AuthBrandEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_AUTH_BRAND = "authBrand";
  @SerializedName(SERIALIZED_NAME_AUTH_BRAND)
  private AuthBrandEnum authBrand;

  public static final String SERIALIZED_NAME_AUTH_TOKEN = "authToken";
  @SerializedName(SERIALIZED_NAME_AUTH_TOKEN)
  private AuthToken authToken;

  public static final String SERIALIZED_NAME_MIGRATION = "migration";
  @SerializedName(SERIALIZED_NAME_MIGRATION)
  private Boolean migration;

  public AuthController() {
  }

  public AuthController admin(Boolean admin) {
    this.admin = admin;
    return this;
  }

  /**
   * ~
   * @return admin
   */
  @javax.annotation.Nullable
  public Boolean getAdmin() {
    return admin;
  }

  public void setAdmin(Boolean admin) {
    this.admin = admin;
  }


  public AuthController authBrand(AuthBrandEnum authBrand) {
    this.authBrand = authBrand;
    return this;
  }

  /**
   * ~
   * @return authBrand
   */
  @javax.annotation.Nullable
  public AuthBrandEnum getAuthBrand() {
    return authBrand;
  }

  public void setAuthBrand(AuthBrandEnum authBrand) {
    this.authBrand = authBrand;
  }


  public AuthController authToken(AuthToken authToken) {
    this.authToken = authToken;
    return this;
  }

  /**
   * Get authToken
   * @return authToken
   */
  @javax.annotation.Nullable
  public AuthToken getAuthToken() {
    return authToken;
  }

  public void setAuthToken(AuthToken authToken) {
    this.authToken = authToken;
  }


  public AuthController migration(Boolean migration) {
    this.migration = migration;
    return this;
  }

  /**
   * ~
   * @return migration
   */
  @javax.annotation.Nullable
  public Boolean getMigration() {
    return migration;
  }

  public void setMigration(Boolean migration) {
    this.migration = migration;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    AuthController authController = (AuthController) o;
    return Objects.equals(this.admin, authController.admin) &&
        Objects.equals(this.authBrand, authController.authBrand) &&
        Objects.equals(this.authToken, authController.authToken) &&
        Objects.equals(this.migration, authController.migration);
  }

  @Override
  public int hashCode() {
    return Objects.hash(admin, authBrand, authToken, migration);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class AuthController {\n");
    sb.append("    admin: ").append(toIndentedString(admin)).append("\n");
    sb.append("    authBrand: ").append(toIndentedString(authBrand)).append("\n");
    sb.append("    authToken: ").append(toIndentedString(authToken)).append("\n");
    sb.append("    migration: ").append(toIndentedString(migration)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("admin");
    openapiFields.add("authBrand");
    openapiFields.add("authToken");
    openapiFields.add("migration");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to AuthController
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!AuthController.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in AuthController is not found in the empty JSON string", AuthController.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!AuthController.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `AuthController` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("authBrand") != null && !jsonObj.get("authBrand").isJsonNull()) && !jsonObj.get("authBrand").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `authBrand` to be a primitive type in the JSON string but got `%s`", jsonObj.get("authBrand").toString()));
      }
      // validate the optional field `authBrand`
      if (jsonObj.get("authBrand") != null && !jsonObj.get("authBrand").isJsonNull()) {
        AuthBrandEnum.validateJsonElement(jsonObj.get("authBrand"));
      }
      // validate the optional field `authToken`
      if (jsonObj.get("authToken") != null && !jsonObj.get("authToken").isJsonNull()) {
        AuthToken.validateJsonElement(jsonObj.get("authToken"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!AuthController.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'AuthController' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<AuthController> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(AuthController.class));

       return (TypeAdapter<T>) new TypeAdapter<AuthController>() {
           @Override
           public void write(JsonWriter out, AuthController value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public AuthController read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of AuthController given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of AuthController
   * @throws IOException if the JSON string is invalid with respect to AuthController
   */
  public static AuthController fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, AuthController.class);
  }

  /**
   * Convert an instance of AuthController to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

