/*
 * CallFire API Documentation
 * CallFire
 *
 * The version of the OpenAPI document: V2
 * Contact: support@callfire.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.LinkedHashSet;
import java.util.Set;
import org.openapitools.client.model.Account;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * ~
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T09:59:09.684594-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class User {
  public static final String SERIALIZED_NAME_ACCOUNT = "account";
  @SerializedName(SERIALIZED_NAME_ACCOUNT)
  private Account account;

  public static final String SERIALIZED_NAME_ACCOUNT_HOLDER = "accountHolder";
  @SerializedName(SERIALIZED_NAME_ACCOUNT_HOLDER)
  private Boolean accountHolder;

  public static final String SERIALIZED_NAME_ACCOUNT_ID = "accountId";
  @SerializedName(SERIALIZED_NAME_ACCOUNT_ID)
  private Long accountId;

  public static final String SERIALIZED_NAME_ACTIVE = "active";
  @SerializedName(SERIALIZED_NAME_ACTIVE)
  private Boolean active;

  public static final String SERIALIZED_NAME_API_PASSWORD_LAST_FOUR = "apiPasswordLastFour";
  @SerializedName(SERIALIZED_NAME_API_PASSWORD_LAST_FOUR)
  private String apiPasswordLastFour;

  /**
   * ~
   */
  @JsonAdapter(BrandEnum.Adapter.class)
  public enum BrandEnum {
    EZTEXTING("EZTEXTING"),
    
    CLUBTEXTING("CLUBTEXTING"),
    
    GROUPTEXTING("GROUPTEXTING"),
    
    TELLMYCELL("TELLMYCELL"),
    
    EZ("EZ"),
    
    CALLFIRE("CALLFIRE"),
    
    TESLA("TESLA");

    private String value;

    BrandEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static BrandEnum fromValue(String value) {
      for (BrandEnum b : BrandEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<BrandEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final BrandEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public BrandEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return BrandEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      BrandEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_BRAND = "brand";
  @SerializedName(SERIALIZED_NAME_BRAND)
  private BrandEnum brand;

  public static final String SERIALIZED_NAME_CCC_AGENT = "cccAgent";
  @SerializedName(SERIALIZED_NAME_CCC_AGENT)
  private Boolean cccAgent;

  public static final String SERIALIZED_NAME_CREATED = "created";
  @SerializedName(SERIALIZED_NAME_CREATED)
  private OffsetDateTime created;

  public static final String SERIALIZED_NAME_DATE_OF_BIRTH = "dateOfBirth";
  @SerializedName(SERIALIZED_NAME_DATE_OF_BIRTH)
  private OffsetDateTime dateOfBirth;

  public static final String SERIALIZED_NAME_DISABLED = "disabled";
  @SerializedName(SERIALIZED_NAME_DISABLED)
  private Boolean disabled;

  public static final String SERIALIZED_NAME_FIRST_NAME = "firstName";
  @SerializedName(SERIALIZED_NAME_FIRST_NAME)
  private String firstName;

  public static final String SERIALIZED_NAME_FULL_NAME = "fullName";
  @SerializedName(SERIALIZED_NAME_FULL_NAME)
  private String fullName;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private Long id;

  public static final String SERIALIZED_NAME_INDUSTRY_NAME = "industryName";
  @SerializedName(SERIALIZED_NAME_INDUSTRY_NAME)
  private String industryName;

  public static final String SERIALIZED_NAME_LAST_NAME = "lastName";
  @SerializedName(SERIALIZED_NAME_LAST_NAME)
  private String lastName;

  /**
   * ~
   */
  @JsonAdapter(MusicOnHoldEnum.Adapter.class)
  public enum MusicOnHoldEnum {
    DEFAULT("DEFAULT"),
    
    SILENCE("SILENCE"),
    
    ALTERNATIVE("ALTERNATIVE"),
    
    BLUES("BLUES"),
    
    CELTIC("CELTIC"),
    
    CLASSICAL("CLASSICAL"),
    
    COUNTRY("COUNTRY"),
    
    INSTRUMENTAL("INSTRUMENTAL"),
    
    JAZZ("JAZZ"),
    
    NEOPUNK("NEOPUNK"),
    
    NEW_AGE("NEW_AGE"),
    
    POP("POP"),
    
    ROCK("ROCK"),
    
    SWING("SWING"),
    
    TECHNO("TECHNO");

    private String value;

    MusicOnHoldEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static MusicOnHoldEnum fromValue(String value) {
      for (MusicOnHoldEnum b : MusicOnHoldEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<MusicOnHoldEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final MusicOnHoldEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public MusicOnHoldEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return MusicOnHoldEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      MusicOnHoldEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_MUSIC_ON_HOLD = "musicOnHold";
  @SerializedName(SERIALIZED_NAME_MUSIC_ON_HOLD)
  private MusicOnHoldEnum musicOnHold;

  public static final String SERIALIZED_NAME_NOTIFICATION_SOUND_ENABLED = "notificationSoundEnabled";
  @SerializedName(SERIALIZED_NAME_NOTIFICATION_SOUND_ENABLED)
  private Boolean notificationSoundEnabled;

  public static final String SERIALIZED_NAME_OPT_IN = "optIn";
  @SerializedName(SERIALIZED_NAME_OPT_IN)
  private Boolean optIn;

  public static final String SERIALIZED_NAME_OPT_IN_NUMBER = "optInNumber";
  @SerializedName(SERIALIZED_NAME_OPT_IN_NUMBER)
  private String optInNumber;

  public static final String SERIALIZED_NAME_PERMISSIONS = "permissions";
  @SerializedName(SERIALIZED_NAME_PERMISSIONS)
  private Set<String> permissions = new LinkedHashSet<>();

  public static final String SERIALIZED_NAME_PHONE_NUMBER = "phoneNumber";
  @SerializedName(SERIALIZED_NAME_PHONE_NUMBER)
  private String phoneNumber;

  public static final String SERIALIZED_NAME_PHONE_NUMBER_EXTENSION = "phoneNumberExtension";
  @SerializedName(SERIALIZED_NAME_PHONE_NUMBER_EXTENSION)
  private String phoneNumberExtension;

  public static final String SERIALIZED_NAME_PHONE_NUMBER_EXTENSION_DELAY_SEC = "phoneNumberExtensionDelaySec";
  @SerializedName(SERIALIZED_NAME_PHONE_NUMBER_EXTENSION_DELAY_SEC)
  private Integer phoneNumberExtensionDelaySec;

  public static final String SERIALIZED_NAME_PHONE_NUMBER_FOR_DISPLAY = "phoneNumberForDisplay";
  @SerializedName(SERIALIZED_NAME_PHONE_NUMBER_FOR_DISPLAY)
  private String phoneNumberForDisplay;

  public static final String SERIALIZED_NAME_PHONE_NUMBER_VERIFIED = "phoneNumberVerified";
  @SerializedName(SERIALIZED_NAME_PHONE_NUMBER_VERIFIED)
  private Boolean phoneNumberVerified;

  public static final String SERIALIZED_NAME_PROFILE_EMAIL = "profileEmail";
  @SerializedName(SERIALIZED_NAME_PROFILE_EMAIL)
  private String profileEmail;

  public static final String SERIALIZED_NAME_SIGNUP_COMPLETE = "signupComplete";
  @SerializedName(SERIALIZED_NAME_SIGNUP_COMPLETE)
  private Boolean signupComplete;

  public static final String SERIALIZED_NAME_SOA_USER = "soaUser";
  @SerializedName(SERIALIZED_NAME_SOA_USER)
  private User soaUser;

  public static final String SERIALIZED_NAME_TEAM_SEAT = "teamSeat";
  @SerializedName(SERIALIZED_NAME_TEAM_SEAT)
  private Boolean teamSeat;

  /**
   * ~
   */
  @JsonAdapter(UserStateEnum.Adapter.class)
  public enum UserStateEnum {
    ACTIVE("ACTIVE"),
    
    NEW_AUTH_INVITE("NEW_AUTH_INVITE"),
    
    NEW_USER_INVITE("NEW_USER_INVITE"),
    
    EXISTING_USER_INVITE("EXISTING_USER_INVITE");

    private String value;

    UserStateEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static UserStateEnum fromValue(String value) {
      for (UserStateEnum b : UserStateEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<UserStateEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final UserStateEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public UserStateEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return UserStateEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      UserStateEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_USER_STATE = "userState";
  @SerializedName(SERIALIZED_NAME_USER_STATE)
  private UserStateEnum userState;

  public static final String SERIALIZED_NAME_USER_STATE_PENDING = "userStatePending";
  @SerializedName(SERIALIZED_NAME_USER_STATE_PENDING)
  private Boolean userStatePending;

  public static final String SERIALIZED_NAME_VISIBLE = "visible";
  @SerializedName(SERIALIZED_NAME_VISIBLE)
  private Boolean visible;

  public User() {
  }

  public User account(Account account) {
    this.account = account;
    return this;
  }

  /**
   * Get account
   * @return account
   */
  @javax.annotation.Nullable
  public Account getAccount() {
    return account;
  }

  public void setAccount(Account account) {
    this.account = account;
  }


  public User accountHolder(Boolean accountHolder) {
    this.accountHolder = accountHolder;
    return this;
  }

  /**
   * ~
   * @return accountHolder
   */
  @javax.annotation.Nullable
  public Boolean getAccountHolder() {
    return accountHolder;
  }

  public void setAccountHolder(Boolean accountHolder) {
    this.accountHolder = accountHolder;
  }


  public User accountId(Long accountId) {
    this.accountId = accountId;
    return this;
  }

  /**
   * ~
   * @return accountId
   */
  @javax.annotation.Nullable
  public Long getAccountId() {
    return accountId;
  }

  public void setAccountId(Long accountId) {
    this.accountId = accountId;
  }


  public User active(Boolean active) {
    this.active = active;
    return this;
  }

  /**
   * ~
   * @return active
   */
  @javax.annotation.Nullable
  public Boolean getActive() {
    return active;
  }

  public void setActive(Boolean active) {
    this.active = active;
  }


  public User apiPasswordLastFour(String apiPasswordLastFour) {
    this.apiPasswordLastFour = apiPasswordLastFour;
    return this;
  }

  /**
   * ~
   * @return apiPasswordLastFour
   */
  @javax.annotation.Nullable
  public String getApiPasswordLastFour() {
    return apiPasswordLastFour;
  }

  public void setApiPasswordLastFour(String apiPasswordLastFour) {
    this.apiPasswordLastFour = apiPasswordLastFour;
  }


  public User brand(BrandEnum brand) {
    this.brand = brand;
    return this;
  }

  /**
   * ~
   * @return brand
   */
  @javax.annotation.Nullable
  public BrandEnum getBrand() {
    return brand;
  }

  public void setBrand(BrandEnum brand) {
    this.brand = brand;
  }


  public User cccAgent(Boolean cccAgent) {
    this.cccAgent = cccAgent;
    return this;
  }

  /**
   * ~
   * @return cccAgent
   */
  @javax.annotation.Nullable
  public Boolean getCccAgent() {
    return cccAgent;
  }

  public void setCccAgent(Boolean cccAgent) {
    this.cccAgent = cccAgent;
  }


  public User created(OffsetDateTime created) {
    this.created = created;
    return this;
  }

  /**
   * ~
   * @return created
   */
  @javax.annotation.Nullable
  public OffsetDateTime getCreated() {
    return created;
  }

  public void setCreated(OffsetDateTime created) {
    this.created = created;
  }


  public User dateOfBirth(OffsetDateTime dateOfBirth) {
    this.dateOfBirth = dateOfBirth;
    return this;
  }

  /**
   * ~
   * @return dateOfBirth
   */
  @javax.annotation.Nullable
  public OffsetDateTime getDateOfBirth() {
    return dateOfBirth;
  }

  public void setDateOfBirth(OffsetDateTime dateOfBirth) {
    this.dateOfBirth = dateOfBirth;
  }


  public User disabled(Boolean disabled) {
    this.disabled = disabled;
    return this;
  }

  /**
   * ~
   * @return disabled
   */
  @javax.annotation.Nullable
  public Boolean getDisabled() {
    return disabled;
  }

  public void setDisabled(Boolean disabled) {
    this.disabled = disabled;
  }


  public User firstName(String firstName) {
    this.firstName = firstName;
    return this;
  }

  /**
   * ~
   * @return firstName
   */
  @javax.annotation.Nullable
  public String getFirstName() {
    return firstName;
  }

  public void setFirstName(String firstName) {
    this.firstName = firstName;
  }


  public User fullName(String fullName) {
    this.fullName = fullName;
    return this;
  }

  /**
   * ~
   * @return fullName
   */
  @javax.annotation.Nullable
  public String getFullName() {
    return fullName;
  }

  public void setFullName(String fullName) {
    this.fullName = fullName;
  }


  public User id(Long id) {
    this.id = id;
    return this;
  }

  /**
   * ~
   * @return id
   */
  @javax.annotation.Nullable
  public Long getId() {
    return id;
  }

  public void setId(Long id) {
    this.id = id;
  }


  public User industryName(String industryName) {
    this.industryName = industryName;
    return this;
  }

  /**
   * ~
   * @return industryName
   */
  @javax.annotation.Nullable
  public String getIndustryName() {
    return industryName;
  }

  public void setIndustryName(String industryName) {
    this.industryName = industryName;
  }


  public User lastName(String lastName) {
    this.lastName = lastName;
    return this;
  }

  /**
   * ~
   * @return lastName
   */
  @javax.annotation.Nullable
  public String getLastName() {
    return lastName;
  }

  public void setLastName(String lastName) {
    this.lastName = lastName;
  }


  public User musicOnHold(MusicOnHoldEnum musicOnHold) {
    this.musicOnHold = musicOnHold;
    return this;
  }

  /**
   * ~
   * @return musicOnHold
   */
  @javax.annotation.Nullable
  public MusicOnHoldEnum getMusicOnHold() {
    return musicOnHold;
  }

  public void setMusicOnHold(MusicOnHoldEnum musicOnHold) {
    this.musicOnHold = musicOnHold;
  }


  public User notificationSoundEnabled(Boolean notificationSoundEnabled) {
    this.notificationSoundEnabled = notificationSoundEnabled;
    return this;
  }

  /**
   * ~
   * @return notificationSoundEnabled
   */
  @javax.annotation.Nullable
  public Boolean getNotificationSoundEnabled() {
    return notificationSoundEnabled;
  }

  public void setNotificationSoundEnabled(Boolean notificationSoundEnabled) {
    this.notificationSoundEnabled = notificationSoundEnabled;
  }


  public User optIn(Boolean optIn) {
    this.optIn = optIn;
    return this;
  }

  /**
   * ~
   * @return optIn
   */
  @javax.annotation.Nullable
  public Boolean getOptIn() {
    return optIn;
  }

  public void setOptIn(Boolean optIn) {
    this.optIn = optIn;
  }


  public User optInNumber(String optInNumber) {
    this.optInNumber = optInNumber;
    return this;
  }

  /**
   * ~
   * @return optInNumber
   */
  @javax.annotation.Nullable
  public String getOptInNumber() {
    return optInNumber;
  }

  public void setOptInNumber(String optInNumber) {
    this.optInNumber = optInNumber;
  }


  public User permissions(Set<String> permissions) {
    this.permissions = permissions;
    return this;
  }

  public User addPermissionsItem(String permissionsItem) {
    if (this.permissions == null) {
      this.permissions = new LinkedHashSet<>();
    }
    this.permissions.add(permissionsItem);
    return this;
  }

  /**
   * ~
   * @return permissions
   */
  @javax.annotation.Nullable
  public Set<String> getPermissions() {
    return permissions;
  }

  public void setPermissions(Set<String> permissions) {
    this.permissions = permissions;
  }


  public User phoneNumber(String phoneNumber) {
    this.phoneNumber = phoneNumber;
    return this;
  }

  /**
   * ~
   * @return phoneNumber
   */
  @javax.annotation.Nullable
  public String getPhoneNumber() {
    return phoneNumber;
  }

  public void setPhoneNumber(String phoneNumber) {
    this.phoneNumber = phoneNumber;
  }


  public User phoneNumberExtension(String phoneNumberExtension) {
    this.phoneNumberExtension = phoneNumberExtension;
    return this;
  }

  /**
   * ~
   * @return phoneNumberExtension
   */
  @javax.annotation.Nullable
  public String getPhoneNumberExtension() {
    return phoneNumberExtension;
  }

  public void setPhoneNumberExtension(String phoneNumberExtension) {
    this.phoneNumberExtension = phoneNumberExtension;
  }


  public User phoneNumberExtensionDelaySec(Integer phoneNumberExtensionDelaySec) {
    this.phoneNumberExtensionDelaySec = phoneNumberExtensionDelaySec;
    return this;
  }

  /**
   * ~
   * @return phoneNumberExtensionDelaySec
   */
  @javax.annotation.Nullable
  public Integer getPhoneNumberExtensionDelaySec() {
    return phoneNumberExtensionDelaySec;
  }

  public void setPhoneNumberExtensionDelaySec(Integer phoneNumberExtensionDelaySec) {
    this.phoneNumberExtensionDelaySec = phoneNumberExtensionDelaySec;
  }


  public User phoneNumberForDisplay(String phoneNumberForDisplay) {
    this.phoneNumberForDisplay = phoneNumberForDisplay;
    return this;
  }

  /**
   * ~
   * @return phoneNumberForDisplay
   */
  @javax.annotation.Nullable
  public String getPhoneNumberForDisplay() {
    return phoneNumberForDisplay;
  }

  public void setPhoneNumberForDisplay(String phoneNumberForDisplay) {
    this.phoneNumberForDisplay = phoneNumberForDisplay;
  }


  public User phoneNumberVerified(Boolean phoneNumberVerified) {
    this.phoneNumberVerified = phoneNumberVerified;
    return this;
  }

  /**
   * ~
   * @return phoneNumberVerified
   */
  @javax.annotation.Nullable
  public Boolean getPhoneNumberVerified() {
    return phoneNumberVerified;
  }

  public void setPhoneNumberVerified(Boolean phoneNumberVerified) {
    this.phoneNumberVerified = phoneNumberVerified;
  }


  public User profileEmail(String profileEmail) {
    this.profileEmail = profileEmail;
    return this;
  }

  /**
   * ~
   * @return profileEmail
   */
  @javax.annotation.Nullable
  public String getProfileEmail() {
    return profileEmail;
  }

  public void setProfileEmail(String profileEmail) {
    this.profileEmail = profileEmail;
  }


  public User signupComplete(Boolean signupComplete) {
    this.signupComplete = signupComplete;
    return this;
  }

  /**
   * ~
   * @return signupComplete
   */
  @javax.annotation.Nullable
  public Boolean getSignupComplete() {
    return signupComplete;
  }

  public void setSignupComplete(Boolean signupComplete) {
    this.signupComplete = signupComplete;
  }


  public User soaUser(User soaUser) {
    this.soaUser = soaUser;
    return this;
  }

  /**
   * Get soaUser
   * @return soaUser
   */
  @javax.annotation.Nullable
  public User getSoaUser() {
    return soaUser;
  }

  public void setSoaUser(User soaUser) {
    this.soaUser = soaUser;
  }


  public User teamSeat(Boolean teamSeat) {
    this.teamSeat = teamSeat;
    return this;
  }

  /**
   * ~
   * @return teamSeat
   */
  @javax.annotation.Nullable
  public Boolean getTeamSeat() {
    return teamSeat;
  }

  public void setTeamSeat(Boolean teamSeat) {
    this.teamSeat = teamSeat;
  }


  public User userState(UserStateEnum userState) {
    this.userState = userState;
    return this;
  }

  /**
   * ~
   * @return userState
   */
  @javax.annotation.Nullable
  public UserStateEnum getUserState() {
    return userState;
  }

  public void setUserState(UserStateEnum userState) {
    this.userState = userState;
  }


  public User userStatePending(Boolean userStatePending) {
    this.userStatePending = userStatePending;
    return this;
  }

  /**
   * ~
   * @return userStatePending
   */
  @javax.annotation.Nullable
  public Boolean getUserStatePending() {
    return userStatePending;
  }

  public void setUserStatePending(Boolean userStatePending) {
    this.userStatePending = userStatePending;
  }


  public User visible(Boolean visible) {
    this.visible = visible;
    return this;
  }

  /**
   * ~
   * @return visible
   */
  @javax.annotation.Nullable
  public Boolean getVisible() {
    return visible;
  }

  public void setVisible(Boolean visible) {
    this.visible = visible;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    User user = (User) o;
    return Objects.equals(this.account, user.account) &&
        Objects.equals(this.accountHolder, user.accountHolder) &&
        Objects.equals(this.accountId, user.accountId) &&
        Objects.equals(this.active, user.active) &&
        Objects.equals(this.apiPasswordLastFour, user.apiPasswordLastFour) &&
        Objects.equals(this.brand, user.brand) &&
        Objects.equals(this.cccAgent, user.cccAgent) &&
        Objects.equals(this.created, user.created) &&
        Objects.equals(this.dateOfBirth, user.dateOfBirth) &&
        Objects.equals(this.disabled, user.disabled) &&
        Objects.equals(this.firstName, user.firstName) &&
        Objects.equals(this.fullName, user.fullName) &&
        Objects.equals(this.id, user.id) &&
        Objects.equals(this.industryName, user.industryName) &&
        Objects.equals(this.lastName, user.lastName) &&
        Objects.equals(this.musicOnHold, user.musicOnHold) &&
        Objects.equals(this.notificationSoundEnabled, user.notificationSoundEnabled) &&
        Objects.equals(this.optIn, user.optIn) &&
        Objects.equals(this.optInNumber, user.optInNumber) &&
        Objects.equals(this.permissions, user.permissions) &&
        Objects.equals(this.phoneNumber, user.phoneNumber) &&
        Objects.equals(this.phoneNumberExtension, user.phoneNumberExtension) &&
        Objects.equals(this.phoneNumberExtensionDelaySec, user.phoneNumberExtensionDelaySec) &&
        Objects.equals(this.phoneNumberForDisplay, user.phoneNumberForDisplay) &&
        Objects.equals(this.phoneNumberVerified, user.phoneNumberVerified) &&
        Objects.equals(this.profileEmail, user.profileEmail) &&
        Objects.equals(this.signupComplete, user.signupComplete) &&
        Objects.equals(this.soaUser, user.soaUser) &&
        Objects.equals(this.teamSeat, user.teamSeat) &&
        Objects.equals(this.userState, user.userState) &&
        Objects.equals(this.userStatePending, user.userStatePending) &&
        Objects.equals(this.visible, user.visible);
  }

  @Override
  public int hashCode() {
    return Objects.hash(account, accountHolder, accountId, active, apiPasswordLastFour, brand, cccAgent, created, dateOfBirth, disabled, firstName, fullName, id, industryName, lastName, musicOnHold, notificationSoundEnabled, optIn, optInNumber, permissions, phoneNumber, phoneNumberExtension, phoneNumberExtensionDelaySec, phoneNumberForDisplay, phoneNumberVerified, profileEmail, signupComplete, soaUser, teamSeat, userState, userStatePending, visible);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class User {\n");
    sb.append("    account: ").append(toIndentedString(account)).append("\n");
    sb.append("    accountHolder: ").append(toIndentedString(accountHolder)).append("\n");
    sb.append("    accountId: ").append(toIndentedString(accountId)).append("\n");
    sb.append("    active: ").append(toIndentedString(active)).append("\n");
    sb.append("    apiPasswordLastFour: ").append(toIndentedString(apiPasswordLastFour)).append("\n");
    sb.append("    brand: ").append(toIndentedString(brand)).append("\n");
    sb.append("    cccAgent: ").append(toIndentedString(cccAgent)).append("\n");
    sb.append("    created: ").append(toIndentedString(created)).append("\n");
    sb.append("    dateOfBirth: ").append(toIndentedString(dateOfBirth)).append("\n");
    sb.append("    disabled: ").append(toIndentedString(disabled)).append("\n");
    sb.append("    firstName: ").append(toIndentedString(firstName)).append("\n");
    sb.append("    fullName: ").append(toIndentedString(fullName)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    industryName: ").append(toIndentedString(industryName)).append("\n");
    sb.append("    lastName: ").append(toIndentedString(lastName)).append("\n");
    sb.append("    musicOnHold: ").append(toIndentedString(musicOnHold)).append("\n");
    sb.append("    notificationSoundEnabled: ").append(toIndentedString(notificationSoundEnabled)).append("\n");
    sb.append("    optIn: ").append(toIndentedString(optIn)).append("\n");
    sb.append("    optInNumber: ").append(toIndentedString(optInNumber)).append("\n");
    sb.append("    permissions: ").append(toIndentedString(permissions)).append("\n");
    sb.append("    phoneNumber: ").append(toIndentedString(phoneNumber)).append("\n");
    sb.append("    phoneNumberExtension: ").append(toIndentedString(phoneNumberExtension)).append("\n");
    sb.append("    phoneNumberExtensionDelaySec: ").append(toIndentedString(phoneNumberExtensionDelaySec)).append("\n");
    sb.append("    phoneNumberForDisplay: ").append(toIndentedString(phoneNumberForDisplay)).append("\n");
    sb.append("    phoneNumberVerified: ").append(toIndentedString(phoneNumberVerified)).append("\n");
    sb.append("    profileEmail: ").append(toIndentedString(profileEmail)).append("\n");
    sb.append("    signupComplete: ").append(toIndentedString(signupComplete)).append("\n");
    sb.append("    soaUser: ").append(toIndentedString(soaUser)).append("\n");
    sb.append("    teamSeat: ").append(toIndentedString(teamSeat)).append("\n");
    sb.append("    userState: ").append(toIndentedString(userState)).append("\n");
    sb.append("    userStatePending: ").append(toIndentedString(userStatePending)).append("\n");
    sb.append("    visible: ").append(toIndentedString(visible)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("account");
    openapiFields.add("accountHolder");
    openapiFields.add("accountId");
    openapiFields.add("active");
    openapiFields.add("apiPasswordLastFour");
    openapiFields.add("brand");
    openapiFields.add("cccAgent");
    openapiFields.add("created");
    openapiFields.add("dateOfBirth");
    openapiFields.add("disabled");
    openapiFields.add("firstName");
    openapiFields.add("fullName");
    openapiFields.add("id");
    openapiFields.add("industryName");
    openapiFields.add("lastName");
    openapiFields.add("musicOnHold");
    openapiFields.add("notificationSoundEnabled");
    openapiFields.add("optIn");
    openapiFields.add("optInNumber");
    openapiFields.add("permissions");
    openapiFields.add("phoneNumber");
    openapiFields.add("phoneNumberExtension");
    openapiFields.add("phoneNumberExtensionDelaySec");
    openapiFields.add("phoneNumberForDisplay");
    openapiFields.add("phoneNumberVerified");
    openapiFields.add("profileEmail");
    openapiFields.add("signupComplete");
    openapiFields.add("soaUser");
    openapiFields.add("teamSeat");
    openapiFields.add("userState");
    openapiFields.add("userStatePending");
    openapiFields.add("visible");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to User
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!User.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in User is not found in the empty JSON string", User.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!User.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `User` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `account`
      if (jsonObj.get("account") != null && !jsonObj.get("account").isJsonNull()) {
        Account.validateJsonElement(jsonObj.get("account"));
      }
      if ((jsonObj.get("apiPasswordLastFour") != null && !jsonObj.get("apiPasswordLastFour").isJsonNull()) && !jsonObj.get("apiPasswordLastFour").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `apiPasswordLastFour` to be a primitive type in the JSON string but got `%s`", jsonObj.get("apiPasswordLastFour").toString()));
      }
      if ((jsonObj.get("brand") != null && !jsonObj.get("brand").isJsonNull()) && !jsonObj.get("brand").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `brand` to be a primitive type in the JSON string but got `%s`", jsonObj.get("brand").toString()));
      }
      // validate the optional field `brand`
      if (jsonObj.get("brand") != null && !jsonObj.get("brand").isJsonNull()) {
        BrandEnum.validateJsonElement(jsonObj.get("brand"));
      }
      if ((jsonObj.get("firstName") != null && !jsonObj.get("firstName").isJsonNull()) && !jsonObj.get("firstName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `firstName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("firstName").toString()));
      }
      if ((jsonObj.get("fullName") != null && !jsonObj.get("fullName").isJsonNull()) && !jsonObj.get("fullName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `fullName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("fullName").toString()));
      }
      if ((jsonObj.get("industryName") != null && !jsonObj.get("industryName").isJsonNull()) && !jsonObj.get("industryName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `industryName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("industryName").toString()));
      }
      if ((jsonObj.get("lastName") != null && !jsonObj.get("lastName").isJsonNull()) && !jsonObj.get("lastName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `lastName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("lastName").toString()));
      }
      if ((jsonObj.get("musicOnHold") != null && !jsonObj.get("musicOnHold").isJsonNull()) && !jsonObj.get("musicOnHold").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `musicOnHold` to be a primitive type in the JSON string but got `%s`", jsonObj.get("musicOnHold").toString()));
      }
      // validate the optional field `musicOnHold`
      if (jsonObj.get("musicOnHold") != null && !jsonObj.get("musicOnHold").isJsonNull()) {
        MusicOnHoldEnum.validateJsonElement(jsonObj.get("musicOnHold"));
      }
      if ((jsonObj.get("optInNumber") != null && !jsonObj.get("optInNumber").isJsonNull()) && !jsonObj.get("optInNumber").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `optInNumber` to be a primitive type in the JSON string but got `%s`", jsonObj.get("optInNumber").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("permissions") != null && !jsonObj.get("permissions").isJsonNull() && !jsonObj.get("permissions").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `permissions` to be an array in the JSON string but got `%s`", jsonObj.get("permissions").toString()));
      }
      if ((jsonObj.get("phoneNumber") != null && !jsonObj.get("phoneNumber").isJsonNull()) && !jsonObj.get("phoneNumber").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `phoneNumber` to be a primitive type in the JSON string but got `%s`", jsonObj.get("phoneNumber").toString()));
      }
      if ((jsonObj.get("phoneNumberExtension") != null && !jsonObj.get("phoneNumberExtension").isJsonNull()) && !jsonObj.get("phoneNumberExtension").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `phoneNumberExtension` to be a primitive type in the JSON string but got `%s`", jsonObj.get("phoneNumberExtension").toString()));
      }
      if ((jsonObj.get("phoneNumberForDisplay") != null && !jsonObj.get("phoneNumberForDisplay").isJsonNull()) && !jsonObj.get("phoneNumberForDisplay").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `phoneNumberForDisplay` to be a primitive type in the JSON string but got `%s`", jsonObj.get("phoneNumberForDisplay").toString()));
      }
      if ((jsonObj.get("profileEmail") != null && !jsonObj.get("profileEmail").isJsonNull()) && !jsonObj.get("profileEmail").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `profileEmail` to be a primitive type in the JSON string but got `%s`", jsonObj.get("profileEmail").toString()));
      }
      // validate the optional field `soaUser`
      if (jsonObj.get("soaUser") != null && !jsonObj.get("soaUser").isJsonNull()) {
        User.validateJsonElement(jsonObj.get("soaUser"));
      }
      if ((jsonObj.get("userState") != null && !jsonObj.get("userState").isJsonNull()) && !jsonObj.get("userState").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `userState` to be a primitive type in the JSON string but got `%s`", jsonObj.get("userState").toString()));
      }
      // validate the optional field `userState`
      if (jsonObj.get("userState") != null && !jsonObj.get("userState").isJsonNull()) {
        UserStateEnum.validateJsonElement(jsonObj.get("userState"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!User.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'User' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<User> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(User.class));

       return (TypeAdapter<T>) new TypeAdapter<User>() {
           @Override
           public void write(JsonWriter out, User value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public User read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of User given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of User
   * @throws IOException if the JSON string is invalid with respect to User
   */
  public static User fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, User.class);
  }

  /**
   * Convert an instance of User to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

