/*
 * CallFire API Documentation
 * CallFire
 *
 * The version of the OpenAPI document: V2
 * Contact: support@callfire.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Represents a contact in CallFire platform. Contains info about the people you want to contact. It allows you to store a user-defined properties for each contact
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T09:59:09.684594-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Contact {
  public static final String SERIALIZED_NAME_DELETED = "deleted";
  @SerializedName(SERIALIZED_NAME_DELETED)
  private Boolean deleted;

  public static final String SERIALIZED_NAME_EXTERNAL_ID = "externalId";
  @SerializedName(SERIALIZED_NAME_EXTERNAL_ID)
  private String externalId;

  public static final String SERIALIZED_NAME_EXTERNAL_SYSTEM = "externalSystem";
  @SerializedName(SERIALIZED_NAME_EXTERNAL_SYSTEM)
  private String externalSystem;

  public static final String SERIALIZED_NAME_EXTRA_PHONE1 = "extraPhone1";
  @SerializedName(SERIALIZED_NAME_EXTRA_PHONE1)
  private String extraPhone1;

  public static final String SERIALIZED_NAME_EXTRA_PHONE2 = "extraPhone2";
  @SerializedName(SERIALIZED_NAME_EXTRA_PHONE2)
  private String extraPhone2;

  public static final String SERIALIZED_NAME_EXTRA_PHONE3 = "extraPhone3";
  @SerializedName(SERIALIZED_NAME_EXTRA_PHONE3)
  private String extraPhone3;

  public static final String SERIALIZED_NAME_FIRST_NAME = "firstName";
  @SerializedName(SERIALIZED_NAME_FIRST_NAME)
  private String firstName;

  public static final String SERIALIZED_NAME_HOME_PHONE = "homePhone";
  @SerializedName(SERIALIZED_NAME_HOME_PHONE)
  private String homePhone;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private Long id;

  public static final String SERIALIZED_NAME_LAST_NAME = "lastName";
  @SerializedName(SERIALIZED_NAME_LAST_NAME)
  private String lastName;

  public static final String SERIALIZED_NAME_MOBILE_PHONE = "mobilePhone";
  @SerializedName(SERIALIZED_NAME_MOBILE_PHONE)
  private String mobilePhone;

  public static final String SERIALIZED_NAME_PROPERTIES = "properties";
  @SerializedName(SERIALIZED_NAME_PROPERTIES)
  private Map<String, String> properties = new HashMap<>();

  public static final String SERIALIZED_NAME_WORK_PHONE = "workPhone";
  @SerializedName(SERIALIZED_NAME_WORK_PHONE)
  private String workPhone;

  public static final String SERIALIZED_NAME_ZIPCODE = "zipcode";
  @SerializedName(SERIALIZED_NAME_ZIPCODE)
  private String zipcode;

  public Contact() {
  }

  public Contact deleted(Boolean deleted) {
    this.deleted = deleted;
    return this;
  }

  /**
   * A deleted contact, deleted contacts are hidden from search results
   * @return deleted
   */
  @javax.annotation.Nullable
  public Boolean getDeleted() {
    return deleted;
  }

  public void setDeleted(Boolean deleted) {
    this.deleted = deleted;
  }


  public Contact externalId(String externalId) {
    this.externalId = externalId;
    return this;
  }

  /**
   * An external id of a contact for syncing with external sources
   * @return externalId
   */
  @javax.annotation.Nullable
  public String getExternalId() {
    return externalId;
  }

  public void setExternalId(String externalId) {
    this.externalId = externalId;
  }


  public Contact externalSystem(String externalSystem) {
    this.externalSystem = externalSystem;
    return this;
  }

  /**
   * External system that external id refers to
   * @return externalSystem
   */
  @javax.annotation.Nullable
  public String getExternalSystem() {
    return externalSystem;
  }

  public void setExternalSystem(String externalSystem) {
    this.externalSystem = externalSystem;
  }


  public Contact extraPhone1(String extraPhone1) {
    this.extraPhone1 = extraPhone1;
    return this;
  }

  /**
   * Phone number in E.164 format (11-digit). Example: 12132000384
   * @return extraPhone1
   */
  @javax.annotation.Nullable
  public String getExtraPhone1() {
    return extraPhone1;
  }

  public void setExtraPhone1(String extraPhone1) {
    this.extraPhone1 = extraPhone1;
  }


  public Contact extraPhone2(String extraPhone2) {
    this.extraPhone2 = extraPhone2;
    return this;
  }

  /**
   * Phone number in E.164 format (11-digit). Example: 12132000384
   * @return extraPhone2
   */
  @javax.annotation.Nullable
  public String getExtraPhone2() {
    return extraPhone2;
  }

  public void setExtraPhone2(String extraPhone2) {
    this.extraPhone2 = extraPhone2;
  }


  public Contact extraPhone3(String extraPhone3) {
    this.extraPhone3 = extraPhone3;
    return this;
  }

  /**
   * Phone number in E.164 format (11-digit). Example: 12132000384
   * @return extraPhone3
   */
  @javax.annotation.Nullable
  public String getExtraPhone3() {
    return extraPhone3;
  }

  public void setExtraPhone3(String extraPhone3) {
    this.extraPhone3 = extraPhone3;
  }


  public Contact firstName(String firstName) {
    this.firstName = firstName;
    return this;
  }

  /**
   * A first name of a contact
   * @return firstName
   */
  @javax.annotation.Nullable
  public String getFirstName() {
    return firstName;
  }

  public void setFirstName(String firstName) {
    this.firstName = firstName;
  }


  public Contact homePhone(String homePhone) {
    this.homePhone = homePhone;
    return this;
  }

  /**
   * Phone number in E.164 format (11-digit). Example: 12132000384
   * @return homePhone
   */
  @javax.annotation.Nullable
  public String getHomePhone() {
    return homePhone;
  }

  public void setHomePhone(String homePhone) {
    this.homePhone = homePhone;
  }


  public Contact id(Long id) {
    this.id = id;
    return this;
  }

  /**
   * An id of a contact
   * @return id
   */
  @javax.annotation.Nullable
  public Long getId() {
    return id;
  }

  public void setId(Long id) {
    this.id = id;
  }


  public Contact lastName(String lastName) {
    this.lastName = lastName;
    return this;
  }

  /**
   * A last name of a contact
   * @return lastName
   */
  @javax.annotation.Nullable
  public String getLastName() {
    return lastName;
  }

  public void setLastName(String lastName) {
    this.lastName = lastName;
  }


  public Contact mobilePhone(String mobilePhone) {
    this.mobilePhone = mobilePhone;
    return this;
  }

  /**
   * Phone number in E.164 format (11-digit). Example: 12132000384
   * @return mobilePhone
   */
  @javax.annotation.Nullable
  public String getMobilePhone() {
    return mobilePhone;
  }

  public void setMobilePhone(String mobilePhone) {
    this.mobilePhone = mobilePhone;
  }


  public Contact properties(Map<String, String> properties) {
    this.properties = properties;
    return this;
  }

  public Contact putPropertiesItem(String key, String propertiesItem) {
    if (this.properties == null) {
      this.properties = new HashMap<>();
    }
    this.properties.put(key, propertiesItem);
    return this;
  }

  /**
   * Map of user-defined string properties for contact
   * @return properties
   */
  @javax.annotation.Nullable
  public Map<String, String> getProperties() {
    return properties;
  }

  public void setProperties(Map<String, String> properties) {
    this.properties = properties;
  }


  public Contact workPhone(String workPhone) {
    this.workPhone = workPhone;
    return this;
  }

  /**
   * Phone number in E.164 format (11-digit). Example: 12132000384
   * @return workPhone
   */
  @javax.annotation.Nullable
  public String getWorkPhone() {
    return workPhone;
  }

  public void setWorkPhone(String workPhone) {
    this.workPhone = workPhone;
  }


  public Contact zipcode(String zipcode) {
    this.zipcode = zipcode;
    return this;
  }

  /**
   * A Zip code of a contact
   * @return zipcode
   */
  @javax.annotation.Nullable
  public String getZipcode() {
    return zipcode;
  }

  public void setZipcode(String zipcode) {
    this.zipcode = zipcode;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Contact contact = (Contact) o;
    return Objects.equals(this.deleted, contact.deleted) &&
        Objects.equals(this.externalId, contact.externalId) &&
        Objects.equals(this.externalSystem, contact.externalSystem) &&
        Objects.equals(this.extraPhone1, contact.extraPhone1) &&
        Objects.equals(this.extraPhone2, contact.extraPhone2) &&
        Objects.equals(this.extraPhone3, contact.extraPhone3) &&
        Objects.equals(this.firstName, contact.firstName) &&
        Objects.equals(this.homePhone, contact.homePhone) &&
        Objects.equals(this.id, contact.id) &&
        Objects.equals(this.lastName, contact.lastName) &&
        Objects.equals(this.mobilePhone, contact.mobilePhone) &&
        Objects.equals(this.properties, contact.properties) &&
        Objects.equals(this.workPhone, contact.workPhone) &&
        Objects.equals(this.zipcode, contact.zipcode);
  }

  @Override
  public int hashCode() {
    return Objects.hash(deleted, externalId, externalSystem, extraPhone1, extraPhone2, extraPhone3, firstName, homePhone, id, lastName, mobilePhone, properties, workPhone, zipcode);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Contact {\n");
    sb.append("    deleted: ").append(toIndentedString(deleted)).append("\n");
    sb.append("    externalId: ").append(toIndentedString(externalId)).append("\n");
    sb.append("    externalSystem: ").append(toIndentedString(externalSystem)).append("\n");
    sb.append("    extraPhone1: ").append(toIndentedString(extraPhone1)).append("\n");
    sb.append("    extraPhone2: ").append(toIndentedString(extraPhone2)).append("\n");
    sb.append("    extraPhone3: ").append(toIndentedString(extraPhone3)).append("\n");
    sb.append("    firstName: ").append(toIndentedString(firstName)).append("\n");
    sb.append("    homePhone: ").append(toIndentedString(homePhone)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    lastName: ").append(toIndentedString(lastName)).append("\n");
    sb.append("    mobilePhone: ").append(toIndentedString(mobilePhone)).append("\n");
    sb.append("    properties: ").append(toIndentedString(properties)).append("\n");
    sb.append("    workPhone: ").append(toIndentedString(workPhone)).append("\n");
    sb.append("    zipcode: ").append(toIndentedString(zipcode)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("deleted");
    openapiFields.add("externalId");
    openapiFields.add("externalSystem");
    openapiFields.add("extraPhone1");
    openapiFields.add("extraPhone2");
    openapiFields.add("extraPhone3");
    openapiFields.add("firstName");
    openapiFields.add("homePhone");
    openapiFields.add("id");
    openapiFields.add("lastName");
    openapiFields.add("mobilePhone");
    openapiFields.add("properties");
    openapiFields.add("workPhone");
    openapiFields.add("zipcode");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Contact
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Contact.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Contact is not found in the empty JSON string", Contact.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Contact.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Contact` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("externalId") != null && !jsonObj.get("externalId").isJsonNull()) && !jsonObj.get("externalId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `externalId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("externalId").toString()));
      }
      if ((jsonObj.get("externalSystem") != null && !jsonObj.get("externalSystem").isJsonNull()) && !jsonObj.get("externalSystem").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `externalSystem` to be a primitive type in the JSON string but got `%s`", jsonObj.get("externalSystem").toString()));
      }
      if ((jsonObj.get("extraPhone1") != null && !jsonObj.get("extraPhone1").isJsonNull()) && !jsonObj.get("extraPhone1").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `extraPhone1` to be a primitive type in the JSON string but got `%s`", jsonObj.get("extraPhone1").toString()));
      }
      if ((jsonObj.get("extraPhone2") != null && !jsonObj.get("extraPhone2").isJsonNull()) && !jsonObj.get("extraPhone2").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `extraPhone2` to be a primitive type in the JSON string but got `%s`", jsonObj.get("extraPhone2").toString()));
      }
      if ((jsonObj.get("extraPhone3") != null && !jsonObj.get("extraPhone3").isJsonNull()) && !jsonObj.get("extraPhone3").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `extraPhone3` to be a primitive type in the JSON string but got `%s`", jsonObj.get("extraPhone3").toString()));
      }
      if ((jsonObj.get("firstName") != null && !jsonObj.get("firstName").isJsonNull()) && !jsonObj.get("firstName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `firstName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("firstName").toString()));
      }
      if ((jsonObj.get("homePhone") != null && !jsonObj.get("homePhone").isJsonNull()) && !jsonObj.get("homePhone").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `homePhone` to be a primitive type in the JSON string but got `%s`", jsonObj.get("homePhone").toString()));
      }
      if ((jsonObj.get("lastName") != null && !jsonObj.get("lastName").isJsonNull()) && !jsonObj.get("lastName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `lastName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("lastName").toString()));
      }
      if ((jsonObj.get("mobilePhone") != null && !jsonObj.get("mobilePhone").isJsonNull()) && !jsonObj.get("mobilePhone").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `mobilePhone` to be a primitive type in the JSON string but got `%s`", jsonObj.get("mobilePhone").toString()));
      }
      if ((jsonObj.get("workPhone") != null && !jsonObj.get("workPhone").isJsonNull()) && !jsonObj.get("workPhone").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `workPhone` to be a primitive type in the JSON string but got `%s`", jsonObj.get("workPhone").toString()));
      }
      if ((jsonObj.get("zipcode") != null && !jsonObj.get("zipcode").isJsonNull()) && !jsonObj.get("zipcode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `zipcode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("zipcode").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Contact.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Contact' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Contact> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Contact.class));

       return (TypeAdapter<T>) new TypeAdapter<Contact>() {
           @Override
           public void write(JsonWriter out, Contact value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Contact read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Contact given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Contact
   * @throws IOException if the JSON string is invalid with respect to Contact
   */
  public static Contact fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Contact.class);
  }

  /**
   * Convert an instance of Contact to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

