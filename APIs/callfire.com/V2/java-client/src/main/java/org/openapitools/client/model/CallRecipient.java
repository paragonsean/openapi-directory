/*
 * CallFire API Documentation
 * CallFire
 *
 * The version of the OpenAPI document: V2
 * Contact: support@callfire.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Recipient of a campaign action. Can be a phone number, contact, or contact list with attributes added to action. It is required to specify one of this values
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T09:59:09.684594-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class CallRecipient {
  public static final String SERIALIZED_NAME_ATTRIBUTES = "attributes";
  @SerializedName(SERIALIZED_NAME_ATTRIBUTES)
  private Map<String, String> attributes = new HashMap<>();

  public static final String SERIALIZED_NAME_CONTACT_ID = "contactId";
  @SerializedName(SERIALIZED_NAME_CONTACT_ID)
  private Long contactId;

  public static final String SERIALIZED_NAME_DIALPLAN_XML = "dialplanXml";
  @SerializedName(SERIALIZED_NAME_DIALPLAN_XML)
  private String dialplanXml;

  public static final String SERIALIZED_NAME_FROM_NUMBER = "fromNumber";
  @SerializedName(SERIALIZED_NAME_FROM_NUMBER)
  private String fromNumber;

  public static final String SERIALIZED_NAME_LIVE_MESSAGE = "liveMessage";
  @SerializedName(SERIALIZED_NAME_LIVE_MESSAGE)
  private String liveMessage;

  public static final String SERIALIZED_NAME_LIVE_MESSAGE_SOUND_ID = "liveMessageSoundId";
  @SerializedName(SERIALIZED_NAME_LIVE_MESSAGE_SOUND_ID)
  private Long liveMessageSoundId;

  public static final String SERIALIZED_NAME_MACHINE_MESSAGE = "machineMessage";
  @SerializedName(SERIALIZED_NAME_MACHINE_MESSAGE)
  private String machineMessage;

  public static final String SERIALIZED_NAME_MACHINE_MESSAGE_SOUND_ID = "machineMessageSoundId";
  @SerializedName(SERIALIZED_NAME_MACHINE_MESSAGE_SOUND_ID)
  private Long machineMessageSoundId;

  public static final String SERIALIZED_NAME_PHONE_NUMBER = "phoneNumber";
  @SerializedName(SERIALIZED_NAME_PHONE_NUMBER)
  private String phoneNumber;

  public static final String SERIALIZED_NAME_TRANSFER_DIGIT = "transferDigit";
  @SerializedName(SERIALIZED_NAME_TRANSFER_DIGIT)
  private String transferDigit;

  public static final String SERIALIZED_NAME_TRANSFER_MESSAGE = "transferMessage";
  @SerializedName(SERIALIZED_NAME_TRANSFER_MESSAGE)
  private String transferMessage;

  public static final String SERIALIZED_NAME_TRANSFER_MESSAGE_SOUND_ID = "transferMessageSoundId";
  @SerializedName(SERIALIZED_NAME_TRANSFER_MESSAGE_SOUND_ID)
  private Long transferMessageSoundId;

  public static final String SERIALIZED_NAME_TRANSFER_NUMBER = "transferNumber";
  @SerializedName(SERIALIZED_NAME_TRANSFER_NUMBER)
  private String transferNumber;

  /**
   * The voice to be used (MALE1, FEMALE1, FEMALE2, SPANISH1, FRENCHCANADIAN1)
   */
  @JsonAdapter(VoiceEnum.Adapter.class)
  public enum VoiceEnum {
    MALE1("MALE1"),
    
    FEMALE1("FEMALE1"),
    
    FEMALE2("FEMALE2"),
    
    SPANISH1("SPANISH1"),
    
    FRENCHCANADIAN1("FRENCHCANADIAN1");

    private String value;

    VoiceEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static VoiceEnum fromValue(String value) {
      for (VoiceEnum b : VoiceEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<VoiceEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final VoiceEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public VoiceEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return VoiceEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      VoiceEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_VOICE = "voice";
  @SerializedName(SERIALIZED_NAME_VOICE)
  private VoiceEnum voice;

  public CallRecipient() {
  }

  public CallRecipient attributes(Map<String, String> attributes) {
    this.attributes = attributes;
    return this;
  }

  public CallRecipient putAttributesItem(String key, String attributesItem) {
    if (this.attributes == null) {
      this.attributes = new HashMap<>();
    }
    this.attributes.put(key, attributesItem);
    return this;
  }

  /**
   * Map of user-defined string attributes associated with recipient
   * @return attributes
   */
  @javax.annotation.Nullable
  public Map<String, String> getAttributes() {
    return attributes;
  }

  public void setAttributes(Map<String, String> attributes) {
    this.attributes = attributes;
  }


  public CallRecipient contactId(Long contactId) {
    this.contactId = contactId;
    return this;
  }

  /**
   * An id of existing contact used as recipient
   * @return contactId
   */
  @javax.annotation.Nullable
  public Long getContactId() {
    return contactId;
  }

  public void setContactId(Long contactId) {
    this.contactId = contactId;
  }


  public CallRecipient dialplanXml(String dialplanXml) {
    this.dialplanXml = dialplanXml;
    return this;
  }

  /**
   * An IVR xml document describing dialplan to setup an IVR broadcast. If dialplan is set there is no need to set live, machine and transfer sounds (or vice versa)
   * @return dialplanXml
   */
  @javax.annotation.Nullable
  public String getDialplanXml() {
    return dialplanXml;
  }

  public void setDialplanXml(String dialplanXml) {
    this.dialplanXml = dialplanXml;
  }


  public CallRecipient fromNumber(String fromNumber) {
    this.fromNumber = fromNumber;
    return this;
  }

  /**
   * ~
   * @return fromNumber
   */
  @javax.annotation.Nullable
  public String getFromNumber() {
    return fromNumber;
  }

  public void setFromNumber(String fromNumber) {
    this.fromNumber = fromNumber;
  }


  public CallRecipient liveMessage(String liveMessage) {
    this.liveMessage = liveMessage;
    return this;
  }

  /**
   * Text to be turned into a sound, this text will be played when the phone is answered
   * @return liveMessage
   */
  @javax.annotation.Nullable
  public String getLiveMessage() {
    return liveMessage;
  }

  public void setLiveMessage(String liveMessage) {
    this.liveMessage = liveMessage;
  }


  public CallRecipient liveMessageSoundId(Long liveMessageSoundId) {
    this.liveMessageSoundId = liveMessageSoundId;
    return this;
  }

  /**
   * An id of a sound file to play if phone is answered
   * @return liveMessageSoundId
   */
  @javax.annotation.Nullable
  public Long getLiveMessageSoundId() {
    return liveMessageSoundId;
  }

  public void setLiveMessageSoundId(Long liveMessageSoundId) {
    this.liveMessageSoundId = liveMessageSoundId;
  }


  public CallRecipient machineMessage(String machineMessage) {
    this.machineMessage = machineMessage;
    return this;
  }

  /**
   * Text to be used to turn into sound, this text will be played when answering machine is detected
   * @return machineMessage
   */
  @javax.annotation.Nullable
  public String getMachineMessage() {
    return machineMessage;
  }

  public void setMachineMessage(String machineMessage) {
    this.machineMessage = machineMessage;
  }


  public CallRecipient machineMessageSoundId(Long machineMessageSoundId) {
    this.machineMessageSoundId = machineMessageSoundId;
    return this;
  }

  /**
   * An id of a sound file to play if answering machine is detected
   * @return machineMessageSoundId
   */
  @javax.annotation.Nullable
  public Long getMachineMessageSoundId() {
    return machineMessageSoundId;
  }

  public void setMachineMessageSoundId(Long machineMessageSoundId) {
    this.machineMessageSoundId = machineMessageSoundId;
  }


  public CallRecipient phoneNumber(String phoneNumber) {
    this.phoneNumber = phoneNumber;
    return this;
  }

  /**
   * Recipient&#39;s phone number in E.164 format (11-digit) or short code. Example: 12132000384
   * @return phoneNumber
   */
  @javax.annotation.Nullable
  public String getPhoneNumber() {
    return phoneNumber;
  }

  public void setPhoneNumber(String phoneNumber) {
    this.phoneNumber = phoneNumber;
  }


  public CallRecipient transferDigit(String transferDigit) {
    this.transferDigit = transferDigit;
    return this;
  }

  /**
   * A digit pressed to initiate the transfer
   * @return transferDigit
   */
  @javax.annotation.Nullable
  public String getTransferDigit() {
    return transferDigit;
  }

  public void setTransferDigit(String transferDigit) {
    this.transferDigit = transferDigit;
  }


  public CallRecipient transferMessage(String transferMessage) {
    this.transferMessage = transferMessage;
    return this;
  }

  /**
   * Text to be turned into sound, this text will be played when the transfer digit is played
   * @return transferMessage
   */
  @javax.annotation.Nullable
  public String getTransferMessage() {
    return transferMessage;
  }

  public void setTransferMessage(String transferMessage) {
    this.transferMessage = transferMessage;
  }


  public CallRecipient transferMessageSoundId(Long transferMessageSoundId) {
    this.transferMessageSoundId = transferMessageSoundId;
    return this;
  }

  /**
   * An id of a sound file to play if call is transferred
   * @return transferMessageSoundId
   */
  @javax.annotation.Nullable
  public Long getTransferMessageSoundId() {
    return transferMessageSoundId;
  }

  public void setTransferMessageSoundId(Long transferMessageSoundId) {
    this.transferMessageSoundId = transferMessageSoundId;
  }


  public CallRecipient transferNumber(String transferNumber) {
    this.transferNumber = transferNumber;
    return this;
  }

  /**
   * Phone number in E.164 format (11-digit) to transfer the call to. Example: 12132000384
   * @return transferNumber
   */
  @javax.annotation.Nullable
  public String getTransferNumber() {
    return transferNumber;
  }

  public void setTransferNumber(String transferNumber) {
    this.transferNumber = transferNumber;
  }


  public CallRecipient voice(VoiceEnum voice) {
    this.voice = voice;
    return this;
  }

  /**
   * The voice to be used (MALE1, FEMALE1, FEMALE2, SPANISH1, FRENCHCANADIAN1)
   * @return voice
   */
  @javax.annotation.Nullable
  public VoiceEnum getVoice() {
    return voice;
  }

  public void setVoice(VoiceEnum voice) {
    this.voice = voice;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CallRecipient callRecipient = (CallRecipient) o;
    return Objects.equals(this.attributes, callRecipient.attributes) &&
        Objects.equals(this.contactId, callRecipient.contactId) &&
        Objects.equals(this.dialplanXml, callRecipient.dialplanXml) &&
        Objects.equals(this.fromNumber, callRecipient.fromNumber) &&
        Objects.equals(this.liveMessage, callRecipient.liveMessage) &&
        Objects.equals(this.liveMessageSoundId, callRecipient.liveMessageSoundId) &&
        Objects.equals(this.machineMessage, callRecipient.machineMessage) &&
        Objects.equals(this.machineMessageSoundId, callRecipient.machineMessageSoundId) &&
        Objects.equals(this.phoneNumber, callRecipient.phoneNumber) &&
        Objects.equals(this.transferDigit, callRecipient.transferDigit) &&
        Objects.equals(this.transferMessage, callRecipient.transferMessage) &&
        Objects.equals(this.transferMessageSoundId, callRecipient.transferMessageSoundId) &&
        Objects.equals(this.transferNumber, callRecipient.transferNumber) &&
        Objects.equals(this.voice, callRecipient.voice);
  }

  @Override
  public int hashCode() {
    return Objects.hash(attributes, contactId, dialplanXml, fromNumber, liveMessage, liveMessageSoundId, machineMessage, machineMessageSoundId, phoneNumber, transferDigit, transferMessage, transferMessageSoundId, transferNumber, voice);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CallRecipient {\n");
    sb.append("    attributes: ").append(toIndentedString(attributes)).append("\n");
    sb.append("    contactId: ").append(toIndentedString(contactId)).append("\n");
    sb.append("    dialplanXml: ").append(toIndentedString(dialplanXml)).append("\n");
    sb.append("    fromNumber: ").append(toIndentedString(fromNumber)).append("\n");
    sb.append("    liveMessage: ").append(toIndentedString(liveMessage)).append("\n");
    sb.append("    liveMessageSoundId: ").append(toIndentedString(liveMessageSoundId)).append("\n");
    sb.append("    machineMessage: ").append(toIndentedString(machineMessage)).append("\n");
    sb.append("    machineMessageSoundId: ").append(toIndentedString(machineMessageSoundId)).append("\n");
    sb.append("    phoneNumber: ").append(toIndentedString(phoneNumber)).append("\n");
    sb.append("    transferDigit: ").append(toIndentedString(transferDigit)).append("\n");
    sb.append("    transferMessage: ").append(toIndentedString(transferMessage)).append("\n");
    sb.append("    transferMessageSoundId: ").append(toIndentedString(transferMessageSoundId)).append("\n");
    sb.append("    transferNumber: ").append(toIndentedString(transferNumber)).append("\n");
    sb.append("    voice: ").append(toIndentedString(voice)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("attributes");
    openapiFields.add("contactId");
    openapiFields.add("dialplanXml");
    openapiFields.add("fromNumber");
    openapiFields.add("liveMessage");
    openapiFields.add("liveMessageSoundId");
    openapiFields.add("machineMessage");
    openapiFields.add("machineMessageSoundId");
    openapiFields.add("phoneNumber");
    openapiFields.add("transferDigit");
    openapiFields.add("transferMessage");
    openapiFields.add("transferMessageSoundId");
    openapiFields.add("transferNumber");
    openapiFields.add("voice");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to CallRecipient
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!CallRecipient.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CallRecipient is not found in the empty JSON string", CallRecipient.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!CallRecipient.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CallRecipient` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("dialplanXml") != null && !jsonObj.get("dialplanXml").isJsonNull()) && !jsonObj.get("dialplanXml").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `dialplanXml` to be a primitive type in the JSON string but got `%s`", jsonObj.get("dialplanXml").toString()));
      }
      if ((jsonObj.get("fromNumber") != null && !jsonObj.get("fromNumber").isJsonNull()) && !jsonObj.get("fromNumber").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `fromNumber` to be a primitive type in the JSON string but got `%s`", jsonObj.get("fromNumber").toString()));
      }
      if ((jsonObj.get("liveMessage") != null && !jsonObj.get("liveMessage").isJsonNull()) && !jsonObj.get("liveMessage").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `liveMessage` to be a primitive type in the JSON string but got `%s`", jsonObj.get("liveMessage").toString()));
      }
      if ((jsonObj.get("machineMessage") != null && !jsonObj.get("machineMessage").isJsonNull()) && !jsonObj.get("machineMessage").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `machineMessage` to be a primitive type in the JSON string but got `%s`", jsonObj.get("machineMessage").toString()));
      }
      if ((jsonObj.get("phoneNumber") != null && !jsonObj.get("phoneNumber").isJsonNull()) && !jsonObj.get("phoneNumber").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `phoneNumber` to be a primitive type in the JSON string but got `%s`", jsonObj.get("phoneNumber").toString()));
      }
      if ((jsonObj.get("transferDigit") != null && !jsonObj.get("transferDigit").isJsonNull()) && !jsonObj.get("transferDigit").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `transferDigit` to be a primitive type in the JSON string but got `%s`", jsonObj.get("transferDigit").toString()));
      }
      if ((jsonObj.get("transferMessage") != null && !jsonObj.get("transferMessage").isJsonNull()) && !jsonObj.get("transferMessage").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `transferMessage` to be a primitive type in the JSON string but got `%s`", jsonObj.get("transferMessage").toString()));
      }
      if ((jsonObj.get("transferNumber") != null && !jsonObj.get("transferNumber").isJsonNull()) && !jsonObj.get("transferNumber").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `transferNumber` to be a primitive type in the JSON string but got `%s`", jsonObj.get("transferNumber").toString()));
      }
      if ((jsonObj.get("voice") != null && !jsonObj.get("voice").isJsonNull()) && !jsonObj.get("voice").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `voice` to be a primitive type in the JSON string but got `%s`", jsonObj.get("voice").toString()));
      }
      // validate the optional field `voice`
      if (jsonObj.get("voice") != null && !jsonObj.get("voice").isJsonNull()) {
        VoiceEnum.validateJsonElement(jsonObj.get("voice"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CallRecipient.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CallRecipient' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CallRecipient> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CallRecipient.class));

       return (TypeAdapter<T>) new TypeAdapter<CallRecipient>() {
           @Override
           public void write(JsonWriter out, CallRecipient value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CallRecipient read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of CallRecipient given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of CallRecipient
   * @throws IOException if the JSON string is invalid with respect to CallRecipient
   */
  public static CallRecipient fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CallRecipient.class);
  }

  /**
   * Convert an instance of CallRecipient to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

