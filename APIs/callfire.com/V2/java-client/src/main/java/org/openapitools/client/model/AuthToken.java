/*
 * CallFire API Documentation
 * CallFire
 *
 * The version of the OpenAPI document: V2
 * Contact: support@callfire.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.openapitools.client.model.OAuthSession;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * ~
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T09:59:09.684594-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class AuthToken {
  public static final String SERIALIZED_NAME_ACCOUNT_ID = "accountId";
  @SerializedName(SERIALIZED_NAME_ACCOUNT_ID)
  private Long accountId;

  public static final String SERIALIZED_NAME_ADMIN_CLIENT = "adminClient";
  @SerializedName(SERIALIZED_NAME_ADMIN_CLIENT)
  private Boolean adminClient;

  public static final String SERIALIZED_NAME_ADMIN_TOKEN = "adminToken";
  @SerializedName(SERIALIZED_NAME_ADMIN_TOKEN)
  private AuthToken adminToken;

  public static final String SERIALIZED_NAME_ATTRIBUTES = "attributes";
  @SerializedName(SERIALIZED_NAME_ATTRIBUTES)
  private Map<String, String> attributes = new HashMap<>();

  /**
   * ~
   */
  @JsonAdapter(BrandEnum.Adapter.class)
  public enum BrandEnum {
    EZTEXTING("EZTEXTING"),
    
    CLUBTEXTING("CLUBTEXTING"),
    
    GROUPTEXTING("GROUPTEXTING"),
    
    TELLMYCELL("TELLMYCELL"),
    
    EZ("EZ"),
    
    CALLFIRE("CALLFIRE"),
    
    TESLA("TESLA");

    private String value;

    BrandEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static BrandEnum fromValue(String value) {
      for (BrandEnum b : BrandEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<BrandEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final BrandEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public BrandEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return BrandEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      BrandEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_BRAND = "brand";
  @SerializedName(SERIALIZED_NAME_BRAND)
  private BrandEnum brand;

  public static final String SERIALIZED_NAME_EZ_SPA_CLIENT = "ezSpaClient";
  @SerializedName(SERIALIZED_NAME_EZ_SPA_CLIENT)
  private Boolean ezSpaClient;

  public static final String SERIALIZED_NAME_MIGRATION = "migration";
  @SerializedName(SERIALIZED_NAME_MIGRATION)
  private Boolean migration;

  public static final String SERIALIZED_NAME_SESSION = "session";
  @SerializedName(SERIALIZED_NAME_SESSION)
  private OAuthSession session;

  public static final String SERIALIZED_NAME_SESSION_ID = "sessionId";
  @SerializedName(SERIALIZED_NAME_SESSION_ID)
  private String sessionId;

  public static final String SERIALIZED_NAME_USER_ID = "userId";
  @SerializedName(SERIALIZED_NAME_USER_ID)
  private Long userId;

  public AuthToken() {
  }

  public AuthToken accountId(Long accountId) {
    this.accountId = accountId;
    return this;
  }

  /**
   * ~
   * @return accountId
   */
  @javax.annotation.Nullable
  public Long getAccountId() {
    return accountId;
  }

  public void setAccountId(Long accountId) {
    this.accountId = accountId;
  }


  public AuthToken adminClient(Boolean adminClient) {
    this.adminClient = adminClient;
    return this;
  }

  /**
   * ~
   * @return adminClient
   */
  @javax.annotation.Nullable
  public Boolean getAdminClient() {
    return adminClient;
  }

  public void setAdminClient(Boolean adminClient) {
    this.adminClient = adminClient;
  }


  public AuthToken adminToken(AuthToken adminToken) {
    this.adminToken = adminToken;
    return this;
  }

  /**
   * Get adminToken
   * @return adminToken
   */
  @javax.annotation.Nullable
  public AuthToken getAdminToken() {
    return adminToken;
  }

  public void setAdminToken(AuthToken adminToken) {
    this.adminToken = adminToken;
  }


  public AuthToken attributes(Map<String, String> attributes) {
    this.attributes = attributes;
    return this;
  }

  public AuthToken putAttributesItem(String key, String attributesItem) {
    if (this.attributes == null) {
      this.attributes = new HashMap<>();
    }
    this.attributes.put(key, attributesItem);
    return this;
  }

  /**
   * ~
   * @return attributes
   */
  @javax.annotation.Nullable
  public Map<String, String> getAttributes() {
    return attributes;
  }

  public void setAttributes(Map<String, String> attributes) {
    this.attributes = attributes;
  }


  public AuthToken brand(BrandEnum brand) {
    this.brand = brand;
    return this;
  }

  /**
   * ~
   * @return brand
   */
  @javax.annotation.Nullable
  public BrandEnum getBrand() {
    return brand;
  }

  public void setBrand(BrandEnum brand) {
    this.brand = brand;
  }


  public AuthToken ezSpaClient(Boolean ezSpaClient) {
    this.ezSpaClient = ezSpaClient;
    return this;
  }

  /**
   * ~
   * @return ezSpaClient
   */
  @javax.annotation.Nullable
  public Boolean getEzSpaClient() {
    return ezSpaClient;
  }

  public void setEzSpaClient(Boolean ezSpaClient) {
    this.ezSpaClient = ezSpaClient;
  }


  public AuthToken migration(Boolean migration) {
    this.migration = migration;
    return this;
  }

  /**
   * ~
   * @return migration
   */
  @javax.annotation.Nullable
  public Boolean getMigration() {
    return migration;
  }

  public void setMigration(Boolean migration) {
    this.migration = migration;
  }


  public AuthToken session(OAuthSession session) {
    this.session = session;
    return this;
  }

  /**
   * Get session
   * @return session
   */
  @javax.annotation.Nullable
  public OAuthSession getSession() {
    return session;
  }

  public void setSession(OAuthSession session) {
    this.session = session;
  }


  public AuthToken sessionId(String sessionId) {
    this.sessionId = sessionId;
    return this;
  }

  /**
   * ~
   * @return sessionId
   */
  @javax.annotation.Nullable
  public String getSessionId() {
    return sessionId;
  }

  public void setSessionId(String sessionId) {
    this.sessionId = sessionId;
  }


  public AuthToken userId(Long userId) {
    this.userId = userId;
    return this;
  }

  /**
   * ~
   * @return userId
   */
  @javax.annotation.Nullable
  public Long getUserId() {
    return userId;
  }

  public void setUserId(Long userId) {
    this.userId = userId;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    AuthToken authToken = (AuthToken) o;
    return Objects.equals(this.accountId, authToken.accountId) &&
        Objects.equals(this.adminClient, authToken.adminClient) &&
        Objects.equals(this.adminToken, authToken.adminToken) &&
        Objects.equals(this.attributes, authToken.attributes) &&
        Objects.equals(this.brand, authToken.brand) &&
        Objects.equals(this.ezSpaClient, authToken.ezSpaClient) &&
        Objects.equals(this.migration, authToken.migration) &&
        Objects.equals(this.session, authToken.session) &&
        Objects.equals(this.sessionId, authToken.sessionId) &&
        Objects.equals(this.userId, authToken.userId);
  }

  @Override
  public int hashCode() {
    return Objects.hash(accountId, adminClient, adminToken, attributes, brand, ezSpaClient, migration, session, sessionId, userId);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class AuthToken {\n");
    sb.append("    accountId: ").append(toIndentedString(accountId)).append("\n");
    sb.append("    adminClient: ").append(toIndentedString(adminClient)).append("\n");
    sb.append("    adminToken: ").append(toIndentedString(adminToken)).append("\n");
    sb.append("    attributes: ").append(toIndentedString(attributes)).append("\n");
    sb.append("    brand: ").append(toIndentedString(brand)).append("\n");
    sb.append("    ezSpaClient: ").append(toIndentedString(ezSpaClient)).append("\n");
    sb.append("    migration: ").append(toIndentedString(migration)).append("\n");
    sb.append("    session: ").append(toIndentedString(session)).append("\n");
    sb.append("    sessionId: ").append(toIndentedString(sessionId)).append("\n");
    sb.append("    userId: ").append(toIndentedString(userId)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("accountId");
    openapiFields.add("adminClient");
    openapiFields.add("adminToken");
    openapiFields.add("attributes");
    openapiFields.add("brand");
    openapiFields.add("ezSpaClient");
    openapiFields.add("migration");
    openapiFields.add("session");
    openapiFields.add("sessionId");
    openapiFields.add("userId");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to AuthToken
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!AuthToken.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in AuthToken is not found in the empty JSON string", AuthToken.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!AuthToken.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `AuthToken` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `adminToken`
      if (jsonObj.get("adminToken") != null && !jsonObj.get("adminToken").isJsonNull()) {
        AuthToken.validateJsonElement(jsonObj.get("adminToken"));
      }
      if ((jsonObj.get("brand") != null && !jsonObj.get("brand").isJsonNull()) && !jsonObj.get("brand").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `brand` to be a primitive type in the JSON string but got `%s`", jsonObj.get("brand").toString()));
      }
      // validate the optional field `brand`
      if (jsonObj.get("brand") != null && !jsonObj.get("brand").isJsonNull()) {
        BrandEnum.validateJsonElement(jsonObj.get("brand"));
      }
      // validate the optional field `session`
      if (jsonObj.get("session") != null && !jsonObj.get("session").isJsonNull()) {
        OAuthSession.validateJsonElement(jsonObj.get("session"));
      }
      if ((jsonObj.get("sessionId") != null && !jsonObj.get("sessionId").isJsonNull()) && !jsonObj.get("sessionId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `sessionId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("sessionId").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!AuthToken.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'AuthToken' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<AuthToken> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(AuthToken.class));

       return (TypeAdapter<T>) new TypeAdapter<AuthToken>() {
           @Override
           public void write(JsonWriter out, AuthToken value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public AuthToken read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of AuthToken given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of AuthToken
   * @throws IOException if the JSON string is invalid with respect to AuthToken
   */
  public static AuthToken fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, AuthToken.class);
  }

  /**
   * Convert an instance of AuthToken to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

