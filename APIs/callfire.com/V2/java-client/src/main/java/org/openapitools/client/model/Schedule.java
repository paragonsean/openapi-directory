/*
 * CallFire API Documentation
 * CallFire
 *
 * The version of the OpenAPI document: V2
 * Contact: support@callfire.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.LinkedHashSet;
import java.util.Set;
import org.openapitools.client.model.ModelLocalDate;
import org.openapitools.client.model.ModelLocalTime;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * A campaign schedule
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T09:59:09.684594-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Schedule {
  public static final String SERIALIZED_NAME_CAMPAIGN_ID = "campaignId";
  @SerializedName(SERIALIZED_NAME_CAMPAIGN_ID)
  private Long campaignId;

  public static final String SERIALIZED_NAME_DAYS_OF_WEEK = "daysOfWeek";
  @SerializedName(SERIALIZED_NAME_DAYS_OF_WEEK)
  private Set<String> daysOfWeek = new LinkedHashSet<>();

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private Long id;

  public static final String SERIALIZED_NAME_START_DATE = "startDate";
  @SerializedName(SERIALIZED_NAME_START_DATE)
  private ModelLocalDate startDate;

  public static final String SERIALIZED_NAME_START_TIME_OF_DAY = "startTimeOfDay";
  @SerializedName(SERIALIZED_NAME_START_TIME_OF_DAY)
  private ModelLocalTime startTimeOfDay;

  public static final String SERIALIZED_NAME_STOP_DATE = "stopDate";
  @SerializedName(SERIALIZED_NAME_STOP_DATE)
  private ModelLocalDate stopDate;

  public static final String SERIALIZED_NAME_STOP_TIME_OF_DAY = "stopTimeOfDay";
  @SerializedName(SERIALIZED_NAME_STOP_TIME_OF_DAY)
  private ModelLocalTime stopTimeOfDay;

  public static final String SERIALIZED_NAME_TIME_ZONE = "timeZone";
  @SerializedName(SERIALIZED_NAME_TIME_ZONE)
  private String timeZone;

  public Schedule() {
  }

  public Schedule campaignId(Long campaignId) {
    this.campaignId = campaignId;
    return this;
  }

  /**
   * ~
   * @return campaignId
   */
  @javax.annotation.Nullable
  public Long getCampaignId() {
    return campaignId;
  }

  public void setCampaignId(Long campaignId) {
    this.campaignId = campaignId;
  }


  public Schedule daysOfWeek(Set<String> daysOfWeek) {
    this.daysOfWeek = daysOfWeek;
    return this;
  }

  public Schedule addDaysOfWeekItem(String daysOfWeekItem) {
    if (this.daysOfWeek == null) {
      this.daysOfWeek = new LinkedHashSet<>();
    }
    this.daysOfWeek.add(daysOfWeekItem);
    return this;
  }

  /**
   * ~
   * @return daysOfWeek
   */
  @javax.annotation.Nullable
  public Set<String> getDaysOfWeek() {
    return daysOfWeek;
  }

  public void setDaysOfWeek(Set<String> daysOfWeek) {
    this.daysOfWeek = daysOfWeek;
  }


  public Schedule id(Long id) {
    this.id = id;
    return this;
  }

  /**
   * ~
   * @return id
   */
  @javax.annotation.Nullable
  public Long getId() {
    return id;
  }

  public void setId(Long id) {
    this.id = id;
  }


  public Schedule startDate(ModelLocalDate startDate) {
    this.startDate = startDate;
    return this;
  }

  /**
   * Get startDate
   * @return startDate
   */
  @javax.annotation.Nullable
  public ModelLocalDate getStartDate() {
    return startDate;
  }

  public void setStartDate(ModelLocalDate startDate) {
    this.startDate = startDate;
  }


  public Schedule startTimeOfDay(ModelLocalTime startTimeOfDay) {
    this.startTimeOfDay = startTimeOfDay;
    return this;
  }

  /**
   * Get startTimeOfDay
   * @return startTimeOfDay
   */
  @javax.annotation.Nullable
  public ModelLocalTime getStartTimeOfDay() {
    return startTimeOfDay;
  }

  public void setStartTimeOfDay(ModelLocalTime startTimeOfDay) {
    this.startTimeOfDay = startTimeOfDay;
  }


  public Schedule stopDate(ModelLocalDate stopDate) {
    this.stopDate = stopDate;
    return this;
  }

  /**
   * Get stopDate
   * @return stopDate
   */
  @javax.annotation.Nullable
  public ModelLocalDate getStopDate() {
    return stopDate;
  }

  public void setStopDate(ModelLocalDate stopDate) {
    this.stopDate = stopDate;
  }


  public Schedule stopTimeOfDay(ModelLocalTime stopTimeOfDay) {
    this.stopTimeOfDay = stopTimeOfDay;
    return this;
  }

  /**
   * Get stopTimeOfDay
   * @return stopTimeOfDay
   */
  @javax.annotation.Nullable
  public ModelLocalTime getStopTimeOfDay() {
    return stopTimeOfDay;
  }

  public void setStopTimeOfDay(ModelLocalTime stopTimeOfDay) {
    this.stopTimeOfDay = stopTimeOfDay;
  }


  public Schedule timeZone(String timeZone) {
    this.timeZone = timeZone;
    return this;
  }

  /**
   * ~
   * @return timeZone
   */
  @javax.annotation.Nullable
  public String getTimeZone() {
    return timeZone;
  }

  public void setTimeZone(String timeZone) {
    this.timeZone = timeZone;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Schedule schedule = (Schedule) o;
    return Objects.equals(this.campaignId, schedule.campaignId) &&
        Objects.equals(this.daysOfWeek, schedule.daysOfWeek) &&
        Objects.equals(this.id, schedule.id) &&
        Objects.equals(this.startDate, schedule.startDate) &&
        Objects.equals(this.startTimeOfDay, schedule.startTimeOfDay) &&
        Objects.equals(this.stopDate, schedule.stopDate) &&
        Objects.equals(this.stopTimeOfDay, schedule.stopTimeOfDay) &&
        Objects.equals(this.timeZone, schedule.timeZone);
  }

  @Override
  public int hashCode() {
    return Objects.hash(campaignId, daysOfWeek, id, startDate, startTimeOfDay, stopDate, stopTimeOfDay, timeZone);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Schedule {\n");
    sb.append("    campaignId: ").append(toIndentedString(campaignId)).append("\n");
    sb.append("    daysOfWeek: ").append(toIndentedString(daysOfWeek)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    startDate: ").append(toIndentedString(startDate)).append("\n");
    sb.append("    startTimeOfDay: ").append(toIndentedString(startTimeOfDay)).append("\n");
    sb.append("    stopDate: ").append(toIndentedString(stopDate)).append("\n");
    sb.append("    stopTimeOfDay: ").append(toIndentedString(stopTimeOfDay)).append("\n");
    sb.append("    timeZone: ").append(toIndentedString(timeZone)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("campaignId");
    openapiFields.add("daysOfWeek");
    openapiFields.add("id");
    openapiFields.add("startDate");
    openapiFields.add("startTimeOfDay");
    openapiFields.add("stopDate");
    openapiFields.add("stopTimeOfDay");
    openapiFields.add("timeZone");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Schedule
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Schedule.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Schedule is not found in the empty JSON string", Schedule.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Schedule.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Schedule` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // ensure the optional json data is an array if present
      if (jsonObj.get("daysOfWeek") != null && !jsonObj.get("daysOfWeek").isJsonNull() && !jsonObj.get("daysOfWeek").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `daysOfWeek` to be an array in the JSON string but got `%s`", jsonObj.get("daysOfWeek").toString()));
      }
      // validate the optional field `startDate`
      if (jsonObj.get("startDate") != null && !jsonObj.get("startDate").isJsonNull()) {
        ModelLocalDate.validateJsonElement(jsonObj.get("startDate"));
      }
      // validate the optional field `startTimeOfDay`
      if (jsonObj.get("startTimeOfDay") != null && !jsonObj.get("startTimeOfDay").isJsonNull()) {
        ModelLocalTime.validateJsonElement(jsonObj.get("startTimeOfDay"));
      }
      // validate the optional field `stopDate`
      if (jsonObj.get("stopDate") != null && !jsonObj.get("stopDate").isJsonNull()) {
        ModelLocalDate.validateJsonElement(jsonObj.get("stopDate"));
      }
      // validate the optional field `stopTimeOfDay`
      if (jsonObj.get("stopTimeOfDay") != null && !jsonObj.get("stopTimeOfDay").isJsonNull()) {
        ModelLocalTime.validateJsonElement(jsonObj.get("stopTimeOfDay"));
      }
      if ((jsonObj.get("timeZone") != null && !jsonObj.get("timeZone").isJsonNull()) && !jsonObj.get("timeZone").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `timeZone` to be a primitive type in the JSON string but got `%s`", jsonObj.get("timeZone").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Schedule.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Schedule' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Schedule> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Schedule.class));

       return (TypeAdapter<T>) new TypeAdapter<Schedule>() {
           @Override
           public void write(JsonWriter out, Schedule value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Schedule read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Schedule given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Schedule
   * @throws IOException if the JSON string is invalid with respect to Schedule
   */
  public static Schedule fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Schedule.class);
  }

  /**
   * Convert an instance of Schedule to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

