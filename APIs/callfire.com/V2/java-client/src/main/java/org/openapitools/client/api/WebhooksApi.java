/*
 * CallFire API Documentation
 * CallFire
 *
 * The version of the OpenAPI document: V2
 * Contact: support@callfire.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.ErrorResponse;
import org.openapitools.client.model.ItemListWebhookResource;
import org.openapitools.client.model.ResourceId;
import org.openapitools.client.model.Webhook;
import org.openapitools.client.model.WebhookPage;
import org.openapitools.client.model.WebhookResource;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class WebhooksApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public WebhooksApi() {
        this(Configuration.getDefaultApiClient());
    }

    public WebhooksApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for createWebhook
     * @param webhook A webhook object (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createWebhookCall(Webhook webhook, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = webhook;

        // create path and map variables
        String localVarPath = "/webhooks";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createWebhookValidateBeforeCall(Webhook webhook, final ApiCallback _callback) throws ApiException {
        return createWebhookCall(webhook, _callback);

    }

    /**
     * Create a webhook
     * Create a Webhook for notification in the CallFire system. Use the webhooks API to receive notifications of important CallFire events. Select the resource to listen to, and then choose the resource events to receive notifications on. When an event triggers, a POST will be made to the callback URL with a payload of notification information. Available resources and their events include &#39;CccCampaign&#39;: [&#39;started&#39;, &#39;stopped&#39;, &#39;finished&#39;], &#39;CallBroadcast&#39;: [&#39;started&#39;, &#39;stopped&#39;, &#39;finished&#39;], &#39;TextBroadcast&#39;: [&#39;started&#39;, &#39;stopped&#39;, &#39;finished&#39;], &#39;OutboundCall&#39;: [&#39;finished&#39;], &#39;InboundCall&#39;: [&#39;finished&#39;], &#39;OutboundText&#39;: [&#39;finished&#39;], &#39;InboundText&#39;: [&#39;finished&#39;], &#39;ContactList&#39;: [&#39;validationFinished&#39;, &#39;validationFailed&#39;], &#39;MonthlyRenewal&#39;: [&#39;failed&#39;, &#39;finished&#39;], &#39;LowBalance&#39;: [&#39;failed&#39;, &#39;finished&#39;]. Webhooks support secret token which is used as signing key to HmacSHA1 hash of json payload which is returned in &#39;X-CallFire-Signature&#39; header. This header can be used to verify callback POST is coming from CallFire. See [security guide](https://developers.callfire.com/security-guide.html)
     * @param webhook A webhook object (optional)
     * @return ResourceId
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public ResourceId createWebhook(Webhook webhook) throws ApiException {
        ApiResponse<ResourceId> localVarResp = createWebhookWithHttpInfo(webhook);
        return localVarResp.getData();
    }

    /**
     * Create a webhook
     * Create a Webhook for notification in the CallFire system. Use the webhooks API to receive notifications of important CallFire events. Select the resource to listen to, and then choose the resource events to receive notifications on. When an event triggers, a POST will be made to the callback URL with a payload of notification information. Available resources and their events include &#39;CccCampaign&#39;: [&#39;started&#39;, &#39;stopped&#39;, &#39;finished&#39;], &#39;CallBroadcast&#39;: [&#39;started&#39;, &#39;stopped&#39;, &#39;finished&#39;], &#39;TextBroadcast&#39;: [&#39;started&#39;, &#39;stopped&#39;, &#39;finished&#39;], &#39;OutboundCall&#39;: [&#39;finished&#39;], &#39;InboundCall&#39;: [&#39;finished&#39;], &#39;OutboundText&#39;: [&#39;finished&#39;], &#39;InboundText&#39;: [&#39;finished&#39;], &#39;ContactList&#39;: [&#39;validationFinished&#39;, &#39;validationFailed&#39;], &#39;MonthlyRenewal&#39;: [&#39;failed&#39;, &#39;finished&#39;], &#39;LowBalance&#39;: [&#39;failed&#39;, &#39;finished&#39;]. Webhooks support secret token which is used as signing key to HmacSHA1 hash of json payload which is returned in &#39;X-CallFire-Signature&#39; header. This header can be used to verify callback POST is coming from CallFire. See [security guide](https://developers.callfire.com/security-guide.html)
     * @param webhook A webhook object (optional)
     * @return ApiResponse&lt;ResourceId&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ResourceId> createWebhookWithHttpInfo(Webhook webhook) throws ApiException {
        okhttp3.Call localVarCall = createWebhookValidateBeforeCall(webhook, null);
        Type localVarReturnType = new TypeToken<ResourceId>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create a webhook (asynchronously)
     * Create a Webhook for notification in the CallFire system. Use the webhooks API to receive notifications of important CallFire events. Select the resource to listen to, and then choose the resource events to receive notifications on. When an event triggers, a POST will be made to the callback URL with a payload of notification information. Available resources and their events include &#39;CccCampaign&#39;: [&#39;started&#39;, &#39;stopped&#39;, &#39;finished&#39;], &#39;CallBroadcast&#39;: [&#39;started&#39;, &#39;stopped&#39;, &#39;finished&#39;], &#39;TextBroadcast&#39;: [&#39;started&#39;, &#39;stopped&#39;, &#39;finished&#39;], &#39;OutboundCall&#39;: [&#39;finished&#39;], &#39;InboundCall&#39;: [&#39;finished&#39;], &#39;OutboundText&#39;: [&#39;finished&#39;], &#39;InboundText&#39;: [&#39;finished&#39;], &#39;ContactList&#39;: [&#39;validationFinished&#39;, &#39;validationFailed&#39;], &#39;MonthlyRenewal&#39;: [&#39;failed&#39;, &#39;finished&#39;], &#39;LowBalance&#39;: [&#39;failed&#39;, &#39;finished&#39;]. Webhooks support secret token which is used as signing key to HmacSHA1 hash of json payload which is returned in &#39;X-CallFire-Signature&#39; header. This header can be used to verify callback POST is coming from CallFire. See [security guide](https://developers.callfire.com/security-guide.html)
     * @param webhook A webhook object (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createWebhookAsync(Webhook webhook, final ApiCallback<ResourceId> _callback) throws ApiException {

        okhttp3.Call localVarCall = createWebhookValidateBeforeCall(webhook, _callback);
        Type localVarReturnType = new TypeToken<ResourceId>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteWebhook
     * @param id An Id of a webhook (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteWebhookCall(Long id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/webhooks/{id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteWebhookValidateBeforeCall(Long id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling deleteWebhook(Async)");
        }

        return deleteWebhookCall(id, _callback);

    }

    /**
     * Delete a webhook
     * Deletes a webhook instance. Will be removed permanently
     * @param id An Id of a webhook (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public void deleteWebhook(Long id) throws ApiException {
        deleteWebhookWithHttpInfo(id);
    }

    /**
     * Delete a webhook
     * Deletes a webhook instance. Will be removed permanently
     * @param id An Id of a webhook (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> deleteWebhookWithHttpInfo(Long id) throws ApiException {
        okhttp3.Call localVarCall = deleteWebhookValidateBeforeCall(id, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Delete a webhook (asynchronously)
     * Deletes a webhook instance. Will be removed permanently
     * @param id An Id of a webhook (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteWebhookAsync(Long id, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteWebhookValidateBeforeCall(id, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for findWebhookResources
     * @param fields Limit fields received in response. E.g. fields: id, name or fields items (id, name), see more at [partial response](https://developers.callfire.com/docs.html#partial-response) page. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call findWebhookResourcesCall(String fields, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/webhooks/resources";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (fields != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("fields", fields));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call findWebhookResourcesValidateBeforeCall(String fields, final ApiCallback _callback) throws ApiException {
        return findWebhookResourcesCall(fields, _callback);

    }

    /**
     * Find webhook resources
     * Searches for webhook resources. Available resources include &#39;CccCampaign&#39;: [&#39;started&#39;, &#39;stopped&#39;, &#39;finished&#39;], &#39;CallBroadcast&#39;: [&#39;started&#39;, &#39;stopped&#39;, &#39;finished&#39;], &#39;TextBroadcast&#39;: [&#39;started&#39;, &#39;stopped&#39;, &#39;finished&#39;], &#39;OutboundCall&#39;: [&#39;finished&#39;], &#39;InboundCall&#39;: [&#39;finished&#39;], &#39;OutboundText&#39;: [&#39;finished&#39;], &#39;InboundText&#39;: [&#39;finished&#39;], &#39;ContactList&#39;: [&#39;validationFinished&#39;, &#39;validationFailed&#39;], &#39;MonthlyRenewal&#39;: [&#39;failed&#39;, &#39;finished&#39;], &#39;LowBalance&#39;: [&#39;failed&#39;, &#39;finished&#39;]
     * @param fields Limit fields received in response. E.g. fields: id, name or fields items (id, name), see more at [partial response](https://developers.callfire.com/docs.html#partial-response) page. (optional)
     * @return ItemListWebhookResource
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public ItemListWebhookResource findWebhookResources(String fields) throws ApiException {
        ApiResponse<ItemListWebhookResource> localVarResp = findWebhookResourcesWithHttpInfo(fields);
        return localVarResp.getData();
    }

    /**
     * Find webhook resources
     * Searches for webhook resources. Available resources include &#39;CccCampaign&#39;: [&#39;started&#39;, &#39;stopped&#39;, &#39;finished&#39;], &#39;CallBroadcast&#39;: [&#39;started&#39;, &#39;stopped&#39;, &#39;finished&#39;], &#39;TextBroadcast&#39;: [&#39;started&#39;, &#39;stopped&#39;, &#39;finished&#39;], &#39;OutboundCall&#39;: [&#39;finished&#39;], &#39;InboundCall&#39;: [&#39;finished&#39;], &#39;OutboundText&#39;: [&#39;finished&#39;], &#39;InboundText&#39;: [&#39;finished&#39;], &#39;ContactList&#39;: [&#39;validationFinished&#39;, &#39;validationFailed&#39;], &#39;MonthlyRenewal&#39;: [&#39;failed&#39;, &#39;finished&#39;], &#39;LowBalance&#39;: [&#39;failed&#39;, &#39;finished&#39;]
     * @param fields Limit fields received in response. E.g. fields: id, name or fields items (id, name), see more at [partial response](https://developers.callfire.com/docs.html#partial-response) page. (optional)
     * @return ApiResponse&lt;ItemListWebhookResource&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ItemListWebhookResource> findWebhookResourcesWithHttpInfo(String fields) throws ApiException {
        okhttp3.Call localVarCall = findWebhookResourcesValidateBeforeCall(fields, null);
        Type localVarReturnType = new TypeToken<ItemListWebhookResource>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Find webhook resources (asynchronously)
     * Searches for webhook resources. Available resources include &#39;CccCampaign&#39;: [&#39;started&#39;, &#39;stopped&#39;, &#39;finished&#39;], &#39;CallBroadcast&#39;: [&#39;started&#39;, &#39;stopped&#39;, &#39;finished&#39;], &#39;TextBroadcast&#39;: [&#39;started&#39;, &#39;stopped&#39;, &#39;finished&#39;], &#39;OutboundCall&#39;: [&#39;finished&#39;], &#39;InboundCall&#39;: [&#39;finished&#39;], &#39;OutboundText&#39;: [&#39;finished&#39;], &#39;InboundText&#39;: [&#39;finished&#39;], &#39;ContactList&#39;: [&#39;validationFinished&#39;, &#39;validationFailed&#39;], &#39;MonthlyRenewal&#39;: [&#39;failed&#39;, &#39;finished&#39;], &#39;LowBalance&#39;: [&#39;failed&#39;, &#39;finished&#39;]
     * @param fields Limit fields received in response. E.g. fields: id, name or fields items (id, name), see more at [partial response](https://developers.callfire.com/docs.html#partial-response) page. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call findWebhookResourcesAsync(String fields, final ApiCallback<ItemListWebhookResource> _callback) throws ApiException {

        okhttp3.Call localVarCall = findWebhookResourcesValidateBeforeCall(fields, _callback);
        Type localVarReturnType = new TypeToken<ItemListWebhookResource>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for findWebhooks
     * @param fields Limit fields received in response. E.g. fields: id, name or fields items (id, name), see more at [partial response](https://developers.callfire.com/docs.html#partial-response) page. (optional)
     * @param limit To set the maximum number of records to return in a paged list response. The default is 100 (optional, default to 100)
     * @param offset Offset to the start of a given page. The default is 0. Check [pagination](https://developers.callfire.com/docs.html#pagination) page for more information about pagination in CallFire API. (optional, default to 0)
     * @param name A name of a webhook (optional)
     * @param resource A name of a resource, available values: &#39;CccCampaign&#39;, &#39;CallBroadcast&#39;, &#39;TextBroadcast&#39;,  &#39;OutboundCall&#39;, &#39;OutboundText&#39;, &#39;InboundCall&#39;, &#39;InboundText&#39;, &#39;ContactList&#39; (optional)
     * @param event A name of event, available values: &#39;started&#39;, &#39;stopped&#39;, &#39;finished&#39; (optional)
     * @param paramCallback A callback URL (optional)
     * @param enabled Specifies whether webhook is enabled (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call findWebhooksCall(String fields, Integer limit, Integer offset, String name, String resource, String event, String paramCallback, Boolean enabled, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/webhooks";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (fields != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("fields", fields));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        if (name != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name", name));
        }

        if (resource != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("resource", resource));
        }

        if (event != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("event", event));
        }

        if (paramCallback != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("callback", paramCallback));
        }

        if (enabled != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("enabled", enabled));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call findWebhooksValidateBeforeCall(String fields, Integer limit, Integer offset, String name, String resource, String event, String paramCallback, Boolean enabled, final ApiCallback _callback) throws ApiException {
        return findWebhooksCall(fields, limit, offset, name, resource, event, paramCallback, enabled, _callback);

    }

    /**
     * Find webhooks
     * Searches all webhooks available for a current user. Searches by name, resource, event, callback URL, or whether they are enabled. Returns a paged list of Webhooks
     * @param fields Limit fields received in response. E.g. fields: id, name or fields items (id, name), see more at [partial response](https://developers.callfire.com/docs.html#partial-response) page. (optional)
     * @param limit To set the maximum number of records to return in a paged list response. The default is 100 (optional, default to 100)
     * @param offset Offset to the start of a given page. The default is 0. Check [pagination](https://developers.callfire.com/docs.html#pagination) page for more information about pagination in CallFire API. (optional, default to 0)
     * @param name A name of a webhook (optional)
     * @param resource A name of a resource, available values: &#39;CccCampaign&#39;, &#39;CallBroadcast&#39;, &#39;TextBroadcast&#39;,  &#39;OutboundCall&#39;, &#39;OutboundText&#39;, &#39;InboundCall&#39;, &#39;InboundText&#39;, &#39;ContactList&#39; (optional)
     * @param event A name of event, available values: &#39;started&#39;, &#39;stopped&#39;, &#39;finished&#39; (optional)
     * @param paramCallback A callback URL (optional)
     * @param enabled Specifies whether webhook is enabled (optional)
     * @return WebhookPage
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public WebhookPage findWebhooks(String fields, Integer limit, Integer offset, String name, String resource, String event, String paramCallback, Boolean enabled) throws ApiException {
        ApiResponse<WebhookPage> localVarResp = findWebhooksWithHttpInfo(fields, limit, offset, name, resource, event, paramCallback, enabled);
        return localVarResp.getData();
    }

    /**
     * Find webhooks
     * Searches all webhooks available for a current user. Searches by name, resource, event, callback URL, or whether they are enabled. Returns a paged list of Webhooks
     * @param fields Limit fields received in response. E.g. fields: id, name or fields items (id, name), see more at [partial response](https://developers.callfire.com/docs.html#partial-response) page. (optional)
     * @param limit To set the maximum number of records to return in a paged list response. The default is 100 (optional, default to 100)
     * @param offset Offset to the start of a given page. The default is 0. Check [pagination](https://developers.callfire.com/docs.html#pagination) page for more information about pagination in CallFire API. (optional, default to 0)
     * @param name A name of a webhook (optional)
     * @param resource A name of a resource, available values: &#39;CccCampaign&#39;, &#39;CallBroadcast&#39;, &#39;TextBroadcast&#39;,  &#39;OutboundCall&#39;, &#39;OutboundText&#39;, &#39;InboundCall&#39;, &#39;InboundText&#39;, &#39;ContactList&#39; (optional)
     * @param event A name of event, available values: &#39;started&#39;, &#39;stopped&#39;, &#39;finished&#39; (optional)
     * @param paramCallback A callback URL (optional)
     * @param enabled Specifies whether webhook is enabled (optional)
     * @return ApiResponse&lt;WebhookPage&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<WebhookPage> findWebhooksWithHttpInfo(String fields, Integer limit, Integer offset, String name, String resource, String event, String paramCallback, Boolean enabled) throws ApiException {
        okhttp3.Call localVarCall = findWebhooksValidateBeforeCall(fields, limit, offset, name, resource, event, paramCallback, enabled, null);
        Type localVarReturnType = new TypeToken<WebhookPage>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Find webhooks (asynchronously)
     * Searches all webhooks available for a current user. Searches by name, resource, event, callback URL, or whether they are enabled. Returns a paged list of Webhooks
     * @param fields Limit fields received in response. E.g. fields: id, name or fields items (id, name), see more at [partial response](https://developers.callfire.com/docs.html#partial-response) page. (optional)
     * @param limit To set the maximum number of records to return in a paged list response. The default is 100 (optional, default to 100)
     * @param offset Offset to the start of a given page. The default is 0. Check [pagination](https://developers.callfire.com/docs.html#pagination) page for more information about pagination in CallFire API. (optional, default to 0)
     * @param name A name of a webhook (optional)
     * @param resource A name of a resource, available values: &#39;CccCampaign&#39;, &#39;CallBroadcast&#39;, &#39;TextBroadcast&#39;,  &#39;OutboundCall&#39;, &#39;OutboundText&#39;, &#39;InboundCall&#39;, &#39;InboundText&#39;, &#39;ContactList&#39; (optional)
     * @param event A name of event, available values: &#39;started&#39;, &#39;stopped&#39;, &#39;finished&#39; (optional)
     * @param paramCallback A callback URL (optional)
     * @param enabled Specifies whether webhook is enabled (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call findWebhooksAsync(String fields, Integer limit, Integer offset, String name, String resource, String event, String paramCallback, Boolean enabled, final ApiCallback<WebhookPage> _callback) throws ApiException {

        okhttp3.Call localVarCall = findWebhooksValidateBeforeCall(fields, limit, offset, name, resource, event, paramCallback, enabled, _callback);
        Type localVarReturnType = new TypeToken<WebhookPage>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getWebhook
     * @param id An id of a webhook (required)
     * @param fields Limit fields received in response. E.g. fields: id, name or fields items (id, name), see more at [partial response](https://developers.callfire.com/docs.html#partial-response) page. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getWebhookCall(Long id, String fields, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/webhooks/{id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (fields != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("fields", fields));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getWebhookValidateBeforeCall(Long id, String fields, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getWebhook(Async)");
        }

        return getWebhookCall(id, fields, _callback);

    }

    /**
     * Find a specific webhook
     * Returns a single Webhook instance for a given webhook id
     * @param id An id of a webhook (required)
     * @param fields Limit fields received in response. E.g. fields: id, name or fields items (id, name), see more at [partial response](https://developers.callfire.com/docs.html#partial-response) page. (optional)
     * @return Webhook
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public Webhook getWebhook(Long id, String fields) throws ApiException {
        ApiResponse<Webhook> localVarResp = getWebhookWithHttpInfo(id, fields);
        return localVarResp.getData();
    }

    /**
     * Find a specific webhook
     * Returns a single Webhook instance for a given webhook id
     * @param id An id of a webhook (required)
     * @param fields Limit fields received in response. E.g. fields: id, name or fields items (id, name), see more at [partial response](https://developers.callfire.com/docs.html#partial-response) page. (optional)
     * @return ApiResponse&lt;Webhook&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Webhook> getWebhookWithHttpInfo(Long id, String fields) throws ApiException {
        okhttp3.Call localVarCall = getWebhookValidateBeforeCall(id, fields, null);
        Type localVarReturnType = new TypeToken<Webhook>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Find a specific webhook (asynchronously)
     * Returns a single Webhook instance for a given webhook id
     * @param id An id of a webhook (required)
     * @param fields Limit fields received in response. E.g. fields: id, name or fields items (id, name), see more at [partial response](https://developers.callfire.com/docs.html#partial-response) page. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getWebhookAsync(Long id, String fields, final ApiCallback<Webhook> _callback) throws ApiException {

        okhttp3.Call localVarCall = getWebhookValidateBeforeCall(id, fields, _callback);
        Type localVarReturnType = new TypeToken<Webhook>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getWebhookResource
     * @param resource A name of a webhook resource. Available resources include &#39;CccCampaign&#39;: [&#39;started&#39;, &#39;stopped&#39;, &#39;finished&#39;], &#39;CallBroadcast&#39;: [&#39;started&#39;, &#39;stopped&#39;, &#39;finished&#39;], &#39;TextBroadcast&#39;: [&#39;started&#39;, &#39;stopped&#39;, &#39;finished&#39;], &#39;OutboundCall&#39;: [&#39;finished&#39;], &#39;InboundCall&#39;: [&#39;finished&#39;], &#39;OutboundText&#39;: [&#39;finished&#39;], &#39;InboundText&#39;: [&#39;finished&#39;], &#39;ContactList&#39;: [&#39;validationFinished&#39;, &#39;validationFailed&#39;], &#39;MonthlyRenewal&#39;: [&#39;failed&#39;, &#39;finished&#39;], &#39;LowBalance&#39;: [&#39;failed&#39;, &#39;finished&#39;] (required)
     * @param fields Limit fields received in response. E.g. fields: id, name or fields items (id, name), see more at [partial response](https://developers.callfire.com/docs.html#partial-response) page. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getWebhookResourceCall(String resource, String fields, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/webhooks/resources/{resource}"
            .replace("{" + "resource" + "}", localVarApiClient.escapeString(resource.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (fields != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("fields", fields));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getWebhookResourceValidateBeforeCall(String resource, String fields, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resource' is set
        if (resource == null) {
            throw new ApiException("Missing the required parameter 'resource' when calling getWebhookResource(Async)");
        }

        return getWebhookResourceCall(resource, fields, _callback);

    }

    /**
     * Find specific webhook resource
     * Returns information about supported events for a given webhook resource
     * @param resource A name of a webhook resource. Available resources include &#39;CccCampaign&#39;: [&#39;started&#39;, &#39;stopped&#39;, &#39;finished&#39;], &#39;CallBroadcast&#39;: [&#39;started&#39;, &#39;stopped&#39;, &#39;finished&#39;], &#39;TextBroadcast&#39;: [&#39;started&#39;, &#39;stopped&#39;, &#39;finished&#39;], &#39;OutboundCall&#39;: [&#39;finished&#39;], &#39;InboundCall&#39;: [&#39;finished&#39;], &#39;OutboundText&#39;: [&#39;finished&#39;], &#39;InboundText&#39;: [&#39;finished&#39;], &#39;ContactList&#39;: [&#39;validationFinished&#39;, &#39;validationFailed&#39;], &#39;MonthlyRenewal&#39;: [&#39;failed&#39;, &#39;finished&#39;], &#39;LowBalance&#39;: [&#39;failed&#39;, &#39;finished&#39;] (required)
     * @param fields Limit fields received in response. E.g. fields: id, name or fields items (id, name), see more at [partial response](https://developers.callfire.com/docs.html#partial-response) page. (optional)
     * @return WebhookResource
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public WebhookResource getWebhookResource(String resource, String fields) throws ApiException {
        ApiResponse<WebhookResource> localVarResp = getWebhookResourceWithHttpInfo(resource, fields);
        return localVarResp.getData();
    }

    /**
     * Find specific webhook resource
     * Returns information about supported events for a given webhook resource
     * @param resource A name of a webhook resource. Available resources include &#39;CccCampaign&#39;: [&#39;started&#39;, &#39;stopped&#39;, &#39;finished&#39;], &#39;CallBroadcast&#39;: [&#39;started&#39;, &#39;stopped&#39;, &#39;finished&#39;], &#39;TextBroadcast&#39;: [&#39;started&#39;, &#39;stopped&#39;, &#39;finished&#39;], &#39;OutboundCall&#39;: [&#39;finished&#39;], &#39;InboundCall&#39;: [&#39;finished&#39;], &#39;OutboundText&#39;: [&#39;finished&#39;], &#39;InboundText&#39;: [&#39;finished&#39;], &#39;ContactList&#39;: [&#39;validationFinished&#39;, &#39;validationFailed&#39;], &#39;MonthlyRenewal&#39;: [&#39;failed&#39;, &#39;finished&#39;], &#39;LowBalance&#39;: [&#39;failed&#39;, &#39;finished&#39;] (required)
     * @param fields Limit fields received in response. E.g. fields: id, name or fields items (id, name), see more at [partial response](https://developers.callfire.com/docs.html#partial-response) page. (optional)
     * @return ApiResponse&lt;WebhookResource&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<WebhookResource> getWebhookResourceWithHttpInfo(String resource, String fields) throws ApiException {
        okhttp3.Call localVarCall = getWebhookResourceValidateBeforeCall(resource, fields, null);
        Type localVarReturnType = new TypeToken<WebhookResource>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Find specific webhook resource (asynchronously)
     * Returns information about supported events for a given webhook resource
     * @param resource A name of a webhook resource. Available resources include &#39;CccCampaign&#39;: [&#39;started&#39;, &#39;stopped&#39;, &#39;finished&#39;], &#39;CallBroadcast&#39;: [&#39;started&#39;, &#39;stopped&#39;, &#39;finished&#39;], &#39;TextBroadcast&#39;: [&#39;started&#39;, &#39;stopped&#39;, &#39;finished&#39;], &#39;OutboundCall&#39;: [&#39;finished&#39;], &#39;InboundCall&#39;: [&#39;finished&#39;], &#39;OutboundText&#39;: [&#39;finished&#39;], &#39;InboundText&#39;: [&#39;finished&#39;], &#39;ContactList&#39;: [&#39;validationFinished&#39;, &#39;validationFailed&#39;], &#39;MonthlyRenewal&#39;: [&#39;failed&#39;, &#39;finished&#39;], &#39;LowBalance&#39;: [&#39;failed&#39;, &#39;finished&#39;] (required)
     * @param fields Limit fields received in response. E.g. fields: id, name or fields items (id, name), see more at [partial response](https://developers.callfire.com/docs.html#partial-response) page. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getWebhookResourceAsync(String resource, String fields, final ApiCallback<WebhookResource> _callback) throws ApiException {

        okhttp3.Call localVarCall = getWebhookResourceValidateBeforeCall(resource, fields, _callback);
        Type localVarReturnType = new TypeToken<WebhookResource>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateWebhook
     * @param id An id of a webhook (required)
     * @param webhook A webhook object (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateWebhookCall(Long id, Webhook webhook, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = webhook;

        // create path and map variables
        String localVarPath = "/webhooks/{id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateWebhookValidateBeforeCall(Long id, Webhook webhook, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling updateWebhook(Async)");
        }

        return updateWebhookCall(id, webhook, _callback);

    }

    /**
     * Update a webhook
     * Updates the information in existing webhook
     * @param id An id of a webhook (required)
     * @param webhook A webhook object (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public void updateWebhook(Long id, Webhook webhook) throws ApiException {
        updateWebhookWithHttpInfo(id, webhook);
    }

    /**
     * Update a webhook
     * Updates the information in existing webhook
     * @param id An id of a webhook (required)
     * @param webhook A webhook object (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> updateWebhookWithHttpInfo(Long id, Webhook webhook) throws ApiException {
        okhttp3.Call localVarCall = updateWebhookValidateBeforeCall(id, webhook, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Update a webhook (asynchronously)
     * Updates the information in existing webhook
     * @param id An id of a webhook (required)
     * @param webhook A webhook object (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateWebhookAsync(Long id, Webhook webhook, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateWebhookValidateBeforeCall(id, webhook, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
}
