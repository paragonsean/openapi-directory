/*
 * CallFire API Documentation
 * CallFire
 *
 * The version of the OpenAPI document: V2
 * Contact: support@callfire.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.GoogleAnalytics;
import org.openapitools.client.model.WeeklySchedule;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Call tracking configuration allows you track incoming calls, analyze, respond to customers using sms or voice replies. For more information see [call tracking page](https://www.callfire.com/products/call-tracking)
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T09:59:09.684594-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class CallTrackingConfig {
  public static final String SERIALIZED_NAME_FAILED_TRANSFER_SOUND_ID = "failedTransferSoundId";
  @SerializedName(SERIALIZED_NAME_FAILED_TRANSFER_SOUND_ID)
  private Long failedTransferSoundId;

  public static final String SERIALIZED_NAME_GOOGLE_ANALYTICS = "googleAnalytics";
  @SerializedName(SERIALIZED_NAME_GOOGLE_ANALYTICS)
  private GoogleAnalytics googleAnalytics;

  public static final String SERIALIZED_NAME_INTRO_SOUND_ID = "introSoundId";
  @SerializedName(SERIALIZED_NAME_INTRO_SOUND_ID)
  private Long introSoundId;

  public static final String SERIALIZED_NAME_RECORDED = "recorded";
  @SerializedName(SERIALIZED_NAME_RECORDED)
  private Boolean recorded;

  public static final String SERIALIZED_NAME_SCREEN = "screen";
  @SerializedName(SERIALIZED_NAME_SCREEN)
  private Boolean screen;

  public static final String SERIALIZED_NAME_TRANSFER_NUMBERS = "transferNumbers";
  @SerializedName(SERIALIZED_NAME_TRANSFER_NUMBERS)
  private List<String> transferNumbers = new ArrayList<>();

  public static final String SERIALIZED_NAME_VOICEMAIL = "voicemail";
  @SerializedName(SERIALIZED_NAME_VOICEMAIL)
  private Boolean voicemail;

  public static final String SERIALIZED_NAME_VOICEMAIL_SOUND_ID = "voicemailSoundId";
  @SerializedName(SERIALIZED_NAME_VOICEMAIL_SOUND_ID)
  private Long voicemailSoundId;

  public static final String SERIALIZED_NAME_WEEKLY_SCHEDULE = "weeklySchedule";
  @SerializedName(SERIALIZED_NAME_WEEKLY_SCHEDULE)
  private WeeklySchedule weeklySchedule;

  public static final String SERIALIZED_NAME_WHISPER_SOUND_ID = "whisperSoundId";
  @SerializedName(SERIALIZED_NAME_WHISPER_SOUND_ID)
  private Long whisperSoundId;

  public CallTrackingConfig() {
  }

  public CallTrackingConfig failedTransferSoundId(Long failedTransferSoundId) {
    this.failedTransferSoundId = failedTransferSoundId;
    return this;
  }

  /**
   * An id of sound file, played if caller can not be connected to transfer number for any reason
   * @return failedTransferSoundId
   */
  @javax.annotation.Nullable
  public Long getFailedTransferSoundId() {
    return failedTransferSoundId;
  }

  public void setFailedTransferSoundId(Long failedTransferSoundId) {
    this.failedTransferSoundId = failedTransferSoundId;
  }


  public CallTrackingConfig googleAnalytics(GoogleAnalytics googleAnalytics) {
    this.googleAnalytics = googleAnalytics;
    return this;
  }

  /**
   * Get googleAnalytics
   * @return googleAnalytics
   */
  @javax.annotation.Nullable
  public GoogleAnalytics getGoogleAnalytics() {
    return googleAnalytics;
  }

  public void setGoogleAnalytics(GoogleAnalytics googleAnalytics) {
    this.googleAnalytics = googleAnalytics;
  }


  public CallTrackingConfig introSoundId(Long introSoundId) {
    this.introSoundId = introSoundId;
    return this;
  }

  /**
   * An id of sound file, played if call is answered
   * @return introSoundId
   */
  @javax.annotation.Nullable
  public Long getIntroSoundId() {
    return introSoundId;
  }

  public void setIntroSoundId(Long introSoundId) {
    this.introSoundId = introSoundId;
  }


  public CallTrackingConfig recorded(Boolean recorded) {
    this.recorded = recorded;
    return this;
  }

  /**
   * Records all inbound calls
   * @return recorded
   */
  @javax.annotation.Nullable
  public Boolean getRecorded() {
    return recorded;
  }

  public void setRecorded(Boolean recorded) {
    this.recorded = recorded;
  }


  public CallTrackingConfig screen(Boolean screen) {
    this.screen = screen;
    return this;
  }

  /**
   * Screens the incoming calls
   * @return screen
   */
  @javax.annotation.Nullable
  public Boolean getScreen() {
    return screen;
  }

  public void setScreen(Boolean screen) {
    this.screen = screen;
  }


  public CallTrackingConfig transferNumbers(List<String> transferNumbers) {
    this.transferNumbers = transferNumbers;
    return this;
  }

  public CallTrackingConfig addTransferNumbersItem(String transferNumbersItem) {
    if (this.transferNumbers == null) {
      this.transferNumbers = new ArrayList<>();
    }
    this.transferNumbers.add(transferNumbersItem);
    return this;
  }

  /**
   * List of phone numbers in E.164 format (11-digit) are used for transfer. Example: 12132000384
   * @return transferNumbers
   */
  @javax.annotation.Nullable
  public List<String> getTransferNumbers() {
    return transferNumbers;
  }

  public void setTransferNumbers(List<String> transferNumbers) {
    this.transferNumbers = transferNumbers;
  }


  public CallTrackingConfig voicemail(Boolean voicemail) {
    this.voicemail = voicemail;
    return this;
  }

  /**
   * Enables voicemail if call is not transferred
   * @return voicemail
   */
  @javax.annotation.Nullable
  public Boolean getVoicemail() {
    return voicemail;
  }

  public void setVoicemail(Boolean voicemail) {
    this.voicemail = voicemail;
  }


  public CallTrackingConfig voicemailSoundId(Long voicemailSoundId) {
    this.voicemailSoundId = voicemailSoundId;
    return this;
  }

  /**
   * An id of sound file, played if voicemail is enabled and a call isn&#39;t transferred
   * @return voicemailSoundId
   */
  @javax.annotation.Nullable
  public Long getVoicemailSoundId() {
    return voicemailSoundId;
  }

  public void setVoicemailSoundId(Long voicemailSoundId) {
    this.voicemailSoundId = voicemailSoundId;
  }


  public CallTrackingConfig weeklySchedule(WeeklySchedule weeklySchedule) {
    this.weeklySchedule = weeklySchedule;
    return this;
  }

  /**
   * Get weeklySchedule
   * @return weeklySchedule
   */
  @javax.annotation.Nullable
  public WeeklySchedule getWeeklySchedule() {
    return weeklySchedule;
  }

  public void setWeeklySchedule(WeeklySchedule weeklySchedule) {
    this.weeklySchedule = weeklySchedule;
  }


  public CallTrackingConfig whisperSoundId(Long whisperSoundId) {
    this.whisperSoundId = whisperSoundId;
    return this;
  }

  /**
   * An id of sound file, played if call is screened
   * @return whisperSoundId
   */
  @javax.annotation.Nullable
  public Long getWhisperSoundId() {
    return whisperSoundId;
  }

  public void setWhisperSoundId(Long whisperSoundId) {
    this.whisperSoundId = whisperSoundId;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CallTrackingConfig callTrackingConfig = (CallTrackingConfig) o;
    return Objects.equals(this.failedTransferSoundId, callTrackingConfig.failedTransferSoundId) &&
        Objects.equals(this.googleAnalytics, callTrackingConfig.googleAnalytics) &&
        Objects.equals(this.introSoundId, callTrackingConfig.introSoundId) &&
        Objects.equals(this.recorded, callTrackingConfig.recorded) &&
        Objects.equals(this.screen, callTrackingConfig.screen) &&
        Objects.equals(this.transferNumbers, callTrackingConfig.transferNumbers) &&
        Objects.equals(this.voicemail, callTrackingConfig.voicemail) &&
        Objects.equals(this.voicemailSoundId, callTrackingConfig.voicemailSoundId) &&
        Objects.equals(this.weeklySchedule, callTrackingConfig.weeklySchedule) &&
        Objects.equals(this.whisperSoundId, callTrackingConfig.whisperSoundId);
  }

  @Override
  public int hashCode() {
    return Objects.hash(failedTransferSoundId, googleAnalytics, introSoundId, recorded, screen, transferNumbers, voicemail, voicemailSoundId, weeklySchedule, whisperSoundId);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CallTrackingConfig {\n");
    sb.append("    failedTransferSoundId: ").append(toIndentedString(failedTransferSoundId)).append("\n");
    sb.append("    googleAnalytics: ").append(toIndentedString(googleAnalytics)).append("\n");
    sb.append("    introSoundId: ").append(toIndentedString(introSoundId)).append("\n");
    sb.append("    recorded: ").append(toIndentedString(recorded)).append("\n");
    sb.append("    screen: ").append(toIndentedString(screen)).append("\n");
    sb.append("    transferNumbers: ").append(toIndentedString(transferNumbers)).append("\n");
    sb.append("    voicemail: ").append(toIndentedString(voicemail)).append("\n");
    sb.append("    voicemailSoundId: ").append(toIndentedString(voicemailSoundId)).append("\n");
    sb.append("    weeklySchedule: ").append(toIndentedString(weeklySchedule)).append("\n");
    sb.append("    whisperSoundId: ").append(toIndentedString(whisperSoundId)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("failedTransferSoundId");
    openapiFields.add("googleAnalytics");
    openapiFields.add("introSoundId");
    openapiFields.add("recorded");
    openapiFields.add("screen");
    openapiFields.add("transferNumbers");
    openapiFields.add("voicemail");
    openapiFields.add("voicemailSoundId");
    openapiFields.add("weeklySchedule");
    openapiFields.add("whisperSoundId");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to CallTrackingConfig
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!CallTrackingConfig.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CallTrackingConfig is not found in the empty JSON string", CallTrackingConfig.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!CallTrackingConfig.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CallTrackingConfig` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `googleAnalytics`
      if (jsonObj.get("googleAnalytics") != null && !jsonObj.get("googleAnalytics").isJsonNull()) {
        GoogleAnalytics.validateJsonElement(jsonObj.get("googleAnalytics"));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("transferNumbers") != null && !jsonObj.get("transferNumbers").isJsonNull() && !jsonObj.get("transferNumbers").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `transferNumbers` to be an array in the JSON string but got `%s`", jsonObj.get("transferNumbers").toString()));
      }
      // validate the optional field `weeklySchedule`
      if (jsonObj.get("weeklySchedule") != null && !jsonObj.get("weeklySchedule").isJsonNull()) {
        WeeklySchedule.validateJsonElement(jsonObj.get("weeklySchedule"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CallTrackingConfig.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CallTrackingConfig' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CallTrackingConfig> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CallTrackingConfig.class));

       return (TypeAdapter<T>) new TypeAdapter<CallTrackingConfig>() {
           @Override
           public void write(JsonWriter out, CallTrackingConfig value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CallTrackingConfig read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of CallTrackingConfig given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of CallTrackingConfig
   * @throws IOException if the JSON string is invalid with respect to CallTrackingConfig
   */
  public static CallTrackingConfig fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CallTrackingConfig.class);
  }

  /**
   * Convert an instance of CallTrackingConfig to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

