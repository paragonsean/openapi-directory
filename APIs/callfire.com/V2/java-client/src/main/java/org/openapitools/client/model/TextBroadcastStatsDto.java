/*
 * CallFire API Documentation
 * CallFire
 *
 * The version of the OpenAPI document: V2
 * Contact: support@callfire.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.math.BigDecimal;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * ~
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T09:59:09.684594-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class TextBroadcastStatsDto {
  public static final String SERIALIZED_NAME_BILLED_AMOUNT = "billedAmount";
  @SerializedName(SERIALIZED_NAME_BILLED_AMOUNT)
  private BigDecimal billedAmount;

  public static final String SERIALIZED_NAME_DO_NOT_TEXT_COUNT = "doNotTextCount";
  @SerializedName(SERIALIZED_NAME_DO_NOT_TEXT_COUNT)
  private Integer doNotTextCount;

  public static final String SERIALIZED_NAME_ERROR_COUNT = "errorCount";
  @SerializedName(SERIALIZED_NAME_ERROR_COUNT)
  private Integer errorCount;

  public static final String SERIALIZED_NAME_RECIEVED_COUNT = "recievedCount";
  @SerializedName(SERIALIZED_NAME_RECIEVED_COUNT)
  private Integer recievedCount;

  public static final String SERIALIZED_NAME_REMAINING_OUTBOUND_COUNT = "remainingOutboundCount";
  @SerializedName(SERIALIZED_NAME_REMAINING_OUTBOUND_COUNT)
  private Integer remainingOutboundCount;

  public static final String SERIALIZED_NAME_SENT_COUNT = "sentCount";
  @SerializedName(SERIALIZED_NAME_SENT_COUNT)
  private Integer sentCount;

  public static final String SERIALIZED_NAME_TOO_BIG_COUNT = "tooBigCount";
  @SerializedName(SERIALIZED_NAME_TOO_BIG_COUNT)
  private Integer tooBigCount;

  public static final String SERIALIZED_NAME_TOTAL_OUTBOUND_COUNT = "totalOutboundCount";
  @SerializedName(SERIALIZED_NAME_TOTAL_OUTBOUND_COUNT)
  private Integer totalOutboundCount;

  public static final String SERIALIZED_NAME_UNSENT_COUNT = "unsentCount";
  @SerializedName(SERIALIZED_NAME_UNSENT_COUNT)
  private Integer unsentCount;

  public TextBroadcastStatsDto() {
  }

  public TextBroadcastStatsDto billedAmount(BigDecimal billedAmount) {
    this.billedAmount = billedAmount;
    return this;
  }

  /**
   * ~
   * @return billedAmount
   */
  @javax.annotation.Nullable
  public BigDecimal getBilledAmount() {
    return billedAmount;
  }

  public void setBilledAmount(BigDecimal billedAmount) {
    this.billedAmount = billedAmount;
  }


  public TextBroadcastStatsDto doNotTextCount(Integer doNotTextCount) {
    this.doNotTextCount = doNotTextCount;
    return this;
  }

  /**
   * ~
   * @return doNotTextCount
   */
  @javax.annotation.Nullable
  public Integer getDoNotTextCount() {
    return doNotTextCount;
  }

  public void setDoNotTextCount(Integer doNotTextCount) {
    this.doNotTextCount = doNotTextCount;
  }


  public TextBroadcastStatsDto errorCount(Integer errorCount) {
    this.errorCount = errorCount;
    return this;
  }

  /**
   * ~
   * @return errorCount
   */
  @javax.annotation.Nullable
  public Integer getErrorCount() {
    return errorCount;
  }

  public void setErrorCount(Integer errorCount) {
    this.errorCount = errorCount;
  }


  public TextBroadcastStatsDto recievedCount(Integer recievedCount) {
    this.recievedCount = recievedCount;
    return this;
  }

  /**
   * ~
   * @return recievedCount
   */
  @javax.annotation.Nullable
  public Integer getRecievedCount() {
    return recievedCount;
  }

  public void setRecievedCount(Integer recievedCount) {
    this.recievedCount = recievedCount;
  }


  public TextBroadcastStatsDto remainingOutboundCount(Integer remainingOutboundCount) {
    this.remainingOutboundCount = remainingOutboundCount;
    return this;
  }

  /**
   * ~
   * @return remainingOutboundCount
   */
  @javax.annotation.Nullable
  public Integer getRemainingOutboundCount() {
    return remainingOutboundCount;
  }

  public void setRemainingOutboundCount(Integer remainingOutboundCount) {
    this.remainingOutboundCount = remainingOutboundCount;
  }


  public TextBroadcastStatsDto sentCount(Integer sentCount) {
    this.sentCount = sentCount;
    return this;
  }

  /**
   * ~
   * @return sentCount
   */
  @javax.annotation.Nullable
  public Integer getSentCount() {
    return sentCount;
  }

  public void setSentCount(Integer sentCount) {
    this.sentCount = sentCount;
  }


  public TextBroadcastStatsDto tooBigCount(Integer tooBigCount) {
    this.tooBigCount = tooBigCount;
    return this;
  }

  /**
   * ~
   * @return tooBigCount
   */
  @javax.annotation.Nullable
  public Integer getTooBigCount() {
    return tooBigCount;
  }

  public void setTooBigCount(Integer tooBigCount) {
    this.tooBigCount = tooBigCount;
  }


  public TextBroadcastStatsDto totalOutboundCount(Integer totalOutboundCount) {
    this.totalOutboundCount = totalOutboundCount;
    return this;
  }

  /**
   * ~
   * @return totalOutboundCount
   */
  @javax.annotation.Nullable
  public Integer getTotalOutboundCount() {
    return totalOutboundCount;
  }

  public void setTotalOutboundCount(Integer totalOutboundCount) {
    this.totalOutboundCount = totalOutboundCount;
  }


  public TextBroadcastStatsDto unsentCount(Integer unsentCount) {
    this.unsentCount = unsentCount;
    return this;
  }

  /**
   * ~
   * @return unsentCount
   */
  @javax.annotation.Nullable
  public Integer getUnsentCount() {
    return unsentCount;
  }

  public void setUnsentCount(Integer unsentCount) {
    this.unsentCount = unsentCount;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    TextBroadcastStatsDto textBroadcastStatsDto = (TextBroadcastStatsDto) o;
    return Objects.equals(this.billedAmount, textBroadcastStatsDto.billedAmount) &&
        Objects.equals(this.doNotTextCount, textBroadcastStatsDto.doNotTextCount) &&
        Objects.equals(this.errorCount, textBroadcastStatsDto.errorCount) &&
        Objects.equals(this.recievedCount, textBroadcastStatsDto.recievedCount) &&
        Objects.equals(this.remainingOutboundCount, textBroadcastStatsDto.remainingOutboundCount) &&
        Objects.equals(this.sentCount, textBroadcastStatsDto.sentCount) &&
        Objects.equals(this.tooBigCount, textBroadcastStatsDto.tooBigCount) &&
        Objects.equals(this.totalOutboundCount, textBroadcastStatsDto.totalOutboundCount) &&
        Objects.equals(this.unsentCount, textBroadcastStatsDto.unsentCount);
  }

  @Override
  public int hashCode() {
    return Objects.hash(billedAmount, doNotTextCount, errorCount, recievedCount, remainingOutboundCount, sentCount, tooBigCount, totalOutboundCount, unsentCount);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class TextBroadcastStatsDto {\n");
    sb.append("    billedAmount: ").append(toIndentedString(billedAmount)).append("\n");
    sb.append("    doNotTextCount: ").append(toIndentedString(doNotTextCount)).append("\n");
    sb.append("    errorCount: ").append(toIndentedString(errorCount)).append("\n");
    sb.append("    recievedCount: ").append(toIndentedString(recievedCount)).append("\n");
    sb.append("    remainingOutboundCount: ").append(toIndentedString(remainingOutboundCount)).append("\n");
    sb.append("    sentCount: ").append(toIndentedString(sentCount)).append("\n");
    sb.append("    tooBigCount: ").append(toIndentedString(tooBigCount)).append("\n");
    sb.append("    totalOutboundCount: ").append(toIndentedString(totalOutboundCount)).append("\n");
    sb.append("    unsentCount: ").append(toIndentedString(unsentCount)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("billedAmount");
    openapiFields.add("doNotTextCount");
    openapiFields.add("errorCount");
    openapiFields.add("recievedCount");
    openapiFields.add("remainingOutboundCount");
    openapiFields.add("sentCount");
    openapiFields.add("tooBigCount");
    openapiFields.add("totalOutboundCount");
    openapiFields.add("unsentCount");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to TextBroadcastStatsDto
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!TextBroadcastStatsDto.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in TextBroadcastStatsDto is not found in the empty JSON string", TextBroadcastStatsDto.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!TextBroadcastStatsDto.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `TextBroadcastStatsDto` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!TextBroadcastStatsDto.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'TextBroadcastStatsDto' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<TextBroadcastStatsDto> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(TextBroadcastStatsDto.class));

       return (TypeAdapter<T>) new TypeAdapter<TextBroadcastStatsDto>() {
           @Override
           public void write(JsonWriter out, TextBroadcastStatsDto value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public TextBroadcastStatsDto read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of TextBroadcastStatsDto given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of TextBroadcastStatsDto
   * @throws IOException if the JSON string is invalid with respect to TextBroadcastStatsDto
   */
  public static TextBroadcastStatsDto fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, TextBroadcastStatsDto.class);
  }

  /**
   * Convert an instance of TextBroadcastStatsDto to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

