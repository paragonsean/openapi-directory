/*
 * CallFire API Documentation
 * CallFire
 *
 * The version of the OpenAPI document: V2
 * Contact: support@callfire.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;
import org.openapitools.client.model.Duration;
import org.openapitools.client.model.ZoneOffset;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * ~
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T09:59:09.684594-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ZoneOffsetTransition {
  public static final String SERIALIZED_NAME_DATE_TIME_AFTER = "dateTimeAfter";
  @SerializedName(SERIALIZED_NAME_DATE_TIME_AFTER)
  private OffsetDateTime dateTimeAfter;

  public static final String SERIALIZED_NAME_DATE_TIME_BEFORE = "dateTimeBefore";
  @SerializedName(SERIALIZED_NAME_DATE_TIME_BEFORE)
  private OffsetDateTime dateTimeBefore;

  public static final String SERIALIZED_NAME_DURATION = "duration";
  @SerializedName(SERIALIZED_NAME_DURATION)
  private Duration duration;

  public static final String SERIALIZED_NAME_GAP = "gap";
  @SerializedName(SERIALIZED_NAME_GAP)
  private Boolean gap;

  public static final String SERIALIZED_NAME_INSTANT = "instant";
  @SerializedName(SERIALIZED_NAME_INSTANT)
  private Long instant;

  public static final String SERIALIZED_NAME_OFFSET_AFTER = "offsetAfter";
  @SerializedName(SERIALIZED_NAME_OFFSET_AFTER)
  private ZoneOffset offsetAfter;

  public static final String SERIALIZED_NAME_OFFSET_BEFORE = "offsetBefore";
  @SerializedName(SERIALIZED_NAME_OFFSET_BEFORE)
  private ZoneOffset offsetBefore;

  public static final String SERIALIZED_NAME_OVERLAP = "overlap";
  @SerializedName(SERIALIZED_NAME_OVERLAP)
  private Boolean overlap;

  public ZoneOffsetTransition() {
  }

  public ZoneOffsetTransition dateTimeAfter(OffsetDateTime dateTimeAfter) {
    this.dateTimeAfter = dateTimeAfter;
    return this;
  }

  /**
   * ~
   * @return dateTimeAfter
   */
  @javax.annotation.Nullable
  public OffsetDateTime getDateTimeAfter() {
    return dateTimeAfter;
  }

  public void setDateTimeAfter(OffsetDateTime dateTimeAfter) {
    this.dateTimeAfter = dateTimeAfter;
  }


  public ZoneOffsetTransition dateTimeBefore(OffsetDateTime dateTimeBefore) {
    this.dateTimeBefore = dateTimeBefore;
    return this;
  }

  /**
   * ~
   * @return dateTimeBefore
   */
  @javax.annotation.Nullable
  public OffsetDateTime getDateTimeBefore() {
    return dateTimeBefore;
  }

  public void setDateTimeBefore(OffsetDateTime dateTimeBefore) {
    this.dateTimeBefore = dateTimeBefore;
  }


  public ZoneOffsetTransition duration(Duration duration) {
    this.duration = duration;
    return this;
  }

  /**
   * Get duration
   * @return duration
   */
  @javax.annotation.Nullable
  public Duration getDuration() {
    return duration;
  }

  public void setDuration(Duration duration) {
    this.duration = duration;
  }


  public ZoneOffsetTransition gap(Boolean gap) {
    this.gap = gap;
    return this;
  }

  /**
   * ~
   * @return gap
   */
  @javax.annotation.Nullable
  public Boolean getGap() {
    return gap;
  }

  public void setGap(Boolean gap) {
    this.gap = gap;
  }


  public ZoneOffsetTransition instant(Long instant) {
    this.instant = instant;
    return this;
  }

  /**
   * ~
   * @return instant
   */
  @javax.annotation.Nullable
  public Long getInstant() {
    return instant;
  }

  public void setInstant(Long instant) {
    this.instant = instant;
  }


  public ZoneOffsetTransition offsetAfter(ZoneOffset offsetAfter) {
    this.offsetAfter = offsetAfter;
    return this;
  }

  /**
   * Get offsetAfter
   * @return offsetAfter
   */
  @javax.annotation.Nullable
  public ZoneOffset getOffsetAfter() {
    return offsetAfter;
  }

  public void setOffsetAfter(ZoneOffset offsetAfter) {
    this.offsetAfter = offsetAfter;
  }


  public ZoneOffsetTransition offsetBefore(ZoneOffset offsetBefore) {
    this.offsetBefore = offsetBefore;
    return this;
  }

  /**
   * Get offsetBefore
   * @return offsetBefore
   */
  @javax.annotation.Nullable
  public ZoneOffset getOffsetBefore() {
    return offsetBefore;
  }

  public void setOffsetBefore(ZoneOffset offsetBefore) {
    this.offsetBefore = offsetBefore;
  }


  public ZoneOffsetTransition overlap(Boolean overlap) {
    this.overlap = overlap;
    return this;
  }

  /**
   * ~
   * @return overlap
   */
  @javax.annotation.Nullable
  public Boolean getOverlap() {
    return overlap;
  }

  public void setOverlap(Boolean overlap) {
    this.overlap = overlap;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ZoneOffsetTransition zoneOffsetTransition = (ZoneOffsetTransition) o;
    return Objects.equals(this.dateTimeAfter, zoneOffsetTransition.dateTimeAfter) &&
        Objects.equals(this.dateTimeBefore, zoneOffsetTransition.dateTimeBefore) &&
        Objects.equals(this.duration, zoneOffsetTransition.duration) &&
        Objects.equals(this.gap, zoneOffsetTransition.gap) &&
        Objects.equals(this.instant, zoneOffsetTransition.instant) &&
        Objects.equals(this.offsetAfter, zoneOffsetTransition.offsetAfter) &&
        Objects.equals(this.offsetBefore, zoneOffsetTransition.offsetBefore) &&
        Objects.equals(this.overlap, zoneOffsetTransition.overlap);
  }

  @Override
  public int hashCode() {
    return Objects.hash(dateTimeAfter, dateTimeBefore, duration, gap, instant, offsetAfter, offsetBefore, overlap);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ZoneOffsetTransition {\n");
    sb.append("    dateTimeAfter: ").append(toIndentedString(dateTimeAfter)).append("\n");
    sb.append("    dateTimeBefore: ").append(toIndentedString(dateTimeBefore)).append("\n");
    sb.append("    duration: ").append(toIndentedString(duration)).append("\n");
    sb.append("    gap: ").append(toIndentedString(gap)).append("\n");
    sb.append("    instant: ").append(toIndentedString(instant)).append("\n");
    sb.append("    offsetAfter: ").append(toIndentedString(offsetAfter)).append("\n");
    sb.append("    offsetBefore: ").append(toIndentedString(offsetBefore)).append("\n");
    sb.append("    overlap: ").append(toIndentedString(overlap)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("dateTimeAfter");
    openapiFields.add("dateTimeBefore");
    openapiFields.add("duration");
    openapiFields.add("gap");
    openapiFields.add("instant");
    openapiFields.add("offsetAfter");
    openapiFields.add("offsetBefore");
    openapiFields.add("overlap");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ZoneOffsetTransition
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ZoneOffsetTransition.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ZoneOffsetTransition is not found in the empty JSON string", ZoneOffsetTransition.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ZoneOffsetTransition.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ZoneOffsetTransition` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `duration`
      if (jsonObj.get("duration") != null && !jsonObj.get("duration").isJsonNull()) {
        Duration.validateJsonElement(jsonObj.get("duration"));
      }
      // validate the optional field `offsetAfter`
      if (jsonObj.get("offsetAfter") != null && !jsonObj.get("offsetAfter").isJsonNull()) {
        ZoneOffset.validateJsonElement(jsonObj.get("offsetAfter"));
      }
      // validate the optional field `offsetBefore`
      if (jsonObj.get("offsetBefore") != null && !jsonObj.get("offsetBefore").isJsonNull()) {
        ZoneOffset.validateJsonElement(jsonObj.get("offsetBefore"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ZoneOffsetTransition.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ZoneOffsetTransition' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ZoneOffsetTransition> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ZoneOffsetTransition.class));

       return (TypeAdapter<T>) new TypeAdapter<ZoneOffsetTransition>() {
           @Override
           public void write(JsonWriter out, ZoneOffsetTransition value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ZoneOffsetTransition read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ZoneOffsetTransition given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ZoneOffsetTransition
   * @throws IOException if the JSON string is invalid with respect to ZoneOffsetTransition
   */
  public static ZoneOffsetTransition fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ZoneOffsetTransition.class);
  }

  /**
   * Convert an instance of ZoneOffsetTransition to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

