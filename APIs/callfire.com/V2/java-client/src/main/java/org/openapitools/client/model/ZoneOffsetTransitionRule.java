/*
 * CallFire API Documentation
 * CallFire
 *
 * The version of the OpenAPI document: V2
 * Contact: support@callfire.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.ModelLocalTime;
import org.openapitools.client.model.ZoneOffset;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * ~
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T09:59:09.684594-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ZoneOffsetTransitionRule {
  public static final String SERIALIZED_NAME_DAY_OF_MONTH_INDICATOR = "dayOfMonthIndicator";
  @SerializedName(SERIALIZED_NAME_DAY_OF_MONTH_INDICATOR)
  private Integer dayOfMonthIndicator;

  /**
   * ~
   */
  @JsonAdapter(DayOfWeekEnum.Adapter.class)
  public enum DayOfWeekEnum {
    MONDAY("MONDAY"),
    
    TUESDAY("TUESDAY"),
    
    WEDNESDAY("WEDNESDAY"),
    
    THURSDAY("THURSDAY"),
    
    FRIDAY("FRIDAY"),
    
    SATURDAY("SATURDAY"),
    
    SUNDAY("SUNDAY");

    private String value;

    DayOfWeekEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static DayOfWeekEnum fromValue(String value) {
      for (DayOfWeekEnum b : DayOfWeekEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<DayOfWeekEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final DayOfWeekEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public DayOfWeekEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return DayOfWeekEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      DayOfWeekEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_DAY_OF_WEEK = "dayOfWeek";
  @SerializedName(SERIALIZED_NAME_DAY_OF_WEEK)
  private DayOfWeekEnum dayOfWeek;

  public static final String SERIALIZED_NAME_LOCAL_TIME = "localTime";
  @SerializedName(SERIALIZED_NAME_LOCAL_TIME)
  private ModelLocalTime _localTime;

  public static final String SERIALIZED_NAME_MIDNIGHT_END_OF_DAY = "midnightEndOfDay";
  @SerializedName(SERIALIZED_NAME_MIDNIGHT_END_OF_DAY)
  private Boolean midnightEndOfDay;

  /**
   * ~
   */
  @JsonAdapter(MonthEnum.Adapter.class)
  public enum MonthEnum {
    JANUARY("JANUARY"),
    
    FEBRUARY("FEBRUARY"),
    
    MARCH("MARCH"),
    
    APRIL("APRIL"),
    
    MAY("MAY"),
    
    JUNE("JUNE"),
    
    JULY("JULY"),
    
    AUGUST("AUGUST"),
    
    SEPTEMBER("SEPTEMBER"),
    
    OCTOBER("OCTOBER"),
    
    NOVEMBER("NOVEMBER"),
    
    DECEMBER("DECEMBER");

    private String value;

    MonthEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static MonthEnum fromValue(String value) {
      for (MonthEnum b : MonthEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<MonthEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final MonthEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public MonthEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return MonthEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      MonthEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_MONTH = "month";
  @SerializedName(SERIALIZED_NAME_MONTH)
  private MonthEnum month;

  public static final String SERIALIZED_NAME_OFFSET_AFTER = "offsetAfter";
  @SerializedName(SERIALIZED_NAME_OFFSET_AFTER)
  private ZoneOffset offsetAfter;

  public static final String SERIALIZED_NAME_OFFSET_BEFORE = "offsetBefore";
  @SerializedName(SERIALIZED_NAME_OFFSET_BEFORE)
  private ZoneOffset offsetBefore;

  public static final String SERIALIZED_NAME_STANDARD_OFFSET = "standardOffset";
  @SerializedName(SERIALIZED_NAME_STANDARD_OFFSET)
  private ZoneOffset standardOffset;

  /**
   * ~
   */
  @JsonAdapter(TimeDefinitionEnum.Adapter.class)
  public enum TimeDefinitionEnum {
    UTC("UTC"),
    
    WALL("WALL"),
    
    STANDARD("STANDARD");

    private String value;

    TimeDefinitionEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static TimeDefinitionEnum fromValue(String value) {
      for (TimeDefinitionEnum b : TimeDefinitionEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<TimeDefinitionEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final TimeDefinitionEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public TimeDefinitionEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return TimeDefinitionEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      TimeDefinitionEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_TIME_DEFINITION = "timeDefinition";
  @SerializedName(SERIALIZED_NAME_TIME_DEFINITION)
  private TimeDefinitionEnum timeDefinition;

  public ZoneOffsetTransitionRule() {
  }

  public ZoneOffsetTransitionRule dayOfMonthIndicator(Integer dayOfMonthIndicator) {
    this.dayOfMonthIndicator = dayOfMonthIndicator;
    return this;
  }

  /**
   * ~
   * @return dayOfMonthIndicator
   */
  @javax.annotation.Nullable
  public Integer getDayOfMonthIndicator() {
    return dayOfMonthIndicator;
  }

  public void setDayOfMonthIndicator(Integer dayOfMonthIndicator) {
    this.dayOfMonthIndicator = dayOfMonthIndicator;
  }


  public ZoneOffsetTransitionRule dayOfWeek(DayOfWeekEnum dayOfWeek) {
    this.dayOfWeek = dayOfWeek;
    return this;
  }

  /**
   * ~
   * @return dayOfWeek
   */
  @javax.annotation.Nullable
  public DayOfWeekEnum getDayOfWeek() {
    return dayOfWeek;
  }

  public void setDayOfWeek(DayOfWeekEnum dayOfWeek) {
    this.dayOfWeek = dayOfWeek;
  }


  public ZoneOffsetTransitionRule _localTime(ModelLocalTime _localTime) {
    this._localTime = _localTime;
    return this;
  }

  /**
   * Get _localTime
   * @return _localTime
   */
  @javax.annotation.Nullable
  public ModelLocalTime getLocalTime() {
    return _localTime;
  }

  public void setLocalTime(ModelLocalTime _localTime) {
    this._localTime = _localTime;
  }


  public ZoneOffsetTransitionRule midnightEndOfDay(Boolean midnightEndOfDay) {
    this.midnightEndOfDay = midnightEndOfDay;
    return this;
  }

  /**
   * ~
   * @return midnightEndOfDay
   */
  @javax.annotation.Nullable
  public Boolean getMidnightEndOfDay() {
    return midnightEndOfDay;
  }

  public void setMidnightEndOfDay(Boolean midnightEndOfDay) {
    this.midnightEndOfDay = midnightEndOfDay;
  }


  public ZoneOffsetTransitionRule month(MonthEnum month) {
    this.month = month;
    return this;
  }

  /**
   * ~
   * @return month
   */
  @javax.annotation.Nullable
  public MonthEnum getMonth() {
    return month;
  }

  public void setMonth(MonthEnum month) {
    this.month = month;
  }


  public ZoneOffsetTransitionRule offsetAfter(ZoneOffset offsetAfter) {
    this.offsetAfter = offsetAfter;
    return this;
  }

  /**
   * Get offsetAfter
   * @return offsetAfter
   */
  @javax.annotation.Nullable
  public ZoneOffset getOffsetAfter() {
    return offsetAfter;
  }

  public void setOffsetAfter(ZoneOffset offsetAfter) {
    this.offsetAfter = offsetAfter;
  }


  public ZoneOffsetTransitionRule offsetBefore(ZoneOffset offsetBefore) {
    this.offsetBefore = offsetBefore;
    return this;
  }

  /**
   * Get offsetBefore
   * @return offsetBefore
   */
  @javax.annotation.Nullable
  public ZoneOffset getOffsetBefore() {
    return offsetBefore;
  }

  public void setOffsetBefore(ZoneOffset offsetBefore) {
    this.offsetBefore = offsetBefore;
  }


  public ZoneOffsetTransitionRule standardOffset(ZoneOffset standardOffset) {
    this.standardOffset = standardOffset;
    return this;
  }

  /**
   * Get standardOffset
   * @return standardOffset
   */
  @javax.annotation.Nullable
  public ZoneOffset getStandardOffset() {
    return standardOffset;
  }

  public void setStandardOffset(ZoneOffset standardOffset) {
    this.standardOffset = standardOffset;
  }


  public ZoneOffsetTransitionRule timeDefinition(TimeDefinitionEnum timeDefinition) {
    this.timeDefinition = timeDefinition;
    return this;
  }

  /**
   * ~
   * @return timeDefinition
   */
  @javax.annotation.Nullable
  public TimeDefinitionEnum getTimeDefinition() {
    return timeDefinition;
  }

  public void setTimeDefinition(TimeDefinitionEnum timeDefinition) {
    this.timeDefinition = timeDefinition;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ZoneOffsetTransitionRule zoneOffsetTransitionRule = (ZoneOffsetTransitionRule) o;
    return Objects.equals(this.dayOfMonthIndicator, zoneOffsetTransitionRule.dayOfMonthIndicator) &&
        Objects.equals(this.dayOfWeek, zoneOffsetTransitionRule.dayOfWeek) &&
        Objects.equals(this._localTime, zoneOffsetTransitionRule._localTime) &&
        Objects.equals(this.midnightEndOfDay, zoneOffsetTransitionRule.midnightEndOfDay) &&
        Objects.equals(this.month, zoneOffsetTransitionRule.month) &&
        Objects.equals(this.offsetAfter, zoneOffsetTransitionRule.offsetAfter) &&
        Objects.equals(this.offsetBefore, zoneOffsetTransitionRule.offsetBefore) &&
        Objects.equals(this.standardOffset, zoneOffsetTransitionRule.standardOffset) &&
        Objects.equals(this.timeDefinition, zoneOffsetTransitionRule.timeDefinition);
  }

  @Override
  public int hashCode() {
    return Objects.hash(dayOfMonthIndicator, dayOfWeek, _localTime, midnightEndOfDay, month, offsetAfter, offsetBefore, standardOffset, timeDefinition);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ZoneOffsetTransitionRule {\n");
    sb.append("    dayOfMonthIndicator: ").append(toIndentedString(dayOfMonthIndicator)).append("\n");
    sb.append("    dayOfWeek: ").append(toIndentedString(dayOfWeek)).append("\n");
    sb.append("    _localTime: ").append(toIndentedString(_localTime)).append("\n");
    sb.append("    midnightEndOfDay: ").append(toIndentedString(midnightEndOfDay)).append("\n");
    sb.append("    month: ").append(toIndentedString(month)).append("\n");
    sb.append("    offsetAfter: ").append(toIndentedString(offsetAfter)).append("\n");
    sb.append("    offsetBefore: ").append(toIndentedString(offsetBefore)).append("\n");
    sb.append("    standardOffset: ").append(toIndentedString(standardOffset)).append("\n");
    sb.append("    timeDefinition: ").append(toIndentedString(timeDefinition)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("dayOfMonthIndicator");
    openapiFields.add("dayOfWeek");
    openapiFields.add("localTime");
    openapiFields.add("midnightEndOfDay");
    openapiFields.add("month");
    openapiFields.add("offsetAfter");
    openapiFields.add("offsetBefore");
    openapiFields.add("standardOffset");
    openapiFields.add("timeDefinition");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ZoneOffsetTransitionRule
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ZoneOffsetTransitionRule.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ZoneOffsetTransitionRule is not found in the empty JSON string", ZoneOffsetTransitionRule.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ZoneOffsetTransitionRule.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ZoneOffsetTransitionRule` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("dayOfWeek") != null && !jsonObj.get("dayOfWeek").isJsonNull()) && !jsonObj.get("dayOfWeek").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `dayOfWeek` to be a primitive type in the JSON string but got `%s`", jsonObj.get("dayOfWeek").toString()));
      }
      // validate the optional field `dayOfWeek`
      if (jsonObj.get("dayOfWeek") != null && !jsonObj.get("dayOfWeek").isJsonNull()) {
        DayOfWeekEnum.validateJsonElement(jsonObj.get("dayOfWeek"));
      }
      // validate the optional field `localTime`
      if (jsonObj.get("localTime") != null && !jsonObj.get("localTime").isJsonNull()) {
        ModelLocalTime.validateJsonElement(jsonObj.get("localTime"));
      }
      if ((jsonObj.get("month") != null && !jsonObj.get("month").isJsonNull()) && !jsonObj.get("month").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `month` to be a primitive type in the JSON string but got `%s`", jsonObj.get("month").toString()));
      }
      // validate the optional field `month`
      if (jsonObj.get("month") != null && !jsonObj.get("month").isJsonNull()) {
        MonthEnum.validateJsonElement(jsonObj.get("month"));
      }
      // validate the optional field `offsetAfter`
      if (jsonObj.get("offsetAfter") != null && !jsonObj.get("offsetAfter").isJsonNull()) {
        ZoneOffset.validateJsonElement(jsonObj.get("offsetAfter"));
      }
      // validate the optional field `offsetBefore`
      if (jsonObj.get("offsetBefore") != null && !jsonObj.get("offsetBefore").isJsonNull()) {
        ZoneOffset.validateJsonElement(jsonObj.get("offsetBefore"));
      }
      // validate the optional field `standardOffset`
      if (jsonObj.get("standardOffset") != null && !jsonObj.get("standardOffset").isJsonNull()) {
        ZoneOffset.validateJsonElement(jsonObj.get("standardOffset"));
      }
      if ((jsonObj.get("timeDefinition") != null && !jsonObj.get("timeDefinition").isJsonNull()) && !jsonObj.get("timeDefinition").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `timeDefinition` to be a primitive type in the JSON string but got `%s`", jsonObj.get("timeDefinition").toString()));
      }
      // validate the optional field `timeDefinition`
      if (jsonObj.get("timeDefinition") != null && !jsonObj.get("timeDefinition").isJsonNull()) {
        TimeDefinitionEnum.validateJsonElement(jsonObj.get("timeDefinition"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ZoneOffsetTransitionRule.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ZoneOffsetTransitionRule' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ZoneOffsetTransitionRule> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ZoneOffsetTransitionRule.class));

       return (TypeAdapter<T>) new TypeAdapter<ZoneOffsetTransitionRule>() {
           @Override
           public void write(JsonWriter out, ZoneOffsetTransitionRule value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ZoneOffsetTransitionRule read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ZoneOffsetTransitionRule given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ZoneOffsetTransitionRule
   * @throws IOException if the JSON string is invalid with respect to ZoneOffsetTransitionRule
   */
  public static ZoneOffsetTransitionRule fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ZoneOffsetTransitionRule.class);
  }

  /**
   * Convert an instance of ZoneOffsetTransitionRule to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

