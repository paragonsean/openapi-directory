/*
 * CallFire API Documentation
 * CallFire
 *
 * The version of the OpenAPI document: V2
 * Contact: support@callfire.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * ~
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T09:59:09.684594-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class OAuthSession {
  public static final String SERIALIZED_NAME_ACCOUNT_ID = "accountId";
  @SerializedName(SERIALIZED_NAME_ACCOUNT_ID)
  private String accountId;

  public static final String SERIALIZED_NAME_ACTOR = "actor";
  @SerializedName(SERIALIZED_NAME_ACTOR)
  private OAuthSession actor;

  /**
   * ~
   */
  @JsonAdapter(BrandEnum.Adapter.class)
  public enum BrandEnum {
    EZTEXTING("EZTEXTING"),
    
    CLUBTEXTING("CLUBTEXTING"),
    
    GROUPTEXTING("GROUPTEXTING"),
    
    TELLMYCELL("TELLMYCELL"),
    
    EZ("EZ"),
    
    CALLFIRE("CALLFIRE"),
    
    TESLA("TESLA");

    private String value;

    BrandEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static BrandEnum fromValue(String value) {
      for (BrandEnum b : BrandEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<BrandEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final BrandEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public BrandEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return BrandEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      BrandEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_BRAND = "brand";
  @SerializedName(SERIALIZED_NAME_BRAND)
  private BrandEnum brand;

  public static final String SERIALIZED_NAME_CLIENT_ID = "clientId";
  @SerializedName(SERIALIZED_NAME_CLIENT_ID)
  private String clientId;

  public static final String SERIALIZED_NAME_EMAIL = "email";
  @SerializedName(SERIALIZED_NAME_EMAIL)
  private String email;

  public static final String SERIALIZED_NAME_EXPIRES = "expires";
  @SerializedName(SERIALIZED_NAME_EXPIRES)
  private OffsetDateTime expires;

  /**
   * ~
   */
  @JsonAdapter(GrantTypeEnum.Adapter.class)
  public enum GrantTypeEnum {
    AUTHORIZATION_CODE("AUTHORIZATION_CODE"),
    
    PASSWORD("PASSWORD"),
    
    REFRESH_TOKEN("REFRESH_TOKEN"),
    
    CLIENT_CREDENTIALS("CLIENT_CREDENTIALS"),
    
    JWT_BEARER("JWT_BEARER"),
    
    IMPERSONATE("IMPERSONATE"),
    
    EXCHANGE("EXCHANGE");

    private String value;

    GrantTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static GrantTypeEnum fromValue(String value) {
      for (GrantTypeEnum b : GrantTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<GrantTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final GrantTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public GrantTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return GrantTypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      GrantTypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_GRANT_TYPE = "grantType";
  @SerializedName(SERIALIZED_NAME_GRANT_TYPE)
  private GrantTypeEnum grantType;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_IP_ADDRESS = "ipAddress";
  @SerializedName(SERIALIZED_NAME_IP_ADDRESS)
  private String ipAddress;

  public static final String SERIALIZED_NAME_ISSUED = "issued";
  @SerializedName(SERIALIZED_NAME_ISSUED)
  private OffsetDateTime issued;

  public static final String SERIALIZED_NAME_SCOPE = "scope";
  @SerializedName(SERIALIZED_NAME_SCOPE)
  private String scope;

  public static final String SERIALIZED_NAME_SID = "sid";
  @SerializedName(SERIALIZED_NAME_SID)
  private Long sid;

  public static final String SERIALIZED_NAME_USER_ID = "userId";
  @SerializedName(SERIALIZED_NAME_USER_ID)
  private String userId;

  public static final String SERIALIZED_NAME_USERNAME = "username";
  @SerializedName(SERIALIZED_NAME_USERNAME)
  private String username;

  public static final String SERIALIZED_NAME_VERIFICATION_REQUIRED = "verificationRequired";
  @SerializedName(SERIALIZED_NAME_VERIFICATION_REQUIRED)
  private Boolean verificationRequired;

  public OAuthSession() {
  }

  public OAuthSession accountId(String accountId) {
    this.accountId = accountId;
    return this;
  }

  /**
   * ~
   * @return accountId
   */
  @javax.annotation.Nullable
  public String getAccountId() {
    return accountId;
  }

  public void setAccountId(String accountId) {
    this.accountId = accountId;
  }


  public OAuthSession actor(OAuthSession actor) {
    this.actor = actor;
    return this;
  }

  /**
   * Get actor
   * @return actor
   */
  @javax.annotation.Nullable
  public OAuthSession getActor() {
    return actor;
  }

  public void setActor(OAuthSession actor) {
    this.actor = actor;
  }


  public OAuthSession brand(BrandEnum brand) {
    this.brand = brand;
    return this;
  }

  /**
   * ~
   * @return brand
   */
  @javax.annotation.Nullable
  public BrandEnum getBrand() {
    return brand;
  }

  public void setBrand(BrandEnum brand) {
    this.brand = brand;
  }


  public OAuthSession clientId(String clientId) {
    this.clientId = clientId;
    return this;
  }

  /**
   * ~
   * @return clientId
   */
  @javax.annotation.Nullable
  public String getClientId() {
    return clientId;
  }

  public void setClientId(String clientId) {
    this.clientId = clientId;
  }


  public OAuthSession email(String email) {
    this.email = email;
    return this;
  }

  /**
   * ~
   * @return email
   */
  @javax.annotation.Nullable
  public String getEmail() {
    return email;
  }

  public void setEmail(String email) {
    this.email = email;
  }


  public OAuthSession expires(OffsetDateTime expires) {
    this.expires = expires;
    return this;
  }

  /**
   * ~
   * @return expires
   */
  @javax.annotation.Nullable
  public OffsetDateTime getExpires() {
    return expires;
  }

  public void setExpires(OffsetDateTime expires) {
    this.expires = expires;
  }


  public OAuthSession grantType(GrantTypeEnum grantType) {
    this.grantType = grantType;
    return this;
  }

  /**
   * ~
   * @return grantType
   */
  @javax.annotation.Nullable
  public GrantTypeEnum getGrantType() {
    return grantType;
  }

  public void setGrantType(GrantTypeEnum grantType) {
    this.grantType = grantType;
  }


  public OAuthSession id(String id) {
    this.id = id;
    return this;
  }

  /**
   * ~
   * @return id
   */
  @javax.annotation.Nullable
  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }


  public OAuthSession ipAddress(String ipAddress) {
    this.ipAddress = ipAddress;
    return this;
  }

  /**
   * ~
   * @return ipAddress
   */
  @javax.annotation.Nullable
  public String getIpAddress() {
    return ipAddress;
  }

  public void setIpAddress(String ipAddress) {
    this.ipAddress = ipAddress;
  }


  public OAuthSession issued(OffsetDateTime issued) {
    this.issued = issued;
    return this;
  }

  /**
   * ~
   * @return issued
   */
  @javax.annotation.Nullable
  public OffsetDateTime getIssued() {
    return issued;
  }

  public void setIssued(OffsetDateTime issued) {
    this.issued = issued;
  }


  public OAuthSession scope(String scope) {
    this.scope = scope;
    return this;
  }

  /**
   * ~
   * @return scope
   */
  @javax.annotation.Nullable
  public String getScope() {
    return scope;
  }

  public void setScope(String scope) {
    this.scope = scope;
  }


  public OAuthSession sid(Long sid) {
    this.sid = sid;
    return this;
  }

  /**
   * ~
   * @return sid
   */
  @javax.annotation.Nullable
  public Long getSid() {
    return sid;
  }

  public void setSid(Long sid) {
    this.sid = sid;
  }


  public OAuthSession userId(String userId) {
    this.userId = userId;
    return this;
  }

  /**
   * ~
   * @return userId
   */
  @javax.annotation.Nullable
  public String getUserId() {
    return userId;
  }

  public void setUserId(String userId) {
    this.userId = userId;
  }


  public OAuthSession username(String username) {
    this.username = username;
    return this;
  }

  /**
   * ~
   * @return username
   */
  @javax.annotation.Nullable
  public String getUsername() {
    return username;
  }

  public void setUsername(String username) {
    this.username = username;
  }


  public OAuthSession verificationRequired(Boolean verificationRequired) {
    this.verificationRequired = verificationRequired;
    return this;
  }

  /**
   * ~
   * @return verificationRequired
   */
  @javax.annotation.Nullable
  public Boolean getVerificationRequired() {
    return verificationRequired;
  }

  public void setVerificationRequired(Boolean verificationRequired) {
    this.verificationRequired = verificationRequired;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    OAuthSession oauthSession = (OAuthSession) o;
    return Objects.equals(this.accountId, oauthSession.accountId) &&
        Objects.equals(this.actor, oauthSession.actor) &&
        Objects.equals(this.brand, oauthSession.brand) &&
        Objects.equals(this.clientId, oauthSession.clientId) &&
        Objects.equals(this.email, oauthSession.email) &&
        Objects.equals(this.expires, oauthSession.expires) &&
        Objects.equals(this.grantType, oauthSession.grantType) &&
        Objects.equals(this.id, oauthSession.id) &&
        Objects.equals(this.ipAddress, oauthSession.ipAddress) &&
        Objects.equals(this.issued, oauthSession.issued) &&
        Objects.equals(this.scope, oauthSession.scope) &&
        Objects.equals(this.sid, oauthSession.sid) &&
        Objects.equals(this.userId, oauthSession.userId) &&
        Objects.equals(this.username, oauthSession.username) &&
        Objects.equals(this.verificationRequired, oauthSession.verificationRequired);
  }

  @Override
  public int hashCode() {
    return Objects.hash(accountId, actor, brand, clientId, email, expires, grantType, id, ipAddress, issued, scope, sid, userId, username, verificationRequired);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class OAuthSession {\n");
    sb.append("    accountId: ").append(toIndentedString(accountId)).append("\n");
    sb.append("    actor: ").append(toIndentedString(actor)).append("\n");
    sb.append("    brand: ").append(toIndentedString(brand)).append("\n");
    sb.append("    clientId: ").append(toIndentedString(clientId)).append("\n");
    sb.append("    email: ").append(toIndentedString(email)).append("\n");
    sb.append("    expires: ").append(toIndentedString(expires)).append("\n");
    sb.append("    grantType: ").append(toIndentedString(grantType)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    ipAddress: ").append(toIndentedString(ipAddress)).append("\n");
    sb.append("    issued: ").append(toIndentedString(issued)).append("\n");
    sb.append("    scope: ").append(toIndentedString(scope)).append("\n");
    sb.append("    sid: ").append(toIndentedString(sid)).append("\n");
    sb.append("    userId: ").append(toIndentedString(userId)).append("\n");
    sb.append("    username: ").append(toIndentedString(username)).append("\n");
    sb.append("    verificationRequired: ").append(toIndentedString(verificationRequired)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("accountId");
    openapiFields.add("actor");
    openapiFields.add("brand");
    openapiFields.add("clientId");
    openapiFields.add("email");
    openapiFields.add("expires");
    openapiFields.add("grantType");
    openapiFields.add("id");
    openapiFields.add("ipAddress");
    openapiFields.add("issued");
    openapiFields.add("scope");
    openapiFields.add("sid");
    openapiFields.add("userId");
    openapiFields.add("username");
    openapiFields.add("verificationRequired");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to OAuthSession
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!OAuthSession.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in OAuthSession is not found in the empty JSON string", OAuthSession.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!OAuthSession.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `OAuthSession` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("accountId") != null && !jsonObj.get("accountId").isJsonNull()) && !jsonObj.get("accountId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `accountId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("accountId").toString()));
      }
      // validate the optional field `actor`
      if (jsonObj.get("actor") != null && !jsonObj.get("actor").isJsonNull()) {
        OAuthSession.validateJsonElement(jsonObj.get("actor"));
      }
      if ((jsonObj.get("brand") != null && !jsonObj.get("brand").isJsonNull()) && !jsonObj.get("brand").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `brand` to be a primitive type in the JSON string but got `%s`", jsonObj.get("brand").toString()));
      }
      // validate the optional field `brand`
      if (jsonObj.get("brand") != null && !jsonObj.get("brand").isJsonNull()) {
        BrandEnum.validateJsonElement(jsonObj.get("brand"));
      }
      if ((jsonObj.get("clientId") != null && !jsonObj.get("clientId").isJsonNull()) && !jsonObj.get("clientId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `clientId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("clientId").toString()));
      }
      if ((jsonObj.get("email") != null && !jsonObj.get("email").isJsonNull()) && !jsonObj.get("email").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `email` to be a primitive type in the JSON string but got `%s`", jsonObj.get("email").toString()));
      }
      if ((jsonObj.get("grantType") != null && !jsonObj.get("grantType").isJsonNull()) && !jsonObj.get("grantType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `grantType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("grantType").toString()));
      }
      // validate the optional field `grantType`
      if (jsonObj.get("grantType") != null && !jsonObj.get("grantType").isJsonNull()) {
        GrantTypeEnum.validateJsonElement(jsonObj.get("grantType"));
      }
      if ((jsonObj.get("id") != null && !jsonObj.get("id").isJsonNull()) && !jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      if ((jsonObj.get("ipAddress") != null && !jsonObj.get("ipAddress").isJsonNull()) && !jsonObj.get("ipAddress").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ipAddress` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ipAddress").toString()));
      }
      if ((jsonObj.get("scope") != null && !jsonObj.get("scope").isJsonNull()) && !jsonObj.get("scope").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `scope` to be a primitive type in the JSON string but got `%s`", jsonObj.get("scope").toString()));
      }
      if ((jsonObj.get("userId") != null && !jsonObj.get("userId").isJsonNull()) && !jsonObj.get("userId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `userId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("userId").toString()));
      }
      if ((jsonObj.get("username") != null && !jsonObj.get("username").isJsonNull()) && !jsonObj.get("username").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `username` to be a primitive type in the JSON string but got `%s`", jsonObj.get("username").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!OAuthSession.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'OAuthSession' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<OAuthSession> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(OAuthSession.class));

       return (TypeAdapter<T>) new TypeAdapter<OAuthSession>() {
           @Override
           public void write(JsonWriter out, OAuthSession value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public OAuthSession read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of OAuthSession given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of OAuthSession
   * @throws IOException if the JSON string is invalid with respect to OAuthSession
   */
  public static OAuthSession fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, OAuthSession.class);
  }

  /**
   * Convert an instance of OAuthSession to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

