# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.keyword_lease import KeywordLease
from openapi_server import util


class KeywordLeasePage(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, items: List[KeywordLease]=None, limit: int=None, offset: int=None, total_count: int=None):
        """KeywordLeasePage - a model defined in OpenAPI

        :param items: The items of this KeywordLeasePage.
        :param limit: The limit of this KeywordLeasePage.
        :param offset: The offset of this KeywordLeasePage.
        :param total_count: The total_count of this KeywordLeasePage.
        """
        self.openapi_types = {
            'items': List[KeywordLease],
            'limit': int,
            'offset': int,
            'total_count': int
        }

        self.attribute_map = {
            'items': 'items',
            'limit': 'limit',
            'offset': 'offset',
            'total_count': 'totalCount'
        }

        self._items = items
        self._limit = limit
        self._offset = offset
        self._total_count = total_count

    @classmethod
    def from_dict(cls, dikt: dict) -> 'KeywordLeasePage':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The KeywordLeasePage of this KeywordLeasePage.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def items(self):
        """Gets the items of this KeywordLeasePage.


        :return: The items of this KeywordLeasePage.
        :rtype: List[KeywordLease]
        """
        return self._items

    @items.setter
    def items(self, items):
        """Sets the items of this KeywordLeasePage.


        :param items: The items of this KeywordLeasePage.
        :type items: List[KeywordLease]
        """

        self._items = items

    @property
    def limit(self):
        """Gets the limit of this KeywordLeasePage.

        A maximum number of returned items. If items.size() < limit assume no more items

        :return: The limit of this KeywordLeasePage.
        :rtype: int
        """
        return self._limit

    @limit.setter
    def limit(self, limit):
        """Sets the limit of this KeywordLeasePage.

        A maximum number of returned items. If items.size() < limit assume no more items

        :param limit: The limit of this KeywordLeasePage.
        :type limit: int
        """

        self._limit = limit

    @property
    def offset(self):
        """Gets the offset of this KeywordLeasePage.

        An offset from a start of paging source

        :return: The offset of this KeywordLeasePage.
        :rtype: int
        """
        return self._offset

    @offset.setter
    def offset(self, offset):
        """Sets the offset of this KeywordLeasePage.

        An offset from a start of paging source

        :param offset: The offset of this KeywordLeasePage.
        :type offset: int
        """

        self._offset = offset

    @property
    def total_count(self):
        """Gets the total_count of this KeywordLeasePage.

        Total count of available results. -1 if unknown

        :return: The total_count of this KeywordLeasePage.
        :rtype: int
        """
        return self._total_count

    @total_count.setter
    def total_count(self, total_count):
        """Sets the total_count of this KeywordLeasePage.

        Total count of available results. -1 if unknown

        :param total_count: The total_count of this KeywordLeasePage.
        :type total_count: int
        """

        self._total_count = total_count
