# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.number_order_item import NumberOrderItem
from openapi_server import util


class NumberOrder(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, created: int=None, id: int=None, keywords: NumberOrderItem=None, local_numbers: NumberOrderItem=None, sales_tax: float=None, status: str=None, summary: float=None, toll_free_numbers: NumberOrderItem=None, total: float=None, total_cost: float=None):
        """NumberOrder - a model defined in OpenAPI

        :param created: The created of this NumberOrder.
        :param id: The id of this NumberOrder.
        :param keywords: The keywords of this NumberOrder.
        :param local_numbers: The local_numbers of this NumberOrder.
        :param sales_tax: The sales_tax of this NumberOrder.
        :param status: The status of this NumberOrder.
        :param summary: The summary of this NumberOrder.
        :param toll_free_numbers: The toll_free_numbers of this NumberOrder.
        :param total: The total of this NumberOrder.
        :param total_cost: The total_cost of this NumberOrder.
        """
        self.openapi_types = {
            'created': int,
            'id': int,
            'keywords': NumberOrderItem,
            'local_numbers': NumberOrderItem,
            'sales_tax': float,
            'status': str,
            'summary': float,
            'toll_free_numbers': NumberOrderItem,
            'total': float,
            'total_cost': float
        }

        self.attribute_map = {
            'created': 'created',
            'id': 'id',
            'keywords': 'keywords',
            'local_numbers': 'localNumbers',
            'sales_tax': 'salesTax',
            'status': 'status',
            'summary': 'summary',
            'toll_free_numbers': 'tollFreeNumbers',
            'total': 'total',
            'total_cost': 'totalCost'
        }

        self._created = created
        self._id = id
        self._keywords = keywords
        self._local_numbers = local_numbers
        self._sales_tax = sales_tax
        self._status = status
        self._summary = summary
        self._toll_free_numbers = toll_free_numbers
        self._total = total
        self._total_cost = total_cost

    @classmethod
    def from_dict(cls, dikt: dict) -> 'NumberOrder':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The NumberOrder of this NumberOrder.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def created(self):
        """Gets the created of this NumberOrder.

        The time when the given resource was created, formatted in unix time milliseconds (read only). Example: 1473781817000

        :return: The created of this NumberOrder.
        :rtype: int
        """
        return self._created

    @created.setter
    def created(self, created):
        """Sets the created of this NumberOrder.

        The time when the given resource was created, formatted in unix time milliseconds (read only). Example: 1473781817000

        :param created: The created of this NumberOrder.
        :type created: int
        """

        self._created = created

    @property
    def id(self):
        """Gets the id of this NumberOrder.

        An id of an order

        :return: The id of this NumberOrder.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this NumberOrder.

        An id of an order

        :param id: The id of this NumberOrder.
        :type id: int
        """

        self._id = id

    @property
    def keywords(self):
        """Gets the keywords of this NumberOrder.


        :return: The keywords of this NumberOrder.
        :rtype: NumberOrderItem
        """
        return self._keywords

    @keywords.setter
    def keywords(self, keywords):
        """Sets the keywords of this NumberOrder.


        :param keywords: The keywords of this NumberOrder.
        :type keywords: NumberOrderItem
        """

        self._keywords = keywords

    @property
    def local_numbers(self):
        """Gets the local_numbers of this NumberOrder.


        :return: The local_numbers of this NumberOrder.
        :rtype: NumberOrderItem
        """
        return self._local_numbers

    @local_numbers.setter
    def local_numbers(self, local_numbers):
        """Sets the local_numbers of this NumberOrder.


        :param local_numbers: The local_numbers of this NumberOrder.
        :type local_numbers: NumberOrderItem
        """

        self._local_numbers = local_numbers

    @property
    def sales_tax(self):
        """Gets the sales_tax of this NumberOrder.

        ~

        :return: The sales_tax of this NumberOrder.
        :rtype: float
        """
        return self._sales_tax

    @sales_tax.setter
    def sales_tax(self, sales_tax):
        """Sets the sales_tax of this NumberOrder.

        ~

        :param sales_tax: The sales_tax of this NumberOrder.
        :type sales_tax: float
        """

        self._sales_tax = sales_tax

    @property
    def status(self):
        """Gets the status of this NumberOrder.

        A current status of an order. Available values: NEW, PROCESSING, FINISHED, ERRORED, VOID, WAIT_FOR_PAYMENT, REJECTED

        :return: The status of this NumberOrder.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this NumberOrder.

        A current status of an order. Available values: NEW, PROCESSING, FINISHED, ERRORED, VOID, WAIT_FOR_PAYMENT, REJECTED

        :param status: The status of this NumberOrder.
        :type status: str
        """
        allowed_values = ["PROCESSING", "FINISHED", "PAYMENT_ERROR", "VOID", "WAIT_FOR_PAYMENT", "PARTIALLY_ADJUSTED", "ADJUSTED", "NEW", "ERRORED", "APPROVE_TIER_ONE", "APPROVE_TIER_TWO", "REJECTED"]  # noqa: E501
        if status not in allowed_values:
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"
                .format(status, allowed_values)
            )

        self._status = status

    @property
    def summary(self):
        """Gets the summary of this NumberOrder.

        ~

        :return: The summary of this NumberOrder.
        :rtype: float
        """
        return self._summary

    @summary.setter
    def summary(self, summary):
        """Sets the summary of this NumberOrder.

        ~

        :param summary: The summary of this NumberOrder.
        :type summary: float
        """

        self._summary = summary

    @property
    def toll_free_numbers(self):
        """Gets the toll_free_numbers of this NumberOrder.


        :return: The toll_free_numbers of this NumberOrder.
        :rtype: NumberOrderItem
        """
        return self._toll_free_numbers

    @toll_free_numbers.setter
    def toll_free_numbers(self, toll_free_numbers):
        """Sets the toll_free_numbers of this NumberOrder.


        :param toll_free_numbers: The toll_free_numbers of this NumberOrder.
        :type toll_free_numbers: NumberOrderItem
        """

        self._toll_free_numbers = toll_free_numbers

    @property
    def total(self):
        """Gets the total of this NumberOrder.

        ~

        :return: The total of this NumberOrder.
        :rtype: float
        """
        return self._total

    @total.setter
    def total(self, total):
        """Sets the total of this NumberOrder.

        ~

        :param total: The total of this NumberOrder.
        :type total: float
        """

        self._total = total

    @property
    def total_cost(self):
        """Gets the total_cost of this NumberOrder.

        A total cost of an order

        :return: The total_cost of this NumberOrder.
        :rtype: float
        """
        return self._total_cost

    @total_cost.setter
    def total_cost(self, total_cost):
        """Sets the total_cost of this NumberOrder.

        A total cost of an order

        :param total_cost: The total_cost of this NumberOrder.
        :type total_cost: float
        """

        self._total_cost = total_cost
