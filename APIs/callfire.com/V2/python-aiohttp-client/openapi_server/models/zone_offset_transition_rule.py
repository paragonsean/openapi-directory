# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.local_time import LocalTime
from openapi_server.models.zone_offset import ZoneOffset
from openapi_server import util


class ZoneOffsetTransitionRule(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, day_of_month_indicator: int=None, day_of_week: str=None, local_time: LocalTime=None, midnight_end_of_day: bool=None, month: str=None, offset_after: ZoneOffset=None, offset_before: ZoneOffset=None, standard_offset: ZoneOffset=None, time_definition: str=None):
        """ZoneOffsetTransitionRule - a model defined in OpenAPI

        :param day_of_month_indicator: The day_of_month_indicator of this ZoneOffsetTransitionRule.
        :param day_of_week: The day_of_week of this ZoneOffsetTransitionRule.
        :param local_time: The local_time of this ZoneOffsetTransitionRule.
        :param midnight_end_of_day: The midnight_end_of_day of this ZoneOffsetTransitionRule.
        :param month: The month of this ZoneOffsetTransitionRule.
        :param offset_after: The offset_after of this ZoneOffsetTransitionRule.
        :param offset_before: The offset_before of this ZoneOffsetTransitionRule.
        :param standard_offset: The standard_offset of this ZoneOffsetTransitionRule.
        :param time_definition: The time_definition of this ZoneOffsetTransitionRule.
        """
        self.openapi_types = {
            'day_of_month_indicator': int,
            'day_of_week': str,
            'local_time': LocalTime,
            'midnight_end_of_day': bool,
            'month': str,
            'offset_after': ZoneOffset,
            'offset_before': ZoneOffset,
            'standard_offset': ZoneOffset,
            'time_definition': str
        }

        self.attribute_map = {
            'day_of_month_indicator': 'dayOfMonthIndicator',
            'day_of_week': 'dayOfWeek',
            'local_time': 'localTime',
            'midnight_end_of_day': 'midnightEndOfDay',
            'month': 'month',
            'offset_after': 'offsetAfter',
            'offset_before': 'offsetBefore',
            'standard_offset': 'standardOffset',
            'time_definition': 'timeDefinition'
        }

        self._day_of_month_indicator = day_of_month_indicator
        self._day_of_week = day_of_week
        self._local_time = local_time
        self._midnight_end_of_day = midnight_end_of_day
        self._month = month
        self._offset_after = offset_after
        self._offset_before = offset_before
        self._standard_offset = standard_offset
        self._time_definition = time_definition

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ZoneOffsetTransitionRule':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ZoneOffsetTransitionRule of this ZoneOffsetTransitionRule.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def day_of_month_indicator(self):
        """Gets the day_of_month_indicator of this ZoneOffsetTransitionRule.

        ~

        :return: The day_of_month_indicator of this ZoneOffsetTransitionRule.
        :rtype: int
        """
        return self._day_of_month_indicator

    @day_of_month_indicator.setter
    def day_of_month_indicator(self, day_of_month_indicator):
        """Sets the day_of_month_indicator of this ZoneOffsetTransitionRule.

        ~

        :param day_of_month_indicator: The day_of_month_indicator of this ZoneOffsetTransitionRule.
        :type day_of_month_indicator: int
        """

        self._day_of_month_indicator = day_of_month_indicator

    @property
    def day_of_week(self):
        """Gets the day_of_week of this ZoneOffsetTransitionRule.

        ~

        :return: The day_of_week of this ZoneOffsetTransitionRule.
        :rtype: str
        """
        return self._day_of_week

    @day_of_week.setter
    def day_of_week(self, day_of_week):
        """Sets the day_of_week of this ZoneOffsetTransitionRule.

        ~

        :param day_of_week: The day_of_week of this ZoneOffsetTransitionRule.
        :type day_of_week: str
        """
        allowed_values = ["MONDAY", "TUESDAY", "WEDNESDAY", "THURSDAY", "FRIDAY", "SATURDAY", "SUNDAY"]  # noqa: E501
        if day_of_week not in allowed_values:
            raise ValueError(
                "Invalid value for `day_of_week` ({0}), must be one of {1}"
                .format(day_of_week, allowed_values)
            )

        self._day_of_week = day_of_week

    @property
    def local_time(self):
        """Gets the local_time of this ZoneOffsetTransitionRule.


        :return: The local_time of this ZoneOffsetTransitionRule.
        :rtype: LocalTime
        """
        return self._local_time

    @local_time.setter
    def local_time(self, local_time):
        """Sets the local_time of this ZoneOffsetTransitionRule.


        :param local_time: The local_time of this ZoneOffsetTransitionRule.
        :type local_time: LocalTime
        """

        self._local_time = local_time

    @property
    def midnight_end_of_day(self):
        """Gets the midnight_end_of_day of this ZoneOffsetTransitionRule.

        ~

        :return: The midnight_end_of_day of this ZoneOffsetTransitionRule.
        :rtype: bool
        """
        return self._midnight_end_of_day

    @midnight_end_of_day.setter
    def midnight_end_of_day(self, midnight_end_of_day):
        """Sets the midnight_end_of_day of this ZoneOffsetTransitionRule.

        ~

        :param midnight_end_of_day: The midnight_end_of_day of this ZoneOffsetTransitionRule.
        :type midnight_end_of_day: bool
        """

        self._midnight_end_of_day = midnight_end_of_day

    @property
    def month(self):
        """Gets the month of this ZoneOffsetTransitionRule.

        ~

        :return: The month of this ZoneOffsetTransitionRule.
        :rtype: str
        """
        return self._month

    @month.setter
    def month(self, month):
        """Sets the month of this ZoneOffsetTransitionRule.

        ~

        :param month: The month of this ZoneOffsetTransitionRule.
        :type month: str
        """
        allowed_values = ["JANUARY", "FEBRUARY", "MARCH", "APRIL", "MAY", "JUNE", "JULY", "AUGUST", "SEPTEMBER", "OCTOBER", "NOVEMBER", "DECEMBER"]  # noqa: E501
        if month not in allowed_values:
            raise ValueError(
                "Invalid value for `month` ({0}), must be one of {1}"
                .format(month, allowed_values)
            )

        self._month = month

    @property
    def offset_after(self):
        """Gets the offset_after of this ZoneOffsetTransitionRule.


        :return: The offset_after of this ZoneOffsetTransitionRule.
        :rtype: ZoneOffset
        """
        return self._offset_after

    @offset_after.setter
    def offset_after(self, offset_after):
        """Sets the offset_after of this ZoneOffsetTransitionRule.


        :param offset_after: The offset_after of this ZoneOffsetTransitionRule.
        :type offset_after: ZoneOffset
        """

        self._offset_after = offset_after

    @property
    def offset_before(self):
        """Gets the offset_before of this ZoneOffsetTransitionRule.


        :return: The offset_before of this ZoneOffsetTransitionRule.
        :rtype: ZoneOffset
        """
        return self._offset_before

    @offset_before.setter
    def offset_before(self, offset_before):
        """Sets the offset_before of this ZoneOffsetTransitionRule.


        :param offset_before: The offset_before of this ZoneOffsetTransitionRule.
        :type offset_before: ZoneOffset
        """

        self._offset_before = offset_before

    @property
    def standard_offset(self):
        """Gets the standard_offset of this ZoneOffsetTransitionRule.


        :return: The standard_offset of this ZoneOffsetTransitionRule.
        :rtype: ZoneOffset
        """
        return self._standard_offset

    @standard_offset.setter
    def standard_offset(self, standard_offset):
        """Sets the standard_offset of this ZoneOffsetTransitionRule.


        :param standard_offset: The standard_offset of this ZoneOffsetTransitionRule.
        :type standard_offset: ZoneOffset
        """

        self._standard_offset = standard_offset

    @property
    def time_definition(self):
        """Gets the time_definition of this ZoneOffsetTransitionRule.

        ~

        :return: The time_definition of this ZoneOffsetTransitionRule.
        :rtype: str
        """
        return self._time_definition

    @time_definition.setter
    def time_definition(self, time_definition):
        """Sets the time_definition of this ZoneOffsetTransitionRule.

        ~

        :param time_definition: The time_definition of this ZoneOffsetTransitionRule.
        :type time_definition: str
        """
        allowed_values = ["UTC", "WALL", "STANDARD"]  # noqa: E501
        if time_definition not in allowed_values:
            raise ValueError(
                "Invalid value for `time_definition` ({0}), must be one of {1}"
                .format(time_definition, allowed_values)
            )

        self._time_definition = time_definition
