# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class Region(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, city: str=None, country: str=None, latitude: float=None, longitude: float=None, prefix: str=None, state: str=None, time_zone: str=None, zipcode: str=None):
        """Region - a model defined in OpenAPI

        :param city: The city of this Region.
        :param country: The country of this Region.
        :param latitude: The latitude of this Region.
        :param longitude: The longitude of this Region.
        :param prefix: The prefix of this Region.
        :param state: The state of this Region.
        :param time_zone: The time_zone of this Region.
        :param zipcode: The zipcode of this Region.
        """
        self.openapi_types = {
            'city': str,
            'country': str,
            'latitude': float,
            'longitude': float,
            'prefix': str,
            'state': str,
            'time_zone': str,
            'zipcode': str
        }

        self.attribute_map = {
            'city': 'city',
            'country': 'country',
            'latitude': 'latitude',
            'longitude': 'longitude',
            'prefix': 'prefix',
            'state': 'state',
            'time_zone': 'timeZone',
            'zipcode': 'zipcode'
        }

        self._city = city
        self._country = country
        self._latitude = latitude
        self._longitude = longitude
        self._prefix = prefix
        self._state = state
        self._time_zone = time_zone
        self._zipcode = zipcode

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Region':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Region of this Region.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def city(self):
        """Gets the city of this Region.

        A city of a region

        :return: The city of this Region.
        :rtype: str
        """
        return self._city

    @city.setter
    def city(self, city):
        """Sets the city of this Region.

        A city of a region

        :param city: The city of this Region.
        :type city: str
        """

        self._city = city

    @property
    def country(self):
        """Gets the country of this Region.

        A country of a region

        :return: The country of this Region.
        :rtype: str
        """
        return self._country

    @country.setter
    def country(self, country):
        """Sets the country of this Region.

        A country of a region

        :param country: The country of this Region.
        :type country: str
        """

        self._country = country

    @property
    def latitude(self):
        """Gets the latitude of this Region.

        A latitude of a region

        :return: The latitude of this Region.
        :rtype: float
        """
        return self._latitude

    @latitude.setter
    def latitude(self, latitude):
        """Sets the latitude of this Region.

        A latitude of a region

        :param latitude: The latitude of this Region.
        :type latitude: float
        """

        self._latitude = latitude

    @property
    def longitude(self):
        """Gets the longitude of this Region.

        A longitude of a region

        :return: The longitude of this Region.
        :rtype: float
        """
        return self._longitude

    @longitude.setter
    def longitude(self, longitude):
        """Sets the longitude of this Region.

        A longitude of a region

        :param longitude: The longitude of this Region.
        :type longitude: float
        """

        self._longitude = longitude

    @property
    def prefix(self):
        """Gets the prefix of this Region.

        A country prefix of a region. 4-7 digit

        :return: The prefix of this Region.
        :rtype: str
        """
        return self._prefix

    @prefix.setter
    def prefix(self, prefix):
        """Sets the prefix of this Region.

        A country prefix of a region. 4-7 digit

        :param prefix: The prefix of this Region.
        :type prefix: str
        """

        self._prefix = prefix

    @property
    def state(self):
        """Gets the state of this Region.

        A two-letter state code of region

        :return: The state of this Region.
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this Region.

        A two-letter state code of region

        :param state: The state of this Region.
        :type state: str
        """

        self._state = state

    @property
    def time_zone(self):
        """Gets the time_zone of this Region.

        A timezone of a region

        :return: The time_zone of this Region.
        :rtype: str
        """
        return self._time_zone

    @time_zone.setter
    def time_zone(self, time_zone):
        """Sets the time_zone of this Region.

        A timezone of a region

        :param time_zone: The time_zone of this Region.
        :type time_zone: str
        """

        self._time_zone = time_zone

    @property
    def zipcode(self):
        """Gets the zipcode of this Region.

        A five-digit zip code of a region

        :return: The zipcode of this Region.
        :rtype: str
        """
        return self._zipcode

    @zipcode.setter
    def zipcode(self, zipcode):
        """Sets the zipcode of this Region.

        A five-digit zip code of a region

        :param zipcode: The zipcode of this Region.
        :type zipcode: str
        """

        self._zipcode = zipcode
