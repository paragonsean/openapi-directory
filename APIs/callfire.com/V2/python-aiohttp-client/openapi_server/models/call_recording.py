# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class CallRecording(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, call_id: int=None, campaign_id: int=None, created: int=None, hash: str=None, id: int=None, length_in_bytes: int=None, length_in_seconds: int=None, mp3_url: str=None, name: str=None, state: str=None):
        """CallRecording - a model defined in OpenAPI

        :param call_id: The call_id of this CallRecording.
        :param campaign_id: The campaign_id of this CallRecording.
        :param created: The created of this CallRecording.
        :param hash: The hash of this CallRecording.
        :param id: The id of this CallRecording.
        :param length_in_bytes: The length_in_bytes of this CallRecording.
        :param length_in_seconds: The length_in_seconds of this CallRecording.
        :param mp3_url: The mp3_url of this CallRecording.
        :param name: The name of this CallRecording.
        :param state: The state of this CallRecording.
        """
        self.openapi_types = {
            'call_id': int,
            'campaign_id': int,
            'created': int,
            'hash': str,
            'id': int,
            'length_in_bytes': int,
            'length_in_seconds': int,
            'mp3_url': str,
            'name': str,
            'state': str
        }

        self.attribute_map = {
            'call_id': 'callId',
            'campaign_id': 'campaignId',
            'created': 'created',
            'hash': 'hash',
            'id': 'id',
            'length_in_bytes': 'lengthInBytes',
            'length_in_seconds': 'lengthInSeconds',
            'mp3_url': 'mp3Url',
            'name': 'name',
            'state': 'state'
        }

        self._call_id = call_id
        self._campaign_id = campaign_id
        self._created = created
        self._hash = hash
        self._id = id
        self._length_in_bytes = length_in_bytes
        self._length_in_seconds = length_in_seconds
        self._mp3_url = mp3_url
        self._name = name
        self._state = state

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CallRecording':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CallRecording of this CallRecording.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def call_id(self):
        """Gets the call_id of this CallRecording.

        An id of a call action

        :return: The call_id of this CallRecording.
        :rtype: int
        """
        return self._call_id

    @call_id.setter
    def call_id(self, call_id):
        """Sets the call_id of this CallRecording.

        An id of a call action

        :param call_id: The call_id of this CallRecording.
        :type call_id: int
        """

        self._call_id = call_id

    @property
    def campaign_id(self):
        """Gets the campaign_id of this CallRecording.

        Contains broadcast id if call was sent as a part of voice broadcast

        :return: The campaign_id of this CallRecording.
        :rtype: int
        """
        return self._campaign_id

    @campaign_id.setter
    def campaign_id(self, campaign_id):
        """Sets the campaign_id of this CallRecording.

        Contains broadcast id if call was sent as a part of voice broadcast

        :param campaign_id: The campaign_id of this CallRecording.
        :type campaign_id: int
        """

        self._campaign_id = campaign_id

    @property
    def created(self):
        """Gets the created of this CallRecording.

        The time when the given resource was created, formatted in unix time milliseconds (read only). Example: 1473781817000 for Sat, 05 Jan 1985 14:03:37 GMT

        :return: The created of this CallRecording.
        :rtype: int
        """
        return self._created

    @created.setter
    def created(self, created):
        """Sets the created of this CallRecording.

        The time when the given resource was created, formatted in unix time milliseconds (read only). Example: 1473781817000 for Sat, 05 Jan 1985 14:03:37 GMT

        :param created: The created of this CallRecording.
        :type created: int
        """

        self._created = created

    @property
    def hash(self):
        """Gets the hash of this CallRecording.

        A unique string hash identifier of a recording

        :return: The hash of this CallRecording.
        :rtype: str
        """
        return self._hash

    @hash.setter
    def hash(self, hash):
        """Sets the hash of this CallRecording.

        A unique string hash identifier of a recording

        :param hash: The hash of this CallRecording.
        :type hash: str
        """

        self._hash = hash

    @property
    def id(self):
        """Gets the id of this CallRecording.

        An id of a call recording

        :return: The id of this CallRecording.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this CallRecording.

        An id of a call recording

        :param id: The id of this CallRecording.
        :type id: int
        """

        self._id = id

    @property
    def length_in_bytes(self):
        """Gets the length_in_bytes of this CallRecording.

        A size of a recording file in bytes

        :return: The length_in_bytes of this CallRecording.
        :rtype: int
        """
        return self._length_in_bytes

    @length_in_bytes.setter
    def length_in_bytes(self, length_in_bytes):
        """Sets the length_in_bytes of this CallRecording.

        A size of a recording file in bytes

        :param length_in_bytes: The length_in_bytes of this CallRecording.
        :type length_in_bytes: int
        """

        self._length_in_bytes = length_in_bytes

    @property
    def length_in_seconds(self):
        """Gets the length_in_seconds of this CallRecording.

        Duration of a recording in seconds

        :return: The length_in_seconds of this CallRecording.
        :rtype: int
        """
        return self._length_in_seconds

    @length_in_seconds.setter
    def length_in_seconds(self, length_in_seconds):
        """Sets the length_in_seconds of this CallRecording.

        Duration of a recording in seconds

        :param length_in_seconds: The length_in_seconds of this CallRecording.
        :type length_in_seconds: int
        """

        self._length_in_seconds = length_in_seconds

    @property
    def mp3_url(self):
        """Gets the mp3_url of this CallRecording.

        A public URL of a call recording

        :return: The mp3_url of this CallRecording.
        :rtype: str
        """
        return self._mp3_url

    @mp3_url.setter
    def mp3_url(self, mp3_url):
        """Sets the mp3_url of this CallRecording.

        A public URL of a call recording

        :param mp3_url: The mp3_url of this CallRecording.
        :type mp3_url: str
        """

        self._mp3_url = mp3_url

    @property
    def name(self):
        """Gets the name of this CallRecording.

        A name of a recording

        :return: The name of this CallRecording.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this CallRecording.

        A name of a recording

        :param name: The name of this CallRecording.
        :type name: str
        """

        self._name = name

    @property
    def state(self):
        """Gets the state of this CallRecording.

        Current state of a recording, available values: RECORDING - recording is in progress, READY - recording is ready, ERROR - error has occurred and recording can be broken

        :return: The state of this CallRecording.
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this CallRecording.

        Current state of a recording, available values: RECORDING - recording is in progress, READY - recording is ready, ERROR - error has occurred and recording can be broken

        :param state: The state of this CallRecording.
        :type state: str
        """
        allowed_values = ["RECORDING", "READY", "ERROR"]  # noqa: E501
        if state not in allowed_values:
            raise ValueError(
                "Invalid value for `state` ({0}), must be one of {1}"
                .format(state, allowed_values)
            )

        self._state = state
