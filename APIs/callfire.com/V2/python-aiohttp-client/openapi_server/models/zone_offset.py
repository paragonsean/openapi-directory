# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.zone_rules import ZoneRules
from openapi_server import util


class ZoneOffset(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, id: str=None, rules: ZoneRules=None, total_seconds: int=None):
        """ZoneOffset - a model defined in OpenAPI

        :param id: The id of this ZoneOffset.
        :param rules: The rules of this ZoneOffset.
        :param total_seconds: The total_seconds of this ZoneOffset.
        """
        self.openapi_types = {
            'id': str,
            'rules': ZoneRules,
            'total_seconds': int
        }

        self.attribute_map = {
            'id': 'id',
            'rules': 'rules',
            'total_seconds': 'totalSeconds'
        }

        self._id = id
        self._rules = rules
        self._total_seconds = total_seconds

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ZoneOffset':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ZoneOffset of this ZoneOffset.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self):
        """Gets the id of this ZoneOffset.

        ~

        :return: The id of this ZoneOffset.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this ZoneOffset.

        ~

        :param id: The id of this ZoneOffset.
        :type id: str
        """

        self._id = id

    @property
    def rules(self):
        """Gets the rules of this ZoneOffset.


        :return: The rules of this ZoneOffset.
        :rtype: ZoneRules
        """
        return self._rules

    @rules.setter
    def rules(self, rules):
        """Sets the rules of this ZoneOffset.


        :param rules: The rules of this ZoneOffset.
        :type rules: ZoneRules
        """

        self._rules = rules

    @property
    def total_seconds(self):
        """Gets the total_seconds of this ZoneOffset.

        ~

        :return: The total_seconds of this ZoneOffset.
        :rtype: int
        """
        return self._total_seconds

    @total_seconds.setter
    def total_seconds(self, total_seconds):
        """Sets the total_seconds of this ZoneOffset.

        ~

        :param total_seconds: The total_seconds of this ZoneOffset.
        :type total_seconds: int
        """

        self._total_seconds = total_seconds
