# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class TextToSpeech(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, message: str=None, voice: str=None):
        """TextToSpeech - a model defined in OpenAPI

        :param message: The message of this TextToSpeech.
        :param voice: The voice of this TextToSpeech.
        """
        self.openapi_types = {
            'message': str,
            'voice': str
        }

        self.attribute_map = {
            'message': 'message',
            'voice': 'voice'
        }

        self._message = message
        self._voice = voice

    @classmethod
    def from_dict(cls, dikt: dict) -> 'TextToSpeech':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The TextToSpeech of this TextToSpeech.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def message(self):
        """Gets the message of this TextToSpeech.

        A text to be turned into sound

        :return: The message of this TextToSpeech.
        :rtype: str
        """
        return self._message

    @message.setter
    def message(self, message):
        """Sets the message of this TextToSpeech.

        A text to be turned into sound

        :param message: The message of this TextToSpeech.
        :type message: str
        """

        self._message = message

    @property
    def voice(self):
        """Gets the voice of this TextToSpeech.

        A voice to be used. Available values: MALE1, FEMALE1 , FEMALE2, SPANISH1, FRENCHCANADIAN1

        :return: The voice of this TextToSpeech.
        :rtype: str
        """
        return self._voice

    @voice.setter
    def voice(self, voice):
        """Sets the voice of this TextToSpeech.

        A voice to be used. Available values: MALE1, FEMALE1 , FEMALE2, SPANISH1, FRENCHCANADIAN1

        :param voice: The voice of this TextToSpeech.
        :type voice: str
        """
        allowed_values = ["MALE1", "FEMALE1", "FEMALE2", "SPANISH1", "FRENCHCANADIAN1"]  # noqa: E501
        if voice not in allowed_values:
            raise ValueError(
                "Invalid value for `voice` ({0}), must be one of {1}"
                .format(voice, allowed_values)
            )

        self._voice = voice
