# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.call_tracking_config import CallTrackingConfig
from openapi_server.models.ivr_inbound_config import IvrInboundConfig
from openapi_server.models.text_inbound_config import TextInboundConfig
from openapi_server import util


class NumberConfig(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, call_tracking_config: CallTrackingConfig=None, config_type: str=None, ivr_inbound_config: IvrInboundConfig=None, number: str=None, text_inbound_config: TextInboundConfig=None):
        """NumberConfig - a model defined in OpenAPI

        :param call_tracking_config: The call_tracking_config of this NumberConfig.
        :param config_type: The config_type of this NumberConfig.
        :param ivr_inbound_config: The ivr_inbound_config of this NumberConfig.
        :param number: The number of this NumberConfig.
        :param text_inbound_config: The text_inbound_config of this NumberConfig.
        """
        self.openapi_types = {
            'call_tracking_config': CallTrackingConfig,
            'config_type': str,
            'ivr_inbound_config': IvrInboundConfig,
            'number': str,
            'text_inbound_config': TextInboundConfig
        }

        self.attribute_map = {
            'call_tracking_config': 'callTrackingConfig',
            'config_type': 'configType',
            'ivr_inbound_config': 'ivrInboundConfig',
            'number': 'number',
            'text_inbound_config': 'textInboundConfig'
        }

        self._call_tracking_config = call_tracking_config
        self._config_type = config_type
        self._ivr_inbound_config = ivr_inbound_config
        self._number = number
        self._text_inbound_config = text_inbound_config

    @classmethod
    def from_dict(cls, dikt: dict) -> 'NumberConfig':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The NumberConfig of this NumberConfig.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def call_tracking_config(self):
        """Gets the call_tracking_config of this NumberConfig.


        :return: The call_tracking_config of this NumberConfig.
        :rtype: CallTrackingConfig
        """
        return self._call_tracking_config

    @call_tracking_config.setter
    def call_tracking_config(self, call_tracking_config):
        """Sets the call_tracking_config of this NumberConfig.


        :param call_tracking_config: The call_tracking_config of this NumberConfig.
        :type call_tracking_config: CallTrackingConfig
        """

        self._call_tracking_config = call_tracking_config

    @property
    def config_type(self):
        """Gets the config_type of this NumberConfig.

        A type of config. Available values: TRACKING, IVR

        :return: The config_type of this NumberConfig.
        :rtype: str
        """
        return self._config_type

    @config_type.setter
    def config_type(self, config_type):
        """Sets the config_type of this NumberConfig.

        A type of config. Available values: TRACKING, IVR

        :param config_type: The config_type of this NumberConfig.
        :type config_type: str
        """
        allowed_values = ["IVR", "TRACKING"]  # noqa: E501
        if config_type not in allowed_values:
            raise ValueError(
                "Invalid value for `config_type` ({0}), must be one of {1}"
                .format(config_type, allowed_values)
            )

        self._config_type = config_type

    @property
    def ivr_inbound_config(self):
        """Gets the ivr_inbound_config of this NumberConfig.


        :return: The ivr_inbound_config of this NumberConfig.
        :rtype: IvrInboundConfig
        """
        return self._ivr_inbound_config

    @ivr_inbound_config.setter
    def ivr_inbound_config(self, ivr_inbound_config):
        """Sets the ivr_inbound_config of this NumberConfig.


        :param ivr_inbound_config: The ivr_inbound_config of this NumberConfig.
        :type ivr_inbound_config: IvrInboundConfig
        """

        self._ivr_inbound_config = ivr_inbound_config

    @property
    def number(self):
        """Gets the number of this NumberConfig.

        Phone number in E.164 format (11-digit). Example: 12132000384

        :return: The number of this NumberConfig.
        :rtype: str
        """
        return self._number

    @number.setter
    def number(self, number):
        """Sets the number of this NumberConfig.

        Phone number in E.164 format (11-digit). Example: 12132000384

        :param number: The number of this NumberConfig.
        :type number: str
        """

        self._number = number

    @property
    def text_inbound_config(self):
        """Gets the text_inbound_config of this NumberConfig.


        :return: The text_inbound_config of this NumberConfig.
        :rtype: TextInboundConfig
        """
        return self._text_inbound_config

    @text_inbound_config.setter
    def text_inbound_config(self, text_inbound_config):
        """Sets the text_inbound_config of this NumberConfig.


        :param text_inbound_config: The text_inbound_config of this NumberConfig.
        :type text_inbound_config: TextInboundConfig
        """

        self._text_inbound_config = text_inbound_config
