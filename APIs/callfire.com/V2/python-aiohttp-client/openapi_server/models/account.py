# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.date_time_zone import DateTimeZone
from openapi_server.models.duration import Duration
from openapi_server.models.local_time_zone_restriction import LocalTimeZoneRestriction
from openapi_server.models.locale import Locale
from openapi_server.models.time_zone import TimeZone
from openapi_server.models.zone_id import ZoneId
from openapi_server import util


class Account(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, active: bool=None, address: str=None, age: Duration=None, agency_managed_accounts: bool=None, allowed_to_create_campaign: bool=None, api_call_limit: int=None, archived: bool=None, auto_add_do_not_contact: bool=None, brand: str=None, canceled: bool=None, canceled_or_archived: bool=None, city: str=None, company_name: str=None, country: str=None, country_or_default: str=None, created: datetime=None, date_time_zone: DateTimeZone=None, default_notification_ttl_millis: int=None, default_number_id: int=None, ein: str=None, entity_type: str=None, ez: bool=None, failed_verification_attempts: int=None, from_number_pool: str=None, id: int=None, industry: str=None, industry_name: str=None, key: str=None, local_time_zone_restriction: LocalTimeZoneRestriction=None, locale: Locale=None, max_agents: int=None, message_class: str=None, message_flows: list[str]=None, name: str=None, outbound_threshold: int=None, receiver_period_call: int=None, receiver_period_enabled: bool=None, receiver_period_global: int=None, receiver_period_text: int=None, receiver_period_time_unit: str=None, retain_only_metadata: bool=None, retain_only_metadata_last_detail_record_id: int=None, retain_only_metadata_last_modified: datetime=None, scrub: bool=None, shared_short_code_allowed: bool=None, shared_short_code_id: int=None, soa_account: Account=None, start_capable: bool=None, state: str=None, status: str=None, text_outbound_threshold: int=None, time_zone: TimeZone=None, time_zone_id: ZoneId=None, trust_level: str=None, tsr_agreement: datetime=None, tsr_initials: str=None, ui_context: str=None, universal: bool=None, website: str=None, zipcode: str=None):
        """Account - a model defined in OpenAPI

        :param active: The active of this Account.
        :param address: The address of this Account.
        :param age: The age of this Account.
        :param agency_managed_accounts: The agency_managed_accounts of this Account.
        :param allowed_to_create_campaign: The allowed_to_create_campaign of this Account.
        :param api_call_limit: The api_call_limit of this Account.
        :param archived: The archived of this Account.
        :param auto_add_do_not_contact: The auto_add_do_not_contact of this Account.
        :param brand: The brand of this Account.
        :param canceled: The canceled of this Account.
        :param canceled_or_archived: The canceled_or_archived of this Account.
        :param city: The city of this Account.
        :param company_name: The company_name of this Account.
        :param country: The country of this Account.
        :param country_or_default: The country_or_default of this Account.
        :param created: The created of this Account.
        :param date_time_zone: The date_time_zone of this Account.
        :param default_notification_ttl_millis: The default_notification_ttl_millis of this Account.
        :param default_number_id: The default_number_id of this Account.
        :param ein: The ein of this Account.
        :param entity_type: The entity_type of this Account.
        :param ez: The ez of this Account.
        :param failed_verification_attempts: The failed_verification_attempts of this Account.
        :param from_number_pool: The from_number_pool of this Account.
        :param id: The id of this Account.
        :param industry: The industry of this Account.
        :param industry_name: The industry_name of this Account.
        :param key: The key of this Account.
        :param local_time_zone_restriction: The local_time_zone_restriction of this Account.
        :param locale: The locale of this Account.
        :param max_agents: The max_agents of this Account.
        :param message_class: The message_class of this Account.
        :param message_flows: The message_flows of this Account.
        :param name: The name of this Account.
        :param outbound_threshold: The outbound_threshold of this Account.
        :param receiver_period_call: The receiver_period_call of this Account.
        :param receiver_period_enabled: The receiver_period_enabled of this Account.
        :param receiver_period_global: The receiver_period_global of this Account.
        :param receiver_period_text: The receiver_period_text of this Account.
        :param receiver_period_time_unit: The receiver_period_time_unit of this Account.
        :param retain_only_metadata: The retain_only_metadata of this Account.
        :param retain_only_metadata_last_detail_record_id: The retain_only_metadata_last_detail_record_id of this Account.
        :param retain_only_metadata_last_modified: The retain_only_metadata_last_modified of this Account.
        :param scrub: The scrub of this Account.
        :param shared_short_code_allowed: The shared_short_code_allowed of this Account.
        :param shared_short_code_id: The shared_short_code_id of this Account.
        :param soa_account: The soa_account of this Account.
        :param start_capable: The start_capable of this Account.
        :param state: The state of this Account.
        :param status: The status of this Account.
        :param text_outbound_threshold: The text_outbound_threshold of this Account.
        :param time_zone: The time_zone of this Account.
        :param time_zone_id: The time_zone_id of this Account.
        :param trust_level: The trust_level of this Account.
        :param tsr_agreement: The tsr_agreement of this Account.
        :param tsr_initials: The tsr_initials of this Account.
        :param ui_context: The ui_context of this Account.
        :param universal: The universal of this Account.
        :param website: The website of this Account.
        :param zipcode: The zipcode of this Account.
        """
        self.openapi_types = {
            'active': bool,
            'address': str,
            'age': Duration,
            'agency_managed_accounts': bool,
            'allowed_to_create_campaign': bool,
            'api_call_limit': int,
            'archived': bool,
            'auto_add_do_not_contact': bool,
            'brand': str,
            'canceled': bool,
            'canceled_or_archived': bool,
            'city': str,
            'company_name': str,
            'country': str,
            'country_or_default': str,
            'created': datetime,
            'date_time_zone': DateTimeZone,
            'default_notification_ttl_millis': int,
            'default_number_id': int,
            'ein': str,
            'entity_type': str,
            'ez': bool,
            'failed_verification_attempts': int,
            'from_number_pool': str,
            'id': int,
            'industry': str,
            'industry_name': str,
            'key': str,
            'local_time_zone_restriction': LocalTimeZoneRestriction,
            'locale': Locale,
            'max_agents': int,
            'message_class': str,
            'message_flows': list[str],
            'name': str,
            'outbound_threshold': int,
            'receiver_period_call': int,
            'receiver_period_enabled': bool,
            'receiver_period_global': int,
            'receiver_period_text': int,
            'receiver_period_time_unit': str,
            'retain_only_metadata': bool,
            'retain_only_metadata_last_detail_record_id': int,
            'retain_only_metadata_last_modified': datetime,
            'scrub': bool,
            'shared_short_code_allowed': bool,
            'shared_short_code_id': int,
            'soa_account': Account,
            'start_capable': bool,
            'state': str,
            'status': str,
            'text_outbound_threshold': int,
            'time_zone': TimeZone,
            'time_zone_id': ZoneId,
            'trust_level': str,
            'tsr_agreement': datetime,
            'tsr_initials': str,
            'ui_context': str,
            'universal': bool,
            'website': str,
            'zipcode': str
        }

        self.attribute_map = {
            'active': 'active',
            'address': 'address',
            'age': 'age',
            'agency_managed_accounts': 'agencyManagedAccounts',
            'allowed_to_create_campaign': 'allowedToCreateCampaign',
            'api_call_limit': 'apiCallLimit',
            'archived': 'archived',
            'auto_add_do_not_contact': 'autoAddDoNotContact',
            'brand': 'brand',
            'canceled': 'canceled',
            'canceled_or_archived': 'canceledOrArchived',
            'city': 'city',
            'company_name': 'companyName',
            'country': 'country',
            'country_or_default': 'countryOrDefault',
            'created': 'created',
            'date_time_zone': 'dateTimeZone',
            'default_notification_ttl_millis': 'defaultNotificationTtlMillis',
            'default_number_id': 'defaultNumberId',
            'ein': 'ein',
            'entity_type': 'entityType',
            'ez': 'ez',
            'failed_verification_attempts': 'failedVerificationAttempts',
            'from_number_pool': 'fromNumberPool',
            'id': 'id',
            'industry': 'industry',
            'industry_name': 'industryName',
            'key': 'key',
            'local_time_zone_restriction': 'localTimeZoneRestriction',
            'locale': 'locale',
            'max_agents': 'maxAgents',
            'message_class': 'messageClass',
            'message_flows': 'messageFlows',
            'name': 'name',
            'outbound_threshold': 'outboundThreshold',
            'receiver_period_call': 'receiverPeriodCall',
            'receiver_period_enabled': 'receiverPeriodEnabled',
            'receiver_period_global': 'receiverPeriodGlobal',
            'receiver_period_text': 'receiverPeriodText',
            'receiver_period_time_unit': 'receiverPeriodTimeUnit',
            'retain_only_metadata': 'retainOnlyMetadata',
            'retain_only_metadata_last_detail_record_id': 'retainOnlyMetadataLastDetailRecordId',
            'retain_only_metadata_last_modified': 'retainOnlyMetadataLastModified',
            'scrub': 'scrub',
            'shared_short_code_allowed': 'sharedShortCodeAllowed',
            'shared_short_code_id': 'sharedShortCodeId',
            'soa_account': 'soaAccount',
            'start_capable': 'startCapable',
            'state': 'state',
            'status': 'status',
            'text_outbound_threshold': 'textOutboundThreshold',
            'time_zone': 'timeZone',
            'time_zone_id': 'timeZoneId',
            'trust_level': 'trustLevel',
            'tsr_agreement': 'tsrAgreement',
            'tsr_initials': 'tsrInitials',
            'ui_context': 'uiContext',
            'universal': 'universal',
            'website': 'website',
            'zipcode': 'zipcode'
        }

        self._active = active
        self._address = address
        self._age = age
        self._agency_managed_accounts = agency_managed_accounts
        self._allowed_to_create_campaign = allowed_to_create_campaign
        self._api_call_limit = api_call_limit
        self._archived = archived
        self._auto_add_do_not_contact = auto_add_do_not_contact
        self._brand = brand
        self._canceled = canceled
        self._canceled_or_archived = canceled_or_archived
        self._city = city
        self._company_name = company_name
        self._country = country
        self._country_or_default = country_or_default
        self._created = created
        self._date_time_zone = date_time_zone
        self._default_notification_ttl_millis = default_notification_ttl_millis
        self._default_number_id = default_number_id
        self._ein = ein
        self._entity_type = entity_type
        self._ez = ez
        self._failed_verification_attempts = failed_verification_attempts
        self._from_number_pool = from_number_pool
        self._id = id
        self._industry = industry
        self._industry_name = industry_name
        self._key = key
        self._local_time_zone_restriction = local_time_zone_restriction
        self._locale = locale
        self._max_agents = max_agents
        self._message_class = message_class
        self._message_flows = message_flows
        self._name = name
        self._outbound_threshold = outbound_threshold
        self._receiver_period_call = receiver_period_call
        self._receiver_period_enabled = receiver_period_enabled
        self._receiver_period_global = receiver_period_global
        self._receiver_period_text = receiver_period_text
        self._receiver_period_time_unit = receiver_period_time_unit
        self._retain_only_metadata = retain_only_metadata
        self._retain_only_metadata_last_detail_record_id = retain_only_metadata_last_detail_record_id
        self._retain_only_metadata_last_modified = retain_only_metadata_last_modified
        self._scrub = scrub
        self._shared_short_code_allowed = shared_short_code_allowed
        self._shared_short_code_id = shared_short_code_id
        self._soa_account = soa_account
        self._start_capable = start_capable
        self._state = state
        self._status = status
        self._text_outbound_threshold = text_outbound_threshold
        self._time_zone = time_zone
        self._time_zone_id = time_zone_id
        self._trust_level = trust_level
        self._tsr_agreement = tsr_agreement
        self._tsr_initials = tsr_initials
        self._ui_context = ui_context
        self._universal = universal
        self._website = website
        self._zipcode = zipcode

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Account':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Account of this Account.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def active(self):
        """Gets the active of this Account.

        ~

        :return: The active of this Account.
        :rtype: bool
        """
        return self._active

    @active.setter
    def active(self, active):
        """Sets the active of this Account.

        ~

        :param active: The active of this Account.
        :type active: bool
        """

        self._active = active

    @property
    def address(self):
        """Gets the address of this Account.

        ~

        :return: The address of this Account.
        :rtype: str
        """
        return self._address

    @address.setter
    def address(self, address):
        """Sets the address of this Account.

        ~

        :param address: The address of this Account.
        :type address: str
        """

        self._address = address

    @property
    def age(self):
        """Gets the age of this Account.


        :return: The age of this Account.
        :rtype: Duration
        """
        return self._age

    @age.setter
    def age(self, age):
        """Sets the age of this Account.


        :param age: The age of this Account.
        :type age: Duration
        """

        self._age = age

    @property
    def agency_managed_accounts(self):
        """Gets the agency_managed_accounts of this Account.

        ~

        :return: The agency_managed_accounts of this Account.
        :rtype: bool
        """
        return self._agency_managed_accounts

    @agency_managed_accounts.setter
    def agency_managed_accounts(self, agency_managed_accounts):
        """Sets the agency_managed_accounts of this Account.

        ~

        :param agency_managed_accounts: The agency_managed_accounts of this Account.
        :type agency_managed_accounts: bool
        """

        self._agency_managed_accounts = agency_managed_accounts

    @property
    def allowed_to_create_campaign(self):
        """Gets the allowed_to_create_campaign of this Account.

        ~

        :return: The allowed_to_create_campaign of this Account.
        :rtype: bool
        """
        return self._allowed_to_create_campaign

    @allowed_to_create_campaign.setter
    def allowed_to_create_campaign(self, allowed_to_create_campaign):
        """Sets the allowed_to_create_campaign of this Account.

        ~

        :param allowed_to_create_campaign: The allowed_to_create_campaign of this Account.
        :type allowed_to_create_campaign: bool
        """

        self._allowed_to_create_campaign = allowed_to_create_campaign

    @property
    def api_call_limit(self):
        """Gets the api_call_limit of this Account.

        ~

        :return: The api_call_limit of this Account.
        :rtype: int
        """
        return self._api_call_limit

    @api_call_limit.setter
    def api_call_limit(self, api_call_limit):
        """Sets the api_call_limit of this Account.

        ~

        :param api_call_limit: The api_call_limit of this Account.
        :type api_call_limit: int
        """

        self._api_call_limit = api_call_limit

    @property
    def archived(self):
        """Gets the archived of this Account.

        ~

        :return: The archived of this Account.
        :rtype: bool
        """
        return self._archived

    @archived.setter
    def archived(self, archived):
        """Sets the archived of this Account.

        ~

        :param archived: The archived of this Account.
        :type archived: bool
        """

        self._archived = archived

    @property
    def auto_add_do_not_contact(self):
        """Gets the auto_add_do_not_contact of this Account.

        ~

        :return: The auto_add_do_not_contact of this Account.
        :rtype: bool
        """
        return self._auto_add_do_not_contact

    @auto_add_do_not_contact.setter
    def auto_add_do_not_contact(self, auto_add_do_not_contact):
        """Sets the auto_add_do_not_contact of this Account.

        ~

        :param auto_add_do_not_contact: The auto_add_do_not_contact of this Account.
        :type auto_add_do_not_contact: bool
        """

        self._auto_add_do_not_contact = auto_add_do_not_contact

    @property
    def brand(self):
        """Gets the brand of this Account.

        ~

        :return: The brand of this Account.
        :rtype: str
        """
        return self._brand

    @brand.setter
    def brand(self, brand):
        """Sets the brand of this Account.

        ~

        :param brand: The brand of this Account.
        :type brand: str
        """
        allowed_values = ["EZTEXTING", "CLUBTEXTING", "GROUPTEXTING", "TELLMYCELL", "EZ", "CALLFIRE", "TESLA"]  # noqa: E501
        if brand not in allowed_values:
            raise ValueError(
                "Invalid value for `brand` ({0}), must be one of {1}"
                .format(brand, allowed_values)
            )

        self._brand = brand

    @property
    def canceled(self):
        """Gets the canceled of this Account.

        ~

        :return: The canceled of this Account.
        :rtype: bool
        """
        return self._canceled

    @canceled.setter
    def canceled(self, canceled):
        """Sets the canceled of this Account.

        ~

        :param canceled: The canceled of this Account.
        :type canceled: bool
        """

        self._canceled = canceled

    @property
    def canceled_or_archived(self):
        """Gets the canceled_or_archived of this Account.

        ~

        :return: The canceled_or_archived of this Account.
        :rtype: bool
        """
        return self._canceled_or_archived

    @canceled_or_archived.setter
    def canceled_or_archived(self, canceled_or_archived):
        """Sets the canceled_or_archived of this Account.

        ~

        :param canceled_or_archived: The canceled_or_archived of this Account.
        :type canceled_or_archived: bool
        """

        self._canceled_or_archived = canceled_or_archived

    @property
    def city(self):
        """Gets the city of this Account.

        ~

        :return: The city of this Account.
        :rtype: str
        """
        return self._city

    @city.setter
    def city(self, city):
        """Sets the city of this Account.

        ~

        :param city: The city of this Account.
        :type city: str
        """

        self._city = city

    @property
    def company_name(self):
        """Gets the company_name of this Account.

        ~

        :return: The company_name of this Account.
        :rtype: str
        """
        return self._company_name

    @company_name.setter
    def company_name(self, company_name):
        """Sets the company_name of this Account.

        ~

        :param company_name: The company_name of this Account.
        :type company_name: str
        """

        self._company_name = company_name

    @property
    def country(self):
        """Gets the country of this Account.

        ~

        :return: The country of this Account.
        :rtype: str
        """
        return self._country

    @country.setter
    def country(self, country):
        """Sets the country of this Account.

        ~

        :param country: The country of this Account.
        :type country: str
        """
        allowed_values = ["US", "CA"]  # noqa: E501
        if country not in allowed_values:
            raise ValueError(
                "Invalid value for `country` ({0}), must be one of {1}"
                .format(country, allowed_values)
            )

        self._country = country

    @property
    def country_or_default(self):
        """Gets the country_or_default of this Account.

        ~

        :return: The country_or_default of this Account.
        :rtype: str
        """
        return self._country_or_default

    @country_or_default.setter
    def country_or_default(self, country_or_default):
        """Sets the country_or_default of this Account.

        ~

        :param country_or_default: The country_or_default of this Account.
        :type country_or_default: str
        """
        allowed_values = ["US", "CA"]  # noqa: E501
        if country_or_default not in allowed_values:
            raise ValueError(
                "Invalid value for `country_or_default` ({0}), must be one of {1}"
                .format(country_or_default, allowed_values)
            )

        self._country_or_default = country_or_default

    @property
    def created(self):
        """Gets the created of this Account.

        ~

        :return: The created of this Account.
        :rtype: datetime
        """
        return self._created

    @created.setter
    def created(self, created):
        """Sets the created of this Account.

        ~

        :param created: The created of this Account.
        :type created: datetime
        """

        self._created = created

    @property
    def date_time_zone(self):
        """Gets the date_time_zone of this Account.


        :return: The date_time_zone of this Account.
        :rtype: DateTimeZone
        """
        return self._date_time_zone

    @date_time_zone.setter
    def date_time_zone(self, date_time_zone):
        """Sets the date_time_zone of this Account.


        :param date_time_zone: The date_time_zone of this Account.
        :type date_time_zone: DateTimeZone
        """

        self._date_time_zone = date_time_zone

    @property
    def default_notification_ttl_millis(self):
        """Gets the default_notification_ttl_millis of this Account.

        ~

        :return: The default_notification_ttl_millis of this Account.
        :rtype: int
        """
        return self._default_notification_ttl_millis

    @default_notification_ttl_millis.setter
    def default_notification_ttl_millis(self, default_notification_ttl_millis):
        """Sets the default_notification_ttl_millis of this Account.

        ~

        :param default_notification_ttl_millis: The default_notification_ttl_millis of this Account.
        :type default_notification_ttl_millis: int
        """

        self._default_notification_ttl_millis = default_notification_ttl_millis

    @property
    def default_number_id(self):
        """Gets the default_number_id of this Account.

        ~

        :return: The default_number_id of this Account.
        :rtype: int
        """
        return self._default_number_id

    @default_number_id.setter
    def default_number_id(self, default_number_id):
        """Sets the default_number_id of this Account.

        ~

        :param default_number_id: The default_number_id of this Account.
        :type default_number_id: int
        """

        self._default_number_id = default_number_id

    @property
    def ein(self):
        """Gets the ein of this Account.

        ~

        :return: The ein of this Account.
        :rtype: str
        """
        return self._ein

    @ein.setter
    def ein(self, ein):
        """Sets the ein of this Account.

        ~

        :param ein: The ein of this Account.
        :type ein: str
        """

        self._ein = ein

    @property
    def entity_type(self):
        """Gets the entity_type of this Account.

        ~

        :return: The entity_type of this Account.
        :rtype: str
        """
        return self._entity_type

    @entity_type.setter
    def entity_type(self, entity_type):
        """Sets the entity_type of this Account.

        ~

        :param entity_type: The entity_type of this Account.
        :type entity_type: str
        """
        allowed_values = ["SP", "COMPANY"]  # noqa: E501
        if entity_type not in allowed_values:
            raise ValueError(
                "Invalid value for `entity_type` ({0}), must be one of {1}"
                .format(entity_type, allowed_values)
            )

        self._entity_type = entity_type

    @property
    def ez(self):
        """Gets the ez of this Account.

        ~

        :return: The ez of this Account.
        :rtype: bool
        """
        return self._ez

    @ez.setter
    def ez(self, ez):
        """Sets the ez of this Account.

        ~

        :param ez: The ez of this Account.
        :type ez: bool
        """

        self._ez = ez

    @property
    def failed_verification_attempts(self):
        """Gets the failed_verification_attempts of this Account.

        ~

        :return: The failed_verification_attempts of this Account.
        :rtype: int
        """
        return self._failed_verification_attempts

    @failed_verification_attempts.setter
    def failed_verification_attempts(self, failed_verification_attempts):
        """Sets the failed_verification_attempts of this Account.

        ~

        :param failed_verification_attempts: The failed_verification_attempts of this Account.
        :type failed_verification_attempts: int
        """

        self._failed_verification_attempts = failed_verification_attempts

    @property
    def from_number_pool(self):
        """Gets the from_number_pool of this Account.

        ~

        :return: The from_number_pool of this Account.
        :rtype: str
        """
        return self._from_number_pool

    @from_number_pool.setter
    def from_number_pool(self, from_number_pool):
        """Sets the from_number_pool of this Account.

        ~

        :param from_number_pool: The from_number_pool of this Account.
        :type from_number_pool: str
        """

        self._from_number_pool = from_number_pool

    @property
    def id(self):
        """Gets the id of this Account.

        An id of an account

        :return: The id of this Account.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Account.

        An id of an account

        :param id: The id of this Account.
        :type id: int
        """

        self._id = id

    @property
    def industry(self):
        """Gets the industry of this Account.

        ~

        :return: The industry of this Account.
        :rtype: str
        """
        return self._industry

    @industry.setter
    def industry(self, industry):
        """Sets the industry of this Account.

        ~

        :param industry: The industry of this Account.
        :type industry: str
        """
        allowed_values = ["UNKNOWN", "ADVERTISING", "AUTOMOTIVE", "COLLECTIONS", "CONSULTING", "DECLINE", "EDUCATION", "EMERGENCY", "ENTERTAINMENT", "FINANCE", "HOSPITALITY", "HEALTHFITNESS", "HEALTHCARE", "INSURANCE", "LEAD", "OTHER", "POLITICAL", "REAL_ESTATE", "RETAIL", "SEARCH_MARKETING", "TELECOM"]  # noqa: E501
        if industry not in allowed_values:
            raise ValueError(
                "Invalid value for `industry` ({0}), must be one of {1}"
                .format(industry, allowed_values)
            )

        self._industry = industry

    @property
    def industry_name(self):
        """Gets the industry_name of this Account.

        ~

        :return: The industry_name of this Account.
        :rtype: str
        """
        return self._industry_name

    @industry_name.setter
    def industry_name(self, industry_name):
        """Sets the industry_name of this Account.

        ~

        :param industry_name: The industry_name of this Account.
        :type industry_name: str
        """

        self._industry_name = industry_name

    @property
    def key(self):
        """Gets the key of this Account.

        ~

        :return: The key of this Account.
        :rtype: str
        """
        return self._key

    @key.setter
    def key(self, key):
        """Sets the key of this Account.

        ~

        :param key: The key of this Account.
        :type key: str
        """

        self._key = key

    @property
    def local_time_zone_restriction(self):
        """Gets the local_time_zone_restriction of this Account.


        :return: The local_time_zone_restriction of this Account.
        :rtype: LocalTimeZoneRestriction
        """
        return self._local_time_zone_restriction

    @local_time_zone_restriction.setter
    def local_time_zone_restriction(self, local_time_zone_restriction):
        """Sets the local_time_zone_restriction of this Account.


        :param local_time_zone_restriction: The local_time_zone_restriction of this Account.
        :type local_time_zone_restriction: LocalTimeZoneRestriction
        """

        self._local_time_zone_restriction = local_time_zone_restriction

    @property
    def locale(self):
        """Gets the locale of this Account.


        :return: The locale of this Account.
        :rtype: Locale
        """
        return self._locale

    @locale.setter
    def locale(self, locale):
        """Sets the locale of this Account.


        :param locale: The locale of this Account.
        :type locale: Locale
        """

        self._locale = locale

    @property
    def max_agents(self):
        """Gets the max_agents of this Account.

        ~

        :return: The max_agents of this Account.
        :rtype: int
        """
        return self._max_agents

    @max_agents.setter
    def max_agents(self, max_agents):
        """Sets the max_agents of this Account.

        ~

        :param max_agents: The max_agents of this Account.
        :type max_agents: int
        """

        self._max_agents = max_agents

    @property
    def message_class(self):
        """Gets the message_class of this Account.

        ~

        :return: The message_class of this Account.
        :rtype: str
        """
        return self._message_class

    @message_class.setter
    def message_class(self, message_class):
        """Sets the message_class of this Account.

        ~

        :param message_class: The message_class of this Account.
        :type message_class: str
        """

        self._message_class = message_class

    @property
    def message_flows(self):
        """Gets the message_flows of this Account.

        ~

        :return: The message_flows of this Account.
        :rtype: list[str]
        """
        return self._message_flows

    @message_flows.setter
    def message_flows(self, message_flows):
        """Sets the message_flows of this Account.

        ~

        :param message_flows: The message_flows of this Account.
        :type message_flows: list[str]
        """

        self._message_flows = message_flows

    @property
    def name(self):
        """Gets the name of this Account.

        Name associated with an account

        :return: The name of this Account.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Account.

        Name associated with an account

        :param name: The name of this Account.
        :type name: str
        """

        self._name = name

    @property
    def outbound_threshold(self):
        """Gets the outbound_threshold of this Account.

        ~

        :return: The outbound_threshold of this Account.
        :rtype: int
        """
        return self._outbound_threshold

    @outbound_threshold.setter
    def outbound_threshold(self, outbound_threshold):
        """Sets the outbound_threshold of this Account.

        ~

        :param outbound_threshold: The outbound_threshold of this Account.
        :type outbound_threshold: int
        """

        self._outbound_threshold = outbound_threshold

    @property
    def receiver_period_call(self):
        """Gets the receiver_period_call of this Account.

        ~

        :return: The receiver_period_call of this Account.
        :rtype: int
        """
        return self._receiver_period_call

    @receiver_period_call.setter
    def receiver_period_call(self, receiver_period_call):
        """Sets the receiver_period_call of this Account.

        ~

        :param receiver_period_call: The receiver_period_call of this Account.
        :type receiver_period_call: int
        """

        self._receiver_period_call = receiver_period_call

    @property
    def receiver_period_enabled(self):
        """Gets the receiver_period_enabled of this Account.

        ~

        :return: The receiver_period_enabled of this Account.
        :rtype: bool
        """
        return self._receiver_period_enabled

    @receiver_period_enabled.setter
    def receiver_period_enabled(self, receiver_period_enabled):
        """Sets the receiver_period_enabled of this Account.

        ~

        :param receiver_period_enabled: The receiver_period_enabled of this Account.
        :type receiver_period_enabled: bool
        """

        self._receiver_period_enabled = receiver_period_enabled

    @property
    def receiver_period_global(self):
        """Gets the receiver_period_global of this Account.

        ~

        :return: The receiver_period_global of this Account.
        :rtype: int
        """
        return self._receiver_period_global

    @receiver_period_global.setter
    def receiver_period_global(self, receiver_period_global):
        """Sets the receiver_period_global of this Account.

        ~

        :param receiver_period_global: The receiver_period_global of this Account.
        :type receiver_period_global: int
        """

        self._receiver_period_global = receiver_period_global

    @property
    def receiver_period_text(self):
        """Gets the receiver_period_text of this Account.

        ~

        :return: The receiver_period_text of this Account.
        :rtype: int
        """
        return self._receiver_period_text

    @receiver_period_text.setter
    def receiver_period_text(self, receiver_period_text):
        """Sets the receiver_period_text of this Account.

        ~

        :param receiver_period_text: The receiver_period_text of this Account.
        :type receiver_period_text: int
        """

        self._receiver_period_text = receiver_period_text

    @property
    def receiver_period_time_unit(self):
        """Gets the receiver_period_time_unit of this Account.

        ~

        :return: The receiver_period_time_unit of this Account.
        :rtype: str
        """
        return self._receiver_period_time_unit

    @receiver_period_time_unit.setter
    def receiver_period_time_unit(self, receiver_period_time_unit):
        """Sets the receiver_period_time_unit of this Account.

        ~

        :param receiver_period_time_unit: The receiver_period_time_unit of this Account.
        :type receiver_period_time_unit: str
        """
        allowed_values = ["NANOSECONDS", "MICROSECONDS", "MILLISECONDS", "SECONDS", "MINUTES", "HOURS", "DAYS"]  # noqa: E501
        if receiver_period_time_unit not in allowed_values:
            raise ValueError(
                "Invalid value for `receiver_period_time_unit` ({0}), must be one of {1}"
                .format(receiver_period_time_unit, allowed_values)
            )

        self._receiver_period_time_unit = receiver_period_time_unit

    @property
    def retain_only_metadata(self):
        """Gets the retain_only_metadata of this Account.

        ~

        :return: The retain_only_metadata of this Account.
        :rtype: bool
        """
        return self._retain_only_metadata

    @retain_only_metadata.setter
    def retain_only_metadata(self, retain_only_metadata):
        """Sets the retain_only_metadata of this Account.

        ~

        :param retain_only_metadata: The retain_only_metadata of this Account.
        :type retain_only_metadata: bool
        """

        self._retain_only_metadata = retain_only_metadata

    @property
    def retain_only_metadata_last_detail_record_id(self):
        """Gets the retain_only_metadata_last_detail_record_id of this Account.

        ~

        :return: The retain_only_metadata_last_detail_record_id of this Account.
        :rtype: int
        """
        return self._retain_only_metadata_last_detail_record_id

    @retain_only_metadata_last_detail_record_id.setter
    def retain_only_metadata_last_detail_record_id(self, retain_only_metadata_last_detail_record_id):
        """Sets the retain_only_metadata_last_detail_record_id of this Account.

        ~

        :param retain_only_metadata_last_detail_record_id: The retain_only_metadata_last_detail_record_id of this Account.
        :type retain_only_metadata_last_detail_record_id: int
        """

        self._retain_only_metadata_last_detail_record_id = retain_only_metadata_last_detail_record_id

    @property
    def retain_only_metadata_last_modified(self):
        """Gets the retain_only_metadata_last_modified of this Account.

        ~

        :return: The retain_only_metadata_last_modified of this Account.
        :rtype: datetime
        """
        return self._retain_only_metadata_last_modified

    @retain_only_metadata_last_modified.setter
    def retain_only_metadata_last_modified(self, retain_only_metadata_last_modified):
        """Sets the retain_only_metadata_last_modified of this Account.

        ~

        :param retain_only_metadata_last_modified: The retain_only_metadata_last_modified of this Account.
        :type retain_only_metadata_last_modified: datetime
        """

        self._retain_only_metadata_last_modified = retain_only_metadata_last_modified

    @property
    def scrub(self):
        """Gets the scrub of this Account.

        ~

        :return: The scrub of this Account.
        :rtype: bool
        """
        return self._scrub

    @scrub.setter
    def scrub(self, scrub):
        """Sets the scrub of this Account.

        ~

        :param scrub: The scrub of this Account.
        :type scrub: bool
        """

        self._scrub = scrub

    @property
    def shared_short_code_allowed(self):
        """Gets the shared_short_code_allowed of this Account.

        ~

        :return: The shared_short_code_allowed of this Account.
        :rtype: bool
        """
        return self._shared_short_code_allowed

    @shared_short_code_allowed.setter
    def shared_short_code_allowed(self, shared_short_code_allowed):
        """Sets the shared_short_code_allowed of this Account.

        ~

        :param shared_short_code_allowed: The shared_short_code_allowed of this Account.
        :type shared_short_code_allowed: bool
        """

        self._shared_short_code_allowed = shared_short_code_allowed

    @property
    def shared_short_code_id(self):
        """Gets the shared_short_code_id of this Account.

        ~

        :return: The shared_short_code_id of this Account.
        :rtype: int
        """
        return self._shared_short_code_id

    @shared_short_code_id.setter
    def shared_short_code_id(self, shared_short_code_id):
        """Sets the shared_short_code_id of this Account.

        ~

        :param shared_short_code_id: The shared_short_code_id of this Account.
        :type shared_short_code_id: int
        """

        self._shared_short_code_id = shared_short_code_id

    @property
    def soa_account(self):
        """Gets the soa_account of this Account.


        :return: The soa_account of this Account.
        :rtype: Account
        """
        return self._soa_account

    @soa_account.setter
    def soa_account(self, soa_account):
        """Sets the soa_account of this Account.


        :param soa_account: The soa_account of this Account.
        :type soa_account: Account
        """

        self._soa_account = soa_account

    @property
    def start_capable(self):
        """Gets the start_capable of this Account.

        ~

        :return: The start_capable of this Account.
        :rtype: bool
        """
        return self._start_capable

    @start_capable.setter
    def start_capable(self, start_capable):
        """Sets the start_capable of this Account.

        ~

        :param start_capable: The start_capable of this Account.
        :type start_capable: bool
        """

        self._start_capable = start_capable

    @property
    def state(self):
        """Gets the state of this Account.

        ~

        :return: The state of this Account.
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this Account.

        ~

        :param state: The state of this Account.
        :type state: str
        """

        self._state = state

    @property
    def status(self):
        """Gets the status of this Account.

        ~

        :return: The status of this Account.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this Account.

        ~

        :param status: The status of this Account.
        :type status: str
        """
        allowed_values = ["ACTIVE", "PENDING_CANCELLED", "CANCELLED", "ARCHIVING", "ARCHIVED"]  # noqa: E501
        if status not in allowed_values:
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"
                .format(status, allowed_values)
            )

        self._status = status

    @property
    def text_outbound_threshold(self):
        """Gets the text_outbound_threshold of this Account.

        ~

        :return: The text_outbound_threshold of this Account.
        :rtype: int
        """
        return self._text_outbound_threshold

    @text_outbound_threshold.setter
    def text_outbound_threshold(self, text_outbound_threshold):
        """Sets the text_outbound_threshold of this Account.

        ~

        :param text_outbound_threshold: The text_outbound_threshold of this Account.
        :type text_outbound_threshold: int
        """

        self._text_outbound_threshold = text_outbound_threshold

    @property
    def time_zone(self):
        """Gets the time_zone of this Account.


        :return: The time_zone of this Account.
        :rtype: TimeZone
        """
        return self._time_zone

    @time_zone.setter
    def time_zone(self, time_zone):
        """Sets the time_zone of this Account.


        :param time_zone: The time_zone of this Account.
        :type time_zone: TimeZone
        """

        self._time_zone = time_zone

    @property
    def time_zone_id(self):
        """Gets the time_zone_id of this Account.


        :return: The time_zone_id of this Account.
        :rtype: ZoneId
        """
        return self._time_zone_id

    @time_zone_id.setter
    def time_zone_id(self, time_zone_id):
        """Sets the time_zone_id of this Account.


        :param time_zone_id: The time_zone_id of this Account.
        :type time_zone_id: ZoneId
        """

        self._time_zone_id = time_zone_id

    @property
    def trust_level(self):
        """Gets the trust_level of this Account.

        ~

        :return: The trust_level of this Account.
        :rtype: str
        """
        return self._trust_level

    @trust_level.setter
    def trust_level(self, trust_level):
        """Sets the trust_level of this Account.

        ~

        :param trust_level: The trust_level of this Account.
        :type trust_level: str
        """
        allowed_values = ["LOCKED", "SUSPENDED", "PROBATION", "NORMAL", "TRUSTED"]  # noqa: E501
        if trust_level not in allowed_values:
            raise ValueError(
                "Invalid value for `trust_level` ({0}), must be one of {1}"
                .format(trust_level, allowed_values)
            )

        self._trust_level = trust_level

    @property
    def tsr_agreement(self):
        """Gets the tsr_agreement of this Account.

        ~

        :return: The tsr_agreement of this Account.
        :rtype: datetime
        """
        return self._tsr_agreement

    @tsr_agreement.setter
    def tsr_agreement(self, tsr_agreement):
        """Sets the tsr_agreement of this Account.

        ~

        :param tsr_agreement: The tsr_agreement of this Account.
        :type tsr_agreement: datetime
        """

        self._tsr_agreement = tsr_agreement

    @property
    def tsr_initials(self):
        """Gets the tsr_initials of this Account.

        ~

        :return: The tsr_initials of this Account.
        :rtype: str
        """
        return self._tsr_initials

    @tsr_initials.setter
    def tsr_initials(self, tsr_initials):
        """Sets the tsr_initials of this Account.

        ~

        :param tsr_initials: The tsr_initials of this Account.
        :type tsr_initials: str
        """

        self._tsr_initials = tsr_initials

    @property
    def ui_context(self):
        """Gets the ui_context of this Account.

        ~

        :return: The ui_context of this Account.
        :rtype: str
        """
        return self._ui_context

    @ui_context.setter
    def ui_context(self, ui_context):
        """Sets the ui_context of this Account.

        ~

        :param ui_context: The ui_context of this Account.
        :type ui_context: str
        """

        self._ui_context = ui_context

    @property
    def universal(self):
        """Gets the universal of this Account.

        ~

        :return: The universal of this Account.
        :rtype: bool
        """
        return self._universal

    @universal.setter
    def universal(self, universal):
        """Sets the universal of this Account.

        ~

        :param universal: The universal of this Account.
        :type universal: bool
        """

        self._universal = universal

    @property
    def website(self):
        """Gets the website of this Account.

        ~

        :return: The website of this Account.
        :rtype: str
        """
        return self._website

    @website.setter
    def website(self, website):
        """Sets the website of this Account.

        ~

        :param website: The website of this Account.
        :type website: str
        """

        self._website = website

    @property
    def zipcode(self):
        """Gets the zipcode of this Account.

        ~

        :return: The zipcode of this Account.
        :rtype: str
        """
        return self._zipcode

    @zipcode.setter
    def zipcode(self, zipcode):
        """Sets the zipcode of this Account.

        ~

        :param zipcode: The zipcode of this Account.
        :type zipcode: str
        """

        self._zipcode = zipcode
