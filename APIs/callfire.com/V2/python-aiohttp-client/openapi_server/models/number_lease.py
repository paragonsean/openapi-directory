# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.region import Region
from openapi_server import util


class NumberLease(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, auto_renew: bool=None, call_feature_status: str=None, labels: List[str]=None, lease_begin: int=None, lease_end: int=None, national_format: str=None, number: str=None, region: Region=None, send_email_on_create: bool=None, status: str=None, text_feature_status: str=None, toll_free: bool=None, type: str=None):
        """NumberLease - a model defined in OpenAPI

        :param auto_renew: The auto_renew of this NumberLease.
        :param call_feature_status: The call_feature_status of this NumberLease.
        :param labels: The labels of this NumberLease.
        :param lease_begin: The lease_begin of this NumberLease.
        :param lease_end: The lease_end of this NumberLease.
        :param national_format: The national_format of this NumberLease.
        :param number: The number of this NumberLease.
        :param region: The region of this NumberLease.
        :param send_email_on_create: The send_email_on_create of this NumberLease.
        :param status: The status of this NumberLease.
        :param text_feature_status: The text_feature_status of this NumberLease.
        :param toll_free: The toll_free of this NumberLease.
        :param type: The type of this NumberLease.
        """
        self.openapi_types = {
            'auto_renew': bool,
            'call_feature_status': str,
            'labels': List[str],
            'lease_begin': int,
            'lease_end': int,
            'national_format': str,
            'number': str,
            'region': Region,
            'send_email_on_create': bool,
            'status': str,
            'text_feature_status': str,
            'toll_free': bool,
            'type': str
        }

        self.attribute_map = {
            'auto_renew': 'autoRenew',
            'call_feature_status': 'callFeatureStatus',
            'labels': 'labels',
            'lease_begin': 'leaseBegin',
            'lease_end': 'leaseEnd',
            'national_format': 'nationalFormat',
            'number': 'number',
            'region': 'region',
            'send_email_on_create': 'sendEmailOnCreate',
            'status': 'status',
            'text_feature_status': 'textFeatureStatus',
            'toll_free': 'tollFree',
            'type': 'type'
        }

        self._auto_renew = auto_renew
        self._call_feature_status = call_feature_status
        self._labels = labels
        self._lease_begin = lease_begin
        self._lease_end = lease_end
        self._national_format = national_format
        self._number = number
        self._region = region
        self._send_email_on_create = send_email_on_create
        self._status = status
        self._text_feature_status = text_feature_status
        self._toll_free = toll_free
        self._type = type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'NumberLease':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The NumberLease of this NumberLease.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def auto_renew(self):
        """Gets the auto_renew of this NumberLease.

        Enables the auto renewal of number lease at end of each billing cycle

        :return: The auto_renew of this NumberLease.
        :rtype: bool
        """
        return self._auto_renew

    @auto_renew.setter
    def auto_renew(self, auto_renew):
        """Sets the auto_renew of this NumberLease.

        Enables the auto renewal of number lease at end of each billing cycle

        :param auto_renew: The auto_renew of this NumberLease.
        :type auto_renew: bool
        """

        self._auto_renew = auto_renew

    @property
    def call_feature_status(self):
        """Gets the call_feature_status of this NumberLease.

        A status of a call feature. Available values: DISABLED, ENABLED

        :return: The call_feature_status of this NumberLease.
        :rtype: str
        """
        return self._call_feature_status

    @call_feature_status.setter
    def call_feature_status(self, call_feature_status):
        """Sets the call_feature_status of this NumberLease.

        A status of a call feature. Available values: DISABLED, ENABLED

        :param call_feature_status: The call_feature_status of this NumberLease.
        :type call_feature_status: str
        """
        allowed_values = ["UNSUPPORTED", "PENDING", "DISABLED", "ENABLED"]  # noqa: E501
        if call_feature_status not in allowed_values:
            raise ValueError(
                "Invalid value for `call_feature_status` ({0}), must be one of {1}"
                .format(call_feature_status, allowed_values)
            )

        self._call_feature_status = call_feature_status

    @property
    def labels(self):
        """Gets the labels of this NumberLease.

        ~

        :return: The labels of this NumberLease.
        :rtype: List[str]
        """
        return self._labels

    @labels.setter
    def labels(self, labels):
        """Sets the labels of this NumberLease.

        ~

        :param labels: The labels of this NumberLease.
        :type labels: List[str]
        """

        self._labels = labels

    @property
    def lease_begin(self):
        """Gets the lease_begin of this NumberLease.

        A date and time of a lease start. Timestamp, formatted in unix time milliseconds (read only). Example: 1473781817000

        :return: The lease_begin of this NumberLease.
        :rtype: int
        """
        return self._lease_begin

    @lease_begin.setter
    def lease_begin(self, lease_begin):
        """Sets the lease_begin of this NumberLease.

        A date and time of a lease start. Timestamp, formatted in unix time milliseconds (read only). Example: 1473781817000

        :param lease_begin: The lease_begin of this NumberLease.
        :type lease_begin: int
        """

        self._lease_begin = lease_begin

    @property
    def lease_end(self):
        """Gets the lease_end of this NumberLease.

        A data and time of a lease finish. Timestamp, formatted in unix time milliseconds (read only). Example: 1473781817000

        :return: The lease_end of this NumberLease.
        :rtype: int
        """
        return self._lease_end

    @lease_end.setter
    def lease_end(self, lease_end):
        """Sets the lease_end of this NumberLease.

        A data and time of a lease finish. Timestamp, formatted in unix time milliseconds (read only). Example: 1473781817000

        :param lease_end: The lease_end of this NumberLease.
        :type lease_end: int
        """

        self._lease_end = lease_end

    @property
    def national_format(self):
        """Gets the national_format of this NumberLease.

        Formatted number with a country code

        :return: The national_format of this NumberLease.
        :rtype: str
        """
        return self._national_format

    @national_format.setter
    def national_format(self, national_format):
        """Sets the national_format of this NumberLease.

        Formatted number with a country code

        :param national_format: The national_format of this NumberLease.
        :type national_format: str
        """

        self._national_format = national_format

    @property
    def number(self):
        """Gets the number of this NumberLease.

        A phone number in E.164 format (11-digit). Example: 12132000384

        :return: The number of this NumberLease.
        :rtype: str
        """
        return self._number

    @number.setter
    def number(self, number):
        """Sets the number of this NumberLease.

        A phone number in E.164 format (11-digit). Example: 12132000384

        :param number: The number of this NumberLease.
        :type number: str
        """

        self._number = number

    @property
    def region(self):
        """Gets the region of this NumberLease.


        :return: The region of this NumberLease.
        :rtype: Region
        """
        return self._region

    @region.setter
    def region(self, region):
        """Sets the region of this NumberLease.


        :param region: The region of this NumberLease.
        :type region: Region
        """

        self._region = region

    @property
    def send_email_on_create(self):
        """Gets the send_email_on_create of this NumberLease.

        ~

        :return: The send_email_on_create of this NumberLease.
        :rtype: bool
        """
        return self._send_email_on_create

    @send_email_on_create.setter
    def send_email_on_create(self, send_email_on_create):
        """Sets the send_email_on_create of this NumberLease.

        ~

        :param send_email_on_create: The send_email_on_create of this NumberLease.
        :type send_email_on_create: bool
        """

        self._send_email_on_create = send_email_on_create

    @property
    def status(self):
        """Gets the status of this NumberLease.

        A lease status. Available values: PENDING, ACTIVE, RELEASED, UNAVAILABLE

        :return: The status of this NumberLease.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this NumberLease.

        A lease status. Available values: PENDING, ACTIVE, RELEASED, UNAVAILABLE

        :param status: The status of this NumberLease.
        :type status: str
        """
        allowed_values = ["PENDING", "ACTIVE", "RELEASED", "UNAVAILABLE"]  # noqa: E501
        if status not in allowed_values:
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"
                .format(status, allowed_values)
            )

        self._status = status

    @property
    def text_feature_status(self):
        """Gets the text_feature_status of this NumberLease.

        A status of a text feature. Available values: DISABLED, ENABLED

        :return: The text_feature_status of this NumberLease.
        :rtype: str
        """
        return self._text_feature_status

    @text_feature_status.setter
    def text_feature_status(self, text_feature_status):
        """Sets the text_feature_status of this NumberLease.

        A status of a text feature. Available values: DISABLED, ENABLED

        :param text_feature_status: The text_feature_status of this NumberLease.
        :type text_feature_status: str
        """
        allowed_values = ["UNSUPPORTED", "PENDING", "DISABLED", "ENABLED"]  # noqa: E501
        if text_feature_status not in allowed_values:
            raise ValueError(
                "Invalid value for `text_feature_status` ({0}), must be one of {1}"
                .format(text_feature_status, allowed_values)
            )

        self._text_feature_status = text_feature_status

    @property
    def toll_free(self):
        """Gets the toll_free of this NumberLease.

        A  toll-free number

        :return: The toll_free of this NumberLease.
        :rtype: bool
        """
        return self._toll_free

    @toll_free.setter
    def toll_free(self, toll_free):
        """Sets the toll_free of this NumberLease.

        A  toll-free number

        :param toll_free: The toll_free of this NumberLease.
        :type toll_free: bool
        """

        self._toll_free = toll_free

    @property
    def type(self):
        """Gets the type of this NumberLease.

        ~

        :return: The type of this NumberLease.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this NumberLease.

        ~

        :param type: The type of this NumberLease.
        :type type: str
        """
        allowed_values = ["PLAN", "EXTRA"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"
                .format(type, allowed_values)
            )

        self._type = type
