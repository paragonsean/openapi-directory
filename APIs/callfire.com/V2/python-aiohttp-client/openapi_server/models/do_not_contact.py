# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class DoNotContact(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, call: bool=None, campaign_id: int=None, created: int=None, inbound_call: bool=None, inbound_text: bool=None, number: str=None, source: str=None, text: bool=None):
        """DoNotContact - a model defined in OpenAPI

        :param call: The call of this DoNotContact.
        :param campaign_id: The campaign_id of this DoNotContact.
        :param created: The created of this DoNotContact.
        :param inbound_call: The inbound_call of this DoNotContact.
        :param inbound_text: The inbound_text of this DoNotContact.
        :param number: The number of this DoNotContact.
        :param source: The source of this DoNotContact.
        :param text: The text of this DoNotContact.
        """
        self.openapi_types = {
            'call': bool,
            'campaign_id': int,
            'created': int,
            'inbound_call': bool,
            'inbound_text': bool,
            'number': str,
            'source': str,
            'text': bool
        }

        self.attribute_map = {
            'call': 'call',
            'campaign_id': 'campaignId',
            'created': 'created',
            'inbound_call': 'inboundCall',
            'inbound_text': 'inboundText',
            'number': 'number',
            'source': 'source',
            'text': 'text'
        }

        self._call = call
        self._campaign_id = campaign_id
        self._created = created
        self._inbound_call = inbound_call
        self._inbound_text = inbound_text
        self._number = number
        self._source = source
        self._text = text

    @classmethod
    def from_dict(cls, dikt: dict) -> 'DoNotContact':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The DoNotContact of this DoNotContact.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def call(self):
        """Gets the call of this DoNotContact.

        A number on Do-Not-Call list

        :return: The call of this DoNotContact.
        :rtype: bool
        """
        return self._call

    @call.setter
    def call(self, call):
        """Sets the call of this DoNotContact.

        A number on Do-Not-Call list

        :param call: The call of this DoNotContact.
        :type call: bool
        """

        self._call = call

    @property
    def campaign_id(self):
        """Gets the campaign_id of this DoNotContact.

        An Id of a campaign which was used to send a message to DNC number

        :return: The campaign_id of this DoNotContact.
        :rtype: int
        """
        return self._campaign_id

    @campaign_id.setter
    def campaign_id(self, campaign_id):
        """Sets the campaign_id of this DoNotContact.

        An Id of a campaign which was used to send a message to DNC number

        :param campaign_id: The campaign_id of this DoNotContact.
        :type campaign_id: int
        """

        self._campaign_id = campaign_id

    @property
    def created(self):
        """Gets the created of this DoNotContact.

        A time when a given resource was created, formatted in unix time milliseconds (read only). Example: 1473781817000 for Sat, 05 Jan 1985 14:03:37 GMT

        :return: The created of this DoNotContact.
        :rtype: int
        """
        return self._created

    @created.setter
    def created(self, created):
        """Sets the created of this DoNotContact.

        A time when a given resource was created, formatted in unix time milliseconds (read only). Example: 1473781817000 for Sat, 05 Jan 1985 14:03:37 GMT

        :param created: The created of this DoNotContact.
        :type created: int
        """

        self._created = created

    @property
    def inbound_call(self):
        """Gets the inbound_call of this DoNotContact.

        ~

        :return: The inbound_call of this DoNotContact.
        :rtype: bool
        """
        return self._inbound_call

    @inbound_call.setter
    def inbound_call(self, inbound_call):
        """Sets the inbound_call of this DoNotContact.

        ~

        :param inbound_call: The inbound_call of this DoNotContact.
        :type inbound_call: bool
        """

        self._inbound_call = inbound_call

    @property
    def inbound_text(self):
        """Gets the inbound_text of this DoNotContact.

        ~

        :return: The inbound_text of this DoNotContact.
        :rtype: bool
        """
        return self._inbound_text

    @inbound_text.setter
    def inbound_text(self, inbound_text):
        """Sets the inbound_text of this DoNotContact.

        ~

        :param inbound_text: The inbound_text of this DoNotContact.
        :type inbound_text: bool
        """

        self._inbound_text = inbound_text

    @property
    def number(self):
        """Gets the number of this DoNotContact.

        A single DNC number in E.164 format (11-digit). Example: 12132000384

        :return: The number of this DoNotContact.
        :rtype: str
        """
        return self._number

    @number.setter
    def number(self, number):
        """Sets the number of this DoNotContact.

        A single DNC number in E.164 format (11-digit). Example: 12132000384

        :param number: The number of this DoNotContact.
        :type number: str
        """

        self._number = number

    @property
    def source(self):
        """Gets the source of this DoNotContact.

        The name of DNC source (can be the name of DNC list that user uploads to CallFire)

        :return: The source of this DoNotContact.
        :rtype: str
        """
        return self._source

    @source.setter
    def source(self, source):
        """Sets the source of this DoNotContact.

        The name of DNC source (can be the name of DNC list that user uploads to CallFire)

        :param source: The source of this DoNotContact.
        :type source: str
        """

        self._source = source

    @property
    def text(self):
        """Gets the text of this DoNotContact.

        A number on Do-Not-Text list

        :return: The text of this DoNotContact.
        :rtype: bool
        """
        return self._text

    @text.setter
    def text(self, text):
        """Sets the text of this DoNotContact.

        A number on Do-Not-Text list

        :param text: The text of this DoNotContact.
        :type text: bool
        """

        self._text = text
