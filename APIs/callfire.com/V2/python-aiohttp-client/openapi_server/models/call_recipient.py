# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class CallRecipient(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, attributes: Dict[str, str]=None, contact_id: int=None, dialplan_xml: str=None, from_number: str=None, live_message: str=None, live_message_sound_id: int=None, machine_message: str=None, machine_message_sound_id: int=None, phone_number: str=None, transfer_digit: str=None, transfer_message: str=None, transfer_message_sound_id: int=None, transfer_number: str=None, voice: str=None):
        """CallRecipient - a model defined in OpenAPI

        :param attributes: The attributes of this CallRecipient.
        :param contact_id: The contact_id of this CallRecipient.
        :param dialplan_xml: The dialplan_xml of this CallRecipient.
        :param from_number: The from_number of this CallRecipient.
        :param live_message: The live_message of this CallRecipient.
        :param live_message_sound_id: The live_message_sound_id of this CallRecipient.
        :param machine_message: The machine_message of this CallRecipient.
        :param machine_message_sound_id: The machine_message_sound_id of this CallRecipient.
        :param phone_number: The phone_number of this CallRecipient.
        :param transfer_digit: The transfer_digit of this CallRecipient.
        :param transfer_message: The transfer_message of this CallRecipient.
        :param transfer_message_sound_id: The transfer_message_sound_id of this CallRecipient.
        :param transfer_number: The transfer_number of this CallRecipient.
        :param voice: The voice of this CallRecipient.
        """
        self.openapi_types = {
            'attributes': Dict[str, str],
            'contact_id': int,
            'dialplan_xml': str,
            'from_number': str,
            'live_message': str,
            'live_message_sound_id': int,
            'machine_message': str,
            'machine_message_sound_id': int,
            'phone_number': str,
            'transfer_digit': str,
            'transfer_message': str,
            'transfer_message_sound_id': int,
            'transfer_number': str,
            'voice': str
        }

        self.attribute_map = {
            'attributes': 'attributes',
            'contact_id': 'contactId',
            'dialplan_xml': 'dialplanXml',
            'from_number': 'fromNumber',
            'live_message': 'liveMessage',
            'live_message_sound_id': 'liveMessageSoundId',
            'machine_message': 'machineMessage',
            'machine_message_sound_id': 'machineMessageSoundId',
            'phone_number': 'phoneNumber',
            'transfer_digit': 'transferDigit',
            'transfer_message': 'transferMessage',
            'transfer_message_sound_id': 'transferMessageSoundId',
            'transfer_number': 'transferNumber',
            'voice': 'voice'
        }

        self._attributes = attributes
        self._contact_id = contact_id
        self._dialplan_xml = dialplan_xml
        self._from_number = from_number
        self._live_message = live_message
        self._live_message_sound_id = live_message_sound_id
        self._machine_message = machine_message
        self._machine_message_sound_id = machine_message_sound_id
        self._phone_number = phone_number
        self._transfer_digit = transfer_digit
        self._transfer_message = transfer_message
        self._transfer_message_sound_id = transfer_message_sound_id
        self._transfer_number = transfer_number
        self._voice = voice

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CallRecipient':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CallRecipient of this CallRecipient.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def attributes(self):
        """Gets the attributes of this CallRecipient.

        Map of user-defined string attributes associated with recipient

        :return: The attributes of this CallRecipient.
        :rtype: Dict[str, str]
        """
        return self._attributes

    @attributes.setter
    def attributes(self, attributes):
        """Sets the attributes of this CallRecipient.

        Map of user-defined string attributes associated with recipient

        :param attributes: The attributes of this CallRecipient.
        :type attributes: Dict[str, str]
        """

        self._attributes = attributes

    @property
    def contact_id(self):
        """Gets the contact_id of this CallRecipient.

        An id of existing contact used as recipient

        :return: The contact_id of this CallRecipient.
        :rtype: int
        """
        return self._contact_id

    @contact_id.setter
    def contact_id(self, contact_id):
        """Sets the contact_id of this CallRecipient.

        An id of existing contact used as recipient

        :param contact_id: The contact_id of this CallRecipient.
        :type contact_id: int
        """

        self._contact_id = contact_id

    @property
    def dialplan_xml(self):
        """Gets the dialplan_xml of this CallRecipient.

        An IVR xml document describing dialplan to setup an IVR broadcast. If dialplan is set there is no need to set live, machine and transfer sounds (or vice versa)

        :return: The dialplan_xml of this CallRecipient.
        :rtype: str
        """
        return self._dialplan_xml

    @dialplan_xml.setter
    def dialplan_xml(self, dialplan_xml):
        """Sets the dialplan_xml of this CallRecipient.

        An IVR xml document describing dialplan to setup an IVR broadcast. If dialplan is set there is no need to set live, machine and transfer sounds (or vice versa)

        :param dialplan_xml: The dialplan_xml of this CallRecipient.
        :type dialplan_xml: str
        """

        self._dialplan_xml = dialplan_xml

    @property
    def from_number(self):
        """Gets the from_number of this CallRecipient.

        ~

        :return: The from_number of this CallRecipient.
        :rtype: str
        """
        return self._from_number

    @from_number.setter
    def from_number(self, from_number):
        """Sets the from_number of this CallRecipient.

        ~

        :param from_number: The from_number of this CallRecipient.
        :type from_number: str
        """

        self._from_number = from_number

    @property
    def live_message(self):
        """Gets the live_message of this CallRecipient.

        Text to be turned into a sound, this text will be played when the phone is answered

        :return: The live_message of this CallRecipient.
        :rtype: str
        """
        return self._live_message

    @live_message.setter
    def live_message(self, live_message):
        """Sets the live_message of this CallRecipient.

        Text to be turned into a sound, this text will be played when the phone is answered

        :param live_message: The live_message of this CallRecipient.
        :type live_message: str
        """

        self._live_message = live_message

    @property
    def live_message_sound_id(self):
        """Gets the live_message_sound_id of this CallRecipient.

        An id of a sound file to play if phone is answered

        :return: The live_message_sound_id of this CallRecipient.
        :rtype: int
        """
        return self._live_message_sound_id

    @live_message_sound_id.setter
    def live_message_sound_id(self, live_message_sound_id):
        """Sets the live_message_sound_id of this CallRecipient.

        An id of a sound file to play if phone is answered

        :param live_message_sound_id: The live_message_sound_id of this CallRecipient.
        :type live_message_sound_id: int
        """

        self._live_message_sound_id = live_message_sound_id

    @property
    def machine_message(self):
        """Gets the machine_message of this CallRecipient.

        Text to be used to turn into sound, this text will be played when answering machine is detected

        :return: The machine_message of this CallRecipient.
        :rtype: str
        """
        return self._machine_message

    @machine_message.setter
    def machine_message(self, machine_message):
        """Sets the machine_message of this CallRecipient.

        Text to be used to turn into sound, this text will be played when answering machine is detected

        :param machine_message: The machine_message of this CallRecipient.
        :type machine_message: str
        """

        self._machine_message = machine_message

    @property
    def machine_message_sound_id(self):
        """Gets the machine_message_sound_id of this CallRecipient.

        An id of a sound file to play if answering machine is detected

        :return: The machine_message_sound_id of this CallRecipient.
        :rtype: int
        """
        return self._machine_message_sound_id

    @machine_message_sound_id.setter
    def machine_message_sound_id(self, machine_message_sound_id):
        """Sets the machine_message_sound_id of this CallRecipient.

        An id of a sound file to play if answering machine is detected

        :param machine_message_sound_id: The machine_message_sound_id of this CallRecipient.
        :type machine_message_sound_id: int
        """

        self._machine_message_sound_id = machine_message_sound_id

    @property
    def phone_number(self):
        """Gets the phone_number of this CallRecipient.

        Recipient's phone number in E.164 format (11-digit) or short code. Example: 12132000384

        :return: The phone_number of this CallRecipient.
        :rtype: str
        """
        return self._phone_number

    @phone_number.setter
    def phone_number(self, phone_number):
        """Sets the phone_number of this CallRecipient.

        Recipient's phone number in E.164 format (11-digit) or short code. Example: 12132000384

        :param phone_number: The phone_number of this CallRecipient.
        :type phone_number: str
        """

        self._phone_number = phone_number

    @property
    def transfer_digit(self):
        """Gets the transfer_digit of this CallRecipient.

        A digit pressed to initiate the transfer

        :return: The transfer_digit of this CallRecipient.
        :rtype: str
        """
        return self._transfer_digit

    @transfer_digit.setter
    def transfer_digit(self, transfer_digit):
        """Sets the transfer_digit of this CallRecipient.

        A digit pressed to initiate the transfer

        :param transfer_digit: The transfer_digit of this CallRecipient.
        :type transfer_digit: str
        """

        self._transfer_digit = transfer_digit

    @property
    def transfer_message(self):
        """Gets the transfer_message of this CallRecipient.

        Text to be turned into sound, this text will be played when the transfer digit is played

        :return: The transfer_message of this CallRecipient.
        :rtype: str
        """
        return self._transfer_message

    @transfer_message.setter
    def transfer_message(self, transfer_message):
        """Sets the transfer_message of this CallRecipient.

        Text to be turned into sound, this text will be played when the transfer digit is played

        :param transfer_message: The transfer_message of this CallRecipient.
        :type transfer_message: str
        """

        self._transfer_message = transfer_message

    @property
    def transfer_message_sound_id(self):
        """Gets the transfer_message_sound_id of this CallRecipient.

        An id of a sound file to play if call is transferred

        :return: The transfer_message_sound_id of this CallRecipient.
        :rtype: int
        """
        return self._transfer_message_sound_id

    @transfer_message_sound_id.setter
    def transfer_message_sound_id(self, transfer_message_sound_id):
        """Sets the transfer_message_sound_id of this CallRecipient.

        An id of a sound file to play if call is transferred

        :param transfer_message_sound_id: The transfer_message_sound_id of this CallRecipient.
        :type transfer_message_sound_id: int
        """

        self._transfer_message_sound_id = transfer_message_sound_id

    @property
    def transfer_number(self):
        """Gets the transfer_number of this CallRecipient.

        Phone number in E.164 format (11-digit) to transfer the call to. Example: 12132000384

        :return: The transfer_number of this CallRecipient.
        :rtype: str
        """
        return self._transfer_number

    @transfer_number.setter
    def transfer_number(self, transfer_number):
        """Sets the transfer_number of this CallRecipient.

        Phone number in E.164 format (11-digit) to transfer the call to. Example: 12132000384

        :param transfer_number: The transfer_number of this CallRecipient.
        :type transfer_number: str
        """

        self._transfer_number = transfer_number

    @property
    def voice(self):
        """Gets the voice of this CallRecipient.

        The voice to be used (MALE1, FEMALE1, FEMALE2, SPANISH1, FRENCHCANADIAN1)

        :return: The voice of this CallRecipient.
        :rtype: str
        """
        return self._voice

    @voice.setter
    def voice(self, voice):
        """Sets the voice of this CallRecipient.

        The voice to be used (MALE1, FEMALE1, FEMALE2, SPANISH1, FRENCHCANADIAN1)

        :param voice: The voice of this CallRecipient.
        :type voice: str
        """
        allowed_values = ["MALE1", "FEMALE1", "FEMALE2", "SPANISH1", "FRENCHCANADIAN1"]  # noqa: E501
        if voice not in allowed_values:
            raise ValueError(
                "Invalid value for `voice` ({0}), must be one of {1}"
                .format(voice, allowed_values)
            )

        self._voice = voice
