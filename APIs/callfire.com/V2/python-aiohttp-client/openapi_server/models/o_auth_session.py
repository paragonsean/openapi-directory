# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class OAuthSession(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, account_id: str=None, actor: OAuthSession=None, brand: str=None, client_id: str=None, email: str=None, expires: datetime=None, grant_type: str=None, id: str=None, ip_address: str=None, issued: datetime=None, scope: str=None, sid: int=None, user_id: str=None, username: str=None, verification_required: bool=None):
        """OAuthSession - a model defined in OpenAPI

        :param account_id: The account_id of this OAuthSession.
        :param actor: The actor of this OAuthSession.
        :param brand: The brand of this OAuthSession.
        :param client_id: The client_id of this OAuthSession.
        :param email: The email of this OAuthSession.
        :param expires: The expires of this OAuthSession.
        :param grant_type: The grant_type of this OAuthSession.
        :param id: The id of this OAuthSession.
        :param ip_address: The ip_address of this OAuthSession.
        :param issued: The issued of this OAuthSession.
        :param scope: The scope of this OAuthSession.
        :param sid: The sid of this OAuthSession.
        :param user_id: The user_id of this OAuthSession.
        :param username: The username of this OAuthSession.
        :param verification_required: The verification_required of this OAuthSession.
        """
        self.openapi_types = {
            'account_id': str,
            'actor': OAuthSession,
            'brand': str,
            'client_id': str,
            'email': str,
            'expires': datetime,
            'grant_type': str,
            'id': str,
            'ip_address': str,
            'issued': datetime,
            'scope': str,
            'sid': int,
            'user_id': str,
            'username': str,
            'verification_required': bool
        }

        self.attribute_map = {
            'account_id': 'accountId',
            'actor': 'actor',
            'brand': 'brand',
            'client_id': 'clientId',
            'email': 'email',
            'expires': 'expires',
            'grant_type': 'grantType',
            'id': 'id',
            'ip_address': 'ipAddress',
            'issued': 'issued',
            'scope': 'scope',
            'sid': 'sid',
            'user_id': 'userId',
            'username': 'username',
            'verification_required': 'verificationRequired'
        }

        self._account_id = account_id
        self._actor = actor
        self._brand = brand
        self._client_id = client_id
        self._email = email
        self._expires = expires
        self._grant_type = grant_type
        self._id = id
        self._ip_address = ip_address
        self._issued = issued
        self._scope = scope
        self._sid = sid
        self._user_id = user_id
        self._username = username
        self._verification_required = verification_required

    @classmethod
    def from_dict(cls, dikt: dict) -> 'OAuthSession':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The OAuthSession of this OAuthSession.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def account_id(self):
        """Gets the account_id of this OAuthSession.

        ~

        :return: The account_id of this OAuthSession.
        :rtype: str
        """
        return self._account_id

    @account_id.setter
    def account_id(self, account_id):
        """Sets the account_id of this OAuthSession.

        ~

        :param account_id: The account_id of this OAuthSession.
        :type account_id: str
        """

        self._account_id = account_id

    @property
    def actor(self):
        """Gets the actor of this OAuthSession.


        :return: The actor of this OAuthSession.
        :rtype: OAuthSession
        """
        return self._actor

    @actor.setter
    def actor(self, actor):
        """Sets the actor of this OAuthSession.


        :param actor: The actor of this OAuthSession.
        :type actor: OAuthSession
        """

        self._actor = actor

    @property
    def brand(self):
        """Gets the brand of this OAuthSession.

        ~

        :return: The brand of this OAuthSession.
        :rtype: str
        """
        return self._brand

    @brand.setter
    def brand(self, brand):
        """Sets the brand of this OAuthSession.

        ~

        :param brand: The brand of this OAuthSession.
        :type brand: str
        """
        allowed_values = ["EZTEXTING", "CLUBTEXTING", "GROUPTEXTING", "TELLMYCELL", "EZ", "CALLFIRE", "TESLA"]  # noqa: E501
        if brand not in allowed_values:
            raise ValueError(
                "Invalid value for `brand` ({0}), must be one of {1}"
                .format(brand, allowed_values)
            )

        self._brand = brand

    @property
    def client_id(self):
        """Gets the client_id of this OAuthSession.

        ~

        :return: The client_id of this OAuthSession.
        :rtype: str
        """
        return self._client_id

    @client_id.setter
    def client_id(self, client_id):
        """Sets the client_id of this OAuthSession.

        ~

        :param client_id: The client_id of this OAuthSession.
        :type client_id: str
        """

        self._client_id = client_id

    @property
    def email(self):
        """Gets the email of this OAuthSession.

        ~

        :return: The email of this OAuthSession.
        :rtype: str
        """
        return self._email

    @email.setter
    def email(self, email):
        """Sets the email of this OAuthSession.

        ~

        :param email: The email of this OAuthSession.
        :type email: str
        """

        self._email = email

    @property
    def expires(self):
        """Gets the expires of this OAuthSession.

        ~

        :return: The expires of this OAuthSession.
        :rtype: datetime
        """
        return self._expires

    @expires.setter
    def expires(self, expires):
        """Sets the expires of this OAuthSession.

        ~

        :param expires: The expires of this OAuthSession.
        :type expires: datetime
        """

        self._expires = expires

    @property
    def grant_type(self):
        """Gets the grant_type of this OAuthSession.

        ~

        :return: The grant_type of this OAuthSession.
        :rtype: str
        """
        return self._grant_type

    @grant_type.setter
    def grant_type(self, grant_type):
        """Sets the grant_type of this OAuthSession.

        ~

        :param grant_type: The grant_type of this OAuthSession.
        :type grant_type: str
        """
        allowed_values = ["AUTHORIZATION_CODE", "PASSWORD", "REFRESH_TOKEN", "CLIENT_CREDENTIALS", "JWT_BEARER", "IMPERSONATE", "EXCHANGE"]  # noqa: E501
        if grant_type not in allowed_values:
            raise ValueError(
                "Invalid value for `grant_type` ({0}), must be one of {1}"
                .format(grant_type, allowed_values)
            )

        self._grant_type = grant_type

    @property
    def id(self):
        """Gets the id of this OAuthSession.

        ~

        :return: The id of this OAuthSession.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this OAuthSession.

        ~

        :param id: The id of this OAuthSession.
        :type id: str
        """

        self._id = id

    @property
    def ip_address(self):
        """Gets the ip_address of this OAuthSession.

        ~

        :return: The ip_address of this OAuthSession.
        :rtype: str
        """
        return self._ip_address

    @ip_address.setter
    def ip_address(self, ip_address):
        """Sets the ip_address of this OAuthSession.

        ~

        :param ip_address: The ip_address of this OAuthSession.
        :type ip_address: str
        """

        self._ip_address = ip_address

    @property
    def issued(self):
        """Gets the issued of this OAuthSession.

        ~

        :return: The issued of this OAuthSession.
        :rtype: datetime
        """
        return self._issued

    @issued.setter
    def issued(self, issued):
        """Sets the issued of this OAuthSession.

        ~

        :param issued: The issued of this OAuthSession.
        :type issued: datetime
        """

        self._issued = issued

    @property
    def scope(self):
        """Gets the scope of this OAuthSession.

        ~

        :return: The scope of this OAuthSession.
        :rtype: str
        """
        return self._scope

    @scope.setter
    def scope(self, scope):
        """Sets the scope of this OAuthSession.

        ~

        :param scope: The scope of this OAuthSession.
        :type scope: str
        """

        self._scope = scope

    @property
    def sid(self):
        """Gets the sid of this OAuthSession.

        ~

        :return: The sid of this OAuthSession.
        :rtype: int
        """
        return self._sid

    @sid.setter
    def sid(self, sid):
        """Sets the sid of this OAuthSession.

        ~

        :param sid: The sid of this OAuthSession.
        :type sid: int
        """

        self._sid = sid

    @property
    def user_id(self):
        """Gets the user_id of this OAuthSession.

        ~

        :return: The user_id of this OAuthSession.
        :rtype: str
        """
        return self._user_id

    @user_id.setter
    def user_id(self, user_id):
        """Sets the user_id of this OAuthSession.

        ~

        :param user_id: The user_id of this OAuthSession.
        :type user_id: str
        """

        self._user_id = user_id

    @property
    def username(self):
        """Gets the username of this OAuthSession.

        ~

        :return: The username of this OAuthSession.
        :rtype: str
        """
        return self._username

    @username.setter
    def username(self, username):
        """Sets the username of this OAuthSession.

        ~

        :param username: The username of this OAuthSession.
        :type username: str
        """

        self._username = username

    @property
    def verification_required(self):
        """Gets the verification_required of this OAuthSession.

        ~

        :return: The verification_required of this OAuthSession.
        :rtype: bool
        """
        return self._verification_required

    @verification_required.setter
    def verification_required(self, verification_required):
        """Sets the verification_required of this OAuthSession.

        ~

        :param verification_required: The verification_required of this OAuthSession.
        :type verification_required: bool
        """

        self._verification_required = verification_required
