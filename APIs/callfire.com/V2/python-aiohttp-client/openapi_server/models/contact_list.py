# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ContactList(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, created: int=None, id: int=None, name: str=None, size: int=None, status: str=None):
        """ContactList - a model defined in OpenAPI

        :param created: The created of this ContactList.
        :param id: The id of this ContactList.
        :param name: The name of this ContactList.
        :param size: The size of this ContactList.
        :param status: The status of this ContactList.
        """
        self.openapi_types = {
            'created': int,
            'id': int,
            'name': str,
            'size': int,
            'status': str
        }

        self.attribute_map = {
            'created': 'created',
            'id': 'id',
            'name': 'name',
            'size': 'size',
            'status': 'status'
        }

        self._created = created
        self._id = id
        self._name = name
        self._size = size
        self._status = status

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ContactList':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ContactList of this ContactList.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def created(self):
        """Gets the created of this ContactList.

        A time when a given resource was created, formatted in unix time milliseconds (read only). Example: 1473781817000 for Sat, 05 Jan 1985 14:03:37 GMT

        :return: The created of this ContactList.
        :rtype: int
        """
        return self._created

    @created.setter
    def created(self, created):
        """Sets the created of this ContactList.

        A time when a given resource was created, formatted in unix time milliseconds (read only). Example: 1473781817000 for Sat, 05 Jan 1985 14:03:37 GMT

        :param created: The created of this ContactList.
        :type created: int
        """

        self._created = created

    @property
    def id(self):
        """Gets the id of this ContactList.

        An Id of a contact list

        :return: The id of this ContactList.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this ContactList.

        An Id of a contact list

        :param id: The id of this ContactList.
        :type id: int
        """

        self._id = id

    @property
    def name(self):
        """Gets the name of this ContactList.

        A name of a contact list

        :return: The name of this ContactList.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ContactList.

        A name of a contact list

        :param name: The name of this ContactList.
        :type name: str
        """

        self._name = name

    @property
    def size(self):
        """Gets the size of this ContactList.

        A number of contacts in a contact list

        :return: The size of this ContactList.
        :rtype: int
        """
        return self._size

    @size.setter
    def size(self, size):
        """Sets the size of this ContactList.

        A number of contacts in a contact list

        :param size: The size of this ContactList.
        :type size: int
        """

        self._size = size

    @property
    def status(self):
        """Gets the status of this ContactList.

        A current status of a contact list, available values: ACTIVE - contact list is ready, VALIDATING - contact list validation is in progress, IMPORTING - importing is in progress, IMPORT_FAILED - in case of errors occurred during the importing, ERRORS - contact list has validation errors, DELETED - contact list was deleted, PARSE_FAILED - contacts cannot be parsed, COLUMN_TOO_LARGE - if size of phone number or any other column exceeds 255 characters

        :return: The status of this ContactList.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this ContactList.

        A current status of a contact list, available values: ACTIVE - contact list is ready, VALIDATING - contact list validation is in progress, IMPORTING - importing is in progress, IMPORT_FAILED - in case of errors occurred during the importing, ERRORS - contact list has validation errors, DELETED - contact list was deleted, PARSE_FAILED - contacts cannot be parsed, COLUMN_TOO_LARGE - if size of phone number or any other column exceeds 255 characters

        :param status: The status of this ContactList.
        :type status: str
        """
        allowed_values = ["ACTIVE", "VALIDATING", "IMPORTING", "IMPORT_FAILED", "ERRORS", "DELETED", "PARSE_FAILED", "COLUMN_TOO_LARGE"]  # noqa: E501
        if status not in allowed_values:
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"
                .format(status, allowed_values)
            )

        self._status = status
