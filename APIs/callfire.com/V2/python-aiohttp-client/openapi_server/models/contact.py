# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class Contact(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, deleted: bool=None, external_id: str=None, external_system: str=None, extra_phone1: str=None, extra_phone2: str=None, extra_phone3: str=None, first_name: str=None, home_phone: str=None, id: int=None, last_name: str=None, mobile_phone: str=None, properties: Dict[str, str]=None, work_phone: str=None, zipcode: str=None):
        """Contact - a model defined in OpenAPI

        :param deleted: The deleted of this Contact.
        :param external_id: The external_id of this Contact.
        :param external_system: The external_system of this Contact.
        :param extra_phone1: The extra_phone1 of this Contact.
        :param extra_phone2: The extra_phone2 of this Contact.
        :param extra_phone3: The extra_phone3 of this Contact.
        :param first_name: The first_name of this Contact.
        :param home_phone: The home_phone of this Contact.
        :param id: The id of this Contact.
        :param last_name: The last_name of this Contact.
        :param mobile_phone: The mobile_phone of this Contact.
        :param properties: The properties of this Contact.
        :param work_phone: The work_phone of this Contact.
        :param zipcode: The zipcode of this Contact.
        """
        self.openapi_types = {
            'deleted': bool,
            'external_id': str,
            'external_system': str,
            'extra_phone1': str,
            'extra_phone2': str,
            'extra_phone3': str,
            'first_name': str,
            'home_phone': str,
            'id': int,
            'last_name': str,
            'mobile_phone': str,
            'properties': Dict[str, str],
            'work_phone': str,
            'zipcode': str
        }

        self.attribute_map = {
            'deleted': 'deleted',
            'external_id': 'externalId',
            'external_system': 'externalSystem',
            'extra_phone1': 'extraPhone1',
            'extra_phone2': 'extraPhone2',
            'extra_phone3': 'extraPhone3',
            'first_name': 'firstName',
            'home_phone': 'homePhone',
            'id': 'id',
            'last_name': 'lastName',
            'mobile_phone': 'mobilePhone',
            'properties': 'properties',
            'work_phone': 'workPhone',
            'zipcode': 'zipcode'
        }

        self._deleted = deleted
        self._external_id = external_id
        self._external_system = external_system
        self._extra_phone1 = extra_phone1
        self._extra_phone2 = extra_phone2
        self._extra_phone3 = extra_phone3
        self._first_name = first_name
        self._home_phone = home_phone
        self._id = id
        self._last_name = last_name
        self._mobile_phone = mobile_phone
        self._properties = properties
        self._work_phone = work_phone
        self._zipcode = zipcode

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Contact':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Contact of this Contact.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def deleted(self):
        """Gets the deleted of this Contact.

        A deleted contact, deleted contacts are hidden from search results

        :return: The deleted of this Contact.
        :rtype: bool
        """
        return self._deleted

    @deleted.setter
    def deleted(self, deleted):
        """Sets the deleted of this Contact.

        A deleted contact, deleted contacts are hidden from search results

        :param deleted: The deleted of this Contact.
        :type deleted: bool
        """

        self._deleted = deleted

    @property
    def external_id(self):
        """Gets the external_id of this Contact.

        An external id of a contact for syncing with external sources

        :return: The external_id of this Contact.
        :rtype: str
        """
        return self._external_id

    @external_id.setter
    def external_id(self, external_id):
        """Sets the external_id of this Contact.

        An external id of a contact for syncing with external sources

        :param external_id: The external_id of this Contact.
        :type external_id: str
        """

        self._external_id = external_id

    @property
    def external_system(self):
        """Gets the external_system of this Contact.

        External system that external id refers to

        :return: The external_system of this Contact.
        :rtype: str
        """
        return self._external_system

    @external_system.setter
    def external_system(self, external_system):
        """Sets the external_system of this Contact.

        External system that external id refers to

        :param external_system: The external_system of this Contact.
        :type external_system: str
        """

        self._external_system = external_system

    @property
    def extra_phone1(self):
        """Gets the extra_phone1 of this Contact.

        Phone number in E.164 format (11-digit). Example: 12132000384

        :return: The extra_phone1 of this Contact.
        :rtype: str
        """
        return self._extra_phone1

    @extra_phone1.setter
    def extra_phone1(self, extra_phone1):
        """Sets the extra_phone1 of this Contact.

        Phone number in E.164 format (11-digit). Example: 12132000384

        :param extra_phone1: The extra_phone1 of this Contact.
        :type extra_phone1: str
        """

        self._extra_phone1 = extra_phone1

    @property
    def extra_phone2(self):
        """Gets the extra_phone2 of this Contact.

        Phone number in E.164 format (11-digit). Example: 12132000384

        :return: The extra_phone2 of this Contact.
        :rtype: str
        """
        return self._extra_phone2

    @extra_phone2.setter
    def extra_phone2(self, extra_phone2):
        """Sets the extra_phone2 of this Contact.

        Phone number in E.164 format (11-digit). Example: 12132000384

        :param extra_phone2: The extra_phone2 of this Contact.
        :type extra_phone2: str
        """

        self._extra_phone2 = extra_phone2

    @property
    def extra_phone3(self):
        """Gets the extra_phone3 of this Contact.

        Phone number in E.164 format (11-digit). Example: 12132000384

        :return: The extra_phone3 of this Contact.
        :rtype: str
        """
        return self._extra_phone3

    @extra_phone3.setter
    def extra_phone3(self, extra_phone3):
        """Sets the extra_phone3 of this Contact.

        Phone number in E.164 format (11-digit). Example: 12132000384

        :param extra_phone3: The extra_phone3 of this Contact.
        :type extra_phone3: str
        """

        self._extra_phone3 = extra_phone3

    @property
    def first_name(self):
        """Gets the first_name of this Contact.

        A first name of a contact

        :return: The first_name of this Contact.
        :rtype: str
        """
        return self._first_name

    @first_name.setter
    def first_name(self, first_name):
        """Sets the first_name of this Contact.

        A first name of a contact

        :param first_name: The first_name of this Contact.
        :type first_name: str
        """

        self._first_name = first_name

    @property
    def home_phone(self):
        """Gets the home_phone of this Contact.

        Phone number in E.164 format (11-digit). Example: 12132000384

        :return: The home_phone of this Contact.
        :rtype: str
        """
        return self._home_phone

    @home_phone.setter
    def home_phone(self, home_phone):
        """Sets the home_phone of this Contact.

        Phone number in E.164 format (11-digit). Example: 12132000384

        :param home_phone: The home_phone of this Contact.
        :type home_phone: str
        """

        self._home_phone = home_phone

    @property
    def id(self):
        """Gets the id of this Contact.

        An id of a contact

        :return: The id of this Contact.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Contact.

        An id of a contact

        :param id: The id of this Contact.
        :type id: int
        """

        self._id = id

    @property
    def last_name(self):
        """Gets the last_name of this Contact.

        A last name of a contact

        :return: The last_name of this Contact.
        :rtype: str
        """
        return self._last_name

    @last_name.setter
    def last_name(self, last_name):
        """Sets the last_name of this Contact.

        A last name of a contact

        :param last_name: The last_name of this Contact.
        :type last_name: str
        """

        self._last_name = last_name

    @property
    def mobile_phone(self):
        """Gets the mobile_phone of this Contact.

        Phone number in E.164 format (11-digit). Example: 12132000384

        :return: The mobile_phone of this Contact.
        :rtype: str
        """
        return self._mobile_phone

    @mobile_phone.setter
    def mobile_phone(self, mobile_phone):
        """Sets the mobile_phone of this Contact.

        Phone number in E.164 format (11-digit). Example: 12132000384

        :param mobile_phone: The mobile_phone of this Contact.
        :type mobile_phone: str
        """

        self._mobile_phone = mobile_phone

    @property
    def properties(self):
        """Gets the properties of this Contact.

        Map of user-defined string properties for contact

        :return: The properties of this Contact.
        :rtype: Dict[str, str]
        """
        return self._properties

    @properties.setter
    def properties(self, properties):
        """Sets the properties of this Contact.

        Map of user-defined string properties for contact

        :param properties: The properties of this Contact.
        :type properties: Dict[str, str]
        """

        self._properties = properties

    @property
    def work_phone(self):
        """Gets the work_phone of this Contact.

        Phone number in E.164 format (11-digit). Example: 12132000384

        :return: The work_phone of this Contact.
        :rtype: str
        """
        return self._work_phone

    @work_phone.setter
    def work_phone(self, work_phone):
        """Sets the work_phone of this Contact.

        Phone number in E.164 format (11-digit). Example: 12132000384

        :param work_phone: The work_phone of this Contact.
        :type work_phone: str
        """

        self._work_phone = work_phone

    @property
    def zipcode(self):
        """Gets the zipcode of this Contact.

        A Zip code of a contact

        :return: The zipcode of this Contact.
        :rtype: str
        """
        return self._zipcode

    @zipcode.setter
    def zipcode(self, zipcode):
        """Sets the zipcode of this Contact.

        A Zip code of a contact

        :param zipcode: The zipcode of this Contact.
        :type zipcode: str
        """

        self._zipcode = zipcode
