# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.account import Account
from openapi_server import util


class User(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, account: Account=None, account_holder: bool=None, account_id: int=None, active: bool=None, api_password_last_four: str=None, brand: str=None, ccc_agent: bool=None, created: datetime=None, date_of_birth: datetime=None, disabled: bool=None, first_name: str=None, full_name: str=None, id: int=None, industry_name: str=None, last_name: str=None, music_on_hold: str=None, notification_sound_enabled: bool=None, opt_in: bool=None, opt_in_number: str=None, permissions: list[str]=None, phone_number: str=None, phone_number_extension: str=None, phone_number_extension_delay_sec: int=None, phone_number_for_display: str=None, phone_number_verified: bool=None, profile_email: str=None, signup_complete: bool=None, soa_user: User=None, team_seat: bool=None, user_state: str=None, user_state_pending: bool=None, visible: bool=None):
        """User - a model defined in OpenAPI

        :param account: The account of this User.
        :param account_holder: The account_holder of this User.
        :param account_id: The account_id of this User.
        :param active: The active of this User.
        :param api_password_last_four: The api_password_last_four of this User.
        :param brand: The brand of this User.
        :param ccc_agent: The ccc_agent of this User.
        :param created: The created of this User.
        :param date_of_birth: The date_of_birth of this User.
        :param disabled: The disabled of this User.
        :param first_name: The first_name of this User.
        :param full_name: The full_name of this User.
        :param id: The id of this User.
        :param industry_name: The industry_name of this User.
        :param last_name: The last_name of this User.
        :param music_on_hold: The music_on_hold of this User.
        :param notification_sound_enabled: The notification_sound_enabled of this User.
        :param opt_in: The opt_in of this User.
        :param opt_in_number: The opt_in_number of this User.
        :param permissions: The permissions of this User.
        :param phone_number: The phone_number of this User.
        :param phone_number_extension: The phone_number_extension of this User.
        :param phone_number_extension_delay_sec: The phone_number_extension_delay_sec of this User.
        :param phone_number_for_display: The phone_number_for_display of this User.
        :param phone_number_verified: The phone_number_verified of this User.
        :param profile_email: The profile_email of this User.
        :param signup_complete: The signup_complete of this User.
        :param soa_user: The soa_user of this User.
        :param team_seat: The team_seat of this User.
        :param user_state: The user_state of this User.
        :param user_state_pending: The user_state_pending of this User.
        :param visible: The visible of this User.
        """
        self.openapi_types = {
            'account': Account,
            'account_holder': bool,
            'account_id': int,
            'active': bool,
            'api_password_last_four': str,
            'brand': str,
            'ccc_agent': bool,
            'created': datetime,
            'date_of_birth': datetime,
            'disabled': bool,
            'first_name': str,
            'full_name': str,
            'id': int,
            'industry_name': str,
            'last_name': str,
            'music_on_hold': str,
            'notification_sound_enabled': bool,
            'opt_in': bool,
            'opt_in_number': str,
            'permissions': list[str],
            'phone_number': str,
            'phone_number_extension': str,
            'phone_number_extension_delay_sec': int,
            'phone_number_for_display': str,
            'phone_number_verified': bool,
            'profile_email': str,
            'signup_complete': bool,
            'soa_user': User,
            'team_seat': bool,
            'user_state': str,
            'user_state_pending': bool,
            'visible': bool
        }

        self.attribute_map = {
            'account': 'account',
            'account_holder': 'accountHolder',
            'account_id': 'accountId',
            'active': 'active',
            'api_password_last_four': 'apiPasswordLastFour',
            'brand': 'brand',
            'ccc_agent': 'cccAgent',
            'created': 'created',
            'date_of_birth': 'dateOfBirth',
            'disabled': 'disabled',
            'first_name': 'firstName',
            'full_name': 'fullName',
            'id': 'id',
            'industry_name': 'industryName',
            'last_name': 'lastName',
            'music_on_hold': 'musicOnHold',
            'notification_sound_enabled': 'notificationSoundEnabled',
            'opt_in': 'optIn',
            'opt_in_number': 'optInNumber',
            'permissions': 'permissions',
            'phone_number': 'phoneNumber',
            'phone_number_extension': 'phoneNumberExtension',
            'phone_number_extension_delay_sec': 'phoneNumberExtensionDelaySec',
            'phone_number_for_display': 'phoneNumberForDisplay',
            'phone_number_verified': 'phoneNumberVerified',
            'profile_email': 'profileEmail',
            'signup_complete': 'signupComplete',
            'soa_user': 'soaUser',
            'team_seat': 'teamSeat',
            'user_state': 'userState',
            'user_state_pending': 'userStatePending',
            'visible': 'visible'
        }

        self._account = account
        self._account_holder = account_holder
        self._account_id = account_id
        self._active = active
        self._api_password_last_four = api_password_last_four
        self._brand = brand
        self._ccc_agent = ccc_agent
        self._created = created
        self._date_of_birth = date_of_birth
        self._disabled = disabled
        self._first_name = first_name
        self._full_name = full_name
        self._id = id
        self._industry_name = industry_name
        self._last_name = last_name
        self._music_on_hold = music_on_hold
        self._notification_sound_enabled = notification_sound_enabled
        self._opt_in = opt_in
        self._opt_in_number = opt_in_number
        self._permissions = permissions
        self._phone_number = phone_number
        self._phone_number_extension = phone_number_extension
        self._phone_number_extension_delay_sec = phone_number_extension_delay_sec
        self._phone_number_for_display = phone_number_for_display
        self._phone_number_verified = phone_number_verified
        self._profile_email = profile_email
        self._signup_complete = signup_complete
        self._soa_user = soa_user
        self._team_seat = team_seat
        self._user_state = user_state
        self._user_state_pending = user_state_pending
        self._visible = visible

    @classmethod
    def from_dict(cls, dikt: dict) -> 'User':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The User of this User.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def account(self):
        """Gets the account of this User.


        :return: The account of this User.
        :rtype: Account
        """
        return self._account

    @account.setter
    def account(self, account):
        """Sets the account of this User.


        :param account: The account of this User.
        :type account: Account
        """

        self._account = account

    @property
    def account_holder(self):
        """Gets the account_holder of this User.

        ~

        :return: The account_holder of this User.
        :rtype: bool
        """
        return self._account_holder

    @account_holder.setter
    def account_holder(self, account_holder):
        """Sets the account_holder of this User.

        ~

        :param account_holder: The account_holder of this User.
        :type account_holder: bool
        """

        self._account_holder = account_holder

    @property
    def account_id(self):
        """Gets the account_id of this User.

        ~

        :return: The account_id of this User.
        :rtype: int
        """
        return self._account_id

    @account_id.setter
    def account_id(self, account_id):
        """Sets the account_id of this User.

        ~

        :param account_id: The account_id of this User.
        :type account_id: int
        """

        self._account_id = account_id

    @property
    def active(self):
        """Gets the active of this User.

        ~

        :return: The active of this User.
        :rtype: bool
        """
        return self._active

    @active.setter
    def active(self, active):
        """Sets the active of this User.

        ~

        :param active: The active of this User.
        :type active: bool
        """

        self._active = active

    @property
    def api_password_last_four(self):
        """Gets the api_password_last_four of this User.

        ~

        :return: The api_password_last_four of this User.
        :rtype: str
        """
        return self._api_password_last_four

    @api_password_last_four.setter
    def api_password_last_four(self, api_password_last_four):
        """Sets the api_password_last_four of this User.

        ~

        :param api_password_last_four: The api_password_last_four of this User.
        :type api_password_last_four: str
        """

        self._api_password_last_four = api_password_last_four

    @property
    def brand(self):
        """Gets the brand of this User.

        ~

        :return: The brand of this User.
        :rtype: str
        """
        return self._brand

    @brand.setter
    def brand(self, brand):
        """Sets the brand of this User.

        ~

        :param brand: The brand of this User.
        :type brand: str
        """
        allowed_values = ["EZTEXTING", "CLUBTEXTING", "GROUPTEXTING", "TELLMYCELL", "EZ", "CALLFIRE", "TESLA"]  # noqa: E501
        if brand not in allowed_values:
            raise ValueError(
                "Invalid value for `brand` ({0}), must be one of {1}"
                .format(brand, allowed_values)
            )

        self._brand = brand

    @property
    def ccc_agent(self):
        """Gets the ccc_agent of this User.

        ~

        :return: The ccc_agent of this User.
        :rtype: bool
        """
        return self._ccc_agent

    @ccc_agent.setter
    def ccc_agent(self, ccc_agent):
        """Sets the ccc_agent of this User.

        ~

        :param ccc_agent: The ccc_agent of this User.
        :type ccc_agent: bool
        """

        self._ccc_agent = ccc_agent

    @property
    def created(self):
        """Gets the created of this User.

        ~

        :return: The created of this User.
        :rtype: datetime
        """
        return self._created

    @created.setter
    def created(self, created):
        """Sets the created of this User.

        ~

        :param created: The created of this User.
        :type created: datetime
        """

        self._created = created

    @property
    def date_of_birth(self):
        """Gets the date_of_birth of this User.

        ~

        :return: The date_of_birth of this User.
        :rtype: datetime
        """
        return self._date_of_birth

    @date_of_birth.setter
    def date_of_birth(self, date_of_birth):
        """Sets the date_of_birth of this User.

        ~

        :param date_of_birth: The date_of_birth of this User.
        :type date_of_birth: datetime
        """

        self._date_of_birth = date_of_birth

    @property
    def disabled(self):
        """Gets the disabled of this User.

        ~

        :return: The disabled of this User.
        :rtype: bool
        """
        return self._disabled

    @disabled.setter
    def disabled(self, disabled):
        """Sets the disabled of this User.

        ~

        :param disabled: The disabled of this User.
        :type disabled: bool
        """

        self._disabled = disabled

    @property
    def first_name(self):
        """Gets the first_name of this User.

        ~

        :return: The first_name of this User.
        :rtype: str
        """
        return self._first_name

    @first_name.setter
    def first_name(self, first_name):
        """Sets the first_name of this User.

        ~

        :param first_name: The first_name of this User.
        :type first_name: str
        """

        self._first_name = first_name

    @property
    def full_name(self):
        """Gets the full_name of this User.

        ~

        :return: The full_name of this User.
        :rtype: str
        """
        return self._full_name

    @full_name.setter
    def full_name(self, full_name):
        """Sets the full_name of this User.

        ~

        :param full_name: The full_name of this User.
        :type full_name: str
        """

        self._full_name = full_name

    @property
    def id(self):
        """Gets the id of this User.

        ~

        :return: The id of this User.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this User.

        ~

        :param id: The id of this User.
        :type id: int
        """

        self._id = id

    @property
    def industry_name(self):
        """Gets the industry_name of this User.

        ~

        :return: The industry_name of this User.
        :rtype: str
        """
        return self._industry_name

    @industry_name.setter
    def industry_name(self, industry_name):
        """Sets the industry_name of this User.

        ~

        :param industry_name: The industry_name of this User.
        :type industry_name: str
        """

        self._industry_name = industry_name

    @property
    def last_name(self):
        """Gets the last_name of this User.

        ~

        :return: The last_name of this User.
        :rtype: str
        """
        return self._last_name

    @last_name.setter
    def last_name(self, last_name):
        """Sets the last_name of this User.

        ~

        :param last_name: The last_name of this User.
        :type last_name: str
        """

        self._last_name = last_name

    @property
    def music_on_hold(self):
        """Gets the music_on_hold of this User.

        ~

        :return: The music_on_hold of this User.
        :rtype: str
        """
        return self._music_on_hold

    @music_on_hold.setter
    def music_on_hold(self, music_on_hold):
        """Sets the music_on_hold of this User.

        ~

        :param music_on_hold: The music_on_hold of this User.
        :type music_on_hold: str
        """
        allowed_values = ["DEFAULT", "SILENCE", "ALTERNATIVE", "BLUES", "CELTIC", "CLASSICAL", "COUNTRY", "INSTRUMENTAL", "JAZZ", "NEOPUNK", "NEW_AGE", "POP", "ROCK", "SWING", "TECHNO"]  # noqa: E501
        if music_on_hold not in allowed_values:
            raise ValueError(
                "Invalid value for `music_on_hold` ({0}), must be one of {1}"
                .format(music_on_hold, allowed_values)
            )

        self._music_on_hold = music_on_hold

    @property
    def notification_sound_enabled(self):
        """Gets the notification_sound_enabled of this User.

        ~

        :return: The notification_sound_enabled of this User.
        :rtype: bool
        """
        return self._notification_sound_enabled

    @notification_sound_enabled.setter
    def notification_sound_enabled(self, notification_sound_enabled):
        """Sets the notification_sound_enabled of this User.

        ~

        :param notification_sound_enabled: The notification_sound_enabled of this User.
        :type notification_sound_enabled: bool
        """

        self._notification_sound_enabled = notification_sound_enabled

    @property
    def opt_in(self):
        """Gets the opt_in of this User.

        ~

        :return: The opt_in of this User.
        :rtype: bool
        """
        return self._opt_in

    @opt_in.setter
    def opt_in(self, opt_in):
        """Sets the opt_in of this User.

        ~

        :param opt_in: The opt_in of this User.
        :type opt_in: bool
        """

        self._opt_in = opt_in

    @property
    def opt_in_number(self):
        """Gets the opt_in_number of this User.

        ~

        :return: The opt_in_number of this User.
        :rtype: str
        """
        return self._opt_in_number

    @opt_in_number.setter
    def opt_in_number(self, opt_in_number):
        """Sets the opt_in_number of this User.

        ~

        :param opt_in_number: The opt_in_number of this User.
        :type opt_in_number: str
        """

        self._opt_in_number = opt_in_number

    @property
    def permissions(self):
        """Gets the permissions of this User.

        ~

        :return: The permissions of this User.
        :rtype: list[str]
        """
        return self._permissions

    @permissions.setter
    def permissions(self, permissions):
        """Sets the permissions of this User.

        ~

        :param permissions: The permissions of this User.
        :type permissions: list[str]
        """

        self._permissions = permissions

    @property
    def phone_number(self):
        """Gets the phone_number of this User.

        ~

        :return: The phone_number of this User.
        :rtype: str
        """
        return self._phone_number

    @phone_number.setter
    def phone_number(self, phone_number):
        """Sets the phone_number of this User.

        ~

        :param phone_number: The phone_number of this User.
        :type phone_number: str
        """

        self._phone_number = phone_number

    @property
    def phone_number_extension(self):
        """Gets the phone_number_extension of this User.

        ~

        :return: The phone_number_extension of this User.
        :rtype: str
        """
        return self._phone_number_extension

    @phone_number_extension.setter
    def phone_number_extension(self, phone_number_extension):
        """Sets the phone_number_extension of this User.

        ~

        :param phone_number_extension: The phone_number_extension of this User.
        :type phone_number_extension: str
        """

        self._phone_number_extension = phone_number_extension

    @property
    def phone_number_extension_delay_sec(self):
        """Gets the phone_number_extension_delay_sec of this User.

        ~

        :return: The phone_number_extension_delay_sec of this User.
        :rtype: int
        """
        return self._phone_number_extension_delay_sec

    @phone_number_extension_delay_sec.setter
    def phone_number_extension_delay_sec(self, phone_number_extension_delay_sec):
        """Sets the phone_number_extension_delay_sec of this User.

        ~

        :param phone_number_extension_delay_sec: The phone_number_extension_delay_sec of this User.
        :type phone_number_extension_delay_sec: int
        """

        self._phone_number_extension_delay_sec = phone_number_extension_delay_sec

    @property
    def phone_number_for_display(self):
        """Gets the phone_number_for_display of this User.

        ~

        :return: The phone_number_for_display of this User.
        :rtype: str
        """
        return self._phone_number_for_display

    @phone_number_for_display.setter
    def phone_number_for_display(self, phone_number_for_display):
        """Sets the phone_number_for_display of this User.

        ~

        :param phone_number_for_display: The phone_number_for_display of this User.
        :type phone_number_for_display: str
        """

        self._phone_number_for_display = phone_number_for_display

    @property
    def phone_number_verified(self):
        """Gets the phone_number_verified of this User.

        ~

        :return: The phone_number_verified of this User.
        :rtype: bool
        """
        return self._phone_number_verified

    @phone_number_verified.setter
    def phone_number_verified(self, phone_number_verified):
        """Sets the phone_number_verified of this User.

        ~

        :param phone_number_verified: The phone_number_verified of this User.
        :type phone_number_verified: bool
        """

        self._phone_number_verified = phone_number_verified

    @property
    def profile_email(self):
        """Gets the profile_email of this User.

        ~

        :return: The profile_email of this User.
        :rtype: str
        """
        return self._profile_email

    @profile_email.setter
    def profile_email(self, profile_email):
        """Sets the profile_email of this User.

        ~

        :param profile_email: The profile_email of this User.
        :type profile_email: str
        """

        self._profile_email = profile_email

    @property
    def signup_complete(self):
        """Gets the signup_complete of this User.

        ~

        :return: The signup_complete of this User.
        :rtype: bool
        """
        return self._signup_complete

    @signup_complete.setter
    def signup_complete(self, signup_complete):
        """Sets the signup_complete of this User.

        ~

        :param signup_complete: The signup_complete of this User.
        :type signup_complete: bool
        """

        self._signup_complete = signup_complete

    @property
    def soa_user(self):
        """Gets the soa_user of this User.


        :return: The soa_user of this User.
        :rtype: User
        """
        return self._soa_user

    @soa_user.setter
    def soa_user(self, soa_user):
        """Sets the soa_user of this User.


        :param soa_user: The soa_user of this User.
        :type soa_user: User
        """

        self._soa_user = soa_user

    @property
    def team_seat(self):
        """Gets the team_seat of this User.

        ~

        :return: The team_seat of this User.
        :rtype: bool
        """
        return self._team_seat

    @team_seat.setter
    def team_seat(self, team_seat):
        """Sets the team_seat of this User.

        ~

        :param team_seat: The team_seat of this User.
        :type team_seat: bool
        """

        self._team_seat = team_seat

    @property
    def user_state(self):
        """Gets the user_state of this User.

        ~

        :return: The user_state of this User.
        :rtype: str
        """
        return self._user_state

    @user_state.setter
    def user_state(self, user_state):
        """Sets the user_state of this User.

        ~

        :param user_state: The user_state of this User.
        :type user_state: str
        """
        allowed_values = ["ACTIVE", "NEW_AUTH_INVITE", "NEW_USER_INVITE", "EXISTING_USER_INVITE"]  # noqa: E501
        if user_state not in allowed_values:
            raise ValueError(
                "Invalid value for `user_state` ({0}), must be one of {1}"
                .format(user_state, allowed_values)
            )

        self._user_state = user_state

    @property
    def user_state_pending(self):
        """Gets the user_state_pending of this User.

        ~

        :return: The user_state_pending of this User.
        :rtype: bool
        """
        return self._user_state_pending

    @user_state_pending.setter
    def user_state_pending(self, user_state_pending):
        """Sets the user_state_pending of this User.

        ~

        :param user_state_pending: The user_state_pending of this User.
        :type user_state_pending: bool
        """

        self._user_state_pending = user_state_pending

    @property
    def visible(self):
        """Gets the visible of this User.

        ~

        :return: The visible of this User.
        :rtype: bool
        """
        return self._visible

    @visible.setter
    def visible(self, visible):
        """Sets the visible of this User.

        ~

        :param visible: The visible of this User.
        :type visible: bool
        """

        self._visible = visible
