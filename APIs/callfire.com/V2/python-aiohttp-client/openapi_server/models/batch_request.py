# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.recipient import Recipient
from openapi_server import util


class BatchRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, contact_list_id: int=None, name: str=None, recipients: List[Recipient]=None, scrub_duplicates: bool=None):
        """BatchRequest - a model defined in OpenAPI

        :param contact_list_id: The contact_list_id of this BatchRequest.
        :param name: The name of this BatchRequest.
        :param recipients: The recipients of this BatchRequest.
        :param scrub_duplicates: The scrub_duplicates of this BatchRequest.
        """
        self.openapi_types = {
            'contact_list_id': int,
            'name': str,
            'recipients': List[Recipient],
            'scrub_duplicates': bool
        }

        self.attribute_map = {
            'contact_list_id': 'contactListId',
            'name': 'name',
            'recipients': 'recipients',
            'scrub_duplicates': 'scrubDuplicates'
        }

        self._contact_list_id = contact_list_id
        self._name = name
        self._recipients = recipients
        self._scrub_duplicates = scrub_duplicates

    @classmethod
    def from_dict(cls, dikt: dict) -> 'BatchRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The BatchRequest of this BatchRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def contact_list_id(self):
        """Gets the contact_list_id of this BatchRequest.

        An id of existing contact list

        :return: The contact_list_id of this BatchRequest.
        :rtype: int
        """
        return self._contact_list_id

    @contact_list_id.setter
    def contact_list_id(self, contact_list_id):
        """Sets the contact_list_id of this BatchRequest.

        An id of existing contact list

        :param contact_list_id: The contact_list_id of this BatchRequest.
        :type contact_list_id: int
        """

        self._contact_list_id = contact_list_id

    @property
    def name(self):
        """Gets the name of this BatchRequest.

        A name of batch

        :return: The name of this BatchRequest.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this BatchRequest.

        A name of batch

        :param name: The name of this BatchRequest.
        :type name: str
        """

        self._name = name

    @property
    def recipients(self):
        """Gets the recipients of this BatchRequest.

        A list of Recipient objects. For each recipient you can set its phone number or existing contact id to use contact which already exists in account

        :return: The recipients of this BatchRequest.
        :rtype: List[Recipient]
        """
        return self._recipients

    @recipients.setter
    def recipients(self, recipients):
        """Sets the recipients of this BatchRequest.

        A list of Recipient objects. For each recipient you can set its phone number or existing contact id to use contact which already exists in account

        :param recipients: The recipients of this BatchRequest.
        :type recipients: List[Recipient]
        """

        self._recipients = recipients

    @property
    def scrub_duplicates(self):
        """Gets the scrub_duplicates of this BatchRequest.

        Removes duplicate recipients from batch if true

        :return: The scrub_duplicates of this BatchRequest.
        :rtype: bool
        """
        return self._scrub_duplicates

    @scrub_duplicates.setter
    def scrub_duplicates(self, scrub_duplicates):
        """Sets the scrub_duplicates of this BatchRequest.

        Removes duplicate recipients from batch if true

        :param scrub_duplicates: The scrub_duplicates of this BatchRequest.
        :type scrub_duplicates: bool
        """

        self._scrub_duplicates = scrub_duplicates
