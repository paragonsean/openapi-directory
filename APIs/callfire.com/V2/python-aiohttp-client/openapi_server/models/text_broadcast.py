# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.local_time_restriction import LocalTimeRestriction
from openapi_server.models.media import Media
from openapi_server.models.schedule import Schedule
from openapi_server.models.text_recipient import TextRecipient
from openapi_server import util


class TextBroadcast(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, big_message_strategy: str=None, from_number: str=None, id: int=None, labels: list[str]=None, last_modified: int=None, local_time_restriction: LocalTimeRestriction=None, max_active: int=None, media: List[Media]=None, message: str=None, name: str=None, recipients: List[TextRecipient]=None, resume_next_day: bool=None, schedules: List[Schedule]=None, status: str=None):
        """TextBroadcast - a model defined in OpenAPI

        :param big_message_strategy: The big_message_strategy of this TextBroadcast.
        :param from_number: The from_number of this TextBroadcast.
        :param id: The id of this TextBroadcast.
        :param labels: The labels of this TextBroadcast.
        :param last_modified: The last_modified of this TextBroadcast.
        :param local_time_restriction: The local_time_restriction of this TextBroadcast.
        :param max_active: The max_active of this TextBroadcast.
        :param media: The media of this TextBroadcast.
        :param message: The message of this TextBroadcast.
        :param name: The name of this TextBroadcast.
        :param recipients: The recipients of this TextBroadcast.
        :param resume_next_day: The resume_next_day of this TextBroadcast.
        :param schedules: The schedules of this TextBroadcast.
        :param status: The status of this TextBroadcast.
        """
        self.openapi_types = {
            'big_message_strategy': str,
            'from_number': str,
            'id': int,
            'labels': list[str],
            'last_modified': int,
            'local_time_restriction': LocalTimeRestriction,
            'max_active': int,
            'media': List[Media],
            'message': str,
            'name': str,
            'recipients': List[TextRecipient],
            'resume_next_day': bool,
            'schedules': List[Schedule],
            'status': str
        }

        self.attribute_map = {
            'big_message_strategy': 'bigMessageStrategy',
            'from_number': 'fromNumber',
            'id': 'id',
            'labels': 'labels',
            'last_modified': 'lastModified',
            'local_time_restriction': 'localTimeRestriction',
            'max_active': 'maxActive',
            'media': 'media',
            'message': 'message',
            'name': 'name',
            'recipients': 'recipients',
            'resume_next_day': 'resumeNextDay',
            'schedules': 'schedules',
            'status': 'status'
        }

        self._big_message_strategy = big_message_strategy
        self._from_number = from_number
        self._id = id
        self._labels = labels
        self._last_modified = last_modified
        self._local_time_restriction = local_time_restriction
        self._max_active = max_active
        self._media = media
        self._message = message
        self._name = name
        self._recipients = recipients
        self._resume_next_day = resume_next_day
        self._schedules = schedules
        self._status = status

    @classmethod
    def from_dict(cls, dikt: dict) -> 'TextBroadcast':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The TextBroadcast of this TextBroadcast.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def big_message_strategy(self):
        """Gets the big_message_strategy of this TextBroadcast.

        If message length exceeds 160 characters, multiple messages will be sent, SEND_MULTIPLE strategy is chosen by default. Available values: SEND_MULTIPLE - send text as multiple messages, DO_NOT_SEND - do not send text if it exceeds 160 characters, TRIM - trims text message to 160 characters

        :return: The big_message_strategy of this TextBroadcast.
        :rtype: str
        """
        return self._big_message_strategy

    @big_message_strategy.setter
    def big_message_strategy(self, big_message_strategy):
        """Sets the big_message_strategy of this TextBroadcast.

        If message length exceeds 160 characters, multiple messages will be sent, SEND_MULTIPLE strategy is chosen by default. Available values: SEND_MULTIPLE - send text as multiple messages, DO_NOT_SEND - do not send text if it exceeds 160 characters, TRIM - trims text message to 160 characters

        :param big_message_strategy: The big_message_strategy of this TextBroadcast.
        :type big_message_strategy: str
        """
        allowed_values = ["SEND_MULTIPLE", "DO_NOT_SEND", "TRIM", "MMS"]  # noqa: E501
        if big_message_strategy not in allowed_values:
            raise ValueError(
                "Invalid value for `big_message_strategy` ({0}), must be one of {1}"
                .format(big_message_strategy, allowed_values)
            )

        self._big_message_strategy = big_message_strategy

    @property
    def from_number(self):
        """Gets the from_number of this TextBroadcast.

        A phone number in E.164 format (11-digit) or short code. Example: 12132000384, 67076, etc

        :return: The from_number of this TextBroadcast.
        :rtype: str
        """
        return self._from_number

    @from_number.setter
    def from_number(self, from_number):
        """Sets the from_number of this TextBroadcast.

        A phone number in E.164 format (11-digit) or short code. Example: 12132000384, 67076, etc

        :param from_number: The from_number of this TextBroadcast.
        :type from_number: str
        """

        self._from_number = from_number

    @property
    def id(self):
        """Gets the id of this TextBroadcast.

        A unique id of a broadcast

        :return: The id of this TextBroadcast.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this TextBroadcast.

        A unique id of a broadcast

        :param id: The id of this TextBroadcast.
        :type id: int
        """

        self._id = id

    @property
    def labels(self):
        """Gets the labels of this TextBroadcast.

        A labels of a broadcast

        :return: The labels of this TextBroadcast.
        :rtype: list[str]
        """
        return self._labels

    @labels.setter
    def labels(self, labels):
        """Sets the labels of this TextBroadcast.

        A labels of a broadcast

        :param labels: The labels of this TextBroadcast.
        :type labels: list[str]
        """

        self._labels = labels

    @property
    def last_modified(self):
        """Gets the last_modified of this TextBroadcast.

        A time when the given resource was updated, formatted in unix time milliseconds (read only). Example: 1473781817000

        :return: The last_modified of this TextBroadcast.
        :rtype: int
        """
        return self._last_modified

    @last_modified.setter
    def last_modified(self, last_modified):
        """Sets the last_modified of this TextBroadcast.

        A time when the given resource was updated, formatted in unix time milliseconds (read only). Example: 1473781817000

        :param last_modified: The last_modified of this TextBroadcast.
        :type last_modified: int
        """

        self._last_modified = last_modified

    @property
    def local_time_restriction(self):
        """Gets the local_time_restriction of this TextBroadcast.


        :return: The local_time_restriction of this TextBroadcast.
        :rtype: LocalTimeRestriction
        """
        return self._local_time_restriction

    @local_time_restriction.setter
    def local_time_restriction(self, local_time_restriction):
        """Sets the local_time_restriction of this TextBroadcast.


        :param local_time_restriction: The local_time_restriction of this TextBroadcast.
        :type local_time_restriction: LocalTimeRestriction
        """

        self._local_time_restriction = local_time_restriction

    @property
    def max_active(self):
        """Gets the max_active of this TextBroadcast.

        A maximum number of texts that CallFire dials at once

        :return: The max_active of this TextBroadcast.
        :rtype: int
        """
        return self._max_active

    @max_active.setter
    def max_active(self, max_active):
        """Sets the max_active of this TextBroadcast.

        A maximum number of texts that CallFire dials at once

        :param max_active: The max_active of this TextBroadcast.
        :type max_active: int
        """

        self._max_active = max_active

    @property
    def media(self):
        """Gets the media of this TextBroadcast.

        ~

        :return: The media of this TextBroadcast.
        :rtype: List[Media]
        """
        return self._media

    @media.setter
    def media(self, media):
        """Sets the media of this TextBroadcast.

        ~

        :param media: The media of this TextBroadcast.
        :type media: List[Media]
        """

        self._media = media

    @property
    def message(self):
        """Gets the message of this TextBroadcast.

        A text message

        :return: The message of this TextBroadcast.
        :rtype: str
        """
        return self._message

    @message.setter
    def message(self, message):
        """Sets the message of this TextBroadcast.

        A text message

        :param message: The message of this TextBroadcast.
        :type message: str
        """

        self._message = message

    @property
    def name(self):
        """Gets the name of this TextBroadcast.

        A name of a broadcast

        :return: The name of this TextBroadcast.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this TextBroadcast.

        A name of a broadcast

        :param name: The name of this TextBroadcast.
        :type name: str
        """

        self._name = name

    @property
    def recipients(self):
        """Gets the recipients of this TextBroadcast.

        Recipients of a text campaign, can be an existing contacts or a new one

        :return: The recipients of this TextBroadcast.
        :rtype: List[TextRecipient]
        """
        return self._recipients

    @recipients.setter
    def recipients(self, recipients):
        """Sets the recipients of this TextBroadcast.

        Recipients of a text campaign, can be an existing contacts or a new one

        :param recipients: The recipients of this TextBroadcast.
        :type recipients: List[TextRecipient]
        """

        self._recipients = recipients

    @property
    def resume_next_day(self):
        """Gets the resume_next_day of this TextBroadcast.

        ~

        :return: The resume_next_day of this TextBroadcast.
        :rtype: bool
        """
        return self._resume_next_day

    @resume_next_day.setter
    def resume_next_day(self, resume_next_day):
        """Sets the resume_next_day of this TextBroadcast.

        ~

        :param resume_next_day: The resume_next_day of this TextBroadcast.
        :type resume_next_day: bool
        """

        self._resume_next_day = resume_next_day

    @property
    def schedules(self):
        """Gets the schedules of this TextBroadcast.

        ~

        :return: The schedules of this TextBroadcast.
        :rtype: List[Schedule]
        """
        return self._schedules

    @schedules.setter
    def schedules(self, schedules):
        """Sets the schedules of this TextBroadcast.

        ~

        :param schedules: The schedules of this TextBroadcast.
        :type schedules: List[Schedule]
        """

        self._schedules = schedules

    @property
    def status(self):
        """Gets the status of this TextBroadcast.

        A status of a broadcast. SETUP - campaign isn't configured yet; START_PENDING - waiting for contact batch population; RUNNING - campaign is running; STOPPED - campaign is stopped; FINISHED - campaign is finished; ARCHIVED - campaign was archived

        :return: The status of this TextBroadcast.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this TextBroadcast.

        A status of a broadcast. SETUP - campaign isn't configured yet; START_PENDING - waiting for contact batch population; RUNNING - campaign is running; STOPPED - campaign is stopped; FINISHED - campaign is finished; ARCHIVED - campaign was archived

        :param status: The status of this TextBroadcast.
        :type status: str
        """
        allowed_values = ["TEST", "SETUP", "START_PENDING", "RUNNING", "SCHEDULED", "STOPPED", "SUSPENDED", "FINISHED", "ARCHIVED", "VALIDATING_START", "VALIDATING_EMAIL", "BLOCKED_SUSPICIOUS", "DECLINED", "APPROVED"]  # noqa: E501
        if status not in allowed_values:
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"
                .format(status, allowed_values)
            )

        self._status = status
