# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.call_record import CallRecord
from openapi_server.models.contact import Contact
from openapi_server.models.note import Note
from openapi_server import util


class Call(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, agent_call: bool=None, attributes: Dict[str, str]=None, batch_id: int=None, campaign_id: int=None, contact: Contact=None, created: int=None, final_call_result: str=None, from_number: str=None, id: int=None, inbound: bool=None, labels: list[str]=None, modified: int=None, notes: List[Note]=None, records: List[CallRecord]=None, state: str=None, to_number: str=None):
        """Call - a model defined in OpenAPI

        :param agent_call: The agent_call of this Call.
        :param attributes: The attributes of this Call.
        :param batch_id: The batch_id of this Call.
        :param campaign_id: The campaign_id of this Call.
        :param contact: The contact of this Call.
        :param created: The created of this Call.
        :param final_call_result: The final_call_result of this Call.
        :param from_number: The from_number of this Call.
        :param id: The id of this Call.
        :param inbound: The inbound of this Call.
        :param labels: The labels of this Call.
        :param modified: The modified of this Call.
        :param notes: The notes of this Call.
        :param records: The records of this Call.
        :param state: The state of this Call.
        :param to_number: The to_number of this Call.
        """
        self.openapi_types = {
            'agent_call': bool,
            'attributes': Dict[str, str],
            'batch_id': int,
            'campaign_id': int,
            'contact': Contact,
            'created': int,
            'final_call_result': str,
            'from_number': str,
            'id': int,
            'inbound': bool,
            'labels': list[str],
            'modified': int,
            'notes': List[Note],
            'records': List[CallRecord],
            'state': str,
            'to_number': str
        }

        self.attribute_map = {
            'agent_call': 'agentCall',
            'attributes': 'attributes',
            'batch_id': 'batchId',
            'campaign_id': 'campaignId',
            'contact': 'contact',
            'created': 'created',
            'final_call_result': 'finalCallResult',
            'from_number': 'fromNumber',
            'id': 'id',
            'inbound': 'inbound',
            'labels': 'labels',
            'modified': 'modified',
            'notes': 'notes',
            'records': 'records',
            'state': 'state',
            'to_number': 'toNumber'
        }

        self._agent_call = agent_call
        self._attributes = attributes
        self._batch_id = batch_id
        self._campaign_id = campaign_id
        self._contact = contact
        self._created = created
        self._final_call_result = final_call_result
        self._from_number = from_number
        self._id = id
        self._inbound = inbound
        self._labels = labels
        self._modified = modified
        self._notes = notes
        self._records = records
        self._state = state
        self._to_number = to_number

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Call':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Call of this Call.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def agent_call(self):
        """Gets the agent_call of this Call.

        An internal call to an agent

        :return: The agent_call of this Call.
        :rtype: bool
        """
        return self._agent_call

    @agent_call.setter
    def agent_call(self, agent_call):
        """Sets the agent_call of this Call.

        An internal call to an agent

        :param agent_call: The agent_call of this Call.
        :type agent_call: bool
        """

        self._agent_call = agent_call

    @property
    def attributes(self):
        """Gets the attributes of this Call.

        Map of user-defined string attributes associated with an action

        :return: The attributes of this Call.
        :rtype: Dict[str, str]
        """
        return self._attributes

    @attributes.setter
    def attributes(self, attributes):
        """Sets the attributes of this Call.

        Map of user-defined string attributes associated with an action

        :param attributes: The attributes of this Call.
        :type attributes: Dict[str, str]
        """

        self._attributes = attributes

    @property
    def batch_id(self):
        """Gets the batch_id of this Call.

        An id of contact batch associated with an action

        :return: The batch_id of this Call.
        :rtype: int
        """
        return self._batch_id

    @batch_id.setter
    def batch_id(self, batch_id):
        """Sets the batch_id of this Call.

        An id of contact batch associated with an action

        :param batch_id: The batch_id of this Call.
        :type batch_id: int
        """

        self._batch_id = batch_id

    @property
    def campaign_id(self):
        """Gets the campaign_id of this Call.

        An id of broadcast associated with an action if call is sent as part of call broadcast

        :return: The campaign_id of this Call.
        :rtype: int
        """
        return self._campaign_id

    @campaign_id.setter
    def campaign_id(self, campaign_id):
        """Sets the campaign_id of this Call.

        An id of broadcast associated with an action if call is sent as part of call broadcast

        :param campaign_id: The campaign_id of this Call.
        :type campaign_id: int
        """

        self._campaign_id = campaign_id

    @property
    def contact(self):
        """Gets the contact of this Call.


        :return: The contact of this Call.
        :rtype: Contact
        """
        return self._contact

    @contact.setter
    def contact(self, contact):
        """Sets the contact of this Call.


        :param contact: The contact of this Call.
        :type contact: Contact
        """

        self._contact = contact

    @property
    def created(self):
        """Gets the created of this Call.

        The time when the given resource was created, formatted in unix time milliseconds (read only). Example: 1473781817000 for Sat, 05 Jan 1985 14:03:37 GMT 

        :return: The created of this Call.
        :rtype: int
        """
        return self._created

    @created.setter
    def created(self, created):
        """Sets the created of this Call.

        The time when the given resource was created, formatted in unix time milliseconds (read only). Example: 1473781817000 for Sat, 05 Jan 1985 14:03:37 GMT 

        :param created: The created of this Call.
        :type created: int
        """

        self._created = created

    @property
    def final_call_result(self):
        """Gets the final_call_result of this Call.

        Result of a call (LA, AM, BUSY, DNC, XFER, NO_ANS, XFER_LEG, INTERNAL_ERROR, CARRIER_ERROR, CARRIER_TEMP_ERROR, UNDIALED, SD, POSTPONED, ABANDONED, SKIPPED). See [call states and results](https://developers.callfire.com/results-responses-errors.html)

        :return: The final_call_result of this Call.
        :rtype: str
        """
        return self._final_call_result

    @final_call_result.setter
    def final_call_result(self, final_call_result):
        """Sets the final_call_result of this Call.

        Result of a call (LA, AM, BUSY, DNC, XFER, NO_ANS, XFER_LEG, INTERNAL_ERROR, CARRIER_ERROR, CARRIER_TEMP_ERROR, UNDIALED, SD, POSTPONED, ABANDONED, SKIPPED). See [call states and results](https://developers.callfire.com/results-responses-errors.html)

        :param final_call_result: The final_call_result of this Call.
        :type final_call_result: str
        """
        allowed_values = ["LA", "AM", "BUSY", "DNC", "XFER", "NO_ANS", "XFER_LEG", "INTERNAL_ERROR", "CARRIER_ERROR", "CARRIER_TEMP_ERROR", "UNDIALED", "SD", "POSTPONED", "ABANDONED", "SKIPPED"]  # noqa: E501
        if final_call_result not in allowed_values:
            raise ValueError(
                "Invalid value for `final_call_result` ({0}), must be one of {1}"
                .format(final_call_result, allowed_values)
            )

        self._final_call_result = final_call_result

    @property
    def from_number(self):
        """Gets the from_number of this Call.

        A sender's phone number in E.164 (11-digit) format

        :return: The from_number of this Call.
        :rtype: str
        """
        return self._from_number

    @from_number.setter
    def from_number(self, from_number):
        """Sets the from_number of this Call.

        A sender's phone number in E.164 (11-digit) format

        :param from_number: The from_number of this Call.
        :type from_number: str
        """

        self._from_number = from_number

    @property
    def id(self):
        """Gets the id of this Call.

        An id of  an action

        :return: The id of this Call.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Call.

        An id of  an action

        :param id: The id of this Call.
        :type id: int
        """

        self._id = id

    @property
    def inbound(self):
        """Gets the inbound of this Call.

        Is action inbound

        :return: The inbound of this Call.
        :rtype: bool
        """
        return self._inbound

    @inbound.setter
    def inbound(self, inbound):
        """Sets the inbound of this Call.

        Is action inbound

        :param inbound: The inbound of this Call.
        :type inbound: bool
        """

        self._inbound = inbound

    @property
    def labels(self):
        """Gets the labels of this Call.

        Labels associated with action or broadcast for this action

        :return: The labels of this Call.
        :rtype: list[str]
        """
        return self._labels

    @labels.setter
    def labels(self, labels):
        """Sets the labels of this Call.

        Labels associated with action or broadcast for this action

        :param labels: The labels of this Call.
        :type labels: list[str]
        """

        self._labels = labels

    @property
    def modified(self):
        """Gets the modified of this Call.

        The time when the given resource was modified, formatted in unix time milliseconds (read only). Example: 1473781817000 for Sat, 05 Jan 1985 14:03:37 GMT 

        :return: The modified of this Call.
        :rtype: int
        """
        return self._modified

    @modified.setter
    def modified(self, modified):
        """Sets the modified of this Call.

        The time when the given resource was modified, formatted in unix time milliseconds (read only). Example: 1473781817000 for Sat, 05 Jan 1985 14:03:37 GMT 

        :param modified: The modified of this Call.
        :type modified: int
        """

        self._modified = modified

    @property
    def notes(self):
        """Gets the notes of this Call.

        Notes of call added by an agent

        :return: The notes of this Call.
        :rtype: List[Note]
        """
        return self._notes

    @notes.setter
    def notes(self, notes):
        """Sets the notes of this Call.

        Notes of call added by an agent

        :param notes: The notes of this Call.
        :type notes: List[Note]
        """

        self._notes = notes

    @property
    def records(self):
        """Gets the records of this Call.

        List of call records, each record contains call details like originate time, duration, cost, notes made by agents. A single contact may have a multiple phone numbers. In this case if given call was sent as a part of broadcast with configured retry logic then each call record will contain details about attempted phone number

        :return: The records of this Call.
        :rtype: List[CallRecord]
        """
        return self._records

    @records.setter
    def records(self, records):
        """Sets the records of this Call.

        List of call records, each record contains call details like originate time, duration, cost, notes made by agents. A single contact may have a multiple phone numbers. In this case if given call was sent as a part of broadcast with configured retry logic then each call record will contain details about attempted phone number

        :param records: The records of this Call.
        :type records: List[CallRecord]
        """

        self._records = records

    @property
    def state(self):
        """Gets the state of this Call.

        State of an action (READY, SELECTED, CALLBACK, DISABLED, FINISHED, DNC, DUP, INVALID, TIMEOUT, PERIOD_LIMIT). See [call states and results](https://developers.callfire.com/results-responses-errors.html)

        :return: The state of this Call.
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this Call.

        State of an action (READY, SELECTED, CALLBACK, DISABLED, FINISHED, DNC, DUP, INVALID, TIMEOUT, PERIOD_LIMIT). See [call states and results](https://developers.callfire.com/results-responses-errors.html)

        :param state: The state of this Call.
        :type state: str
        """
        allowed_values = ["READY", "SELECTED", "CALLBACK", "FINISHED", "DISABLED", "SKIPPED", "DNC", "DUP", "INVALID", "TIMEOUT", "PERIOD_LIMIT", "RESTRICTED_NUMBER"]  # noqa: E501
        if state not in allowed_values:
            raise ValueError(
                "Invalid value for `state` ({0}), must be one of {1}"
                .format(state, allowed_values)
            )

        self._state = state

    @property
    def to_number(self):
        """Gets the to_number of this Call.

        A recipient's phone number in E.164 (11-digit) format

        :return: The to_number of this Call.
        :rtype: str
        """
        return self._to_number

    @to_number.setter
    def to_number(self, to_number):
        """Sets the to_number of this Call.

        A recipient's phone number in E.164 (11-digit) format

        :param to_number: The to_number of this Call.
        :type to_number: str
        """

        self._to_number = to_number
