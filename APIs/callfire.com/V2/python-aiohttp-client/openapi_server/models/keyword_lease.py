# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class KeywordLease(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, auto_renew: bool=None, contact_list_id: int=None, double_opt_in_enabled: bool=None, keyword: str=None, labels: List[str]=None, lease_begin: int=None, lease_end: int=None, number: str=None, opt_in_confirmation_message: str=None, short_code: str=None, status: str=None, type: str=None):
        """KeywordLease - a model defined in OpenAPI

        :param auto_renew: The auto_renew of this KeywordLease.
        :param contact_list_id: The contact_list_id of this KeywordLease.
        :param double_opt_in_enabled: The double_opt_in_enabled of this KeywordLease.
        :param keyword: The keyword of this KeywordLease.
        :param labels: The labels of this KeywordLease.
        :param lease_begin: The lease_begin of this KeywordLease.
        :param lease_end: The lease_end of this KeywordLease.
        :param number: The number of this KeywordLease.
        :param opt_in_confirmation_message: The opt_in_confirmation_message of this KeywordLease.
        :param short_code: The short_code of this KeywordLease.
        :param status: The status of this KeywordLease.
        :param type: The type of this KeywordLease.
        """
        self.openapi_types = {
            'auto_renew': bool,
            'contact_list_id': int,
            'double_opt_in_enabled': bool,
            'keyword': str,
            'labels': List[str],
            'lease_begin': int,
            'lease_end': int,
            'number': str,
            'opt_in_confirmation_message': str,
            'short_code': str,
            'status': str,
            'type': str
        }

        self.attribute_map = {
            'auto_renew': 'autoRenew',
            'contact_list_id': 'contactListId',
            'double_opt_in_enabled': 'doubleOptInEnabled',
            'keyword': 'keyword',
            'labels': 'labels',
            'lease_begin': 'leaseBegin',
            'lease_end': 'leaseEnd',
            'number': 'number',
            'opt_in_confirmation_message': 'optInConfirmationMessage',
            'short_code': 'shortCode',
            'status': 'status',
            'type': 'type'
        }

        self._auto_renew = auto_renew
        self._contact_list_id = contact_list_id
        self._double_opt_in_enabled = double_opt_in_enabled
        self._keyword = keyword
        self._labels = labels
        self._lease_begin = lease_begin
        self._lease_end = lease_end
        self._number = number
        self._opt_in_confirmation_message = opt_in_confirmation_message
        self._short_code = short_code
        self._status = status
        self._type = type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'KeywordLease':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The KeywordLease of this KeywordLease.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def auto_renew(self):
        """Gets the auto_renew of this KeywordLease.

        Enables the auto renewal of a keyword lease at the end of each billing cycle

        :return: The auto_renew of this KeywordLease.
        :rtype: bool
        """
        return self._auto_renew

    @auto_renew.setter
    def auto_renew(self, auto_renew):
        """Sets the auto_renew of this KeywordLease.

        Enables the auto renewal of a keyword lease at the end of each billing cycle

        :param auto_renew: The auto_renew of this KeywordLease.
        :type auto_renew: bool
        """

        self._auto_renew = auto_renew

    @property
    def contact_list_id(self):
        """Gets the contact_list_id of this KeywordLease.

        Existing contact list ID

        :return: The contact_list_id of this KeywordLease.
        :rtype: int
        """
        return self._contact_list_id

    @contact_list_id.setter
    def contact_list_id(self, contact_list_id):
        """Sets the contact_list_id of this KeywordLease.

        Existing contact list ID

        :param contact_list_id: The contact_list_id of this KeywordLease.
        :type contact_list_id: int
        """

        self._contact_list_id = contact_list_id

    @property
    def double_opt_in_enabled(self):
        """Gets the double_opt_in_enabled of this KeywordLease.

        Enable/disable double opt in feature

        :return: The double_opt_in_enabled of this KeywordLease.
        :rtype: bool
        """
        return self._double_opt_in_enabled

    @double_opt_in_enabled.setter
    def double_opt_in_enabled(self, double_opt_in_enabled):
        """Sets the double_opt_in_enabled of this KeywordLease.

        Enable/disable double opt in feature

        :param double_opt_in_enabled: The double_opt_in_enabled of this KeywordLease.
        :type double_opt_in_enabled: bool
        """

        self._double_opt_in_enabled = double_opt_in_enabled

    @property
    def keyword(self):
        """Gets the keyword of this KeywordLease.

        A text used as a keyword

        :return: The keyword of this KeywordLease.
        :rtype: str
        """
        return self._keyword

    @keyword.setter
    def keyword(self, keyword):
        """Sets the keyword of this KeywordLease.

        A text used as a keyword

        :param keyword: The keyword of this KeywordLease.
        :type keyword: str
        """

        self._keyword = keyword

    @property
    def labels(self):
        """Gets the labels of this KeywordLease.

        ~

        :return: The labels of this KeywordLease.
        :rtype: List[str]
        """
        return self._labels

    @labels.setter
    def labels(self, labels):
        """Sets the labels of this KeywordLease.

        ~

        :param labels: The labels of this KeywordLease.
        :type labels: List[str]
        """

        self._labels = labels

    @property
    def lease_begin(self):
        """Gets the lease_begin of this KeywordLease.

        A time of a lease timestamp, formatted in unix time milliseconds (read only). Example: 1473781817000 for Sat, 05 Jan 1985 14:03:37 GMT

        :return: The lease_begin of this KeywordLease.
        :rtype: int
        """
        return self._lease_begin

    @lease_begin.setter
    def lease_begin(self, lease_begin):
        """Sets the lease_begin of this KeywordLease.

        A time of a lease timestamp, formatted in unix time milliseconds (read only). Example: 1473781817000 for Sat, 05 Jan 1985 14:03:37 GMT

        :param lease_begin: The lease_begin of this KeywordLease.
        :type lease_begin: int
        """

        self._lease_begin = lease_begin

    @property
    def lease_end(self):
        """Gets the lease_end of this KeywordLease.

        A date and time when the keyword lease is finishes. Timestamp, formatted in unix time milliseconds (read only). Example: 1473781817000

        :return: The lease_end of this KeywordLease.
        :rtype: int
        """
        return self._lease_end

    @lease_end.setter
    def lease_end(self, lease_end):
        """Sets the lease_end of this KeywordLease.

        A date and time when the keyword lease is finishes. Timestamp, formatted in unix time milliseconds (read only). Example: 1473781817000

        :param lease_end: The lease_end of this KeywordLease.
        :type lease_end: int
        """

        self._lease_end = lease_end

    @property
    def number(self):
        """Gets the number of this KeywordLease.

        A number assigned to keyword. Example: 12132212344

        :return: The number of this KeywordLease.
        :rtype: str
        """
        return self._number

    @number.setter
    def number(self, number):
        """Sets the number of this KeywordLease.

        A number assigned to keyword. Example: 12132212344

        :param number: The number of this KeywordLease.
        :type number: str
        """

        self._number = number

    @property
    def opt_in_confirmation_message(self):
        """Gets the opt_in_confirmation_message of this KeywordLease.

        Opt in confirmation message

        :return: The opt_in_confirmation_message of this KeywordLease.
        :rtype: str
        """
        return self._opt_in_confirmation_message

    @opt_in_confirmation_message.setter
    def opt_in_confirmation_message(self, opt_in_confirmation_message):
        """Sets the opt_in_confirmation_message of this KeywordLease.

        Opt in confirmation message

        :param opt_in_confirmation_message: The opt_in_confirmation_message of this KeywordLease.
        :type opt_in_confirmation_message: str
        """

        self._opt_in_confirmation_message = opt_in_confirmation_message

    @property
    def short_code(self):
        """Gets the short_code of this KeywordLease.

        A short code assigned to keyword. Example: 67076 (Deprecated - please use number instead)

        :return: The short_code of this KeywordLease.
        :rtype: str
        """
        return self._short_code

    @short_code.setter
    def short_code(self, short_code):
        """Sets the short_code of this KeywordLease.

        A short code assigned to keyword. Example: 67076 (Deprecated - please use number instead)

        :param short_code: The short_code of this KeywordLease.
        :type short_code: str
        """

        self._short_code = short_code

    @property
    def status(self):
        """Gets the status of this KeywordLease.

        A lease status. Available values: PENDING, ACTIVE, RELEASED, UNAVAILABLE

        :return: The status of this KeywordLease.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this KeywordLease.

        A lease status. Available values: PENDING, ACTIVE, RELEASED, UNAVAILABLE

        :param status: The status of this KeywordLease.
        :type status: str
        """
        allowed_values = ["PENDING", "ACTIVE", "RELEASED", "UNAVAILABLE"]  # noqa: E501
        if status not in allowed_values:
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"
                .format(status, allowed_values)
            )

        self._status = status

    @property
    def type(self):
        """Gets the type of this KeywordLease.

        ~

        :return: The type of this KeywordLease.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this KeywordLease.

        ~

        :param type: The type of this KeywordLease.
        :type type: str
        """
        allowed_values = ["PLAN", "EXTRA"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"
                .format(type, allowed_values)
            )

        self._type = type
