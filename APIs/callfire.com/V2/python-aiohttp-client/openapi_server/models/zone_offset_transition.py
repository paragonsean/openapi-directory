# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.duration import Duration
from openapi_server.models.zone_offset import ZoneOffset
from openapi_server import util


class ZoneOffsetTransition(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, date_time_after: datetime=None, date_time_before: datetime=None, duration: Duration=None, gap: bool=None, instant: int=None, offset_after: ZoneOffset=None, offset_before: ZoneOffset=None, overlap: bool=None):
        """ZoneOffsetTransition - a model defined in OpenAPI

        :param date_time_after: The date_time_after of this ZoneOffsetTransition.
        :param date_time_before: The date_time_before of this ZoneOffsetTransition.
        :param duration: The duration of this ZoneOffsetTransition.
        :param gap: The gap of this ZoneOffsetTransition.
        :param instant: The instant of this ZoneOffsetTransition.
        :param offset_after: The offset_after of this ZoneOffsetTransition.
        :param offset_before: The offset_before of this ZoneOffsetTransition.
        :param overlap: The overlap of this ZoneOffsetTransition.
        """
        self.openapi_types = {
            'date_time_after': datetime,
            'date_time_before': datetime,
            'duration': Duration,
            'gap': bool,
            'instant': int,
            'offset_after': ZoneOffset,
            'offset_before': ZoneOffset,
            'overlap': bool
        }

        self.attribute_map = {
            'date_time_after': 'dateTimeAfter',
            'date_time_before': 'dateTimeBefore',
            'duration': 'duration',
            'gap': 'gap',
            'instant': 'instant',
            'offset_after': 'offsetAfter',
            'offset_before': 'offsetBefore',
            'overlap': 'overlap'
        }

        self._date_time_after = date_time_after
        self._date_time_before = date_time_before
        self._duration = duration
        self._gap = gap
        self._instant = instant
        self._offset_after = offset_after
        self._offset_before = offset_before
        self._overlap = overlap

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ZoneOffsetTransition':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ZoneOffsetTransition of this ZoneOffsetTransition.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def date_time_after(self):
        """Gets the date_time_after of this ZoneOffsetTransition.

        ~

        :return: The date_time_after of this ZoneOffsetTransition.
        :rtype: datetime
        """
        return self._date_time_after

    @date_time_after.setter
    def date_time_after(self, date_time_after):
        """Sets the date_time_after of this ZoneOffsetTransition.

        ~

        :param date_time_after: The date_time_after of this ZoneOffsetTransition.
        :type date_time_after: datetime
        """

        self._date_time_after = date_time_after

    @property
    def date_time_before(self):
        """Gets the date_time_before of this ZoneOffsetTransition.

        ~

        :return: The date_time_before of this ZoneOffsetTransition.
        :rtype: datetime
        """
        return self._date_time_before

    @date_time_before.setter
    def date_time_before(self, date_time_before):
        """Sets the date_time_before of this ZoneOffsetTransition.

        ~

        :param date_time_before: The date_time_before of this ZoneOffsetTransition.
        :type date_time_before: datetime
        """

        self._date_time_before = date_time_before

    @property
    def duration(self):
        """Gets the duration of this ZoneOffsetTransition.


        :return: The duration of this ZoneOffsetTransition.
        :rtype: Duration
        """
        return self._duration

    @duration.setter
    def duration(self, duration):
        """Sets the duration of this ZoneOffsetTransition.


        :param duration: The duration of this ZoneOffsetTransition.
        :type duration: Duration
        """

        self._duration = duration

    @property
    def gap(self):
        """Gets the gap of this ZoneOffsetTransition.

        ~

        :return: The gap of this ZoneOffsetTransition.
        :rtype: bool
        """
        return self._gap

    @gap.setter
    def gap(self, gap):
        """Sets the gap of this ZoneOffsetTransition.

        ~

        :param gap: The gap of this ZoneOffsetTransition.
        :type gap: bool
        """

        self._gap = gap

    @property
    def instant(self):
        """Gets the instant of this ZoneOffsetTransition.

        ~

        :return: The instant of this ZoneOffsetTransition.
        :rtype: int
        """
        return self._instant

    @instant.setter
    def instant(self, instant):
        """Sets the instant of this ZoneOffsetTransition.

        ~

        :param instant: The instant of this ZoneOffsetTransition.
        :type instant: int
        """

        self._instant = instant

    @property
    def offset_after(self):
        """Gets the offset_after of this ZoneOffsetTransition.


        :return: The offset_after of this ZoneOffsetTransition.
        :rtype: ZoneOffset
        """
        return self._offset_after

    @offset_after.setter
    def offset_after(self, offset_after):
        """Sets the offset_after of this ZoneOffsetTransition.


        :param offset_after: The offset_after of this ZoneOffsetTransition.
        :type offset_after: ZoneOffset
        """

        self._offset_after = offset_after

    @property
    def offset_before(self):
        """Gets the offset_before of this ZoneOffsetTransition.


        :return: The offset_before of this ZoneOffsetTransition.
        :rtype: ZoneOffset
        """
        return self._offset_before

    @offset_before.setter
    def offset_before(self, offset_before):
        """Sets the offset_before of this ZoneOffsetTransition.


        :param offset_before: The offset_before of this ZoneOffsetTransition.
        :type offset_before: ZoneOffset
        """

        self._offset_before = offset_before

    @property
    def overlap(self):
        """Gets the overlap of this ZoneOffsetTransition.

        ~

        :return: The overlap of this ZoneOffsetTransition.
        :rtype: bool
        """
        return self._overlap

    @overlap.setter
    def overlap(self, overlap):
        """Sets the overlap of this ZoneOffsetTransition.

        ~

        :param overlap: The overlap of this ZoneOffsetTransition.
        :type overlap: bool
        """

        self._overlap = overlap
