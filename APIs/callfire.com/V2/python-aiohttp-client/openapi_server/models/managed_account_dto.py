# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ManagedAccountDto(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, account_holder_id: str=None, credits: float=None, email: str=None, id: str=None, last_login: datetime=None, name: str=None, state: str=None):
        """ManagedAccountDto - a model defined in OpenAPI

        :param account_holder_id: The account_holder_id of this ManagedAccountDto.
        :param credits: The credits of this ManagedAccountDto.
        :param email: The email of this ManagedAccountDto.
        :param id: The id of this ManagedAccountDto.
        :param last_login: The last_login of this ManagedAccountDto.
        :param name: The name of this ManagedAccountDto.
        :param state: The state of this ManagedAccountDto.
        """
        self.openapi_types = {
            'account_holder_id': str,
            'credits': float,
            'email': str,
            'id': str,
            'last_login': datetime,
            'name': str,
            'state': str
        }

        self.attribute_map = {
            'account_holder_id': 'accountHolderId',
            'credits': 'credits',
            'email': 'email',
            'id': 'id',
            'last_login': 'lastLogin',
            'name': 'name',
            'state': 'state'
        }

        self._account_holder_id = account_holder_id
        self._credits = credits
        self._email = email
        self._id = id
        self._last_login = last_login
        self._name = name
        self._state = state

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ManagedAccountDto':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ManagedAccountDto of this ManagedAccountDto.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def account_holder_id(self):
        """Gets the account_holder_id of this ManagedAccountDto.

        ~

        :return: The account_holder_id of this ManagedAccountDto.
        :rtype: str
        """
        return self._account_holder_id

    @account_holder_id.setter
    def account_holder_id(self, account_holder_id):
        """Sets the account_holder_id of this ManagedAccountDto.

        ~

        :param account_holder_id: The account_holder_id of this ManagedAccountDto.
        :type account_holder_id: str
        """

        self._account_holder_id = account_holder_id

    @property
    def credits(self):
        """Gets the credits of this ManagedAccountDto.

        ~

        :return: The credits of this ManagedAccountDto.
        :rtype: float
        """
        return self._credits

    @credits.setter
    def credits(self, credits):
        """Sets the credits of this ManagedAccountDto.

        ~

        :param credits: The credits of this ManagedAccountDto.
        :type credits: float
        """

        self._credits = credits

    @property
    def email(self):
        """Gets the email of this ManagedAccountDto.

        ~

        :return: The email of this ManagedAccountDto.
        :rtype: str
        """
        return self._email

    @email.setter
    def email(self, email):
        """Sets the email of this ManagedAccountDto.

        ~

        :param email: The email of this ManagedAccountDto.
        :type email: str
        """

        self._email = email

    @property
    def id(self):
        """Gets the id of this ManagedAccountDto.

        ~

        :return: The id of this ManagedAccountDto.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this ManagedAccountDto.

        ~

        :param id: The id of this ManagedAccountDto.
        :type id: str
        """

        self._id = id

    @property
    def last_login(self):
        """Gets the last_login of this ManagedAccountDto.

        ~

        :return: The last_login of this ManagedAccountDto.
        :rtype: datetime
        """
        return self._last_login

    @last_login.setter
    def last_login(self, last_login):
        """Sets the last_login of this ManagedAccountDto.

        ~

        :param last_login: The last_login of this ManagedAccountDto.
        :type last_login: datetime
        """

        self._last_login = last_login

    @property
    def name(self):
        """Gets the name of this ManagedAccountDto.

        ~

        :return: The name of this ManagedAccountDto.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ManagedAccountDto.

        ~

        :param name: The name of this ManagedAccountDto.
        :type name: str
        """

        self._name = name

    @property
    def state(self):
        """Gets the state of this ManagedAccountDto.

        ~

        :return: The state of this ManagedAccountDto.
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this ManagedAccountDto.

        ~

        :param state: The state of this ManagedAccountDto.
        :type state: str
        """
        allowed_values = ["ACTIVE", "PENDING", "PENDING_VERIFICATION", "IN_REVIEW"]  # noqa: E501
        if state not in allowed_values:
            raise ValueError(
                "Invalid value for `state` ({0}), must be one of {1}"
                .format(state, allowed_values)
            )

        self._state = state
