# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ApiCredential(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, enabled: bool=None, id: int=None, name: str=None, password: str=None, username: str=None):
        """ApiCredential - a model defined in OpenAPI

        :param enabled: The enabled of this ApiCredential.
        :param id: The id of this ApiCredential.
        :param name: The name of this ApiCredential.
        :param password: The password of this ApiCredential.
        :param username: The username of this ApiCredential.
        """
        self.openapi_types = {
            'enabled': bool,
            'id': int,
            'name': str,
            'password': str,
            'username': str
        }

        self.attribute_map = {
            'enabled': 'enabled',
            'id': 'id',
            'name': 'name',
            'password': 'password',
            'username': 'username'
        }

        self._enabled = enabled
        self._id = id
        self._name = name
        self._password = password
        self._username = username

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ApiCredential':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ApiCredential of this ApiCredential.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def enabled(self):
        """Gets the enabled of this ApiCredential.

        Is credential enabled

        :return: The enabled of this ApiCredential.
        :rtype: bool
        """
        return self._enabled

    @enabled.setter
    def enabled(self, enabled):
        """Sets the enabled of this ApiCredential.

        Is credential enabled

        :param enabled: The enabled of this ApiCredential.
        :type enabled: bool
        """

        self._enabled = enabled

    @property
    def id(self):
        """Gets the id of this ApiCredential.

        An id of an API credential

        :return: The id of this ApiCredential.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this ApiCredential.

        An id of an API credential

        :param id: The id of this ApiCredential.
        :type id: int
        """

        self._id = id

    @property
    def name(self):
        """Gets the name of this ApiCredential.

        A name of an API credential

        :return: The name of this ApiCredential.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ApiCredential.

        A name of an API credential

        :param name: The name of this ApiCredential.
        :type name: str
        """

        self._name = name

    @property
    def password(self):
        """Gets the password of this ApiCredential.

        A password for credential

        :return: The password of this ApiCredential.
        :rtype: str
        """
        return self._password

    @password.setter
    def password(self, password):
        """Sets the password of this ApiCredential.

        A password for credential

        :param password: The password of this ApiCredential.
        :type password: str
        """

        self._password = password

    @property
    def username(self):
        """Gets the username of this ApiCredential.

        Username for credential

        :return: The username of this ApiCredential.
        :rtype: str
        """
        return self._username

    @username.setter
    def username(self, username):
        """Sets the username of this ApiCredential.

        Username for credential

        :param username: The username of this ApiCredential.
        :type username: str
        """

        self._username = username
