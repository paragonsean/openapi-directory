# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.contact import Contact
from openapi_server import util


class AddContactListContactsRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, contact_ids: List[int]=None, contact_numbers: List[str]=None, contact_numbers_field: str=None, contacts: List[Contact]=None, use_custom_fields: bool=None):
        """AddContactListContactsRequest - a model defined in OpenAPI

        :param contact_ids: The contact_ids of this AddContactListContactsRequest.
        :param contact_numbers: The contact_numbers of this AddContactListContactsRequest.
        :param contact_numbers_field: The contact_numbers_field of this AddContactListContactsRequest.
        :param contacts: The contacts of this AddContactListContactsRequest.
        :param use_custom_fields: The use_custom_fields of this AddContactListContactsRequest.
        """
        self.openapi_types = {
            'contact_ids': List[int],
            'contact_numbers': List[str],
            'contact_numbers_field': str,
            'contacts': List[Contact],
            'use_custom_fields': bool
        }

        self.attribute_map = {
            'contact_ids': 'contactIds',
            'contact_numbers': 'contactNumbers',
            'contact_numbers_field': 'contactNumbersField',
            'contacts': 'contacts',
            'use_custom_fields': 'useCustomFields'
        }

        self._contact_ids = contact_ids
        self._contact_numbers = contact_numbers
        self._contact_numbers_field = contact_numbers_field
        self._contacts = contacts
        self._use_custom_fields = use_custom_fields

    @classmethod
    def from_dict(cls, dikt: dict) -> 'AddContactListContactsRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The AddContactListContactsRequest of this AddContactListContactsRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def contact_ids(self):
        """Gets the contact_ids of this AddContactListContactsRequest.

        A list of ids of existing contacts in CallFire system

        :return: The contact_ids of this AddContactListContactsRequest.
        :rtype: List[int]
        """
        return self._contact_ids

    @contact_ids.setter
    def contact_ids(self, contact_ids):
        """Sets the contact_ids of this AddContactListContactsRequest.

        A list of ids of existing contacts in CallFire system

        :param contact_ids: The contact_ids of this AddContactListContactsRequest.
        :type contact_ids: List[int]
        """

        self._contact_ids = contact_ids

    @property
    def contact_numbers(self):
        """Gets the contact_numbers of this AddContactListContactsRequest.

        A phone number in E.164 format (11-digit). Examples: 12132000384

        :return: The contact_numbers of this AddContactListContactsRequest.
        :rtype: List[str]
        """
        return self._contact_numbers

    @contact_numbers.setter
    def contact_numbers(self, contact_numbers):
        """Sets the contact_numbers of this AddContactListContactsRequest.

        A phone number in E.164 format (11-digit). Examples: 12132000384

        :param contact_numbers: The contact_numbers of this AddContactListContactsRequest.
        :type contact_numbers: List[str]
        """

        self._contact_numbers = contact_numbers

    @property
    def contact_numbers_field(self):
        """Gets the contact_numbers_field of this AddContactListContactsRequest.

        A type of phone number (homePhone, workPhone, mobilePhone). This parameter works together with contactNumbers and specifies which types of numbers are included to a list

        :return: The contact_numbers_field of this AddContactListContactsRequest.
        :rtype: str
        """
        return self._contact_numbers_field

    @contact_numbers_field.setter
    def contact_numbers_field(self, contact_numbers_field):
        """Sets the contact_numbers_field of this AddContactListContactsRequest.

        A type of phone number (homePhone, workPhone, mobilePhone). This parameter works together with contactNumbers and specifies which types of numbers are included to a list

        :param contact_numbers_field: The contact_numbers_field of this AddContactListContactsRequest.
        :type contact_numbers_field: str
        """

        self._contact_numbers_field = contact_numbers_field

    @property
    def contacts(self):
        """Gets the contacts of this AddContactListContactsRequest.

        A list of new contact objects which need to be added

        :return: The contacts of this AddContactListContactsRequest.
        :rtype: List[Contact]
        """
        return self._contacts

    @contacts.setter
    def contacts(self, contacts):
        """Sets the contacts of this AddContactListContactsRequest.

        A list of new contact objects which need to be added

        :param contacts: The contacts of this AddContactListContactsRequest.
        :type contacts: List[Contact]
        """

        self._contacts = contacts

    @property
    def use_custom_fields(self):
        """Gets the use_custom_fields of this AddContactListContactsRequest.

        A flag to indicate how to define property names for contacts. If true, uses the field and property names exactly as defined. If false will assign custom properties and fields to A, B, C, etc

        :return: The use_custom_fields of this AddContactListContactsRequest.
        :rtype: bool
        """
        return self._use_custom_fields

    @use_custom_fields.setter
    def use_custom_fields(self, use_custom_fields):
        """Sets the use_custom_fields of this AddContactListContactsRequest.

        A flag to indicate how to define property names for contacts. If true, uses the field and property names exactly as defined. If false will assign custom properties and fields to A, B, C, etc

        :param use_custom_fields: The use_custom_fields of this AddContactListContactsRequest.
        :type use_custom_fields: bool
        """

        self._use_custom_fields = use_custom_fields
