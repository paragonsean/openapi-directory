# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.google_analytics import GoogleAnalytics
from openapi_server.models.weekly_schedule import WeeklySchedule
from openapi_server import util


class CallTrackingConfig(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, failed_transfer_sound_id: int=None, google_analytics: GoogleAnalytics=None, intro_sound_id: int=None, recorded: bool=None, screen: bool=None, transfer_numbers: List[str]=None, voicemail: bool=None, voicemail_sound_id: int=None, weekly_schedule: WeeklySchedule=None, whisper_sound_id: int=None):
        """CallTrackingConfig - a model defined in OpenAPI

        :param failed_transfer_sound_id: The failed_transfer_sound_id of this CallTrackingConfig.
        :param google_analytics: The google_analytics of this CallTrackingConfig.
        :param intro_sound_id: The intro_sound_id of this CallTrackingConfig.
        :param recorded: The recorded of this CallTrackingConfig.
        :param screen: The screen of this CallTrackingConfig.
        :param transfer_numbers: The transfer_numbers of this CallTrackingConfig.
        :param voicemail: The voicemail of this CallTrackingConfig.
        :param voicemail_sound_id: The voicemail_sound_id of this CallTrackingConfig.
        :param weekly_schedule: The weekly_schedule of this CallTrackingConfig.
        :param whisper_sound_id: The whisper_sound_id of this CallTrackingConfig.
        """
        self.openapi_types = {
            'failed_transfer_sound_id': int,
            'google_analytics': GoogleAnalytics,
            'intro_sound_id': int,
            'recorded': bool,
            'screen': bool,
            'transfer_numbers': List[str],
            'voicemail': bool,
            'voicemail_sound_id': int,
            'weekly_schedule': WeeklySchedule,
            'whisper_sound_id': int
        }

        self.attribute_map = {
            'failed_transfer_sound_id': 'failedTransferSoundId',
            'google_analytics': 'googleAnalytics',
            'intro_sound_id': 'introSoundId',
            'recorded': 'recorded',
            'screen': 'screen',
            'transfer_numbers': 'transferNumbers',
            'voicemail': 'voicemail',
            'voicemail_sound_id': 'voicemailSoundId',
            'weekly_schedule': 'weeklySchedule',
            'whisper_sound_id': 'whisperSoundId'
        }

        self._failed_transfer_sound_id = failed_transfer_sound_id
        self._google_analytics = google_analytics
        self._intro_sound_id = intro_sound_id
        self._recorded = recorded
        self._screen = screen
        self._transfer_numbers = transfer_numbers
        self._voicemail = voicemail
        self._voicemail_sound_id = voicemail_sound_id
        self._weekly_schedule = weekly_schedule
        self._whisper_sound_id = whisper_sound_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CallTrackingConfig':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CallTrackingConfig of this CallTrackingConfig.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def failed_transfer_sound_id(self):
        """Gets the failed_transfer_sound_id of this CallTrackingConfig.

        An id of sound file, played if caller can not be connected to transfer number for any reason

        :return: The failed_transfer_sound_id of this CallTrackingConfig.
        :rtype: int
        """
        return self._failed_transfer_sound_id

    @failed_transfer_sound_id.setter
    def failed_transfer_sound_id(self, failed_transfer_sound_id):
        """Sets the failed_transfer_sound_id of this CallTrackingConfig.

        An id of sound file, played if caller can not be connected to transfer number for any reason

        :param failed_transfer_sound_id: The failed_transfer_sound_id of this CallTrackingConfig.
        :type failed_transfer_sound_id: int
        """

        self._failed_transfer_sound_id = failed_transfer_sound_id

    @property
    def google_analytics(self):
        """Gets the google_analytics of this CallTrackingConfig.


        :return: The google_analytics of this CallTrackingConfig.
        :rtype: GoogleAnalytics
        """
        return self._google_analytics

    @google_analytics.setter
    def google_analytics(self, google_analytics):
        """Sets the google_analytics of this CallTrackingConfig.


        :param google_analytics: The google_analytics of this CallTrackingConfig.
        :type google_analytics: GoogleAnalytics
        """

        self._google_analytics = google_analytics

    @property
    def intro_sound_id(self):
        """Gets the intro_sound_id of this CallTrackingConfig.

        An id of sound file, played if call is answered

        :return: The intro_sound_id of this CallTrackingConfig.
        :rtype: int
        """
        return self._intro_sound_id

    @intro_sound_id.setter
    def intro_sound_id(self, intro_sound_id):
        """Sets the intro_sound_id of this CallTrackingConfig.

        An id of sound file, played if call is answered

        :param intro_sound_id: The intro_sound_id of this CallTrackingConfig.
        :type intro_sound_id: int
        """

        self._intro_sound_id = intro_sound_id

    @property
    def recorded(self):
        """Gets the recorded of this CallTrackingConfig.

        Records all inbound calls

        :return: The recorded of this CallTrackingConfig.
        :rtype: bool
        """
        return self._recorded

    @recorded.setter
    def recorded(self, recorded):
        """Sets the recorded of this CallTrackingConfig.

        Records all inbound calls

        :param recorded: The recorded of this CallTrackingConfig.
        :type recorded: bool
        """

        self._recorded = recorded

    @property
    def screen(self):
        """Gets the screen of this CallTrackingConfig.

        Screens the incoming calls

        :return: The screen of this CallTrackingConfig.
        :rtype: bool
        """
        return self._screen

    @screen.setter
    def screen(self, screen):
        """Sets the screen of this CallTrackingConfig.

        Screens the incoming calls

        :param screen: The screen of this CallTrackingConfig.
        :type screen: bool
        """

        self._screen = screen

    @property
    def transfer_numbers(self):
        """Gets the transfer_numbers of this CallTrackingConfig.

        List of phone numbers in E.164 format (11-digit) are used for transfer. Example: 12132000384

        :return: The transfer_numbers of this CallTrackingConfig.
        :rtype: List[str]
        """
        return self._transfer_numbers

    @transfer_numbers.setter
    def transfer_numbers(self, transfer_numbers):
        """Sets the transfer_numbers of this CallTrackingConfig.

        List of phone numbers in E.164 format (11-digit) are used for transfer. Example: 12132000384

        :param transfer_numbers: The transfer_numbers of this CallTrackingConfig.
        :type transfer_numbers: List[str]
        """

        self._transfer_numbers = transfer_numbers

    @property
    def voicemail(self):
        """Gets the voicemail of this CallTrackingConfig.

        Enables voicemail if call is not transferred

        :return: The voicemail of this CallTrackingConfig.
        :rtype: bool
        """
        return self._voicemail

    @voicemail.setter
    def voicemail(self, voicemail):
        """Sets the voicemail of this CallTrackingConfig.

        Enables voicemail if call is not transferred

        :param voicemail: The voicemail of this CallTrackingConfig.
        :type voicemail: bool
        """

        self._voicemail = voicemail

    @property
    def voicemail_sound_id(self):
        """Gets the voicemail_sound_id of this CallTrackingConfig.

        An id of sound file, played if voicemail is enabled and a call isn't transferred

        :return: The voicemail_sound_id of this CallTrackingConfig.
        :rtype: int
        """
        return self._voicemail_sound_id

    @voicemail_sound_id.setter
    def voicemail_sound_id(self, voicemail_sound_id):
        """Sets the voicemail_sound_id of this CallTrackingConfig.

        An id of sound file, played if voicemail is enabled and a call isn't transferred

        :param voicemail_sound_id: The voicemail_sound_id of this CallTrackingConfig.
        :type voicemail_sound_id: int
        """

        self._voicemail_sound_id = voicemail_sound_id

    @property
    def weekly_schedule(self):
        """Gets the weekly_schedule of this CallTrackingConfig.


        :return: The weekly_schedule of this CallTrackingConfig.
        :rtype: WeeklySchedule
        """
        return self._weekly_schedule

    @weekly_schedule.setter
    def weekly_schedule(self, weekly_schedule):
        """Sets the weekly_schedule of this CallTrackingConfig.


        :param weekly_schedule: The weekly_schedule of this CallTrackingConfig.
        :type weekly_schedule: WeeklySchedule
        """

        self._weekly_schedule = weekly_schedule

    @property
    def whisper_sound_id(self):
        """Gets the whisper_sound_id of this CallTrackingConfig.

        An id of sound file, played if call is screened

        :return: The whisper_sound_id of this CallTrackingConfig.
        :rtype: int
        """
        return self._whisper_sound_id

    @whisper_sound_id.setter
    def whisper_sound_id(self, whisper_sound_id):
        """Sets the whisper_sound_id of this CallTrackingConfig.

        An id of sound file, played if call is screened

        :param whisper_sound_id: The whisper_sound_id of this CallTrackingConfig.
        :type whisper_sound_id: int
        """

        self._whisper_sound_id = whisper_sound_id
