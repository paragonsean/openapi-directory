# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.contact import Contact
from openapi_server.models.media import Media
from openapi_server.models.text_record import TextRecord
from openapi_server import util


class Text(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, attributes: Dict[str, str]=None, batch_id: int=None, campaign_id: int=None, contact: Contact=None, created: int=None, final_text_result: str=None, from_number: str=None, id: int=None, inbound: bool=None, labels: list[str]=None, media: List[Media]=None, message: str=None, modified: int=None, records: List[TextRecord]=None, state: str=None, to_number: str=None):
        """Text - a model defined in OpenAPI

        :param attributes: The attributes of this Text.
        :param batch_id: The batch_id of this Text.
        :param campaign_id: The campaign_id of this Text.
        :param contact: The contact of this Text.
        :param created: The created of this Text.
        :param final_text_result: The final_text_result of this Text.
        :param from_number: The from_number of this Text.
        :param id: The id of this Text.
        :param inbound: The inbound of this Text.
        :param labels: The labels of this Text.
        :param media: The media of this Text.
        :param message: The message of this Text.
        :param modified: The modified of this Text.
        :param records: The records of this Text.
        :param state: The state of this Text.
        :param to_number: The to_number of this Text.
        """
        self.openapi_types = {
            'attributes': Dict[str, str],
            'batch_id': int,
            'campaign_id': int,
            'contact': Contact,
            'created': int,
            'final_text_result': str,
            'from_number': str,
            'id': int,
            'inbound': bool,
            'labels': list[str],
            'media': List[Media],
            'message': str,
            'modified': int,
            'records': List[TextRecord],
            'state': str,
            'to_number': str
        }

        self.attribute_map = {
            'attributes': 'attributes',
            'batch_id': 'batchId',
            'campaign_id': 'campaignId',
            'contact': 'contact',
            'created': 'created',
            'final_text_result': 'finalTextResult',
            'from_number': 'fromNumber',
            'id': 'id',
            'inbound': 'inbound',
            'labels': 'labels',
            'media': 'media',
            'message': 'message',
            'modified': 'modified',
            'records': 'records',
            'state': 'state',
            'to_number': 'toNumber'
        }

        self._attributes = attributes
        self._batch_id = batch_id
        self._campaign_id = campaign_id
        self._contact = contact
        self._created = created
        self._final_text_result = final_text_result
        self._from_number = from_number
        self._id = id
        self._inbound = inbound
        self._labels = labels
        self._media = media
        self._message = message
        self._modified = modified
        self._records = records
        self._state = state
        self._to_number = to_number

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Text':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Text of this Text.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def attributes(self):
        """Gets the attributes of this Text.

        Map of user-defined string attributes associated with an action

        :return: The attributes of this Text.
        :rtype: Dict[str, str]
        """
        return self._attributes

    @attributes.setter
    def attributes(self, attributes):
        """Sets the attributes of this Text.

        Map of user-defined string attributes associated with an action

        :param attributes: The attributes of this Text.
        :type attributes: Dict[str, str]
        """

        self._attributes = attributes

    @property
    def batch_id(self):
        """Gets the batch_id of this Text.

        An id of contact batch associated with an action

        :return: The batch_id of this Text.
        :rtype: int
        """
        return self._batch_id

    @batch_id.setter
    def batch_id(self, batch_id):
        """Sets the batch_id of this Text.

        An id of contact batch associated with an action

        :param batch_id: The batch_id of this Text.
        :type batch_id: int
        """

        self._batch_id = batch_id

    @property
    def campaign_id(self):
        """Gets the campaign_id of this Text.

        An id of broadcast if given text was sent as a part of text broadcast

        :return: The campaign_id of this Text.
        :rtype: int
        """
        return self._campaign_id

    @campaign_id.setter
    def campaign_id(self, campaign_id):
        """Sets the campaign_id of this Text.

        An id of broadcast if given text was sent as a part of text broadcast

        :param campaign_id: The campaign_id of this Text.
        :type campaign_id: int
        """

        self._campaign_id = campaign_id

    @property
    def contact(self):
        """Gets the contact of this Text.


        :return: The contact of this Text.
        :rtype: Contact
        """
        return self._contact

    @contact.setter
    def contact(self, contact):
        """Sets the contact of this Text.


        :param contact: The contact of this Text.
        :type contact: Contact
        """

        self._contact = contact

    @property
    def created(self):
        """Gets the created of this Text.

        The time when the given resource was created, formatted in unix time milliseconds (read only). Example: 1473781817000 for Sat, 05 Jan 1985 14:03:37 GMT

        :return: The created of this Text.
        :rtype: int
        """
        return self._created

    @created.setter
    def created(self, created):
        """Sets the created of this Text.

        The time when the given resource was created, formatted in unix time milliseconds (read only). Example: 1473781817000 for Sat, 05 Jan 1985 14:03:37 GMT

        :param created: The created of this Text.
        :type created: int
        """

        self._created = created

    @property
    def final_text_result(self):
        """Gets the final_text_result of this Text.

        Result of text (SENT, RECEIVED, DNT, TOO_BIG, INTERNAL_ERROR, CARRIER_ERROR, CARRIER_TEMP_ERROR, UNDIALED). See [call states and results](https://developers.callfire.com/results-responses-errors.html)

        :return: The final_text_result of this Text.
        :rtype: str
        """
        return self._final_text_result

    @final_text_result.setter
    def final_text_result(self, final_text_result):
        """Sets the final_text_result of this Text.

        Result of text (SENT, RECEIVED, DNT, TOO_BIG, INTERNAL_ERROR, CARRIER_ERROR, CARRIER_TEMP_ERROR, UNDIALED). See [call states and results](https://developers.callfire.com/results-responses-errors.html)

        :param final_text_result: The final_text_result of this Text.
        :type final_text_result: str
        """
        allowed_values = ["SENT", "RECEIVED", "DNT", "TOO_BIG", "INTERNAL_ERROR", "CARRIER_ERROR", "CARRIER_TEMP_ERROR", "UNDIALED", "INVALID_NUMBER"]  # noqa: E501
        if final_text_result not in allowed_values:
            raise ValueError(
                "Invalid value for `final_text_result` ({0}), must be one of {1}"
                .format(final_text_result, allowed_values)
            )

        self._final_text_result = final_text_result

    @property
    def from_number(self):
        """Gets the from_number of this Text.

        Sender's phone number in E.164 format (11-digit) or short code. Example: 12132000384, 67076

        :return: The from_number of this Text.
        :rtype: str
        """
        return self._from_number

    @from_number.setter
    def from_number(self, from_number):
        """Sets the from_number of this Text.

        Sender's phone number in E.164 format (11-digit) or short code. Example: 12132000384, 67076

        :param from_number: The from_number of this Text.
        :type from_number: str
        """

        self._from_number = from_number

    @property
    def id(self):
        """Gets the id of this Text.

        An id of an action

        :return: The id of this Text.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Text.

        An id of an action

        :param id: The id of this Text.
        :type id: int
        """

        self._id = id

    @property
    def inbound(self):
        """Gets the inbound of this Text.

        An action inbound

        :return: The inbound of this Text.
        :rtype: bool
        """
        return self._inbound

    @inbound.setter
    def inbound(self, inbound):
        """Sets the inbound of this Text.

        An action inbound

        :param inbound: The inbound of this Text.
        :type inbound: bool
        """

        self._inbound = inbound

    @property
    def labels(self):
        """Gets the labels of this Text.

        Labels associated with an action

        :return: The labels of this Text.
        :rtype: list[str]
        """
        return self._labels

    @labels.setter
    def labels(self, labels):
        """Sets the labels of this Text.

        Labels associated with an action

        :param labels: The labels of this Text.
        :type labels: list[str]
        """

        self._labels = labels

    @property
    def media(self):
        """Gets the media of this Text.

        ~

        :return: The media of this Text.
        :rtype: List[Media]
        """
        return self._media

    @media.setter
    def media(self, media):
        """Sets the media of this Text.

        ~

        :param media: The media of this Text.
        :type media: List[Media]
        """

        self._media = media

    @property
    def message(self):
        """Gets the message of this Text.

        A text message

        :return: The message of this Text.
        :rtype: str
        """
        return self._message

    @message.setter
    def message(self, message):
        """Sets the message of this Text.

        A text message

        :param message: The message of this Text.
        :type message: str
        """

        self._message = message

    @property
    def modified(self):
        """Gets the modified of this Text.

        The time when the given resource was modified, formatted in unix time milliseconds (read only). Example: 1473781817000 for Sat, 05 Jan 1985 14:03:37 GMT

        :return: The modified of this Text.
        :rtype: int
        """
        return self._modified

    @modified.setter
    def modified(self, modified):
        """Sets the modified of this Text.

        The time when the given resource was modified, formatted in unix time milliseconds (read only). Example: 1473781817000 for Sat, 05 Jan 1985 14:03:37 GMT

        :param modified: The modified of this Text.
        :type modified: int
        """

        self._modified = modified

    @property
    def records(self):
        """Gets the records of this Text.

        List of text records, each record contains additional details: time of sending, cost, current state.  A single contact may have multiple numbers. If given text was sent as part of broadcast with configured retry logic then each text record will contain details about attempted number

        :return: The records of this Text.
        :rtype: List[TextRecord]
        """
        return self._records

    @records.setter
    def records(self, records):
        """Sets the records of this Text.

        List of text records, each record contains additional details: time of sending, cost, current state.  A single contact may have multiple numbers. If given text was sent as part of broadcast with configured retry logic then each text record will contain details about attempted number

        :param records: The records of this Text.
        :type records: List[TextRecord]
        """

        self._records = records

    @property
    def state(self):
        """Gets the state of this Text.

        Current state of an action (READY, SELECTED, CALLBACK, DISABLED, FINISHED, DNC, DUP, INVALID, TIMEOUT, PERIOD_LIMIT). See [call states and results](https://developers.callfire.com/results-responses-errors.html)

        :return: The state of this Text.
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this Text.

        Current state of an action (READY, SELECTED, CALLBACK, DISABLED, FINISHED, DNC, DUP, INVALID, TIMEOUT, PERIOD_LIMIT). See [call states and results](https://developers.callfire.com/results-responses-errors.html)

        :param state: The state of this Text.
        :type state: str
        """
        allowed_values = ["READY", "SELECTED", "CALLBACK", "FINISHED", "DISABLED", "SKIPPED", "DNC", "DUP", "INVALID", "TIMEOUT", "PERIOD_LIMIT", "RESTRICTED_NUMBER"]  # noqa: E501
        if state not in allowed_values:
            raise ValueError(
                "Invalid value for `state` ({0}), must be one of {1}"
                .format(state, allowed_values)
            )

        self._state = state

    @property
    def to_number(self):
        """Gets the to_number of this Text.

        Recipient's phone number in E.164 format (11-digit) or short code. Example: 12132000384, 67076

        :return: The to_number of this Text.
        :rtype: str
        """
        return self._to_number

    @to_number.setter
    def to_number(self, to_number):
        """Sets the to_number of this Text.

        Recipient's phone number in E.164 format (11-digit) or short code. Example: 12132000384, 67076

        :param to_number: The to_number of this Text.
        :type to_number: str
        """

        self._to_number = to_number
