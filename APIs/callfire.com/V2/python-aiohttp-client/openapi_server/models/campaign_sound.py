# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class CampaignSound(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, created: int=None, duplicate: bool=None, id: int=None, length_in_seconds: int=None, name: str=None, status: str=None):
        """CampaignSound - a model defined in OpenAPI

        :param created: The created of this CampaignSound.
        :param duplicate: The duplicate of this CampaignSound.
        :param id: The id of this CampaignSound.
        :param length_in_seconds: The length_in_seconds of this CampaignSound.
        :param name: The name of this CampaignSound.
        :param status: The status of this CampaignSound.
        """
        self.openapi_types = {
            'created': int,
            'duplicate': bool,
            'id': int,
            'length_in_seconds': int,
            'name': str,
            'status': str
        }

        self.attribute_map = {
            'created': 'created',
            'duplicate': 'duplicate',
            'id': 'id',
            'length_in_seconds': 'lengthInSeconds',
            'name': 'name',
            'status': 'status'
        }

        self._created = created
        self._duplicate = duplicate
        self._id = id
        self._length_in_seconds = length_in_seconds
        self._name = name
        self._status = status

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CampaignSound':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CampaignSound of this CampaignSound.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def created(self):
        """Gets the created of this CampaignSound.

        The time when the given resource was created, formatted in unix time milliseconds (read only). Example: 1473781817000 for Sat, 05 Jan 1985 14:03:37 GMT

        :return: The created of this CampaignSound.
        :rtype: int
        """
        return self._created

    @created.setter
    def created(self, created):
        """Sets the created of this CampaignSound.

        The time when the given resource was created, formatted in unix time milliseconds (read only). Example: 1473781817000 for Sat, 05 Jan 1985 14:03:37 GMT

        :param created: The created of this CampaignSound.
        :type created: int
        """

        self._created = created

    @property
    def duplicate(self):
        """Gets the duplicate of this CampaignSound.

        True if the same sound file exists in a sound library of account

        :return: The duplicate of this CampaignSound.
        :rtype: bool
        """
        return self._duplicate

    @duplicate.setter
    def duplicate(self, duplicate):
        """Sets the duplicate of this CampaignSound.

        True if the same sound file exists in a sound library of account

        :param duplicate: The duplicate of this CampaignSound.
        :type duplicate: bool
        """

        self._duplicate = duplicate

    @property
    def id(self):
        """Gets the id of this CampaignSound.

        An id of a sound file

        :return: The id of this CampaignSound.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this CampaignSound.

        An id of a sound file

        :param id: The id of this CampaignSound.
        :type id: int
        """

        self._id = id

    @property
    def length_in_seconds(self):
        """Gets the length_in_seconds of this CampaignSound.

        Length of a sound in seconds

        :return: The length_in_seconds of this CampaignSound.
        :rtype: int
        """
        return self._length_in_seconds

    @length_in_seconds.setter
    def length_in_seconds(self, length_in_seconds):
        """Sets the length_in_seconds of this CampaignSound.

        Length of a sound in seconds

        :param length_in_seconds: The length_in_seconds of this CampaignSound.
        :type length_in_seconds: int
        """

        self._length_in_seconds = length_in_seconds

    @property
    def name(self):
        """Gets the name of this CampaignSound.

        A name of a sound file

        :return: The name of this CampaignSound.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this CampaignSound.

        A name of a sound file

        :param name: The name of this CampaignSound.
        :type name: str
        """

        self._name = name

    @property
    def status(self):
        """Gets the status of this CampaignSound.

        A current status of a sound, available values: UPLOAD - uploading is in progress, RECORDING - recording of sound is in progress, ACTIVE - sound is ready, FAILED, ARCHIVED - sound was archived, SCRUBBED - sound was scrubbed 

        :return: The status of this CampaignSound.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this CampaignSound.

        A current status of a sound, available values: UPLOAD - uploading is in progress, RECORDING - recording of sound is in progress, ACTIVE - sound is ready, FAILED, ARCHIVED - sound was archived, SCRUBBED - sound was scrubbed 

        :param status: The status of this CampaignSound.
        :type status: str
        """
        allowed_values = ["UPLOAD", "RECORDING", "ACTIVE", "ACTIVE_SYSTEM", "FAILED", "ARCHIVED", "SCRUBBED"]  # noqa: E501
        if status not in allowed_values:
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"
                .format(status, allowed_values)
            )

        self._status = status
