# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class UniversalDoNotContact(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, from_number: str=None, inbound_call: bool=None, inbound_text: bool=None, outbound_call: bool=None, outbound_text: bool=None, to_number: str=None):
        """UniversalDoNotContact - a model defined in OpenAPI

        :param from_number: The from_number of this UniversalDoNotContact.
        :param inbound_call: The inbound_call of this UniversalDoNotContact.
        :param inbound_text: The inbound_text of this UniversalDoNotContact.
        :param outbound_call: The outbound_call of this UniversalDoNotContact.
        :param outbound_text: The outbound_text of this UniversalDoNotContact.
        :param to_number: The to_number of this UniversalDoNotContact.
        """
        self.openapi_types = {
            'from_number': str,
            'inbound_call': bool,
            'inbound_text': bool,
            'outbound_call': bool,
            'outbound_text': bool,
            'to_number': str
        }

        self.attribute_map = {
            'from_number': 'fromNumber',
            'inbound_call': 'inboundCall',
            'inbound_text': 'inboundText',
            'outbound_call': 'outboundCall',
            'outbound_text': 'outboundText',
            'to_number': 'toNumber'
        }

        self._from_number = from_number
        self._inbound_call = inbound_call
        self._inbound_text = inbound_text
        self._outbound_call = outbound_call
        self._outbound_text = outbound_text
        self._to_number = to_number

    @classmethod
    def from_dict(cls, dikt: dict) -> 'UniversalDoNotContact':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The UniversalDoNotContact of this UniversalDoNotContact.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def from_number(self):
        """Gets the from_number of this UniversalDoNotContact.

        Optional source number in E.164 format (11-digit). Example: 12132000384

        :return: The from_number of this UniversalDoNotContact.
        :rtype: str
        """
        return self._from_number

    @from_number.setter
    def from_number(self, from_number):
        """Sets the from_number of this UniversalDoNotContact.

        Optional source number in E.164 format (11-digit). Example: 12132000384

        :param from_number: The from_number of this UniversalDoNotContact.
        :type from_number: str
        """

        self._from_number = from_number

    @property
    def inbound_call(self):
        """Gets the inbound_call of this UniversalDoNotContact.

        If toNumber can receive calls or If toNumber can call fromNumber.

        :return: The inbound_call of this UniversalDoNotContact.
        :rtype: bool
        """
        return self._inbound_call

    @inbound_call.setter
    def inbound_call(self, inbound_call):
        """Sets the inbound_call of this UniversalDoNotContact.

        If toNumber can receive calls or If toNumber can call fromNumber.

        :param inbound_call: The inbound_call of this UniversalDoNotContact.
        :type inbound_call: bool
        """

        self._inbound_call = inbound_call

    @property
    def inbound_text(self):
        """Gets the inbound_text of this UniversalDoNotContact.

        If toNumber can receive texts or If toNumber can text fromNumber.

        :return: The inbound_text of this UniversalDoNotContact.
        :rtype: bool
        """
        return self._inbound_text

    @inbound_text.setter
    def inbound_text(self, inbound_text):
        """Sets the inbound_text of this UniversalDoNotContact.

        If toNumber can receive texts or If toNumber can text fromNumber.

        :param inbound_text: The inbound_text of this UniversalDoNotContact.
        :type inbound_text: bool
        """

        self._inbound_text = inbound_text

    @property
    def outbound_call(self):
        """Gets the outbound_call of this UniversalDoNotContact.

        If toNumber can send calls or If fromNumber can call toNumber.

        :return: The outbound_call of this UniversalDoNotContact.
        :rtype: bool
        """
        return self._outbound_call

    @outbound_call.setter
    def outbound_call(self, outbound_call):
        """Sets the outbound_call of this UniversalDoNotContact.

        If toNumber can send calls or If fromNumber can call toNumber.

        :param outbound_call: The outbound_call of this UniversalDoNotContact.
        :type outbound_call: bool
        """

        self._outbound_call = outbound_call

    @property
    def outbound_text(self):
        """Gets the outbound_text of this UniversalDoNotContact.

        If toNumber can send texts or If fromNumber can text toNumber.

        :return: The outbound_text of this UniversalDoNotContact.
        :rtype: bool
        """
        return self._outbound_text

    @outbound_text.setter
    def outbound_text(self, outbound_text):
        """Sets the outbound_text of this UniversalDoNotContact.

        If toNumber can send texts or If fromNumber can text toNumber.

        :param outbound_text: The outbound_text of this UniversalDoNotContact.
        :type outbound_text: bool
        """

        self._outbound_text = outbound_text

    @property
    def to_number(self):
        """Gets the to_number of this UniversalDoNotContact.

        destination DNC number in E.164 format (11-digit). Example: 12132000384

        :return: The to_number of this UniversalDoNotContact.
        :rtype: str
        """
        return self._to_number

    @to_number.setter
    def to_number(self, to_number):
        """Sets the to_number of this UniversalDoNotContact.

        destination DNC number in E.164 format (11-digit). Example: 12132000384

        :param to_number: The to_number of this UniversalDoNotContact.
        :type to_number: str
        """

        self._to_number = to_number
