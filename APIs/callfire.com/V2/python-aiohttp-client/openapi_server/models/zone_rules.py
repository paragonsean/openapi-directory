# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.zone_offset_transition import ZoneOffsetTransition
from openapi_server.models.zone_offset_transition_rule import ZoneOffsetTransitionRule
from openapi_server import util


class ZoneRules(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, fixed_offset: bool=None, transition_rules: List[ZoneOffsetTransitionRule]=None, transitions: List[ZoneOffsetTransition]=None):
        """ZoneRules - a model defined in OpenAPI

        :param fixed_offset: The fixed_offset of this ZoneRules.
        :param transition_rules: The transition_rules of this ZoneRules.
        :param transitions: The transitions of this ZoneRules.
        """
        self.openapi_types = {
            'fixed_offset': bool,
            'transition_rules': List[ZoneOffsetTransitionRule],
            'transitions': List[ZoneOffsetTransition]
        }

        self.attribute_map = {
            'fixed_offset': 'fixedOffset',
            'transition_rules': 'transitionRules',
            'transitions': 'transitions'
        }

        self._fixed_offset = fixed_offset
        self._transition_rules = transition_rules
        self._transitions = transitions

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ZoneRules':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ZoneRules of this ZoneRules.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def fixed_offset(self):
        """Gets the fixed_offset of this ZoneRules.

        ~

        :return: The fixed_offset of this ZoneRules.
        :rtype: bool
        """
        return self._fixed_offset

    @fixed_offset.setter
    def fixed_offset(self, fixed_offset):
        """Sets the fixed_offset of this ZoneRules.

        ~

        :param fixed_offset: The fixed_offset of this ZoneRules.
        :type fixed_offset: bool
        """

        self._fixed_offset = fixed_offset

    @property
    def transition_rules(self):
        """Gets the transition_rules of this ZoneRules.

        ~

        :return: The transition_rules of this ZoneRules.
        :rtype: List[ZoneOffsetTransitionRule]
        """
        return self._transition_rules

    @transition_rules.setter
    def transition_rules(self, transition_rules):
        """Sets the transition_rules of this ZoneRules.

        ~

        :param transition_rules: The transition_rules of this ZoneRules.
        :type transition_rules: List[ZoneOffsetTransitionRule]
        """

        self._transition_rules = transition_rules

    @property
    def transitions(self):
        """Gets the transitions of this ZoneRules.

        ~

        :return: The transitions of this ZoneRules.
        :rtype: List[ZoneOffsetTransition]
        """
        return self._transitions

    @transitions.setter
    def transitions(self, transitions):
        """Sets the transitions of this ZoneRules.

        ~

        :param transitions: The transitions of this ZoneRules.
        :type transitions: List[ZoneOffsetTransition]
        """

        self._transitions = transitions
