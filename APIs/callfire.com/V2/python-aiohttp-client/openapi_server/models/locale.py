# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class Locale(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, country: str=None, display_country: str=None, display_language: str=None, display_name: str=None, display_script: str=None, display_variant: str=None, extension_keys: list[str]=None, iso3_country: str=None, iso3_language: str=None, language: str=None, script: str=None, unicode_locale_attributes: list[str]=None, unicode_locale_keys: list[str]=None, variant: str=None):
        """Locale - a model defined in OpenAPI

        :param country: The country of this Locale.
        :param display_country: The display_country of this Locale.
        :param display_language: The display_language of this Locale.
        :param display_name: The display_name of this Locale.
        :param display_script: The display_script of this Locale.
        :param display_variant: The display_variant of this Locale.
        :param extension_keys: The extension_keys of this Locale.
        :param iso3_country: The iso3_country of this Locale.
        :param iso3_language: The iso3_language of this Locale.
        :param language: The language of this Locale.
        :param script: The script of this Locale.
        :param unicode_locale_attributes: The unicode_locale_attributes of this Locale.
        :param unicode_locale_keys: The unicode_locale_keys of this Locale.
        :param variant: The variant of this Locale.
        """
        self.openapi_types = {
            'country': str,
            'display_country': str,
            'display_language': str,
            'display_name': str,
            'display_script': str,
            'display_variant': str,
            'extension_keys': list[str],
            'iso3_country': str,
            'iso3_language': str,
            'language': str,
            'script': str,
            'unicode_locale_attributes': list[str],
            'unicode_locale_keys': list[str],
            'variant': str
        }

        self.attribute_map = {
            'country': 'country',
            'display_country': 'displayCountry',
            'display_language': 'displayLanguage',
            'display_name': 'displayName',
            'display_script': 'displayScript',
            'display_variant': 'displayVariant',
            'extension_keys': 'extensionKeys',
            'iso3_country': 'iso3Country',
            'iso3_language': 'iso3Language',
            'language': 'language',
            'script': 'script',
            'unicode_locale_attributes': 'unicodeLocaleAttributes',
            'unicode_locale_keys': 'unicodeLocaleKeys',
            'variant': 'variant'
        }

        self._country = country
        self._display_country = display_country
        self._display_language = display_language
        self._display_name = display_name
        self._display_script = display_script
        self._display_variant = display_variant
        self._extension_keys = extension_keys
        self._iso3_country = iso3_country
        self._iso3_language = iso3_language
        self._language = language
        self._script = script
        self._unicode_locale_attributes = unicode_locale_attributes
        self._unicode_locale_keys = unicode_locale_keys
        self._variant = variant

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Locale':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Locale of this Locale.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def country(self):
        """Gets the country of this Locale.

        ~

        :return: The country of this Locale.
        :rtype: str
        """
        return self._country

    @country.setter
    def country(self, country):
        """Sets the country of this Locale.

        ~

        :param country: The country of this Locale.
        :type country: str
        """

        self._country = country

    @property
    def display_country(self):
        """Gets the display_country of this Locale.

        ~

        :return: The display_country of this Locale.
        :rtype: str
        """
        return self._display_country

    @display_country.setter
    def display_country(self, display_country):
        """Sets the display_country of this Locale.

        ~

        :param display_country: The display_country of this Locale.
        :type display_country: str
        """

        self._display_country = display_country

    @property
    def display_language(self):
        """Gets the display_language of this Locale.

        ~

        :return: The display_language of this Locale.
        :rtype: str
        """
        return self._display_language

    @display_language.setter
    def display_language(self, display_language):
        """Sets the display_language of this Locale.

        ~

        :param display_language: The display_language of this Locale.
        :type display_language: str
        """

        self._display_language = display_language

    @property
    def display_name(self):
        """Gets the display_name of this Locale.

        ~

        :return: The display_name of this Locale.
        :rtype: str
        """
        return self._display_name

    @display_name.setter
    def display_name(self, display_name):
        """Sets the display_name of this Locale.

        ~

        :param display_name: The display_name of this Locale.
        :type display_name: str
        """

        self._display_name = display_name

    @property
    def display_script(self):
        """Gets the display_script of this Locale.

        ~

        :return: The display_script of this Locale.
        :rtype: str
        """
        return self._display_script

    @display_script.setter
    def display_script(self, display_script):
        """Sets the display_script of this Locale.

        ~

        :param display_script: The display_script of this Locale.
        :type display_script: str
        """

        self._display_script = display_script

    @property
    def display_variant(self):
        """Gets the display_variant of this Locale.

        ~

        :return: The display_variant of this Locale.
        :rtype: str
        """
        return self._display_variant

    @display_variant.setter
    def display_variant(self, display_variant):
        """Sets the display_variant of this Locale.

        ~

        :param display_variant: The display_variant of this Locale.
        :type display_variant: str
        """

        self._display_variant = display_variant

    @property
    def extension_keys(self):
        """Gets the extension_keys of this Locale.

        ~

        :return: The extension_keys of this Locale.
        :rtype: list[str]
        """
        return self._extension_keys

    @extension_keys.setter
    def extension_keys(self, extension_keys):
        """Sets the extension_keys of this Locale.

        ~

        :param extension_keys: The extension_keys of this Locale.
        :type extension_keys: list[str]
        """

        self._extension_keys = extension_keys

    @property
    def iso3_country(self):
        """Gets the iso3_country of this Locale.

        ~

        :return: The iso3_country of this Locale.
        :rtype: str
        """
        return self._iso3_country

    @iso3_country.setter
    def iso3_country(self, iso3_country):
        """Sets the iso3_country of this Locale.

        ~

        :param iso3_country: The iso3_country of this Locale.
        :type iso3_country: str
        """

        self._iso3_country = iso3_country

    @property
    def iso3_language(self):
        """Gets the iso3_language of this Locale.

        ~

        :return: The iso3_language of this Locale.
        :rtype: str
        """
        return self._iso3_language

    @iso3_language.setter
    def iso3_language(self, iso3_language):
        """Sets the iso3_language of this Locale.

        ~

        :param iso3_language: The iso3_language of this Locale.
        :type iso3_language: str
        """

        self._iso3_language = iso3_language

    @property
    def language(self):
        """Gets the language of this Locale.

        ~

        :return: The language of this Locale.
        :rtype: str
        """
        return self._language

    @language.setter
    def language(self, language):
        """Sets the language of this Locale.

        ~

        :param language: The language of this Locale.
        :type language: str
        """

        self._language = language

    @property
    def script(self):
        """Gets the script of this Locale.

        ~

        :return: The script of this Locale.
        :rtype: str
        """
        return self._script

    @script.setter
    def script(self, script):
        """Sets the script of this Locale.

        ~

        :param script: The script of this Locale.
        :type script: str
        """

        self._script = script

    @property
    def unicode_locale_attributes(self):
        """Gets the unicode_locale_attributes of this Locale.

        ~

        :return: The unicode_locale_attributes of this Locale.
        :rtype: list[str]
        """
        return self._unicode_locale_attributes

    @unicode_locale_attributes.setter
    def unicode_locale_attributes(self, unicode_locale_attributes):
        """Sets the unicode_locale_attributes of this Locale.

        ~

        :param unicode_locale_attributes: The unicode_locale_attributes of this Locale.
        :type unicode_locale_attributes: list[str]
        """

        self._unicode_locale_attributes = unicode_locale_attributes

    @property
    def unicode_locale_keys(self):
        """Gets the unicode_locale_keys of this Locale.

        ~

        :return: The unicode_locale_keys of this Locale.
        :rtype: list[str]
        """
        return self._unicode_locale_keys

    @unicode_locale_keys.setter
    def unicode_locale_keys(self, unicode_locale_keys):
        """Sets the unicode_locale_keys of this Locale.

        ~

        :param unicode_locale_keys: The unicode_locale_keys of this Locale.
        :type unicode_locale_keys: list[str]
        """

        self._unicode_locale_keys = unicode_locale_keys

    @property
    def variant(self):
        """Gets the variant of this Locale.

        ~

        :return: The variant of this Locale.
        :rtype: str
        """
        return self._variant

    @variant.setter
    def variant(self, variant):
        """Sets the variant of this Locale.

        ~

        :param variant: The variant of this Locale.
        :type variant: str
        """

        self._variant = variant
