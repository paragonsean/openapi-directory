# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.contact import Contact
from openapi_server import util


class CreateContactListRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, contact_ids: List[int]=None, contact_numbers: List[str]=None, contact_numbers_field: str=None, contacts: List[Contact]=None, name: str=None, use_custom_fields: bool=None):
        """CreateContactListRequest - a model defined in OpenAPI

        :param contact_ids: The contact_ids of this CreateContactListRequest.
        :param contact_numbers: The contact_numbers of this CreateContactListRequest.
        :param contact_numbers_field: The contact_numbers_field of this CreateContactListRequest.
        :param contacts: The contacts of this CreateContactListRequest.
        :param name: The name of this CreateContactListRequest.
        :param use_custom_fields: The use_custom_fields of this CreateContactListRequest.
        """
        self.openapi_types = {
            'contact_ids': List[int],
            'contact_numbers': List[str],
            'contact_numbers_field': str,
            'contacts': List[Contact],
            'name': str,
            'use_custom_fields': bool
        }

        self.attribute_map = {
            'contact_ids': 'contactIds',
            'contact_numbers': 'contactNumbers',
            'contact_numbers_field': 'contactNumbersField',
            'contacts': 'contacts',
            'name': 'name',
            'use_custom_fields': 'useCustomFields'
        }

        self._contact_ids = contact_ids
        self._contact_numbers = contact_numbers
        self._contact_numbers_field = contact_numbers_field
        self._contacts = contacts
        self._name = name
        self._use_custom_fields = use_custom_fields

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CreateContactListRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CreateContactListRequest of this CreateContactListRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def contact_ids(self):
        """Gets the contact_ids of this CreateContactListRequest.

        A list of ids of existing contacts in CallFire system

        :return: The contact_ids of this CreateContactListRequest.
        :rtype: List[int]
        """
        return self._contact_ids

    @contact_ids.setter
    def contact_ids(self, contact_ids):
        """Sets the contact_ids of this CreateContactListRequest.

        A list of ids of existing contacts in CallFire system

        :param contact_ids: The contact_ids of this CreateContactListRequest.
        :type contact_ids: List[int]
        """

        self._contact_ids = contact_ids

    @property
    def contact_numbers(self):
        """Gets the contact_numbers of this CreateContactListRequest.

        List of numbers in E.164 format (11-digit). Example: 12132000384

        :return: The contact_numbers of this CreateContactListRequest.
        :rtype: List[str]
        """
        return self._contact_numbers

    @contact_numbers.setter
    def contact_numbers(self, contact_numbers):
        """Sets the contact_numbers of this CreateContactListRequest.

        List of numbers in E.164 format (11-digit). Example: 12132000384

        :param contact_numbers: The contact_numbers of this CreateContactListRequest.
        :type contact_numbers: List[str]
        """

        self._contact_numbers = contact_numbers

    @property
    def contact_numbers_field(self):
        """Gets the contact_numbers_field of this CreateContactListRequest.

        A type of a phone number (homePhone, workPhone, mobilePhone). This parameter is used with contactNumbers and specifies which types of phone numbers are included to a contact list

        :return: The contact_numbers_field of this CreateContactListRequest.
        :rtype: str
        """
        return self._contact_numbers_field

    @contact_numbers_field.setter
    def contact_numbers_field(self, contact_numbers_field):
        """Sets the contact_numbers_field of this CreateContactListRequest.

        A type of a phone number (homePhone, workPhone, mobilePhone). This parameter is used with contactNumbers and specifies which types of phone numbers are included to a contact list

        :param contact_numbers_field: The contact_numbers_field of this CreateContactListRequest.
        :type contact_numbers_field: str
        """

        self._contact_numbers_field = contact_numbers_field

    @property
    def contacts(self):
        """Gets the contacts of this CreateContactListRequest.

        A list of new contact objects to be added

        :return: The contacts of this CreateContactListRequest.
        :rtype: List[Contact]
        """
        return self._contacts

    @contacts.setter
    def contacts(self, contacts):
        """Sets the contacts of this CreateContactListRequest.

        A list of new contact objects to be added

        :param contacts: The contacts of this CreateContactListRequest.
        :type contacts: List[Contact]
        """

        self._contacts = contacts

    @property
    def name(self):
        """Gets the name of this CreateContactListRequest.

        A name of a contact list

        :return: The name of this CreateContactListRequest.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this CreateContactListRequest.

        A name of a contact list

        :param name: The name of this CreateContactListRequest.
        :type name: str
        """

        self._name = name

    @property
    def use_custom_fields(self):
        """Gets the use_custom_fields of this CreateContactListRequest.

        A flag to indicate how to define property names for contacts. If true, uses the field and property names exactly as defined. If false will assign custom properties and fields to A, B, C, etc

        :return: The use_custom_fields of this CreateContactListRequest.
        :rtype: bool
        """
        return self._use_custom_fields

    @use_custom_fields.setter
    def use_custom_fields(self, use_custom_fields):
        """Sets the use_custom_fields of this CreateContactListRequest.

        A flag to indicate how to define property names for contacts. If true, uses the field and property names exactly as defined. If false will assign custom properties and fields to A, B, C, etc

        :param use_custom_fields: The use_custom_fields of this CreateContactListRequest.
        :type use_custom_fields: bool
        """

        self._use_custom_fields = use_custom_fields
