# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.o_auth_session import OAuthSession
from openapi_server import util


class AuthToken(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, account_id: int=None, admin_client: bool=None, admin_token: AuthToken=None, attributes: Dict[str, str]=None, brand: str=None, ez_spa_client: bool=None, migration: bool=None, session: OAuthSession=None, session_id: str=None, user_id: int=None):
        """AuthToken - a model defined in OpenAPI

        :param account_id: The account_id of this AuthToken.
        :param admin_client: The admin_client of this AuthToken.
        :param admin_token: The admin_token of this AuthToken.
        :param attributes: The attributes of this AuthToken.
        :param brand: The brand of this AuthToken.
        :param ez_spa_client: The ez_spa_client of this AuthToken.
        :param migration: The migration of this AuthToken.
        :param session: The session of this AuthToken.
        :param session_id: The session_id of this AuthToken.
        :param user_id: The user_id of this AuthToken.
        """
        self.openapi_types = {
            'account_id': int,
            'admin_client': bool,
            'admin_token': AuthToken,
            'attributes': Dict[str, str],
            'brand': str,
            'ez_spa_client': bool,
            'migration': bool,
            'session': OAuthSession,
            'session_id': str,
            'user_id': int
        }

        self.attribute_map = {
            'account_id': 'accountId',
            'admin_client': 'adminClient',
            'admin_token': 'adminToken',
            'attributes': 'attributes',
            'brand': 'brand',
            'ez_spa_client': 'ezSpaClient',
            'migration': 'migration',
            'session': 'session',
            'session_id': 'sessionId',
            'user_id': 'userId'
        }

        self._account_id = account_id
        self._admin_client = admin_client
        self._admin_token = admin_token
        self._attributes = attributes
        self._brand = brand
        self._ez_spa_client = ez_spa_client
        self._migration = migration
        self._session = session
        self._session_id = session_id
        self._user_id = user_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'AuthToken':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The AuthToken of this AuthToken.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def account_id(self):
        """Gets the account_id of this AuthToken.

        ~

        :return: The account_id of this AuthToken.
        :rtype: int
        """
        return self._account_id

    @account_id.setter
    def account_id(self, account_id):
        """Sets the account_id of this AuthToken.

        ~

        :param account_id: The account_id of this AuthToken.
        :type account_id: int
        """

        self._account_id = account_id

    @property
    def admin_client(self):
        """Gets the admin_client of this AuthToken.

        ~

        :return: The admin_client of this AuthToken.
        :rtype: bool
        """
        return self._admin_client

    @admin_client.setter
    def admin_client(self, admin_client):
        """Sets the admin_client of this AuthToken.

        ~

        :param admin_client: The admin_client of this AuthToken.
        :type admin_client: bool
        """

        self._admin_client = admin_client

    @property
    def admin_token(self):
        """Gets the admin_token of this AuthToken.


        :return: The admin_token of this AuthToken.
        :rtype: AuthToken
        """
        return self._admin_token

    @admin_token.setter
    def admin_token(self, admin_token):
        """Sets the admin_token of this AuthToken.


        :param admin_token: The admin_token of this AuthToken.
        :type admin_token: AuthToken
        """

        self._admin_token = admin_token

    @property
    def attributes(self):
        """Gets the attributes of this AuthToken.

        ~

        :return: The attributes of this AuthToken.
        :rtype: Dict[str, str]
        """
        return self._attributes

    @attributes.setter
    def attributes(self, attributes):
        """Sets the attributes of this AuthToken.

        ~

        :param attributes: The attributes of this AuthToken.
        :type attributes: Dict[str, str]
        """

        self._attributes = attributes

    @property
    def brand(self):
        """Gets the brand of this AuthToken.

        ~

        :return: The brand of this AuthToken.
        :rtype: str
        """
        return self._brand

    @brand.setter
    def brand(self, brand):
        """Sets the brand of this AuthToken.

        ~

        :param brand: The brand of this AuthToken.
        :type brand: str
        """
        allowed_values = ["EZTEXTING", "CLUBTEXTING", "GROUPTEXTING", "TELLMYCELL", "EZ", "CALLFIRE", "TESLA"]  # noqa: E501
        if brand not in allowed_values:
            raise ValueError(
                "Invalid value for `brand` ({0}), must be one of {1}"
                .format(brand, allowed_values)
            )

        self._brand = brand

    @property
    def ez_spa_client(self):
        """Gets the ez_spa_client of this AuthToken.

        ~

        :return: The ez_spa_client of this AuthToken.
        :rtype: bool
        """
        return self._ez_spa_client

    @ez_spa_client.setter
    def ez_spa_client(self, ez_spa_client):
        """Sets the ez_spa_client of this AuthToken.

        ~

        :param ez_spa_client: The ez_spa_client of this AuthToken.
        :type ez_spa_client: bool
        """

        self._ez_spa_client = ez_spa_client

    @property
    def migration(self):
        """Gets the migration of this AuthToken.

        ~

        :return: The migration of this AuthToken.
        :rtype: bool
        """
        return self._migration

    @migration.setter
    def migration(self, migration):
        """Sets the migration of this AuthToken.

        ~

        :param migration: The migration of this AuthToken.
        :type migration: bool
        """

        self._migration = migration

    @property
    def session(self):
        """Gets the session of this AuthToken.


        :return: The session of this AuthToken.
        :rtype: OAuthSession
        """
        return self._session

    @session.setter
    def session(self, session):
        """Sets the session of this AuthToken.


        :param session: The session of this AuthToken.
        :type session: OAuthSession
        """

        self._session = session

    @property
    def session_id(self):
        """Gets the session_id of this AuthToken.

        ~

        :return: The session_id of this AuthToken.
        :rtype: str
        """
        return self._session_id

    @session_id.setter
    def session_id(self, session_id):
        """Sets the session_id of this AuthToken.

        ~

        :param session_id: The session_id of this AuthToken.
        :type session_id: str
        """

        self._session_id = session_id

    @property
    def user_id(self):
        """Gets the user_id of this AuthToken.

        ~

        :return: The user_id of this AuthToken.
        :rtype: int
        """
        return self._user_id

    @user_id.setter
    def user_id(self, user_id):
        """Sets the user_id of this AuthToken.

        ~

        :param user_id: The user_id of this AuthToken.
        :type user_id: int
        """

        self._user_id = user_id
