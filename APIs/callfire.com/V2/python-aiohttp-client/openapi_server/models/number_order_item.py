# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class NumberOrderItem(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, fulfilled: List[str]=None, ordered: int=None, unit_cost: float=None):
        """NumberOrderItem - a model defined in OpenAPI

        :param fulfilled: The fulfilled of this NumberOrderItem.
        :param ordered: The ordered of this NumberOrderItem.
        :param unit_cost: The unit_cost of this NumberOrderItem.
        """
        self.openapi_types = {
            'fulfilled': List[str],
            'ordered': int,
            'unit_cost': float
        }

        self.attribute_map = {
            'fulfilled': 'fulfilled',
            'ordered': 'ordered',
            'unit_cost': 'unitCost'
        }

        self._fulfilled = fulfilled
        self._ordered = ordered
        self._unit_cost = unit_cost

    @classmethod
    def from_dict(cls, dikt: dict) -> 'NumberOrderItem':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The NumberOrderItem of this NumberOrderItem.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def fulfilled(self):
        """Gets the fulfilled of this NumberOrderItem.

        List of fulfilled items, e.g. phone numbers, keywords

        :return: The fulfilled of this NumberOrderItem.
        :rtype: List[str]
        """
        return self._fulfilled

    @fulfilled.setter
    def fulfilled(self, fulfilled):
        """Sets the fulfilled of this NumberOrderItem.

        List of fulfilled items, e.g. phone numbers, keywords

        :param fulfilled: The fulfilled of this NumberOrderItem.
        :type fulfilled: List[str]
        """

        self._fulfilled = fulfilled

    @property
    def ordered(self):
        """Gets the ordered of this NumberOrderItem.

        A total number of items bought within a single order item

        :return: The ordered of this NumberOrderItem.
        :rtype: int
        """
        return self._ordered

    @ordered.setter
    def ordered(self, ordered):
        """Sets the ordered of this NumberOrderItem.

        A total number of items bought within a single order item

        :param ordered: The ordered of this NumberOrderItem.
        :type ordered: int
        """

        self._ordered = ordered

    @property
    def unit_cost(self):
        """Gets the unit_cost of this NumberOrderItem.

        A cost of unit

        :return: The unit_cost of this NumberOrderItem.
        :rtype: float
        """
        return self._unit_cost

    @unit_cost.setter
    def unit_cost(self, unit_cost):
        """Sets the unit_cost of this NumberOrderItem.

        A cost of unit

        :param unit_cost: The unit_cost of this NumberOrderItem.
        :type unit_cost: float
        """

        self._unit_cost = unit_cost
