# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class Batch(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, broadcast_id: int=None, created: int=None, enabled: bool=None, id: int=None, name: str=None, remaining: int=None, size: int=None, status: str=None):
        """Batch - a model defined in OpenAPI

        :param broadcast_id: The broadcast_id of this Batch.
        :param created: The created of this Batch.
        :param enabled: The enabled of this Batch.
        :param id: The id of this Batch.
        :param name: The name of this Batch.
        :param remaining: The remaining of this Batch.
        :param size: The size of this Batch.
        :param status: The status of this Batch.
        """
        self.openapi_types = {
            'broadcast_id': int,
            'created': int,
            'enabled': bool,
            'id': int,
            'name': str,
            'remaining': int,
            'size': int,
            'status': str
        }

        self.attribute_map = {
            'broadcast_id': 'broadcastId',
            'created': 'created',
            'enabled': 'enabled',
            'id': 'id',
            'name': 'name',
            'remaining': 'remaining',
            'size': 'size',
            'status': 'status'
        }

        self._broadcast_id = broadcast_id
        self._created = created
        self._enabled = enabled
        self._id = id
        self._name = name
        self._remaining = remaining
        self._size = size
        self._status = status

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Batch':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Batch of this Batch.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def broadcast_id(self):
        """Gets the broadcast_id of this Batch.

        An id of broadcast which batch belongs to

        :return: The broadcast_id of this Batch.
        :rtype: int
        """
        return self._broadcast_id

    @broadcast_id.setter
    def broadcast_id(self, broadcast_id):
        """Sets the broadcast_id of this Batch.

        An id of broadcast which batch belongs to

        :param broadcast_id: The broadcast_id of this Batch.
        :type broadcast_id: int
        """

        self._broadcast_id = broadcast_id

    @property
    def created(self):
        """Gets the created of this Batch.

        A date and time when batch was created, formatted in unix time milliseconds. Example: 1473781817000 for Sat, 05 Jan 1985 14:03:37 GMT

        :return: The created of this Batch.
        :rtype: int
        """
        return self._created

    @created.setter
    def created(self, created):
        """Sets the created of this Batch.

        A date and time when batch was created, formatted in unix time milliseconds. Example: 1473781817000 for Sat, 05 Jan 1985 14:03:37 GMT

        :param created: The created of this Batch.
        :type created: int
        """

        self._created = created

    @property
    def enabled(self):
        """Gets the enabled of this Batch.

        An enabled batch. If batch is disabled its contacts remain undialed/untexted

        :return: The enabled of this Batch.
        :rtype: bool
        """
        return self._enabled

    @enabled.setter
    def enabled(self, enabled):
        """Sets the enabled of this Batch.

        An enabled batch. If batch is disabled its contacts remain undialed/untexted

        :param enabled: The enabled of this Batch.
        :type enabled: bool
        """

        self._enabled = enabled

    @property
    def id(self):
        """Gets the id of this Batch.

        A id of a batch

        :return: The id of this Batch.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Batch.

        A id of a batch

        :param id: The id of this Batch.
        :type id: int
        """

        self._id = id

    @property
    def name(self):
        """Gets the name of this Batch.

        A batch name

        :return: The name of this Batch.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Batch.

        A batch name

        :param name: The name of this Batch.
        :type name: str
        """

        self._name = name

    @property
    def remaining(self):
        """Gets the remaining of this Batch.

        A number of contacts remaining undialed/untexted

        :return: The remaining of this Batch.
        :rtype: int
        """
        return self._remaining

    @remaining.setter
    def remaining(self, remaining):
        """Sets the remaining of this Batch.

        A number of contacts remaining undialed/untexted

        :param remaining: The remaining of this Batch.
        :type remaining: int
        """

        self._remaining = remaining

    @property
    def size(self):
        """Gets the size of this Batch.

        A total number of contacts in batch

        :return: The size of this Batch.
        :rtype: int
        """
        return self._size

    @size.setter
    def size(self, size):
        """Sets the size of this Batch.

        A total number of contacts in batch

        :param size: The size of this Batch.
        :type size: int
        """

        self._size = size

    @property
    def status(self):
        """Gets the status of this Batch.

        A status of batch (NEW, VALIDATING, ERRORS, SOURCE_ERROR, ACTIVE). NEW - batch is queued for validation; VALIDATING - batch is currently validating; ERRORS - batch is processed, some validation errors occurred; SOURCE_ERROR - if contact source is contact list in CallFire system and it has an error; ACTIVE - batch is processed and ready

        :return: The status of this Batch.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this Batch.

        A status of batch (NEW, VALIDATING, ERRORS, SOURCE_ERROR, ACTIVE). NEW - batch is queued for validation; VALIDATING - batch is currently validating; ERRORS - batch is processed, some validation errors occurred; SOURCE_ERROR - if contact source is contact list in CallFire system and it has an error; ACTIVE - batch is processed and ready

        :param status: The status of this Batch.
        :type status: str
        """
        allowed_values = ["NEW", "VALIDATING", "ERRORS", "SOURCE_ERROR", "ACTIVE"]  # noqa: E501
        if status not in allowed_values:
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"
                .format(status, allowed_values)
            )

        self._status = status
