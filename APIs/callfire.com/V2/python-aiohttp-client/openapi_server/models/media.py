# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class Media(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, account_id: int=None, created: int=None, id: int=None, length_in_bytes: int=None, media_type: str=None, name: str=None, public_url: str=None):
        """Media - a model defined in OpenAPI

        :param account_id: The account_id of this Media.
        :param created: The created of this Media.
        :param id: The id of this Media.
        :param length_in_bytes: The length_in_bytes of this Media.
        :param media_type: The media_type of this Media.
        :param name: The name of this Media.
        :param public_url: The public_url of this Media.
        """
        self.openapi_types = {
            'account_id': int,
            'created': int,
            'id': int,
            'length_in_bytes': int,
            'media_type': str,
            'name': str,
            'public_url': str
        }

        self.attribute_map = {
            'account_id': 'accountId',
            'created': 'created',
            'id': 'id',
            'length_in_bytes': 'lengthInBytes',
            'media_type': 'mediaType',
            'name': 'name',
            'public_url': 'publicUrl'
        }

        self._account_id = account_id
        self._created = created
        self._id = id
        self._length_in_bytes = length_in_bytes
        self._media_type = media_type
        self._name = name
        self._public_url = public_url

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Media':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Media of this Media.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def account_id(self):
        """Gets the account_id of this Media.

        ~

        :return: The account_id of this Media.
        :rtype: int
        """
        return self._account_id

    @account_id.setter
    def account_id(self, account_id):
        """Sets the account_id of this Media.

        ~

        :param account_id: The account_id of this Media.
        :type account_id: int
        """

        self._account_id = account_id

    @property
    def created(self):
        """Gets the created of this Media.

        The time when the given resource was created, formatted in unix time milliseconds (read only). Example: 1473781817000 

        :return: The created of this Media.
        :rtype: int
        """
        return self._created

    @created.setter
    def created(self, created):
        """Sets the created of this Media.

        The time when the given resource was created, formatted in unix time milliseconds (read only). Example: 1473781817000 

        :param created: The created of this Media.
        :type created: int
        """

        self._created = created

    @property
    def id(self):
        """Gets the id of this Media.

        An id of a media file

        :return: The id of this Media.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Media.

        An id of a media file

        :param id: The id of this Media.
        :type id: int
        """

        self._id = id

    @property
    def length_in_bytes(self):
        """Gets the length_in_bytes of this Media.

        A size of a media file in bytes

        :return: The length_in_bytes of this Media.
        :rtype: int
        """
        return self._length_in_bytes

    @length_in_bytes.setter
    def length_in_bytes(self, length_in_bytes):
        """Sets the length_in_bytes of this Media.

        A size of a media file in bytes

        :param length_in_bytes: The length_in_bytes of this Media.
        :type length_in_bytes: int
        """

        self._length_in_bytes = length_in_bytes

    @property
    def media_type(self):
        """Gets the media_type of this Media.

        A MIME type of media file, ex: image/jpeg, image/png, video/mp4, audio/mp3, etc

        :return: The media_type of this Media.
        :rtype: str
        """
        return self._media_type

    @media_type.setter
    def media_type(self, media_type):
        """Sets the media_type of this Media.

        A MIME type of media file, ex: image/jpeg, image/png, video/mp4, audio/mp3, etc

        :param media_type: The media_type of this Media.
        :type media_type: str
        """

        self._media_type = media_type

    @property
    def name(self):
        """Gets the name of this Media.

        A name of a media file

        :return: The name of this Media.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Media.

        A name of a media file

        :param name: The name of this Media.
        :type name: str
        """

        self._name = name

    @property
    def public_url(self):
        """Gets the public_url of this Media.

        A public URL of a media file

        :return: The public_url of this Media.
        :rtype: str
        """
        return self._public_url

    @public_url.setter
    def public_url(self, public_url):
        """Sets the public_url of this Media.

        A public URL of a media file

        :param public_url: The public_url of this Media.
        :type public_url: str
        """

        self._public_url = public_url
