# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class TextInboundConfig(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, forward_enabled: bool=None, forward_number: str=None):
        """TextInboundConfig - a model defined in OpenAPI

        :param forward_enabled: The forward_enabled of this TextInboundConfig.
        :param forward_number: The forward_number of this TextInboundConfig.
        """
        self.openapi_types = {
            'forward_enabled': bool,
            'forward_number': str
        }

        self.attribute_map = {
            'forward_enabled': 'forwardEnabled',
            'forward_number': 'forwardNumber'
        }

        self._forward_enabled = forward_enabled
        self._forward_number = forward_number

    @classmethod
    def from_dict(cls, dikt: dict) -> 'TextInboundConfig':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The TextInboundConfig of this TextInboundConfig.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def forward_enabled(self):
        """Gets the forward_enabled of this TextInboundConfig.

        ~

        :return: The forward_enabled of this TextInboundConfig.
        :rtype: bool
        """
        return self._forward_enabled

    @forward_enabled.setter
    def forward_enabled(self, forward_enabled):
        """Sets the forward_enabled of this TextInboundConfig.

        ~

        :param forward_enabled: The forward_enabled of this TextInboundConfig.
        :type forward_enabled: bool
        """

        self._forward_enabled = forward_enabled

    @property
    def forward_number(self):
        """Gets the forward_number of this TextInboundConfig.

        ~

        :return: The forward_number of this TextInboundConfig.
        :rtype: str
        """
        return self._forward_number

    @forward_number.setter
    def forward_number(self, forward_number):
        """Sets the forward_number of this TextInboundConfig.

        ~

        :param forward_number: The forward_number of this TextInboundConfig.
        :type forward_number: str
        """

        self._forward_number = forward_number
