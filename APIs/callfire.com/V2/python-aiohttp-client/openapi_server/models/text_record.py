# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class TextRecord(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, billed_amount: float=None, caller_name: str=None, finish_time: int=None, id: int=None, labels: list[str]=None, message: str=None, switch_id: str=None, text_result: str=None, to_number: str=None):
        """TextRecord - a model defined in OpenAPI

        :param billed_amount: The billed_amount of this TextRecord.
        :param caller_name: The caller_name of this TextRecord.
        :param finish_time: The finish_time of this TextRecord.
        :param id: The id of this TextRecord.
        :param labels: The labels of this TextRecord.
        :param message: The message of this TextRecord.
        :param switch_id: The switch_id of this TextRecord.
        :param text_result: The text_result of this TextRecord.
        :param to_number: The to_number of this TextRecord.
        """
        self.openapi_types = {
            'billed_amount': float,
            'caller_name': str,
            'finish_time': int,
            'id': int,
            'labels': list[str],
            'message': str,
            'switch_id': str,
            'text_result': str,
            'to_number': str
        }

        self.attribute_map = {
            'billed_amount': 'billedAmount',
            'caller_name': 'callerName',
            'finish_time': 'finishTime',
            'id': 'id',
            'labels': 'labels',
            'message': 'message',
            'switch_id': 'switchId',
            'text_result': 'textResult',
            'to_number': 'toNumber'
        }

        self._billed_amount = billed_amount
        self._caller_name = caller_name
        self._finish_time = finish_time
        self._id = id
        self._labels = labels
        self._message = message
        self._switch_id = switch_id
        self._text_result = text_result
        self._to_number = to_number

    @classmethod
    def from_dict(cls, dikt: dict) -> 'TextRecord':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The TextRecord of this TextRecord.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def billed_amount(self):
        """Gets the billed_amount of this TextRecord.

        A cost of a sent text

        :return: The billed_amount of this TextRecord.
        :rtype: float
        """
        return self._billed_amount

    @billed_amount.setter
    def billed_amount(self, billed_amount):
        """Sets the billed_amount of this TextRecord.

        A cost of a sent text

        :param billed_amount: The billed_amount of this TextRecord.
        :type billed_amount: float
        """

        self._billed_amount = billed_amount

    @property
    def caller_name(self):
        """Gets the caller_name of this TextRecord.

        ~

        :return: The caller_name of this TextRecord.
        :rtype: str
        """
        return self._caller_name

    @caller_name.setter
    def caller_name(self, caller_name):
        """Sets the caller_name of this TextRecord.

        ~

        :param caller_name: The caller_name of this TextRecord.
        :type caller_name: str
        """

        self._caller_name = caller_name

    @property
    def finish_time(self):
        """Gets the finish_time of this TextRecord.

        A time when the given resource was updated, formatted in unix time milliseconds (read only). Example: 1473781817000

        :return: The finish_time of this TextRecord.
        :rtype: int
        """
        return self._finish_time

    @finish_time.setter
    def finish_time(self, finish_time):
        """Sets the finish_time of this TextRecord.

        A time when the given resource was updated, formatted in unix time milliseconds (read only). Example: 1473781817000

        :param finish_time: The finish_time of this TextRecord.
        :type finish_time: int
        """

        self._finish_time = finish_time

    @property
    def id(self):
        """Gets the id of this TextRecord.

        An id of a text record

        :return: The id of this TextRecord.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this TextRecord.

        An id of a text record

        :param id: The id of this TextRecord.
        :type id: int
        """

        self._id = id

    @property
    def labels(self):
        """Gets the labels of this TextRecord.

        Labels associated with a text action

        :return: The labels of this TextRecord.
        :rtype: list[str]
        """
        return self._labels

    @labels.setter
    def labels(self, labels):
        """Sets the labels of this TextRecord.

        Labels associated with a text action

        :param labels: The labels of this TextRecord.
        :type labels: list[str]
        """

        self._labels = labels

    @property
    def message(self):
        """Gets the message of this TextRecord.

        A text message

        :return: The message of this TextRecord.
        :rtype: str
        """
        return self._message

    @message.setter
    def message(self, message):
        """Sets the message of this TextRecord.

        A text message

        :param message: The message of this TextRecord.
        :type message: str
        """

        self._message = message

    @property
    def switch_id(self):
        """Gets the switch_id of this TextRecord.

        ~

        :return: The switch_id of this TextRecord.
        :rtype: str
        """
        return self._switch_id

    @switch_id.setter
    def switch_id(self, switch_id):
        """Sets the switch_id of this TextRecord.

        ~

        :param switch_id: The switch_id of this TextRecord.
        :type switch_id: str
        """

        self._switch_id = switch_id

    @property
    def text_result(self):
        """Gets the text_result of this TextRecord.

        Result of a text (SENT, RECEIVED, DNT, TOO_BIG, INTERNAL_ERROR, CARRIER_ERROR, CARRIER_TEMP_ERROR, UNDIALED). See [call states and results](https://developers.callfire.com/results-responses-errors.html)

        :return: The text_result of this TextRecord.
        :rtype: str
        """
        return self._text_result

    @text_result.setter
    def text_result(self, text_result):
        """Sets the text_result of this TextRecord.

        Result of a text (SENT, RECEIVED, DNT, TOO_BIG, INTERNAL_ERROR, CARRIER_ERROR, CARRIER_TEMP_ERROR, UNDIALED). See [call states and results](https://developers.callfire.com/results-responses-errors.html)

        :param text_result: The text_result of this TextRecord.
        :type text_result: str
        """
        allowed_values = ["SENT", "RECEIVED", "DNT", "TOO_BIG", "INTERNAL_ERROR", "CARRIER_ERROR", "CARRIER_TEMP_ERROR", "UNDIALED", "INVALID_NUMBER"]  # noqa: E501
        if text_result not in allowed_values:
            raise ValueError(
                "Invalid value for `text_result` ({0}), must be one of {1}"
                .format(text_result, allowed_values)
            )

        self._text_result = text_result

    @property
    def to_number(self):
        """Gets the to_number of this TextRecord.

        An attempted phone number

        :return: The to_number of this TextRecord.
        :rtype: str
        """
        return self._to_number

    @to_number.setter
    def to_number(self, to_number):
        """Sets the to_number of this TextRecord.

        An attempted phone number

        :param to_number: The to_number of this TextRecord.
        :type to_number: str
        """

        self._to_number = to_number
