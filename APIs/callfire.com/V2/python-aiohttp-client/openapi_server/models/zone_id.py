# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.zone_rules import ZoneRules
from openapi_server import util


class ZoneId(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, id: str=None, rules: ZoneRules=None):
        """ZoneId - a model defined in OpenAPI

        :param id: The id of this ZoneId.
        :param rules: The rules of this ZoneId.
        """
        self.openapi_types = {
            'id': str,
            'rules': ZoneRules
        }

        self.attribute_map = {
            'id': 'id',
            'rules': 'rules'
        }

        self._id = id
        self._rules = rules

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ZoneId':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ZoneId of this ZoneId.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self):
        """Gets the id of this ZoneId.

        ~

        :return: The id of this ZoneId.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this ZoneId.

        ~

        :param id: The id of this ZoneId.
        :type id: str
        """

        self._id = id

    @property
    def rules(self):
        """Gets the rules of this ZoneId.


        :return: The rules of this ZoneId.
        :rtype: ZoneRules
        """
        return self._rules

    @rules.setter
    def rules(self, rules):
        """Sets the rules of this ZoneId.


        :param rules: The rules of this ZoneId.
        :type rules: ZoneRules
        """

        self._rules = rules
