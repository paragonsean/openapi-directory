# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class TextBroadcastStatsDto(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, billed_amount: float=None, do_not_text_count: int=None, error_count: int=None, recieved_count: int=None, remaining_outbound_count: int=None, sent_count: int=None, too_big_count: int=None, total_outbound_count: int=None, unsent_count: int=None):
        """TextBroadcastStatsDto - a model defined in OpenAPI

        :param billed_amount: The billed_amount of this TextBroadcastStatsDto.
        :param do_not_text_count: The do_not_text_count of this TextBroadcastStatsDto.
        :param error_count: The error_count of this TextBroadcastStatsDto.
        :param recieved_count: The recieved_count of this TextBroadcastStatsDto.
        :param remaining_outbound_count: The remaining_outbound_count of this TextBroadcastStatsDto.
        :param sent_count: The sent_count of this TextBroadcastStatsDto.
        :param too_big_count: The too_big_count of this TextBroadcastStatsDto.
        :param total_outbound_count: The total_outbound_count of this TextBroadcastStatsDto.
        :param unsent_count: The unsent_count of this TextBroadcastStatsDto.
        """
        self.openapi_types = {
            'billed_amount': float,
            'do_not_text_count': int,
            'error_count': int,
            'recieved_count': int,
            'remaining_outbound_count': int,
            'sent_count': int,
            'too_big_count': int,
            'total_outbound_count': int,
            'unsent_count': int
        }

        self.attribute_map = {
            'billed_amount': 'billedAmount',
            'do_not_text_count': 'doNotTextCount',
            'error_count': 'errorCount',
            'recieved_count': 'recievedCount',
            'remaining_outbound_count': 'remainingOutboundCount',
            'sent_count': 'sentCount',
            'too_big_count': 'tooBigCount',
            'total_outbound_count': 'totalOutboundCount',
            'unsent_count': 'unsentCount'
        }

        self._billed_amount = billed_amount
        self._do_not_text_count = do_not_text_count
        self._error_count = error_count
        self._recieved_count = recieved_count
        self._remaining_outbound_count = remaining_outbound_count
        self._sent_count = sent_count
        self._too_big_count = too_big_count
        self._total_outbound_count = total_outbound_count
        self._unsent_count = unsent_count

    @classmethod
    def from_dict(cls, dikt: dict) -> 'TextBroadcastStatsDto':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The TextBroadcastStatsDto of this TextBroadcastStatsDto.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def billed_amount(self):
        """Gets the billed_amount of this TextBroadcastStatsDto.

        ~

        :return: The billed_amount of this TextBroadcastStatsDto.
        :rtype: float
        """
        return self._billed_amount

    @billed_amount.setter
    def billed_amount(self, billed_amount):
        """Sets the billed_amount of this TextBroadcastStatsDto.

        ~

        :param billed_amount: The billed_amount of this TextBroadcastStatsDto.
        :type billed_amount: float
        """

        self._billed_amount = billed_amount

    @property
    def do_not_text_count(self):
        """Gets the do_not_text_count of this TextBroadcastStatsDto.

        ~

        :return: The do_not_text_count of this TextBroadcastStatsDto.
        :rtype: int
        """
        return self._do_not_text_count

    @do_not_text_count.setter
    def do_not_text_count(self, do_not_text_count):
        """Sets the do_not_text_count of this TextBroadcastStatsDto.

        ~

        :param do_not_text_count: The do_not_text_count of this TextBroadcastStatsDto.
        :type do_not_text_count: int
        """

        self._do_not_text_count = do_not_text_count

    @property
    def error_count(self):
        """Gets the error_count of this TextBroadcastStatsDto.

        ~

        :return: The error_count of this TextBroadcastStatsDto.
        :rtype: int
        """
        return self._error_count

    @error_count.setter
    def error_count(self, error_count):
        """Sets the error_count of this TextBroadcastStatsDto.

        ~

        :param error_count: The error_count of this TextBroadcastStatsDto.
        :type error_count: int
        """

        self._error_count = error_count

    @property
    def recieved_count(self):
        """Gets the recieved_count of this TextBroadcastStatsDto.

        ~

        :return: The recieved_count of this TextBroadcastStatsDto.
        :rtype: int
        """
        return self._recieved_count

    @recieved_count.setter
    def recieved_count(self, recieved_count):
        """Sets the recieved_count of this TextBroadcastStatsDto.

        ~

        :param recieved_count: The recieved_count of this TextBroadcastStatsDto.
        :type recieved_count: int
        """

        self._recieved_count = recieved_count

    @property
    def remaining_outbound_count(self):
        """Gets the remaining_outbound_count of this TextBroadcastStatsDto.

        ~

        :return: The remaining_outbound_count of this TextBroadcastStatsDto.
        :rtype: int
        """
        return self._remaining_outbound_count

    @remaining_outbound_count.setter
    def remaining_outbound_count(self, remaining_outbound_count):
        """Sets the remaining_outbound_count of this TextBroadcastStatsDto.

        ~

        :param remaining_outbound_count: The remaining_outbound_count of this TextBroadcastStatsDto.
        :type remaining_outbound_count: int
        """

        self._remaining_outbound_count = remaining_outbound_count

    @property
    def sent_count(self):
        """Gets the sent_count of this TextBroadcastStatsDto.

        ~

        :return: The sent_count of this TextBroadcastStatsDto.
        :rtype: int
        """
        return self._sent_count

    @sent_count.setter
    def sent_count(self, sent_count):
        """Sets the sent_count of this TextBroadcastStatsDto.

        ~

        :param sent_count: The sent_count of this TextBroadcastStatsDto.
        :type sent_count: int
        """

        self._sent_count = sent_count

    @property
    def too_big_count(self):
        """Gets the too_big_count of this TextBroadcastStatsDto.

        ~

        :return: The too_big_count of this TextBroadcastStatsDto.
        :rtype: int
        """
        return self._too_big_count

    @too_big_count.setter
    def too_big_count(self, too_big_count):
        """Sets the too_big_count of this TextBroadcastStatsDto.

        ~

        :param too_big_count: The too_big_count of this TextBroadcastStatsDto.
        :type too_big_count: int
        """

        self._too_big_count = too_big_count

    @property
    def total_outbound_count(self):
        """Gets the total_outbound_count of this TextBroadcastStatsDto.

        ~

        :return: The total_outbound_count of this TextBroadcastStatsDto.
        :rtype: int
        """
        return self._total_outbound_count

    @total_outbound_count.setter
    def total_outbound_count(self, total_outbound_count):
        """Sets the total_outbound_count of this TextBroadcastStatsDto.

        ~

        :param total_outbound_count: The total_outbound_count of this TextBroadcastStatsDto.
        :type total_outbound_count: int
        """

        self._total_outbound_count = total_outbound_count

    @property
    def unsent_count(self):
        """Gets the unsent_count of this TextBroadcastStatsDto.

        ~

        :return: The unsent_count of this TextBroadcastStatsDto.
        :rtype: int
        """
        return self._unsent_count

    @unsent_count.setter
    def unsent_count(self, unsent_count):
        """Sets the unsent_count of this TextBroadcastStatsDto.

        ~

        :param unsent_count: The unsent_count of this TextBroadcastStatsDto.
        :type unsent_count: int
        """

        self._unsent_count = unsent_count
