# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.auth_token import AuthToken
from openapi_server import util


class AuthController(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, admin: bool=None, auth_brand: str=None, auth_token: AuthToken=None, migration: bool=None):
        """AuthController - a model defined in OpenAPI

        :param admin: The admin of this AuthController.
        :param auth_brand: The auth_brand of this AuthController.
        :param auth_token: The auth_token of this AuthController.
        :param migration: The migration of this AuthController.
        """
        self.openapi_types = {
            'admin': bool,
            'auth_brand': str,
            'auth_token': AuthToken,
            'migration': bool
        }

        self.attribute_map = {
            'admin': 'admin',
            'auth_brand': 'authBrand',
            'auth_token': 'authToken',
            'migration': 'migration'
        }

        self._admin = admin
        self._auth_brand = auth_brand
        self._auth_token = auth_token
        self._migration = migration

    @classmethod
    def from_dict(cls, dikt: dict) -> 'AuthController':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The AuthController of this AuthController.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def admin(self):
        """Gets the admin of this AuthController.

        ~

        :return: The admin of this AuthController.
        :rtype: bool
        """
        return self._admin

    @admin.setter
    def admin(self, admin):
        """Sets the admin of this AuthController.

        ~

        :param admin: The admin of this AuthController.
        :type admin: bool
        """

        self._admin = admin

    @property
    def auth_brand(self):
        """Gets the auth_brand of this AuthController.

        ~

        :return: The auth_brand of this AuthController.
        :rtype: str
        """
        return self._auth_brand

    @auth_brand.setter
    def auth_brand(self, auth_brand):
        """Sets the auth_brand of this AuthController.

        ~

        :param auth_brand: The auth_brand of this AuthController.
        :type auth_brand: str
        """
        allowed_values = ["EZTEXTING", "CLUBTEXTING", "GROUPTEXTING", "TELLMYCELL", "EZ", "CALLFIRE", "TESLA"]  # noqa: E501
        if auth_brand not in allowed_values:
            raise ValueError(
                "Invalid value for `auth_brand` ({0}), must be one of {1}"
                .format(auth_brand, allowed_values)
            )

        self._auth_brand = auth_brand

    @property
    def auth_token(self):
        """Gets the auth_token of this AuthController.


        :return: The auth_token of this AuthController.
        :rtype: AuthToken
        """
        return self._auth_token

    @auth_token.setter
    def auth_token(self, auth_token):
        """Sets the auth_token of this AuthController.


        :param auth_token: The auth_token of this AuthController.
        :type auth_token: AuthToken
        """

        self._auth_token = auth_token

    @property
    def migration(self):
        """Gets the migration of this AuthController.

        ~

        :return: The migration of this AuthController.
        :rtype: bool
        """
        return self._migration

    @migration.setter
    def migration(self, migration):
        """Sets the migration of this AuthController.

        ~

        :param migration: The migration of this AuthController.
        :type migration: bool
        """

        self._migration = migration
