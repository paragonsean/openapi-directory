# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class DeliveryReport(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, campaign_id: int=None, carrier: str=None, delivery_category: str=None, delivery_state: str=None, from_number: str=None, message_text: str=None, to_number: str=None, updated: datetime=None):
        """DeliveryReport - a model defined in OpenAPI

        :param campaign_id: The campaign_id of this DeliveryReport.
        :param carrier: The carrier of this DeliveryReport.
        :param delivery_category: The delivery_category of this DeliveryReport.
        :param delivery_state: The delivery_state of this DeliveryReport.
        :param from_number: The from_number of this DeliveryReport.
        :param message_text: The message_text of this DeliveryReport.
        :param to_number: The to_number of this DeliveryReport.
        :param updated: The updated of this DeliveryReport.
        """
        self.openapi_types = {
            'campaign_id': int,
            'carrier': str,
            'delivery_category': str,
            'delivery_state': str,
            'from_number': str,
            'message_text': str,
            'to_number': str,
            'updated': datetime
        }

        self.attribute_map = {
            'campaign_id': 'campaignId',
            'carrier': 'carrier',
            'delivery_category': 'deliveryCategory',
            'delivery_state': 'deliveryState',
            'from_number': 'fromNumber',
            'message_text': 'messageText',
            'to_number': 'toNumber',
            'updated': 'updated'
        }

        self._campaign_id = campaign_id
        self._carrier = carrier
        self._delivery_category = delivery_category
        self._delivery_state = delivery_state
        self._from_number = from_number
        self._message_text = message_text
        self._to_number = to_number
        self._updated = updated

    @classmethod
    def from_dict(cls, dikt: dict) -> 'DeliveryReport':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The DeliveryReport of this DeliveryReport.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def campaign_id(self):
        """Gets the campaign_id of this DeliveryReport.

        ~

        :return: The campaign_id of this DeliveryReport.
        :rtype: int
        """
        return self._campaign_id

    @campaign_id.setter
    def campaign_id(self, campaign_id):
        """Sets the campaign_id of this DeliveryReport.

        ~

        :param campaign_id: The campaign_id of this DeliveryReport.
        :type campaign_id: int
        """

        self._campaign_id = campaign_id

    @property
    def carrier(self):
        """Gets the carrier of this DeliveryReport.

        ~

        :return: The carrier of this DeliveryReport.
        :rtype: str
        """
        return self._carrier

    @carrier.setter
    def carrier(self, carrier):
        """Sets the carrier of this DeliveryReport.

        ~

        :param carrier: The carrier of this DeliveryReport.
        :type carrier: str
        """

        self._carrier = carrier

    @property
    def delivery_category(self):
        """Gets the delivery_category of this DeliveryReport.

        ~

        :return: The delivery_category of this DeliveryReport.
        :rtype: str
        """
        return self._delivery_category

    @delivery_category.setter
    def delivery_category(self, delivery_category):
        """Sets the delivery_category of this DeliveryReport.

        ~

        :param delivery_category: The delivery_category of this DeliveryReport.
        :type delivery_category: str
        """
        allowed_values = ["NO_DATA", "OPTED_OUT", "BOUNCED", "NO_CREDITS", "DELIVERED"]  # noqa: E501
        if delivery_category not in allowed_values:
            raise ValueError(
                "Invalid value for `delivery_category` ({0}), must be one of {1}"
                .format(delivery_category, allowed_values)
            )

        self._delivery_category = delivery_category

    @property
    def delivery_state(self):
        """Gets the delivery_state of this DeliveryReport.

        ~

        :return: The delivery_state of this DeliveryReport.
        :rtype: str
        """
        return self._delivery_state

    @delivery_state.setter
    def delivery_state(self, delivery_state):
        """Sets the delivery_state of this DeliveryReport.

        ~

        :param delivery_state: The delivery_state of this DeliveryReport.
        :type delivery_state: str
        """
        allowed_values = ["DELIVERED", "UNSENT_OPTED_OUT_GLOBAL", "UNSENT_OPTED_OUT_LOCAL", "UNSENT_NO_CREDITS", "GATEWAY_REJECTED", "CARRIER_REJECTED", "NOT_DELIVERED", "UNSENT_INVALID_NUMBER", "UNSENT_BAD_DATA", "UNSENT_FORCE_STOPPED", "UNSENT_PERIOD_LIMIT", "UNSENT_INTERNATIONAL", "UNSENT_INVALID_TIMEZONE_OR_DNC", "UNSENT_ALREADY_SCRUBBED", "UNSENT_SYSTEM_ERROR", "UNSENT_NO_WIRELESS_CARRIER", "UNSENT_MESSAGE_TOO_LONG", "UNSENT_MESSAGE_BLOCKED", "UNSENT_QUEUE_LIMIT_REACHED", "UNSENT_TOKEN_LIMIT_REACHED", "UNSENT_TIME_LIMIT_REACHED", "UNSENT_SCHEDULER_CAPACITY_EXCEEDED", "SPAM_DETECTED", "UNSENT_NO_GATEWAY", "UNSENT_DAILY_LIMIT_REACHED", "ORIGINATED", "SUBMITTED", "FORWARDED", "NOT_GIVEN", "UNKNOWN", "RETRY_MMS_AS_SMS", "QUEUED", "QUEUED_TRANSCODE", "ORIGINAL", "DUPE", "TRUNCATED", "REQUEUED_RATE_LIMITED", "BUFFERED", "RATE_LIMIT_EXCEEDED", "SERVICE_UNAVAILABLE", "SEND_MMS_AS_SMS", "REQUEUED_RECOVERABLE_ERROR", "SEND_WITH_ADDITIONAL_SPID", "UNSENT_FREE_TRIAL"]  # noqa: E501
        if delivery_state not in allowed_values:
            raise ValueError(
                "Invalid value for `delivery_state` ({0}), must be one of {1}"
                .format(delivery_state, allowed_values)
            )

        self._delivery_state = delivery_state

    @property
    def from_number(self):
        """Gets the from_number of this DeliveryReport.

        ~

        :return: The from_number of this DeliveryReport.
        :rtype: str
        """
        return self._from_number

    @from_number.setter
    def from_number(self, from_number):
        """Sets the from_number of this DeliveryReport.

        ~

        :param from_number: The from_number of this DeliveryReport.
        :type from_number: str
        """

        self._from_number = from_number

    @property
    def message_text(self):
        """Gets the message_text of this DeliveryReport.

        ~

        :return: The message_text of this DeliveryReport.
        :rtype: str
        """
        return self._message_text

    @message_text.setter
    def message_text(self, message_text):
        """Sets the message_text of this DeliveryReport.

        ~

        :param message_text: The message_text of this DeliveryReport.
        :type message_text: str
        """

        self._message_text = message_text

    @property
    def to_number(self):
        """Gets the to_number of this DeliveryReport.

        ~

        :return: The to_number of this DeliveryReport.
        :rtype: str
        """
        return self._to_number

    @to_number.setter
    def to_number(self, to_number):
        """Sets the to_number of this DeliveryReport.

        ~

        :param to_number: The to_number of this DeliveryReport.
        :type to_number: str
        """

        self._to_number = to_number

    @property
    def updated(self):
        """Gets the updated of this DeliveryReport.

        ~

        :return: The updated of this DeliveryReport.
        :rtype: datetime
        """
        return self._updated

    @updated.setter
    def updated(self, updated):
        """Sets the updated of this DeliveryReport.

        ~

        :param updated: The updated of this DeliveryReport.
        :type updated: datetime
        """

        self._updated = updated
