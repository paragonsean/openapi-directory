/*
 * Box Platform API
 * [Box Platform](https://box.dev) provides functionality to provide access to content stored within [Box](https://box.com). It provides endpoints for basic manipulation of files and folders, management of users within an enterprise, as well as more complex topics such as legal holds and retention policies.
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: devrel@box.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.math.BigDecimal;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Additional information about the classification.  This is not an exclusive list of properties, and more object fields might be returned. These fields are used for internal Box Shield and Box Governance purposes and no additional value must be derived from these fields.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:18:30.779851-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ClassificationTemplateFieldsInnerOptionsInnerStaticConfigClassification {
  public static final String SERIALIZED_NAME_CLASSIFICATION_DEFINITION = "classificationDefinition";
  @SerializedName(SERIALIZED_NAME_CLASSIFICATION_DEFINITION)
  private String classificationDefinition;

  public static final String SERIALIZED_NAME_COLOR_I_D = "colorID";
  @SerializedName(SERIALIZED_NAME_COLOR_I_D)
  private BigDecimal colorID;

  public ClassificationTemplateFieldsInnerOptionsInnerStaticConfigClassification() {
  }

  public ClassificationTemplateFieldsInnerOptionsInnerStaticConfigClassification classificationDefinition(String classificationDefinition) {
    this.classificationDefinition = classificationDefinition;
    return this;
  }

  /**
   * A longer description of the classification.
   * @return classificationDefinition
   */
  @javax.annotation.Nullable
  public String getClassificationDefinition() {
    return classificationDefinition;
  }

  public void setClassificationDefinition(String classificationDefinition) {
    this.classificationDefinition = classificationDefinition;
  }


  public ClassificationTemplateFieldsInnerOptionsInnerStaticConfigClassification colorID(BigDecimal colorID) {
    this.colorID = colorID;
    return this;
  }

  /**
   * An internal Box identifier used to assign a color to a classification label.  Mapping between a &#x60;colorID&#x60; and a color may change without notice. Currently, the color mappings are as follows.  * &#x60;0&#x60;: Yellow * &#x60;1&#x60;: Orange * &#x60;2&#x60;: Watermelon red * &#x60;3&#x60;: Purple rain * &#x60;4&#x60;: Light blue * &#x60;5&#x60;: Dark blue * &#x60;6&#x60;: Light green * &#x60;7&#x60;: Gray
   * @return colorID
   */
  @javax.annotation.Nullable
  public BigDecimal getColorID() {
    return colorID;
  }

  public void setColorID(BigDecimal colorID) {
    this.colorID = colorID;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ClassificationTemplateFieldsInnerOptionsInnerStaticConfigClassification classificationTemplateFieldsInnerOptionsInnerStaticConfigClassification = (ClassificationTemplateFieldsInnerOptionsInnerStaticConfigClassification) o;
    return Objects.equals(this.classificationDefinition, classificationTemplateFieldsInnerOptionsInnerStaticConfigClassification.classificationDefinition) &&
        Objects.equals(this.colorID, classificationTemplateFieldsInnerOptionsInnerStaticConfigClassification.colorID);
  }

  @Override
  public int hashCode() {
    return Objects.hash(classificationDefinition, colorID);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ClassificationTemplateFieldsInnerOptionsInnerStaticConfigClassification {\n");
    sb.append("    classificationDefinition: ").append(toIndentedString(classificationDefinition)).append("\n");
    sb.append("    colorID: ").append(toIndentedString(colorID)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("classificationDefinition");
    openapiFields.add("colorID");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ClassificationTemplateFieldsInnerOptionsInnerStaticConfigClassification
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ClassificationTemplateFieldsInnerOptionsInnerStaticConfigClassification.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ClassificationTemplateFieldsInnerOptionsInnerStaticConfigClassification is not found in the empty JSON string", ClassificationTemplateFieldsInnerOptionsInnerStaticConfigClassification.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ClassificationTemplateFieldsInnerOptionsInnerStaticConfigClassification.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ClassificationTemplateFieldsInnerOptionsInnerStaticConfigClassification` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("classificationDefinition") != null && !jsonObj.get("classificationDefinition").isJsonNull()) && !jsonObj.get("classificationDefinition").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `classificationDefinition` to be a primitive type in the JSON string but got `%s`", jsonObj.get("classificationDefinition").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ClassificationTemplateFieldsInnerOptionsInnerStaticConfigClassification.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ClassificationTemplateFieldsInnerOptionsInnerStaticConfigClassification' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ClassificationTemplateFieldsInnerOptionsInnerStaticConfigClassification> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ClassificationTemplateFieldsInnerOptionsInnerStaticConfigClassification.class));

       return (TypeAdapter<T>) new TypeAdapter<ClassificationTemplateFieldsInnerOptionsInnerStaticConfigClassification>() {
           @Override
           public void write(JsonWriter out, ClassificationTemplateFieldsInnerOptionsInnerStaticConfigClassification value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ClassificationTemplateFieldsInnerOptionsInnerStaticConfigClassification read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ClassificationTemplateFieldsInnerOptionsInnerStaticConfigClassification given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ClassificationTemplateFieldsInnerOptionsInnerStaticConfigClassification
   * @throws IOException if the JSON string is invalid with respect to ClassificationTemplateFieldsInnerOptionsInnerStaticConfigClassification
   */
  public static ClassificationTemplateFieldsInnerOptionsInnerStaticConfigClassification fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ClassificationTemplateFieldsInnerOptionsInnerStaticConfigClassification.class);
  }

  /**
   * Convert an instance of ClassificationTemplateFieldsInnerOptionsInnerStaticConfigClassification to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

