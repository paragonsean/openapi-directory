/*
 * Box Platform API
 * [Box Platform](https://box.dev) provides functionality to provide access to content stored within [Box](https://box.com). It provides endpoints for basic manipulation of files and folders, management of users within an enterprise, as well as more complex topics such as legal holds and retention policies.
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: devrel@box.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * A [JSON-Patch](https://tools.ietf.org/html/rfc6902) operation for a change to make to the metadata instance.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:18:30.779851-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class AMetadataTemplateUpdateOperation {
  public static final String SERIALIZED_NAME_DATA = "data";
  @SerializedName(SERIALIZED_NAME_DATA)
  private Map<String, String> data = new HashMap<>();

  public static final String SERIALIZED_NAME_ENUM_OPTION_KEY = "enumOptionKey";
  @SerializedName(SERIALIZED_NAME_ENUM_OPTION_KEY)
  private String enumOptionKey;

  public static final String SERIALIZED_NAME_ENUM_OPTION_KEYS = "enumOptionKeys";
  @SerializedName(SERIALIZED_NAME_ENUM_OPTION_KEYS)
  private List<String> enumOptionKeys = new ArrayList<>();

  public static final String SERIALIZED_NAME_FIELD_KEY = "fieldKey";
  @SerializedName(SERIALIZED_NAME_FIELD_KEY)
  private String fieldKey;

  public static final String SERIALIZED_NAME_FIELD_KEYS = "fieldKeys";
  @SerializedName(SERIALIZED_NAME_FIELD_KEYS)
  private List<String> fieldKeys = new ArrayList<>();

  public static final String SERIALIZED_NAME_MULTI_SELECT_OPTION_KEY = "multiSelectOptionKey";
  @SerializedName(SERIALIZED_NAME_MULTI_SELECT_OPTION_KEY)
  private String multiSelectOptionKey;

  public static final String SERIALIZED_NAME_MULTI_SELECT_OPTION_KEYS = "multiSelectOptionKeys";
  @SerializedName(SERIALIZED_NAME_MULTI_SELECT_OPTION_KEYS)
  private List<String> multiSelectOptionKeys = new ArrayList<>();

  /**
   * The type of change to perform on the template. Some of these are hazardous as they will change existing templates.
   */
  @JsonAdapter(OpEnum.Adapter.class)
  public enum OpEnum {
    EDIT_TEMPLATE("editTemplate"),
    
    ADD_FIELD("addField"),
    
    REORDER_FIELDS("reorderFields"),
    
    ADD_ENUM_OPTION("addEnumOption"),
    
    REORDER_ENUM_OPTIONS("reorderEnumOptions"),
    
    REORDER_MULTI_SELECT_OPTIONS("reorderMultiSelectOptions"),
    
    ADD_MULTI_SELECT_OPTION("addMultiSelectOption"),
    
    EDIT_FIELD("editField"),
    
    REMOVE_FIELD("removeField"),
    
    EDIT_ENUM_OPTION("editEnumOption"),
    
    REMOVE_ENUM_OPTION("removeEnumOption"),
    
    EDIT_MULTI_SELECT_OPTION("editMultiSelectOption"),
    
    REMOVE_MULTI_SELECT_OPTION("removeMultiSelectOption");

    private String value;

    OpEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static OpEnum fromValue(String value) {
      for (OpEnum b : OpEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<OpEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final OpEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public OpEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return OpEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      OpEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_OP = "op";
  @SerializedName(SERIALIZED_NAME_OP)
  private OpEnum op;

  public AMetadataTemplateUpdateOperation() {
  }

  public AMetadataTemplateUpdateOperation data(Map<String, String> data) {
    this.data = data;
    return this;
  }

  public AMetadataTemplateUpdateOperation putDataItem(String key, String dataItem) {
    if (this.data == null) {
      this.data = new HashMap<>();
    }
    this.data.put(key, dataItem);
    return this;
  }

  /**
   * The data for the operation. This will vary depending on the operation being performed.
   * @return data
   */
  @javax.annotation.Nullable
  public Map<String, String> getData() {
    return data;
  }

  public void setData(Map<String, String> data) {
    this.data = data;
  }


  public AMetadataTemplateUpdateOperation enumOptionKey(String enumOptionKey) {
    this.enumOptionKey = enumOptionKey;
    return this;
  }

  /**
   * For operations that affect a single &#x60;enum&#x60; option this defines the key of the option that is affected.
   * @return enumOptionKey
   */
  @javax.annotation.Nullable
  public String getEnumOptionKey() {
    return enumOptionKey;
  }

  public void setEnumOptionKey(String enumOptionKey) {
    this.enumOptionKey = enumOptionKey;
  }


  public AMetadataTemplateUpdateOperation enumOptionKeys(List<String> enumOptionKeys) {
    this.enumOptionKeys = enumOptionKeys;
    return this;
  }

  public AMetadataTemplateUpdateOperation addEnumOptionKeysItem(String enumOptionKeysItem) {
    if (this.enumOptionKeys == null) {
      this.enumOptionKeys = new ArrayList<>();
    }
    this.enumOptionKeys.add(enumOptionKeysItem);
    return this;
  }

  /**
   * For operations that affect multiple &#x60;enum&#x60; options this defines the keys of the options that are affected.
   * @return enumOptionKeys
   */
  @javax.annotation.Nullable
  public List<String> getEnumOptionKeys() {
    return enumOptionKeys;
  }

  public void setEnumOptionKeys(List<String> enumOptionKeys) {
    this.enumOptionKeys = enumOptionKeys;
  }


  public AMetadataTemplateUpdateOperation fieldKey(String fieldKey) {
    this.fieldKey = fieldKey;
    return this;
  }

  /**
   * For operations that affect a single field this defines the key of the field that is affected.
   * @return fieldKey
   */
  @javax.annotation.Nullable
  public String getFieldKey() {
    return fieldKey;
  }

  public void setFieldKey(String fieldKey) {
    this.fieldKey = fieldKey;
  }


  public AMetadataTemplateUpdateOperation fieldKeys(List<String> fieldKeys) {
    this.fieldKeys = fieldKeys;
    return this;
  }

  public AMetadataTemplateUpdateOperation addFieldKeysItem(String fieldKeysItem) {
    if (this.fieldKeys == null) {
      this.fieldKeys = new ArrayList<>();
    }
    this.fieldKeys.add(fieldKeysItem);
    return this;
  }

  /**
   * For operations that affect multiple fields this defines the keys of the fields that are affected.
   * @return fieldKeys
   */
  @javax.annotation.Nullable
  public List<String> getFieldKeys() {
    return fieldKeys;
  }

  public void setFieldKeys(List<String> fieldKeys) {
    this.fieldKeys = fieldKeys;
  }


  public AMetadataTemplateUpdateOperation multiSelectOptionKey(String multiSelectOptionKey) {
    this.multiSelectOptionKey = multiSelectOptionKey;
    return this;
  }

  /**
   * For operations that affect a single multi select option this defines the key of the option that is affected.
   * @return multiSelectOptionKey
   */
  @javax.annotation.Nullable
  public String getMultiSelectOptionKey() {
    return multiSelectOptionKey;
  }

  public void setMultiSelectOptionKey(String multiSelectOptionKey) {
    this.multiSelectOptionKey = multiSelectOptionKey;
  }


  public AMetadataTemplateUpdateOperation multiSelectOptionKeys(List<String> multiSelectOptionKeys) {
    this.multiSelectOptionKeys = multiSelectOptionKeys;
    return this;
  }

  public AMetadataTemplateUpdateOperation addMultiSelectOptionKeysItem(String multiSelectOptionKeysItem) {
    if (this.multiSelectOptionKeys == null) {
      this.multiSelectOptionKeys = new ArrayList<>();
    }
    this.multiSelectOptionKeys.add(multiSelectOptionKeysItem);
    return this;
  }

  /**
   * For operations that affect multiple multi select options this defines the keys of the options that are affected.
   * @return multiSelectOptionKeys
   */
  @javax.annotation.Nullable
  public List<String> getMultiSelectOptionKeys() {
    return multiSelectOptionKeys;
  }

  public void setMultiSelectOptionKeys(List<String> multiSelectOptionKeys) {
    this.multiSelectOptionKeys = multiSelectOptionKeys;
  }


  public AMetadataTemplateUpdateOperation op(OpEnum op) {
    this.op = op;
    return this;
  }

  /**
   * The type of change to perform on the template. Some of these are hazardous as they will change existing templates.
   * @return op
   */
  @javax.annotation.Nonnull
  public OpEnum getOp() {
    return op;
  }

  public void setOp(OpEnum op) {
    this.op = op;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    AMetadataTemplateUpdateOperation aMetadataTemplateUpdateOperation = (AMetadataTemplateUpdateOperation) o;
    return Objects.equals(this.data, aMetadataTemplateUpdateOperation.data) &&
        Objects.equals(this.enumOptionKey, aMetadataTemplateUpdateOperation.enumOptionKey) &&
        Objects.equals(this.enumOptionKeys, aMetadataTemplateUpdateOperation.enumOptionKeys) &&
        Objects.equals(this.fieldKey, aMetadataTemplateUpdateOperation.fieldKey) &&
        Objects.equals(this.fieldKeys, aMetadataTemplateUpdateOperation.fieldKeys) &&
        Objects.equals(this.multiSelectOptionKey, aMetadataTemplateUpdateOperation.multiSelectOptionKey) &&
        Objects.equals(this.multiSelectOptionKeys, aMetadataTemplateUpdateOperation.multiSelectOptionKeys) &&
        Objects.equals(this.op, aMetadataTemplateUpdateOperation.op);
  }

  @Override
  public int hashCode() {
    return Objects.hash(data, enumOptionKey, enumOptionKeys, fieldKey, fieldKeys, multiSelectOptionKey, multiSelectOptionKeys, op);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class AMetadataTemplateUpdateOperation {\n");
    sb.append("    data: ").append(toIndentedString(data)).append("\n");
    sb.append("    enumOptionKey: ").append(toIndentedString(enumOptionKey)).append("\n");
    sb.append("    enumOptionKeys: ").append(toIndentedString(enumOptionKeys)).append("\n");
    sb.append("    fieldKey: ").append(toIndentedString(fieldKey)).append("\n");
    sb.append("    fieldKeys: ").append(toIndentedString(fieldKeys)).append("\n");
    sb.append("    multiSelectOptionKey: ").append(toIndentedString(multiSelectOptionKey)).append("\n");
    sb.append("    multiSelectOptionKeys: ").append(toIndentedString(multiSelectOptionKeys)).append("\n");
    sb.append("    op: ").append(toIndentedString(op)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("data");
    openapiFields.add("enumOptionKey");
    openapiFields.add("enumOptionKeys");
    openapiFields.add("fieldKey");
    openapiFields.add("fieldKeys");
    openapiFields.add("multiSelectOptionKey");
    openapiFields.add("multiSelectOptionKeys");
    openapiFields.add("op");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("op");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to AMetadataTemplateUpdateOperation
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!AMetadataTemplateUpdateOperation.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in AMetadataTemplateUpdateOperation is not found in the empty JSON string", AMetadataTemplateUpdateOperation.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!AMetadataTemplateUpdateOperation.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `AMetadataTemplateUpdateOperation` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : AMetadataTemplateUpdateOperation.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("enumOptionKey") != null && !jsonObj.get("enumOptionKey").isJsonNull()) && !jsonObj.get("enumOptionKey").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `enumOptionKey` to be a primitive type in the JSON string but got `%s`", jsonObj.get("enumOptionKey").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("enumOptionKeys") != null && !jsonObj.get("enumOptionKeys").isJsonNull() && !jsonObj.get("enumOptionKeys").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `enumOptionKeys` to be an array in the JSON string but got `%s`", jsonObj.get("enumOptionKeys").toString()));
      }
      if ((jsonObj.get("fieldKey") != null && !jsonObj.get("fieldKey").isJsonNull()) && !jsonObj.get("fieldKey").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `fieldKey` to be a primitive type in the JSON string but got `%s`", jsonObj.get("fieldKey").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("fieldKeys") != null && !jsonObj.get("fieldKeys").isJsonNull() && !jsonObj.get("fieldKeys").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `fieldKeys` to be an array in the JSON string but got `%s`", jsonObj.get("fieldKeys").toString()));
      }
      if ((jsonObj.get("multiSelectOptionKey") != null && !jsonObj.get("multiSelectOptionKey").isJsonNull()) && !jsonObj.get("multiSelectOptionKey").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `multiSelectOptionKey` to be a primitive type in the JSON string but got `%s`", jsonObj.get("multiSelectOptionKey").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("multiSelectOptionKeys") != null && !jsonObj.get("multiSelectOptionKeys").isJsonNull() && !jsonObj.get("multiSelectOptionKeys").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `multiSelectOptionKeys` to be an array in the JSON string but got `%s`", jsonObj.get("multiSelectOptionKeys").toString()));
      }
      if (!jsonObj.get("op").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `op` to be a primitive type in the JSON string but got `%s`", jsonObj.get("op").toString()));
      }
      // validate the required field `op`
      OpEnum.validateJsonElement(jsonObj.get("op"));
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!AMetadataTemplateUpdateOperation.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'AMetadataTemplateUpdateOperation' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<AMetadataTemplateUpdateOperation> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(AMetadataTemplateUpdateOperation.class));

       return (TypeAdapter<T>) new TypeAdapter<AMetadataTemplateUpdateOperation>() {
           @Override
           public void write(JsonWriter out, AMetadataTemplateUpdateOperation value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public AMetadataTemplateUpdateOperation read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of AMetadataTemplateUpdateOperation given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of AMetadataTemplateUpdateOperation
   * @throws IOException if the JSON string is invalid with respect to AMetadataTemplateUpdateOperation
   */
  public static AMetadataTemplateUpdateOperation fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, AMetadataTemplateUpdateOperation.class);
  }

  /**
   * Convert an instance of AMetadataTemplateUpdateOperation to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

