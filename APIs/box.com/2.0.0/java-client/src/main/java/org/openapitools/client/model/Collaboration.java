/*
 * Box Platform API
 * [Box Platform](https://box.dev) provides functionality to provide access to content stored within [Box](https://box.com). It provides endpoints for basic manipulation of files and folders, management of users within an enterprise, as well as more complex topics such as legal holds and retention policies.
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: devrel@box.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;
import org.openapitools.client.model.CollaborationAcceptanceRequirementsStatus;
import org.openapitools.client.model.CollaborationAccessibleBy;
import org.openapitools.client.model.CollaborationCreatedBy;
import org.openapitools.client.model.CollaborationItem;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Collaborations define access permissions for users and groups to files and folders, similar to access control lists. A collaboration object grants a user or group access to a file or folder with permissions defined by a specific role.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:18:30.779851-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Collaboration {
  public static final String SERIALIZED_NAME_ACCEPTANCE_REQUIREMENTS_STATUS = "acceptance_requirements_status";
  @SerializedName(SERIALIZED_NAME_ACCEPTANCE_REQUIREMENTS_STATUS)
  private CollaborationAcceptanceRequirementsStatus acceptanceRequirementsStatus;

  public static final String SERIALIZED_NAME_ACCESSIBLE_BY = "accessible_by";
  @SerializedName(SERIALIZED_NAME_ACCESSIBLE_BY)
  private CollaborationAccessibleBy accessibleBy;

  public static final String SERIALIZED_NAME_ACKNOWLEDGED_AT = "acknowledged_at";
  @SerializedName(SERIALIZED_NAME_ACKNOWLEDGED_AT)
  private OffsetDateTime acknowledgedAt;

  public static final String SERIALIZED_NAME_CREATED_AT = "created_at";
  @SerializedName(SERIALIZED_NAME_CREATED_AT)
  private OffsetDateTime createdAt;

  public static final String SERIALIZED_NAME_CREATED_BY = "created_by";
  @SerializedName(SERIALIZED_NAME_CREATED_BY)
  private CollaborationCreatedBy createdBy;

  public static final String SERIALIZED_NAME_EXPIRES_AT = "expires_at";
  @SerializedName(SERIALIZED_NAME_EXPIRES_AT)
  private OffsetDateTime expiresAt;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_INVITE_EMAIL = "invite_email";
  @SerializedName(SERIALIZED_NAME_INVITE_EMAIL)
  private String inviteEmail;

  public static final String SERIALIZED_NAME_ITEM = "item";
  @SerializedName(SERIALIZED_NAME_ITEM)
  private CollaborationItem item;

  public static final String SERIALIZED_NAME_MODIFIED_AT = "modified_at";
  @SerializedName(SERIALIZED_NAME_MODIFIED_AT)
  private OffsetDateTime modifiedAt;

  /**
   * The level of access granted.
   */
  @JsonAdapter(RoleEnum.Adapter.class)
  public enum RoleEnum {
    EDITOR("editor"),
    
    VIEWER("viewer"),
    
    PREVIEWER("previewer"),
    
    UPLOADER("uploader"),
    
    PREVIEWER_UPLOADER("previewer uploader"),
    
    VIEWER_UPLOADER("viewer uploader"),
    
    CO_OWNER("co-owner"),
    
    OWNER("owner");

    private String value;

    RoleEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static RoleEnum fromValue(String value) {
      for (RoleEnum b : RoleEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<RoleEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final RoleEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public RoleEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return RoleEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      RoleEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_ROLE = "role";
  @SerializedName(SERIALIZED_NAME_ROLE)
  private RoleEnum role;

  /**
   * The status of the collaboration invitation. If the status is &#x60;pending&#x60;, &#x60;login&#x60; and &#x60;name&#x60; return an empty string.
   */
  @JsonAdapter(StatusEnum.Adapter.class)
  public enum StatusEnum {
    ACCEPTED("accepted"),
    
    PENDING("pending"),
    
    REJECTED("rejected");

    private String value;

    StatusEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static StatusEnum fromValue(String value) {
      for (StatusEnum b : StatusEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<StatusEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final StatusEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public StatusEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return StatusEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      StatusEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_STATUS = "status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  private StatusEnum status;

  /**
   * &#x60;collaboration&#x60;
   */
  @JsonAdapter(TypeEnum.Adapter.class)
  public enum TypeEnum {
    COLLABORATION("collaboration");

    private String value;

    TypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static TypeEnum fromValue(String value) {
      for (TypeEnum b : TypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<TypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final TypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public TypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return TypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      TypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_TYPE = "type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  private TypeEnum type;

  public Collaboration() {
  }

  public Collaboration acceptanceRequirementsStatus(CollaborationAcceptanceRequirementsStatus acceptanceRequirementsStatus) {
    this.acceptanceRequirementsStatus = acceptanceRequirementsStatus;
    return this;
  }

  /**
   * Get acceptanceRequirementsStatus
   * @return acceptanceRequirementsStatus
   */
  @javax.annotation.Nullable
  public CollaborationAcceptanceRequirementsStatus getAcceptanceRequirementsStatus() {
    return acceptanceRequirementsStatus;
  }

  public void setAcceptanceRequirementsStatus(CollaborationAcceptanceRequirementsStatus acceptanceRequirementsStatus) {
    this.acceptanceRequirementsStatus = acceptanceRequirementsStatus;
  }


  public Collaboration accessibleBy(CollaborationAccessibleBy accessibleBy) {
    this.accessibleBy = accessibleBy;
    return this;
  }

  /**
   * Get accessibleBy
   * @return accessibleBy
   */
  @javax.annotation.Nullable
  public CollaborationAccessibleBy getAccessibleBy() {
    return accessibleBy;
  }

  public void setAccessibleBy(CollaborationAccessibleBy accessibleBy) {
    this.accessibleBy = accessibleBy;
  }


  public Collaboration acknowledgedAt(OffsetDateTime acknowledgedAt) {
    this.acknowledgedAt = acknowledgedAt;
    return this;
  }

  /**
   * When the &#x60;status&#x60; of the collaboration object changed to &#x60;accepted&#x60; or &#x60;rejected&#x60;.
   * @return acknowledgedAt
   */
  @javax.annotation.Nullable
  public OffsetDateTime getAcknowledgedAt() {
    return acknowledgedAt;
  }

  public void setAcknowledgedAt(OffsetDateTime acknowledgedAt) {
    this.acknowledgedAt = acknowledgedAt;
  }


  public Collaboration createdAt(OffsetDateTime createdAt) {
    this.createdAt = createdAt;
    return this;
  }

  /**
   * When the collaboration object was created.
   * @return createdAt
   */
  @javax.annotation.Nullable
  public OffsetDateTime getCreatedAt() {
    return createdAt;
  }

  public void setCreatedAt(OffsetDateTime createdAt) {
    this.createdAt = createdAt;
  }


  public Collaboration createdBy(CollaborationCreatedBy createdBy) {
    this.createdBy = createdBy;
    return this;
  }

  /**
   * Get createdBy
   * @return createdBy
   */
  @javax.annotation.Nullable
  public CollaborationCreatedBy getCreatedBy() {
    return createdBy;
  }

  public void setCreatedBy(CollaborationCreatedBy createdBy) {
    this.createdBy = createdBy;
  }


  public Collaboration expiresAt(OffsetDateTime expiresAt) {
    this.expiresAt = expiresAt;
    return this;
  }

  /**
   * When the collaboration will expire, or &#x60;null&#x60; if no expiration date is set.
   * @return expiresAt
   */
  @javax.annotation.Nullable
  public OffsetDateTime getExpiresAt() {
    return expiresAt;
  }

  public void setExpiresAt(OffsetDateTime expiresAt) {
    this.expiresAt = expiresAt;
  }


  public Collaboration id(String id) {
    this.id = id;
    return this;
  }

  /**
   * The unique identifier for this collaboration.
   * @return id
   */
  @javax.annotation.Nullable
  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }


  public Collaboration inviteEmail(String inviteEmail) {
    this.inviteEmail = inviteEmail;
    return this;
  }

  /**
   * The email address used to invite an unregistered collaborator, if they are not a registered user.
   * @return inviteEmail
   */
  @javax.annotation.Nullable
  public String getInviteEmail() {
    return inviteEmail;
  }

  public void setInviteEmail(String inviteEmail) {
    this.inviteEmail = inviteEmail;
  }


  public Collaboration item(CollaborationItem item) {
    this.item = item;
    return this;
  }

  /**
   * Get item
   * @return item
   */
  @javax.annotation.Nullable
  public CollaborationItem getItem() {
    return item;
  }

  public void setItem(CollaborationItem item) {
    this.item = item;
  }


  public Collaboration modifiedAt(OffsetDateTime modifiedAt) {
    this.modifiedAt = modifiedAt;
    return this;
  }

  /**
   * When the collaboration object was last modified.
   * @return modifiedAt
   */
  @javax.annotation.Nullable
  public OffsetDateTime getModifiedAt() {
    return modifiedAt;
  }

  public void setModifiedAt(OffsetDateTime modifiedAt) {
    this.modifiedAt = modifiedAt;
  }


  public Collaboration role(RoleEnum role) {
    this.role = role;
    return this;
  }

  /**
   * The level of access granted.
   * @return role
   */
  @javax.annotation.Nullable
  public RoleEnum getRole() {
    return role;
  }

  public void setRole(RoleEnum role) {
    this.role = role;
  }


  public Collaboration status(StatusEnum status) {
    this.status = status;
    return this;
  }

  /**
   * The status of the collaboration invitation. If the status is &#x60;pending&#x60;, &#x60;login&#x60; and &#x60;name&#x60; return an empty string.
   * @return status
   */
  @javax.annotation.Nullable
  public StatusEnum getStatus() {
    return status;
  }

  public void setStatus(StatusEnum status) {
    this.status = status;
  }


  public Collaboration type(TypeEnum type) {
    this.type = type;
    return this;
  }

  /**
   * &#x60;collaboration&#x60;
   * @return type
   */
  @javax.annotation.Nullable
  public TypeEnum getType() {
    return type;
  }

  public void setType(TypeEnum type) {
    this.type = type;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Collaboration collaboration = (Collaboration) o;
    return Objects.equals(this.acceptanceRequirementsStatus, collaboration.acceptanceRequirementsStatus) &&
        Objects.equals(this.accessibleBy, collaboration.accessibleBy) &&
        Objects.equals(this.acknowledgedAt, collaboration.acknowledgedAt) &&
        Objects.equals(this.createdAt, collaboration.createdAt) &&
        Objects.equals(this.createdBy, collaboration.createdBy) &&
        Objects.equals(this.expiresAt, collaboration.expiresAt) &&
        Objects.equals(this.id, collaboration.id) &&
        Objects.equals(this.inviteEmail, collaboration.inviteEmail) &&
        Objects.equals(this.item, collaboration.item) &&
        Objects.equals(this.modifiedAt, collaboration.modifiedAt) &&
        Objects.equals(this.role, collaboration.role) &&
        Objects.equals(this.status, collaboration.status) &&
        Objects.equals(this.type, collaboration.type);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(acceptanceRequirementsStatus, accessibleBy, acknowledgedAt, createdAt, createdBy, expiresAt, id, inviteEmail, item, modifiedAt, role, status, type);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Collaboration {\n");
    sb.append("    acceptanceRequirementsStatus: ").append(toIndentedString(acceptanceRequirementsStatus)).append("\n");
    sb.append("    accessibleBy: ").append(toIndentedString(accessibleBy)).append("\n");
    sb.append("    acknowledgedAt: ").append(toIndentedString(acknowledgedAt)).append("\n");
    sb.append("    createdAt: ").append(toIndentedString(createdAt)).append("\n");
    sb.append("    createdBy: ").append(toIndentedString(createdBy)).append("\n");
    sb.append("    expiresAt: ").append(toIndentedString(expiresAt)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    inviteEmail: ").append(toIndentedString(inviteEmail)).append("\n");
    sb.append("    item: ").append(toIndentedString(item)).append("\n");
    sb.append("    modifiedAt: ").append(toIndentedString(modifiedAt)).append("\n");
    sb.append("    role: ").append(toIndentedString(role)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("acceptance_requirements_status");
    openapiFields.add("accessible_by");
    openapiFields.add("acknowledged_at");
    openapiFields.add("created_at");
    openapiFields.add("created_by");
    openapiFields.add("expires_at");
    openapiFields.add("id");
    openapiFields.add("invite_email");
    openapiFields.add("item");
    openapiFields.add("modified_at");
    openapiFields.add("role");
    openapiFields.add("status");
    openapiFields.add("type");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Collaboration
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Collaboration.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Collaboration is not found in the empty JSON string", Collaboration.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Collaboration.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Collaboration` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `acceptance_requirements_status`
      if (jsonObj.get("acceptance_requirements_status") != null && !jsonObj.get("acceptance_requirements_status").isJsonNull()) {
        CollaborationAcceptanceRequirementsStatus.validateJsonElement(jsonObj.get("acceptance_requirements_status"));
      }
      // validate the optional field `accessible_by`
      if (jsonObj.get("accessible_by") != null && !jsonObj.get("accessible_by").isJsonNull()) {
        CollaborationAccessibleBy.validateJsonElement(jsonObj.get("accessible_by"));
      }
      // validate the optional field `created_by`
      if (jsonObj.get("created_by") != null && !jsonObj.get("created_by").isJsonNull()) {
        CollaborationCreatedBy.validateJsonElement(jsonObj.get("created_by"));
      }
      if ((jsonObj.get("id") != null && !jsonObj.get("id").isJsonNull()) && !jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      if ((jsonObj.get("invite_email") != null && !jsonObj.get("invite_email").isJsonNull()) && !jsonObj.get("invite_email").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `invite_email` to be a primitive type in the JSON string but got `%s`", jsonObj.get("invite_email").toString()));
      }
      // validate the optional field `item`
      if (jsonObj.get("item") != null && !jsonObj.get("item").isJsonNull()) {
        CollaborationItem.validateJsonElement(jsonObj.get("item"));
      }
      if ((jsonObj.get("role") != null && !jsonObj.get("role").isJsonNull()) && !jsonObj.get("role").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `role` to be a primitive type in the JSON string but got `%s`", jsonObj.get("role").toString()));
      }
      // validate the optional field `role`
      if (jsonObj.get("role") != null && !jsonObj.get("role").isJsonNull()) {
        RoleEnum.validateJsonElement(jsonObj.get("role"));
      }
      if ((jsonObj.get("status") != null && !jsonObj.get("status").isJsonNull()) && !jsonObj.get("status").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `status` to be a primitive type in the JSON string but got `%s`", jsonObj.get("status").toString()));
      }
      // validate the optional field `status`
      if (jsonObj.get("status") != null && !jsonObj.get("status").isJsonNull()) {
        StatusEnum.validateJsonElement(jsonObj.get("status"));
      }
      if ((jsonObj.get("type") != null && !jsonObj.get("type").isJsonNull()) && !jsonObj.get("type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("type").toString()));
      }
      // validate the optional field `type`
      if (jsonObj.get("type") != null && !jsonObj.get("type").isJsonNull()) {
        TypeEnum.validateJsonElement(jsonObj.get("type"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Collaboration.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Collaboration' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Collaboration> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Collaboration.class));

       return (TypeAdapter<T>) new TypeAdapter<Collaboration>() {
           @Override
           public void write(JsonWriter out, Collaboration value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Collaboration read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Collaboration given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Collaboration
   * @throws IOException if the JSON string is invalid with respect to Collaboration
   */
  public static Collaboration fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Collaboration.class);
  }

  /**
   * Convert an instance of Collaboration to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

