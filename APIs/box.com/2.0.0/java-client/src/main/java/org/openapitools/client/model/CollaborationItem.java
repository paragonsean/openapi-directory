/*
 * Box Platform API
 * [Box Platform](https://box.dev) provides functionality to provide access to content stored within [Box](https://box.com). It provides endpoints for basic manipulation of files and folders, management of users within an enterprise, as well as more complex topics such as legal holds and retention policies.
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: devrel@box.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;
import org.openapitools.client.model.FileMiniAllOfFileVersion;
import org.openapitools.client.model.FolderAllOfFolderUploadEmail;
import org.openapitools.client.model.FolderAllOfItemCollection;
import org.openapitools.client.model.WebLinkAllOfCreatedBy;
import org.openapitools.client.model.WebLinkAllOfModifiedBy;
import org.openapitools.client.model.WebLinkAllOfOwnedBy;
import org.openapitools.client.model.WebLinkAllOfParent;
import org.openapitools.client.model.WebLinkAllOfPathCollection;
import org.openapitools.client.model.WebLinkAllOfSharedLink;
import org.openapitools.client.model.WebLinkMiniAllOfSequenceId;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * CollaborationItem
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:18:30.779851-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class CollaborationItem {
  public static final String SERIALIZED_NAME_ETAG = "etag";
  @SerializedName(SERIALIZED_NAME_ETAG)
  private String etag;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  /**
   * &#x60;web_link&#x60;
   */
  @JsonAdapter(TypeEnum.Adapter.class)
  public enum TypeEnum {
    WEB_LINK("web_link");

    private String value;

    TypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static TypeEnum fromValue(String value) {
      for (TypeEnum b : TypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<TypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final TypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public TypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return TypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      TypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_TYPE = "type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  private TypeEnum type;

  public static final String SERIALIZED_NAME_FILE_VERSION = "file_version";
  @SerializedName(SERIALIZED_NAME_FILE_VERSION)
  private FileMiniAllOfFileVersion fileVersion;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_SEQUENCE_ID = "sequence_id";
  @SerializedName(SERIALIZED_NAME_SEQUENCE_ID)
  private WebLinkMiniAllOfSequenceId sequenceId;

  public static final String SERIALIZED_NAME_SHA1 = "sha1";
  @SerializedName(SERIALIZED_NAME_SHA1)
  private String sha1;

  public static final String SERIALIZED_NAME_CONTENT_CREATED_AT = "content_created_at";
  @SerializedName(SERIALIZED_NAME_CONTENT_CREATED_AT)
  private OffsetDateTime contentCreatedAt;

  public static final String SERIALIZED_NAME_CONTENT_MODIFIED_AT = "content_modified_at";
  @SerializedName(SERIALIZED_NAME_CONTENT_MODIFIED_AT)
  private OffsetDateTime contentModifiedAt;

  public static final String SERIALIZED_NAME_CREATED_AT = "created_at";
  @SerializedName(SERIALIZED_NAME_CREATED_AT)
  private OffsetDateTime createdAt;

  public static final String SERIALIZED_NAME_CREATED_BY = "created_by";
  @SerializedName(SERIALIZED_NAME_CREATED_BY)
  private WebLinkAllOfCreatedBy createdBy;

  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  /**
   * Whether this item is deleted or not. Values include &#x60;active&#x60;, &#x60;trashed&#x60; if the file has been moved to the trash, and &#x60;deleted&#x60; if the file has been permanently deleted
   */
  @JsonAdapter(ItemStatusEnum.Adapter.class)
  public enum ItemStatusEnum {
    ACTIVE("active"),
    
    TRASHED("trashed"),
    
    DELETED("deleted");

    private String value;

    ItemStatusEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ItemStatusEnum fromValue(String value) {
      for (ItemStatusEnum b : ItemStatusEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ItemStatusEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ItemStatusEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ItemStatusEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ItemStatusEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      ItemStatusEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_ITEM_STATUS = "item_status";
  @SerializedName(SERIALIZED_NAME_ITEM_STATUS)
  private ItemStatusEnum itemStatus;

  public static final String SERIALIZED_NAME_MODIFIED_AT = "modified_at";
  @SerializedName(SERIALIZED_NAME_MODIFIED_AT)
  private OffsetDateTime modifiedAt;

  public static final String SERIALIZED_NAME_MODIFIED_BY = "modified_by";
  @SerializedName(SERIALIZED_NAME_MODIFIED_BY)
  private WebLinkAllOfModifiedBy modifiedBy;

  public static final String SERIALIZED_NAME_OWNED_BY = "owned_by";
  @SerializedName(SERIALIZED_NAME_OWNED_BY)
  private WebLinkAllOfOwnedBy ownedBy;

  public static final String SERIALIZED_NAME_PARENT = "parent";
  @SerializedName(SERIALIZED_NAME_PARENT)
  private WebLinkAllOfParent parent;

  public static final String SERIALIZED_NAME_PATH_COLLECTION = "path_collection";
  @SerializedName(SERIALIZED_NAME_PATH_COLLECTION)
  private WebLinkAllOfPathCollection pathCollection;

  public static final String SERIALIZED_NAME_PURGED_AT = "purged_at";
  @SerializedName(SERIALIZED_NAME_PURGED_AT)
  private OffsetDateTime purgedAt;

  public static final String SERIALIZED_NAME_SHARED_LINK = "shared_link";
  @SerializedName(SERIALIZED_NAME_SHARED_LINK)
  private WebLinkAllOfSharedLink sharedLink;

  public static final String SERIALIZED_NAME_SIZE = "size";
  @SerializedName(SERIALIZED_NAME_SIZE)
  private Long size;

  public static final String SERIALIZED_NAME_TRASHED_AT = "trashed_at";
  @SerializedName(SERIALIZED_NAME_TRASHED_AT)
  private OffsetDateTime trashedAt;

  public static final String SERIALIZED_NAME_FOLDER_UPLOAD_EMAIL = "folder_upload_email";
  @SerializedName(SERIALIZED_NAME_FOLDER_UPLOAD_EMAIL)
  private FolderAllOfFolderUploadEmail folderUploadEmail;

  public static final String SERIALIZED_NAME_ITEM_COLLECTION = "item_collection";
  @SerializedName(SERIALIZED_NAME_ITEM_COLLECTION)
  private FolderAllOfItemCollection itemCollection;

  public static final String SERIALIZED_NAME_URL = "url";
  @SerializedName(SERIALIZED_NAME_URL)
  private String url;

  public CollaborationItem() {
  }

  public CollaborationItem etag(String etag) {
    this.etag = etag;
    return this;
  }

  /**
   * The entity tag of this web link. Used with &#x60;If-Match&#x60; headers.
   * @return etag
   */
  @javax.annotation.Nullable
  public String getEtag() {
    return etag;
  }

  public void setEtag(String etag) {
    this.etag = etag;
  }


  public CollaborationItem id(String id) {
    this.id = id;
    return this;
  }

  /**
   * The unique identifier for this web link
   * @return id
   */
  @javax.annotation.Nonnull
  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }


  public CollaborationItem type(TypeEnum type) {
    this.type = type;
    return this;
  }

  /**
   * &#x60;web_link&#x60;
   * @return type
   */
  @javax.annotation.Nonnull
  public TypeEnum getType() {
    return type;
  }

  public void setType(TypeEnum type) {
    this.type = type;
  }


  public CollaborationItem fileVersion(FileMiniAllOfFileVersion fileVersion) {
    this.fileVersion = fileVersion;
    return this;
  }

  /**
   * Get fileVersion
   * @return fileVersion
   */
  @javax.annotation.Nullable
  public FileMiniAllOfFileVersion getFileVersion() {
    return fileVersion;
  }

  public void setFileVersion(FileMiniAllOfFileVersion fileVersion) {
    this.fileVersion = fileVersion;
  }


  public CollaborationItem name(String name) {
    this.name = name;
    return this;
  }

  /**
   * The name of the web link
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public CollaborationItem sequenceId(WebLinkMiniAllOfSequenceId sequenceId) {
    this.sequenceId = sequenceId;
    return this;
  }

  /**
   * Get sequenceId
   * @return sequenceId
   */
  @javax.annotation.Nonnull
  public WebLinkMiniAllOfSequenceId getSequenceId() {
    return sequenceId;
  }

  public void setSequenceId(WebLinkMiniAllOfSequenceId sequenceId) {
    this.sequenceId = sequenceId;
  }


  public CollaborationItem sha1(String sha1) {
    this.sha1 = sha1;
    return this;
  }

  /**
   * The SHA1 hash of the file. This can be used to compare the contents of a file on Box with a local file.
   * @return sha1
   */
  @javax.annotation.Nonnull
  public String getSha1() {
    return sha1;
  }

  public void setSha1(String sha1) {
    this.sha1 = sha1;
  }


  public CollaborationItem contentCreatedAt(OffsetDateTime contentCreatedAt) {
    this.contentCreatedAt = contentCreatedAt;
    return this;
  }

  /**
   * The date and time at which this folder was originally created.
   * @return contentCreatedAt
   */
  @javax.annotation.Nullable
  public OffsetDateTime getContentCreatedAt() {
    return contentCreatedAt;
  }

  public void setContentCreatedAt(OffsetDateTime contentCreatedAt) {
    this.contentCreatedAt = contentCreatedAt;
  }


  public CollaborationItem contentModifiedAt(OffsetDateTime contentModifiedAt) {
    this.contentModifiedAt = contentModifiedAt;
    return this;
  }

  /**
   * The date and time at which this folder was last updated.
   * @return contentModifiedAt
   */
  @javax.annotation.Nullable
  public OffsetDateTime getContentModifiedAt() {
    return contentModifiedAt;
  }

  public void setContentModifiedAt(OffsetDateTime contentModifiedAt) {
    this.contentModifiedAt = contentModifiedAt;
  }


  public CollaborationItem createdAt(OffsetDateTime createdAt) {
    this.createdAt = createdAt;
    return this;
  }

  /**
   * When this file was created on Box’s servers.
   * @return createdAt
   */
  @javax.annotation.Nonnull
  public OffsetDateTime getCreatedAt() {
    return createdAt;
  }

  public void setCreatedAt(OffsetDateTime createdAt) {
    this.createdAt = createdAt;
  }


  public CollaborationItem createdBy(WebLinkAllOfCreatedBy createdBy) {
    this.createdBy = createdBy;
    return this;
  }

  /**
   * Get createdBy
   * @return createdBy
   */
  @javax.annotation.Nonnull
  public WebLinkAllOfCreatedBy getCreatedBy() {
    return createdBy;
  }

  public void setCreatedBy(WebLinkAllOfCreatedBy createdBy) {
    this.createdBy = createdBy;
  }


  public CollaborationItem description(String description) {
    this.description = description;
    return this;
  }

  /**
   * The description accompanying the web link. This is visible within the Box web application.
   * @return description
   */
  @javax.annotation.Nonnull
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }


  public CollaborationItem itemStatus(ItemStatusEnum itemStatus) {
    this.itemStatus = itemStatus;
    return this;
  }

  /**
   * Whether this item is deleted or not. Values include &#x60;active&#x60;, &#x60;trashed&#x60; if the file has been moved to the trash, and &#x60;deleted&#x60; if the file has been permanently deleted
   * @return itemStatus
   */
  @javax.annotation.Nonnull
  public ItemStatusEnum getItemStatus() {
    return itemStatus;
  }

  public void setItemStatus(ItemStatusEnum itemStatus) {
    this.itemStatus = itemStatus;
  }


  public CollaborationItem modifiedAt(OffsetDateTime modifiedAt) {
    this.modifiedAt = modifiedAt;
    return this;
  }

  /**
   * When this file was last updated on the Box servers.
   * @return modifiedAt
   */
  @javax.annotation.Nonnull
  public OffsetDateTime getModifiedAt() {
    return modifiedAt;
  }

  public void setModifiedAt(OffsetDateTime modifiedAt) {
    this.modifiedAt = modifiedAt;
  }


  public CollaborationItem modifiedBy(WebLinkAllOfModifiedBy modifiedBy) {
    this.modifiedBy = modifiedBy;
    return this;
  }

  /**
   * Get modifiedBy
   * @return modifiedBy
   */
  @javax.annotation.Nonnull
  public WebLinkAllOfModifiedBy getModifiedBy() {
    return modifiedBy;
  }

  public void setModifiedBy(WebLinkAllOfModifiedBy modifiedBy) {
    this.modifiedBy = modifiedBy;
  }


  public CollaborationItem ownedBy(WebLinkAllOfOwnedBy ownedBy) {
    this.ownedBy = ownedBy;
    return this;
  }

  /**
   * Get ownedBy
   * @return ownedBy
   */
  @javax.annotation.Nonnull
  public WebLinkAllOfOwnedBy getOwnedBy() {
    return ownedBy;
  }

  public void setOwnedBy(WebLinkAllOfOwnedBy ownedBy) {
    this.ownedBy = ownedBy;
  }


  public CollaborationItem parent(WebLinkAllOfParent parent) {
    this.parent = parent;
    return this;
  }

  /**
   * Get parent
   * @return parent
   */
  @javax.annotation.Nullable
  public WebLinkAllOfParent getParent() {
    return parent;
  }

  public void setParent(WebLinkAllOfParent parent) {
    this.parent = parent;
  }


  public CollaborationItem pathCollection(WebLinkAllOfPathCollection pathCollection) {
    this.pathCollection = pathCollection;
    return this;
  }

  /**
   * Get pathCollection
   * @return pathCollection
   */
  @javax.annotation.Nonnull
  public WebLinkAllOfPathCollection getPathCollection() {
    return pathCollection;
  }

  public void setPathCollection(WebLinkAllOfPathCollection pathCollection) {
    this.pathCollection = pathCollection;
  }


  public CollaborationItem purgedAt(OffsetDateTime purgedAt) {
    this.purgedAt = purgedAt;
    return this;
  }

  /**
   * When this file will be permanently deleted.
   * @return purgedAt
   */
  @javax.annotation.Nullable
  public OffsetDateTime getPurgedAt() {
    return purgedAt;
  }

  public void setPurgedAt(OffsetDateTime purgedAt) {
    this.purgedAt = purgedAt;
  }


  public CollaborationItem sharedLink(WebLinkAllOfSharedLink sharedLink) {
    this.sharedLink = sharedLink;
    return this;
  }

  /**
   * Get sharedLink
   * @return sharedLink
   */
  @javax.annotation.Nullable
  public WebLinkAllOfSharedLink getSharedLink() {
    return sharedLink;
  }

  public void setSharedLink(WebLinkAllOfSharedLink sharedLink) {
    this.sharedLink = sharedLink;
  }


  public CollaborationItem size(Long size) {
    this.size = size;
    return this;
  }

  /**
   * The folder size in bytes.  Be careful parsing this integer as its value can get very large.
   * @return size
   */
  @javax.annotation.Nonnull
  public Long getSize() {
    return size;
  }

  public void setSize(Long size) {
    this.size = size;
  }


  public CollaborationItem trashedAt(OffsetDateTime trashedAt) {
    this.trashedAt = trashedAt;
    return this;
  }

  /**
   * When this file was moved to the trash.
   * @return trashedAt
   */
  @javax.annotation.Nullable
  public OffsetDateTime getTrashedAt() {
    return trashedAt;
  }

  public void setTrashedAt(OffsetDateTime trashedAt) {
    this.trashedAt = trashedAt;
  }


  public CollaborationItem folderUploadEmail(FolderAllOfFolderUploadEmail folderUploadEmail) {
    this.folderUploadEmail = folderUploadEmail;
    return this;
  }

  /**
   * Get folderUploadEmail
   * @return folderUploadEmail
   */
  @javax.annotation.Nullable
  public FolderAllOfFolderUploadEmail getFolderUploadEmail() {
    return folderUploadEmail;
  }

  public void setFolderUploadEmail(FolderAllOfFolderUploadEmail folderUploadEmail) {
    this.folderUploadEmail = folderUploadEmail;
  }


  public CollaborationItem itemCollection(FolderAllOfItemCollection itemCollection) {
    this.itemCollection = itemCollection;
    return this;
  }

  /**
   * Get itemCollection
   * @return itemCollection
   */
  @javax.annotation.Nonnull
  public FolderAllOfItemCollection getItemCollection() {
    return itemCollection;
  }

  public void setItemCollection(FolderAllOfItemCollection itemCollection) {
    this.itemCollection = itemCollection;
  }


  public CollaborationItem url(String url) {
    this.url = url;
    return this;
  }

  /**
   * The URL this web link points to
   * @return url
   */
  @javax.annotation.Nullable
  public String getUrl() {
    return url;
  }

  public void setUrl(String url) {
    this.url = url;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CollaborationItem collaborationItem = (CollaborationItem) o;
    return Objects.equals(this.etag, collaborationItem.etag) &&
        Objects.equals(this.id, collaborationItem.id) &&
        Objects.equals(this.type, collaborationItem.type) &&
        Objects.equals(this.fileVersion, collaborationItem.fileVersion) &&
        Objects.equals(this.name, collaborationItem.name) &&
        Objects.equals(this.sequenceId, collaborationItem.sequenceId) &&
        Objects.equals(this.sha1, collaborationItem.sha1) &&
        Objects.equals(this.contentCreatedAt, collaborationItem.contentCreatedAt) &&
        Objects.equals(this.contentModifiedAt, collaborationItem.contentModifiedAt) &&
        Objects.equals(this.createdAt, collaborationItem.createdAt) &&
        Objects.equals(this.createdBy, collaborationItem.createdBy) &&
        Objects.equals(this.description, collaborationItem.description) &&
        Objects.equals(this.itemStatus, collaborationItem.itemStatus) &&
        Objects.equals(this.modifiedAt, collaborationItem.modifiedAt) &&
        Objects.equals(this.modifiedBy, collaborationItem.modifiedBy) &&
        Objects.equals(this.ownedBy, collaborationItem.ownedBy) &&
        Objects.equals(this.parent, collaborationItem.parent) &&
        Objects.equals(this.pathCollection, collaborationItem.pathCollection) &&
        Objects.equals(this.purgedAt, collaborationItem.purgedAt) &&
        Objects.equals(this.sharedLink, collaborationItem.sharedLink) &&
        Objects.equals(this.size, collaborationItem.size) &&
        Objects.equals(this.trashedAt, collaborationItem.trashedAt) &&
        Objects.equals(this.folderUploadEmail, collaborationItem.folderUploadEmail) &&
        Objects.equals(this.itemCollection, collaborationItem.itemCollection) &&
        Objects.equals(this.url, collaborationItem.url);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(etag, id, type, fileVersion, name, sequenceId, sha1, contentCreatedAt, contentModifiedAt, createdAt, createdBy, description, itemStatus, modifiedAt, modifiedBy, ownedBy, parent, pathCollection, purgedAt, sharedLink, size, trashedAt, folderUploadEmail, itemCollection, url);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CollaborationItem {\n");
    sb.append("    etag: ").append(toIndentedString(etag)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    fileVersion: ").append(toIndentedString(fileVersion)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    sequenceId: ").append(toIndentedString(sequenceId)).append("\n");
    sb.append("    sha1: ").append(toIndentedString(sha1)).append("\n");
    sb.append("    contentCreatedAt: ").append(toIndentedString(contentCreatedAt)).append("\n");
    sb.append("    contentModifiedAt: ").append(toIndentedString(contentModifiedAt)).append("\n");
    sb.append("    createdAt: ").append(toIndentedString(createdAt)).append("\n");
    sb.append("    createdBy: ").append(toIndentedString(createdBy)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    itemStatus: ").append(toIndentedString(itemStatus)).append("\n");
    sb.append("    modifiedAt: ").append(toIndentedString(modifiedAt)).append("\n");
    sb.append("    modifiedBy: ").append(toIndentedString(modifiedBy)).append("\n");
    sb.append("    ownedBy: ").append(toIndentedString(ownedBy)).append("\n");
    sb.append("    parent: ").append(toIndentedString(parent)).append("\n");
    sb.append("    pathCollection: ").append(toIndentedString(pathCollection)).append("\n");
    sb.append("    purgedAt: ").append(toIndentedString(purgedAt)).append("\n");
    sb.append("    sharedLink: ").append(toIndentedString(sharedLink)).append("\n");
    sb.append("    size: ").append(toIndentedString(size)).append("\n");
    sb.append("    trashedAt: ").append(toIndentedString(trashedAt)).append("\n");
    sb.append("    folderUploadEmail: ").append(toIndentedString(folderUploadEmail)).append("\n");
    sb.append("    itemCollection: ").append(toIndentedString(itemCollection)).append("\n");
    sb.append("    url: ").append(toIndentedString(url)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("etag");
    openapiFields.add("id");
    openapiFields.add("type");
    openapiFields.add("file_version");
    openapiFields.add("name");
    openapiFields.add("sequence_id");
    openapiFields.add("sha1");
    openapiFields.add("content_created_at");
    openapiFields.add("content_modified_at");
    openapiFields.add("created_at");
    openapiFields.add("created_by");
    openapiFields.add("description");
    openapiFields.add("item_status");
    openapiFields.add("modified_at");
    openapiFields.add("modified_by");
    openapiFields.add("owned_by");
    openapiFields.add("parent");
    openapiFields.add("path_collection");
    openapiFields.add("purged_at");
    openapiFields.add("shared_link");
    openapiFields.add("size");
    openapiFields.add("trashed_at");
    openapiFields.add("folder_upload_email");
    openapiFields.add("item_collection");
    openapiFields.add("url");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("id");
    openapiRequiredFields.add("type");
    openapiRequiredFields.add("sequence_id");
    openapiRequiredFields.add("sha1");
    openapiRequiredFields.add("created_at");
    openapiRequiredFields.add("created_by");
    openapiRequiredFields.add("description");
    openapiRequiredFields.add("item_status");
    openapiRequiredFields.add("modified_at");
    openapiRequiredFields.add("modified_by");
    openapiRequiredFields.add("owned_by");
    openapiRequiredFields.add("path_collection");
    openapiRequiredFields.add("size");
    openapiRequiredFields.add("item_collection");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to CollaborationItem
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!CollaborationItem.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CollaborationItem is not found in the empty JSON string", CollaborationItem.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!CollaborationItem.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CollaborationItem` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : CollaborationItem.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("etag") != null && !jsonObj.get("etag").isJsonNull()) && !jsonObj.get("etag").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `etag` to be a primitive type in the JSON string but got `%s`", jsonObj.get("etag").toString()));
      }
      if (!jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      if (!jsonObj.get("type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("type").toString()));
      }
      // validate the required field `type`
      TypeEnum.validateJsonElement(jsonObj.get("type"));
      // validate the optional field `file_version`
      if (jsonObj.get("file_version") != null && !jsonObj.get("file_version").isJsonNull()) {
        FileMiniAllOfFileVersion.validateJsonElement(jsonObj.get("file_version"));
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      // validate the required field `sequence_id`
      WebLinkMiniAllOfSequenceId.validateJsonElement(jsonObj.get("sequence_id"));
      if (!jsonObj.get("sha1").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `sha1` to be a primitive type in the JSON string but got `%s`", jsonObj.get("sha1").toString()));
      }
      // validate the required field `created_by`
      WebLinkAllOfCreatedBy.validateJsonElement(jsonObj.get("created_by"));
      if (!jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
      if (!jsonObj.get("item_status").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `item_status` to be a primitive type in the JSON string but got `%s`", jsonObj.get("item_status").toString()));
      }
      // validate the required field `item_status`
      ItemStatusEnum.validateJsonElement(jsonObj.get("item_status"));
      // validate the required field `modified_by`
      WebLinkAllOfModifiedBy.validateJsonElement(jsonObj.get("modified_by"));
      // validate the required field `owned_by`
      WebLinkAllOfOwnedBy.validateJsonElement(jsonObj.get("owned_by"));
      // validate the optional field `parent`
      if (jsonObj.get("parent") != null && !jsonObj.get("parent").isJsonNull()) {
        WebLinkAllOfParent.validateJsonElement(jsonObj.get("parent"));
      }
      // validate the required field `path_collection`
      WebLinkAllOfPathCollection.validateJsonElement(jsonObj.get("path_collection"));
      // validate the optional field `shared_link`
      if (jsonObj.get("shared_link") != null && !jsonObj.get("shared_link").isJsonNull()) {
        WebLinkAllOfSharedLink.validateJsonElement(jsonObj.get("shared_link"));
      }
      // validate the optional field `folder_upload_email`
      if (jsonObj.get("folder_upload_email") != null && !jsonObj.get("folder_upload_email").isJsonNull()) {
        FolderAllOfFolderUploadEmail.validateJsonElement(jsonObj.get("folder_upload_email"));
      }
      // validate the required field `item_collection`
      FolderAllOfItemCollection.validateJsonElement(jsonObj.get("item_collection"));
      if ((jsonObj.get("url") != null && !jsonObj.get("url").isJsonNull()) && !jsonObj.get("url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("url").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CollaborationItem.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CollaborationItem' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CollaborationItem> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CollaborationItem.class));

       return (TypeAdapter<T>) new TypeAdapter<CollaborationItem>() {
           @Override
           public void write(JsonWriter out, CollaborationItem value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CollaborationItem read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of CollaborationItem given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of CollaborationItem
   * @throws IOException if the JSON string is invalid with respect to CollaborationItem
   */
  public static CollaborationItem fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CollaborationItem.class);
  }

  /**
   * Convert an instance of CollaborationItem to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

