/**
 * GlobalWineScore API Documentation
 *   The GlobalWineScore API is designed as a RESTful API, providing several resources and methods depending on your usage plan.  For further information please refer to <a href=\"https://www.globalwinescore.com/plans\" target=\"_blank\">our plans</a>.  # Authentication The API uses token-based authentication. In order to authenticate your requests, you need to include a specific header in each of your requests:  ``` Authorization: Token {YOUR-API-TOKEN} ``` The word <b>Token</b> must be written. Your requests must also use the <b>HTTPS</b> protocol.  If you don't have a token yet, you need to apply for one [here](https://www.globalwinescore.com/api/).  Your personal token can be found under the <a href=\"https://www.globalwinescore.com/account/api/\" target=\"_blank\">My account > API</a> section of the GlobalWineScore website  # Format The API provides several rendering formats which you can control using the `Accept` header or `format` query parameter.  - JSON (default): no header or `Accept: application/json` - XML: `Accept: application/xml` # Rate limiting For API requests, the rate limit allows for up to 10 requests per minute.  # Error handling  Whether a request succeeded is indicated by the HTTP status code. A 2xx status code indicates success, whereas a 4xx status code indicates failure.  When a request fails, the response body is still JSON, but always contains a `detail` field with a description of the error, which you can inspect for debugging.  For example, trying to access the API without proper authentication will return code 403 along with the message:  `{\"detail\": \"Authentication credentials were not provided.\"}`  Found a bug ? send us an email at <a href=\"mailto:api@globalwinescore.com\">api@globalwinescore.com</a>  # Ordering  At the moment, GlobalWineScores may be sorted by `date` and `score`. Use \"-\" to sort in descending order.  # Continuous synchronization  If you need to synchronize your database with our API, you can query our API using `?ordering=-date` to get the newest scores first, which means you won't have to crawl the whole catalog every time :-)  # Quick search interface If you need to search our catalog (e.g. to align it with yours), we're providing you with a handy interface accessible here: <a href=\"https://api.globalwinescore.com/search/\" target=\"_blank\">https://api.globalwinescore.com/search/</a>  You need to be logged in (email/password) to access this page, but other than that you can share it with anyone in your team and start searching right away !  # Resources  The details about available endpoints can be found below. You can click on each endpoint to find information about their parameters. 
 *
 * The version of the OpenAPI document: 8234aab51481d37a30757d925b7f4221a659427e
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIGlobalWineScoreApi_H
#define OAI_OAIGlobalWineScoreApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIGlobalWineScoreApi : public QObject {
    Q_OBJECT

public:
    OAIGlobalWineScoreApi(const int timeOut = 0);
    ~OAIGlobalWineScoreApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  authorization QString [optional]
    * @param[in]  wine_id QList<qint32> [optional]
    * @param[in]  vintage QString [optional]
    * @param[in]  color QString [optional]
    * @param[in]  is_primeurs bool [optional]
    * @param[in]  lwin QString [optional]
    * @param[in]  lwin_11 QString [optional]
    * @param[in]  limit qint32 [optional]
    * @param[in]  offset qint32 [optional]
    * @param[in]  ordering QString [optional]
    */
    virtual void globalwinescoresLatestGet(const ::OpenAPI::OptionalParam<QString> &authorization = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QList<qint32>> &wine_id = ::OpenAPI::OptionalParam<QList<qint32>>(), const ::OpenAPI::OptionalParam<QString> &vintage = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &color = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &is_primeurs = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &lwin = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &lwin_11 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &limit = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &offset = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &ordering = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  authorization QString [optional]
    * @param[in]  wine_id QList<qint32> [optional]
    * @param[in]  vintage QString [optional]
    * @param[in]  color QString [optional]
    * @param[in]  is_primeurs bool [optional]
    * @param[in]  lwin QString [optional]
    * @param[in]  lwin_11 QString [optional]
    * @param[in]  limit qint32 [optional]
    * @param[in]  offset qint32 [optional]
    * @param[in]  ordering QString [optional]
    */
    virtual void listHistoricalGWS(const ::OpenAPI::OptionalParam<QString> &authorization = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QList<qint32>> &wine_id = ::OpenAPI::OptionalParam<QList<qint32>>(), const ::OpenAPI::OptionalParam<QString> &vintage = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &color = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &is_primeurs = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &lwin = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &lwin_11 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &limit = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &offset = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &ordering = ::OpenAPI::OptionalParam<QString>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void globalwinescoresLatestGetCallback(OAIHttpRequestWorker *worker);
    void listHistoricalGWSCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void globalwinescoresLatestGetSignal();
    void listHistoricalGWSSignal();


    void globalwinescoresLatestGetSignalFull(OAIHttpRequestWorker *worker);
    void listHistoricalGWSSignalFull(OAIHttpRequestWorker *worker);

    Q_DECL_DEPRECATED_X("Use globalwinescoresLatestGetSignalError() instead")
    void globalwinescoresLatestGetSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void globalwinescoresLatestGetSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listHistoricalGWSSignalError() instead")
    void listHistoricalGWSSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void listHistoricalGWSSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use globalwinescoresLatestGetSignalErrorFull() instead")
    void globalwinescoresLatestGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void globalwinescoresLatestGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listHistoricalGWSSignalErrorFull() instead")
    void listHistoricalGWSSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void listHistoricalGWSSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
