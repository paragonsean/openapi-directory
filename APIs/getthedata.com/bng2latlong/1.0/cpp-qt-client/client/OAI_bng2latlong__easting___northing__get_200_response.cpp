/**
 * bng2latlong
 * Convert an OSGB36 easting and northing (British National Grid) to WGS84 latitude and longitude.
 *
 * The version of the OpenAPI document: 1.0
 * Contact: info@getthedata.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAI_bng2latlong__easting___northing__get_200_response.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAI_bng2latlong__easting___northing__get_200_response::OAI_bng2latlong__easting___northing__get_200_response(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAI_bng2latlong__easting___northing__get_200_response::OAI_bng2latlong__easting___northing__get_200_response() {
    this->initializeModel();
}

OAI_bng2latlong__easting___northing__get_200_response::~OAI_bng2latlong__easting___northing__get_200_response() {}

void OAI_bng2latlong__easting___northing__get_200_response::initializeModel() {

    m_easting_isSet = false;
    m_easting_isValid = false;

    m_error_isSet = false;
    m_error_isValid = false;

    m_latitude_isSet = false;
    m_latitude_isValid = false;

    m_longitude_isSet = false;
    m_longitude_isValid = false;

    m_northing_isSet = false;
    m_northing_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;
}

void OAI_bng2latlong__easting___northing__get_200_response::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAI_bng2latlong__easting___northing__get_200_response::fromJsonObject(QJsonObject json) {

    m_easting_isValid = ::OpenAPI::fromJsonValue(m_easting, json[QString("easting")]);
    m_easting_isSet = !json[QString("easting")].isNull() && m_easting_isValid;

    m_error_isValid = ::OpenAPI::fromJsonValue(m_error, json[QString("error")]);
    m_error_isSet = !json[QString("error")].isNull() && m_error_isValid;

    m_latitude_isValid = ::OpenAPI::fromJsonValue(m_latitude, json[QString("latitude")]);
    m_latitude_isSet = !json[QString("latitude")].isNull() && m_latitude_isValid;

    m_longitude_isValid = ::OpenAPI::fromJsonValue(m_longitude, json[QString("longitude")]);
    m_longitude_isSet = !json[QString("longitude")].isNull() && m_longitude_isValid;

    m_northing_isValid = ::OpenAPI::fromJsonValue(m_northing, json[QString("northing")]);
    m_northing_isSet = !json[QString("northing")].isNull() && m_northing_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("status")]);
    m_status_isSet = !json[QString("status")].isNull() && m_status_isValid;
}

QString OAI_bng2latlong__easting___northing__get_200_response::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAI_bng2latlong__easting___northing__get_200_response::asJsonObject() const {
    QJsonObject obj;
    if (m_easting_isSet) {
        obj.insert(QString("easting"), ::OpenAPI::toJsonValue(m_easting));
    }
    if (m_error_isSet) {
        obj.insert(QString("error"), ::OpenAPI::toJsonValue(m_error));
    }
    if (m_latitude_isSet) {
        obj.insert(QString("latitude"), ::OpenAPI::toJsonValue(m_latitude));
    }
    if (m_longitude_isSet) {
        obj.insert(QString("longitude"), ::OpenAPI::toJsonValue(m_longitude));
    }
    if (m_northing_isSet) {
        obj.insert(QString("northing"), ::OpenAPI::toJsonValue(m_northing));
    }
    if (m_status_isSet) {
        obj.insert(QString("status"), ::OpenAPI::toJsonValue(m_status));
    }
    return obj;
}

qint32 OAI_bng2latlong__easting___northing__get_200_response::getEasting() const {
    return m_easting;
}
void OAI_bng2latlong__easting___northing__get_200_response::setEasting(const qint32 &easting) {
    m_easting = easting;
    m_easting_isSet = true;
}

bool OAI_bng2latlong__easting___northing__get_200_response::is_easting_Set() const{
    return m_easting_isSet;
}

bool OAI_bng2latlong__easting___northing__get_200_response::is_easting_Valid() const{
    return m_easting_isValid;
}

QString OAI_bng2latlong__easting___northing__get_200_response::getError() const {
    return m_error;
}
void OAI_bng2latlong__easting___northing__get_200_response::setError(const QString &error) {
    m_error = error;
    m_error_isSet = true;
}

bool OAI_bng2latlong__easting___northing__get_200_response::is_error_Set() const{
    return m_error_isSet;
}

bool OAI_bng2latlong__easting___northing__get_200_response::is_error_Valid() const{
    return m_error_isValid;
}

double OAI_bng2latlong__easting___northing__get_200_response::getLatitude() const {
    return m_latitude;
}
void OAI_bng2latlong__easting___northing__get_200_response::setLatitude(const double &latitude) {
    m_latitude = latitude;
    m_latitude_isSet = true;
}

bool OAI_bng2latlong__easting___northing__get_200_response::is_latitude_Set() const{
    return m_latitude_isSet;
}

bool OAI_bng2latlong__easting___northing__get_200_response::is_latitude_Valid() const{
    return m_latitude_isValid;
}

double OAI_bng2latlong__easting___northing__get_200_response::getLongitude() const {
    return m_longitude;
}
void OAI_bng2latlong__easting___northing__get_200_response::setLongitude(const double &longitude) {
    m_longitude = longitude;
    m_longitude_isSet = true;
}

bool OAI_bng2latlong__easting___northing__get_200_response::is_longitude_Set() const{
    return m_longitude_isSet;
}

bool OAI_bng2latlong__easting___northing__get_200_response::is_longitude_Valid() const{
    return m_longitude_isValid;
}

qint32 OAI_bng2latlong__easting___northing__get_200_response::getNorthing() const {
    return m_northing;
}
void OAI_bng2latlong__easting___northing__get_200_response::setNorthing(const qint32 &northing) {
    m_northing = northing;
    m_northing_isSet = true;
}

bool OAI_bng2latlong__easting___northing__get_200_response::is_northing_Set() const{
    return m_northing_isSet;
}

bool OAI_bng2latlong__easting___northing__get_200_response::is_northing_Valid() const{
    return m_northing_isValid;
}

QString OAI_bng2latlong__easting___northing__get_200_response::getStatus() const {
    return m_status;
}
void OAI_bng2latlong__easting___northing__get_200_response::setStatus(const QString &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAI_bng2latlong__easting___northing__get_200_response::is_status_Set() const{
    return m_status_isSet;
}

bool OAI_bng2latlong__easting___northing__get_200_response::is_status_Valid() const{
    return m_status_isValid;
}

bool OAI_bng2latlong__easting___northing__get_200_response::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_easting_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_error_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_latitude_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_longitude_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_northing_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAI_bng2latlong__easting___northing__get_200_response::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
