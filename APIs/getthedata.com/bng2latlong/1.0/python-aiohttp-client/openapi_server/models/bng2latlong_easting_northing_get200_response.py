# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class Bng2latlongEastingNorthingGet200Response(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, easting: int=None, error: str=None, latitude: float=None, longitude: float=None, northing: int=None, status: str=None):
        """Bng2latlongEastingNorthingGet200Response - a model defined in OpenAPI

        :param easting: The easting of this Bng2latlongEastingNorthingGet200Response.
        :param error: The error of this Bng2latlongEastingNorthingGet200Response.
        :param latitude: The latitude of this Bng2latlongEastingNorthingGet200Response.
        :param longitude: The longitude of this Bng2latlongEastingNorthingGet200Response.
        :param northing: The northing of this Bng2latlongEastingNorthingGet200Response.
        :param status: The status of this Bng2latlongEastingNorthingGet200Response.
        """
        self.openapi_types = {
            'easting': int,
            'error': str,
            'latitude': float,
            'longitude': float,
            'northing': int,
            'status': str
        }

        self.attribute_map = {
            'easting': 'easting',
            'error': 'error',
            'latitude': 'latitude',
            'longitude': 'longitude',
            'northing': 'northing',
            'status': 'status'
        }

        self._easting = easting
        self._error = error
        self._latitude = latitude
        self._longitude = longitude
        self._northing = northing
        self._status = status

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Bng2latlongEastingNorthingGet200Response':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The _bng2latlong__easting___northing__get_200_response of this Bng2latlongEastingNorthingGet200Response.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def easting(self):
        """Gets the easting of this Bng2latlongEastingNorthingGet200Response.


        :return: The easting of this Bng2latlongEastingNorthingGet200Response.
        :rtype: int
        """
        return self._easting

    @easting.setter
    def easting(self, easting):
        """Sets the easting of this Bng2latlongEastingNorthingGet200Response.


        :param easting: The easting of this Bng2latlongEastingNorthingGet200Response.
        :type easting: int
        """

        self._easting = easting

    @property
    def error(self):
        """Gets the error of this Bng2latlongEastingNorthingGet200Response.


        :return: The error of this Bng2latlongEastingNorthingGet200Response.
        :rtype: str
        """
        return self._error

    @error.setter
    def error(self, error):
        """Sets the error of this Bng2latlongEastingNorthingGet200Response.


        :param error: The error of this Bng2latlongEastingNorthingGet200Response.
        :type error: str
        """

        self._error = error

    @property
    def latitude(self):
        """Gets the latitude of this Bng2latlongEastingNorthingGet200Response.


        :return: The latitude of this Bng2latlongEastingNorthingGet200Response.
        :rtype: float
        """
        return self._latitude

    @latitude.setter
    def latitude(self, latitude):
        """Sets the latitude of this Bng2latlongEastingNorthingGet200Response.


        :param latitude: The latitude of this Bng2latlongEastingNorthingGet200Response.
        :type latitude: float
        """

        self._latitude = latitude

    @property
    def longitude(self):
        """Gets the longitude of this Bng2latlongEastingNorthingGet200Response.


        :return: The longitude of this Bng2latlongEastingNorthingGet200Response.
        :rtype: float
        """
        return self._longitude

    @longitude.setter
    def longitude(self, longitude):
        """Sets the longitude of this Bng2latlongEastingNorthingGet200Response.


        :param longitude: The longitude of this Bng2latlongEastingNorthingGet200Response.
        :type longitude: float
        """

        self._longitude = longitude

    @property
    def northing(self):
        """Gets the northing of this Bng2latlongEastingNorthingGet200Response.


        :return: The northing of this Bng2latlongEastingNorthingGet200Response.
        :rtype: int
        """
        return self._northing

    @northing.setter
    def northing(self, northing):
        """Sets the northing of this Bng2latlongEastingNorthingGet200Response.


        :param northing: The northing of this Bng2latlongEastingNorthingGet200Response.
        :type northing: int
        """

        self._northing = northing

    @property
    def status(self):
        """Gets the status of this Bng2latlongEastingNorthingGet200Response.


        :return: The status of this Bng2latlongEastingNorthingGet200Response.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this Bng2latlongEastingNorthingGet200Response.


        :param status: The status of this Bng2latlongEastingNorthingGet200Response.
        :type status: str
        """
        allowed_values = ["ok", "error"]  # noqa: E501
        if status not in allowed_values:
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"
                .format(status, allowed_values)
            )

        self._status = status
