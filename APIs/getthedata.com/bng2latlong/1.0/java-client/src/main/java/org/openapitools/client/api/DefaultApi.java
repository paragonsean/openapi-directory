/*
 * bng2latlong
 * Convert an OSGB36 easting and northing (British National Grid) to WGS84 latitude and longitude.
 *
 * The version of the OpenAPI document: 1.0
 * Contact: info@getthedata.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.Bng2latlongEastingNorthingGet200Response;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class DefaultApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public DefaultApi() {
        this(Configuration.getDefaultApiClient());
    }

    public DefaultApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for bng2latlongEastingNorthingGet
     * @param easting An OSGB36 (British National Grid) easting. (required)
     * @param northing An OSGB36 (British National Grid) northing. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A JSON object containing the original easting and northing, and the converted latitude and longitude. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call bng2latlongEastingNorthingGetCall(Integer easting, Integer northing, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/bng2latlong/{easting}/{northing}"
            .replace("{" + "easting" + "}", localVarApiClient.escapeString(easting.toString()))
            .replace("{" + "northing" + "}", localVarApiClient.escapeString(northing.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call bng2latlongEastingNorthingGetValidateBeforeCall(Integer easting, Integer northing, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'easting' is set
        if (easting == null) {
            throw new ApiException("Missing the required parameter 'easting' when calling bng2latlongEastingNorthingGet(Async)");
        }

        // verify the required parameter 'northing' is set
        if (northing == null) {
            throw new ApiException("Missing the required parameter 'northing' when calling bng2latlongEastingNorthingGet(Async)");
        }

        return bng2latlongEastingNorthingGetCall(easting, northing, _callback);

    }

    /**
     * Returns latitude and longitude for the given easting and northing.
     * Takes an OSGB36 easting and northing (British National Grid) and returns the geographically equivalent WGS84 latitude and longitude. #### A successful request returns the following fields: * status - this will be &#x60;ok&#x60; * easting - the easting provided in the request * northing - the northing provided in the request * latitude - the latitude of the converted coordinates * longitude - the longitude of the converted coordinates #### An unsuccessful request returns the following fields: * status - this will be &#x60;error&#x60; * error - an error message 
     * @param easting An OSGB36 (British National Grid) easting. (required)
     * @param northing An OSGB36 (British National Grid) northing. (required)
     * @return Bng2latlongEastingNorthingGet200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A JSON object containing the original easting and northing, and the converted latitude and longitude. </td><td>  -  </td></tr>
     </table>
     */
    public Bng2latlongEastingNorthingGet200Response bng2latlongEastingNorthingGet(Integer easting, Integer northing) throws ApiException {
        ApiResponse<Bng2latlongEastingNorthingGet200Response> localVarResp = bng2latlongEastingNorthingGetWithHttpInfo(easting, northing);
        return localVarResp.getData();
    }

    /**
     * Returns latitude and longitude for the given easting and northing.
     * Takes an OSGB36 easting and northing (British National Grid) and returns the geographically equivalent WGS84 latitude and longitude. #### A successful request returns the following fields: * status - this will be &#x60;ok&#x60; * easting - the easting provided in the request * northing - the northing provided in the request * latitude - the latitude of the converted coordinates * longitude - the longitude of the converted coordinates #### An unsuccessful request returns the following fields: * status - this will be &#x60;error&#x60; * error - an error message 
     * @param easting An OSGB36 (British National Grid) easting. (required)
     * @param northing An OSGB36 (British National Grid) northing. (required)
     * @return ApiResponse&lt;Bng2latlongEastingNorthingGet200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A JSON object containing the original easting and northing, and the converted latitude and longitude. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Bng2latlongEastingNorthingGet200Response> bng2latlongEastingNorthingGetWithHttpInfo(Integer easting, Integer northing) throws ApiException {
        okhttp3.Call localVarCall = bng2latlongEastingNorthingGetValidateBeforeCall(easting, northing, null);
        Type localVarReturnType = new TypeToken<Bng2latlongEastingNorthingGet200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Returns latitude and longitude for the given easting and northing. (asynchronously)
     * Takes an OSGB36 easting and northing (British National Grid) and returns the geographically equivalent WGS84 latitude and longitude. #### A successful request returns the following fields: * status - this will be &#x60;ok&#x60; * easting - the easting provided in the request * northing - the northing provided in the request * latitude - the latitude of the converted coordinates * longitude - the longitude of the converted coordinates #### An unsuccessful request returns the following fields: * status - this will be &#x60;error&#x60; * error - an error message 
     * @param easting An OSGB36 (British National Grid) easting. (required)
     * @param northing An OSGB36 (British National Grid) northing. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A JSON object containing the original easting and northing, and the converted latitude and longitude. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call bng2latlongEastingNorthingGetAsync(Integer easting, Integer northing, final ApiCallback<Bng2latlongEastingNorthingGet200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = bng2latlongEastingNorthingGetValidateBeforeCall(easting, northing, _callback);
        Type localVarReturnType = new TypeToken<Bng2latlongEastingNorthingGet200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
