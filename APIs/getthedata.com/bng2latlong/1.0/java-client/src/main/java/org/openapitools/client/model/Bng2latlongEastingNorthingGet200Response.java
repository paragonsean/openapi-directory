/*
 * bng2latlong
 * Convert an OSGB36 easting and northing (British National Grid) to WGS84 latitude and longitude.
 *
 * The version of the OpenAPI document: 1.0
 * Contact: info@getthedata.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.math.BigDecimal;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Bng2latlongEastingNorthingGet200Response
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:25:14.326781-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Bng2latlongEastingNorthingGet200Response {
  public static final String SERIALIZED_NAME_EASTING = "easting";
  @SerializedName(SERIALIZED_NAME_EASTING)
  private Integer easting;

  public static final String SERIALIZED_NAME_ERROR = "error";
  @SerializedName(SERIALIZED_NAME_ERROR)
  private String error;

  public static final String SERIALIZED_NAME_LATITUDE = "latitude";
  @SerializedName(SERIALIZED_NAME_LATITUDE)
  private BigDecimal latitude;

  public static final String SERIALIZED_NAME_LONGITUDE = "longitude";
  @SerializedName(SERIALIZED_NAME_LONGITUDE)
  private BigDecimal longitude;

  public static final String SERIALIZED_NAME_NORTHING = "northing";
  @SerializedName(SERIALIZED_NAME_NORTHING)
  private Integer northing;

  /**
   * Gets or Sets status
   */
  @JsonAdapter(StatusEnum.Adapter.class)
  public enum StatusEnum {
    OK("ok"),
    
    ERROR("error");

    private String value;

    StatusEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static StatusEnum fromValue(String value) {
      for (StatusEnum b : StatusEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<StatusEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final StatusEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public StatusEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return StatusEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      StatusEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_STATUS = "status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  private StatusEnum status;

  public Bng2latlongEastingNorthingGet200Response() {
  }

  public Bng2latlongEastingNorthingGet200Response easting(Integer easting) {
    this.easting = easting;
    return this;
  }

  /**
   * Get easting
   * @return easting
   */
  @javax.annotation.Nullable
  public Integer getEasting() {
    return easting;
  }

  public void setEasting(Integer easting) {
    this.easting = easting;
  }


  public Bng2latlongEastingNorthingGet200Response error(String error) {
    this.error = error;
    return this;
  }

  /**
   * Get error
   * @return error
   */
  @javax.annotation.Nullable
  public String getError() {
    return error;
  }

  public void setError(String error) {
    this.error = error;
  }


  public Bng2latlongEastingNorthingGet200Response latitude(BigDecimal latitude) {
    this.latitude = latitude;
    return this;
  }

  /**
   * Get latitude
   * @return latitude
   */
  @javax.annotation.Nullable
  public BigDecimal getLatitude() {
    return latitude;
  }

  public void setLatitude(BigDecimal latitude) {
    this.latitude = latitude;
  }


  public Bng2latlongEastingNorthingGet200Response longitude(BigDecimal longitude) {
    this.longitude = longitude;
    return this;
  }

  /**
   * Get longitude
   * @return longitude
   */
  @javax.annotation.Nullable
  public BigDecimal getLongitude() {
    return longitude;
  }

  public void setLongitude(BigDecimal longitude) {
    this.longitude = longitude;
  }


  public Bng2latlongEastingNorthingGet200Response northing(Integer northing) {
    this.northing = northing;
    return this;
  }

  /**
   * Get northing
   * @return northing
   */
  @javax.annotation.Nullable
  public Integer getNorthing() {
    return northing;
  }

  public void setNorthing(Integer northing) {
    this.northing = northing;
  }


  public Bng2latlongEastingNorthingGet200Response status(StatusEnum status) {
    this.status = status;
    return this;
  }

  /**
   * Get status
   * @return status
   */
  @javax.annotation.Nullable
  public StatusEnum getStatus() {
    return status;
  }

  public void setStatus(StatusEnum status) {
    this.status = status;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Bng2latlongEastingNorthingGet200Response bng2latlongEastingNorthingGet200Response = (Bng2latlongEastingNorthingGet200Response) o;
    return Objects.equals(this.easting, bng2latlongEastingNorthingGet200Response.easting) &&
        Objects.equals(this.error, bng2latlongEastingNorthingGet200Response.error) &&
        Objects.equals(this.latitude, bng2latlongEastingNorthingGet200Response.latitude) &&
        Objects.equals(this.longitude, bng2latlongEastingNorthingGet200Response.longitude) &&
        Objects.equals(this.northing, bng2latlongEastingNorthingGet200Response.northing) &&
        Objects.equals(this.status, bng2latlongEastingNorthingGet200Response.status);
  }

  @Override
  public int hashCode() {
    return Objects.hash(easting, error, latitude, longitude, northing, status);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Bng2latlongEastingNorthingGet200Response {\n");
    sb.append("    easting: ").append(toIndentedString(easting)).append("\n");
    sb.append("    error: ").append(toIndentedString(error)).append("\n");
    sb.append("    latitude: ").append(toIndentedString(latitude)).append("\n");
    sb.append("    longitude: ").append(toIndentedString(longitude)).append("\n");
    sb.append("    northing: ").append(toIndentedString(northing)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("easting");
    openapiFields.add("error");
    openapiFields.add("latitude");
    openapiFields.add("longitude");
    openapiFields.add("northing");
    openapiFields.add("status");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Bng2latlongEastingNorthingGet200Response
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Bng2latlongEastingNorthingGet200Response.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Bng2latlongEastingNorthingGet200Response is not found in the empty JSON string", Bng2latlongEastingNorthingGet200Response.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Bng2latlongEastingNorthingGet200Response.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Bng2latlongEastingNorthingGet200Response` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("error") != null && !jsonObj.get("error").isJsonNull()) && !jsonObj.get("error").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `error` to be a primitive type in the JSON string but got `%s`", jsonObj.get("error").toString()));
      }
      if ((jsonObj.get("status") != null && !jsonObj.get("status").isJsonNull()) && !jsonObj.get("status").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `status` to be a primitive type in the JSON string but got `%s`", jsonObj.get("status").toString()));
      }
      // validate the optional field `status`
      if (jsonObj.get("status") != null && !jsonObj.get("status").isJsonNull()) {
        StatusEnum.validateJsonElement(jsonObj.get("status"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Bng2latlongEastingNorthingGet200Response.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Bng2latlongEastingNorthingGet200Response' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Bng2latlongEastingNorthingGet200Response> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Bng2latlongEastingNorthingGet200Response.class));

       return (TypeAdapter<T>) new TypeAdapter<Bng2latlongEastingNorthingGet200Response>() {
           @Override
           public void write(JsonWriter out, Bng2latlongEastingNorthingGet200Response value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Bng2latlongEastingNorthingGet200Response read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Bng2latlongEastingNorthingGet200Response given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Bng2latlongEastingNorthingGet200Response
   * @throws IOException if the JSON string is invalid with respect to Bng2latlongEastingNorthingGet200Response
   */
  public static Bng2latlongEastingNorthingGet200Response fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Bng2latlongEastingNorthingGet200Response.class);
  }

  /**
   * Convert an instance of Bng2latlongEastingNorthingGet200Response to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

