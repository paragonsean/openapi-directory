/**
 * Braze Endpoints
 * # Braze API Overview  Braze provides a high performance REST API to allow you to track users, send messages, export data, and more.  A REST API is a way to programmatically transfer information over the web using a predefined schema. Braze has created many different endpoints with specific requirements that will perform various actions and/or return various data. API access is done using HTTPS web requests to your company's REST API endpoint (this will correspond to your Dashboard URL as shown in the table below).  Customers using Braze's EU database should use `https://rest.fra-01.braze.eu/`. For more information on REST API endpoints for customers using Braze's EU database see our [EU/US Implementation Differences documentation](https://www.braze.com/docs/developer_guide/eu01_us3_sdk_implementation_differences/overview/).  ## Braze Instances  Instance    | Dashboard URL   | REST Endpoint ----------- |---------------- | -------------------- US-01 | `https://dashboard.braze.com` or<br> `https://dashboard-01.braze.com` | `https://rest.iad-01.braze.com` US-02 | `https://dashboard-02.braze.com` | `https://rest.iad-02.braze.com` US-03 | `https://dashboard-03.braze.com` | `https://rest.iad-03.braze.com` US-04 | `https://dashboard-04.braze.com` | `https://rest.iad-04.braze.com` US-06 | `https://dashboard-06.braze.com` | `https://rest.iad-06.braze.com` EU-01 | `https://dashboard.braze.eu` or<br> `https://dashboard-01.braze.eu` | `https://rest.fra-01.braze.eu`   # Using Braze's Postman Collection   If you have a Postman account (MacOS, Windows, and Linux versions can be downloaded from their website located [here](https://www.getpostman.com)), you can go to our Postman documentation and click the orange `Run in Postman` button in the top, right corner. This will allow you to [create an environment](#setting-up-your-postman-environment), as well as edit the available `POST` and `GET` requests to suit your own needs.  ## Setting Up Your Postman Environment  The Braze Postman Collection uses a templating variable, `{{instance_url}}`, to substitute the REST API URL of your Braze instance into the pre-built requests. Rather than having to manually edit all requests in the Collection, you can set up this variable in your Postman environment. To do so, please follow the steps below:  1. Click on the gear icon in the top right corner of the Postman app.  2. Select \"Manage Environments\" to open a modal window which displays your active environments. 3. In the bottom right corner of the modal window, click \"Add\" to create a new environment. 4. Give this environment a name (e.g. \"Braze API Requests\") and add keys for `instance_url` and `api_key` with values corresponding to [your Braze instance](https://www.braze.com/docs/api/basics/#endpoints) and [Braze REST API Key](https://www.braze.com/docs/api/basics/#app-group-rest-api-keys), as pictured below.   As of April, 2020 Braze has changed how we read App Group API keys. Instead of passing them in the request body or through url parameters, we now read the App Group Rest`api_key` through the HTTP Authorization header. API keys not passed through the HTTP Authorization Header will coninue to work until they have been sunset.   ## Using the Pre-Built Requests from the Collection  Once you have configured your environment. You can use any of the pre-built requests in the collection as a template for building new API requests. To start using one of the pre-built requests, simply click on it within the 'Collections' menu on the left side of Postman. This will open the request as a new tab in the main window of the Postman app.  In general, there are two types of requests that Braze's API endpoints accept - `GET` and `POST`. Depending on which `HTTP` method the endpoint uses, you'll need to edit the pre-built request differently.  ### Edit a POST Request  When editing a `POST` request, you'll need to open the request and navigate to the `Body` section in the request editor. For readability, select the `raw` radio button to format the `JSON` request body.  ### Edit a GET Request  When editing a `GET` request, you will need to edit the parameters passed in the request URL. To edit these easily, select the `Params` button next to the URL bar and edit the key-value pairs in the fields that will appear below the URL bar.  ## Send Your Request  Once your API request is ready to send, click on the 'Send' button next to the URL bar. The request will be sent and the response data will be populated in a section underneath the request editor. From here, you can view the raw data returned from Braze's API, see the HTTP response code, see how long the request took to process, and view header information.
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIScheduleApiTriggeredCanvases_request_recipients_inner.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIScheduleApiTriggeredCanvases_request_recipients_inner::OAIScheduleApiTriggeredCanvases_request_recipients_inner(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIScheduleApiTriggeredCanvases_request_recipients_inner::OAIScheduleApiTriggeredCanvases_request_recipients_inner() {
    this->initializeModel();
}

OAIScheduleApiTriggeredCanvases_request_recipients_inner::~OAIScheduleApiTriggeredCanvases_request_recipients_inner() {}

void OAIScheduleApiTriggeredCanvases_request_recipients_inner::initializeModel() {

    m_canvas_entry_properties_isSet = false;
    m_canvas_entry_properties_isValid = false;

    m_external_user_id_isSet = false;
    m_external_user_id_isValid = false;

    m_trigger_properties_isSet = false;
    m_trigger_properties_isValid = false;

    m_user_alias_isSet = false;
    m_user_alias_isValid = false;
}

void OAIScheduleApiTriggeredCanvases_request_recipients_inner::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIScheduleApiTriggeredCanvases_request_recipients_inner::fromJsonObject(QJsonObject json) {

    m_canvas_entry_properties_isValid = ::OpenAPI::fromJsonValue(m_canvas_entry_properties, json[QString("canvas_entry_properties")]);
    m_canvas_entry_properties_isSet = !json[QString("canvas_entry_properties")].isNull() && m_canvas_entry_properties_isValid;

    m_external_user_id_isValid = ::OpenAPI::fromJsonValue(m_external_user_id, json[QString("external_user_id")]);
    m_external_user_id_isSet = !json[QString("external_user_id")].isNull() && m_external_user_id_isValid;

    m_trigger_properties_isValid = ::OpenAPI::fromJsonValue(m_trigger_properties, json[QString("trigger_properties")]);
    m_trigger_properties_isSet = !json[QString("trigger_properties")].isNull() && m_trigger_properties_isValid;

    m_user_alias_isValid = ::OpenAPI::fromJsonValue(m_user_alias, json[QString("user_alias")]);
    m_user_alias_isSet = !json[QString("user_alias")].isNull() && m_user_alias_isValid;
}

QString OAIScheduleApiTriggeredCanvases_request_recipients_inner::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIScheduleApiTriggeredCanvases_request_recipients_inner::asJsonObject() const {
    QJsonObject obj;
    if (m_canvas_entry_properties_isSet) {
        obj.insert(QString("canvas_entry_properties"), ::OpenAPI::toJsonValue(m_canvas_entry_properties));
    }
    if (m_external_user_id_isSet) {
        obj.insert(QString("external_user_id"), ::OpenAPI::toJsonValue(m_external_user_id));
    }
    if (m_trigger_properties_isSet) {
        obj.insert(QString("trigger_properties"), ::OpenAPI::toJsonValue(m_trigger_properties));
    }
    if (m_user_alias_isSet) {
        obj.insert(QString("user_alias"), ::OpenAPI::toJsonValue(m_user_alias));
    }
    return obj;
}

OAIObject OAIScheduleApiTriggeredCanvases_request_recipients_inner::getCanvasEntryProperties() const {
    return m_canvas_entry_properties;
}
void OAIScheduleApiTriggeredCanvases_request_recipients_inner::setCanvasEntryProperties(const OAIObject &canvas_entry_properties) {
    m_canvas_entry_properties = canvas_entry_properties;
    m_canvas_entry_properties_isSet = true;
}

bool OAIScheduleApiTriggeredCanvases_request_recipients_inner::is_canvas_entry_properties_Set() const{
    return m_canvas_entry_properties_isSet;
}

bool OAIScheduleApiTriggeredCanvases_request_recipients_inner::is_canvas_entry_properties_Valid() const{
    return m_canvas_entry_properties_isValid;
}

QString OAIScheduleApiTriggeredCanvases_request_recipients_inner::getExternalUserId() const {
    return m_external_user_id;
}
void OAIScheduleApiTriggeredCanvases_request_recipients_inner::setExternalUserId(const QString &external_user_id) {
    m_external_user_id = external_user_id;
    m_external_user_id_isSet = true;
}

bool OAIScheduleApiTriggeredCanvases_request_recipients_inner::is_external_user_id_Set() const{
    return m_external_user_id_isSet;
}

bool OAIScheduleApiTriggeredCanvases_request_recipients_inner::is_external_user_id_Valid() const{
    return m_external_user_id_isValid;
}

QString OAIScheduleApiTriggeredCanvases_request_recipients_inner::getTriggerProperties() const {
    return m_trigger_properties;
}
void OAIScheduleApiTriggeredCanvases_request_recipients_inner::setTriggerProperties(const QString &trigger_properties) {
    m_trigger_properties = trigger_properties;
    m_trigger_properties_isSet = true;
}

bool OAIScheduleApiTriggeredCanvases_request_recipients_inner::is_trigger_properties_Set() const{
    return m_trigger_properties_isSet;
}

bool OAIScheduleApiTriggeredCanvases_request_recipients_inner::is_trigger_properties_Valid() const{
    return m_trigger_properties_isValid;
}

QString OAIScheduleApiTriggeredCanvases_request_recipients_inner::getUserAlias() const {
    return m_user_alias;
}
void OAIScheduleApiTriggeredCanvases_request_recipients_inner::setUserAlias(const QString &user_alias) {
    m_user_alias = user_alias;
    m_user_alias_isSet = true;
}

bool OAIScheduleApiTriggeredCanvases_request_recipients_inner::is_user_alias_Set() const{
    return m_user_alias_isSet;
}

bool OAIScheduleApiTriggeredCanvases_request_recipients_inner::is_user_alias_Valid() const{
    return m_user_alias_isValid;
}

bool OAIScheduleApiTriggeredCanvases_request_recipients_inner::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_canvas_entry_properties_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_external_user_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_trigger_properties_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_user_alias_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIScheduleApiTriggeredCanvases_request_recipients_inner::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
