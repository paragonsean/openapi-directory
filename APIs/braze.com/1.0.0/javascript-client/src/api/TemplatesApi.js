/**
 * Braze Endpoints
 * # Braze API Overview  Braze provides a high performance REST API to allow you to track users, send messages, export data, and more.  A REST API is a way to programmatically transfer information over the web using a predefined schema. Braze has created many different endpoints with specific requirements that will perform various actions and/or return various data. API access is done using HTTPS web requests to your company's REST API endpoint (this will correspond to your Dashboard URL as shown in the table below).  Customers using Braze's EU database should use `https://rest.fra-01.braze.eu/`. For more information on REST API endpoints for customers using Braze's EU database see our [EU/US Implementation Differences documentation](https://www.braze.com/docs/developer_guide/eu01_us3_sdk_implementation_differences/overview/).  ## Braze Instances  Instance    | Dashboard URL   | REST Endpoint ----------- |---------------- | -------------------- US-01 | `https://dashboard.braze.com` or<br> `https://dashboard-01.braze.com` | `https://rest.iad-01.braze.com` US-02 | `https://dashboard-02.braze.com` | `https://rest.iad-02.braze.com` US-03 | `https://dashboard-03.braze.com` | `https://rest.iad-03.braze.com` US-04 | `https://dashboard-04.braze.com` | `https://rest.iad-04.braze.com` US-06 | `https://dashboard-06.braze.com` | `https://rest.iad-06.braze.com` EU-01 | `https://dashboard.braze.eu` or<br> `https://dashboard-01.braze.eu` | `https://rest.fra-01.braze.eu`   # Using Braze's Postman Collection   If you have a Postman account (MacOS, Windows, and Linux versions can be downloaded from their website located [here](https://www.getpostman.com)), you can go to our Postman documentation and click the orange `Run in Postman` button in the top, right corner. This will allow you to [create an environment](#setting-up-your-postman-environment), as well as edit the available `POST` and `GET` requests to suit your own needs.  ## Setting Up Your Postman Environment  The Braze Postman Collection uses a templating variable, `{{instance_url}}`, to substitute the REST API URL of your Braze instance into the pre-built requests. Rather than having to manually edit all requests in the Collection, you can set up this variable in your Postman environment. To do so, please follow the steps below:  1. Click on the gear icon in the top right corner of the Postman app.  2. Select \"Manage Environments\" to open a modal window which displays your active environments. 3. In the bottom right corner of the modal window, click \"Add\" to create a new environment. 4. Give this environment a name (e.g. \"Braze API Requests\") and add keys for `instance_url` and `api_key` with values corresponding to [your Braze instance](https://www.braze.com/docs/api/basics/#endpoints) and [Braze REST API Key](https://www.braze.com/docs/api/basics/#app-group-rest-api-keys), as pictured below.   As of April, 2020 Braze has changed how we read App Group API keys. Instead of passing them in the request body or through url parameters, we now read the App Group Rest`api_key` through the HTTP Authorization header. API keys not passed through the HTTP Authorization Header will coninue to work until they have been sunset.   ## Using the Pre-Built Requests from the Collection  Once you have configured your environment. You can use any of the pre-built requests in the collection as a template for building new API requests. To start using one of the pre-built requests, simply click on it within the 'Collections' menu on the left side of Postman. This will open the request as a new tab in the main window of the Postman app.  In general, there are two types of requests that Braze's API endpoints accept - `GET` and `POST`. Depending on which `HTTP` method the endpoint uses, you'll need to edit the pre-built request differently.  ### Edit a POST Request  When editing a `POST` request, you'll need to open the request and navigate to the `Body` section in the request editor. For readability, select the `raw` radio button to format the `JSON` request body.  ### Edit a GET Request  When editing a `GET` request, you will need to edit the parameters passed in the request URL. To edit these easily, select the `Params` button next to the URL bar and edit the key-value pairs in the fields that will appear below the URL bar.  ## Send Your Request  Once your API request is ready to send, click on the 'Send' button next to the URL bar. The request will be sent and the response data will be populated in a section underneath the request editor. From here, you can view the raw data returned from Braze's API, see the HTTP response code, see how long the request took to process, and view header information.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";

/**
* Templates service.
* @module api/TemplatesApi
* @version 1.0.0
*/
export default class TemplatesApi {

    /**
    * Constructs a new TemplatesApi. 
    * @alias module:api/TemplatesApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the listAvailableContentBlocks operation.
     * @callback module:api/TemplatesApi~listAvailableContentBlocksCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List Available Content Blocks
     * This endpoint will list existing Content Block information.  ### Successful Response Properties ```json Content-Type: application/json Authorization: Bearer YOUR_REST_API_KEY {   \"count\": \"integer\",   \"content_blocks\": [     {       \"content_block_id\": \"string\",       \"name\": \"string\",       \"content_type\": \"html or text\",       \"liquid_tag\": \"string\",       \"inclusion_count\" : \"integer\",       \"created_at\": \"time-in-iso\",       \"last_edited\": \"time-in-iso\",       \"tags\" : \"array of strings\"     }   ] } ```  ### Possible Errors - `Modified after time is invalid.` The date you have provided is not a valid or parsable date. Please reformat this value as a string in ISO 8601 format (`yyyy-mm-ddThh:mm:ss.ffffff`).  - `Modified before time is invalid.` The date you have provided is not a valid or parsable date. Please reformat this value as a string in ISO 8601 format (`yyyy-mm-ddThh:mm:ss.ffffff`).  - `Modified after time must be earlier than or the same as modified before time.`  - `Content Block number limit is invalid.` The `limit` parameter must be an integer (positive number) greater than 0.  - `Content Block number limit must be greater than 0.` The `limit` parameter must be an integer (positive number) greater than 0.  - `Content Block number limit exceeds maximum of 1000.` The `limit` parameter must be an integer (positive number) greater than 0.  - `Offset is invalid.` The `offset` parameter must be an integer (positive number) greater than 0.  - `Offset must be greater than 0.` The `offset` parameter must be an integer (positive number) greater than 0.
     * @param {Object} opts Optional parameters
     * @param {String} [modifiedAfter] (Optional) String in ISO 8601  Retrieve only content blocks updated at or after the given time.
     * @param {String} [modifiedBefore] (Optional) String in ISO 8601  Retrieve only content blocks updated at or before the given time.
     * @param {String} [limit] (Optional) Positive Number  Maximum number of content blocks to retrieve, default to 100 if not provided, maximum acceptable value is 1000.
     * @param {String} [offset] (Optional) Positive Number  Number of content blocks to skip before returning rest of the templates that fit the search criteria.
     * @param {module:api/TemplatesApi~listAvailableContentBlocksCallback} callback The callback function, accepting three arguments: error, data, response
     */
    listAvailableContentBlocks(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'modified_after': opts['modifiedAfter'],
        'modified_before': opts['modifiedBefore'],
        'limit': opts['limit'],
        'offset': opts['offset']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/content_blocks/list', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listAvailableEmailTemplates operation.
     * @callback module:api/TemplatesApi~listAvailableEmailTemplatesCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List Available Email Templates
     * Use this endpoint to get a list of available templates in your Braze account.  Use the Template REST APIs to programmatically manage the email templates that you have stored on the Braze dashboard, on the Templates & Media page. Braze provides two endpoints for creating and updating your email templates.  ### Successful Response Properties ```json {   \"count\": number of templates returned   \"templates\": [template with the following properties]:     \"email_template_id\": (string) your email template's API Identifier,     \"template_name\": (string) the name of your email template,     \"created_at\": (string, in ISO 8601),     \"updated_at\": (string, in ISO 8601),     \"tags\": (array of strings) tags appended to the template }   ```
     * @param {Object} opts Optional parameters
     * @param {String} [modifiedAfter] (Optional) String in ISO 8601  Retrieve only templates updated at or after the given time.
     * @param {String} [modifiedBefore] (Optional) String in ISO 8601  Retrieve only templates updated at or before the given time
     * @param {String} [limit] (Optional) Positive Number  Maximum number of templates to retrieve, default to 100 if not provided, maximum acceptable value is 1000.
     * @param {String} [offset] (Optional) Positive Number  Number of templates to skip before returning rest of the templates that fit the search criteria.
     * @param {module:api/TemplatesApi~listAvailableEmailTemplatesCallback} callback The callback function, accepting three arguments: error, data, response
     */
    listAvailableEmailTemplates(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'modified_after': opts['modifiedAfter'],
        'modified_before': opts['modifiedBefore'],
        'limit': opts['limit'],
        'offset': opts['offset']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/templates/email/list', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the seeContentBlockInformation operation.
     * @callback module:api/TemplatesApi~seeContentBlockInformationCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * See Content Block Information
     * This endpoint will call information for an existing Content Block.  ### Successful Response Properties ```json Content-Type: application/json Authorization: Bearer YOUR_REST_API_KEY {   \"content_block_id\": \"string\",   \"name\": \"string\",   \"content\": \"string\",   \"description\": \"string\",   \"content_type\": \"html or text\",   \"tags\":  \"array of strings\",   \"created_at\": \"time-in-iso\",   \"last_edited\": \"time-in-iso\",   \"inclusion_count\" : \"integer\",   \"message\": \"success\" } ```  ### Possible Errors - `Content Block ID cannot be blank.` - A Content Block has not been listed or is not encapsulated in quotes.  - `Content Block ID is invalid for this App Group.` - This Content Block does not exist or is in a different company account or app group.  - `Content Block has been deleted - content not available.` - This Content Block, though it may have existed earlier, has been deleted.  - `Include Inclusion Data - error` - One of true or false is not provided.
     * @param {Object} opts Optional parameters
     * @param {String} [contentBlockId] (Required) String  The Content Block ID. This can be found by either listing Content Block information or going to the Developer Console, then API Settings, then scrolling to the bottom and searching for your Content Block API Identifier.
     * @param {String} [includeInclusionData] (Optional) Boolean  When set to ‘true’, the API returns back the Message Variation API ID of Campaigns and Canvases where this content block is included, to be used in subsequent calls. The results exclude archived or deleted Campaigns or Canvases.
     * @param {module:api/TemplatesApi~seeContentBlockInformationCallback} callback The callback function, accepting three arguments: error, data, response
     */
    seeContentBlockInformation(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'content_block_id': opts['contentBlockId'],
        'include_inclusion_data': opts['includeInclusionData']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/content_blocks/info', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the seeEmailTemplateInformation operation.
     * @callback module:api/TemplatesApi~seeEmailTemplateInformationCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * See Email Template Information
     * Use to get information on your email templates.  Use the Template REST APIs to programmatically manage the email templates that you have stored on the Braze dashboard, on the Templates & Media page. Braze provides two endpoints for creating and updating your email templates.  ### Request Components - [Template Identifier](https://www.braze.com/docs/api/identifier_types/)
     * @param {Object} opts Optional parameters
     * @param {String} [emailTemplateId] (Required) String  Your email template's API Identifier.
     * @param {module:api/TemplatesApi~seeEmailTemplateInformationCallback} callback The callback function, accepting three arguments: error, data, response
     */
    seeEmailTemplateInformation(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'email_template_id': opts['emailTemplateId']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/templates/email/info', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
