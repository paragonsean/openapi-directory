/**
 * Braze Endpoints
 * # Braze API Overview  Braze provides a high performance REST API to allow you to track users, send messages, export data, and more.  A REST API is a way to programmatically transfer information over the web using a predefined schema. Braze has created many different endpoints with specific requirements that will perform various actions and/or return various data. API access is done using HTTPS web requests to your company's REST API endpoint (this will correspond to your Dashboard URL as shown in the table below).  Customers using Braze's EU database should use `https://rest.fra-01.braze.eu/`. For more information on REST API endpoints for customers using Braze's EU database see our [EU/US Implementation Differences documentation](https://www.braze.com/docs/developer_guide/eu01_us3_sdk_implementation_differences/overview/).  ## Braze Instances  Instance    | Dashboard URL   | REST Endpoint ----------- |---------------- | -------------------- US-01 | `https://dashboard.braze.com` or<br> `https://dashboard-01.braze.com` | `https://rest.iad-01.braze.com` US-02 | `https://dashboard-02.braze.com` | `https://rest.iad-02.braze.com` US-03 | `https://dashboard-03.braze.com` | `https://rest.iad-03.braze.com` US-04 | `https://dashboard-04.braze.com` | `https://rest.iad-04.braze.com` US-06 | `https://dashboard-06.braze.com` | `https://rest.iad-06.braze.com` EU-01 | `https://dashboard.braze.eu` or<br> `https://dashboard-01.braze.eu` | `https://rest.fra-01.braze.eu`   # Using Braze's Postman Collection   If you have a Postman account (MacOS, Windows, and Linux versions can be downloaded from their website located [here](https://www.getpostman.com)), you can go to our Postman documentation and click the orange `Run in Postman` button in the top, right corner. This will allow you to [create an environment](#setting-up-your-postman-environment), as well as edit the available `POST` and `GET` requests to suit your own needs.  ## Setting Up Your Postman Environment  The Braze Postman Collection uses a templating variable, `{{instance_url}}`, to substitute the REST API URL of your Braze instance into the pre-built requests. Rather than having to manually edit all requests in the Collection, you can set up this variable in your Postman environment. To do so, please follow the steps below:  1. Click on the gear icon in the top right corner of the Postman app.  2. Select \"Manage Environments\" to open a modal window which displays your active environments. 3. In the bottom right corner of the modal window, click \"Add\" to create a new environment. 4. Give this environment a name (e.g. \"Braze API Requests\") and add keys for `instance_url` and `api_key` with values corresponding to [your Braze instance](https://www.braze.com/docs/api/basics/#endpoints) and [Braze REST API Key](https://www.braze.com/docs/api/basics/#app-group-rest-api-keys), as pictured below.   As of April, 2020 Braze has changed how we read App Group API keys. Instead of passing them in the request body or through url parameters, we now read the App Group Rest`api_key` through the HTTP Authorization header. API keys not passed through the HTTP Authorization Header will coninue to work until they have been sunset.   ## Using the Pre-Built Requests from the Collection  Once you have configured your environment. You can use any of the pre-built requests in the collection as a template for building new API requests. To start using one of the pre-built requests, simply click on it within the 'Collections' menu on the left side of Postman. This will open the request as a new tab in the main window of the Postman app.  In general, there are two types of requests that Braze's API endpoints accept - `GET` and `POST`. Depending on which `HTTP` method the endpoint uses, you'll need to edit the pre-built request differently.  ### Edit a POST Request  When editing a `POST` request, you'll need to open the request and navigate to the `Body` section in the request editor. For readability, select the `raw` radio button to format the `JSON` request body.  ### Edit a GET Request  When editing a `GET` request, you will need to edit the parameters passed in the request URL. To edit these easily, select the `Params` button next to the URL bar and edit the key-value pairs in the fields that will appear below the URL bar.  ## Send Your Request  Once your API request is ready to send, click on the 'Send' button next to the URL bar. The request will be sent and the response data will be populated in a section underneath the request editor. From here, you can view the raw data returned from Braze's API, see the HTTP response code, see how long the request took to process, and view header information.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.BrazeEndpoints);
  }
}(this, function(expect, BrazeEndpoints) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new BrazeEndpoints.ExportApi();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('ExportApi', function() {
    describe('appSessionsByTime', function() {
      it('should call appSessionsByTime successfully', function(done) {
        //uncomment below and update the code to test appSessionsByTime
        //instance.appSessionsByTime(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('campaignAnalytics', function() {
      it('should call campaignAnalytics successfully', function(done) {
        //uncomment below and update the code to test campaignAnalytics
        //instance.campaignAnalytics(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('campaignDetails', function() {
      it('should call campaignDetails successfully', function(done) {
        //uncomment below and update the code to test campaignDetails
        //instance.campaignDetails(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('campaignList', function() {
      it('should call campaignList successfully', function(done) {
        //uncomment below and update the code to test campaignList
        //instance.campaignList(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('canvasDataAnalyticsSummary', function() {
      it('should call canvasDataAnalyticsSummary successfully', function(done) {
        //uncomment below and update the code to test canvasDataAnalyticsSummary
        //instance.canvasDataAnalyticsSummary(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('canvasDataSeriesAnalytics', function() {
      it('should call canvasDataSeriesAnalytics successfully', function(done) {
        //uncomment below and update the code to test canvasDataSeriesAnalytics
        //instance.canvasDataSeriesAnalytics(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('canvasDetails', function() {
      it('should call canvasDetails successfully', function(done) {
        //uncomment below and update the code to test canvasDetails
        //instance.canvasDetails(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('canvasList', function() {
      it('should call canvasList successfully', function(done) {
        //uncomment below and update the code to test canvasList
        //instance.canvasList(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('customEventsAnalytics', function() {
      it('should call customEventsAnalytics successfully', function(done) {
        //uncomment below and update the code to test customEventsAnalytics
        //instance.customEventsAnalytics(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('customEventsList', function() {
      it('should call customEventsList successfully', function(done) {
        //uncomment below and update the code to test customEventsList
        //instance.customEventsList(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('dailyActiveUsersByDate', function() {
      it('should call dailyActiveUsersByDate successfully', function(done) {
        //uncomment below and update the code to test dailyActiveUsersByDate
        //instance.dailyActiveUsersByDate(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('dailyNewUsersByDate', function() {
      it('should call dailyNewUsersByDate successfully', function(done) {
        //uncomment below and update the code to test dailyNewUsersByDate
        //instance.dailyNewUsersByDate(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('kpIsForDailyAppUninstallsByDate', function() {
      it('should call kpIsForDailyAppUninstallsByDate successfully', function(done) {
        //uncomment below and update the code to test kpIsForDailyAppUninstallsByDate
        //instance.kpIsForDailyAppUninstallsByDate(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('monthlyActiveUsersForLast30Days', function() {
      it('should call monthlyActiveUsersForLast30Days successfully', function(done) {
        //uncomment below and update the code to test monthlyActiveUsersForLast30Days
        //instance.monthlyActiveUsersForLast30Days(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('newsFeedCardAnalytics', function() {
      it('should call newsFeedCardAnalytics successfully', function(done) {
        //uncomment below and update the code to test newsFeedCardAnalytics
        //instance.newsFeedCardAnalytics(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('newsFeedCardsDetails', function() {
      it('should call newsFeedCardsDetails successfully', function(done) {
        //uncomment below and update the code to test newsFeedCardsDetails
        //instance.newsFeedCardsDetails(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('newsFeedCardsList', function() {
      it('should call newsFeedCardsList successfully', function(done) {
        //uncomment below and update the code to test newsFeedCardsList
        //instance.newsFeedCardsList(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('segmentAnalytics', function() {
      it('should call segmentAnalytics successfully', function(done) {
        //uncomment below and update the code to test segmentAnalytics
        //instance.segmentAnalytics(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('segmentDetails', function() {
      it('should call segmentDetails successfully', function(done) {
        //uncomment below and update the code to test segmentDetails
        //instance.segmentDetails(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('segmentList', function() {
      it('should call segmentList successfully', function(done) {
        //uncomment below and update the code to test segmentList
        //instance.segmentList(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('sendAnalytics', function() {
      it('should call sendAnalytics successfully', function(done) {
        //uncomment below and update the code to test sendAnalytics
        //instance.sendAnalytics(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
  });

}));
