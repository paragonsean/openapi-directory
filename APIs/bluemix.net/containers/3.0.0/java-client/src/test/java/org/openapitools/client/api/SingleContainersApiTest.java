/*
 * IBM Containers API
 * Containers are virtual software objects that include all the elements that an app needs to run. A container has the benefits of resource isolation and allocation but is more portable and efficient than, for example, a virtual machine.   This documentation describes the IBM Containers API, which is based on the Docker Remote API. The API provides endpoints that you can use to create and manage your single containers and container groups in Bluemix. Endpoints are summarized under the following tags:   - **Authentication**: Retrieve and refresh your TLS certificates.  - **Private Docker images registry**: Create your own private Docker images registry in Bluemix by setting a namespace for your organization.  - **Images**: View, build, and push your images to your private Bluemix registry so you can use them with IBM Containers. You can also scan your container images with the Vulnerability Advisor against standard policies set by the organization manager and a database of known Ubuntu issues.  - **Single Containers**: Create and manage single containers in Bluemix. Use a single container to implement short-lived processes or to run simple tests as you develop an app or service. To make your single container available from the internet, review the `Public IP addresses` endpoints.  - **Container Groups**: Create and manage your container groups in Bluemix. A container group consists of multiple single containers that are all created from the same container image and as a consequence are configured in the same way. Container groups offer further options at no cost to make your app highly available. These options include in-built load balancing, auto-recovery of unhealthy container instances, and auto-scaling of container instances based on CPU and memory usage. Map a public route to your container group to make your app accessible from the internet.   - **Public IP addresses**: Use these endpoints to request public IP addresses for your space. You can bind this IP address to your container to make your container accessible from the internet.  - **File shares**: Create, list and delete file shares in a space. A file share is a NFS storage system that hosts Docker volumes.   - **Volumes**: Create and manage container volumes in your space to persist the data of your containers.      Each API request requires an HTTP header that includes the 'X-Auth-Token’ and 'X-Auth-Project-Id’ parameter.   - **X-Auth-Token**: The JSON web token (JWT) that you receive when logging into the Bluemix platform. It allows you to use the IBM Containers REST API, access services, and resources. Run `cf oauth-token` to retrieve your access token information. - **X-Auth-Project-Id**: The unique ID of your organization space where you want to create or work with your containers. Run `cf space <space_name> --guid`, where `<space_name>` is the name of your space, to retrieve your space ID.    For further information about how containers work in the IBM Containers service, review the documentation under https://new-console.ng.bluemix.net/docs/containers/container_index.html. 
 *
 * The version of the OpenAPI document: 3.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.Container;
import org.openapitools.client.model.ContainerId;
import org.openapitools.client.model.ContainerInfo;
import org.openapitools.client.model.CreateContainer;
import org.openapitools.client.model.GetContainerStatus;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for SingleContainersApi
 */
@Disabled
public class SingleContainersApiTest {

    private final SingleContainersApi api = new SingleContainersApi();

    /**
     * Create and start a single container
     *
     * This endpoint creates and starts a single container in your space based on the Docker image that is specified in the Image field of the request json. A single container in IBM Containers is similar to a container that you create in your local Docker environment. Single containers are a good way to start with IBM Containers and to learn about how containers work in the IBM Cloud and the features that IBM Containers provides. They are also recommended when you want to run simple app tests or during the development process of an app.    In the Docker API there are two separate APIs to create and start a container. However in IBM Containers a container is created and started in a single API call. Therefore, this API merges parameters from the Docker API to create and start container.    To create a container with IBM Containers, you must at least define the image that the container is based on.  - Image: You must include the full path to the image in your private Bluemix registry in the format: &#x60;registry.ng.bluemix.net/&lt;namespace&gt;/&lt;image&gt;&#x60;.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void containersCreatePostTest() throws ApiException {
        String xAuthToken = null;
        String xAuthProjectId = null;
        CreateContainer createContainer = null;
        String name = null;
        ContainerId response = api.containersCreatePost(xAuthToken, xAuthProjectId, createContainer, name);
        // TODO: test validations
    }

    /**
     * List the current state of a container.
     *
     * This endpoint returns the current state of a container. This state can either be a transient state, such as BUILDING and NETWORKING, or a non-transient state, such as RUNNING, SHUTDOWN, CRASHED, or SUSPENDED.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void containersIdStatusGetTest() throws ApiException {
        String xAuthToken = null;
        String xAuthProjectId = null;
        String id = null;
        GetContainerStatus response = api.containersIdStatusGet(xAuthToken, xAuthProjectId, id);
        // TODO: test validations
    }

    /**
     * List single containers in a space.
     *
     * This endpoint returns a list of all single containers in a space that are currently in a running state (corresponding IBM Containers command: &#x60;cf ic ps&#x60;). To list all single containers independent of their current state, set the &#x60;all&#x60; query parameter to true.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void containersJsonGetTest() throws ApiException {
        String xAuthToken = null;
        String xAuthProjectId = null;
        String all = null;
        String filters = null;
        List<Container> response = api.containersJsonGet(xAuthToken, xAuthProjectId, all, filters);
        // TODO: test validations
    }

    /**
     * Remove a single container
     *
     * Remove a single container that is identified by container ID or name from a space (corresponding IBM Containers command: &#x60;cf ic delete &lt;container&gt;&#x60;). The container must be stopped before it can be deleted, unless the &#x60;force&#x60; query parameter is set to true.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void containersNameOrIdDeleteTest() throws ApiException {
        String xAuthToken = null;
        String xAuthProjectId = null;
        String nameOrId = null;
        Boolean force = null;
        api.containersNameOrIdDelete(xAuthToken, xAuthProjectId, nameOrId, force);
        // TODO: test validations
    }

    /**
     * Inspect a single container
     *
     * This endpoint retrieves detailed information about a single container (corresponding IBM Containers command: &#x60;cf ic inspect &lt;container&gt;&#x60;).
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void containersNameOrIdJsonGetTest() throws ApiException {
        String xAuthToken = null;
        String xAuthProjectId = null;
        String nameOrId = null;
        ContainerInfo response = api.containersNameOrIdJsonGet(xAuthToken, xAuthProjectId, nameOrId);
        // TODO: test validations
    }

    /**
     * Pause a single container
     *
     * Pause all processes in a running single container with a given container ID or name (corresponding IBM Containers command: &#x60;cf ic pause &lt;container&gt;&#x60;).
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void containersNameOrIdPausePostTest() throws ApiException {
        String xAuthToken = null;
        String xAuthProjectId = null;
        String nameOrId = null;
        api.containersNameOrIdPausePost(xAuthToken, xAuthProjectId, nameOrId);
        // TODO: test validations
    }

    /**
     * Rename a single container
     *
     * Change the current name of an existing single container that is identified by the container ID or name (corresponding IBM Containers command: &#x60;cf ic rename &lt;old_name&gt; &lt;new_name&gt;&#x60;). 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void containersNameOrIdRenamePostTest() throws ApiException {
        String xAuthToken = null;
        String xAuthProjectId = null;
        String nameOrId = null;
        String name = null;
        api.containersNameOrIdRenamePost(xAuthToken, xAuthProjectId, nameOrId, name);
        // TODO: test validations
    }

    /**
     * Restart a single container
     *
     * Restart a container with a given container ID or name (corresponding IBM Containers command: &#x60;cf ic restart &lt;container&gt;&#x60;).
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void containersNameOrIdRestartPostTest() throws ApiException {
        String xAuthToken = null;
        String xAuthProjectId = null;
        String nameOrId = null;
        Integer t = null;
        api.containersNameOrIdRestartPost(xAuthToken, xAuthProjectId, nameOrId, t);
        // TODO: test validations
    }

    /**
     * Start a single container
     *
     * Start a single container with a given container name or ID (corresponding IBM Containers command: &#x60;cf ic start &lt;container&gt;&#x60;).
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void containersNameOrIdStartPostTest() throws ApiException {
        String xAuthToken = null;
        String xAuthProjectId = null;
        String nameOrId = null;
        api.containersNameOrIdStartPost(xAuthToken, xAuthProjectId, nameOrId);
        // TODO: test validations
    }

    /**
     * Stop a single container
     *
     * Stop a single container with a given container name or ID (corresponding IBM Containers command: &#x60;cf ic stop &lt;container&gt;&#x60;).
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void containersNameOrIdStopPostTest() throws ApiException {
        String xAuthToken = null;
        String xAuthProjectId = null;
        String nameOrId = null;
        Integer t = null;
        api.containersNameOrIdStopPost(xAuthToken, xAuthProjectId, nameOrId, t);
        // TODO: test validations
    }

    /**
     * Unpause a single container
     *
     * Unpause all processes that are currently stopped inside a single containers with a given container ID or name (corresponding IBM Containers command: &#x60;cf ic unpause &lt;container&gt;&#x60;).
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void containersNameOrIdUnpausePostTest() throws ApiException {
        String xAuthToken = null;
        String xAuthProjectId = null;
        String nameOrId = null;
        api.containersNameOrIdUnpausePost(xAuthToken, xAuthProjectId, nameOrId);
        // TODO: test validations
    }

}
