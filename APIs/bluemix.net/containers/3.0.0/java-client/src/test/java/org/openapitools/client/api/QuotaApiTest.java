/*
 * IBM Containers API
 * Containers are virtual software objects that include all the elements that an app needs to run. A container has the benefits of resource isolation and allocation but is more portable and efficient than, for example, a virtual machine.   This documentation describes the IBM Containers API, which is based on the Docker Remote API. The API provides endpoints that you can use to create and manage your single containers and container groups in Bluemix. Endpoints are summarized under the following tags:   - **Authentication**: Retrieve and refresh your TLS certificates.  - **Private Docker images registry**: Create your own private Docker images registry in Bluemix by setting a namespace for your organization.  - **Images**: View, build, and push your images to your private Bluemix registry so you can use them with IBM Containers. You can also scan your container images with the Vulnerability Advisor against standard policies set by the organization manager and a database of known Ubuntu issues.  - **Single Containers**: Create and manage single containers in Bluemix. Use a single container to implement short-lived processes or to run simple tests as you develop an app or service. To make your single container available from the internet, review the `Public IP addresses` endpoints.  - **Container Groups**: Create and manage your container groups in Bluemix. A container group consists of multiple single containers that are all created from the same container image and as a consequence are configured in the same way. Container groups offer further options at no cost to make your app highly available. These options include in-built load balancing, auto-recovery of unhealthy container instances, and auto-scaling of container instances based on CPU and memory usage. Map a public route to your container group to make your app accessible from the internet.   - **Public IP addresses**: Use these endpoints to request public IP addresses for your space. You can bind this IP address to your container to make your container accessible from the internet.  - **File shares**: Create, list and delete file shares in a space. A file share is a NFS storage system that hosts Docker volumes.   - **Volumes**: Create and manage container volumes in your space to persist the data of your containers.      Each API request requires an HTTP header that includes the 'X-Auth-Token’ and 'X-Auth-Project-Id’ parameter.   - **X-Auth-Token**: The JSON web token (JWT) that you receive when logging into the Bluemix platform. It allows you to use the IBM Containers REST API, access services, and resources. Run `cf oauth-token` to retrieve your access token information. - **X-Auth-Project-Id**: The unique ID of your organization space where you want to create or work with your containers. Run `cf space <space_name> --guid`, where `<space_name>` is the name of your space, to retrieve your space ID.    For further information about how containers work in the IBM Containers service, review the documentation under https://new-console.ng.bluemix.net/docs/containers/container_index.html. 
 *
 * The version of the OpenAPI document: 3.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.ContainersQuotaInfo;
import org.openapitools.client.model.ContainersQuotaList;
import org.openapitools.client.model.ContainersUsageInfo;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for QuotaApi
 */
@Disabled
public class QuotaApiTest {

    private final QuotaApi api = new QuotaApi();

    /**
     * Retrieve organization and space specific quota
     *
     * Retrieve the quota that is assigned to the organization and space.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void containersQuotaGetTest() throws ApiException {
        String xAuthToken = null;
        String xAuthProjectId = null;
        ContainersQuotaInfo response = api.containersQuotaGet(xAuthToken, xAuthProjectId);
        // TODO: test validations
    }

    /**
     * Update space quota
     *
     * This endpoint updates the quota that is allocated to a Bluemix space.    **Note**: Only paid accounts are eligbile to update the space quota. If you are using a free-trial account, upgrade to a paid account first.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void containersQuotaPutTest() throws ApiException {
        String xAuthToken = null;
        String xAuthProjectId = null;
        ContainersQuotaList containersQuotaList = null;
        api.containersQuotaPut(xAuthToken, xAuthProjectId, containersQuotaList);
        // TODO: test validations
    }

    /**
     * List container sizes and quota limits
     *
     * This endpoint returns a list of available container sizes and the quota limit and usage for the space.   - Container sizes: A list of available container sizes indicating the amount of container memory, disk space and virtual CPUs that can be assigned to the container. - Quota limit: Lists the number of containers, public IP addresses, available container memory, and virtual CPUS that are allocated to a space.  - Quota usage: Lists the current number of containers, images, and public IP addresses in a space that is counted towards your quota limit. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void containersUsageGetTest() throws ApiException {
        String xAuthToken = null;
        String xAuthProjectId = null;
        ContainersUsageInfo response = api.containersUsageGet(xAuthToken, xAuthProjectId);
        // TODO: test validations
    }

}
