/*
 * IBM Containers API
 * Containers are virtual software objects that include all the elements that an app needs to run. A container has the benefits of resource isolation and allocation but is more portable and efficient than, for example, a virtual machine.   This documentation describes the IBM Containers API, which is based on the Docker Remote API. The API provides endpoints that you can use to create and manage your single containers and container groups in Bluemix. Endpoints are summarized under the following tags:   - **Authentication**: Retrieve and refresh your TLS certificates.  - **Private Docker images registry**: Create your own private Docker images registry in Bluemix by setting a namespace for your organization.  - **Images**: View, build, and push your images to your private Bluemix registry so you can use them with IBM Containers. You can also scan your container images with the Vulnerability Advisor against standard policies set by the organization manager and a database of known Ubuntu issues.  - **Single Containers**: Create and manage single containers in Bluemix. Use a single container to implement short-lived processes or to run simple tests as you develop an app or service. To make your single container available from the internet, review the `Public IP addresses` endpoints.  - **Container Groups**: Create and manage your container groups in Bluemix. A container group consists of multiple single containers that are all created from the same container image and as a consequence are configured in the same way. Container groups offer further options at no cost to make your app highly available. These options include in-built load balancing, auto-recovery of unhealthy container instances, and auto-scaling of container instances based on CPU and memory usage. Map a public route to your container group to make your app accessible from the internet.   - **Public IP addresses**: Use these endpoints to request public IP addresses for your space. You can bind this IP address to your container to make your container accessible from the internet.  - **File shares**: Create, list and delete file shares in a space. A file share is a NFS storage system that hosts Docker volumes.   - **Volumes**: Create and manage container volumes in your space to persist the data of your containers.      Each API request requires an HTTP header that includes the 'X-Auth-Token’ and 'X-Auth-Project-Id’ parameter.   - **X-Auth-Token**: The JSON web token (JWT) that you receive when logging into the Bluemix platform. It allows you to use the IBM Containers REST API, access services, and resources. Run `cf oauth-token` to retrieve your access token information. - **X-Auth-Project-Id**: The unique ID of your organization space where you want to create or work with your containers. Run `cf space <space_name> --guid`, where `<space_name>` is the name of your space, to retrieve your space ID.    For further information about how containers work in the IBM Containers service, review the documentation under https://new-console.ng.bluemix.net/docs/containers/container_index.html. 
 *
 * The version of the OpenAPI document: 3.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.ContainersGroupsGetListItem;
import org.openapitools.client.model.ContainersGroupsNameOrIdGetDetails;
import org.openapitools.client.model.ContainersGroupsNameOrIdMaproutePostInfo;
import org.openapitools.client.model.ContainersGroupsNameOrIdPatchUpdatedInfo;
import org.openapitools.client.model.ContainersGroupsPostCreatedInfo;
import org.openapitools.client.model.ContainersGroupsPostRequiredAttributes;
import org.openapitools.client.model.Route;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for ContainerGroupsApi
 */
@Disabled
public class ContainerGroupsApiTest {

    private final ContainerGroupsApi api = new ContainerGroupsApi();

    /**
     * List all container groups in a space
     *
     * This endpoint returns a list of all container groups in a space independent of their current state. (corresponding IBM Containers command: &#x60;cf ic group list&#x60;).
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void containersGroupsGetTest() throws ApiException {
        String xAuthToken = null;
        String xAuthProjectId = null;
        List<ContainersGroupsGetListItem> response = api.containersGroupsGet(xAuthToken, xAuthProjectId);
        // TODO: test validations
    }

    /**
     * Stop and delete all container instances in a container group.
     *
     * Stops and deletes the container instances that run in a container group (corresponding IBM Containers command: &#x60;cf ic group rm &lt;group_name&gt;&#x60;). When you delete a container group, all floating private IP addresses are released.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void containersGroupsNameOrIdDeleteTest() throws ApiException {
        String xAuthToken = null;
        String xAuthProjectId = null;
        String nameOrId = null;
        String force = null;
        api.containersGroupsNameOrIdDelete(xAuthToken, xAuthProjectId, nameOrId, force);
        // TODO: test validations
    }

    /**
     * Inspect a container group.
     *
     * This endpoint retrieves detailed information about a container group with a given name (corresponding IBM Containers command: &#x60;cf ic group inspect GROUP&#x60;).
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void containersGroupsNameOrIdGetTest() throws ApiException {
        String xAuthToken = null;
        String xAuthProjectId = null;
        String nameOrId = null;
        ContainersGroupsNameOrIdGetDetails response = api.containersGroupsNameOrIdGet(xAuthToken, xAuthProjectId, nameOrId);
        // TODO: test validations
    }

    /**
     * Map a public route to a container group.
     *
     * If you want your container group to be accessible from the Internet, you need to expose a public port and map a public route to it (corresponding IBM Containers command: &#x60;cf ic route map -n &lt;host&gt; -d &lt;domain&gt; &lt;group&gt;&#x60;). Every route consists of the host name and domain.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void containersGroupsNameOrIdMaproutePostTest() throws ApiException {
        String xAuthToken = null;
        String xAuthProjectId = null;
        String nameOrId = null;
        Route route = null;
        ContainersGroupsNameOrIdMaproutePostInfo response = api.containersGroupsNameOrIdMaproutePost(xAuthToken, xAuthProjectId, nameOrId, route);
        // TODO: test validations
    }

    /**
     * Update a container group.
     *
     * Update the number of container instances that run in a container group (corresponding IBM Containers command: &#x60;cf ic group update &lt;option&gt; &lt;group&gt;&#x60;).   Note: You can run only one update at a time.     The desired number is the number of container instances that you require. It must be within the current limits of Max and Min. To increase the number of desired container instances above the Max value, you must first execute an update on the Max value. Once this update is completed, you can increase the desired number of container instances. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void containersGroupsNameOrIdPatchTest() throws ApiException {
        String xAuthToken = null;
        String xAuthProjectId = null;
        String nameOrId = null;
        ContainersGroupsNameOrIdPatchUpdatedInfo containersGroupsNameOrIdPatchUpdatedInfo = null;
        api.containersGroupsNameOrIdPatch(xAuthToken, xAuthProjectId, nameOrId, containersGroupsNameOrIdPatchUpdatedInfo);
        // TODO: test validations
    }

    /**
     * Unmap a public route from a container group
     *
     * This endpoint unmaps a public route from a container group (corresponding IBM Containers command: &#x60;cf ic route unmap -n &lt;host&gt; -d &lt;domain&gt; &lt;group&gt;&#x60;). If no other public route is mapped to the container group, then the container group is no longer available from the internet.    When you unmap a route from a container group, the route is not deleted and can be mapped to other container groups. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void containersGroupsNameOrIdUnmaproutePostTest() throws ApiException {
        String xAuthToken = null;
        String xAuthProjectId = null;
        String nameOrId = null;
        Route route = null;
        ContainersGroupsNameOrIdMaproutePostInfo response = api.containersGroupsNameOrIdUnmaproutePost(xAuthToken, xAuthProjectId, nameOrId, route);
        // TODO: test validations
    }

    /**
     * Create and start a container group.
     *
     * This endpoint creates and starts a new container group in your space. A container group consists of two or more single containers that are all created from the same container image and as a consequence are configured in the same way. Container groups offer different options at no cost to make your app highly available, such as in-built load balancing, auto-recovery of unhealthy container instances, and auto-scaling of container instances based on CPU and memory usage.  To create a container group with IBM Containers, you must at least define a container group name and the image that the container group is based on. Required attributes:                 - Name: The container group name must start with a letter and then can include uppercase letters, lowercase letters, numbers, periods (.), underscores (_), or hyphens (-).  - Image: You must include the full path to the image in your private Bluemix registry in the format:&#x60;registry.ng.bluemix.net/&lt;namespace&gt;/&lt;image&gt;&#x60;.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void containersGroupsPostTest() throws ApiException {
        String xAuthToken = null;
        String xAuthProjectId = null;
        ContainersGroupsPostRequiredAttributes containersGroupsPostRequiredAttributes = null;
        ContainersGroupsPostCreatedInfo response = api.containersGroupsPost(xAuthToken, xAuthProjectId, containersGroupsPostRequiredAttributes);
        // TODO: test validations
    }

}
