/*
 * IBM Containers API
 * Containers are virtual software objects that include all the elements that an app needs to run. A container has the benefits of resource isolation and allocation but is more portable and efficient than, for example, a virtual machine.   This documentation describes the IBM Containers API, which is based on the Docker Remote API. The API provides endpoints that you can use to create and manage your single containers and container groups in Bluemix. Endpoints are summarized under the following tags:   - **Authentication**: Retrieve and refresh your TLS certificates.  - **Private Docker images registry**: Create your own private Docker images registry in Bluemix by setting a namespace for your organization.  - **Images**: View, build, and push your images to your private Bluemix registry so you can use them with IBM Containers. You can also scan your container images with the Vulnerability Advisor against standard policies set by the organization manager and a database of known Ubuntu issues.  - **Single Containers**: Create and manage single containers in Bluemix. Use a single container to implement short-lived processes or to run simple tests as you develop an app or service. To make your single container available from the internet, review the `Public IP addresses` endpoints.  - **Container Groups**: Create and manage your container groups in Bluemix. A container group consists of multiple single containers that are all created from the same container image and as a consequence are configured in the same way. Container groups offer further options at no cost to make your app highly available. These options include in-built load balancing, auto-recovery of unhealthy container instances, and auto-scaling of container instances based on CPU and memory usage. Map a public route to your container group to make your app accessible from the internet.   - **Public IP addresses**: Use these endpoints to request public IP addresses for your space. You can bind this IP address to your container to make your container accessible from the internet.  - **File shares**: Create, list and delete file shares in a space. A file share is a NFS storage system that hosts Docker volumes.   - **Volumes**: Create and manage container volumes in your space to persist the data of your containers.      Each API request requires an HTTP header that includes the 'X-Auth-Token’ and 'X-Auth-Project-Id’ parameter.   - **X-Auth-Token**: The JSON web token (JWT) that you receive when logging into the Bluemix platform. It allows you to use the IBM Containers REST API, access services, and resources. Run `cf oauth-token` to retrieve your access token information. - **X-Auth-Project-Id**: The unique ID of your organization space where you want to create or work with your containers. Run `cf space <space_name> --guid`, where `<space_name>` is the name of your space, to retrieve your space ID.    For further information about how containers work in the IBM Containers service, review the documentation under https://new-console.ng.bluemix.net/docs/containers/container_index.html. 
 *
 * The version of the OpenAPI document: 3.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.ContainersGroupsNameOrIdGetDetailsNumberInstances;
import org.openapitools.client.model.ContainersGroupsNameOrIdGetDetailsRouteStatus;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * ContainersGroupsNameOrIdGetDetails
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:31:48.582155-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ContainersGroupsNameOrIdGetDetails {
  public static final String SERIALIZED_NAME_ANTI_AFFINITY = "Anti-affinity";
  @SerializedName(SERIALIZED_NAME_ANTI_AFFINITY)
  private String antiAffinity;

  public static final String SERIALIZED_NAME_AUTORECOVERY = "Autorecovery";
  @SerializedName(SERIALIZED_NAME_AUTORECOVERY)
  private String autorecovery;

  public static final String SERIALIZED_NAME_AVAILABILITY_ZONE = "AvailabilityZone";
  @SerializedName(SERIALIZED_NAME_AVAILABILITY_ZONE)
  private String availabilityZone;

  public static final String SERIALIZED_NAME_CMD = "Cmd";
  @SerializedName(SERIALIZED_NAME_CMD)
  private List<String> cmd = new ArrayList<>();

  public static final String SERIALIZED_NAME_CREATION_TIME = "Creation_time";
  @SerializedName(SERIALIZED_NAME_CREATION_TIME)
  private String creationTime;

  public static final String SERIALIZED_NAME_ENV = "Env";
  @SerializedName(SERIALIZED_NAME_ENV)
  private List<String> env = new ArrayList<>();

  public static final String SERIALIZED_NAME_ID = "Id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_IMAGE = "Image";
  @SerializedName(SERIALIZED_NAME_IMAGE)
  private String image;

  public static final String SERIALIZED_NAME_IMAGE_NAME = "ImageName";
  @SerializedName(SERIALIZED_NAME_IMAGE_NAME)
  private String imageName;

  public static final String SERIALIZED_NAME_MEMORY = "Memory";
  @SerializedName(SERIALIZED_NAME_MEMORY)
  private Integer memory;

  public static final String SERIALIZED_NAME_NAME = "Name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_NUMBER_INSTANCES = "NumberInstances";
  @SerializedName(SERIALIZED_NAME_NUMBER_INSTANCES)
  private ContainersGroupsNameOrIdGetDetailsNumberInstances numberInstances;

  public static final String SERIALIZED_NAME_PORT = "Port";
  @SerializedName(SERIALIZED_NAME_PORT)
  private Integer port;

  public static final String SERIALIZED_NAME_ROUTE_STATUS = "Route_Status";
  @SerializedName(SERIALIZED_NAME_ROUTE_STATUS)
  private ContainersGroupsNameOrIdGetDetailsRouteStatus routeStatus;

  public static final String SERIALIZED_NAME_ROUTES = "Routes";
  @SerializedName(SERIALIZED_NAME_ROUTES)
  private List<String> routes = new ArrayList<>();

  public static final String SERIALIZED_NAME_STATUS = "Status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  private String status;

  public static final String SERIALIZED_NAME_UPDATED_TIME = "UpdatedTime";
  @SerializedName(SERIALIZED_NAME_UPDATED_TIME)
  private String updatedTime;

  public static final String SERIALIZED_NAME_VOLUMES = "Volumes";
  @SerializedName(SERIALIZED_NAME_VOLUMES)
  private List<String> volumes = new ArrayList<>();

  public ContainersGroupsNameOrIdGetDetails() {
  }

  public ContainersGroupsNameOrIdGetDetails antiAffinity(String antiAffinity) {
    this.antiAffinity = antiAffinity;
    return this;
  }

  /**
   * If set to &#x60;true&#x60; the container instances in the group are spread across separate physical compute nodes, which reduces the likelihood of containers crashing due to hardware failures. If set to &#x60;false&#x60;, the container instances in the group share the same physical compute node. 
   * @return antiAffinity
   */
  @javax.annotation.Nullable
  public String getAntiAffinity() {
    return antiAffinity;
  }

  public void setAntiAffinity(String antiAffinity) {
    this.antiAffinity = antiAffinity;
  }


  public ContainersGroupsNameOrIdGetDetails autorecovery(String autorecovery) {
    this.autorecovery = autorecovery;
    return this;
  }

  /**
   * Can be either true or false. If set to true, the Autorecovery mode is enabled for your container group. In case a container instance crashes or stops, this instance is removed and a new one is automatically recreated. If set to false, the Autorecovery mode is disabled. In case a container instances crashes or stops, it is not automatically recreated by IBM Containers.
   * @return autorecovery
   */
  @javax.annotation.Nullable
  public String getAutorecovery() {
    return autorecovery;
  }

  public void setAutorecovery(String autorecovery) {
    this.autorecovery = autorecovery;
  }


  public ContainersGroupsNameOrIdGetDetails availabilityZone(String availabilityZone) {
    this.availabilityZone = availabilityZone;
    return this;
  }

  /**
   * Current IBM Containers availability zone on Openstack. 
   * @return availabilityZone
   */
  @javax.annotation.Nullable
  public String getAvailabilityZone() {
    return availabilityZone;
  }

  public void setAvailabilityZone(String availabilityZone) {
    this.availabilityZone = availabilityZone;
  }


  public ContainersGroupsNameOrIdGetDetails cmd(List<String> cmd) {
    this.cmd = cmd;
    return this;
  }

  public ContainersGroupsNameOrIdGetDetails addCmdItem(String cmdItem) {
    if (this.cmd == null) {
      this.cmd = new ArrayList<>();
    }
    this.cmd.add(cmdItem);
    return this;
  }

  /**
   * The Docker command that was specified to be run when the container instances are started. 
   * @return cmd
   */
  @javax.annotation.Nullable
  public List<String> getCmd() {
    return cmd;
  }

  public void setCmd(List<String> cmd) {
    this.cmd = cmd;
  }


  public ContainersGroupsNameOrIdGetDetails creationTime(String creationTime) {
    this.creationTime = creationTime;
    return this;
  }

  /**
   * Timestamp when the container group was created.
   * @return creationTime
   */
  @javax.annotation.Nullable
  public String getCreationTime() {
    return creationTime;
  }

  public void setCreationTime(String creationTime) {
    this.creationTime = creationTime;
  }


  public ContainersGroupsNameOrIdGetDetails env(List<String> env) {
    this.env = env;
    return this;
  }

  public ContainersGroupsNameOrIdGetDetails addEnvItem(String envItem) {
    if (this.env == null) {
      this.env = new ArrayList<>();
    }
    this.env.add(envItem);
    return this;
  }

  /**
   * The list of environmental variables that were defined for the container group. Each environment variable consists of a unique key and a value.
   * @return env
   */
  @javax.annotation.Nullable
  public List<String> getEnv() {
    return env;
  }

  public void setEnv(List<String> env) {
    this.env = env;
  }


  public ContainersGroupsNameOrIdGetDetails id(String id) {
    this.id = id;
    return this;
  }

  /**
   * Unique identifier representing a specific container group.
   * @return id
   */
  @javax.annotation.Nullable
  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }


  public ContainersGroupsNameOrIdGetDetails image(String image) {
    this.image = image;
    return this;
  }

  /**
   * The unique ID of the container image your container group instances are based on.
   * @return image
   */
  @javax.annotation.Nullable
  public String getImage() {
    return image;
  }

  public void setImage(String image) {
    this.image = image;
  }


  public ContainersGroupsNameOrIdGetDetails imageName(String imageName) {
    this.imageName = imageName;
    return this;
  }

  /**
   * The full path to the container image in your private Bluemix repository.
   * @return imageName
   */
  @javax.annotation.Nullable
  public String getImageName() {
    return imageName;
  }

  public void setImageName(String imageName) {
    this.imageName = imageName;
  }


  public ContainersGroupsNameOrIdGetDetails memory(Integer memory) {
    this.memory = memory;
    return this;
  }

  /**
   * The size of each container instance that runs in the container group in MegaByte.
   * @return memory
   */
  @javax.annotation.Nullable
  public Integer getMemory() {
    return memory;
  }

  public void setMemory(Integer memory) {
    this.memory = memory;
  }


  public ContainersGroupsNameOrIdGetDetails name(String name) {
    this.name = name;
    return this;
  }

  /**
   * The name of the container group.
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public ContainersGroupsNameOrIdGetDetails numberInstances(ContainersGroupsNameOrIdGetDetailsNumberInstances numberInstances) {
    this.numberInstances = numberInstances;
    return this;
  }

  /**
   * Get numberInstances
   * @return numberInstances
   */
  @javax.annotation.Nullable
  public ContainersGroupsNameOrIdGetDetailsNumberInstances getNumberInstances() {
    return numberInstances;
  }

  public void setNumberInstances(ContainersGroupsNameOrIdGetDetailsNumberInstances numberInstances) {
    this.numberInstances = numberInstances;
  }


  public ContainersGroupsNameOrIdGetDetails port(Integer port) {
    this.port = port;
    return this;
  }

  /**
   * The public port that has been exposed. If you specified a route, your container group is accessible from the Internet. 
   * @return port
   */
  @javax.annotation.Nullable
  public Integer getPort() {
    return port;
  }

  public void setPort(Integer port) {
    this.port = port;
  }


  public ContainersGroupsNameOrIdGetDetails routeStatus(ContainersGroupsNameOrIdGetDetailsRouteStatus routeStatus) {
    this.routeStatus = routeStatus;
    return this;
  }

  /**
   * Get routeStatus
   * @return routeStatus
   */
  @javax.annotation.Nullable
  public ContainersGroupsNameOrIdGetDetailsRouteStatus getRouteStatus() {
    return routeStatus;
  }

  public void setRouteStatus(ContainersGroupsNameOrIdGetDetailsRouteStatus routeStatus) {
    this.routeStatus = routeStatus;
  }


  public ContainersGroupsNameOrIdGetDetails routes(List<String> routes) {
    this.routes = routes;
    return this;
  }

  public ContainersGroupsNameOrIdGetDetails addRoutesItem(String routesItem) {
    if (this.routes == null) {
      this.routes = new ArrayList<>();
    }
    this.routes.add(routesItem);
    return this;
  }

  /**
   * The public route that is mapped to the container group. When you expose a public port, you can use the route to access your container group from the Internet.
   * @return routes
   */
  @javax.annotation.Nullable
  public List<String> getRoutes() {
    return routes;
  }

  public void setRoutes(List<String> routes) {
    this.routes = routes;
  }


  public ContainersGroupsNameOrIdGetDetails status(String status) {
    this.status = status;
    return this;
  }

  /**
   * The current status of the container group. The container group status is a composite of ACTION and STATUS:&lt;br&gt;&lt;br&gt; ACTIONS &#x3D; (CREATE, DELETE, UPDATE, ROLLBACK, SUSPEND, RESUME, ADOPT, SNAPSHOT, CHECK, RESTORE)&lt;br&gt;&lt;br&gt; STATUSES &#x3D; (IN_PROGRESS, FAILED, COMPLETE)
   * @return status
   */
  @javax.annotation.Nullable
  public String getStatus() {
    return status;
  }

  public void setStatus(String status) {
    this.status = status;
  }


  public ContainersGroupsNameOrIdGetDetails updatedTime(String updatedTime) {
    this.updatedTime = updatedTime;
    return this;
  }

  /**
   * Timestamp when the container group was updated. If the container group was not updated before, &#x60;null&#x60; is returned.
   * @return updatedTime
   */
  @javax.annotation.Nullable
  public String getUpdatedTime() {
    return updatedTime;
  }

  public void setUpdatedTime(String updatedTime) {
    this.updatedTime = updatedTime;
  }


  public ContainersGroupsNameOrIdGetDetails volumes(List<String> volumes) {
    this.volumes = volumes;
    return this;
  }

  public ContainersGroupsNameOrIdGetDetails addVolumesItem(String volumesItem) {
    if (this.volumes == null) {
      this.volumes = new ArrayList<>();
    }
    this.volumes.add(volumesItem);
    return this;
  }

  /**
   * List of volumes to be associated with the container, in the format of volume name:path:mode where mode can be ro or rw.
   * @return volumes
   */
  @javax.annotation.Nullable
  public List<String> getVolumes() {
    return volumes;
  }

  public void setVolumes(List<String> volumes) {
    this.volumes = volumes;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ContainersGroupsNameOrIdGetDetails containersGroupsNameOrIdGetDetails = (ContainersGroupsNameOrIdGetDetails) o;
    return Objects.equals(this.antiAffinity, containersGroupsNameOrIdGetDetails.antiAffinity) &&
        Objects.equals(this.autorecovery, containersGroupsNameOrIdGetDetails.autorecovery) &&
        Objects.equals(this.availabilityZone, containersGroupsNameOrIdGetDetails.availabilityZone) &&
        Objects.equals(this.cmd, containersGroupsNameOrIdGetDetails.cmd) &&
        Objects.equals(this.creationTime, containersGroupsNameOrIdGetDetails.creationTime) &&
        Objects.equals(this.env, containersGroupsNameOrIdGetDetails.env) &&
        Objects.equals(this.id, containersGroupsNameOrIdGetDetails.id) &&
        Objects.equals(this.image, containersGroupsNameOrIdGetDetails.image) &&
        Objects.equals(this.imageName, containersGroupsNameOrIdGetDetails.imageName) &&
        Objects.equals(this.memory, containersGroupsNameOrIdGetDetails.memory) &&
        Objects.equals(this.name, containersGroupsNameOrIdGetDetails.name) &&
        Objects.equals(this.numberInstances, containersGroupsNameOrIdGetDetails.numberInstances) &&
        Objects.equals(this.port, containersGroupsNameOrIdGetDetails.port) &&
        Objects.equals(this.routeStatus, containersGroupsNameOrIdGetDetails.routeStatus) &&
        Objects.equals(this.routes, containersGroupsNameOrIdGetDetails.routes) &&
        Objects.equals(this.status, containersGroupsNameOrIdGetDetails.status) &&
        Objects.equals(this.updatedTime, containersGroupsNameOrIdGetDetails.updatedTime) &&
        Objects.equals(this.volumes, containersGroupsNameOrIdGetDetails.volumes);
  }

  @Override
  public int hashCode() {
    return Objects.hash(antiAffinity, autorecovery, availabilityZone, cmd, creationTime, env, id, image, imageName, memory, name, numberInstances, port, routeStatus, routes, status, updatedTime, volumes);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ContainersGroupsNameOrIdGetDetails {\n");
    sb.append("    antiAffinity: ").append(toIndentedString(antiAffinity)).append("\n");
    sb.append("    autorecovery: ").append(toIndentedString(autorecovery)).append("\n");
    sb.append("    availabilityZone: ").append(toIndentedString(availabilityZone)).append("\n");
    sb.append("    cmd: ").append(toIndentedString(cmd)).append("\n");
    sb.append("    creationTime: ").append(toIndentedString(creationTime)).append("\n");
    sb.append("    env: ").append(toIndentedString(env)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    image: ").append(toIndentedString(image)).append("\n");
    sb.append("    imageName: ").append(toIndentedString(imageName)).append("\n");
    sb.append("    memory: ").append(toIndentedString(memory)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    numberInstances: ").append(toIndentedString(numberInstances)).append("\n");
    sb.append("    port: ").append(toIndentedString(port)).append("\n");
    sb.append("    routeStatus: ").append(toIndentedString(routeStatus)).append("\n");
    sb.append("    routes: ").append(toIndentedString(routes)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    updatedTime: ").append(toIndentedString(updatedTime)).append("\n");
    sb.append("    volumes: ").append(toIndentedString(volumes)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("Anti-affinity");
    openapiFields.add("Autorecovery");
    openapiFields.add("AvailabilityZone");
    openapiFields.add("Cmd");
    openapiFields.add("Creation_time");
    openapiFields.add("Env");
    openapiFields.add("Id");
    openapiFields.add("Image");
    openapiFields.add("ImageName");
    openapiFields.add("Memory");
    openapiFields.add("Name");
    openapiFields.add("NumberInstances");
    openapiFields.add("Port");
    openapiFields.add("Route_Status");
    openapiFields.add("Routes");
    openapiFields.add("Status");
    openapiFields.add("UpdatedTime");
    openapiFields.add("Volumes");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ContainersGroupsNameOrIdGetDetails
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ContainersGroupsNameOrIdGetDetails.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ContainersGroupsNameOrIdGetDetails is not found in the empty JSON string", ContainersGroupsNameOrIdGetDetails.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ContainersGroupsNameOrIdGetDetails.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ContainersGroupsNameOrIdGetDetails` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("Anti-affinity") != null && !jsonObj.get("Anti-affinity").isJsonNull()) && !jsonObj.get("Anti-affinity").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Anti-affinity` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Anti-affinity").toString()));
      }
      if ((jsonObj.get("Autorecovery") != null && !jsonObj.get("Autorecovery").isJsonNull()) && !jsonObj.get("Autorecovery").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Autorecovery` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Autorecovery").toString()));
      }
      if ((jsonObj.get("AvailabilityZone") != null && !jsonObj.get("AvailabilityZone").isJsonNull()) && !jsonObj.get("AvailabilityZone").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `AvailabilityZone` to be a primitive type in the JSON string but got `%s`", jsonObj.get("AvailabilityZone").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("Cmd") != null && !jsonObj.get("Cmd").isJsonNull() && !jsonObj.get("Cmd").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `Cmd` to be an array in the JSON string but got `%s`", jsonObj.get("Cmd").toString()));
      }
      if ((jsonObj.get("Creation_time") != null && !jsonObj.get("Creation_time").isJsonNull()) && !jsonObj.get("Creation_time").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Creation_time` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Creation_time").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("Env") != null && !jsonObj.get("Env").isJsonNull() && !jsonObj.get("Env").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `Env` to be an array in the JSON string but got `%s`", jsonObj.get("Env").toString()));
      }
      if ((jsonObj.get("Id") != null && !jsonObj.get("Id").isJsonNull()) && !jsonObj.get("Id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Id").toString()));
      }
      if ((jsonObj.get("Image") != null && !jsonObj.get("Image").isJsonNull()) && !jsonObj.get("Image").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Image` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Image").toString()));
      }
      if ((jsonObj.get("ImageName") != null && !jsonObj.get("ImageName").isJsonNull()) && !jsonObj.get("ImageName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ImageName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ImageName").toString()));
      }
      if ((jsonObj.get("Name") != null && !jsonObj.get("Name").isJsonNull()) && !jsonObj.get("Name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Name").toString()));
      }
      // validate the optional field `NumberInstances`
      if (jsonObj.get("NumberInstances") != null && !jsonObj.get("NumberInstances").isJsonNull()) {
        ContainersGroupsNameOrIdGetDetailsNumberInstances.validateJsonElement(jsonObj.get("NumberInstances"));
      }
      // validate the optional field `Route_Status`
      if (jsonObj.get("Route_Status") != null && !jsonObj.get("Route_Status").isJsonNull()) {
        ContainersGroupsNameOrIdGetDetailsRouteStatus.validateJsonElement(jsonObj.get("Route_Status"));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("Routes") != null && !jsonObj.get("Routes").isJsonNull() && !jsonObj.get("Routes").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `Routes` to be an array in the JSON string but got `%s`", jsonObj.get("Routes").toString()));
      }
      if ((jsonObj.get("Status") != null && !jsonObj.get("Status").isJsonNull()) && !jsonObj.get("Status").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Status` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Status").toString()));
      }
      if ((jsonObj.get("UpdatedTime") != null && !jsonObj.get("UpdatedTime").isJsonNull()) && !jsonObj.get("UpdatedTime").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `UpdatedTime` to be a primitive type in the JSON string but got `%s`", jsonObj.get("UpdatedTime").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("Volumes") != null && !jsonObj.get("Volumes").isJsonNull() && !jsonObj.get("Volumes").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `Volumes` to be an array in the JSON string but got `%s`", jsonObj.get("Volumes").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ContainersGroupsNameOrIdGetDetails.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ContainersGroupsNameOrIdGetDetails' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ContainersGroupsNameOrIdGetDetails> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ContainersGroupsNameOrIdGetDetails.class));

       return (TypeAdapter<T>) new TypeAdapter<ContainersGroupsNameOrIdGetDetails>() {
           @Override
           public void write(JsonWriter out, ContainersGroupsNameOrIdGetDetails value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ContainersGroupsNameOrIdGetDetails read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ContainersGroupsNameOrIdGetDetails given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ContainersGroupsNameOrIdGetDetails
   * @throws IOException if the JSON string is invalid with respect to ContainersGroupsNameOrIdGetDetails
   */
  public static ContainersGroupsNameOrIdGetDetails fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ContainersGroupsNameOrIdGetDetails.class);
  }

  /**
   * Convert an instance of ContainersGroupsNameOrIdGetDetails to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

