/*
 * IBM Containers API
 * Containers are virtual software objects that include all the elements that an app needs to run. A container has the benefits of resource isolation and allocation but is more portable and efficient than, for example, a virtual machine.   This documentation describes the IBM Containers API, which is based on the Docker Remote API. The API provides endpoints that you can use to create and manage your single containers and container groups in Bluemix. Endpoints are summarized under the following tags:   - **Authentication**: Retrieve and refresh your TLS certificates.  - **Private Docker images registry**: Create your own private Docker images registry in Bluemix by setting a namespace for your organization.  - **Images**: View, build, and push your images to your private Bluemix registry so you can use them with IBM Containers. You can also scan your container images with the Vulnerability Advisor against standard policies set by the organization manager and a database of known Ubuntu issues.  - **Single Containers**: Create and manage single containers in Bluemix. Use a single container to implement short-lived processes or to run simple tests as you develop an app or service. To make your single container available from the internet, review the `Public IP addresses` endpoints.  - **Container Groups**: Create and manage your container groups in Bluemix. A container group consists of multiple single containers that are all created from the same container image and as a consequence are configured in the same way. Container groups offer further options at no cost to make your app highly available. These options include in-built load balancing, auto-recovery of unhealthy container instances, and auto-scaling of container instances based on CPU and memory usage. Map a public route to your container group to make your app accessible from the internet.   - **Public IP addresses**: Use these endpoints to request public IP addresses for your space. You can bind this IP address to your container to make your container accessible from the internet.  - **File shares**: Create, list and delete file shares in a space. A file share is a NFS storage system that hosts Docker volumes.   - **Volumes**: Create and manage container volumes in your space to persist the data of your containers.      Each API request requires an HTTP header that includes the 'X-Auth-Token’ and 'X-Auth-Project-Id’ parameter.   - **X-Auth-Token**: The JSON web token (JWT) that you receive when logging into the Bluemix platform. It allows you to use the IBM Containers REST API, access services, and resources. Run `cf oauth-token` to retrieve your access token information. - **X-Auth-Project-Id**: The unique ID of your organization space where you want to create or work with your containers. Run `cf space <space_name> --guid`, where `<space_name>` is the name of your space, to retrieve your space ID.    For further information about how containers work in the IBM Containers service, review the documentation under https://new-console.ng.bluemix.net/docs/containers/container_index.html. 
 *
 * The version of the OpenAPI document: 3.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import java.io.File;
import org.openapitools.client.model.ImageDetail;
import org.openapitools.client.model.ImageInfo;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class ImagesApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public ImagesApi() {
        this(Configuration.getDefaultApiClient());
    }

    public ImagesApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for buildPost
     * @param xAuthToken The Bluemix JSON web token that you receive when logging into Bluemix. Run &#x60;cf oauth-token&#x60; to retrieve your access token. (required)
     * @param xAuthProjectId The unique ID of your organization space where you want to create or work with your containers. Run &#x60;cf space &lt;space_name&gt; --guid&#x60;, where &#x60;&lt;space_name&gt;&#x60; is the name of your space, to retrieve your space ID. (required)
     * @param t Tag the image with the full path to your private Bluemix registry in the following format: &#x60;t&#x3D;registry.ng.bluemix.net/&lt;namespace&gt;/&lt;image_name&gt;:&lt;tag&gt;&#x60;. This path is used to push the image to the private Bluemix registry after it is built. (required)
     * @param body Must be the content of a tar archive compressed with gzip. The archive must include a file called &#39;Dockerfile&#39; at its root. It may include any number of other files which will be accessible in the build context. (required)
     * @param q You can choose whether or not to show the verbose build output to review every step during the container image build. If you set the query parameter to &#x60;q&#x3D;false&#x60;, &#x60;q&#x3D;False&#x60;, or &#x60;q&#x3D;0&#x60;, the verbose build output is suppressed. To show the verbose build output, enter &#x60;q&#x3D;true&#x60;, &#x60;q&#x3D;True&#x60;, or &#x60;q&#x3D;1&#x60;. (optional)
     * @param nocache If you set the query parameter to &#x60;nocache&#x3D;true&#x60;, &#x60;nocache&#x3D;True&#x60;, or &#x60;nocache&#x3D;1&#x60;, the cache will not be used to build your image. To use the cache, enter &#x60;nocache&#x3D;false&#x60;, &#x60;nocache&#x3D;False&#x60;, or &#x60;nocache&#x3D;0&#x60;. (optional)
     * @param pull If set to pull&#x3D;true, pull&#x3D;True, or pull&#x3D;1, then a newer version of the image is always attempted to be pulled even though an older version of the image exists locally. If set to pull&#x3D;false, pull&#x3D;False, or pull&#x3D;0, then the local image will be used if one exists. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. The container image was built successfully and pushed to your private Bluemix repository. The build output stream is returned in JSON format. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request. Your could not be processed. Be sure to include the &#x60;t&#x60; query parameter to tag your image and that your Dockerfile has been tar archived with gzip. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication failed. The Access Token is invalid, or the Space ID that you entered could not be found. Run &#x60;cf oauth-token&#x60; to retrieve your access token. Run &#x60;cf space &lt;space_name&gt; --guid&#x60;, where &#x60;&lt;space_name&gt;&#x60; is the name of your space, to retrieve your space ID. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error. The IBM Containers service is currently unavailable. Your request could not be processed. Please wait a few minutes and try again. If you still encounter this problem, note the incident ID and contact the IBM Bluemix support. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call buildPostCall(String xAuthToken, String xAuthProjectId, String t, File body, Boolean q, Boolean nocache, Boolean pull, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/build";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (t != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("t", t));
        }

        if (q != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("q", q));
        }

        if (nocache != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("nocache", nocache));
        }

        if (pull != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pull", pull));
        }

        if (xAuthToken != null) {
            localVarHeaderParams.put("X-Auth-Token", localVarApiClient.parameterToString(xAuthToken));
        }

        if (xAuthProjectId != null) {
            localVarHeaderParams.put("X-Auth-Project-Id", localVarApiClient.parameterToString(xAuthProjectId));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/tar"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call buildPostValidateBeforeCall(String xAuthToken, String xAuthProjectId, String t, File body, Boolean q, Boolean nocache, Boolean pull, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xAuthToken' is set
        if (xAuthToken == null) {
            throw new ApiException("Missing the required parameter 'xAuthToken' when calling buildPost(Async)");
        }

        // verify the required parameter 'xAuthProjectId' is set
        if (xAuthProjectId == null) {
            throw new ApiException("Missing the required parameter 'xAuthProjectId' when calling buildPost(Async)");
        }

        // verify the required parameter 't' is set
        if (t == null) {
            throw new ApiException("Missing the required parameter 't' when calling buildPost(Async)");
        }

        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling buildPost(Async)");
        }

        return buildPostCall(xAuthToken, xAuthProjectId, t, body, q, nocache, pull, _callback);

    }

    /**
     * Build a Docker image from a Dockerfile
     * This API builds a new container image from a Dockerfile that is stored on your local machine and pushes the image to the private Bluemix registry (corresponding IBM Containers command: &#x60;cf ic build&#x60;).   To push an image to your Bluemix registry, a namespace must be set for the organization. Run &#x60;cf ic namespace get&#x60; or call the &#x60;GET /registry/namespaces&#x60; API to check if a namespace is already set. If not, run &#x60;cf ic namespace set NAMESPACE&#x60; or call the &#x60;PUT /registry/namespaces/{namespace}&#x60; API to set a namespace for your organization.
     * @param xAuthToken The Bluemix JSON web token that you receive when logging into Bluemix. Run &#x60;cf oauth-token&#x60; to retrieve your access token. (required)
     * @param xAuthProjectId The unique ID of your organization space where you want to create or work with your containers. Run &#x60;cf space &lt;space_name&gt; --guid&#x60;, where &#x60;&lt;space_name&gt;&#x60; is the name of your space, to retrieve your space ID. (required)
     * @param t Tag the image with the full path to your private Bluemix registry in the following format: &#x60;t&#x3D;registry.ng.bluemix.net/&lt;namespace&gt;/&lt;image_name&gt;:&lt;tag&gt;&#x60;. This path is used to push the image to the private Bluemix registry after it is built. (required)
     * @param body Must be the content of a tar archive compressed with gzip. The archive must include a file called &#39;Dockerfile&#39; at its root. It may include any number of other files which will be accessible in the build context. (required)
     * @param q You can choose whether or not to show the verbose build output to review every step during the container image build. If you set the query parameter to &#x60;q&#x3D;false&#x60;, &#x60;q&#x3D;False&#x60;, or &#x60;q&#x3D;0&#x60;, the verbose build output is suppressed. To show the verbose build output, enter &#x60;q&#x3D;true&#x60;, &#x60;q&#x3D;True&#x60;, or &#x60;q&#x3D;1&#x60;. (optional)
     * @param nocache If you set the query parameter to &#x60;nocache&#x3D;true&#x60;, &#x60;nocache&#x3D;True&#x60;, or &#x60;nocache&#x3D;1&#x60;, the cache will not be used to build your image. To use the cache, enter &#x60;nocache&#x3D;false&#x60;, &#x60;nocache&#x3D;False&#x60;, or &#x60;nocache&#x3D;0&#x60;. (optional)
     * @param pull If set to pull&#x3D;true, pull&#x3D;True, or pull&#x3D;1, then a newer version of the image is always attempted to be pulled even though an older version of the image exists locally. If set to pull&#x3D;false, pull&#x3D;False, or pull&#x3D;0, then the local image will be used if one exists. (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. The container image was built successfully and pushed to your private Bluemix repository. The build output stream is returned in JSON format. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request. Your could not be processed. Be sure to include the &#x60;t&#x60; query parameter to tag your image and that your Dockerfile has been tar archived with gzip. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication failed. The Access Token is invalid, or the Space ID that you entered could not be found. Run &#x60;cf oauth-token&#x60; to retrieve your access token. Run &#x60;cf space &lt;space_name&gt; --guid&#x60;, where &#x60;&lt;space_name&gt;&#x60; is the name of your space, to retrieve your space ID. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error. The IBM Containers service is currently unavailable. Your request could not be processed. Please wait a few minutes and try again. If you still encounter this problem, note the incident ID and contact the IBM Bluemix support. </td><td>  -  </td></tr>
     </table>
     */
    public void buildPost(String xAuthToken, String xAuthProjectId, String t, File body, Boolean q, Boolean nocache, Boolean pull) throws ApiException {
        buildPostWithHttpInfo(xAuthToken, xAuthProjectId, t, body, q, nocache, pull);
    }

    /**
     * Build a Docker image from a Dockerfile
     * This API builds a new container image from a Dockerfile that is stored on your local machine and pushes the image to the private Bluemix registry (corresponding IBM Containers command: &#x60;cf ic build&#x60;).   To push an image to your Bluemix registry, a namespace must be set for the organization. Run &#x60;cf ic namespace get&#x60; or call the &#x60;GET /registry/namespaces&#x60; API to check if a namespace is already set. If not, run &#x60;cf ic namespace set NAMESPACE&#x60; or call the &#x60;PUT /registry/namespaces/{namespace}&#x60; API to set a namespace for your organization.
     * @param xAuthToken The Bluemix JSON web token that you receive when logging into Bluemix. Run &#x60;cf oauth-token&#x60; to retrieve your access token. (required)
     * @param xAuthProjectId The unique ID of your organization space where you want to create or work with your containers. Run &#x60;cf space &lt;space_name&gt; --guid&#x60;, where &#x60;&lt;space_name&gt;&#x60; is the name of your space, to retrieve your space ID. (required)
     * @param t Tag the image with the full path to your private Bluemix registry in the following format: &#x60;t&#x3D;registry.ng.bluemix.net/&lt;namespace&gt;/&lt;image_name&gt;:&lt;tag&gt;&#x60;. This path is used to push the image to the private Bluemix registry after it is built. (required)
     * @param body Must be the content of a tar archive compressed with gzip. The archive must include a file called &#39;Dockerfile&#39; at its root. It may include any number of other files which will be accessible in the build context. (required)
     * @param q You can choose whether or not to show the verbose build output to review every step during the container image build. If you set the query parameter to &#x60;q&#x3D;false&#x60;, &#x60;q&#x3D;False&#x60;, or &#x60;q&#x3D;0&#x60;, the verbose build output is suppressed. To show the verbose build output, enter &#x60;q&#x3D;true&#x60;, &#x60;q&#x3D;True&#x60;, or &#x60;q&#x3D;1&#x60;. (optional)
     * @param nocache If you set the query parameter to &#x60;nocache&#x3D;true&#x60;, &#x60;nocache&#x3D;True&#x60;, or &#x60;nocache&#x3D;1&#x60;, the cache will not be used to build your image. To use the cache, enter &#x60;nocache&#x3D;false&#x60;, &#x60;nocache&#x3D;False&#x60;, or &#x60;nocache&#x3D;0&#x60;. (optional)
     * @param pull If set to pull&#x3D;true, pull&#x3D;True, or pull&#x3D;1, then a newer version of the image is always attempted to be pulled even though an older version of the image exists locally. If set to pull&#x3D;false, pull&#x3D;False, or pull&#x3D;0, then the local image will be used if one exists. (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. The container image was built successfully and pushed to your private Bluemix repository. The build output stream is returned in JSON format. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request. Your could not be processed. Be sure to include the &#x60;t&#x60; query parameter to tag your image and that your Dockerfile has been tar archived with gzip. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication failed. The Access Token is invalid, or the Space ID that you entered could not be found. Run &#x60;cf oauth-token&#x60; to retrieve your access token. Run &#x60;cf space &lt;space_name&gt; --guid&#x60;, where &#x60;&lt;space_name&gt;&#x60; is the name of your space, to retrieve your space ID. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error. The IBM Containers service is currently unavailable. Your request could not be processed. Please wait a few minutes and try again. If you still encounter this problem, note the incident ID and contact the IBM Bluemix support. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> buildPostWithHttpInfo(String xAuthToken, String xAuthProjectId, String t, File body, Boolean q, Boolean nocache, Boolean pull) throws ApiException {
        okhttp3.Call localVarCall = buildPostValidateBeforeCall(xAuthToken, xAuthProjectId, t, body, q, nocache, pull, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Build a Docker image from a Dockerfile (asynchronously)
     * This API builds a new container image from a Dockerfile that is stored on your local machine and pushes the image to the private Bluemix registry (corresponding IBM Containers command: &#x60;cf ic build&#x60;).   To push an image to your Bluemix registry, a namespace must be set for the organization. Run &#x60;cf ic namespace get&#x60; or call the &#x60;GET /registry/namespaces&#x60; API to check if a namespace is already set. If not, run &#x60;cf ic namespace set NAMESPACE&#x60; or call the &#x60;PUT /registry/namespaces/{namespace}&#x60; API to set a namespace for your organization.
     * @param xAuthToken The Bluemix JSON web token that you receive when logging into Bluemix. Run &#x60;cf oauth-token&#x60; to retrieve your access token. (required)
     * @param xAuthProjectId The unique ID of your organization space where you want to create or work with your containers. Run &#x60;cf space &lt;space_name&gt; --guid&#x60;, where &#x60;&lt;space_name&gt;&#x60; is the name of your space, to retrieve your space ID. (required)
     * @param t Tag the image with the full path to your private Bluemix registry in the following format: &#x60;t&#x3D;registry.ng.bluemix.net/&lt;namespace&gt;/&lt;image_name&gt;:&lt;tag&gt;&#x60;. This path is used to push the image to the private Bluemix registry after it is built. (required)
     * @param body Must be the content of a tar archive compressed with gzip. The archive must include a file called &#39;Dockerfile&#39; at its root. It may include any number of other files which will be accessible in the build context. (required)
     * @param q You can choose whether or not to show the verbose build output to review every step during the container image build. If you set the query parameter to &#x60;q&#x3D;false&#x60;, &#x60;q&#x3D;False&#x60;, or &#x60;q&#x3D;0&#x60;, the verbose build output is suppressed. To show the verbose build output, enter &#x60;q&#x3D;true&#x60;, &#x60;q&#x3D;True&#x60;, or &#x60;q&#x3D;1&#x60;. (optional)
     * @param nocache If you set the query parameter to &#x60;nocache&#x3D;true&#x60;, &#x60;nocache&#x3D;True&#x60;, or &#x60;nocache&#x3D;1&#x60;, the cache will not be used to build your image. To use the cache, enter &#x60;nocache&#x3D;false&#x60;, &#x60;nocache&#x3D;False&#x60;, or &#x60;nocache&#x3D;0&#x60;. (optional)
     * @param pull If set to pull&#x3D;true, pull&#x3D;True, or pull&#x3D;1, then a newer version of the image is always attempted to be pulled even though an older version of the image exists locally. If set to pull&#x3D;false, pull&#x3D;False, or pull&#x3D;0, then the local image will be used if one exists. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. The container image was built successfully and pushed to your private Bluemix repository. The build output stream is returned in JSON format. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request. Your could not be processed. Be sure to include the &#x60;t&#x60; query parameter to tag your image and that your Dockerfile has been tar archived with gzip. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication failed. The Access Token is invalid, or the Space ID that you entered could not be found. Run &#x60;cf oauth-token&#x60; to retrieve your access token. Run &#x60;cf space &lt;space_name&gt; --guid&#x60;, where &#x60;&lt;space_name&gt;&#x60; is the name of your space, to retrieve your space ID. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error. The IBM Containers service is currently unavailable. Your request could not be processed. Please wait a few minutes and try again. If you still encounter this problem, note the incident ID and contact the IBM Bluemix support. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call buildPostAsync(String xAuthToken, String xAuthProjectId, String t, File body, Boolean q, Boolean nocache, Boolean pull, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = buildPostValidateBeforeCall(xAuthToken, xAuthProjectId, t, body, q, nocache, pull, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for imagesIdDelete
     * @param xAuthToken The Bluemix JSON web token that you receive when logging into Bluemix. Run &#x60;cf oauth-token&#x60; to retrieve your access token. (required)
     * @param xAuthProjectId The unique ID of your organization space where you want to create or work with your containers. Run &#x60;cf space &lt;space_name&gt; --guid&#x60;, where &#x60;&lt;space_name&gt;&#x60; is the name of your space, to retrieve your space ID. (required)
     * @param id The unique identifier representing a Docker image. Run &#x60;cf ic images&#x60;, or call the &#x60;GET /images/json&#x60; endpoint to review the Docker images that are available in your private Bluemix registry. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content. The image was successfully removed from your private Bluemix registry. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication failed. The Access Token is invalid, or the Space ID that you entered could not be found. Run &#x60;cf oauth-token&#x60; to retrieve your access token. Run &#x60;cf space &lt;space_name&gt; --guid&#x60;, where &#x60;&lt;space_name&gt;&#x60; is the name of your space, to retrieve your space ID. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found. The specified Docker image ID could not be found. Run &#x60;cf ic images&#x60; or call the &#x60;GET /images/json&#x60; endpoint to list all images in your private Bluemix registry. Note the ID of the image that you want to delete. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error. The IBM Containers service is currently unavailable. Your request could not be processed. Please wait a few minutes and try again. If you still encounter this problem, note the incident ID and contact the IBM Bluemix support. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call imagesIdDeleteCall(String xAuthToken, String xAuthProjectId, String id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/images/{id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xAuthToken != null) {
            localVarHeaderParams.put("X-Auth-Token", localVarApiClient.parameterToString(xAuthToken));
        }

        if (xAuthProjectId != null) {
            localVarHeaderParams.put("X-Auth-Project-Id", localVarApiClient.parameterToString(xAuthProjectId));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call imagesIdDeleteValidateBeforeCall(String xAuthToken, String xAuthProjectId, String id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xAuthToken' is set
        if (xAuthToken == null) {
            throw new ApiException("Missing the required parameter 'xAuthToken' when calling imagesIdDelete(Async)");
        }

        // verify the required parameter 'xAuthProjectId' is set
        if (xAuthProjectId == null) {
            throw new ApiException("Missing the required parameter 'xAuthProjectId' when calling imagesIdDelete(Async)");
        }

        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling imagesIdDelete(Async)");
        }

        return imagesIdDeleteCall(xAuthToken, xAuthProjectId, id, _callback);

    }

    /**
     * Remove a Docker image.
     * Remove a Docker image from the private Bluemix registry that is identified by the image ID (corresponding IBM Containers command: &#x60;cf ic rmi &lt;image&gt;&#x60;).
     * @param xAuthToken The Bluemix JSON web token that you receive when logging into Bluemix. Run &#x60;cf oauth-token&#x60; to retrieve your access token. (required)
     * @param xAuthProjectId The unique ID of your organization space where you want to create or work with your containers. Run &#x60;cf space &lt;space_name&gt; --guid&#x60;, where &#x60;&lt;space_name&gt;&#x60; is the name of your space, to retrieve your space ID. (required)
     * @param id The unique identifier representing a Docker image. Run &#x60;cf ic images&#x60;, or call the &#x60;GET /images/json&#x60; endpoint to review the Docker images that are available in your private Bluemix registry. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content. The image was successfully removed from your private Bluemix registry. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication failed. The Access Token is invalid, or the Space ID that you entered could not be found. Run &#x60;cf oauth-token&#x60; to retrieve your access token. Run &#x60;cf space &lt;space_name&gt; --guid&#x60;, where &#x60;&lt;space_name&gt;&#x60; is the name of your space, to retrieve your space ID. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found. The specified Docker image ID could not be found. Run &#x60;cf ic images&#x60; or call the &#x60;GET /images/json&#x60; endpoint to list all images in your private Bluemix registry. Note the ID of the image that you want to delete. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error. The IBM Containers service is currently unavailable. Your request could not be processed. Please wait a few minutes and try again. If you still encounter this problem, note the incident ID and contact the IBM Bluemix support. </td><td>  -  </td></tr>
     </table>
     */
    public void imagesIdDelete(String xAuthToken, String xAuthProjectId, String id) throws ApiException {
        imagesIdDeleteWithHttpInfo(xAuthToken, xAuthProjectId, id);
    }

    /**
     * Remove a Docker image.
     * Remove a Docker image from the private Bluemix registry that is identified by the image ID (corresponding IBM Containers command: &#x60;cf ic rmi &lt;image&gt;&#x60;).
     * @param xAuthToken The Bluemix JSON web token that you receive when logging into Bluemix. Run &#x60;cf oauth-token&#x60; to retrieve your access token. (required)
     * @param xAuthProjectId The unique ID of your organization space where you want to create or work with your containers. Run &#x60;cf space &lt;space_name&gt; --guid&#x60;, where &#x60;&lt;space_name&gt;&#x60; is the name of your space, to retrieve your space ID. (required)
     * @param id The unique identifier representing a Docker image. Run &#x60;cf ic images&#x60;, or call the &#x60;GET /images/json&#x60; endpoint to review the Docker images that are available in your private Bluemix registry. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content. The image was successfully removed from your private Bluemix registry. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication failed. The Access Token is invalid, or the Space ID that you entered could not be found. Run &#x60;cf oauth-token&#x60; to retrieve your access token. Run &#x60;cf space &lt;space_name&gt; --guid&#x60;, where &#x60;&lt;space_name&gt;&#x60; is the name of your space, to retrieve your space ID. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found. The specified Docker image ID could not be found. Run &#x60;cf ic images&#x60; or call the &#x60;GET /images/json&#x60; endpoint to list all images in your private Bluemix registry. Note the ID of the image that you want to delete. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error. The IBM Containers service is currently unavailable. Your request could not be processed. Please wait a few minutes and try again. If you still encounter this problem, note the incident ID and contact the IBM Bluemix support. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> imagesIdDeleteWithHttpInfo(String xAuthToken, String xAuthProjectId, String id) throws ApiException {
        okhttp3.Call localVarCall = imagesIdDeleteValidateBeforeCall(xAuthToken, xAuthProjectId, id, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Remove a Docker image. (asynchronously)
     * Remove a Docker image from the private Bluemix registry that is identified by the image ID (corresponding IBM Containers command: &#x60;cf ic rmi &lt;image&gt;&#x60;).
     * @param xAuthToken The Bluemix JSON web token that you receive when logging into Bluemix. Run &#x60;cf oauth-token&#x60; to retrieve your access token. (required)
     * @param xAuthProjectId The unique ID of your organization space where you want to create or work with your containers. Run &#x60;cf space &lt;space_name&gt; --guid&#x60;, where &#x60;&lt;space_name&gt;&#x60; is the name of your space, to retrieve your space ID. (required)
     * @param id The unique identifier representing a Docker image. Run &#x60;cf ic images&#x60;, or call the &#x60;GET /images/json&#x60; endpoint to review the Docker images that are available in your private Bluemix registry. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content. The image was successfully removed from your private Bluemix registry. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication failed. The Access Token is invalid, or the Space ID that you entered could not be found. Run &#x60;cf oauth-token&#x60; to retrieve your access token. Run &#x60;cf space &lt;space_name&gt; --guid&#x60;, where &#x60;&lt;space_name&gt;&#x60; is the name of your space, to retrieve your space ID. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found. The specified Docker image ID could not be found. Run &#x60;cf ic images&#x60; or call the &#x60;GET /images/json&#x60; endpoint to list all images in your private Bluemix registry. Note the ID of the image that you want to delete. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error. The IBM Containers service is currently unavailable. Your request could not be processed. Please wait a few minutes and try again. If you still encounter this problem, note the incident ID and contact the IBM Bluemix support. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call imagesIdDeleteAsync(String xAuthToken, String xAuthProjectId, String id, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = imagesIdDeleteValidateBeforeCall(xAuthToken, xAuthProjectId, id, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for imagesJsonGet
     * @param xAuthToken The Bluemix JSON web token that you receive when logging into Bluemix. Run &#x60;cf oauth-token&#x60; to retrieve your access token. (required)
     * @param xAuthProjectId The unique ID of your organization space where you want to create or work with your containers. Run &#x60;cf space &lt;space_name&gt; --guid&#x60;, where &#x60;&lt;space_name&gt;&#x60; is the name of your space, to retrieve your space ID. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. A list of all available Docker images in the private Bluemix registry is returned. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication failed. The Access Token is invalid, or the Space ID that you entered could not be found. Run &#x60;cf oauth-token&#x60; to retrieve your access token. Run &#x60;cf space &lt;space_name&gt; --guid&#x60;, where &#x60;&lt;space_name&gt;&#x60; is the name of your space, to retrieve your space ID. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error. The IBM Containers service is currently unavailable. Your request could not be processed. Please wait a few minutes and try again. If you still encounter this problem, note the incident ID and contact the IBM Bluemix support. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call imagesJsonGetCall(String xAuthToken, String xAuthProjectId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/images/json";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xAuthToken != null) {
            localVarHeaderParams.put("X-Auth-Token", localVarApiClient.parameterToString(xAuthToken));
        }

        if (xAuthProjectId != null) {
            localVarHeaderParams.put("X-Auth-Project-Id", localVarApiClient.parameterToString(xAuthProjectId));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call imagesJsonGetValidateBeforeCall(String xAuthToken, String xAuthProjectId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xAuthToken' is set
        if (xAuthToken == null) {
            throw new ApiException("Missing the required parameter 'xAuthToken' when calling imagesJsonGet(Async)");
        }

        // verify the required parameter 'xAuthProjectId' is set
        if (xAuthProjectId == null) {
            throw new ApiException("Missing the required parameter 'xAuthProjectId' when calling imagesJsonGet(Async)");
        }

        return imagesJsonGetCall(xAuthToken, xAuthProjectId, _callback);

    }

    /**
     * List all Docker images that are available in your private Bluemix registry.
     * This endpoint returns a list of all available Docker images in a private Bluemix registry (corresponding IBM Containers command: &#x60;cf ic images&#x60;.
     * @param xAuthToken The Bluemix JSON web token that you receive when logging into Bluemix. Run &#x60;cf oauth-token&#x60; to retrieve your access token. (required)
     * @param xAuthProjectId The unique ID of your organization space where you want to create or work with your containers. Run &#x60;cf space &lt;space_name&gt; --guid&#x60;, where &#x60;&lt;space_name&gt;&#x60; is the name of your space, to retrieve your space ID. (required)
     * @return ImageInfo
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. A list of all available Docker images in the private Bluemix registry is returned. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication failed. The Access Token is invalid, or the Space ID that you entered could not be found. Run &#x60;cf oauth-token&#x60; to retrieve your access token. Run &#x60;cf space &lt;space_name&gt; --guid&#x60;, where &#x60;&lt;space_name&gt;&#x60; is the name of your space, to retrieve your space ID. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error. The IBM Containers service is currently unavailable. Your request could not be processed. Please wait a few minutes and try again. If you still encounter this problem, note the incident ID and contact the IBM Bluemix support. </td><td>  -  </td></tr>
     </table>
     */
    public ImageInfo imagesJsonGet(String xAuthToken, String xAuthProjectId) throws ApiException {
        ApiResponse<ImageInfo> localVarResp = imagesJsonGetWithHttpInfo(xAuthToken, xAuthProjectId);
        return localVarResp.getData();
    }

    /**
     * List all Docker images that are available in your private Bluemix registry.
     * This endpoint returns a list of all available Docker images in a private Bluemix registry (corresponding IBM Containers command: &#x60;cf ic images&#x60;.
     * @param xAuthToken The Bluemix JSON web token that you receive when logging into Bluemix. Run &#x60;cf oauth-token&#x60; to retrieve your access token. (required)
     * @param xAuthProjectId The unique ID of your organization space where you want to create or work with your containers. Run &#x60;cf space &lt;space_name&gt; --guid&#x60;, where &#x60;&lt;space_name&gt;&#x60; is the name of your space, to retrieve your space ID. (required)
     * @return ApiResponse&lt;ImageInfo&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. A list of all available Docker images in the private Bluemix registry is returned. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication failed. The Access Token is invalid, or the Space ID that you entered could not be found. Run &#x60;cf oauth-token&#x60; to retrieve your access token. Run &#x60;cf space &lt;space_name&gt; --guid&#x60;, where &#x60;&lt;space_name&gt;&#x60; is the name of your space, to retrieve your space ID. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error. The IBM Containers service is currently unavailable. Your request could not be processed. Please wait a few minutes and try again. If you still encounter this problem, note the incident ID and contact the IBM Bluemix support. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ImageInfo> imagesJsonGetWithHttpInfo(String xAuthToken, String xAuthProjectId) throws ApiException {
        okhttp3.Call localVarCall = imagesJsonGetValidateBeforeCall(xAuthToken, xAuthProjectId, null);
        Type localVarReturnType = new TypeToken<ImageInfo>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List all Docker images that are available in your private Bluemix registry. (asynchronously)
     * This endpoint returns a list of all available Docker images in a private Bluemix registry (corresponding IBM Containers command: &#x60;cf ic images&#x60;.
     * @param xAuthToken The Bluemix JSON web token that you receive when logging into Bluemix. Run &#x60;cf oauth-token&#x60; to retrieve your access token. (required)
     * @param xAuthProjectId The unique ID of your organization space where you want to create or work with your containers. Run &#x60;cf space &lt;space_name&gt; --guid&#x60;, where &#x60;&lt;space_name&gt;&#x60; is the name of your space, to retrieve your space ID. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. A list of all available Docker images in the private Bluemix registry is returned. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication failed. The Access Token is invalid, or the Space ID that you entered could not be found. Run &#x60;cf oauth-token&#x60; to retrieve your access token. Run &#x60;cf space &lt;space_name&gt; --guid&#x60;, where &#x60;&lt;space_name&gt;&#x60; is the name of your space, to retrieve your space ID. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error. The IBM Containers service is currently unavailable. Your request could not be processed. Please wait a few minutes and try again. If you still encounter this problem, note the incident ID and contact the IBM Bluemix support. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call imagesJsonGetAsync(String xAuthToken, String xAuthProjectId, final ApiCallback<ImageInfo> _callback) throws ApiException {

        okhttp3.Call localVarCall = imagesJsonGetValidateBeforeCall(xAuthToken, xAuthProjectId, _callback);
        Type localVarReturnType = new TypeToken<ImageInfo>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for imagesNameOrIdJsonGet
     * @param xAuthToken The Bluemix JSON web token that you receive when logging into Bluemix. Run &#x60;cf oauth-token&#x60; to retrieve your access token. (required)
     * @param xAuthProjectId The unique ID of your organization space where you want to create or work with your containers. Run &#x60;cf space &lt;space_name&gt; --guid&#x60;, where &#x60;&lt;space_name&gt;&#x60; is the name of your space, to retrieve your space ID. (required)
     * @param nameOrId The full private Bluemix registry path to your image or the unique ID of the image that you want to inspect. Run &#x60;cf ic images&#x60; or call the &#x60;GET /images/json&#x60; endpoint to review the images in your private Bluemix registry.  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. A list of details about the container image is returned. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication failed. The Access Token is invalid, or the Space ID that you entered could not be found. Run &#x60;cf oauth-token&#x60; to retrieve your access token. Run &#x60;cf space &lt;space_name&gt; --guid&#x60;, where &#x60;&lt;space_name&gt;&#x60; is the name of your space, to retrieve your space ID. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The specified image name or ID could not be found. Run &#x60;cf ic images&#x60; or call the &#x60;GET /images/json&#x60; endpoint to retrieve the name or ID of your image. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error. The IBM Containers service is currently unavailable. Your request could not be processed. Please wait a few minutes and try again. If you still encounter this problem, note the incident ID and contact the IBM Bluemix support. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call imagesNameOrIdJsonGetCall(String xAuthToken, String xAuthProjectId, String nameOrId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/images/{name_or_id}/json"
            .replace("{" + "name_or_id" + "}", localVarApiClient.escapeString(nameOrId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xAuthToken != null) {
            localVarHeaderParams.put("X-Auth-Token", localVarApiClient.parameterToString(xAuthToken));
        }

        if (xAuthProjectId != null) {
            localVarHeaderParams.put("X-Auth-Project-Id", localVarApiClient.parameterToString(xAuthProjectId));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call imagesNameOrIdJsonGetValidateBeforeCall(String xAuthToken, String xAuthProjectId, String nameOrId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xAuthToken' is set
        if (xAuthToken == null) {
            throw new ApiException("Missing the required parameter 'xAuthToken' when calling imagesNameOrIdJsonGet(Async)");
        }

        // verify the required parameter 'xAuthProjectId' is set
        if (xAuthProjectId == null) {
            throw new ApiException("Missing the required parameter 'xAuthProjectId' when calling imagesNameOrIdJsonGet(Async)");
        }

        // verify the required parameter 'nameOrId' is set
        if (nameOrId == null) {
            throw new ApiException("Missing the required parameter 'nameOrId' when calling imagesNameOrIdJsonGet(Async)");
        }

        return imagesNameOrIdJsonGetCall(xAuthToken, xAuthProjectId, nameOrId, _callback);

    }

    /**
     * Inspect a Docker image in private Bluemix registry
     * This endpoint returns detailed information about a Docker image that is stored in the private Bluemix registry of an organization (corresponding IBM Containers command: &#x60;cf ic inspect &lt;image_name_or_id&gt;&#x60;).
     * @param xAuthToken The Bluemix JSON web token that you receive when logging into Bluemix. Run &#x60;cf oauth-token&#x60; to retrieve your access token. (required)
     * @param xAuthProjectId The unique ID of your organization space where you want to create or work with your containers. Run &#x60;cf space &lt;space_name&gt; --guid&#x60;, where &#x60;&lt;space_name&gt;&#x60; is the name of your space, to retrieve your space ID. (required)
     * @param nameOrId The full private Bluemix registry path to your image or the unique ID of the image that you want to inspect. Run &#x60;cf ic images&#x60; or call the &#x60;GET /images/json&#x60; endpoint to review the images in your private Bluemix registry.  (required)
     * @return ImageDetail
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. A list of details about the container image is returned. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication failed. The Access Token is invalid, or the Space ID that you entered could not be found. Run &#x60;cf oauth-token&#x60; to retrieve your access token. Run &#x60;cf space &lt;space_name&gt; --guid&#x60;, where &#x60;&lt;space_name&gt;&#x60; is the name of your space, to retrieve your space ID. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The specified image name or ID could not be found. Run &#x60;cf ic images&#x60; or call the &#x60;GET /images/json&#x60; endpoint to retrieve the name or ID of your image. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error. The IBM Containers service is currently unavailable. Your request could not be processed. Please wait a few minutes and try again. If you still encounter this problem, note the incident ID and contact the IBM Bluemix support. </td><td>  -  </td></tr>
     </table>
     */
    public ImageDetail imagesNameOrIdJsonGet(String xAuthToken, String xAuthProjectId, String nameOrId) throws ApiException {
        ApiResponse<ImageDetail> localVarResp = imagesNameOrIdJsonGetWithHttpInfo(xAuthToken, xAuthProjectId, nameOrId);
        return localVarResp.getData();
    }

    /**
     * Inspect a Docker image in private Bluemix registry
     * This endpoint returns detailed information about a Docker image that is stored in the private Bluemix registry of an organization (corresponding IBM Containers command: &#x60;cf ic inspect &lt;image_name_or_id&gt;&#x60;).
     * @param xAuthToken The Bluemix JSON web token that you receive when logging into Bluemix. Run &#x60;cf oauth-token&#x60; to retrieve your access token. (required)
     * @param xAuthProjectId The unique ID of your organization space where you want to create or work with your containers. Run &#x60;cf space &lt;space_name&gt; --guid&#x60;, where &#x60;&lt;space_name&gt;&#x60; is the name of your space, to retrieve your space ID. (required)
     * @param nameOrId The full private Bluemix registry path to your image or the unique ID of the image that you want to inspect. Run &#x60;cf ic images&#x60; or call the &#x60;GET /images/json&#x60; endpoint to review the images in your private Bluemix registry.  (required)
     * @return ApiResponse&lt;ImageDetail&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. A list of details about the container image is returned. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication failed. The Access Token is invalid, or the Space ID that you entered could not be found. Run &#x60;cf oauth-token&#x60; to retrieve your access token. Run &#x60;cf space &lt;space_name&gt; --guid&#x60;, where &#x60;&lt;space_name&gt;&#x60; is the name of your space, to retrieve your space ID. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The specified image name or ID could not be found. Run &#x60;cf ic images&#x60; or call the &#x60;GET /images/json&#x60; endpoint to retrieve the name or ID of your image. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error. The IBM Containers service is currently unavailable. Your request could not be processed. Please wait a few minutes and try again. If you still encounter this problem, note the incident ID and contact the IBM Bluemix support. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ImageDetail> imagesNameOrIdJsonGetWithHttpInfo(String xAuthToken, String xAuthProjectId, String nameOrId) throws ApiException {
        okhttp3.Call localVarCall = imagesNameOrIdJsonGetValidateBeforeCall(xAuthToken, xAuthProjectId, nameOrId, null);
        Type localVarReturnType = new TypeToken<ImageDetail>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Inspect a Docker image in private Bluemix registry (asynchronously)
     * This endpoint returns detailed information about a Docker image that is stored in the private Bluemix registry of an organization (corresponding IBM Containers command: &#x60;cf ic inspect &lt;image_name_or_id&gt;&#x60;).
     * @param xAuthToken The Bluemix JSON web token that you receive when logging into Bluemix. Run &#x60;cf oauth-token&#x60; to retrieve your access token. (required)
     * @param xAuthProjectId The unique ID of your organization space where you want to create or work with your containers. Run &#x60;cf space &lt;space_name&gt; --guid&#x60;, where &#x60;&lt;space_name&gt;&#x60; is the name of your space, to retrieve your space ID. (required)
     * @param nameOrId The full private Bluemix registry path to your image or the unique ID of the image that you want to inspect. Run &#x60;cf ic images&#x60; or call the &#x60;GET /images/json&#x60; endpoint to review the images in your private Bluemix registry.  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. A list of details about the container image is returned. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication failed. The Access Token is invalid, or the Space ID that you entered could not be found. Run &#x60;cf oauth-token&#x60; to retrieve your access token. Run &#x60;cf space &lt;space_name&gt; --guid&#x60;, where &#x60;&lt;space_name&gt;&#x60; is the name of your space, to retrieve your space ID. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The specified image name or ID could not be found. Run &#x60;cf ic images&#x60; or call the &#x60;GET /images/json&#x60; endpoint to retrieve the name or ID of your image. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error. The IBM Containers service is currently unavailable. Your request could not be processed. Please wait a few minutes and try again. If you still encounter this problem, note the incident ID and contact the IBM Bluemix support. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call imagesNameOrIdJsonGetAsync(String xAuthToken, String xAuthProjectId, String nameOrId, final ApiCallback<ImageDetail> _callback) throws ApiException {

        okhttp3.Call localVarCall = imagesNameOrIdJsonGetValidateBeforeCall(xAuthToken, xAuthProjectId, nameOrId, _callback);
        Type localVarReturnType = new TypeToken<ImageDetail>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
