/*
 * IBM Containers API
 * Containers are virtual software objects that include all the elements that an app needs to run. A container has the benefits of resource isolation and allocation but is more portable and efficient than, for example, a virtual machine.   This documentation describes the IBM Containers API, which is based on the Docker Remote API. The API provides endpoints that you can use to create and manage your single containers and container groups in Bluemix. Endpoints are summarized under the following tags:   - **Authentication**: Retrieve and refresh your TLS certificates.  - **Private Docker images registry**: Create your own private Docker images registry in Bluemix by setting a namespace for your organization.  - **Images**: View, build, and push your images to your private Bluemix registry so you can use them with IBM Containers. You can also scan your container images with the Vulnerability Advisor against standard policies set by the organization manager and a database of known Ubuntu issues.  - **Single Containers**: Create and manage single containers in Bluemix. Use a single container to implement short-lived processes or to run simple tests as you develop an app or service. To make your single container available from the internet, review the `Public IP addresses` endpoints.  - **Container Groups**: Create and manage your container groups in Bluemix. A container group consists of multiple single containers that are all created from the same container image and as a consequence are configured in the same way. Container groups offer further options at no cost to make your app highly available. These options include in-built load balancing, auto-recovery of unhealthy container instances, and auto-scaling of container instances based on CPU and memory usage. Map a public route to your container group to make your app accessible from the internet.   - **Public IP addresses**: Use these endpoints to request public IP addresses for your space. You can bind this IP address to your container to make your container accessible from the internet.  - **File shares**: Create, list and delete file shares in a space. A file share is a NFS storage system that hosts Docker volumes.   - **Volumes**: Create and manage container volumes in your space to persist the data of your containers.      Each API request requires an HTTP header that includes the 'X-Auth-Token’ and 'X-Auth-Project-Id’ parameter.   - **X-Auth-Token**: The JSON web token (JWT) that you receive when logging into the Bluemix platform. It allows you to use the IBM Containers REST API, access services, and resources. Run `cf oauth-token` to retrieve your access token information. - **X-Auth-Project-Id**: The unique ID of your organization space where you want to create or work with your containers. Run `cf space <space_name> --guid`, where `<space_name>` is the name of your space, to retrieve your space ID.    For further information about how containers work in the IBM Containers service, review the documentation under https://new-console.ng.bluemix.net/docs/containers/container_index.html. 
 *
 * The version of the OpenAPI document: 3.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.ContainerConfig;
import org.openapitools.client.model.ContainerState;
import org.openapitools.client.model.Group;
import org.openapitools.client.model.HostConfig;
import org.openapitools.client.model.NetworkSetting;
import org.openapitools.client.model.Volume;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * ContainerInfo
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:31:48.582155-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ContainerInfo {
  public static final String SERIALIZED_NAME_BLUEMIX_APP = "BluemixApp";
  @SerializedName(SERIALIZED_NAME_BLUEMIX_APP)
  private String bluemixApp;

  public static final String SERIALIZED_NAME_BLUEMIX_SERVICES = "BluemixServices";
  @SerializedName(SERIALIZED_NAME_BLUEMIX_SERVICES)
  private String bluemixServices;

  public static final String SERIALIZED_NAME_CONFIG = "Config";
  @SerializedName(SERIALIZED_NAME_CONFIG)
  private ContainerConfig config;

  public static final String SERIALIZED_NAME_CONTAINER_STATE = "ContainerState";
  @SerializedName(SERIALIZED_NAME_CONTAINER_STATE)
  private String containerState;

  public static final String SERIALIZED_NAME_CREATED = "Created";
  @SerializedName(SERIALIZED_NAME_CREATED)
  private OffsetDateTime created;

  public static final String SERIALIZED_NAME_GROUP = "Group";
  @SerializedName(SERIALIZED_NAME_GROUP)
  private Group group;

  public static final String SERIALIZED_NAME_HOST_CONFIG = "HostConfig";
  @SerializedName(SERIALIZED_NAME_HOST_CONFIG)
  private HostConfig hostConfig;

  public static final String SERIALIZED_NAME_HOST_ID = "HostId";
  @SerializedName(SERIALIZED_NAME_HOST_ID)
  private String hostId;

  public static final String SERIALIZED_NAME_HUMAN_ID = "Human_Id";
  @SerializedName(SERIALIZED_NAME_HUMAN_ID)
  private String humanId;

  public static final String SERIALIZED_NAME_ID = "Id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_IMAGE = "Image";
  @SerializedName(SERIALIZED_NAME_IMAGE)
  private String image;

  public static final String SERIALIZED_NAME_MOUNTS = "Mounts";
  @SerializedName(SERIALIZED_NAME_MOUNTS)
  private List<String> mounts = new ArrayList<>();

  public static final String SERIALIZED_NAME_NAME = "Name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_NETWORK_SETTINGS = "NetworkSettings";
  @SerializedName(SERIALIZED_NAME_NETWORK_SETTINGS)
  private NetworkSetting networkSettings;

  public static final String SERIALIZED_NAME_PATH = "Path";
  @SerializedName(SERIALIZED_NAME_PATH)
  private String path;

  public static final String SERIALIZED_NAME_RESOLVE_CONF_PATH = "ResolveConfPath";
  @SerializedName(SERIALIZED_NAME_RESOLVE_CONF_PATH)
  private String resolveConfPath;

  public static final String SERIALIZED_NAME_STATE = "State";
  @SerializedName(SERIALIZED_NAME_STATE)
  private ContainerState state;

  public static final String SERIALIZED_NAME_VOLUMES = "Volumes";
  @SerializedName(SERIALIZED_NAME_VOLUMES)
  private Volume volumes;

  public static final String SERIALIZED_NAME_VOLUMES_R_W = "VolumesRW";
  @SerializedName(SERIALIZED_NAME_VOLUMES_R_W)
  private List<String> volumesRW = new ArrayList<>();

  public ContainerInfo() {
  }

  public ContainerInfo bluemixApp(String bluemixApp) {
    this.bluemixApp = bluemixApp;
    return this;
  }

  /**
   * The name of the Cloud Foundry app that was bound to the container during creation.
   * @return bluemixApp
   */
  @javax.annotation.Nullable
  public String getBluemixApp() {
    return bluemixApp;
  }

  public void setBluemixApp(String bluemixApp) {
    this.bluemixApp = bluemixApp;
  }


  public ContainerInfo bluemixServices(String bluemixServices) {
    this.bluemixServices = bluemixServices;
    return this;
  }

  /**
   * The name of the Bluemix service instance that was bound to the container during creation.
   * @return bluemixServices
   */
  @javax.annotation.Nullable
  public String getBluemixServices() {
    return bluemixServices;
  }

  public void setBluemixServices(String bluemixServices) {
    this.bluemixServices = bluemixServices;
  }


  public ContainerInfo config(ContainerConfig config) {
    this.config = config;
    return this;
  }

  /**
   * Get config
   * @return config
   */
  @javax.annotation.Nullable
  public ContainerConfig getConfig() {
    return config;
  }

  public void setConfig(ContainerConfig config) {
    this.config = config;
  }


  public ContainerInfo containerState(String containerState) {
    this.containerState = containerState;
    return this;
  }

  /**
   * The current status of the container. This state can either be transient, such as BUILDING or NETWORKING, or non-transient, such as RUNNING, SHUTDOWN, CRASHED, or SUSPENDED.
   * @return containerState
   */
  @javax.annotation.Nullable
  public String getContainerState() {
    return containerState;
  }

  public void setContainerState(String containerState) {
    this.containerState = containerState;
  }


  public ContainerInfo created(OffsetDateTime created) {
    this.created = created;
    return this;
  }

  /**
   * The date and time the container was created.
   * @return created
   */
  @javax.annotation.Nullable
  public OffsetDateTime getCreated() {
    return created;
  }

  public void setCreated(OffsetDateTime created) {
    this.created = created;
  }


  public ContainerInfo group(Group group) {
    this.group = group;
    return this;
  }

  /**
   * Get group
   * @return group
   */
  @javax.annotation.Nullable
  public Group getGroup() {
    return group;
  }

  public void setGroup(Group group) {
    this.group = group;
  }


  public ContainerInfo hostConfig(HostConfig hostConfig) {
    this.hostConfig = hostConfig;
    return this;
  }

  /**
   * Get hostConfig
   * @return hostConfig
   */
  @javax.annotation.Nullable
  public HostConfig getHostConfig() {
    return hostConfig;
  }

  public void setHostConfig(HostConfig hostConfig) {
    this.hostConfig = hostConfig;
  }


  public ContainerInfo hostId(String hostId) {
    this.hostId = hostId;
    return this;
  }

  /**
   * The ID representing the physical compute host.
   * @return hostId
   */
  @javax.annotation.Nullable
  public String getHostId() {
    return hostId;
  }

  public void setHostId(String hostId) {
    this.hostId = hostId;
  }


  public ContainerInfo humanId(String humanId) {
    this.humanId = humanId;
    return this;
  }

  /**
   * The name of the container. 
   * @return humanId
   */
  @javax.annotation.Nullable
  public String getHumanId() {
    return humanId;
  }

  public void setHumanId(String humanId) {
    this.humanId = humanId;
  }


  public ContainerInfo id(String id) {
    this.id = id;
    return this;
  }

  /**
   * Unique identifier representing a container.
   * @return id
   */
  @javax.annotation.Nullable
  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }


  public ContainerInfo image(String image) {
    this.image = image;
    return this;
  }

  /**
   * Unique identifier representing a container image.
   * @return image
   */
  @javax.annotation.Nullable
  public String getImage() {
    return image;
  }

  public void setImage(String image) {
    this.image = image;
  }


  public ContainerInfo mounts(List<String> mounts) {
    this.mounts = mounts;
    return this;
  }

  public ContainerInfo addMountsItem(String mountsItem) {
    if (this.mounts == null) {
      this.mounts = new ArrayList<>();
    }
    this.mounts.add(mountsItem);
    return this;
  }

  /**
   * A list of volumes that are mounted to the container.
   * @return mounts
   */
  @javax.annotation.Nullable
  public List<String> getMounts() {
    return mounts;
  }

  public void setMounts(List<String> mounts) {
    this.mounts = mounts;
  }


  public ContainerInfo name(String name) {
    this.name = name;
    return this;
  }

  /**
   * The name of the container.
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public ContainerInfo networkSettings(NetworkSetting networkSettings) {
    this.networkSettings = networkSettings;
    return this;
  }

  /**
   * Get networkSettings
   * @return networkSettings
   */
  @javax.annotation.Nullable
  public NetworkSetting getNetworkSettings() {
    return networkSettings;
  }

  public void setNetworkSettings(NetworkSetting networkSettings) {
    this.networkSettings = networkSettings;
  }


  public ContainerInfo path(String path) {
    this.path = path;
    return this;
  }

  /**
   * The environment variable indicating the binary location.
   * @return path
   */
  @javax.annotation.Nullable
  public String getPath() {
    return path;
  }

  public void setPath(String path) {
    this.path = path;
  }


  public ContainerInfo resolveConfPath(String resolveConfPath) {
    this.resolveConfPath = resolveConfPath;
    return this;
  }

  /**
   * Path to the resolve.conf file inside the container. The resolve.conf file is used to resolve the DNS servers.
   * @return resolveConfPath
   */
  @javax.annotation.Nullable
  public String getResolveConfPath() {
    return resolveConfPath;
  }

  public void setResolveConfPath(String resolveConfPath) {
    this.resolveConfPath = resolveConfPath;
  }


  public ContainerInfo state(ContainerState state) {
    this.state = state;
    return this;
  }

  /**
   * Get state
   * @return state
   */
  @javax.annotation.Nullable
  public ContainerState getState() {
    return state;
  }

  public void setState(ContainerState state) {
    this.state = state;
  }


  public ContainerInfo volumes(Volume volumes) {
    this.volumes = volumes;
    return this;
  }

  /**
   * Get volumes
   * @return volumes
   */
  @javax.annotation.Nullable
  public Volume getVolumes() {
    return volumes;
  }

  public void setVolumes(Volume volumes) {
    this.volumes = volumes;
  }


  public ContainerInfo volumesRW(List<String> volumesRW) {
    this.volumesRW = volumesRW;
    return this;
  }

  public ContainerInfo addVolumesRWItem(String volumesRWItem) {
    if (this.volumesRW == null) {
      this.volumesRW = new ArrayList<>();
    }
    this.volumesRW.add(volumesRWItem);
    return this;
  }

  /**
   * LIst of volumes that is mounted to the container.
   * @return volumesRW
   */
  @javax.annotation.Nullable
  public List<String> getVolumesRW() {
    return volumesRW;
  }

  public void setVolumesRW(List<String> volumesRW) {
    this.volumesRW = volumesRW;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ContainerInfo containerInfo = (ContainerInfo) o;
    return Objects.equals(this.bluemixApp, containerInfo.bluemixApp) &&
        Objects.equals(this.bluemixServices, containerInfo.bluemixServices) &&
        Objects.equals(this.config, containerInfo.config) &&
        Objects.equals(this.containerState, containerInfo.containerState) &&
        Objects.equals(this.created, containerInfo.created) &&
        Objects.equals(this.group, containerInfo.group) &&
        Objects.equals(this.hostConfig, containerInfo.hostConfig) &&
        Objects.equals(this.hostId, containerInfo.hostId) &&
        Objects.equals(this.humanId, containerInfo.humanId) &&
        Objects.equals(this.id, containerInfo.id) &&
        Objects.equals(this.image, containerInfo.image) &&
        Objects.equals(this.mounts, containerInfo.mounts) &&
        Objects.equals(this.name, containerInfo.name) &&
        Objects.equals(this.networkSettings, containerInfo.networkSettings) &&
        Objects.equals(this.path, containerInfo.path) &&
        Objects.equals(this.resolveConfPath, containerInfo.resolveConfPath) &&
        Objects.equals(this.state, containerInfo.state) &&
        Objects.equals(this.volumes, containerInfo.volumes) &&
        Objects.equals(this.volumesRW, containerInfo.volumesRW);
  }

  @Override
  public int hashCode() {
    return Objects.hash(bluemixApp, bluemixServices, config, containerState, created, group, hostConfig, hostId, humanId, id, image, mounts, name, networkSettings, path, resolveConfPath, state, volumes, volumesRW);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ContainerInfo {\n");
    sb.append("    bluemixApp: ").append(toIndentedString(bluemixApp)).append("\n");
    sb.append("    bluemixServices: ").append(toIndentedString(bluemixServices)).append("\n");
    sb.append("    config: ").append(toIndentedString(config)).append("\n");
    sb.append("    containerState: ").append(toIndentedString(containerState)).append("\n");
    sb.append("    created: ").append(toIndentedString(created)).append("\n");
    sb.append("    group: ").append(toIndentedString(group)).append("\n");
    sb.append("    hostConfig: ").append(toIndentedString(hostConfig)).append("\n");
    sb.append("    hostId: ").append(toIndentedString(hostId)).append("\n");
    sb.append("    humanId: ").append(toIndentedString(humanId)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    image: ").append(toIndentedString(image)).append("\n");
    sb.append("    mounts: ").append(toIndentedString(mounts)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    networkSettings: ").append(toIndentedString(networkSettings)).append("\n");
    sb.append("    path: ").append(toIndentedString(path)).append("\n");
    sb.append("    resolveConfPath: ").append(toIndentedString(resolveConfPath)).append("\n");
    sb.append("    state: ").append(toIndentedString(state)).append("\n");
    sb.append("    volumes: ").append(toIndentedString(volumes)).append("\n");
    sb.append("    volumesRW: ").append(toIndentedString(volumesRW)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("BluemixApp");
    openapiFields.add("BluemixServices");
    openapiFields.add("Config");
    openapiFields.add("ContainerState");
    openapiFields.add("Created");
    openapiFields.add("Group");
    openapiFields.add("HostConfig");
    openapiFields.add("HostId");
    openapiFields.add("Human_Id");
    openapiFields.add("Id");
    openapiFields.add("Image");
    openapiFields.add("Mounts");
    openapiFields.add("Name");
    openapiFields.add("NetworkSettings");
    openapiFields.add("Path");
    openapiFields.add("ResolveConfPath");
    openapiFields.add("State");
    openapiFields.add("Volumes");
    openapiFields.add("VolumesRW");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ContainerInfo
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ContainerInfo.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ContainerInfo is not found in the empty JSON string", ContainerInfo.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ContainerInfo.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ContainerInfo` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("BluemixApp") != null && !jsonObj.get("BluemixApp").isJsonNull()) && !jsonObj.get("BluemixApp").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `BluemixApp` to be a primitive type in the JSON string but got `%s`", jsonObj.get("BluemixApp").toString()));
      }
      if ((jsonObj.get("BluemixServices") != null && !jsonObj.get("BluemixServices").isJsonNull()) && !jsonObj.get("BluemixServices").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `BluemixServices` to be a primitive type in the JSON string but got `%s`", jsonObj.get("BluemixServices").toString()));
      }
      // validate the optional field `Config`
      if (jsonObj.get("Config") != null && !jsonObj.get("Config").isJsonNull()) {
        ContainerConfig.validateJsonElement(jsonObj.get("Config"));
      }
      if ((jsonObj.get("ContainerState") != null && !jsonObj.get("ContainerState").isJsonNull()) && !jsonObj.get("ContainerState").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ContainerState` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ContainerState").toString()));
      }
      // validate the optional field `Group`
      if (jsonObj.get("Group") != null && !jsonObj.get("Group").isJsonNull()) {
        Group.validateJsonElement(jsonObj.get("Group"));
      }
      // validate the optional field `HostConfig`
      if (jsonObj.get("HostConfig") != null && !jsonObj.get("HostConfig").isJsonNull()) {
        HostConfig.validateJsonElement(jsonObj.get("HostConfig"));
      }
      if ((jsonObj.get("HostId") != null && !jsonObj.get("HostId").isJsonNull()) && !jsonObj.get("HostId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `HostId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("HostId").toString()));
      }
      if ((jsonObj.get("Human_Id") != null && !jsonObj.get("Human_Id").isJsonNull()) && !jsonObj.get("Human_Id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Human_Id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Human_Id").toString()));
      }
      if ((jsonObj.get("Id") != null && !jsonObj.get("Id").isJsonNull()) && !jsonObj.get("Id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Id").toString()));
      }
      if ((jsonObj.get("Image") != null && !jsonObj.get("Image").isJsonNull()) && !jsonObj.get("Image").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Image` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Image").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("Mounts") != null && !jsonObj.get("Mounts").isJsonNull() && !jsonObj.get("Mounts").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `Mounts` to be an array in the JSON string but got `%s`", jsonObj.get("Mounts").toString()));
      }
      if ((jsonObj.get("Name") != null && !jsonObj.get("Name").isJsonNull()) && !jsonObj.get("Name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Name").toString()));
      }
      // validate the optional field `NetworkSettings`
      if (jsonObj.get("NetworkSettings") != null && !jsonObj.get("NetworkSettings").isJsonNull()) {
        NetworkSetting.validateJsonElement(jsonObj.get("NetworkSettings"));
      }
      if ((jsonObj.get("Path") != null && !jsonObj.get("Path").isJsonNull()) && !jsonObj.get("Path").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Path` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Path").toString()));
      }
      if ((jsonObj.get("ResolveConfPath") != null && !jsonObj.get("ResolveConfPath").isJsonNull()) && !jsonObj.get("ResolveConfPath").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ResolveConfPath` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ResolveConfPath").toString()));
      }
      // validate the optional field `State`
      if (jsonObj.get("State") != null && !jsonObj.get("State").isJsonNull()) {
        ContainerState.validateJsonElement(jsonObj.get("State"));
      }
      // validate the optional field `Volumes`
      if (jsonObj.get("Volumes") != null && !jsonObj.get("Volumes").isJsonNull()) {
        Volume.validateJsonElement(jsonObj.get("Volumes"));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("VolumesRW") != null && !jsonObj.get("VolumesRW").isJsonNull() && !jsonObj.get("VolumesRW").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `VolumesRW` to be an array in the JSON string but got `%s`", jsonObj.get("VolumesRW").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ContainerInfo.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ContainerInfo' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ContainerInfo> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ContainerInfo.class));

       return (TypeAdapter<T>) new TypeAdapter<ContainerInfo>() {
           @Override
           public void write(JsonWriter out, ContainerInfo value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ContainerInfo read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ContainerInfo given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ContainerInfo
   * @throws IOException if the JSON string is invalid with respect to ContainerInfo
   */
  public static ContainerInfo fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ContainerInfo.class);
  }

  /**
   * Convert an instance of ContainerInfo to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

