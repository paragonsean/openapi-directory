/*
 * IBM Containers API
 * Containers are virtual software objects that include all the elements that an app needs to run. A container has the benefits of resource isolation and allocation but is more portable and efficient than, for example, a virtual machine.   This documentation describes the IBM Containers API, which is based on the Docker Remote API. The API provides endpoints that you can use to create and manage your single containers and container groups in Bluemix. Endpoints are summarized under the following tags:   - **Authentication**: Retrieve and refresh your TLS certificates.  - **Private Docker images registry**: Create your own private Docker images registry in Bluemix by setting a namespace for your organization.  - **Images**: View, build, and push your images to your private Bluemix registry so you can use them with IBM Containers. You can also scan your container images with the Vulnerability Advisor against standard policies set by the organization manager and a database of known Ubuntu issues.  - **Single Containers**: Create and manage single containers in Bluemix. Use a single container to implement short-lived processes or to run simple tests as you develop an app or service. To make your single container available from the internet, review the `Public IP addresses` endpoints.  - **Container Groups**: Create and manage your container groups in Bluemix. A container group consists of multiple single containers that are all created from the same container image and as a consequence are configured in the same way. Container groups offer further options at no cost to make your app highly available. These options include in-built load balancing, auto-recovery of unhealthy container instances, and auto-scaling of container instances based on CPU and memory usage. Map a public route to your container group to make your app accessible from the internet.   - **Public IP addresses**: Use these endpoints to request public IP addresses for your space. You can bind this IP address to your container to make your container accessible from the internet.  - **File shares**: Create, list and delete file shares in a space. A file share is a NFS storage system that hosts Docker volumes.   - **Volumes**: Create and manage container volumes in your space to persist the data of your containers.      Each API request requires an HTTP header that includes the 'X-Auth-Token’ and 'X-Auth-Project-Id’ parameter.   - **X-Auth-Token**: The JSON web token (JWT) that you receive when logging into the Bluemix platform. It allows you to use the IBM Containers REST API, access services, and resources. Run `cf oauth-token` to retrieve your access token information. - **X-Auth-Project-Id**: The unique ID of your organization space where you want to create or work with your containers. Run `cf space <space_name> --guid`, where `<space_name>` is the name of your space, to retrieve your space ID.    For further information about how containers work in the IBM Containers service, review the documentation under https://new-console.ng.bluemix.net/docs/containers/container_index.html. 
 *
 * The version of the OpenAPI document: 3.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.HostConfig;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * CreateContainer
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:31:48.582155-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class CreateContainer {
  public static final String SERIALIZED_NAME_BLUEMIX_APP = "BluemixApp";
  @SerializedName(SERIALIZED_NAME_BLUEMIX_APP)
  private String bluemixApp;

  public static final String SERIALIZED_NAME_CMD = "Cmd";
  @SerializedName(SERIALIZED_NAME_CMD)
  private List<String> cmd = new ArrayList<>();

  public static final String SERIALIZED_NAME_CPUSET = "Cpuset";
  @SerializedName(SERIALIZED_NAME_CPUSET)
  private String cpuset;

  public static final String SERIALIZED_NAME_ENV = "Env";
  @SerializedName(SERIALIZED_NAME_ENV)
  private List<String> env = new ArrayList<>();

  public static final String SERIALIZED_NAME_EXPOSED_PORTS = "ExposedPorts";
  @SerializedName(SERIALIZED_NAME_EXPOSED_PORTS)
  private List<String> exposedPorts = new ArrayList<>();

  public static final String SERIALIZED_NAME_HOST_CONFIG = "HostConfig";
  @SerializedName(SERIALIZED_NAME_HOST_CONFIG)
  private HostConfig hostConfig;

  public static final String SERIALIZED_NAME_IMAGE = "Image";
  @SerializedName(SERIALIZED_NAME_IMAGE)
  private String image;

  public static final String SERIALIZED_NAME_MEMORY = "Memory";
  @SerializedName(SERIALIZED_NAME_MEMORY)
  private Integer memory;

  public static final String SERIALIZED_NAME_NUMBER_CPUS = "NumberCpus";
  @SerializedName(SERIALIZED_NAME_NUMBER_CPUS)
  private Integer numberCpus;

  public static final String SERIALIZED_NAME_VOLUMES = "Volumes";
  @SerializedName(SERIALIZED_NAME_VOLUMES)
  private String volumes;

  public CreateContainer() {
  }

  public CreateContainer bluemixApp(String bluemixApp) {
    this.bluemixApp = bluemixApp;
    return this;
  }

  /**
   * The name of the Cloud Foundry app that you want to bind to your container. The Cloud Foundry app must be created in the same space where you want to create your container.
   * @return bluemixApp
   */
  @javax.annotation.Nullable
  public String getBluemixApp() {
    return bluemixApp;
  }

  public void setBluemixApp(String bluemixApp) {
    this.bluemixApp = bluemixApp;
  }


  public CreateContainer cmd(List<String> cmd) {
    this.cmd = cmd;
    return this;
  }

  public CreateContainer addCmdItem(String cmdItem) {
    if (this.cmd == null) {
      this.cmd = new ArrayList<>();
    }
    this.cmd.add(cmdItem);
    return this;
  }

  /**
   * The command and arguments in this list are passed to the container to be executed when the container is started. This command must be a long-running command. Do not use a short-lived command, for example, /bin/date, because it might cause the container to crash. &lt;br&gt;Sample long-running commands:&lt;br&gt;[\&quot;ping\&quot;,\&quot;localhost\&quot;]&lt;br&gt;[\&quot;tail\&quot;,\&quot;-f\&quot;,\&quot;/dev/null\&quot;]&lt;br&gt;[\&quot;sh\&quot;,\&quot;-c\&quot;,\&quot;while true; do date; sleep 20; done\&quot;] 
   * @return cmd
   */
  @javax.annotation.Nullable
  public List<String> getCmd() {
    return cmd;
  }

  public void setCmd(List<String> cmd) {
    this.cmd = cmd;
  }


  public CreateContainer cpuset(String cpuset) {
    this.cpuset = cpuset;
    return this;
  }

  /**
   * Pins the container processes to a specific CPU core on the compute host. For example: 0 means that processes are executed on the first core only.
   * @return cpuset
   */
  @javax.annotation.Nullable
  public String getCpuset() {
    return cpuset;
  }

  public void setCpuset(String cpuset) {
    this.cpuset = cpuset;
  }


  public CreateContainer env(List<String> env) {
    this.env = env;
    return this;
  }

  public CreateContainer addEnvItem(String envItem) {
    if (this.env == null) {
      this.env = new ArrayList<>();
    }
    this.env.add(envItem);
    return this;
  }

  /**
   * A list of environment variables in the form of key&#x3D;value pairs. All keys in this list have to be unique. List multiple keys separately and if you include quotation marks, include them around both the environment variable name and the value.
   * @return env
   */
  @javax.annotation.Nullable
  public List<String> getEnv() {
    return env;
  }

  public void setEnv(List<String> env) {
    this.env = env;
  }


  public CreateContainer exposedPorts(List<String> exposedPorts) {
    this.exposedPorts = exposedPorts;
    return this;
  }

  public CreateContainer addExposedPortsItem(String exposedPortsItem) {
    if (this.exposedPorts == null) {
      this.exposedPorts = new ArrayList<>();
    }
    this.exposedPorts.add(exposedPortsItem);
    return this;
  }

  /**
   * All public ports that need to be exposed for the container, so the container can be accessed from the Internet.
   * @return exposedPorts
   */
  @javax.annotation.Nullable
  public List<String> getExposedPorts() {
    return exposedPorts;
  }

  public void setExposedPorts(List<String> exposedPorts) {
    this.exposedPorts = exposedPorts;
  }


  public CreateContainer hostConfig(HostConfig hostConfig) {
    this.hostConfig = hostConfig;
    return this;
  }

  /**
   * Get hostConfig
   * @return hostConfig
   */
  @javax.annotation.Nullable
  public HostConfig getHostConfig() {
    return hostConfig;
  }

  public void setHostConfig(HostConfig hostConfig) {
    this.hostConfig = hostConfig;
  }


  public CreateContainer image(String image) {
    this.image = image;
    return this;
  }

  /**
   * Full path to the image in your private Bluemix registry in the format &#x60;registry.ng.bluemix.net/namespace/image&#x60;. 
   * @return image
   */
  @javax.annotation.Nonnull
  public String getImage() {
    return image;
  }

  public void setImage(String image) {
    this.image = image;
  }


  public CreateContainer memory(Integer memory) {
    this.memory = memory;
    return this;
  }

  /**
   * The container memory that is set for the container in Megabyte. Choose one of the following sizes: Pico 64 MB, Nano 128 MB, Micro 256 MB, Tiny 512 MB, Small 1 GB (1024 MB), Medium 2 GB (2048 MB), Large 4 GB (4096 MB) XLarge 8GB (8192 MB) and 2XLarge 16 GB (16384 MB).
   * @return memory
   */
  @javax.annotation.Nullable
  public Integer getMemory() {
    return memory;
  }

  public void setMemory(Integer memory) {
    this.memory = memory;
  }


  public CreateContainer numberCpus(Integer numberCpus) {
    this.numberCpus = numberCpus;
    return this;
  }

  /**
   * Number of virtual CPUs that are allocated to the container.
   * @return numberCpus
   */
  @javax.annotation.Nullable
  public Integer getNumberCpus() {
    return numberCpus;
  }

  public void setNumberCpus(Integer numberCpus) {
    this.numberCpus = numberCpus;
  }


  public CreateContainer volumes(String volumes) {
    this.volumes = volumes;
    return this;
  }

  /**
   * Mount a volume to a container by specifying the details in the following format: &#x60;VOLUME_NAME:/DIRECTORY_PATH[:ro]&#x60;. Example: testvolume:/volumedata/temp:rw. By default, all volumes will be set up with read-write access inside the container (rw). If you wish to set up your volume with read-only access, enter &#x60;ro&#x60;.  Note: To mount a volume to a container, you must create the volume in your space first by using the &#x60;cf ic volume-create&#x60; command, or calling the &#x60;POST /volumes/create endpoint&#x60;.
   * @return volumes
   */
  @javax.annotation.Nullable
  public String getVolumes() {
    return volumes;
  }

  public void setVolumes(String volumes) {
    this.volumes = volumes;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CreateContainer createContainer = (CreateContainer) o;
    return Objects.equals(this.bluemixApp, createContainer.bluemixApp) &&
        Objects.equals(this.cmd, createContainer.cmd) &&
        Objects.equals(this.cpuset, createContainer.cpuset) &&
        Objects.equals(this.env, createContainer.env) &&
        Objects.equals(this.exposedPorts, createContainer.exposedPorts) &&
        Objects.equals(this.hostConfig, createContainer.hostConfig) &&
        Objects.equals(this.image, createContainer.image) &&
        Objects.equals(this.memory, createContainer.memory) &&
        Objects.equals(this.numberCpus, createContainer.numberCpus) &&
        Objects.equals(this.volumes, createContainer.volumes);
  }

  @Override
  public int hashCode() {
    return Objects.hash(bluemixApp, cmd, cpuset, env, exposedPorts, hostConfig, image, memory, numberCpus, volumes);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CreateContainer {\n");
    sb.append("    bluemixApp: ").append(toIndentedString(bluemixApp)).append("\n");
    sb.append("    cmd: ").append(toIndentedString(cmd)).append("\n");
    sb.append("    cpuset: ").append(toIndentedString(cpuset)).append("\n");
    sb.append("    env: ").append(toIndentedString(env)).append("\n");
    sb.append("    exposedPorts: ").append(toIndentedString(exposedPorts)).append("\n");
    sb.append("    hostConfig: ").append(toIndentedString(hostConfig)).append("\n");
    sb.append("    image: ").append(toIndentedString(image)).append("\n");
    sb.append("    memory: ").append(toIndentedString(memory)).append("\n");
    sb.append("    numberCpus: ").append(toIndentedString(numberCpus)).append("\n");
    sb.append("    volumes: ").append(toIndentedString(volumes)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("BluemixApp");
    openapiFields.add("Cmd");
    openapiFields.add("Cpuset");
    openapiFields.add("Env");
    openapiFields.add("ExposedPorts");
    openapiFields.add("HostConfig");
    openapiFields.add("Image");
    openapiFields.add("Memory");
    openapiFields.add("NumberCpus");
    openapiFields.add("Volumes");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("Image");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to CreateContainer
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!CreateContainer.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CreateContainer is not found in the empty JSON string", CreateContainer.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!CreateContainer.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CreateContainer` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : CreateContainer.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("BluemixApp") != null && !jsonObj.get("BluemixApp").isJsonNull()) && !jsonObj.get("BluemixApp").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `BluemixApp` to be a primitive type in the JSON string but got `%s`", jsonObj.get("BluemixApp").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("Cmd") != null && !jsonObj.get("Cmd").isJsonNull() && !jsonObj.get("Cmd").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `Cmd` to be an array in the JSON string but got `%s`", jsonObj.get("Cmd").toString()));
      }
      if ((jsonObj.get("Cpuset") != null && !jsonObj.get("Cpuset").isJsonNull()) && !jsonObj.get("Cpuset").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Cpuset` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Cpuset").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("Env") != null && !jsonObj.get("Env").isJsonNull() && !jsonObj.get("Env").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `Env` to be an array in the JSON string but got `%s`", jsonObj.get("Env").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("ExposedPorts") != null && !jsonObj.get("ExposedPorts").isJsonNull() && !jsonObj.get("ExposedPorts").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `ExposedPorts` to be an array in the JSON string but got `%s`", jsonObj.get("ExposedPorts").toString()));
      }
      // validate the optional field `HostConfig`
      if (jsonObj.get("HostConfig") != null && !jsonObj.get("HostConfig").isJsonNull()) {
        HostConfig.validateJsonElement(jsonObj.get("HostConfig"));
      }
      if (!jsonObj.get("Image").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Image` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Image").toString()));
      }
      if ((jsonObj.get("Volumes") != null && !jsonObj.get("Volumes").isJsonNull()) && !jsonObj.get("Volumes").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Volumes` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Volumes").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CreateContainer.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CreateContainer' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CreateContainer> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CreateContainer.class));

       return (TypeAdapter<T>) new TypeAdapter<CreateContainer>() {
           @Override
           public void write(JsonWriter out, CreateContainer value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CreateContainer read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of CreateContainer given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of CreateContainer
   * @throws IOException if the JSON string is invalid with respect to CreateContainer
   */
  public static CreateContainer fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CreateContainer.class);
  }

  /**
   * Convert an instance of CreateContainer to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

