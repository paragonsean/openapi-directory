/*
 * IBM Containers API
 * Containers are virtual software objects that include all the elements that an app needs to run. A container has the benefits of resource isolation and allocation but is more portable and efficient than, for example, a virtual machine.   This documentation describes the IBM Containers API, which is based on the Docker Remote API. The API provides endpoints that you can use to create and manage your single containers and container groups in Bluemix. Endpoints are summarized under the following tags:   - **Authentication**: Retrieve and refresh your TLS certificates.  - **Private Docker images registry**: Create your own private Docker images registry in Bluemix by setting a namespace for your organization.  - **Images**: View, build, and push your images to your private Bluemix registry so you can use them with IBM Containers. You can also scan your container images with the Vulnerability Advisor against standard policies set by the organization manager and a database of known Ubuntu issues.  - **Single Containers**: Create and manage single containers in Bluemix. Use a single container to implement short-lived processes or to run simple tests as you develop an app or service. To make your single container available from the internet, review the `Public IP addresses` endpoints.  - **Container Groups**: Create and manage your container groups in Bluemix. A container group consists of multiple single containers that are all created from the same container image and as a consequence are configured in the same way. Container groups offer further options at no cost to make your app highly available. These options include in-built load balancing, auto-recovery of unhealthy container instances, and auto-scaling of container instances based on CPU and memory usage. Map a public route to your container group to make your app accessible from the internet.   - **Public IP addresses**: Use these endpoints to request public IP addresses for your space. You can bind this IP address to your container to make your container accessible from the internet.  - **File shares**: Create, list and delete file shares in a space. A file share is a NFS storage system that hosts Docker volumes.   - **Volumes**: Create and manage container volumes in your space to persist the data of your containers.      Each API request requires an HTTP header that includes the 'X-Auth-Token’ and 'X-Auth-Project-Id’ parameter.   - **X-Auth-Token**: The JSON web token (JWT) that you receive when logging into the Bluemix platform. It allows you to use the IBM Containers REST API, access services, and resources. Run `cf oauth-token` to retrieve your access token information. - **X-Auth-Project-Id**: The unique ID of your organization space where you want to create or work with your containers. Run `cf space <space_name> --guid`, where `<space_name>` is the name of your space, to retrieve your space ID.    For further information about how containers work in the IBM Containers service, review the documentation under https://new-console.ng.bluemix.net/docs/containers/container_index.html. 
 *
 * The version of the OpenAPI document: 3.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.ContainersGroupsPostRequiredAttributesNumberInstances;
import org.openapitools.client.model.ContainersGroupsPostRequiredAttributesRoute;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * ContainersGroupsPostRequiredAttributes
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:31:48.582155-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ContainersGroupsPostRequiredAttributes {
  public static final String SERIALIZED_NAME_AUTORECOVERY = "Autorecovery";
  @SerializedName(SERIALIZED_NAME_AUTORECOVERY)
  private String autorecovery;

  public static final String SERIALIZED_NAME_BLUEMIX_APP = "BluemixApp";
  @SerializedName(SERIALIZED_NAME_BLUEMIX_APP)
  private String bluemixApp;

  public static final String SERIALIZED_NAME_CMD = "Cmd";
  @SerializedName(SERIALIZED_NAME_CMD)
  private List<String> cmd = new ArrayList<>();

  public static final String SERIALIZED_NAME_ENV = "Env";
  @SerializedName(SERIALIZED_NAME_ENV)
  private List<String> env = new ArrayList<>();

  public static final String SERIALIZED_NAME_IMAGE = "Image";
  @SerializedName(SERIALIZED_NAME_IMAGE)
  private String image;

  public static final String SERIALIZED_NAME_MEMORY = "Memory";
  @SerializedName(SERIALIZED_NAME_MEMORY)
  private Integer memory;

  public static final String SERIALIZED_NAME_NAME = "Name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_NUMBER_INSTANCES = "NumberInstances";
  @SerializedName(SERIALIZED_NAME_NUMBER_INSTANCES)
  private ContainersGroupsPostRequiredAttributesNumberInstances numberInstances;

  public static final String SERIALIZED_NAME_PORT = "Port";
  @SerializedName(SERIALIZED_NAME_PORT)
  private Integer port;

  public static final String SERIALIZED_NAME_ROUTE = "Route";
  @SerializedName(SERIALIZED_NAME_ROUTE)
  private ContainersGroupsPostRequiredAttributesRoute route;

  public static final String SERIALIZED_NAME_VOLUMES = "Volumes";
  @SerializedName(SERIALIZED_NAME_VOLUMES)
  private List<String> volumes = new ArrayList<>();

  public ContainersGroupsPostRequiredAttributes() {
  }

  public ContainersGroupsPostRequiredAttributes autorecovery(String autorecovery) {
    this.autorecovery = autorecovery;
    return this;
  }

  /**
   * (Optional) Enable the Auto-recovery mode for your container group. If set to true, IBM Containers checks the health of each instance with an HTTP request to the port that is assigned. If the health check does not receive a TCP response from a container instance in two subsequent 90-second intervals, the instance is removed and replaced with a new instance. If set to false and container instances crash, they are not recovered by IBM Containers.
   * @return autorecovery
   */
  @javax.annotation.Nullable
  public String getAutorecovery() {
    return autorecovery;
  }

  public void setAutorecovery(String autorecovery) {
    this.autorecovery = autorecovery;
  }


  public ContainersGroupsPostRequiredAttributes bluemixApp(String bluemixApp) {
    this.bluemixApp = bluemixApp;
    return this;
  }

  /**
   * (Optional) The name of the Cloud Foundry app that you created in your organization space.
   * @return bluemixApp
   */
  @javax.annotation.Nullable
  public String getBluemixApp() {
    return bluemixApp;
  }

  public void setBluemixApp(String bluemixApp) {
    this.bluemixApp = bluemixApp;
  }


  public ContainersGroupsPostRequiredAttributes cmd(List<String> cmd) {
    this.cmd = cmd;
    return this;
  }

  public ContainersGroupsPostRequiredAttributes addCmdItem(String cmdItem) {
    if (this.cmd == null) {
      this.cmd = new ArrayList<>();
    }
    this.cmd.add(cmdItem);
    return this;
  }

  /**
   * (Optional) Docker command that is passed to the container group to be run when the container instances are started. This command must be a long-running command. Do not use a short-lived command, for example, /bin/date, because it might cause the container to crash.
   * @return cmd
   */
  @javax.annotation.Nullable
  public List<String> getCmd() {
    return cmd;
  }

  public void setCmd(List<String> cmd) {
    this.cmd = cmd;
  }


  public ContainersGroupsPostRequiredAttributes env(List<String> env) {
    this.env = env;
    return this;
  }

  public ContainersGroupsPostRequiredAttributes addEnvItem(String envItem) {
    if (this.env == null) {
      this.env = new ArrayList<>();
    }
    this.env.add(envItem);
    return this;
  }

  /**
   * (Optional) List of environmental variables. Every environment variable that is listed here needs to be a key&#x3D;value pair. Every key that you use needs to be unique for this container group. Multiple environment variables are separated with comma (,).
   * @return env
   */
  @javax.annotation.Nullable
  public List<String> getEnv() {
    return env;
  }

  public void setEnv(List<String> env) {
    this.env = env;
  }


  public ContainersGroupsPostRequiredAttributes image(String image) {
    this.image = image;
    return this;
  }

  /**
   * (Required) The full path to your private Bluemix repository. If you want to use an image in your private Bluemix repository, specify the image in the following format: registry.ng.bluemix.net/NAMESPACE/IMAGE. If you want to use an IBM Containers provided image, do not include your organization&#39;s namespace. Specify the image in the following format: registry.ng.bluemix.net/IMAGE
   * @return image
   */
  @javax.annotation.Nonnull
  public String getImage() {
    return image;
  }

  public void setImage(String image) {
    this.image = image;
  }


  public ContainersGroupsPostRequiredAttributes memory(Integer memory) {
    this.memory = memory;
    return this;
  }

  /**
   * (Optional) The size of each container instance in the container group. The size of each container instance in the group. Choose one of the following sizes and enter the size in MegaBytes: Pico 64 MB, Nano 128 MB, Micro 256 MB, Tiny 512 MB, Small 1 GB (1024 MB), Medium 2 GB (2048 MB), Large 4 GB (4096 MB) XLarge 8GB (8192 MB) and 2XLarge 16 GB (16384 MB). If you do not specify a size, all container instances in this group are created with 256 MB.
   * @return memory
   */
  @javax.annotation.Nullable
  public Integer getMemory() {
    return memory;
  }

  public void setMemory(Integer memory) {
    this.memory = memory;
  }


  public ContainersGroupsPostRequiredAttributes name(String name) {
    this.name = name;
    return this;
  }

  /**
   * (Required) Name of the container group that you want to create. The name needs to be unique in your organization space and must start with a letter. Then, you can include uppercase letters, lowercase letters, numbers, periods (.), underscores (_), or hyphens (-).
   * @return name
   */
  @javax.annotation.Nonnull
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public ContainersGroupsPostRequiredAttributes numberInstances(ContainersGroupsPostRequiredAttributesNumberInstances numberInstances) {
    this.numberInstances = numberInstances;
    return this;
  }

  /**
   * Get numberInstances
   * @return numberInstances
   */
  @javax.annotation.Nullable
  public ContainersGroupsPostRequiredAttributesNumberInstances getNumberInstances() {
    return numberInstances;
  }

  public void setNumberInstances(ContainersGroupsPostRequiredAttributesNumberInstances numberInstances) {
    this.numberInstances = numberInstances;
  }


  public ContainersGroupsPostRequiredAttributes port(Integer port) {
    this.port = port;
    return this;
  }

  /**
   * (Optional) Expose a port for HTTP traffic to make your container group available from the Internet. Every container instance that is started for this group, listens on this port. Container groups cannot expose multiple ports. Note: You need to expose a port, when \&quot;Autorecovery\&quot; is set to true.
   * @return port
   */
  @javax.annotation.Nullable
  public Integer getPort() {
    return port;
  }

  public void setPort(Integer port) {
    this.port = port;
  }


  public ContainersGroupsPostRequiredAttributes route(ContainersGroupsPostRequiredAttributesRoute route) {
    this.route = route;
    return this;
  }

  /**
   * Get route
   * @return route
   */
  @javax.annotation.Nullable
  public ContainersGroupsPostRequiredAttributesRoute getRoute() {
    return route;
  }

  public void setRoute(ContainersGroupsPostRequiredAttributesRoute route) {
    this.route = route;
  }


  public ContainersGroupsPostRequiredAttributes volumes(List<String> volumes) {
    this.volumes = volumes;
    return this;
  }

  public ContainersGroupsPostRequiredAttributes addVolumesItem(String volumesItem) {
    if (this.volumes == null) {
      this.volumes = new ArrayList<>();
    }
    this.volumes.add(volumesItem);
    return this;
  }

  /**
   * (Optional) List of volumes to be mounted to the container instances of your container group. You need to create the volume first by using the cf ic volume-create command before you can mount a volume to a container group. When you specify a volume, use the following format: NAME:PATH:MODE. For NAME, use either the name or ID of the volume. For the PATH, enter the absolute path to the volume directory in the container. For MODE, enter either ro (read-only) or rw (read-write).
   * @return volumes
   */
  @javax.annotation.Nullable
  public List<String> getVolumes() {
    return volumes;
  }

  public void setVolumes(List<String> volumes) {
    this.volumes = volumes;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ContainersGroupsPostRequiredAttributes containersGroupsPostRequiredAttributes = (ContainersGroupsPostRequiredAttributes) o;
    return Objects.equals(this.autorecovery, containersGroupsPostRequiredAttributes.autorecovery) &&
        Objects.equals(this.bluemixApp, containersGroupsPostRequiredAttributes.bluemixApp) &&
        Objects.equals(this.cmd, containersGroupsPostRequiredAttributes.cmd) &&
        Objects.equals(this.env, containersGroupsPostRequiredAttributes.env) &&
        Objects.equals(this.image, containersGroupsPostRequiredAttributes.image) &&
        Objects.equals(this.memory, containersGroupsPostRequiredAttributes.memory) &&
        Objects.equals(this.name, containersGroupsPostRequiredAttributes.name) &&
        Objects.equals(this.numberInstances, containersGroupsPostRequiredAttributes.numberInstances) &&
        Objects.equals(this.port, containersGroupsPostRequiredAttributes.port) &&
        Objects.equals(this.route, containersGroupsPostRequiredAttributes.route) &&
        Objects.equals(this.volumes, containersGroupsPostRequiredAttributes.volumes);
  }

  @Override
  public int hashCode() {
    return Objects.hash(autorecovery, bluemixApp, cmd, env, image, memory, name, numberInstances, port, route, volumes);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ContainersGroupsPostRequiredAttributes {\n");
    sb.append("    autorecovery: ").append(toIndentedString(autorecovery)).append("\n");
    sb.append("    bluemixApp: ").append(toIndentedString(bluemixApp)).append("\n");
    sb.append("    cmd: ").append(toIndentedString(cmd)).append("\n");
    sb.append("    env: ").append(toIndentedString(env)).append("\n");
    sb.append("    image: ").append(toIndentedString(image)).append("\n");
    sb.append("    memory: ").append(toIndentedString(memory)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    numberInstances: ").append(toIndentedString(numberInstances)).append("\n");
    sb.append("    port: ").append(toIndentedString(port)).append("\n");
    sb.append("    route: ").append(toIndentedString(route)).append("\n");
    sb.append("    volumes: ").append(toIndentedString(volumes)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("Autorecovery");
    openapiFields.add("BluemixApp");
    openapiFields.add("Cmd");
    openapiFields.add("Env");
    openapiFields.add("Image");
    openapiFields.add("Memory");
    openapiFields.add("Name");
    openapiFields.add("NumberInstances");
    openapiFields.add("Port");
    openapiFields.add("Route");
    openapiFields.add("Volumes");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("Image");
    openapiRequiredFields.add("Name");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ContainersGroupsPostRequiredAttributes
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ContainersGroupsPostRequiredAttributes.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ContainersGroupsPostRequiredAttributes is not found in the empty JSON string", ContainersGroupsPostRequiredAttributes.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ContainersGroupsPostRequiredAttributes.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ContainersGroupsPostRequiredAttributes` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : ContainersGroupsPostRequiredAttributes.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("Autorecovery") != null && !jsonObj.get("Autorecovery").isJsonNull()) && !jsonObj.get("Autorecovery").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Autorecovery` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Autorecovery").toString()));
      }
      if ((jsonObj.get("BluemixApp") != null && !jsonObj.get("BluemixApp").isJsonNull()) && !jsonObj.get("BluemixApp").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `BluemixApp` to be a primitive type in the JSON string but got `%s`", jsonObj.get("BluemixApp").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("Cmd") != null && !jsonObj.get("Cmd").isJsonNull() && !jsonObj.get("Cmd").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `Cmd` to be an array in the JSON string but got `%s`", jsonObj.get("Cmd").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("Env") != null && !jsonObj.get("Env").isJsonNull() && !jsonObj.get("Env").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `Env` to be an array in the JSON string but got `%s`", jsonObj.get("Env").toString()));
      }
      if (!jsonObj.get("Image").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Image` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Image").toString()));
      }
      if (!jsonObj.get("Name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Name").toString()));
      }
      // validate the optional field `NumberInstances`
      if (jsonObj.get("NumberInstances") != null && !jsonObj.get("NumberInstances").isJsonNull()) {
        ContainersGroupsPostRequiredAttributesNumberInstances.validateJsonElement(jsonObj.get("NumberInstances"));
      }
      // validate the optional field `Route`
      if (jsonObj.get("Route") != null && !jsonObj.get("Route").isJsonNull()) {
        ContainersGroupsPostRequiredAttributesRoute.validateJsonElement(jsonObj.get("Route"));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("Volumes") != null && !jsonObj.get("Volumes").isJsonNull() && !jsonObj.get("Volumes").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `Volumes` to be an array in the JSON string but got `%s`", jsonObj.get("Volumes").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ContainersGroupsPostRequiredAttributes.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ContainersGroupsPostRequiredAttributes' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ContainersGroupsPostRequiredAttributes> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ContainersGroupsPostRequiredAttributes.class));

       return (TypeAdapter<T>) new TypeAdapter<ContainersGroupsPostRequiredAttributes>() {
           @Override
           public void write(JsonWriter out, ContainersGroupsPostRequiredAttributes value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ContainersGroupsPostRequiredAttributes read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ContainersGroupsPostRequiredAttributes given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ContainersGroupsPostRequiredAttributes
   * @throws IOException if the JSON string is invalid with respect to ContainersGroupsPostRequiredAttributes
   */
  public static ContainersGroupsPostRequiredAttributes fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ContainersGroupsPostRequiredAttributes.class);
  }

  /**
   * Convert an instance of ContainersGroupsPostRequiredAttributes to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

