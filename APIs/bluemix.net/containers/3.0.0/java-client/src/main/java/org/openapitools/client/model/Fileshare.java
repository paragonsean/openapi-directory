/*
 * IBM Containers API
 * Containers are virtual software objects that include all the elements that an app needs to run. A container has the benefits of resource isolation and allocation but is more portable and efficient than, for example, a virtual machine.   This documentation describes the IBM Containers API, which is based on the Docker Remote API. The API provides endpoints that you can use to create and manage your single containers and container groups in Bluemix. Endpoints are summarized under the following tags:   - **Authentication**: Retrieve and refresh your TLS certificates.  - **Private Docker images registry**: Create your own private Docker images registry in Bluemix by setting a namespace for your organization.  - **Images**: View, build, and push your images to your private Bluemix registry so you can use them with IBM Containers. You can also scan your container images with the Vulnerability Advisor against standard policies set by the organization manager and a database of known Ubuntu issues.  - **Single Containers**: Create and manage single containers in Bluemix. Use a single container to implement short-lived processes or to run simple tests as you develop an app or service. To make your single container available from the internet, review the `Public IP addresses` endpoints.  - **Container Groups**: Create and manage your container groups in Bluemix. A container group consists of multiple single containers that are all created from the same container image and as a consequence are configured in the same way. Container groups offer further options at no cost to make your app highly available. These options include in-built load balancing, auto-recovery of unhealthy container instances, and auto-scaling of container instances based on CPU and memory usage. Map a public route to your container group to make your app accessible from the internet.   - **Public IP addresses**: Use these endpoints to request public IP addresses for your space. You can bind this IP address to your container to make your container accessible from the internet.  - **File shares**: Create, list and delete file shares in a space. A file share is a NFS storage system that hosts Docker volumes.   - **Volumes**: Create and manage container volumes in your space to persist the data of your containers.      Each API request requires an HTTP header that includes the 'X-Auth-Token’ and 'X-Auth-Project-Id’ parameter.   - **X-Auth-Token**: The JSON web token (JWT) that you receive when logging into the Bluemix platform. It allows you to use the IBM Containers REST API, access services, and resources. Run `cf oauth-token` to retrieve your access token information. - **X-Auth-Project-Id**: The unique ID of your organization space where you want to create or work with your containers. Run `cf space <space_name> --guid`, where `<space_name>` is the name of your space, to retrieve your space ID.    For further information about how containers work in the IBM Containers service, review the documentation under https://new-console.ng.bluemix.net/docs/containers/container_index.html. 
 *
 * The version of the OpenAPI document: 3.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Fileshare
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:31:48.582155-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Fileshare {
  public static final String SERIALIZED_NAME_CAPACITY = "capacity";
  @SerializedName(SERIALIZED_NAME_CAPACITY)
  private Integer capacity;

  public static final String SERIALIZED_NAME_CREATED_DATE = "created_date";
  @SerializedName(SERIALIZED_NAME_CREATED_DATE)
  private String createdDate;

  public static final String SERIALIZED_NAME_FS_NAME = "fsName";
  @SerializedName(SERIALIZED_NAME_FS_NAME)
  private String fsName;

  public static final String SERIALIZED_NAME_HOST_PATH = "hostPath";
  @SerializedName(SERIALIZED_NAME_HOST_PATH)
  private String hostPath;

  public static final String SERIALIZED_NAME_IOPS = "iops";
  @SerializedName(SERIALIZED_NAME_IOPS)
  private Double iops;

  public static final String SERIALIZED_NAME_IOPS_TOTAL = "iopsTotal";
  @SerializedName(SERIALIZED_NAME_IOPS_TOTAL)
  private Integer iopsTotal;

  public static final String SERIALIZED_NAME_ORDER_ID = "orderId";
  @SerializedName(SERIALIZED_NAME_ORDER_ID)
  private String orderId;

  public static final String SERIALIZED_NAME_PROVIDER = "provider";
  @SerializedName(SERIALIZED_NAME_PROVIDER)
  private String provider;

  public static final String SERIALIZED_NAME_SPACE_GUID = "spaceGuid";
  @SerializedName(SERIALIZED_NAME_SPACE_GUID)
  private String spaceGuid;

  public static final String SERIALIZED_NAME_STATE = "state";
  @SerializedName(SERIALIZED_NAME_STATE)
  private String state;

  public static final String SERIALIZED_NAME_UPDATED_DATE = "updated_date";
  @SerializedName(SERIALIZED_NAME_UPDATED_DATE)
  private String updatedDate;

  public Fileshare() {
  }

  public Fileshare capacity(Integer capacity) {
    this.capacity = capacity;
    return this;
  }

  /**
   * The size of the file share in gigabyte.
   * @return capacity
   */
  @javax.annotation.Nullable
  public Integer getCapacity() {
    return capacity;
  }

  public void setCapacity(Integer capacity) {
    this.capacity = capacity;
  }


  public Fileshare createdDate(String createdDate) {
    this.createdDate = createdDate;
    return this;
  }

  /**
   * The timestamp when the file share was created.
   * @return createdDate
   */
  @javax.annotation.Nullable
  public String getCreatedDate() {
    return createdDate;
  }

  public void setCreatedDate(String createdDate) {
    this.createdDate = createdDate;
  }


  public Fileshare fsName(String fsName) {
    this.fsName = fsName;
    return this;
  }

  /**
   * The name of the file share.
   * @return fsName
   */
  @javax.annotation.Nullable
  public String getFsName() {
    return fsName;
  }

  public void setFsName(String fsName) {
    this.fsName = fsName;
  }


  public Fileshare hostPath(String hostPath) {
    this.hostPath = hostPath;
    return this;
  }

  /**
   * The path to the volume on the host node.
   * @return hostPath
   */
  @javax.annotation.Nullable
  public String getHostPath() {
    return hostPath;
  }

  public void setHostPath(String hostPath) {
    this.hostPath = hostPath;
  }


  public Fileshare iops(Double iops) {
    this.iops = iops;
    return this;
  }

  /**
   * The number of Input/Output operations per second. 
   * @return iops
   */
  @javax.annotation.Nullable
  public Double getIops() {
    return iops;
  }

  public void setIops(Double iops) {
    this.iops = iops;
  }


  public Fileshare iopsTotal(Integer iopsTotal) {
    this.iopsTotal = iopsTotal;
    return this;
  }

  /**
   * The total number of IOPS considering the size of the file share. The size of your file share in gigabyte multiplied with the number of IOPS indicates the total number of IOPS. The higher the number of IOPS the faster you can read from and write to your volumes.
   * @return iopsTotal
   */
  @javax.annotation.Nullable
  public Integer getIopsTotal() {
    return iopsTotal;
  }

  public void setIopsTotal(Integer iopsTotal) {
    this.iopsTotal = iopsTotal;
  }


  public Fileshare orderId(String orderId) {
    this.orderId = orderId;
    return this;
  }

  /**
   * The ID received from softlayer when the file share was ordered to be set up in softlayer.
   * @return orderId
   */
  @javax.annotation.Nullable
  public String getOrderId() {
    return orderId;
  }

  public void setOrderId(String orderId) {
    this.orderId = orderId;
  }


  public Fileshare provider(String provider) {
    this.provider = provider;
    return this;
  }

  /**
   * The provider of the file share.
   * @return provider
   */
  @javax.annotation.Nullable
  public String getProvider() {
    return provider;
  }

  public void setProvider(String provider) {
    this.provider = provider;
  }


  public Fileshare spaceGuid(String spaceGuid) {
    this.spaceGuid = spaceGuid;
    return this;
  }

  /**
   * The unique ID representing a Bluemix space in which the file share was created.
   * @return spaceGuid
   */
  @javax.annotation.Nullable
  public String getSpaceGuid() {
    return spaceGuid;
  }

  public void setSpaceGuid(String spaceGuid) {
    this.spaceGuid = spaceGuid;
  }


  public Fileshare state(String state) {
    this.state = state;
    return this;
  }

  /**
   * The current state of the file share. When the file share is ready to be used, this attribute is set to &#x60;READY&#x60;.
   * @return state
   */
  @javax.annotation.Nullable
  public String getState() {
    return state;
  }

  public void setState(String state) {
    this.state = state;
  }


  public Fileshare updatedDate(String updatedDate) {
    this.updatedDate = updatedDate;
    return this;
  }

  /**
   * The timestamp when the file share last was updated.
   * @return updatedDate
   */
  @javax.annotation.Nullable
  public String getUpdatedDate() {
    return updatedDate;
  }

  public void setUpdatedDate(String updatedDate) {
    this.updatedDate = updatedDate;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Fileshare fileshare = (Fileshare) o;
    return Objects.equals(this.capacity, fileshare.capacity) &&
        Objects.equals(this.createdDate, fileshare.createdDate) &&
        Objects.equals(this.fsName, fileshare.fsName) &&
        Objects.equals(this.hostPath, fileshare.hostPath) &&
        Objects.equals(this.iops, fileshare.iops) &&
        Objects.equals(this.iopsTotal, fileshare.iopsTotal) &&
        Objects.equals(this.orderId, fileshare.orderId) &&
        Objects.equals(this.provider, fileshare.provider) &&
        Objects.equals(this.spaceGuid, fileshare.spaceGuid) &&
        Objects.equals(this.state, fileshare.state) &&
        Objects.equals(this.updatedDate, fileshare.updatedDate);
  }

  @Override
  public int hashCode() {
    return Objects.hash(capacity, createdDate, fsName, hostPath, iops, iopsTotal, orderId, provider, spaceGuid, state, updatedDate);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Fileshare {\n");
    sb.append("    capacity: ").append(toIndentedString(capacity)).append("\n");
    sb.append("    createdDate: ").append(toIndentedString(createdDate)).append("\n");
    sb.append("    fsName: ").append(toIndentedString(fsName)).append("\n");
    sb.append("    hostPath: ").append(toIndentedString(hostPath)).append("\n");
    sb.append("    iops: ").append(toIndentedString(iops)).append("\n");
    sb.append("    iopsTotal: ").append(toIndentedString(iopsTotal)).append("\n");
    sb.append("    orderId: ").append(toIndentedString(orderId)).append("\n");
    sb.append("    provider: ").append(toIndentedString(provider)).append("\n");
    sb.append("    spaceGuid: ").append(toIndentedString(spaceGuid)).append("\n");
    sb.append("    state: ").append(toIndentedString(state)).append("\n");
    sb.append("    updatedDate: ").append(toIndentedString(updatedDate)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("capacity");
    openapiFields.add("created_date");
    openapiFields.add("fsName");
    openapiFields.add("hostPath");
    openapiFields.add("iops");
    openapiFields.add("iopsTotal");
    openapiFields.add("orderId");
    openapiFields.add("provider");
    openapiFields.add("spaceGuid");
    openapiFields.add("state");
    openapiFields.add("updated_date");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Fileshare
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Fileshare.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Fileshare is not found in the empty JSON string", Fileshare.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Fileshare.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Fileshare` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("created_date") != null && !jsonObj.get("created_date").isJsonNull()) && !jsonObj.get("created_date").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `created_date` to be a primitive type in the JSON string but got `%s`", jsonObj.get("created_date").toString()));
      }
      if ((jsonObj.get("fsName") != null && !jsonObj.get("fsName").isJsonNull()) && !jsonObj.get("fsName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `fsName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("fsName").toString()));
      }
      if ((jsonObj.get("hostPath") != null && !jsonObj.get("hostPath").isJsonNull()) && !jsonObj.get("hostPath").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `hostPath` to be a primitive type in the JSON string but got `%s`", jsonObj.get("hostPath").toString()));
      }
      if ((jsonObj.get("orderId") != null && !jsonObj.get("orderId").isJsonNull()) && !jsonObj.get("orderId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `orderId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("orderId").toString()));
      }
      if ((jsonObj.get("provider") != null && !jsonObj.get("provider").isJsonNull()) && !jsonObj.get("provider").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `provider` to be a primitive type in the JSON string but got `%s`", jsonObj.get("provider").toString()));
      }
      if ((jsonObj.get("spaceGuid") != null && !jsonObj.get("spaceGuid").isJsonNull()) && !jsonObj.get("spaceGuid").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `spaceGuid` to be a primitive type in the JSON string but got `%s`", jsonObj.get("spaceGuid").toString()));
      }
      if ((jsonObj.get("state") != null && !jsonObj.get("state").isJsonNull()) && !jsonObj.get("state").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `state` to be a primitive type in the JSON string but got `%s`", jsonObj.get("state").toString()));
      }
      if ((jsonObj.get("updated_date") != null && !jsonObj.get("updated_date").isJsonNull()) && !jsonObj.get("updated_date").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `updated_date` to be a primitive type in the JSON string but got `%s`", jsonObj.get("updated_date").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Fileshare.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Fileshare' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Fileshare> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Fileshare.class));

       return (TypeAdapter<T>) new TypeAdapter<Fileshare>() {
           @Override
           public void write(JsonWriter out, Fileshare value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Fileshare read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Fileshare given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Fileshare
   * @throws IOException if the JSON string is invalid with respect to Fileshare
   */
  public static Fileshare fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Fileshare.class);
  }

  /**
   * Convert an instance of Fileshare to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

