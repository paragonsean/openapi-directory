/*
 * IBM Containers API
 * Containers are virtual software objects that include all the elements that an app needs to run. A container has the benefits of resource isolation and allocation but is more portable and efficient than, for example, a virtual machine.   This documentation describes the IBM Containers API, which is based on the Docker Remote API. The API provides endpoints that you can use to create and manage your single containers and container groups in Bluemix. Endpoints are summarized under the following tags:   - **Authentication**: Retrieve and refresh your TLS certificates.  - **Private Docker images registry**: Create your own private Docker images registry in Bluemix by setting a namespace for your organization.  - **Images**: View, build, and push your images to your private Bluemix registry so you can use them with IBM Containers. You can also scan your container images with the Vulnerability Advisor against standard policies set by the organization manager and a database of known Ubuntu issues.  - **Single Containers**: Create and manage single containers in Bluemix. Use a single container to implement short-lived processes or to run simple tests as you develop an app or service. To make your single container available from the internet, review the `Public IP addresses` endpoints.  - **Container Groups**: Create and manage your container groups in Bluemix. A container group consists of multiple single containers that are all created from the same container image and as a consequence are configured in the same way. Container groups offer further options at no cost to make your app highly available. These options include in-built load balancing, auto-recovery of unhealthy container instances, and auto-scaling of container instances based on CPU and memory usage. Map a public route to your container group to make your app accessible from the internet.   - **Public IP addresses**: Use these endpoints to request public IP addresses for your space. You can bind this IP address to your container to make your container accessible from the internet.  - **File shares**: Create, list and delete file shares in a space. A file share is a NFS storage system that hosts Docker volumes.   - **Volumes**: Create and manage container volumes in your space to persist the data of your containers.      Each API request requires an HTTP header that includes the 'X-Auth-Token’ and 'X-Auth-Project-Id’ parameter.   - **X-Auth-Token**: The JSON web token (JWT) that you receive when logging into the Bluemix platform. It allows you to use the IBM Containers REST API, access services, and resources. Run `cf oauth-token` to retrieve your access token information. - **X-Auth-Project-Id**: The unique ID of your organization space where you want to create or work with your containers. Run `cf space <space_name> --guid`, where `<space_name>` is the name of your space, to retrieve your space ID.    For further information about how containers work in the IBM Containers service, review the documentation under https://new-console.ng.bluemix.net/docs/containers/container_index.html. 
 *
 * The version of the OpenAPI document: 3.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.ContainersQuotaInfoOrgQuota;
import org.openapitools.client.model.ContainersQuotaInfoSpaceQuota;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * ContainersQuotaInfo
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:31:48.582155-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ContainersQuotaInfo {
  public static final String SERIALIZED_NAME_ACCOUNT_TYPE = "account_type";
  @SerializedName(SERIALIZED_NAME_ACCOUNT_TYPE)
  private String accountType;

  public static final String SERIALIZED_NAME_COUNTRY_CODE = "country_code";
  @SerializedName(SERIALIZED_NAME_COUNTRY_CODE)
  private String countryCode;

  public static final String SERIALIZED_NAME_ORG_QUOTA = "org_quota";
  @SerializedName(SERIALIZED_NAME_ORG_QUOTA)
  private ContainersQuotaInfoOrgQuota orgQuota;

  public static final String SERIALIZED_NAME_SPACE_QUOTA = "space_quota";
  @SerializedName(SERIALIZED_NAME_SPACE_QUOTA)
  private ContainersQuotaInfoSpaceQuota spaceQuota;

  public ContainersQuotaInfo() {
  }

  public ContainersQuotaInfo accountType(String accountType) {
    this.accountType = accountType;
    return this;
  }

  /**
   * The Bluemix account type indicating the quota limits and how the organization is billed.
   * @return accountType
   */
  @javax.annotation.Nullable
  public String getAccountType() {
    return accountType;
  }

  public void setAccountType(String accountType) {
    this.accountType = accountType;
  }


  public ContainersQuotaInfo countryCode(String countryCode) {
    this.countryCode = countryCode;
    return this;
  }

  /**
   * The country in which the account was opened.
   * @return countryCode
   */
  @javax.annotation.Nullable
  public String getCountryCode() {
    return countryCode;
  }

  public void setCountryCode(String countryCode) {
    this.countryCode = countryCode;
  }


  public ContainersQuotaInfo orgQuota(ContainersQuotaInfoOrgQuota orgQuota) {
    this.orgQuota = orgQuota;
    return this;
  }

  /**
   * Get orgQuota
   * @return orgQuota
   */
  @javax.annotation.Nullable
  public ContainersQuotaInfoOrgQuota getOrgQuota() {
    return orgQuota;
  }

  public void setOrgQuota(ContainersQuotaInfoOrgQuota orgQuota) {
    this.orgQuota = orgQuota;
  }


  public ContainersQuotaInfo spaceQuota(ContainersQuotaInfoSpaceQuota spaceQuota) {
    this.spaceQuota = spaceQuota;
    return this;
  }

  /**
   * Get spaceQuota
   * @return spaceQuota
   */
  @javax.annotation.Nullable
  public ContainersQuotaInfoSpaceQuota getSpaceQuota() {
    return spaceQuota;
  }

  public void setSpaceQuota(ContainersQuotaInfoSpaceQuota spaceQuota) {
    this.spaceQuota = spaceQuota;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ContainersQuotaInfo containersQuotaInfo = (ContainersQuotaInfo) o;
    return Objects.equals(this.accountType, containersQuotaInfo.accountType) &&
        Objects.equals(this.countryCode, containersQuotaInfo.countryCode) &&
        Objects.equals(this.orgQuota, containersQuotaInfo.orgQuota) &&
        Objects.equals(this.spaceQuota, containersQuotaInfo.spaceQuota);
  }

  @Override
  public int hashCode() {
    return Objects.hash(accountType, countryCode, orgQuota, spaceQuota);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ContainersQuotaInfo {\n");
    sb.append("    accountType: ").append(toIndentedString(accountType)).append("\n");
    sb.append("    countryCode: ").append(toIndentedString(countryCode)).append("\n");
    sb.append("    orgQuota: ").append(toIndentedString(orgQuota)).append("\n");
    sb.append("    spaceQuota: ").append(toIndentedString(spaceQuota)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("account_type");
    openapiFields.add("country_code");
    openapiFields.add("org_quota");
    openapiFields.add("space_quota");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ContainersQuotaInfo
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ContainersQuotaInfo.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ContainersQuotaInfo is not found in the empty JSON string", ContainersQuotaInfo.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ContainersQuotaInfo.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ContainersQuotaInfo` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("account_type") != null && !jsonObj.get("account_type").isJsonNull()) && !jsonObj.get("account_type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `account_type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("account_type").toString()));
      }
      if ((jsonObj.get("country_code") != null && !jsonObj.get("country_code").isJsonNull()) && !jsonObj.get("country_code").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `country_code` to be a primitive type in the JSON string but got `%s`", jsonObj.get("country_code").toString()));
      }
      // validate the optional field `org_quota`
      if (jsonObj.get("org_quota") != null && !jsonObj.get("org_quota").isJsonNull()) {
        ContainersQuotaInfoOrgQuota.validateJsonElement(jsonObj.get("org_quota"));
      }
      // validate the optional field `space_quota`
      if (jsonObj.get("space_quota") != null && !jsonObj.get("space_quota").isJsonNull()) {
        ContainersQuotaInfoSpaceQuota.validateJsonElement(jsonObj.get("space_quota"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ContainersQuotaInfo.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ContainersQuotaInfo' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ContainersQuotaInfo> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ContainersQuotaInfo.class));

       return (TypeAdapter<T>) new TypeAdapter<ContainersQuotaInfo>() {
           @Override
           public void write(JsonWriter out, ContainersQuotaInfo value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ContainersQuotaInfo read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ContainersQuotaInfo given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ContainersQuotaInfo
   * @throws IOException if the JSON string is invalid with respect to ContainersQuotaInfo
   */
  public static ContainersQuotaInfo fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ContainersQuotaInfo.class);
  }

  /**
   * Convert an instance of ContainersQuotaInfo to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

