/**
 * IBM Containers API
 * Containers are virtual software objects that include all the elements that an app needs to run. A container has the benefits of resource isolation and allocation but is more portable and efficient than, for example, a virtual machine.   This documentation describes the IBM Containers API, which is based on the Docker Remote API. The API provides endpoints that you can use to create and manage your single containers and container groups in Bluemix. Endpoints are summarized under the following tags:   - **Authentication**: Retrieve and refresh your TLS certificates.  - **Private Docker images registry**: Create your own private Docker images registry in Bluemix by setting a namespace for your organization.  - **Images**: View, build, and push your images to your private Bluemix registry so you can use them with IBM Containers. You can also scan your container images with the Vulnerability Advisor against standard policies set by the organization manager and a database of known Ubuntu issues.  - **Single Containers**: Create and manage single containers in Bluemix. Use a single container to implement short-lived processes or to run simple tests as you develop an app or service. To make your single container available from the internet, review the `Public IP addresses` endpoints.  - **Container Groups**: Create and manage your container groups in Bluemix. A container group consists of multiple single containers that are all created from the same container image and as a consequence are configured in the same way. Container groups offer further options at no cost to make your app highly available. These options include in-built load balancing, auto-recovery of unhealthy container instances, and auto-scaling of container instances based on CPU and memory usage. Map a public route to your container group to make your app accessible from the internet.   - **Public IP addresses**: Use these endpoints to request public IP addresses for your space. You can bind this IP address to your container to make your container accessible from the internet.  - **File shares**: Create, list and delete file shares in a space. A file share is a NFS storage system that hosts Docker volumes.   - **Volumes**: Create and manage container volumes in your space to persist the data of your containers.      Each API request requires an HTTP header that includes the 'X-Auth-Token’ and 'X-Auth-Project-Id’ parameter.   - **X-Auth-Token**: The JSON web token (JWT) that you receive when logging into the Bluemix platform. It allows you to use the IBM Containers REST API, access services, and resources. Run `cf oauth-token` to retrieve your access token information. - **X-Auth-Project-Id**: The unique ID of your organization space where you want to create or work with your containers. Run `cf space <space_name> --guid`, where `<space_name>` is the name of your space, to retrieve your space ID.    For further information about how containers work in the IBM Containers service, review the documentation under https://new-console.ng.bluemix.net/docs/containers/container_index.html. 
 *
 * The version of the OpenAPI document: 3.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import HostConfig from './HostConfig';

/**
 * The CreateContainer model module.
 * @module model/CreateContainer
 * @version 3.0.0
 */
class CreateContainer {
    /**
     * Constructs a new <code>CreateContainer</code>.
     * @alias module:model/CreateContainer
     * @param image {String} Full path to the image in your private Bluemix registry in the format `registry.ng.bluemix.net/namespace/image`. 
     */
    constructor(image) { 
        
        CreateContainer.initialize(this, image);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, image) { 
        obj['Image'] = image;
    }

    /**
     * Constructs a <code>CreateContainer</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/CreateContainer} obj Optional instance to populate.
     * @return {module:model/CreateContainer} The populated <code>CreateContainer</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new CreateContainer();

            if (data.hasOwnProperty('BluemixApp')) {
                obj['BluemixApp'] = ApiClient.convertToType(data['BluemixApp'], 'String');
            }
            if (data.hasOwnProperty('Cmd')) {
                obj['Cmd'] = ApiClient.convertToType(data['Cmd'], ['String']);
            }
            if (data.hasOwnProperty('Cpuset')) {
                obj['Cpuset'] = ApiClient.convertToType(data['Cpuset'], 'String');
            }
            if (data.hasOwnProperty('Env')) {
                obj['Env'] = ApiClient.convertToType(data['Env'], ['String']);
            }
            if (data.hasOwnProperty('ExposedPorts')) {
                obj['ExposedPorts'] = ApiClient.convertToType(data['ExposedPorts'], ['String']);
            }
            if (data.hasOwnProperty('HostConfig')) {
                obj['HostConfig'] = HostConfig.constructFromObject(data['HostConfig']);
            }
            if (data.hasOwnProperty('Image')) {
                obj['Image'] = ApiClient.convertToType(data['Image'], 'String');
            }
            if (data.hasOwnProperty('Memory')) {
                obj['Memory'] = ApiClient.convertToType(data['Memory'], 'Number');
            }
            if (data.hasOwnProperty('NumberCpus')) {
                obj['NumberCpus'] = ApiClient.convertToType(data['NumberCpus'], 'Number');
            }
            if (data.hasOwnProperty('Volumes')) {
                obj['Volumes'] = ApiClient.convertToType(data['Volumes'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>CreateContainer</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>CreateContainer</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of CreateContainer.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['BluemixApp'] && !(typeof data['BluemixApp'] === 'string' || data['BluemixApp'] instanceof String)) {
            throw new Error("Expected the field `BluemixApp` to be a primitive type in the JSON string but got " + data['BluemixApp']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['Cmd'])) {
            throw new Error("Expected the field `Cmd` to be an array in the JSON data but got " + data['Cmd']);
        }
        // ensure the json data is a string
        if (data['Cpuset'] && !(typeof data['Cpuset'] === 'string' || data['Cpuset'] instanceof String)) {
            throw new Error("Expected the field `Cpuset` to be a primitive type in the JSON string but got " + data['Cpuset']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['Env'])) {
            throw new Error("Expected the field `Env` to be an array in the JSON data but got " + data['Env']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['ExposedPorts'])) {
            throw new Error("Expected the field `ExposedPorts` to be an array in the JSON data but got " + data['ExposedPorts']);
        }
        // validate the optional field `HostConfig`
        if (data['HostConfig']) { // data not null
          HostConfig.validateJSON(data['HostConfig']);
        }
        // ensure the json data is a string
        if (data['Image'] && !(typeof data['Image'] === 'string' || data['Image'] instanceof String)) {
            throw new Error("Expected the field `Image` to be a primitive type in the JSON string but got " + data['Image']);
        }
        // ensure the json data is a string
        if (data['Volumes'] && !(typeof data['Volumes'] === 'string' || data['Volumes'] instanceof String)) {
            throw new Error("Expected the field `Volumes` to be a primitive type in the JSON string but got " + data['Volumes']);
        }

        return true;
    }


}

CreateContainer.RequiredProperties = ["Image"];

/**
 * The name of the Cloud Foundry app that you want to bind to your container. The Cloud Foundry app must be created in the same space where you want to create your container.
 * @member {String} BluemixApp
 */
CreateContainer.prototype['BluemixApp'] = undefined;

/**
 * The command and arguments in this list are passed to the container to be executed when the container is started. This command must be a long-running command. Do not use a short-lived command, for example, /bin/date, because it might cause the container to crash. <br>Sample long-running commands:<br>[\"ping\",\"localhost\"]<br>[\"tail\",\"-f\",\"/dev/null\"]<br>[\"sh\",\"-c\",\"while true; do date; sleep 20; done\"] 
 * @member {Array.<String>} Cmd
 */
CreateContainer.prototype['Cmd'] = undefined;

/**
 * Pins the container processes to a specific CPU core on the compute host. For example: 0 means that processes are executed on the first core only.
 * @member {String} Cpuset
 */
CreateContainer.prototype['Cpuset'] = undefined;

/**
 * A list of environment variables in the form of key=value pairs. All keys in this list have to be unique. List multiple keys separately and if you include quotation marks, include them around both the environment variable name and the value.
 * @member {Array.<String>} Env
 */
CreateContainer.prototype['Env'] = undefined;

/**
 * All public ports that need to be exposed for the container, so the container can be accessed from the Internet.
 * @member {Array.<String>} ExposedPorts
 */
CreateContainer.prototype['ExposedPorts'] = undefined;

/**
 * @member {module:model/HostConfig} HostConfig
 */
CreateContainer.prototype['HostConfig'] = undefined;

/**
 * Full path to the image in your private Bluemix registry in the format `registry.ng.bluemix.net/namespace/image`. 
 * @member {String} Image
 */
CreateContainer.prototype['Image'] = undefined;

/**
 * The container memory that is set for the container in Megabyte. Choose one of the following sizes: Pico 64 MB, Nano 128 MB, Micro 256 MB, Tiny 512 MB, Small 1 GB (1024 MB), Medium 2 GB (2048 MB), Large 4 GB (4096 MB) XLarge 8GB (8192 MB) and 2XLarge 16 GB (16384 MB).
 * @member {Number} Memory
 */
CreateContainer.prototype['Memory'] = undefined;

/**
 * Number of virtual CPUs that are allocated to the container.
 * @member {Number} NumberCpus
 */
CreateContainer.prototype['NumberCpus'] = undefined;

/**
 * Mount a volume to a container by specifying the details in the following format: `VOLUME_NAME:/DIRECTORY_PATH[:ro]`. Example: testvolume:/volumedata/temp:rw. By default, all volumes will be set up with read-write access inside the container (rw). If you wish to set up your volume with read-only access, enter `ro`.  Note: To mount a volume to a container, you must create the volume in your space first by using the `cf ic volume-create` command, or calling the `POST /volumes/create endpoint`.
 * @member {String} Volumes
 */
CreateContainer.prototype['Volumes'] = undefined;






export default CreateContainer;

