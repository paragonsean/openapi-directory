/**
 * IBM Containers API
 * Containers are virtual software objects that include all the elements that an app needs to run. A container has the benefits of resource isolation and allocation but is more portable and efficient than, for example, a virtual machine.   This documentation describes the IBM Containers API, which is based on the Docker Remote API. The API provides endpoints that you can use to create and manage your single containers and container groups in Bluemix. Endpoints are summarized under the following tags:   - **Authentication**: Retrieve and refresh your TLS certificates.  - **Private Docker images registry**: Create your own private Docker images registry in Bluemix by setting a namespace for your organization.  - **Images**: View, build, and push your images to your private Bluemix registry so you can use them with IBM Containers. You can also scan your container images with the Vulnerability Advisor against standard policies set by the organization manager and a database of known Ubuntu issues.  - **Single Containers**: Create and manage single containers in Bluemix. Use a single container to implement short-lived processes or to run simple tests as you develop an app or service. To make your single container available from the internet, review the `Public IP addresses` endpoints.  - **Container Groups**: Create and manage your container groups in Bluemix. A container group consists of multiple single containers that are all created from the same container image and as a consequence are configured in the same way. Container groups offer further options at no cost to make your app highly available. These options include in-built load balancing, auto-recovery of unhealthy container instances, and auto-scaling of container instances based on CPU and memory usage. Map a public route to your container group to make your app accessible from the internet.   - **Public IP addresses**: Use these endpoints to request public IP addresses for your space. You can bind this IP address to your container to make your container accessible from the internet.  - **File shares**: Create, list and delete file shares in a space. A file share is a NFS storage system that hosts Docker volumes.   - **Volumes**: Create and manage container volumes in your space to persist the data of your containers.      Each API request requires an HTTP header that includes the 'X-Auth-Token’ and 'X-Auth-Project-Id’ parameter.   - **X-Auth-Token**: The JSON web token (JWT) that you receive when logging into the Bluemix platform. It allows you to use the IBM Containers REST API, access services, and resources. Run `cf oauth-token` to retrieve your access token information. - **X-Auth-Project-Id**: The unique ID of your organization space where you want to create or work with your containers. Run `cf space <space_name> --guid`, where `<space_name>` is the name of your space, to retrieve your space ID.    For further information about how containers work in the IBM Containers service, review the documentation under https://new-console.ng.bluemix.net/docs/containers/container_index.html. 
 *
 * The version of the OpenAPI document: 3.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import ContainersGroupsPostRequiredAttributesNumberInstances from './ContainersGroupsPostRequiredAttributesNumberInstances';
import ContainersGroupsPostRequiredAttributesRoute from './ContainersGroupsPostRequiredAttributesRoute';

/**
 * The ContainersGroupsPostRequiredAttributes model module.
 * @module model/ContainersGroupsPostRequiredAttributes
 * @version 3.0.0
 */
class ContainersGroupsPostRequiredAttributes {
    /**
     * Constructs a new <code>ContainersGroupsPostRequiredAttributes</code>.
     * @alias module:model/ContainersGroupsPostRequiredAttributes
     * @param image {String} (Required) The full path to your private Bluemix repository. If you want to use an image in your private Bluemix repository, specify the image in the following format: registry.ng.bluemix.net/NAMESPACE/IMAGE. If you want to use an IBM Containers provided image, do not include your organization's namespace. Specify the image in the following format: registry.ng.bluemix.net/IMAGE
     * @param name {String} (Required) Name of the container group that you want to create. The name needs to be unique in your organization space and must start with a letter. Then, you can include uppercase letters, lowercase letters, numbers, periods (.), underscores (_), or hyphens (-).
     */
    constructor(image, name) { 
        
        ContainersGroupsPostRequiredAttributes.initialize(this, image, name);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, image, name) { 
        obj['Image'] = image;
        obj['Name'] = name;
    }

    /**
     * Constructs a <code>ContainersGroupsPostRequiredAttributes</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ContainersGroupsPostRequiredAttributes} obj Optional instance to populate.
     * @return {module:model/ContainersGroupsPostRequiredAttributes} The populated <code>ContainersGroupsPostRequiredAttributes</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ContainersGroupsPostRequiredAttributes();

            if (data.hasOwnProperty('Autorecovery')) {
                obj['Autorecovery'] = ApiClient.convertToType(data['Autorecovery'], 'String');
            }
            if (data.hasOwnProperty('BluemixApp')) {
                obj['BluemixApp'] = ApiClient.convertToType(data['BluemixApp'], 'String');
            }
            if (data.hasOwnProperty('Cmd')) {
                obj['Cmd'] = ApiClient.convertToType(data['Cmd'], ['String']);
            }
            if (data.hasOwnProperty('Env')) {
                obj['Env'] = ApiClient.convertToType(data['Env'], ['String']);
            }
            if (data.hasOwnProperty('Image')) {
                obj['Image'] = ApiClient.convertToType(data['Image'], 'String');
            }
            if (data.hasOwnProperty('Memory')) {
                obj['Memory'] = ApiClient.convertToType(data['Memory'], 'Number');
            }
            if (data.hasOwnProperty('Name')) {
                obj['Name'] = ApiClient.convertToType(data['Name'], 'String');
            }
            if (data.hasOwnProperty('NumberInstances')) {
                obj['NumberInstances'] = ContainersGroupsPostRequiredAttributesNumberInstances.constructFromObject(data['NumberInstances']);
            }
            if (data.hasOwnProperty('Port')) {
                obj['Port'] = ApiClient.convertToType(data['Port'], 'Number');
            }
            if (data.hasOwnProperty('Route')) {
                obj['Route'] = ContainersGroupsPostRequiredAttributesRoute.constructFromObject(data['Route']);
            }
            if (data.hasOwnProperty('Volumes')) {
                obj['Volumes'] = ApiClient.convertToType(data['Volumes'], ['String']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ContainersGroupsPostRequiredAttributes</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ContainersGroupsPostRequiredAttributes</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of ContainersGroupsPostRequiredAttributes.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['Autorecovery'] && !(typeof data['Autorecovery'] === 'string' || data['Autorecovery'] instanceof String)) {
            throw new Error("Expected the field `Autorecovery` to be a primitive type in the JSON string but got " + data['Autorecovery']);
        }
        // ensure the json data is a string
        if (data['BluemixApp'] && !(typeof data['BluemixApp'] === 'string' || data['BluemixApp'] instanceof String)) {
            throw new Error("Expected the field `BluemixApp` to be a primitive type in the JSON string but got " + data['BluemixApp']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['Cmd'])) {
            throw new Error("Expected the field `Cmd` to be an array in the JSON data but got " + data['Cmd']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['Env'])) {
            throw new Error("Expected the field `Env` to be an array in the JSON data but got " + data['Env']);
        }
        // ensure the json data is a string
        if (data['Image'] && !(typeof data['Image'] === 'string' || data['Image'] instanceof String)) {
            throw new Error("Expected the field `Image` to be a primitive type in the JSON string but got " + data['Image']);
        }
        // ensure the json data is a string
        if (data['Name'] && !(typeof data['Name'] === 'string' || data['Name'] instanceof String)) {
            throw new Error("Expected the field `Name` to be a primitive type in the JSON string but got " + data['Name']);
        }
        // validate the optional field `NumberInstances`
        if (data['NumberInstances']) { // data not null
          ContainersGroupsPostRequiredAttributesNumberInstances.validateJSON(data['NumberInstances']);
        }
        // validate the optional field `Route`
        if (data['Route']) { // data not null
          ContainersGroupsPostRequiredAttributesRoute.validateJSON(data['Route']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['Volumes'])) {
            throw new Error("Expected the field `Volumes` to be an array in the JSON data but got " + data['Volumes']);
        }

        return true;
    }


}

ContainersGroupsPostRequiredAttributes.RequiredProperties = ["Image", "Name"];

/**
 * (Optional) Enable the Auto-recovery mode for your container group. If set to true, IBM Containers checks the health of each instance with an HTTP request to the port that is assigned. If the health check does not receive a TCP response from a container instance in two subsequent 90-second intervals, the instance is removed and replaced with a new instance. If set to false and container instances crash, they are not recovered by IBM Containers.
 * @member {String} Autorecovery
 */
ContainersGroupsPostRequiredAttributes.prototype['Autorecovery'] = undefined;

/**
 * (Optional) The name of the Cloud Foundry app that you created in your organization space.
 * @member {String} BluemixApp
 */
ContainersGroupsPostRequiredAttributes.prototype['BluemixApp'] = undefined;

/**
 * (Optional) Docker command that is passed to the container group to be run when the container instances are started. This command must be a long-running command. Do not use a short-lived command, for example, /bin/date, because it might cause the container to crash.
 * @member {Array.<String>} Cmd
 */
ContainersGroupsPostRequiredAttributes.prototype['Cmd'] = undefined;

/**
 * (Optional) List of environmental variables. Every environment variable that is listed here needs to be a key=value pair. Every key that you use needs to be unique for this container group. Multiple environment variables are separated with comma (,).
 * @member {Array.<String>} Env
 */
ContainersGroupsPostRequiredAttributes.prototype['Env'] = undefined;

/**
 * (Required) The full path to your private Bluemix repository. If you want to use an image in your private Bluemix repository, specify the image in the following format: registry.ng.bluemix.net/NAMESPACE/IMAGE. If you want to use an IBM Containers provided image, do not include your organization's namespace. Specify the image in the following format: registry.ng.bluemix.net/IMAGE
 * @member {String} Image
 */
ContainersGroupsPostRequiredAttributes.prototype['Image'] = undefined;

/**
 * (Optional) The size of each container instance in the container group. The size of each container instance in the group. Choose one of the following sizes and enter the size in MegaBytes: Pico 64 MB, Nano 128 MB, Micro 256 MB, Tiny 512 MB, Small 1 GB (1024 MB), Medium 2 GB (2048 MB), Large 4 GB (4096 MB) XLarge 8GB (8192 MB) and 2XLarge 16 GB (16384 MB). If you do not specify a size, all container instances in this group are created with 256 MB.
 * @member {Number} Memory
 */
ContainersGroupsPostRequiredAttributes.prototype['Memory'] = undefined;

/**
 * (Required) Name of the container group that you want to create. The name needs to be unique in your organization space and must start with a letter. Then, you can include uppercase letters, lowercase letters, numbers, periods (.), underscores (_), or hyphens (-).
 * @member {String} Name
 */
ContainersGroupsPostRequiredAttributes.prototype['Name'] = undefined;

/**
 * @member {module:model/ContainersGroupsPostRequiredAttributesNumberInstances} NumberInstances
 */
ContainersGroupsPostRequiredAttributes.prototype['NumberInstances'] = undefined;

/**
 * (Optional) Expose a port for HTTP traffic to make your container group available from the Internet. Every container instance that is started for this group, listens on this port. Container groups cannot expose multiple ports. Note: You need to expose a port, when \"Autorecovery\" is set to true.
 * @member {Number} Port
 */
ContainersGroupsPostRequiredAttributes.prototype['Port'] = undefined;

/**
 * @member {module:model/ContainersGroupsPostRequiredAttributesRoute} Route
 */
ContainersGroupsPostRequiredAttributes.prototype['Route'] = undefined;

/**
 * (Optional) List of volumes to be mounted to the container instances of your container group. You need to create the volume first by using the cf ic volume-create command before you can mount a volume to a container group. When you specify a volume, use the following format: NAME:PATH:MODE. For NAME, use either the name or ID of the volume. For the PATH, enter the absolute path to the volume directory in the container. For MODE, enter either ro (read-only) or rw (read-write).
 * @member {Array.<String>} Volumes
 */
ContainersGroupsPostRequiredAttributes.prototype['Volumes'] = undefined;






export default ContainersGroupsPostRequiredAttributes;

