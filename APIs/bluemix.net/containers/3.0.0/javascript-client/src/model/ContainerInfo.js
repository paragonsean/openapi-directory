/**
 * IBM Containers API
 * Containers are virtual software objects that include all the elements that an app needs to run. A container has the benefits of resource isolation and allocation but is more portable and efficient than, for example, a virtual machine.   This documentation describes the IBM Containers API, which is based on the Docker Remote API. The API provides endpoints that you can use to create and manage your single containers and container groups in Bluemix. Endpoints are summarized under the following tags:   - **Authentication**: Retrieve and refresh your TLS certificates.  - **Private Docker images registry**: Create your own private Docker images registry in Bluemix by setting a namespace for your organization.  - **Images**: View, build, and push your images to your private Bluemix registry so you can use them with IBM Containers. You can also scan your container images with the Vulnerability Advisor against standard policies set by the organization manager and a database of known Ubuntu issues.  - **Single Containers**: Create and manage single containers in Bluemix. Use a single container to implement short-lived processes or to run simple tests as you develop an app or service. To make your single container available from the internet, review the `Public IP addresses` endpoints.  - **Container Groups**: Create and manage your container groups in Bluemix. A container group consists of multiple single containers that are all created from the same container image and as a consequence are configured in the same way. Container groups offer further options at no cost to make your app highly available. These options include in-built load balancing, auto-recovery of unhealthy container instances, and auto-scaling of container instances based on CPU and memory usage. Map a public route to your container group to make your app accessible from the internet.   - **Public IP addresses**: Use these endpoints to request public IP addresses for your space. You can bind this IP address to your container to make your container accessible from the internet.  - **File shares**: Create, list and delete file shares in a space. A file share is a NFS storage system that hosts Docker volumes.   - **Volumes**: Create and manage container volumes in your space to persist the data of your containers.      Each API request requires an HTTP header that includes the 'X-Auth-Token’ and 'X-Auth-Project-Id’ parameter.   - **X-Auth-Token**: The JSON web token (JWT) that you receive when logging into the Bluemix platform. It allows you to use the IBM Containers REST API, access services, and resources. Run `cf oauth-token` to retrieve your access token information. - **X-Auth-Project-Id**: The unique ID of your organization space where you want to create or work with your containers. Run `cf space <space_name> --guid`, where `<space_name>` is the name of your space, to retrieve your space ID.    For further information about how containers work in the IBM Containers service, review the documentation under https://new-console.ng.bluemix.net/docs/containers/container_index.html. 
 *
 * The version of the OpenAPI document: 3.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import ContainerConfig from './ContainerConfig';
import ContainerState from './ContainerState';
import Group from './Group';
import HostConfig from './HostConfig';
import NetworkSetting from './NetworkSetting';
import Volume from './Volume';

/**
 * The ContainerInfo model module.
 * @module model/ContainerInfo
 * @version 3.0.0
 */
class ContainerInfo {
    /**
     * Constructs a new <code>ContainerInfo</code>.
     * @alias module:model/ContainerInfo
     */
    constructor() { 
        
        ContainerInfo.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>ContainerInfo</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ContainerInfo} obj Optional instance to populate.
     * @return {module:model/ContainerInfo} The populated <code>ContainerInfo</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ContainerInfo();

            if (data.hasOwnProperty('BluemixApp')) {
                obj['BluemixApp'] = ApiClient.convertToType(data['BluemixApp'], 'String');
            }
            if (data.hasOwnProperty('BluemixServices')) {
                obj['BluemixServices'] = ApiClient.convertToType(data['BluemixServices'], 'String');
            }
            if (data.hasOwnProperty('Config')) {
                obj['Config'] = ContainerConfig.constructFromObject(data['Config']);
            }
            if (data.hasOwnProperty('ContainerState')) {
                obj['ContainerState'] = ApiClient.convertToType(data['ContainerState'], 'String');
            }
            if (data.hasOwnProperty('Created')) {
                obj['Created'] = ApiClient.convertToType(data['Created'], 'Date');
            }
            if (data.hasOwnProperty('Group')) {
                obj['Group'] = Group.constructFromObject(data['Group']);
            }
            if (data.hasOwnProperty('HostConfig')) {
                obj['HostConfig'] = HostConfig.constructFromObject(data['HostConfig']);
            }
            if (data.hasOwnProperty('HostId')) {
                obj['HostId'] = ApiClient.convertToType(data['HostId'], 'String');
            }
            if (data.hasOwnProperty('Human_Id')) {
                obj['Human_Id'] = ApiClient.convertToType(data['Human_Id'], 'String');
            }
            if (data.hasOwnProperty('Id')) {
                obj['Id'] = ApiClient.convertToType(data['Id'], 'String');
            }
            if (data.hasOwnProperty('Image')) {
                obj['Image'] = ApiClient.convertToType(data['Image'], 'String');
            }
            if (data.hasOwnProperty('Mounts')) {
                obj['Mounts'] = ApiClient.convertToType(data['Mounts'], ['String']);
            }
            if (data.hasOwnProperty('Name')) {
                obj['Name'] = ApiClient.convertToType(data['Name'], 'String');
            }
            if (data.hasOwnProperty('NetworkSettings')) {
                obj['NetworkSettings'] = NetworkSetting.constructFromObject(data['NetworkSettings']);
            }
            if (data.hasOwnProperty('Path')) {
                obj['Path'] = ApiClient.convertToType(data['Path'], 'String');
            }
            if (data.hasOwnProperty('ResolveConfPath')) {
                obj['ResolveConfPath'] = ApiClient.convertToType(data['ResolveConfPath'], 'String');
            }
            if (data.hasOwnProperty('State')) {
                obj['State'] = ContainerState.constructFromObject(data['State']);
            }
            if (data.hasOwnProperty('Volumes')) {
                obj['Volumes'] = Volume.constructFromObject(data['Volumes']);
            }
            if (data.hasOwnProperty('VolumesRW')) {
                obj['VolumesRW'] = ApiClient.convertToType(data['VolumesRW'], ['String']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ContainerInfo</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ContainerInfo</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['BluemixApp'] && !(typeof data['BluemixApp'] === 'string' || data['BluemixApp'] instanceof String)) {
            throw new Error("Expected the field `BluemixApp` to be a primitive type in the JSON string but got " + data['BluemixApp']);
        }
        // ensure the json data is a string
        if (data['BluemixServices'] && !(typeof data['BluemixServices'] === 'string' || data['BluemixServices'] instanceof String)) {
            throw new Error("Expected the field `BluemixServices` to be a primitive type in the JSON string but got " + data['BluemixServices']);
        }
        // validate the optional field `Config`
        if (data['Config']) { // data not null
          ContainerConfig.validateJSON(data['Config']);
        }
        // ensure the json data is a string
        if (data['ContainerState'] && !(typeof data['ContainerState'] === 'string' || data['ContainerState'] instanceof String)) {
            throw new Error("Expected the field `ContainerState` to be a primitive type in the JSON string but got " + data['ContainerState']);
        }
        // validate the optional field `Group`
        if (data['Group']) { // data not null
          Group.validateJSON(data['Group']);
        }
        // validate the optional field `HostConfig`
        if (data['HostConfig']) { // data not null
          HostConfig.validateJSON(data['HostConfig']);
        }
        // ensure the json data is a string
        if (data['HostId'] && !(typeof data['HostId'] === 'string' || data['HostId'] instanceof String)) {
            throw new Error("Expected the field `HostId` to be a primitive type in the JSON string but got " + data['HostId']);
        }
        // ensure the json data is a string
        if (data['Human_Id'] && !(typeof data['Human_Id'] === 'string' || data['Human_Id'] instanceof String)) {
            throw new Error("Expected the field `Human_Id` to be a primitive type in the JSON string but got " + data['Human_Id']);
        }
        // ensure the json data is a string
        if (data['Id'] && !(typeof data['Id'] === 'string' || data['Id'] instanceof String)) {
            throw new Error("Expected the field `Id` to be a primitive type in the JSON string but got " + data['Id']);
        }
        // ensure the json data is a string
        if (data['Image'] && !(typeof data['Image'] === 'string' || data['Image'] instanceof String)) {
            throw new Error("Expected the field `Image` to be a primitive type in the JSON string but got " + data['Image']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['Mounts'])) {
            throw new Error("Expected the field `Mounts` to be an array in the JSON data but got " + data['Mounts']);
        }
        // ensure the json data is a string
        if (data['Name'] && !(typeof data['Name'] === 'string' || data['Name'] instanceof String)) {
            throw new Error("Expected the field `Name` to be a primitive type in the JSON string but got " + data['Name']);
        }
        // validate the optional field `NetworkSettings`
        if (data['NetworkSettings']) { // data not null
          NetworkSetting.validateJSON(data['NetworkSettings']);
        }
        // ensure the json data is a string
        if (data['Path'] && !(typeof data['Path'] === 'string' || data['Path'] instanceof String)) {
            throw new Error("Expected the field `Path` to be a primitive type in the JSON string but got " + data['Path']);
        }
        // ensure the json data is a string
        if (data['ResolveConfPath'] && !(typeof data['ResolveConfPath'] === 'string' || data['ResolveConfPath'] instanceof String)) {
            throw new Error("Expected the field `ResolveConfPath` to be a primitive type in the JSON string but got " + data['ResolveConfPath']);
        }
        // validate the optional field `State`
        if (data['State']) { // data not null
          ContainerState.validateJSON(data['State']);
        }
        // validate the optional field `Volumes`
        if (data['Volumes']) { // data not null
          Volume.validateJSON(data['Volumes']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['VolumesRW'])) {
            throw new Error("Expected the field `VolumesRW` to be an array in the JSON data but got " + data['VolumesRW']);
        }

        return true;
    }


}



/**
 * The name of the Cloud Foundry app that was bound to the container during creation.
 * @member {String} BluemixApp
 */
ContainerInfo.prototype['BluemixApp'] = undefined;

/**
 * The name of the Bluemix service instance that was bound to the container during creation.
 * @member {String} BluemixServices
 */
ContainerInfo.prototype['BluemixServices'] = undefined;

/**
 * @member {module:model/ContainerConfig} Config
 */
ContainerInfo.prototype['Config'] = undefined;

/**
 * The current status of the container. This state can either be transient, such as BUILDING or NETWORKING, or non-transient, such as RUNNING, SHUTDOWN, CRASHED, or SUSPENDED.
 * @member {String} ContainerState
 */
ContainerInfo.prototype['ContainerState'] = undefined;

/**
 * The date and time the container was created.
 * @member {Date} Created
 */
ContainerInfo.prototype['Created'] = undefined;

/**
 * @member {module:model/Group} Group
 */
ContainerInfo.prototype['Group'] = undefined;

/**
 * @member {module:model/HostConfig} HostConfig
 */
ContainerInfo.prototype['HostConfig'] = undefined;

/**
 * The ID representing the physical compute host.
 * @member {String} HostId
 */
ContainerInfo.prototype['HostId'] = undefined;

/**
 * The name of the container. 
 * @member {String} Human_Id
 */
ContainerInfo.prototype['Human_Id'] = undefined;

/**
 * Unique identifier representing a container.
 * @member {String} Id
 */
ContainerInfo.prototype['Id'] = undefined;

/**
 * Unique identifier representing a container image.
 * @member {String} Image
 */
ContainerInfo.prototype['Image'] = undefined;

/**
 * A list of volumes that are mounted to the container.
 * @member {Array.<String>} Mounts
 */
ContainerInfo.prototype['Mounts'] = undefined;

/**
 * The name of the container.
 * @member {String} Name
 */
ContainerInfo.prototype['Name'] = undefined;

/**
 * @member {module:model/NetworkSetting} NetworkSettings
 */
ContainerInfo.prototype['NetworkSettings'] = undefined;

/**
 * The environment variable indicating the binary location.
 * @member {String} Path
 */
ContainerInfo.prototype['Path'] = undefined;

/**
 * Path to the resolve.conf file inside the container. The resolve.conf file is used to resolve the DNS servers.
 * @member {String} ResolveConfPath
 */
ContainerInfo.prototype['ResolveConfPath'] = undefined;

/**
 * @member {module:model/ContainerState} State
 */
ContainerInfo.prototype['State'] = undefined;

/**
 * @member {module:model/Volume} Volumes
 */
ContainerInfo.prototype['Volumes'] = undefined;

/**
 * LIst of volumes that is mounted to the container.
 * @member {Array.<String>} VolumesRW
 */
ContainerInfo.prototype['VolumesRW'] = undefined;






export default ContainerInfo;

