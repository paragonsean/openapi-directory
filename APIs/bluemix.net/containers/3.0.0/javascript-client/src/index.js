/**
 * IBM Containers API
 * Containers are virtual software objects that include all the elements that an app needs to run. A container has the benefits of resource isolation and allocation but is more portable and efficient than, for example, a virtual machine.   This documentation describes the IBM Containers API, which is based on the Docker Remote API. The API provides endpoints that you can use to create and manage your single containers and container groups in Bluemix. Endpoints are summarized under the following tags:   - **Authentication**: Retrieve and refresh your TLS certificates.  - **Private Docker images registry**: Create your own private Docker images registry in Bluemix by setting a namespace for your organization.  - **Images**: View, build, and push your images to your private Bluemix registry so you can use them with IBM Containers. You can also scan your container images with the Vulnerability Advisor against standard policies set by the organization manager and a database of known Ubuntu issues.  - **Single Containers**: Create and manage single containers in Bluemix. Use a single container to implement short-lived processes or to run simple tests as you develop an app or service. To make your single container available from the internet, review the `Public IP addresses` endpoints.  - **Container Groups**: Create and manage your container groups in Bluemix. A container group consists of multiple single containers that are all created from the same container image and as a consequence are configured in the same way. Container groups offer further options at no cost to make your app highly available. These options include in-built load balancing, auto-recovery of unhealthy container instances, and auto-scaling of container instances based on CPU and memory usage. Map a public route to your container group to make your app accessible from the internet.   - **Public IP addresses**: Use these endpoints to request public IP addresses for your space. You can bind this IP address to your container to make your container accessible from the internet.  - **File shares**: Create, list and delete file shares in a space. A file share is a NFS storage system that hosts Docker volumes.   - **Volumes**: Create and manage container volumes in your space to persist the data of your containers.      Each API request requires an HTTP header that includes the 'X-Auth-Token’ and 'X-Auth-Project-Id’ parameter.   - **X-Auth-Token**: The JSON web token (JWT) that you receive when logging into the Bluemix platform. It allows you to use the IBM Containers REST API, access services, and resources. Run `cf oauth-token` to retrieve your access token information. - **X-Auth-Project-Id**: The unique ID of your organization space where you want to create or work with your containers. Run `cf space <space_name> --guid`, where `<space_name>` is the name of your space, to retrieve your space ID.    For further information about how containers work in the IBM Containers service, review the documentation under https://new-console.ng.bluemix.net/docs/containers/container_index.html. 
 *
 * The version of the OpenAPI document: 3.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from './ApiClient';
import Binding from './model/Binding';
import Certificate from './model/Certificate';
import CertificateRefresh from './model/CertificateRefresh';
import Container from './model/Container';
import ContainerConfig from './model/ContainerConfig';
import ContainerId from './model/ContainerId';
import ContainerInfo from './model/ContainerInfo';
import ContainerState from './model/ContainerState';
import ContainersGroupsGetListItem from './model/ContainersGroupsGetListItem';
import ContainersGroupsNameOrIdGetDetails from './model/ContainersGroupsNameOrIdGetDetails';
import ContainersGroupsNameOrIdGetDetailsNumberInstances from './model/ContainersGroupsNameOrIdGetDetailsNumberInstances';
import ContainersGroupsNameOrIdGetDetailsRouteStatus from './model/ContainersGroupsNameOrIdGetDetailsRouteStatus';
import ContainersGroupsNameOrIdMaproutePostInfo from './model/ContainersGroupsNameOrIdMaproutePostInfo';
import ContainersGroupsNameOrIdPatchUpdatedInfo from './model/ContainersGroupsNameOrIdPatchUpdatedInfo';
import ContainersGroupsNameOrIdPatchUpdatedInfoNumberInstances from './model/ContainersGroupsNameOrIdPatchUpdatedInfoNumberInstances';
import ContainersGroupsPostCreatedInfo from './model/ContainersGroupsPostCreatedInfo';
import ContainersGroupsPostRequiredAttributes from './model/ContainersGroupsPostRequiredAttributes';
import ContainersGroupsPostRequiredAttributesNumberInstances from './model/ContainersGroupsPostRequiredAttributesNumberInstances';
import ContainersGroupsPostRequiredAttributesRoute from './model/ContainersGroupsPostRequiredAttributesRoute';
import ContainersMessagesGet200Response from './model/ContainersMessagesGet200Response';
import ContainersQuotaInfo from './model/ContainersQuotaInfo';
import ContainersQuotaInfoOrgQuota from './model/ContainersQuotaInfoOrgQuota';
import ContainersQuotaInfoSpaceQuota from './model/ContainersQuotaInfoSpaceQuota';
import ContainersQuotaList from './model/ContainersQuotaList';
import ContainersUsageInfo from './model/ContainersUsageInfo';
import ContainersUsageInfoAvailableSizes from './model/ContainersUsageInfoAvailableSizes';
import ContainersUsageInfoLimits from './model/ContainersUsageInfoLimits';
import ContainersUsageInfoUsage from './model/ContainersUsageInfoUsage';
import ContainersVersionGetInfo from './model/ContainersVersionGetInfo';
import ContainersVersionGetInfoBuildDetail from './model/ContainersVersionGetInfoBuildDetail';
import CreateContainer from './model/CreateContainer';
import Fileshare from './model/Fileshare';
import FileshareParam from './model/FileshareParam';
import FileshareUsage from './model/FileshareUsage';
import FloatingIP from './model/FloatingIP';
import GetContainerStatus from './model/GetContainerStatus';
import GetFileshareDetails from './model/GetFileshareDetails';
import Group from './model/Group';
import HostConfig from './model/HostConfig';
import ImageDetail from './model/ImageDetail';
import ImageDetailConfig from './model/ImageDetailConfig';
import ImageInfo from './model/ImageInfo';
import Namespace from './model/Namespace';
import Network from './model/Network';
import NetworkSetting from './model/NetworkSetting';
import Port from './model/Port';
import Route from './model/Route';
import UpdateVolume from './model/UpdateVolume';
import Volume from './model/Volume';
import APIInfoApi from './api/APIInfoApi';
import AuthenticationApi from './api/AuthenticationApi';
import ContainerGroupsApi from './api/ContainerGroupsApi';
import FileSharesApi from './api/FileSharesApi';
import ImagesApi from './api/ImagesApi';
import PrivateDockerImagesRegistryApi from './api/PrivateDockerImagesRegistryApi';
import PublicIPAddressesApi from './api/PublicIPAddressesApi';
import QuotaApi from './api/QuotaApi';
import SingleContainersApi from './api/SingleContainersApi';
import VolumesApi from './api/VolumesApi';


/**
* Containers are virtual software objects that include all the elements that an app needs to run. A container has the benefits of resource isolation and allocation but is more portable and efficient than, for example, a virtual machine.   This documentation describes the IBM Containers API, which is based on the Docker Remote API. The API provides endpoints that you can use to create and manage your single containers and container groups in Bluemix. Endpoints are summarized under the following tags:   - **Authentication**: Retrieve and refresh your TLS certificates.  - **Private Docker images registry**: Create your own private Docker images registry in Bluemix by setting a namespace for your organization.  - **Images**: View, build, and push your images to your private Bluemix registry so you can use them with IBM Containers. You can also scan your container images with the Vulnerability Advisor against standard policies set by the organization manager and a database of known Ubuntu issues.  - **Single Containers**: Create and manage single containers in Bluemix. Use a single container to implement short-lived processes or to run simple tests as you develop an app or service. To make your single container available from the internet, review the &#x60;Public IP addresses&#x60; endpoints.  - **Container Groups**: Create and manage your container groups in Bluemix. A container group consists of multiple single containers that are all created from the same container image and as a consequence are configured in the same way. Container groups offer further options at no cost to make your app highly available. These options include in-built load balancing, auto-recovery of unhealthy container instances, and auto-scaling of container instances based on CPU and memory usage. Map a public route to your container group to make your app accessible from the internet.   - **Public IP addresses**: Use these endpoints to request public IP addresses for your space. You can bind this IP address to your container to make your container accessible from the internet.  - **File shares**: Create, list and delete file shares in a space. A file share is a NFS storage system that hosts Docker volumes.   - **Volumes**: Create and manage container volumes in your space to persist the data of your containers.      Each API request requires an HTTP header that includes the &#39;X-Auth-Token’ and &#39;X-Auth-Project-Id’ parameter.   - **X-Auth-Token**: The JSON web token (JWT) that you receive when logging into the Bluemix platform. It allows you to use the IBM Containers REST API, access services, and resources. Run &#x60;cf oauth-token&#x60; to retrieve your access token information. - **X-Auth-Project-Id**: The unique ID of your organization space where you want to create or work with your containers. Run &#x60;cf space &lt;space_name&gt; --guid&#x60;, where &#x60;&lt;space_name&gt;&#x60; is the name of your space, to retrieve your space ID.    For further information about how containers work in the IBM Containers service, review the documentation under https://new-console.ng.bluemix.net/docs/containers/container_index.html. .<br>
* The <code>index</code> module provides access to constructors for all the classes which comprise the public API.
* <p>
* An AMD (recommended!) or CommonJS application will generally do something equivalent to the following:
* <pre>
* var IbmContainersApi = require('index'); // See note below*.
* var xxxSvc = new IbmContainersApi.XxxApi(); // Allocate the API class we're going to use.
* var yyyModel = new IbmContainersApi.Yyy(); // Construct a model instance.
* yyyModel.someProperty = 'someValue';
* ...
* var zzz = xxxSvc.doSomething(yyyModel); // Invoke the service.
* ...
* </pre>
* <em>*NOTE: For a top-level AMD script, use require(['index'], function(){...})
* and put the application logic within the callback function.</em>
* </p>
* <p>
* A non-AMD browser application (discouraged) might do something like this:
* <pre>
* var xxxSvc = new IbmContainersApi.XxxApi(); // Allocate the API class we're going to use.
* var yyy = new IbmContainersApi.Yyy(); // Construct a model instance.
* yyyModel.someProperty = 'someValue';
* ...
* var zzz = xxxSvc.doSomething(yyyModel); // Invoke the service.
* ...
* </pre>
* </p>
* @module index
* @version 3.0.0
*/
export {
    /**
     * The ApiClient constructor.
     * @property {module:ApiClient}
     */
    ApiClient,

    /**
     * The Binding model constructor.
     * @property {module:model/Binding}
     */
    Binding,

    /**
     * The Certificate model constructor.
     * @property {module:model/Certificate}
     */
    Certificate,

    /**
     * The CertificateRefresh model constructor.
     * @property {module:model/CertificateRefresh}
     */
    CertificateRefresh,

    /**
     * The Container model constructor.
     * @property {module:model/Container}
     */
    Container,

    /**
     * The ContainerConfig model constructor.
     * @property {module:model/ContainerConfig}
     */
    ContainerConfig,

    /**
     * The ContainerId model constructor.
     * @property {module:model/ContainerId}
     */
    ContainerId,

    /**
     * The ContainerInfo model constructor.
     * @property {module:model/ContainerInfo}
     */
    ContainerInfo,

    /**
     * The ContainerState model constructor.
     * @property {module:model/ContainerState}
     */
    ContainerState,

    /**
     * The ContainersGroupsGetListItem model constructor.
     * @property {module:model/ContainersGroupsGetListItem}
     */
    ContainersGroupsGetListItem,

    /**
     * The ContainersGroupsNameOrIdGetDetails model constructor.
     * @property {module:model/ContainersGroupsNameOrIdGetDetails}
     */
    ContainersGroupsNameOrIdGetDetails,

    /**
     * The ContainersGroupsNameOrIdGetDetailsNumberInstances model constructor.
     * @property {module:model/ContainersGroupsNameOrIdGetDetailsNumberInstances}
     */
    ContainersGroupsNameOrIdGetDetailsNumberInstances,

    /**
     * The ContainersGroupsNameOrIdGetDetailsRouteStatus model constructor.
     * @property {module:model/ContainersGroupsNameOrIdGetDetailsRouteStatus}
     */
    ContainersGroupsNameOrIdGetDetailsRouteStatus,

    /**
     * The ContainersGroupsNameOrIdMaproutePostInfo model constructor.
     * @property {module:model/ContainersGroupsNameOrIdMaproutePostInfo}
     */
    ContainersGroupsNameOrIdMaproutePostInfo,

    /**
     * The ContainersGroupsNameOrIdPatchUpdatedInfo model constructor.
     * @property {module:model/ContainersGroupsNameOrIdPatchUpdatedInfo}
     */
    ContainersGroupsNameOrIdPatchUpdatedInfo,

    /**
     * The ContainersGroupsNameOrIdPatchUpdatedInfoNumberInstances model constructor.
     * @property {module:model/ContainersGroupsNameOrIdPatchUpdatedInfoNumberInstances}
     */
    ContainersGroupsNameOrIdPatchUpdatedInfoNumberInstances,

    /**
     * The ContainersGroupsPostCreatedInfo model constructor.
     * @property {module:model/ContainersGroupsPostCreatedInfo}
     */
    ContainersGroupsPostCreatedInfo,

    /**
     * The ContainersGroupsPostRequiredAttributes model constructor.
     * @property {module:model/ContainersGroupsPostRequiredAttributes}
     */
    ContainersGroupsPostRequiredAttributes,

    /**
     * The ContainersGroupsPostRequiredAttributesNumberInstances model constructor.
     * @property {module:model/ContainersGroupsPostRequiredAttributesNumberInstances}
     */
    ContainersGroupsPostRequiredAttributesNumberInstances,

    /**
     * The ContainersGroupsPostRequiredAttributesRoute model constructor.
     * @property {module:model/ContainersGroupsPostRequiredAttributesRoute}
     */
    ContainersGroupsPostRequiredAttributesRoute,

    /**
     * The ContainersMessagesGet200Response model constructor.
     * @property {module:model/ContainersMessagesGet200Response}
     */
    ContainersMessagesGet200Response,

    /**
     * The ContainersQuotaInfo model constructor.
     * @property {module:model/ContainersQuotaInfo}
     */
    ContainersQuotaInfo,

    /**
     * The ContainersQuotaInfoOrgQuota model constructor.
     * @property {module:model/ContainersQuotaInfoOrgQuota}
     */
    ContainersQuotaInfoOrgQuota,

    /**
     * The ContainersQuotaInfoSpaceQuota model constructor.
     * @property {module:model/ContainersQuotaInfoSpaceQuota}
     */
    ContainersQuotaInfoSpaceQuota,

    /**
     * The ContainersQuotaList model constructor.
     * @property {module:model/ContainersQuotaList}
     */
    ContainersQuotaList,

    /**
     * The ContainersUsageInfo model constructor.
     * @property {module:model/ContainersUsageInfo}
     */
    ContainersUsageInfo,

    /**
     * The ContainersUsageInfoAvailableSizes model constructor.
     * @property {module:model/ContainersUsageInfoAvailableSizes}
     */
    ContainersUsageInfoAvailableSizes,

    /**
     * The ContainersUsageInfoLimits model constructor.
     * @property {module:model/ContainersUsageInfoLimits}
     */
    ContainersUsageInfoLimits,

    /**
     * The ContainersUsageInfoUsage model constructor.
     * @property {module:model/ContainersUsageInfoUsage}
     */
    ContainersUsageInfoUsage,

    /**
     * The ContainersVersionGetInfo model constructor.
     * @property {module:model/ContainersVersionGetInfo}
     */
    ContainersVersionGetInfo,

    /**
     * The ContainersVersionGetInfoBuildDetail model constructor.
     * @property {module:model/ContainersVersionGetInfoBuildDetail}
     */
    ContainersVersionGetInfoBuildDetail,

    /**
     * The CreateContainer model constructor.
     * @property {module:model/CreateContainer}
     */
    CreateContainer,

    /**
     * The Fileshare model constructor.
     * @property {module:model/Fileshare}
     */
    Fileshare,

    /**
     * The FileshareParam model constructor.
     * @property {module:model/FileshareParam}
     */
    FileshareParam,

    /**
     * The FileshareUsage model constructor.
     * @property {module:model/FileshareUsage}
     */
    FileshareUsage,

    /**
     * The FloatingIP model constructor.
     * @property {module:model/FloatingIP}
     */
    FloatingIP,

    /**
     * The GetContainerStatus model constructor.
     * @property {module:model/GetContainerStatus}
     */
    GetContainerStatus,

    /**
     * The GetFileshareDetails model constructor.
     * @property {module:model/GetFileshareDetails}
     */
    GetFileshareDetails,

    /**
     * The Group model constructor.
     * @property {module:model/Group}
     */
    Group,

    /**
     * The HostConfig model constructor.
     * @property {module:model/HostConfig}
     */
    HostConfig,

    /**
     * The ImageDetail model constructor.
     * @property {module:model/ImageDetail}
     */
    ImageDetail,

    /**
     * The ImageDetailConfig model constructor.
     * @property {module:model/ImageDetailConfig}
     */
    ImageDetailConfig,

    /**
     * The ImageInfo model constructor.
     * @property {module:model/ImageInfo}
     */
    ImageInfo,

    /**
     * The Namespace model constructor.
     * @property {module:model/Namespace}
     */
    Namespace,

    /**
     * The Network model constructor.
     * @property {module:model/Network}
     */
    Network,

    /**
     * The NetworkSetting model constructor.
     * @property {module:model/NetworkSetting}
     */
    NetworkSetting,

    /**
     * The Port model constructor.
     * @property {module:model/Port}
     */
    Port,

    /**
     * The Route model constructor.
     * @property {module:model/Route}
     */
    Route,

    /**
     * The UpdateVolume model constructor.
     * @property {module:model/UpdateVolume}
     */
    UpdateVolume,

    /**
     * The Volume model constructor.
     * @property {module:model/Volume}
     */
    Volume,

    /**
    * The APIInfoApi service constructor.
    * @property {module:api/APIInfoApi}
    */
    APIInfoApi,

    /**
    * The AuthenticationApi service constructor.
    * @property {module:api/AuthenticationApi}
    */
    AuthenticationApi,

    /**
    * The ContainerGroupsApi service constructor.
    * @property {module:api/ContainerGroupsApi}
    */
    ContainerGroupsApi,

    /**
    * The FileSharesApi service constructor.
    * @property {module:api/FileSharesApi}
    */
    FileSharesApi,

    /**
    * The ImagesApi service constructor.
    * @property {module:api/ImagesApi}
    */
    ImagesApi,

    /**
    * The PrivateDockerImagesRegistryApi service constructor.
    * @property {module:api/PrivateDockerImagesRegistryApi}
    */
    PrivateDockerImagesRegistryApi,

    /**
    * The PublicIPAddressesApi service constructor.
    * @property {module:api/PublicIPAddressesApi}
    */
    PublicIPAddressesApi,

    /**
    * The QuotaApi service constructor.
    * @property {module:api/QuotaApi}
    */
    QuotaApi,

    /**
    * The SingleContainersApi service constructor.
    * @property {module:api/SingleContainersApi}
    */
    SingleContainersApi,

    /**
    * The VolumesApi service constructor.
    * @property {module:api/VolumesApi}
    */
    VolumesApi
};
