/**
 * IBM Containers API
 * Containers are virtual software objects that include all the elements that an app needs to run. A container has the benefits of resource isolation and allocation but is more portable and efficient than, for example, a virtual machine.   This documentation describes the IBM Containers API, which is based on the Docker Remote API. The API provides endpoints that you can use to create and manage your single containers and container groups in Bluemix. Endpoints are summarized under the following tags:   - **Authentication**: Retrieve and refresh your TLS certificates.  - **Private Docker images registry**: Create your own private Docker images registry in Bluemix by setting a namespace for your organization.  - **Images**: View, build, and push your images to your private Bluemix registry so you can use them with IBM Containers. You can also scan your container images with the Vulnerability Advisor against standard policies set by the organization manager and a database of known Ubuntu issues.  - **Single Containers**: Create and manage single containers in Bluemix. Use a single container to implement short-lived processes or to run simple tests as you develop an app or service. To make your single container available from the internet, review the `Public IP addresses` endpoints.  - **Container Groups**: Create and manage your container groups in Bluemix. A container group consists of multiple single containers that are all created from the same container image and as a consequence are configured in the same way. Container groups offer further options at no cost to make your app highly available. These options include in-built load balancing, auto-recovery of unhealthy container instances, and auto-scaling of container instances based on CPU and memory usage. Map a public route to your container group to make your app accessible from the internet.   - **Public IP addresses**: Use these endpoints to request public IP addresses for your space. You can bind this IP address to your container to make your container accessible from the internet.  - **File shares**: Create, list and delete file shares in a space. A file share is a NFS storage system that hosts Docker volumes.   - **Volumes**: Create and manage container volumes in your space to persist the data of your containers.      Each API request requires an HTTP header that includes the 'X-Auth-Token’ and 'X-Auth-Project-Id’ parameter.   - **X-Auth-Token**: The JSON web token (JWT) that you receive when logging into the Bluemix platform. It allows you to use the IBM Containers REST API, access services, and resources. Run `cf oauth-token` to retrieve your access token information. - **X-Auth-Project-Id**: The unique ID of your organization space where you want to create or work with your containers. Run `cf space <space_name> --guid`, where `<space_name>` is the name of your space, to retrieve your space ID.    For further information about how containers work in the IBM Containers service, review the documentation under https://new-console.ng.bluemix.net/docs/containers/container_index.html. 
 *
 * The version of the OpenAPI document: 3.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import UpdateVolume from '../model/UpdateVolume';
import Volume from '../model/Volume';

/**
* Volumes service.
* @module api/VolumesApi
* @version 3.0.0
*/
export default class VolumesApi {

    /**
    * Constructs a new VolumesApi. 
    * @alias module:api/VolumesApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the volumesCreatePost operation.
     * @callback module:api/VolumesApi~volumesCreatePostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Volume} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a volume in a space
     * This endpoints creates a new volume in your space (corresponding IBM Containers command: `cf ic volume create VOLNAME`). A volume is used to persist and access app data between container restarts. Volumes are hosted on file shares that define the available actual storage in Bluemix and the number of input and output transactions per second (IOPS).    After you have created a volume, you must mount it to a container by using the `--volume` option in the `cf ic run` (single containers) or `cf ic group create` (container groups) command. You can also define the volume as part of the HTTP body and send a request to the `POST /containers/create` (single containers) or `POST /containers/groups` (container groups) endpoints.    Note: If you mount multiple containers in a space to the same volume, they share the data in the volume and can access them anytime. When a container is deleted, the associated volume is not removed.
     * @param {String} xAuthToken The Bluemix JSON web token that you receive when logging into Bluemix. Run `cf oauth-token` to retrieve your access token.
     * @param {String} xAuthProjectId The unique ID of your organization space where you want to create or work with your containers. Run `cf space <space_name> --guid`, where `<space_name>` is the name of your space, to retrieve your space ID.
     * @param {String} name The name of the volume. The name must be unique for a space and can contain uppercase letters, lowercase letters, numbers, underscores (_), and hyphens (-).
     * @param {Object} opts Optional parameters
     * @param {String} [fsName] The name of the file share that the volume is hosted on. File shares can have different storage sizes and IOPS based on the required workload. If this field is left blank, the volume is hosted on the default file share.
     * @param {module:api/VolumesApi~volumesCreatePostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Volume}
     */
    volumesCreatePost(xAuthToken, xAuthProjectId, name, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'xAuthToken' is set
      if (xAuthToken === undefined || xAuthToken === null) {
        throw new Error("Missing the required parameter 'xAuthToken' when calling volumesCreatePost");
      }
      // verify the required parameter 'xAuthProjectId' is set
      if (xAuthProjectId === undefined || xAuthProjectId === null) {
        throw new Error("Missing the required parameter 'xAuthProjectId' when calling volumesCreatePost");
      }
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling volumesCreatePost");
      }

      let pathParams = {
      };
      let queryParams = {
        'name': name,
        'fsName': opts['fsName']
      };
      let headerParams = {
        'X-Auth-Token': xAuthToken,
        'X-Auth-Project-Id': xAuthProjectId
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Volume;
      return this.apiClient.callApi(
        '/volumes/create', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the volumesJsonGet operation.
     * @callback module:api/VolumesApi~volumesJsonGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Volume>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List all volumes for a space
     * This endpoint returns a list of all volumes that are available in the given space (corresponding IBM Containers command: `cf ic volume list`).
     * @param {String} xAuthToken The Bluemix JSON web token that you receive when logging into Bluemix. Run `cf oauth-token` to retrieve your access token.
     * @param {String} xAuthProjectId The unique ID of your organization space where you want to create or work with your containers. Run `cf space <space_name> --guid`, where `<space_name>` is the name of your space, to retrieve your space ID.
     * @param {module:api/VolumesApi~volumesJsonGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Volume>}
     */
    volumesJsonGet(xAuthToken, xAuthProjectId, callback) {
      let postBody = null;
      // verify the required parameter 'xAuthToken' is set
      if (xAuthToken === undefined || xAuthToken === null) {
        throw new Error("Missing the required parameter 'xAuthToken' when calling volumesJsonGet");
      }
      // verify the required parameter 'xAuthProjectId' is set
      if (xAuthProjectId === undefined || xAuthProjectId === null) {
        throw new Error("Missing the required parameter 'xAuthProjectId' when calling volumesJsonGet");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Auth-Token': xAuthToken,
        'X-Auth-Project-Id': xAuthProjectId
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Volume];
      return this.apiClient.callApi(
        '/volumes/json', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the volumesNameDelete operation.
     * @callback module:api/VolumesApi~volumesNameDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a volume
     * Delete a volume with a given name from a space (corresponding IBM Containers command: `cf ic volume rm VOLNAME`). To delete a volume, all mounted containers must be unmounted first. After the volume is deleted, the data that are stored in the volume are lost. 
     * @param {String} xAuthToken The Bluemix JSON web token that you receive when logging into Bluemix. Run `cf oauth-token` to retrieve your access token.
     * @param {String} xAuthProjectId The unique ID of your organization space where you want to create or work with your containers. Run `cf space <space_name> --guid`, where `<space_name>` is the name of your space, to retrieve your space ID.
     * @param {String} name The name of the volume that you want to delete. Run `cf ic volume list` or call the `GET /volumes/json` endpoint to retrieve a list of all volumes that are available in your space.
     * @param {module:api/VolumesApi~volumesNameDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    volumesNameDelete(xAuthToken, xAuthProjectId, name, callback) {
      let postBody = null;
      // verify the required parameter 'xAuthToken' is set
      if (xAuthToken === undefined || xAuthToken === null) {
        throw new Error("Missing the required parameter 'xAuthToken' when calling volumesNameDelete");
      }
      // verify the required parameter 'xAuthProjectId' is set
      if (xAuthProjectId === undefined || xAuthProjectId === null) {
        throw new Error("Missing the required parameter 'xAuthProjectId' when calling volumesNameDelete");
      }
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling volumesNameDelete");
      }

      let pathParams = {
        'name': name
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Auth-Token': xAuthToken,
        'X-Auth-Project-Id': xAuthProjectId
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/volumes/{name}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the volumesNameJsonGet operation.
     * @callback module:api/VolumesApi~volumesNameJsonGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Volume} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve detailed information about a volume. 
     * Retrieve a detailed list of information about a volume that is identified by the volume name (corresponding IBM Containers command: `cf ic volume inspect VOLNAME`).
     * @param {String} xAuthToken The Bluemix JSON web token that you receive when logging into Bluemix. Run `cf oauth-token` to retrieve your access token.
     * @param {String} xAuthProjectId The unique ID of your organization space where you want to create or work with your containers. Run `cf space <space_name> --guid`, where `<space_name>` is the name of your space, to retrieve your space ID.
     * @param {String} name The name of the volume, for which you want to retrieve detailed information. Run `cf ic volume list` or call the `GET /volumes/json` endpoint to retrieve a list of all volumes that are available in your space.
     * @param {module:api/VolumesApi~volumesNameJsonGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Volume}
     */
    volumesNameJsonGet(xAuthToken, xAuthProjectId, name, callback) {
      let postBody = null;
      // verify the required parameter 'xAuthToken' is set
      if (xAuthToken === undefined || xAuthToken === null) {
        throw new Error("Missing the required parameter 'xAuthToken' when calling volumesNameJsonGet");
      }
      // verify the required parameter 'xAuthProjectId' is set
      if (xAuthProjectId === undefined || xAuthProjectId === null) {
        throw new Error("Missing the required parameter 'xAuthProjectId' when calling volumesNameJsonGet");
      }
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling volumesNameJsonGet");
      }

      let pathParams = {
        'name': name
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Auth-Token': xAuthToken,
        'X-Auth-Project-Id': xAuthProjectId
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Volume;
      return this.apiClient.callApi(
        '/volumes/{name}/json', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the volumesNamePost operation.
     * @callback module:api/VolumesApi~volumesNamePostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Volume} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Share a volume with another space
     * This endpoint provisions an existing volume that was created in one space to another space within the same organization. Single containers and container groups in each space can read and write to the shared volume. The volume remains owned by the original space it was created in, including management and billing. For example, the volume can be deleted from the original space only.
     * @param {String} xAuthToken The Bluemix JSON web token that you receive when logging into Bluemix. Run `cf oauth-token` to retrieve your access token.
     * @param {String} xAuthProjectId The unique ID of your organization space where you want to create or work with your containers. Run `cf space <space_name> --guid`, where `<space_name>` is the name of your space, to retrieve your space ID.
     * @param {String} name The name of the volume that you want to share with another space in your organization.
     * @param {module:model/UpdateVolume} updateVolume Input parameter that are required to provision an existing volume to a new space and to unprovision it from a space.
     * @param {module:api/VolumesApi~volumesNamePostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Volume}
     */
    volumesNamePost(xAuthToken, xAuthProjectId, name, updateVolume, callback) {
      let postBody = updateVolume;
      // verify the required parameter 'xAuthToken' is set
      if (xAuthToken === undefined || xAuthToken === null) {
        throw new Error("Missing the required parameter 'xAuthToken' when calling volumesNamePost");
      }
      // verify the required parameter 'xAuthProjectId' is set
      if (xAuthProjectId === undefined || xAuthProjectId === null) {
        throw new Error("Missing the required parameter 'xAuthProjectId' when calling volumesNamePost");
      }
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling volumesNamePost");
      }
      // verify the required parameter 'updateVolume' is set
      if (updateVolume === undefined || updateVolume === null) {
        throw new Error("Missing the required parameter 'updateVolume' when calling volumesNamePost");
      }

      let pathParams = {
        'name': name
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Auth-Token': xAuthToken,
        'X-Auth-Project-Id': xAuthProjectId
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Volume;
      return this.apiClient.callApi(
        '/volumes/{name}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
