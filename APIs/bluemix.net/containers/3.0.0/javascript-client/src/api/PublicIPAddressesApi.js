/**
 * IBM Containers API
 * Containers are virtual software objects that include all the elements that an app needs to run. A container has the benefits of resource isolation and allocation but is more portable and efficient than, for example, a virtual machine.   This documentation describes the IBM Containers API, which is based on the Docker Remote API. The API provides endpoints that you can use to create and manage your single containers and container groups in Bluemix. Endpoints are summarized under the following tags:   - **Authentication**: Retrieve and refresh your TLS certificates.  - **Private Docker images registry**: Create your own private Docker images registry in Bluemix by setting a namespace for your organization.  - **Images**: View, build, and push your images to your private Bluemix registry so you can use them with IBM Containers. You can also scan your container images with the Vulnerability Advisor against standard policies set by the organization manager and a database of known Ubuntu issues.  - **Single Containers**: Create and manage single containers in Bluemix. Use a single container to implement short-lived processes or to run simple tests as you develop an app or service. To make your single container available from the internet, review the `Public IP addresses` endpoints.  - **Container Groups**: Create and manage your container groups in Bluemix. A container group consists of multiple single containers that are all created from the same container image and as a consequence are configured in the same way. Container groups offer further options at no cost to make your app highly available. These options include in-built load balancing, auto-recovery of unhealthy container instances, and auto-scaling of container instances based on CPU and memory usage. Map a public route to your container group to make your app accessible from the internet.   - **Public IP addresses**: Use these endpoints to request public IP addresses for your space. You can bind this IP address to your container to make your container accessible from the internet.  - **File shares**: Create, list and delete file shares in a space. A file share is a NFS storage system that hosts Docker volumes.   - **Volumes**: Create and manage container volumes in your space to persist the data of your containers.      Each API request requires an HTTP header that includes the 'X-Auth-Token’ and 'X-Auth-Project-Id’ parameter.   - **X-Auth-Token**: The JSON web token (JWT) that you receive when logging into the Bluemix platform. It allows you to use the IBM Containers REST API, access services, and resources. Run `cf oauth-token` to retrieve your access token information. - **X-Auth-Project-Id**: The unique ID of your organization space where you want to create or work with your containers. Run `cf space <space_name> --guid`, where `<space_name>` is the name of your space, to retrieve your space ID.    For further information about how containers work in the IBM Containers service, review the documentation under https://new-console.ng.bluemix.net/docs/containers/container_index.html. 
 *
 * The version of the OpenAPI document: 3.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import FloatingIP from '../model/FloatingIP';

/**
* PublicIPAddresses service.
* @module api/PublicIPAddressesApi
* @version 3.0.0
*/
export default class PublicIPAddressesApi {

    /**
    * Constructs a new PublicIPAddressesApi. 
    * @alias module:api/PublicIPAddressesApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the containersFloatingIpsGet operation.
     * @callback module:api/PublicIPAddressesApi~containersFloatingIpsGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/FloatingIP>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List available public IP addresses in a space
     * This endpoint returns a list of all public IP addresses that are allocated to a space and not bound to a container. If you want to list all public IP addresses that are allocated to a space, even those that are already bound to a container, use the `all` query parameter (corrsponding IBM Containers command: `cf ic ip list`).
     * @param {String} xAuthToken The Bluemix JSON web token that you receive when logging into Bluemix. Run `cf oauth-token` to retrieve your access token.
     * @param {String} xAuthProjectId The unique ID of your organization space where you want to create or work with your containers. Run `cf space <space_name> --guid`, where `<space_name>` is the name of your space, to retrieve your space ID.
     * @param {Object} opts Optional parameters
     * @param {Boolean} [all] If this option is set to `all=1`, `all=True`, or `all=true`, all public IP addresses that are allocated to a space are returned. If this option is set to `all=0`, `all=False`, or `all=false`, only available public IP addresses that are allocated but not bound to a container are returned. By default, only available public IP addresses are returned.
     * @param {module:api/PublicIPAddressesApi~containersFloatingIpsGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/FloatingIP>}
     */
    containersFloatingIpsGet(xAuthToken, xAuthProjectId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'xAuthToken' is set
      if (xAuthToken === undefined || xAuthToken === null) {
        throw new Error("Missing the required parameter 'xAuthToken' when calling containersFloatingIpsGet");
      }
      // verify the required parameter 'xAuthProjectId' is set
      if (xAuthProjectId === undefined || xAuthProjectId === null) {
        throw new Error("Missing the required parameter 'xAuthProjectId' when calling containersFloatingIpsGet");
      }

      let pathParams = {
      };
      let queryParams = {
        'all': opts['all']
      };
      let headerParams = {
        'X-Auth-Token': xAuthToken,
        'X-Auth-Project-Id': xAuthProjectId
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [FloatingIP];
      return this.apiClient.callApi(
        '/containers/floating-ips', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the containersFloatingIpsIpReleasePost operation.
     * @callback module:api/PublicIPAddressesApi~containersFloatingIpsIpReleasePostCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Release public IP address
     * This endpoint releases a public IP address from a space (corresponding IBM Containers command: `cf ic ip release <ip_adress>`). The public IP address is no longer allocated to the space. If a container was bound to the IP address, it is automatically unbound.
     * @param {String} xAuthToken The Bluemix JSON web token that you receive when logging into Bluemix. Run `cf oauth-token` to retrieve your access token.
     * @param {String} xAuthProjectId The unique ID of your organization space where you want to create or work with your containers. Run `cf space <space_name> --guid`, where `<space_name>` is the name of your space, to retrieve your space ID.
     * @param {String} ip The public IP address that you want to release. Run `cf ic ip list` or call the `GET /containers/floating-ips?all=true` endpoint to review all public IP address that are allocated to your space. After a public IP address is released, it will no longer be allocated to your space.
     * @param {module:api/PublicIPAddressesApi~containersFloatingIpsIpReleasePostCallback} callback The callback function, accepting three arguments: error, data, response
     */
    containersFloatingIpsIpReleasePost(xAuthToken, xAuthProjectId, ip, callback) {
      let postBody = null;
      // verify the required parameter 'xAuthToken' is set
      if (xAuthToken === undefined || xAuthToken === null) {
        throw new Error("Missing the required parameter 'xAuthToken' when calling containersFloatingIpsIpReleasePost");
      }
      // verify the required parameter 'xAuthProjectId' is set
      if (xAuthProjectId === undefined || xAuthProjectId === null) {
        throw new Error("Missing the required parameter 'xAuthProjectId' when calling containersFloatingIpsIpReleasePost");
      }
      // verify the required parameter 'ip' is set
      if (ip === undefined || ip === null) {
        throw new Error("Missing the required parameter 'ip' when calling containersFloatingIpsIpReleasePost");
      }

      let pathParams = {
        'ip': ip
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Auth-Token': xAuthToken,
        'X-Auth-Project-Id': xAuthProjectId
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/containers/floating-ips/{ip}/release', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the containersFloatingIpsRequestPost operation.
     * @callback module:api/PublicIPAddressesApi~containersFloatingIpsRequestPostCallback
     * @param {String} error Error message, if any.
     * @param {String} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Request a public IP address for a space
     * This endpoint requests a new public IP address for a space (corresponding IBM Containers command: `cf ic ip request`). The number of public IP addresses depends on the quota that is assigned to the space. If there is not enough quota left to request a new public IP address, you can either contact your organization manager to increase the quota, or unbind an existing IP address from a container by running `cf ic ip unbind <ip_adress> <container>` command, or  calling the `POST /container/{name_or_id}/floating-ips/{ip}/unbind` endpoint.
     * @param {String} xAuthToken The Bluemix JSON web token that you receive when logging into Bluemix. Run `cf oauth-token` to retrieve your access token.
     * @param {String} xAuthProjectId The unique ID of your organization space where you want to create or work with your containers. Run `cf space <space_name> --guid`, where `<space_name>` is the name of your space, to retrieve your space ID.
     * @param {module:api/PublicIPAddressesApi~containersFloatingIpsRequestPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link String}
     */
    containersFloatingIpsRequestPost(xAuthToken, xAuthProjectId, callback) {
      let postBody = null;
      // verify the required parameter 'xAuthToken' is set
      if (xAuthToken === undefined || xAuthToken === null) {
        throw new Error("Missing the required parameter 'xAuthToken' when calling containersFloatingIpsRequestPost");
      }
      // verify the required parameter 'xAuthProjectId' is set
      if (xAuthProjectId === undefined || xAuthProjectId === null) {
        throw new Error("Missing the required parameter 'xAuthProjectId' when calling containersFloatingIpsRequestPost");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Auth-Token': xAuthToken,
        'X-Auth-Project-Id': xAuthProjectId
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = 'String';
      return this.apiClient.callApi(
        '/containers/floating-ips/request', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the containersNameOrIdFloatingIpsIpBindPost operation.
     * @callback module:api/PublicIPAddressesApi~containersNameOrIdFloatingIpsIpBindPostCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Bind a public IP address to a single container
     * This endpoint binds an available public IP address to a single container (corresponding IBM Containers command: `cf ic ip bind <ip_adress> <container>`). After a container is bound to a public IP address, it can be accessed at `https://<public_ip_adress>:<public_port>`.
     * @param {String} xAuthToken The Bluemix JSON web token that you receive when logging into Bluemix. Run `cf oauth-token` to retrieve your access token.
     * @param {String} xAuthProjectId The unique ID of your organization space where you want to create or work with your containers. Run `cf space <space_name> --guid`, where `<space_name>` is the name of your space, to retrieve your space ID.
     * @param {String} nameOrId The name or ID of the container that you want to bind to the public IP address. Run the `cf ic ps` command or call the `GET /containers/json` endpoint to retrieve a list of containers in your space.
     * @param {String} ip The public IP address that you want to bind to your container.   Note: The public IP address must be available in the space and not bound to a container. Run `cf ic ip list` or call the `GET /containers/floating-ips` endpoint.
     * @param {module:api/PublicIPAddressesApi~containersNameOrIdFloatingIpsIpBindPostCallback} callback The callback function, accepting three arguments: error, data, response
     */
    containersNameOrIdFloatingIpsIpBindPost(xAuthToken, xAuthProjectId, nameOrId, ip, callback) {
      let postBody = null;
      // verify the required parameter 'xAuthToken' is set
      if (xAuthToken === undefined || xAuthToken === null) {
        throw new Error("Missing the required parameter 'xAuthToken' when calling containersNameOrIdFloatingIpsIpBindPost");
      }
      // verify the required parameter 'xAuthProjectId' is set
      if (xAuthProjectId === undefined || xAuthProjectId === null) {
        throw new Error("Missing the required parameter 'xAuthProjectId' when calling containersNameOrIdFloatingIpsIpBindPost");
      }
      // verify the required parameter 'nameOrId' is set
      if (nameOrId === undefined || nameOrId === null) {
        throw new Error("Missing the required parameter 'nameOrId' when calling containersNameOrIdFloatingIpsIpBindPost");
      }
      // verify the required parameter 'ip' is set
      if (ip === undefined || ip === null) {
        throw new Error("Missing the required parameter 'ip' when calling containersNameOrIdFloatingIpsIpBindPost");
      }

      let pathParams = {
        'name_or_id': nameOrId,
        'ip': ip
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Auth-Token': xAuthToken,
        'X-Auth-Project-Id': xAuthProjectId
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/containers/{name_or_id}/floating-ips/{ip}/bind', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the containersNameOrIdFloatingIpsIpUnbindPost operation.
     * @callback module:api/PublicIPAddressesApi~containersNameOrIdFloatingIpsIpUnbindPostCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Unbind a public IP address from a container
     * This endpoint unbinds a public IP address from a container (corresponding IBM Containers command: `cf ic ip unbind <ip_adress> <container>`). The container that is unbound from the IP address will not be accessible from the internet anymore. The public IP address will be further allocated to the space and can be used to be bound to other containers. 
     * @param {String} xAuthToken The Bluemix JSON web token that you receive when logging into Bluemix. Run `cf oauth-token` to retrieve your access token.
     * @param {String} xAuthProjectId The unique ID of your organization space where you want to create or work with your containers. Run `cf space <space_name> --guid`, where `<space_name>` is the name of your space, to retrieve your space ID.
     * @param {String} nameOrId The name or ID of the container that you want to bind to the public IP address. Run the `cf ic ps` command or call the `GET /containers/json` endpoint to retrieve a list of containers in your space. 
     * @param {String} ip The public IP address that you want to unbind from your container.    Note: After unbinding a public IP address, this IP address will still be allocated to the space and can be used to be bound to other containers.
     * @param {module:api/PublicIPAddressesApi~containersNameOrIdFloatingIpsIpUnbindPostCallback} callback The callback function, accepting three arguments: error, data, response
     */
    containersNameOrIdFloatingIpsIpUnbindPost(xAuthToken, xAuthProjectId, nameOrId, ip, callback) {
      let postBody = null;
      // verify the required parameter 'xAuthToken' is set
      if (xAuthToken === undefined || xAuthToken === null) {
        throw new Error("Missing the required parameter 'xAuthToken' when calling containersNameOrIdFloatingIpsIpUnbindPost");
      }
      // verify the required parameter 'xAuthProjectId' is set
      if (xAuthProjectId === undefined || xAuthProjectId === null) {
        throw new Error("Missing the required parameter 'xAuthProjectId' when calling containersNameOrIdFloatingIpsIpUnbindPost");
      }
      // verify the required parameter 'nameOrId' is set
      if (nameOrId === undefined || nameOrId === null) {
        throw new Error("Missing the required parameter 'nameOrId' when calling containersNameOrIdFloatingIpsIpUnbindPost");
      }
      // verify the required parameter 'ip' is set
      if (ip === undefined || ip === null) {
        throw new Error("Missing the required parameter 'ip' when calling containersNameOrIdFloatingIpsIpUnbindPost");
      }

      let pathParams = {
        'name_or_id': nameOrId,
        'ip': ip
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Auth-Token': xAuthToken,
        'X-Auth-Project-Id': xAuthProjectId
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/containers/{name_or_id}/floating-ips/{ip}/unbind', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
