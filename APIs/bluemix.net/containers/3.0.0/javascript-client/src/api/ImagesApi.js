/**
 * IBM Containers API
 * Containers are virtual software objects that include all the elements that an app needs to run. A container has the benefits of resource isolation and allocation but is more portable and efficient than, for example, a virtual machine.   This documentation describes the IBM Containers API, which is based on the Docker Remote API. The API provides endpoints that you can use to create and manage your single containers and container groups in Bluemix. Endpoints are summarized under the following tags:   - **Authentication**: Retrieve and refresh your TLS certificates.  - **Private Docker images registry**: Create your own private Docker images registry in Bluemix by setting a namespace for your organization.  - **Images**: View, build, and push your images to your private Bluemix registry so you can use them with IBM Containers. You can also scan your container images with the Vulnerability Advisor against standard policies set by the organization manager and a database of known Ubuntu issues.  - **Single Containers**: Create and manage single containers in Bluemix. Use a single container to implement short-lived processes or to run simple tests as you develop an app or service. To make your single container available from the internet, review the `Public IP addresses` endpoints.  - **Container Groups**: Create and manage your container groups in Bluemix. A container group consists of multiple single containers that are all created from the same container image and as a consequence are configured in the same way. Container groups offer further options at no cost to make your app highly available. These options include in-built load balancing, auto-recovery of unhealthy container instances, and auto-scaling of container instances based on CPU and memory usage. Map a public route to your container group to make your app accessible from the internet.   - **Public IP addresses**: Use these endpoints to request public IP addresses for your space. You can bind this IP address to your container to make your container accessible from the internet.  - **File shares**: Create, list and delete file shares in a space. A file share is a NFS storage system that hosts Docker volumes.   - **Volumes**: Create and manage container volumes in your space to persist the data of your containers.      Each API request requires an HTTP header that includes the 'X-Auth-Token’ and 'X-Auth-Project-Id’ parameter.   - **X-Auth-Token**: The JSON web token (JWT) that you receive when logging into the Bluemix platform. It allows you to use the IBM Containers REST API, access services, and resources. Run `cf oauth-token` to retrieve your access token information. - **X-Auth-Project-Id**: The unique ID of your organization space where you want to create or work with your containers. Run `cf space <space_name> --guid`, where `<space_name>` is the name of your space, to retrieve your space ID.    For further information about how containers work in the IBM Containers service, review the documentation under https://new-console.ng.bluemix.net/docs/containers/container_index.html. 
 *
 * The version of the OpenAPI document: 3.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import ImageDetail from '../model/ImageDetail';
import ImageInfo from '../model/ImageInfo';

/**
* Images service.
* @module api/ImagesApi
* @version 3.0.0
*/
export default class ImagesApi {

    /**
    * Constructs a new ImagesApi. 
    * @alias module:api/ImagesApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the buildPost operation.
     * @callback module:api/ImagesApi~buildPostCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Build a Docker image from a Dockerfile
     * This API builds a new container image from a Dockerfile that is stored on your local machine and pushes the image to the private Bluemix registry (corresponding IBM Containers command: `cf ic build`).   To push an image to your Bluemix registry, a namespace must be set for the organization. Run `cf ic namespace get` or call the `GET /registry/namespaces` API to check if a namespace is already set. If not, run `cf ic namespace set NAMESPACE` or call the `PUT /registry/namespaces/{namespace}` API to set a namespace for your organization.
     * @param {String} xAuthToken The Bluemix JSON web token that you receive when logging into Bluemix. Run `cf oauth-token` to retrieve your access token.
     * @param {String} xAuthProjectId The unique ID of your organization space where you want to create or work with your containers. Run `cf space <space_name> --guid`, where `<space_name>` is the name of your space, to retrieve your space ID.
     * @param {String} t Tag the image with the full path to your private Bluemix registry in the following format: `t=registry.ng.bluemix.net/<namespace>/<image_name>:<tag>`. This path is used to push the image to the private Bluemix registry after it is built.
     * @param {File} body Must be the content of a tar archive compressed with gzip. The archive must include a file called 'Dockerfile' at its root. It may include any number of other files which will be accessible in the build context.
     * @param {Object} opts Optional parameters
     * @param {Boolean} [q] You can choose whether or not to show the verbose build output to review every step during the container image build. If you set the query parameter to `q=false`, `q=False`, or `q=0`, the verbose build output is suppressed. To show the verbose build output, enter `q=true`, `q=True`, or `q=1`.
     * @param {Boolean} [nocache] If you set the query parameter to `nocache=true`, `nocache=True`, or `nocache=1`, the cache will not be used to build your image. To use the cache, enter `nocache=false`, `nocache=False`, or `nocache=0`.
     * @param {Boolean} [pull] If set to pull=true, pull=True, or pull=1, then a newer version of the image is always attempted to be pulled even though an older version of the image exists locally. If set to pull=false, pull=False, or pull=0, then the local image will be used if one exists.
     * @param {module:api/ImagesApi~buildPostCallback} callback The callback function, accepting three arguments: error, data, response
     */
    buildPost(xAuthToken, xAuthProjectId, t, body, opts, callback) {
      opts = opts || {};
      let postBody = body;
      // verify the required parameter 'xAuthToken' is set
      if (xAuthToken === undefined || xAuthToken === null) {
        throw new Error("Missing the required parameter 'xAuthToken' when calling buildPost");
      }
      // verify the required parameter 'xAuthProjectId' is set
      if (xAuthProjectId === undefined || xAuthProjectId === null) {
        throw new Error("Missing the required parameter 'xAuthProjectId' when calling buildPost");
      }
      // verify the required parameter 't' is set
      if (t === undefined || t === null) {
        throw new Error("Missing the required parameter 't' when calling buildPost");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling buildPost");
      }

      let pathParams = {
      };
      let queryParams = {
        't': t,
        'q': opts['q'],
        'nocache': opts['nocache'],
        'pull': opts['pull']
      };
      let headerParams = {
        'X-Auth-Token': xAuthToken,
        'X-Auth-Project-Id': xAuthProjectId
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/tar'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/build', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the imagesIdDelete operation.
     * @callback module:api/ImagesApi~imagesIdDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Remove a Docker image.
     * Remove a Docker image from the private Bluemix registry that is identified by the image ID (corresponding IBM Containers command: `cf ic rmi <image>`).
     * @param {String} xAuthToken The Bluemix JSON web token that you receive when logging into Bluemix. Run `cf oauth-token` to retrieve your access token.
     * @param {String} xAuthProjectId The unique ID of your organization space where you want to create or work with your containers. Run `cf space <space_name> --guid`, where `<space_name>` is the name of your space, to retrieve your space ID.
     * @param {String} id The unique identifier representing a Docker image. Run `cf ic images`, or call the `GET /images/json` endpoint to review the Docker images that are available in your private Bluemix registry.
     * @param {module:api/ImagesApi~imagesIdDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    imagesIdDelete(xAuthToken, xAuthProjectId, id, callback) {
      let postBody = null;
      // verify the required parameter 'xAuthToken' is set
      if (xAuthToken === undefined || xAuthToken === null) {
        throw new Error("Missing the required parameter 'xAuthToken' when calling imagesIdDelete");
      }
      // verify the required parameter 'xAuthProjectId' is set
      if (xAuthProjectId === undefined || xAuthProjectId === null) {
        throw new Error("Missing the required parameter 'xAuthProjectId' when calling imagesIdDelete");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling imagesIdDelete");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Auth-Token': xAuthToken,
        'X-Auth-Project-Id': xAuthProjectId
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/images/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the imagesJsonGet operation.
     * @callback module:api/ImagesApi~imagesJsonGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ImageInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List all Docker images that are available in your private Bluemix registry.
     * This endpoint returns a list of all available Docker images in a private Bluemix registry (corresponding IBM Containers command: `cf ic images`.
     * @param {String} xAuthToken The Bluemix JSON web token that you receive when logging into Bluemix. Run `cf oauth-token` to retrieve your access token.
     * @param {String} xAuthProjectId The unique ID of your organization space where you want to create or work with your containers. Run `cf space <space_name> --guid`, where `<space_name>` is the name of your space, to retrieve your space ID.
     * @param {module:api/ImagesApi~imagesJsonGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ImageInfo}
     */
    imagesJsonGet(xAuthToken, xAuthProjectId, callback) {
      let postBody = null;
      // verify the required parameter 'xAuthToken' is set
      if (xAuthToken === undefined || xAuthToken === null) {
        throw new Error("Missing the required parameter 'xAuthToken' when calling imagesJsonGet");
      }
      // verify the required parameter 'xAuthProjectId' is set
      if (xAuthProjectId === undefined || xAuthProjectId === null) {
        throw new Error("Missing the required parameter 'xAuthProjectId' when calling imagesJsonGet");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Auth-Token': xAuthToken,
        'X-Auth-Project-Id': xAuthProjectId
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ImageInfo;
      return this.apiClient.callApi(
        '/images/json', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the imagesNameOrIdJsonGet operation.
     * @callback module:api/ImagesApi~imagesNameOrIdJsonGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ImageDetail} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Inspect a Docker image in private Bluemix registry
     * This endpoint returns detailed information about a Docker image that is stored in the private Bluemix registry of an organization (corresponding IBM Containers command: `cf ic inspect <image_name_or_id>`).
     * @param {String} xAuthToken The Bluemix JSON web token that you receive when logging into Bluemix. Run `cf oauth-token` to retrieve your access token.
     * @param {String} xAuthProjectId The unique ID of your organization space where you want to create or work with your containers. Run `cf space <space_name> --guid`, where `<space_name>` is the name of your space, to retrieve your space ID.
     * @param {String} nameOrId The full private Bluemix registry path to your image or the unique ID of the image that you want to inspect. Run `cf ic images` or call the `GET /images/json` endpoint to review the images in your private Bluemix registry. 
     * @param {module:api/ImagesApi~imagesNameOrIdJsonGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ImageDetail}
     */
    imagesNameOrIdJsonGet(xAuthToken, xAuthProjectId, nameOrId, callback) {
      let postBody = null;
      // verify the required parameter 'xAuthToken' is set
      if (xAuthToken === undefined || xAuthToken === null) {
        throw new Error("Missing the required parameter 'xAuthToken' when calling imagesNameOrIdJsonGet");
      }
      // verify the required parameter 'xAuthProjectId' is set
      if (xAuthProjectId === undefined || xAuthProjectId === null) {
        throw new Error("Missing the required parameter 'xAuthProjectId' when calling imagesNameOrIdJsonGet");
      }
      // verify the required parameter 'nameOrId' is set
      if (nameOrId === undefined || nameOrId === null) {
        throw new Error("Missing the required parameter 'nameOrId' when calling imagesNameOrIdJsonGet");
      }

      let pathParams = {
        'name_or_id': nameOrId
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Auth-Token': xAuthToken,
        'X-Auth-Project-Id': xAuthProjectId
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ImageDetail;
      return this.apiClient.callApi(
        '/images/{name_or_id}/json', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
