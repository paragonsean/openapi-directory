/**
 * IBM Containers API
 * Containers are virtual software objects that include all the elements that an app needs to run. A container has the benefits of resource isolation and allocation but is more portable and efficient than, for example, a virtual machine.   This documentation describes the IBM Containers API, which is based on the Docker Remote API. The API provides endpoints that you can use to create and manage your single containers and container groups in Bluemix. Endpoints are summarized under the following tags:   - **Authentication**: Retrieve and refresh your TLS certificates.  - **Private Docker images registry**: Create your own private Docker images registry in Bluemix by setting a namespace for your organization.  - **Images**: View, build, and push your images to your private Bluemix registry so you can use them with IBM Containers. You can also scan your container images with the Vulnerability Advisor against standard policies set by the organization manager and a database of known Ubuntu issues.  - **Single Containers**: Create and manage single containers in Bluemix. Use a single container to implement short-lived processes or to run simple tests as you develop an app or service. To make your single container available from the internet, review the `Public IP addresses` endpoints.  - **Container Groups**: Create and manage your container groups in Bluemix. A container group consists of multiple single containers that are all created from the same container image and as a consequence are configured in the same way. Container groups offer further options at no cost to make your app highly available. These options include in-built load balancing, auto-recovery of unhealthy container instances, and auto-scaling of container instances based on CPU and memory usage. Map a public route to your container group to make your app accessible from the internet.   - **Public IP addresses**: Use these endpoints to request public IP addresses for your space. You can bind this IP address to your container to make your container accessible from the internet.  - **File shares**: Create, list and delete file shares in a space. A file share is a NFS storage system that hosts Docker volumes.   - **Volumes**: Create and manage container volumes in your space to persist the data of your containers.      Each API request requires an HTTP header that includes the 'X-Auth-Token’ and 'X-Auth-Project-Id’ parameter.   - **X-Auth-Token**: The JSON web token (JWT) that you receive when logging into the Bluemix platform. It allows you to use the IBM Containers REST API, access services, and resources. Run `cf oauth-token` to retrieve your access token information. - **X-Auth-Project-Id**: The unique ID of your organization space where you want to create or work with your containers. Run `cf space <space_name> --guid`, where `<space_name>` is the name of your space, to retrieve your space ID.    For further information about how containers work in the IBM Containers service, review the documentation under https://new-console.ng.bluemix.net/docs/containers/container_index.html. 
 *
 * The version of the OpenAPI document: 3.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import Container from '../model/Container';
import ContainerId from '../model/ContainerId';
import ContainerInfo from '../model/ContainerInfo';
import CreateContainer from '../model/CreateContainer';
import GetContainerStatus from '../model/GetContainerStatus';

/**
* SingleContainers service.
* @module api/SingleContainersApi
* @version 3.0.0
*/
export default class SingleContainersApi {

    /**
    * Constructs a new SingleContainersApi. 
    * @alias module:api/SingleContainersApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the containersCreatePost operation.
     * @callback module:api/SingleContainersApi~containersCreatePostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ContainerId} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create and start a single container
     * This endpoint creates and starts a single container in your space based on the Docker image that is specified in the Image field of the request json. A single container in IBM Containers is similar to a container that you create in your local Docker environment. Single containers are a good way to start with IBM Containers and to learn about how containers work in the IBM Cloud and the features that IBM Containers provides. They are also recommended when you want to run simple app tests or during the development process of an app.    In the Docker API there are two separate APIs to create and start a container. However in IBM Containers a container is created and started in a single API call. Therefore, this API merges parameters from the Docker API to create and start container.    To create a container with IBM Containers, you must at least define the image that the container is based on.  - Image: You must include the full path to the image in your private Bluemix registry in the format: `registry.ng.bluemix.net/<namespace>/<image>`.
     * @param {String} xAuthToken The Bluemix JSON web token that you receive when logging into Bluemix. Run `cf oauth-token` to retrieve your access token.
     * @param {String} xAuthProjectId The unique ID of your organization space where you want to create or work with your containers. Run `cf space <space_name> --guid`, where `<space_name>` is the name of your space, to retrieve your space ID.
     * @param {module:model/CreateContainer} createContainer Summary of input parameter to create a container in IBM Containers.
     * @param {Object} opts Optional parameters
     * @param {String} [name] Choose a name for your container. The characters in the name can include uppercase letters, lowercase letters, numbers, periods (.), underscores (_), or hyphens (-), but the name must start with a letter.
     * @param {module:api/SingleContainersApi~containersCreatePostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ContainerId}
     */
    containersCreatePost(xAuthToken, xAuthProjectId, createContainer, opts, callback) {
      opts = opts || {};
      let postBody = createContainer;
      // verify the required parameter 'xAuthToken' is set
      if (xAuthToken === undefined || xAuthToken === null) {
        throw new Error("Missing the required parameter 'xAuthToken' when calling containersCreatePost");
      }
      // verify the required parameter 'xAuthProjectId' is set
      if (xAuthProjectId === undefined || xAuthProjectId === null) {
        throw new Error("Missing the required parameter 'xAuthProjectId' when calling containersCreatePost");
      }
      // verify the required parameter 'createContainer' is set
      if (createContainer === undefined || createContainer === null) {
        throw new Error("Missing the required parameter 'createContainer' when calling containersCreatePost");
      }

      let pathParams = {
      };
      let queryParams = {
        'name': opts['name']
      };
      let headerParams = {
        'X-Auth-Token': xAuthToken,
        'X-Auth-Project-Id': xAuthProjectId
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ContainerId;
      return this.apiClient.callApi(
        '/containers/create', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the containersIdStatusGet operation.
     * @callback module:api/SingleContainersApi~containersIdStatusGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetContainerStatus} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List the current state of a container.
     * This endpoint returns the current state of a container. This state can either be a transient state, such as BUILDING and NETWORKING, or a non-transient state, such as RUNNING, SHUTDOWN, CRASHED, or SUSPENDED.
     * @param {String} xAuthToken The Bluemix JSON web token that you receive when logging into Bluemix. Run `cf oauth-token` to retrieve your access token.
     * @param {String} xAuthProjectId The unique ID of your organization space where you want to create or work with your containers. Run `cf space <space_name> --guid`, where `<space_name>` is the name of your space, to retrieve your space ID.
     * @param {String} id The unique identifier that represents the container. Run `cf ic ps`, or call the `GET /containers/json` endpoint to retrieve the ID of the container.
     * @param {module:api/SingleContainersApi~containersIdStatusGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetContainerStatus}
     */
    containersIdStatusGet(xAuthToken, xAuthProjectId, id, callback) {
      let postBody = null;
      // verify the required parameter 'xAuthToken' is set
      if (xAuthToken === undefined || xAuthToken === null) {
        throw new Error("Missing the required parameter 'xAuthToken' when calling containersIdStatusGet");
      }
      // verify the required parameter 'xAuthProjectId' is set
      if (xAuthProjectId === undefined || xAuthProjectId === null) {
        throw new Error("Missing the required parameter 'xAuthProjectId' when calling containersIdStatusGet");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling containersIdStatusGet");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Auth-Token': xAuthToken,
        'X-Auth-Project-Id': xAuthProjectId
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GetContainerStatus;
      return this.apiClient.callApi(
        '/containers/{id}/status', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the containersJsonGet operation.
     * @callback module:api/SingleContainersApi~containersJsonGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Container>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List single containers in a space.
     * This endpoint returns a list of all single containers in a space that are currently in a running state (corresponding IBM Containers command: `cf ic ps`). To list all single containers independent of their current state, set the `all` query parameter to true.
     * @param {String} xAuthToken The Bluemix JSON web token that you receive when logging into Bluemix. Run `cf oauth-token` to retrieve your access token.
     * @param {String} xAuthProjectId The unique ID of your organization space where you want to create or work with your containers. Run `cf space <space_name> --guid`, where `<space_name>` is the name of your space, to retrieve your space ID.
     * @param {Object} opts Optional parameters
     * @param {String} [all] By default, the `GET /containers/json` endpoint returns a list of all single containers in a space that are in a running state. To request a list of all containers independent of their current state, set the `all` query parameter to true. Allowed values are: `all=true`, `all=True`, and `all=1`. 
     * @param {String} [filters] You can filter your containers by any environment variable key or value that is listed in the `Env` section of your CLI/ API response when you run the `cf ic inspect <container>` command, or call the `GET /containers/{id}/json` endpoint. Your search criteria does not need to be an exact match. It can also be a part of the key or value you are looking for. For example, to filter all containers with an environment variable that contains `id` in one of their environment variables, use `filter=id`.
     * @param {module:api/SingleContainersApi~containersJsonGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Container>}
     */
    containersJsonGet(xAuthToken, xAuthProjectId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'xAuthToken' is set
      if (xAuthToken === undefined || xAuthToken === null) {
        throw new Error("Missing the required parameter 'xAuthToken' when calling containersJsonGet");
      }
      // verify the required parameter 'xAuthProjectId' is set
      if (xAuthProjectId === undefined || xAuthProjectId === null) {
        throw new Error("Missing the required parameter 'xAuthProjectId' when calling containersJsonGet");
      }

      let pathParams = {
      };
      let queryParams = {
        'all': opts['all'],
        'filters': opts['filters']
      };
      let headerParams = {
        'X-Auth-Token': xAuthToken,
        'X-Auth-Project-Id': xAuthProjectId
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Container];
      return this.apiClient.callApi(
        '/containers/json', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the containersNameOrIdDelete operation.
     * @callback module:api/SingleContainersApi~containersNameOrIdDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Remove a single container
     * Remove a single container that is identified by container ID or name from a space (corresponding IBM Containers command: `cf ic delete <container>`). The container must be stopped before it can be deleted, unless the `force` query parameter is set to true.
     * @param {String} xAuthToken The Bluemix JSON web token that you receive when logging into Bluemix. Run `cf oauth-token` to retrieve your access token.
     * @param {String} xAuthProjectId The unique ID of your organization space where you want to create or work with your containers. Run `cf space <space_name> --guid`, where `<space_name>` is the name of your space, to retrieve your space ID.
     * @param {String} nameOrId The unique identifier or name of the container that you want to delete. Run `cf ic ps -a` or call the `GET /containers/json?all=true` endpoint to review all containers in your space.
     * @param {Object} opts Optional parameters
     * @param {Boolean} [force] Use the `force` query parameter if you want to delete the container independent of their current state. The container does not need to be stopped first. To force the deletion of a container, enter `force=true`, `force=True`, or `force=1`. If you want to delete containers that are in a non-running state only, do either not set this query parameter, or enter `force=false`, `force=False`, or `force=0`.
     * @param {module:api/SingleContainersApi~containersNameOrIdDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    containersNameOrIdDelete(xAuthToken, xAuthProjectId, nameOrId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'xAuthToken' is set
      if (xAuthToken === undefined || xAuthToken === null) {
        throw new Error("Missing the required parameter 'xAuthToken' when calling containersNameOrIdDelete");
      }
      // verify the required parameter 'xAuthProjectId' is set
      if (xAuthProjectId === undefined || xAuthProjectId === null) {
        throw new Error("Missing the required parameter 'xAuthProjectId' when calling containersNameOrIdDelete");
      }
      // verify the required parameter 'nameOrId' is set
      if (nameOrId === undefined || nameOrId === null) {
        throw new Error("Missing the required parameter 'nameOrId' when calling containersNameOrIdDelete");
      }

      let pathParams = {
        'name_or_id': nameOrId
      };
      let queryParams = {
        'force': opts['force']
      };
      let headerParams = {
        'X-Auth-Token': xAuthToken,
        'X-Auth-Project-Id': xAuthProjectId
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/containers/{name_or_id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the containersNameOrIdJsonGet operation.
     * @callback module:api/SingleContainersApi~containersNameOrIdJsonGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ContainerInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Inspect a single container
     * This endpoint retrieves detailed information about a single container (corresponding IBM Containers command: `cf ic inspect <container>`).
     * @param {String} xAuthToken The Bluemix JSON web token that you receive when logging into Bluemix. Run `cf oauth-token` to retrieve your access token.
     * @param {String} xAuthProjectId The unique ID of your organization space where you want to create or work with your containers. Run `cf space <space_name> --guid`, where `<space_name>` is the name of your space, to retrieve your space ID.
     * @param {String} nameOrId The name or ID of the container that you want to inspect. Run the `cf ic ps` command or call the `GET /containers/json` endpoint to retrieve a list of containers in your space.
     * @param {module:api/SingleContainersApi~containersNameOrIdJsonGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ContainerInfo}
     */
    containersNameOrIdJsonGet(xAuthToken, xAuthProjectId, nameOrId, callback) {
      let postBody = null;
      // verify the required parameter 'xAuthToken' is set
      if (xAuthToken === undefined || xAuthToken === null) {
        throw new Error("Missing the required parameter 'xAuthToken' when calling containersNameOrIdJsonGet");
      }
      // verify the required parameter 'xAuthProjectId' is set
      if (xAuthProjectId === undefined || xAuthProjectId === null) {
        throw new Error("Missing the required parameter 'xAuthProjectId' when calling containersNameOrIdJsonGet");
      }
      // verify the required parameter 'nameOrId' is set
      if (nameOrId === undefined || nameOrId === null) {
        throw new Error("Missing the required parameter 'nameOrId' when calling containersNameOrIdJsonGet");
      }

      let pathParams = {
        'name_or_id': nameOrId
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Auth-Token': xAuthToken,
        'X-Auth-Project-Id': xAuthProjectId
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ContainerInfo;
      return this.apiClient.callApi(
        '/containers/{name_or_id}/json', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the containersNameOrIdPausePost operation.
     * @callback module:api/SingleContainersApi~containersNameOrIdPausePostCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Pause a single container
     * Pause all processes in a running single container with a given container ID or name (corresponding IBM Containers command: `cf ic pause <container>`).
     * @param {String} xAuthToken The Bluemix JSON web token that you receive when logging into Bluemix. Run `cf oauth-token` to retrieve your access token.
     * @param {String} xAuthProjectId The unique ID of your organization space where you want to create or work with your containers. Run `cf space <space_name> --guid`, where `<space_name>` is the name of your space, to retrieve your space ID.
     * @param {String} nameOrId The unique identifier or name of the container that you want to pause. Run `cf ic ps` or call the `GET /containers/json` endpoint to review all containers in your space that are currently in a running state.
     * @param {module:api/SingleContainersApi~containersNameOrIdPausePostCallback} callback The callback function, accepting three arguments: error, data, response
     */
    containersNameOrIdPausePost(xAuthToken, xAuthProjectId, nameOrId, callback) {
      let postBody = null;
      // verify the required parameter 'xAuthToken' is set
      if (xAuthToken === undefined || xAuthToken === null) {
        throw new Error("Missing the required parameter 'xAuthToken' when calling containersNameOrIdPausePost");
      }
      // verify the required parameter 'xAuthProjectId' is set
      if (xAuthProjectId === undefined || xAuthProjectId === null) {
        throw new Error("Missing the required parameter 'xAuthProjectId' when calling containersNameOrIdPausePost");
      }
      // verify the required parameter 'nameOrId' is set
      if (nameOrId === undefined || nameOrId === null) {
        throw new Error("Missing the required parameter 'nameOrId' when calling containersNameOrIdPausePost");
      }

      let pathParams = {
        'name_or_id': nameOrId
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Auth-Token': xAuthToken,
        'X-Auth-Project-Id': xAuthProjectId
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/containers/{name_or_id}/pause', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the containersNameOrIdRenamePost operation.
     * @callback module:api/SingleContainersApi~containersNameOrIdRenamePostCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Rename a single container
     * Change the current name of an existing single container that is identified by the container ID or name (corresponding IBM Containers command: `cf ic rename <old_name> <new_name>`). 
     * @param {String} xAuthToken The Bluemix JSON web token that you receive when logging into Bluemix. Run `cf oauth-token` to retrieve your access token.
     * @param {String} xAuthProjectId The unique ID of your organization space where you want to create or work with your containers. Run `cf space <space_name> --guid`, where `<space_name>` is the name of your space, to retrieve your space ID.
     * @param {String} nameOrId The unique identifier or name of the container that you want to rename. Run `cf ic ps -a` or call the `GET /containers/json?all=true` endpoint to review all containers in your space.
     * @param {String} name The new name for the container. The characters in the name can include uppercase letters, lowercase letters, numbers, periods (.), underscores (_), or hyphens (-), but the name must start with a letter.
     * @param {module:api/SingleContainersApi~containersNameOrIdRenamePostCallback} callback The callback function, accepting three arguments: error, data, response
     */
    containersNameOrIdRenamePost(xAuthToken, xAuthProjectId, nameOrId, name, callback) {
      let postBody = null;
      // verify the required parameter 'xAuthToken' is set
      if (xAuthToken === undefined || xAuthToken === null) {
        throw new Error("Missing the required parameter 'xAuthToken' when calling containersNameOrIdRenamePost");
      }
      // verify the required parameter 'xAuthProjectId' is set
      if (xAuthProjectId === undefined || xAuthProjectId === null) {
        throw new Error("Missing the required parameter 'xAuthProjectId' when calling containersNameOrIdRenamePost");
      }
      // verify the required parameter 'nameOrId' is set
      if (nameOrId === undefined || nameOrId === null) {
        throw new Error("Missing the required parameter 'nameOrId' when calling containersNameOrIdRenamePost");
      }
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling containersNameOrIdRenamePost");
      }

      let pathParams = {
        'name_or_id': nameOrId
      };
      let queryParams = {
        'name': name
      };
      let headerParams = {
        'X-Auth-Token': xAuthToken,
        'X-Auth-Project-Id': xAuthProjectId
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/containers/{name_or_id}/rename', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the containersNameOrIdRestartPost operation.
     * @callback module:api/SingleContainersApi~containersNameOrIdRestartPostCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Restart a single container
     * Restart a container with a given container ID or name (corresponding IBM Containers command: `cf ic restart <container>`).
     * @param {String} xAuthToken The Bluemix JSON web token that you receive when logging into Bluemix. Run `cf oauth-token` to retrieve your access token.
     * @param {String} xAuthProjectId The unique ID of your organization space where you want to create or work with your containers. Run `cf space <space_name> --guid`, where `<space_name>` is the name of your space, to retrieve your space ID.
     * @param {String} nameOrId The unique identifier or name of the container that you want to restart. Run `cf ic ps` or call the `GET /containers/json` endpoint to review all containers in your space.
     * @param {Object} opts Optional parameters
     * @param {Number} [t] The number of seconds to wait before the container is restarted. For example, if you want a container to restart after 10 seconds, enter `t=10`.
     * @param {module:api/SingleContainersApi~containersNameOrIdRestartPostCallback} callback The callback function, accepting three arguments: error, data, response
     */
    containersNameOrIdRestartPost(xAuthToken, xAuthProjectId, nameOrId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'xAuthToken' is set
      if (xAuthToken === undefined || xAuthToken === null) {
        throw new Error("Missing the required parameter 'xAuthToken' when calling containersNameOrIdRestartPost");
      }
      // verify the required parameter 'xAuthProjectId' is set
      if (xAuthProjectId === undefined || xAuthProjectId === null) {
        throw new Error("Missing the required parameter 'xAuthProjectId' when calling containersNameOrIdRestartPost");
      }
      // verify the required parameter 'nameOrId' is set
      if (nameOrId === undefined || nameOrId === null) {
        throw new Error("Missing the required parameter 'nameOrId' when calling containersNameOrIdRestartPost");
      }

      let pathParams = {
        'name_or_id': nameOrId
      };
      let queryParams = {
        't': opts['t']
      };
      let headerParams = {
        'X-Auth-Token': xAuthToken,
        'X-Auth-Project-Id': xAuthProjectId
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/containers/{name_or_id}/restart', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the containersNameOrIdStartPost operation.
     * @callback module:api/SingleContainersApi~containersNameOrIdStartPostCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Start a single container
     * Start a single container with a given container name or ID (corresponding IBM Containers command: `cf ic start <container>`).
     * @param {String} xAuthToken The Bluemix JSON web token that you receive when logging into Bluemix. Run `cf oauth-token` to retrieve your access token.
     * @param {String} xAuthProjectId The unique ID of your organization space where you want to create or work with your containers. Run `cf space <space_name> --guid`, where `<space_name>` is the name of your space, to retrieve your space ID.
     * @param {String} nameOrId The unique identifier or name of the container that you want to start. Run `cf ic ps -a` or call the `GET /containers/json?all=true` endpoint to review the containers in your space that are currently not in a running state.
     * @param {module:api/SingleContainersApi~containersNameOrIdStartPostCallback} callback The callback function, accepting three arguments: error, data, response
     */
    containersNameOrIdStartPost(xAuthToken, xAuthProjectId, nameOrId, callback) {
      let postBody = null;
      // verify the required parameter 'xAuthToken' is set
      if (xAuthToken === undefined || xAuthToken === null) {
        throw new Error("Missing the required parameter 'xAuthToken' when calling containersNameOrIdStartPost");
      }
      // verify the required parameter 'xAuthProjectId' is set
      if (xAuthProjectId === undefined || xAuthProjectId === null) {
        throw new Error("Missing the required parameter 'xAuthProjectId' when calling containersNameOrIdStartPost");
      }
      // verify the required parameter 'nameOrId' is set
      if (nameOrId === undefined || nameOrId === null) {
        throw new Error("Missing the required parameter 'nameOrId' when calling containersNameOrIdStartPost");
      }

      let pathParams = {
        'name_or_id': nameOrId
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Auth-Token': xAuthToken,
        'X-Auth-Project-Id': xAuthProjectId
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/containers/{name_or_id}/start', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the containersNameOrIdStopPost operation.
     * @callback module:api/SingleContainersApi~containersNameOrIdStopPostCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Stop a single container
     * Stop a single container with a given container name or ID (corresponding IBM Containers command: `cf ic stop <container>`).
     * @param {String} xAuthToken The Bluemix JSON web token that you receive when logging into Bluemix. Run `cf oauth-token` to retrieve your access token.
     * @param {String} xAuthProjectId The unique ID of your organization space where you want to create or work with your containers. Run `cf space <space_name> --guid`, where `<space_name>` is the name of your space, to retrieve your space ID.
     * @param {String} nameOrId The unique identifier or name of the container that you want to stop. Run `cf ic ps` or call the `GET /containers/json` endpoint to review the containers in your space that are currently in a running state.
     * @param {Object} opts Optional parameters
     * @param {Number} [t] The number of seconds to wait before the container is stopped. For example, if you want a container to stop after 10 seconds, enter `t=10`.
     * @param {module:api/SingleContainersApi~containersNameOrIdStopPostCallback} callback The callback function, accepting three arguments: error, data, response
     */
    containersNameOrIdStopPost(xAuthToken, xAuthProjectId, nameOrId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'xAuthToken' is set
      if (xAuthToken === undefined || xAuthToken === null) {
        throw new Error("Missing the required parameter 'xAuthToken' when calling containersNameOrIdStopPost");
      }
      // verify the required parameter 'xAuthProjectId' is set
      if (xAuthProjectId === undefined || xAuthProjectId === null) {
        throw new Error("Missing the required parameter 'xAuthProjectId' when calling containersNameOrIdStopPost");
      }
      // verify the required parameter 'nameOrId' is set
      if (nameOrId === undefined || nameOrId === null) {
        throw new Error("Missing the required parameter 'nameOrId' when calling containersNameOrIdStopPost");
      }

      let pathParams = {
        'name_or_id': nameOrId
      };
      let queryParams = {
        't': opts['t']
      };
      let headerParams = {
        'X-Auth-Token': xAuthToken,
        'X-Auth-Project-Id': xAuthProjectId
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/containers/{name_or_id}/stop', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the containersNameOrIdUnpausePost operation.
     * @callback module:api/SingleContainersApi~containersNameOrIdUnpausePostCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Unpause a single container
     * Unpause all processes that are currently stopped inside a single containers with a given container ID or name (corresponding IBM Containers command: `cf ic unpause <container>`).
     * @param {String} xAuthToken The Bluemix JSON web token that you receive when logging into Bluemix. Run `cf oauth-token` to retrieve your access token.
     * @param {String} xAuthProjectId The unique ID of your organization space where you want to create or work with your containers. Run `cf space <space_name> --guid`, where `<space_name>` is the name of your space, to retrieve your space ID.
     * @param {String} nameOrId The unique identifier or name of the container that you want to unpause. Run `cf ic ps -a` or call the `GET /containers/json?all=true` endpoint to review all containers in your space.
     * @param {module:api/SingleContainersApi~containersNameOrIdUnpausePostCallback} callback The callback function, accepting three arguments: error, data, response
     */
    containersNameOrIdUnpausePost(xAuthToken, xAuthProjectId, nameOrId, callback) {
      let postBody = null;
      // verify the required parameter 'xAuthToken' is set
      if (xAuthToken === undefined || xAuthToken === null) {
        throw new Error("Missing the required parameter 'xAuthToken' when calling containersNameOrIdUnpausePost");
      }
      // verify the required parameter 'xAuthProjectId' is set
      if (xAuthProjectId === undefined || xAuthProjectId === null) {
        throw new Error("Missing the required parameter 'xAuthProjectId' when calling containersNameOrIdUnpausePost");
      }
      // verify the required parameter 'nameOrId' is set
      if (nameOrId === undefined || nameOrId === null) {
        throw new Error("Missing the required parameter 'nameOrId' when calling containersNameOrIdUnpausePost");
      }

      let pathParams = {
        'name_or_id': nameOrId
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Auth-Token': xAuthToken,
        'X-Auth-Project-Id': xAuthProjectId
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/containers/{name_or_id}/unpause', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
