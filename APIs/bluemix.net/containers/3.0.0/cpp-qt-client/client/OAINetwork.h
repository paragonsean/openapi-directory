/**
 * IBM Containers API
 * Containers are virtual software objects that include all the elements that an app needs to run. A container has the benefits of resource isolation and allocation but is more portable and efficient than, for example, a virtual machine.   This documentation describes the IBM Containers API, which is based on the Docker Remote API. The API provides endpoints that you can use to create and manage your single containers and container groups in Bluemix. Endpoints are summarized under the following tags:   - **Authentication**: Retrieve and refresh your TLS certificates.  - **Private Docker images registry**: Create your own private Docker images registry in Bluemix by setting a namespace for your organization.  - **Images**: View, build, and push your images to your private Bluemix registry so you can use them with IBM Containers. You can also scan your container images with the Vulnerability Advisor against standard policies set by the organization manager and a database of known Ubuntu issues.  - **Single Containers**: Create and manage single containers in Bluemix. Use a single container to implement short-lived processes or to run simple tests as you develop an app or service. To make your single container available from the internet, review the `Public IP addresses` endpoints.  - **Container Groups**: Create and manage your container groups in Bluemix. A container group consists of multiple single containers that are all created from the same container image and as a consequence are configured in the same way. Container groups offer further options at no cost to make your app highly available. These options include in-built load balancing, auto-recovery of unhealthy container instances, and auto-scaling of container instances based on CPU and memory usage. Map a public route to your container group to make your app accessible from the internet.   - **Public IP addresses**: Use these endpoints to request public IP addresses for your space. You can bind this IP address to your container to make your container accessible from the internet.  - **File shares**: Create, list and delete file shares in a space. A file share is a NFS storage system that hosts Docker volumes.   - **Volumes**: Create and manage container volumes in your space to persist the data of your containers.      Each API request requires an HTTP header that includes the 'X-Auth-Token’ and 'X-Auth-Project-Id’ parameter.   - **X-Auth-Token**: The JSON web token (JWT) that you receive when logging into the Bluemix platform. It allows you to use the IBM Containers REST API, access services, and resources. Run `cf oauth-token` to retrieve your access token information. - **X-Auth-Project-Id**: The unique ID of your organization space where you want to create or work with your containers. Run `cf space <space_name> --guid`, where `<space_name>` is the name of your space, to retrieve your space ID.    For further information about how containers work in the IBM Containers service, review the documentation under https://new-console.ng.bluemix.net/docs/containers/container_index.html. 
 *
 * The version of the OpenAPI document: 3.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAINetwork.h
 *
 * 
 */

#ifndef OAINetwork_H
#define OAINetwork_H

#include <QJsonObject>

#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAINetwork : public OAIObject {
public:
    OAINetwork();
    OAINetwork(QString json);
    ~OAINetwork() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getAliases() const;
    void setAliases(const QString &aliases);
    bool is_aliases_Set() const;
    bool is_aliases_Valid() const;

    QString getEndpointId() const;
    void setEndpointId(const QString &endpoint_id);
    bool is_endpoint_id_Set() const;
    bool is_endpoint_id_Valid() const;

    QString getGateway() const;
    void setGateway(const QString &gateway);
    bool is_gateway_Set() const;
    bool is_gateway_Valid() const;

    QString getGlobalIpv6Address() const;
    void setGlobalIpv6Address(const QString &global_ipv6_address);
    bool is_global_ipv6_address_Set() const;
    bool is_global_ipv6_address_Valid() const;

    qint32 getGlobalIpv6PrefixLen() const;
    void setGlobalIpv6PrefixLen(const qint32 &global_ipv6_prefix_len);
    bool is_global_ipv6_prefix_len_Set() const;
    bool is_global_ipv6_prefix_len_Valid() const;

    QString getIpamConfig() const;
    void setIpamConfig(const QString &ipam_config);
    bool is_ipam_config_Set() const;
    bool is_ipam_config_Valid() const;

    QString getIpPrefixLen() const;
    void setIpPrefixLen(const QString &ip_prefix_len);
    bool is_ip_prefix_len_Set() const;
    bool is_ip_prefix_len_Valid() const;

    QString getIpv6Gateway() const;
    void setIpv6Gateway(const QString &ipv6_gateway);
    bool is_ipv6_gateway_Set() const;
    bool is_ipv6_gateway_Valid() const;

    QString getLinks() const;
    void setLinks(const QString &links);
    bool is_links_Set() const;
    bool is_links_Valid() const;

    QString getMacAddress() const;
    void setMacAddress(const QString &mac_address);
    bool is_mac_address_Set() const;
    bool is_mac_address_Valid() const;

    QString getNetworkId() const;
    void setNetworkId(const QString &network_id);
    bool is_network_id_Set() const;
    bool is_network_id_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_aliases;
    bool m_aliases_isSet;
    bool m_aliases_isValid;

    QString m_endpoint_id;
    bool m_endpoint_id_isSet;
    bool m_endpoint_id_isValid;

    QString m_gateway;
    bool m_gateway_isSet;
    bool m_gateway_isValid;

    QString m_global_ipv6_address;
    bool m_global_ipv6_address_isSet;
    bool m_global_ipv6_address_isValid;

    qint32 m_global_ipv6_prefix_len;
    bool m_global_ipv6_prefix_len_isSet;
    bool m_global_ipv6_prefix_len_isValid;

    QString m_ipam_config;
    bool m_ipam_config_isSet;
    bool m_ipam_config_isValid;

    QString m_ip_prefix_len;
    bool m_ip_prefix_len_isSet;
    bool m_ip_prefix_len_isValid;

    QString m_ipv6_gateway;
    bool m_ipv6_gateway_isSet;
    bool m_ipv6_gateway_isValid;

    QString m_links;
    bool m_links_isSet;
    bool m_links_isValid;

    QString m_mac_address;
    bool m_mac_address_isSet;
    bool m_mac_address_isValid;

    QString m_network_id;
    bool m_network_id_isSet;
    bool m_network_id_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAINetwork)

#endif // OAINetwork_H
