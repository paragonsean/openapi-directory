/**
 * IBM Containers API
 * Containers are virtual software objects that include all the elements that an app needs to run. A container has the benefits of resource isolation and allocation but is more portable and efficient than, for example, a virtual machine.   This documentation describes the IBM Containers API, which is based on the Docker Remote API. The API provides endpoints that you can use to create and manage your single containers and container groups in Bluemix. Endpoints are summarized under the following tags:   - **Authentication**: Retrieve and refresh your TLS certificates.  - **Private Docker images registry**: Create your own private Docker images registry in Bluemix by setting a namespace for your organization.  - **Images**: View, build, and push your images to your private Bluemix registry so you can use them with IBM Containers. You can also scan your container images with the Vulnerability Advisor against standard policies set by the organization manager and a database of known Ubuntu issues.  - **Single Containers**: Create and manage single containers in Bluemix. Use a single container to implement short-lived processes or to run simple tests as you develop an app or service. To make your single container available from the internet, review the `Public IP addresses` endpoints.  - **Container Groups**: Create and manage your container groups in Bluemix. A container group consists of multiple single containers that are all created from the same container image and as a consequence are configured in the same way. Container groups offer further options at no cost to make your app highly available. These options include in-built load balancing, auto-recovery of unhealthy container instances, and auto-scaling of container instances based on CPU and memory usage. Map a public route to your container group to make your app accessible from the internet.   - **Public IP addresses**: Use these endpoints to request public IP addresses for your space. You can bind this IP address to your container to make your container accessible from the internet.  - **File shares**: Create, list and delete file shares in a space. A file share is a NFS storage system that hosts Docker volumes.   - **Volumes**: Create and manage container volumes in your space to persist the data of your containers.      Each API request requires an HTTP header that includes the 'X-Auth-Token’ and 'X-Auth-Project-Id’ parameter.   - **X-Auth-Token**: The JSON web token (JWT) that you receive when logging into the Bluemix platform. It allows you to use the IBM Containers REST API, access services, and resources. Run `cf oauth-token` to retrieve your access token information. - **X-Auth-Project-Id**: The unique ID of your organization space where you want to create or work with your containers. Run `cf space <space_name> --guid`, where `<space_name>` is the name of your space, to retrieve your space ID.    For further information about how containers work in the IBM Containers service, review the documentation under https://new-console.ng.bluemix.net/docs/containers/container_index.html. 
 *
 * The version of the OpenAPI document: 3.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIImageDetail.h
 *
 * 
 */

#ifndef OAIImageDetail_H
#define OAIImageDetail_H

#include <QJsonObject>

#include "OAIContainerConfig.h"
#include "OAIImageDetail_Config.h"
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIImageDetail_Config;
class OAIContainerConfig;

class OAIImageDetail : public OAIObject {
public:
    OAIImageDetail();
    OAIImageDetail(QString json);
    ~OAIImageDetail() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getArchitecture() const;
    void setArchitecture(const QString &architecture);
    bool is_architecture_Set() const;
    bool is_architecture_Valid() const;

    OAIImageDetail_Config getConfig() const;
    void setConfig(const OAIImageDetail_Config &config);
    bool is_config_Set() const;
    bool is_config_Valid() const;

    QString getContainer() const;
    void setContainer(const QString &container);
    bool is_container_Set() const;
    bool is_container_Valid() const;

    OAIContainerConfig getContainerConfig() const;
    void setContainerConfig(const OAIContainerConfig &container_config);
    bool is_container_config_Set() const;
    bool is_container_config_Valid() const;

    QString getCreated() const;
    void setCreated(const QString &created);
    bool is_created_Set() const;
    bool is_created_Valid() const;

    QString getDockerVersion() const;
    void setDockerVersion(const QString &docker_version);
    bool is_docker_version_Set() const;
    bool is_docker_version_Valid() const;

    QString getId() const;
    void setId(const QString &id);
    bool is_id_Set() const;
    bool is_id_Valid() const;

    QString getOs() const;
    void setOs(const QString &os);
    bool is_os_Set() const;
    bool is_os_Valid() const;

    QString getParent() const;
    void setParent(const QString &parent);
    bool is_parent_Set() const;
    bool is_parent_Valid() const;

    qint32 getSize() const;
    void setSize(const qint32 &size);
    bool is_size_Set() const;
    bool is_size_Valid() const;

    QString getTag() const;
    void setTag(const QString &tag);
    bool is_tag_Set() const;
    bool is_tag_Valid() const;

    QString getThrowaway() const;
    void setThrowaway(const QString &throwaway);
    bool is_throwaway_Set() const;
    bool is_throwaway_Valid() const;

    qint32 getVirtualSize() const;
    void setVirtualSize(const qint32 &virtual_size);
    bool is_virtual_size_Set() const;
    bool is_virtual_size_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_architecture;
    bool m_architecture_isSet;
    bool m_architecture_isValid;

    OAIImageDetail_Config m_config;
    bool m_config_isSet;
    bool m_config_isValid;

    QString m_container;
    bool m_container_isSet;
    bool m_container_isValid;

    OAIContainerConfig m_container_config;
    bool m_container_config_isSet;
    bool m_container_config_isValid;

    QString m_created;
    bool m_created_isSet;
    bool m_created_isValid;

    QString m_docker_version;
    bool m_docker_version_isSet;
    bool m_docker_version_isValid;

    QString m_id;
    bool m_id_isSet;
    bool m_id_isValid;

    QString m_os;
    bool m_os_isSet;
    bool m_os_isValid;

    QString m_parent;
    bool m_parent_isSet;
    bool m_parent_isValid;

    qint32 m_size;
    bool m_size_isSet;
    bool m_size_isValid;

    QString m_tag;
    bool m_tag_isSet;
    bool m_tag_isValid;

    QString m_throwaway;
    bool m_throwaway_isSet;
    bool m_throwaway_isValid;

    qint32 m_virtual_size;
    bool m_virtual_size_isSet;
    bool m_virtual_size_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIImageDetail)

#endif // OAIImageDetail_H
