/**
 * IBM Containers API
 * Containers are virtual software objects that include all the elements that an app needs to run. A container has the benefits of resource isolation and allocation but is more portable and efficient than, for example, a virtual machine.   This documentation describes the IBM Containers API, which is based on the Docker Remote API. The API provides endpoints that you can use to create and manage your single containers and container groups in Bluemix. Endpoints are summarized under the following tags:   - **Authentication**: Retrieve and refresh your TLS certificates.  - **Private Docker images registry**: Create your own private Docker images registry in Bluemix by setting a namespace for your organization.  - **Images**: View, build, and push your images to your private Bluemix registry so you can use them with IBM Containers. You can also scan your container images with the Vulnerability Advisor against standard policies set by the organization manager and a database of known Ubuntu issues.  - **Single Containers**: Create and manage single containers in Bluemix. Use a single container to implement short-lived processes or to run simple tests as you develop an app or service. To make your single container available from the internet, review the `Public IP addresses` endpoints.  - **Container Groups**: Create and manage your container groups in Bluemix. A container group consists of multiple single containers that are all created from the same container image and as a consequence are configured in the same way. Container groups offer further options at no cost to make your app highly available. These options include in-built load balancing, auto-recovery of unhealthy container instances, and auto-scaling of container instances based on CPU and memory usage. Map a public route to your container group to make your app accessible from the internet.   - **Public IP addresses**: Use these endpoints to request public IP addresses for your space. You can bind this IP address to your container to make your container accessible from the internet.  - **File shares**: Create, list and delete file shares in a space. A file share is a NFS storage system that hosts Docker volumes.   - **Volumes**: Create and manage container volumes in your space to persist the data of your containers.      Each API request requires an HTTP header that includes the 'X-Auth-Token’ and 'X-Auth-Project-Id’ parameter.   - **X-Auth-Token**: The JSON web token (JWT) that you receive when logging into the Bluemix platform. It allows you to use the IBM Containers REST API, access services, and resources. Run `cf oauth-token` to retrieve your access token information. - **X-Auth-Project-Id**: The unique ID of your organization space where you want to create or work with your containers. Run `cf space <space_name> --guid`, where `<space_name>` is the name of your space, to retrieve your space ID.    For further information about how containers work in the IBM Containers service, review the documentation under https://new-console.ng.bluemix.net/docs/containers/container_index.html. 
 *
 * The version of the OpenAPI document: 3.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIImageDetail_Config.h
 *
 * 
 */

#ifndef OAIImageDetail_Config_H
#define OAIImageDetail_Config_H

#include <QJsonObject>

#include <QList>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAIImageDetail_Config : public OAIObject {
public:
    OAIImageDetail_Config();
    OAIImageDetail_Config(QString json);
    ~OAIImageDetail_Config() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    bool isArgsEscaped() const;
    void setArgsEscaped(const bool &args_escaped);
    bool is_args_escaped_Set() const;
    bool is_args_escaped_Valid() const;

    bool isAttachStderr() const;
    void setAttachStderr(const bool &attach_stderr);
    bool is_attach_stderr_Set() const;
    bool is_attach_stderr_Valid() const;

    bool isAttachStdin() const;
    void setAttachStdin(const bool &attach_stdin);
    bool is_attach_stdin_Set() const;
    bool is_attach_stdin_Valid() const;

    bool isAttachStdout() const;
    void setAttachStdout(const bool &attach_stdout);
    bool is_attach_stdout_Set() const;
    bool is_attach_stdout_Valid() const;

    QList<QString> getCmd() const;
    void setCmd(const QList<QString> &cmd);
    bool is_cmd_Set() const;
    bool is_cmd_Valid() const;

    QString getDomainmame() const;
    void setDomainmame(const QString &domainmame);
    bool is_domainmame_Set() const;
    bool is_domainmame_Valid() const;

    QString getEntrypoint() const;
    void setEntrypoint(const QString &entrypoint);
    bool is_entrypoint_Set() const;
    bool is_entrypoint_Valid() const;

    QList<QString> getEnv() const;
    void setEnv(const QList<QString> &env);
    bool is_env_Set() const;
    bool is_env_Valid() const;

    QList<QString> getExposedPorts() const;
    void setExposedPorts(const QList<QString> &exposed_ports);
    bool is_exposed_ports_Set() const;
    bool is_exposed_ports_Valid() const;

    QString getHostname() const;
    void setHostname(const QString &hostname);
    bool is_hostname_Set() const;
    bool is_hostname_Valid() const;

    QString getImage() const;
    void setImage(const QString &image);
    bool is_image_Set() const;
    bool is_image_Valid() const;

    QList<QString> getLabels() const;
    void setLabels(const QList<QString> &labels);
    bool is_labels_Set() const;
    bool is_labels_Valid() const;

    QList<QString> getOnBuild() const;
    void setOnBuild(const QList<QString> &on_build);
    bool is_on_build_Set() const;
    bool is_on_build_Valid() const;

    bool isOpenStdin() const;
    void setOpenStdin(const bool &open_stdin);
    bool is_open_stdin_Set() const;
    bool is_open_stdin_Valid() const;

    bool isStdinOnce() const;
    void setStdinOnce(const bool &stdin_once);
    bool is_stdin_once_Set() const;
    bool is_stdin_once_Valid() const;

    bool isTty() const;
    void setTty(const bool &tty);
    bool is_tty_Set() const;
    bool is_tty_Valid() const;

    QString getUser() const;
    void setUser(const QString &user);
    bool is_user_Set() const;
    bool is_user_Valid() const;

    QString getVolumes() const;
    void setVolumes(const QString &volumes);
    bool is_volumes_Set() const;
    bool is_volumes_Valid() const;

    QString getWorkingDir() const;
    void setWorkingDir(const QString &working_dir);
    bool is_working_dir_Set() const;
    bool is_working_dir_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    bool m_args_escaped;
    bool m_args_escaped_isSet;
    bool m_args_escaped_isValid;

    bool m_attach_stderr;
    bool m_attach_stderr_isSet;
    bool m_attach_stderr_isValid;

    bool m_attach_stdin;
    bool m_attach_stdin_isSet;
    bool m_attach_stdin_isValid;

    bool m_attach_stdout;
    bool m_attach_stdout_isSet;
    bool m_attach_stdout_isValid;

    QList<QString> m_cmd;
    bool m_cmd_isSet;
    bool m_cmd_isValid;

    QString m_domainmame;
    bool m_domainmame_isSet;
    bool m_domainmame_isValid;

    QString m_entrypoint;
    bool m_entrypoint_isSet;
    bool m_entrypoint_isValid;

    QList<QString> m_env;
    bool m_env_isSet;
    bool m_env_isValid;

    QList<QString> m_exposed_ports;
    bool m_exposed_ports_isSet;
    bool m_exposed_ports_isValid;

    QString m_hostname;
    bool m_hostname_isSet;
    bool m_hostname_isValid;

    QString m_image;
    bool m_image_isSet;
    bool m_image_isValid;

    QList<QString> m_labels;
    bool m_labels_isSet;
    bool m_labels_isValid;

    QList<QString> m_on_build;
    bool m_on_build_isSet;
    bool m_on_build_isValid;

    bool m_open_stdin;
    bool m_open_stdin_isSet;
    bool m_open_stdin_isValid;

    bool m_stdin_once;
    bool m_stdin_once_isSet;
    bool m_stdin_once_isValid;

    bool m_tty;
    bool m_tty_isSet;
    bool m_tty_isValid;

    QString m_user;
    bool m_user_isSet;
    bool m_user_isValid;

    QString m_volumes;
    bool m_volumes_isSet;
    bool m_volumes_isValid;

    QString m_working_dir;
    bool m_working_dir_isSet;
    bool m_working_dir_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIImageDetail_Config)

#endif // OAIImageDetail_Config_H
