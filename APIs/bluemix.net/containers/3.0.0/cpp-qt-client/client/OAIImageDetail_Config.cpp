/**
 * IBM Containers API
 * Containers are virtual software objects that include all the elements that an app needs to run. A container has the benefits of resource isolation and allocation but is more portable and efficient than, for example, a virtual machine.   This documentation describes the IBM Containers API, which is based on the Docker Remote API. The API provides endpoints that you can use to create and manage your single containers and container groups in Bluemix. Endpoints are summarized under the following tags:   - **Authentication**: Retrieve and refresh your TLS certificates.  - **Private Docker images registry**: Create your own private Docker images registry in Bluemix by setting a namespace for your organization.  - **Images**: View, build, and push your images to your private Bluemix registry so you can use them with IBM Containers. You can also scan your container images with the Vulnerability Advisor against standard policies set by the organization manager and a database of known Ubuntu issues.  - **Single Containers**: Create and manage single containers in Bluemix. Use a single container to implement short-lived processes or to run simple tests as you develop an app or service. To make your single container available from the internet, review the `Public IP addresses` endpoints.  - **Container Groups**: Create and manage your container groups in Bluemix. A container group consists of multiple single containers that are all created from the same container image and as a consequence are configured in the same way. Container groups offer further options at no cost to make your app highly available. These options include in-built load balancing, auto-recovery of unhealthy container instances, and auto-scaling of container instances based on CPU and memory usage. Map a public route to your container group to make your app accessible from the internet.   - **Public IP addresses**: Use these endpoints to request public IP addresses for your space. You can bind this IP address to your container to make your container accessible from the internet.  - **File shares**: Create, list and delete file shares in a space. A file share is a NFS storage system that hosts Docker volumes.   - **Volumes**: Create and manage container volumes in your space to persist the data of your containers.      Each API request requires an HTTP header that includes the 'X-Auth-Token’ and 'X-Auth-Project-Id’ parameter.   - **X-Auth-Token**: The JSON web token (JWT) that you receive when logging into the Bluemix platform. It allows you to use the IBM Containers REST API, access services, and resources. Run `cf oauth-token` to retrieve your access token information. - **X-Auth-Project-Id**: The unique ID of your organization space where you want to create or work with your containers. Run `cf space <space_name> --guid`, where `<space_name>` is the name of your space, to retrieve your space ID.    For further information about how containers work in the IBM Containers service, review the documentation under https://new-console.ng.bluemix.net/docs/containers/container_index.html. 
 *
 * The version of the OpenAPI document: 3.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIImageDetail_Config.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIImageDetail_Config::OAIImageDetail_Config(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIImageDetail_Config::OAIImageDetail_Config() {
    this->initializeModel();
}

OAIImageDetail_Config::~OAIImageDetail_Config() {}

void OAIImageDetail_Config::initializeModel() {

    m_args_escaped_isSet = false;
    m_args_escaped_isValid = false;

    m_attach_stderr_isSet = false;
    m_attach_stderr_isValid = false;

    m_attach_stdin_isSet = false;
    m_attach_stdin_isValid = false;

    m_attach_stdout_isSet = false;
    m_attach_stdout_isValid = false;

    m_cmd_isSet = false;
    m_cmd_isValid = false;

    m_domainmame_isSet = false;
    m_domainmame_isValid = false;

    m_entrypoint_isSet = false;
    m_entrypoint_isValid = false;

    m_env_isSet = false;
    m_env_isValid = false;

    m_exposed_ports_isSet = false;
    m_exposed_ports_isValid = false;

    m_hostname_isSet = false;
    m_hostname_isValid = false;

    m_image_isSet = false;
    m_image_isValid = false;

    m_labels_isSet = false;
    m_labels_isValid = false;

    m_on_build_isSet = false;
    m_on_build_isValid = false;

    m_open_stdin_isSet = false;
    m_open_stdin_isValid = false;

    m_stdin_once_isSet = false;
    m_stdin_once_isValid = false;

    m_tty_isSet = false;
    m_tty_isValid = false;

    m_user_isSet = false;
    m_user_isValid = false;

    m_volumes_isSet = false;
    m_volumes_isValid = false;

    m_working_dir_isSet = false;
    m_working_dir_isValid = false;
}

void OAIImageDetail_Config::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIImageDetail_Config::fromJsonObject(QJsonObject json) {

    m_args_escaped_isValid = ::OpenAPI::fromJsonValue(m_args_escaped, json[QString("ArgsEscaped")]);
    m_args_escaped_isSet = !json[QString("ArgsEscaped")].isNull() && m_args_escaped_isValid;

    m_attach_stderr_isValid = ::OpenAPI::fromJsonValue(m_attach_stderr, json[QString("AttachStderr")]);
    m_attach_stderr_isSet = !json[QString("AttachStderr")].isNull() && m_attach_stderr_isValid;

    m_attach_stdin_isValid = ::OpenAPI::fromJsonValue(m_attach_stdin, json[QString("AttachStdin")]);
    m_attach_stdin_isSet = !json[QString("AttachStdin")].isNull() && m_attach_stdin_isValid;

    m_attach_stdout_isValid = ::OpenAPI::fromJsonValue(m_attach_stdout, json[QString("AttachStdout")]);
    m_attach_stdout_isSet = !json[QString("AttachStdout")].isNull() && m_attach_stdout_isValid;

    m_cmd_isValid = ::OpenAPI::fromJsonValue(m_cmd, json[QString("Cmd")]);
    m_cmd_isSet = !json[QString("Cmd")].isNull() && m_cmd_isValid;

    m_domainmame_isValid = ::OpenAPI::fromJsonValue(m_domainmame, json[QString("Domainmame")]);
    m_domainmame_isSet = !json[QString("Domainmame")].isNull() && m_domainmame_isValid;

    m_entrypoint_isValid = ::OpenAPI::fromJsonValue(m_entrypoint, json[QString("Entrypoint")]);
    m_entrypoint_isSet = !json[QString("Entrypoint")].isNull() && m_entrypoint_isValid;

    m_env_isValid = ::OpenAPI::fromJsonValue(m_env, json[QString("Env")]);
    m_env_isSet = !json[QString("Env")].isNull() && m_env_isValid;

    m_exposed_ports_isValid = ::OpenAPI::fromJsonValue(m_exposed_ports, json[QString("ExposedPorts")]);
    m_exposed_ports_isSet = !json[QString("ExposedPorts")].isNull() && m_exposed_ports_isValid;

    m_hostname_isValid = ::OpenAPI::fromJsonValue(m_hostname, json[QString("Hostname")]);
    m_hostname_isSet = !json[QString("Hostname")].isNull() && m_hostname_isValid;

    m_image_isValid = ::OpenAPI::fromJsonValue(m_image, json[QString("Image")]);
    m_image_isSet = !json[QString("Image")].isNull() && m_image_isValid;

    m_labels_isValid = ::OpenAPI::fromJsonValue(m_labels, json[QString("Labels")]);
    m_labels_isSet = !json[QString("Labels")].isNull() && m_labels_isValid;

    m_on_build_isValid = ::OpenAPI::fromJsonValue(m_on_build, json[QString("OnBuild")]);
    m_on_build_isSet = !json[QString("OnBuild")].isNull() && m_on_build_isValid;

    m_open_stdin_isValid = ::OpenAPI::fromJsonValue(m_open_stdin, json[QString("OpenStdin")]);
    m_open_stdin_isSet = !json[QString("OpenStdin")].isNull() && m_open_stdin_isValid;

    m_stdin_once_isValid = ::OpenAPI::fromJsonValue(m_stdin_once, json[QString("StdinOnce")]);
    m_stdin_once_isSet = !json[QString("StdinOnce")].isNull() && m_stdin_once_isValid;

    m_tty_isValid = ::OpenAPI::fromJsonValue(m_tty, json[QString("Tty")]);
    m_tty_isSet = !json[QString("Tty")].isNull() && m_tty_isValid;

    m_user_isValid = ::OpenAPI::fromJsonValue(m_user, json[QString("User")]);
    m_user_isSet = !json[QString("User")].isNull() && m_user_isValid;

    m_volumes_isValid = ::OpenAPI::fromJsonValue(m_volumes, json[QString("Volumes")]);
    m_volumes_isSet = !json[QString("Volumes")].isNull() && m_volumes_isValid;

    m_working_dir_isValid = ::OpenAPI::fromJsonValue(m_working_dir, json[QString("WorkingDir")]);
    m_working_dir_isSet = !json[QString("WorkingDir")].isNull() && m_working_dir_isValid;
}

QString OAIImageDetail_Config::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIImageDetail_Config::asJsonObject() const {
    QJsonObject obj;
    if (m_args_escaped_isSet) {
        obj.insert(QString("ArgsEscaped"), ::OpenAPI::toJsonValue(m_args_escaped));
    }
    if (m_attach_stderr_isSet) {
        obj.insert(QString("AttachStderr"), ::OpenAPI::toJsonValue(m_attach_stderr));
    }
    if (m_attach_stdin_isSet) {
        obj.insert(QString("AttachStdin"), ::OpenAPI::toJsonValue(m_attach_stdin));
    }
    if (m_attach_stdout_isSet) {
        obj.insert(QString("AttachStdout"), ::OpenAPI::toJsonValue(m_attach_stdout));
    }
    if (m_cmd.size() > 0) {
        obj.insert(QString("Cmd"), ::OpenAPI::toJsonValue(m_cmd));
    }
    if (m_domainmame_isSet) {
        obj.insert(QString("Domainmame"), ::OpenAPI::toJsonValue(m_domainmame));
    }
    if (m_entrypoint_isSet) {
        obj.insert(QString("Entrypoint"), ::OpenAPI::toJsonValue(m_entrypoint));
    }
    if (m_env.size() > 0) {
        obj.insert(QString("Env"), ::OpenAPI::toJsonValue(m_env));
    }
    if (m_exposed_ports.size() > 0) {
        obj.insert(QString("ExposedPorts"), ::OpenAPI::toJsonValue(m_exposed_ports));
    }
    if (m_hostname_isSet) {
        obj.insert(QString("Hostname"), ::OpenAPI::toJsonValue(m_hostname));
    }
    if (m_image_isSet) {
        obj.insert(QString("Image"), ::OpenAPI::toJsonValue(m_image));
    }
    if (m_labels.size() > 0) {
        obj.insert(QString("Labels"), ::OpenAPI::toJsonValue(m_labels));
    }
    if (m_on_build.size() > 0) {
        obj.insert(QString("OnBuild"), ::OpenAPI::toJsonValue(m_on_build));
    }
    if (m_open_stdin_isSet) {
        obj.insert(QString("OpenStdin"), ::OpenAPI::toJsonValue(m_open_stdin));
    }
    if (m_stdin_once_isSet) {
        obj.insert(QString("StdinOnce"), ::OpenAPI::toJsonValue(m_stdin_once));
    }
    if (m_tty_isSet) {
        obj.insert(QString("Tty"), ::OpenAPI::toJsonValue(m_tty));
    }
    if (m_user_isSet) {
        obj.insert(QString("User"), ::OpenAPI::toJsonValue(m_user));
    }
    if (m_volumes_isSet) {
        obj.insert(QString("Volumes"), ::OpenAPI::toJsonValue(m_volumes));
    }
    if (m_working_dir_isSet) {
        obj.insert(QString("WorkingDir"), ::OpenAPI::toJsonValue(m_working_dir));
    }
    return obj;
}

bool OAIImageDetail_Config::isArgsEscaped() const {
    return m_args_escaped;
}
void OAIImageDetail_Config::setArgsEscaped(const bool &args_escaped) {
    m_args_escaped = args_escaped;
    m_args_escaped_isSet = true;
}

bool OAIImageDetail_Config::is_args_escaped_Set() const{
    return m_args_escaped_isSet;
}

bool OAIImageDetail_Config::is_args_escaped_Valid() const{
    return m_args_escaped_isValid;
}

bool OAIImageDetail_Config::isAttachStderr() const {
    return m_attach_stderr;
}
void OAIImageDetail_Config::setAttachStderr(const bool &attach_stderr) {
    m_attach_stderr = attach_stderr;
    m_attach_stderr_isSet = true;
}

bool OAIImageDetail_Config::is_attach_stderr_Set() const{
    return m_attach_stderr_isSet;
}

bool OAIImageDetail_Config::is_attach_stderr_Valid() const{
    return m_attach_stderr_isValid;
}

bool OAIImageDetail_Config::isAttachStdin() const {
    return m_attach_stdin;
}
void OAIImageDetail_Config::setAttachStdin(const bool &attach_stdin) {
    m_attach_stdin = attach_stdin;
    m_attach_stdin_isSet = true;
}

bool OAIImageDetail_Config::is_attach_stdin_Set() const{
    return m_attach_stdin_isSet;
}

bool OAIImageDetail_Config::is_attach_stdin_Valid() const{
    return m_attach_stdin_isValid;
}

bool OAIImageDetail_Config::isAttachStdout() const {
    return m_attach_stdout;
}
void OAIImageDetail_Config::setAttachStdout(const bool &attach_stdout) {
    m_attach_stdout = attach_stdout;
    m_attach_stdout_isSet = true;
}

bool OAIImageDetail_Config::is_attach_stdout_Set() const{
    return m_attach_stdout_isSet;
}

bool OAIImageDetail_Config::is_attach_stdout_Valid() const{
    return m_attach_stdout_isValid;
}

QList<QString> OAIImageDetail_Config::getCmd() const {
    return m_cmd;
}
void OAIImageDetail_Config::setCmd(const QList<QString> &cmd) {
    m_cmd = cmd;
    m_cmd_isSet = true;
}

bool OAIImageDetail_Config::is_cmd_Set() const{
    return m_cmd_isSet;
}

bool OAIImageDetail_Config::is_cmd_Valid() const{
    return m_cmd_isValid;
}

QString OAIImageDetail_Config::getDomainmame() const {
    return m_domainmame;
}
void OAIImageDetail_Config::setDomainmame(const QString &domainmame) {
    m_domainmame = domainmame;
    m_domainmame_isSet = true;
}

bool OAIImageDetail_Config::is_domainmame_Set() const{
    return m_domainmame_isSet;
}

bool OAIImageDetail_Config::is_domainmame_Valid() const{
    return m_domainmame_isValid;
}

QString OAIImageDetail_Config::getEntrypoint() const {
    return m_entrypoint;
}
void OAIImageDetail_Config::setEntrypoint(const QString &entrypoint) {
    m_entrypoint = entrypoint;
    m_entrypoint_isSet = true;
}

bool OAIImageDetail_Config::is_entrypoint_Set() const{
    return m_entrypoint_isSet;
}

bool OAIImageDetail_Config::is_entrypoint_Valid() const{
    return m_entrypoint_isValid;
}

QList<QString> OAIImageDetail_Config::getEnv() const {
    return m_env;
}
void OAIImageDetail_Config::setEnv(const QList<QString> &env) {
    m_env = env;
    m_env_isSet = true;
}

bool OAIImageDetail_Config::is_env_Set() const{
    return m_env_isSet;
}

bool OAIImageDetail_Config::is_env_Valid() const{
    return m_env_isValid;
}

QList<QString> OAIImageDetail_Config::getExposedPorts() const {
    return m_exposed_ports;
}
void OAIImageDetail_Config::setExposedPorts(const QList<QString> &exposed_ports) {
    m_exposed_ports = exposed_ports;
    m_exposed_ports_isSet = true;
}

bool OAIImageDetail_Config::is_exposed_ports_Set() const{
    return m_exposed_ports_isSet;
}

bool OAIImageDetail_Config::is_exposed_ports_Valid() const{
    return m_exposed_ports_isValid;
}

QString OAIImageDetail_Config::getHostname() const {
    return m_hostname;
}
void OAIImageDetail_Config::setHostname(const QString &hostname) {
    m_hostname = hostname;
    m_hostname_isSet = true;
}

bool OAIImageDetail_Config::is_hostname_Set() const{
    return m_hostname_isSet;
}

bool OAIImageDetail_Config::is_hostname_Valid() const{
    return m_hostname_isValid;
}

QString OAIImageDetail_Config::getImage() const {
    return m_image;
}
void OAIImageDetail_Config::setImage(const QString &image) {
    m_image = image;
    m_image_isSet = true;
}

bool OAIImageDetail_Config::is_image_Set() const{
    return m_image_isSet;
}

bool OAIImageDetail_Config::is_image_Valid() const{
    return m_image_isValid;
}

QList<QString> OAIImageDetail_Config::getLabels() const {
    return m_labels;
}
void OAIImageDetail_Config::setLabels(const QList<QString> &labels) {
    m_labels = labels;
    m_labels_isSet = true;
}

bool OAIImageDetail_Config::is_labels_Set() const{
    return m_labels_isSet;
}

bool OAIImageDetail_Config::is_labels_Valid() const{
    return m_labels_isValid;
}

QList<QString> OAIImageDetail_Config::getOnBuild() const {
    return m_on_build;
}
void OAIImageDetail_Config::setOnBuild(const QList<QString> &on_build) {
    m_on_build = on_build;
    m_on_build_isSet = true;
}

bool OAIImageDetail_Config::is_on_build_Set() const{
    return m_on_build_isSet;
}

bool OAIImageDetail_Config::is_on_build_Valid() const{
    return m_on_build_isValid;
}

bool OAIImageDetail_Config::isOpenStdin() const {
    return m_open_stdin;
}
void OAIImageDetail_Config::setOpenStdin(const bool &open_stdin) {
    m_open_stdin = open_stdin;
    m_open_stdin_isSet = true;
}

bool OAIImageDetail_Config::is_open_stdin_Set() const{
    return m_open_stdin_isSet;
}

bool OAIImageDetail_Config::is_open_stdin_Valid() const{
    return m_open_stdin_isValid;
}

bool OAIImageDetail_Config::isStdinOnce() const {
    return m_stdin_once;
}
void OAIImageDetail_Config::setStdinOnce(const bool &stdin_once) {
    m_stdin_once = stdin_once;
    m_stdin_once_isSet = true;
}

bool OAIImageDetail_Config::is_stdin_once_Set() const{
    return m_stdin_once_isSet;
}

bool OAIImageDetail_Config::is_stdin_once_Valid() const{
    return m_stdin_once_isValid;
}

bool OAIImageDetail_Config::isTty() const {
    return m_tty;
}
void OAIImageDetail_Config::setTty(const bool &tty) {
    m_tty = tty;
    m_tty_isSet = true;
}

bool OAIImageDetail_Config::is_tty_Set() const{
    return m_tty_isSet;
}

bool OAIImageDetail_Config::is_tty_Valid() const{
    return m_tty_isValid;
}

QString OAIImageDetail_Config::getUser() const {
    return m_user;
}
void OAIImageDetail_Config::setUser(const QString &user) {
    m_user = user;
    m_user_isSet = true;
}

bool OAIImageDetail_Config::is_user_Set() const{
    return m_user_isSet;
}

bool OAIImageDetail_Config::is_user_Valid() const{
    return m_user_isValid;
}

QString OAIImageDetail_Config::getVolumes() const {
    return m_volumes;
}
void OAIImageDetail_Config::setVolumes(const QString &volumes) {
    m_volumes = volumes;
    m_volumes_isSet = true;
}

bool OAIImageDetail_Config::is_volumes_Set() const{
    return m_volumes_isSet;
}

bool OAIImageDetail_Config::is_volumes_Valid() const{
    return m_volumes_isValid;
}

QString OAIImageDetail_Config::getWorkingDir() const {
    return m_working_dir;
}
void OAIImageDetail_Config::setWorkingDir(const QString &working_dir) {
    m_working_dir = working_dir;
    m_working_dir_isSet = true;
}

bool OAIImageDetail_Config::is_working_dir_Set() const{
    return m_working_dir_isSet;
}

bool OAIImageDetail_Config::is_working_dir_Valid() const{
    return m_working_dir_isValid;
}

bool OAIImageDetail_Config::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_args_escaped_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_attach_stderr_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_attach_stdin_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_attach_stdout_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_cmd.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_domainmame_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_entrypoint_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_env.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_exposed_ports.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_hostname_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_image_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_labels.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_on_build.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_open_stdin_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_stdin_once_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tty_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_user_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_volumes_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_working_dir_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIImageDetail_Config::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
