/**
 * IBM Containers API
 * Containers are virtual software objects that include all the elements that an app needs to run. A container has the benefits of resource isolation and allocation but is more portable and efficient than, for example, a virtual machine.   This documentation describes the IBM Containers API, which is based on the Docker Remote API. The API provides endpoints that you can use to create and manage your single containers and container groups in Bluemix. Endpoints are summarized under the following tags:   - **Authentication**: Retrieve and refresh your TLS certificates.  - **Private Docker images registry**: Create your own private Docker images registry in Bluemix by setting a namespace for your organization.  - **Images**: View, build, and push your images to your private Bluemix registry so you can use them with IBM Containers. You can also scan your container images with the Vulnerability Advisor against standard policies set by the organization manager and a database of known Ubuntu issues.  - **Single Containers**: Create and manage single containers in Bluemix. Use a single container to implement short-lived processes or to run simple tests as you develop an app or service. To make your single container available from the internet, review the `Public IP addresses` endpoints.  - **Container Groups**: Create and manage your container groups in Bluemix. A container group consists of multiple single containers that are all created from the same container image and as a consequence are configured in the same way. Container groups offer further options at no cost to make your app highly available. These options include in-built load balancing, auto-recovery of unhealthy container instances, and auto-scaling of container instances based on CPU and memory usage. Map a public route to your container group to make your app accessible from the internet.   - **Public IP addresses**: Use these endpoints to request public IP addresses for your space. You can bind this IP address to your container to make your container accessible from the internet.  - **File shares**: Create, list and delete file shares in a space. A file share is a NFS storage system that hosts Docker volumes.   - **Volumes**: Create and manage container volumes in your space to persist the data of your containers.      Each API request requires an HTTP header that includes the 'X-Auth-Token’ and 'X-Auth-Project-Id’ parameter.   - **X-Auth-Token**: The JSON web token (JWT) that you receive when logging into the Bluemix platform. It allows you to use the IBM Containers REST API, access services, and resources. Run `cf oauth-token` to retrieve your access token information. - **X-Auth-Project-Id**: The unique ID of your organization space where you want to create or work with your containers. Run `cf space <space_name> --guid`, where `<space_name>` is the name of your space, to retrieve your space ID.    For further information about how containers work in the IBM Containers service, review the documentation under https://new-console.ng.bluemix.net/docs/containers/container_index.html. 
 *
 * The version of the OpenAPI document: 3.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIContainer.h
 *
 * 
 */

#ifndef OAIContainer_H
#define OAIContainer_H

#include <QJsonObject>

#include "OAIGroup.h"
#include "OAINetworkSetting.h"
#include "OAIObject.h"
#include "OAIPort.h"
#include <QList>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIGroup;
class OAINetworkSetting;
class OAIPort;

class OAIContainer : public OAIObject {
public:
    OAIContainer();
    OAIContainer(QString json);
    ~OAIContainer() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getCommand() const;
    void setCommand(const QString &command);
    bool is_command_Set() const;
    bool is_command_Valid() const;

    QString getContainerState() const;
    void setContainerState(const QString &container_state);
    bool is_container_state_Set() const;
    bool is_container_state_Valid() const;

    float getCreated() const;
    void setCreated(const float &created);
    bool is_created_Set() const;
    bool is_created_Valid() const;

    QList<QString> getEnv() const;
    void setEnv(const QList<QString> &env);
    bool is_env_Set() const;
    bool is_env_Valid() const;

    OAIGroup getGroup() const;
    void setGroup(const OAIGroup &group);
    bool is_group_Set() const;
    bool is_group_Valid() const;

    QString getId() const;
    void setId(const QString &id);
    bool is_id_Set() const;
    bool is_id_Valid() const;

    QString getImage() const;
    void setImage(const QString &image);
    bool is_image_Set() const;
    bool is_image_Valid() const;

    QString getImageId() const;
    void setImageId(const QString &image_id);
    bool is_image_id_Set() const;
    bool is_image_id_Valid() const;

    OAIObject getLabels() const;
    void setLabels(const OAIObject &labels);
    bool is_labels_Set() const;
    bool is_labels_Valid() const;

    qint32 getMemory() const;
    void setMemory(const qint32 &memory);
    bool is_memory_Set() const;
    bool is_memory_Valid() const;

    QString getName() const;
    void setName(const QString &name);
    bool is_name_Set() const;
    bool is_name_Valid() const;

    QList<QString> getNames() const;
    void setNames(const QList<QString> &names);
    bool is_names_Set() const;
    bool is_names_Valid() const;

    OAINetworkSetting getNetworkSettings() const;
    void setNetworkSettings(const OAINetworkSetting &network_settings);
    bool is_network_settings_Set() const;
    bool is_network_settings_Valid() const;

    OAIPort getPorts() const;
    void setPorts(const OAIPort &ports);
    bool is_ports_Set() const;
    bool is_ports_Valid() const;

    qint32 getSizeRootFs() const;
    void setSizeRootFs(const qint32 &size_root_fs);
    bool is_size_root_fs_Set() const;
    bool is_size_root_fs_Valid() const;

    qint32 getSizeRw() const;
    void setSizeRw(const qint32 &size_rw);
    bool is_size_rw_Set() const;
    bool is_size_rw_Valid() const;

    float getStarted() const;
    void setStarted(const float &started);
    bool is_started_Set() const;
    bool is_started_Valid() const;

    QString getStatus() const;
    void setStatus(const QString &status);
    bool is_status_Set() const;
    bool is_status_Valid() const;

    qint32 getVcpu() const;
    void setVcpu(const qint32 &vcpu);
    bool is_vcpu_Set() const;
    bool is_vcpu_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_command;
    bool m_command_isSet;
    bool m_command_isValid;

    QString m_container_state;
    bool m_container_state_isSet;
    bool m_container_state_isValid;

    float m_created;
    bool m_created_isSet;
    bool m_created_isValid;

    QList<QString> m_env;
    bool m_env_isSet;
    bool m_env_isValid;

    OAIGroup m_group;
    bool m_group_isSet;
    bool m_group_isValid;

    QString m_id;
    bool m_id_isSet;
    bool m_id_isValid;

    QString m_image;
    bool m_image_isSet;
    bool m_image_isValid;

    QString m_image_id;
    bool m_image_id_isSet;
    bool m_image_id_isValid;

    OAIObject m_labels;
    bool m_labels_isSet;
    bool m_labels_isValid;

    qint32 m_memory;
    bool m_memory_isSet;
    bool m_memory_isValid;

    QString m_name;
    bool m_name_isSet;
    bool m_name_isValid;

    QList<QString> m_names;
    bool m_names_isSet;
    bool m_names_isValid;

    OAINetworkSetting m_network_settings;
    bool m_network_settings_isSet;
    bool m_network_settings_isValid;

    OAIPort m_ports;
    bool m_ports_isSet;
    bool m_ports_isValid;

    qint32 m_size_root_fs;
    bool m_size_root_fs_isSet;
    bool m_size_root_fs_isValid;

    qint32 m_size_rw;
    bool m_size_rw_isSet;
    bool m_size_rw_isValid;

    float m_started;
    bool m_started_isSet;
    bool m_started_isValid;

    QString m_status;
    bool m_status_isSet;
    bool m_status_isValid;

    qint32 m_vcpu;
    bool m_vcpu_isSet;
    bool m_vcpu_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIContainer)

#endif // OAIContainer_H
