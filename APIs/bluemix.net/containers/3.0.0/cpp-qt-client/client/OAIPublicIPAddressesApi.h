/**
 * IBM Containers API
 * Containers are virtual software objects that include all the elements that an app needs to run. A container has the benefits of resource isolation and allocation but is more portable and efficient than, for example, a virtual machine.   This documentation describes the IBM Containers API, which is based on the Docker Remote API. The API provides endpoints that you can use to create and manage your single containers and container groups in Bluemix. Endpoints are summarized under the following tags:   - **Authentication**: Retrieve and refresh your TLS certificates.  - **Private Docker images registry**: Create your own private Docker images registry in Bluemix by setting a namespace for your organization.  - **Images**: View, build, and push your images to your private Bluemix registry so you can use them with IBM Containers. You can also scan your container images with the Vulnerability Advisor against standard policies set by the organization manager and a database of known Ubuntu issues.  - **Single Containers**: Create and manage single containers in Bluemix. Use a single container to implement short-lived processes or to run simple tests as you develop an app or service. To make your single container available from the internet, review the `Public IP addresses` endpoints.  - **Container Groups**: Create and manage your container groups in Bluemix. A container group consists of multiple single containers that are all created from the same container image and as a consequence are configured in the same way. Container groups offer further options at no cost to make your app highly available. These options include in-built load balancing, auto-recovery of unhealthy container instances, and auto-scaling of container instances based on CPU and memory usage. Map a public route to your container group to make your app accessible from the internet.   - **Public IP addresses**: Use these endpoints to request public IP addresses for your space. You can bind this IP address to your container to make your container accessible from the internet.  - **File shares**: Create, list and delete file shares in a space. A file share is a NFS storage system that hosts Docker volumes.   - **Volumes**: Create and manage container volumes in your space to persist the data of your containers.      Each API request requires an HTTP header that includes the 'X-Auth-Token’ and 'X-Auth-Project-Id’ parameter.   - **X-Auth-Token**: The JSON web token (JWT) that you receive when logging into the Bluemix platform. It allows you to use the IBM Containers REST API, access services, and resources. Run `cf oauth-token` to retrieve your access token information. - **X-Auth-Project-Id**: The unique ID of your organization space where you want to create or work with your containers. Run `cf space <space_name> --guid`, where `<space_name>` is the name of your space, to retrieve your space ID.    For further information about how containers work in the IBM Containers service, review the documentation under https://new-console.ng.bluemix.net/docs/containers/container_index.html. 
 *
 * The version of the OpenAPI document: 3.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIPublicIPAddressesApi_H
#define OAI_OAIPublicIPAddressesApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIFloatingIP.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIPublicIPAddressesApi : public QObject {
    Q_OBJECT

public:
    OAIPublicIPAddressesApi(const int timeOut = 0);
    ~OAIPublicIPAddressesApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  x_auth_token QString [required]
    * @param[in]  x_auth_project_id QString [required]
    * @param[in]  all bool [optional]
    */
    virtual void containersFloatingIpsGet(const QString &x_auth_token, const QString &x_auth_project_id, const ::OpenAPI::OptionalParam<bool> &all = ::OpenAPI::OptionalParam<bool>());

    /**
    * @param[in]  x_auth_token QString [required]
    * @param[in]  x_auth_project_id QString [required]
    * @param[in]  ip QString [required]
    */
    virtual void containersFloatingIpsIpReleasePost(const QString &x_auth_token, const QString &x_auth_project_id, const QString &ip);

    /**
    * @param[in]  x_auth_token QString [required]
    * @param[in]  x_auth_project_id QString [required]
    */
    virtual void containersFloatingIpsRequestPost(const QString &x_auth_token, const QString &x_auth_project_id);

    /**
    * @param[in]  x_auth_token QString [required]
    * @param[in]  x_auth_project_id QString [required]
    * @param[in]  name_or_id QString [required]
    * @param[in]  ip QString [required]
    */
    virtual void containersNameOrIdFloatingIpsIpBindPost(const QString &x_auth_token, const QString &x_auth_project_id, const QString &name_or_id, const QString &ip);

    /**
    * @param[in]  x_auth_token QString [required]
    * @param[in]  x_auth_project_id QString [required]
    * @param[in]  name_or_id QString [required]
    * @param[in]  ip QString [required]
    */
    virtual void containersNameOrIdFloatingIpsIpUnbindPost(const QString &x_auth_token, const QString &x_auth_project_id, const QString &name_or_id, const QString &ip);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void containersFloatingIpsGetCallback(OAIHttpRequestWorker *worker);
    void containersFloatingIpsIpReleasePostCallback(OAIHttpRequestWorker *worker);
    void containersFloatingIpsRequestPostCallback(OAIHttpRequestWorker *worker);
    void containersNameOrIdFloatingIpsIpBindPostCallback(OAIHttpRequestWorker *worker);
    void containersNameOrIdFloatingIpsIpUnbindPostCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void containersFloatingIpsGetSignal(QList<OAIFloatingIP> summary);
    void containersFloatingIpsIpReleasePostSignal();
    void containersFloatingIpsRequestPostSignal(QString summary);
    void containersNameOrIdFloatingIpsIpBindPostSignal();
    void containersNameOrIdFloatingIpsIpUnbindPostSignal();


    void containersFloatingIpsGetSignalFull(OAIHttpRequestWorker *worker, QList<OAIFloatingIP> summary);
    void containersFloatingIpsIpReleasePostSignalFull(OAIHttpRequestWorker *worker);
    void containersFloatingIpsRequestPostSignalFull(OAIHttpRequestWorker *worker, QString summary);
    void containersNameOrIdFloatingIpsIpBindPostSignalFull(OAIHttpRequestWorker *worker);
    void containersNameOrIdFloatingIpsIpUnbindPostSignalFull(OAIHttpRequestWorker *worker);

    Q_DECL_DEPRECATED_X("Use containersFloatingIpsGetSignalError() instead")
    void containersFloatingIpsGetSignalE(QList<OAIFloatingIP> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void containersFloatingIpsGetSignalError(QList<OAIFloatingIP> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use containersFloatingIpsIpReleasePostSignalError() instead")
    void containersFloatingIpsIpReleasePostSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void containersFloatingIpsIpReleasePostSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use containersFloatingIpsRequestPostSignalError() instead")
    void containersFloatingIpsRequestPostSignalE(QString summary, QNetworkReply::NetworkError error_type, QString error_str);
    void containersFloatingIpsRequestPostSignalError(QString summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use containersNameOrIdFloatingIpsIpBindPostSignalError() instead")
    void containersNameOrIdFloatingIpsIpBindPostSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void containersNameOrIdFloatingIpsIpBindPostSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use containersNameOrIdFloatingIpsIpUnbindPostSignalError() instead")
    void containersNameOrIdFloatingIpsIpUnbindPostSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void containersNameOrIdFloatingIpsIpUnbindPostSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use containersFloatingIpsGetSignalErrorFull() instead")
    void containersFloatingIpsGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void containersFloatingIpsGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use containersFloatingIpsIpReleasePostSignalErrorFull() instead")
    void containersFloatingIpsIpReleasePostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void containersFloatingIpsIpReleasePostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use containersFloatingIpsRequestPostSignalErrorFull() instead")
    void containersFloatingIpsRequestPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void containersFloatingIpsRequestPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use containersNameOrIdFloatingIpsIpBindPostSignalErrorFull() instead")
    void containersNameOrIdFloatingIpsIpBindPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void containersNameOrIdFloatingIpsIpBindPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use containersNameOrIdFloatingIpsIpUnbindPostSignalErrorFull() instead")
    void containersNameOrIdFloatingIpsIpUnbindPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void containersNameOrIdFloatingIpsIpUnbindPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
