/**
 * IBM Containers API
 * Containers are virtual software objects that include all the elements that an app needs to run. A container has the benefits of resource isolation and allocation but is more portable and efficient than, for example, a virtual machine.   This documentation describes the IBM Containers API, which is based on the Docker Remote API. The API provides endpoints that you can use to create and manage your single containers and container groups in Bluemix. Endpoints are summarized under the following tags:   - **Authentication**: Retrieve and refresh your TLS certificates.  - **Private Docker images registry**: Create your own private Docker images registry in Bluemix by setting a namespace for your organization.  - **Images**: View, build, and push your images to your private Bluemix registry so you can use them with IBM Containers. You can also scan your container images with the Vulnerability Advisor against standard policies set by the organization manager and a database of known Ubuntu issues.  - **Single Containers**: Create and manage single containers in Bluemix. Use a single container to implement short-lived processes or to run simple tests as you develop an app or service. To make your single container available from the internet, review the `Public IP addresses` endpoints.  - **Container Groups**: Create and manage your container groups in Bluemix. A container group consists of multiple single containers that are all created from the same container image and as a consequence are configured in the same way. Container groups offer further options at no cost to make your app highly available. These options include in-built load balancing, auto-recovery of unhealthy container instances, and auto-scaling of container instances based on CPU and memory usage. Map a public route to your container group to make your app accessible from the internet.   - **Public IP addresses**: Use these endpoints to request public IP addresses for your space. You can bind this IP address to your container to make your container accessible from the internet.  - **File shares**: Create, list and delete file shares in a space. A file share is a NFS storage system that hosts Docker volumes.   - **Volumes**: Create and manage container volumes in your space to persist the data of your containers.      Each API request requires an HTTP header that includes the 'X-Auth-Token’ and 'X-Auth-Project-Id’ parameter.   - **X-Auth-Token**: The JSON web token (JWT) that you receive when logging into the Bluemix platform. It allows you to use the IBM Containers REST API, access services, and resources. Run `cf oauth-token` to retrieve your access token information. - **X-Auth-Project-Id**: The unique ID of your organization space where you want to create or work with your containers. Run `cf space <space_name> --guid`, where `<space_name>` is the name of your space, to retrieve your space ID.    For further information about how containers work in the IBM Containers service, review the documentation under https://new-console.ng.bluemix.net/docs/containers/container_index.html. 
 *
 * The version of the OpenAPI document: 3.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIContainerGroupsApi_H
#define OAI_OAIContainerGroupsApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIContainersGroupsGetListItem.h"
#include "OAIContainersGroupsNameOrIdGetDetails.h"
#include "OAIContainersGroupsNameOrIdMaproutePostInfo.h"
#include "OAIContainersGroupsNameOrIdPatchUpdatedInfo.h"
#include "OAIContainersGroupsPostCreatedInfo.h"
#include "OAIContainersGroupsPostRequiredAttributes.h"
#include "OAIRoute.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIContainerGroupsApi : public QObject {
    Q_OBJECT

public:
    OAIContainerGroupsApi(const int timeOut = 0);
    ~OAIContainerGroupsApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  x_auth_token QString [required]
    * @param[in]  x_auth_project_id QString [required]
    */
    virtual void containersGroupsGet(const QString &x_auth_token, const QString &x_auth_project_id);

    /**
    * @param[in]  x_auth_token QString [required]
    * @param[in]  x_auth_project_id QString [required]
    * @param[in]  name_or_id QString [required]
    * @param[in]  force QString [optional]
    */
    virtual void containersGroupsNameOrIdDelete(const QString &x_auth_token, const QString &x_auth_project_id, const QString &name_or_id, const ::OpenAPI::OptionalParam<QString> &force = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  x_auth_token QString [required]
    * @param[in]  x_auth_project_id QString [required]
    * @param[in]  name_or_id QString [required]
    */
    virtual void containersGroupsNameOrIdGet(const QString &x_auth_token, const QString &x_auth_project_id, const QString &name_or_id);

    /**
    * @param[in]  x_auth_token QString [required]
    * @param[in]  x_auth_project_id QString [required]
    * @param[in]  name_or_id QString [required]
    * @param[in]  oai_route OAIRoute [required]
    */
    virtual void containersGroupsNameOrIdMaproutePost(const QString &x_auth_token, const QString &x_auth_project_id, const QString &name_or_id, const OAIRoute &oai_route);

    /**
    * @param[in]  x_auth_token QString [required]
    * @param[in]  x_auth_project_id QString [required]
    * @param[in]  name_or_id QString [required]
    * @param[in]  oai_containers_groups_name_or_id_patch_updated_info OAIContainersGroupsNameOrIdPatchUpdatedInfo [required]
    */
    virtual void containersGroupsNameOrIdPatch(const QString &x_auth_token, const QString &x_auth_project_id, const QString &name_or_id, const OAIContainersGroupsNameOrIdPatchUpdatedInfo &oai_containers_groups_name_or_id_patch_updated_info);

    /**
    * @param[in]  x_auth_token QString [required]
    * @param[in]  x_auth_project_id QString [required]
    * @param[in]  name_or_id QString [required]
    * @param[in]  oai_route OAIRoute [required]
    */
    virtual void containersGroupsNameOrIdUnmaproutePost(const QString &x_auth_token, const QString &x_auth_project_id, const QString &name_or_id, const OAIRoute &oai_route);

    /**
    * @param[in]  x_auth_token QString [required]
    * @param[in]  x_auth_project_id QString [required]
    * @param[in]  oai_containers_groups_post_required_attributes OAIContainersGroupsPostRequiredAttributes [required]
    */
    virtual void containersGroupsPost(const QString &x_auth_token, const QString &x_auth_project_id, const OAIContainersGroupsPostRequiredAttributes &oai_containers_groups_post_required_attributes);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void containersGroupsGetCallback(OAIHttpRequestWorker *worker);
    void containersGroupsNameOrIdDeleteCallback(OAIHttpRequestWorker *worker);
    void containersGroupsNameOrIdGetCallback(OAIHttpRequestWorker *worker);
    void containersGroupsNameOrIdMaproutePostCallback(OAIHttpRequestWorker *worker);
    void containersGroupsNameOrIdPatchCallback(OAIHttpRequestWorker *worker);
    void containersGroupsNameOrIdUnmaproutePostCallback(OAIHttpRequestWorker *worker);
    void containersGroupsPostCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void containersGroupsGetSignal(QList<OAIContainersGroupsGetListItem> summary);
    void containersGroupsNameOrIdDeleteSignal();
    void containersGroupsNameOrIdGetSignal(OAIContainersGroupsNameOrIdGetDetails summary);
    void containersGroupsNameOrIdMaproutePostSignal(OAIContainersGroupsNameOrIdMaproutePostInfo summary);
    void containersGroupsNameOrIdPatchSignal();
    void containersGroupsNameOrIdUnmaproutePostSignal(OAIContainersGroupsNameOrIdMaproutePostInfo summary);
    void containersGroupsPostSignal(OAIContainersGroupsPostCreatedInfo summary);


    void containersGroupsGetSignalFull(OAIHttpRequestWorker *worker, QList<OAIContainersGroupsGetListItem> summary);
    void containersGroupsNameOrIdDeleteSignalFull(OAIHttpRequestWorker *worker);
    void containersGroupsNameOrIdGetSignalFull(OAIHttpRequestWorker *worker, OAIContainersGroupsNameOrIdGetDetails summary);
    void containersGroupsNameOrIdMaproutePostSignalFull(OAIHttpRequestWorker *worker, OAIContainersGroupsNameOrIdMaproutePostInfo summary);
    void containersGroupsNameOrIdPatchSignalFull(OAIHttpRequestWorker *worker);
    void containersGroupsNameOrIdUnmaproutePostSignalFull(OAIHttpRequestWorker *worker, OAIContainersGroupsNameOrIdMaproutePostInfo summary);
    void containersGroupsPostSignalFull(OAIHttpRequestWorker *worker, OAIContainersGroupsPostCreatedInfo summary);

    Q_DECL_DEPRECATED_X("Use containersGroupsGetSignalError() instead")
    void containersGroupsGetSignalE(QList<OAIContainersGroupsGetListItem> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void containersGroupsGetSignalError(QList<OAIContainersGroupsGetListItem> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use containersGroupsNameOrIdDeleteSignalError() instead")
    void containersGroupsNameOrIdDeleteSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void containersGroupsNameOrIdDeleteSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use containersGroupsNameOrIdGetSignalError() instead")
    void containersGroupsNameOrIdGetSignalE(OAIContainersGroupsNameOrIdGetDetails summary, QNetworkReply::NetworkError error_type, QString error_str);
    void containersGroupsNameOrIdGetSignalError(OAIContainersGroupsNameOrIdGetDetails summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use containersGroupsNameOrIdMaproutePostSignalError() instead")
    void containersGroupsNameOrIdMaproutePostSignalE(OAIContainersGroupsNameOrIdMaproutePostInfo summary, QNetworkReply::NetworkError error_type, QString error_str);
    void containersGroupsNameOrIdMaproutePostSignalError(OAIContainersGroupsNameOrIdMaproutePostInfo summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use containersGroupsNameOrIdPatchSignalError() instead")
    void containersGroupsNameOrIdPatchSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void containersGroupsNameOrIdPatchSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use containersGroupsNameOrIdUnmaproutePostSignalError() instead")
    void containersGroupsNameOrIdUnmaproutePostSignalE(OAIContainersGroupsNameOrIdMaproutePostInfo summary, QNetworkReply::NetworkError error_type, QString error_str);
    void containersGroupsNameOrIdUnmaproutePostSignalError(OAIContainersGroupsNameOrIdMaproutePostInfo summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use containersGroupsPostSignalError() instead")
    void containersGroupsPostSignalE(OAIContainersGroupsPostCreatedInfo summary, QNetworkReply::NetworkError error_type, QString error_str);
    void containersGroupsPostSignalError(OAIContainersGroupsPostCreatedInfo summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use containersGroupsGetSignalErrorFull() instead")
    void containersGroupsGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void containersGroupsGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use containersGroupsNameOrIdDeleteSignalErrorFull() instead")
    void containersGroupsNameOrIdDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void containersGroupsNameOrIdDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use containersGroupsNameOrIdGetSignalErrorFull() instead")
    void containersGroupsNameOrIdGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void containersGroupsNameOrIdGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use containersGroupsNameOrIdMaproutePostSignalErrorFull() instead")
    void containersGroupsNameOrIdMaproutePostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void containersGroupsNameOrIdMaproutePostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use containersGroupsNameOrIdPatchSignalErrorFull() instead")
    void containersGroupsNameOrIdPatchSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void containersGroupsNameOrIdPatchSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use containersGroupsNameOrIdUnmaproutePostSignalErrorFull() instead")
    void containersGroupsNameOrIdUnmaproutePostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void containersGroupsNameOrIdUnmaproutePostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use containersGroupsPostSignalErrorFull() instead")
    void containersGroupsPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void containersGroupsPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
