/**
 * IBM Containers API
 * Containers are virtual software objects that include all the elements that an app needs to run. A container has the benefits of resource isolation and allocation but is more portable and efficient than, for example, a virtual machine.   This documentation describes the IBM Containers API, which is based on the Docker Remote API. The API provides endpoints that you can use to create and manage your single containers and container groups in Bluemix. Endpoints are summarized under the following tags:   - **Authentication**: Retrieve and refresh your TLS certificates.  - **Private Docker images registry**: Create your own private Docker images registry in Bluemix by setting a namespace for your organization.  - **Images**: View, build, and push your images to your private Bluemix registry so you can use them with IBM Containers. You can also scan your container images with the Vulnerability Advisor against standard policies set by the organization manager and a database of known Ubuntu issues.  - **Single Containers**: Create and manage single containers in Bluemix. Use a single container to implement short-lived processes or to run simple tests as you develop an app or service. To make your single container available from the internet, review the `Public IP addresses` endpoints.  - **Container Groups**: Create and manage your container groups in Bluemix. A container group consists of multiple single containers that are all created from the same container image and as a consequence are configured in the same way. Container groups offer further options at no cost to make your app highly available. These options include in-built load balancing, auto-recovery of unhealthy container instances, and auto-scaling of container instances based on CPU and memory usage. Map a public route to your container group to make your app accessible from the internet.   - **Public IP addresses**: Use these endpoints to request public IP addresses for your space. You can bind this IP address to your container to make your container accessible from the internet.  - **File shares**: Create, list and delete file shares in a space. A file share is a NFS storage system that hosts Docker volumes.   - **Volumes**: Create and manage container volumes in your space to persist the data of your containers.      Each API request requires an HTTP header that includes the 'X-Auth-Token’ and 'X-Auth-Project-Id’ parameter.   - **X-Auth-Token**: The JSON web token (JWT) that you receive when logging into the Bluemix platform. It allows you to use the IBM Containers REST API, access services, and resources. Run `cf oauth-token` to retrieve your access token information. - **X-Auth-Project-Id**: The unique ID of your organization space where you want to create or work with your containers. Run `cf space <space_name> --guid`, where `<space_name>` is the name of your space, to retrieve your space ID.    For further information about how containers work in the IBM Containers service, review the documentation under https://new-console.ng.bluemix.net/docs/containers/container_index.html. 
 *
 * The version of the OpenAPI document: 3.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIFileshare.h
 *
 * 
 */

#ifndef OAIFileshare_H
#define OAIFileshare_H

#include <QJsonObject>

#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAIFileshare : public OAIObject {
public:
    OAIFileshare();
    OAIFileshare(QString json);
    ~OAIFileshare() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    qint32 getCapacity() const;
    void setCapacity(const qint32 &capacity);
    bool is_capacity_Set() const;
    bool is_capacity_Valid() const;

    QString getCreatedDate() const;
    void setCreatedDate(const QString &created_date);
    bool is_created_date_Set() const;
    bool is_created_date_Valid() const;

    QString getFsName() const;
    void setFsName(const QString &fs_name);
    bool is_fs_name_Set() const;
    bool is_fs_name_Valid() const;

    QString getHostPath() const;
    void setHostPath(const QString &host_path);
    bool is_host_path_Set() const;
    bool is_host_path_Valid() const;

    double getIops() const;
    void setIops(const double &iops);
    bool is_iops_Set() const;
    bool is_iops_Valid() const;

    qint32 getIopsTotal() const;
    void setIopsTotal(const qint32 &iops_total);
    bool is_iops_total_Set() const;
    bool is_iops_total_Valid() const;

    QString getOrderId() const;
    void setOrderId(const QString &order_id);
    bool is_order_id_Set() const;
    bool is_order_id_Valid() const;

    QString getProvider() const;
    void setProvider(const QString &provider);
    bool is_provider_Set() const;
    bool is_provider_Valid() const;

    QString getSpaceGuid() const;
    void setSpaceGuid(const QString &space_guid);
    bool is_space_guid_Set() const;
    bool is_space_guid_Valid() const;

    QString getState() const;
    void setState(const QString &state);
    bool is_state_Set() const;
    bool is_state_Valid() const;

    QString getUpdatedDate() const;
    void setUpdatedDate(const QString &updated_date);
    bool is_updated_date_Set() const;
    bool is_updated_date_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    qint32 m_capacity;
    bool m_capacity_isSet;
    bool m_capacity_isValid;

    QString m_created_date;
    bool m_created_date_isSet;
    bool m_created_date_isValid;

    QString m_fs_name;
    bool m_fs_name_isSet;
    bool m_fs_name_isValid;

    QString m_host_path;
    bool m_host_path_isSet;
    bool m_host_path_isValid;

    double m_iops;
    bool m_iops_isSet;
    bool m_iops_isValid;

    qint32 m_iops_total;
    bool m_iops_total_isSet;
    bool m_iops_total_isValid;

    QString m_order_id;
    bool m_order_id_isSet;
    bool m_order_id_isValid;

    QString m_provider;
    bool m_provider_isSet;
    bool m_provider_isValid;

    QString m_space_guid;
    bool m_space_guid_isSet;
    bool m_space_guid_isValid;

    QString m_state;
    bool m_state_isSet;
    bool m_state_isValid;

    QString m_updated_date;
    bool m_updated_date_isSet;
    bool m_updated_date_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIFileshare)

#endif // OAIFileshare_H
