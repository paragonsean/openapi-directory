/**
 * IBM Containers API
 * Containers are virtual software objects that include all the elements that an app needs to run. A container has the benefits of resource isolation and allocation but is more portable and efficient than, for example, a virtual machine.   This documentation describes the IBM Containers API, which is based on the Docker Remote API. The API provides endpoints that you can use to create and manage your single containers and container groups in Bluemix. Endpoints are summarized under the following tags:   - **Authentication**: Retrieve and refresh your TLS certificates.  - **Private Docker images registry**: Create your own private Docker images registry in Bluemix by setting a namespace for your organization.  - **Images**: View, build, and push your images to your private Bluemix registry so you can use them with IBM Containers. You can also scan your container images with the Vulnerability Advisor against standard policies set by the organization manager and a database of known Ubuntu issues.  - **Single Containers**: Create and manage single containers in Bluemix. Use a single container to implement short-lived processes or to run simple tests as you develop an app or service. To make your single container available from the internet, review the `Public IP addresses` endpoints.  - **Container Groups**: Create and manage your container groups in Bluemix. A container group consists of multiple single containers that are all created from the same container image and as a consequence are configured in the same way. Container groups offer further options at no cost to make your app highly available. These options include in-built load balancing, auto-recovery of unhealthy container instances, and auto-scaling of container instances based on CPU and memory usage. Map a public route to your container group to make your app accessible from the internet.   - **Public IP addresses**: Use these endpoints to request public IP addresses for your space. You can bind this IP address to your container to make your container accessible from the internet.  - **File shares**: Create, list and delete file shares in a space. A file share is a NFS storage system that hosts Docker volumes.   - **Volumes**: Create and manage container volumes in your space to persist the data of your containers.      Each API request requires an HTTP header that includes the 'X-Auth-Token’ and 'X-Auth-Project-Id’ parameter.   - **X-Auth-Token**: The JSON web token (JWT) that you receive when logging into the Bluemix platform. It allows you to use the IBM Containers REST API, access services, and resources. Run `cf oauth-token` to retrieve your access token information. - **X-Auth-Project-Id**: The unique ID of your organization space where you want to create or work with your containers. Run `cf space <space_name> --guid`, where `<space_name>` is the name of your space, to retrieve your space ID.    For further information about how containers work in the IBM Containers service, review the documentation under https://new-console.ng.bluemix.net/docs/containers/container_index.html. 
 *
 * The version of the OpenAPI document: 3.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPublicIPAddressesApi.h"
#include "OAIServerConfiguration.h"
#include <QJsonArray>
#include <QJsonDocument>

namespace OpenAPI {

OAIPublicIPAddressesApi::OAIPublicIPAddressesApi(const int timeOut)
    : _timeOut(timeOut),
      _manager(nullptr),
      _isResponseCompressionEnabled(false),
      _isRequestCompressionEnabled(false) {
    initializeServerConfigs();
}

OAIPublicIPAddressesApi::~OAIPublicIPAddressesApi() {
}

void OAIPublicIPAddressesApi::initializeServerConfigs() {
    //Default server
    QList<OAIServerConfiguration> defaultConf = QList<OAIServerConfiguration>();
    //varying endpoint server
    defaultConf.append(OAIServerConfiguration(
    QUrl("https://containers-api.ng.bluemix.net/v3"),
    "No description provided",
    QMap<QString, OAIServerVariable>()));
    _serverConfigs.insert("containersFloatingIpsGet", defaultConf);
    _serverIndices.insert("containersFloatingIpsGet", 0);
    _serverConfigs.insert("containersFloatingIpsIpReleasePost", defaultConf);
    _serverIndices.insert("containersFloatingIpsIpReleasePost", 0);
    _serverConfigs.insert("containersFloatingIpsRequestPost", defaultConf);
    _serverIndices.insert("containersFloatingIpsRequestPost", 0);
    _serverConfigs.insert("containersNameOrIdFloatingIpsIpBindPost", defaultConf);
    _serverIndices.insert("containersNameOrIdFloatingIpsIpBindPost", 0);
    _serverConfigs.insert("containersNameOrIdFloatingIpsIpUnbindPost", defaultConf);
    _serverIndices.insert("containersNameOrIdFloatingIpsIpUnbindPost", 0);
}

/**
* returns 0 on success and -1, -2 or -3 on failure.
* -1 when the variable does not exist and -2 if the value is not defined in the enum and -3 if the operation or server index is not found
*/
int OAIPublicIPAddressesApi::setDefaultServerValue(int serverIndex, const QString &operation, const QString &variable, const QString &value) {
    auto it = _serverConfigs.find(operation);
    if (it != _serverConfigs.end() && serverIndex < it.value().size()) {
      return _serverConfigs[operation][serverIndex].setDefaultValue(variable,value);
    }
    return -3;
}
void OAIPublicIPAddressesApi::setServerIndex(const QString &operation, int serverIndex) {
    if (_serverIndices.contains(operation) && serverIndex < _serverConfigs.find(operation).value().size()) {
        _serverIndices[operation] = serverIndex;
    }
}

void OAIPublicIPAddressesApi::setApiKey(const QString &apiKeyName, const QString &apiKey) {
    _apiKeys.insert(apiKeyName, apiKey);
}

void OAIPublicIPAddressesApi::setBearerToken(const QString &token) {
    _bearerToken = token;
}

void OAIPublicIPAddressesApi::setUsername(const QString &username) {
    _username = username;
}

void OAIPublicIPAddressesApi::setPassword(const QString &password) {
    _password = password;
}


void OAIPublicIPAddressesApi::setTimeOut(const int timeOut) {
    _timeOut = timeOut;
}

void OAIPublicIPAddressesApi::setWorkingDirectory(const QString &path) {
    _workingDirectory = path;
}

void OAIPublicIPAddressesApi::setNetworkAccessManager(QNetworkAccessManager* manager) {
    _manager = manager;
}

/**
    * Appends a new ServerConfiguration to the config map for a specific operation.
    * @param operation The id to the target operation.
    * @param url A string that contains the URL of the server
    * @param description A String that describes the server
    * @param variables A map between a variable name and its value. The value is used for substitution in the server's URL template.
    * returns the index of the new server config on success and -1 if the operation is not found
    */
int OAIPublicIPAddressesApi::addServerConfiguration(const QString &operation, const QUrl &url, const QString &description, const QMap<QString, OAIServerVariable> &variables) {
    if (_serverConfigs.contains(operation)) {
        _serverConfigs[operation].append(OAIServerConfiguration(
                    url,
                    description,
                    variables));
        return _serverConfigs[operation].size()-1;
    } else {
        return -1;
    }
}

/**
    * Appends a new ServerConfiguration to the config map for a all operations and sets the index to that server.
    * @param url A string that contains the URL of the server
    * @param description A String that describes the server
    * @param variables A map between a variable name and its value. The value is used for substitution in the server's URL template.
    */
void OAIPublicIPAddressesApi::setNewServerForAllOperations(const QUrl &url, const QString &description, const QMap<QString, OAIServerVariable> &variables) {
    for (auto keyIt = _serverIndices.keyBegin(); keyIt != _serverIndices.keyEnd(); keyIt++) {
        setServerIndex(*keyIt, addServerConfiguration(*keyIt, url, description, variables));
    }
}

/**
    * Appends a new ServerConfiguration to the config map for an operations and sets the index to that server.
    * @param URL A string that contains the URL of the server
    * @param description A String that describes the server
    * @param variables A map between a variable name and its value. The value is used for substitution in the server's URL template.
    */
void OAIPublicIPAddressesApi::setNewServer(const QString &operation, const QUrl &url, const QString &description, const QMap<QString, OAIServerVariable> &variables) {
    setServerIndex(operation, addServerConfiguration(operation, url, description, variables));
}

void OAIPublicIPAddressesApi::addHeaders(const QString &key, const QString &value) {
    _defaultHeaders.insert(key, value);
}

void OAIPublicIPAddressesApi::enableRequestCompression() {
    _isRequestCompressionEnabled = true;
}

void OAIPublicIPAddressesApi::enableResponseCompression() {
    _isResponseCompressionEnabled = true;
}

void OAIPublicIPAddressesApi::abortRequests() {
    Q_EMIT abortRequestsSignal();
}

QString OAIPublicIPAddressesApi::getParamStylePrefix(const QString &style) {
    if (style == "matrix") {
        return ";";
    } else if (style == "label") {
        return ".";
    } else if (style == "form") {
        return "&";
    } else if (style == "simple") {
        return "";
    } else if (style == "spaceDelimited") {
        return "&";
    } else if (style == "pipeDelimited") {
        return "&";
    } else {
        return "none";
    }
}

QString OAIPublicIPAddressesApi::getParamStyleSuffix(const QString &style) {
    if (style == "matrix") {
        return "=";
    } else if (style == "label") {
        return "";
    } else if (style == "form") {
        return "=";
    } else if (style == "simple") {
        return "";
    } else if (style == "spaceDelimited") {
        return "=";
    } else if (style == "pipeDelimited") {
        return "=";
    } else {
        return "none";
    }
}

QString OAIPublicIPAddressesApi::getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode) {

    if (style == "matrix") {
        return (isExplode) ? ";" + name + "=" : ",";

    } else if (style == "label") {
        return (isExplode) ? "." : ",";

    } else if (style == "form") {
        return (isExplode) ? "&" + name + "=" : ",";

    } else if (style == "simple") {
        return ",";
    } else if (style == "spaceDelimited") {
        return (isExplode) ? "&" + name + "=" : " ";

    } else if (style == "pipeDelimited") {
        return (isExplode) ? "&" + name + "=" : "|";

    } else if (style == "deepObject") {
        return (isExplode) ? "&" : "none";

    } else {
        return "none";
    }
}

void OAIPublicIPAddressesApi::containersFloatingIpsGet(const QString &x_auth_token, const QString &x_auth_project_id, const ::OpenAPI::OptionalParam<bool> &all) {
    QString fullPath = QString(_serverConfigs["containersFloatingIpsGet"][_serverIndices.value("containersFloatingIpsGet")].URL()+"/containers/floating-ips");
    
    QString queryPrefix, querySuffix, queryDelimiter, queryStyle;
    if (all.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "all", true);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("all")).append(querySuffix).append(QUrl::toPercentEncoding(all.stringValue()));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    
    {
        if (!::OpenAPI::toStringValue(x_auth_token).isEmpty()) {
            input.headers.insert("X-Auth-Token", ::OpenAPI::toStringValue(x_auth_token));
        }
        }
    
    {
        if (!::OpenAPI::toStringValue(x_auth_project_id).isEmpty()) {
            input.headers.insert("X-Auth-Project-Id", ::OpenAPI::toStringValue(x_auth_project_id));
        }
        }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIPublicIPAddressesApi::containersFloatingIpsGetCallback);
    connect(this, &OAIPublicIPAddressesApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIPublicIPAddressesApi::containersFloatingIpsGetCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    QList<OAIFloatingIP> output;
    QString json(worker->response);
    QByteArray array(json.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonArray jsonArray = doc.array();
    for (QJsonValue obj : jsonArray) {
        OAIFloatingIP val;
        ::OpenAPI::fromJsonValue(val, obj);
        output.append(val);
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT containersFloatingIpsGetSignal(output);
        Q_EMIT containersFloatingIpsGetSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT containersFloatingIpsGetSignalE(output, error_type, error_str);
        Q_EMIT containersFloatingIpsGetSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT containersFloatingIpsGetSignalError(output, error_type, error_str);
        Q_EMIT containersFloatingIpsGetSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIPublicIPAddressesApi::containersFloatingIpsIpReleasePost(const QString &x_auth_token, const QString &x_auth_project_id, const QString &ip) {
    QString fullPath = QString(_serverConfigs["containersFloatingIpsIpReleasePost"][_serverIndices.value("containersFloatingIpsIpReleasePost")].URL()+"/containers/floating-ips/{ip}/release");
    
    
    {
        QString ipPathParam("{");
        ipPathParam.append("ip").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "ip", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"ip"+pathSuffix : pathPrefix;
        fullPath.replace(ipPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(ip)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "POST");


    
    {
        if (!::OpenAPI::toStringValue(x_auth_token).isEmpty()) {
            input.headers.insert("X-Auth-Token", ::OpenAPI::toStringValue(x_auth_token));
        }
        }
    
    {
        if (!::OpenAPI::toStringValue(x_auth_project_id).isEmpty()) {
            input.headers.insert("X-Auth-Project-Id", ::OpenAPI::toStringValue(x_auth_project_id));
        }
        }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIPublicIPAddressesApi::containersFloatingIpsIpReleasePostCallback);
    connect(this, &OAIPublicIPAddressesApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIPublicIPAddressesApi::containersFloatingIpsIpReleasePostCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT containersFloatingIpsIpReleasePostSignal();
        Q_EMIT containersFloatingIpsIpReleasePostSignalFull(worker);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT containersFloatingIpsIpReleasePostSignalE(error_type, error_str);
        Q_EMIT containersFloatingIpsIpReleasePostSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT containersFloatingIpsIpReleasePostSignalError(error_type, error_str);
        Q_EMIT containersFloatingIpsIpReleasePostSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIPublicIPAddressesApi::containersFloatingIpsRequestPost(const QString &x_auth_token, const QString &x_auth_project_id) {
    QString fullPath = QString(_serverConfigs["containersFloatingIpsRequestPost"][_serverIndices.value("containersFloatingIpsRequestPost")].URL()+"/containers/floating-ips/request");
    
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "POST");


    
    {
        if (!::OpenAPI::toStringValue(x_auth_token).isEmpty()) {
            input.headers.insert("X-Auth-Token", ::OpenAPI::toStringValue(x_auth_token));
        }
        }
    
    {
        if (!::OpenAPI::toStringValue(x_auth_project_id).isEmpty()) {
            input.headers.insert("X-Auth-Project-Id", ::OpenAPI::toStringValue(x_auth_project_id));
        }
        }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIPublicIPAddressesApi::containersFloatingIpsRequestPostCallback);
    connect(this, &OAIPublicIPAddressesApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIPublicIPAddressesApi::containersFloatingIpsRequestPostCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    QString output;
    ::OpenAPI::fromStringValue(QString(worker->response), output);
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT containersFloatingIpsRequestPostSignal(output);
        Q_EMIT containersFloatingIpsRequestPostSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT containersFloatingIpsRequestPostSignalE(output, error_type, error_str);
        Q_EMIT containersFloatingIpsRequestPostSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT containersFloatingIpsRequestPostSignalError(output, error_type, error_str);
        Q_EMIT containersFloatingIpsRequestPostSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIPublicIPAddressesApi::containersNameOrIdFloatingIpsIpBindPost(const QString &x_auth_token, const QString &x_auth_project_id, const QString &name_or_id, const QString &ip) {
    QString fullPath = QString(_serverConfigs["containersNameOrIdFloatingIpsIpBindPost"][_serverIndices.value("containersNameOrIdFloatingIpsIpBindPost")].URL()+"/containers/{name_or_id}/floating-ips/{ip}/bind");
    
    
    {
        QString name_or_idPathParam("{");
        name_or_idPathParam.append("name_or_id").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "name_or_id", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"name_or_id"+pathSuffix : pathPrefix;
        fullPath.replace(name_or_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(name_or_id)));
    }
    
    {
        QString ipPathParam("{");
        ipPathParam.append("ip").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "ip", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"ip"+pathSuffix : pathPrefix;
        fullPath.replace(ipPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(ip)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "POST");


    
    {
        if (!::OpenAPI::toStringValue(x_auth_token).isEmpty()) {
            input.headers.insert("X-Auth-Token", ::OpenAPI::toStringValue(x_auth_token));
        }
        }
    
    {
        if (!::OpenAPI::toStringValue(x_auth_project_id).isEmpty()) {
            input.headers.insert("X-Auth-Project-Id", ::OpenAPI::toStringValue(x_auth_project_id));
        }
        }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIPublicIPAddressesApi::containersNameOrIdFloatingIpsIpBindPostCallback);
    connect(this, &OAIPublicIPAddressesApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIPublicIPAddressesApi::containersNameOrIdFloatingIpsIpBindPostCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT containersNameOrIdFloatingIpsIpBindPostSignal();
        Q_EMIT containersNameOrIdFloatingIpsIpBindPostSignalFull(worker);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT containersNameOrIdFloatingIpsIpBindPostSignalE(error_type, error_str);
        Q_EMIT containersNameOrIdFloatingIpsIpBindPostSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT containersNameOrIdFloatingIpsIpBindPostSignalError(error_type, error_str);
        Q_EMIT containersNameOrIdFloatingIpsIpBindPostSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIPublicIPAddressesApi::containersNameOrIdFloatingIpsIpUnbindPost(const QString &x_auth_token, const QString &x_auth_project_id, const QString &name_or_id, const QString &ip) {
    QString fullPath = QString(_serverConfigs["containersNameOrIdFloatingIpsIpUnbindPost"][_serverIndices.value("containersNameOrIdFloatingIpsIpUnbindPost")].URL()+"/containers/{name_or_id}/floating-ips/{ip}/unbind");
    
    
    {
        QString name_or_idPathParam("{");
        name_or_idPathParam.append("name_or_id").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "name_or_id", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"name_or_id"+pathSuffix : pathPrefix;
        fullPath.replace(name_or_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(name_or_id)));
    }
    
    {
        QString ipPathParam("{");
        ipPathParam.append("ip").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "ip", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"ip"+pathSuffix : pathPrefix;
        fullPath.replace(ipPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(ip)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "POST");


    
    {
        if (!::OpenAPI::toStringValue(x_auth_token).isEmpty()) {
            input.headers.insert("X-Auth-Token", ::OpenAPI::toStringValue(x_auth_token));
        }
        }
    
    {
        if (!::OpenAPI::toStringValue(x_auth_project_id).isEmpty()) {
            input.headers.insert("X-Auth-Project-Id", ::OpenAPI::toStringValue(x_auth_project_id));
        }
        }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIPublicIPAddressesApi::containersNameOrIdFloatingIpsIpUnbindPostCallback);
    connect(this, &OAIPublicIPAddressesApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIPublicIPAddressesApi::containersNameOrIdFloatingIpsIpUnbindPostCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT containersNameOrIdFloatingIpsIpUnbindPostSignal();
        Q_EMIT containersNameOrIdFloatingIpsIpUnbindPostSignalFull(worker);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT containersNameOrIdFloatingIpsIpUnbindPostSignalE(error_type, error_str);
        Q_EMIT containersNameOrIdFloatingIpsIpUnbindPostSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT containersNameOrIdFloatingIpsIpUnbindPostSignalError(error_type, error_str);
        Q_EMIT containersNameOrIdFloatingIpsIpUnbindPostSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIPublicIPAddressesApi::tokenAvailable(){

    oauthToken token;
    switch (_OauthMethod) {
    case 1: //implicit flow
        token = _implicitFlow.getToken(_latestScope.join(" "));
        if(token.isValid()){
            _latestInput.headers.insert("Authorization", "Bearer " + token.getToken());
            _latestWorker->execute(&_latestInput);
        }else{
            _implicitFlow.removeToken(_latestScope.join(" "));
            qDebug() << "Could not retrieve a valid token";
        }
        break;
    case 2: //authorization flow
        token = _authFlow.getToken(_latestScope.join(" "));
        if(token.isValid()){
            _latestInput.headers.insert("Authorization", "Bearer " + token.getToken());
            _latestWorker->execute(&_latestInput);
        }else{
            _authFlow.removeToken(_latestScope.join(" "));
            qDebug() << "Could not retrieve a valid token";
        }
        break;
    case 3: //client credentials flow
        token = _credentialFlow.getToken(_latestScope.join(" "));
        if(token.isValid()){
            _latestInput.headers.insert("Authorization", "Bearer " + token.getToken());
            _latestWorker->execute(&_latestInput);
        }else{
            _credentialFlow.removeToken(_latestScope.join(" "));
            qDebug() << "Could not retrieve a valid token";
        }
        break;
    case 4: //resource owner password flow
        token = _passwordFlow.getToken(_latestScope.join(" "));
        if(token.isValid()){
            _latestInput.headers.insert("Authorization", "Bearer " + token.getToken());
            _latestWorker->execute(&_latestInput);
        }else{
            _credentialFlow.removeToken(_latestScope.join(" "));
            qDebug() << "Could not retrieve a valid token";
        }
        break;
    default:
        qDebug() << "No Oauth method set!";
        break;
    }
}
} // namespace OpenAPI
