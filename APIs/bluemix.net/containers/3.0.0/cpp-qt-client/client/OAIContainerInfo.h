/**
 * IBM Containers API
 * Containers are virtual software objects that include all the elements that an app needs to run. A container has the benefits of resource isolation and allocation but is more portable and efficient than, for example, a virtual machine.   This documentation describes the IBM Containers API, which is based on the Docker Remote API. The API provides endpoints that you can use to create and manage your single containers and container groups in Bluemix. Endpoints are summarized under the following tags:   - **Authentication**: Retrieve and refresh your TLS certificates.  - **Private Docker images registry**: Create your own private Docker images registry in Bluemix by setting a namespace for your organization.  - **Images**: View, build, and push your images to your private Bluemix registry so you can use them with IBM Containers. You can also scan your container images with the Vulnerability Advisor against standard policies set by the organization manager and a database of known Ubuntu issues.  - **Single Containers**: Create and manage single containers in Bluemix. Use a single container to implement short-lived processes or to run simple tests as you develop an app or service. To make your single container available from the internet, review the `Public IP addresses` endpoints.  - **Container Groups**: Create and manage your container groups in Bluemix. A container group consists of multiple single containers that are all created from the same container image and as a consequence are configured in the same way. Container groups offer further options at no cost to make your app highly available. These options include in-built load balancing, auto-recovery of unhealthy container instances, and auto-scaling of container instances based on CPU and memory usage. Map a public route to your container group to make your app accessible from the internet.   - **Public IP addresses**: Use these endpoints to request public IP addresses for your space. You can bind this IP address to your container to make your container accessible from the internet.  - **File shares**: Create, list and delete file shares in a space. A file share is a NFS storage system that hosts Docker volumes.   - **Volumes**: Create and manage container volumes in your space to persist the data of your containers.      Each API request requires an HTTP header that includes the 'X-Auth-Token’ and 'X-Auth-Project-Id’ parameter.   - **X-Auth-Token**: The JSON web token (JWT) that you receive when logging into the Bluemix platform. It allows you to use the IBM Containers REST API, access services, and resources. Run `cf oauth-token` to retrieve your access token information. - **X-Auth-Project-Id**: The unique ID of your organization space where you want to create or work with your containers. Run `cf space <space_name> --guid`, where `<space_name>` is the name of your space, to retrieve your space ID.    For further information about how containers work in the IBM Containers service, review the documentation under https://new-console.ng.bluemix.net/docs/containers/container_index.html. 
 *
 * The version of the OpenAPI document: 3.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIContainerInfo.h
 *
 * 
 */

#ifndef OAIContainerInfo_H
#define OAIContainerInfo_H

#include <QJsonObject>

#include "OAIContainerConfig.h"
#include "OAIContainerState.h"
#include "OAIGroup.h"
#include "OAIHostConfig.h"
#include "OAINetworkSetting.h"
#include "OAIVolume.h"
#include <QDateTime>
#include <QList>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIContainerConfig;
class OAIGroup;
class OAIHostConfig;
class OAINetworkSetting;
class OAIContainerState;
class OAIVolume;

class OAIContainerInfo : public OAIObject {
public:
    OAIContainerInfo();
    OAIContainerInfo(QString json);
    ~OAIContainerInfo() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getBluemixApp() const;
    void setBluemixApp(const QString &bluemix_app);
    bool is_bluemix_app_Set() const;
    bool is_bluemix_app_Valid() const;

    QString getBluemixServices() const;
    void setBluemixServices(const QString &bluemix_services);
    bool is_bluemix_services_Set() const;
    bool is_bluemix_services_Valid() const;

    OAIContainerConfig getConfig() const;
    void setConfig(const OAIContainerConfig &config);
    bool is_config_Set() const;
    bool is_config_Valid() const;

    QString getContainerState() const;
    void setContainerState(const QString &container_state);
    bool is_container_state_Set() const;
    bool is_container_state_Valid() const;

    QDateTime getCreated() const;
    void setCreated(const QDateTime &created);
    bool is_created_Set() const;
    bool is_created_Valid() const;

    OAIGroup getGroup() const;
    void setGroup(const OAIGroup &group);
    bool is_group_Set() const;
    bool is_group_Valid() const;

    OAIHostConfig getHostConfig() const;
    void setHostConfig(const OAIHostConfig &host_config);
    bool is_host_config_Set() const;
    bool is_host_config_Valid() const;

    QString getHostId() const;
    void setHostId(const QString &host_id);
    bool is_host_id_Set() const;
    bool is_host_id_Valid() const;

    QString getHumanId() const;
    void setHumanId(const QString &human_id);
    bool is_human_id_Set() const;
    bool is_human_id_Valid() const;

    QString getId() const;
    void setId(const QString &id);
    bool is_id_Set() const;
    bool is_id_Valid() const;

    QString getImage() const;
    void setImage(const QString &image);
    bool is_image_Set() const;
    bool is_image_Valid() const;

    QList<QString> getMounts() const;
    void setMounts(const QList<QString> &mounts);
    bool is_mounts_Set() const;
    bool is_mounts_Valid() const;

    QString getName() const;
    void setName(const QString &name);
    bool is_name_Set() const;
    bool is_name_Valid() const;

    OAINetworkSetting getNetworkSettings() const;
    void setNetworkSettings(const OAINetworkSetting &network_settings);
    bool is_network_settings_Set() const;
    bool is_network_settings_Valid() const;

    QString getPath() const;
    void setPath(const QString &path);
    bool is_path_Set() const;
    bool is_path_Valid() const;

    QString getResolveConfPath() const;
    void setResolveConfPath(const QString &resolve_conf_path);
    bool is_resolve_conf_path_Set() const;
    bool is_resolve_conf_path_Valid() const;

    OAIContainerState getState() const;
    void setState(const OAIContainerState &state);
    bool is_state_Set() const;
    bool is_state_Valid() const;

    OAIVolume getVolumes() const;
    void setVolumes(const OAIVolume &volumes);
    bool is_volumes_Set() const;
    bool is_volumes_Valid() const;

    QList<QString> getVolumesRw() const;
    void setVolumesRw(const QList<QString> &volumes_rw);
    bool is_volumes_rw_Set() const;
    bool is_volumes_rw_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_bluemix_app;
    bool m_bluemix_app_isSet;
    bool m_bluemix_app_isValid;

    QString m_bluemix_services;
    bool m_bluemix_services_isSet;
    bool m_bluemix_services_isValid;

    OAIContainerConfig m_config;
    bool m_config_isSet;
    bool m_config_isValid;

    QString m_container_state;
    bool m_container_state_isSet;
    bool m_container_state_isValid;

    QDateTime m_created;
    bool m_created_isSet;
    bool m_created_isValid;

    OAIGroup m_group;
    bool m_group_isSet;
    bool m_group_isValid;

    OAIHostConfig m_host_config;
    bool m_host_config_isSet;
    bool m_host_config_isValid;

    QString m_host_id;
    bool m_host_id_isSet;
    bool m_host_id_isValid;

    QString m_human_id;
    bool m_human_id_isSet;
    bool m_human_id_isValid;

    QString m_id;
    bool m_id_isSet;
    bool m_id_isValid;

    QString m_image;
    bool m_image_isSet;
    bool m_image_isValid;

    QList<QString> m_mounts;
    bool m_mounts_isSet;
    bool m_mounts_isValid;

    QString m_name;
    bool m_name_isSet;
    bool m_name_isValid;

    OAINetworkSetting m_network_settings;
    bool m_network_settings_isSet;
    bool m_network_settings_isValid;

    QString m_path;
    bool m_path_isSet;
    bool m_path_isValid;

    QString m_resolve_conf_path;
    bool m_resolve_conf_path_isSet;
    bool m_resolve_conf_path_isValid;

    OAIContainerState m_state;
    bool m_state_isSet;
    bool m_state_isValid;

    OAIVolume m_volumes;
    bool m_volumes_isSet;
    bool m_volumes_isValid;

    QList<QString> m_volumes_rw;
    bool m_volumes_rw_isSet;
    bool m_volumes_rw_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIContainerInfo)

#endif // OAIContainerInfo_H
