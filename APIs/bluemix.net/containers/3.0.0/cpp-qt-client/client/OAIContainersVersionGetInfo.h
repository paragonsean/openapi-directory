/**
 * IBM Containers API
 * Containers are virtual software objects that include all the elements that an app needs to run. A container has the benefits of resource isolation and allocation but is more portable and efficient than, for example, a virtual machine.   This documentation describes the IBM Containers API, which is based on the Docker Remote API. The API provides endpoints that you can use to create and manage your single containers and container groups in Bluemix. Endpoints are summarized under the following tags:   - **Authentication**: Retrieve and refresh your TLS certificates.  - **Private Docker images registry**: Create your own private Docker images registry in Bluemix by setting a namespace for your organization.  - **Images**: View, build, and push your images to your private Bluemix registry so you can use them with IBM Containers. You can also scan your container images with the Vulnerability Advisor against standard policies set by the organization manager and a database of known Ubuntu issues.  - **Single Containers**: Create and manage single containers in Bluemix. Use a single container to implement short-lived processes or to run simple tests as you develop an app or service. To make your single container available from the internet, review the `Public IP addresses` endpoints.  - **Container Groups**: Create and manage your container groups in Bluemix. A container group consists of multiple single containers that are all created from the same container image and as a consequence are configured in the same way. Container groups offer further options at no cost to make your app highly available. These options include in-built load balancing, auto-recovery of unhealthy container instances, and auto-scaling of container instances based on CPU and memory usage. Map a public route to your container group to make your app accessible from the internet.   - **Public IP addresses**: Use these endpoints to request public IP addresses for your space. You can bind this IP address to your container to make your container accessible from the internet.  - **File shares**: Create, list and delete file shares in a space. A file share is a NFS storage system that hosts Docker volumes.   - **Volumes**: Create and manage container volumes in your space to persist the data of your containers.      Each API request requires an HTTP header that includes the 'X-Auth-Token’ and 'X-Auth-Project-Id’ parameter.   - **X-Auth-Token**: The JSON web token (JWT) that you receive when logging into the Bluemix platform. It allows you to use the IBM Containers REST API, access services, and resources. Run `cf oauth-token` to retrieve your access token information. - **X-Auth-Project-Id**: The unique ID of your organization space where you want to create or work with your containers. Run `cf space <space_name> --guid`, where `<space_name>` is the name of your space, to retrieve your space ID.    For further information about how containers work in the IBM Containers service, review the documentation under https://new-console.ng.bluemix.net/docs/containers/container_index.html. 
 *
 * The version of the OpenAPI document: 3.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIContainersVersionGetInfo.h
 *
 * 
 */

#ifndef OAIContainersVersionGetInfo_H
#define OAIContainersVersionGetInfo_H

#include <QJsonObject>

#include "OAIContainersVersionGetInfo_BuildDetail.h"
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIContainersVersionGetInfo_BuildDetail;

class OAIContainersVersionGetInfo : public OAIObject {
public:
    OAIContainersVersionGetInfo();
    OAIContainersVersionGetInfo(QString json);
    ~OAIContainersVersionGetInfo() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getApiVersion() const;
    void setApiVersion(const QString &api_version);
    bool is_api_version_Set() const;
    bool is_api_version_Valid() const;

    QString getArch() const;
    void setArch(const QString &arch);
    bool is_arch_Set() const;
    bool is_arch_Valid() const;

    OAIContainersVersionGetInfo_BuildDetail getBuildDetail() const;
    void setBuildDetail(const OAIContainersVersionGetInfo_BuildDetail &build_detail);
    bool is_build_detail_Set() const;
    bool is_build_detail_Valid() const;

    QString getBuildId() const;
    void setBuildId(const QString &build_id);
    bool is_build_id_Set() const;
    bool is_build_id_Valid() const;

    QString getBuildNumber() const;
    void setBuildNumber(const QString &build_number);
    bool is_build_number_Set() const;
    bool is_build_number_Valid() const;

    QString getBuildTime() const;
    void setBuildTime(const QString &build_time);
    bool is_build_time_Set() const;
    bool is_build_time_Valid() const;

    QString getGitCommit() const;
    void setGitCommit(const QString &git_commit);
    bool is_git_commit_Set() const;
    bool is_git_commit_Valid() const;

    QString getGoVersion() const;
    void setGoVersion(const QString &go_version);
    bool is_go_version_Set() const;
    bool is_go_version_Valid() const;

    QString getKernelVersion() const;
    void setKernelVersion(const QString &kernel_version);
    bool is_kernel_version_Set() const;
    bool is_kernel_version_Valid() const;

    QString getOs() const;
    void setOs(const QString &os);
    bool is_os_Set() const;
    bool is_os_Valid() const;

    QString getVersion() const;
    void setVersion(const QString &version);
    bool is_version_Set() const;
    bool is_version_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_api_version;
    bool m_api_version_isSet;
    bool m_api_version_isValid;

    QString m_arch;
    bool m_arch_isSet;
    bool m_arch_isValid;

    OAIContainersVersionGetInfo_BuildDetail m_build_detail;
    bool m_build_detail_isSet;
    bool m_build_detail_isValid;

    QString m_build_id;
    bool m_build_id_isSet;
    bool m_build_id_isValid;

    QString m_build_number;
    bool m_build_number_isSet;
    bool m_build_number_isValid;

    QString m_build_time;
    bool m_build_time_isSet;
    bool m_build_time_isValid;

    QString m_git_commit;
    bool m_git_commit_isSet;
    bool m_git_commit_isValid;

    QString m_go_version;
    bool m_go_version_isSet;
    bool m_go_version_isValid;

    QString m_kernel_version;
    bool m_kernel_version_isSet;
    bool m_kernel_version_isValid;

    QString m_os;
    bool m_os_isSet;
    bool m_os_isValid;

    QString m_version;
    bool m_version_isSet;
    bool m_version_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIContainersVersionGetInfo)

#endif // OAIContainersVersionGetInfo_H
