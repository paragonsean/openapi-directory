/**
 * IBM Containers API
 * Containers are virtual software objects that include all the elements that an app needs to run. A container has the benefits of resource isolation and allocation but is more portable and efficient than, for example, a virtual machine.   This documentation describes the IBM Containers API, which is based on the Docker Remote API. The API provides endpoints that you can use to create and manage your single containers and container groups in Bluemix. Endpoints are summarized under the following tags:   - **Authentication**: Retrieve and refresh your TLS certificates.  - **Private Docker images registry**: Create your own private Docker images registry in Bluemix by setting a namespace for your organization.  - **Images**: View, build, and push your images to your private Bluemix registry so you can use them with IBM Containers. You can also scan your container images with the Vulnerability Advisor against standard policies set by the organization manager and a database of known Ubuntu issues.  - **Single Containers**: Create and manage single containers in Bluemix. Use a single container to implement short-lived processes or to run simple tests as you develop an app or service. To make your single container available from the internet, review the `Public IP addresses` endpoints.  - **Container Groups**: Create and manage your container groups in Bluemix. A container group consists of multiple single containers that are all created from the same container image and as a consequence are configured in the same way. Container groups offer further options at no cost to make your app highly available. These options include in-built load balancing, auto-recovery of unhealthy container instances, and auto-scaling of container instances based on CPU and memory usage. Map a public route to your container group to make your app accessible from the internet.   - **Public IP addresses**: Use these endpoints to request public IP addresses for your space. You can bind this IP address to your container to make your container accessible from the internet.  - **File shares**: Create, list and delete file shares in a space. A file share is a NFS storage system that hosts Docker volumes.   - **Volumes**: Create and manage container volumes in your space to persist the data of your containers.      Each API request requires an HTTP header that includes the 'X-Auth-Token’ and 'X-Auth-Project-Id’ parameter.   - **X-Auth-Token**: The JSON web token (JWT) that you receive when logging into the Bluemix platform. It allows you to use the IBM Containers REST API, access services, and resources. Run `cf oauth-token` to retrieve your access token information. - **X-Auth-Project-Id**: The unique ID of your organization space where you want to create or work with your containers. Run `cf space <space_name> --guid`, where `<space_name>` is the name of your space, to retrieve your space ID.    For further information about how containers work in the IBM Containers service, review the documentation under https://new-console.ng.bluemix.net/docs/containers/container_index.html. 
 *
 * The version of the OpenAPI document: 3.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIContainersGroupsNameOrIdGetDetails.h
 *
 * 
 */

#ifndef OAIContainersGroupsNameOrIdGetDetails_H
#define OAIContainersGroupsNameOrIdGetDetails_H

#include <QJsonObject>

#include "OAIContainersGroupsNameOrIdGetDetails_NumberInstances.h"
#include "OAIContainersGroupsNameOrIdGetDetails_Route_Status.h"
#include <QList>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIContainersGroupsNameOrIdGetDetails_NumberInstances;
class OAIContainersGroupsNameOrIdGetDetails_Route_Status;

class OAIContainersGroupsNameOrIdGetDetails : public OAIObject {
public:
    OAIContainersGroupsNameOrIdGetDetails();
    OAIContainersGroupsNameOrIdGetDetails(QString json);
    ~OAIContainersGroupsNameOrIdGetDetails() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getAntiAffinity() const;
    void setAntiAffinity(const QString &anti_affinity);
    bool is_anti_affinity_Set() const;
    bool is_anti_affinity_Valid() const;

    QString getAutorecovery() const;
    void setAutorecovery(const QString &autorecovery);
    bool is_autorecovery_Set() const;
    bool is_autorecovery_Valid() const;

    QString getAvailabilityZone() const;
    void setAvailabilityZone(const QString &availability_zone);
    bool is_availability_zone_Set() const;
    bool is_availability_zone_Valid() const;

    QList<QString> getCmd() const;
    void setCmd(const QList<QString> &cmd);
    bool is_cmd_Set() const;
    bool is_cmd_Valid() const;

    QString getCreationTime() const;
    void setCreationTime(const QString &creation_time);
    bool is_creation_time_Set() const;
    bool is_creation_time_Valid() const;

    QList<QString> getEnv() const;
    void setEnv(const QList<QString> &env);
    bool is_env_Set() const;
    bool is_env_Valid() const;

    QString getId() const;
    void setId(const QString &id);
    bool is_id_Set() const;
    bool is_id_Valid() const;

    QString getImage() const;
    void setImage(const QString &image);
    bool is_image_Set() const;
    bool is_image_Valid() const;

    QString getImageName() const;
    void setImageName(const QString &image_name);
    bool is_image_name_Set() const;
    bool is_image_name_Valid() const;

    qint32 getMemory() const;
    void setMemory(const qint32 &memory);
    bool is_memory_Set() const;
    bool is_memory_Valid() const;

    QString getName() const;
    void setName(const QString &name);
    bool is_name_Set() const;
    bool is_name_Valid() const;

    OAIContainersGroupsNameOrIdGetDetails_NumberInstances getNumberInstances() const;
    void setNumberInstances(const OAIContainersGroupsNameOrIdGetDetails_NumberInstances &number_instances);
    bool is_number_instances_Set() const;
    bool is_number_instances_Valid() const;

    qint32 getPort() const;
    void setPort(const qint32 &port);
    bool is_port_Set() const;
    bool is_port_Valid() const;

    OAIContainersGroupsNameOrIdGetDetails_Route_Status getRouteStatus() const;
    void setRouteStatus(const OAIContainersGroupsNameOrIdGetDetails_Route_Status &route_status);
    bool is_route_status_Set() const;
    bool is_route_status_Valid() const;

    QList<QString> getRoutes() const;
    void setRoutes(const QList<QString> &routes);
    bool is_routes_Set() const;
    bool is_routes_Valid() const;

    QString getStatus() const;
    void setStatus(const QString &status);
    bool is_status_Set() const;
    bool is_status_Valid() const;

    QString getUpdatedTime() const;
    void setUpdatedTime(const QString &updated_time);
    bool is_updated_time_Set() const;
    bool is_updated_time_Valid() const;

    QList<QString> getVolumes() const;
    void setVolumes(const QList<QString> &volumes);
    bool is_volumes_Set() const;
    bool is_volumes_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_anti_affinity;
    bool m_anti_affinity_isSet;
    bool m_anti_affinity_isValid;

    QString m_autorecovery;
    bool m_autorecovery_isSet;
    bool m_autorecovery_isValid;

    QString m_availability_zone;
    bool m_availability_zone_isSet;
    bool m_availability_zone_isValid;

    QList<QString> m_cmd;
    bool m_cmd_isSet;
    bool m_cmd_isValid;

    QString m_creation_time;
    bool m_creation_time_isSet;
    bool m_creation_time_isValid;

    QList<QString> m_env;
    bool m_env_isSet;
    bool m_env_isValid;

    QString m_id;
    bool m_id_isSet;
    bool m_id_isValid;

    QString m_image;
    bool m_image_isSet;
    bool m_image_isValid;

    QString m_image_name;
    bool m_image_name_isSet;
    bool m_image_name_isValid;

    qint32 m_memory;
    bool m_memory_isSet;
    bool m_memory_isValid;

    QString m_name;
    bool m_name_isSet;
    bool m_name_isValid;

    OAIContainersGroupsNameOrIdGetDetails_NumberInstances m_number_instances;
    bool m_number_instances_isSet;
    bool m_number_instances_isValid;

    qint32 m_port;
    bool m_port_isSet;
    bool m_port_isValid;

    OAIContainersGroupsNameOrIdGetDetails_Route_Status m_route_status;
    bool m_route_status_isSet;
    bool m_route_status_isValid;

    QList<QString> m_routes;
    bool m_routes_isSet;
    bool m_routes_isValid;

    QString m_status;
    bool m_status_isSet;
    bool m_status_isValid;

    QString m_updated_time;
    bool m_updated_time_isSet;
    bool m_updated_time_isValid;

    QList<QString> m_volumes;
    bool m_volumes_isSet;
    bool m_volumes_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIContainersGroupsNameOrIdGetDetails)

#endif // OAIContainersGroupsNameOrIdGetDetails_H
