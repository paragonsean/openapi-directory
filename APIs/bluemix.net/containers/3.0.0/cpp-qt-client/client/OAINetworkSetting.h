/**
 * IBM Containers API
 * Containers are virtual software objects that include all the elements that an app needs to run. A container has the benefits of resource isolation and allocation but is more portable and efficient than, for example, a virtual machine.   This documentation describes the IBM Containers API, which is based on the Docker Remote API. The API provides endpoints that you can use to create and manage your single containers and container groups in Bluemix. Endpoints are summarized under the following tags:   - **Authentication**: Retrieve and refresh your TLS certificates.  - **Private Docker images registry**: Create your own private Docker images registry in Bluemix by setting a namespace for your organization.  - **Images**: View, build, and push your images to your private Bluemix registry so you can use them with IBM Containers. You can also scan your container images with the Vulnerability Advisor against standard policies set by the organization manager and a database of known Ubuntu issues.  - **Single Containers**: Create and manage single containers in Bluemix. Use a single container to implement short-lived processes or to run simple tests as you develop an app or service. To make your single container available from the internet, review the `Public IP addresses` endpoints.  - **Container Groups**: Create and manage your container groups in Bluemix. A container group consists of multiple single containers that are all created from the same container image and as a consequence are configured in the same way. Container groups offer further options at no cost to make your app highly available. These options include in-built load balancing, auto-recovery of unhealthy container instances, and auto-scaling of container instances based on CPU and memory usage. Map a public route to your container group to make your app accessible from the internet.   - **Public IP addresses**: Use these endpoints to request public IP addresses for your space. You can bind this IP address to your container to make your container accessible from the internet.  - **File shares**: Create, list and delete file shares in a space. A file share is a NFS storage system that hosts Docker volumes.   - **Volumes**: Create and manage container volumes in your space to persist the data of your containers.      Each API request requires an HTTP header that includes the 'X-Auth-Token’ and 'X-Auth-Project-Id’ parameter.   - **X-Auth-Token**: The JSON web token (JWT) that you receive when logging into the Bluemix platform. It allows you to use the IBM Containers REST API, access services, and resources. Run `cf oauth-token` to retrieve your access token information. - **X-Auth-Project-Id**: The unique ID of your organization space where you want to create or work with your containers. Run `cf space <space_name> --guid`, where `<space_name>` is the name of your space, to retrieve your space ID.    For further information about how containers work in the IBM Containers service, review the documentation under https://new-console.ng.bluemix.net/docs/containers/container_index.html. 
 *
 * The version of the OpenAPI document: 3.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAINetworkSetting.h
 *
 * 
 */

#ifndef OAINetworkSetting_H
#define OAINetworkSetting_H

#include <QJsonObject>

#include "OAINetwork.h"
#include <QList>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAINetwork;

class OAINetworkSetting : public OAIObject {
public:
    OAINetworkSetting();
    OAINetworkSetting(QString json);
    ~OAINetworkSetting() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getBridge() const;
    void setBridge(const QString &bridge);
    bool is_bridge_Set() const;
    bool is_bridge_Valid() const;

    QString getGateway() const;
    void setGateway(const QString &gateway);
    bool is_gateway_Set() const;
    bool is_gateway_Valid() const;

    QString getIpAddress() const;
    void setIpAddress(const QString &ip_address);
    bool is_ip_address_Set() const;
    bool is_ip_address_Valid() const;

    qint32 getIpPrefixLen() const;
    void setIpPrefixLen(const qint32 &ip_prefix_len);
    bool is_ip_prefix_len_Set() const;
    bool is_ip_prefix_len_Valid() const;

    QString getMacAddress() const;
    void setMacAddress(const QString &mac_address);
    bool is_mac_address_Set() const;
    bool is_mac_address_Valid() const;

    OAINetwork getNetwork() const;
    void setNetwork(const OAINetwork &network);
    bool is_network_Set() const;
    bool is_network_Valid() const;

    QString getPortMapping() const;
    void setPortMapping(const QString &port_mapping);
    bool is_port_mapping_Set() const;
    bool is_port_mapping_Valid() const;

    QList<QString> getPorts() const;
    void setPorts(const QList<QString> &ports);
    bool is_ports_Set() const;
    bool is_ports_Valid() const;

    QString getPublicIpAddress() const;
    void setPublicIpAddress(const QString &public_ip_address);
    bool is_public_ip_address_Set() const;
    bool is_public_ip_address_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_bridge;
    bool m_bridge_isSet;
    bool m_bridge_isValid;

    QString m_gateway;
    bool m_gateway_isSet;
    bool m_gateway_isValid;

    QString m_ip_address;
    bool m_ip_address_isSet;
    bool m_ip_address_isValid;

    qint32 m_ip_prefix_len;
    bool m_ip_prefix_len_isSet;
    bool m_ip_prefix_len_isValid;

    QString m_mac_address;
    bool m_mac_address_isSet;
    bool m_mac_address_isValid;

    OAINetwork m_network;
    bool m_network_isSet;
    bool m_network_isValid;

    QString m_port_mapping;
    bool m_port_mapping_isSet;
    bool m_port_mapping_isValid;

    QList<QString> m_ports;
    bool m_ports_isSet;
    bool m_ports_isValid;

    QString m_public_ip_address;
    bool m_public_ip_address_isSet;
    bool m_public_ip_address_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAINetworkSetting)

#endif // OAINetworkSetting_H
