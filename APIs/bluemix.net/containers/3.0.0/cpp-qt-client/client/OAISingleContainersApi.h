/**
 * IBM Containers API
 * Containers are virtual software objects that include all the elements that an app needs to run. A container has the benefits of resource isolation and allocation but is more portable and efficient than, for example, a virtual machine.   This documentation describes the IBM Containers API, which is based on the Docker Remote API. The API provides endpoints that you can use to create and manage your single containers and container groups in Bluemix. Endpoints are summarized under the following tags:   - **Authentication**: Retrieve and refresh your TLS certificates.  - **Private Docker images registry**: Create your own private Docker images registry in Bluemix by setting a namespace for your organization.  - **Images**: View, build, and push your images to your private Bluemix registry so you can use them with IBM Containers. You can also scan your container images with the Vulnerability Advisor against standard policies set by the organization manager and a database of known Ubuntu issues.  - **Single Containers**: Create and manage single containers in Bluemix. Use a single container to implement short-lived processes or to run simple tests as you develop an app or service. To make your single container available from the internet, review the `Public IP addresses` endpoints.  - **Container Groups**: Create and manage your container groups in Bluemix. A container group consists of multiple single containers that are all created from the same container image and as a consequence are configured in the same way. Container groups offer further options at no cost to make your app highly available. These options include in-built load balancing, auto-recovery of unhealthy container instances, and auto-scaling of container instances based on CPU and memory usage. Map a public route to your container group to make your app accessible from the internet.   - **Public IP addresses**: Use these endpoints to request public IP addresses for your space. You can bind this IP address to your container to make your container accessible from the internet.  - **File shares**: Create, list and delete file shares in a space. A file share is a NFS storage system that hosts Docker volumes.   - **Volumes**: Create and manage container volumes in your space to persist the data of your containers.      Each API request requires an HTTP header that includes the 'X-Auth-Token’ and 'X-Auth-Project-Id’ parameter.   - **X-Auth-Token**: The JSON web token (JWT) that you receive when logging into the Bluemix platform. It allows you to use the IBM Containers REST API, access services, and resources. Run `cf oauth-token` to retrieve your access token information. - **X-Auth-Project-Id**: The unique ID of your organization space where you want to create or work with your containers. Run `cf space <space_name> --guid`, where `<space_name>` is the name of your space, to retrieve your space ID.    For further information about how containers work in the IBM Containers service, review the documentation under https://new-console.ng.bluemix.net/docs/containers/container_index.html. 
 *
 * The version of the OpenAPI document: 3.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAISingleContainersApi_H
#define OAI_OAISingleContainersApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIContainer.h"
#include "OAIContainerId.h"
#include "OAIContainerInfo.h"
#include "OAICreateContainer.h"
#include "OAIGetContainerStatus.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAISingleContainersApi : public QObject {
    Q_OBJECT

public:
    OAISingleContainersApi(const int timeOut = 0);
    ~OAISingleContainersApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  x_auth_token QString [required]
    * @param[in]  x_auth_project_id QString [required]
    * @param[in]  oai_create_container OAICreateContainer [required]
    * @param[in]  name QString [optional]
    */
    virtual void containersCreatePost(const QString &x_auth_token, const QString &x_auth_project_id, const OAICreateContainer &oai_create_container, const ::OpenAPI::OptionalParam<QString> &name = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  x_auth_token QString [required]
    * @param[in]  x_auth_project_id QString [required]
    * @param[in]  id QString [required]
    */
    virtual void containersIdStatusGet(const QString &x_auth_token, const QString &x_auth_project_id, const QString &id);

    /**
    * @param[in]  x_auth_token QString [required]
    * @param[in]  x_auth_project_id QString [required]
    * @param[in]  all QString [optional]
    * @param[in]  filters QString [optional]
    */
    virtual void containersJsonGet(const QString &x_auth_token, const QString &x_auth_project_id, const ::OpenAPI::OptionalParam<QString> &all = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &filters = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  x_auth_token QString [required]
    * @param[in]  x_auth_project_id QString [required]
    * @param[in]  name_or_id QString [required]
    * @param[in]  force bool [optional]
    */
    virtual void containersNameOrIdDelete(const QString &x_auth_token, const QString &x_auth_project_id, const QString &name_or_id, const ::OpenAPI::OptionalParam<bool> &force = ::OpenAPI::OptionalParam<bool>());

    /**
    * @param[in]  x_auth_token QString [required]
    * @param[in]  x_auth_project_id QString [required]
    * @param[in]  name_or_id QString [required]
    */
    virtual void containersNameOrIdJsonGet(const QString &x_auth_token, const QString &x_auth_project_id, const QString &name_or_id);

    /**
    * @param[in]  x_auth_token QString [required]
    * @param[in]  x_auth_project_id QString [required]
    * @param[in]  name_or_id QString [required]
    */
    virtual void containersNameOrIdPausePost(const QString &x_auth_token, const QString &x_auth_project_id, const QString &name_or_id);

    /**
    * @param[in]  x_auth_token QString [required]
    * @param[in]  x_auth_project_id QString [required]
    * @param[in]  name_or_id QString [required]
    * @param[in]  name QString [required]
    */
    virtual void containersNameOrIdRenamePost(const QString &x_auth_token, const QString &x_auth_project_id, const QString &name_or_id, const QString &name);

    /**
    * @param[in]  x_auth_token QString [required]
    * @param[in]  x_auth_project_id QString [required]
    * @param[in]  name_or_id QString [required]
    * @param[in]  t qint32 [optional]
    */
    virtual void containersNameOrIdRestartPost(const QString &x_auth_token, const QString &x_auth_project_id, const QString &name_or_id, const ::OpenAPI::OptionalParam<qint32> &t = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  x_auth_token QString [required]
    * @param[in]  x_auth_project_id QString [required]
    * @param[in]  name_or_id QString [required]
    */
    virtual void containersNameOrIdStartPost(const QString &x_auth_token, const QString &x_auth_project_id, const QString &name_or_id);

    /**
    * @param[in]  x_auth_token QString [required]
    * @param[in]  x_auth_project_id QString [required]
    * @param[in]  name_or_id QString [required]
    * @param[in]  t qint32 [optional]
    */
    virtual void containersNameOrIdStopPost(const QString &x_auth_token, const QString &x_auth_project_id, const QString &name_or_id, const ::OpenAPI::OptionalParam<qint32> &t = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  x_auth_token QString [required]
    * @param[in]  x_auth_project_id QString [required]
    * @param[in]  name_or_id QString [required]
    */
    virtual void containersNameOrIdUnpausePost(const QString &x_auth_token, const QString &x_auth_project_id, const QString &name_or_id);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void containersCreatePostCallback(OAIHttpRequestWorker *worker);
    void containersIdStatusGetCallback(OAIHttpRequestWorker *worker);
    void containersJsonGetCallback(OAIHttpRequestWorker *worker);
    void containersNameOrIdDeleteCallback(OAIHttpRequestWorker *worker);
    void containersNameOrIdJsonGetCallback(OAIHttpRequestWorker *worker);
    void containersNameOrIdPausePostCallback(OAIHttpRequestWorker *worker);
    void containersNameOrIdRenamePostCallback(OAIHttpRequestWorker *worker);
    void containersNameOrIdRestartPostCallback(OAIHttpRequestWorker *worker);
    void containersNameOrIdStartPostCallback(OAIHttpRequestWorker *worker);
    void containersNameOrIdStopPostCallback(OAIHttpRequestWorker *worker);
    void containersNameOrIdUnpausePostCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void containersCreatePostSignal(OAIContainerId summary);
    void containersIdStatusGetSignal(OAIGetContainerStatus summary);
    void containersJsonGetSignal(QList<OAIContainer> summary);
    void containersNameOrIdDeleteSignal();
    void containersNameOrIdJsonGetSignal(OAIContainerInfo summary);
    void containersNameOrIdPausePostSignal();
    void containersNameOrIdRenamePostSignal();
    void containersNameOrIdRestartPostSignal();
    void containersNameOrIdStartPostSignal();
    void containersNameOrIdStopPostSignal();
    void containersNameOrIdUnpausePostSignal();


    void containersCreatePostSignalFull(OAIHttpRequestWorker *worker, OAIContainerId summary);
    void containersIdStatusGetSignalFull(OAIHttpRequestWorker *worker, OAIGetContainerStatus summary);
    void containersJsonGetSignalFull(OAIHttpRequestWorker *worker, QList<OAIContainer> summary);
    void containersNameOrIdDeleteSignalFull(OAIHttpRequestWorker *worker);
    void containersNameOrIdJsonGetSignalFull(OAIHttpRequestWorker *worker, OAIContainerInfo summary);
    void containersNameOrIdPausePostSignalFull(OAIHttpRequestWorker *worker);
    void containersNameOrIdRenamePostSignalFull(OAIHttpRequestWorker *worker);
    void containersNameOrIdRestartPostSignalFull(OAIHttpRequestWorker *worker);
    void containersNameOrIdStartPostSignalFull(OAIHttpRequestWorker *worker);
    void containersNameOrIdStopPostSignalFull(OAIHttpRequestWorker *worker);
    void containersNameOrIdUnpausePostSignalFull(OAIHttpRequestWorker *worker);

    Q_DECL_DEPRECATED_X("Use containersCreatePostSignalError() instead")
    void containersCreatePostSignalE(OAIContainerId summary, QNetworkReply::NetworkError error_type, QString error_str);
    void containersCreatePostSignalError(OAIContainerId summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use containersIdStatusGetSignalError() instead")
    void containersIdStatusGetSignalE(OAIGetContainerStatus summary, QNetworkReply::NetworkError error_type, QString error_str);
    void containersIdStatusGetSignalError(OAIGetContainerStatus summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use containersJsonGetSignalError() instead")
    void containersJsonGetSignalE(QList<OAIContainer> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void containersJsonGetSignalError(QList<OAIContainer> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use containersNameOrIdDeleteSignalError() instead")
    void containersNameOrIdDeleteSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void containersNameOrIdDeleteSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use containersNameOrIdJsonGetSignalError() instead")
    void containersNameOrIdJsonGetSignalE(OAIContainerInfo summary, QNetworkReply::NetworkError error_type, QString error_str);
    void containersNameOrIdJsonGetSignalError(OAIContainerInfo summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use containersNameOrIdPausePostSignalError() instead")
    void containersNameOrIdPausePostSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void containersNameOrIdPausePostSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use containersNameOrIdRenamePostSignalError() instead")
    void containersNameOrIdRenamePostSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void containersNameOrIdRenamePostSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use containersNameOrIdRestartPostSignalError() instead")
    void containersNameOrIdRestartPostSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void containersNameOrIdRestartPostSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use containersNameOrIdStartPostSignalError() instead")
    void containersNameOrIdStartPostSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void containersNameOrIdStartPostSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use containersNameOrIdStopPostSignalError() instead")
    void containersNameOrIdStopPostSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void containersNameOrIdStopPostSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use containersNameOrIdUnpausePostSignalError() instead")
    void containersNameOrIdUnpausePostSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void containersNameOrIdUnpausePostSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use containersCreatePostSignalErrorFull() instead")
    void containersCreatePostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void containersCreatePostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use containersIdStatusGetSignalErrorFull() instead")
    void containersIdStatusGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void containersIdStatusGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use containersJsonGetSignalErrorFull() instead")
    void containersJsonGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void containersJsonGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use containersNameOrIdDeleteSignalErrorFull() instead")
    void containersNameOrIdDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void containersNameOrIdDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use containersNameOrIdJsonGetSignalErrorFull() instead")
    void containersNameOrIdJsonGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void containersNameOrIdJsonGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use containersNameOrIdPausePostSignalErrorFull() instead")
    void containersNameOrIdPausePostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void containersNameOrIdPausePostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use containersNameOrIdRenamePostSignalErrorFull() instead")
    void containersNameOrIdRenamePostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void containersNameOrIdRenamePostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use containersNameOrIdRestartPostSignalErrorFull() instead")
    void containersNameOrIdRestartPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void containersNameOrIdRestartPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use containersNameOrIdStartPostSignalErrorFull() instead")
    void containersNameOrIdStartPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void containersNameOrIdStartPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use containersNameOrIdStopPostSignalErrorFull() instead")
    void containersNameOrIdStopPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void containersNameOrIdStopPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use containersNameOrIdUnpausePostSignalErrorFull() instead")
    void containersNameOrIdUnpausePostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void containersNameOrIdUnpausePostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
