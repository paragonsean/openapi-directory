/**
 * IBM Containers API
 * Containers are virtual software objects that include all the elements that an app needs to run. A container has the benefits of resource isolation and allocation but is more portable and efficient than, for example, a virtual machine.   This documentation describes the IBM Containers API, which is based on the Docker Remote API. The API provides endpoints that you can use to create and manage your single containers and container groups in Bluemix. Endpoints are summarized under the following tags:   - **Authentication**: Retrieve and refresh your TLS certificates.  - **Private Docker images registry**: Create your own private Docker images registry in Bluemix by setting a namespace for your organization.  - **Images**: View, build, and push your images to your private Bluemix registry so you can use them with IBM Containers. You can also scan your container images with the Vulnerability Advisor against standard policies set by the organization manager and a database of known Ubuntu issues.  - **Single Containers**: Create and manage single containers in Bluemix. Use a single container to implement short-lived processes or to run simple tests as you develop an app or service. To make your single container available from the internet, review the `Public IP addresses` endpoints.  - **Container Groups**: Create and manage your container groups in Bluemix. A container group consists of multiple single containers that are all created from the same container image and as a consequence are configured in the same way. Container groups offer further options at no cost to make your app highly available. These options include in-built load balancing, auto-recovery of unhealthy container instances, and auto-scaling of container instances based on CPU and memory usage. Map a public route to your container group to make your app accessible from the internet.   - **Public IP addresses**: Use these endpoints to request public IP addresses for your space. You can bind this IP address to your container to make your container accessible from the internet.  - **File shares**: Create, list and delete file shares in a space. A file share is a NFS storage system that hosts Docker volumes.   - **Volumes**: Create and manage container volumes in your space to persist the data of your containers.      Each API request requires an HTTP header that includes the 'X-Auth-Token’ and 'X-Auth-Project-Id’ parameter.   - **X-Auth-Token**: The JSON web token (JWT) that you receive when logging into the Bluemix platform. It allows you to use the IBM Containers REST API, access services, and resources. Run `cf oauth-token` to retrieve your access token information. - **X-Auth-Project-Id**: The unique ID of your organization space where you want to create or work with your containers. Run `cf space <space_name> --guid`, where `<space_name>` is the name of your space, to retrieve your space ID.    For further information about how containers work in the IBM Containers service, review the documentation under https://new-console.ng.bluemix.net/docs/containers/container_index.html. 
 *
 * The version of the OpenAPI document: 3.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIContainerConfig.h
 *
 * 
 */

#ifndef OAIContainerConfig_H
#define OAIContainerConfig_H

#include <QJsonObject>

#include <QList>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAIContainerConfig : public OAIObject {
public:
    OAIContainerConfig();
    OAIContainerConfig(QString json);
    ~OAIContainerConfig() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    bool isArgsEscaped() const;
    void setArgsEscaped(const bool &args_escaped);
    bool is_args_escaped_Set() const;
    bool is_args_escaped_Valid() const;

    QString getAttachStderr() const;
    void setAttachStderr(const QString &attach_stderr);
    bool is_attach_stderr_Set() const;
    bool is_attach_stderr_Valid() const;

    QString getAttachStdin() const;
    void setAttachStdin(const QString &attach_stdin);
    bool is_attach_stdin_Set() const;
    bool is_attach_stdin_Valid() const;

    QString getAttachStdout() const;
    void setAttachStdout(const QString &attach_stdout);
    bool is_attach_stdout_Set() const;
    bool is_attach_stdout_Valid() const;

    QList<QString> getCmd() const;
    void setCmd(const QList<QString> &cmd);
    bool is_cmd_Set() const;
    bool is_cmd_Valid() const;

    QString getDomainname() const;
    void setDomainname(const QString &domainname);
    bool is_domainname_Set() const;
    bool is_domainname_Valid() const;

    QList<QString> getEnv() const;
    void setEnv(const QList<QString> &env);
    bool is_env_Set() const;
    bool is_env_Valid() const;

    QList<QString> getExposedPorts() const;
    void setExposedPorts(const QList<QString> &exposed_ports);
    bool is_exposed_ports_Set() const;
    bool is_exposed_ports_Valid() const;

    QString getHostname() const;
    void setHostname(const QString &hostname);
    bool is_hostname_Set() const;
    bool is_hostname_Valid() const;

    QString getImage() const;
    void setImage(const QString &image);
    bool is_image_Set() const;
    bool is_image_Valid() const;

    QString getImageArchitecture() const;
    void setImageArchitecture(const QString &image_architecture);
    bool is_image_architecture_Set() const;
    bool is_image_architecture_Valid() const;

    QList<QString> getLabels() const;
    void setLabels(const QList<QString> &labels);
    bool is_labels_Set() const;
    bool is_labels_Valid() const;

    qint32 getMemory() const;
    void setMemory(const qint32 &memory);
    bool is_memory_Set() const;
    bool is_memory_Valid() const;

    QString getMemorySwap() const;
    void setMemorySwap(const QString &memory_swap);
    bool is_memory_swap_Set() const;
    bool is_memory_swap_Valid() const;

    QString getOpenStdin() const;
    void setOpenStdin(const QString &open_stdin);
    bool is_open_stdin_Set() const;
    bool is_open_stdin_Valid() const;

    QString getPortSpecs() const;
    void setPortSpecs(const QString &port_specs);
    bool is_port_specs_Set() const;
    bool is_port_specs_Valid() const;

    QString getStdinOnce() const;
    void setStdinOnce(const QString &stdin_once);
    bool is_stdin_once_Set() const;
    bool is_stdin_once_Valid() const;

    QString getTty() const;
    void setTty(const QString &tty);
    bool is_tty_Set() const;
    bool is_tty_Valid() const;

    QString getUser() const;
    void setUser(const QString &user);
    bool is_user_Set() const;
    bool is_user_Valid() const;

    qint32 getVcpu() const;
    void setVcpu(const qint32 &vcpu);
    bool is_vcpu_Set() const;
    bool is_vcpu_Valid() const;

    QString getVolumesFrom() const;
    void setVolumesFrom(const QString &volumes_from);
    bool is_volumes_from_Set() const;
    bool is_volumes_from_Valid() const;

    QString getWorkingDir() const;
    void setWorkingDir(const QString &working_dir);
    bool is_working_dir_Set() const;
    bool is_working_dir_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    bool m_args_escaped;
    bool m_args_escaped_isSet;
    bool m_args_escaped_isValid;

    QString m_attach_stderr;
    bool m_attach_stderr_isSet;
    bool m_attach_stderr_isValid;

    QString m_attach_stdin;
    bool m_attach_stdin_isSet;
    bool m_attach_stdin_isValid;

    QString m_attach_stdout;
    bool m_attach_stdout_isSet;
    bool m_attach_stdout_isValid;

    QList<QString> m_cmd;
    bool m_cmd_isSet;
    bool m_cmd_isValid;

    QString m_domainname;
    bool m_domainname_isSet;
    bool m_domainname_isValid;

    QList<QString> m_env;
    bool m_env_isSet;
    bool m_env_isValid;

    QList<QString> m_exposed_ports;
    bool m_exposed_ports_isSet;
    bool m_exposed_ports_isValid;

    QString m_hostname;
    bool m_hostname_isSet;
    bool m_hostname_isValid;

    QString m_image;
    bool m_image_isSet;
    bool m_image_isValid;

    QString m_image_architecture;
    bool m_image_architecture_isSet;
    bool m_image_architecture_isValid;

    QList<QString> m_labels;
    bool m_labels_isSet;
    bool m_labels_isValid;

    qint32 m_memory;
    bool m_memory_isSet;
    bool m_memory_isValid;

    QString m_memory_swap;
    bool m_memory_swap_isSet;
    bool m_memory_swap_isValid;

    QString m_open_stdin;
    bool m_open_stdin_isSet;
    bool m_open_stdin_isValid;

    QString m_port_specs;
    bool m_port_specs_isSet;
    bool m_port_specs_isValid;

    QString m_stdin_once;
    bool m_stdin_once_isSet;
    bool m_stdin_once_isValid;

    QString m_tty;
    bool m_tty_isSet;
    bool m_tty_isValid;

    QString m_user;
    bool m_user_isSet;
    bool m_user_isValid;

    qint32 m_vcpu;
    bool m_vcpu_isSet;
    bool m_vcpu_isValid;

    QString m_volumes_from;
    bool m_volumes_from_isSet;
    bool m_volumes_from_isValid;

    QString m_working_dir;
    bool m_working_dir_isSet;
    bool m_working_dir_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIContainerConfig)

#endif // OAIContainerConfig_H
