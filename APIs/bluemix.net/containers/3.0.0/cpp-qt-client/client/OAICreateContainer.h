/**
 * IBM Containers API
 * Containers are virtual software objects that include all the elements that an app needs to run. A container has the benefits of resource isolation and allocation but is more portable and efficient than, for example, a virtual machine.   This documentation describes the IBM Containers API, which is based on the Docker Remote API. The API provides endpoints that you can use to create and manage your single containers and container groups in Bluemix. Endpoints are summarized under the following tags:   - **Authentication**: Retrieve and refresh your TLS certificates.  - **Private Docker images registry**: Create your own private Docker images registry in Bluemix by setting a namespace for your organization.  - **Images**: View, build, and push your images to your private Bluemix registry so you can use them with IBM Containers. You can also scan your container images with the Vulnerability Advisor against standard policies set by the organization manager and a database of known Ubuntu issues.  - **Single Containers**: Create and manage single containers in Bluemix. Use a single container to implement short-lived processes or to run simple tests as you develop an app or service. To make your single container available from the internet, review the `Public IP addresses` endpoints.  - **Container Groups**: Create and manage your container groups in Bluemix. A container group consists of multiple single containers that are all created from the same container image and as a consequence are configured in the same way. Container groups offer further options at no cost to make your app highly available. These options include in-built load balancing, auto-recovery of unhealthy container instances, and auto-scaling of container instances based on CPU and memory usage. Map a public route to your container group to make your app accessible from the internet.   - **Public IP addresses**: Use these endpoints to request public IP addresses for your space. You can bind this IP address to your container to make your container accessible from the internet.  - **File shares**: Create, list and delete file shares in a space. A file share is a NFS storage system that hosts Docker volumes.   - **Volumes**: Create and manage container volumes in your space to persist the data of your containers.      Each API request requires an HTTP header that includes the 'X-Auth-Token’ and 'X-Auth-Project-Id’ parameter.   - **X-Auth-Token**: The JSON web token (JWT) that you receive when logging into the Bluemix platform. It allows you to use the IBM Containers REST API, access services, and resources. Run `cf oauth-token` to retrieve your access token information. - **X-Auth-Project-Id**: The unique ID of your organization space where you want to create or work with your containers. Run `cf space <space_name> --guid`, where `<space_name>` is the name of your space, to retrieve your space ID.    For further information about how containers work in the IBM Containers service, review the documentation under https://new-console.ng.bluemix.net/docs/containers/container_index.html. 
 *
 * The version of the OpenAPI document: 3.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAICreateContainer.h
 *
 * 
 */

#ifndef OAICreateContainer_H
#define OAICreateContainer_H

#include <QJsonObject>

#include "OAIHostConfig.h"
#include <QList>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIHostConfig;

class OAICreateContainer : public OAIObject {
public:
    OAICreateContainer();
    OAICreateContainer(QString json);
    ~OAICreateContainer() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getBluemixApp() const;
    void setBluemixApp(const QString &bluemix_app);
    bool is_bluemix_app_Set() const;
    bool is_bluemix_app_Valid() const;

    QList<QString> getCmd() const;
    void setCmd(const QList<QString> &cmd);
    bool is_cmd_Set() const;
    bool is_cmd_Valid() const;

    QString getCpuset() const;
    void setCpuset(const QString &cpuset);
    bool is_cpuset_Set() const;
    bool is_cpuset_Valid() const;

    QList<QString> getEnv() const;
    void setEnv(const QList<QString> &env);
    bool is_env_Set() const;
    bool is_env_Valid() const;

    QList<QString> getExposedPorts() const;
    void setExposedPorts(const QList<QString> &exposed_ports);
    bool is_exposed_ports_Set() const;
    bool is_exposed_ports_Valid() const;

    OAIHostConfig getHostConfig() const;
    void setHostConfig(const OAIHostConfig &host_config);
    bool is_host_config_Set() const;
    bool is_host_config_Valid() const;

    QString getImage() const;
    void setImage(const QString &image);
    bool is_image_Set() const;
    bool is_image_Valid() const;

    qint32 getMemory() const;
    void setMemory(const qint32 &memory);
    bool is_memory_Set() const;
    bool is_memory_Valid() const;

    qint32 getNumberCpus() const;
    void setNumberCpus(const qint32 &number_cpus);
    bool is_number_cpus_Set() const;
    bool is_number_cpus_Valid() const;

    QString getVolumes() const;
    void setVolumes(const QString &volumes);
    bool is_volumes_Set() const;
    bool is_volumes_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_bluemix_app;
    bool m_bluemix_app_isSet;
    bool m_bluemix_app_isValid;

    QList<QString> m_cmd;
    bool m_cmd_isSet;
    bool m_cmd_isValid;

    QString m_cpuset;
    bool m_cpuset_isSet;
    bool m_cpuset_isValid;

    QList<QString> m_env;
    bool m_env_isSet;
    bool m_env_isValid;

    QList<QString> m_exposed_ports;
    bool m_exposed_ports_isSet;
    bool m_exposed_ports_isValid;

    OAIHostConfig m_host_config;
    bool m_host_config_isSet;
    bool m_host_config_isValid;

    QString m_image;
    bool m_image_isSet;
    bool m_image_isValid;

    qint32 m_memory;
    bool m_memory_isSet;
    bool m_memory_isValid;

    qint32 m_number_cpus;
    bool m_number_cpus_isSet;
    bool m_number_cpus_isValid;

    QString m_volumes;
    bool m_volumes_isSet;
    bool m_volumes_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAICreateContainer)

#endif // OAICreateContainer_H
