/**
 * IBM Containers API
 * Containers are virtual software objects that include all the elements that an app needs to run. A container has the benefits of resource isolation and allocation but is more portable and efficient than, for example, a virtual machine.   This documentation describes the IBM Containers API, which is based on the Docker Remote API. The API provides endpoints that you can use to create and manage your single containers and container groups in Bluemix. Endpoints are summarized under the following tags:   - **Authentication**: Retrieve and refresh your TLS certificates.  - **Private Docker images registry**: Create your own private Docker images registry in Bluemix by setting a namespace for your organization.  - **Images**: View, build, and push your images to your private Bluemix registry so you can use them with IBM Containers. You can also scan your container images with the Vulnerability Advisor against standard policies set by the organization manager and a database of known Ubuntu issues.  - **Single Containers**: Create and manage single containers in Bluemix. Use a single container to implement short-lived processes or to run simple tests as you develop an app or service. To make your single container available from the internet, review the `Public IP addresses` endpoints.  - **Container Groups**: Create and manage your container groups in Bluemix. A container group consists of multiple single containers that are all created from the same container image and as a consequence are configured in the same way. Container groups offer further options at no cost to make your app highly available. These options include in-built load balancing, auto-recovery of unhealthy container instances, and auto-scaling of container instances based on CPU and memory usage. Map a public route to your container group to make your app accessible from the internet.   - **Public IP addresses**: Use these endpoints to request public IP addresses for your space. You can bind this IP address to your container to make your container accessible from the internet.  - **File shares**: Create, list and delete file shares in a space. A file share is a NFS storage system that hosts Docker volumes.   - **Volumes**: Create and manage container volumes in your space to persist the data of your containers.      Each API request requires an HTTP header that includes the 'X-Auth-Token’ and 'X-Auth-Project-Id’ parameter.   - **X-Auth-Token**: The JSON web token (JWT) that you receive when logging into the Bluemix platform. It allows you to use the IBM Containers REST API, access services, and resources. Run `cf oauth-token` to retrieve your access token information. - **X-Auth-Project-Id**: The unique ID of your organization space where you want to create or work with your containers. Run `cf space <space_name> --guid`, where `<space_name>` is the name of your space, to retrieve your space ID.    For further information about how containers work in the IBM Containers service, review the documentation under https://new-console.ng.bluemix.net/docs/containers/container_index.html. 
 *
 * The version of the OpenAPI document: 3.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIContainerGroupsApi.h"
#include "OAIServerConfiguration.h"
#include <QJsonArray>
#include <QJsonDocument>

namespace OpenAPI {

OAIContainerGroupsApi::OAIContainerGroupsApi(const int timeOut)
    : _timeOut(timeOut),
      _manager(nullptr),
      _isResponseCompressionEnabled(false),
      _isRequestCompressionEnabled(false) {
    initializeServerConfigs();
}

OAIContainerGroupsApi::~OAIContainerGroupsApi() {
}

void OAIContainerGroupsApi::initializeServerConfigs() {
    //Default server
    QList<OAIServerConfiguration> defaultConf = QList<OAIServerConfiguration>();
    //varying endpoint server
    defaultConf.append(OAIServerConfiguration(
    QUrl("https://containers-api.ng.bluemix.net/v3"),
    "No description provided",
    QMap<QString, OAIServerVariable>()));
    _serverConfigs.insert("containersGroupsGet", defaultConf);
    _serverIndices.insert("containersGroupsGet", 0);
    _serverConfigs.insert("containersGroupsNameOrIdDelete", defaultConf);
    _serverIndices.insert("containersGroupsNameOrIdDelete", 0);
    _serverConfigs.insert("containersGroupsNameOrIdGet", defaultConf);
    _serverIndices.insert("containersGroupsNameOrIdGet", 0);
    _serverConfigs.insert("containersGroupsNameOrIdMaproutePost", defaultConf);
    _serverIndices.insert("containersGroupsNameOrIdMaproutePost", 0);
    _serverConfigs.insert("containersGroupsNameOrIdPatch", defaultConf);
    _serverIndices.insert("containersGroupsNameOrIdPatch", 0);
    _serverConfigs.insert("containersGroupsNameOrIdUnmaproutePost", defaultConf);
    _serverIndices.insert("containersGroupsNameOrIdUnmaproutePost", 0);
    _serverConfigs.insert("containersGroupsPost", defaultConf);
    _serverIndices.insert("containersGroupsPost", 0);
}

/**
* returns 0 on success and -1, -2 or -3 on failure.
* -1 when the variable does not exist and -2 if the value is not defined in the enum and -3 if the operation or server index is not found
*/
int OAIContainerGroupsApi::setDefaultServerValue(int serverIndex, const QString &operation, const QString &variable, const QString &value) {
    auto it = _serverConfigs.find(operation);
    if (it != _serverConfigs.end() && serverIndex < it.value().size()) {
      return _serverConfigs[operation][serverIndex].setDefaultValue(variable,value);
    }
    return -3;
}
void OAIContainerGroupsApi::setServerIndex(const QString &operation, int serverIndex) {
    if (_serverIndices.contains(operation) && serverIndex < _serverConfigs.find(operation).value().size()) {
        _serverIndices[operation] = serverIndex;
    }
}

void OAIContainerGroupsApi::setApiKey(const QString &apiKeyName, const QString &apiKey) {
    _apiKeys.insert(apiKeyName, apiKey);
}

void OAIContainerGroupsApi::setBearerToken(const QString &token) {
    _bearerToken = token;
}

void OAIContainerGroupsApi::setUsername(const QString &username) {
    _username = username;
}

void OAIContainerGroupsApi::setPassword(const QString &password) {
    _password = password;
}


void OAIContainerGroupsApi::setTimeOut(const int timeOut) {
    _timeOut = timeOut;
}

void OAIContainerGroupsApi::setWorkingDirectory(const QString &path) {
    _workingDirectory = path;
}

void OAIContainerGroupsApi::setNetworkAccessManager(QNetworkAccessManager* manager) {
    _manager = manager;
}

/**
    * Appends a new ServerConfiguration to the config map for a specific operation.
    * @param operation The id to the target operation.
    * @param url A string that contains the URL of the server
    * @param description A String that describes the server
    * @param variables A map between a variable name and its value. The value is used for substitution in the server's URL template.
    * returns the index of the new server config on success and -1 if the operation is not found
    */
int OAIContainerGroupsApi::addServerConfiguration(const QString &operation, const QUrl &url, const QString &description, const QMap<QString, OAIServerVariable> &variables) {
    if (_serverConfigs.contains(operation)) {
        _serverConfigs[operation].append(OAIServerConfiguration(
                    url,
                    description,
                    variables));
        return _serverConfigs[operation].size()-1;
    } else {
        return -1;
    }
}

/**
    * Appends a new ServerConfiguration to the config map for a all operations and sets the index to that server.
    * @param url A string that contains the URL of the server
    * @param description A String that describes the server
    * @param variables A map between a variable name and its value. The value is used for substitution in the server's URL template.
    */
void OAIContainerGroupsApi::setNewServerForAllOperations(const QUrl &url, const QString &description, const QMap<QString, OAIServerVariable> &variables) {
    for (auto keyIt = _serverIndices.keyBegin(); keyIt != _serverIndices.keyEnd(); keyIt++) {
        setServerIndex(*keyIt, addServerConfiguration(*keyIt, url, description, variables));
    }
}

/**
    * Appends a new ServerConfiguration to the config map for an operations and sets the index to that server.
    * @param URL A string that contains the URL of the server
    * @param description A String that describes the server
    * @param variables A map between a variable name and its value. The value is used for substitution in the server's URL template.
    */
void OAIContainerGroupsApi::setNewServer(const QString &operation, const QUrl &url, const QString &description, const QMap<QString, OAIServerVariable> &variables) {
    setServerIndex(operation, addServerConfiguration(operation, url, description, variables));
}

void OAIContainerGroupsApi::addHeaders(const QString &key, const QString &value) {
    _defaultHeaders.insert(key, value);
}

void OAIContainerGroupsApi::enableRequestCompression() {
    _isRequestCompressionEnabled = true;
}

void OAIContainerGroupsApi::enableResponseCompression() {
    _isResponseCompressionEnabled = true;
}

void OAIContainerGroupsApi::abortRequests() {
    Q_EMIT abortRequestsSignal();
}

QString OAIContainerGroupsApi::getParamStylePrefix(const QString &style) {
    if (style == "matrix") {
        return ";";
    } else if (style == "label") {
        return ".";
    } else if (style == "form") {
        return "&";
    } else if (style == "simple") {
        return "";
    } else if (style == "spaceDelimited") {
        return "&";
    } else if (style == "pipeDelimited") {
        return "&";
    } else {
        return "none";
    }
}

QString OAIContainerGroupsApi::getParamStyleSuffix(const QString &style) {
    if (style == "matrix") {
        return "=";
    } else if (style == "label") {
        return "";
    } else if (style == "form") {
        return "=";
    } else if (style == "simple") {
        return "";
    } else if (style == "spaceDelimited") {
        return "=";
    } else if (style == "pipeDelimited") {
        return "=";
    } else {
        return "none";
    }
}

QString OAIContainerGroupsApi::getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode) {

    if (style == "matrix") {
        return (isExplode) ? ";" + name + "=" : ",";

    } else if (style == "label") {
        return (isExplode) ? "." : ",";

    } else if (style == "form") {
        return (isExplode) ? "&" + name + "=" : ",";

    } else if (style == "simple") {
        return ",";
    } else if (style == "spaceDelimited") {
        return (isExplode) ? "&" + name + "=" : " ";

    } else if (style == "pipeDelimited") {
        return (isExplode) ? "&" + name + "=" : "|";

    } else if (style == "deepObject") {
        return (isExplode) ? "&" : "none";

    } else {
        return "none";
    }
}

void OAIContainerGroupsApi::containersGroupsGet(const QString &x_auth_token, const QString &x_auth_project_id) {
    QString fullPath = QString(_serverConfigs["containersGroupsGet"][_serverIndices.value("containersGroupsGet")].URL()+"/containers/groups");
    
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    
    {
        if (!::OpenAPI::toStringValue(x_auth_token).isEmpty()) {
            input.headers.insert("X-Auth-Token", ::OpenAPI::toStringValue(x_auth_token));
        }
        }
    
    {
        if (!::OpenAPI::toStringValue(x_auth_project_id).isEmpty()) {
            input.headers.insert("X-Auth-Project-Id", ::OpenAPI::toStringValue(x_auth_project_id));
        }
        }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIContainerGroupsApi::containersGroupsGetCallback);
    connect(this, &OAIContainerGroupsApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIContainerGroupsApi::containersGroupsGetCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    QList<OAIContainersGroupsGetListItem> output;
    QString json(worker->response);
    QByteArray array(json.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonArray jsonArray = doc.array();
    for (QJsonValue obj : jsonArray) {
        OAIContainersGroupsGetListItem val;
        ::OpenAPI::fromJsonValue(val, obj);
        output.append(val);
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT containersGroupsGetSignal(output);
        Q_EMIT containersGroupsGetSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT containersGroupsGetSignalE(output, error_type, error_str);
        Q_EMIT containersGroupsGetSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT containersGroupsGetSignalError(output, error_type, error_str);
        Q_EMIT containersGroupsGetSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIContainerGroupsApi::containersGroupsNameOrIdDelete(const QString &x_auth_token, const QString &x_auth_project_id, const QString &name_or_id, const ::OpenAPI::OptionalParam<QString> &force) {
    QString fullPath = QString(_serverConfigs["containersGroupsNameOrIdDelete"][_serverIndices.value("containersGroupsNameOrIdDelete")].URL()+"/containers/groups/{name_or_id}");
    
    
    {
        QString name_or_idPathParam("{");
        name_or_idPathParam.append("name_or_id").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "name_or_id", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"name_or_id"+pathSuffix : pathPrefix;
        fullPath.replace(name_or_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(name_or_id)));
    }
    QString queryPrefix, querySuffix, queryDelimiter, queryStyle;
    if (force.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "force", true);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("force")).append(querySuffix).append(QUrl::toPercentEncoding(force.stringValue()));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "DELETE");


    
    {
        if (!::OpenAPI::toStringValue(x_auth_token).isEmpty()) {
            input.headers.insert("X-Auth-Token", ::OpenAPI::toStringValue(x_auth_token));
        }
        }
    
    {
        if (!::OpenAPI::toStringValue(x_auth_project_id).isEmpty()) {
            input.headers.insert("X-Auth-Project-Id", ::OpenAPI::toStringValue(x_auth_project_id));
        }
        }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIContainerGroupsApi::containersGroupsNameOrIdDeleteCallback);
    connect(this, &OAIContainerGroupsApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIContainerGroupsApi::containersGroupsNameOrIdDeleteCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT containersGroupsNameOrIdDeleteSignal();
        Q_EMIT containersGroupsNameOrIdDeleteSignalFull(worker);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT containersGroupsNameOrIdDeleteSignalE(error_type, error_str);
        Q_EMIT containersGroupsNameOrIdDeleteSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT containersGroupsNameOrIdDeleteSignalError(error_type, error_str);
        Q_EMIT containersGroupsNameOrIdDeleteSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIContainerGroupsApi::containersGroupsNameOrIdGet(const QString &x_auth_token, const QString &x_auth_project_id, const QString &name_or_id) {
    QString fullPath = QString(_serverConfigs["containersGroupsNameOrIdGet"][_serverIndices.value("containersGroupsNameOrIdGet")].URL()+"/containers/groups/{name_or_id}");
    
    
    {
        QString name_or_idPathParam("{");
        name_or_idPathParam.append("name_or_id").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "name_or_id", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"name_or_id"+pathSuffix : pathPrefix;
        fullPath.replace(name_or_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(name_or_id)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    
    {
        if (!::OpenAPI::toStringValue(x_auth_token).isEmpty()) {
            input.headers.insert("X-Auth-Token", ::OpenAPI::toStringValue(x_auth_token));
        }
        }
    
    {
        if (!::OpenAPI::toStringValue(x_auth_project_id).isEmpty()) {
            input.headers.insert("X-Auth-Project-Id", ::OpenAPI::toStringValue(x_auth_project_id));
        }
        }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIContainerGroupsApi::containersGroupsNameOrIdGetCallback);
    connect(this, &OAIContainerGroupsApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIContainerGroupsApi::containersGroupsNameOrIdGetCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAIContainersGroupsNameOrIdGetDetails output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT containersGroupsNameOrIdGetSignal(output);
        Q_EMIT containersGroupsNameOrIdGetSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT containersGroupsNameOrIdGetSignalE(output, error_type, error_str);
        Q_EMIT containersGroupsNameOrIdGetSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT containersGroupsNameOrIdGetSignalError(output, error_type, error_str);
        Q_EMIT containersGroupsNameOrIdGetSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIContainerGroupsApi::containersGroupsNameOrIdMaproutePost(const QString &x_auth_token, const QString &x_auth_project_id, const QString &name_or_id, const OAIRoute &oai_route) {
    QString fullPath = QString(_serverConfigs["containersGroupsNameOrIdMaproutePost"][_serverIndices.value("containersGroupsNameOrIdMaproutePost")].URL()+"/containers/groups/{name_or_id}/maproute");
    
    
    {
        QString name_or_idPathParam("{");
        name_or_idPathParam.append("name_or_id").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "name_or_id", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"name_or_id"+pathSuffix : pathPrefix;
        fullPath.replace(name_or_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(name_or_id)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "POST");

    {

        
        QByteArray output = oai_route.asJson().toUtf8();
        input.request_body.append(output);
    }
    
    {
        if (!::OpenAPI::toStringValue(x_auth_token).isEmpty()) {
            input.headers.insert("X-Auth-Token", ::OpenAPI::toStringValue(x_auth_token));
        }
        }
    
    {
        if (!::OpenAPI::toStringValue(x_auth_project_id).isEmpty()) {
            input.headers.insert("X-Auth-Project-Id", ::OpenAPI::toStringValue(x_auth_project_id));
        }
        }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIContainerGroupsApi::containersGroupsNameOrIdMaproutePostCallback);
    connect(this, &OAIContainerGroupsApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIContainerGroupsApi::containersGroupsNameOrIdMaproutePostCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAIContainersGroupsNameOrIdMaproutePostInfo output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT containersGroupsNameOrIdMaproutePostSignal(output);
        Q_EMIT containersGroupsNameOrIdMaproutePostSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT containersGroupsNameOrIdMaproutePostSignalE(output, error_type, error_str);
        Q_EMIT containersGroupsNameOrIdMaproutePostSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT containersGroupsNameOrIdMaproutePostSignalError(output, error_type, error_str);
        Q_EMIT containersGroupsNameOrIdMaproutePostSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIContainerGroupsApi::containersGroupsNameOrIdPatch(const QString &x_auth_token, const QString &x_auth_project_id, const QString &name_or_id, const OAIContainersGroupsNameOrIdPatchUpdatedInfo &oai_containers_groups_name_or_id_patch_updated_info) {
    QString fullPath = QString(_serverConfigs["containersGroupsNameOrIdPatch"][_serverIndices.value("containersGroupsNameOrIdPatch")].URL()+"/containers/groups/{name_or_id}");
    
    
    {
        QString name_or_idPathParam("{");
        name_or_idPathParam.append("name_or_id").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "name_or_id", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"name_or_id"+pathSuffix : pathPrefix;
        fullPath.replace(name_or_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(name_or_id)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "PATCH");

    {

        
        QByteArray output = oai_containers_groups_name_or_id_patch_updated_info.asJson().toUtf8();
        input.request_body.append(output);
    }
    
    {
        if (!::OpenAPI::toStringValue(x_auth_token).isEmpty()) {
            input.headers.insert("X-Auth-Token", ::OpenAPI::toStringValue(x_auth_token));
        }
        }
    
    {
        if (!::OpenAPI::toStringValue(x_auth_project_id).isEmpty()) {
            input.headers.insert("X-Auth-Project-Id", ::OpenAPI::toStringValue(x_auth_project_id));
        }
        }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIContainerGroupsApi::containersGroupsNameOrIdPatchCallback);
    connect(this, &OAIContainerGroupsApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIContainerGroupsApi::containersGroupsNameOrIdPatchCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT containersGroupsNameOrIdPatchSignal();
        Q_EMIT containersGroupsNameOrIdPatchSignalFull(worker);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT containersGroupsNameOrIdPatchSignalE(error_type, error_str);
        Q_EMIT containersGroupsNameOrIdPatchSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT containersGroupsNameOrIdPatchSignalError(error_type, error_str);
        Q_EMIT containersGroupsNameOrIdPatchSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIContainerGroupsApi::containersGroupsNameOrIdUnmaproutePost(const QString &x_auth_token, const QString &x_auth_project_id, const QString &name_or_id, const OAIRoute &oai_route) {
    QString fullPath = QString(_serverConfigs["containersGroupsNameOrIdUnmaproutePost"][_serverIndices.value("containersGroupsNameOrIdUnmaproutePost")].URL()+"/containers/groups/{name_or_id}/unmaproute");
    
    
    {
        QString name_or_idPathParam("{");
        name_or_idPathParam.append("name_or_id").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "name_or_id", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"name_or_id"+pathSuffix : pathPrefix;
        fullPath.replace(name_or_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(name_or_id)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "POST");

    {

        
        QByteArray output = oai_route.asJson().toUtf8();
        input.request_body.append(output);
    }
    
    {
        if (!::OpenAPI::toStringValue(x_auth_token).isEmpty()) {
            input.headers.insert("X-Auth-Token", ::OpenAPI::toStringValue(x_auth_token));
        }
        }
    
    {
        if (!::OpenAPI::toStringValue(x_auth_project_id).isEmpty()) {
            input.headers.insert("X-Auth-Project-Id", ::OpenAPI::toStringValue(x_auth_project_id));
        }
        }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIContainerGroupsApi::containersGroupsNameOrIdUnmaproutePostCallback);
    connect(this, &OAIContainerGroupsApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIContainerGroupsApi::containersGroupsNameOrIdUnmaproutePostCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAIContainersGroupsNameOrIdMaproutePostInfo output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT containersGroupsNameOrIdUnmaproutePostSignal(output);
        Q_EMIT containersGroupsNameOrIdUnmaproutePostSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT containersGroupsNameOrIdUnmaproutePostSignalE(output, error_type, error_str);
        Q_EMIT containersGroupsNameOrIdUnmaproutePostSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT containersGroupsNameOrIdUnmaproutePostSignalError(output, error_type, error_str);
        Q_EMIT containersGroupsNameOrIdUnmaproutePostSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIContainerGroupsApi::containersGroupsPost(const QString &x_auth_token, const QString &x_auth_project_id, const OAIContainersGroupsPostRequiredAttributes &oai_containers_groups_post_required_attributes) {
    QString fullPath = QString(_serverConfigs["containersGroupsPost"][_serverIndices.value("containersGroupsPost")].URL()+"/containers/groups");
    
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "POST");

    {

        
        QByteArray output = oai_containers_groups_post_required_attributes.asJson().toUtf8();
        input.request_body.append(output);
    }
    
    {
        if (!::OpenAPI::toStringValue(x_auth_token).isEmpty()) {
            input.headers.insert("X-Auth-Token", ::OpenAPI::toStringValue(x_auth_token));
        }
        }
    
    {
        if (!::OpenAPI::toStringValue(x_auth_project_id).isEmpty()) {
            input.headers.insert("X-Auth-Project-Id", ::OpenAPI::toStringValue(x_auth_project_id));
        }
        }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIContainerGroupsApi::containersGroupsPostCallback);
    connect(this, &OAIContainerGroupsApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIContainerGroupsApi::containersGroupsPostCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAIContainersGroupsPostCreatedInfo output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT containersGroupsPostSignal(output);
        Q_EMIT containersGroupsPostSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT containersGroupsPostSignalE(output, error_type, error_str);
        Q_EMIT containersGroupsPostSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT containersGroupsPostSignalError(output, error_type, error_str);
        Q_EMIT containersGroupsPostSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIContainerGroupsApi::tokenAvailable(){

    oauthToken token;
    switch (_OauthMethod) {
    case 1: //implicit flow
        token = _implicitFlow.getToken(_latestScope.join(" "));
        if(token.isValid()){
            _latestInput.headers.insert("Authorization", "Bearer " + token.getToken());
            _latestWorker->execute(&_latestInput);
        }else{
            _implicitFlow.removeToken(_latestScope.join(" "));
            qDebug() << "Could not retrieve a valid token";
        }
        break;
    case 2: //authorization flow
        token = _authFlow.getToken(_latestScope.join(" "));
        if(token.isValid()){
            _latestInput.headers.insert("Authorization", "Bearer " + token.getToken());
            _latestWorker->execute(&_latestInput);
        }else{
            _authFlow.removeToken(_latestScope.join(" "));
            qDebug() << "Could not retrieve a valid token";
        }
        break;
    case 3: //client credentials flow
        token = _credentialFlow.getToken(_latestScope.join(" "));
        if(token.isValid()){
            _latestInput.headers.insert("Authorization", "Bearer " + token.getToken());
            _latestWorker->execute(&_latestInput);
        }else{
            _credentialFlow.removeToken(_latestScope.join(" "));
            qDebug() << "Could not retrieve a valid token";
        }
        break;
    case 4: //resource owner password flow
        token = _passwordFlow.getToken(_latestScope.join(" "));
        if(token.isValid()){
            _latestInput.headers.insert("Authorization", "Bearer " + token.getToken());
            _latestWorker->execute(&_latestInput);
        }else{
            _credentialFlow.removeToken(_latestScope.join(" "));
            qDebug() << "Could not retrieve a valid token";
        }
        break;
    default:
        qDebug() << "No Oauth method set!";
        break;
    }
}
} // namespace OpenAPI
