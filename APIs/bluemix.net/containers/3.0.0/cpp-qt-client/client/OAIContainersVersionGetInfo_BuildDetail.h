/**
 * IBM Containers API
 * Containers are virtual software objects that include all the elements that an app needs to run. A container has the benefits of resource isolation and allocation but is more portable and efficient than, for example, a virtual machine.   This documentation describes the IBM Containers API, which is based on the Docker Remote API. The API provides endpoints that you can use to create and manage your single containers and container groups in Bluemix. Endpoints are summarized under the following tags:   - **Authentication**: Retrieve and refresh your TLS certificates.  - **Private Docker images registry**: Create your own private Docker images registry in Bluemix by setting a namespace for your organization.  - **Images**: View, build, and push your images to your private Bluemix registry so you can use them with IBM Containers. You can also scan your container images with the Vulnerability Advisor against standard policies set by the organization manager and a database of known Ubuntu issues.  - **Single Containers**: Create and manage single containers in Bluemix. Use a single container to implement short-lived processes or to run simple tests as you develop an app or service. To make your single container available from the internet, review the `Public IP addresses` endpoints.  - **Container Groups**: Create and manage your container groups in Bluemix. A container group consists of multiple single containers that are all created from the same container image and as a consequence are configured in the same way. Container groups offer further options at no cost to make your app highly available. These options include in-built load balancing, auto-recovery of unhealthy container instances, and auto-scaling of container instances based on CPU and memory usage. Map a public route to your container group to make your app accessible from the internet.   - **Public IP addresses**: Use these endpoints to request public IP addresses for your space. You can bind this IP address to your container to make your container accessible from the internet.  - **File shares**: Create, list and delete file shares in a space. A file share is a NFS storage system that hosts Docker volumes.   - **Volumes**: Create and manage container volumes in your space to persist the data of your containers.      Each API request requires an HTTP header that includes the 'X-Auth-Token’ and 'X-Auth-Project-Id’ parameter.   - **X-Auth-Token**: The JSON web token (JWT) that you receive when logging into the Bluemix platform. It allows you to use the IBM Containers REST API, access services, and resources. Run `cf oauth-token` to retrieve your access token information. - **X-Auth-Project-Id**: The unique ID of your organization space where you want to create or work with your containers. Run `cf space <space_name> --guid`, where `<space_name>` is the name of your space, to retrieve your space ID.    For further information about how containers work in the IBM Containers service, review the documentation under https://new-console.ng.bluemix.net/docs/containers/container_index.html. 
 *
 * The version of the OpenAPI document: 3.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIContainersVersionGetInfo_BuildDetail.h
 *
 * 
 */

#ifndef OAIContainersVersionGetInfo_BuildDetail_H
#define OAIContainersVersionGetInfo_BuildDetail_H

#include <QJsonObject>

#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAIContainersVersionGetInfo_BuildDetail : public OAIObject {
public:
    OAIContainersVersionGetInfo_BuildDetail();
    OAIContainersVersionGetInfo_BuildDetail(QString json);
    ~OAIContainersVersionGetInfo_BuildDetail() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getApi() const;
    void setApi(const QString &api);
    bool is_api_Set() const;
    bool is_api_Valid() const;

    QString getAutomount() const;
    void setAutomount(const QString &automount);
    bool is_automount_Set() const;
    bool is_automount_Valid() const;

    QString getGrupdater() const;
    void setGrupdater(const QString &grupdater);
    bool is_grupdater_Set() const;
    bool is_grupdater_Valid() const;

    QString getHarmony() const;
    void setHarmony(const QString &harmony);
    bool is_harmony_Set() const;
    bool is_harmony_Valid() const;

    QString getHealthMonitor() const;
    void setHealthMonitor(const QString &health_monitor);
    bool is_health_monitor_Set() const;
    bool is_health_monitor_Valid() const;

    QString getHijack() const;
    void setHijack(const QString &hijack);
    bool is_hijack_Set() const;
    bool is_hijack_Valid() const;

    QString getLdap() const;
    void setLdap(const QString &ldap);
    bool is_ldap_Set() const;
    bool is_ldap_Valid() const;

    QString getLogmet() const;
    void setLogmet(const QString &logmet);
    bool is_logmet_Set() const;
    bool is_logmet_Valid() const;

    QString getLumberjack() const;
    void setLumberjack(const QString &lumberjack);
    bool is_lumberjack_Set() const;
    bool is_lumberjack_Valid() const;

    QString getRedisCluster() const;
    void setRedisCluster(const QString &redis_cluster);
    bool is_redis_cluster_Set() const;
    bool is_redis_cluster_Valid() const;

    QString getSgwatcher() const;
    void setSgwatcher(const QString &sgwatcher);
    bool is_sgwatcher_Set() const;
    bool is_sgwatcher_Valid() const;

    QString getVolmgr() const;
    void setVolmgr(const QString &volmgr);
    bool is_volmgr_Set() const;
    bool is_volmgr_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_api;
    bool m_api_isSet;
    bool m_api_isValid;

    QString m_automount;
    bool m_automount_isSet;
    bool m_automount_isValid;

    QString m_grupdater;
    bool m_grupdater_isSet;
    bool m_grupdater_isValid;

    QString m_harmony;
    bool m_harmony_isSet;
    bool m_harmony_isValid;

    QString m_health_monitor;
    bool m_health_monitor_isSet;
    bool m_health_monitor_isValid;

    QString m_hijack;
    bool m_hijack_isSet;
    bool m_hijack_isValid;

    QString m_ldap;
    bool m_ldap_isSet;
    bool m_ldap_isValid;

    QString m_logmet;
    bool m_logmet_isSet;
    bool m_logmet_isValid;

    QString m_lumberjack;
    bool m_lumberjack_isSet;
    bool m_lumberjack_isValid;

    QString m_redis_cluster;
    bool m_redis_cluster_isSet;
    bool m_redis_cluster_isValid;

    QString m_sgwatcher;
    bool m_sgwatcher_isSet;
    bool m_sgwatcher_isValid;

    QString m_volmgr;
    bool m_volmgr_isSet;
    bool m_volmgr_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIContainersVersionGetInfo_BuildDetail)

#endif // OAIContainersVersionGetInfo_BuildDetail_H
