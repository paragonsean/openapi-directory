/**
 * IBM Containers API
 * Containers are virtual software objects that include all the elements that an app needs to run. A container has the benefits of resource isolation and allocation but is more portable and efficient than, for example, a virtual machine.   This documentation describes the IBM Containers API, which is based on the Docker Remote API. The API provides endpoints that you can use to create and manage your single containers and container groups in Bluemix. Endpoints are summarized under the following tags:   - **Authentication**: Retrieve and refresh your TLS certificates.  - **Private Docker images registry**: Create your own private Docker images registry in Bluemix by setting a namespace for your organization.  - **Images**: View, build, and push your images to your private Bluemix registry so you can use them with IBM Containers. You can also scan your container images with the Vulnerability Advisor against standard policies set by the organization manager and a database of known Ubuntu issues.  - **Single Containers**: Create and manage single containers in Bluemix. Use a single container to implement short-lived processes or to run simple tests as you develop an app or service. To make your single container available from the internet, review the `Public IP addresses` endpoints.  - **Container Groups**: Create and manage your container groups in Bluemix. A container group consists of multiple single containers that are all created from the same container image and as a consequence are configured in the same way. Container groups offer further options at no cost to make your app highly available. These options include in-built load balancing, auto-recovery of unhealthy container instances, and auto-scaling of container instances based on CPU and memory usage. Map a public route to your container group to make your app accessible from the internet.   - **Public IP addresses**: Use these endpoints to request public IP addresses for your space. You can bind this IP address to your container to make your container accessible from the internet.  - **File shares**: Create, list and delete file shares in a space. A file share is a NFS storage system that hosts Docker volumes.   - **Volumes**: Create and manage container volumes in your space to persist the data of your containers.      Each API request requires an HTTP header that includes the 'X-Auth-Token’ and 'X-Auth-Project-Id’ parameter.   - **X-Auth-Token**: The JSON web token (JWT) that you receive when logging into the Bluemix platform. It allows you to use the IBM Containers REST API, access services, and resources. Run `cf oauth-token` to retrieve your access token information. - **X-Auth-Project-Id**: The unique ID of your organization space where you want to create or work with your containers. Run `cf space <space_name> --guid`, where `<space_name>` is the name of your space, to retrieve your space ID.    For further information about how containers work in the IBM Containers service, review the documentation under https://new-console.ng.bluemix.net/docs/containers/container_index.html. 
 *
 * The version of the OpenAPI document: 3.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIContainerConfig.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIContainerConfig::OAIContainerConfig(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIContainerConfig::OAIContainerConfig() {
    this->initializeModel();
}

OAIContainerConfig::~OAIContainerConfig() {}

void OAIContainerConfig::initializeModel() {

    m_args_escaped_isSet = false;
    m_args_escaped_isValid = false;

    m_attach_stderr_isSet = false;
    m_attach_stderr_isValid = false;

    m_attach_stdin_isSet = false;
    m_attach_stdin_isValid = false;

    m_attach_stdout_isSet = false;
    m_attach_stdout_isValid = false;

    m_cmd_isSet = false;
    m_cmd_isValid = false;

    m_domainname_isSet = false;
    m_domainname_isValid = false;

    m_env_isSet = false;
    m_env_isValid = false;

    m_exposed_ports_isSet = false;
    m_exposed_ports_isValid = false;

    m_hostname_isSet = false;
    m_hostname_isValid = false;

    m_image_isSet = false;
    m_image_isValid = false;

    m_image_architecture_isSet = false;
    m_image_architecture_isValid = false;

    m_labels_isSet = false;
    m_labels_isValid = false;

    m_memory_isSet = false;
    m_memory_isValid = false;

    m_memory_swap_isSet = false;
    m_memory_swap_isValid = false;

    m_open_stdin_isSet = false;
    m_open_stdin_isValid = false;

    m_port_specs_isSet = false;
    m_port_specs_isValid = false;

    m_stdin_once_isSet = false;
    m_stdin_once_isValid = false;

    m_tty_isSet = false;
    m_tty_isValid = false;

    m_user_isSet = false;
    m_user_isValid = false;

    m_vcpu_isSet = false;
    m_vcpu_isValid = false;

    m_volumes_from_isSet = false;
    m_volumes_from_isValid = false;

    m_working_dir_isSet = false;
    m_working_dir_isValid = false;
}

void OAIContainerConfig::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIContainerConfig::fromJsonObject(QJsonObject json) {

    m_args_escaped_isValid = ::OpenAPI::fromJsonValue(m_args_escaped, json[QString("ArgsEscaped")]);
    m_args_escaped_isSet = !json[QString("ArgsEscaped")].isNull() && m_args_escaped_isValid;

    m_attach_stderr_isValid = ::OpenAPI::fromJsonValue(m_attach_stderr, json[QString("AttachStderr")]);
    m_attach_stderr_isSet = !json[QString("AttachStderr")].isNull() && m_attach_stderr_isValid;

    m_attach_stdin_isValid = ::OpenAPI::fromJsonValue(m_attach_stdin, json[QString("AttachStdin")]);
    m_attach_stdin_isSet = !json[QString("AttachStdin")].isNull() && m_attach_stdin_isValid;

    m_attach_stdout_isValid = ::OpenAPI::fromJsonValue(m_attach_stdout, json[QString("AttachStdout")]);
    m_attach_stdout_isSet = !json[QString("AttachStdout")].isNull() && m_attach_stdout_isValid;

    m_cmd_isValid = ::OpenAPI::fromJsonValue(m_cmd, json[QString("Cmd")]);
    m_cmd_isSet = !json[QString("Cmd")].isNull() && m_cmd_isValid;

    m_domainname_isValid = ::OpenAPI::fromJsonValue(m_domainname, json[QString("Domainname")]);
    m_domainname_isSet = !json[QString("Domainname")].isNull() && m_domainname_isValid;

    m_env_isValid = ::OpenAPI::fromJsonValue(m_env, json[QString("Env")]);
    m_env_isSet = !json[QString("Env")].isNull() && m_env_isValid;

    m_exposed_ports_isValid = ::OpenAPI::fromJsonValue(m_exposed_ports, json[QString("ExposedPorts")]);
    m_exposed_ports_isSet = !json[QString("ExposedPorts")].isNull() && m_exposed_ports_isValid;

    m_hostname_isValid = ::OpenAPI::fromJsonValue(m_hostname, json[QString("Hostname")]);
    m_hostname_isSet = !json[QString("Hostname")].isNull() && m_hostname_isValid;

    m_image_isValid = ::OpenAPI::fromJsonValue(m_image, json[QString("Image")]);
    m_image_isSet = !json[QString("Image")].isNull() && m_image_isValid;

    m_image_architecture_isValid = ::OpenAPI::fromJsonValue(m_image_architecture, json[QString("ImageArchitecture")]);
    m_image_architecture_isSet = !json[QString("ImageArchitecture")].isNull() && m_image_architecture_isValid;

    m_labels_isValid = ::OpenAPI::fromJsonValue(m_labels, json[QString("Labels")]);
    m_labels_isSet = !json[QString("Labels")].isNull() && m_labels_isValid;

    m_memory_isValid = ::OpenAPI::fromJsonValue(m_memory, json[QString("Memory")]);
    m_memory_isSet = !json[QString("Memory")].isNull() && m_memory_isValid;

    m_memory_swap_isValid = ::OpenAPI::fromJsonValue(m_memory_swap, json[QString("MemorySwap")]);
    m_memory_swap_isSet = !json[QString("MemorySwap")].isNull() && m_memory_swap_isValid;

    m_open_stdin_isValid = ::OpenAPI::fromJsonValue(m_open_stdin, json[QString("OpenStdin")]);
    m_open_stdin_isSet = !json[QString("OpenStdin")].isNull() && m_open_stdin_isValid;

    m_port_specs_isValid = ::OpenAPI::fromJsonValue(m_port_specs, json[QString("PortSpecs")]);
    m_port_specs_isSet = !json[QString("PortSpecs")].isNull() && m_port_specs_isValid;

    m_stdin_once_isValid = ::OpenAPI::fromJsonValue(m_stdin_once, json[QString("StdinOnce")]);
    m_stdin_once_isSet = !json[QString("StdinOnce")].isNull() && m_stdin_once_isValid;

    m_tty_isValid = ::OpenAPI::fromJsonValue(m_tty, json[QString("Tty")]);
    m_tty_isSet = !json[QString("Tty")].isNull() && m_tty_isValid;

    m_user_isValid = ::OpenAPI::fromJsonValue(m_user, json[QString("User")]);
    m_user_isSet = !json[QString("User")].isNull() && m_user_isValid;

    m_vcpu_isValid = ::OpenAPI::fromJsonValue(m_vcpu, json[QString("VCPU")]);
    m_vcpu_isSet = !json[QString("VCPU")].isNull() && m_vcpu_isValid;

    m_volumes_from_isValid = ::OpenAPI::fromJsonValue(m_volumes_from, json[QString("VolumesFrom")]);
    m_volumes_from_isSet = !json[QString("VolumesFrom")].isNull() && m_volumes_from_isValid;

    m_working_dir_isValid = ::OpenAPI::fromJsonValue(m_working_dir, json[QString("WorkingDir")]);
    m_working_dir_isSet = !json[QString("WorkingDir")].isNull() && m_working_dir_isValid;
}

QString OAIContainerConfig::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIContainerConfig::asJsonObject() const {
    QJsonObject obj;
    if (m_args_escaped_isSet) {
        obj.insert(QString("ArgsEscaped"), ::OpenAPI::toJsonValue(m_args_escaped));
    }
    if (m_attach_stderr_isSet) {
        obj.insert(QString("AttachStderr"), ::OpenAPI::toJsonValue(m_attach_stderr));
    }
    if (m_attach_stdin_isSet) {
        obj.insert(QString("AttachStdin"), ::OpenAPI::toJsonValue(m_attach_stdin));
    }
    if (m_attach_stdout_isSet) {
        obj.insert(QString("AttachStdout"), ::OpenAPI::toJsonValue(m_attach_stdout));
    }
    if (m_cmd.size() > 0) {
        obj.insert(QString("Cmd"), ::OpenAPI::toJsonValue(m_cmd));
    }
    if (m_domainname_isSet) {
        obj.insert(QString("Domainname"), ::OpenAPI::toJsonValue(m_domainname));
    }
    if (m_env.size() > 0) {
        obj.insert(QString("Env"), ::OpenAPI::toJsonValue(m_env));
    }
    if (m_exposed_ports.size() > 0) {
        obj.insert(QString("ExposedPorts"), ::OpenAPI::toJsonValue(m_exposed_ports));
    }
    if (m_hostname_isSet) {
        obj.insert(QString("Hostname"), ::OpenAPI::toJsonValue(m_hostname));
    }
    if (m_image_isSet) {
        obj.insert(QString("Image"), ::OpenAPI::toJsonValue(m_image));
    }
    if (m_image_architecture_isSet) {
        obj.insert(QString("ImageArchitecture"), ::OpenAPI::toJsonValue(m_image_architecture));
    }
    if (m_labels.size() > 0) {
        obj.insert(QString("Labels"), ::OpenAPI::toJsonValue(m_labels));
    }
    if (m_memory_isSet) {
        obj.insert(QString("Memory"), ::OpenAPI::toJsonValue(m_memory));
    }
    if (m_memory_swap_isSet) {
        obj.insert(QString("MemorySwap"), ::OpenAPI::toJsonValue(m_memory_swap));
    }
    if (m_open_stdin_isSet) {
        obj.insert(QString("OpenStdin"), ::OpenAPI::toJsonValue(m_open_stdin));
    }
    if (m_port_specs_isSet) {
        obj.insert(QString("PortSpecs"), ::OpenAPI::toJsonValue(m_port_specs));
    }
    if (m_stdin_once_isSet) {
        obj.insert(QString("StdinOnce"), ::OpenAPI::toJsonValue(m_stdin_once));
    }
    if (m_tty_isSet) {
        obj.insert(QString("Tty"), ::OpenAPI::toJsonValue(m_tty));
    }
    if (m_user_isSet) {
        obj.insert(QString("User"), ::OpenAPI::toJsonValue(m_user));
    }
    if (m_vcpu_isSet) {
        obj.insert(QString("VCPU"), ::OpenAPI::toJsonValue(m_vcpu));
    }
    if (m_volumes_from_isSet) {
        obj.insert(QString("VolumesFrom"), ::OpenAPI::toJsonValue(m_volumes_from));
    }
    if (m_working_dir_isSet) {
        obj.insert(QString("WorkingDir"), ::OpenAPI::toJsonValue(m_working_dir));
    }
    return obj;
}

bool OAIContainerConfig::isArgsEscaped() const {
    return m_args_escaped;
}
void OAIContainerConfig::setArgsEscaped(const bool &args_escaped) {
    m_args_escaped = args_escaped;
    m_args_escaped_isSet = true;
}

bool OAIContainerConfig::is_args_escaped_Set() const{
    return m_args_escaped_isSet;
}

bool OAIContainerConfig::is_args_escaped_Valid() const{
    return m_args_escaped_isValid;
}

QString OAIContainerConfig::getAttachStderr() const {
    return m_attach_stderr;
}
void OAIContainerConfig::setAttachStderr(const QString &attach_stderr) {
    m_attach_stderr = attach_stderr;
    m_attach_stderr_isSet = true;
}

bool OAIContainerConfig::is_attach_stderr_Set() const{
    return m_attach_stderr_isSet;
}

bool OAIContainerConfig::is_attach_stderr_Valid() const{
    return m_attach_stderr_isValid;
}

QString OAIContainerConfig::getAttachStdin() const {
    return m_attach_stdin;
}
void OAIContainerConfig::setAttachStdin(const QString &attach_stdin) {
    m_attach_stdin = attach_stdin;
    m_attach_stdin_isSet = true;
}

bool OAIContainerConfig::is_attach_stdin_Set() const{
    return m_attach_stdin_isSet;
}

bool OAIContainerConfig::is_attach_stdin_Valid() const{
    return m_attach_stdin_isValid;
}

QString OAIContainerConfig::getAttachStdout() const {
    return m_attach_stdout;
}
void OAIContainerConfig::setAttachStdout(const QString &attach_stdout) {
    m_attach_stdout = attach_stdout;
    m_attach_stdout_isSet = true;
}

bool OAIContainerConfig::is_attach_stdout_Set() const{
    return m_attach_stdout_isSet;
}

bool OAIContainerConfig::is_attach_stdout_Valid() const{
    return m_attach_stdout_isValid;
}

QList<QString> OAIContainerConfig::getCmd() const {
    return m_cmd;
}
void OAIContainerConfig::setCmd(const QList<QString> &cmd) {
    m_cmd = cmd;
    m_cmd_isSet = true;
}

bool OAIContainerConfig::is_cmd_Set() const{
    return m_cmd_isSet;
}

bool OAIContainerConfig::is_cmd_Valid() const{
    return m_cmd_isValid;
}

QString OAIContainerConfig::getDomainname() const {
    return m_domainname;
}
void OAIContainerConfig::setDomainname(const QString &domainname) {
    m_domainname = domainname;
    m_domainname_isSet = true;
}

bool OAIContainerConfig::is_domainname_Set() const{
    return m_domainname_isSet;
}

bool OAIContainerConfig::is_domainname_Valid() const{
    return m_domainname_isValid;
}

QList<QString> OAIContainerConfig::getEnv() const {
    return m_env;
}
void OAIContainerConfig::setEnv(const QList<QString> &env) {
    m_env = env;
    m_env_isSet = true;
}

bool OAIContainerConfig::is_env_Set() const{
    return m_env_isSet;
}

bool OAIContainerConfig::is_env_Valid() const{
    return m_env_isValid;
}

QList<QString> OAIContainerConfig::getExposedPorts() const {
    return m_exposed_ports;
}
void OAIContainerConfig::setExposedPorts(const QList<QString> &exposed_ports) {
    m_exposed_ports = exposed_ports;
    m_exposed_ports_isSet = true;
}

bool OAIContainerConfig::is_exposed_ports_Set() const{
    return m_exposed_ports_isSet;
}

bool OAIContainerConfig::is_exposed_ports_Valid() const{
    return m_exposed_ports_isValid;
}

QString OAIContainerConfig::getHostname() const {
    return m_hostname;
}
void OAIContainerConfig::setHostname(const QString &hostname) {
    m_hostname = hostname;
    m_hostname_isSet = true;
}

bool OAIContainerConfig::is_hostname_Set() const{
    return m_hostname_isSet;
}

bool OAIContainerConfig::is_hostname_Valid() const{
    return m_hostname_isValid;
}

QString OAIContainerConfig::getImage() const {
    return m_image;
}
void OAIContainerConfig::setImage(const QString &image) {
    m_image = image;
    m_image_isSet = true;
}

bool OAIContainerConfig::is_image_Set() const{
    return m_image_isSet;
}

bool OAIContainerConfig::is_image_Valid() const{
    return m_image_isValid;
}

QString OAIContainerConfig::getImageArchitecture() const {
    return m_image_architecture;
}
void OAIContainerConfig::setImageArchitecture(const QString &image_architecture) {
    m_image_architecture = image_architecture;
    m_image_architecture_isSet = true;
}

bool OAIContainerConfig::is_image_architecture_Set() const{
    return m_image_architecture_isSet;
}

bool OAIContainerConfig::is_image_architecture_Valid() const{
    return m_image_architecture_isValid;
}

QList<QString> OAIContainerConfig::getLabels() const {
    return m_labels;
}
void OAIContainerConfig::setLabels(const QList<QString> &labels) {
    m_labels = labels;
    m_labels_isSet = true;
}

bool OAIContainerConfig::is_labels_Set() const{
    return m_labels_isSet;
}

bool OAIContainerConfig::is_labels_Valid() const{
    return m_labels_isValid;
}

qint32 OAIContainerConfig::getMemory() const {
    return m_memory;
}
void OAIContainerConfig::setMemory(const qint32 &memory) {
    m_memory = memory;
    m_memory_isSet = true;
}

bool OAIContainerConfig::is_memory_Set() const{
    return m_memory_isSet;
}

bool OAIContainerConfig::is_memory_Valid() const{
    return m_memory_isValid;
}

QString OAIContainerConfig::getMemorySwap() const {
    return m_memory_swap;
}
void OAIContainerConfig::setMemorySwap(const QString &memory_swap) {
    m_memory_swap = memory_swap;
    m_memory_swap_isSet = true;
}

bool OAIContainerConfig::is_memory_swap_Set() const{
    return m_memory_swap_isSet;
}

bool OAIContainerConfig::is_memory_swap_Valid() const{
    return m_memory_swap_isValid;
}

QString OAIContainerConfig::getOpenStdin() const {
    return m_open_stdin;
}
void OAIContainerConfig::setOpenStdin(const QString &open_stdin) {
    m_open_stdin = open_stdin;
    m_open_stdin_isSet = true;
}

bool OAIContainerConfig::is_open_stdin_Set() const{
    return m_open_stdin_isSet;
}

bool OAIContainerConfig::is_open_stdin_Valid() const{
    return m_open_stdin_isValid;
}

QString OAIContainerConfig::getPortSpecs() const {
    return m_port_specs;
}
void OAIContainerConfig::setPortSpecs(const QString &port_specs) {
    m_port_specs = port_specs;
    m_port_specs_isSet = true;
}

bool OAIContainerConfig::is_port_specs_Set() const{
    return m_port_specs_isSet;
}

bool OAIContainerConfig::is_port_specs_Valid() const{
    return m_port_specs_isValid;
}

QString OAIContainerConfig::getStdinOnce() const {
    return m_stdin_once;
}
void OAIContainerConfig::setStdinOnce(const QString &stdin_once) {
    m_stdin_once = stdin_once;
    m_stdin_once_isSet = true;
}

bool OAIContainerConfig::is_stdin_once_Set() const{
    return m_stdin_once_isSet;
}

bool OAIContainerConfig::is_stdin_once_Valid() const{
    return m_stdin_once_isValid;
}

QString OAIContainerConfig::getTty() const {
    return m_tty;
}
void OAIContainerConfig::setTty(const QString &tty) {
    m_tty = tty;
    m_tty_isSet = true;
}

bool OAIContainerConfig::is_tty_Set() const{
    return m_tty_isSet;
}

bool OAIContainerConfig::is_tty_Valid() const{
    return m_tty_isValid;
}

QString OAIContainerConfig::getUser() const {
    return m_user;
}
void OAIContainerConfig::setUser(const QString &user) {
    m_user = user;
    m_user_isSet = true;
}

bool OAIContainerConfig::is_user_Set() const{
    return m_user_isSet;
}

bool OAIContainerConfig::is_user_Valid() const{
    return m_user_isValid;
}

qint32 OAIContainerConfig::getVcpu() const {
    return m_vcpu;
}
void OAIContainerConfig::setVcpu(const qint32 &vcpu) {
    m_vcpu = vcpu;
    m_vcpu_isSet = true;
}

bool OAIContainerConfig::is_vcpu_Set() const{
    return m_vcpu_isSet;
}

bool OAIContainerConfig::is_vcpu_Valid() const{
    return m_vcpu_isValid;
}

QString OAIContainerConfig::getVolumesFrom() const {
    return m_volumes_from;
}
void OAIContainerConfig::setVolumesFrom(const QString &volumes_from) {
    m_volumes_from = volumes_from;
    m_volumes_from_isSet = true;
}

bool OAIContainerConfig::is_volumes_from_Set() const{
    return m_volumes_from_isSet;
}

bool OAIContainerConfig::is_volumes_from_Valid() const{
    return m_volumes_from_isValid;
}

QString OAIContainerConfig::getWorkingDir() const {
    return m_working_dir;
}
void OAIContainerConfig::setWorkingDir(const QString &working_dir) {
    m_working_dir = working_dir;
    m_working_dir_isSet = true;
}

bool OAIContainerConfig::is_working_dir_Set() const{
    return m_working_dir_isSet;
}

bool OAIContainerConfig::is_working_dir_Valid() const{
    return m_working_dir_isValid;
}

bool OAIContainerConfig::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_args_escaped_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_attach_stderr_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_attach_stdin_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_attach_stdout_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_cmd.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_domainname_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_env.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_exposed_ports.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_hostname_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_image_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_image_architecture_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_labels.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_memory_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_memory_swap_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_open_stdin_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_port_specs_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_stdin_once_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tty_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_user_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_vcpu_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_volumes_from_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_working_dir_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIContainerConfig::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
