/**
 * IBM Containers API
 * Containers are virtual software objects that include all the elements that an app needs to run. A container has the benefits of resource isolation and allocation but is more portable and efficient than, for example, a virtual machine.   This documentation describes the IBM Containers API, which is based on the Docker Remote API. The API provides endpoints that you can use to create and manage your single containers and container groups in Bluemix. Endpoints are summarized under the following tags:   - **Authentication**: Retrieve and refresh your TLS certificates.  - **Private Docker images registry**: Create your own private Docker images registry in Bluemix by setting a namespace for your organization.  - **Images**: View, build, and push your images to your private Bluemix registry so you can use them with IBM Containers. You can also scan your container images with the Vulnerability Advisor against standard policies set by the organization manager and a database of known Ubuntu issues.  - **Single Containers**: Create and manage single containers in Bluemix. Use a single container to implement short-lived processes or to run simple tests as you develop an app or service. To make your single container available from the internet, review the `Public IP addresses` endpoints.  - **Container Groups**: Create and manage your container groups in Bluemix. A container group consists of multiple single containers that are all created from the same container image and as a consequence are configured in the same way. Container groups offer further options at no cost to make your app highly available. These options include in-built load balancing, auto-recovery of unhealthy container instances, and auto-scaling of container instances based on CPU and memory usage. Map a public route to your container group to make your app accessible from the internet.   - **Public IP addresses**: Use these endpoints to request public IP addresses for your space. You can bind this IP address to your container to make your container accessible from the internet.  - **File shares**: Create, list and delete file shares in a space. A file share is a NFS storage system that hosts Docker volumes.   - **Volumes**: Create and manage container volumes in your space to persist the data of your containers.      Each API request requires an HTTP header that includes the 'X-Auth-Token’ and 'X-Auth-Project-Id’ parameter.   - **X-Auth-Token**: The JSON web token (JWT) that you receive when logging into the Bluemix platform. It allows you to use the IBM Containers REST API, access services, and resources. Run `cf oauth-token` to retrieve your access token information. - **X-Auth-Project-Id**: The unique ID of your organization space where you want to create or work with your containers. Run `cf space <space_name> --guid`, where `<space_name>` is the name of your space, to retrieve your space ID.    For further information about how containers work in the IBM Containers service, review the documentation under https://new-console.ng.bluemix.net/docs/containers/container_index.html. 
 *
 * The version of the OpenAPI document: 3.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIContainersVersionGetInfo.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIContainersVersionGetInfo::OAIContainersVersionGetInfo(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIContainersVersionGetInfo::OAIContainersVersionGetInfo() {
    this->initializeModel();
}

OAIContainersVersionGetInfo::~OAIContainersVersionGetInfo() {}

void OAIContainersVersionGetInfo::initializeModel() {

    m_api_version_isSet = false;
    m_api_version_isValid = false;

    m_arch_isSet = false;
    m_arch_isValid = false;

    m_build_detail_isSet = false;
    m_build_detail_isValid = false;

    m_build_id_isSet = false;
    m_build_id_isValid = false;

    m_build_number_isSet = false;
    m_build_number_isValid = false;

    m_build_time_isSet = false;
    m_build_time_isValid = false;

    m_git_commit_isSet = false;
    m_git_commit_isValid = false;

    m_go_version_isSet = false;
    m_go_version_isValid = false;

    m_kernel_version_isSet = false;
    m_kernel_version_isValid = false;

    m_os_isSet = false;
    m_os_isValid = false;

    m_version_isSet = false;
    m_version_isValid = false;
}

void OAIContainersVersionGetInfo::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIContainersVersionGetInfo::fromJsonObject(QJsonObject json) {

    m_api_version_isValid = ::OpenAPI::fromJsonValue(m_api_version, json[QString("ApiVersion")]);
    m_api_version_isSet = !json[QString("ApiVersion")].isNull() && m_api_version_isValid;

    m_arch_isValid = ::OpenAPI::fromJsonValue(m_arch, json[QString("Arch")]);
    m_arch_isSet = !json[QString("Arch")].isNull() && m_arch_isValid;

    m_build_detail_isValid = ::OpenAPI::fromJsonValue(m_build_detail, json[QString("BuildDetail")]);
    m_build_detail_isSet = !json[QString("BuildDetail")].isNull() && m_build_detail_isValid;

    m_build_id_isValid = ::OpenAPI::fromJsonValue(m_build_id, json[QString("BuildID")]);
    m_build_id_isSet = !json[QString("BuildID")].isNull() && m_build_id_isValid;

    m_build_number_isValid = ::OpenAPI::fromJsonValue(m_build_number, json[QString("BuildNumber")]);
    m_build_number_isSet = !json[QString("BuildNumber")].isNull() && m_build_number_isValid;

    m_build_time_isValid = ::OpenAPI::fromJsonValue(m_build_time, json[QString("BuildTime")]);
    m_build_time_isSet = !json[QString("BuildTime")].isNull() && m_build_time_isValid;

    m_git_commit_isValid = ::OpenAPI::fromJsonValue(m_git_commit, json[QString("GitCommit")]);
    m_git_commit_isSet = !json[QString("GitCommit")].isNull() && m_git_commit_isValid;

    m_go_version_isValid = ::OpenAPI::fromJsonValue(m_go_version, json[QString("GoVersion")]);
    m_go_version_isSet = !json[QString("GoVersion")].isNull() && m_go_version_isValid;

    m_kernel_version_isValid = ::OpenAPI::fromJsonValue(m_kernel_version, json[QString("KernelVersion")]);
    m_kernel_version_isSet = !json[QString("KernelVersion")].isNull() && m_kernel_version_isValid;

    m_os_isValid = ::OpenAPI::fromJsonValue(m_os, json[QString("Os")]);
    m_os_isSet = !json[QString("Os")].isNull() && m_os_isValid;

    m_version_isValid = ::OpenAPI::fromJsonValue(m_version, json[QString("Version")]);
    m_version_isSet = !json[QString("Version")].isNull() && m_version_isValid;
}

QString OAIContainersVersionGetInfo::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIContainersVersionGetInfo::asJsonObject() const {
    QJsonObject obj;
    if (m_api_version_isSet) {
        obj.insert(QString("ApiVersion"), ::OpenAPI::toJsonValue(m_api_version));
    }
    if (m_arch_isSet) {
        obj.insert(QString("Arch"), ::OpenAPI::toJsonValue(m_arch));
    }
    if (m_build_detail.isSet()) {
        obj.insert(QString("BuildDetail"), ::OpenAPI::toJsonValue(m_build_detail));
    }
    if (m_build_id_isSet) {
        obj.insert(QString("BuildID"), ::OpenAPI::toJsonValue(m_build_id));
    }
    if (m_build_number_isSet) {
        obj.insert(QString("BuildNumber"), ::OpenAPI::toJsonValue(m_build_number));
    }
    if (m_build_time_isSet) {
        obj.insert(QString("BuildTime"), ::OpenAPI::toJsonValue(m_build_time));
    }
    if (m_git_commit_isSet) {
        obj.insert(QString("GitCommit"), ::OpenAPI::toJsonValue(m_git_commit));
    }
    if (m_go_version_isSet) {
        obj.insert(QString("GoVersion"), ::OpenAPI::toJsonValue(m_go_version));
    }
    if (m_kernel_version_isSet) {
        obj.insert(QString("KernelVersion"), ::OpenAPI::toJsonValue(m_kernel_version));
    }
    if (m_os_isSet) {
        obj.insert(QString("Os"), ::OpenAPI::toJsonValue(m_os));
    }
    if (m_version_isSet) {
        obj.insert(QString("Version"), ::OpenAPI::toJsonValue(m_version));
    }
    return obj;
}

QString OAIContainersVersionGetInfo::getApiVersion() const {
    return m_api_version;
}
void OAIContainersVersionGetInfo::setApiVersion(const QString &api_version) {
    m_api_version = api_version;
    m_api_version_isSet = true;
}

bool OAIContainersVersionGetInfo::is_api_version_Set() const{
    return m_api_version_isSet;
}

bool OAIContainersVersionGetInfo::is_api_version_Valid() const{
    return m_api_version_isValid;
}

QString OAIContainersVersionGetInfo::getArch() const {
    return m_arch;
}
void OAIContainersVersionGetInfo::setArch(const QString &arch) {
    m_arch = arch;
    m_arch_isSet = true;
}

bool OAIContainersVersionGetInfo::is_arch_Set() const{
    return m_arch_isSet;
}

bool OAIContainersVersionGetInfo::is_arch_Valid() const{
    return m_arch_isValid;
}

OAIContainersVersionGetInfo_BuildDetail OAIContainersVersionGetInfo::getBuildDetail() const {
    return m_build_detail;
}
void OAIContainersVersionGetInfo::setBuildDetail(const OAIContainersVersionGetInfo_BuildDetail &build_detail) {
    m_build_detail = build_detail;
    m_build_detail_isSet = true;
}

bool OAIContainersVersionGetInfo::is_build_detail_Set() const{
    return m_build_detail_isSet;
}

bool OAIContainersVersionGetInfo::is_build_detail_Valid() const{
    return m_build_detail_isValid;
}

QString OAIContainersVersionGetInfo::getBuildId() const {
    return m_build_id;
}
void OAIContainersVersionGetInfo::setBuildId(const QString &build_id) {
    m_build_id = build_id;
    m_build_id_isSet = true;
}

bool OAIContainersVersionGetInfo::is_build_id_Set() const{
    return m_build_id_isSet;
}

bool OAIContainersVersionGetInfo::is_build_id_Valid() const{
    return m_build_id_isValid;
}

QString OAIContainersVersionGetInfo::getBuildNumber() const {
    return m_build_number;
}
void OAIContainersVersionGetInfo::setBuildNumber(const QString &build_number) {
    m_build_number = build_number;
    m_build_number_isSet = true;
}

bool OAIContainersVersionGetInfo::is_build_number_Set() const{
    return m_build_number_isSet;
}

bool OAIContainersVersionGetInfo::is_build_number_Valid() const{
    return m_build_number_isValid;
}

QString OAIContainersVersionGetInfo::getBuildTime() const {
    return m_build_time;
}
void OAIContainersVersionGetInfo::setBuildTime(const QString &build_time) {
    m_build_time = build_time;
    m_build_time_isSet = true;
}

bool OAIContainersVersionGetInfo::is_build_time_Set() const{
    return m_build_time_isSet;
}

bool OAIContainersVersionGetInfo::is_build_time_Valid() const{
    return m_build_time_isValid;
}

QString OAIContainersVersionGetInfo::getGitCommit() const {
    return m_git_commit;
}
void OAIContainersVersionGetInfo::setGitCommit(const QString &git_commit) {
    m_git_commit = git_commit;
    m_git_commit_isSet = true;
}

bool OAIContainersVersionGetInfo::is_git_commit_Set() const{
    return m_git_commit_isSet;
}

bool OAIContainersVersionGetInfo::is_git_commit_Valid() const{
    return m_git_commit_isValid;
}

QString OAIContainersVersionGetInfo::getGoVersion() const {
    return m_go_version;
}
void OAIContainersVersionGetInfo::setGoVersion(const QString &go_version) {
    m_go_version = go_version;
    m_go_version_isSet = true;
}

bool OAIContainersVersionGetInfo::is_go_version_Set() const{
    return m_go_version_isSet;
}

bool OAIContainersVersionGetInfo::is_go_version_Valid() const{
    return m_go_version_isValid;
}

QString OAIContainersVersionGetInfo::getKernelVersion() const {
    return m_kernel_version;
}
void OAIContainersVersionGetInfo::setKernelVersion(const QString &kernel_version) {
    m_kernel_version = kernel_version;
    m_kernel_version_isSet = true;
}

bool OAIContainersVersionGetInfo::is_kernel_version_Set() const{
    return m_kernel_version_isSet;
}

bool OAIContainersVersionGetInfo::is_kernel_version_Valid() const{
    return m_kernel_version_isValid;
}

QString OAIContainersVersionGetInfo::getOs() const {
    return m_os;
}
void OAIContainersVersionGetInfo::setOs(const QString &os) {
    m_os = os;
    m_os_isSet = true;
}

bool OAIContainersVersionGetInfo::is_os_Set() const{
    return m_os_isSet;
}

bool OAIContainersVersionGetInfo::is_os_Valid() const{
    return m_os_isValid;
}

QString OAIContainersVersionGetInfo::getVersion() const {
    return m_version;
}
void OAIContainersVersionGetInfo::setVersion(const QString &version) {
    m_version = version;
    m_version_isSet = true;
}

bool OAIContainersVersionGetInfo::is_version_Set() const{
    return m_version_isSet;
}

bool OAIContainersVersionGetInfo::is_version_Valid() const{
    return m_version_isValid;
}

bool OAIContainersVersionGetInfo::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_api_version_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_arch_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_build_detail.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_build_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_build_number_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_build_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_git_commit_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_go_version_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_kernel_version_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_os_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_version_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIContainersVersionGetInfo::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
