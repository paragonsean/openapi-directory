# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ContainersUsageInfoLimits(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, containers: int=None, floating_ips: int=None, memory_mb: int=None, vcpu: int=None):
        """ContainersUsageInfoLimits - a model defined in OpenAPI

        :param containers: The containers of this ContainersUsageInfoLimits.
        :param floating_ips: The floating_ips of this ContainersUsageInfoLimits.
        :param memory_mb: The memory_mb of this ContainersUsageInfoLimits.
        :param vcpu: The vcpu of this ContainersUsageInfoLimits.
        """
        self.openapi_types = {
            'containers': int,
            'floating_ips': int,
            'memory_mb': int,
            'vcpu': int
        }

        self.attribute_map = {
            'containers': 'containers',
            'floating_ips': 'floating_ips',
            'memory_mb': 'memory_MB',
            'vcpu': 'vcpu'
        }

        self._containers = containers
        self._floating_ips = floating_ips
        self._memory_mb = memory_mb
        self._vcpu = vcpu

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ContainersUsageInfoLimits':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ContainersUsageInfo_Limits of this ContainersUsageInfoLimits.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def containers(self):
        """Gets the containers of this ContainersUsageInfoLimits.

        The number of containers that can be created in the space. If -1 is returned, then an unlimited number of containers can be created. The number however is counted towards and limited by the container memory. 

        :return: The containers of this ContainersUsageInfoLimits.
        :rtype: int
        """
        return self._containers

    @containers.setter
    def containers(self, containers):
        """Sets the containers of this ContainersUsageInfoLimits.

        The number of containers that can be created in the space. If -1 is returned, then an unlimited number of containers can be created. The number however is counted towards and limited by the container memory. 

        :param containers: The containers of this ContainersUsageInfoLimits.
        :type containers: int
        """

        self._containers = containers

    @property
    def floating_ips(self):
        """Gets the floating_ips of this ContainersUsageInfoLimits.

        The number of public IP addresses that can be allocated to the space.

        :return: The floating_ips of this ContainersUsageInfoLimits.
        :rtype: int
        """
        return self._floating_ips

    @floating_ips.setter
    def floating_ips(self, floating_ips):
        """Sets the floating_ips of this ContainersUsageInfoLimits.

        The number of public IP addresses that can be allocated to the space.

        :param floating_ips: The floating_ips of this ContainersUsageInfoLimits.
        :type floating_ips: int
        """

        self._floating_ips = floating_ips

    @property
    def memory_mb(self):
        """Gets the memory_mb of this ContainersUsageInfoLimits.

        The amount of container memory that can be used in the space in megabyte.

        :return: The memory_mb of this ContainersUsageInfoLimits.
        :rtype: int
        """
        return self._memory_mb

    @memory_mb.setter
    def memory_mb(self, memory_mb):
        """Sets the memory_mb of this ContainersUsageInfoLimits.

        The amount of container memory that can be used in the space in megabyte.

        :param memory_mb: The memory_mb of this ContainersUsageInfoLimits.
        :type memory_mb: int
        """

        self._memory_mb = memory_mb

    @property
    def vcpu(self):
        """Gets the vcpu of this ContainersUsageInfoLimits.

        The number of virtual CPUs that are assigned to the space.

        :return: The vcpu of this ContainersUsageInfoLimits.
        :rtype: int
        """
        return self._vcpu

    @vcpu.setter
    def vcpu(self, vcpu):
        """Sets the vcpu of this ContainersUsageInfoLimits.

        The number of virtual CPUs that are assigned to the space.

        :param vcpu: The vcpu of this ContainersUsageInfoLimits.
        :type vcpu: int
        """

        self._vcpu = vcpu
