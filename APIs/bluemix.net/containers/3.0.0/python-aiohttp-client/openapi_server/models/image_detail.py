# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.container_config import ContainerConfig
from openapi_server.models.image_detail_config import ImageDetailConfig
from openapi_server import util


class ImageDetail(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, architecture: str=None, config: ImageDetailConfig=None, container: str=None, container_config: ContainerConfig=None, created: str=None, docker_version: str=None, id: str=None, os: str=None, parent: str=None, size: int=None, tag: str=None, throwaway: str=None, virtual_size: int=None):
        """ImageDetail - a model defined in OpenAPI

        :param architecture: The architecture of this ImageDetail.
        :param config: The config of this ImageDetail.
        :param container: The container of this ImageDetail.
        :param container_config: The container_config of this ImageDetail.
        :param created: The created of this ImageDetail.
        :param docker_version: The docker_version of this ImageDetail.
        :param id: The id of this ImageDetail.
        :param os: The os of this ImageDetail.
        :param parent: The parent of this ImageDetail.
        :param size: The size of this ImageDetail.
        :param tag: The tag of this ImageDetail.
        :param throwaway: The throwaway of this ImageDetail.
        :param virtual_size: The virtual_size of this ImageDetail.
        """
        self.openapi_types = {
            'architecture': str,
            'config': ImageDetailConfig,
            'container': str,
            'container_config': ContainerConfig,
            'created': str,
            'docker_version': str,
            'id': str,
            'os': str,
            'parent': str,
            'size': int,
            'tag': str,
            'throwaway': str,
            'virtual_size': int
        }

        self.attribute_map = {
            'architecture': 'Architecture',
            'config': 'Config',
            'container': 'Container',
            'container_config': 'ContainerConfig',
            'created': 'Created',
            'docker_version': 'DockerVersion',
            'id': 'Id',
            'os': 'Os',
            'parent': 'Parent',
            'size': 'Size',
            'tag': 'Tag',
            'throwaway': 'Throwaway',
            'virtual_size': 'VirtualSize'
        }

        self._architecture = architecture
        self._config = config
        self._container = container
        self._container_config = container_config
        self._created = created
        self._docker_version = docker_version
        self._id = id
        self._os = os
        self._parent = parent
        self._size = size
        self._tag = tag
        self._throwaway = throwaway
        self._virtual_size = virtual_size

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ImageDetail':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ImageDetail of this ImageDetail.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def architecture(self):
        """Gets the architecture of this ImageDetail.

        The hardware architecture for which the image was built for. The architecture can either be Intel (amd64) or Power (ppc64le). 

        :return: The architecture of this ImageDetail.
        :rtype: str
        """
        return self._architecture

    @architecture.setter
    def architecture(self, architecture):
        """Sets the architecture of this ImageDetail.

        The hardware architecture for which the image was built for. The architecture can either be Intel (amd64) or Power (ppc64le). 

        :param architecture: The architecture of this ImageDetail.
        :type architecture: str
        """

        self._architecture = architecture

    @property
    def config(self):
        """Gets the config of this ImageDetail.


        :return: The config of this ImageDetail.
        :rtype: ImageDetailConfig
        """
        return self._config

    @config.setter
    def config(self, config):
        """Sets the config of this ImageDetail.


        :param config: The config of this ImageDetail.
        :type config: ImageDetailConfig
        """

        self._config = config

    @property
    def container(self):
        """Gets the container of this ImageDetail.

        ???

        :return: The container of this ImageDetail.
        :rtype: str
        """
        return self._container

    @container.setter
    def container(self, container):
        """Sets the container of this ImageDetail.

        ???

        :param container: The container of this ImageDetail.
        :type container: str
        """

        self._container = container

    @property
    def container_config(self):
        """Gets the container_config of this ImageDetail.


        :return: The container_config of this ImageDetail.
        :rtype: ContainerConfig
        """
        return self._container_config

    @container_config.setter
    def container_config(self, container_config):
        """Sets the container_config of this ImageDetail.


        :param container_config: The container_config of this ImageDetail.
        :type container_config: ContainerConfig
        """

        self._container_config = container_config

    @property
    def created(self):
        """Gets the created of this ImageDetail.

        The time when the image was created.

        :return: The created of this ImageDetail.
        :rtype: str
        """
        return self._created

    @created.setter
    def created(self, created):
        """Sets the created of this ImageDetail.

        The time when the image was created.

        :param created: The created of this ImageDetail.
        :type created: str
        """

        self._created = created

    @property
    def docker_version(self):
        """Gets the docker_version of this ImageDetail.

        ???

        :return: The docker_version of this ImageDetail.
        :rtype: str
        """
        return self._docker_version

    @docker_version.setter
    def docker_version(self, docker_version):
        """Sets the docker_version of this ImageDetail.

        ???

        :param docker_version: The docker_version of this ImageDetail.
        :type docker_version: str
        """

        self._docker_version = docker_version

    @property
    def id(self):
        """Gets the id of this ImageDetail.

        Unique ID of the image that you inspected. 

        :return: The id of this ImageDetail.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this ImageDetail.

        Unique ID of the image that you inspected. 

        :param id: The id of this ImageDetail.
        :type id: str
        """

        self._id = id

    @property
    def os(self):
        """Gets the os of this ImageDetail.

        ???

        :return: The os of this ImageDetail.
        :rtype: str
        """
        return self._os

    @os.setter
    def os(self, os):
        """Sets the os of this ImageDetail.

        ???

        :param os: The os of this ImageDetail.
        :type os: str
        """

        self._os = os

    @property
    def parent(self):
        """Gets the parent of this ImageDetail.

        The ID of the parent image that was used to build this image.

        :return: The parent of this ImageDetail.
        :rtype: str
        """
        return self._parent

    @parent.setter
    def parent(self, parent):
        """Sets the parent of this ImageDetail.

        The ID of the parent image that was used to build this image.

        :param parent: The parent of this ImageDetail.
        :type parent: str
        """

        self._parent = parent

    @property
    def size(self):
        """Gets the size of this ImageDetail.

        The real size of the image. 

        :return: The size of this ImageDetail.
        :rtype: int
        """
        return self._size

    @size.setter
    def size(self, size):
        """Sets the size of this ImageDetail.

        The real size of the image. 

        :param size: The size of this ImageDetail.
        :type size: int
        """

        self._size = size

    @property
    def tag(self):
        """Gets the tag of this ImageDetail.

        The version of the image 

        :return: The tag of this ImageDetail.
        :rtype: str
        """
        return self._tag

    @tag.setter
    def tag(self, tag):
        """Sets the tag of this ImageDetail.

        The version of the image 

        :param tag: The tag of this ImageDetail.
        :type tag: str
        """

        self._tag = tag

    @property
    def throwaway(self):
        """Gets the throwaway of this ImageDetail.

        ???

        :return: The throwaway of this ImageDetail.
        :rtype: str
        """
        return self._throwaway

    @throwaway.setter
    def throwaway(self, throwaway):
        """Sets the throwaway of this ImageDetail.

        ???

        :param throwaway: The throwaway of this ImageDetail.
        :type throwaway: str
        """

        self._throwaway = throwaway

    @property
    def virtual_size(self):
        """Gets the virtual_size of this ImageDetail.

        The virtual size of the image.

        :return: The virtual_size of this ImageDetail.
        :rtype: int
        """
        return self._virtual_size

    @virtual_size.setter
    def virtual_size(self, virtual_size):
        """Sets the virtual_size of this ImageDetail.

        The virtual size of the image.

        :param virtual_size: The virtual_size of this ImageDetail.
        :type virtual_size: int
        """

        self._virtual_size = virtual_size
