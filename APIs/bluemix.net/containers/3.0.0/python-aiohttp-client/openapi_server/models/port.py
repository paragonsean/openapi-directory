# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class Port(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, ip: str=None, private_port: str=None, public_port: str=None, type: str=None):
        """Port - a model defined in OpenAPI

        :param ip: The ip of this Port.
        :param private_port: The private_port of this Port.
        :param public_port: The public_port of this Port.
        :param type: The type of this Port.
        """
        self.openapi_types = {
            'ip': str,
            'private_port': str,
            'public_port': str,
            'type': str
        }

        self.attribute_map = {
            'ip': 'IP',
            'private_port': 'PrivatePort',
            'public_port': 'PublicPort',
            'type': 'Type'
        }

        self._ip = ip
        self._private_port = private_port
        self._public_port = public_port
        self._type = type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Port':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Port of this Port.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def ip(self):
        """Gets the ip of this Port.

        Public IP address that was bound to the container in IPv4 format.

        :return: The ip of this Port.
        :rtype: str
        """
        return self._ip

    @ip.setter
    def ip(self, ip):
        """Sets the ip of this Port.

        Public IP address that was bound to the container in IPv4 format.

        :param ip: The ip of this Port.
        :type ip: str
        """

        self._ip = ip

    @property
    def private_port(self):
        """Gets the private_port of this Port.

        The private port of the container on which the container listens during run time.

        :return: The private_port of this Port.
        :rtype: str
        """
        return self._private_port

    @private_port.setter
    def private_port(self, private_port):
        """Sets the private_port of this Port.

        The private port of the container on which the container listens during run time.

        :param private_port: The private_port of this Port.
        :type private_port: str
        """

        self._private_port = private_port

    @property
    def public_port(self):
        """Gets the public_port of this Port.

        The public port that was exposed during container creation. When a public port is exposed, a public IP address can be bound to the container which makes the container accessible from the internet.

        :return: The public_port of this Port.
        :rtype: str
        """
        return self._public_port

    @public_port.setter
    def public_port(self, public_port):
        """Sets the public_port of this Port.

        The public port that was exposed during container creation. When a public port is exposed, a public IP address can be bound to the container which makes the container accessible from the internet.

        :param public_port: The public_port of this Port.
        :type public_port: str
        """

        self._public_port = public_port

    @property
    def type(self):
        """Gets the type of this Port.

        The type of IP protocol that is used for the port. It can either be `udp` or `tcp`.  

        :return: The type of this Port.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this Port.

        The type of IP protocol that is used for the port. It can either be `udp` or `tcp`.  

        :param type: The type of this Port.
        :type type: str
        """

        self._type = type
