# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class Network(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, aliases: str=None, endpoint_id: str=None, gateway: str=None, global_ipv6_address: str=None, global_ipv6_prefix_len: int=None, ipam_config: str=None, ip_prefix_len: str=None, ipv6_gateway: str=None, links: str=None, mac_address: str=None, network_id: str=None):
        """Network - a model defined in OpenAPI

        :param aliases: The aliases of this Network.
        :param endpoint_id: The endpoint_id of this Network.
        :param gateway: The gateway of this Network.
        :param global_ipv6_address: The global_ipv6_address of this Network.
        :param global_ipv6_prefix_len: The global_ipv6_prefix_len of this Network.
        :param ipam_config: The ipam_config of this Network.
        :param ip_prefix_len: The ip_prefix_len of this Network.
        :param ipv6_gateway: The ipv6_gateway of this Network.
        :param links: The links of this Network.
        :param mac_address: The mac_address of this Network.
        :param network_id: The network_id of this Network.
        """
        self.openapi_types = {
            'aliases': str,
            'endpoint_id': str,
            'gateway': str,
            'global_ipv6_address': str,
            'global_ipv6_prefix_len': int,
            'ipam_config': str,
            'ip_prefix_len': str,
            'ipv6_gateway': str,
            'links': str,
            'mac_address': str,
            'network_id': str
        }

        self.attribute_map = {
            'aliases': 'Aliases',
            'endpoint_id': 'EndpointID',
            'gateway': 'Gateway',
            'global_ipv6_address': 'GlobalIPv6Address',
            'global_ipv6_prefix_len': 'GlobalIPv6PrefixLen',
            'ipam_config': 'IPAMConfig',
            'ip_prefix_len': 'IPPrefixLen',
            'ipv6_gateway': 'IPv6Gateway',
            'links': 'Links',
            'mac_address': 'MacAddress',
            'network_id': 'NetworkID'
        }

        self._aliases = aliases
        self._endpoint_id = endpoint_id
        self._gateway = gateway
        self._global_ipv6_address = global_ipv6_address
        self._global_ipv6_prefix_len = global_ipv6_prefix_len
        self._ipam_config = ipam_config
        self._ip_prefix_len = ip_prefix_len
        self._ipv6_gateway = ipv6_gateway
        self._links = links
        self._mac_address = mac_address
        self._network_id = network_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Network':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Network of this Network.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def aliases(self):
        """Gets the aliases of this Network.

        Alternative name of the private container network the container is connected to.

        :return: The aliases of this Network.
        :rtype: str
        """
        return self._aliases

    @aliases.setter
    def aliases(self, aliases):
        """Sets the aliases of this Network.

        Alternative name of the private container network the container is connected to.

        :param aliases: The aliases of this Network.
        :type aliases: str
        """

        self._aliases = aliases

    @property
    def endpoint_id(self):
        """Gets the endpoint_id of this Network.

        Unique ID representing a container.

        :return: The endpoint_id of this Network.
        :rtype: str
        """
        return self._endpoint_id

    @endpoint_id.setter
    def endpoint_id(self, endpoint_id):
        """Sets the endpoint_id of this Network.

        Unique ID representing a container.

        :param endpoint_id: The endpoint_id of this Network.
        :type endpoint_id: str
        """

        self._endpoint_id = endpoint_id

    @property
    def gateway(self):
        """Gets the gateway of this Network.

        The private IP address of the network gateway in IPv4 format.

        :return: The gateway of this Network.
        :rtype: str
        """
        return self._gateway

    @gateway.setter
    def gateway(self, gateway):
        """Sets the gateway of this Network.

        The private IP address of the network gateway in IPv4 format.

        :param gateway: The gateway of this Network.
        :type gateway: str
        """

        self._gateway = gateway

    @property
    def global_ipv6_address(self):
        """Gets the global_ipv6_address of this Network.

        Private IP address of the container in IPv6 format. IBM Containers only supports IPv4 format. This attribute is returned as empty.

        :return: The global_ipv6_address of this Network.
        :rtype: str
        """
        return self._global_ipv6_address

    @global_ipv6_address.setter
    def global_ipv6_address(self, global_ipv6_address):
        """Sets the global_ipv6_address of this Network.

        Private IP address of the container in IPv6 format. IBM Containers only supports IPv4 format. This attribute is returned as empty.

        :param global_ipv6_address: The global_ipv6_address of this Network.
        :type global_ipv6_address: str
        """

        self._global_ipv6_address = global_ipv6_address

    @property
    def global_ipv6_prefix_len(self):
        """Gets the global_ipv6_prefix_len of this Network.

        Not supported by IBM Containers, empty string.

        :return: The global_ipv6_prefix_len of this Network.
        :rtype: int
        """
        return self._global_ipv6_prefix_len

    @global_ipv6_prefix_len.setter
    def global_ipv6_prefix_len(self, global_ipv6_prefix_len):
        """Sets the global_ipv6_prefix_len of this Network.

        Not supported by IBM Containers, empty string.

        :param global_ipv6_prefix_len: The global_ipv6_prefix_len of this Network.
        :type global_ipv6_prefix_len: int
        """

        self._global_ipv6_prefix_len = global_ipv6_prefix_len

    @property
    def ipam_config(self):
        """Gets the ipam_config of this Network.

        Specific configurations for the network driver.

        :return: The ipam_config of this Network.
        :rtype: str
        """
        return self._ipam_config

    @ipam_config.setter
    def ipam_config(self, ipam_config):
        """Sets the ipam_config of this Network.

        Specific configurations for the network driver.

        :param ipam_config: The ipam_config of this Network.
        :type ipam_config: str
        """

        self._ipam_config = ipam_config

    @property
    def ip_prefix_len(self):
        """Gets the ip_prefix_len of this Network.

        The prefix of the subnet in the private container network. The prefix indicates that 16 bits out of 32 bits are used to address the network. As every IPv4 IP adress consists of 32 bits, the last 16 bits are used to assign private IP addresses to the container. 

        :return: The ip_prefix_len of this Network.
        :rtype: str
        """
        return self._ip_prefix_len

    @ip_prefix_len.setter
    def ip_prefix_len(self, ip_prefix_len):
        """Sets the ip_prefix_len of this Network.

        The prefix of the subnet in the private container network. The prefix indicates that 16 bits out of 32 bits are used to address the network. As every IPv4 IP adress consists of 32 bits, the last 16 bits are used to assign private IP addresses to the container. 

        :param ip_prefix_len: The ip_prefix_len of this Network.
        :type ip_prefix_len: str
        """

        self._ip_prefix_len = ip_prefix_len

    @property
    def ipv6_gateway(self):
        """Gets the ipv6_gateway of this Network.

        The private IP address of the network gateway in IPv6 format. IBM Containers only supports IPv4 format. This attribute is returned as empty.

        :return: The ipv6_gateway of this Network.
        :rtype: str
        """
        return self._ipv6_gateway

    @ipv6_gateway.setter
    def ipv6_gateway(self, ipv6_gateway):
        """Sets the ipv6_gateway of this Network.

        The private IP address of the network gateway in IPv6 format. IBM Containers only supports IPv4 format. This attribute is returned as empty.

        :param ipv6_gateway: The ipv6_gateway of this Network.
        :type ipv6_gateway: str
        """

        self._ipv6_gateway = ipv6_gateway

    @property
    def links(self):
        """Gets the links of this Network.

        List of container names that are linked to the container. 

        :return: The links of this Network.
        :rtype: str
        """
        return self._links

    @links.setter
    def links(self, links):
        """Sets the links of this Network.

        List of container names that are linked to the container. 

        :param links: The links of this Network.
        :type links: str
        """

        self._links = links

    @property
    def mac_address(self):
        """Gets the mac_address of this Network.

        The MAC address that is assigned to the container.

        :return: The mac_address of this Network.
        :rtype: str
        """
        return self._mac_address

    @mac_address.setter
    def mac_address(self, mac_address):
        """Sets the mac_address of this Network.

        The MAC address that is assigned to the container.

        :param mac_address: The mac_address of this Network.
        :type mac_address: str
        """

        self._mac_address = mac_address

    @property
    def network_id(self):
        """Gets the network_id of this Network.

        Unique identifier representing the private container network.

        :return: The network_id of this Network.
        :rtype: str
        """
        return self._network_id

    @network_id.setter
    def network_id(self, network_id):
        """Sets the network_id of this Network.

        Unique identifier representing the private container network.

        :param network_id: The network_id of this Network.
        :type network_id: str
        """

        self._network_id = network_id
