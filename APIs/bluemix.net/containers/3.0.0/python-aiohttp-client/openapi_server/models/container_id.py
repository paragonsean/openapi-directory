# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ContainerId(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, id: str=None, flavor_id: int=None, mem: int=None, vcpu: int=None):
        """ContainerId - a model defined in OpenAPI

        :param id: The id of this ContainerId.
        :param flavor_id: The flavor_id of this ContainerId.
        :param mem: The mem of this ContainerId.
        :param vcpu: The vcpu of this ContainerId.
        """
        self.openapi_types = {
            'id': str,
            'flavor_id': int,
            'mem': int,
            'vcpu': int
        }

        self.attribute_map = {
            'id': 'Id',
            'flavor_id': 'flavor_id',
            'mem': 'mem',
            'vcpu': 'vcpu'
        }

        self._id = id
        self._flavor_id = flavor_id
        self._mem = mem
        self._vcpu = vcpu

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ContainerId':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ContainerId of this ContainerId.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self):
        """Gets the id of this ContainerId.

        Unique ID representing a container.

        :return: The id of this ContainerId.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this ContainerId.

        Unique ID representing a container.

        :param id: The id of this ContainerId.
        :type id: str
        """

        self._id = id

    @property
    def flavor_id(self):
        """Gets the flavor_id of this ContainerId.

        The ID of the container size.

        :return: The flavor_id of this ContainerId.
        :rtype: int
        """
        return self._flavor_id

    @flavor_id.setter
    def flavor_id(self, flavor_id):
        """Sets the flavor_id of this ContainerId.

        The ID of the container size.

        :param flavor_id: The flavor_id of this ContainerId.
        :type flavor_id: int
        """

        self._flavor_id = flavor_id

    @property
    def mem(self):
        """Gets the mem of this ContainerId.

        The amount of container memory that has been assigned to the container. If the container memory was not specified in the API request, a container with 64 Megabyte container memory is created by default.

        :return: The mem of this ContainerId.
        :rtype: int
        """
        return self._mem

    @mem.setter
    def mem(self, mem):
        """Sets the mem of this ContainerId.

        The amount of container memory that has been assigned to the container. If the container memory was not specified in the API request, a container with 64 Megabyte container memory is created by default.

        :param mem: The mem of this ContainerId.
        :type mem: int
        """

        self._mem = mem

    @property
    def vcpu(self):
        """Gets the vcpu of this ContainerId.

        Number of virtual CPUs that are assigned to the container.

        :return: The vcpu of this ContainerId.
        :rtype: int
        """
        return self._vcpu

    @vcpu.setter
    def vcpu(self, vcpu):
        """Sets the vcpu of this ContainerId.

        Number of virtual CPUs that are assigned to the container.

        :param vcpu: The vcpu of this ContainerId.
        :type vcpu: int
        """

        self._vcpu = vcpu
