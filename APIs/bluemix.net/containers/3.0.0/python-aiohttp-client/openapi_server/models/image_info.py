# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ImageInfo(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, created: float=None, id: str=None, image: str=None, repo_tags: List[str]=None, size: int=None, virtual_size: int=None):
        """ImageInfo - a model defined in OpenAPI

        :param created: The created of this ImageInfo.
        :param id: The id of this ImageInfo.
        :param image: The image of this ImageInfo.
        :param repo_tags: The repo_tags of this ImageInfo.
        :param size: The size of this ImageInfo.
        :param virtual_size: The virtual_size of this ImageInfo.
        """
        self.openapi_types = {
            'created': float,
            'id': str,
            'image': str,
            'repo_tags': List[str],
            'size': int,
            'virtual_size': int
        }

        self.attribute_map = {
            'created': 'Created',
            'id': 'Id',
            'image': 'Image',
            'repo_tags': 'RepoTags',
            'size': 'Size',
            'virtual_size': 'VirtualSize'
        }

        self._created = created
        self._id = id
        self._image = image
        self._repo_tags = repo_tags
        self._size = size
        self._virtual_size = virtual_size

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ImageInfo':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ImageInfo of this ImageInfo.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def created(self):
        """Gets the created of this ImageInfo.

        The time when your container image was created. 

        :return: The created of this ImageInfo.
        :rtype: float
        """
        return self._created

    @created.setter
    def created(self, created):
        """Sets the created of this ImageInfo.

        The time when your container image was created. 

        :param created: The created of this ImageInfo.
        :type created: float
        """

        self._created = created

    @property
    def id(self):
        """Gets the id of this ImageInfo.

        The unique identifier representing a container image. 

        :return: The id of this ImageInfo.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this ImageInfo.

        The unique identifier representing a container image. 

        :param id: The id of this ImageInfo.
        :type id: str
        """

        self._id = id

    @property
    def image(self):
        """Gets the image of this ImageInfo.

        The name of your container image.

        :return: The image of this ImageInfo.
        :rtype: str
        """
        return self._image

    @image.setter
    def image(self, image):
        """Sets the image of this ImageInfo.

        The name of your container image.

        :param image: The image of this ImageInfo.
        :type image: str
        """

        self._image = image

    @property
    def repo_tags(self):
        """Gets the repo_tags of this ImageInfo.

        The full path to the private Bluemix registry where the image is stored including the registry name, the organization namespace, and image tag.

        :return: The repo_tags of this ImageInfo.
        :rtype: List[str]
        """
        return self._repo_tags

    @repo_tags.setter
    def repo_tags(self, repo_tags):
        """Sets the repo_tags of this ImageInfo.

        The full path to the private Bluemix registry where the image is stored including the registry name, the organization namespace, and image tag.

        :param repo_tags: The repo_tags of this ImageInfo.
        :type repo_tags: List[str]
        """

        self._repo_tags = repo_tags

    @property
    def size(self):
        """Gets the size of this ImageInfo.

        The real size of the container image.

        :return: The size of this ImageInfo.
        :rtype: int
        """
        return self._size

    @size.setter
    def size(self, size):
        """Sets the size of this ImageInfo.

        The real size of the container image.

        :param size: The size of this ImageInfo.
        :type size: int
        """

        self._size = size

    @property
    def virtual_size(self):
        """Gets the virtual_size of this ImageInfo.

        The virtual size of the container image.

        :return: The virtual_size of this ImageInfo.
        :rtype: int
        """
        return self._virtual_size

    @virtual_size.setter
    def virtual_size(self, virtual_size):
        """Sets the virtual_size of this ImageInfo.

        The virtual size of the container image.

        :param virtual_size: The virtual_size of this ImageInfo.
        :type virtual_size: int
        """

        self._virtual_size = virtual_size
