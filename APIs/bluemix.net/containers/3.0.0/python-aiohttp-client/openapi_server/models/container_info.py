# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.container_config import ContainerConfig
from openapi_server.models.container_state import ContainerState
from openapi_server.models.group import Group
from openapi_server.models.host_config import HostConfig
from openapi_server.models.network_setting import NetworkSetting
from openapi_server.models.volume import Volume
from openapi_server import util


class ContainerInfo(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, bluemix_app: str=None, bluemix_services: str=None, config: ContainerConfig=None, container_state: str=None, created: datetime=None, group: Group=None, host_config: HostConfig=None, host_id: str=None, human_id: str=None, id: str=None, image: str=None, mounts: List[str]=None, name: str=None, network_settings: NetworkSetting=None, path: str=None, resolve_conf_path: str=None, state: ContainerState=None, volumes: Volume=None, volumes_rw: List[str]=None):
        """ContainerInfo - a model defined in OpenAPI

        :param bluemix_app: The bluemix_app of this ContainerInfo.
        :param bluemix_services: The bluemix_services of this ContainerInfo.
        :param config: The config of this ContainerInfo.
        :param container_state: The container_state of this ContainerInfo.
        :param created: The created of this ContainerInfo.
        :param group: The group of this ContainerInfo.
        :param host_config: The host_config of this ContainerInfo.
        :param host_id: The host_id of this ContainerInfo.
        :param human_id: The human_id of this ContainerInfo.
        :param id: The id of this ContainerInfo.
        :param image: The image of this ContainerInfo.
        :param mounts: The mounts of this ContainerInfo.
        :param name: The name of this ContainerInfo.
        :param network_settings: The network_settings of this ContainerInfo.
        :param path: The path of this ContainerInfo.
        :param resolve_conf_path: The resolve_conf_path of this ContainerInfo.
        :param state: The state of this ContainerInfo.
        :param volumes: The volumes of this ContainerInfo.
        :param volumes_rw: The volumes_rw of this ContainerInfo.
        """
        self.openapi_types = {
            'bluemix_app': str,
            'bluemix_services': str,
            'config': ContainerConfig,
            'container_state': str,
            'created': datetime,
            'group': Group,
            'host_config': HostConfig,
            'host_id': str,
            'human_id': str,
            'id': str,
            'image': str,
            'mounts': List[str],
            'name': str,
            'network_settings': NetworkSetting,
            'path': str,
            'resolve_conf_path': str,
            'state': ContainerState,
            'volumes': Volume,
            'volumes_rw': List[str]
        }

        self.attribute_map = {
            'bluemix_app': 'BluemixApp',
            'bluemix_services': 'BluemixServices',
            'config': 'Config',
            'container_state': 'ContainerState',
            'created': 'Created',
            'group': 'Group',
            'host_config': 'HostConfig',
            'host_id': 'HostId',
            'human_id': 'Human_Id',
            'id': 'Id',
            'image': 'Image',
            'mounts': 'Mounts',
            'name': 'Name',
            'network_settings': 'NetworkSettings',
            'path': 'Path',
            'resolve_conf_path': 'ResolveConfPath',
            'state': 'State',
            'volumes': 'Volumes',
            'volumes_rw': 'VolumesRW'
        }

        self._bluemix_app = bluemix_app
        self._bluemix_services = bluemix_services
        self._config = config
        self._container_state = container_state
        self._created = created
        self._group = group
        self._host_config = host_config
        self._host_id = host_id
        self._human_id = human_id
        self._id = id
        self._image = image
        self._mounts = mounts
        self._name = name
        self._network_settings = network_settings
        self._path = path
        self._resolve_conf_path = resolve_conf_path
        self._state = state
        self._volumes = volumes
        self._volumes_rw = volumes_rw

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ContainerInfo':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ContainerInfo of this ContainerInfo.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def bluemix_app(self):
        """Gets the bluemix_app of this ContainerInfo.

        The name of the Cloud Foundry app that was bound to the container during creation.

        :return: The bluemix_app of this ContainerInfo.
        :rtype: str
        """
        return self._bluemix_app

    @bluemix_app.setter
    def bluemix_app(self, bluemix_app):
        """Sets the bluemix_app of this ContainerInfo.

        The name of the Cloud Foundry app that was bound to the container during creation.

        :param bluemix_app: The bluemix_app of this ContainerInfo.
        :type bluemix_app: str
        """

        self._bluemix_app = bluemix_app

    @property
    def bluemix_services(self):
        """Gets the bluemix_services of this ContainerInfo.

        The name of the Bluemix service instance that was bound to the container during creation.

        :return: The bluemix_services of this ContainerInfo.
        :rtype: str
        """
        return self._bluemix_services

    @bluemix_services.setter
    def bluemix_services(self, bluemix_services):
        """Sets the bluemix_services of this ContainerInfo.

        The name of the Bluemix service instance that was bound to the container during creation.

        :param bluemix_services: The bluemix_services of this ContainerInfo.
        :type bluemix_services: str
        """

        self._bluemix_services = bluemix_services

    @property
    def config(self):
        """Gets the config of this ContainerInfo.


        :return: The config of this ContainerInfo.
        :rtype: ContainerConfig
        """
        return self._config

    @config.setter
    def config(self, config):
        """Sets the config of this ContainerInfo.


        :param config: The config of this ContainerInfo.
        :type config: ContainerConfig
        """

        self._config = config

    @property
    def container_state(self):
        """Gets the container_state of this ContainerInfo.

        The current status of the container. This state can either be transient, such as BUILDING or NETWORKING, or non-transient, such as RUNNING, SHUTDOWN, CRASHED, or SUSPENDED.

        :return: The container_state of this ContainerInfo.
        :rtype: str
        """
        return self._container_state

    @container_state.setter
    def container_state(self, container_state):
        """Sets the container_state of this ContainerInfo.

        The current status of the container. This state can either be transient, such as BUILDING or NETWORKING, or non-transient, such as RUNNING, SHUTDOWN, CRASHED, or SUSPENDED.

        :param container_state: The container_state of this ContainerInfo.
        :type container_state: str
        """

        self._container_state = container_state

    @property
    def created(self):
        """Gets the created of this ContainerInfo.

        The date and time the container was created.

        :return: The created of this ContainerInfo.
        :rtype: datetime
        """
        return self._created

    @created.setter
    def created(self, created):
        """Sets the created of this ContainerInfo.

        The date and time the container was created.

        :param created: The created of this ContainerInfo.
        :type created: datetime
        """

        self._created = created

    @property
    def group(self):
        """Gets the group of this ContainerInfo.


        :return: The group of this ContainerInfo.
        :rtype: Group
        """
        return self._group

    @group.setter
    def group(self, group):
        """Sets the group of this ContainerInfo.


        :param group: The group of this ContainerInfo.
        :type group: Group
        """

        self._group = group

    @property
    def host_config(self):
        """Gets the host_config of this ContainerInfo.


        :return: The host_config of this ContainerInfo.
        :rtype: HostConfig
        """
        return self._host_config

    @host_config.setter
    def host_config(self, host_config):
        """Sets the host_config of this ContainerInfo.


        :param host_config: The host_config of this ContainerInfo.
        :type host_config: HostConfig
        """

        self._host_config = host_config

    @property
    def host_id(self):
        """Gets the host_id of this ContainerInfo.

        The ID representing the physical compute host.

        :return: The host_id of this ContainerInfo.
        :rtype: str
        """
        return self._host_id

    @host_id.setter
    def host_id(self, host_id):
        """Sets the host_id of this ContainerInfo.

        The ID representing the physical compute host.

        :param host_id: The host_id of this ContainerInfo.
        :type host_id: str
        """

        self._host_id = host_id

    @property
    def human_id(self):
        """Gets the human_id of this ContainerInfo.

        The name of the container. 

        :return: The human_id of this ContainerInfo.
        :rtype: str
        """
        return self._human_id

    @human_id.setter
    def human_id(self, human_id):
        """Sets the human_id of this ContainerInfo.

        The name of the container. 

        :param human_id: The human_id of this ContainerInfo.
        :type human_id: str
        """

        self._human_id = human_id

    @property
    def id(self):
        """Gets the id of this ContainerInfo.

        Unique identifier representing a container.

        :return: The id of this ContainerInfo.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this ContainerInfo.

        Unique identifier representing a container.

        :param id: The id of this ContainerInfo.
        :type id: str
        """

        self._id = id

    @property
    def image(self):
        """Gets the image of this ContainerInfo.

        Unique identifier representing a container image.

        :return: The image of this ContainerInfo.
        :rtype: str
        """
        return self._image

    @image.setter
    def image(self, image):
        """Sets the image of this ContainerInfo.

        Unique identifier representing a container image.

        :param image: The image of this ContainerInfo.
        :type image: str
        """

        self._image = image

    @property
    def mounts(self):
        """Gets the mounts of this ContainerInfo.

        A list of volumes that are mounted to the container.

        :return: The mounts of this ContainerInfo.
        :rtype: List[str]
        """
        return self._mounts

    @mounts.setter
    def mounts(self, mounts):
        """Sets the mounts of this ContainerInfo.

        A list of volumes that are mounted to the container.

        :param mounts: The mounts of this ContainerInfo.
        :type mounts: List[str]
        """

        self._mounts = mounts

    @property
    def name(self):
        """Gets the name of this ContainerInfo.

        The name of the container.

        :return: The name of this ContainerInfo.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ContainerInfo.

        The name of the container.

        :param name: The name of this ContainerInfo.
        :type name: str
        """

        self._name = name

    @property
    def network_settings(self):
        """Gets the network_settings of this ContainerInfo.


        :return: The network_settings of this ContainerInfo.
        :rtype: NetworkSetting
        """
        return self._network_settings

    @network_settings.setter
    def network_settings(self, network_settings):
        """Sets the network_settings of this ContainerInfo.


        :param network_settings: The network_settings of this ContainerInfo.
        :type network_settings: NetworkSetting
        """

        self._network_settings = network_settings

    @property
    def path(self):
        """Gets the path of this ContainerInfo.

        The environment variable indicating the binary location.

        :return: The path of this ContainerInfo.
        :rtype: str
        """
        return self._path

    @path.setter
    def path(self, path):
        """Sets the path of this ContainerInfo.

        The environment variable indicating the binary location.

        :param path: The path of this ContainerInfo.
        :type path: str
        """

        self._path = path

    @property
    def resolve_conf_path(self):
        """Gets the resolve_conf_path of this ContainerInfo.

        Path to the resolve.conf file inside the container. The resolve.conf file is used to resolve the DNS servers.

        :return: The resolve_conf_path of this ContainerInfo.
        :rtype: str
        """
        return self._resolve_conf_path

    @resolve_conf_path.setter
    def resolve_conf_path(self, resolve_conf_path):
        """Sets the resolve_conf_path of this ContainerInfo.

        Path to the resolve.conf file inside the container. The resolve.conf file is used to resolve the DNS servers.

        :param resolve_conf_path: The resolve_conf_path of this ContainerInfo.
        :type resolve_conf_path: str
        """

        self._resolve_conf_path = resolve_conf_path

    @property
    def state(self):
        """Gets the state of this ContainerInfo.


        :return: The state of this ContainerInfo.
        :rtype: ContainerState
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this ContainerInfo.


        :param state: The state of this ContainerInfo.
        :type state: ContainerState
        """

        self._state = state

    @property
    def volumes(self):
        """Gets the volumes of this ContainerInfo.


        :return: The volumes of this ContainerInfo.
        :rtype: Volume
        """
        return self._volumes

    @volumes.setter
    def volumes(self, volumes):
        """Sets the volumes of this ContainerInfo.


        :param volumes: The volumes of this ContainerInfo.
        :type volumes: Volume
        """

        self._volumes = volumes

    @property
    def volumes_rw(self):
        """Gets the volumes_rw of this ContainerInfo.

        LIst of volumes that is mounted to the container.

        :return: The volumes_rw of this ContainerInfo.
        :rtype: List[str]
        """
        return self._volumes_rw

    @volumes_rw.setter
    def volumes_rw(self, volumes_rw):
        """Sets the volumes_rw of this ContainerInfo.

        LIst of volumes that is mounted to the container.

        :param volumes_rw: The volumes_rw of this ContainerInfo.
        :type volumes_rw: List[str]
        """

        self._volumes_rw = volumes_rw
