# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.group import Group
from openapi_server.models.network_setting import NetworkSetting
from openapi_server.models.port import Port
from openapi_server import util


class Container(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, command: str=None, container_state: str=None, created: float=None, env: List[str]=None, group: Group=None, id: str=None, image: str=None, image_id: str=None, labels: object=None, memory: int=None, name: str=None, names: List[str]=None, network_settings: NetworkSetting=None, ports: Port=None, size_root_fs: int=None, size_rw: int=None, started: float=None, status: str=None, vcpu: int=None):
        """Container - a model defined in OpenAPI

        :param command: The command of this Container.
        :param container_state: The container_state of this Container.
        :param created: The created of this Container.
        :param env: The env of this Container.
        :param group: The group of this Container.
        :param id: The id of this Container.
        :param image: The image of this Container.
        :param image_id: The image_id of this Container.
        :param labels: The labels of this Container.
        :param memory: The memory of this Container.
        :param name: The name of this Container.
        :param names: The names of this Container.
        :param network_settings: The network_settings of this Container.
        :param ports: The ports of this Container.
        :param size_root_fs: The size_root_fs of this Container.
        :param size_rw: The size_rw of this Container.
        :param started: The started of this Container.
        :param status: The status of this Container.
        :param vcpu: The vcpu of this Container.
        """
        self.openapi_types = {
            'command': str,
            'container_state': str,
            'created': float,
            'env': List[str],
            'group': Group,
            'id': str,
            'image': str,
            'image_id': str,
            'labels': object,
            'memory': int,
            'name': str,
            'names': List[str],
            'network_settings': NetworkSetting,
            'ports': Port,
            'size_root_fs': int,
            'size_rw': int,
            'started': float,
            'status': str,
            'vcpu': int
        }

        self.attribute_map = {
            'command': 'Command',
            'container_state': 'ContainerState',
            'created': 'Created',
            'env': 'Env',
            'group': 'Group',
            'id': 'Id',
            'image': 'Image',
            'image_id': 'ImageId',
            'labels': 'Labels',
            'memory': 'Memory',
            'name': 'Name',
            'names': 'Names',
            'network_settings': 'NetworkSettings',
            'ports': 'Ports',
            'size_root_fs': 'SizeRootFs',
            'size_rw': 'SizeRw',
            'started': 'Started',
            'status': 'Status',
            'vcpu': 'VCPU'
        }

        self._command = command
        self._container_state = container_state
        self._created = created
        self._env = env
        self._group = group
        self._id = id
        self._image = image
        self._image_id = image_id
        self._labels = labels
        self._memory = memory
        self._name = name
        self._names = names
        self._network_settings = network_settings
        self._ports = ports
        self._size_root_fs = size_root_fs
        self._size_rw = size_rw
        self._started = started
        self._status = status
        self._vcpu = vcpu

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Container':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Container of this Container.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def command(self):
        """Gets the command of this Container.

        The command and arguments that were passed to the container during container creation. This command is executed when the container is started.

        :return: The command of this Container.
        :rtype: str
        """
        return self._command

    @command.setter
    def command(self, command):
        """Sets the command of this Container.

        The command and arguments that were passed to the container during container creation. This command is executed when the container is started.

        :param command: The command of this Container.
        :type command: str
        """

        self._command = command

    @property
    def container_state(self):
        """Gets the container_state of this Container.

        The current status of the container. The status can either be a transient state, such as BUILDING, and NETWORKING or a non-transient state, such as RUNNING, SHUTDOWN, CRASHED, PAUSED, or SUSPENDED. 

        :return: The container_state of this Container.
        :rtype: str
        """
        return self._container_state

    @container_state.setter
    def container_state(self, container_state):
        """Sets the container_state of this Container.

        The current status of the container. The status can either be a transient state, such as BUILDING, and NETWORKING or a non-transient state, such as RUNNING, SHUTDOWN, CRASHED, PAUSED, or SUSPENDED. 

        :param container_state: The container_state of this Container.
        :type container_state: str
        """

        self._container_state = container_state

    @property
    def created(self):
        """Gets the created of this Container.

        The time when the container was created.

        :return: The created of this Container.
        :rtype: float
        """
        return self._created

    @created.setter
    def created(self, created):
        """Sets the created of this Container.

        The time when the container was created.

        :param created: The created of this Container.
        :type created: float
        """

        self._created = created

    @property
    def env(self):
        """Gets the env of this Container.

        A list of all the environment variables of the container.

        :return: The env of this Container.
        :rtype: List[str]
        """
        return self._env

    @env.setter
    def env(self, env):
        """Sets the env of this Container.

        A list of all the environment variables of the container.

        :param env: The env of this Container.
        :type env: List[str]
        """

        self._env = env

    @property
    def group(self):
        """Gets the group of this Container.


        :return: The group of this Container.
        :rtype: Group
        """
        return self._group

    @group.setter
    def group(self, group):
        """Sets the group of this Container.


        :param group: The group of this Container.
        :type group: Group
        """

        self._group = group

    @property
    def id(self):
        """Gets the id of this Container.

        Unique identifier representing a container.

        :return: The id of this Container.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Container.

        Unique identifier representing a container.

        :param id: The id of this Container.
        :type id: str
        """

        self._id = id

    @property
    def image(self):
        """Gets the image of this Container.

        Full path to the container image in your private Bluemix registry.

        :return: The image of this Container.
        :rtype: str
        """
        return self._image

    @image.setter
    def image(self, image):
        """Sets the image of this Container.

        Full path to the container image in your private Bluemix registry.

        :param image: The image of this Container.
        :type image: str
        """

        self._image = image

    @property
    def image_id(self):
        """Gets the image_id of this Container.

        Unique identifier representing a container image.

        :return: The image_id of this Container.
        :rtype: str
        """
        return self._image_id

    @image_id.setter
    def image_id(self, image_id):
        """Sets the image_id of this Container.

        Unique identifier representing a container image.

        :param image_id: The image_id of this Container.
        :type image_id: str
        """

        self._image_id = image_id

    @property
    def labels(self):
        """Gets the labels of this Container.

        List of custom metadata that was added to the container. Labels serve a wide range of uses, such as adding notes to a container. Every label is a key/ value pair.

        :return: The labels of this Container.
        :rtype: object
        """
        return self._labels

    @labels.setter
    def labels(self, labels):
        """Sets the labels of this Container.

        List of custom metadata that was added to the container. Labels serve a wide range of uses, such as adding notes to a container. Every label is a key/ value pair.

        :param labels: The labels of this Container.
        :type labels: object
        """

        self._labels = labels

    @property
    def memory(self):
        """Gets the memory of this Container.

        The amount of container memory in Megabyte that was assigned to your container. The memory is counted towards the quota that is allocated for the space.

        :return: The memory of this Container.
        :rtype: int
        """
        return self._memory

    @memory.setter
    def memory(self, memory):
        """Sets the memory of this Container.

        The amount of container memory in Megabyte that was assigned to your container. The memory is counted towards the quota that is allocated for the space.

        :param memory: The memory of this Container.
        :type memory: int
        """

        self._memory = memory

    @property
    def name(self):
        """Gets the name of this Container.

        The name of the container. 

        :return: The name of this Container.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Container.

        The name of the container. 

        :param name: The name of this Container.
        :type name: str
        """

        self._name = name

    @property
    def names(self):
        """Gets the names of this Container.

        The name of the container.

        :return: The names of this Container.
        :rtype: List[str]
        """
        return self._names

    @names.setter
    def names(self, names):
        """Sets the names of this Container.

        The name of the container.

        :param names: The names of this Container.
        :type names: List[str]
        """

        self._names = names

    @property
    def network_settings(self):
        """Gets the network_settings of this Container.


        :return: The network_settings of this Container.
        :rtype: NetworkSetting
        """
        return self._network_settings

    @network_settings.setter
    def network_settings(self, network_settings):
        """Sets the network_settings of this Container.


        :param network_settings: The network_settings of this Container.
        :type network_settings: NetworkSetting
        """

        self._network_settings = network_settings

    @property
    def ports(self):
        """Gets the ports of this Container.


        :return: The ports of this Container.
        :rtype: Port
        """
        return self._ports

    @ports.setter
    def ports(self, ports):
        """Sets the ports of this Container.


        :param ports: The ports of this Container.
        :type ports: Port
        """

        self._ports = ports

    @property
    def size_root_fs(self):
        """Gets the size_root_fs of this Container.

        Total size of all the files in the container, in bytes. 

        :return: The size_root_fs of this Container.
        :rtype: int
        """
        return self._size_root_fs

    @size_root_fs.setter
    def size_root_fs(self, size_root_fs):
        """Sets the size_root_fs of this Container.

        Total size of all the files in the container, in bytes. 

        :param size_root_fs: The size_root_fs of this Container.
        :type size_root_fs: int
        """

        self._size_root_fs = size_root_fs

    @property
    def size_rw(self):
        """Gets the size_rw of this Container.

        The size of the files which have been created or changed, if you compare the container to its base image. Just after creation, this should be zero. Ass you modify (or create) files, this size will increase.

        :return: The size_rw of this Container.
        :rtype: int
        """
        return self._size_rw

    @size_rw.setter
    def size_rw(self, size_rw):
        """Sets the size_rw of this Container.

        The size of the files which have been created or changed, if you compare the container to its base image. Just after creation, this should be zero. Ass you modify (or create) files, this size will increase.

        :param size_rw: The size_rw of this Container.
        :type size_rw: int
        """

        self._size_rw = size_rw

    @property
    def started(self):
        """Gets the started of this Container.

        Time when the container was started.

        :return: The started of this Container.
        :rtype: float
        """
        return self._started

    @started.setter
    def started(self, started):
        """Sets the started of this Container.

        Time when the container was started.

        :param started: The started of this Container.
        :type started: float
        """

        self._started = started

    @property
    def status(self):
        """Gets the status of this Container.

        The current status of the container. The status can either be a transient state, such as BUILDING, and NETWORKING or a non-transient state, such as RUNNING, SHUTDOWN, CRASHED, PAUSED, or SUSPENDED

        :return: The status of this Container.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this Container.

        The current status of the container. The status can either be a transient state, such as BUILDING, and NETWORKING or a non-transient state, such as RUNNING, SHUTDOWN, CRASHED, PAUSED, or SUSPENDED

        :param status: The status of this Container.
        :type status: str
        """

        self._status = status

    @property
    def vcpu(self):
        """Gets the vcpu of this Container.

        Number of virtual CPUs that are assigned to the container.

        :return: The vcpu of this Container.
        :rtype: int
        """
        return self._vcpu

    @vcpu.setter
    def vcpu(self, vcpu):
        """Sets the vcpu of this Container.

        Number of virtual CPUs that are assigned to the container.

        :param vcpu: The vcpu of this Container.
        :type vcpu: int
        """

        self._vcpu = vcpu
