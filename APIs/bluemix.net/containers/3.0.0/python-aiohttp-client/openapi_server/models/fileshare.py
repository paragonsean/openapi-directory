# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class Fileshare(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, capacity: int=None, created_date: str=None, fs_name: str=None, host_path: str=None, iops: float=None, iops_total: int=None, order_id: str=None, provider: str=None, space_guid: str=None, state: str=None, updated_date: str=None):
        """Fileshare - a model defined in OpenAPI

        :param capacity: The capacity of this Fileshare.
        :param created_date: The created_date of this Fileshare.
        :param fs_name: The fs_name of this Fileshare.
        :param host_path: The host_path of this Fileshare.
        :param iops: The iops of this Fileshare.
        :param iops_total: The iops_total of this Fileshare.
        :param order_id: The order_id of this Fileshare.
        :param provider: The provider of this Fileshare.
        :param space_guid: The space_guid of this Fileshare.
        :param state: The state of this Fileshare.
        :param updated_date: The updated_date of this Fileshare.
        """
        self.openapi_types = {
            'capacity': int,
            'created_date': str,
            'fs_name': str,
            'host_path': str,
            'iops': float,
            'iops_total': int,
            'order_id': str,
            'provider': str,
            'space_guid': str,
            'state': str,
            'updated_date': str
        }

        self.attribute_map = {
            'capacity': 'capacity',
            'created_date': 'created_date',
            'fs_name': 'fsName',
            'host_path': 'hostPath',
            'iops': 'iops',
            'iops_total': 'iopsTotal',
            'order_id': 'orderId',
            'provider': 'provider',
            'space_guid': 'spaceGuid',
            'state': 'state',
            'updated_date': 'updated_date'
        }

        self._capacity = capacity
        self._created_date = created_date
        self._fs_name = fs_name
        self._host_path = host_path
        self._iops = iops
        self._iops_total = iops_total
        self._order_id = order_id
        self._provider = provider
        self._space_guid = space_guid
        self._state = state
        self._updated_date = updated_date

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Fileshare':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Fileshare of this Fileshare.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def capacity(self):
        """Gets the capacity of this Fileshare.

        The size of the file share in gigabyte.

        :return: The capacity of this Fileshare.
        :rtype: int
        """
        return self._capacity

    @capacity.setter
    def capacity(self, capacity):
        """Sets the capacity of this Fileshare.

        The size of the file share in gigabyte.

        :param capacity: The capacity of this Fileshare.
        :type capacity: int
        """

        self._capacity = capacity

    @property
    def created_date(self):
        """Gets the created_date of this Fileshare.

        The timestamp when the file share was created.

        :return: The created_date of this Fileshare.
        :rtype: str
        """
        return self._created_date

    @created_date.setter
    def created_date(self, created_date):
        """Sets the created_date of this Fileshare.

        The timestamp when the file share was created.

        :param created_date: The created_date of this Fileshare.
        :type created_date: str
        """

        self._created_date = created_date

    @property
    def fs_name(self):
        """Gets the fs_name of this Fileshare.

        The name of the file share.

        :return: The fs_name of this Fileshare.
        :rtype: str
        """
        return self._fs_name

    @fs_name.setter
    def fs_name(self, fs_name):
        """Sets the fs_name of this Fileshare.

        The name of the file share.

        :param fs_name: The fs_name of this Fileshare.
        :type fs_name: str
        """

        self._fs_name = fs_name

    @property
    def host_path(self):
        """Gets the host_path of this Fileshare.

        The path to the volume on the host node.

        :return: The host_path of this Fileshare.
        :rtype: str
        """
        return self._host_path

    @host_path.setter
    def host_path(self, host_path):
        """Sets the host_path of this Fileshare.

        The path to the volume on the host node.

        :param host_path: The host_path of this Fileshare.
        :type host_path: str
        """

        self._host_path = host_path

    @property
    def iops(self):
        """Gets the iops of this Fileshare.

        The number of Input/Output operations per second. 

        :return: The iops of this Fileshare.
        :rtype: float
        """
        return self._iops

    @iops.setter
    def iops(self, iops):
        """Sets the iops of this Fileshare.

        The number of Input/Output operations per second. 

        :param iops: The iops of this Fileshare.
        :type iops: float
        """

        self._iops = iops

    @property
    def iops_total(self):
        """Gets the iops_total of this Fileshare.

        The total number of IOPS considering the size of the file share. The size of your file share in gigabyte multiplied with the number of IOPS indicates the total number of IOPS. The higher the number of IOPS the faster you can read from and write to your volumes.

        :return: The iops_total of this Fileshare.
        :rtype: int
        """
        return self._iops_total

    @iops_total.setter
    def iops_total(self, iops_total):
        """Sets the iops_total of this Fileshare.

        The total number of IOPS considering the size of the file share. The size of your file share in gigabyte multiplied with the number of IOPS indicates the total number of IOPS. The higher the number of IOPS the faster you can read from and write to your volumes.

        :param iops_total: The iops_total of this Fileshare.
        :type iops_total: int
        """

        self._iops_total = iops_total

    @property
    def order_id(self):
        """Gets the order_id of this Fileshare.

        The ID received from softlayer when the file share was ordered to be set up in softlayer.

        :return: The order_id of this Fileshare.
        :rtype: str
        """
        return self._order_id

    @order_id.setter
    def order_id(self, order_id):
        """Sets the order_id of this Fileshare.

        The ID received from softlayer when the file share was ordered to be set up in softlayer.

        :param order_id: The order_id of this Fileshare.
        :type order_id: str
        """

        self._order_id = order_id

    @property
    def provider(self):
        """Gets the provider of this Fileshare.

        The provider of the file share.

        :return: The provider of this Fileshare.
        :rtype: str
        """
        return self._provider

    @provider.setter
    def provider(self, provider):
        """Sets the provider of this Fileshare.

        The provider of the file share.

        :param provider: The provider of this Fileshare.
        :type provider: str
        """

        self._provider = provider

    @property
    def space_guid(self):
        """Gets the space_guid of this Fileshare.

        The unique ID representing a Bluemix space in which the file share was created.

        :return: The space_guid of this Fileshare.
        :rtype: str
        """
        return self._space_guid

    @space_guid.setter
    def space_guid(self, space_guid):
        """Sets the space_guid of this Fileshare.

        The unique ID representing a Bluemix space in which the file share was created.

        :param space_guid: The space_guid of this Fileshare.
        :type space_guid: str
        """

        self._space_guid = space_guid

    @property
    def state(self):
        """Gets the state of this Fileshare.

        The current state of the file share. When the file share is ready to be used, this attribute is set to `READY`.

        :return: The state of this Fileshare.
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this Fileshare.

        The current state of the file share. When the file share is ready to be used, this attribute is set to `READY`.

        :param state: The state of this Fileshare.
        :type state: str
        """

        self._state = state

    @property
    def updated_date(self):
        """Gets the updated_date of this Fileshare.

        The timestamp when the file share last was updated.

        :return: The updated_date of this Fileshare.
        :rtype: str
        """
        return self._updated_date

    @updated_date.setter
    def updated_date(self, updated_date):
        """Sets the updated_date of this Fileshare.

        The timestamp when the file share last was updated.

        :param updated_date: The updated_date of this Fileshare.
        :type updated_date: str
        """

        self._updated_date = updated_date
