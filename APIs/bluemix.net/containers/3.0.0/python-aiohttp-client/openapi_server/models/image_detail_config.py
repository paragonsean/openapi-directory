# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ImageDetailConfig(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, args_escaped: bool=None, attach_stderr: bool=None, attach_stdin: bool=None, attach_stdout: bool=None, cmd: List[str]=None, domainmame: str=None, entrypoint: str=None, env: List[str]=None, exposed_ports: List[str]=None, hostname: str=None, image: str=None, labels: List[str]=None, on_build: List[str]=None, open_stdin: bool=None, stdin_once: bool=None, tty: bool=None, user: str=None, volumes: str=None, working_dir: str=None):
        """ImageDetailConfig - a model defined in OpenAPI

        :param args_escaped: The args_escaped of this ImageDetailConfig.
        :param attach_stderr: The attach_stderr of this ImageDetailConfig.
        :param attach_stdin: The attach_stdin of this ImageDetailConfig.
        :param attach_stdout: The attach_stdout of this ImageDetailConfig.
        :param cmd: The cmd of this ImageDetailConfig.
        :param domainmame: The domainmame of this ImageDetailConfig.
        :param entrypoint: The entrypoint of this ImageDetailConfig.
        :param env: The env of this ImageDetailConfig.
        :param exposed_ports: The exposed_ports of this ImageDetailConfig.
        :param hostname: The hostname of this ImageDetailConfig.
        :param image: The image of this ImageDetailConfig.
        :param labels: The labels of this ImageDetailConfig.
        :param on_build: The on_build of this ImageDetailConfig.
        :param open_stdin: The open_stdin of this ImageDetailConfig.
        :param stdin_once: The stdin_once of this ImageDetailConfig.
        :param tty: The tty of this ImageDetailConfig.
        :param user: The user of this ImageDetailConfig.
        :param volumes: The volumes of this ImageDetailConfig.
        :param working_dir: The working_dir of this ImageDetailConfig.
        """
        self.openapi_types = {
            'args_escaped': bool,
            'attach_stderr': bool,
            'attach_stdin': bool,
            'attach_stdout': bool,
            'cmd': List[str],
            'domainmame': str,
            'entrypoint': str,
            'env': List[str],
            'exposed_ports': List[str],
            'hostname': str,
            'image': str,
            'labels': List[str],
            'on_build': List[str],
            'open_stdin': bool,
            'stdin_once': bool,
            'tty': bool,
            'user': str,
            'volumes': str,
            'working_dir': str
        }

        self.attribute_map = {
            'args_escaped': 'ArgsEscaped',
            'attach_stderr': 'AttachStderr',
            'attach_stdin': 'AttachStdin',
            'attach_stdout': 'AttachStdout',
            'cmd': 'Cmd',
            'domainmame': 'Domainmame',
            'entrypoint': 'Entrypoint',
            'env': 'Env',
            'exposed_ports': 'ExposedPorts',
            'hostname': 'Hostname',
            'image': 'Image',
            'labels': 'Labels',
            'on_build': 'OnBuild',
            'open_stdin': 'OpenStdin',
            'stdin_once': 'StdinOnce',
            'tty': 'Tty',
            'user': 'User',
            'volumes': 'Volumes',
            'working_dir': 'WorkingDir'
        }

        self._args_escaped = args_escaped
        self._attach_stderr = attach_stderr
        self._attach_stdin = attach_stdin
        self._attach_stdout = attach_stdout
        self._cmd = cmd
        self._domainmame = domainmame
        self._entrypoint = entrypoint
        self._env = env
        self._exposed_ports = exposed_ports
        self._hostname = hostname
        self._image = image
        self._labels = labels
        self._on_build = on_build
        self._open_stdin = open_stdin
        self._stdin_once = stdin_once
        self._tty = tty
        self._user = user
        self._volumes = volumes
        self._working_dir = working_dir

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ImageDetailConfig':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ImageDetail_Config of this ImageDetailConfig.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def args_escaped(self):
        """Gets the args_escaped of this ImageDetailConfig.

        

        :return: The args_escaped of this ImageDetailConfig.
        :rtype: bool
        """
        return self._args_escaped

    @args_escaped.setter
    def args_escaped(self, args_escaped):
        """Sets the args_escaped of this ImageDetailConfig.

        

        :param args_escaped: The args_escaped of this ImageDetailConfig.
        :type args_escaped: bool
        """

        self._args_escaped = args_escaped

    @property
    def attach_stderr(self):
        """Gets the attach_stderr of this ImageDetailConfig.

        Attaches the container to stderr.

        :return: The attach_stderr of this ImageDetailConfig.
        :rtype: bool
        """
        return self._attach_stderr

    @attach_stderr.setter
    def attach_stderr(self, attach_stderr):
        """Sets the attach_stderr of this ImageDetailConfig.

        Attaches the container to stderr.

        :param attach_stderr: The attach_stderr of this ImageDetailConfig.
        :type attach_stderr: bool
        """

        self._attach_stderr = attach_stderr

    @property
    def attach_stdin(self):
        """Gets the attach_stdin of this ImageDetailConfig.

        Attaches the container to stdin.

        :return: The attach_stdin of this ImageDetailConfig.
        :rtype: bool
        """
        return self._attach_stdin

    @attach_stdin.setter
    def attach_stdin(self, attach_stdin):
        """Sets the attach_stdin of this ImageDetailConfig.

        Attaches the container to stdin.

        :param attach_stdin: The attach_stdin of this ImageDetailConfig.
        :type attach_stdin: bool
        """

        self._attach_stdin = attach_stdin

    @property
    def attach_stdout(self):
        """Gets the attach_stdout of this ImageDetailConfig.

        Attaches the container to stdout.

        :return: The attach_stdout of this ImageDetailConfig.
        :rtype: bool
        """
        return self._attach_stdout

    @attach_stdout.setter
    def attach_stdout(self, attach_stdout):
        """Sets the attach_stdout of this ImageDetailConfig.

        Attaches the container to stdout.

        :param attach_stdout: The attach_stdout of this ImageDetailConfig.
        :type attach_stdout: bool
        """

        self._attach_stdout = attach_stdout

    @property
    def cmd(self):
        """Gets the cmd of this ImageDetailConfig.

        The command and arguments in this list are passed to the container to be executed when the container is started. This command must be a long-running command. Do not use a short-lived command, for example, /bin/date, because it might cause the container to crash. <br>Sample long-running commands:<br>[\"ping\",\"localhost\"]<br>[\"tail\",\"-f\",\"/dev/null\"]<br>[\"sh\",\"-c\",\"while true; do date; sleep 20; done\"] 

        :return: The cmd of this ImageDetailConfig.
        :rtype: List[str]
        """
        return self._cmd

    @cmd.setter
    def cmd(self, cmd):
        """Sets the cmd of this ImageDetailConfig.

        The command and arguments in this list are passed to the container to be executed when the container is started. This command must be a long-running command. Do not use a short-lived command, for example, /bin/date, because it might cause the container to crash. <br>Sample long-running commands:<br>[\"ping\",\"localhost\"]<br>[\"tail\",\"-f\",\"/dev/null\"]<br>[\"sh\",\"-c\",\"while true; do date; sleep 20; done\"] 

        :param cmd: The cmd of this ImageDetailConfig.
        :type cmd: List[str]
        """

        self._cmd = cmd

    @property
    def domainmame(self):
        """Gets the domainmame of this ImageDetailConfig.

        The domain name to be used for the container.

        :return: The domainmame of this ImageDetailConfig.
        :rtype: str
        """
        return self._domainmame

    @domainmame.setter
    def domainmame(self, domainmame):
        """Sets the domainmame of this ImageDetailConfig.

        The domain name to be used for the container.

        :param domainmame: The domainmame of this ImageDetailConfig.
        :type domainmame: str
        """

        self._domainmame = domainmame

    @property
    def entrypoint(self):
        """Gets the entrypoint of this ImageDetailConfig.

        The entrypoint specifies a command that will always be executed when the container starts.

        :return: The entrypoint of this ImageDetailConfig.
        :rtype: str
        """
        return self._entrypoint

    @entrypoint.setter
    def entrypoint(self, entrypoint):
        """Sets the entrypoint of this ImageDetailConfig.

        The entrypoint specifies a command that will always be executed when the container starts.

        :param entrypoint: The entrypoint of this ImageDetailConfig.
        :type entrypoint: str
        """

        self._entrypoint = entrypoint

    @property
    def env(self):
        """Gets the env of this ImageDetailConfig.

        A list of environment variables in the form of key=value pairs. All keys in this list have to be unique. List multiple keys separately and if you include quotation marks, include them around both the environment variable name and the value.

        :return: The env of this ImageDetailConfig.
        :rtype: List[str]
        """
        return self._env

    @env.setter
    def env(self, env):
        """Sets the env of this ImageDetailConfig.

        A list of environment variables in the form of key=value pairs. All keys in this list have to be unique. List multiple keys separately and if you include quotation marks, include them around both the environment variable name and the value.

        :param env: The env of this ImageDetailConfig.
        :type env: List[str]
        """

        self._env = env

    @property
    def exposed_ports(self):
        """Gets the exposed_ports of this ImageDetailConfig.

        A list of all udp and tcp ports that have been publicly exposed during the container creation.

        :return: The exposed_ports of this ImageDetailConfig.
        :rtype: List[str]
        """
        return self._exposed_ports

    @exposed_ports.setter
    def exposed_ports(self, exposed_ports):
        """Sets the exposed_ports of this ImageDetailConfig.

        A list of all udp and tcp ports that have been publicly exposed during the container creation.

        :param exposed_ports: The exposed_ports of this ImageDetailConfig.
        :type exposed_ports: List[str]
        """

        self._exposed_ports = exposed_ports

    @property
    def hostname(self):
        """Gets the hostname of this ImageDetailConfig.

        The host name of the container provided by Openstack. 

        :return: The hostname of this ImageDetailConfig.
        :rtype: str
        """
        return self._hostname

    @hostname.setter
    def hostname(self, hostname):
        """Sets the hostname of this ImageDetailConfig.

        The host name of the container provided by Openstack. 

        :param hostname: The hostname of this ImageDetailConfig.
        :type hostname: str
        """

        self._hostname = hostname

    @property
    def image(self):
        """Gets the image of this ImageDetailConfig.

        The unique ID of the image. 

        :return: The image of this ImageDetailConfig.
        :rtype: str
        """
        return self._image

    @image.setter
    def image(self, image):
        """Sets the image of this ImageDetailConfig.

        The unique ID of the image. 

        :param image: The image of this ImageDetailConfig.
        :type image: str
        """

        self._image = image

    @property
    def labels(self):
        """Gets the labels of this ImageDetailConfig.

        List of custom metadata that was added to the image. Labels serve a wide range of uses, such as adding notes or license requirements to an image. Every label is a key/ value pair.

        :return: The labels of this ImageDetailConfig.
        :rtype: List[str]
        """
        return self._labels

    @labels.setter
    def labels(self, labels):
        """Sets the labels of this ImageDetailConfig.

        List of custom metadata that was added to the image. Labels serve a wide range of uses, such as adding notes or license requirements to an image. Every label is a key/ value pair.

        :param labels: The labels of this ImageDetailConfig.
        :type labels: List[str]
        """

        self._labels = labels

    @property
    def on_build(self):
        """Gets the on_build of this ImageDetailConfig.

        ???

        :return: The on_build of this ImageDetailConfig.
        :rtype: List[str]
        """
        return self._on_build

    @on_build.setter
    def on_build(self, on_build):
        """Sets the on_build of this ImageDetailConfig.

        ???

        :param on_build: The on_build of this ImageDetailConfig.
        :type on_build: List[str]
        """

        self._on_build = on_build

    @property
    def open_stdin(self):
        """Gets the open_stdin of this ImageDetailConfig.

        When set to true, it opens stdin.

        :return: The open_stdin of this ImageDetailConfig.
        :rtype: bool
        """
        return self._open_stdin

    @open_stdin.setter
    def open_stdin(self, open_stdin):
        """Sets the open_stdin of this ImageDetailConfig.

        When set to true, it opens stdin.

        :param open_stdin: The open_stdin of this ImageDetailConfig.
        :type open_stdin: bool
        """

        self._open_stdin = open_stdin

    @property
    def stdin_once(self):
        """Gets the stdin_once of this ImageDetailConfig.

        When set to true it closes stdin after the attached client disconnects.

        :return: The stdin_once of this ImageDetailConfig.
        :rtype: bool
        """
        return self._stdin_once

    @stdin_once.setter
    def stdin_once(self, stdin_once):
        """Sets the stdin_once of this ImageDetailConfig.

        When set to true it closes stdin after the attached client disconnects.

        :param stdin_once: The stdin_once of this ImageDetailConfig.
        :type stdin_once: bool
        """

        self._stdin_once = stdin_once

    @property
    def tty(self):
        """Gets the tty of this ImageDetailConfig.

        When set to true, attach standard streams to a tty, including stdin if it is not closed.

        :return: The tty of this ImageDetailConfig.
        :rtype: bool
        """
        return self._tty

    @tty.setter
    def tty(self, tty):
        """Sets the tty of this ImageDetailConfig.

        When set to true, attach standard streams to a tty, including stdin if it is not closed.

        :param tty: The tty of this ImageDetailConfig.
        :type tty: bool
        """

        self._tty = tty

    @property
    def user(self):
        """Gets the user of this ImageDetailConfig.

        The user to be used inside the container.

        :return: The user of this ImageDetailConfig.
        :rtype: str
        """
        return self._user

    @user.setter
    def user(self, user):
        """Sets the user of this ImageDetailConfig.

        The user to be used inside the container.

        :param user: The user of this ImageDetailConfig.
        :type user: str
        """

        self._user = user

    @property
    def volumes(self):
        """Gets the volumes of this ImageDetailConfig.

        Docker specific. Not supported by IBM Containers. The path to the volume that is created when deploying a container from the image. To use a volume in IBM Containers, you must first create a volume and then mount it to your container during creation.

        :return: The volumes of this ImageDetailConfig.
        :rtype: str
        """
        return self._volumes

    @volumes.setter
    def volumes(self, volumes):
        """Sets the volumes of this ImageDetailConfig.

        Docker specific. Not supported by IBM Containers. The path to the volume that is created when deploying a container from the image. To use a volume in IBM Containers, you must first create a volume and then mount it to your container during creation.

        :param volumes: The volumes of this ImageDetailConfig.
        :type volumes: str
        """

        self._volumes = volumes

    @property
    def working_dir(self):
        """Gets the working_dir of this ImageDetailConfig.

        The working directory inside the container where specified commands are executed.

        :return: The working_dir of this ImageDetailConfig.
        :rtype: str
        """
        return self._working_dir

    @working_dir.setter
    def working_dir(self, working_dir):
        """Sets the working_dir of this ImageDetailConfig.

        The working directory inside the container where specified commands are executed.

        :param working_dir: The working_dir of this ImageDetailConfig.
        :type working_dir: str
        """

        self._working_dir = working_dir
