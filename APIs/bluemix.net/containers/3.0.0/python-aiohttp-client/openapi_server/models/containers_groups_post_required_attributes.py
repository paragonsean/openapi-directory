# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.containers_groups_post_required_attributes_number_instances import ContainersGroupsPostRequiredAttributesNumberInstances
from openapi_server.models.containers_groups_post_required_attributes_route import ContainersGroupsPostRequiredAttributesRoute
from openapi_server import util


class ContainersGroupsPostRequiredAttributes(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, autorecovery: str=None, bluemix_app: str=None, cmd: List[str]=None, env: List[str]=None, image: str=None, memory: int=None, name: str=None, number_instances: ContainersGroupsPostRequiredAttributesNumberInstances=None, port: int=None, route: ContainersGroupsPostRequiredAttributesRoute=None, volumes: List[str]=None):
        """ContainersGroupsPostRequiredAttributes - a model defined in OpenAPI

        :param autorecovery: The autorecovery of this ContainersGroupsPostRequiredAttributes.
        :param bluemix_app: The bluemix_app of this ContainersGroupsPostRequiredAttributes.
        :param cmd: The cmd of this ContainersGroupsPostRequiredAttributes.
        :param env: The env of this ContainersGroupsPostRequiredAttributes.
        :param image: The image of this ContainersGroupsPostRequiredAttributes.
        :param memory: The memory of this ContainersGroupsPostRequiredAttributes.
        :param name: The name of this ContainersGroupsPostRequiredAttributes.
        :param number_instances: The number_instances of this ContainersGroupsPostRequiredAttributes.
        :param port: The port of this ContainersGroupsPostRequiredAttributes.
        :param route: The route of this ContainersGroupsPostRequiredAttributes.
        :param volumes: The volumes of this ContainersGroupsPostRequiredAttributes.
        """
        self.openapi_types = {
            'autorecovery': str,
            'bluemix_app': str,
            'cmd': List[str],
            'env': List[str],
            'image': str,
            'memory': int,
            'name': str,
            'number_instances': ContainersGroupsPostRequiredAttributesNumberInstances,
            'port': int,
            'route': ContainersGroupsPostRequiredAttributesRoute,
            'volumes': List[str]
        }

        self.attribute_map = {
            'autorecovery': 'Autorecovery',
            'bluemix_app': 'BluemixApp',
            'cmd': 'Cmd',
            'env': 'Env',
            'image': 'Image',
            'memory': 'Memory',
            'name': 'Name',
            'number_instances': 'NumberInstances',
            'port': 'Port',
            'route': 'Route',
            'volumes': 'Volumes'
        }

        self._autorecovery = autorecovery
        self._bluemix_app = bluemix_app
        self._cmd = cmd
        self._env = env
        self._image = image
        self._memory = memory
        self._name = name
        self._number_instances = number_instances
        self._port = port
        self._route = route
        self._volumes = volumes

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ContainersGroupsPostRequiredAttributes':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ContainersGroupsPostRequiredAttributes of this ContainersGroupsPostRequiredAttributes.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def autorecovery(self):
        """Gets the autorecovery of this ContainersGroupsPostRequiredAttributes.

        (Optional) Enable the Auto-recovery mode for your container group. If set to true, IBM Containers checks the health of each instance with an HTTP request to the port that is assigned. If the health check does not receive a TCP response from a container instance in two subsequent 90-second intervals, the instance is removed and replaced with a new instance. If set to false and container instances crash, they are not recovered by IBM Containers.

        :return: The autorecovery of this ContainersGroupsPostRequiredAttributes.
        :rtype: str
        """
        return self._autorecovery

    @autorecovery.setter
    def autorecovery(self, autorecovery):
        """Sets the autorecovery of this ContainersGroupsPostRequiredAttributes.

        (Optional) Enable the Auto-recovery mode for your container group. If set to true, IBM Containers checks the health of each instance with an HTTP request to the port that is assigned. If the health check does not receive a TCP response from a container instance in two subsequent 90-second intervals, the instance is removed and replaced with a new instance. If set to false and container instances crash, they are not recovered by IBM Containers.

        :param autorecovery: The autorecovery of this ContainersGroupsPostRequiredAttributes.
        :type autorecovery: str
        """

        self._autorecovery = autorecovery

    @property
    def bluemix_app(self):
        """Gets the bluemix_app of this ContainersGroupsPostRequiredAttributes.

        (Optional) The name of the Cloud Foundry app that you created in your organization space.

        :return: The bluemix_app of this ContainersGroupsPostRequiredAttributes.
        :rtype: str
        """
        return self._bluemix_app

    @bluemix_app.setter
    def bluemix_app(self, bluemix_app):
        """Sets the bluemix_app of this ContainersGroupsPostRequiredAttributes.

        (Optional) The name of the Cloud Foundry app that you created in your organization space.

        :param bluemix_app: The bluemix_app of this ContainersGroupsPostRequiredAttributes.
        :type bluemix_app: str
        """

        self._bluemix_app = bluemix_app

    @property
    def cmd(self):
        """Gets the cmd of this ContainersGroupsPostRequiredAttributes.

        (Optional) Docker command that is passed to the container group to be run when the container instances are started. This command must be a long-running command. Do not use a short-lived command, for example, /bin/date, because it might cause the container to crash.

        :return: The cmd of this ContainersGroupsPostRequiredAttributes.
        :rtype: List[str]
        """
        return self._cmd

    @cmd.setter
    def cmd(self, cmd):
        """Sets the cmd of this ContainersGroupsPostRequiredAttributes.

        (Optional) Docker command that is passed to the container group to be run when the container instances are started. This command must be a long-running command. Do not use a short-lived command, for example, /bin/date, because it might cause the container to crash.

        :param cmd: The cmd of this ContainersGroupsPostRequiredAttributes.
        :type cmd: List[str]
        """

        self._cmd = cmd

    @property
    def env(self):
        """Gets the env of this ContainersGroupsPostRequiredAttributes.

        (Optional) List of environmental variables. Every environment variable that is listed here needs to be a key=value pair. Every key that you use needs to be unique for this container group. Multiple environment variables are separated with comma (,).

        :return: The env of this ContainersGroupsPostRequiredAttributes.
        :rtype: List[str]
        """
        return self._env

    @env.setter
    def env(self, env):
        """Sets the env of this ContainersGroupsPostRequiredAttributes.

        (Optional) List of environmental variables. Every environment variable that is listed here needs to be a key=value pair. Every key that you use needs to be unique for this container group. Multiple environment variables are separated with comma (,).

        :param env: The env of this ContainersGroupsPostRequiredAttributes.
        :type env: List[str]
        """

        self._env = env

    @property
    def image(self):
        """Gets the image of this ContainersGroupsPostRequiredAttributes.

        (Required) The full path to your private Bluemix repository. If you want to use an image in your private Bluemix repository, specify the image in the following format: registry.ng.bluemix.net/NAMESPACE/IMAGE. If you want to use an IBM Containers provided image, do not include your organization's namespace. Specify the image in the following format: registry.ng.bluemix.net/IMAGE

        :return: The image of this ContainersGroupsPostRequiredAttributes.
        :rtype: str
        """
        return self._image

    @image.setter
    def image(self, image):
        """Sets the image of this ContainersGroupsPostRequiredAttributes.

        (Required) The full path to your private Bluemix repository. If you want to use an image in your private Bluemix repository, specify the image in the following format: registry.ng.bluemix.net/NAMESPACE/IMAGE. If you want to use an IBM Containers provided image, do not include your organization's namespace. Specify the image in the following format: registry.ng.bluemix.net/IMAGE

        :param image: The image of this ContainersGroupsPostRequiredAttributes.
        :type image: str
        """
        if image is None:
            raise ValueError("Invalid value for `image`, must not be `None`")

        self._image = image

    @property
    def memory(self):
        """Gets the memory of this ContainersGroupsPostRequiredAttributes.

        (Optional) The size of each container instance in the container group. The size of each container instance in the group. Choose one of the following sizes and enter the size in MegaBytes: Pico 64 MB, Nano 128 MB, Micro 256 MB, Tiny 512 MB, Small 1 GB (1024 MB), Medium 2 GB (2048 MB), Large 4 GB (4096 MB) XLarge 8GB (8192 MB) and 2XLarge 16 GB (16384 MB). If you do not specify a size, all container instances in this group are created with 256 MB.

        :return: The memory of this ContainersGroupsPostRequiredAttributes.
        :rtype: int
        """
        return self._memory

    @memory.setter
    def memory(self, memory):
        """Sets the memory of this ContainersGroupsPostRequiredAttributes.

        (Optional) The size of each container instance in the container group. The size of each container instance in the group. Choose one of the following sizes and enter the size in MegaBytes: Pico 64 MB, Nano 128 MB, Micro 256 MB, Tiny 512 MB, Small 1 GB (1024 MB), Medium 2 GB (2048 MB), Large 4 GB (4096 MB) XLarge 8GB (8192 MB) and 2XLarge 16 GB (16384 MB). If you do not specify a size, all container instances in this group are created with 256 MB.

        :param memory: The memory of this ContainersGroupsPostRequiredAttributes.
        :type memory: int
        """

        self._memory = memory

    @property
    def name(self):
        """Gets the name of this ContainersGroupsPostRequiredAttributes.

        (Required) Name of the container group that you want to create. The name needs to be unique in your organization space and must start with a letter. Then, you can include uppercase letters, lowercase letters, numbers, periods (.), underscores (_), or hyphens (-).

        :return: The name of this ContainersGroupsPostRequiredAttributes.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ContainersGroupsPostRequiredAttributes.

        (Required) Name of the container group that you want to create. The name needs to be unique in your organization space and must start with a letter. Then, you can include uppercase letters, lowercase letters, numbers, periods (.), underscores (_), or hyphens (-).

        :param name: The name of this ContainersGroupsPostRequiredAttributes.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name

    @property
    def number_instances(self):
        """Gets the number_instances of this ContainersGroupsPostRequiredAttributes.


        :return: The number_instances of this ContainersGroupsPostRequiredAttributes.
        :rtype: ContainersGroupsPostRequiredAttributesNumberInstances
        """
        return self._number_instances

    @number_instances.setter
    def number_instances(self, number_instances):
        """Sets the number_instances of this ContainersGroupsPostRequiredAttributes.


        :param number_instances: The number_instances of this ContainersGroupsPostRequiredAttributes.
        :type number_instances: ContainersGroupsPostRequiredAttributesNumberInstances
        """

        self._number_instances = number_instances

    @property
    def port(self):
        """Gets the port of this ContainersGroupsPostRequiredAttributes.

        (Optional) Expose a port for HTTP traffic to make your container group available from the Internet. Every container instance that is started for this group, listens on this port. Container groups cannot expose multiple ports. Note: You need to expose a port, when \"Autorecovery\" is set to true.

        :return: The port of this ContainersGroupsPostRequiredAttributes.
        :rtype: int
        """
        return self._port

    @port.setter
    def port(self, port):
        """Sets the port of this ContainersGroupsPostRequiredAttributes.

        (Optional) Expose a port for HTTP traffic to make your container group available from the Internet. Every container instance that is started for this group, listens on this port. Container groups cannot expose multiple ports. Note: You need to expose a port, when \"Autorecovery\" is set to true.

        :param port: The port of this ContainersGroupsPostRequiredAttributes.
        :type port: int
        """

        self._port = port

    @property
    def route(self):
        """Gets the route of this ContainersGroupsPostRequiredAttributes.


        :return: The route of this ContainersGroupsPostRequiredAttributes.
        :rtype: ContainersGroupsPostRequiredAttributesRoute
        """
        return self._route

    @route.setter
    def route(self, route):
        """Sets the route of this ContainersGroupsPostRequiredAttributes.


        :param route: The route of this ContainersGroupsPostRequiredAttributes.
        :type route: ContainersGroupsPostRequiredAttributesRoute
        """

        self._route = route

    @property
    def volumes(self):
        """Gets the volumes of this ContainersGroupsPostRequiredAttributes.

        (Optional) List of volumes to be mounted to the container instances of your container group. You need to create the volume first by using the cf ic volume-create command before you can mount a volume to a container group. When you specify a volume, use the following format: NAME:PATH:MODE. For NAME, use either the name or ID of the volume. For the PATH, enter the absolute path to the volume directory in the container. For MODE, enter either ro (read-only) or rw (read-write).

        :return: The volumes of this ContainersGroupsPostRequiredAttributes.
        :rtype: List[str]
        """
        return self._volumes

    @volumes.setter
    def volumes(self, volumes):
        """Sets the volumes of this ContainersGroupsPostRequiredAttributes.

        (Optional) List of volumes to be mounted to the container instances of your container group. You need to create the volume first by using the cf ic volume-create command before you can mount a volume to a container group. When you specify a volume, use the following format: NAME:PATH:MODE. For NAME, use either the name or ID of the volume. For the PATH, enter the absolute path to the volume directory in the container. For MODE, enter either ro (read-only) or rw (read-write).

        :param volumes: The volumes of this ContainersGroupsPostRequiredAttributes.
        :type volumes: List[str]
        """

        self._volumes = volumes
