# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.containers_groups_name_or_id_get_details_number_instances import ContainersGroupsNameOrIdGetDetailsNumberInstances
from openapi_server.models.containers_groups_name_or_id_get_details_route_status import ContainersGroupsNameOrIdGetDetailsRouteStatus
from openapi_server import util


class ContainersGroupsNameOrIdGetDetails(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, anti_affinity: str=None, autorecovery: str=None, availability_zone: str=None, cmd: List[str]=None, creation_time: str=None, env: List[str]=None, id: str=None, image: str=None, image_name: str=None, memory: int=None, name: str=None, number_instances: ContainersGroupsNameOrIdGetDetailsNumberInstances=None, port: int=None, route_status: ContainersGroupsNameOrIdGetDetailsRouteStatus=None, routes: List[str]=None, status: str=None, updated_time: str=None, volumes: List[str]=None):
        """ContainersGroupsNameOrIdGetDetails - a model defined in OpenAPI

        :param anti_affinity: The anti_affinity of this ContainersGroupsNameOrIdGetDetails.
        :param autorecovery: The autorecovery of this ContainersGroupsNameOrIdGetDetails.
        :param availability_zone: The availability_zone of this ContainersGroupsNameOrIdGetDetails.
        :param cmd: The cmd of this ContainersGroupsNameOrIdGetDetails.
        :param creation_time: The creation_time of this ContainersGroupsNameOrIdGetDetails.
        :param env: The env of this ContainersGroupsNameOrIdGetDetails.
        :param id: The id of this ContainersGroupsNameOrIdGetDetails.
        :param image: The image of this ContainersGroupsNameOrIdGetDetails.
        :param image_name: The image_name of this ContainersGroupsNameOrIdGetDetails.
        :param memory: The memory of this ContainersGroupsNameOrIdGetDetails.
        :param name: The name of this ContainersGroupsNameOrIdGetDetails.
        :param number_instances: The number_instances of this ContainersGroupsNameOrIdGetDetails.
        :param port: The port of this ContainersGroupsNameOrIdGetDetails.
        :param route_status: The route_status of this ContainersGroupsNameOrIdGetDetails.
        :param routes: The routes of this ContainersGroupsNameOrIdGetDetails.
        :param status: The status of this ContainersGroupsNameOrIdGetDetails.
        :param updated_time: The updated_time of this ContainersGroupsNameOrIdGetDetails.
        :param volumes: The volumes of this ContainersGroupsNameOrIdGetDetails.
        """
        self.openapi_types = {
            'anti_affinity': str,
            'autorecovery': str,
            'availability_zone': str,
            'cmd': List[str],
            'creation_time': str,
            'env': List[str],
            'id': str,
            'image': str,
            'image_name': str,
            'memory': int,
            'name': str,
            'number_instances': ContainersGroupsNameOrIdGetDetailsNumberInstances,
            'port': int,
            'route_status': ContainersGroupsNameOrIdGetDetailsRouteStatus,
            'routes': List[str],
            'status': str,
            'updated_time': str,
            'volumes': List[str]
        }

        self.attribute_map = {
            'anti_affinity': 'Anti-affinity',
            'autorecovery': 'Autorecovery',
            'availability_zone': 'AvailabilityZone',
            'cmd': 'Cmd',
            'creation_time': 'Creation_time',
            'env': 'Env',
            'id': 'Id',
            'image': 'Image',
            'image_name': 'ImageName',
            'memory': 'Memory',
            'name': 'Name',
            'number_instances': 'NumberInstances',
            'port': 'Port',
            'route_status': 'Route_Status',
            'routes': 'Routes',
            'status': 'Status',
            'updated_time': 'UpdatedTime',
            'volumes': 'Volumes'
        }

        self._anti_affinity = anti_affinity
        self._autorecovery = autorecovery
        self._availability_zone = availability_zone
        self._cmd = cmd
        self._creation_time = creation_time
        self._env = env
        self._id = id
        self._image = image
        self._image_name = image_name
        self._memory = memory
        self._name = name
        self._number_instances = number_instances
        self._port = port
        self._route_status = route_status
        self._routes = routes
        self._status = status
        self._updated_time = updated_time
        self._volumes = volumes

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ContainersGroupsNameOrIdGetDetails':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ContainersGroupsNameOrIdGetDetails of this ContainersGroupsNameOrIdGetDetails.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def anti_affinity(self):
        """Gets the anti_affinity of this ContainersGroupsNameOrIdGetDetails.

        If set to `true` the container instances in the group are spread across separate physical compute nodes, which reduces the likelihood of containers crashing due to hardware failures. If set to `false`, the container instances in the group share the same physical compute node. 

        :return: The anti_affinity of this ContainersGroupsNameOrIdGetDetails.
        :rtype: str
        """
        return self._anti_affinity

    @anti_affinity.setter
    def anti_affinity(self, anti_affinity):
        """Sets the anti_affinity of this ContainersGroupsNameOrIdGetDetails.

        If set to `true` the container instances in the group are spread across separate physical compute nodes, which reduces the likelihood of containers crashing due to hardware failures. If set to `false`, the container instances in the group share the same physical compute node. 

        :param anti_affinity: The anti_affinity of this ContainersGroupsNameOrIdGetDetails.
        :type anti_affinity: str
        """

        self._anti_affinity = anti_affinity

    @property
    def autorecovery(self):
        """Gets the autorecovery of this ContainersGroupsNameOrIdGetDetails.

        Can be either true or false. If set to true, the Autorecovery mode is enabled for your container group. In case a container instance crashes or stops, this instance is removed and a new one is automatically recreated. If set to false, the Autorecovery mode is disabled. In case a container instances crashes or stops, it is not automatically recreated by IBM Containers.

        :return: The autorecovery of this ContainersGroupsNameOrIdGetDetails.
        :rtype: str
        """
        return self._autorecovery

    @autorecovery.setter
    def autorecovery(self, autorecovery):
        """Sets the autorecovery of this ContainersGroupsNameOrIdGetDetails.

        Can be either true or false. If set to true, the Autorecovery mode is enabled for your container group. In case a container instance crashes or stops, this instance is removed and a new one is automatically recreated. If set to false, the Autorecovery mode is disabled. In case a container instances crashes or stops, it is not automatically recreated by IBM Containers.

        :param autorecovery: The autorecovery of this ContainersGroupsNameOrIdGetDetails.
        :type autorecovery: str
        """

        self._autorecovery = autorecovery

    @property
    def availability_zone(self):
        """Gets the availability_zone of this ContainersGroupsNameOrIdGetDetails.

        Current IBM Containers availability zone on Openstack. 

        :return: The availability_zone of this ContainersGroupsNameOrIdGetDetails.
        :rtype: str
        """
        return self._availability_zone

    @availability_zone.setter
    def availability_zone(self, availability_zone):
        """Sets the availability_zone of this ContainersGroupsNameOrIdGetDetails.

        Current IBM Containers availability zone on Openstack. 

        :param availability_zone: The availability_zone of this ContainersGroupsNameOrIdGetDetails.
        :type availability_zone: str
        """

        self._availability_zone = availability_zone

    @property
    def cmd(self):
        """Gets the cmd of this ContainersGroupsNameOrIdGetDetails.

        The Docker command that was specified to be run when the container instances are started. 

        :return: The cmd of this ContainersGroupsNameOrIdGetDetails.
        :rtype: List[str]
        """
        return self._cmd

    @cmd.setter
    def cmd(self, cmd):
        """Sets the cmd of this ContainersGroupsNameOrIdGetDetails.

        The Docker command that was specified to be run when the container instances are started. 

        :param cmd: The cmd of this ContainersGroupsNameOrIdGetDetails.
        :type cmd: List[str]
        """

        self._cmd = cmd

    @property
    def creation_time(self):
        """Gets the creation_time of this ContainersGroupsNameOrIdGetDetails.

        Timestamp when the container group was created.

        :return: The creation_time of this ContainersGroupsNameOrIdGetDetails.
        :rtype: str
        """
        return self._creation_time

    @creation_time.setter
    def creation_time(self, creation_time):
        """Sets the creation_time of this ContainersGroupsNameOrIdGetDetails.

        Timestamp when the container group was created.

        :param creation_time: The creation_time of this ContainersGroupsNameOrIdGetDetails.
        :type creation_time: str
        """

        self._creation_time = creation_time

    @property
    def env(self):
        """Gets the env of this ContainersGroupsNameOrIdGetDetails.

        The list of environmental variables that were defined for the container group. Each environment variable consists of a unique key and a value.

        :return: The env of this ContainersGroupsNameOrIdGetDetails.
        :rtype: List[str]
        """
        return self._env

    @env.setter
    def env(self, env):
        """Sets the env of this ContainersGroupsNameOrIdGetDetails.

        The list of environmental variables that were defined for the container group. Each environment variable consists of a unique key and a value.

        :param env: The env of this ContainersGroupsNameOrIdGetDetails.
        :type env: List[str]
        """

        self._env = env

    @property
    def id(self):
        """Gets the id of this ContainersGroupsNameOrIdGetDetails.

        Unique identifier representing a specific container group.

        :return: The id of this ContainersGroupsNameOrIdGetDetails.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this ContainersGroupsNameOrIdGetDetails.

        Unique identifier representing a specific container group.

        :param id: The id of this ContainersGroupsNameOrIdGetDetails.
        :type id: str
        """

        self._id = id

    @property
    def image(self):
        """Gets the image of this ContainersGroupsNameOrIdGetDetails.

        The unique ID of the container image your container group instances are based on.

        :return: The image of this ContainersGroupsNameOrIdGetDetails.
        :rtype: str
        """
        return self._image

    @image.setter
    def image(self, image):
        """Sets the image of this ContainersGroupsNameOrIdGetDetails.

        The unique ID of the container image your container group instances are based on.

        :param image: The image of this ContainersGroupsNameOrIdGetDetails.
        :type image: str
        """

        self._image = image

    @property
    def image_name(self):
        """Gets the image_name of this ContainersGroupsNameOrIdGetDetails.

        The full path to the container image in your private Bluemix repository.

        :return: The image_name of this ContainersGroupsNameOrIdGetDetails.
        :rtype: str
        """
        return self._image_name

    @image_name.setter
    def image_name(self, image_name):
        """Sets the image_name of this ContainersGroupsNameOrIdGetDetails.

        The full path to the container image in your private Bluemix repository.

        :param image_name: The image_name of this ContainersGroupsNameOrIdGetDetails.
        :type image_name: str
        """

        self._image_name = image_name

    @property
    def memory(self):
        """Gets the memory of this ContainersGroupsNameOrIdGetDetails.

        The size of each container instance that runs in the container group in MegaByte.

        :return: The memory of this ContainersGroupsNameOrIdGetDetails.
        :rtype: int
        """
        return self._memory

    @memory.setter
    def memory(self, memory):
        """Sets the memory of this ContainersGroupsNameOrIdGetDetails.

        The size of each container instance that runs in the container group in MegaByte.

        :param memory: The memory of this ContainersGroupsNameOrIdGetDetails.
        :type memory: int
        """

        self._memory = memory

    @property
    def name(self):
        """Gets the name of this ContainersGroupsNameOrIdGetDetails.

        The name of the container group.

        :return: The name of this ContainersGroupsNameOrIdGetDetails.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ContainersGroupsNameOrIdGetDetails.

        The name of the container group.

        :param name: The name of this ContainersGroupsNameOrIdGetDetails.
        :type name: str
        """

        self._name = name

    @property
    def number_instances(self):
        """Gets the number_instances of this ContainersGroupsNameOrIdGetDetails.


        :return: The number_instances of this ContainersGroupsNameOrIdGetDetails.
        :rtype: ContainersGroupsNameOrIdGetDetailsNumberInstances
        """
        return self._number_instances

    @number_instances.setter
    def number_instances(self, number_instances):
        """Sets the number_instances of this ContainersGroupsNameOrIdGetDetails.


        :param number_instances: The number_instances of this ContainersGroupsNameOrIdGetDetails.
        :type number_instances: ContainersGroupsNameOrIdGetDetailsNumberInstances
        """

        self._number_instances = number_instances

    @property
    def port(self):
        """Gets the port of this ContainersGroupsNameOrIdGetDetails.

        The public port that has been exposed. If you specified a route, your container group is accessible from the Internet. 

        :return: The port of this ContainersGroupsNameOrIdGetDetails.
        :rtype: int
        """
        return self._port

    @port.setter
    def port(self, port):
        """Sets the port of this ContainersGroupsNameOrIdGetDetails.

        The public port that has been exposed. If you specified a route, your container group is accessible from the Internet. 

        :param port: The port of this ContainersGroupsNameOrIdGetDetails.
        :type port: int
        """

        self._port = port

    @property
    def route_status(self):
        """Gets the route_status of this ContainersGroupsNameOrIdGetDetails.


        :return: The route_status of this ContainersGroupsNameOrIdGetDetails.
        :rtype: ContainersGroupsNameOrIdGetDetailsRouteStatus
        """
        return self._route_status

    @route_status.setter
    def route_status(self, route_status):
        """Sets the route_status of this ContainersGroupsNameOrIdGetDetails.


        :param route_status: The route_status of this ContainersGroupsNameOrIdGetDetails.
        :type route_status: ContainersGroupsNameOrIdGetDetailsRouteStatus
        """

        self._route_status = route_status

    @property
    def routes(self):
        """Gets the routes of this ContainersGroupsNameOrIdGetDetails.

        The public route that is mapped to the container group. When you expose a public port, you can use the route to access your container group from the Internet.

        :return: The routes of this ContainersGroupsNameOrIdGetDetails.
        :rtype: List[str]
        """
        return self._routes

    @routes.setter
    def routes(self, routes):
        """Sets the routes of this ContainersGroupsNameOrIdGetDetails.

        The public route that is mapped to the container group. When you expose a public port, you can use the route to access your container group from the Internet.

        :param routes: The routes of this ContainersGroupsNameOrIdGetDetails.
        :type routes: List[str]
        """

        self._routes = routes

    @property
    def status(self):
        """Gets the status of this ContainersGroupsNameOrIdGetDetails.

        The current status of the container group. The container group status is a composite of ACTION and STATUS:<br><br> ACTIONS = (CREATE, DELETE, UPDATE, ROLLBACK, SUSPEND, RESUME, ADOPT, SNAPSHOT, CHECK, RESTORE)<br><br> STATUSES = (IN_PROGRESS, FAILED, COMPLETE)

        :return: The status of this ContainersGroupsNameOrIdGetDetails.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this ContainersGroupsNameOrIdGetDetails.

        The current status of the container group. The container group status is a composite of ACTION and STATUS:<br><br> ACTIONS = (CREATE, DELETE, UPDATE, ROLLBACK, SUSPEND, RESUME, ADOPT, SNAPSHOT, CHECK, RESTORE)<br><br> STATUSES = (IN_PROGRESS, FAILED, COMPLETE)

        :param status: The status of this ContainersGroupsNameOrIdGetDetails.
        :type status: str
        """

        self._status = status

    @property
    def updated_time(self):
        """Gets the updated_time of this ContainersGroupsNameOrIdGetDetails.

        Timestamp when the container group was updated. If the container group was not updated before, `null` is returned.

        :return: The updated_time of this ContainersGroupsNameOrIdGetDetails.
        :rtype: str
        """
        return self._updated_time

    @updated_time.setter
    def updated_time(self, updated_time):
        """Sets the updated_time of this ContainersGroupsNameOrIdGetDetails.

        Timestamp when the container group was updated. If the container group was not updated before, `null` is returned.

        :param updated_time: The updated_time of this ContainersGroupsNameOrIdGetDetails.
        :type updated_time: str
        """

        self._updated_time = updated_time

    @property
    def volumes(self):
        """Gets the volumes of this ContainersGroupsNameOrIdGetDetails.

        List of volumes to be associated with the container, in the format of volume name:path:mode where mode can be ro or rw.

        :return: The volumes of this ContainersGroupsNameOrIdGetDetails.
        :rtype: List[str]
        """
        return self._volumes

    @volumes.setter
    def volumes(self, volumes):
        """Sets the volumes of this ContainersGroupsNameOrIdGetDetails.

        List of volumes to be associated with the container, in the format of volume name:path:mode where mode can be ro or rw.

        :param volumes: The volumes of this ContainersGroupsNameOrIdGetDetails.
        :type volumes: List[str]
        """

        self._volumes = volumes
