# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class Certificate(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, ca_cert: str=None, server_cert: str=None, user_cert: str=None, user_key: str=None):
        """Certificate - a model defined in OpenAPI

        :param ca_cert: The ca_cert of this Certificate.
        :param server_cert: The server_cert of this Certificate.
        :param user_cert: The user_cert of this Certificate.
        :param user_key: The user_key of this Certificate.
        """
        self.openapi_types = {
            'ca_cert': str,
            'server_cert': str,
            'user_cert': str,
            'user_key': str
        }

        self.attribute_map = {
            'ca_cert': 'ca_cert',
            'server_cert': 'server_cert',
            'user_cert': 'user_cert',
            'user_key': 'user_key'
        }

        self._ca_cert = ca_cert
        self._server_cert = server_cert
        self._user_cert = user_cert
        self._user_key = user_key

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Certificate':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Certificate of this Certificate.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def ca_cert(self):
        """Gets the ca_cert of this Certificate.

        Certificate Authority (CA) certificate including the CA public key.

        :return: The ca_cert of this Certificate.
        :rtype: str
        """
        return self._ca_cert

    @ca_cert.setter
    def ca_cert(self, ca_cert):
        """Sets the ca_cert of this Certificate.

        Certificate Authority (CA) certificate including the CA public key.

        :param ca_cert: The ca_cert of this Certificate.
        :type ca_cert: str
        """
        if ca_cert is None:
            raise ValueError("Invalid value for `ca_cert`, must not be `None`")

        self._ca_cert = ca_cert

    @property
    def server_cert(self):
        """Gets the server_cert of this Certificate.

        Server certificate including the server's public key.

        :return: The server_cert of this Certificate.
        :rtype: str
        """
        return self._server_cert

    @server_cert.setter
    def server_cert(self, server_cert):
        """Sets the server_cert of this Certificate.

        Server certificate including the server's public key.

        :param server_cert: The server_cert of this Certificate.
        :type server_cert: str
        """
        if server_cert is None:
            raise ValueError("Invalid value for `server_cert`, must not be `None`")

        self._server_cert = server_cert

    @property
    def user_cert(self):
        """Gets the user_cert of this Certificate.

        User certificate including the user's public key.

        :return: The user_cert of this Certificate.
        :rtype: str
        """
        return self._user_cert

    @user_cert.setter
    def user_cert(self, user_cert):
        """Sets the user_cert of this Certificate.

        User certificate including the user's public key.

        :param user_cert: The user_cert of this Certificate.
        :type user_cert: str
        """
        if user_cert is None:
            raise ValueError("Invalid value for `user_cert`, must not be `None`")

        self._user_cert = user_cert

    @property
    def user_key(self):
        """Gets the user_key of this Certificate.

        User's private key.

        :return: The user_key of this Certificate.
        :rtype: str
        """
        return self._user_key

    @user_key.setter
    def user_key(self, user_key):
        """Sets the user_key of this Certificate.

        User's private key.

        :param user_key: The user_key of this Certificate.
        :type user_key: str
        """
        if user_key is None:
            raise ValueError("Invalid value for `user_key`, must not be `None`")

        self._user_key = user_key
