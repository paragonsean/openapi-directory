# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ContainersUsageInfoAvailableSizes(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, disk: int=None, id: str=None, memory_mb: int=None, name: str=None, vcpus: int=None):
        """ContainersUsageInfoAvailableSizes - a model defined in OpenAPI

        :param disk: The disk of this ContainersUsageInfoAvailableSizes.
        :param id: The id of this ContainersUsageInfoAvailableSizes.
        :param memory_mb: The memory_mb of this ContainersUsageInfoAvailableSizes.
        :param name: The name of this ContainersUsageInfoAvailableSizes.
        :param vcpus: The vcpus of this ContainersUsageInfoAvailableSizes.
        """
        self.openapi_types = {
            'disk': int,
            'id': str,
            'memory_mb': int,
            'name': str,
            'vcpus': int
        }

        self.attribute_map = {
            'disk': 'disk',
            'id': 'id',
            'memory_mb': 'memory_MB',
            'name': 'name',
            'vcpus': 'vcpus'
        }

        self._disk = disk
        self._id = id
        self._memory_mb = memory_mb
        self._name = name
        self._vcpus = vcpus

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ContainersUsageInfoAvailableSizes':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ContainersUsageInfoAvailableSizes of this ContainersUsageInfoAvailableSizes.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def disk(self):
        """Gets the disk of this ContainersUsageInfoAvailableSizes.

        The amount of disk space on the compute host that is assigned to the container in gigabyte

        :return: The disk of this ContainersUsageInfoAvailableSizes.
        :rtype: int
        """
        return self._disk

    @disk.setter
    def disk(self, disk):
        """Sets the disk of this ContainersUsageInfoAvailableSizes.

        The amount of disk space on the compute host that is assigned to the container in gigabyte

        :param disk: The disk of this ContainersUsageInfoAvailableSizes.
        :type disk: int
        """

        self._disk = disk

    @property
    def id(self):
        """Gets the id of this ContainersUsageInfoAvailableSizes.

        The ID of the container size.

        :return: The id of this ContainersUsageInfoAvailableSizes.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this ContainersUsageInfoAvailableSizes.

        The ID of the container size.

        :param id: The id of this ContainersUsageInfoAvailableSizes.
        :type id: str
        """

        self._id = id

    @property
    def memory_mb(self):
        """Gets the memory_mb of this ContainersUsageInfoAvailableSizes.

        The amount of container memory on the compute host that is assigned to the container in megabyte.

        :return: The memory_mb of this ContainersUsageInfoAvailableSizes.
        :rtype: int
        """
        return self._memory_mb

    @memory_mb.setter
    def memory_mb(self, memory_mb):
        """Sets the memory_mb of this ContainersUsageInfoAvailableSizes.

        The amount of container memory on the compute host that is assigned to the container in megabyte.

        :param memory_mb: The memory_mb of this ContainersUsageInfoAvailableSizes.
        :type memory_mb: int
        """

        self._memory_mb = memory_mb

    @property
    def name(self):
        """Gets the name of this ContainersUsageInfoAvailableSizes.

        The IBM Containers name of the container size.

        :return: The name of this ContainersUsageInfoAvailableSizes.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ContainersUsageInfoAvailableSizes.

        The IBM Containers name of the container size.

        :param name: The name of this ContainersUsageInfoAvailableSizes.
        :type name: str
        """

        self._name = name

    @property
    def vcpus(self):
        """Gets the vcpus of this ContainersUsageInfoAvailableSizes.

        The number of virtual CPUs that can be assigned to the container.

        :return: The vcpus of this ContainersUsageInfoAvailableSizes.
        :rtype: int
        """
        return self._vcpus

    @vcpus.setter
    def vcpus(self, vcpus):
        """Sets the vcpus of this ContainersUsageInfoAvailableSizes.

        The number of virtual CPUs that can be assigned to the container.

        :param vcpus: The vcpus of this ContainersUsageInfoAvailableSizes.
        :type vcpus: int
        """

        self._vcpus = vcpus
