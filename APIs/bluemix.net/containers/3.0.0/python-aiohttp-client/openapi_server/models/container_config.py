# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ContainerConfig(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, args_escaped: bool=None, attach_stderr: str=None, attach_stdin: str=None, attach_stdout: str=None, cmd: List[str]=None, domainname: str=None, env: List[str]=None, exposed_ports: List[str]=None, hostname: str=None, image: str=None, image_architecture: str=None, labels: List[str]=None, memory: int=None, memory_swap: str=None, open_stdin: str=None, port_specs: str=None, stdin_once: str=None, tty: str=None, user: str=None, vcpu: int=None, volumes_from: str=None, working_dir: str=None):
        """ContainerConfig - a model defined in OpenAPI

        :param args_escaped: The args_escaped of this ContainerConfig.
        :param attach_stderr: The attach_stderr of this ContainerConfig.
        :param attach_stdin: The attach_stdin of this ContainerConfig.
        :param attach_stdout: The attach_stdout of this ContainerConfig.
        :param cmd: The cmd of this ContainerConfig.
        :param domainname: The domainname of this ContainerConfig.
        :param env: The env of this ContainerConfig.
        :param exposed_ports: The exposed_ports of this ContainerConfig.
        :param hostname: The hostname of this ContainerConfig.
        :param image: The image of this ContainerConfig.
        :param image_architecture: The image_architecture of this ContainerConfig.
        :param labels: The labels of this ContainerConfig.
        :param memory: The memory of this ContainerConfig.
        :param memory_swap: The memory_swap of this ContainerConfig.
        :param open_stdin: The open_stdin of this ContainerConfig.
        :param port_specs: The port_specs of this ContainerConfig.
        :param stdin_once: The stdin_once of this ContainerConfig.
        :param tty: The tty of this ContainerConfig.
        :param user: The user of this ContainerConfig.
        :param vcpu: The vcpu of this ContainerConfig.
        :param volumes_from: The volumes_from of this ContainerConfig.
        :param working_dir: The working_dir of this ContainerConfig.
        """
        self.openapi_types = {
            'args_escaped': bool,
            'attach_stderr': str,
            'attach_stdin': str,
            'attach_stdout': str,
            'cmd': List[str],
            'domainname': str,
            'env': List[str],
            'exposed_ports': List[str],
            'hostname': str,
            'image': str,
            'image_architecture': str,
            'labels': List[str],
            'memory': int,
            'memory_swap': str,
            'open_stdin': str,
            'port_specs': str,
            'stdin_once': str,
            'tty': str,
            'user': str,
            'vcpu': int,
            'volumes_from': str,
            'working_dir': str
        }

        self.attribute_map = {
            'args_escaped': 'ArgsEscaped',
            'attach_stderr': 'AttachStderr',
            'attach_stdin': 'AttachStdin',
            'attach_stdout': 'AttachStdout',
            'cmd': 'Cmd',
            'domainname': 'Domainname',
            'env': 'Env',
            'exposed_ports': 'ExposedPorts',
            'hostname': 'Hostname',
            'image': 'Image',
            'image_architecture': 'ImageArchitecture',
            'labels': 'Labels',
            'memory': 'Memory',
            'memory_swap': 'MemorySwap',
            'open_stdin': 'OpenStdin',
            'port_specs': 'PortSpecs',
            'stdin_once': 'StdinOnce',
            'tty': 'Tty',
            'user': 'User',
            'vcpu': 'VCPU',
            'volumes_from': 'VolumesFrom',
            'working_dir': 'WorkingDir'
        }

        self._args_escaped = args_escaped
        self._attach_stderr = attach_stderr
        self._attach_stdin = attach_stdin
        self._attach_stdout = attach_stdout
        self._cmd = cmd
        self._domainname = domainname
        self._env = env
        self._exposed_ports = exposed_ports
        self._hostname = hostname
        self._image = image
        self._image_architecture = image_architecture
        self._labels = labels
        self._memory = memory
        self._memory_swap = memory_swap
        self._open_stdin = open_stdin
        self._port_specs = port_specs
        self._stdin_once = stdin_once
        self._tty = tty
        self._user = user
        self._vcpu = vcpu
        self._volumes_from = volumes_from
        self._working_dir = working_dir

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ContainerConfig':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ContainerConfig of this ContainerConfig.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def args_escaped(self):
        """Gets the args_escaped of this ContainerConfig.

        

        :return: The args_escaped of this ContainerConfig.
        :rtype: bool
        """
        return self._args_escaped

    @args_escaped.setter
    def args_escaped(self, args_escaped):
        """Sets the args_escaped of this ContainerConfig.

        

        :param args_escaped: The args_escaped of this ContainerConfig.
        :type args_escaped: bool
        """

        self._args_escaped = args_escaped

    @property
    def attach_stderr(self):
        """Gets the attach_stderr of this ContainerConfig.

        Attaches the container to stderr.

        :return: The attach_stderr of this ContainerConfig.
        :rtype: str
        """
        return self._attach_stderr

    @attach_stderr.setter
    def attach_stderr(self, attach_stderr):
        """Sets the attach_stderr of this ContainerConfig.

        Attaches the container to stderr.

        :param attach_stderr: The attach_stderr of this ContainerConfig.
        :type attach_stderr: str
        """

        self._attach_stderr = attach_stderr

    @property
    def attach_stdin(self):
        """Gets the attach_stdin of this ContainerConfig.

        Attaches the container to sdtin.

        :return: The attach_stdin of this ContainerConfig.
        :rtype: str
        """
        return self._attach_stdin

    @attach_stdin.setter
    def attach_stdin(self, attach_stdin):
        """Sets the attach_stdin of this ContainerConfig.

        Attaches the container to sdtin.

        :param attach_stdin: The attach_stdin of this ContainerConfig.
        :type attach_stdin: str
        """

        self._attach_stdin = attach_stdin

    @property
    def attach_stdout(self):
        """Gets the attach_stdout of this ContainerConfig.

        Attaches the container to stdout.

        :return: The attach_stdout of this ContainerConfig.
        :rtype: str
        """
        return self._attach_stdout

    @attach_stdout.setter
    def attach_stdout(self, attach_stdout):
        """Sets the attach_stdout of this ContainerConfig.

        Attaches the container to stdout.

        :param attach_stdout: The attach_stdout of this ContainerConfig.
        :type attach_stdout: str
        """

        self._attach_stdout = attach_stdout

    @property
    def cmd(self):
        """Gets the cmd of this ContainerConfig.

        The command and arguments in this list are passed to the container to be executed when the container is started. This command must be a long-running command. Do not use a short-lived command, for example, /bin/date, because it might cause the container to crash. <br>Sample long-running commands:<br>[\"ping\",\"localhost\"]<br>[\"tail\",\"-f\",\"/dev/null\"]<br>[\"sh\",\"-c\",\"while true; do date; sleep 20; done\"] 

        :return: The cmd of this ContainerConfig.
        :rtype: List[str]
        """
        return self._cmd

    @cmd.setter
    def cmd(self, cmd):
        """Sets the cmd of this ContainerConfig.

        The command and arguments in this list are passed to the container to be executed when the container is started. This command must be a long-running command. Do not use a short-lived command, for example, /bin/date, because it might cause the container to crash. <br>Sample long-running commands:<br>[\"ping\",\"localhost\"]<br>[\"tail\",\"-f\",\"/dev/null\"]<br>[\"sh\",\"-c\",\"while true; do date; sleep 20; done\"] 

        :param cmd: The cmd of this ContainerConfig.
        :type cmd: List[str]
        """

        self._cmd = cmd

    @property
    def domainname(self):
        """Gets the domainname of this ContainerConfig.

        The domain name to be used for the container.

        :return: The domainname of this ContainerConfig.
        :rtype: str
        """
        return self._domainname

    @domainname.setter
    def domainname(self, domainname):
        """Sets the domainname of this ContainerConfig.

        The domain name to be used for the container.

        :param domainname: The domainname of this ContainerConfig.
        :type domainname: str
        """

        self._domainname = domainname

    @property
    def env(self):
        """Gets the env of this ContainerConfig.

        A list of environment variables in the form of key=value pairs. All keys in this list have to be unique. List multiple keys separately and if you include quotation marks, include them around both the environment variable name and the value.

        :return: The env of this ContainerConfig.
        :rtype: List[str]
        """
        return self._env

    @env.setter
    def env(self, env):
        """Sets the env of this ContainerConfig.

        A list of environment variables in the form of key=value pairs. All keys in this list have to be unique. List multiple keys separately and if you include quotation marks, include them around both the environment variable name and the value.

        :param env: The env of this ContainerConfig.
        :type env: List[str]
        """

        self._env = env

    @property
    def exposed_ports(self):
        """Gets the exposed_ports of this ContainerConfig.

        List of public ports that were exposed during container creation. 

        :return: The exposed_ports of this ContainerConfig.
        :rtype: List[str]
        """
        return self._exposed_ports

    @exposed_ports.setter
    def exposed_ports(self, exposed_ports):
        """Sets the exposed_ports of this ContainerConfig.

        List of public ports that were exposed during container creation. 

        :param exposed_ports: The exposed_ports of this ContainerConfig.
        :type exposed_ports: List[str]
        """

        self._exposed_ports = exposed_ports

    @property
    def hostname(self):
        """Gets the hostname of this ContainerConfig.

        The host name to be used for the container.

        :return: The hostname of this ContainerConfig.
        :rtype: str
        """
        return self._hostname

    @hostname.setter
    def hostname(self, hostname):
        """Sets the hostname of this ContainerConfig.

        The host name to be used for the container.

        :param hostname: The hostname of this ContainerConfig.
        :type hostname: str
        """

        self._hostname = hostname

    @property
    def image(self):
        """Gets the image of this ContainerConfig.

        Full path to the image that the container is based on in your private Bluemix registry.

        :return: The image of this ContainerConfig.
        :rtype: str
        """
        return self._image

    @image.setter
    def image(self, image):
        """Sets the image of this ContainerConfig.

        Full path to the image that the container is based on in your private Bluemix registry.

        :param image: The image of this ContainerConfig.
        :type image: str
        """

        self._image = image

    @property
    def image_architecture(self):
        """Gets the image_architecture of this ContainerConfig.

        The hardware architecture the image is based on. It can either be 'amd64' indicating an Intel-based architecture, or 'ppc64le' representing a Power-based architecture.

        :return: The image_architecture of this ContainerConfig.
        :rtype: str
        """
        return self._image_architecture

    @image_architecture.setter
    def image_architecture(self, image_architecture):
        """Sets the image_architecture of this ContainerConfig.

        The hardware architecture the image is based on. It can either be 'amd64' indicating an Intel-based architecture, or 'ppc64le' representing a Power-based architecture.

        :param image_architecture: The image_architecture of this ContainerConfig.
        :type image_architecture: str
        """

        self._image_architecture = image_architecture

    @property
    def labels(self):
        """Gets the labels of this ContainerConfig.

        List of custom metadata that was added to the container. Labels serve a wide range of uses, such as adding notes to a container. Every label is a key/ value pair.

        :return: The labels of this ContainerConfig.
        :rtype: List[str]
        """
        return self._labels

    @labels.setter
    def labels(self, labels):
        """Sets the labels of this ContainerConfig.

        List of custom metadata that was added to the container. Labels serve a wide range of uses, such as adding notes to a container. Every label is a key/ value pair.

        :param labels: The labels of this ContainerConfig.
        :type labels: List[str]
        """

        self._labels = labels

    @property
    def memory(self):
        """Gets the memory of this ContainerConfig.

        The amount of container memory that is assigned to the container in Megabyte.

        :return: The memory of this ContainerConfig.
        :rtype: int
        """
        return self._memory

    @memory.setter
    def memory(self, memory):
        """Sets the memory of this ContainerConfig.

        The amount of container memory that is assigned to the container in Megabyte.

        :param memory: The memory of this ContainerConfig.
        :type memory: int
        """

        self._memory = memory

    @property
    def memory_swap(self):
        """Gets the memory_swap of this ContainerConfig.

        The total container memory limit (memory + swap)

        :return: The memory_swap of this ContainerConfig.
        :rtype: str
        """
        return self._memory_swap

    @memory_swap.setter
    def memory_swap(self, memory_swap):
        """Sets the memory_swap of this ContainerConfig.

        The total container memory limit (memory + swap)

        :param memory_swap: The memory_swap of this ContainerConfig.
        :type memory_swap: str
        """

        self._memory_swap = memory_swap

    @property
    def open_stdin(self):
        """Gets the open_stdin of this ContainerConfig.

        When set to true, it opens stdin. 

        :return: The open_stdin of this ContainerConfig.
        :rtype: str
        """
        return self._open_stdin

    @open_stdin.setter
    def open_stdin(self, open_stdin):
        """Sets the open_stdin of this ContainerConfig.

        When set to true, it opens stdin. 

        :param open_stdin: The open_stdin of this ContainerConfig.
        :type open_stdin: str
        """

        self._open_stdin = open_stdin

    @property
    def port_specs(self):
        """Gets the port_specs of this ContainerConfig.

        Not supported by IBM Containers, empty string.

        :return: The port_specs of this ContainerConfig.
        :rtype: str
        """
        return self._port_specs

    @port_specs.setter
    def port_specs(self, port_specs):
        """Sets the port_specs of this ContainerConfig.

        Not supported by IBM Containers, empty string.

        :param port_specs: The port_specs of this ContainerConfig.
        :type port_specs: str
        """

        self._port_specs = port_specs

    @property
    def stdin_once(self):
        """Gets the stdin_once of this ContainerConfig.

        When set to true it closes stdin after the attached client disconnects.

        :return: The stdin_once of this ContainerConfig.
        :rtype: str
        """
        return self._stdin_once

    @stdin_once.setter
    def stdin_once(self, stdin_once):
        """Sets the stdin_once of this ContainerConfig.

        When set to true it closes stdin after the attached client disconnects.

        :param stdin_once: The stdin_once of this ContainerConfig.
        :type stdin_once: str
        """

        self._stdin_once = stdin_once

    @property
    def tty(self):
        """Gets the tty of this ContainerConfig.

        When set to true, attach standard streams to a tty, including stdin if it is not closed.

        :return: The tty of this ContainerConfig.
        :rtype: str
        """
        return self._tty

    @tty.setter
    def tty(self, tty):
        """Sets the tty of this ContainerConfig.

        When set to true, attach standard streams to a tty, including stdin if it is not closed.

        :param tty: The tty of this ContainerConfig.
        :type tty: str
        """

        self._tty = tty

    @property
    def user(self):
        """Gets the user of this ContainerConfig.

        User to be used inside the container.

        :return: The user of this ContainerConfig.
        :rtype: str
        """
        return self._user

    @user.setter
    def user(self, user):
        """Sets the user of this ContainerConfig.

        User to be used inside the container.

        :param user: The user of this ContainerConfig.
        :type user: str
        """

        self._user = user

    @property
    def vcpu(self):
        """Gets the vcpu of this ContainerConfig.

        Number of virtual CPUs that are assigned to the container.

        :return: The vcpu of this ContainerConfig.
        :rtype: int
        """
        return self._vcpu

    @vcpu.setter
    def vcpu(self, vcpu):
        """Sets the vcpu of this ContainerConfig.

        Number of virtual CPUs that are assigned to the container.

        :param vcpu: The vcpu of this ContainerConfig.
        :type vcpu: int
        """

        self._vcpu = vcpu

    @property
    def volumes_from(self):
        """Gets the volumes_from of this ContainerConfig.

        List of volumes to inherit from another container. This feature is not supported in IBM Containers.

        :return: The volumes_from of this ContainerConfig.
        :rtype: str
        """
        return self._volumes_from

    @volumes_from.setter
    def volumes_from(self, volumes_from):
        """Sets the volumes_from of this ContainerConfig.

        List of volumes to inherit from another container. This feature is not supported in IBM Containers.

        :param volumes_from: The volumes_from of this ContainerConfig.
        :type volumes_from: str
        """

        self._volumes_from = volumes_from

    @property
    def working_dir(self):
        """Gets the working_dir of this ContainerConfig.

        The working directory inside the container where specified commands are executed. 

        :return: The working_dir of this ContainerConfig.
        :rtype: str
        """
        return self._working_dir

    @working_dir.setter
    def working_dir(self, working_dir):
        """Sets the working_dir of this ContainerConfig.

        The working directory inside the container where specified commands are executed. 

        :param working_dir: The working_dir of this ContainerConfig.
        :type working_dir: str
        """

        self._working_dir = working_dir
