# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class UpdateVolume(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, add_spaces: List[str]=None, remove_spaces: List[str]=None):
        """UpdateVolume - a model defined in OpenAPI

        :param add_spaces: The add_spaces of this UpdateVolume.
        :param remove_spaces: The remove_spaces of this UpdateVolume.
        """
        self.openapi_types = {
            'add_spaces': List[str],
            'remove_spaces': List[str]
        }

        self.attribute_map = {
            'add_spaces': 'addSpaces',
            'remove_spaces': 'removeSpaces'
        }

        self._add_spaces = add_spaces
        self._remove_spaces = remove_spaces

    @classmethod
    def from_dict(cls, dikt: dict) -> 'UpdateVolume':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The UpdateVolume of this UpdateVolume.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def add_spaces(self):
        """Gets the add_spaces of this UpdateVolume.

        The name or ID of the space where you want to provision your existing volume. Run `cf spaces` to retrieve the name, or `cf space <space_name> --guid` to retrieve the space ID. 

        :return: The add_spaces of this UpdateVolume.
        :rtype: List[str]
        """
        return self._add_spaces

    @add_spaces.setter
    def add_spaces(self, add_spaces):
        """Sets the add_spaces of this UpdateVolume.

        The name or ID of the space where you want to provision your existing volume. Run `cf spaces` to retrieve the name, or `cf space <space_name> --guid` to retrieve the space ID. 

        :param add_spaces: The add_spaces of this UpdateVolume.
        :type add_spaces: List[str]
        """

        self._add_spaces = add_spaces

    @property
    def remove_spaces(self):
        """Gets the remove_spaces of this UpdateVolume.

        The name or ID of the space from which you want to unprovision your existing volume. Run `cf spaces` to retrieve the name, or `cf space <space_name> --guid` to retrieve the space ID.

        :return: The remove_spaces of this UpdateVolume.
        :rtype: List[str]
        """
        return self._remove_spaces

    @remove_spaces.setter
    def remove_spaces(self, remove_spaces):
        """Sets the remove_spaces of this UpdateVolume.

        The name or ID of the space from which you want to unprovision your existing volume. Run `cf spaces` to retrieve the name, or `cf space <space_name> --guid` to retrieve the space ID.

        :param remove_spaces: The remove_spaces of this UpdateVolume.
        :type remove_spaces: List[str]
        """

        self._remove_spaces = remove_spaces
