# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ContainersQuotaInfoOrgQuota(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, floating_ips_max: str=None, floating_ips_space_default: str=None, floating_ips_usage: int=None, ram_max: int=None, ram_space_default: int=None, ram_usage: int=None, subnet_usage: int=None, subnets_default: int=None, subnets_max: int=None):
        """ContainersQuotaInfoOrgQuota - a model defined in OpenAPI

        :param floating_ips_max: The floating_ips_max of this ContainersQuotaInfoOrgQuota.
        :param floating_ips_space_default: The floating_ips_space_default of this ContainersQuotaInfoOrgQuota.
        :param floating_ips_usage: The floating_ips_usage of this ContainersQuotaInfoOrgQuota.
        :param ram_max: The ram_max of this ContainersQuotaInfoOrgQuota.
        :param ram_space_default: The ram_space_default of this ContainersQuotaInfoOrgQuota.
        :param ram_usage: The ram_usage of this ContainersQuotaInfoOrgQuota.
        :param subnet_usage: The subnet_usage of this ContainersQuotaInfoOrgQuota.
        :param subnets_default: The subnets_default of this ContainersQuotaInfoOrgQuota.
        :param subnets_max: The subnets_max of this ContainersQuotaInfoOrgQuota.
        """
        self.openapi_types = {
            'floating_ips_max': str,
            'floating_ips_space_default': str,
            'floating_ips_usage': int,
            'ram_max': int,
            'ram_space_default': int,
            'ram_usage': int,
            'subnet_usage': int,
            'subnets_default': int,
            'subnets_max': int
        }

        self.attribute_map = {
            'floating_ips_max': 'floating_ips_max',
            'floating_ips_space_default': 'floating_ips_space_default',
            'floating_ips_usage': 'floating_ips_usage',
            'ram_max': 'ram_max',
            'ram_space_default': 'ram_space_default',
            'ram_usage': 'ram_usage',
            'subnet_usage': 'subnet_usage',
            'subnets_default': 'subnets_default',
            'subnets_max': 'subnets_max'
        }

        self._floating_ips_max = floating_ips_max
        self._floating_ips_space_default = floating_ips_space_default
        self._floating_ips_usage = floating_ips_usage
        self._ram_max = ram_max
        self._ram_space_default = ram_space_default
        self._ram_usage = ram_usage
        self._subnet_usage = subnet_usage
        self._subnets_default = subnets_default
        self._subnets_max = subnets_max

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ContainersQuotaInfoOrgQuota':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ContainersQuotaInfo_org_quota of this ContainersQuotaInfoOrgQuota.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def floating_ips_max(self):
        """Gets the floating_ips_max of this ContainersQuotaInfoOrgQuota.

        The number of public IP addresses that can be assigned across all spaces of the organization.

        :return: The floating_ips_max of this ContainersQuotaInfoOrgQuota.
        :rtype: str
        """
        return self._floating_ips_max

    @floating_ips_max.setter
    def floating_ips_max(self, floating_ips_max):
        """Sets the floating_ips_max of this ContainersQuotaInfoOrgQuota.

        The number of public IP addresses that can be assigned across all spaces of the organization.

        :param floating_ips_max: The floating_ips_max of this ContainersQuotaInfoOrgQuota.
        :type floating_ips_max: str
        """

        self._floating_ips_max = floating_ips_max

    @property
    def floating_ips_space_default(self):
        """Gets the floating_ips_space_default of this ContainersQuotaInfoOrgQuota.

        The number of public IP addresses that are required for one space. If the number of public IP addresses is not available, then a new space cannot be created to be used with IBM Containers. 

        :return: The floating_ips_space_default of this ContainersQuotaInfoOrgQuota.
        :rtype: str
        """
        return self._floating_ips_space_default

    @floating_ips_space_default.setter
    def floating_ips_space_default(self, floating_ips_space_default):
        """Sets the floating_ips_space_default of this ContainersQuotaInfoOrgQuota.

        The number of public IP addresses that are required for one space. If the number of public IP addresses is not available, then a new space cannot be created to be used with IBM Containers. 

        :param floating_ips_space_default: The floating_ips_space_default of this ContainersQuotaInfoOrgQuota.
        :type floating_ips_space_default: str
        """

        self._floating_ips_space_default = floating_ips_space_default

    @property
    def floating_ips_usage(self):
        """Gets the floating_ips_usage of this ContainersQuotaInfoOrgQuota.

        The number of public IP addresses that are currently assigned to the spaces of the organization.

        :return: The floating_ips_usage of this ContainersQuotaInfoOrgQuota.
        :rtype: int
        """
        return self._floating_ips_usage

    @floating_ips_usage.setter
    def floating_ips_usage(self, floating_ips_usage):
        """Sets the floating_ips_usage of this ContainersQuotaInfoOrgQuota.

        The number of public IP addresses that are currently assigned to the spaces of the organization.

        :param floating_ips_usage: The floating_ips_usage of this ContainersQuotaInfoOrgQuota.
        :type floating_ips_usage: int
        """

        self._floating_ips_usage = floating_ips_usage

    @property
    def ram_max(self):
        """Gets the ram_max of this ContainersQuotaInfoOrgQuota.

        The maximum amount of container memory on the compute host that can be assigned across the spaces of the organization.

        :return: The ram_max of this ContainersQuotaInfoOrgQuota.
        :rtype: int
        """
        return self._ram_max

    @ram_max.setter
    def ram_max(self, ram_max):
        """Sets the ram_max of this ContainersQuotaInfoOrgQuota.

        The maximum amount of container memory on the compute host that can be assigned across the spaces of the organization.

        :param ram_max: The ram_max of this ContainersQuotaInfoOrgQuota.
        :type ram_max: int
        """

        self._ram_max = ram_max

    @property
    def ram_space_default(self):
        """Gets the ram_space_default of this ContainersQuotaInfoOrgQuota.

        The amount of container memory that is required to be used for one space. If this amount is not available, then a new space cannot be created to be used with IBM Containers. 

        :return: The ram_space_default of this ContainersQuotaInfoOrgQuota.
        :rtype: int
        """
        return self._ram_space_default

    @ram_space_default.setter
    def ram_space_default(self, ram_space_default):
        """Sets the ram_space_default of this ContainersQuotaInfoOrgQuota.

        The amount of container memory that is required to be used for one space. If this amount is not available, then a new space cannot be created to be used with IBM Containers. 

        :param ram_space_default: The ram_space_default of this ContainersQuotaInfoOrgQuota.
        :type ram_space_default: int
        """

        self._ram_space_default = ram_space_default

    @property
    def ram_usage(self):
        """Gets the ram_usage of this ContainersQuotaInfoOrgQuota.

        The amount of container memory that is currently used across all spaces of the organization.

        :return: The ram_usage of this ContainersQuotaInfoOrgQuota.
        :rtype: int
        """
        return self._ram_usage

    @ram_usage.setter
    def ram_usage(self, ram_usage):
        """Sets the ram_usage of this ContainersQuotaInfoOrgQuota.

        The amount of container memory that is currently used across all spaces of the organization.

        :param ram_usage: The ram_usage of this ContainersQuotaInfoOrgQuota.
        :type ram_usage: int
        """

        self._ram_usage = ram_usage

    @property
    def subnet_usage(self):
        """Gets the subnet_usage of this ContainersQuotaInfoOrgQuota.

        The number of subnets that were created across all spaces of the organization.

        :return: The subnet_usage of this ContainersQuotaInfoOrgQuota.
        :rtype: int
        """
        return self._subnet_usage

    @subnet_usage.setter
    def subnet_usage(self, subnet_usage):
        """Sets the subnet_usage of this ContainersQuotaInfoOrgQuota.

        The number of subnets that were created across all spaces of the organization.

        :param subnet_usage: The subnet_usage of this ContainersQuotaInfoOrgQuota.
        :type subnet_usage: int
        """

        self._subnet_usage = subnet_usage

    @property
    def subnets_default(self):
        """Gets the subnets_default of this ContainersQuotaInfoOrgQuota.

        The number of subnets that is required to create a new space. If this number is not available, then a new space cannot be created to be used with IBM Containers.

        :return: The subnets_default of this ContainersQuotaInfoOrgQuota.
        :rtype: int
        """
        return self._subnets_default

    @subnets_default.setter
    def subnets_default(self, subnets_default):
        """Sets the subnets_default of this ContainersQuotaInfoOrgQuota.

        The number of subnets that is required to create a new space. If this number is not available, then a new space cannot be created to be used with IBM Containers.

        :param subnets_default: The subnets_default of this ContainersQuotaInfoOrgQuota.
        :type subnets_default: int
        """

        self._subnets_default = subnets_default

    @property
    def subnets_max(self):
        """Gets the subnets_max of this ContainersQuotaInfoOrgQuota.

        The maximum number of container private subnet that can be created across all spaces of the organization.

        :return: The subnets_max of this ContainersQuotaInfoOrgQuota.
        :rtype: int
        """
        return self._subnets_max

    @subnets_max.setter
    def subnets_max(self, subnets_max):
        """Sets the subnets_max of this ContainersQuotaInfoOrgQuota.

        The maximum number of container private subnet that can be created across all spaces of the organization.

        :param subnets_max: The subnets_max of this ContainersQuotaInfoOrgQuota.
        :type subnets_max: int
        """

        self._subnets_max = subnets_max
