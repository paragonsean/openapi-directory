# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.containers_usage_info_available_sizes import ContainersUsageInfoAvailableSizes
from openapi_server.models.containers_usage_info_limits import ContainersUsageInfoLimits
from openapi_server.models.containers_usage_info_usage import ContainersUsageInfoUsage
from openapi_server import util


class ContainersUsageInfo(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, available_sizes: List[ContainersUsageInfoAvailableSizes]=None, environment: str=None, limits: ContainersUsageInfoLimits=None, usage: ContainersUsageInfoUsage=None):
        """ContainersUsageInfo - a model defined in OpenAPI

        :param available_sizes: The available_sizes of this ContainersUsageInfo.
        :param environment: The environment of this ContainersUsageInfo.
        :param limits: The limits of this ContainersUsageInfo.
        :param usage: The usage of this ContainersUsageInfo.
        """
        self.openapi_types = {
            'available_sizes': List[ContainersUsageInfoAvailableSizes],
            'environment': str,
            'limits': ContainersUsageInfoLimits,
            'usage': ContainersUsageInfoUsage
        }

        self.attribute_map = {
            'available_sizes': 'AvailableSizes',
            'environment': 'Environment',
            'limits': 'Limits',
            'usage': 'Usage'
        }

        self._available_sizes = available_sizes
        self._environment = environment
        self._limits = limits
        self._usage = usage

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ContainersUsageInfo':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ContainersUsageInfo of this ContainersUsageInfo.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def available_sizes(self):
        """Gets the available_sizes of this ContainersUsageInfo.


        :return: The available_sizes of this ContainersUsageInfo.
        :rtype: List[ContainersUsageInfoAvailableSizes]
        """
        return self._available_sizes

    @available_sizes.setter
    def available_sizes(self, available_sizes):
        """Sets the available_sizes of this ContainersUsageInfo.


        :param available_sizes: The available_sizes of this ContainersUsageInfo.
        :type available_sizes: List[ContainersUsageInfoAvailableSizes]
        """

        self._available_sizes = available_sizes

    @property
    def environment(self):
        """Gets the environment of this ContainersUsageInfo.

        The IBM Containers machine where the space is located

        :return: The environment of this ContainersUsageInfo.
        :rtype: str
        """
        return self._environment

    @environment.setter
    def environment(self, environment):
        """Sets the environment of this ContainersUsageInfo.

        The IBM Containers machine where the space is located

        :param environment: The environment of this ContainersUsageInfo.
        :type environment: str
        """

        self._environment = environment

    @property
    def limits(self):
        """Gets the limits of this ContainersUsageInfo.


        :return: The limits of this ContainersUsageInfo.
        :rtype: ContainersUsageInfoLimits
        """
        return self._limits

    @limits.setter
    def limits(self, limits):
        """Sets the limits of this ContainersUsageInfo.


        :param limits: The limits of this ContainersUsageInfo.
        :type limits: ContainersUsageInfoLimits
        """

        self._limits = limits

    @property
    def usage(self):
        """Gets the usage of this ContainersUsageInfo.


        :return: The usage of this ContainersUsageInfo.
        :rtype: ContainersUsageInfoUsage
        """
        return self._usage

    @usage.setter
    def usage(self, usage):
        """Sets the usage of this ContainersUsageInfo.


        :param usage: The usage of this ContainersUsageInfo.
        :type usage: ContainersUsageInfoUsage
        """

        self._usage = usage
