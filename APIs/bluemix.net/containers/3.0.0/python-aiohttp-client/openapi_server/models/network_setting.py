# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.network import Network
from openapi_server import util


class NetworkSetting(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, bridge: str=None, gateway: str=None, ip_address: str=None, ip_prefix_len: int=None, mac_address: str=None, network: Network=None, port_mapping: str=None, ports: List[str]=None, public_ip_address: str=None):
        """NetworkSetting - a model defined in OpenAPI

        :param bridge: The bridge of this NetworkSetting.
        :param gateway: The gateway of this NetworkSetting.
        :param ip_address: The ip_address of this NetworkSetting.
        :param ip_prefix_len: The ip_prefix_len of this NetworkSetting.
        :param mac_address: The mac_address of this NetworkSetting.
        :param network: The network of this NetworkSetting.
        :param port_mapping: The port_mapping of this NetworkSetting.
        :param ports: The ports of this NetworkSetting.
        :param public_ip_address: The public_ip_address of this NetworkSetting.
        """
        self.openapi_types = {
            'bridge': str,
            'gateway': str,
            'ip_address': str,
            'ip_prefix_len': int,
            'mac_address': str,
            'network': Network,
            'port_mapping': str,
            'ports': List[str],
            'public_ip_address': str
        }

        self.attribute_map = {
            'bridge': 'Bridge',
            'gateway': 'Gateway',
            'ip_address': 'IpAddress',
            'ip_prefix_len': 'IpPrefixLen',
            'mac_address': 'MacAddress',
            'network': 'Network',
            'port_mapping': 'PortMapping',
            'ports': 'Ports',
            'public_ip_address': 'PublicIpAddress'
        }

        self._bridge = bridge
        self._gateway = gateway
        self._ip_address = ip_address
        self._ip_prefix_len = ip_prefix_len
        self._mac_address = mac_address
        self._network = network
        self._port_mapping = port_mapping
        self._ports = ports
        self._public_ip_address = public_ip_address

    @classmethod
    def from_dict(cls, dikt: dict) -> 'NetworkSetting':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The NetworkSetting of this NetworkSetting.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def bridge(self):
        """Gets the bridge of this NetworkSetting.

        The name of the private network bridge.

        :return: The bridge of this NetworkSetting.
        :rtype: str
        """
        return self._bridge

    @bridge.setter
    def bridge(self, bridge):
        """Sets the bridge of this NetworkSetting.

        The name of the private network bridge.

        :param bridge: The bridge of this NetworkSetting.
        :type bridge: str
        """

        self._bridge = bridge

    @property
    def gateway(self):
        """Gets the gateway of this NetworkSetting.

        The IP address of the private network gateway in IPv4 format.

        :return: The gateway of this NetworkSetting.
        :rtype: str
        """
        return self._gateway

    @gateway.setter
    def gateway(self, gateway):
        """Sets the gateway of this NetworkSetting.

        The IP address of the private network gateway in IPv4 format.

        :param gateway: The gateway of this NetworkSetting.
        :type gateway: str
        """

        self._gateway = gateway

    @property
    def ip_address(self):
        """Gets the ip_address of this NetworkSetting.

        The private IP address that is assigned to the container.

        :return: The ip_address of this NetworkSetting.
        :rtype: str
        """
        return self._ip_address

    @ip_address.setter
    def ip_address(self, ip_address):
        """Sets the ip_address of this NetworkSetting.

        The private IP address that is assigned to the container.

        :param ip_address: The ip_address of this NetworkSetting.
        :type ip_address: str
        """
        if ip_address is None:
            raise ValueError("Invalid value for `ip_address`, must not be `None`")

        self._ip_address = ip_address

    @property
    def ip_prefix_len(self):
        """Gets the ip_prefix_len of this NetworkSetting.

        

        :return: The ip_prefix_len of this NetworkSetting.
        :rtype: int
        """
        return self._ip_prefix_len

    @ip_prefix_len.setter
    def ip_prefix_len(self, ip_prefix_len):
        """Sets the ip_prefix_len of this NetworkSetting.

        

        :param ip_prefix_len: The ip_prefix_len of this NetworkSetting.
        :type ip_prefix_len: int
        """

        self._ip_prefix_len = ip_prefix_len

    @property
    def mac_address(self):
        """Gets the mac_address of this NetworkSetting.

        The MAC address that was assigned to the container. 

        :return: The mac_address of this NetworkSetting.
        :rtype: str
        """
        return self._mac_address

    @mac_address.setter
    def mac_address(self, mac_address):
        """Sets the mac_address of this NetworkSetting.

        The MAC address that was assigned to the container. 

        :param mac_address: The mac_address of this NetworkSetting.
        :type mac_address: str
        """

        self._mac_address = mac_address

    @property
    def network(self):
        """Gets the network of this NetworkSetting.


        :return: The network of this NetworkSetting.
        :rtype: Network
        """
        return self._network

    @network.setter
    def network(self, network):
        """Sets the network of this NetworkSetting.


        :param network: The network of this NetworkSetting.
        :type network: Network
        """

        self._network = network

    @property
    def port_mapping(self):
        """Gets the port_mapping of this NetworkSetting.

        Specific to Docker. List of private container ports and their mapping to the host ports. In IBM Containers all container ports are exposed on the host by default. This attribute is returned as an empty list. 

        :return: The port_mapping of this NetworkSetting.
        :rtype: str
        """
        return self._port_mapping

    @port_mapping.setter
    def port_mapping(self, port_mapping):
        """Sets the port_mapping of this NetworkSetting.

        Specific to Docker. List of private container ports and their mapping to the host ports. In IBM Containers all container ports are exposed on the host by default. This attribute is returned as an empty list. 

        :param port_mapping: The port_mapping of this NetworkSetting.
        :type port_mapping: str
        """

        self._port_mapping = port_mapping

    @property
    def ports(self):
        """Gets the ports of this NetworkSetting.

        All ports of the container that were exposed to the public.

        :return: The ports of this NetworkSetting.
        :rtype: List[str]
        """
        return self._ports

    @ports.setter
    def ports(self, ports):
        """Sets the ports of this NetworkSetting.

        All ports of the container that were exposed to the public.

        :param ports: The ports of this NetworkSetting.
        :type ports: List[str]
        """

        self._ports = ports

    @property
    def public_ip_address(self):
        """Gets the public_ip_address of this NetworkSetting.

        The Public IP address that was bound to the container.

        :return: The public_ip_address of this NetworkSetting.
        :rtype: str
        """
        return self._public_ip_address

    @public_ip_address.setter
    def public_ip_address(self, public_ip_address):
        """Sets the public_ip_address of this NetworkSetting.

        The Public IP address that was bound to the container.

        :param public_ip_address: The public_ip_address of this NetworkSetting.
        :type public_ip_address: str
        """
        if public_ip_address is None:
            raise ValueError("Invalid value for `public_ip_address`, must not be `None`")

        self._public_ip_address = public_ip_address
