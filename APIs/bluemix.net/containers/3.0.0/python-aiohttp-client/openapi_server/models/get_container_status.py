# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class GetContainerStatus(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, name_or_id: str=None, status: str=None, transient: bool=None):
        """GetContainerStatus - a model defined in OpenAPI

        :param name_or_id: The name_or_id of this GetContainerStatus.
        :param status: The status of this GetContainerStatus.
        :param transient: The transient of this GetContainerStatus.
        """
        self.openapi_types = {
            'name_or_id': str,
            'status': str,
            'transient': bool
        }

        self.attribute_map = {
            'name_or_id': 'NameOrId',
            'status': 'Status',
            'transient': 'Transient'
        }

        self._name_or_id = name_or_id
        self._status = status
        self._transient = transient

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GetContainerStatus':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The getContainerStatus of this GetContainerStatus.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def name_or_id(self):
        """Gets the name_or_id of this GetContainerStatus.

        The unique identifier of the container. 

        :return: The name_or_id of this GetContainerStatus.
        :rtype: str
        """
        return self._name_or_id

    @name_or_id.setter
    def name_or_id(self, name_or_id):
        """Sets the name_or_id of this GetContainerStatus.

        The unique identifier of the container. 

        :param name_or_id: The name_or_id of this GetContainerStatus.
        :type name_or_id: str
        """
        if name_or_id is None:
            raise ValueError("Invalid value for `name_or_id`, must not be `None`")

        self._name_or_id = name_or_id

    @property
    def status(self):
        """Gets the status of this GetContainerStatus.

        The current status of the container. The status can either be a transient one, such as BUILDING or NETWORKING, or a non-transient one, such as RUNNING, SHUTDOWN, CRASHED, or SUSPENDED. 

        :return: The status of this GetContainerStatus.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this GetContainerStatus.

        The current status of the container. The status can either be a transient one, such as BUILDING or NETWORKING, or a non-transient one, such as RUNNING, SHUTDOWN, CRASHED, or SUSPENDED. 

        :param status: The status of this GetContainerStatus.
        :type status: str
        """

        self._status = status

    @property
    def transient(self):
        """Gets the transient of this GetContainerStatus.

        When set to true, the current container state is temporary and will change soon. An example for a transient state is the BUILDING state. A container that is created will be set to the BUILDING state until all container layers are created and the container is started. When set to false, the container state is permanent, such as CRASHED.

        :return: The transient of this GetContainerStatus.
        :rtype: bool
        """
        return self._transient

    @transient.setter
    def transient(self, transient):
        """Sets the transient of this GetContainerStatus.

        When set to true, the current container state is temporary and will change soon. An example for a transient state is the BUILDING state. A container that is created will be set to the BUILDING state until all container layers are created and the container is started. When set to false, the container state is permanent, such as CRASHED.

        :param transient: The transient of this GetContainerStatus.
        :type transient: bool
        """

        self._transient = transient
