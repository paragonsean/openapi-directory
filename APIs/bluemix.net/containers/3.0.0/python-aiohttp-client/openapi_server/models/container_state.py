# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ContainerState(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, exit_code: str=None, finished_at: str=None, ghost: str=None, pid: int=None, running: bool=None, started_at: str=None, status: str=None):
        """ContainerState - a model defined in OpenAPI

        :param exit_code: The exit_code of this ContainerState.
        :param finished_at: The finished_at of this ContainerState.
        :param ghost: The ghost of this ContainerState.
        :param pid: The pid of this ContainerState.
        :param running: The running of this ContainerState.
        :param started_at: The started_at of this ContainerState.
        :param status: The status of this ContainerState.
        """
        self.openapi_types = {
            'exit_code': str,
            'finished_at': str,
            'ghost': str,
            'pid': int,
            'running': bool,
            'started_at': str,
            'status': str
        }

        self.attribute_map = {
            'exit_code': 'ExitCode',
            'finished_at': 'FinishedAt',
            'ghost': 'Ghost',
            'pid': 'Pid',
            'running': 'Running',
            'started_at': 'StartedAt',
            'status': 'Status'
        }

        self._exit_code = exit_code
        self._finished_at = finished_at
        self._ghost = ghost
        self._pid = pid
        self._running = running
        self._started_at = started_at
        self._status = status

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ContainerState':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ContainerState of this ContainerState.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def exit_code(self):
        """Gets the exit_code of this ContainerState.

        The exit code indicating the root cause of why the container exited. Review the Docker API documentation to find a list of exit codes and their meaning. 

        :return: The exit_code of this ContainerState.
        :rtype: str
        """
        return self._exit_code

    @exit_code.setter
    def exit_code(self, exit_code):
        """Sets the exit_code of this ContainerState.

        The exit code indicating the root cause of why the container exited. Review the Docker API documentation to find a list of exit codes and their meaning. 

        :param exit_code: The exit_code of this ContainerState.
        :type exit_code: str
        """

        self._exit_code = exit_code

    @property
    def finished_at(self):
        """Gets the finished_at of this ContainerState.

        Time when the container stopped.

        :return: The finished_at of this ContainerState.
        :rtype: str
        """
        return self._finished_at

    @finished_at.setter
    def finished_at(self, finished_at):
        """Sets the finished_at of this ContainerState.

        Time when the container stopped.

        :param finished_at: The finished_at of this ContainerState.
        :type finished_at: str
        """

        self._finished_at = finished_at

    @property
    def ghost(self):
        """Gets the ghost of this ContainerState.

        Not supported by IBM Containers, empty string

        :return: The ghost of this ContainerState.
        :rtype: str
        """
        return self._ghost

    @ghost.setter
    def ghost(self, ghost):
        """Sets the ghost of this ContainerState.

        Not supported by IBM Containers, empty string

        :param ghost: The ghost of this ContainerState.
        :type ghost: str
        """

        self._ghost = ghost

    @property
    def pid(self):
        """Gets the pid of this ContainerState.

        The process ID on the compute host that runs the container process.

        :return: The pid of this ContainerState.
        :rtype: int
        """
        return self._pid

    @pid.setter
    def pid(self, pid):
        """Sets the pid of this ContainerState.

        The process ID on the compute host that runs the container process.

        :param pid: The pid of this ContainerState.
        :type pid: int
        """

        self._pid = pid

    @property
    def running(self):
        """Gets the running of this ContainerState.

        If set to true, the container is in a RUNNING state. If set to false, the container has stopped or crashed. 

        :return: The running of this ContainerState.
        :rtype: bool
        """
        return self._running

    @running.setter
    def running(self, running):
        """Sets the running of this ContainerState.

        If set to true, the container is in a RUNNING state. If set to false, the container has stopped or crashed. 

        :param running: The running of this ContainerState.
        :type running: bool
        """

        self._running = running

    @property
    def started_at(self):
        """Gets the started_at of this ContainerState.

        Time when the container started.

        :return: The started_at of this ContainerState.
        :rtype: str
        """
        return self._started_at

    @started_at.setter
    def started_at(self, started_at):
        """Sets the started_at of this ContainerState.

        Time when the container started.

        :param started_at: The started_at of this ContainerState.
        :type started_at: str
        """

        self._started_at = started_at

    @property
    def status(self):
        """Gets the status of this ContainerState.

        The current status of the container. This state can either be transient, such as BUILDING or NETWORKING, or non-transient, such as RUNNING, SHUTDOWN, CRASHED, or SUSPENDED.

        :return: The status of this ContainerState.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this ContainerState.

        The current status of the container. This state can either be transient, such as BUILDING or NETWORKING, or non-transient, such as RUNNING, SHUTDOWN, CRASHED, or SUSPENDED.

        :param status: The status of this ContainerState.
        :type status: str
        """

        self._status = status
