# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ContainersVersionGetInfoBuildDetail(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, api: str=None, automount: str=None, grupdater: str=None, harmony: str=None, health_monitor: str=None, hijack: str=None, ldap: str=None, logmet: str=None, lumberjack: str=None, redis_cluster: str=None, sgwatcher: str=None, volmgr: str=None):
        """ContainersVersionGetInfoBuildDetail - a model defined in OpenAPI

        :param api: The api of this ContainersVersionGetInfoBuildDetail.
        :param automount: The automount of this ContainersVersionGetInfoBuildDetail.
        :param grupdater: The grupdater of this ContainersVersionGetInfoBuildDetail.
        :param harmony: The harmony of this ContainersVersionGetInfoBuildDetail.
        :param health_monitor: The health_monitor of this ContainersVersionGetInfoBuildDetail.
        :param hijack: The hijack of this ContainersVersionGetInfoBuildDetail.
        :param ldap: The ldap of this ContainersVersionGetInfoBuildDetail.
        :param logmet: The logmet of this ContainersVersionGetInfoBuildDetail.
        :param lumberjack: The lumberjack of this ContainersVersionGetInfoBuildDetail.
        :param redis_cluster: The redis_cluster of this ContainersVersionGetInfoBuildDetail.
        :param sgwatcher: The sgwatcher of this ContainersVersionGetInfoBuildDetail.
        :param volmgr: The volmgr of this ContainersVersionGetInfoBuildDetail.
        """
        self.openapi_types = {
            'api': str,
            'automount': str,
            'grupdater': str,
            'harmony': str,
            'health_monitor': str,
            'hijack': str,
            'ldap': str,
            'logmet': str,
            'lumberjack': str,
            'redis_cluster': str,
            'sgwatcher': str,
            'volmgr': str
        }

        self.attribute_map = {
            'api': 'api',
            'automount': 'automount',
            'grupdater': 'grupdater',
            'harmony': 'harmony',
            'health_monitor': 'health-monitor',
            'hijack': 'hijack',
            'ldap': 'ldap',
            'logmet': 'logmet',
            'lumberjack': 'lumberjack',
            'redis_cluster': 'redis-cluster',
            'sgwatcher': 'sgwatcher',
            'volmgr': 'volmgr'
        }

        self._api = api
        self._automount = automount
        self._grupdater = grupdater
        self._harmony = harmony
        self._health_monitor = health_monitor
        self._hijack = hijack
        self._ldap = ldap
        self._logmet = logmet
        self._lumberjack = lumberjack
        self._redis_cluster = redis_cluster
        self._sgwatcher = sgwatcher
        self._volmgr = volmgr

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ContainersVersionGetInfoBuildDetail':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ContainersVersionGetInfo_BuildDetail of this ContainersVersionGetInfoBuildDetail.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def api(self):
        """Gets the api of this ContainersVersionGetInfoBuildDetail.

        The build ID of the current API version.

        :return: The api of this ContainersVersionGetInfoBuildDetail.
        :rtype: str
        """
        return self._api

    @api.setter
    def api(self, api):
        """Sets the api of this ContainersVersionGetInfoBuildDetail.

        The build ID of the current API version.

        :param api: The api of this ContainersVersionGetInfoBuildDetail.
        :type api: str
        """

        self._api = api

    @property
    def automount(self):
        """Gets the automount of this ContainersVersionGetInfoBuildDetail.

        The build ID of the current automount microservice version.

        :return: The automount of this ContainersVersionGetInfoBuildDetail.
        :rtype: str
        """
        return self._automount

    @automount.setter
    def automount(self, automount):
        """Sets the automount of this ContainersVersionGetInfoBuildDetail.

        The build ID of the current automount microservice version.

        :param automount: The automount of this ContainersVersionGetInfoBuildDetail.
        :type automount: str
        """

        self._automount = automount

    @property
    def grupdater(self):
        """Gets the grupdater of this ContainersVersionGetInfoBuildDetail.

        The build ID of the current grupdater microservice version.

        :return: The grupdater of this ContainersVersionGetInfoBuildDetail.
        :rtype: str
        """
        return self._grupdater

    @grupdater.setter
    def grupdater(self, grupdater):
        """Sets the grupdater of this ContainersVersionGetInfoBuildDetail.

        The build ID of the current grupdater microservice version.

        :param grupdater: The grupdater of this ContainersVersionGetInfoBuildDetail.
        :type grupdater: str
        """

        self._grupdater = grupdater

    @property
    def harmony(self):
        """Gets the harmony of this ContainersVersionGetInfoBuildDetail.

        The build ID of the current harmony microservice version.

        :return: The harmony of this ContainersVersionGetInfoBuildDetail.
        :rtype: str
        """
        return self._harmony

    @harmony.setter
    def harmony(self, harmony):
        """Sets the harmony of this ContainersVersionGetInfoBuildDetail.

        The build ID of the current harmony microservice version.

        :param harmony: The harmony of this ContainersVersionGetInfoBuildDetail.
        :type harmony: str
        """

        self._harmony = harmony

    @property
    def health_monitor(self):
        """Gets the health_monitor of this ContainersVersionGetInfoBuildDetail.

        The build ID of the current health-monitor microservice version.

        :return: The health_monitor of this ContainersVersionGetInfoBuildDetail.
        :rtype: str
        """
        return self._health_monitor

    @health_monitor.setter
    def health_monitor(self, health_monitor):
        """Sets the health_monitor of this ContainersVersionGetInfoBuildDetail.

        The build ID of the current health-monitor microservice version.

        :param health_monitor: The health_monitor of this ContainersVersionGetInfoBuildDetail.
        :type health_monitor: str
        """

        self._health_monitor = health_monitor

    @property
    def hijack(self):
        """Gets the hijack of this ContainersVersionGetInfoBuildDetail.

        The build ID of the current hijack microservice version.

        :return: The hijack of this ContainersVersionGetInfoBuildDetail.
        :rtype: str
        """
        return self._hijack

    @hijack.setter
    def hijack(self, hijack):
        """Sets the hijack of this ContainersVersionGetInfoBuildDetail.

        The build ID of the current hijack microservice version.

        :param hijack: The hijack of this ContainersVersionGetInfoBuildDetail.
        :type hijack: str
        """

        self._hijack = hijack

    @property
    def ldap(self):
        """Gets the ldap of this ContainersVersionGetInfoBuildDetail.

        The build ID of the current ldap microservice version.

        :return: The ldap of this ContainersVersionGetInfoBuildDetail.
        :rtype: str
        """
        return self._ldap

    @ldap.setter
    def ldap(self, ldap):
        """Sets the ldap of this ContainersVersionGetInfoBuildDetail.

        The build ID of the current ldap microservice version.

        :param ldap: The ldap of this ContainersVersionGetInfoBuildDetail.
        :type ldap: str
        """

        self._ldap = ldap

    @property
    def logmet(self):
        """Gets the logmet of this ContainersVersionGetInfoBuildDetail.

        The build ID of the current logmet microservice version.

        :return: The logmet of this ContainersVersionGetInfoBuildDetail.
        :rtype: str
        """
        return self._logmet

    @logmet.setter
    def logmet(self, logmet):
        """Sets the logmet of this ContainersVersionGetInfoBuildDetail.

        The build ID of the current logmet microservice version.

        :param logmet: The logmet of this ContainersVersionGetInfoBuildDetail.
        :type logmet: str
        """

        self._logmet = logmet

    @property
    def lumberjack(self):
        """Gets the lumberjack of this ContainersVersionGetInfoBuildDetail.

        The build ID of the current lumberjack microservice version.

        :return: The lumberjack of this ContainersVersionGetInfoBuildDetail.
        :rtype: str
        """
        return self._lumberjack

    @lumberjack.setter
    def lumberjack(self, lumberjack):
        """Sets the lumberjack of this ContainersVersionGetInfoBuildDetail.

        The build ID of the current lumberjack microservice version.

        :param lumberjack: The lumberjack of this ContainersVersionGetInfoBuildDetail.
        :type lumberjack: str
        """

        self._lumberjack = lumberjack

    @property
    def redis_cluster(self):
        """Gets the redis_cluster of this ContainersVersionGetInfoBuildDetail.

        The build ID of the current redis-cluster version.

        :return: The redis_cluster of this ContainersVersionGetInfoBuildDetail.
        :rtype: str
        """
        return self._redis_cluster

    @redis_cluster.setter
    def redis_cluster(self, redis_cluster):
        """Sets the redis_cluster of this ContainersVersionGetInfoBuildDetail.

        The build ID of the current redis-cluster version.

        :param redis_cluster: The redis_cluster of this ContainersVersionGetInfoBuildDetail.
        :type redis_cluster: str
        """

        self._redis_cluster = redis_cluster

    @property
    def sgwatcher(self):
        """Gets the sgwatcher of this ContainersVersionGetInfoBuildDetail.

        The build ID of the current sgwatcher microservice version.

        :return: The sgwatcher of this ContainersVersionGetInfoBuildDetail.
        :rtype: str
        """
        return self._sgwatcher

    @sgwatcher.setter
    def sgwatcher(self, sgwatcher):
        """Sets the sgwatcher of this ContainersVersionGetInfoBuildDetail.

        The build ID of the current sgwatcher microservice version.

        :param sgwatcher: The sgwatcher of this ContainersVersionGetInfoBuildDetail.
        :type sgwatcher: str
        """

        self._sgwatcher = sgwatcher

    @property
    def volmgr(self):
        """Gets the volmgr of this ContainersVersionGetInfoBuildDetail.

        The build ID of the current volumes manager microservice version.

        :return: The volmgr of this ContainersVersionGetInfoBuildDetail.
        :rtype: str
        """
        return self._volmgr

    @volmgr.setter
    def volmgr(self, volmgr):
        """Sets the volmgr of this ContainersVersionGetInfoBuildDetail.

        The build ID of the current volumes manager microservice version.

        :param volmgr: The volmgr of this ContainersVersionGetInfoBuildDetail.
        :type volmgr: str
        """

        self._volmgr = volmgr
