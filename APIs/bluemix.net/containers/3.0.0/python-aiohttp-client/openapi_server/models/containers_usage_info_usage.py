# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ContainersUsageInfoUsage(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, containers: int=None, floating_ips: int=None, floating_ips_bound: int=None, images: int=None, memory_mb: int=None, running: int=None, vcpu: int=None):
        """ContainersUsageInfoUsage - a model defined in OpenAPI

        :param containers: The containers of this ContainersUsageInfoUsage.
        :param floating_ips: The floating_ips of this ContainersUsageInfoUsage.
        :param floating_ips_bound: The floating_ips_bound of this ContainersUsageInfoUsage.
        :param images: The images of this ContainersUsageInfoUsage.
        :param memory_mb: The memory_mb of this ContainersUsageInfoUsage.
        :param running: The running of this ContainersUsageInfoUsage.
        :param vcpu: The vcpu of this ContainersUsageInfoUsage.
        """
        self.openapi_types = {
            'containers': int,
            'floating_ips': int,
            'floating_ips_bound': int,
            'images': int,
            'memory_mb': int,
            'running': int,
            'vcpu': int
        }

        self.attribute_map = {
            'containers': 'containers',
            'floating_ips': 'floating_ips',
            'floating_ips_bound': 'floating_ips_bound',
            'images': 'images',
            'memory_mb': 'memory_MB',
            'running': 'running',
            'vcpu': 'vcpu'
        }

        self._containers = containers
        self._floating_ips = floating_ips
        self._floating_ips_bound = floating_ips_bound
        self._images = images
        self._memory_mb = memory_mb
        self._running = running
        self._vcpu = vcpu

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ContainersUsageInfoUsage':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ContainersUsageInfo_Usage of this ContainersUsageInfoUsage.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def containers(self):
        """Gets the containers of this ContainersUsageInfoUsage.

        The number of containers that were created in the space. All containers that count towards the quota limit are listed independent on their current state.

        :return: The containers of this ContainersUsageInfoUsage.
        :rtype: int
        """
        return self._containers

    @containers.setter
    def containers(self, containers):
        """Sets the containers of this ContainersUsageInfoUsage.

        The number of containers that were created in the space. All containers that count towards the quota limit are listed independent on their current state.

        :param containers: The containers of this ContainersUsageInfoUsage.
        :type containers: int
        """

        self._containers = containers

    @property
    def floating_ips(self):
        """Gets the floating_ips of this ContainersUsageInfoUsage.

        The number of public IP addresses that are allocated to the space.

        :return: The floating_ips of this ContainersUsageInfoUsage.
        :rtype: int
        """
        return self._floating_ips

    @floating_ips.setter
    def floating_ips(self, floating_ips):
        """Sets the floating_ips of this ContainersUsageInfoUsage.

        The number of public IP addresses that are allocated to the space.

        :param floating_ips: The floating_ips of this ContainersUsageInfoUsage.
        :type floating_ips: int
        """

        self._floating_ips = floating_ips

    @property
    def floating_ips_bound(self):
        """Gets the floating_ips_bound of this ContainersUsageInfoUsage.

        The number of public IP addresses that are bound to a container in the space.

        :return: The floating_ips_bound of this ContainersUsageInfoUsage.
        :rtype: int
        """
        return self._floating_ips_bound

    @floating_ips_bound.setter
    def floating_ips_bound(self, floating_ips_bound):
        """Sets the floating_ips_bound of this ContainersUsageInfoUsage.

        The number of public IP addresses that are bound to a container in the space.

        :param floating_ips_bound: The floating_ips_bound of this ContainersUsageInfoUsage.
        :type floating_ips_bound: int
        """

        self._floating_ips_bound = floating_ips_bound

    @property
    def images(self):
        """Gets the images of this ContainersUsageInfoUsage.

        The number of private images that were added to the private Bluemix registry.

        :return: The images of this ContainersUsageInfoUsage.
        :rtype: int
        """
        return self._images

    @images.setter
    def images(self, images):
        """Sets the images of this ContainersUsageInfoUsage.

        The number of private images that were added to the private Bluemix registry.

        :param images: The images of this ContainersUsageInfoUsage.
        :type images: int
        """

        self._images = images

    @property
    def memory_mb(self):
        """Gets the memory_mb of this ContainersUsageInfoUsage.

        The amount of container memory that is already used by the containers that were created in the space in megabyte.

        :return: The memory_mb of this ContainersUsageInfoUsage.
        :rtype: int
        """
        return self._memory_mb

    @memory_mb.setter
    def memory_mb(self, memory_mb):
        """Sets the memory_mb of this ContainersUsageInfoUsage.

        The amount of container memory that is already used by the containers that were created in the space in megabyte.

        :param memory_mb: The memory_mb of this ContainersUsageInfoUsage.
        :type memory_mb: int
        """

        self._memory_mb = memory_mb

    @property
    def running(self):
        """Gets the running of this ContainersUsageInfoUsage.

        The number of containers that are currently in a running state.

        :return: The running of this ContainersUsageInfoUsage.
        :rtype: int
        """
        return self._running

    @running.setter
    def running(self, running):
        """Sets the running of this ContainersUsageInfoUsage.

        The number of containers that are currently in a running state.

        :param running: The running of this ContainersUsageInfoUsage.
        :type running: int
        """

        self._running = running

    @property
    def vcpu(self):
        """Gets the vcpu of this ContainersUsageInfoUsage.

        The number of virtual CPUs that are allocated to the space.

        :return: The vcpu of this ContainersUsageInfoUsage.
        :rtype: int
        """
        return self._vcpu

    @vcpu.setter
    def vcpu(self, vcpu):
        """Sets the vcpu of this ContainersUsageInfoUsage.

        The number of virtual CPUs that are allocated to the space.

        :param vcpu: The vcpu of this ContainersUsageInfoUsage.
        :type vcpu: int
        """

        self._vcpu = vcpu
