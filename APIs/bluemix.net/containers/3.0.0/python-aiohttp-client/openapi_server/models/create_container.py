# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.host_config import HostConfig
from openapi_server import util


class CreateContainer(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, bluemix_app: str=None, cmd: List[str]=None, cpuset: str=None, env: List[str]=None, exposed_ports: List[str]=None, host_config: HostConfig=None, image: str=None, memory: int=None, number_cpus: int=None, volumes: str=None):
        """CreateContainer - a model defined in OpenAPI

        :param bluemix_app: The bluemix_app of this CreateContainer.
        :param cmd: The cmd of this CreateContainer.
        :param cpuset: The cpuset of this CreateContainer.
        :param env: The env of this CreateContainer.
        :param exposed_ports: The exposed_ports of this CreateContainer.
        :param host_config: The host_config of this CreateContainer.
        :param image: The image of this CreateContainer.
        :param memory: The memory of this CreateContainer.
        :param number_cpus: The number_cpus of this CreateContainer.
        :param volumes: The volumes of this CreateContainer.
        """
        self.openapi_types = {
            'bluemix_app': str,
            'cmd': List[str],
            'cpuset': str,
            'env': List[str],
            'exposed_ports': List[str],
            'host_config': HostConfig,
            'image': str,
            'memory': int,
            'number_cpus': int,
            'volumes': str
        }

        self.attribute_map = {
            'bluemix_app': 'BluemixApp',
            'cmd': 'Cmd',
            'cpuset': 'Cpuset',
            'env': 'Env',
            'exposed_ports': 'ExposedPorts',
            'host_config': 'HostConfig',
            'image': 'Image',
            'memory': 'Memory',
            'number_cpus': 'NumberCpus',
            'volumes': 'Volumes'
        }

        self._bluemix_app = bluemix_app
        self._cmd = cmd
        self._cpuset = cpuset
        self._env = env
        self._exposed_ports = exposed_ports
        self._host_config = host_config
        self._image = image
        self._memory = memory
        self._number_cpus = number_cpus
        self._volumes = volumes

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CreateContainer':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CreateContainer of this CreateContainer.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def bluemix_app(self):
        """Gets the bluemix_app of this CreateContainer.

        The name of the Cloud Foundry app that you want to bind to your container. The Cloud Foundry app must be created in the same space where you want to create your container.

        :return: The bluemix_app of this CreateContainer.
        :rtype: str
        """
        return self._bluemix_app

    @bluemix_app.setter
    def bluemix_app(self, bluemix_app):
        """Sets the bluemix_app of this CreateContainer.

        The name of the Cloud Foundry app that you want to bind to your container. The Cloud Foundry app must be created in the same space where you want to create your container.

        :param bluemix_app: The bluemix_app of this CreateContainer.
        :type bluemix_app: str
        """

        self._bluemix_app = bluemix_app

    @property
    def cmd(self):
        """Gets the cmd of this CreateContainer.

        The command and arguments in this list are passed to the container to be executed when the container is started. This command must be a long-running command. Do not use a short-lived command, for example, /bin/date, because it might cause the container to crash. <br>Sample long-running commands:<br>[\"ping\",\"localhost\"]<br>[\"tail\",\"-f\",\"/dev/null\"]<br>[\"sh\",\"-c\",\"while true; do date; sleep 20; done\"] 

        :return: The cmd of this CreateContainer.
        :rtype: List[str]
        """
        return self._cmd

    @cmd.setter
    def cmd(self, cmd):
        """Sets the cmd of this CreateContainer.

        The command and arguments in this list are passed to the container to be executed when the container is started. This command must be a long-running command. Do not use a short-lived command, for example, /bin/date, because it might cause the container to crash. <br>Sample long-running commands:<br>[\"ping\",\"localhost\"]<br>[\"tail\",\"-f\",\"/dev/null\"]<br>[\"sh\",\"-c\",\"while true; do date; sleep 20; done\"] 

        :param cmd: The cmd of this CreateContainer.
        :type cmd: List[str]
        """

        self._cmd = cmd

    @property
    def cpuset(self):
        """Gets the cpuset of this CreateContainer.

        Pins the container processes to a specific CPU core on the compute host. For example: 0 means that processes are executed on the first core only.

        :return: The cpuset of this CreateContainer.
        :rtype: str
        """
        return self._cpuset

    @cpuset.setter
    def cpuset(self, cpuset):
        """Sets the cpuset of this CreateContainer.

        Pins the container processes to a specific CPU core on the compute host. For example: 0 means that processes are executed on the first core only.

        :param cpuset: The cpuset of this CreateContainer.
        :type cpuset: str
        """

        self._cpuset = cpuset

    @property
    def env(self):
        """Gets the env of this CreateContainer.

        A list of environment variables in the form of key=value pairs. All keys in this list have to be unique. List multiple keys separately and if you include quotation marks, include them around both the environment variable name and the value.

        :return: The env of this CreateContainer.
        :rtype: List[str]
        """
        return self._env

    @env.setter
    def env(self, env):
        """Sets the env of this CreateContainer.

        A list of environment variables in the form of key=value pairs. All keys in this list have to be unique. List multiple keys separately and if you include quotation marks, include them around both the environment variable name and the value.

        :param env: The env of this CreateContainer.
        :type env: List[str]
        """

        self._env = env

    @property
    def exposed_ports(self):
        """Gets the exposed_ports of this CreateContainer.

        All public ports that need to be exposed for the container, so the container can be accessed from the Internet.

        :return: The exposed_ports of this CreateContainer.
        :rtype: List[str]
        """
        return self._exposed_ports

    @exposed_ports.setter
    def exposed_ports(self, exposed_ports):
        """Sets the exposed_ports of this CreateContainer.

        All public ports that need to be exposed for the container, so the container can be accessed from the Internet.

        :param exposed_ports: The exposed_ports of this CreateContainer.
        :type exposed_ports: List[str]
        """

        self._exposed_ports = exposed_ports

    @property
    def host_config(self):
        """Gets the host_config of this CreateContainer.


        :return: The host_config of this CreateContainer.
        :rtype: HostConfig
        """
        return self._host_config

    @host_config.setter
    def host_config(self, host_config):
        """Sets the host_config of this CreateContainer.


        :param host_config: The host_config of this CreateContainer.
        :type host_config: HostConfig
        """

        self._host_config = host_config

    @property
    def image(self):
        """Gets the image of this CreateContainer.

        Full path to the image in your private Bluemix registry in the format `registry.ng.bluemix.net/namespace/image`. 

        :return: The image of this CreateContainer.
        :rtype: str
        """
        return self._image

    @image.setter
    def image(self, image):
        """Sets the image of this CreateContainer.

        Full path to the image in your private Bluemix registry in the format `registry.ng.bluemix.net/namespace/image`. 

        :param image: The image of this CreateContainer.
        :type image: str
        """
        if image is None:
            raise ValueError("Invalid value for `image`, must not be `None`")

        self._image = image

    @property
    def memory(self):
        """Gets the memory of this CreateContainer.

        The container memory that is set for the container in Megabyte. Choose one of the following sizes: Pico 64 MB, Nano 128 MB, Micro 256 MB, Tiny 512 MB, Small 1 GB (1024 MB), Medium 2 GB (2048 MB), Large 4 GB (4096 MB) XLarge 8GB (8192 MB) and 2XLarge 16 GB (16384 MB).

        :return: The memory of this CreateContainer.
        :rtype: int
        """
        return self._memory

    @memory.setter
    def memory(self, memory):
        """Sets the memory of this CreateContainer.

        The container memory that is set for the container in Megabyte. Choose one of the following sizes: Pico 64 MB, Nano 128 MB, Micro 256 MB, Tiny 512 MB, Small 1 GB (1024 MB), Medium 2 GB (2048 MB), Large 4 GB (4096 MB) XLarge 8GB (8192 MB) and 2XLarge 16 GB (16384 MB).

        :param memory: The memory of this CreateContainer.
        :type memory: int
        """

        self._memory = memory

    @property
    def number_cpus(self):
        """Gets the number_cpus of this CreateContainer.

        Number of virtual CPUs that are allocated to the container.

        :return: The number_cpus of this CreateContainer.
        :rtype: int
        """
        return self._number_cpus

    @number_cpus.setter
    def number_cpus(self, number_cpus):
        """Sets the number_cpus of this CreateContainer.

        Number of virtual CPUs that are allocated to the container.

        :param number_cpus: The number_cpus of this CreateContainer.
        :type number_cpus: int
        """

        self._number_cpus = number_cpus

    @property
    def volumes(self):
        """Gets the volumes of this CreateContainer.

        Mount a volume to a container by specifying the details in the following format: `VOLUME_NAME:/DIRECTORY_PATH[:ro]`. Example: testvolume:/volumedata/temp:rw. By default, all volumes will be set up with read-write access inside the container (rw). If you wish to set up your volume with read-only access, enter `ro`.  Note: To mount a volume to a container, you must create the volume in your space first by using the `cf ic volume-create` command, or calling the `POST /volumes/create endpoint`.

        :return: The volumes of this CreateContainer.
        :rtype: str
        """
        return self._volumes

    @volumes.setter
    def volumes(self, volumes):
        """Sets the volumes of this CreateContainer.

        Mount a volume to a container by specifying the details in the following format: `VOLUME_NAME:/DIRECTORY_PATH[:ro]`. Example: testvolume:/volumedata/temp:rw. By default, all volumes will be set up with read-write access inside the container (rw). If you wish to set up your volume with read-only access, enter `ro`.  Note: To mount a volume to a container, you must create the volume in your space first by using the `cf ic volume-create` command, or calling the `POST /volumes/create endpoint`.

        :param volumes: The volumes of this CreateContainer.
        :type volumes: str
        """

        self._volumes = volumes
