/*
 * Labs64 NetLicensing RESTful API Test Center
 * The Labs64 <a href='https://netlicensing.io/wiki/restful-api' target='_blank'>NetLicensing RESTful API</a> gives you access to NetLicensingâ€™s core features.<br/><br/><strong>Authentication</strong><br/>You authenticate to the NetLicensing API by providing your account credentials or simply use our demo account - <code>demo:demo</code><br/><br/>Find out more about Labs64 NetLicensing at <a href='https://netlicensing.io' target='_blank'>netlicensing.io</a>
 *
 * The version of the OpenAPI document: 2.x
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.Netlicensing;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class ProductModuleApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public ProductModuleApi() {
        this(Configuration.getDefaultApiClient());
    }

    public ProductModuleApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for createProductModule
     * @param active If set to &#39;false&#39;, the Product Module is disabled. Licensees can not obtain any new Licenses for this Product Module. (required)
     * @param licensingModel Licensing model applied to this Product Module. Defines what License Templates can be configured for the Product Module and how Licenses for this Product Module are processed during validation. (required)
     * @param name Product Module name that is visible to the end customers in NetLicensing Shop. (required)
     * @param productNumber Unique number (across all Products of a Vendor) that identifies the Product Module. Vendor can assign this number when creating a Product Module or let NetLicensing generate one. Read-only after creation of the first Licensee for the Product. (required)
     * @param licenseTemplate License Template. Mandatory for &#39;Try &amp;amp; Buy&#39; licensing model. (optional)
     * @param maxCheckoutValidity Maximum checkout validity (days). Mandatory for &#39;Floating&#39; licensing model. (optional)
     * @param nodeSecretMode Secret Mode. Mandatory for &#39;Node-Locked&#39; licensing model. (optional)
     * @param number Unique number (across all Products of a Vendor) that identifies the Product Module. Vendor can assign this number when creating a Product Module or let NetLicensing generate one. Read-only after creation of the first Licensee for the Product. (optional)
     * @param redThreshold Remaining time volume for red level. Mandatory for &#39;Rental&#39; licensing model. (optional)
     * @param yellowThreshold Remaining time volume for yellow level. Mandatory for &#39;Rental&#39; licensing model. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful request </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Malformed or illegal request </td><td>  -  </td></tr>
        <tr><td> 402 </td><td> Quota exceeded </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Access is denied </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal service error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createProductModuleCall(Boolean active, String licensingModel, String name, String productNumber, List<String> licenseTemplate, Integer maxCheckoutValidity, List<String> nodeSecretMode, String number, Integer redThreshold, Integer yellowThreshold, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/productmodule";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (active != null) {
            localVarFormParams.put("active", active);
        }

        if (licenseTemplate != null) {
            localVarFormParams.put("licenseTemplate", licenseTemplate);
        }

        if (licensingModel != null) {
            localVarFormParams.put("licensingModel", licensingModel);
        }

        if (maxCheckoutValidity != null) {
            localVarFormParams.put("maxCheckoutValidity", maxCheckoutValidity);
        }

        if (name != null) {
            localVarFormParams.put("name", name);
        }

        if (nodeSecretMode != null) {
            localVarFormParams.put("nodeSecretMode", nodeSecretMode);
        }

        if (number != null) {
            localVarFormParams.put("number", number);
        }

        if (productNumber != null) {
            localVarFormParams.put("productNumber", productNumber);
        }

        if (redThreshold != null) {
            localVarFormParams.put("redThreshold", redThreshold);
        }

        if (yellowThreshold != null) {
            localVarFormParams.put("yellowThreshold", yellowThreshold);
        }

        final String[] localVarAccepts = {
            "application/json",
            "application/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/x-www-form-urlencoded"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createProductModuleValidateBeforeCall(Boolean active, String licensingModel, String name, String productNumber, List<String> licenseTemplate, Integer maxCheckoutValidity, List<String> nodeSecretMode, String number, Integer redThreshold, Integer yellowThreshold, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'active' is set
        if (active == null) {
            throw new ApiException("Missing the required parameter 'active' when calling createProductModule(Async)");
        }

        // verify the required parameter 'licensingModel' is set
        if (licensingModel == null) {
            throw new ApiException("Missing the required parameter 'licensingModel' when calling createProductModule(Async)");
        }

        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling createProductModule(Async)");
        }

        // verify the required parameter 'productNumber' is set
        if (productNumber == null) {
            throw new ApiException("Missing the required parameter 'productNumber' when calling createProductModule(Async)");
        }

        return createProductModuleCall(active, licensingModel, name, productNumber, licenseTemplate, maxCheckoutValidity, nodeSecretMode, number, redThreshold, yellowThreshold, _callback);

    }

    /**
     * Create Product Module
     * Creates a new Product Module
     * @param active If set to &#39;false&#39;, the Product Module is disabled. Licensees can not obtain any new Licenses for this Product Module. (required)
     * @param licensingModel Licensing model applied to this Product Module. Defines what License Templates can be configured for the Product Module and how Licenses for this Product Module are processed during validation. (required)
     * @param name Product Module name that is visible to the end customers in NetLicensing Shop. (required)
     * @param productNumber Unique number (across all Products of a Vendor) that identifies the Product Module. Vendor can assign this number when creating a Product Module or let NetLicensing generate one. Read-only after creation of the first Licensee for the Product. (required)
     * @param licenseTemplate License Template. Mandatory for &#39;Try &amp;amp; Buy&#39; licensing model. (optional)
     * @param maxCheckoutValidity Maximum checkout validity (days). Mandatory for &#39;Floating&#39; licensing model. (optional)
     * @param nodeSecretMode Secret Mode. Mandatory for &#39;Node-Locked&#39; licensing model. (optional)
     * @param number Unique number (across all Products of a Vendor) that identifies the Product Module. Vendor can assign this number when creating a Product Module or let NetLicensing generate one. Read-only after creation of the first Licensee for the Product. (optional)
     * @param redThreshold Remaining time volume for red level. Mandatory for &#39;Rental&#39; licensing model. (optional)
     * @param yellowThreshold Remaining time volume for yellow level. Mandatory for &#39;Rental&#39; licensing model. (optional)
     * @return Netlicensing
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful request </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Malformed or illegal request </td><td>  -  </td></tr>
        <tr><td> 402 </td><td> Quota exceeded </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Access is denied </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal service error </td><td>  -  </td></tr>
     </table>
     */
    public Netlicensing createProductModule(Boolean active, String licensingModel, String name, String productNumber, List<String> licenseTemplate, Integer maxCheckoutValidity, List<String> nodeSecretMode, String number, Integer redThreshold, Integer yellowThreshold) throws ApiException {
        ApiResponse<Netlicensing> localVarResp = createProductModuleWithHttpInfo(active, licensingModel, name, productNumber, licenseTemplate, maxCheckoutValidity, nodeSecretMode, number, redThreshold, yellowThreshold);
        return localVarResp.getData();
    }

    /**
     * Create Product Module
     * Creates a new Product Module
     * @param active If set to &#39;false&#39;, the Product Module is disabled. Licensees can not obtain any new Licenses for this Product Module. (required)
     * @param licensingModel Licensing model applied to this Product Module. Defines what License Templates can be configured for the Product Module and how Licenses for this Product Module are processed during validation. (required)
     * @param name Product Module name that is visible to the end customers in NetLicensing Shop. (required)
     * @param productNumber Unique number (across all Products of a Vendor) that identifies the Product Module. Vendor can assign this number when creating a Product Module or let NetLicensing generate one. Read-only after creation of the first Licensee for the Product. (required)
     * @param licenseTemplate License Template. Mandatory for &#39;Try &amp;amp; Buy&#39; licensing model. (optional)
     * @param maxCheckoutValidity Maximum checkout validity (days). Mandatory for &#39;Floating&#39; licensing model. (optional)
     * @param nodeSecretMode Secret Mode. Mandatory for &#39;Node-Locked&#39; licensing model. (optional)
     * @param number Unique number (across all Products of a Vendor) that identifies the Product Module. Vendor can assign this number when creating a Product Module or let NetLicensing generate one. Read-only after creation of the first Licensee for the Product. (optional)
     * @param redThreshold Remaining time volume for red level. Mandatory for &#39;Rental&#39; licensing model. (optional)
     * @param yellowThreshold Remaining time volume for yellow level. Mandatory for &#39;Rental&#39; licensing model. (optional)
     * @return ApiResponse&lt;Netlicensing&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful request </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Malformed or illegal request </td><td>  -  </td></tr>
        <tr><td> 402 </td><td> Quota exceeded </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Access is denied </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal service error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Netlicensing> createProductModuleWithHttpInfo(Boolean active, String licensingModel, String name, String productNumber, List<String> licenseTemplate, Integer maxCheckoutValidity, List<String> nodeSecretMode, String number, Integer redThreshold, Integer yellowThreshold) throws ApiException {
        okhttp3.Call localVarCall = createProductModuleValidateBeforeCall(active, licensingModel, name, productNumber, licenseTemplate, maxCheckoutValidity, nodeSecretMode, number, redThreshold, yellowThreshold, null);
        Type localVarReturnType = new TypeToken<Netlicensing>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create Product Module (asynchronously)
     * Creates a new Product Module
     * @param active If set to &#39;false&#39;, the Product Module is disabled. Licensees can not obtain any new Licenses for this Product Module. (required)
     * @param licensingModel Licensing model applied to this Product Module. Defines what License Templates can be configured for the Product Module and how Licenses for this Product Module are processed during validation. (required)
     * @param name Product Module name that is visible to the end customers in NetLicensing Shop. (required)
     * @param productNumber Unique number (across all Products of a Vendor) that identifies the Product Module. Vendor can assign this number when creating a Product Module or let NetLicensing generate one. Read-only after creation of the first Licensee for the Product. (required)
     * @param licenseTemplate License Template. Mandatory for &#39;Try &amp;amp; Buy&#39; licensing model. (optional)
     * @param maxCheckoutValidity Maximum checkout validity (days). Mandatory for &#39;Floating&#39; licensing model. (optional)
     * @param nodeSecretMode Secret Mode. Mandatory for &#39;Node-Locked&#39; licensing model. (optional)
     * @param number Unique number (across all Products of a Vendor) that identifies the Product Module. Vendor can assign this number when creating a Product Module or let NetLicensing generate one. Read-only after creation of the first Licensee for the Product. (optional)
     * @param redThreshold Remaining time volume for red level. Mandatory for &#39;Rental&#39; licensing model. (optional)
     * @param yellowThreshold Remaining time volume for yellow level. Mandatory for &#39;Rental&#39; licensing model. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful request </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Malformed or illegal request </td><td>  -  </td></tr>
        <tr><td> 402 </td><td> Quota exceeded </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Access is denied </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal service error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createProductModuleAsync(Boolean active, String licensingModel, String name, String productNumber, List<String> licenseTemplate, Integer maxCheckoutValidity, List<String> nodeSecretMode, String number, Integer redThreshold, Integer yellowThreshold, final ApiCallback<Netlicensing> _callback) throws ApiException {

        okhttp3.Call localVarCall = createProductModuleValidateBeforeCall(active, licensingModel, name, productNumber, licenseTemplate, maxCheckoutValidity, nodeSecretMode, number, redThreshold, yellowThreshold, _callback);
        Type localVarReturnType = new TypeToken<Netlicensing>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteProductModule
     * @param productModuleNumber Unique number (across all Products of a Vendor) that identifies the Product Module. (required)
     * @param forceCascade Force object deletion and all descendants. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful request </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Malformed or illegal request </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Access is denied </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal service error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteProductModuleCall(String productModuleNumber, Boolean forceCascade, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/productmodule/{productModuleNumber}"
            .replace("{" + "productModuleNumber" + "}", localVarApiClient.escapeString(productModuleNumber.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (forceCascade != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("forceCascade", forceCascade));
        }

        final String[] localVarAccepts = {
            "application/json",
            "application/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteProductModuleValidateBeforeCall(String productModuleNumber, Boolean forceCascade, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'productModuleNumber' is set
        if (productModuleNumber == null) {
            throw new ApiException("Missing the required parameter 'productModuleNumber' when calling deleteProductModule(Async)");
        }

        return deleteProductModuleCall(productModuleNumber, forceCascade, _callback);

    }

    /**
     * Delete Product Module
     * Delete a Product Module by &#39;number&#39;
     * @param productModuleNumber Unique number (across all Products of a Vendor) that identifies the Product Module. (required)
     * @param forceCascade Force object deletion and all descendants. (optional)
     * @return Netlicensing
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful request </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Malformed or illegal request </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Access is denied </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal service error </td><td>  -  </td></tr>
     </table>
     */
    public Netlicensing deleteProductModule(String productModuleNumber, Boolean forceCascade) throws ApiException {
        ApiResponse<Netlicensing> localVarResp = deleteProductModuleWithHttpInfo(productModuleNumber, forceCascade);
        return localVarResp.getData();
    }

    /**
     * Delete Product Module
     * Delete a Product Module by &#39;number&#39;
     * @param productModuleNumber Unique number (across all Products of a Vendor) that identifies the Product Module. (required)
     * @param forceCascade Force object deletion and all descendants. (optional)
     * @return ApiResponse&lt;Netlicensing&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful request </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Malformed or illegal request </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Access is denied </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal service error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Netlicensing> deleteProductModuleWithHttpInfo(String productModuleNumber, Boolean forceCascade) throws ApiException {
        okhttp3.Call localVarCall = deleteProductModuleValidateBeforeCall(productModuleNumber, forceCascade, null);
        Type localVarReturnType = new TypeToken<Netlicensing>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Delete Product Module (asynchronously)
     * Delete a Product Module by &#39;number&#39;
     * @param productModuleNumber Unique number (across all Products of a Vendor) that identifies the Product Module. (required)
     * @param forceCascade Force object deletion and all descendants. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful request </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Malformed or illegal request </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Access is denied </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal service error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteProductModuleAsync(String productModuleNumber, Boolean forceCascade, final ApiCallback<Netlicensing> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteProductModuleValidateBeforeCall(productModuleNumber, forceCascade, _callback);
        Type localVarReturnType = new TypeToken<Netlicensing>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getProductModule
     * @param productModuleNumber Unique number (across all Products of a Vendor) that identifies the Product Module. Vendor can assign this number when creating a Product Module or let NetLicensing generate one. Read-only after creation of the first Licensee for the Product. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful request </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Malformed or illegal request </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Access is denied </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal service error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getProductModuleCall(String productModuleNumber, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/productmodule/{productModuleNumber}"
            .replace("{" + "productModuleNumber" + "}", localVarApiClient.escapeString(productModuleNumber.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "application/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getProductModuleValidateBeforeCall(String productModuleNumber, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'productModuleNumber' is set
        if (productModuleNumber == null) {
            throw new ApiException("Missing the required parameter 'productModuleNumber' when calling getProductModule(Async)");
        }

        return getProductModuleCall(productModuleNumber, _callback);

    }

    /**
     * Get Product Module
     * Return a Product Module by &#39;productModuleNumber&#39;
     * @param productModuleNumber Unique number (across all Products of a Vendor) that identifies the Product Module. Vendor can assign this number when creating a Product Module or let NetLicensing generate one. Read-only after creation of the first Licensee for the Product. (required)
     * @return Netlicensing
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful request </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Malformed or illegal request </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Access is denied </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal service error </td><td>  -  </td></tr>
     </table>
     */
    public Netlicensing getProductModule(String productModuleNumber) throws ApiException {
        ApiResponse<Netlicensing> localVarResp = getProductModuleWithHttpInfo(productModuleNumber);
        return localVarResp.getData();
    }

    /**
     * Get Product Module
     * Return a Product Module by &#39;productModuleNumber&#39;
     * @param productModuleNumber Unique number (across all Products of a Vendor) that identifies the Product Module. Vendor can assign this number when creating a Product Module or let NetLicensing generate one. Read-only after creation of the first Licensee for the Product. (required)
     * @return ApiResponse&lt;Netlicensing&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful request </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Malformed or illegal request </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Access is denied </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal service error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Netlicensing> getProductModuleWithHttpInfo(String productModuleNumber) throws ApiException {
        okhttp3.Call localVarCall = getProductModuleValidateBeforeCall(productModuleNumber, null);
        Type localVarReturnType = new TypeToken<Netlicensing>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get Product Module (asynchronously)
     * Return a Product Module by &#39;productModuleNumber&#39;
     * @param productModuleNumber Unique number (across all Products of a Vendor) that identifies the Product Module. Vendor can assign this number when creating a Product Module or let NetLicensing generate one. Read-only after creation of the first Licensee for the Product. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful request </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Malformed or illegal request </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Access is denied </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal service error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getProductModuleAsync(String productModuleNumber, final ApiCallback<Netlicensing> _callback) throws ApiException {

        okhttp3.Call localVarCall = getProductModuleValidateBeforeCall(productModuleNumber, _callback);
        Type localVarReturnType = new TypeToken<Netlicensing>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for listProductModules
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful request </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Malformed or illegal request </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Access is denied </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal service error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listProductModulesCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/productmodule";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "application/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listProductModulesValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return listProductModulesCall(_callback);

    }

    /**
     * List Product Modules
     * Return a list of all Product Modules for the current Vendor
     * @return List&lt;Netlicensing&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful request </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Malformed or illegal request </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Access is denied </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal service error </td><td>  -  </td></tr>
     </table>
     */
    public List<Netlicensing> listProductModules() throws ApiException {
        ApiResponse<List<Netlicensing>> localVarResp = listProductModulesWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * List Product Modules
     * Return a list of all Product Modules for the current Vendor
     * @return ApiResponse&lt;List&lt;Netlicensing&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful request </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Malformed or illegal request </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Access is denied </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal service error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<Netlicensing>> listProductModulesWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = listProductModulesValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<List<Netlicensing>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List Product Modules (asynchronously)
     * Return a list of all Product Modules for the current Vendor
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful request </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Malformed or illegal request </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Access is denied </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal service error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listProductModulesAsync(final ApiCallback<List<Netlicensing>> _callback) throws ApiException {

        okhttp3.Call localVarCall = listProductModulesValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<List<Netlicensing>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateProductModule
     * @param productModuleNumber Unique number (across all Products of a Vendor) that identifies the Product Module. Vendor can assign this number when creating a Product Module or let NetLicensing generate one. Read-only after creation of the first Licensee for the Product. (required)
     * @param active If set to &#39;false&#39;, the Product Module is disabled. Licensees can not obtain any new Licenses for this Product Module. (optional)
     * @param licenseTemplate License Template. Mandatory for &#39;Try &amp;amp; Buy&#39; licensing model. (optional)
     * @param licensingModel Licensing model applied to this Product Module. Defines what License Templates can be configured for the Product Module and how Licenses for this Product Module are processed during validation. (optional)
     * @param maxCheckoutValidity Maximum checkout validity (days). Mandatory for &#39;Floating&#39; licensing model. (optional)
     * @param name Product Module name that is visible to the end customers in NetLicensing Shop. (optional)
     * @param nodeSecretMode Secret Mode. Mandatory for &#39;Node-Locked&#39; licensing model. (optional)
     * @param number New Product Module number (update). (optional)
     * @param redThreshold Remaining time volume for red level. Mandatory for &#39;Rental&#39; licensing model. (optional)
     * @param yellowThreshold Remaining time volume for yellow level. Mandatory for &#39;Rental&#39; licensing model. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful request </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Malformed or illegal request </td><td>  -  </td></tr>
        <tr><td> 402 </td><td> Quota exceeded </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Access is denied </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal service error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateProductModuleCall(String productModuleNumber, Boolean active, List<String> licenseTemplate, String licensingModel, Integer maxCheckoutValidity, String name, List<String> nodeSecretMode, String number, Integer redThreshold, Integer yellowThreshold, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/productmodule/{productModuleNumber}"
            .replace("{" + "productModuleNumber" + "}", localVarApiClient.escapeString(productModuleNumber.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (active != null) {
            localVarFormParams.put("active", active);
        }

        if (licenseTemplate != null) {
            localVarFormParams.put("licenseTemplate", licenseTemplate);
        }

        if (licensingModel != null) {
            localVarFormParams.put("licensingModel", licensingModel);
        }

        if (maxCheckoutValidity != null) {
            localVarFormParams.put("maxCheckoutValidity", maxCheckoutValidity);
        }

        if (name != null) {
            localVarFormParams.put("name", name);
        }

        if (nodeSecretMode != null) {
            localVarFormParams.put("nodeSecretMode", nodeSecretMode);
        }

        if (number != null) {
            localVarFormParams.put("number", number);
        }

        if (redThreshold != null) {
            localVarFormParams.put("redThreshold", redThreshold);
        }

        if (yellowThreshold != null) {
            localVarFormParams.put("yellowThreshold", yellowThreshold);
        }

        final String[] localVarAccepts = {
            "application/json",
            "application/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/x-www-form-urlencoded"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateProductModuleValidateBeforeCall(String productModuleNumber, Boolean active, List<String> licenseTemplate, String licensingModel, Integer maxCheckoutValidity, String name, List<String> nodeSecretMode, String number, Integer redThreshold, Integer yellowThreshold, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'productModuleNumber' is set
        if (productModuleNumber == null) {
            throw new ApiException("Missing the required parameter 'productModuleNumber' when calling updateProductModule(Async)");
        }

        return updateProductModuleCall(productModuleNumber, active, licenseTemplate, licensingModel, maxCheckoutValidity, name, nodeSecretMode, number, redThreshold, yellowThreshold, _callback);

    }

    /**
     * Update Product Module
     * Sets the provided properties to a Product Module. Return an updated Product Module
     * @param productModuleNumber Unique number (across all Products of a Vendor) that identifies the Product Module. Vendor can assign this number when creating a Product Module or let NetLicensing generate one. Read-only after creation of the first Licensee for the Product. (required)
     * @param active If set to &#39;false&#39;, the Product Module is disabled. Licensees can not obtain any new Licenses for this Product Module. (optional)
     * @param licenseTemplate License Template. Mandatory for &#39;Try &amp;amp; Buy&#39; licensing model. (optional)
     * @param licensingModel Licensing model applied to this Product Module. Defines what License Templates can be configured for the Product Module and how Licenses for this Product Module are processed during validation. (optional)
     * @param maxCheckoutValidity Maximum checkout validity (days). Mandatory for &#39;Floating&#39; licensing model. (optional)
     * @param name Product Module name that is visible to the end customers in NetLicensing Shop. (optional)
     * @param nodeSecretMode Secret Mode. Mandatory for &#39;Node-Locked&#39; licensing model. (optional)
     * @param number New Product Module number (update). (optional)
     * @param redThreshold Remaining time volume for red level. Mandatory for &#39;Rental&#39; licensing model. (optional)
     * @param yellowThreshold Remaining time volume for yellow level. Mandatory for &#39;Rental&#39; licensing model. (optional)
     * @return Netlicensing
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful request </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Malformed or illegal request </td><td>  -  </td></tr>
        <tr><td> 402 </td><td> Quota exceeded </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Access is denied </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal service error </td><td>  -  </td></tr>
     </table>
     */
    public Netlicensing updateProductModule(String productModuleNumber, Boolean active, List<String> licenseTemplate, String licensingModel, Integer maxCheckoutValidity, String name, List<String> nodeSecretMode, String number, Integer redThreshold, Integer yellowThreshold) throws ApiException {
        ApiResponse<Netlicensing> localVarResp = updateProductModuleWithHttpInfo(productModuleNumber, active, licenseTemplate, licensingModel, maxCheckoutValidity, name, nodeSecretMode, number, redThreshold, yellowThreshold);
        return localVarResp.getData();
    }

    /**
     * Update Product Module
     * Sets the provided properties to a Product Module. Return an updated Product Module
     * @param productModuleNumber Unique number (across all Products of a Vendor) that identifies the Product Module. Vendor can assign this number when creating a Product Module or let NetLicensing generate one. Read-only after creation of the first Licensee for the Product. (required)
     * @param active If set to &#39;false&#39;, the Product Module is disabled. Licensees can not obtain any new Licenses for this Product Module. (optional)
     * @param licenseTemplate License Template. Mandatory for &#39;Try &amp;amp; Buy&#39; licensing model. (optional)
     * @param licensingModel Licensing model applied to this Product Module. Defines what License Templates can be configured for the Product Module and how Licenses for this Product Module are processed during validation. (optional)
     * @param maxCheckoutValidity Maximum checkout validity (days). Mandatory for &#39;Floating&#39; licensing model. (optional)
     * @param name Product Module name that is visible to the end customers in NetLicensing Shop. (optional)
     * @param nodeSecretMode Secret Mode. Mandatory for &#39;Node-Locked&#39; licensing model. (optional)
     * @param number New Product Module number (update). (optional)
     * @param redThreshold Remaining time volume for red level. Mandatory for &#39;Rental&#39; licensing model. (optional)
     * @param yellowThreshold Remaining time volume for yellow level. Mandatory for &#39;Rental&#39; licensing model. (optional)
     * @return ApiResponse&lt;Netlicensing&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful request </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Malformed or illegal request </td><td>  -  </td></tr>
        <tr><td> 402 </td><td> Quota exceeded </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Access is denied </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal service error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Netlicensing> updateProductModuleWithHttpInfo(String productModuleNumber, Boolean active, List<String> licenseTemplate, String licensingModel, Integer maxCheckoutValidity, String name, List<String> nodeSecretMode, String number, Integer redThreshold, Integer yellowThreshold) throws ApiException {
        okhttp3.Call localVarCall = updateProductModuleValidateBeforeCall(productModuleNumber, active, licenseTemplate, licensingModel, maxCheckoutValidity, name, nodeSecretMode, number, redThreshold, yellowThreshold, null);
        Type localVarReturnType = new TypeToken<Netlicensing>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update Product Module (asynchronously)
     * Sets the provided properties to a Product Module. Return an updated Product Module
     * @param productModuleNumber Unique number (across all Products of a Vendor) that identifies the Product Module. Vendor can assign this number when creating a Product Module or let NetLicensing generate one. Read-only after creation of the first Licensee for the Product. (required)
     * @param active If set to &#39;false&#39;, the Product Module is disabled. Licensees can not obtain any new Licenses for this Product Module. (optional)
     * @param licenseTemplate License Template. Mandatory for &#39;Try &amp;amp; Buy&#39; licensing model. (optional)
     * @param licensingModel Licensing model applied to this Product Module. Defines what License Templates can be configured for the Product Module and how Licenses for this Product Module are processed during validation. (optional)
     * @param maxCheckoutValidity Maximum checkout validity (days). Mandatory for &#39;Floating&#39; licensing model. (optional)
     * @param name Product Module name that is visible to the end customers in NetLicensing Shop. (optional)
     * @param nodeSecretMode Secret Mode. Mandatory for &#39;Node-Locked&#39; licensing model. (optional)
     * @param number New Product Module number (update). (optional)
     * @param redThreshold Remaining time volume for red level. Mandatory for &#39;Rental&#39; licensing model. (optional)
     * @param yellowThreshold Remaining time volume for yellow level. Mandatory for &#39;Rental&#39; licensing model. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful request </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Malformed or illegal request </td><td>  -  </td></tr>
        <tr><td> 402 </td><td> Quota exceeded </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Access is denied </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal service error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateProductModuleAsync(String productModuleNumber, Boolean active, List<String> licenseTemplate, String licensingModel, Integer maxCheckoutValidity, String name, List<String> nodeSecretMode, String number, Integer redThreshold, Integer yellowThreshold, final ApiCallback<Netlicensing> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateProductModuleValidateBeforeCall(productModuleNumber, active, licenseTemplate, licensingModel, maxCheckoutValidity, name, nodeSecretMode, number, redThreshold, yellowThreshold, _callback);
        Type localVarReturnType = new TypeToken<Netlicensing>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
