/*
 * Labs64 NetLicensing RESTful API Test Center
 * The Labs64 <a href='https://netlicensing.io/wiki/restful-api' target='_blank'>NetLicensing RESTful API</a> gives you access to NetLicensingâ€™s core features.<br/><br/><strong>Authentication</strong><br/>You authenticate to the NetLicensing API by providing your account credentials or simply use our demo account - <code>demo:demo</code><br/><br/>Find out more about Labs64 NetLicensing at <a href='https://netlicensing.io' target='_blank'>netlicensing.io</a>
 *
 * The version of the OpenAPI document: 2.x
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.Netlicensing;
import java.time.OffsetDateTime;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class TransactionApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public TransactionApi() {
        this(Configuration.getDefaultApiClient());
    }

    public TransactionApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for createTransaction
     * @param active Always &#39;true&#39; for Transactions (required)
     * @param source AUTO Transaction for internal use only (required)
     * @param status  (required)
     * @param dateClosed  (optional)
     * @param dateCreated  (optional)
     * @param licenseeNumber  (optional)
     * @param number Unique number (across all Products of a Vendor) that identifies the Transaction (optional)
     * @param paymentMethod  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful request </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Malformed or illegal request </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Access is denied </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal service error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createTransactionCall(Boolean active, String source, String status, OffsetDateTime dateClosed, OffsetDateTime dateCreated, String licenseeNumber, String number, String paymentMethod, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/transaction";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (active != null) {
            localVarFormParams.put("active", active);
        }

        if (dateClosed != null) {
            localVarFormParams.put("dateClosed", dateClosed);
        }

        if (dateCreated != null) {
            localVarFormParams.put("dateCreated", dateCreated);
        }

        if (licenseeNumber != null) {
            localVarFormParams.put("licenseeNumber", licenseeNumber);
        }

        if (number != null) {
            localVarFormParams.put("number", number);
        }

        if (paymentMethod != null) {
            localVarFormParams.put("paymentMethod", paymentMethod);
        }

        if (source != null) {
            localVarFormParams.put("source", source);
        }

        if (status != null) {
            localVarFormParams.put("status", status);
        }

        final String[] localVarAccepts = {
            "application/json",
            "application/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/x-www-form-urlencoded"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createTransactionValidateBeforeCall(Boolean active, String source, String status, OffsetDateTime dateClosed, OffsetDateTime dateCreated, String licenseeNumber, String number, String paymentMethod, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'active' is set
        if (active == null) {
            throw new ApiException("Missing the required parameter 'active' when calling createTransaction(Async)");
        }

        // verify the required parameter 'source' is set
        if (source == null) {
            throw new ApiException("Missing the required parameter 'source' when calling createTransaction(Async)");
        }

        // verify the required parameter 'status' is set
        if (status == null) {
            throw new ApiException("Missing the required parameter 'status' when calling createTransaction(Async)");
        }

        return createTransactionCall(active, source, status, dateClosed, dateCreated, licenseeNumber, number, paymentMethod, _callback);

    }

    /**
     * Create Transaction
     * Creates a new Transaction
     * @param active Always &#39;true&#39; for Transactions (required)
     * @param source AUTO Transaction for internal use only (required)
     * @param status  (required)
     * @param dateClosed  (optional)
     * @param dateCreated  (optional)
     * @param licenseeNumber  (optional)
     * @param number Unique number (across all Products of a Vendor) that identifies the Transaction (optional)
     * @param paymentMethod  (optional)
     * @return Netlicensing
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful request </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Malformed or illegal request </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Access is denied </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal service error </td><td>  -  </td></tr>
     </table>
     */
    public Netlicensing createTransaction(Boolean active, String source, String status, OffsetDateTime dateClosed, OffsetDateTime dateCreated, String licenseeNumber, String number, String paymentMethod) throws ApiException {
        ApiResponse<Netlicensing> localVarResp = createTransactionWithHttpInfo(active, source, status, dateClosed, dateCreated, licenseeNumber, number, paymentMethod);
        return localVarResp.getData();
    }

    /**
     * Create Transaction
     * Creates a new Transaction
     * @param active Always &#39;true&#39; for Transactions (required)
     * @param source AUTO Transaction for internal use only (required)
     * @param status  (required)
     * @param dateClosed  (optional)
     * @param dateCreated  (optional)
     * @param licenseeNumber  (optional)
     * @param number Unique number (across all Products of a Vendor) that identifies the Transaction (optional)
     * @param paymentMethod  (optional)
     * @return ApiResponse&lt;Netlicensing&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful request </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Malformed or illegal request </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Access is denied </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal service error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Netlicensing> createTransactionWithHttpInfo(Boolean active, String source, String status, OffsetDateTime dateClosed, OffsetDateTime dateCreated, String licenseeNumber, String number, String paymentMethod) throws ApiException {
        okhttp3.Call localVarCall = createTransactionValidateBeforeCall(active, source, status, dateClosed, dateCreated, licenseeNumber, number, paymentMethod, null);
        Type localVarReturnType = new TypeToken<Netlicensing>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create Transaction (asynchronously)
     * Creates a new Transaction
     * @param active Always &#39;true&#39; for Transactions (required)
     * @param source AUTO Transaction for internal use only (required)
     * @param status  (required)
     * @param dateClosed  (optional)
     * @param dateCreated  (optional)
     * @param licenseeNumber  (optional)
     * @param number Unique number (across all Products of a Vendor) that identifies the Transaction (optional)
     * @param paymentMethod  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful request </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Malformed or illegal request </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Access is denied </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal service error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createTransactionAsync(Boolean active, String source, String status, OffsetDateTime dateClosed, OffsetDateTime dateCreated, String licenseeNumber, String number, String paymentMethod, final ApiCallback<Netlicensing> _callback) throws ApiException {

        okhttp3.Call localVarCall = createTransactionValidateBeforeCall(active, source, status, dateClosed, dateCreated, licenseeNumber, number, paymentMethod, _callback);
        Type localVarReturnType = new TypeToken<Netlicensing>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getTransaction
     * @param transactionNumber Unique number (across all Products of a Vendor) that identifies the Transaction (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful request </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Malformed or illegal request </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Access is denied </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal service error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getTransactionCall(String transactionNumber, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/transaction/{transactionNumber}"
            .replace("{" + "transactionNumber" + "}", localVarApiClient.escapeString(transactionNumber.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "application/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getTransactionValidateBeforeCall(String transactionNumber, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'transactionNumber' is set
        if (transactionNumber == null) {
            throw new ApiException("Missing the required parameter 'transactionNumber' when calling getTransaction(Async)");
        }

        return getTransactionCall(transactionNumber, _callback);

    }

    /**
     * Get Transaction 
     * Return a Transaction by &#39;transactionNumber&#39;
     * @param transactionNumber Unique number (across all Products of a Vendor) that identifies the Transaction (required)
     * @return Netlicensing
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful request </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Malformed or illegal request </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Access is denied </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal service error </td><td>  -  </td></tr>
     </table>
     */
    public Netlicensing getTransaction(String transactionNumber) throws ApiException {
        ApiResponse<Netlicensing> localVarResp = getTransactionWithHttpInfo(transactionNumber);
        return localVarResp.getData();
    }

    /**
     * Get Transaction 
     * Return a Transaction by &#39;transactionNumber&#39;
     * @param transactionNumber Unique number (across all Products of a Vendor) that identifies the Transaction (required)
     * @return ApiResponse&lt;Netlicensing&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful request </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Malformed or illegal request </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Access is denied </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal service error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Netlicensing> getTransactionWithHttpInfo(String transactionNumber) throws ApiException {
        okhttp3.Call localVarCall = getTransactionValidateBeforeCall(transactionNumber, null);
        Type localVarReturnType = new TypeToken<Netlicensing>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get Transaction  (asynchronously)
     * Return a Transaction by &#39;transactionNumber&#39;
     * @param transactionNumber Unique number (across all Products of a Vendor) that identifies the Transaction (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful request </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Malformed or illegal request </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Access is denied </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal service error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getTransactionAsync(String transactionNumber, final ApiCallback<Netlicensing> _callback) throws ApiException {

        okhttp3.Call localVarCall = getTransactionValidateBeforeCall(transactionNumber, _callback);
        Type localVarReturnType = new TypeToken<Netlicensing>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for listTransactions
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful request </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Malformed or illegal request </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Access is denied </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal service error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listTransactionsCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/transaction";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "application/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listTransactionsValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return listTransactionsCall(_callback);

    }

    /**
     * List Transactions
     * Return a list of all Transactions for the current Vendor
     * @return List&lt;Netlicensing&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful request </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Malformed or illegal request </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Access is denied </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal service error </td><td>  -  </td></tr>
     </table>
     */
    public List<Netlicensing> listTransactions() throws ApiException {
        ApiResponse<List<Netlicensing>> localVarResp = listTransactionsWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * List Transactions
     * Return a list of all Transactions for the current Vendor
     * @return ApiResponse&lt;List&lt;Netlicensing&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful request </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Malformed or illegal request </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Access is denied </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal service error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<Netlicensing>> listTransactionsWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = listTransactionsValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<List<Netlicensing>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List Transactions (asynchronously)
     * Return a list of all Transactions for the current Vendor
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful request </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Malformed or illegal request </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Access is denied </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal service error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listTransactionsAsync(final ApiCallback<List<Netlicensing>> _callback) throws ApiException {

        okhttp3.Call localVarCall = listTransactionsValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<List<Netlicensing>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateTransaction
     * @param transactionNumber Unique number (across all Products of a Vendor) that identifies the Transaction (required)
     * @param active Always &#39;true&#39; for Transactions (optional)
     * @param dateClosed  (optional)
     * @param dateCreated  (optional)
     * @param number Unique number (across all Products of a Vendor) that identifies the Transaction (optional)
     * @param paymentMethod  (optional)
     * @param source AUTO Transaction for internal use only (optional)
     * @param status  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful request </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Malformed or illegal request </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Access is denied </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal service error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateTransactionCall(String transactionNumber, Boolean active, OffsetDateTime dateClosed, OffsetDateTime dateCreated, String number, String paymentMethod, String source, String status, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/transaction/{transactionNumber}"
            .replace("{" + "transactionNumber" + "}", localVarApiClient.escapeString(transactionNumber.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (active != null) {
            localVarFormParams.put("active", active);
        }

        if (dateClosed != null) {
            localVarFormParams.put("dateClosed", dateClosed);
        }

        if (dateCreated != null) {
            localVarFormParams.put("dateCreated", dateCreated);
        }

        if (number != null) {
            localVarFormParams.put("number", number);
        }

        if (paymentMethod != null) {
            localVarFormParams.put("paymentMethod", paymentMethod);
        }

        if (source != null) {
            localVarFormParams.put("source", source);
        }

        if (status != null) {
            localVarFormParams.put("status", status);
        }

        final String[] localVarAccepts = {
            "application/json",
            "application/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/x-www-form-urlencoded"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateTransactionValidateBeforeCall(String transactionNumber, Boolean active, OffsetDateTime dateClosed, OffsetDateTime dateCreated, String number, String paymentMethod, String source, String status, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'transactionNumber' is set
        if (transactionNumber == null) {
            throw new ApiException("Missing the required parameter 'transactionNumber' when calling updateTransaction(Async)");
        }

        return updateTransactionCall(transactionNumber, active, dateClosed, dateCreated, number, paymentMethod, source, status, _callback);

    }

    /**
     * Update Transaction
     * Sets the provided properties to a Transaction. Return an updated Transaction
     * @param transactionNumber Unique number (across all Products of a Vendor) that identifies the Transaction (required)
     * @param active Always &#39;true&#39; for Transactions (optional)
     * @param dateClosed  (optional)
     * @param dateCreated  (optional)
     * @param number Unique number (across all Products of a Vendor) that identifies the Transaction (optional)
     * @param paymentMethod  (optional)
     * @param source AUTO Transaction for internal use only (optional)
     * @param status  (optional)
     * @return Netlicensing
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful request </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Malformed or illegal request </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Access is denied </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal service error </td><td>  -  </td></tr>
     </table>
     */
    public Netlicensing updateTransaction(String transactionNumber, Boolean active, OffsetDateTime dateClosed, OffsetDateTime dateCreated, String number, String paymentMethod, String source, String status) throws ApiException {
        ApiResponse<Netlicensing> localVarResp = updateTransactionWithHttpInfo(transactionNumber, active, dateClosed, dateCreated, number, paymentMethod, source, status);
        return localVarResp.getData();
    }

    /**
     * Update Transaction
     * Sets the provided properties to a Transaction. Return an updated Transaction
     * @param transactionNumber Unique number (across all Products of a Vendor) that identifies the Transaction (required)
     * @param active Always &#39;true&#39; for Transactions (optional)
     * @param dateClosed  (optional)
     * @param dateCreated  (optional)
     * @param number Unique number (across all Products of a Vendor) that identifies the Transaction (optional)
     * @param paymentMethod  (optional)
     * @param source AUTO Transaction for internal use only (optional)
     * @param status  (optional)
     * @return ApiResponse&lt;Netlicensing&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful request </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Malformed or illegal request </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Access is denied </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal service error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Netlicensing> updateTransactionWithHttpInfo(String transactionNumber, Boolean active, OffsetDateTime dateClosed, OffsetDateTime dateCreated, String number, String paymentMethod, String source, String status) throws ApiException {
        okhttp3.Call localVarCall = updateTransactionValidateBeforeCall(transactionNumber, active, dateClosed, dateCreated, number, paymentMethod, source, status, null);
        Type localVarReturnType = new TypeToken<Netlicensing>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update Transaction (asynchronously)
     * Sets the provided properties to a Transaction. Return an updated Transaction
     * @param transactionNumber Unique number (across all Products of a Vendor) that identifies the Transaction (required)
     * @param active Always &#39;true&#39; for Transactions (optional)
     * @param dateClosed  (optional)
     * @param dateCreated  (optional)
     * @param number Unique number (across all Products of a Vendor) that identifies the Transaction (optional)
     * @param paymentMethod  (optional)
     * @param source AUTO Transaction for internal use only (optional)
     * @param status  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful request </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Malformed or illegal request </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Access is denied </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal service error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateTransactionAsync(String transactionNumber, Boolean active, OffsetDateTime dateClosed, OffsetDateTime dateCreated, String number, String paymentMethod, String source, String status, final ApiCallback<Netlicensing> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateTransactionValidateBeforeCall(transactionNumber, active, dateClosed, dateCreated, number, paymentMethod, source, status, _callback);
        Type localVarReturnType = new TypeToken<Netlicensing>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
