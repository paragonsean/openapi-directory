/*
 * Labs64 NetLicensing RESTful API Test Center
 * The Labs64 <a href='https://netlicensing.io/wiki/restful-api' target='_blank'>NetLicensing RESTful API</a> gives you access to NetLicensingâ€™s core features.<br/><br/><strong>Authentication</strong><br/>You authenticate to the NetLicensing API by providing your account credentials or simply use our demo account - <code>demo:demo</code><br/><br/>Find out more about Labs64 NetLicensing at <a href='https://netlicensing.io' target='_blank'>netlicensing.io</a>
 *
 * The version of the OpenAPI document: 2.x
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.Netlicensing;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class TokenApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public TokenApi() {
        this(Configuration.getDefaultApiClient());
    }

    public TokenApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for createToken
     * @param tokenType Token type to be generated (required)
     * @param action For &lt;i&gt;type&#x3D;ACTION&lt;/i&gt; only; defines token action to be perfromed (optional)
     * @param apiKeyRole For &lt;i&gt;tokenType&#x3D;APIKEY&lt;/i&gt; only (default: ROLE_APIKEY_LICENSEE); defines token RoleID (optional)
     * @param cancelURL For &lt;i&gt;tokenType&#x3D;SHOP&lt;/i&gt; only; take customers to this URL when they cancel their checkout (optional)
     * @param cancelURLTitle For &lt;i&gt;tokenType&#x3D;SHOP&lt;/i&gt; only; shop link title for cancel checkout process (optional)
     * @param licenseTemplateNumber For &lt;i&gt;tokenType&#x3D;SHOP&lt;/i&gt; only; identifies LicenseTemplate that will be assigned to the shop token (optional)
     * @param licenseeNumber For &lt;i&gt;tokenType&#x3D;SHOP&lt;/i&gt; or &lt;i&gt;type&#x3D;ACTION&lt;/i&gt; only (mandatory); identifies Licensee that will be assigned to the shop token (optional)
     * @param predefinedShoppingItem For &lt;i&gt;tokenType&#x3D;SHOP&lt;/i&gt; only; identifies Shopping Item name that will be shown to the customer (optional)
     * @param privateKey For &lt;i&gt;tokenType&#x3D;APIKEY&lt;/i&gt; only (optional); defines PrivateKey to be used with the validate method&lt;br/&gt;&lt;strong&gt;Please Note:&lt;/strong&gt; PrivateKey need to be provided as one line without spaces (optional)
     * @param productNumber For &lt;i&gt;tokenType&#x3D;SHOP&lt;/i&gt; only (mandatory); identifies Product that will be assigned to the shop token (optional)
     * @param successURL For &lt;i&gt;tokenType&#x3D;SHOP&lt;/i&gt; only; take customers to this URL when they finish checkout (optional)
     * @param successURLTitle For &lt;i&gt;tokenType&#x3D;SHOP&lt;/i&gt; only; shop link title for successful checkout process (optional)
     * @param type For &lt;i&gt;tokenType&#x3D;DEFAULT&lt;/i&gt; only; action type to be set (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful request </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Malformed or illegal request </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Access is denied </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal service error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createTokenCall(String tokenType, String action, String apiKeyRole, String cancelURL, String cancelURLTitle, String licenseTemplateNumber, String licenseeNumber, String predefinedShoppingItem, String privateKey, String productNumber, String successURL, String successURLTitle, String type, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/token";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (action != null) {
            localVarFormParams.put("action", action);
        }

        if (apiKeyRole != null) {
            localVarFormParams.put("apiKeyRole", apiKeyRole);
        }

        if (cancelURL != null) {
            localVarFormParams.put("cancelURL", cancelURL);
        }

        if (cancelURLTitle != null) {
            localVarFormParams.put("cancelURLTitle", cancelURLTitle);
        }

        if (licenseTemplateNumber != null) {
            localVarFormParams.put("licenseTemplateNumber", licenseTemplateNumber);
        }

        if (licenseeNumber != null) {
            localVarFormParams.put("licenseeNumber", licenseeNumber);
        }

        if (predefinedShoppingItem != null) {
            localVarFormParams.put("predefinedShoppingItem", predefinedShoppingItem);
        }

        if (privateKey != null) {
            localVarFormParams.put("privateKey", privateKey);
        }

        if (productNumber != null) {
            localVarFormParams.put("productNumber", productNumber);
        }

        if (successURL != null) {
            localVarFormParams.put("successURL", successURL);
        }

        if (successURLTitle != null) {
            localVarFormParams.put("successURLTitle", successURLTitle);
        }

        if (tokenType != null) {
            localVarFormParams.put("tokenType", tokenType);
        }

        if (type != null) {
            localVarFormParams.put("type", type);
        }

        final String[] localVarAccepts = {
            "application/json",
            "application/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/x-www-form-urlencoded"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createTokenValidateBeforeCall(String tokenType, String action, String apiKeyRole, String cancelURL, String cancelURLTitle, String licenseTemplateNumber, String licenseeNumber, String predefinedShoppingItem, String privateKey, String productNumber, String successURL, String successURLTitle, String type, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'tokenType' is set
        if (tokenType == null) {
            throw new ApiException("Missing the required parameter 'tokenType' when calling createToken(Async)");
        }

        return createTokenCall(tokenType, action, apiKeyRole, cancelURL, cancelURLTitle, licenseTemplateNumber, licenseeNumber, predefinedShoppingItem, privateKey, productNumber, successURL, successURLTitle, type, _callback);

    }

    /**
     * Create token
     * Create token by &#39;tokenType&#39; and additional token parameters
     * @param tokenType Token type to be generated (required)
     * @param action For &lt;i&gt;type&#x3D;ACTION&lt;/i&gt; only; defines token action to be perfromed (optional)
     * @param apiKeyRole For &lt;i&gt;tokenType&#x3D;APIKEY&lt;/i&gt; only (default: ROLE_APIKEY_LICENSEE); defines token RoleID (optional)
     * @param cancelURL For &lt;i&gt;tokenType&#x3D;SHOP&lt;/i&gt; only; take customers to this URL when they cancel their checkout (optional)
     * @param cancelURLTitle For &lt;i&gt;tokenType&#x3D;SHOP&lt;/i&gt; only; shop link title for cancel checkout process (optional)
     * @param licenseTemplateNumber For &lt;i&gt;tokenType&#x3D;SHOP&lt;/i&gt; only; identifies LicenseTemplate that will be assigned to the shop token (optional)
     * @param licenseeNumber For &lt;i&gt;tokenType&#x3D;SHOP&lt;/i&gt; or &lt;i&gt;type&#x3D;ACTION&lt;/i&gt; only (mandatory); identifies Licensee that will be assigned to the shop token (optional)
     * @param predefinedShoppingItem For &lt;i&gt;tokenType&#x3D;SHOP&lt;/i&gt; only; identifies Shopping Item name that will be shown to the customer (optional)
     * @param privateKey For &lt;i&gt;tokenType&#x3D;APIKEY&lt;/i&gt; only (optional); defines PrivateKey to be used with the validate method&lt;br/&gt;&lt;strong&gt;Please Note:&lt;/strong&gt; PrivateKey need to be provided as one line without spaces (optional)
     * @param productNumber For &lt;i&gt;tokenType&#x3D;SHOP&lt;/i&gt; only (mandatory); identifies Product that will be assigned to the shop token (optional)
     * @param successURL For &lt;i&gt;tokenType&#x3D;SHOP&lt;/i&gt; only; take customers to this URL when they finish checkout (optional)
     * @param successURLTitle For &lt;i&gt;tokenType&#x3D;SHOP&lt;/i&gt; only; shop link title for successful checkout process (optional)
     * @param type For &lt;i&gt;tokenType&#x3D;DEFAULT&lt;/i&gt; only; action type to be set (optional)
     * @return Netlicensing
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful request </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Malformed or illegal request </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Access is denied </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal service error </td><td>  -  </td></tr>
     </table>
     */
    public Netlicensing createToken(String tokenType, String action, String apiKeyRole, String cancelURL, String cancelURLTitle, String licenseTemplateNumber, String licenseeNumber, String predefinedShoppingItem, String privateKey, String productNumber, String successURL, String successURLTitle, String type) throws ApiException {
        ApiResponse<Netlicensing> localVarResp = createTokenWithHttpInfo(tokenType, action, apiKeyRole, cancelURL, cancelURLTitle, licenseTemplateNumber, licenseeNumber, predefinedShoppingItem, privateKey, productNumber, successURL, successURLTitle, type);
        return localVarResp.getData();
    }

    /**
     * Create token
     * Create token by &#39;tokenType&#39; and additional token parameters
     * @param tokenType Token type to be generated (required)
     * @param action For &lt;i&gt;type&#x3D;ACTION&lt;/i&gt; only; defines token action to be perfromed (optional)
     * @param apiKeyRole For &lt;i&gt;tokenType&#x3D;APIKEY&lt;/i&gt; only (default: ROLE_APIKEY_LICENSEE); defines token RoleID (optional)
     * @param cancelURL For &lt;i&gt;tokenType&#x3D;SHOP&lt;/i&gt; only; take customers to this URL when they cancel their checkout (optional)
     * @param cancelURLTitle For &lt;i&gt;tokenType&#x3D;SHOP&lt;/i&gt; only; shop link title for cancel checkout process (optional)
     * @param licenseTemplateNumber For &lt;i&gt;tokenType&#x3D;SHOP&lt;/i&gt; only; identifies LicenseTemplate that will be assigned to the shop token (optional)
     * @param licenseeNumber For &lt;i&gt;tokenType&#x3D;SHOP&lt;/i&gt; or &lt;i&gt;type&#x3D;ACTION&lt;/i&gt; only (mandatory); identifies Licensee that will be assigned to the shop token (optional)
     * @param predefinedShoppingItem For &lt;i&gt;tokenType&#x3D;SHOP&lt;/i&gt; only; identifies Shopping Item name that will be shown to the customer (optional)
     * @param privateKey For &lt;i&gt;tokenType&#x3D;APIKEY&lt;/i&gt; only (optional); defines PrivateKey to be used with the validate method&lt;br/&gt;&lt;strong&gt;Please Note:&lt;/strong&gt; PrivateKey need to be provided as one line without spaces (optional)
     * @param productNumber For &lt;i&gt;tokenType&#x3D;SHOP&lt;/i&gt; only (mandatory); identifies Product that will be assigned to the shop token (optional)
     * @param successURL For &lt;i&gt;tokenType&#x3D;SHOP&lt;/i&gt; only; take customers to this URL when they finish checkout (optional)
     * @param successURLTitle For &lt;i&gt;tokenType&#x3D;SHOP&lt;/i&gt; only; shop link title for successful checkout process (optional)
     * @param type For &lt;i&gt;tokenType&#x3D;DEFAULT&lt;/i&gt; only; action type to be set (optional)
     * @return ApiResponse&lt;Netlicensing&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful request </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Malformed or illegal request </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Access is denied </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal service error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Netlicensing> createTokenWithHttpInfo(String tokenType, String action, String apiKeyRole, String cancelURL, String cancelURLTitle, String licenseTemplateNumber, String licenseeNumber, String predefinedShoppingItem, String privateKey, String productNumber, String successURL, String successURLTitle, String type) throws ApiException {
        okhttp3.Call localVarCall = createTokenValidateBeforeCall(tokenType, action, apiKeyRole, cancelURL, cancelURLTitle, licenseTemplateNumber, licenseeNumber, predefinedShoppingItem, privateKey, productNumber, successURL, successURLTitle, type, null);
        Type localVarReturnType = new TypeToken<Netlicensing>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create token (asynchronously)
     * Create token by &#39;tokenType&#39; and additional token parameters
     * @param tokenType Token type to be generated (required)
     * @param action For &lt;i&gt;type&#x3D;ACTION&lt;/i&gt; only; defines token action to be perfromed (optional)
     * @param apiKeyRole For &lt;i&gt;tokenType&#x3D;APIKEY&lt;/i&gt; only (default: ROLE_APIKEY_LICENSEE); defines token RoleID (optional)
     * @param cancelURL For &lt;i&gt;tokenType&#x3D;SHOP&lt;/i&gt; only; take customers to this URL when they cancel their checkout (optional)
     * @param cancelURLTitle For &lt;i&gt;tokenType&#x3D;SHOP&lt;/i&gt; only; shop link title for cancel checkout process (optional)
     * @param licenseTemplateNumber For &lt;i&gt;tokenType&#x3D;SHOP&lt;/i&gt; only; identifies LicenseTemplate that will be assigned to the shop token (optional)
     * @param licenseeNumber For &lt;i&gt;tokenType&#x3D;SHOP&lt;/i&gt; or &lt;i&gt;type&#x3D;ACTION&lt;/i&gt; only (mandatory); identifies Licensee that will be assigned to the shop token (optional)
     * @param predefinedShoppingItem For &lt;i&gt;tokenType&#x3D;SHOP&lt;/i&gt; only; identifies Shopping Item name that will be shown to the customer (optional)
     * @param privateKey For &lt;i&gt;tokenType&#x3D;APIKEY&lt;/i&gt; only (optional); defines PrivateKey to be used with the validate method&lt;br/&gt;&lt;strong&gt;Please Note:&lt;/strong&gt; PrivateKey need to be provided as one line without spaces (optional)
     * @param productNumber For &lt;i&gt;tokenType&#x3D;SHOP&lt;/i&gt; only (mandatory); identifies Product that will be assigned to the shop token (optional)
     * @param successURL For &lt;i&gt;tokenType&#x3D;SHOP&lt;/i&gt; only; take customers to this URL when they finish checkout (optional)
     * @param successURLTitle For &lt;i&gt;tokenType&#x3D;SHOP&lt;/i&gt; only; shop link title for successful checkout process (optional)
     * @param type For &lt;i&gt;tokenType&#x3D;DEFAULT&lt;/i&gt; only; action type to be set (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful request </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Malformed or illegal request </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Access is denied </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal service error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createTokenAsync(String tokenType, String action, String apiKeyRole, String cancelURL, String cancelURLTitle, String licenseTemplateNumber, String licenseeNumber, String predefinedShoppingItem, String privateKey, String productNumber, String successURL, String successURLTitle, String type, final ApiCallback<Netlicensing> _callback) throws ApiException {

        okhttp3.Call localVarCall = createTokenValidateBeforeCall(tokenType, action, apiKeyRole, cancelURL, cancelURLTitle, licenseTemplateNumber, licenseeNumber, predefinedShoppingItem, privateKey, productNumber, successURL, successURLTitle, type, _callback);
        Type localVarReturnType = new TypeToken<Netlicensing>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteToken
     * @param tokenNumber Token number (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful request </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Malformed or illegal request </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Access is denied </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal service error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteTokenCall(String tokenNumber, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/token/{tokenNumber}"
            .replace("{" + "tokenNumber" + "}", localVarApiClient.escapeString(tokenNumber.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "application/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteTokenValidateBeforeCall(String tokenNumber, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'tokenNumber' is set
        if (tokenNumber == null) {
            throw new ApiException("Missing the required parameter 'tokenNumber' when calling deleteToken(Async)");
        }

        return deleteTokenCall(tokenNumber, _callback);

    }

    /**
     * Delete token
     * Delete a token by &#39;number&#39;
     * @param tokenNumber Token number (required)
     * @return Netlicensing
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful request </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Malformed or illegal request </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Access is denied </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal service error </td><td>  -  </td></tr>
     </table>
     */
    public Netlicensing deleteToken(String tokenNumber) throws ApiException {
        ApiResponse<Netlicensing> localVarResp = deleteTokenWithHttpInfo(tokenNumber);
        return localVarResp.getData();
    }

    /**
     * Delete token
     * Delete a token by &#39;number&#39;
     * @param tokenNumber Token number (required)
     * @return ApiResponse&lt;Netlicensing&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful request </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Malformed or illegal request </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Access is denied </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal service error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Netlicensing> deleteTokenWithHttpInfo(String tokenNumber) throws ApiException {
        okhttp3.Call localVarCall = deleteTokenValidateBeforeCall(tokenNumber, null);
        Type localVarReturnType = new TypeToken<Netlicensing>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Delete token (asynchronously)
     * Delete a token by &#39;number&#39;
     * @param tokenNumber Token number (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful request </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Malformed or illegal request </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Access is denied </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal service error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteTokenAsync(String tokenNumber, final ApiCallback<Netlicensing> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteTokenValidateBeforeCall(tokenNumber, _callback);
        Type localVarReturnType = new TypeToken<Netlicensing>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getToken
     * @param tokenNumber Token number (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful request </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Malformed or illegal request </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Access is denied </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal service error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getTokenCall(String tokenNumber, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/token/{tokenNumber}"
            .replace("{" + "tokenNumber" + "}", localVarApiClient.escapeString(tokenNumber.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "application/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getTokenValidateBeforeCall(String tokenNumber, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'tokenNumber' is set
        if (tokenNumber == null) {
            throw new ApiException("Missing the required parameter 'tokenNumber' when calling getToken(Async)");
        }

        return getTokenCall(tokenNumber, _callback);

    }

    /**
     * Get token
     * Return a token by &#39;tokenNumber&#39;
     * @param tokenNumber Token number (required)
     * @return Netlicensing
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful request </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Malformed or illegal request </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Access is denied </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal service error </td><td>  -  </td></tr>
     </table>
     */
    public Netlicensing getToken(String tokenNumber) throws ApiException {
        ApiResponse<Netlicensing> localVarResp = getTokenWithHttpInfo(tokenNumber);
        return localVarResp.getData();
    }

    /**
     * Get token
     * Return a token by &#39;tokenNumber&#39;
     * @param tokenNumber Token number (required)
     * @return ApiResponse&lt;Netlicensing&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful request </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Malformed or illegal request </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Access is denied </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal service error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Netlicensing> getTokenWithHttpInfo(String tokenNumber) throws ApiException {
        okhttp3.Call localVarCall = getTokenValidateBeforeCall(tokenNumber, null);
        Type localVarReturnType = new TypeToken<Netlicensing>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get token (asynchronously)
     * Return a token by &#39;tokenNumber&#39;
     * @param tokenNumber Token number (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful request </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Malformed or illegal request </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Access is denied </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal service error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getTokenAsync(String tokenNumber, final ApiCallback<Netlicensing> _callback) throws ApiException {

        okhttp3.Call localVarCall = getTokenValidateBeforeCall(tokenNumber, _callback);
        Type localVarReturnType = new TypeToken<Netlicensing>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for listTokens
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful request </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Malformed or illegal request </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Access is denied </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal service error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listTokensCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/token";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "application/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listTokensValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return listTokensCall(_callback);

    }

    /**
     * List Tokens
     * Return a list of all tokens for the current Vendor
     * @return List&lt;Netlicensing&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful request </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Malformed or illegal request </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Access is denied </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal service error </td><td>  -  </td></tr>
     </table>
     */
    public List<Netlicensing> listTokens() throws ApiException {
        ApiResponse<List<Netlicensing>> localVarResp = listTokensWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * List Tokens
     * Return a list of all tokens for the current Vendor
     * @return ApiResponse&lt;List&lt;Netlicensing&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful request </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Malformed or illegal request </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Access is denied </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal service error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<Netlicensing>> listTokensWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = listTokensValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<List<Netlicensing>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List Tokens (asynchronously)
     * Return a list of all tokens for the current Vendor
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful request </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Malformed or illegal request </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Access is denied </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal service error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listTokensAsync(final ApiCallback<List<Netlicensing>> _callback) throws ApiException {

        okhttp3.Call localVarCall = listTokensValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<List<Netlicensing>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
