/*
 * Labs64 NetLicensing RESTful API Test Center
 * The Labs64 <a href='https://netlicensing.io/wiki/restful-api' target='_blank'>NetLicensing RESTful API</a> gives you access to NetLicensingâ€™s core features.<br/><br/><strong>Authentication</strong><br/>You authenticate to the NetLicensing API by providing your account credentials or simply use our demo account - <code>demo:demo</code><br/><br/>Find out more about Labs64 NetLicensing at <a href='https://netlicensing.io' target='_blank'>netlicensing.io</a>
 *
 * The version of the OpenAPI document: 2.x
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.Netlicensing;
import java.time.OffsetDateTime;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class LicenseApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public LicenseApi() {
        this(Configuration.getDefaultApiClient());
    }

    public LicenseApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for createLicense
     * @param active  (required)
     * @param licenseTemplateNumber  (required)
     * @param licenseeNumber  (required)
     * @param currency Specifies currency for the License price. Check data types to discover which currencies are supported. Read-only, set from License Template on creation (optional)
     * @param hidden If set to &#39;true&#39;, this License is not shown in NetLicensing Shop as purchased License. Set from License Template on creation, if not specified explicitly (optional)
     * @param name Name for the Licensed item. Set from License Template on creation, if not specified explicitly. (optional)
     * @param number  (optional)
     * @param parentfeature Mandatory for &#39;TIMEVOLUME&#39; License Type and &#39;RENTAL&#39; licensing model (optional)
     * @param price Price for the License. If &gt;0, it must always be accompanied by the currency specification. Read-only, set from License Template on creation (optional)
     * @param quantity Mandatory for &#39;Pay-per-Use&#39; License Model. (optional)
     * @param startDate Mandatory for &#39;TIMEVOLUME&#39; License Type. (optional)
     * @param timeVolume Mandatory for &#39;TIMEVOLUME&#39; License Type. (optional)
     * @param timeVolumePeriod For &#39;TIMEVOLUME&#39; License Type. (optional)
     * @param usedQuantity Mandatory for &#39;Pay-per-Use&#39; License Model. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful request </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Malformed or illegal request </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Access is denied </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal service error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createLicenseCall(Boolean active, String licenseTemplateNumber, String licenseeNumber, String currency, Boolean hidden, String name, String number, String parentfeature, Double price, String quantity, OffsetDateTime startDate, String timeVolume, String timeVolumePeriod, String usedQuantity, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/license";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (active != null) {
            localVarFormParams.put("active", active);
        }

        if (currency != null) {
            localVarFormParams.put("currency", currency);
        }

        if (hidden != null) {
            localVarFormParams.put("hidden", hidden);
        }

        if (licenseTemplateNumber != null) {
            localVarFormParams.put("licenseTemplateNumber", licenseTemplateNumber);
        }

        if (licenseeNumber != null) {
            localVarFormParams.put("licenseeNumber", licenseeNumber);
        }

        if (name != null) {
            localVarFormParams.put("name", name);
        }

        if (number != null) {
            localVarFormParams.put("number", number);
        }

        if (parentfeature != null) {
            localVarFormParams.put("parentfeature", parentfeature);
        }

        if (price != null) {
            localVarFormParams.put("price", price);
        }

        if (quantity != null) {
            localVarFormParams.put("quantity", quantity);
        }

        if (startDate != null) {
            localVarFormParams.put("startDate", startDate);
        }

        if (timeVolume != null) {
            localVarFormParams.put("timeVolume", timeVolume);
        }

        if (timeVolumePeriod != null) {
            localVarFormParams.put("timeVolumePeriod", timeVolumePeriod);
        }

        if (usedQuantity != null) {
            localVarFormParams.put("usedQuantity", usedQuantity);
        }

        final String[] localVarAccepts = {
            "application/json",
            "application/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/x-www-form-urlencoded"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createLicenseValidateBeforeCall(Boolean active, String licenseTemplateNumber, String licenseeNumber, String currency, Boolean hidden, String name, String number, String parentfeature, Double price, String quantity, OffsetDateTime startDate, String timeVolume, String timeVolumePeriod, String usedQuantity, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'active' is set
        if (active == null) {
            throw new ApiException("Missing the required parameter 'active' when calling createLicense(Async)");
        }

        // verify the required parameter 'licenseTemplateNumber' is set
        if (licenseTemplateNumber == null) {
            throw new ApiException("Missing the required parameter 'licenseTemplateNumber' when calling createLicense(Async)");
        }

        // verify the required parameter 'licenseeNumber' is set
        if (licenseeNumber == null) {
            throw new ApiException("Missing the required parameter 'licenseeNumber' when calling createLicense(Async)");
        }

        return createLicenseCall(active, licenseTemplateNumber, licenseeNumber, currency, hidden, name, number, parentfeature, price, quantity, startDate, timeVolume, timeVolumePeriod, usedQuantity, _callback);

    }

    /**
     * Create License
     * Creates a new License
     * @param active  (required)
     * @param licenseTemplateNumber  (required)
     * @param licenseeNumber  (required)
     * @param currency Specifies currency for the License price. Check data types to discover which currencies are supported. Read-only, set from License Template on creation (optional)
     * @param hidden If set to &#39;true&#39;, this License is not shown in NetLicensing Shop as purchased License. Set from License Template on creation, if not specified explicitly (optional)
     * @param name Name for the Licensed item. Set from License Template on creation, if not specified explicitly. (optional)
     * @param number  (optional)
     * @param parentfeature Mandatory for &#39;TIMEVOLUME&#39; License Type and &#39;RENTAL&#39; licensing model (optional)
     * @param price Price for the License. If &gt;0, it must always be accompanied by the currency specification. Read-only, set from License Template on creation (optional)
     * @param quantity Mandatory for &#39;Pay-per-Use&#39; License Model. (optional)
     * @param startDate Mandatory for &#39;TIMEVOLUME&#39; License Type. (optional)
     * @param timeVolume Mandatory for &#39;TIMEVOLUME&#39; License Type. (optional)
     * @param timeVolumePeriod For &#39;TIMEVOLUME&#39; License Type. (optional)
     * @param usedQuantity Mandatory for &#39;Pay-per-Use&#39; License Model. (optional)
     * @return Netlicensing
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful request </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Malformed or illegal request </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Access is denied </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal service error </td><td>  -  </td></tr>
     </table>
     */
    public Netlicensing createLicense(Boolean active, String licenseTemplateNumber, String licenseeNumber, String currency, Boolean hidden, String name, String number, String parentfeature, Double price, String quantity, OffsetDateTime startDate, String timeVolume, String timeVolumePeriod, String usedQuantity) throws ApiException {
        ApiResponse<Netlicensing> localVarResp = createLicenseWithHttpInfo(active, licenseTemplateNumber, licenseeNumber, currency, hidden, name, number, parentfeature, price, quantity, startDate, timeVolume, timeVolumePeriod, usedQuantity);
        return localVarResp.getData();
    }

    /**
     * Create License
     * Creates a new License
     * @param active  (required)
     * @param licenseTemplateNumber  (required)
     * @param licenseeNumber  (required)
     * @param currency Specifies currency for the License price. Check data types to discover which currencies are supported. Read-only, set from License Template on creation (optional)
     * @param hidden If set to &#39;true&#39;, this License is not shown in NetLicensing Shop as purchased License. Set from License Template on creation, if not specified explicitly (optional)
     * @param name Name for the Licensed item. Set from License Template on creation, if not specified explicitly. (optional)
     * @param number  (optional)
     * @param parentfeature Mandatory for &#39;TIMEVOLUME&#39; License Type and &#39;RENTAL&#39; licensing model (optional)
     * @param price Price for the License. If &gt;0, it must always be accompanied by the currency specification. Read-only, set from License Template on creation (optional)
     * @param quantity Mandatory for &#39;Pay-per-Use&#39; License Model. (optional)
     * @param startDate Mandatory for &#39;TIMEVOLUME&#39; License Type. (optional)
     * @param timeVolume Mandatory for &#39;TIMEVOLUME&#39; License Type. (optional)
     * @param timeVolumePeriod For &#39;TIMEVOLUME&#39; License Type. (optional)
     * @param usedQuantity Mandatory for &#39;Pay-per-Use&#39; License Model. (optional)
     * @return ApiResponse&lt;Netlicensing&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful request </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Malformed or illegal request </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Access is denied </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal service error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Netlicensing> createLicenseWithHttpInfo(Boolean active, String licenseTemplateNumber, String licenseeNumber, String currency, Boolean hidden, String name, String number, String parentfeature, Double price, String quantity, OffsetDateTime startDate, String timeVolume, String timeVolumePeriod, String usedQuantity) throws ApiException {
        okhttp3.Call localVarCall = createLicenseValidateBeforeCall(active, licenseTemplateNumber, licenseeNumber, currency, hidden, name, number, parentfeature, price, quantity, startDate, timeVolume, timeVolumePeriod, usedQuantity, null);
        Type localVarReturnType = new TypeToken<Netlicensing>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create License (asynchronously)
     * Creates a new License
     * @param active  (required)
     * @param licenseTemplateNumber  (required)
     * @param licenseeNumber  (required)
     * @param currency Specifies currency for the License price. Check data types to discover which currencies are supported. Read-only, set from License Template on creation (optional)
     * @param hidden If set to &#39;true&#39;, this License is not shown in NetLicensing Shop as purchased License. Set from License Template on creation, if not specified explicitly (optional)
     * @param name Name for the Licensed item. Set from License Template on creation, if not specified explicitly. (optional)
     * @param number  (optional)
     * @param parentfeature Mandatory for &#39;TIMEVOLUME&#39; License Type and &#39;RENTAL&#39; licensing model (optional)
     * @param price Price for the License. If &gt;0, it must always be accompanied by the currency specification. Read-only, set from License Template on creation (optional)
     * @param quantity Mandatory for &#39;Pay-per-Use&#39; License Model. (optional)
     * @param startDate Mandatory for &#39;TIMEVOLUME&#39; License Type. (optional)
     * @param timeVolume Mandatory for &#39;TIMEVOLUME&#39; License Type. (optional)
     * @param timeVolumePeriod For &#39;TIMEVOLUME&#39; License Type. (optional)
     * @param usedQuantity Mandatory for &#39;Pay-per-Use&#39; License Model. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful request </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Malformed or illegal request </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Access is denied </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal service error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createLicenseAsync(Boolean active, String licenseTemplateNumber, String licenseeNumber, String currency, Boolean hidden, String name, String number, String parentfeature, Double price, String quantity, OffsetDateTime startDate, String timeVolume, String timeVolumePeriod, String usedQuantity, final ApiCallback<Netlicensing> _callback) throws ApiException {

        okhttp3.Call localVarCall = createLicenseValidateBeforeCall(active, licenseTemplateNumber, licenseeNumber, currency, hidden, name, number, parentfeature, price, quantity, startDate, timeVolume, timeVolumePeriod, usedQuantity, _callback);
        Type localVarReturnType = new TypeToken<Netlicensing>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteLicense
     * @param licenseNumber Unique number (across all Products/Licensees of a Vendor) that identifies the License. Vendor can assign this number when creating a License or let NetLicensing generate one. Read-only after corresponding creation Transaction status is set to closed. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful request </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Malformed or illegal request </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Access is denied </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal service error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteLicenseCall(String licenseNumber, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/license/{licenseNumber}"
            .replace("{" + "licenseNumber" + "}", localVarApiClient.escapeString(licenseNumber.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "application/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteLicenseValidateBeforeCall(String licenseNumber, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'licenseNumber' is set
        if (licenseNumber == null) {
            throw new ApiException("Missing the required parameter 'licenseNumber' when calling deleteLicense(Async)");
        }

        return deleteLicenseCall(licenseNumber, _callback);

    }

    /**
     * Delete License
     * Delete License by a &#39;licenseNumber&#39;
     * @param licenseNumber Unique number (across all Products/Licensees of a Vendor) that identifies the License. Vendor can assign this number when creating a License or let NetLicensing generate one. Read-only after corresponding creation Transaction status is set to closed. (required)
     * @return Netlicensing
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful request </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Malformed or illegal request </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Access is denied </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal service error </td><td>  -  </td></tr>
     </table>
     */
    public Netlicensing deleteLicense(String licenseNumber) throws ApiException {
        ApiResponse<Netlicensing> localVarResp = deleteLicenseWithHttpInfo(licenseNumber);
        return localVarResp.getData();
    }

    /**
     * Delete License
     * Delete License by a &#39;licenseNumber&#39;
     * @param licenseNumber Unique number (across all Products/Licensees of a Vendor) that identifies the License. Vendor can assign this number when creating a License or let NetLicensing generate one. Read-only after corresponding creation Transaction status is set to closed. (required)
     * @return ApiResponse&lt;Netlicensing&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful request </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Malformed or illegal request </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Access is denied </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal service error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Netlicensing> deleteLicenseWithHttpInfo(String licenseNumber) throws ApiException {
        okhttp3.Call localVarCall = deleteLicenseValidateBeforeCall(licenseNumber, null);
        Type localVarReturnType = new TypeToken<Netlicensing>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Delete License (asynchronously)
     * Delete License by a &#39;licenseNumber&#39;
     * @param licenseNumber Unique number (across all Products/Licensees of a Vendor) that identifies the License. Vendor can assign this number when creating a License or let NetLicensing generate one. Read-only after corresponding creation Transaction status is set to closed. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful request </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Malformed or illegal request </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Access is denied </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal service error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteLicenseAsync(String licenseNumber, final ApiCallback<Netlicensing> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteLicenseValidateBeforeCall(licenseNumber, _callback);
        Type localVarReturnType = new TypeToken<Netlicensing>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getLicense
     * @param licenseNumber Unique number (across all Products/Licensees of a Vendor) that identifies the License. Vendor can assign this number when creating a License or let NetLicensing generate one. Read-only after corresponding creation Transaction status is set to closed. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful request </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Malformed or illegal request </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Access is denied </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal service error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getLicenseCall(String licenseNumber, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/license/{licenseNumber}"
            .replace("{" + "licenseNumber" + "}", localVarApiClient.escapeString(licenseNumber.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "application/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getLicenseValidateBeforeCall(String licenseNumber, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'licenseNumber' is set
        if (licenseNumber == null) {
            throw new ApiException("Missing the required parameter 'licenseNumber' when calling getLicense(Async)");
        }

        return getLicenseCall(licenseNumber, _callback);

    }

    /**
     * Get License
     * Get License by a &#39;licenseNumber&#39;
     * @param licenseNumber Unique number (across all Products/Licensees of a Vendor) that identifies the License. Vendor can assign this number when creating a License or let NetLicensing generate one. Read-only after corresponding creation Transaction status is set to closed. (required)
     * @return Netlicensing
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful request </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Malformed or illegal request </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Access is denied </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal service error </td><td>  -  </td></tr>
     </table>
     */
    public Netlicensing getLicense(String licenseNumber) throws ApiException {
        ApiResponse<Netlicensing> localVarResp = getLicenseWithHttpInfo(licenseNumber);
        return localVarResp.getData();
    }

    /**
     * Get License
     * Get License by a &#39;licenseNumber&#39;
     * @param licenseNumber Unique number (across all Products/Licensees of a Vendor) that identifies the License. Vendor can assign this number when creating a License or let NetLicensing generate one. Read-only after corresponding creation Transaction status is set to closed. (required)
     * @return ApiResponse&lt;Netlicensing&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful request </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Malformed or illegal request </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Access is denied </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal service error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Netlicensing> getLicenseWithHttpInfo(String licenseNumber) throws ApiException {
        okhttp3.Call localVarCall = getLicenseValidateBeforeCall(licenseNumber, null);
        Type localVarReturnType = new TypeToken<Netlicensing>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get License (asynchronously)
     * Get License by a &#39;licenseNumber&#39;
     * @param licenseNumber Unique number (across all Products/Licensees of a Vendor) that identifies the License. Vendor can assign this number when creating a License or let NetLicensing generate one. Read-only after corresponding creation Transaction status is set to closed. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful request </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Malformed or illegal request </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Access is denied </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal service error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getLicenseAsync(String licenseNumber, final ApiCallback<Netlicensing> _callback) throws ApiException {

        okhttp3.Call localVarCall = getLicenseValidateBeforeCall(licenseNumber, _callback);
        Type localVarReturnType = new TypeToken<Netlicensing>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for listLicenses
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful request </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Malformed or illegal request </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Access is denied </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal service error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listLicensesCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/license";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "application/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listLicensesValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return listLicensesCall(_callback);

    }

    /**
     * List Licenses
     * Return a list of all Licenses for the current Vendor
     * @return List&lt;Netlicensing&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful request </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Malformed or illegal request </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Access is denied </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal service error </td><td>  -  </td></tr>
     </table>
     */
    public List<Netlicensing> listLicenses() throws ApiException {
        ApiResponse<List<Netlicensing>> localVarResp = listLicensesWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * List Licenses
     * Return a list of all Licenses for the current Vendor
     * @return ApiResponse&lt;List&lt;Netlicensing&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful request </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Malformed or illegal request </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Access is denied </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal service error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<Netlicensing>> listLicensesWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = listLicensesValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<List<Netlicensing>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List Licenses (asynchronously)
     * Return a list of all Licenses for the current Vendor
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful request </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Malformed or illegal request </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Access is denied </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal service error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listLicensesAsync(final ApiCallback<List<Netlicensing>> _callback) throws ApiException {

        okhttp3.Call localVarCall = listLicensesValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<List<Netlicensing>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateLicense
     * @param licenseNumber Unique number (across all Products/Licensees of a Vendor) that identifies the License. Vendor can assign this number when creating a License or let NetLicensing generate one. Read-only after corresponding creation Transaction status is set to closed. (required)
     * @param active  (optional)
     * @param currency Specifies currency for the License price. Check data types to discover which currencies are supported. Read-only, set from License Template on creation (optional)
     * @param hidden If set to &#39;true&#39;, this License is not shown in NetLicensing Shop as purchased License. Set from License Template on creation, if not specified explicitly (optional)
     * @param name Name for the Licensed item. Set from License Template on creation, if not specified explicitly. (optional)
     * @param number Unique number (across all Products/Licensees of a Vendor) that identifies the License. Vendor can assign this number when creating a License or let NetLicensing generate one. Read-only after corresponding creation Transaction status is set to closed. (optional)
     * @param parentfeature  (optional)
     * @param price Price for the License. If &gt; 0, it must always be accompanied by the currency specification. Read-only, set from License Template on creation (optional)
     * @param quantity Mandatory for &#39;Pay-per-Use&#39; License Model. (optional)
     * @param startDate For &#39;TIMEVOLUME&#39; License type (optional)
     * @param timeVolume Mandatory for &#39;TIMEVOLUME&#39; License Type. (optional)
     * @param timeVolumePeriod For &#39;TIMEVOLUME&#39; License Type. (optional)
     * @param usedQuantity Mandatory for &#39;Pay-per-Use&#39; License Model. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful request </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Malformed or illegal request </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Access is denied </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal service error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateLicenseCall(String licenseNumber, Boolean active, String currency, Boolean hidden, String name, String number, String parentfeature, Double price, String quantity, OffsetDateTime startDate, String timeVolume, String timeVolumePeriod, String usedQuantity, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/license/{licenseNumber}"
            .replace("{" + "licenseNumber" + "}", localVarApiClient.escapeString(licenseNumber.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (active != null) {
            localVarFormParams.put("active", active);
        }

        if (currency != null) {
            localVarFormParams.put("currency", currency);
        }

        if (hidden != null) {
            localVarFormParams.put("hidden", hidden);
        }

        if (name != null) {
            localVarFormParams.put("name", name);
        }

        if (number != null) {
            localVarFormParams.put("number", number);
        }

        if (parentfeature != null) {
            localVarFormParams.put("parentfeature", parentfeature);
        }

        if (price != null) {
            localVarFormParams.put("price", price);
        }

        if (quantity != null) {
            localVarFormParams.put("quantity", quantity);
        }

        if (startDate != null) {
            localVarFormParams.put("startDate", startDate);
        }

        if (timeVolume != null) {
            localVarFormParams.put("timeVolume", timeVolume);
        }

        if (timeVolumePeriod != null) {
            localVarFormParams.put("timeVolumePeriod", timeVolumePeriod);
        }

        if (usedQuantity != null) {
            localVarFormParams.put("usedQuantity", usedQuantity);
        }

        final String[] localVarAccepts = {
            "application/json",
            "application/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/x-www-form-urlencoded"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateLicenseValidateBeforeCall(String licenseNumber, Boolean active, String currency, Boolean hidden, String name, String number, String parentfeature, Double price, String quantity, OffsetDateTime startDate, String timeVolume, String timeVolumePeriod, String usedQuantity, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'licenseNumber' is set
        if (licenseNumber == null) {
            throw new ApiException("Missing the required parameter 'licenseNumber' when calling updateLicense(Async)");
        }

        return updateLicenseCall(licenseNumber, active, currency, hidden, name, number, parentfeature, price, quantity, startDate, timeVolume, timeVolumePeriod, usedQuantity, _callback);

    }

    /**
     * Update License
     * Update License by a &#39;licenseNumber&#39;
     * @param licenseNumber Unique number (across all Products/Licensees of a Vendor) that identifies the License. Vendor can assign this number when creating a License or let NetLicensing generate one. Read-only after corresponding creation Transaction status is set to closed. (required)
     * @param active  (optional)
     * @param currency Specifies currency for the License price. Check data types to discover which currencies are supported. Read-only, set from License Template on creation (optional)
     * @param hidden If set to &#39;true&#39;, this License is not shown in NetLicensing Shop as purchased License. Set from License Template on creation, if not specified explicitly (optional)
     * @param name Name for the Licensed item. Set from License Template on creation, if not specified explicitly. (optional)
     * @param number Unique number (across all Products/Licensees of a Vendor) that identifies the License. Vendor can assign this number when creating a License or let NetLicensing generate one. Read-only after corresponding creation Transaction status is set to closed. (optional)
     * @param parentfeature  (optional)
     * @param price Price for the License. If &gt; 0, it must always be accompanied by the currency specification. Read-only, set from License Template on creation (optional)
     * @param quantity Mandatory for &#39;Pay-per-Use&#39; License Model. (optional)
     * @param startDate For &#39;TIMEVOLUME&#39; License type (optional)
     * @param timeVolume Mandatory for &#39;TIMEVOLUME&#39; License Type. (optional)
     * @param timeVolumePeriod For &#39;TIMEVOLUME&#39; License Type. (optional)
     * @param usedQuantity Mandatory for &#39;Pay-per-Use&#39; License Model. (optional)
     * @return Netlicensing
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful request </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Malformed or illegal request </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Access is denied </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal service error </td><td>  -  </td></tr>
     </table>
     */
    public Netlicensing updateLicense(String licenseNumber, Boolean active, String currency, Boolean hidden, String name, String number, String parentfeature, Double price, String quantity, OffsetDateTime startDate, String timeVolume, String timeVolumePeriod, String usedQuantity) throws ApiException {
        ApiResponse<Netlicensing> localVarResp = updateLicenseWithHttpInfo(licenseNumber, active, currency, hidden, name, number, parentfeature, price, quantity, startDate, timeVolume, timeVolumePeriod, usedQuantity);
        return localVarResp.getData();
    }

    /**
     * Update License
     * Update License by a &#39;licenseNumber&#39;
     * @param licenseNumber Unique number (across all Products/Licensees of a Vendor) that identifies the License. Vendor can assign this number when creating a License or let NetLicensing generate one. Read-only after corresponding creation Transaction status is set to closed. (required)
     * @param active  (optional)
     * @param currency Specifies currency for the License price. Check data types to discover which currencies are supported. Read-only, set from License Template on creation (optional)
     * @param hidden If set to &#39;true&#39;, this License is not shown in NetLicensing Shop as purchased License. Set from License Template on creation, if not specified explicitly (optional)
     * @param name Name for the Licensed item. Set from License Template on creation, if not specified explicitly. (optional)
     * @param number Unique number (across all Products/Licensees of a Vendor) that identifies the License. Vendor can assign this number when creating a License or let NetLicensing generate one. Read-only after corresponding creation Transaction status is set to closed. (optional)
     * @param parentfeature  (optional)
     * @param price Price for the License. If &gt; 0, it must always be accompanied by the currency specification. Read-only, set from License Template on creation (optional)
     * @param quantity Mandatory for &#39;Pay-per-Use&#39; License Model. (optional)
     * @param startDate For &#39;TIMEVOLUME&#39; License type (optional)
     * @param timeVolume Mandatory for &#39;TIMEVOLUME&#39; License Type. (optional)
     * @param timeVolumePeriod For &#39;TIMEVOLUME&#39; License Type. (optional)
     * @param usedQuantity Mandatory for &#39;Pay-per-Use&#39; License Model. (optional)
     * @return ApiResponse&lt;Netlicensing&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful request </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Malformed or illegal request </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Access is denied </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal service error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Netlicensing> updateLicenseWithHttpInfo(String licenseNumber, Boolean active, String currency, Boolean hidden, String name, String number, String parentfeature, Double price, String quantity, OffsetDateTime startDate, String timeVolume, String timeVolumePeriod, String usedQuantity) throws ApiException {
        okhttp3.Call localVarCall = updateLicenseValidateBeforeCall(licenseNumber, active, currency, hidden, name, number, parentfeature, price, quantity, startDate, timeVolume, timeVolumePeriod, usedQuantity, null);
        Type localVarReturnType = new TypeToken<Netlicensing>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update License (asynchronously)
     * Update License by a &#39;licenseNumber&#39;
     * @param licenseNumber Unique number (across all Products/Licensees of a Vendor) that identifies the License. Vendor can assign this number when creating a License or let NetLicensing generate one. Read-only after corresponding creation Transaction status is set to closed. (required)
     * @param active  (optional)
     * @param currency Specifies currency for the License price. Check data types to discover which currencies are supported. Read-only, set from License Template on creation (optional)
     * @param hidden If set to &#39;true&#39;, this License is not shown in NetLicensing Shop as purchased License. Set from License Template on creation, if not specified explicitly (optional)
     * @param name Name for the Licensed item. Set from License Template on creation, if not specified explicitly. (optional)
     * @param number Unique number (across all Products/Licensees of a Vendor) that identifies the License. Vendor can assign this number when creating a License or let NetLicensing generate one. Read-only after corresponding creation Transaction status is set to closed. (optional)
     * @param parentfeature  (optional)
     * @param price Price for the License. If &gt; 0, it must always be accompanied by the currency specification. Read-only, set from License Template on creation (optional)
     * @param quantity Mandatory for &#39;Pay-per-Use&#39; License Model. (optional)
     * @param startDate For &#39;TIMEVOLUME&#39; License type (optional)
     * @param timeVolume Mandatory for &#39;TIMEVOLUME&#39; License Type. (optional)
     * @param timeVolumePeriod For &#39;TIMEVOLUME&#39; License Type. (optional)
     * @param usedQuantity Mandatory for &#39;Pay-per-Use&#39; License Model. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful request </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Malformed or illegal request </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Access is denied </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal service error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateLicenseAsync(String licenseNumber, Boolean active, String currency, Boolean hidden, String name, String number, String parentfeature, Double price, String quantity, OffsetDateTime startDate, String timeVolume, String timeVolumePeriod, String usedQuantity, final ApiCallback<Netlicensing> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateLicenseValidateBeforeCall(licenseNumber, active, currency, hidden, name, number, parentfeature, price, quantity, startDate, timeVolume, timeVolumePeriod, usedQuantity, _callback);
        Type localVarReturnType = new TypeToken<Netlicensing>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
