/*
 * Labs64 NetLicensing RESTful API Test Center
 * The Labs64 <a href='https://netlicensing.io/wiki/restful-api' target='_blank'>NetLicensing RESTful API</a> gives you access to NetLicensingâ€™s core features.<br/><br/><strong>Authentication</strong><br/>You authenticate to the NetLicensing API by providing your account credentials or simply use our demo account - <code>demo:demo</code><br/><br/>Find out more about Labs64 NetLicensing at <a href='https://netlicensing.io' target='_blank'>netlicensing.io</a>
 *
 * The version of the OpenAPI document: 2.x
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.Netlicensing;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class ProductApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public ProductApi() {
        this(Configuration.getDefaultApiClient());
    }

    public ProductApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for createProduct
     * @param active If set to &#39;false&#39;, the Product is disabled. No new Licensees can be registered for the Product, existing Licensees can not obtain new Licenses. (required)
     * @param name Product name. Together with the version identifies the Product for the end customer. (required)
     * @param version Product version. Convenience parameter, additional to the Product name. (required)
     * @param description Product description. (optional)
     * @param licenseeAutoCreate If set to &#39;true&#39;, non-existing Licensees will be created at first validation attempt. (optional)
     * @param licensingInfo Licensing information. (optional)
     * @param number Unique number that identifies the Product. Vendor can assign this number when creating a Product or let NetLicensing generate one. (optional)
     * @param vatMode Vat mode for Product. Supported types: GROSS, NET (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful request </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Malformed or illegal request </td><td>  -  </td></tr>
        <tr><td> 402 </td><td> Quota exceeded </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Access is denied </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal service error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createProductCall(Boolean active, String name, String version, String description, Boolean licenseeAutoCreate, String licensingInfo, String number, String vatMode, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/product";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (active != null) {
            localVarFormParams.put("active", active);
        }

        if (description != null) {
            localVarFormParams.put("description", description);
        }

        if (licenseeAutoCreate != null) {
            localVarFormParams.put("licenseeAutoCreate", licenseeAutoCreate);
        }

        if (licensingInfo != null) {
            localVarFormParams.put("licensingInfo", licensingInfo);
        }

        if (name != null) {
            localVarFormParams.put("name", name);
        }

        if (number != null) {
            localVarFormParams.put("number", number);
        }

        if (vatMode != null) {
            localVarFormParams.put("vatMode", vatMode);
        }

        if (version != null) {
            localVarFormParams.put("version", version);
        }

        final String[] localVarAccepts = {
            "application/json",
            "application/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/x-www-form-urlencoded"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createProductValidateBeforeCall(Boolean active, String name, String version, String description, Boolean licenseeAutoCreate, String licensingInfo, String number, String vatMode, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'active' is set
        if (active == null) {
            throw new ApiException("Missing the required parameter 'active' when calling createProduct(Async)");
        }

        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling createProduct(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling createProduct(Async)");
        }

        return createProductCall(active, name, version, description, licenseeAutoCreate, licensingInfo, number, vatMode, _callback);

    }

    /**
     * Create Product
     * Creates a new Product
     * @param active If set to &#39;false&#39;, the Product is disabled. No new Licensees can be registered for the Product, existing Licensees can not obtain new Licenses. (required)
     * @param name Product name. Together with the version identifies the Product for the end customer. (required)
     * @param version Product version. Convenience parameter, additional to the Product name. (required)
     * @param description Product description. (optional)
     * @param licenseeAutoCreate If set to &#39;true&#39;, non-existing Licensees will be created at first validation attempt. (optional)
     * @param licensingInfo Licensing information. (optional)
     * @param number Unique number that identifies the Product. Vendor can assign this number when creating a Product or let NetLicensing generate one. (optional)
     * @param vatMode Vat mode for Product. Supported types: GROSS, NET (optional)
     * @return Netlicensing
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful request </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Malformed or illegal request </td><td>  -  </td></tr>
        <tr><td> 402 </td><td> Quota exceeded </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Access is denied </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal service error </td><td>  -  </td></tr>
     </table>
     */
    public Netlicensing createProduct(Boolean active, String name, String version, String description, Boolean licenseeAutoCreate, String licensingInfo, String number, String vatMode) throws ApiException {
        ApiResponse<Netlicensing> localVarResp = createProductWithHttpInfo(active, name, version, description, licenseeAutoCreate, licensingInfo, number, vatMode);
        return localVarResp.getData();
    }

    /**
     * Create Product
     * Creates a new Product
     * @param active If set to &#39;false&#39;, the Product is disabled. No new Licensees can be registered for the Product, existing Licensees can not obtain new Licenses. (required)
     * @param name Product name. Together with the version identifies the Product for the end customer. (required)
     * @param version Product version. Convenience parameter, additional to the Product name. (required)
     * @param description Product description. (optional)
     * @param licenseeAutoCreate If set to &#39;true&#39;, non-existing Licensees will be created at first validation attempt. (optional)
     * @param licensingInfo Licensing information. (optional)
     * @param number Unique number that identifies the Product. Vendor can assign this number when creating a Product or let NetLicensing generate one. (optional)
     * @param vatMode Vat mode for Product. Supported types: GROSS, NET (optional)
     * @return ApiResponse&lt;Netlicensing&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful request </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Malformed or illegal request </td><td>  -  </td></tr>
        <tr><td> 402 </td><td> Quota exceeded </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Access is denied </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal service error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Netlicensing> createProductWithHttpInfo(Boolean active, String name, String version, String description, Boolean licenseeAutoCreate, String licensingInfo, String number, String vatMode) throws ApiException {
        okhttp3.Call localVarCall = createProductValidateBeforeCall(active, name, version, description, licenseeAutoCreate, licensingInfo, number, vatMode, null);
        Type localVarReturnType = new TypeToken<Netlicensing>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create Product (asynchronously)
     * Creates a new Product
     * @param active If set to &#39;false&#39;, the Product is disabled. No new Licensees can be registered for the Product, existing Licensees can not obtain new Licenses. (required)
     * @param name Product name. Together with the version identifies the Product for the end customer. (required)
     * @param version Product version. Convenience parameter, additional to the Product name. (required)
     * @param description Product description. (optional)
     * @param licenseeAutoCreate If set to &#39;true&#39;, non-existing Licensees will be created at first validation attempt. (optional)
     * @param licensingInfo Licensing information. (optional)
     * @param number Unique number that identifies the Product. Vendor can assign this number when creating a Product or let NetLicensing generate one. (optional)
     * @param vatMode Vat mode for Product. Supported types: GROSS, NET (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful request </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Malformed or illegal request </td><td>  -  </td></tr>
        <tr><td> 402 </td><td> Quota exceeded </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Access is denied </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal service error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createProductAsync(Boolean active, String name, String version, String description, Boolean licenseeAutoCreate, String licensingInfo, String number, String vatMode, final ApiCallback<Netlicensing> _callback) throws ApiException {

        okhttp3.Call localVarCall = createProductValidateBeforeCall(active, name, version, description, licenseeAutoCreate, licensingInfo, number, vatMode, _callback);
        Type localVarReturnType = new TypeToken<Netlicensing>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteProduct
     * @param productNumber Unique number that identifies the Product. (required)
     * @param forceCascade Force object deletion and all descendants. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful request </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Malformed or illegal request </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Access is denied </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal service error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteProductCall(String productNumber, Boolean forceCascade, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/product/{productNumber}"
            .replace("{" + "productNumber" + "}", localVarApiClient.escapeString(productNumber.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (forceCascade != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("forceCascade", forceCascade));
        }

        final String[] localVarAccepts = {
            "application/json",
            "application/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteProductValidateBeforeCall(String productNumber, Boolean forceCascade, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'productNumber' is set
        if (productNumber == null) {
            throw new ApiException("Missing the required parameter 'productNumber' when calling deleteProduct(Async)");
        }

        return deleteProductCall(productNumber, forceCascade, _callback);

    }

    /**
     * Delete Product
     * Delete a Product by &#39;number&#39;
     * @param productNumber Unique number that identifies the Product. (required)
     * @param forceCascade Force object deletion and all descendants. (optional)
     * @return Netlicensing
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful request </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Malformed or illegal request </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Access is denied </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal service error </td><td>  -  </td></tr>
     </table>
     */
    public Netlicensing deleteProduct(String productNumber, Boolean forceCascade) throws ApiException {
        ApiResponse<Netlicensing> localVarResp = deleteProductWithHttpInfo(productNumber, forceCascade);
        return localVarResp.getData();
    }

    /**
     * Delete Product
     * Delete a Product by &#39;number&#39;
     * @param productNumber Unique number that identifies the Product. (required)
     * @param forceCascade Force object deletion and all descendants. (optional)
     * @return ApiResponse&lt;Netlicensing&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful request </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Malformed or illegal request </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Access is denied </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal service error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Netlicensing> deleteProductWithHttpInfo(String productNumber, Boolean forceCascade) throws ApiException {
        okhttp3.Call localVarCall = deleteProductValidateBeforeCall(productNumber, forceCascade, null);
        Type localVarReturnType = new TypeToken<Netlicensing>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Delete Product (asynchronously)
     * Delete a Product by &#39;number&#39;
     * @param productNumber Unique number that identifies the Product. (required)
     * @param forceCascade Force object deletion and all descendants. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful request </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Malformed or illegal request </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Access is denied </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal service error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteProductAsync(String productNumber, Boolean forceCascade, final ApiCallback<Netlicensing> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteProductValidateBeforeCall(productNumber, forceCascade, _callback);
        Type localVarReturnType = new TypeToken<Netlicensing>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for listProducts
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful request </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Malformed or illegal request </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Access is denied </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal service error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listProductsCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/product";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "application/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listProductsValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return listProductsCall(_callback);

    }

    /**
     * List Products
     * Return a list of all configured Products for the current Vendor
     * @return List&lt;Netlicensing&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful request </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Malformed or illegal request </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Access is denied </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal service error </td><td>  -  </td></tr>
     </table>
     */
    public List<Netlicensing> listProducts() throws ApiException {
        ApiResponse<List<Netlicensing>> localVarResp = listProductsWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * List Products
     * Return a list of all configured Products for the current Vendor
     * @return ApiResponse&lt;List&lt;Netlicensing&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful request </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Malformed or illegal request </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Access is denied </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal service error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<Netlicensing>> listProductsWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = listProductsValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<List<Netlicensing>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List Products (asynchronously)
     * Return a list of all configured Products for the current Vendor
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful request </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Malformed or illegal request </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Access is denied </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal service error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listProductsAsync(final ApiCallback<List<Netlicensing>> _callback) throws ApiException {

        okhttp3.Call localVarCall = listProductsValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<List<Netlicensing>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for productNumber
     * @param productNumber Unique number that identifies the Product. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful request </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Malformed or illegal request </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Access is denied </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal service error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call productNumberCall(String productNumber, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/product/{productNumber}"
            .replace("{" + "productNumber" + "}", localVarApiClient.escapeString(productNumber.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "application/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call productNumberValidateBeforeCall(String productNumber, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'productNumber' is set
        if (productNumber == null) {
            throw new ApiException("Missing the required parameter 'productNumber' when calling productNumber(Async)");
        }

        return productNumberCall(productNumber, _callback);

    }

    /**
     * Get Product
     * Return a Product by &#39;productNumber&#39;
     * @param productNumber Unique number that identifies the Product. (required)
     * @return Netlicensing
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful request </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Malformed or illegal request </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Access is denied </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal service error </td><td>  -  </td></tr>
     </table>
     */
    public Netlicensing productNumber(String productNumber) throws ApiException {
        ApiResponse<Netlicensing> localVarResp = productNumberWithHttpInfo(productNumber);
        return localVarResp.getData();
    }

    /**
     * Get Product
     * Return a Product by &#39;productNumber&#39;
     * @param productNumber Unique number that identifies the Product. (required)
     * @return ApiResponse&lt;Netlicensing&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful request </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Malformed or illegal request </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Access is denied </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal service error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Netlicensing> productNumberWithHttpInfo(String productNumber) throws ApiException {
        okhttp3.Call localVarCall = productNumberValidateBeforeCall(productNumber, null);
        Type localVarReturnType = new TypeToken<Netlicensing>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get Product (asynchronously)
     * Return a Product by &#39;productNumber&#39;
     * @param productNumber Unique number that identifies the Product. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful request </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Malformed or illegal request </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Access is denied </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal service error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call productNumberAsync(String productNumber, final ApiCallback<Netlicensing> _callback) throws ApiException {

        okhttp3.Call localVarCall = productNumberValidateBeforeCall(productNumber, _callback);
        Type localVarReturnType = new TypeToken<Netlicensing>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateProduct
     * @param productNumber Unique number that identifies the Product. (required)
     * @param active If set to &#39;false&#39;, the Product is disabled. No new Licensees can be registered for the Product, existing Licensees can not obtain new Licenses. (optional)
     * @param description Product description. (optional)
     * @param licenseeAutoCreate If set to &#39;true&#39;, non-existing Licensees will be created at first validation attempt. (optional)
     * @param licensingInfo Licensing information. (optional)
     * @param name Product name. Together with the version identifies the Product for the end customer. (optional)
     * @param number New Product number (update) (optional)
     * @param vatMode Vat mode for Product. Supported types: GROSS, NET (optional)
     * @param version Product version. Convenience parameter, additional to the Product name. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful request </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Malformed or illegal request </td><td>  -  </td></tr>
        <tr><td> 402 </td><td> Quota exceeded </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Access is denied </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal service error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateProductCall(String productNumber, Boolean active, String description, Boolean licenseeAutoCreate, String licensingInfo, String name, String number, String vatMode, String version, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/product/{productNumber}"
            .replace("{" + "productNumber" + "}", localVarApiClient.escapeString(productNumber.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (active != null) {
            localVarFormParams.put("active", active);
        }

        if (description != null) {
            localVarFormParams.put("description", description);
        }

        if (licenseeAutoCreate != null) {
            localVarFormParams.put("licenseeAutoCreate", licenseeAutoCreate);
        }

        if (licensingInfo != null) {
            localVarFormParams.put("licensingInfo", licensingInfo);
        }

        if (name != null) {
            localVarFormParams.put("name", name);
        }

        if (number != null) {
            localVarFormParams.put("number", number);
        }

        if (vatMode != null) {
            localVarFormParams.put("vatMode", vatMode);
        }

        if (version != null) {
            localVarFormParams.put("version", version);
        }

        final String[] localVarAccepts = {
            "application/json",
            "application/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/x-www-form-urlencoded"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateProductValidateBeforeCall(String productNumber, Boolean active, String description, Boolean licenseeAutoCreate, String licensingInfo, String name, String number, String vatMode, String version, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'productNumber' is set
        if (productNumber == null) {
            throw new ApiException("Missing the required parameter 'productNumber' when calling updateProduct(Async)");
        }

        return updateProductCall(productNumber, active, description, licenseeAutoCreate, licensingInfo, name, number, vatMode, version, _callback);

    }

    /**
     * Update Product
     * Sets the provided properties to a Product. Return an updated Product
     * @param productNumber Unique number that identifies the Product. (required)
     * @param active If set to &#39;false&#39;, the Product is disabled. No new Licensees can be registered for the Product, existing Licensees can not obtain new Licenses. (optional)
     * @param description Product description. (optional)
     * @param licenseeAutoCreate If set to &#39;true&#39;, non-existing Licensees will be created at first validation attempt. (optional)
     * @param licensingInfo Licensing information. (optional)
     * @param name Product name. Together with the version identifies the Product for the end customer. (optional)
     * @param number New Product number (update) (optional)
     * @param vatMode Vat mode for Product. Supported types: GROSS, NET (optional)
     * @param version Product version. Convenience parameter, additional to the Product name. (optional)
     * @return Netlicensing
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful request </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Malformed or illegal request </td><td>  -  </td></tr>
        <tr><td> 402 </td><td> Quota exceeded </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Access is denied </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal service error </td><td>  -  </td></tr>
     </table>
     */
    public Netlicensing updateProduct(String productNumber, Boolean active, String description, Boolean licenseeAutoCreate, String licensingInfo, String name, String number, String vatMode, String version) throws ApiException {
        ApiResponse<Netlicensing> localVarResp = updateProductWithHttpInfo(productNumber, active, description, licenseeAutoCreate, licensingInfo, name, number, vatMode, version);
        return localVarResp.getData();
    }

    /**
     * Update Product
     * Sets the provided properties to a Product. Return an updated Product
     * @param productNumber Unique number that identifies the Product. (required)
     * @param active If set to &#39;false&#39;, the Product is disabled. No new Licensees can be registered for the Product, existing Licensees can not obtain new Licenses. (optional)
     * @param description Product description. (optional)
     * @param licenseeAutoCreate If set to &#39;true&#39;, non-existing Licensees will be created at first validation attempt. (optional)
     * @param licensingInfo Licensing information. (optional)
     * @param name Product name. Together with the version identifies the Product for the end customer. (optional)
     * @param number New Product number (update) (optional)
     * @param vatMode Vat mode for Product. Supported types: GROSS, NET (optional)
     * @param version Product version. Convenience parameter, additional to the Product name. (optional)
     * @return ApiResponse&lt;Netlicensing&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful request </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Malformed or illegal request </td><td>  -  </td></tr>
        <tr><td> 402 </td><td> Quota exceeded </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Access is denied </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal service error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Netlicensing> updateProductWithHttpInfo(String productNumber, Boolean active, String description, Boolean licenseeAutoCreate, String licensingInfo, String name, String number, String vatMode, String version) throws ApiException {
        okhttp3.Call localVarCall = updateProductValidateBeforeCall(productNumber, active, description, licenseeAutoCreate, licensingInfo, name, number, vatMode, version, null);
        Type localVarReturnType = new TypeToken<Netlicensing>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update Product (asynchronously)
     * Sets the provided properties to a Product. Return an updated Product
     * @param productNumber Unique number that identifies the Product. (required)
     * @param active If set to &#39;false&#39;, the Product is disabled. No new Licensees can be registered for the Product, existing Licensees can not obtain new Licenses. (optional)
     * @param description Product description. (optional)
     * @param licenseeAutoCreate If set to &#39;true&#39;, non-existing Licensees will be created at first validation attempt. (optional)
     * @param licensingInfo Licensing information. (optional)
     * @param name Product name. Together with the version identifies the Product for the end customer. (optional)
     * @param number New Product number (update) (optional)
     * @param vatMode Vat mode for Product. Supported types: GROSS, NET (optional)
     * @param version Product version. Convenience parameter, additional to the Product name. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful request </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Malformed or illegal request </td><td>  -  </td></tr>
        <tr><td> 402 </td><td> Quota exceeded </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Access is denied </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal service error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateProductAsync(String productNumber, Boolean active, String description, Boolean licenseeAutoCreate, String licensingInfo, String name, String number, String vatMode, String version, final ApiCallback<Netlicensing> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateProductValidateBeforeCall(productNumber, active, description, licenseeAutoCreate, licensingInfo, name, number, vatMode, version, _callback);
        Type localVarReturnType = new TypeToken<Netlicensing>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
