/*
 * Labs64 NetLicensing RESTful API Test Center
 * The Labs64 <a href='https://netlicensing.io/wiki/restful-api' target='_blank'>NetLicensing RESTful API</a> gives you access to NetLicensingâ€™s core features.<br/><br/><strong>Authentication</strong><br/>You authenticate to the NetLicensing API by providing your account credentials or simply use our demo account - <code>demo:demo</code><br/><br/>Find out more about Labs64 NetLicensing at <a href='https://netlicensing.io' target='_blank'>netlicensing.io</a>
 *
 * The version of the OpenAPI document: 2.x
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.Netlicensing;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class LicenseTemplateApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public LicenseTemplateApi() {
        this(Configuration.getDefaultApiClient());
    }

    public LicenseTemplateApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for createLicenseTemplate
     * @param active If set to &#39;false&#39;, the License Template is disabled. Licensee can not obtain any new Licenses off this License Template. (required)
     * @param licenseType Type of Licenses created from this License Template. Supported types: FEATURE, TIMEVOLUME, FLOATING, QUANTITY (required)
     * @param name License Template name to create License Template object (required)
     * @param productModuleNumber Number of Product Module to create License Template object (required)
     * @param automatic If set to &#39;true&#39;, every new Licensee automatically gets one License out of this License Template on creation. Automatic Licenses must have their price set to 0. (optional)
     * @param currency Specifies currency for the License price. Check data types to discover which currencies are supported. (optional)
     * @param hidden If set to &#39;true&#39;, this License Template is not shown in NetLicensing Shop as offered for purchase. (optional)
     * @param hideLicenses If set to &#39;true&#39;, Licenses from this License Template are not visible to the end customer, but participate in validation. (optional)
     * @param maxSessions Mandatory for &#39;FLOATING&#39; License Type. (optional)
     * @param number Unique number (across all Products of a Vendor) that identifies the License Template. Vendor can assign this number when creating a License Template or let NetLicensing generate one. Read-only after creation of the first License from this License Template. (optional)
     * @param price Price for the License. If &gt;0, it must always be accompanied by the currency specification. (optional)
     * @param quantity Mandatory for &#39;Pay-per-Use&#39; and &#39;Node-Locked&#39; License Model. (optional)
     * @param quota Mandatory for &#39;Quota&#39; License Model. (optional)
     * @param timeVolume Mandatory for &#39;TIMEVOLUME&#39; License Type. (optional)
     * @param timeVolumePeriod For &#39;TIMEVOLUME&#39; License Type. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful request </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Malformed or illegal request </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Access is denied </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal service error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createLicenseTemplateCall(Boolean active, String licenseType, String name, String productModuleNumber, Boolean automatic, String currency, Boolean hidden, Boolean hideLicenses, String maxSessions, String number, Double price, String quantity, String quota, String timeVolume, String timeVolumePeriod, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/licensetemplate";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (active != null) {
            localVarFormParams.put("active", active);
        }

        if (automatic != null) {
            localVarFormParams.put("automatic", automatic);
        }

        if (currency != null) {
            localVarFormParams.put("currency", currency);
        }

        if (hidden != null) {
            localVarFormParams.put("hidden", hidden);
        }

        if (hideLicenses != null) {
            localVarFormParams.put("hideLicenses", hideLicenses);
        }

        if (licenseType != null) {
            localVarFormParams.put("licenseType", licenseType);
        }

        if (maxSessions != null) {
            localVarFormParams.put("maxSessions", maxSessions);
        }

        if (name != null) {
            localVarFormParams.put("name", name);
        }

        if (number != null) {
            localVarFormParams.put("number", number);
        }

        if (price != null) {
            localVarFormParams.put("price", price);
        }

        if (productModuleNumber != null) {
            localVarFormParams.put("productModuleNumber", productModuleNumber);
        }

        if (quantity != null) {
            localVarFormParams.put("quantity", quantity);
        }

        if (quota != null) {
            localVarFormParams.put("quota", quota);
        }

        if (timeVolume != null) {
            localVarFormParams.put("timeVolume", timeVolume);
        }

        if (timeVolumePeriod != null) {
            localVarFormParams.put("timeVolumePeriod", timeVolumePeriod);
        }

        final String[] localVarAccepts = {
            "application/json",
            "application/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/x-www-form-urlencoded"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createLicenseTemplateValidateBeforeCall(Boolean active, String licenseType, String name, String productModuleNumber, Boolean automatic, String currency, Boolean hidden, Boolean hideLicenses, String maxSessions, String number, Double price, String quantity, String quota, String timeVolume, String timeVolumePeriod, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'active' is set
        if (active == null) {
            throw new ApiException("Missing the required parameter 'active' when calling createLicenseTemplate(Async)");
        }

        // verify the required parameter 'licenseType' is set
        if (licenseType == null) {
            throw new ApiException("Missing the required parameter 'licenseType' when calling createLicenseTemplate(Async)");
        }

        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling createLicenseTemplate(Async)");
        }

        // verify the required parameter 'productModuleNumber' is set
        if (productModuleNumber == null) {
            throw new ApiException("Missing the required parameter 'productModuleNumber' when calling createLicenseTemplate(Async)");
        }

        return createLicenseTemplateCall(active, licenseType, name, productModuleNumber, automatic, currency, hidden, hideLicenses, maxSessions, number, price, quantity, quota, timeVolume, timeVolumePeriod, _callback);

    }

    /**
     * Create License Template
     * Creates a new License Template
     * @param active If set to &#39;false&#39;, the License Template is disabled. Licensee can not obtain any new Licenses off this License Template. (required)
     * @param licenseType Type of Licenses created from this License Template. Supported types: FEATURE, TIMEVOLUME, FLOATING, QUANTITY (required)
     * @param name License Template name to create License Template object (required)
     * @param productModuleNumber Number of Product Module to create License Template object (required)
     * @param automatic If set to &#39;true&#39;, every new Licensee automatically gets one License out of this License Template on creation. Automatic Licenses must have their price set to 0. (optional)
     * @param currency Specifies currency for the License price. Check data types to discover which currencies are supported. (optional)
     * @param hidden If set to &#39;true&#39;, this License Template is not shown in NetLicensing Shop as offered for purchase. (optional)
     * @param hideLicenses If set to &#39;true&#39;, Licenses from this License Template are not visible to the end customer, but participate in validation. (optional)
     * @param maxSessions Mandatory for &#39;FLOATING&#39; License Type. (optional)
     * @param number Unique number (across all Products of a Vendor) that identifies the License Template. Vendor can assign this number when creating a License Template or let NetLicensing generate one. Read-only after creation of the first License from this License Template. (optional)
     * @param price Price for the License. If &gt;0, it must always be accompanied by the currency specification. (optional)
     * @param quantity Mandatory for &#39;Pay-per-Use&#39; and &#39;Node-Locked&#39; License Model. (optional)
     * @param quota Mandatory for &#39;Quota&#39; License Model. (optional)
     * @param timeVolume Mandatory for &#39;TIMEVOLUME&#39; License Type. (optional)
     * @param timeVolumePeriod For &#39;TIMEVOLUME&#39; License Type. (optional)
     * @return Netlicensing
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful request </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Malformed or illegal request </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Access is denied </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal service error </td><td>  -  </td></tr>
     </table>
     */
    public Netlicensing createLicenseTemplate(Boolean active, String licenseType, String name, String productModuleNumber, Boolean automatic, String currency, Boolean hidden, Boolean hideLicenses, String maxSessions, String number, Double price, String quantity, String quota, String timeVolume, String timeVolumePeriod) throws ApiException {
        ApiResponse<Netlicensing> localVarResp = createLicenseTemplateWithHttpInfo(active, licenseType, name, productModuleNumber, automatic, currency, hidden, hideLicenses, maxSessions, number, price, quantity, quota, timeVolume, timeVolumePeriod);
        return localVarResp.getData();
    }

    /**
     * Create License Template
     * Creates a new License Template
     * @param active If set to &#39;false&#39;, the License Template is disabled. Licensee can not obtain any new Licenses off this License Template. (required)
     * @param licenseType Type of Licenses created from this License Template. Supported types: FEATURE, TIMEVOLUME, FLOATING, QUANTITY (required)
     * @param name License Template name to create License Template object (required)
     * @param productModuleNumber Number of Product Module to create License Template object (required)
     * @param automatic If set to &#39;true&#39;, every new Licensee automatically gets one License out of this License Template on creation. Automatic Licenses must have their price set to 0. (optional)
     * @param currency Specifies currency for the License price. Check data types to discover which currencies are supported. (optional)
     * @param hidden If set to &#39;true&#39;, this License Template is not shown in NetLicensing Shop as offered for purchase. (optional)
     * @param hideLicenses If set to &#39;true&#39;, Licenses from this License Template are not visible to the end customer, but participate in validation. (optional)
     * @param maxSessions Mandatory for &#39;FLOATING&#39; License Type. (optional)
     * @param number Unique number (across all Products of a Vendor) that identifies the License Template. Vendor can assign this number when creating a License Template or let NetLicensing generate one. Read-only after creation of the first License from this License Template. (optional)
     * @param price Price for the License. If &gt;0, it must always be accompanied by the currency specification. (optional)
     * @param quantity Mandatory for &#39;Pay-per-Use&#39; and &#39;Node-Locked&#39; License Model. (optional)
     * @param quota Mandatory for &#39;Quota&#39; License Model. (optional)
     * @param timeVolume Mandatory for &#39;TIMEVOLUME&#39; License Type. (optional)
     * @param timeVolumePeriod For &#39;TIMEVOLUME&#39; License Type. (optional)
     * @return ApiResponse&lt;Netlicensing&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful request </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Malformed or illegal request </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Access is denied </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal service error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Netlicensing> createLicenseTemplateWithHttpInfo(Boolean active, String licenseType, String name, String productModuleNumber, Boolean automatic, String currency, Boolean hidden, Boolean hideLicenses, String maxSessions, String number, Double price, String quantity, String quota, String timeVolume, String timeVolumePeriod) throws ApiException {
        okhttp3.Call localVarCall = createLicenseTemplateValidateBeforeCall(active, licenseType, name, productModuleNumber, automatic, currency, hidden, hideLicenses, maxSessions, number, price, quantity, quota, timeVolume, timeVolumePeriod, null);
        Type localVarReturnType = new TypeToken<Netlicensing>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create License Template (asynchronously)
     * Creates a new License Template
     * @param active If set to &#39;false&#39;, the License Template is disabled. Licensee can not obtain any new Licenses off this License Template. (required)
     * @param licenseType Type of Licenses created from this License Template. Supported types: FEATURE, TIMEVOLUME, FLOATING, QUANTITY (required)
     * @param name License Template name to create License Template object (required)
     * @param productModuleNumber Number of Product Module to create License Template object (required)
     * @param automatic If set to &#39;true&#39;, every new Licensee automatically gets one License out of this License Template on creation. Automatic Licenses must have their price set to 0. (optional)
     * @param currency Specifies currency for the License price. Check data types to discover which currencies are supported. (optional)
     * @param hidden If set to &#39;true&#39;, this License Template is not shown in NetLicensing Shop as offered for purchase. (optional)
     * @param hideLicenses If set to &#39;true&#39;, Licenses from this License Template are not visible to the end customer, but participate in validation. (optional)
     * @param maxSessions Mandatory for &#39;FLOATING&#39; License Type. (optional)
     * @param number Unique number (across all Products of a Vendor) that identifies the License Template. Vendor can assign this number when creating a License Template or let NetLicensing generate one. Read-only after creation of the first License from this License Template. (optional)
     * @param price Price for the License. If &gt;0, it must always be accompanied by the currency specification. (optional)
     * @param quantity Mandatory for &#39;Pay-per-Use&#39; and &#39;Node-Locked&#39; License Model. (optional)
     * @param quota Mandatory for &#39;Quota&#39; License Model. (optional)
     * @param timeVolume Mandatory for &#39;TIMEVOLUME&#39; License Type. (optional)
     * @param timeVolumePeriod For &#39;TIMEVOLUME&#39; License Type. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful request </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Malformed or illegal request </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Access is denied </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal service error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createLicenseTemplateAsync(Boolean active, String licenseType, String name, String productModuleNumber, Boolean automatic, String currency, Boolean hidden, Boolean hideLicenses, String maxSessions, String number, Double price, String quantity, String quota, String timeVolume, String timeVolumePeriod, final ApiCallback<Netlicensing> _callback) throws ApiException {

        okhttp3.Call localVarCall = createLicenseTemplateValidateBeforeCall(active, licenseType, name, productModuleNumber, automatic, currency, hidden, hideLicenses, maxSessions, number, price, quantity, quota, timeVolume, timeVolumePeriod, _callback);
        Type localVarReturnType = new TypeToken<Netlicensing>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteLicenseTemplate
     * @param licenseTemplateNumber Unique number (across all Products of a Vendor) that identifies the License Template. (required)
     * @param forceCascade Force object deletion and all descendants. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful request </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Malformed or illegal request </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Access is denied </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal service error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteLicenseTemplateCall(String licenseTemplateNumber, Boolean forceCascade, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/licensetemplate/{licenseTemplateNumber}"
            .replace("{" + "licenseTemplateNumber" + "}", localVarApiClient.escapeString(licenseTemplateNumber.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (forceCascade != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("forceCascade", forceCascade));
        }

        final String[] localVarAccepts = {
            "application/json",
            "application/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteLicenseTemplateValidateBeforeCall(String licenseTemplateNumber, Boolean forceCascade, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'licenseTemplateNumber' is set
        if (licenseTemplateNumber == null) {
            throw new ApiException("Missing the required parameter 'licenseTemplateNumber' when calling deleteLicenseTemplate(Async)");
        }

        return deleteLicenseTemplateCall(licenseTemplateNumber, forceCascade, _callback);

    }

    /**
     * Delete License Template
     * Delete a License Template by &#39;number&#39;.
     * @param licenseTemplateNumber Unique number (across all Products of a Vendor) that identifies the License Template. (required)
     * @param forceCascade Force object deletion and all descendants. (optional)
     * @return Netlicensing
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful request </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Malformed or illegal request </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Access is denied </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal service error </td><td>  -  </td></tr>
     </table>
     */
    public Netlicensing deleteLicenseTemplate(String licenseTemplateNumber, Boolean forceCascade) throws ApiException {
        ApiResponse<Netlicensing> localVarResp = deleteLicenseTemplateWithHttpInfo(licenseTemplateNumber, forceCascade);
        return localVarResp.getData();
    }

    /**
     * Delete License Template
     * Delete a License Template by &#39;number&#39;.
     * @param licenseTemplateNumber Unique number (across all Products of a Vendor) that identifies the License Template. (required)
     * @param forceCascade Force object deletion and all descendants. (optional)
     * @return ApiResponse&lt;Netlicensing&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful request </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Malformed or illegal request </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Access is denied </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal service error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Netlicensing> deleteLicenseTemplateWithHttpInfo(String licenseTemplateNumber, Boolean forceCascade) throws ApiException {
        okhttp3.Call localVarCall = deleteLicenseTemplateValidateBeforeCall(licenseTemplateNumber, forceCascade, null);
        Type localVarReturnType = new TypeToken<Netlicensing>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Delete License Template (asynchronously)
     * Delete a License Template by &#39;number&#39;.
     * @param licenseTemplateNumber Unique number (across all Products of a Vendor) that identifies the License Template. (required)
     * @param forceCascade Force object deletion and all descendants. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful request </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Malformed or illegal request </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Access is denied </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal service error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteLicenseTemplateAsync(String licenseTemplateNumber, Boolean forceCascade, final ApiCallback<Netlicensing> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteLicenseTemplateValidateBeforeCall(licenseTemplateNumber, forceCascade, _callback);
        Type localVarReturnType = new TypeToken<Netlicensing>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getLicenseTemplate
     * @param licenseTemplateNumber Unique number (across all Products of a Vendor) that identifies the License Template. Vendor can assign this number when creating a License Template or let NetLicensing generate one. Read-only after creation of the first License from this License Template. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful request </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Malformed or illegal request </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Access is denied </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal service error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getLicenseTemplateCall(String licenseTemplateNumber, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/licensetemplate/{licenseTemplateNumber}"
            .replace("{" + "licenseTemplateNumber" + "}", localVarApiClient.escapeString(licenseTemplateNumber.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "application/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getLicenseTemplateValidateBeforeCall(String licenseTemplateNumber, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'licenseTemplateNumber' is set
        if (licenseTemplateNumber == null) {
            throw new ApiException("Missing the required parameter 'licenseTemplateNumber' when calling getLicenseTemplate(Async)");
        }

        return getLicenseTemplateCall(licenseTemplateNumber, _callback);

    }

    /**
     * Get License Template
     * Return a License Template by &#39;licenseTemplateNumber&#39;
     * @param licenseTemplateNumber Unique number (across all Products of a Vendor) that identifies the License Template. Vendor can assign this number when creating a License Template or let NetLicensing generate one. Read-only after creation of the first License from this License Template. (required)
     * @return Netlicensing
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful request </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Malformed or illegal request </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Access is denied </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal service error </td><td>  -  </td></tr>
     </table>
     */
    public Netlicensing getLicenseTemplate(String licenseTemplateNumber) throws ApiException {
        ApiResponse<Netlicensing> localVarResp = getLicenseTemplateWithHttpInfo(licenseTemplateNumber);
        return localVarResp.getData();
    }

    /**
     * Get License Template
     * Return a License Template by &#39;licenseTemplateNumber&#39;
     * @param licenseTemplateNumber Unique number (across all Products of a Vendor) that identifies the License Template. Vendor can assign this number when creating a License Template or let NetLicensing generate one. Read-only after creation of the first License from this License Template. (required)
     * @return ApiResponse&lt;Netlicensing&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful request </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Malformed or illegal request </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Access is denied </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal service error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Netlicensing> getLicenseTemplateWithHttpInfo(String licenseTemplateNumber) throws ApiException {
        okhttp3.Call localVarCall = getLicenseTemplateValidateBeforeCall(licenseTemplateNumber, null);
        Type localVarReturnType = new TypeToken<Netlicensing>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get License Template (asynchronously)
     * Return a License Template by &#39;licenseTemplateNumber&#39;
     * @param licenseTemplateNumber Unique number (across all Products of a Vendor) that identifies the License Template. Vendor can assign this number when creating a License Template or let NetLicensing generate one. Read-only after creation of the first License from this License Template. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful request </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Malformed or illegal request </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Access is denied </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal service error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getLicenseTemplateAsync(String licenseTemplateNumber, final ApiCallback<Netlicensing> _callback) throws ApiException {

        okhttp3.Call localVarCall = getLicenseTemplateValidateBeforeCall(licenseTemplateNumber, _callback);
        Type localVarReturnType = new TypeToken<Netlicensing>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for listLicenseTemplates
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful request </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Malformed or illegal request </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Access is denied </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal service error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listLicenseTemplatesCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/licensetemplate";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "application/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listLicenseTemplatesValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return listLicenseTemplatesCall(_callback);

    }

    /**
     * List License Templates
     * Return a list of all License Templates for the current Vendor
     * @return List&lt;Netlicensing&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful request </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Malformed or illegal request </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Access is denied </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal service error </td><td>  -  </td></tr>
     </table>
     */
    public List<Netlicensing> listLicenseTemplates() throws ApiException {
        ApiResponse<List<Netlicensing>> localVarResp = listLicenseTemplatesWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * List License Templates
     * Return a list of all License Templates for the current Vendor
     * @return ApiResponse&lt;List&lt;Netlicensing&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful request </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Malformed or illegal request </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Access is denied </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal service error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<Netlicensing>> listLicenseTemplatesWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = listLicenseTemplatesValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<List<Netlicensing>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List License Templates (asynchronously)
     * Return a list of all License Templates for the current Vendor
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful request </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Malformed or illegal request </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Access is denied </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal service error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listLicenseTemplatesAsync(final ApiCallback<List<Netlicensing>> _callback) throws ApiException {

        okhttp3.Call localVarCall = listLicenseTemplatesValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<List<Netlicensing>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateLicenseTemplate
     * @param licenseTemplateNumber Unique number (across all Products of a Vendor) that identifies the License Template. Vendor can assign this number when creating a License Template or let NetLicensing generate one. Read-only after creation of the first License from this License Template. (required)
     * @param active If set to &#39;false&#39;, the License Template is disabled. Licensee can not obtain any new Licenses off this License Template. (optional)
     * @param automatic If set to &#39;true&#39;, every new Licensee automatically gets one License out of this License Template on creation. Automatic Licenses must have their price set to 0. (optional)
     * @param currency Specifies currency for the License price. Check data types to discover which currencies are supported. (optional)
     * @param hidden If set to &#39;true&#39;, this License Template is not shown in NetLicensing Shop as offered for purchase. (optional)
     * @param hideLicenses If set to &#39;true&#39;, Licenses from this License Template are not visible to the end customer, but participate in validation. (optional)
     * @param licenseType Type of Licenses created from this License Template. Supported types: FEATURE, TIMEVOLUME, FLOATING, QUANTITY (optional)
     * @param maxSessions Mandatory for &#39;FLOATING&#39; License Type. (optional)
     * @param name Name for the Licensed item (optional)
     * @param number New License Template number (update). (optional)
     * @param price Price for the License. If &gt;0, it must always be accompanied by the currency specification. (optional)
     * @param quantity Mandatory for &#39;Pay-per-Use&#39; and &#39;Node-Locked&#39; License Model. (optional)
     * @param quota Mandatory for &#39;Quota&#39; License Model. (optional)
     * @param timeVolume Mandatory for &#39;TIMEVOLUME&#39; License Type. (optional)
     * @param timeVolumePeriod For &#39;TIMEVOLUME&#39; License Type. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful request </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Malformed or illegal request </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Access is denied </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal service error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateLicenseTemplateCall(String licenseTemplateNumber, Boolean active, Boolean automatic, String currency, Boolean hidden, Boolean hideLicenses, String licenseType, String maxSessions, String name, String number, Double price, String quantity, String quota, String timeVolume, String timeVolumePeriod, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/licensetemplate/{licenseTemplateNumber}"
            .replace("{" + "licenseTemplateNumber" + "}", localVarApiClient.escapeString(licenseTemplateNumber.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (active != null) {
            localVarFormParams.put("active", active);
        }

        if (automatic != null) {
            localVarFormParams.put("automatic", automatic);
        }

        if (currency != null) {
            localVarFormParams.put("currency", currency);
        }

        if (hidden != null) {
            localVarFormParams.put("hidden", hidden);
        }

        if (hideLicenses != null) {
            localVarFormParams.put("hideLicenses", hideLicenses);
        }

        if (licenseType != null) {
            localVarFormParams.put("licenseType", licenseType);
        }

        if (maxSessions != null) {
            localVarFormParams.put("maxSessions", maxSessions);
        }

        if (name != null) {
            localVarFormParams.put("name", name);
        }

        if (number != null) {
            localVarFormParams.put("number", number);
        }

        if (price != null) {
            localVarFormParams.put("price", price);
        }

        if (quantity != null) {
            localVarFormParams.put("quantity", quantity);
        }

        if (quota != null) {
            localVarFormParams.put("quota", quota);
        }

        if (timeVolume != null) {
            localVarFormParams.put("timeVolume", timeVolume);
        }

        if (timeVolumePeriod != null) {
            localVarFormParams.put("timeVolumePeriod", timeVolumePeriod);
        }

        final String[] localVarAccepts = {
            "application/json",
            "application/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/x-www-form-urlencoded"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateLicenseTemplateValidateBeforeCall(String licenseTemplateNumber, Boolean active, Boolean automatic, String currency, Boolean hidden, Boolean hideLicenses, String licenseType, String maxSessions, String name, String number, Double price, String quantity, String quota, String timeVolume, String timeVolumePeriod, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'licenseTemplateNumber' is set
        if (licenseTemplateNumber == null) {
            throw new ApiException("Missing the required parameter 'licenseTemplateNumber' when calling updateLicenseTemplate(Async)");
        }

        return updateLicenseTemplateCall(licenseTemplateNumber, active, automatic, currency, hidden, hideLicenses, licenseType, maxSessions, name, number, price, quantity, quota, timeVolume, timeVolumePeriod, _callback);

    }

    /**
     * Update License Template
     * Sets the provided properties to a License Template. Return an updated License Template
     * @param licenseTemplateNumber Unique number (across all Products of a Vendor) that identifies the License Template. Vendor can assign this number when creating a License Template or let NetLicensing generate one. Read-only after creation of the first License from this License Template. (required)
     * @param active If set to &#39;false&#39;, the License Template is disabled. Licensee can not obtain any new Licenses off this License Template. (optional)
     * @param automatic If set to &#39;true&#39;, every new Licensee automatically gets one License out of this License Template on creation. Automatic Licenses must have their price set to 0. (optional)
     * @param currency Specifies currency for the License price. Check data types to discover which currencies are supported. (optional)
     * @param hidden If set to &#39;true&#39;, this License Template is not shown in NetLicensing Shop as offered for purchase. (optional)
     * @param hideLicenses If set to &#39;true&#39;, Licenses from this License Template are not visible to the end customer, but participate in validation. (optional)
     * @param licenseType Type of Licenses created from this License Template. Supported types: FEATURE, TIMEVOLUME, FLOATING, QUANTITY (optional)
     * @param maxSessions Mandatory for &#39;FLOATING&#39; License Type. (optional)
     * @param name Name for the Licensed item (optional)
     * @param number New License Template number (update). (optional)
     * @param price Price for the License. If &gt;0, it must always be accompanied by the currency specification. (optional)
     * @param quantity Mandatory for &#39;Pay-per-Use&#39; and &#39;Node-Locked&#39; License Model. (optional)
     * @param quota Mandatory for &#39;Quota&#39; License Model. (optional)
     * @param timeVolume Mandatory for &#39;TIMEVOLUME&#39; License Type. (optional)
     * @param timeVolumePeriod For &#39;TIMEVOLUME&#39; License Type. (optional)
     * @return Netlicensing
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful request </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Malformed or illegal request </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Access is denied </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal service error </td><td>  -  </td></tr>
     </table>
     */
    public Netlicensing updateLicenseTemplate(String licenseTemplateNumber, Boolean active, Boolean automatic, String currency, Boolean hidden, Boolean hideLicenses, String licenseType, String maxSessions, String name, String number, Double price, String quantity, String quota, String timeVolume, String timeVolumePeriod) throws ApiException {
        ApiResponse<Netlicensing> localVarResp = updateLicenseTemplateWithHttpInfo(licenseTemplateNumber, active, automatic, currency, hidden, hideLicenses, licenseType, maxSessions, name, number, price, quantity, quota, timeVolume, timeVolumePeriod);
        return localVarResp.getData();
    }

    /**
     * Update License Template
     * Sets the provided properties to a License Template. Return an updated License Template
     * @param licenseTemplateNumber Unique number (across all Products of a Vendor) that identifies the License Template. Vendor can assign this number when creating a License Template or let NetLicensing generate one. Read-only after creation of the first License from this License Template. (required)
     * @param active If set to &#39;false&#39;, the License Template is disabled. Licensee can not obtain any new Licenses off this License Template. (optional)
     * @param automatic If set to &#39;true&#39;, every new Licensee automatically gets one License out of this License Template on creation. Automatic Licenses must have their price set to 0. (optional)
     * @param currency Specifies currency for the License price. Check data types to discover which currencies are supported. (optional)
     * @param hidden If set to &#39;true&#39;, this License Template is not shown in NetLicensing Shop as offered for purchase. (optional)
     * @param hideLicenses If set to &#39;true&#39;, Licenses from this License Template are not visible to the end customer, but participate in validation. (optional)
     * @param licenseType Type of Licenses created from this License Template. Supported types: FEATURE, TIMEVOLUME, FLOATING, QUANTITY (optional)
     * @param maxSessions Mandatory for &#39;FLOATING&#39; License Type. (optional)
     * @param name Name for the Licensed item (optional)
     * @param number New License Template number (update). (optional)
     * @param price Price for the License. If &gt;0, it must always be accompanied by the currency specification. (optional)
     * @param quantity Mandatory for &#39;Pay-per-Use&#39; and &#39;Node-Locked&#39; License Model. (optional)
     * @param quota Mandatory for &#39;Quota&#39; License Model. (optional)
     * @param timeVolume Mandatory for &#39;TIMEVOLUME&#39; License Type. (optional)
     * @param timeVolumePeriod For &#39;TIMEVOLUME&#39; License Type. (optional)
     * @return ApiResponse&lt;Netlicensing&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful request </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Malformed or illegal request </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Access is denied </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal service error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Netlicensing> updateLicenseTemplateWithHttpInfo(String licenseTemplateNumber, Boolean active, Boolean automatic, String currency, Boolean hidden, Boolean hideLicenses, String licenseType, String maxSessions, String name, String number, Double price, String quantity, String quota, String timeVolume, String timeVolumePeriod) throws ApiException {
        okhttp3.Call localVarCall = updateLicenseTemplateValidateBeforeCall(licenseTemplateNumber, active, automatic, currency, hidden, hideLicenses, licenseType, maxSessions, name, number, price, quantity, quota, timeVolume, timeVolumePeriod, null);
        Type localVarReturnType = new TypeToken<Netlicensing>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update License Template (asynchronously)
     * Sets the provided properties to a License Template. Return an updated License Template
     * @param licenseTemplateNumber Unique number (across all Products of a Vendor) that identifies the License Template. Vendor can assign this number when creating a License Template or let NetLicensing generate one. Read-only after creation of the first License from this License Template. (required)
     * @param active If set to &#39;false&#39;, the License Template is disabled. Licensee can not obtain any new Licenses off this License Template. (optional)
     * @param automatic If set to &#39;true&#39;, every new Licensee automatically gets one License out of this License Template on creation. Automatic Licenses must have their price set to 0. (optional)
     * @param currency Specifies currency for the License price. Check data types to discover which currencies are supported. (optional)
     * @param hidden If set to &#39;true&#39;, this License Template is not shown in NetLicensing Shop as offered for purchase. (optional)
     * @param hideLicenses If set to &#39;true&#39;, Licenses from this License Template are not visible to the end customer, but participate in validation. (optional)
     * @param licenseType Type of Licenses created from this License Template. Supported types: FEATURE, TIMEVOLUME, FLOATING, QUANTITY (optional)
     * @param maxSessions Mandatory for &#39;FLOATING&#39; License Type. (optional)
     * @param name Name for the Licensed item (optional)
     * @param number New License Template number (update). (optional)
     * @param price Price for the License. If &gt;0, it must always be accompanied by the currency specification. (optional)
     * @param quantity Mandatory for &#39;Pay-per-Use&#39; and &#39;Node-Locked&#39; License Model. (optional)
     * @param quota Mandatory for &#39;Quota&#39; License Model. (optional)
     * @param timeVolume Mandatory for &#39;TIMEVOLUME&#39; License Type. (optional)
     * @param timeVolumePeriod For &#39;TIMEVOLUME&#39; License Type. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful request </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Malformed or illegal request </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Access is denied </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal service error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateLicenseTemplateAsync(String licenseTemplateNumber, Boolean active, Boolean automatic, String currency, Boolean hidden, Boolean hideLicenses, String licenseType, String maxSessions, String name, String number, Double price, String quantity, String quota, String timeVolume, String timeVolumePeriod, final ApiCallback<Netlicensing> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateLicenseTemplateValidateBeforeCall(licenseTemplateNumber, active, automatic, currency, hidden, hideLicenses, licenseType, maxSessions, name, number, price, quantity, quota, timeVolume, timeVolumePeriod, _callback);
        Type localVarReturnType = new TypeToken<Netlicensing>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
