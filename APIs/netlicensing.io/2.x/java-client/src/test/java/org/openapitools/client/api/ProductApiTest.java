/*
 * Labs64 NetLicensing RESTful API Test Center
 * The Labs64 <a href='https://netlicensing.io/wiki/restful-api' target='_blank'>NetLicensing RESTful API</a> gives you access to NetLicensingâ€™s core features.<br/><br/><strong>Authentication</strong><br/>You authenticate to the NetLicensing API by providing your account credentials or simply use our demo account - <code>demo:demo</code><br/><br/>Find out more about Labs64 NetLicensing at <a href='https://netlicensing.io' target='_blank'>netlicensing.io</a>
 *
 * The version of the OpenAPI document: 2.x
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.Netlicensing;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for ProductApi
 */
@Disabled
public class ProductApiTest {

    private final ProductApi api = new ProductApi();

    /**
     * Create Product
     *
     * Creates a new Product
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createProductTest() throws ApiException {
        Boolean active = null;
        String name = null;
        String version = null;
        String description = null;
        Boolean licenseeAutoCreate = null;
        String licensingInfo = null;
        String number = null;
        String vatMode = null;
        Netlicensing response = api.createProduct(active, name, version, description, licenseeAutoCreate, licensingInfo, number, vatMode);
        // TODO: test validations
    }

    /**
     * Delete Product
     *
     * Delete a Product by &#39;number&#39;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteProductTest() throws ApiException {
        String productNumber = null;
        Boolean forceCascade = null;
        Netlicensing response = api.deleteProduct(productNumber, forceCascade);
        // TODO: test validations
    }

    /**
     * List Products
     *
     * Return a list of all configured Products for the current Vendor
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listProductsTest() throws ApiException {
        List<Netlicensing> response = api.listProducts();
        // TODO: test validations
    }

    /**
     * Get Product
     *
     * Return a Product by &#39;productNumber&#39;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void productNumberTest() throws ApiException {
        String productNumber = null;
        Netlicensing response = api.productNumber(productNumber);
        // TODO: test validations
    }

    /**
     * Update Product
     *
     * Sets the provided properties to a Product. Return an updated Product
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateProductTest() throws ApiException {
        String productNumber = null;
        Boolean active = null;
        String description = null;
        Boolean licenseeAutoCreate = null;
        String licensingInfo = null;
        String name = null;
        String number = null;
        String vatMode = null;
        String version = null;
        Netlicensing response = api.updateProduct(productNumber, active, description, licenseeAutoCreate, licensingInfo, name, number, vatMode, version);
        // TODO: test validations
    }

}
