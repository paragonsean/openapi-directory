/*
 * Labs64 NetLicensing RESTful API Test Center
 * The Labs64 <a href='https://netlicensing.io/wiki/restful-api' target='_blank'>NetLicensing RESTful API</a> gives you access to NetLicensingâ€™s core features.<br/><br/><strong>Authentication</strong><br/>You authenticate to the NetLicensing API by providing your account credentials or simply use our demo account - <code>demo:demo</code><br/><br/>Find out more about Labs64 NetLicensing at <a href='https://netlicensing.io' target='_blank'>netlicensing.io</a>
 *
 * The version of the OpenAPI document: 2.x
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.Netlicensing;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for ProductModuleApi
 */
@Disabled
public class ProductModuleApiTest {

    private final ProductModuleApi api = new ProductModuleApi();

    /**
     * Create Product Module
     *
     * Creates a new Product Module
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createProductModuleTest() throws ApiException {
        Boolean active = null;
        String licensingModel = null;
        String name = null;
        String productNumber = null;
        List<String> licenseTemplate = null;
        Integer maxCheckoutValidity = null;
        List<String> nodeSecretMode = null;
        String number = null;
        Integer redThreshold = null;
        Integer yellowThreshold = null;
        Netlicensing response = api.createProductModule(active, licensingModel, name, productNumber, licenseTemplate, maxCheckoutValidity, nodeSecretMode, number, redThreshold, yellowThreshold);
        // TODO: test validations
    }

    /**
     * Delete Product Module
     *
     * Delete a Product Module by &#39;number&#39;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteProductModuleTest() throws ApiException {
        String productModuleNumber = null;
        Boolean forceCascade = null;
        Netlicensing response = api.deleteProductModule(productModuleNumber, forceCascade);
        // TODO: test validations
    }

    /**
     * Get Product Module
     *
     * Return a Product Module by &#39;productModuleNumber&#39;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getProductModuleTest() throws ApiException {
        String productModuleNumber = null;
        Netlicensing response = api.getProductModule(productModuleNumber);
        // TODO: test validations
    }

    /**
     * List Product Modules
     *
     * Return a list of all Product Modules for the current Vendor
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listProductModulesTest() throws ApiException {
        List<Netlicensing> response = api.listProductModules();
        // TODO: test validations
    }

    /**
     * Update Product Module
     *
     * Sets the provided properties to a Product Module. Return an updated Product Module
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateProductModuleTest() throws ApiException {
        String productModuleNumber = null;
        Boolean active = null;
        List<String> licenseTemplate = null;
        String licensingModel = null;
        Integer maxCheckoutValidity = null;
        String name = null;
        List<String> nodeSecretMode = null;
        String number = null;
        Integer redThreshold = null;
        Integer yellowThreshold = null;
        Netlicensing response = api.updateProductModule(productModuleNumber, active, licenseTemplate, licensingModel, maxCheckoutValidity, name, nodeSecretMode, number, redThreshold, yellowThreshold);
        // TODO: test validations
    }

}
