/*
 * Labs64 NetLicensing RESTful API Test Center
 * The Labs64 <a href='https://netlicensing.io/wiki/restful-api' target='_blank'>NetLicensing RESTful API</a> gives you access to NetLicensingâ€™s core features.<br/><br/><strong>Authentication</strong><br/>You authenticate to the NetLicensing API by providing your account credentials or simply use our demo account - <code>demo:demo</code><br/><br/>Find out more about Labs64 NetLicensing at <a href='https://netlicensing.io' target='_blank'>netlicensing.io</a>
 *
 * The version of the OpenAPI document: 2.x
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.Netlicensing;
import java.time.OffsetDateTime;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for LicenseApi
 */
@Disabled
public class LicenseApiTest {

    private final LicenseApi api = new LicenseApi();

    /**
     * Create License
     *
     * Creates a new License
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createLicenseTest() throws ApiException {
        Boolean active = null;
        String licenseTemplateNumber = null;
        String licenseeNumber = null;
        String currency = null;
        Boolean hidden = null;
        String name = null;
        String number = null;
        String parentfeature = null;
        Double price = null;
        String quantity = null;
        OffsetDateTime startDate = null;
        String timeVolume = null;
        String timeVolumePeriod = null;
        String usedQuantity = null;
        Netlicensing response = api.createLicense(active, licenseTemplateNumber, licenseeNumber, currency, hidden, name, number, parentfeature, price, quantity, startDate, timeVolume, timeVolumePeriod, usedQuantity);
        // TODO: test validations
    }

    /**
     * Delete License
     *
     * Delete License by a &#39;licenseNumber&#39;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteLicenseTest() throws ApiException {
        String licenseNumber = null;
        Netlicensing response = api.deleteLicense(licenseNumber);
        // TODO: test validations
    }

    /**
     * Get License
     *
     * Get License by a &#39;licenseNumber&#39;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getLicenseTest() throws ApiException {
        String licenseNumber = null;
        Netlicensing response = api.getLicense(licenseNumber);
        // TODO: test validations
    }

    /**
     * List Licenses
     *
     * Return a list of all Licenses for the current Vendor
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listLicensesTest() throws ApiException {
        List<Netlicensing> response = api.listLicenses();
        // TODO: test validations
    }

    /**
     * Update License
     *
     * Update License by a &#39;licenseNumber&#39;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateLicenseTest() throws ApiException {
        String licenseNumber = null;
        Boolean active = null;
        String currency = null;
        Boolean hidden = null;
        String name = null;
        String number = null;
        String parentfeature = null;
        Double price = null;
        String quantity = null;
        OffsetDateTime startDate = null;
        String timeVolume = null;
        String timeVolumePeriod = null;
        String usedQuantity = null;
        Netlicensing response = api.updateLicense(licenseNumber, active, currency, hidden, name, number, parentfeature, price, quantity, startDate, timeVolume, timeVolumePeriod, usedQuantity);
        // TODO: test validations
    }

}
