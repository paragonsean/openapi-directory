/**
 * Labs64 NetLicensing RESTful API Test Center
 * The Labs64 <a href='https://netlicensing.io/wiki/restful-api' target='_blank'>NetLicensing RESTful API</a> gives you access to NetLicensingâ€™s core features.<br/><br/><strong>Authentication</strong><br/>You authenticate to the NetLicensing API by providing your account credentials or simply use our demo account - <code>demo:demo</code><br/><br/>Find out more about Labs64 NetLicensing at <a href='https://netlicensing.io' target='_blank'>netlicensing.io</a>
 *
 * The version of the OpenAPI document: 2.x
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAINetlicensing.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAINetlicensing::OAINetlicensing(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAINetlicensing::OAINetlicensing() {
    this->initializeModel();
}

OAINetlicensing::~OAINetlicensing() {}

void OAINetlicensing::initializeModel() {

    m_infos_isSet = false;
    m_infos_isValid = false;

    m_items_isSet = false;
    m_items_isValid = false;
}

void OAINetlicensing::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAINetlicensing::fromJsonObject(QJsonObject json) {

    m_infos_isValid = ::OpenAPI::fromJsonValue(m_infos, json[QString("infos")]);
    m_infos_isSet = !json[QString("infos")].isNull() && m_infos_isValid;

    m_items_isValid = ::OpenAPI::fromJsonValue(m_items, json[QString("items")]);
    m_items_isSet = !json[QString("items")].isNull() && m_items_isValid;
}

QString OAINetlicensing::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAINetlicensing::asJsonObject() const {
    QJsonObject obj;
    if (m_infos_isSet) {
        obj.insert(QString("infos"), ::OpenAPI::toJsonValue(m_infos));
    }
    if (m_items_isSet) {
        obj.insert(QString("items"), ::OpenAPI::toJsonValue(m_items));
    }
    return obj;
}

QJsonValue OAINetlicensing::getInfos() const {
    return m_infos;
}
void OAINetlicensing::setInfos(const QJsonValue &infos) {
    m_infos = infos;
    m_infos_isSet = true;
}

bool OAINetlicensing::is_infos_Set() const{
    return m_infos_isSet;
}

bool OAINetlicensing::is_infos_Valid() const{
    return m_infos_isValid;
}

QJsonValue OAINetlicensing::getItems() const {
    return m_items;
}
void OAINetlicensing::setItems(const QJsonValue &items) {
    m_items = items;
    m_items_isSet = true;
}

bool OAINetlicensing::is_items_Set() const{
    return m_items_isSet;
}

bool OAINetlicensing::is_items_Valid() const{
    return m_items_isValid;
}

bool OAINetlicensing::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_infos_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_items_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAINetlicensing::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
