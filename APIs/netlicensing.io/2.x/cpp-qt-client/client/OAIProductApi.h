/**
 * Labs64 NetLicensing RESTful API Test Center
 * The Labs64 <a href='https://netlicensing.io/wiki/restful-api' target='_blank'>NetLicensing RESTful API</a> gives you access to NetLicensingâ€™s core features.<br/><br/><strong>Authentication</strong><br/>You authenticate to the NetLicensing API by providing your account credentials or simply use our demo account - <code>demo:demo</code><br/><br/>Find out more about Labs64 NetLicensing at <a href='https://netlicensing.io' target='_blank'>netlicensing.io</a>
 *
 * The version of the OpenAPI document: 2.x
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIProductApi_H
#define OAI_OAIProductApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAINetlicensing.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIProductApi : public QObject {
    Q_OBJECT

public:
    OAIProductApi(const int timeOut = 0);
    ~OAIProductApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  active bool [required]
    * @param[in]  name QString [required]
    * @param[in]  version QString [required]
    * @param[in]  description QString [optional]
    * @param[in]  licensee_auto_create bool [optional]
    * @param[in]  licensing_info QString [optional]
    * @param[in]  number QString [optional]
    * @param[in]  vat_mode QString [optional]
    */
    virtual void createProduct(const bool &active, const QString &name, const QString &version, const ::OpenAPI::OptionalParam<QString> &description = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &licensee_auto_create = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &licensing_info = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &number = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &vat_mode = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  product_number QString [required]
    * @param[in]  force_cascade bool [optional]
    */
    virtual void deleteProduct(const QString &product_number, const ::OpenAPI::OptionalParam<bool> &force_cascade = ::OpenAPI::OptionalParam<bool>());


    virtual void listProducts();

    /**
    * @param[in]  product_number QString [required]
    */
    virtual void productNumber(const QString &product_number);

    /**
    * @param[in]  product_number QString [required]
    * @param[in]  active bool [optional]
    * @param[in]  description QString [optional]
    * @param[in]  licensee_auto_create bool [optional]
    * @param[in]  licensing_info QString [optional]
    * @param[in]  name QString [optional]
    * @param[in]  number QString [optional]
    * @param[in]  vat_mode QString [optional]
    * @param[in]  version QString [optional]
    */
    virtual void updateProduct(const QString &product_number, const ::OpenAPI::OptionalParam<bool> &active = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &description = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &licensee_auto_create = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &licensing_info = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &name = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &number = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &vat_mode = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &version = ::OpenAPI::OptionalParam<QString>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void createProductCallback(OAIHttpRequestWorker *worker);
    void deleteProductCallback(OAIHttpRequestWorker *worker);
    void listProductsCallback(OAIHttpRequestWorker *worker);
    void productNumberCallback(OAIHttpRequestWorker *worker);
    void updateProductCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void createProductSignal(OAINetlicensing summary);
    void deleteProductSignal(OAINetlicensing summary);
    void listProductsSignal(QList<OAINetlicensing> summary);
    void productNumberSignal(OAINetlicensing summary);
    void updateProductSignal(OAINetlicensing summary);


    void createProductSignalFull(OAIHttpRequestWorker *worker, OAINetlicensing summary);
    void deleteProductSignalFull(OAIHttpRequestWorker *worker, OAINetlicensing summary);
    void listProductsSignalFull(OAIHttpRequestWorker *worker, QList<OAINetlicensing> summary);
    void productNumberSignalFull(OAIHttpRequestWorker *worker, OAINetlicensing summary);
    void updateProductSignalFull(OAIHttpRequestWorker *worker, OAINetlicensing summary);

    Q_DECL_DEPRECATED_X("Use createProductSignalError() instead")
    void createProductSignalE(OAINetlicensing summary, QNetworkReply::NetworkError error_type, QString error_str);
    void createProductSignalError(OAINetlicensing summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteProductSignalError() instead")
    void deleteProductSignalE(OAINetlicensing summary, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteProductSignalError(OAINetlicensing summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listProductsSignalError() instead")
    void listProductsSignalE(QList<OAINetlicensing> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void listProductsSignalError(QList<OAINetlicensing> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use productNumberSignalError() instead")
    void productNumberSignalE(OAINetlicensing summary, QNetworkReply::NetworkError error_type, QString error_str);
    void productNumberSignalError(OAINetlicensing summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateProductSignalError() instead")
    void updateProductSignalE(OAINetlicensing summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateProductSignalError(OAINetlicensing summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use createProductSignalErrorFull() instead")
    void createProductSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void createProductSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteProductSignalErrorFull() instead")
    void deleteProductSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteProductSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listProductsSignalErrorFull() instead")
    void listProductsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void listProductsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use productNumberSignalErrorFull() instead")
    void productNumberSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void productNumberSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateProductSignalErrorFull() instead")
    void updateProductSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateProductSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
