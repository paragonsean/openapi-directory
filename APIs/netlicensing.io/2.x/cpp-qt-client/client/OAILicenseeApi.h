/**
 * Labs64 NetLicensing RESTful API Test Center
 * The Labs64 <a href='https://netlicensing.io/wiki/restful-api' target='_blank'>NetLicensing RESTful API</a> gives you access to NetLicensingâ€™s core features.<br/><br/><strong>Authentication</strong><br/>You authenticate to the NetLicensing API by providing your account credentials or simply use our demo account - <code>demo:demo</code><br/><br/>Find out more about Labs64 NetLicensing at <a href='https://netlicensing.io' target='_blank'>netlicensing.io</a>
 *
 * The version of the OpenAPI document: 2.x
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAILicenseeApi_H
#define OAI_OAILicenseeApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAINetlicensing.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAILicenseeApi : public QObject {
    Q_OBJECT

public:
    OAILicenseeApi(const int timeOut = 0);
    ~OAILicenseeApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  active bool [required]
    * @param[in]  product_number QString [required]
    * @param[in]  marked_for_transfer bool [optional]
    * @param[in]  name QString [optional]
    * @param[in]  number QString [optional]
    */
    virtual void createLicensee(const bool &active, const QString &product_number, const ::OpenAPI::OptionalParam<bool> &marked_for_transfer = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &name = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &number = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  licensee_number QString [required]
    * @param[in]  force_cascade bool [optional]
    */
    virtual void deleteLicensee(const QString &licensee_number, const ::OpenAPI::OptionalParam<bool> &force_cascade = ::OpenAPI::OptionalParam<bool>());

    /**
    * @param[in]  licensee_number QString [required]
    */
    virtual void getLicensee(const QString &licensee_number);


    virtual void listLicensees();

    /**
    * @param[in]  licensee_number QString [required]
    * @param[in]  source_licensee_number QString [required]
    */
    virtual void transferLicenses(const QString &licensee_number, const QString &source_licensee_number);

    /**
    * @param[in]  licensee_number QString [required]
    * @param[in]  active bool [optional]
    * @param[in]  marked_for_transfer bool [optional]
    * @param[in]  name QString [optional]
    * @param[in]  number QString [optional]
    */
    virtual void updateLicensee(const QString &licensee_number, const ::OpenAPI::OptionalParam<bool> &active = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &marked_for_transfer = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &name = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &number = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  licensee_number QString [required]
    * @param[in]  action QString [optional]
    * @param[in]  licensee_name QString [optional]
    * @param[in]  node_secret QString [optional]
    * @param[in]  product_module_number QString [optional]
    * @param[in]  product_number QString [optional]
    * @param[in]  session_id QString [optional]
    */
    virtual void validateLicensee(const QString &licensee_number, const ::OpenAPI::OptionalParam<QString> &action = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &licensee_name = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &node_secret = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &product_module_number = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &product_number = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &session_id = ::OpenAPI::OptionalParam<QString>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void createLicenseeCallback(OAIHttpRequestWorker *worker);
    void deleteLicenseeCallback(OAIHttpRequestWorker *worker);
    void getLicenseeCallback(OAIHttpRequestWorker *worker);
    void listLicenseesCallback(OAIHttpRequestWorker *worker);
    void transferLicensesCallback(OAIHttpRequestWorker *worker);
    void updateLicenseeCallback(OAIHttpRequestWorker *worker);
    void validateLicenseeCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void createLicenseeSignal(OAINetlicensing summary);
    void deleteLicenseeSignal(OAINetlicensing summary);
    void getLicenseeSignal(OAINetlicensing summary);
    void listLicenseesSignal(QList<OAINetlicensing> summary);
    void transferLicensesSignal(OAINetlicensing summary);
    void updateLicenseeSignal(OAINetlicensing summary);
    void validateLicenseeSignal(OAINetlicensing summary);


    void createLicenseeSignalFull(OAIHttpRequestWorker *worker, OAINetlicensing summary);
    void deleteLicenseeSignalFull(OAIHttpRequestWorker *worker, OAINetlicensing summary);
    void getLicenseeSignalFull(OAIHttpRequestWorker *worker, OAINetlicensing summary);
    void listLicenseesSignalFull(OAIHttpRequestWorker *worker, QList<OAINetlicensing> summary);
    void transferLicensesSignalFull(OAIHttpRequestWorker *worker, OAINetlicensing summary);
    void updateLicenseeSignalFull(OAIHttpRequestWorker *worker, OAINetlicensing summary);
    void validateLicenseeSignalFull(OAIHttpRequestWorker *worker, OAINetlicensing summary);

    Q_DECL_DEPRECATED_X("Use createLicenseeSignalError() instead")
    void createLicenseeSignalE(OAINetlicensing summary, QNetworkReply::NetworkError error_type, QString error_str);
    void createLicenseeSignalError(OAINetlicensing summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteLicenseeSignalError() instead")
    void deleteLicenseeSignalE(OAINetlicensing summary, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteLicenseeSignalError(OAINetlicensing summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getLicenseeSignalError() instead")
    void getLicenseeSignalE(OAINetlicensing summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getLicenseeSignalError(OAINetlicensing summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listLicenseesSignalError() instead")
    void listLicenseesSignalE(QList<OAINetlicensing> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void listLicenseesSignalError(QList<OAINetlicensing> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use transferLicensesSignalError() instead")
    void transferLicensesSignalE(OAINetlicensing summary, QNetworkReply::NetworkError error_type, QString error_str);
    void transferLicensesSignalError(OAINetlicensing summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateLicenseeSignalError() instead")
    void updateLicenseeSignalE(OAINetlicensing summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateLicenseeSignalError(OAINetlicensing summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use validateLicenseeSignalError() instead")
    void validateLicenseeSignalE(OAINetlicensing summary, QNetworkReply::NetworkError error_type, QString error_str);
    void validateLicenseeSignalError(OAINetlicensing summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use createLicenseeSignalErrorFull() instead")
    void createLicenseeSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void createLicenseeSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteLicenseeSignalErrorFull() instead")
    void deleteLicenseeSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteLicenseeSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getLicenseeSignalErrorFull() instead")
    void getLicenseeSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getLicenseeSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listLicenseesSignalErrorFull() instead")
    void listLicenseesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void listLicenseesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use transferLicensesSignalErrorFull() instead")
    void transferLicensesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void transferLicensesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateLicenseeSignalErrorFull() instead")
    void updateLicenseeSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateLicenseeSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use validateLicenseeSignalErrorFull() instead")
    void validateLicenseeSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void validateLicenseeSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
