/**
 * Labs64 NetLicensing RESTful API Test Center
 * The Labs64 <a href='https://netlicensing.io/wiki/restful-api' target='_blank'>NetLicensing RESTful API</a> gives you access to NetLicensingâ€™s core features.<br/><br/><strong>Authentication</strong><br/>You authenticate to the NetLicensing API by providing your account credentials or simply use our demo account - <code>demo:demo</code><br/><br/>Find out more about Labs64 NetLicensing at <a href='https://netlicensing.io' target='_blank'>netlicensing.io</a>
 *
 * The version of the OpenAPI document: 2.x
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAILicenseTemplate.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAILicenseTemplate::OAILicenseTemplate(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAILicenseTemplate::OAILicenseTemplate() {
    this->initializeModel();
}

OAILicenseTemplate::~OAILicenseTemplate() {}

void OAILicenseTemplate::initializeModel() {

    m_active_isSet = false;
    m_active_isValid = false;

    m_automatic_isSet = false;
    m_automatic_isValid = false;

    m_currency_isSet = false;
    m_currency_isValid = false;

    m_hidden_isSet = false;
    m_hidden_isValid = false;

    m_hidden_licenses_isSet = false;
    m_hidden_licenses_isValid = false;

    m_license_type_isSet = false;
    m_license_type_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_number_isSet = false;
    m_number_isValid = false;

    m_price_isSet = false;
    m_price_isValid = false;
}

void OAILicenseTemplate::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAILicenseTemplate::fromJsonObject(QJsonObject json) {

    m_active_isValid = ::OpenAPI::fromJsonValue(m_active, json[QString("active")]);
    m_active_isSet = !json[QString("active")].isNull() && m_active_isValid;

    m_automatic_isValid = ::OpenAPI::fromJsonValue(m_automatic, json[QString("automatic")]);
    m_automatic_isSet = !json[QString("automatic")].isNull() && m_automatic_isValid;

    m_currency_isValid = ::OpenAPI::fromJsonValue(m_currency, json[QString("currency")]);
    m_currency_isSet = !json[QString("currency")].isNull() && m_currency_isValid;

    m_hidden_isValid = ::OpenAPI::fromJsonValue(m_hidden, json[QString("hidden")]);
    m_hidden_isSet = !json[QString("hidden")].isNull() && m_hidden_isValid;

    m_hidden_licenses_isValid = ::OpenAPI::fromJsonValue(m_hidden_licenses, json[QString("hiddenLicenses")]);
    m_hidden_licenses_isSet = !json[QString("hiddenLicenses")].isNull() && m_hidden_licenses_isValid;

    m_license_type_isValid = ::OpenAPI::fromJsonValue(m_license_type, json[QString("licenseType")]);
    m_license_type_isSet = !json[QString("licenseType")].isNull() && m_license_type_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_number_isValid = ::OpenAPI::fromJsonValue(m_number, json[QString("number")]);
    m_number_isSet = !json[QString("number")].isNull() && m_number_isValid;

    m_price_isValid = ::OpenAPI::fromJsonValue(m_price, json[QString("price")]);
    m_price_isSet = !json[QString("price")].isNull() && m_price_isValid;
}

QString OAILicenseTemplate::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAILicenseTemplate::asJsonObject() const {
    QJsonObject obj;
    if (m_active_isSet) {
        obj.insert(QString("active"), ::OpenAPI::toJsonValue(m_active));
    }
    if (m_automatic_isSet) {
        obj.insert(QString("automatic"), ::OpenAPI::toJsonValue(m_automatic));
    }
    if (m_currency_isSet) {
        obj.insert(QString("currency"), ::OpenAPI::toJsonValue(m_currency));
    }
    if (m_hidden_isSet) {
        obj.insert(QString("hidden"), ::OpenAPI::toJsonValue(m_hidden));
    }
    if (m_hidden_licenses_isSet) {
        obj.insert(QString("hiddenLicenses"), ::OpenAPI::toJsonValue(m_hidden_licenses));
    }
    if (m_license_type_isSet) {
        obj.insert(QString("licenseType"), ::OpenAPI::toJsonValue(m_license_type));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_number_isSet) {
        obj.insert(QString("number"), ::OpenAPI::toJsonValue(m_number));
    }
    if (m_price_isSet) {
        obj.insert(QString("price"), ::OpenAPI::toJsonValue(m_price));
    }
    return obj;
}

bool OAILicenseTemplate::isActive() const {
    return m_active;
}
void OAILicenseTemplate::setActive(const bool &active) {
    m_active = active;
    m_active_isSet = true;
}

bool OAILicenseTemplate::is_active_Set() const{
    return m_active_isSet;
}

bool OAILicenseTemplate::is_active_Valid() const{
    return m_active_isValid;
}

bool OAILicenseTemplate::isAutomatic() const {
    return m_automatic;
}
void OAILicenseTemplate::setAutomatic(const bool &automatic) {
    m_automatic = automatic;
    m_automatic_isSet = true;
}

bool OAILicenseTemplate::is_automatic_Set() const{
    return m_automatic_isSet;
}

bool OAILicenseTemplate::is_automatic_Valid() const{
    return m_automatic_isValid;
}

QString OAILicenseTemplate::getCurrency() const {
    return m_currency;
}
void OAILicenseTemplate::setCurrency(const QString &currency) {
    m_currency = currency;
    m_currency_isSet = true;
}

bool OAILicenseTemplate::is_currency_Set() const{
    return m_currency_isSet;
}

bool OAILicenseTemplate::is_currency_Valid() const{
    return m_currency_isValid;
}

bool OAILicenseTemplate::isHidden() const {
    return m_hidden;
}
void OAILicenseTemplate::setHidden(const bool &hidden) {
    m_hidden = hidden;
    m_hidden_isSet = true;
}

bool OAILicenseTemplate::is_hidden_Set() const{
    return m_hidden_isSet;
}

bool OAILicenseTemplate::is_hidden_Valid() const{
    return m_hidden_isValid;
}

bool OAILicenseTemplate::isHiddenLicenses() const {
    return m_hidden_licenses;
}
void OAILicenseTemplate::setHiddenLicenses(const bool &hidden_licenses) {
    m_hidden_licenses = hidden_licenses;
    m_hidden_licenses_isSet = true;
}

bool OAILicenseTemplate::is_hidden_licenses_Set() const{
    return m_hidden_licenses_isSet;
}

bool OAILicenseTemplate::is_hidden_licenses_Valid() const{
    return m_hidden_licenses_isValid;
}

QString OAILicenseTemplate::getLicenseType() const {
    return m_license_type;
}
void OAILicenseTemplate::setLicenseType(const QString &license_type) {
    m_license_type = license_type;
    m_license_type_isSet = true;
}

bool OAILicenseTemplate::is_license_type_Set() const{
    return m_license_type_isSet;
}

bool OAILicenseTemplate::is_license_type_Valid() const{
    return m_license_type_isValid;
}

QString OAILicenseTemplate::getName() const {
    return m_name;
}
void OAILicenseTemplate::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAILicenseTemplate::is_name_Set() const{
    return m_name_isSet;
}

bool OAILicenseTemplate::is_name_Valid() const{
    return m_name_isValid;
}

QString OAILicenseTemplate::getNumber() const {
    return m_number;
}
void OAILicenseTemplate::setNumber(const QString &number) {
    m_number = number;
    m_number_isSet = true;
}

bool OAILicenseTemplate::is_number_Set() const{
    return m_number_isSet;
}

bool OAILicenseTemplate::is_number_Valid() const{
    return m_number_isValid;
}

double OAILicenseTemplate::getPrice() const {
    return m_price;
}
void OAILicenseTemplate::setPrice(const double &price) {
    m_price = price;
    m_price_isSet = true;
}

bool OAILicenseTemplate::is_price_Set() const{
    return m_price_isSet;
}

bool OAILicenseTemplate::is_price_Valid() const{
    return m_price_isValid;
}

bool OAILicenseTemplate::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_active_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_automatic_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_currency_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_hidden_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_hidden_licenses_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_license_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_number_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_price_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAILicenseTemplate::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
