/**
 * Labs64 NetLicensing RESTful API Test Center
 * The Labs64 <a href='https://netlicensing.io/wiki/restful-api' target='_blank'>NetLicensing RESTful API</a> gives you access to NetLicensingâ€™s core features.<br/><br/><strong>Authentication</strong><br/>You authenticate to the NetLicensing API by providing your account credentials or simply use our demo account - <code>demo:demo</code><br/><br/>Find out more about Labs64 NetLicensing at <a href='https://netlicensing.io' target='_blank'>netlicensing.io</a>
 *
 * The version of the OpenAPI document: 2.x
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAITransaction.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAITransaction::OAITransaction(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAITransaction::OAITransaction() {
    this->initializeModel();
}

OAITransaction::~OAITransaction() {}

void OAITransaction::initializeModel() {

    m_active_isSet = false;
    m_active_isValid = false;

    m_number_isSet = false;
    m_number_isValid = false;

    m_source_isSet = false;
    m_source_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;
}

void OAITransaction::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAITransaction::fromJsonObject(QJsonObject json) {

    m_active_isValid = ::OpenAPI::fromJsonValue(m_active, json[QString("active")]);
    m_active_isSet = !json[QString("active")].isNull() && m_active_isValid;

    m_number_isValid = ::OpenAPI::fromJsonValue(m_number, json[QString("number")]);
    m_number_isSet = !json[QString("number")].isNull() && m_number_isValid;

    m_source_isValid = ::OpenAPI::fromJsonValue(m_source, json[QString("source")]);
    m_source_isSet = !json[QString("source")].isNull() && m_source_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("status")]);
    m_status_isSet = !json[QString("status")].isNull() && m_status_isValid;
}

QString OAITransaction::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAITransaction::asJsonObject() const {
    QJsonObject obj;
    if (m_active_isSet) {
        obj.insert(QString("active"), ::OpenAPI::toJsonValue(m_active));
    }
    if (m_number_isSet) {
        obj.insert(QString("number"), ::OpenAPI::toJsonValue(m_number));
    }
    if (m_source_isSet) {
        obj.insert(QString("source"), ::OpenAPI::toJsonValue(m_source));
    }
    if (m_status_isSet) {
        obj.insert(QString("status"), ::OpenAPI::toJsonValue(m_status));
    }
    return obj;
}

QString OAITransaction::getActive() const {
    return m_active;
}
void OAITransaction::setActive(const QString &active) {
    m_active = active;
    m_active_isSet = true;
}

bool OAITransaction::is_active_Set() const{
    return m_active_isSet;
}

bool OAITransaction::is_active_Valid() const{
    return m_active_isValid;
}

QString OAITransaction::getNumber() const {
    return m_number;
}
void OAITransaction::setNumber(const QString &number) {
    m_number = number;
    m_number_isSet = true;
}

bool OAITransaction::is_number_Set() const{
    return m_number_isSet;
}

bool OAITransaction::is_number_Valid() const{
    return m_number_isValid;
}

QString OAITransaction::getSource() const {
    return m_source;
}
void OAITransaction::setSource(const QString &source) {
    m_source = source;
    m_source_isSet = true;
}

bool OAITransaction::is_source_Set() const{
    return m_source_isSet;
}

bool OAITransaction::is_source_Valid() const{
    return m_source_isValid;
}

QString OAITransaction::getStatus() const {
    return m_status;
}
void OAITransaction::setStatus(const QString &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAITransaction::is_status_Set() const{
    return m_status_isSet;
}

bool OAITransaction::is_status_Valid() const{
    return m_status_isValid;
}

bool OAITransaction::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_active_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_number_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_source_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAITransaction::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
