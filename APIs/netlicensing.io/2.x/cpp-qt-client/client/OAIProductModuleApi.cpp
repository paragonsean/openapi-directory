/**
 * Labs64 NetLicensing RESTful API Test Center
 * The Labs64 <a href='https://netlicensing.io/wiki/restful-api' target='_blank'>NetLicensing RESTful API</a> gives you access to NetLicensingâ€™s core features.<br/><br/><strong>Authentication</strong><br/>You authenticate to the NetLicensing API by providing your account credentials or simply use our demo account - <code>demo:demo</code><br/><br/>Find out more about Labs64 NetLicensing at <a href='https://netlicensing.io' target='_blank'>netlicensing.io</a>
 *
 * The version of the OpenAPI document: 2.x
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIProductModuleApi.h"
#include "OAIServerConfiguration.h"
#include <QJsonArray>
#include <QJsonDocument>

namespace OpenAPI {

OAIProductModuleApi::OAIProductModuleApi(const int timeOut)
    : _timeOut(timeOut),
      _manager(nullptr),
      _isResponseCompressionEnabled(false),
      _isRequestCompressionEnabled(false) {
    initializeServerConfigs();
}

OAIProductModuleApi::~OAIProductModuleApi() {
}

void OAIProductModuleApi::initializeServerConfigs() {
    //Default server
    QList<OAIServerConfiguration> defaultConf = QList<OAIServerConfiguration>();
    //varying endpoint server
    defaultConf.append(OAIServerConfiguration(
    QUrl("https://go.netlicensing.io/core/v2/rest"),
    "No description provided",
    QMap<QString, OAIServerVariable>()));
    _serverConfigs.insert("createProductModule", defaultConf);
    _serverIndices.insert("createProductModule", 0);
    _serverConfigs.insert("deleteProductModule", defaultConf);
    _serverIndices.insert("deleteProductModule", 0);
    _serverConfigs.insert("getProductModule", defaultConf);
    _serverIndices.insert("getProductModule", 0);
    _serverConfigs.insert("listProductModules", defaultConf);
    _serverIndices.insert("listProductModules", 0);
    _serverConfigs.insert("updateProductModule", defaultConf);
    _serverIndices.insert("updateProductModule", 0);
}

/**
* returns 0 on success and -1, -2 or -3 on failure.
* -1 when the variable does not exist and -2 if the value is not defined in the enum and -3 if the operation or server index is not found
*/
int OAIProductModuleApi::setDefaultServerValue(int serverIndex, const QString &operation, const QString &variable, const QString &value) {
    auto it = _serverConfigs.find(operation);
    if (it != _serverConfigs.end() && serverIndex < it.value().size()) {
      return _serverConfigs[operation][serverIndex].setDefaultValue(variable,value);
    }
    return -3;
}
void OAIProductModuleApi::setServerIndex(const QString &operation, int serverIndex) {
    if (_serverIndices.contains(operation) && serverIndex < _serverConfigs.find(operation).value().size()) {
        _serverIndices[operation] = serverIndex;
    }
}

void OAIProductModuleApi::setApiKey(const QString &apiKeyName, const QString &apiKey) {
    _apiKeys.insert(apiKeyName, apiKey);
}

void OAIProductModuleApi::setBearerToken(const QString &token) {
    _bearerToken = token;
}

void OAIProductModuleApi::setUsername(const QString &username) {
    _username = username;
}

void OAIProductModuleApi::setPassword(const QString &password) {
    _password = password;
}


void OAIProductModuleApi::setTimeOut(const int timeOut) {
    _timeOut = timeOut;
}

void OAIProductModuleApi::setWorkingDirectory(const QString &path) {
    _workingDirectory = path;
}

void OAIProductModuleApi::setNetworkAccessManager(QNetworkAccessManager* manager) {
    _manager = manager;
}

/**
    * Appends a new ServerConfiguration to the config map for a specific operation.
    * @param operation The id to the target operation.
    * @param url A string that contains the URL of the server
    * @param description A String that describes the server
    * @param variables A map between a variable name and its value. The value is used for substitution in the server's URL template.
    * returns the index of the new server config on success and -1 if the operation is not found
    */
int OAIProductModuleApi::addServerConfiguration(const QString &operation, const QUrl &url, const QString &description, const QMap<QString, OAIServerVariable> &variables) {
    if (_serverConfigs.contains(operation)) {
        _serverConfigs[operation].append(OAIServerConfiguration(
                    url,
                    description,
                    variables));
        return _serverConfigs[operation].size()-1;
    } else {
        return -1;
    }
}

/**
    * Appends a new ServerConfiguration to the config map for a all operations and sets the index to that server.
    * @param url A string that contains the URL of the server
    * @param description A String that describes the server
    * @param variables A map between a variable name and its value. The value is used for substitution in the server's URL template.
    */
void OAIProductModuleApi::setNewServerForAllOperations(const QUrl &url, const QString &description, const QMap<QString, OAIServerVariable> &variables) {
    for (auto keyIt = _serverIndices.keyBegin(); keyIt != _serverIndices.keyEnd(); keyIt++) {
        setServerIndex(*keyIt, addServerConfiguration(*keyIt, url, description, variables));
    }
}

/**
    * Appends a new ServerConfiguration to the config map for an operations and sets the index to that server.
    * @param URL A string that contains the URL of the server
    * @param description A String that describes the server
    * @param variables A map between a variable name and its value. The value is used for substitution in the server's URL template.
    */
void OAIProductModuleApi::setNewServer(const QString &operation, const QUrl &url, const QString &description, const QMap<QString, OAIServerVariable> &variables) {
    setServerIndex(operation, addServerConfiguration(operation, url, description, variables));
}

void OAIProductModuleApi::addHeaders(const QString &key, const QString &value) {
    _defaultHeaders.insert(key, value);
}

void OAIProductModuleApi::enableRequestCompression() {
    _isRequestCompressionEnabled = true;
}

void OAIProductModuleApi::enableResponseCompression() {
    _isResponseCompressionEnabled = true;
}

void OAIProductModuleApi::abortRequests() {
    Q_EMIT abortRequestsSignal();
}

QString OAIProductModuleApi::getParamStylePrefix(const QString &style) {
    if (style == "matrix") {
        return ";";
    } else if (style == "label") {
        return ".";
    } else if (style == "form") {
        return "&";
    } else if (style == "simple") {
        return "";
    } else if (style == "spaceDelimited") {
        return "&";
    } else if (style == "pipeDelimited") {
        return "&";
    } else {
        return "none";
    }
}

QString OAIProductModuleApi::getParamStyleSuffix(const QString &style) {
    if (style == "matrix") {
        return "=";
    } else if (style == "label") {
        return "";
    } else if (style == "form") {
        return "=";
    } else if (style == "simple") {
        return "";
    } else if (style == "spaceDelimited") {
        return "=";
    } else if (style == "pipeDelimited") {
        return "=";
    } else {
        return "none";
    }
}

QString OAIProductModuleApi::getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode) {

    if (style == "matrix") {
        return (isExplode) ? ";" + name + "=" : ",";

    } else if (style == "label") {
        return (isExplode) ? "." : ",";

    } else if (style == "form") {
        return (isExplode) ? "&" + name + "=" : ",";

    } else if (style == "simple") {
        return ",";
    } else if (style == "spaceDelimited") {
        return (isExplode) ? "&" + name + "=" : " ";

    } else if (style == "pipeDelimited") {
        return (isExplode) ? "&" + name + "=" : "|";

    } else if (style == "deepObject") {
        return (isExplode) ? "&" : "none";

    } else {
        return "none";
    }
}

void OAIProductModuleApi::createProductModule(const bool &active, const QString &licensing_model, const QString &name, const QString &product_number, const ::OpenAPI::OptionalParam<QList<QString>> &license_template, const ::OpenAPI::OptionalParam<qint32> &max_checkout_validity, const ::OpenAPI::OptionalParam<QList<QString>> &node_secret_mode, const ::OpenAPI::OptionalParam<QString> &number, const ::OpenAPI::OptionalParam<qint32> &red_threshold, const ::OpenAPI::OptionalParam<qint32> &yellow_threshold) {
    QString fullPath = QString(_serverConfigs["createProductModule"][_serverIndices.value("createProductModule")].URL()+"/productmodule");
    
    if (!_username.isEmpty() && !_password.isEmpty()) {
        QByteArray b64;
        b64.append(_username.toUtf8() + ":" + _password.toUtf8());
        addHeaders("Authorization","Basic " + b64.toBase64());
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "POST");

    
    {
        input.add_var("active", ::OpenAPI::toStringValue(active));
    }
    if (license_template.hasValue())
    {
        input.add_var("licenseTemplate", ::OpenAPI::toStringValue(license_template.value()));
    }
    
    {
        input.add_var("licensingModel", ::OpenAPI::toStringValue(licensing_model));
    }
    if (max_checkout_validity.hasValue())
    {
        input.add_var("maxCheckoutValidity", ::OpenAPI::toStringValue(max_checkout_validity.value()));
    }
    
    {
        input.add_var("name", ::OpenAPI::toStringValue(name));
    }
    if (node_secret_mode.hasValue())
    {
        input.add_var("nodeSecretMode", ::OpenAPI::toStringValue(node_secret_mode.value()));
    }
    if (number.hasValue())
    {
        input.add_var("number", ::OpenAPI::toStringValue(number.value()));
    }
    
    {
        input.add_var("productNumber", ::OpenAPI::toStringValue(product_number));
    }
    if (red_threshold.hasValue())
    {
        input.add_var("redThreshold", ::OpenAPI::toStringValue(red_threshold.value()));
    }
    if (yellow_threshold.hasValue())
    {
        input.add_var("yellowThreshold", ::OpenAPI::toStringValue(yellow_threshold.value()));
    }

    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIProductModuleApi::createProductModuleCallback);
    connect(this, &OAIProductModuleApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIProductModuleApi::createProductModuleCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAINetlicensing output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT createProductModuleSignal(output);
        Q_EMIT createProductModuleSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT createProductModuleSignalE(output, error_type, error_str);
        Q_EMIT createProductModuleSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT createProductModuleSignalError(output, error_type, error_str);
        Q_EMIT createProductModuleSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIProductModuleApi::deleteProductModule(const QString &product_module_number, const ::OpenAPI::OptionalParam<bool> &force_cascade) {
    QString fullPath = QString(_serverConfigs["deleteProductModule"][_serverIndices.value("deleteProductModule")].URL()+"/productmodule/{productModuleNumber}");
    
    if (!_username.isEmpty() && !_password.isEmpty()) {
        QByteArray b64;
        b64.append(_username.toUtf8() + ":" + _password.toUtf8());
        addHeaders("Authorization","Basic " + b64.toBase64());
    }
    
    {
        QString product_module_numberPathParam("{");
        product_module_numberPathParam.append("productModuleNumber").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "productModuleNumber", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"productModuleNumber"+pathSuffix : pathPrefix;
        fullPath.replace(product_module_numberPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(product_module_number)));
    }
    QString queryPrefix, querySuffix, queryDelimiter, queryStyle;
    if (force_cascade.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "forceCascade", true);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("forceCascade")).append(querySuffix).append(QUrl::toPercentEncoding(force_cascade.stringValue()));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "DELETE");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIProductModuleApi::deleteProductModuleCallback);
    connect(this, &OAIProductModuleApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIProductModuleApi::deleteProductModuleCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAINetlicensing output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT deleteProductModuleSignal(output);
        Q_EMIT deleteProductModuleSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT deleteProductModuleSignalE(output, error_type, error_str);
        Q_EMIT deleteProductModuleSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT deleteProductModuleSignalError(output, error_type, error_str);
        Q_EMIT deleteProductModuleSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIProductModuleApi::getProductModule(const QString &product_module_number) {
    QString fullPath = QString(_serverConfigs["getProductModule"][_serverIndices.value("getProductModule")].URL()+"/productmodule/{productModuleNumber}");
    
    if (!_username.isEmpty() && !_password.isEmpty()) {
        QByteArray b64;
        b64.append(_username.toUtf8() + ":" + _password.toUtf8());
        addHeaders("Authorization","Basic " + b64.toBase64());
    }
    
    {
        QString product_module_numberPathParam("{");
        product_module_numberPathParam.append("productModuleNumber").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "productModuleNumber", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"productModuleNumber"+pathSuffix : pathPrefix;
        fullPath.replace(product_module_numberPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(product_module_number)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIProductModuleApi::getProductModuleCallback);
    connect(this, &OAIProductModuleApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIProductModuleApi::getProductModuleCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAINetlicensing output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT getProductModuleSignal(output);
        Q_EMIT getProductModuleSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT getProductModuleSignalE(output, error_type, error_str);
        Q_EMIT getProductModuleSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT getProductModuleSignalError(output, error_type, error_str);
        Q_EMIT getProductModuleSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIProductModuleApi::listProductModules() {
    QString fullPath = QString(_serverConfigs["listProductModules"][_serverIndices.value("listProductModules")].URL()+"/productmodule");
    
    if (!_username.isEmpty() && !_password.isEmpty()) {
        QByteArray b64;
        b64.append(_username.toUtf8() + ":" + _password.toUtf8());
        addHeaders("Authorization","Basic " + b64.toBase64());
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIProductModuleApi::listProductModulesCallback);
    connect(this, &OAIProductModuleApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIProductModuleApi::listProductModulesCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    QList<OAINetlicensing> output;
    QString json(worker->response);
    QByteArray array(json.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonArray jsonArray = doc.array();
    for (QJsonValue obj : jsonArray) {
        OAINetlicensing val;
        ::OpenAPI::fromJsonValue(val, obj);
        output.append(val);
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT listProductModulesSignal(output);
        Q_EMIT listProductModulesSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT listProductModulesSignalE(output, error_type, error_str);
        Q_EMIT listProductModulesSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT listProductModulesSignalError(output, error_type, error_str);
        Q_EMIT listProductModulesSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIProductModuleApi::updateProductModule(const QString &product_module_number, const ::OpenAPI::OptionalParam<bool> &active, const ::OpenAPI::OptionalParam<QList<QString>> &license_template, const ::OpenAPI::OptionalParam<QString> &licensing_model, const ::OpenAPI::OptionalParam<qint32> &max_checkout_validity, const ::OpenAPI::OptionalParam<QString> &name, const ::OpenAPI::OptionalParam<QList<QString>> &node_secret_mode, const ::OpenAPI::OptionalParam<QString> &number, const ::OpenAPI::OptionalParam<qint32> &red_threshold, const ::OpenAPI::OptionalParam<qint32> &yellow_threshold) {
    QString fullPath = QString(_serverConfigs["updateProductModule"][_serverIndices.value("updateProductModule")].URL()+"/productmodule/{productModuleNumber}");
    
    if (!_username.isEmpty() && !_password.isEmpty()) {
        QByteArray b64;
        b64.append(_username.toUtf8() + ":" + _password.toUtf8());
        addHeaders("Authorization","Basic " + b64.toBase64());
    }
    
    {
        QString product_module_numberPathParam("{");
        product_module_numberPathParam.append("productModuleNumber").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "productModuleNumber", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"productModuleNumber"+pathSuffix : pathPrefix;
        fullPath.replace(product_module_numberPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(product_module_number)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "POST");

    if (active.hasValue())
    {
        input.add_var("active", ::OpenAPI::toStringValue(active.value()));
    }
    if (license_template.hasValue())
    {
        input.add_var("licenseTemplate", ::OpenAPI::toStringValue(license_template.value()));
    }
    if (licensing_model.hasValue())
    {
        input.add_var("licensingModel", ::OpenAPI::toStringValue(licensing_model.value()));
    }
    if (max_checkout_validity.hasValue())
    {
        input.add_var("maxCheckoutValidity", ::OpenAPI::toStringValue(max_checkout_validity.value()));
    }
    if (name.hasValue())
    {
        input.add_var("name", ::OpenAPI::toStringValue(name.value()));
    }
    if (node_secret_mode.hasValue())
    {
        input.add_var("nodeSecretMode", ::OpenAPI::toStringValue(node_secret_mode.value()));
    }
    if (number.hasValue())
    {
        input.add_var("number", ::OpenAPI::toStringValue(number.value()));
    }
    if (red_threshold.hasValue())
    {
        input.add_var("redThreshold", ::OpenAPI::toStringValue(red_threshold.value()));
    }
    if (yellow_threshold.hasValue())
    {
        input.add_var("yellowThreshold", ::OpenAPI::toStringValue(yellow_threshold.value()));
    }

    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIProductModuleApi::updateProductModuleCallback);
    connect(this, &OAIProductModuleApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIProductModuleApi::updateProductModuleCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAINetlicensing output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT updateProductModuleSignal(output);
        Q_EMIT updateProductModuleSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT updateProductModuleSignalE(output, error_type, error_str);
        Q_EMIT updateProductModuleSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT updateProductModuleSignalError(output, error_type, error_str);
        Q_EMIT updateProductModuleSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIProductModuleApi::tokenAvailable(){

    oauthToken token;
    switch (_OauthMethod) {
    case 1: //implicit flow
        token = _implicitFlow.getToken(_latestScope.join(" "));
        if(token.isValid()){
            _latestInput.headers.insert("Authorization", "Bearer " + token.getToken());
            _latestWorker->execute(&_latestInput);
        }else{
            _implicitFlow.removeToken(_latestScope.join(" "));
            qDebug() << "Could not retrieve a valid token";
        }
        break;
    case 2: //authorization flow
        token = _authFlow.getToken(_latestScope.join(" "));
        if(token.isValid()){
            _latestInput.headers.insert("Authorization", "Bearer " + token.getToken());
            _latestWorker->execute(&_latestInput);
        }else{
            _authFlow.removeToken(_latestScope.join(" "));
            qDebug() << "Could not retrieve a valid token";
        }
        break;
    case 3: //client credentials flow
        token = _credentialFlow.getToken(_latestScope.join(" "));
        if(token.isValid()){
            _latestInput.headers.insert("Authorization", "Bearer " + token.getToken());
            _latestWorker->execute(&_latestInput);
        }else{
            _credentialFlow.removeToken(_latestScope.join(" "));
            qDebug() << "Could not retrieve a valid token";
        }
        break;
    case 4: //resource owner password flow
        token = _passwordFlow.getToken(_latestScope.join(" "));
        if(token.isValid()){
            _latestInput.headers.insert("Authorization", "Bearer " + token.getToken());
            _latestWorker->execute(&_latestInput);
        }else{
            _credentialFlow.removeToken(_latestScope.join(" "));
            qDebug() << "Could not retrieve a valid token";
        }
        break;
    default:
        qDebug() << "No Oauth method set!";
        break;
    }
}
} // namespace OpenAPI
