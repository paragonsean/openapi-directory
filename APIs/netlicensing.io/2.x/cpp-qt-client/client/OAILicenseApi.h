/**
 * Labs64 NetLicensing RESTful API Test Center
 * The Labs64 <a href='https://netlicensing.io/wiki/restful-api' target='_blank'>NetLicensing RESTful API</a> gives you access to NetLicensingâ€™s core features.<br/><br/><strong>Authentication</strong><br/>You authenticate to the NetLicensing API by providing your account credentials or simply use our demo account - <code>demo:demo</code><br/><br/>Find out more about Labs64 NetLicensing at <a href='https://netlicensing.io' target='_blank'>netlicensing.io</a>
 *
 * The version of the OpenAPI document: 2.x
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAILicenseApi_H
#define OAI_OAILicenseApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAINetlicensing.h"
#include <QString>
#include <QDateTime>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAILicenseApi : public QObject {
    Q_OBJECT

public:
    OAILicenseApi(const int timeOut = 0);
    ~OAILicenseApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  active bool [required]
    * @param[in]  license_template_number QString [required]
    * @param[in]  licensee_number QString [required]
    * @param[in]  currency QString [optional]
    * @param[in]  hidden bool [optional]
    * @param[in]  name QString [optional]
    * @param[in]  number QString [optional]
    * @param[in]  parentfeature QString [optional]
    * @param[in]  price double [optional]
    * @param[in]  quantity QString [optional]
    * @param[in]  start_date QDateTime [optional]
    * @param[in]  time_volume QString [optional]
    * @param[in]  time_volume_period QString [optional]
    * @param[in]  used_quantity QString [optional]
    */
    virtual void createLicense(const bool &active, const QString &license_template_number, const QString &licensee_number, const ::OpenAPI::OptionalParam<QString> &currency = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &hidden = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &name = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &number = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &parentfeature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<double> &price = ::OpenAPI::OptionalParam<double>(), const ::OpenAPI::OptionalParam<QString> &quantity = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QDateTime> &start_date = ::OpenAPI::OptionalParam<QDateTime>(), const ::OpenAPI::OptionalParam<QString> &time_volume = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &time_volume_period = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &used_quantity = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  license_number QString [required]
    */
    virtual void deleteLicense(const QString &license_number);

    /**
    * @param[in]  license_number QString [required]
    */
    virtual void getLicense(const QString &license_number);


    virtual void listLicenses();

    /**
    * @param[in]  license_number QString [required]
    * @param[in]  active bool [optional]
    * @param[in]  currency QString [optional]
    * @param[in]  hidden bool [optional]
    * @param[in]  name QString [optional]
    * @param[in]  number QString [optional]
    * @param[in]  parentfeature QString [optional]
    * @param[in]  price double [optional]
    * @param[in]  quantity QString [optional]
    * @param[in]  start_date QDateTime [optional]
    * @param[in]  time_volume QString [optional]
    * @param[in]  time_volume_period QString [optional]
    * @param[in]  used_quantity QString [optional]
    */
    virtual void updateLicense(const QString &license_number, const ::OpenAPI::OptionalParam<bool> &active = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &currency = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &hidden = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &name = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &number = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &parentfeature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<double> &price = ::OpenAPI::OptionalParam<double>(), const ::OpenAPI::OptionalParam<QString> &quantity = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QDateTime> &start_date = ::OpenAPI::OptionalParam<QDateTime>(), const ::OpenAPI::OptionalParam<QString> &time_volume = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &time_volume_period = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &used_quantity = ::OpenAPI::OptionalParam<QString>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void createLicenseCallback(OAIHttpRequestWorker *worker);
    void deleteLicenseCallback(OAIHttpRequestWorker *worker);
    void getLicenseCallback(OAIHttpRequestWorker *worker);
    void listLicensesCallback(OAIHttpRequestWorker *worker);
    void updateLicenseCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void createLicenseSignal(OAINetlicensing summary);
    void deleteLicenseSignal(OAINetlicensing summary);
    void getLicenseSignal(OAINetlicensing summary);
    void listLicensesSignal(QList<OAINetlicensing> summary);
    void updateLicenseSignal(OAINetlicensing summary);


    void createLicenseSignalFull(OAIHttpRequestWorker *worker, OAINetlicensing summary);
    void deleteLicenseSignalFull(OAIHttpRequestWorker *worker, OAINetlicensing summary);
    void getLicenseSignalFull(OAIHttpRequestWorker *worker, OAINetlicensing summary);
    void listLicensesSignalFull(OAIHttpRequestWorker *worker, QList<OAINetlicensing> summary);
    void updateLicenseSignalFull(OAIHttpRequestWorker *worker, OAINetlicensing summary);

    Q_DECL_DEPRECATED_X("Use createLicenseSignalError() instead")
    void createLicenseSignalE(OAINetlicensing summary, QNetworkReply::NetworkError error_type, QString error_str);
    void createLicenseSignalError(OAINetlicensing summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteLicenseSignalError() instead")
    void deleteLicenseSignalE(OAINetlicensing summary, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteLicenseSignalError(OAINetlicensing summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getLicenseSignalError() instead")
    void getLicenseSignalE(OAINetlicensing summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getLicenseSignalError(OAINetlicensing summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listLicensesSignalError() instead")
    void listLicensesSignalE(QList<OAINetlicensing> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void listLicensesSignalError(QList<OAINetlicensing> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateLicenseSignalError() instead")
    void updateLicenseSignalE(OAINetlicensing summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateLicenseSignalError(OAINetlicensing summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use createLicenseSignalErrorFull() instead")
    void createLicenseSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void createLicenseSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteLicenseSignalErrorFull() instead")
    void deleteLicenseSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteLicenseSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getLicenseSignalErrorFull() instead")
    void getLicenseSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getLicenseSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listLicensesSignalErrorFull() instead")
    void listLicensesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void listLicensesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateLicenseSignalErrorFull() instead")
    void updateLicenseSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateLicenseSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
