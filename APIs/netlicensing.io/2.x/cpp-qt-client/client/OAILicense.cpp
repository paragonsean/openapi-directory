/**
 * Labs64 NetLicensing RESTful API Test Center
 * The Labs64 <a href='https://netlicensing.io/wiki/restful-api' target='_blank'>NetLicensing RESTful API</a> gives you access to NetLicensingâ€™s core features.<br/><br/><strong>Authentication</strong><br/>You authenticate to the NetLicensing API by providing your account credentials or simply use our demo account - <code>demo:demo</code><br/><br/>Find out more about Labs64 NetLicensing at <a href='https://netlicensing.io' target='_blank'>netlicensing.io</a>
 *
 * The version of the OpenAPI document: 2.x
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAILicense.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAILicense::OAILicense(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAILicense::OAILicense() {
    this->initializeModel();
}

OAILicense::~OAILicense() {}

void OAILicense::initializeModel() {

    m_active_isSet = false;
    m_active_isValid = false;

    m_currency_isSet = false;
    m_currency_isValid = false;

    m_hidden_isSet = false;
    m_hidden_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_number_isSet = false;
    m_number_isValid = false;

    m_price_isSet = false;
    m_price_isValid = false;
}

void OAILicense::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAILicense::fromJsonObject(QJsonObject json) {

    m_active_isValid = ::OpenAPI::fromJsonValue(m_active, json[QString("active")]);
    m_active_isSet = !json[QString("active")].isNull() && m_active_isValid;

    m_currency_isValid = ::OpenAPI::fromJsonValue(m_currency, json[QString("currency")]);
    m_currency_isSet = !json[QString("currency")].isNull() && m_currency_isValid;

    m_hidden_isValid = ::OpenAPI::fromJsonValue(m_hidden, json[QString("hidden")]);
    m_hidden_isSet = !json[QString("hidden")].isNull() && m_hidden_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_number_isValid = ::OpenAPI::fromJsonValue(m_number, json[QString("number")]);
    m_number_isSet = !json[QString("number")].isNull() && m_number_isValid;

    m_price_isValid = ::OpenAPI::fromJsonValue(m_price, json[QString("price")]);
    m_price_isSet = !json[QString("price")].isNull() && m_price_isValid;
}

QString OAILicense::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAILicense::asJsonObject() const {
    QJsonObject obj;
    if (m_active_isSet) {
        obj.insert(QString("active"), ::OpenAPI::toJsonValue(m_active));
    }
    if (m_currency_isSet) {
        obj.insert(QString("currency"), ::OpenAPI::toJsonValue(m_currency));
    }
    if (m_hidden_isSet) {
        obj.insert(QString("hidden"), ::OpenAPI::toJsonValue(m_hidden));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_number_isSet) {
        obj.insert(QString("number"), ::OpenAPI::toJsonValue(m_number));
    }
    if (m_price_isSet) {
        obj.insert(QString("price"), ::OpenAPI::toJsonValue(m_price));
    }
    return obj;
}

bool OAILicense::isActive() const {
    return m_active;
}
void OAILicense::setActive(const bool &active) {
    m_active = active;
    m_active_isSet = true;
}

bool OAILicense::is_active_Set() const{
    return m_active_isSet;
}

bool OAILicense::is_active_Valid() const{
    return m_active_isValid;
}

QString OAILicense::getCurrency() const {
    return m_currency;
}
void OAILicense::setCurrency(const QString &currency) {
    m_currency = currency;
    m_currency_isSet = true;
}

bool OAILicense::is_currency_Set() const{
    return m_currency_isSet;
}

bool OAILicense::is_currency_Valid() const{
    return m_currency_isValid;
}

bool OAILicense::isHidden() const {
    return m_hidden;
}
void OAILicense::setHidden(const bool &hidden) {
    m_hidden = hidden;
    m_hidden_isSet = true;
}

bool OAILicense::is_hidden_Set() const{
    return m_hidden_isSet;
}

bool OAILicense::is_hidden_Valid() const{
    return m_hidden_isValid;
}

QString OAILicense::getName() const {
    return m_name;
}
void OAILicense::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAILicense::is_name_Set() const{
    return m_name_isSet;
}

bool OAILicense::is_name_Valid() const{
    return m_name_isValid;
}

QString OAILicense::getNumber() const {
    return m_number;
}
void OAILicense::setNumber(const QString &number) {
    m_number = number;
    m_number_isSet = true;
}

bool OAILicense::is_number_Set() const{
    return m_number_isSet;
}

bool OAILicense::is_number_Valid() const{
    return m_number_isValid;
}

double OAILicense::getPrice() const {
    return m_price;
}
void OAILicense::setPrice(const double &price) {
    m_price = price;
    m_price_isSet = true;
}

bool OAILicense::is_price_Set() const{
    return m_price_isSet;
}

bool OAILicense::is_price_Valid() const{
    return m_price_isValid;
}

bool OAILicense::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_active_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_currency_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_hidden_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_number_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_price_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAILicense::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
