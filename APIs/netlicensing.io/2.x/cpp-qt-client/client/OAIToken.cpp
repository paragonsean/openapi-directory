/**
 * Labs64 NetLicensing RESTful API Test Center
 * The Labs64 <a href='https://netlicensing.io/wiki/restful-api' target='_blank'>NetLicensing RESTful API</a> gives you access to NetLicensingâ€™s core features.<br/><br/><strong>Authentication</strong><br/>You authenticate to the NetLicensing API by providing your account credentials or simply use our demo account - <code>demo:demo</code><br/><br/>Find out more about Labs64 NetLicensing at <a href='https://netlicensing.io' target='_blank'>netlicensing.io</a>
 *
 * The version of the OpenAPI document: 2.x
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIToken.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIToken::OAIToken(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIToken::OAIToken() {
    this->initializeModel();
}

OAIToken::~OAIToken() {}

void OAIToken::initializeModel() {

    m_active_isSet = false;
    m_active_isValid = false;

    m_expiration_time_isSet = false;
    m_expiration_time_isValid = false;

    m_license_number_isSet = false;
    m_license_number_isValid = false;

    m_number_isSet = false;
    m_number_isValid = false;

    m_shop_url_isSet = false;
    m_shop_url_isValid = false;

    m_token_type_isSet = false;
    m_token_type_isValid = false;

    m_vendor_number_isSet = false;
    m_vendor_number_isValid = false;
}

void OAIToken::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIToken::fromJsonObject(QJsonObject json) {

    m_active_isValid = ::OpenAPI::fromJsonValue(m_active, json[QString("active")]);
    m_active_isSet = !json[QString("active")].isNull() && m_active_isValid;

    m_expiration_time_isValid = ::OpenAPI::fromJsonValue(m_expiration_time, json[QString("expirationTime")]);
    m_expiration_time_isSet = !json[QString("expirationTime")].isNull() && m_expiration_time_isValid;

    m_license_number_isValid = ::OpenAPI::fromJsonValue(m_license_number, json[QString("licenseNumber")]);
    m_license_number_isSet = !json[QString("licenseNumber")].isNull() && m_license_number_isValid;

    m_number_isValid = ::OpenAPI::fromJsonValue(m_number, json[QString("number")]);
    m_number_isSet = !json[QString("number")].isNull() && m_number_isValid;

    m_shop_url_isValid = ::OpenAPI::fromJsonValue(m_shop_url, json[QString("shopURL")]);
    m_shop_url_isSet = !json[QString("shopURL")].isNull() && m_shop_url_isValid;

    m_token_type_isValid = ::OpenAPI::fromJsonValue(m_token_type, json[QString("tokenType")]);
    m_token_type_isSet = !json[QString("tokenType")].isNull() && m_token_type_isValid;

    m_vendor_number_isValid = ::OpenAPI::fromJsonValue(m_vendor_number, json[QString("vendorNumber")]);
    m_vendor_number_isSet = !json[QString("vendorNumber")].isNull() && m_vendor_number_isValid;
}

QString OAIToken::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIToken::asJsonObject() const {
    QJsonObject obj;
    if (m_active_isSet) {
        obj.insert(QString("active"), ::OpenAPI::toJsonValue(m_active));
    }
    if (m_expiration_time_isSet) {
        obj.insert(QString("expirationTime"), ::OpenAPI::toJsonValue(m_expiration_time));
    }
    if (m_license_number_isSet) {
        obj.insert(QString("licenseNumber"), ::OpenAPI::toJsonValue(m_license_number));
    }
    if (m_number_isSet) {
        obj.insert(QString("number"), ::OpenAPI::toJsonValue(m_number));
    }
    if (m_shop_url_isSet) {
        obj.insert(QString("shopURL"), ::OpenAPI::toJsonValue(m_shop_url));
    }
    if (m_token_type_isSet) {
        obj.insert(QString("tokenType"), ::OpenAPI::toJsonValue(m_token_type));
    }
    if (m_vendor_number_isSet) {
        obj.insert(QString("vendorNumber"), ::OpenAPI::toJsonValue(m_vendor_number));
    }
    return obj;
}

bool OAIToken::isActive() const {
    return m_active;
}
void OAIToken::setActive(const bool &active) {
    m_active = active;
    m_active_isSet = true;
}

bool OAIToken::is_active_Set() const{
    return m_active_isSet;
}

bool OAIToken::is_active_Valid() const{
    return m_active_isValid;
}

QDateTime OAIToken::getExpirationTime() const {
    return m_expiration_time;
}
void OAIToken::setExpirationTime(const QDateTime &expiration_time) {
    m_expiration_time = expiration_time;
    m_expiration_time_isSet = true;
}

bool OAIToken::is_expiration_time_Set() const{
    return m_expiration_time_isSet;
}

bool OAIToken::is_expiration_time_Valid() const{
    return m_expiration_time_isValid;
}

QString OAIToken::getLicenseNumber() const {
    return m_license_number;
}
void OAIToken::setLicenseNumber(const QString &license_number) {
    m_license_number = license_number;
    m_license_number_isSet = true;
}

bool OAIToken::is_license_number_Set() const{
    return m_license_number_isSet;
}

bool OAIToken::is_license_number_Valid() const{
    return m_license_number_isValid;
}

QString OAIToken::getNumber() const {
    return m_number;
}
void OAIToken::setNumber(const QString &number) {
    m_number = number;
    m_number_isSet = true;
}

bool OAIToken::is_number_Set() const{
    return m_number_isSet;
}

bool OAIToken::is_number_Valid() const{
    return m_number_isValid;
}

QString OAIToken::getShopUrl() const {
    return m_shop_url;
}
void OAIToken::setShopUrl(const QString &shop_url) {
    m_shop_url = shop_url;
    m_shop_url_isSet = true;
}

bool OAIToken::is_shop_url_Set() const{
    return m_shop_url_isSet;
}

bool OAIToken::is_shop_url_Valid() const{
    return m_shop_url_isValid;
}

QString OAIToken::getTokenType() const {
    return m_token_type;
}
void OAIToken::setTokenType(const QString &token_type) {
    m_token_type = token_type;
    m_token_type_isSet = true;
}

bool OAIToken::is_token_type_Set() const{
    return m_token_type_isSet;
}

bool OAIToken::is_token_type_Valid() const{
    return m_token_type_isValid;
}

QString OAIToken::getVendorNumber() const {
    return m_vendor_number;
}
void OAIToken::setVendorNumber(const QString &vendor_number) {
    m_vendor_number = vendor_number;
    m_vendor_number_isSet = true;
}

bool OAIToken::is_vendor_number_Set() const{
    return m_vendor_number_isSet;
}

bool OAIToken::is_vendor_number_Valid() const{
    return m_vendor_number_isValid;
}

bool OAIToken::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_active_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_expiration_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_license_number_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_number_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_shop_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_token_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_vendor_number_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIToken::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
