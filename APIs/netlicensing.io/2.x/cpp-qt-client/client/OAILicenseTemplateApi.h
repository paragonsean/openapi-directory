/**
 * Labs64 NetLicensing RESTful API Test Center
 * The Labs64 <a href='https://netlicensing.io/wiki/restful-api' target='_blank'>NetLicensing RESTful API</a> gives you access to NetLicensingâ€™s core features.<br/><br/><strong>Authentication</strong><br/>You authenticate to the NetLicensing API by providing your account credentials or simply use our demo account - <code>demo:demo</code><br/><br/>Find out more about Labs64 NetLicensing at <a href='https://netlicensing.io' target='_blank'>netlicensing.io</a>
 *
 * The version of the OpenAPI document: 2.x
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAILicenseTemplateApi_H
#define OAI_OAILicenseTemplateApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAINetlicensing.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAILicenseTemplateApi : public QObject {
    Q_OBJECT

public:
    OAILicenseTemplateApi(const int timeOut = 0);
    ~OAILicenseTemplateApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  active bool [required]
    * @param[in]  license_type QString [required]
    * @param[in]  name QString [required]
    * @param[in]  product_module_number QString [required]
    * @param[in]  automatic bool [optional]
    * @param[in]  currency QString [optional]
    * @param[in]  hidden bool [optional]
    * @param[in]  hide_licenses bool [optional]
    * @param[in]  max_sessions QString [optional]
    * @param[in]  number QString [optional]
    * @param[in]  price double [optional]
    * @param[in]  quantity QString [optional]
    * @param[in]  quota QString [optional]
    * @param[in]  time_volume QString [optional]
    * @param[in]  time_volume_period QString [optional]
    */
    virtual void createLicenseTemplate(const bool &active, const QString &license_type, const QString &name, const QString &product_module_number, const ::OpenAPI::OptionalParam<bool> &automatic = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &currency = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &hidden = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &hide_licenses = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &max_sessions = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &number = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<double> &price = ::OpenAPI::OptionalParam<double>(), const ::OpenAPI::OptionalParam<QString> &quantity = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &quota = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &time_volume = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &time_volume_period = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  license_template_number QString [required]
    * @param[in]  force_cascade bool [optional]
    */
    virtual void deleteLicenseTemplate(const QString &license_template_number, const ::OpenAPI::OptionalParam<bool> &force_cascade = ::OpenAPI::OptionalParam<bool>());

    /**
    * @param[in]  license_template_number QString [required]
    */
    virtual void getLicenseTemplate(const QString &license_template_number);


    virtual void listLicenseTemplates();

    /**
    * @param[in]  license_template_number QString [required]
    * @param[in]  active bool [optional]
    * @param[in]  automatic bool [optional]
    * @param[in]  currency QString [optional]
    * @param[in]  hidden bool [optional]
    * @param[in]  hide_licenses bool [optional]
    * @param[in]  license_type QString [optional]
    * @param[in]  max_sessions QString [optional]
    * @param[in]  name QString [optional]
    * @param[in]  number QString [optional]
    * @param[in]  price double [optional]
    * @param[in]  quantity QString [optional]
    * @param[in]  quota QString [optional]
    * @param[in]  time_volume QString [optional]
    * @param[in]  time_volume_period QString [optional]
    */
    virtual void updateLicenseTemplate(const QString &license_template_number, const ::OpenAPI::OptionalParam<bool> &active = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &automatic = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &currency = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &hidden = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &hide_licenses = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &license_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &max_sessions = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &name = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &number = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<double> &price = ::OpenAPI::OptionalParam<double>(), const ::OpenAPI::OptionalParam<QString> &quantity = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &quota = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &time_volume = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &time_volume_period = ::OpenAPI::OptionalParam<QString>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void createLicenseTemplateCallback(OAIHttpRequestWorker *worker);
    void deleteLicenseTemplateCallback(OAIHttpRequestWorker *worker);
    void getLicenseTemplateCallback(OAIHttpRequestWorker *worker);
    void listLicenseTemplatesCallback(OAIHttpRequestWorker *worker);
    void updateLicenseTemplateCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void createLicenseTemplateSignal(OAINetlicensing summary);
    void deleteLicenseTemplateSignal(OAINetlicensing summary);
    void getLicenseTemplateSignal(OAINetlicensing summary);
    void listLicenseTemplatesSignal(QList<OAINetlicensing> summary);
    void updateLicenseTemplateSignal(OAINetlicensing summary);


    void createLicenseTemplateSignalFull(OAIHttpRequestWorker *worker, OAINetlicensing summary);
    void deleteLicenseTemplateSignalFull(OAIHttpRequestWorker *worker, OAINetlicensing summary);
    void getLicenseTemplateSignalFull(OAIHttpRequestWorker *worker, OAINetlicensing summary);
    void listLicenseTemplatesSignalFull(OAIHttpRequestWorker *worker, QList<OAINetlicensing> summary);
    void updateLicenseTemplateSignalFull(OAIHttpRequestWorker *worker, OAINetlicensing summary);

    Q_DECL_DEPRECATED_X("Use createLicenseTemplateSignalError() instead")
    void createLicenseTemplateSignalE(OAINetlicensing summary, QNetworkReply::NetworkError error_type, QString error_str);
    void createLicenseTemplateSignalError(OAINetlicensing summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteLicenseTemplateSignalError() instead")
    void deleteLicenseTemplateSignalE(OAINetlicensing summary, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteLicenseTemplateSignalError(OAINetlicensing summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getLicenseTemplateSignalError() instead")
    void getLicenseTemplateSignalE(OAINetlicensing summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getLicenseTemplateSignalError(OAINetlicensing summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listLicenseTemplatesSignalError() instead")
    void listLicenseTemplatesSignalE(QList<OAINetlicensing> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void listLicenseTemplatesSignalError(QList<OAINetlicensing> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateLicenseTemplateSignalError() instead")
    void updateLicenseTemplateSignalE(OAINetlicensing summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateLicenseTemplateSignalError(OAINetlicensing summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use createLicenseTemplateSignalErrorFull() instead")
    void createLicenseTemplateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void createLicenseTemplateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteLicenseTemplateSignalErrorFull() instead")
    void deleteLicenseTemplateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteLicenseTemplateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getLicenseTemplateSignalErrorFull() instead")
    void getLicenseTemplateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getLicenseTemplateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listLicenseTemplatesSignalErrorFull() instead")
    void listLicenseTemplatesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void listLicenseTemplatesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateLicenseTemplateSignalErrorFull() instead")
    void updateLicenseTemplateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateLicenseTemplateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
