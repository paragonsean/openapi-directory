/**
 * Labs64 NetLicensing RESTful API Test Center
 * The Labs64 <a href='https://netlicensing.io/wiki/restful-api' target='_blank'>NetLicensing RESTful API</a> gives you access to NetLicensingâ€™s core features.<br/><br/><strong>Authentication</strong><br/>You authenticate to the NetLicensing API by providing your account credentials or simply use our demo account - <code>demo:demo</code><br/><br/>Find out more about Labs64 NetLicensing at <a href='https://netlicensing.io' target='_blank'>netlicensing.io</a>
 *
 * The version of the OpenAPI document: 2.x
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import Netlicensing from '../model/Netlicensing';

/**
* Product service.
* @module api/ProductApi
* @version 2.x
*/
export default class ProductApi {

    /**
    * Constructs a new ProductApi. 
    * @alias module:api/ProductApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the createProduct operation.
     * @callback module:api/ProductApi~createProductCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Netlicensing} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create Product
     * Creates a new Product
     * @param {Boolean} active If set to 'false', the Product is disabled. No new Licensees can be registered for the Product, existing Licensees can not obtain new Licenses.
     * @param {String} name Product name. Together with the version identifies the Product for the end customer.
     * @param {String} version Product version. Convenience parameter, additional to the Product name.
     * @param {Object} opts Optional parameters
     * @param {String} [description] Product description.
     * @param {Boolean} [licenseeAutoCreate] If set to 'true', non-existing Licensees will be created at first validation attempt.
     * @param {String} [licensingInfo] Licensing information.
     * @param {String} [number] Unique number that identifies the Product. Vendor can assign this number when creating a Product or let NetLicensing generate one.
     * @param {module:model/String} [vatMode] Vat mode for Product. Supported types: GROSS, NET
     * @param {module:api/ProductApi~createProductCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Netlicensing}
     */
    createProduct(active, name, version, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'active' is set
      if (active === undefined || active === null) {
        throw new Error("Missing the required parameter 'active' when calling createProduct");
      }
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling createProduct");
      }
      // verify the required parameter 'version' is set
      if (version === undefined || version === null) {
        throw new Error("Missing the required parameter 'version' when calling createProduct");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
        'active': active,
        'description': opts['description'],
        'licenseeAutoCreate': opts['licenseeAutoCreate'],
        'licensingInfo': opts['licensingInfo'],
        'name': name,
        'number': opts['number'],
        'vatMode': opts['vatMode'],
        'version': version
      };

      let authNames = ['basicAuth'];
      let contentTypes = ['application/x-www-form-urlencoded'];
      let accepts = ['application/json', 'application/xml'];
      let returnType = Netlicensing;
      return this.apiClient.callApi(
        '/product', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteProduct operation.
     * @callback module:api/ProductApi~deleteProductCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Netlicensing} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete Product
     * Delete a Product by 'number'
     * @param {String} productNumber Unique number that identifies the Product.
     * @param {Object} opts Optional parameters
     * @param {Boolean} [forceCascade] Force object deletion and all descendants.
     * @param {module:api/ProductApi~deleteProductCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Netlicensing}
     */
    deleteProduct(productNumber, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'productNumber' is set
      if (productNumber === undefined || productNumber === null) {
        throw new Error("Missing the required parameter 'productNumber' when calling deleteProduct");
      }

      let pathParams = {
        'productNumber': productNumber
      };
      let queryParams = {
        'forceCascade': opts['forceCascade']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth'];
      let contentTypes = [];
      let accepts = ['application/json', 'application/xml'];
      let returnType = Netlicensing;
      return this.apiClient.callApi(
        '/product/{productNumber}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listProducts operation.
     * @callback module:api/ProductApi~listProductsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Netlicensing>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List Products
     * Return a list of all configured Products for the current Vendor
     * @param {module:api/ProductApi~listProductsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Netlicensing>}
     */
    listProducts(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth'];
      let contentTypes = [];
      let accepts = ['application/json', 'application/xml'];
      let returnType = [Netlicensing];
      return this.apiClient.callApi(
        '/product', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the productNumber operation.
     * @callback module:api/ProductApi~productNumberCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Netlicensing} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Product
     * Return a Product by 'productNumber'
     * @param {String} productNumber Unique number that identifies the Product.
     * @param {module:api/ProductApi~productNumberCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Netlicensing}
     */
    productNumber(productNumber, callback) {
      let postBody = null;
      // verify the required parameter 'productNumber' is set
      if (productNumber === undefined || productNumber === null) {
        throw new Error("Missing the required parameter 'productNumber' when calling productNumber");
      }

      let pathParams = {
        'productNumber': productNumber
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth'];
      let contentTypes = [];
      let accepts = ['application/json', 'application/xml'];
      let returnType = Netlicensing;
      return this.apiClient.callApi(
        '/product/{productNumber}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateProduct operation.
     * @callback module:api/ProductApi~updateProductCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Netlicensing} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update Product
     * Sets the provided properties to a Product. Return an updated Product
     * @param {String} productNumber Unique number that identifies the Product.
     * @param {Object} opts Optional parameters
     * @param {Boolean} [active] If set to 'false', the Product is disabled. No new Licensees can be registered for the Product, existing Licensees can not obtain new Licenses.
     * @param {String} [description] Product description.
     * @param {Boolean} [licenseeAutoCreate] If set to 'true', non-existing Licensees will be created at first validation attempt.
     * @param {String} [licensingInfo] Licensing information.
     * @param {String} [name] Product name. Together with the version identifies the Product for the end customer.
     * @param {String} [number] New Product number (update)
     * @param {module:model/String} [vatMode] Vat mode for Product. Supported types: GROSS, NET
     * @param {String} [version] Product version. Convenience parameter, additional to the Product name.
     * @param {module:api/ProductApi~updateProductCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Netlicensing}
     */
    updateProduct(productNumber, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'productNumber' is set
      if (productNumber === undefined || productNumber === null) {
        throw new Error("Missing the required parameter 'productNumber' when calling updateProduct");
      }

      let pathParams = {
        'productNumber': productNumber
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
        'active': opts['active'],
        'description': opts['description'],
        'licenseeAutoCreate': opts['licenseeAutoCreate'],
        'licensingInfo': opts['licensingInfo'],
        'name': opts['name'],
        'number': opts['number'],
        'vatMode': opts['vatMode'],
        'version': opts['version']
      };

      let authNames = ['basicAuth'];
      let contentTypes = ['application/x-www-form-urlencoded'];
      let accepts = ['application/json', 'application/xml'];
      let returnType = Netlicensing;
      return this.apiClient.callApi(
        '/product/{productNumber}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
