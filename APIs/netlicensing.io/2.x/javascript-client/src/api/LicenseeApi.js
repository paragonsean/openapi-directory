/**
 * Labs64 NetLicensing RESTful API Test Center
 * The Labs64 <a href='https://netlicensing.io/wiki/restful-api' target='_blank'>NetLicensing RESTful API</a> gives you access to NetLicensingâ€™s core features.<br/><br/><strong>Authentication</strong><br/>You authenticate to the NetLicensing API by providing your account credentials or simply use our demo account - <code>demo:demo</code><br/><br/>Find out more about Labs64 NetLicensing at <a href='https://netlicensing.io' target='_blank'>netlicensing.io</a>
 *
 * The version of the OpenAPI document: 2.x
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import Netlicensing from '../model/Netlicensing';

/**
* Licensee service.
* @module api/LicenseeApi
* @version 2.x
*/
export default class LicenseeApi {

    /**
    * Constructs a new LicenseeApi. 
    * @alias module:api/LicenseeApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the createLicensee operation.
     * @callback module:api/LicenseeApi~createLicenseeCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Netlicensing} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create Licensee
     * Creates a new Licensee
     * @param {Boolean} active If set to 'false', the Licensee is disabled. Licensee can not obtain new Licenses, and validation is disabled
     * @param {String} productNumber 'productNumber' to assign new Licensee object
     * @param {Object} opts Optional parameters
     * @param {Boolean} [markedForTransfer] Mark Licensee for transfer.
     * @param {String} [name] 
     * @param {String} [number] Unique number (across all Products of a Vendor) that identifies the Licensee. Vendor can assign this number when creating a Licensee or let NetLicensing generate one. Read-only after creation of the first License for the Licensee
     * @param {module:api/LicenseeApi~createLicenseeCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Netlicensing}
     */
    createLicensee(active, productNumber, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'active' is set
      if (active === undefined || active === null) {
        throw new Error("Missing the required parameter 'active' when calling createLicensee");
      }
      // verify the required parameter 'productNumber' is set
      if (productNumber === undefined || productNumber === null) {
        throw new Error("Missing the required parameter 'productNumber' when calling createLicensee");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
        'active': active,
        'markedForTransfer': opts['markedForTransfer'],
        'name': opts['name'],
        'number': opts['number'],
        'productNumber': productNumber
      };

      let authNames = ['basicAuth'];
      let contentTypes = ['application/x-www-form-urlencoded'];
      let accepts = ['application/json', 'application/xml'];
      let returnType = Netlicensing;
      return this.apiClient.callApi(
        '/licensee', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteLicensee operation.
     * @callback module:api/LicenseeApi~deleteLicenseeCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Netlicensing} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete Licensee
     * Delete a Licensee by 'number'
     * @param {String} licenseeNumber Unique number (across all Products of a Vendor) that identifies the Licensee.
     * @param {Object} opts Optional parameters
     * @param {Boolean} [forceCascade] Force object deletion and all descendants.
     * @param {module:api/LicenseeApi~deleteLicenseeCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Netlicensing}
     */
    deleteLicensee(licenseeNumber, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'licenseeNumber' is set
      if (licenseeNumber === undefined || licenseeNumber === null) {
        throw new Error("Missing the required parameter 'licenseeNumber' when calling deleteLicensee");
      }

      let pathParams = {
        'licenseeNumber': licenseeNumber
      };
      let queryParams = {
        'forceCascade': opts['forceCascade']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth'];
      let contentTypes = [];
      let accepts = ['application/json', 'application/xml'];
      let returnType = Netlicensing;
      return this.apiClient.callApi(
        '/licensee/{licenseeNumber}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getLicensee operation.
     * @callback module:api/LicenseeApi~getLicenseeCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Netlicensing} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Licensee
     * Return a Licensee by 'licenseeNumber'
     * @param {String} licenseeNumber Unique number (across all Products of a Vendor) that identifies the Licensee. Vendor can assign this number when creating a Licensee or let NetLicensing generate one. Read-only after creation of the first License for the Licensee.
     * @param {module:api/LicenseeApi~getLicenseeCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Netlicensing}
     */
    getLicensee(licenseeNumber, callback) {
      let postBody = null;
      // verify the required parameter 'licenseeNumber' is set
      if (licenseeNumber === undefined || licenseeNumber === null) {
        throw new Error("Missing the required parameter 'licenseeNumber' when calling getLicensee");
      }

      let pathParams = {
        'licenseeNumber': licenseeNumber
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth'];
      let contentTypes = [];
      let accepts = ['application/json', 'application/xml'];
      let returnType = Netlicensing;
      return this.apiClient.callApi(
        '/licensee/{licenseeNumber}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listLicensees operation.
     * @callback module:api/LicenseeApi~listLicenseesCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Netlicensing>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List Licensees
     * Return a list of all Licensees for the current Vendor
     * @param {module:api/LicenseeApi~listLicenseesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Netlicensing>}
     */
    listLicensees(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth'];
      let contentTypes = [];
      let accepts = ['application/json', 'application/xml'];
      let returnType = [Netlicensing];
      return this.apiClient.callApi(
        '/licensee', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the transferLicenses operation.
     * @callback module:api/LicenseeApi~transferLicensesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Netlicensing} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Transfer Licenses
     * Licenses transfer between Licensees
     * @param {String} licenseeNumber Licensee number with a maximum length of 1000 characters
     * @param {String} sourceLicenseeNumber Licensee number which Licenses to be transferred
     * @param {module:api/LicenseeApi~transferLicensesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Netlicensing}
     */
    transferLicenses(licenseeNumber, sourceLicenseeNumber, callback) {
      let postBody = null;
      // verify the required parameter 'licenseeNumber' is set
      if (licenseeNumber === undefined || licenseeNumber === null) {
        throw new Error("Missing the required parameter 'licenseeNumber' when calling transferLicenses");
      }
      // verify the required parameter 'sourceLicenseeNumber' is set
      if (sourceLicenseeNumber === undefined || sourceLicenseeNumber === null) {
        throw new Error("Missing the required parameter 'sourceLicenseeNumber' when calling transferLicenses");
      }

      let pathParams = {
        'licenseeNumber': licenseeNumber
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
        'sourceLicenseeNumber': sourceLicenseeNumber
      };

      let authNames = ['basicAuth'];
      let contentTypes = ['application/x-www-form-urlencoded'];
      let accepts = ['application/json', 'application/xml'];
      let returnType = Netlicensing;
      return this.apiClient.callApi(
        '/licensee/{licenseeNumber}/transfer', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateLicensee operation.
     * @callback module:api/LicenseeApi~updateLicenseeCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Netlicensing} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update Licensee
     * Sets the provided properties to a Licensee. Return an updated Licensee
     * @param {String} licenseeNumber Unique number (across all Products of a Vendor) that identifies the Licensee. Vendor can assign this number when creating a Licensee or let NetLicensing generate one. Read-only after creation of the first License for the Licensee.
     * @param {Object} opts Optional parameters
     * @param {Boolean} [active] If set to 'false', the Licensee is disabled. Licensee can not obtain new Licenses, and validation is disabled
     * @param {Boolean} [markedForTransfer] Mark Licensee for transfer.
     * @param {String} [name] 
     * @param {String} [number] New Licensee number (update).
     * @param {module:api/LicenseeApi~updateLicenseeCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Netlicensing}
     */
    updateLicensee(licenseeNumber, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'licenseeNumber' is set
      if (licenseeNumber === undefined || licenseeNumber === null) {
        throw new Error("Missing the required parameter 'licenseeNumber' when calling updateLicensee");
      }

      let pathParams = {
        'licenseeNumber': licenseeNumber
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
        'active': opts['active'],
        'markedForTransfer': opts['markedForTransfer'],
        'name': opts['name'],
        'number': opts['number']
      };

      let authNames = ['basicAuth'];
      let contentTypes = ['application/x-www-form-urlencoded'];
      let accepts = ['application/json', 'application/xml'];
      let returnType = Netlicensing;
      return this.apiClient.callApi(
        '/licensee/{licenseeNumber}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the validateLicensee operation.
     * @callback module:api/LicenseeApi~validateLicenseeCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Netlicensing} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Validate Licensee
     * Validates active Licenses of the Licensee
     * @param {String} licenseeNumber Licensee number with a maximum length of 1000 characters
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [action] 'Floating' licensing model: check-out or check-in session action, to allocate or return it from/to the pool of available sessions
     * @param {String} [licenseeName] Human-readable name for the auto-created Licensee (will be set as custom Licensee property)
     * @param {String} [nodeSecret] 'Node-Locked' licensing model: specifies unique secret
     * @param {String} [productModuleNumber] 'Node-Locked' licensing model: product module number
     * @param {String} [productNumber] Product number, must be provided when 'Licensee auto-create' is enabled (see also Product JavaDoc). Identifies the Product to which new Licensee should be added
     * @param {String} [sessionId] 'Floating' licensing model: specifies unique session identifier
     * @param {module:api/LicenseeApi~validateLicenseeCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Netlicensing}
     */
    validateLicensee(licenseeNumber, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'licenseeNumber' is set
      if (licenseeNumber === undefined || licenseeNumber === null) {
        throw new Error("Missing the required parameter 'licenseeNumber' when calling validateLicensee");
      }

      let pathParams = {
        'licenseeNumber': licenseeNumber
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
        'action': opts['action'],
        'licenseeName': opts['licenseeName'],
        'nodeSecret': opts['nodeSecret'],
        'productModuleNumber': opts['productModuleNumber'],
        'productNumber': opts['productNumber'],
        'sessionId': opts['sessionId']
      };

      let authNames = ['basicAuth'];
      let contentTypes = ['application/x-www-form-urlencoded'];
      let accepts = ['application/json', 'application/xml'];
      let returnType = Netlicensing;
      return this.apiClient.callApi(
        '/licensee/{licenseeNumber}/validate', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
