/**
 * Labs64 NetLicensing RESTful API Test Center
 * The Labs64 <a href='https://netlicensing.io/wiki/restful-api' target='_blank'>NetLicensing RESTful API</a> gives you access to NetLicensingâ€™s core features.<br/><br/><strong>Authentication</strong><br/>You authenticate to the NetLicensing API by providing your account credentials or simply use our demo account - <code>demo:demo</code><br/><br/>Find out more about Labs64 NetLicensing at <a href='https://netlicensing.io' target='_blank'>netlicensing.io</a>
 *
 * The version of the OpenAPI document: 2.x
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import Netlicensing from '../model/Netlicensing';

/**
* LicenseTemplate service.
* @module api/LicenseTemplateApi
* @version 2.x
*/
export default class LicenseTemplateApi {

    /**
    * Constructs a new LicenseTemplateApi. 
    * @alias module:api/LicenseTemplateApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the createLicenseTemplate operation.
     * @callback module:api/LicenseTemplateApi~createLicenseTemplateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Netlicensing} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create License Template
     * Creates a new License Template
     * @param {Boolean} active If set to 'false', the License Template is disabled. Licensee can not obtain any new Licenses off this License Template.
     * @param {String} licenseType Type of Licenses created from this License Template. Supported types: FEATURE, TIMEVOLUME, FLOATING, QUANTITY
     * @param {String} name License Template name to create License Template object
     * @param {String} productModuleNumber Number of Product Module to create License Template object
     * @param {Object} opts Optional parameters
     * @param {Boolean} [automatic] If set to 'true', every new Licensee automatically gets one License out of this License Template on creation. Automatic Licenses must have their price set to 0.
     * @param {String} [currency] Specifies currency for the License price. Check data types to discover which currencies are supported.
     * @param {Boolean} [hidden] If set to 'true', this License Template is not shown in NetLicensing Shop as offered for purchase.
     * @param {Boolean} [hideLicenses] If set to 'true', Licenses from this License Template are not visible to the end customer, but participate in validation.
     * @param {String} [maxSessions] Mandatory for 'FLOATING' License Type.
     * @param {String} [number] Unique number (across all Products of a Vendor) that identifies the License Template. Vendor can assign this number when creating a License Template or let NetLicensing generate one. Read-only after creation of the first License from this License Template.
     * @param {Number} [price] Price for the License. If >0, it must always be accompanied by the currency specification.
     * @param {String} [quantity] Mandatory for 'Pay-per-Use' and 'Node-Locked' License Model.
     * @param {String} [quota] Mandatory for 'Quota' License Model.
     * @param {String} [timeVolume] Mandatory for 'TIMEVOLUME' License Type.
     * @param {String} [timeVolumePeriod] For 'TIMEVOLUME' License Type.
     * @param {module:api/LicenseTemplateApi~createLicenseTemplateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Netlicensing}
     */
    createLicenseTemplate(active, licenseType, name, productModuleNumber, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'active' is set
      if (active === undefined || active === null) {
        throw new Error("Missing the required parameter 'active' when calling createLicenseTemplate");
      }
      // verify the required parameter 'licenseType' is set
      if (licenseType === undefined || licenseType === null) {
        throw new Error("Missing the required parameter 'licenseType' when calling createLicenseTemplate");
      }
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling createLicenseTemplate");
      }
      // verify the required parameter 'productModuleNumber' is set
      if (productModuleNumber === undefined || productModuleNumber === null) {
        throw new Error("Missing the required parameter 'productModuleNumber' when calling createLicenseTemplate");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
        'active': active,
        'automatic': opts['automatic'],
        'currency': opts['currency'],
        'hidden': opts['hidden'],
        'hideLicenses': opts['hideLicenses'],
        'licenseType': licenseType,
        'maxSessions': opts['maxSessions'],
        'name': name,
        'number': opts['number'],
        'price': opts['price'],
        'productModuleNumber': productModuleNumber,
        'quantity': opts['quantity'],
        'quota': opts['quota'],
        'timeVolume': opts['timeVolume'],
        'timeVolumePeriod': opts['timeVolumePeriod']
      };

      let authNames = ['basicAuth'];
      let contentTypes = ['application/x-www-form-urlencoded'];
      let accepts = ['application/json', 'application/xml'];
      let returnType = Netlicensing;
      return this.apiClient.callApi(
        '/licensetemplate', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteLicenseTemplate operation.
     * @callback module:api/LicenseTemplateApi~deleteLicenseTemplateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Netlicensing} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete License Template
     * Delete a License Template by 'number'.
     * @param {String} licenseTemplateNumber Unique number (across all Products of a Vendor) that identifies the License Template.
     * @param {Object} opts Optional parameters
     * @param {Boolean} [forceCascade] Force object deletion and all descendants.
     * @param {module:api/LicenseTemplateApi~deleteLicenseTemplateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Netlicensing}
     */
    deleteLicenseTemplate(licenseTemplateNumber, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'licenseTemplateNumber' is set
      if (licenseTemplateNumber === undefined || licenseTemplateNumber === null) {
        throw new Error("Missing the required parameter 'licenseTemplateNumber' when calling deleteLicenseTemplate");
      }

      let pathParams = {
        'licenseTemplateNumber': licenseTemplateNumber
      };
      let queryParams = {
        'forceCascade': opts['forceCascade']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth'];
      let contentTypes = [];
      let accepts = ['application/json', 'application/xml'];
      let returnType = Netlicensing;
      return this.apiClient.callApi(
        '/licensetemplate/{licenseTemplateNumber}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getLicenseTemplate operation.
     * @callback module:api/LicenseTemplateApi~getLicenseTemplateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Netlicensing} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get License Template
     * Return a License Template by 'licenseTemplateNumber'
     * @param {String} licenseTemplateNumber Unique number (across all Products of a Vendor) that identifies the License Template. Vendor can assign this number when creating a License Template or let NetLicensing generate one. Read-only after creation of the first License from this License Template.
     * @param {module:api/LicenseTemplateApi~getLicenseTemplateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Netlicensing}
     */
    getLicenseTemplate(licenseTemplateNumber, callback) {
      let postBody = null;
      // verify the required parameter 'licenseTemplateNumber' is set
      if (licenseTemplateNumber === undefined || licenseTemplateNumber === null) {
        throw new Error("Missing the required parameter 'licenseTemplateNumber' when calling getLicenseTemplate");
      }

      let pathParams = {
        'licenseTemplateNumber': licenseTemplateNumber
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth'];
      let contentTypes = [];
      let accepts = ['application/json', 'application/xml'];
      let returnType = Netlicensing;
      return this.apiClient.callApi(
        '/licensetemplate/{licenseTemplateNumber}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listLicenseTemplates operation.
     * @callback module:api/LicenseTemplateApi~listLicenseTemplatesCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Netlicensing>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List License Templates
     * Return a list of all License Templates for the current Vendor
     * @param {module:api/LicenseTemplateApi~listLicenseTemplatesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Netlicensing>}
     */
    listLicenseTemplates(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth'];
      let contentTypes = [];
      let accepts = ['application/json', 'application/xml'];
      let returnType = [Netlicensing];
      return this.apiClient.callApi(
        '/licensetemplate', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateLicenseTemplate operation.
     * @callback module:api/LicenseTemplateApi~updateLicenseTemplateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Netlicensing} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update License Template
     * Sets the provided properties to a License Template. Return an updated License Template
     * @param {String} licenseTemplateNumber Unique number (across all Products of a Vendor) that identifies the License Template. Vendor can assign this number when creating a License Template or let NetLicensing generate one. Read-only after creation of the first License from this License Template.
     * @param {Object} opts Optional parameters
     * @param {Boolean} [active] If set to 'false', the License Template is disabled. Licensee can not obtain any new Licenses off this License Template.
     * @param {Boolean} [automatic] If set to 'true', every new Licensee automatically gets one License out of this License Template on creation. Automatic Licenses must have their price set to 0.
     * @param {String} [currency] Specifies currency for the License price. Check data types to discover which currencies are supported.
     * @param {Boolean} [hidden] If set to 'true', this License Template is not shown in NetLicensing Shop as offered for purchase.
     * @param {Boolean} [hideLicenses] If set to 'true', Licenses from this License Template are not visible to the end customer, but participate in validation.
     * @param {String} [licenseType] Type of Licenses created from this License Template. Supported types: FEATURE, TIMEVOLUME, FLOATING, QUANTITY
     * @param {String} [maxSessions] Mandatory for 'FLOATING' License Type.
     * @param {String} [name] Name for the Licensed item
     * @param {String} [number] New License Template number (update).
     * @param {Number} [price] Price for the License. If >0, it must always be accompanied by the currency specification.
     * @param {String} [quantity] Mandatory for 'Pay-per-Use' and 'Node-Locked' License Model.
     * @param {String} [quota] Mandatory for 'Quota' License Model.
     * @param {String} [timeVolume] Mandatory for 'TIMEVOLUME' License Type.
     * @param {String} [timeVolumePeriod] For 'TIMEVOLUME' License Type.
     * @param {module:api/LicenseTemplateApi~updateLicenseTemplateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Netlicensing}
     */
    updateLicenseTemplate(licenseTemplateNumber, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'licenseTemplateNumber' is set
      if (licenseTemplateNumber === undefined || licenseTemplateNumber === null) {
        throw new Error("Missing the required parameter 'licenseTemplateNumber' when calling updateLicenseTemplate");
      }

      let pathParams = {
        'licenseTemplateNumber': licenseTemplateNumber
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
        'active': opts['active'],
        'automatic': opts['automatic'],
        'currency': opts['currency'],
        'hidden': opts['hidden'],
        'hideLicenses': opts['hideLicenses'],
        'licenseType': opts['licenseType'],
        'maxSessions': opts['maxSessions'],
        'name': opts['name'],
        'number': opts['number'],
        'price': opts['price'],
        'quantity': opts['quantity'],
        'quota': opts['quota'],
        'timeVolume': opts['timeVolume'],
        'timeVolumePeriod': opts['timeVolumePeriod']
      };

      let authNames = ['basicAuth'];
      let contentTypes = ['application/x-www-form-urlencoded'];
      let accepts = ['application/json', 'application/xml'];
      let returnType = Netlicensing;
      return this.apiClient.callApi(
        '/licensetemplate/{licenseTemplateNumber}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
