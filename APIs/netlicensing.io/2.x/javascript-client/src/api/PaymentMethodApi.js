/**
 * Labs64 NetLicensing RESTful API Test Center
 * The Labs64 <a href='https://netlicensing.io/wiki/restful-api' target='_blank'>NetLicensing RESTful API</a> gives you access to NetLicensingâ€™s core features.<br/><br/><strong>Authentication</strong><br/>You authenticate to the NetLicensing API by providing your account credentials or simply use our demo account - <code>demo:demo</code><br/><br/>Find out more about Labs64 NetLicensing at <a href='https://netlicensing.io' target='_blank'>netlicensing.io</a>
 *
 * The version of the OpenAPI document: 2.x
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import Netlicensing from '../model/Netlicensing';

/**
* PaymentMethod service.
* @module api/PaymentMethodApi
* @version 2.x
*/
export default class PaymentMethodApi {

    /**
    * Constructs a new PaymentMethodApi. 
    * @alias module:api/PaymentMethodApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the getPaymentMethod operation.
     * @callback module:api/PaymentMethodApi~getPaymentMethodCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Netlicensing} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Payment Method
     * Return a Payment Method info by 'paymentMethodNumber'
     * @param {String} paymentMethodNumber Payment method number
     * @param {module:api/PaymentMethodApi~getPaymentMethodCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Netlicensing}
     */
    getPaymentMethod(paymentMethodNumber, callback) {
      let postBody = null;
      // verify the required parameter 'paymentMethodNumber' is set
      if (paymentMethodNumber === undefined || paymentMethodNumber === null) {
        throw new Error("Missing the required parameter 'paymentMethodNumber' when calling getPaymentMethod");
      }

      let pathParams = {
        'paymentMethodNumber': paymentMethodNumber
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth'];
      let contentTypes = [];
      let accepts = ['application/json', 'application/xml'];
      let returnType = Netlicensing;
      return this.apiClient.callApi(
        '/paymentmethod/{paymentMethodNumber}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listPaymentMethods operation.
     * @callback module:api/PaymentMethodApi~listPaymentMethodsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Netlicensing>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List Payment Methods
     * Return a list of all Payment Methods for the current Vendor
     * @param {module:api/PaymentMethodApi~listPaymentMethodsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Netlicensing>}
     */
    listPaymentMethods(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth'];
      let contentTypes = [];
      let accepts = ['application/json', 'application/xml'];
      let returnType = [Netlicensing];
      return this.apiClient.callApi(
        '/paymentmethod', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updatePaymentMethod operation.
     * @callback module:api/PaymentMethodApi~updatePaymentMethodCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Netlicensing} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update Payment Method
     * Sets the provided properties to a Payment Method. Return an updated Payment Method
     * @param {String} paymentMethodNumber Payment method number
     * @param {Object} opts Optional parameters
     * @param {Boolean} [active] If set to 'false', the Payment Method is disabled.
     * @param {String} [paypalSubject] The e-mail address of the PayPal account for which you are making the API calls.
     * @param {module:api/PaymentMethodApi~updatePaymentMethodCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Netlicensing}
     */
    updatePaymentMethod(paymentMethodNumber, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'paymentMethodNumber' is set
      if (paymentMethodNumber === undefined || paymentMethodNumber === null) {
        throw new Error("Missing the required parameter 'paymentMethodNumber' when calling updatePaymentMethod");
      }

      let pathParams = {
        'paymentMethodNumber': paymentMethodNumber
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
        'active': opts['active'],
        'paypal.subject': opts['paypalSubject']
      };

      let authNames = ['basicAuth'];
      let contentTypes = ['application/x-www-form-urlencoded'];
      let accepts = ['application/json', 'application/xml'];
      let returnType = Netlicensing;
      return this.apiClient.callApi(
        '/paymentmethod/{paymentMethodNumber}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
