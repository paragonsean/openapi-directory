/**
 * Labs64 NetLicensing RESTful API Test Center
 * The Labs64 <a href='https://netlicensing.io/wiki/restful-api' target='_blank'>NetLicensing RESTful API</a> gives you access to NetLicensingâ€™s core features.<br/><br/><strong>Authentication</strong><br/>You authenticate to the NetLicensing API by providing your account credentials or simply use our demo account - <code>demo:demo</code><br/><br/>Find out more about Labs64 NetLicensing at <a href='https://netlicensing.io' target='_blank'>netlicensing.io</a>
 *
 * The version of the OpenAPI document: 2.x
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import Netlicensing from '../model/Netlicensing';

/**
* Token service.
* @module api/TokenApi
* @version 2.x
*/
export default class TokenApi {

    /**
    * Constructs a new TokenApi. 
    * @alias module:api/TokenApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the createToken operation.
     * @callback module:api/TokenApi~createTokenCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Netlicensing} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create token
     * Create token by 'tokenType' and additional token parameters
     * @param {module:model/String} tokenType Token type to be generated
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [action] For <i>type=ACTION</i> only; defines token action to be perfromed
     * @param {module:model/String} [apiKeyRole] For <i>tokenType=APIKEY</i> only (default: ROLE_APIKEY_LICENSEE); defines token RoleID
     * @param {String} [cancelURL] For <i>tokenType=SHOP</i> only; take customers to this URL when they cancel their checkout
     * @param {String} [cancelURLTitle] For <i>tokenType=SHOP</i> only; shop link title for cancel checkout process
     * @param {String} [licenseTemplateNumber] For <i>tokenType=SHOP</i> only; identifies LicenseTemplate that will be assigned to the shop token
     * @param {String} [licenseeNumber] For <i>tokenType=SHOP</i> or <i>type=ACTION</i> only (mandatory); identifies Licensee that will be assigned to the shop token
     * @param {String} [predefinedShoppingItem] For <i>tokenType=SHOP</i> only; identifies Shopping Item name that will be shown to the customer
     * @param {String} [privateKey] For <i>tokenType=APIKEY</i> only (optional); defines PrivateKey to be used with the validate method<br/><strong>Please Note:</strong> PrivateKey need to be provided as one line without spaces
     * @param {String} [productNumber] For <i>tokenType=SHOP</i> only (mandatory); identifies Product that will be assigned to the shop token
     * @param {String} [successURL] For <i>tokenType=SHOP</i> only; take customers to this URL when they finish checkout
     * @param {String} [successURLTitle] For <i>tokenType=SHOP</i> only; shop link title for successful checkout process
     * @param {module:model/String} [type] For <i>tokenType=DEFAULT</i> only; action type to be set
     * @param {module:api/TokenApi~createTokenCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Netlicensing}
     */
    createToken(tokenType, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'tokenType' is set
      if (tokenType === undefined || tokenType === null) {
        throw new Error("Missing the required parameter 'tokenType' when calling createToken");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
        'action': opts['action'],
        'apiKeyRole': opts['apiKeyRole'],
        'cancelURL': opts['cancelURL'],
        'cancelURLTitle': opts['cancelURLTitle'],
        'licenseTemplateNumber': opts['licenseTemplateNumber'],
        'licenseeNumber': opts['licenseeNumber'],
        'predefinedShoppingItem': opts['predefinedShoppingItem'],
        'privateKey': opts['privateKey'],
        'productNumber': opts['productNumber'],
        'successURL': opts['successURL'],
        'successURLTitle': opts['successURLTitle'],
        'tokenType': tokenType,
        'type': opts['type']
      };

      let authNames = ['basicAuth'];
      let contentTypes = ['application/x-www-form-urlencoded'];
      let accepts = ['application/json', 'application/xml'];
      let returnType = Netlicensing;
      return this.apiClient.callApi(
        '/token', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteToken operation.
     * @callback module:api/TokenApi~deleteTokenCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Netlicensing} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete token
     * Delete a token by 'number'
     * @param {String} tokenNumber Token number
     * @param {module:api/TokenApi~deleteTokenCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Netlicensing}
     */
    deleteToken(tokenNumber, callback) {
      let postBody = null;
      // verify the required parameter 'tokenNumber' is set
      if (tokenNumber === undefined || tokenNumber === null) {
        throw new Error("Missing the required parameter 'tokenNumber' when calling deleteToken");
      }

      let pathParams = {
        'tokenNumber': tokenNumber
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth'];
      let contentTypes = [];
      let accepts = ['application/json', 'application/xml'];
      let returnType = Netlicensing;
      return this.apiClient.callApi(
        '/token/{tokenNumber}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getToken operation.
     * @callback module:api/TokenApi~getTokenCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Netlicensing} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get token
     * Return a token by 'tokenNumber'
     * @param {String} tokenNumber Token number
     * @param {module:api/TokenApi~getTokenCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Netlicensing}
     */
    getToken(tokenNumber, callback) {
      let postBody = null;
      // verify the required parameter 'tokenNumber' is set
      if (tokenNumber === undefined || tokenNumber === null) {
        throw new Error("Missing the required parameter 'tokenNumber' when calling getToken");
      }

      let pathParams = {
        'tokenNumber': tokenNumber
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth'];
      let contentTypes = [];
      let accepts = ['application/json', 'application/xml'];
      let returnType = Netlicensing;
      return this.apiClient.callApi(
        '/token/{tokenNumber}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listTokens operation.
     * @callback module:api/TokenApi~listTokensCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Netlicensing>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List Tokens
     * Return a list of all tokens for the current Vendor
     * @param {module:api/TokenApi~listTokensCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Netlicensing>}
     */
    listTokens(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth'];
      let contentTypes = [];
      let accepts = ['application/json', 'application/xml'];
      let returnType = [Netlicensing];
      return this.apiClient.callApi(
        '/token', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
