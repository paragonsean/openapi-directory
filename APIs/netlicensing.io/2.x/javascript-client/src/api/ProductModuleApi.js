/**
 * Labs64 NetLicensing RESTful API Test Center
 * The Labs64 <a href='https://netlicensing.io/wiki/restful-api' target='_blank'>NetLicensing RESTful API</a> gives you access to NetLicensingâ€™s core features.<br/><br/><strong>Authentication</strong><br/>You authenticate to the NetLicensing API by providing your account credentials or simply use our demo account - <code>demo:demo</code><br/><br/>Find out more about Labs64 NetLicensing at <a href='https://netlicensing.io' target='_blank'>netlicensing.io</a>
 *
 * The version of the OpenAPI document: 2.x
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import Netlicensing from '../model/Netlicensing';

/**
* ProductModule service.
* @module api/ProductModuleApi
* @version 2.x
*/
export default class ProductModuleApi {

    /**
    * Constructs a new ProductModuleApi. 
    * @alias module:api/ProductModuleApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the createProductModule operation.
     * @callback module:api/ProductModuleApi~createProductModuleCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Netlicensing} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create Product Module
     * Creates a new Product Module
     * @param {Boolean} active If set to 'false', the Product Module is disabled. Licensees can not obtain any new Licenses for this Product Module.
     * @param {String} licensingModel Licensing model applied to this Product Module. Defines what License Templates can be configured for the Product Module and how Licenses for this Product Module are processed during validation.
     * @param {String} name Product Module name that is visible to the end customers in NetLicensing Shop.
     * @param {String} productNumber Unique number (across all Products of a Vendor) that identifies the Product Module. Vendor can assign this number when creating a Product Module or let NetLicensing generate one. Read-only after creation of the first Licensee for the Product.
     * @param {Object} opts Optional parameters
     * @param {Array.<module:model/String>} [licenseTemplate = 'TIMEVOLUME')] License Template. Mandatory for 'Try &amp; Buy' licensing model.
     * @param {Number} [maxCheckoutValidity] Maximum checkout validity (days). Mandatory for 'Floating' licensing model.
     * @param {Array.<module:model/String>} [nodeSecretMode = 'PREDEFINED')] Secret Mode. Mandatory for 'Node-Locked' licensing model.
     * @param {String} [number] Unique number (across all Products of a Vendor) that identifies the Product Module. Vendor can assign this number when creating a Product Module or let NetLicensing generate one. Read-only after creation of the first Licensee for the Product.
     * @param {Number} [redThreshold] Remaining time volume for red level. Mandatory for 'Rental' licensing model.
     * @param {Number} [yellowThreshold] Remaining time volume for yellow level. Mandatory for 'Rental' licensing model.
     * @param {module:api/ProductModuleApi~createProductModuleCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Netlicensing}
     */
    createProductModule(active, licensingModel, name, productNumber, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'active' is set
      if (active === undefined || active === null) {
        throw new Error("Missing the required parameter 'active' when calling createProductModule");
      }
      // verify the required parameter 'licensingModel' is set
      if (licensingModel === undefined || licensingModel === null) {
        throw new Error("Missing the required parameter 'licensingModel' when calling createProductModule");
      }
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling createProductModule");
      }
      // verify the required parameter 'productNumber' is set
      if (productNumber === undefined || productNumber === null) {
        throw new Error("Missing the required parameter 'productNumber' when calling createProductModule");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
        'active': active,
        'licenseTemplate': this.apiClient.buildCollectionParam(opts['licenseTemplate'], 'csv'),
        'licensingModel': licensingModel,
        'maxCheckoutValidity': opts['maxCheckoutValidity'],
        'name': name,
        'nodeSecretMode': this.apiClient.buildCollectionParam(opts['nodeSecretMode'], 'csv'),
        'number': opts['number'],
        'productNumber': productNumber,
        'redThreshold': opts['redThreshold'],
        'yellowThreshold': opts['yellowThreshold']
      };

      let authNames = ['basicAuth'];
      let contentTypes = ['application/x-www-form-urlencoded'];
      let accepts = ['application/json', 'application/xml'];
      let returnType = Netlicensing;
      return this.apiClient.callApi(
        '/productmodule', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteProductModule operation.
     * @callback module:api/ProductModuleApi~deleteProductModuleCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Netlicensing} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete Product Module
     * Delete a Product Module by 'number'
     * @param {String} productModuleNumber Unique number (across all Products of a Vendor) that identifies the Product Module.
     * @param {Object} opts Optional parameters
     * @param {Boolean} [forceCascade] Force object deletion and all descendants.
     * @param {module:api/ProductModuleApi~deleteProductModuleCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Netlicensing}
     */
    deleteProductModule(productModuleNumber, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'productModuleNumber' is set
      if (productModuleNumber === undefined || productModuleNumber === null) {
        throw new Error("Missing the required parameter 'productModuleNumber' when calling deleteProductModule");
      }

      let pathParams = {
        'productModuleNumber': productModuleNumber
      };
      let queryParams = {
        'forceCascade': opts['forceCascade']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth'];
      let contentTypes = [];
      let accepts = ['application/json', 'application/xml'];
      let returnType = Netlicensing;
      return this.apiClient.callApi(
        '/productmodule/{productModuleNumber}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getProductModule operation.
     * @callback module:api/ProductModuleApi~getProductModuleCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Netlicensing} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Product Module
     * Return a Product Module by 'productModuleNumber'
     * @param {String} productModuleNumber Unique number (across all Products of a Vendor) that identifies the Product Module. Vendor can assign this number when creating a Product Module or let NetLicensing generate one. Read-only after creation of the first Licensee for the Product.
     * @param {module:api/ProductModuleApi~getProductModuleCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Netlicensing}
     */
    getProductModule(productModuleNumber, callback) {
      let postBody = null;
      // verify the required parameter 'productModuleNumber' is set
      if (productModuleNumber === undefined || productModuleNumber === null) {
        throw new Error("Missing the required parameter 'productModuleNumber' when calling getProductModule");
      }

      let pathParams = {
        'productModuleNumber': productModuleNumber
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth'];
      let contentTypes = [];
      let accepts = ['application/json', 'application/xml'];
      let returnType = Netlicensing;
      return this.apiClient.callApi(
        '/productmodule/{productModuleNumber}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listProductModules operation.
     * @callback module:api/ProductModuleApi~listProductModulesCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Netlicensing>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List Product Modules
     * Return a list of all Product Modules for the current Vendor
     * @param {module:api/ProductModuleApi~listProductModulesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Netlicensing>}
     */
    listProductModules(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth'];
      let contentTypes = [];
      let accepts = ['application/json', 'application/xml'];
      let returnType = [Netlicensing];
      return this.apiClient.callApi(
        '/productmodule', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateProductModule operation.
     * @callback module:api/ProductModuleApi~updateProductModuleCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Netlicensing} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update Product Module
     * Sets the provided properties to a Product Module. Return an updated Product Module
     * @param {String} productModuleNumber Unique number (across all Products of a Vendor) that identifies the Product Module. Vendor can assign this number when creating a Product Module or let NetLicensing generate one. Read-only after creation of the first Licensee for the Product.
     * @param {Object} opts Optional parameters
     * @param {Boolean} [active] If set to 'false', the Product Module is disabled. Licensees can not obtain any new Licenses for this Product Module.
     * @param {Array.<module:model/String>} [licenseTemplate = 'TIMEVOLUME')] License Template. Mandatory for 'Try &amp; Buy' licensing model.
     * @param {String} [licensingModel] Licensing model applied to this Product Module. Defines what License Templates can be configured for the Product Module and how Licenses for this Product Module are processed during validation.
     * @param {Number} [maxCheckoutValidity] Maximum checkout validity (days). Mandatory for 'Floating' licensing model.
     * @param {String} [name] Product Module name that is visible to the end customers in NetLicensing Shop.
     * @param {Array.<module:model/String>} [nodeSecretMode = 'PREDEFINED')] Secret Mode. Mandatory for 'Node-Locked' licensing model.
     * @param {String} [number] New Product Module number (update).
     * @param {Number} [redThreshold] Remaining time volume for red level. Mandatory for 'Rental' licensing model.
     * @param {Number} [yellowThreshold] Remaining time volume for yellow level. Mandatory for 'Rental' licensing model.
     * @param {module:api/ProductModuleApi~updateProductModuleCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Netlicensing}
     */
    updateProductModule(productModuleNumber, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'productModuleNumber' is set
      if (productModuleNumber === undefined || productModuleNumber === null) {
        throw new Error("Missing the required parameter 'productModuleNumber' when calling updateProductModule");
      }

      let pathParams = {
        'productModuleNumber': productModuleNumber
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
        'active': opts['active'],
        'licenseTemplate': this.apiClient.buildCollectionParam(opts['licenseTemplate'], 'csv'),
        'licensingModel': opts['licensingModel'],
        'maxCheckoutValidity': opts['maxCheckoutValidity'],
        'name': opts['name'],
        'nodeSecretMode': this.apiClient.buildCollectionParam(opts['nodeSecretMode'], 'csv'),
        'number': opts['number'],
        'redThreshold': opts['redThreshold'],
        'yellowThreshold': opts['yellowThreshold']
      };

      let authNames = ['basicAuth'];
      let contentTypes = ['application/x-www-form-urlencoded'];
      let accepts = ['application/json', 'application/xml'];
      let returnType = Netlicensing;
      return this.apiClient.callApi(
        '/productmodule/{productModuleNumber}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
