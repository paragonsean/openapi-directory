/**
 * Labs64 NetLicensing RESTful API Test Center
 * The Labs64 <a href='https://netlicensing.io/wiki/restful-api' target='_blank'>NetLicensing RESTful API</a> gives you access to NetLicensingâ€™s core features.<br/><br/><strong>Authentication</strong><br/>You authenticate to the NetLicensing API by providing your account credentials or simply use our demo account - <code>demo:demo</code><br/><br/>Find out more about Labs64 NetLicensing at <a href='https://netlicensing.io' target='_blank'>netlicensing.io</a>
 *
 * The version of the OpenAPI document: 2.x
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import Netlicensing from '../model/Netlicensing';

/**
* License service.
* @module api/LicenseApi
* @version 2.x
*/
export default class LicenseApi {

    /**
    * Constructs a new LicenseApi. 
    * @alias module:api/LicenseApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the createLicense operation.
     * @callback module:api/LicenseApi~createLicenseCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Netlicensing} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create License
     * Creates a new License
     * @param {Boolean} active 
     * @param {String} licenseTemplateNumber 
     * @param {String} licenseeNumber 
     * @param {Object} opts Optional parameters
     * @param {String} [currency] Specifies currency for the License price. Check data types to discover which currencies are supported. Read-only, set from License Template on creation
     * @param {Boolean} [hidden] If set to 'true', this License is not shown in NetLicensing Shop as purchased License. Set from License Template on creation, if not specified explicitly
     * @param {String} [name] Name for the Licensed item. Set from License Template on creation, if not specified explicitly.
     * @param {String} [number] 
     * @param {String} [parentfeature] Mandatory for 'TIMEVOLUME' License Type and 'RENTAL' licensing model
     * @param {Number} [price] Price for the License. If >0, it must always be accompanied by the currency specification. Read-only, set from License Template on creation
     * @param {String} [quantity] Mandatory for 'Pay-per-Use' License Model.
     * @param {Date} [startDate] Mandatory for 'TIMEVOLUME' License Type.
     * @param {String} [timeVolume] Mandatory for 'TIMEVOLUME' License Type.
     * @param {String} [timeVolumePeriod] For 'TIMEVOLUME' License Type.
     * @param {String} [usedQuantity] Mandatory for 'Pay-per-Use' License Model.
     * @param {module:api/LicenseApi~createLicenseCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Netlicensing}
     */
    createLicense(active, licenseTemplateNumber, licenseeNumber, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'active' is set
      if (active === undefined || active === null) {
        throw new Error("Missing the required parameter 'active' when calling createLicense");
      }
      // verify the required parameter 'licenseTemplateNumber' is set
      if (licenseTemplateNumber === undefined || licenseTemplateNumber === null) {
        throw new Error("Missing the required parameter 'licenseTemplateNumber' when calling createLicense");
      }
      // verify the required parameter 'licenseeNumber' is set
      if (licenseeNumber === undefined || licenseeNumber === null) {
        throw new Error("Missing the required parameter 'licenseeNumber' when calling createLicense");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
        'active': active,
        'currency': opts['currency'],
        'hidden': opts['hidden'],
        'licenseTemplateNumber': licenseTemplateNumber,
        'licenseeNumber': licenseeNumber,
        'name': opts['name'],
        'number': opts['number'],
        'parentfeature': opts['parentfeature'],
        'price': opts['price'],
        'quantity': opts['quantity'],
        'startDate': opts['startDate'],
        'timeVolume': opts['timeVolume'],
        'timeVolumePeriod': opts['timeVolumePeriod'],
        'usedQuantity': opts['usedQuantity']
      };

      let authNames = ['basicAuth'];
      let contentTypes = ['application/x-www-form-urlencoded'];
      let accepts = ['application/json', 'application/xml'];
      let returnType = Netlicensing;
      return this.apiClient.callApi(
        '/license', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteLicense operation.
     * @callback module:api/LicenseApi~deleteLicenseCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Netlicensing} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete License
     * Delete License by a 'licenseNumber'
     * @param {String} licenseNumber Unique number (across all Products/Licensees of a Vendor) that identifies the License. Vendor can assign this number when creating a License or let NetLicensing generate one. Read-only after corresponding creation Transaction status is set to closed.
     * @param {module:api/LicenseApi~deleteLicenseCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Netlicensing}
     */
    deleteLicense(licenseNumber, callback) {
      let postBody = null;
      // verify the required parameter 'licenseNumber' is set
      if (licenseNumber === undefined || licenseNumber === null) {
        throw new Error("Missing the required parameter 'licenseNumber' when calling deleteLicense");
      }

      let pathParams = {
        'licenseNumber': licenseNumber
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth'];
      let contentTypes = [];
      let accepts = ['application/json', 'application/xml'];
      let returnType = Netlicensing;
      return this.apiClient.callApi(
        '/license/{licenseNumber}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getLicense operation.
     * @callback module:api/LicenseApi~getLicenseCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Netlicensing} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get License
     * Get License by a 'licenseNumber'
     * @param {String} licenseNumber Unique number (across all Products/Licensees of a Vendor) that identifies the License. Vendor can assign this number when creating a License or let NetLicensing generate one. Read-only after corresponding creation Transaction status is set to closed.
     * @param {module:api/LicenseApi~getLicenseCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Netlicensing}
     */
    getLicense(licenseNumber, callback) {
      let postBody = null;
      // verify the required parameter 'licenseNumber' is set
      if (licenseNumber === undefined || licenseNumber === null) {
        throw new Error("Missing the required parameter 'licenseNumber' when calling getLicense");
      }

      let pathParams = {
        'licenseNumber': licenseNumber
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth'];
      let contentTypes = [];
      let accepts = ['application/json', 'application/xml'];
      let returnType = Netlicensing;
      return this.apiClient.callApi(
        '/license/{licenseNumber}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listLicenses operation.
     * @callback module:api/LicenseApi~listLicensesCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Netlicensing>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List Licenses
     * Return a list of all Licenses for the current Vendor
     * @param {module:api/LicenseApi~listLicensesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Netlicensing>}
     */
    listLicenses(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth'];
      let contentTypes = [];
      let accepts = ['application/json', 'application/xml'];
      let returnType = [Netlicensing];
      return this.apiClient.callApi(
        '/license', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateLicense operation.
     * @callback module:api/LicenseApi~updateLicenseCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Netlicensing} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update License
     * Update License by a 'licenseNumber'
     * @param {String} licenseNumber Unique number (across all Products/Licensees of a Vendor) that identifies the License. Vendor can assign this number when creating a License or let NetLicensing generate one. Read-only after corresponding creation Transaction status is set to closed.
     * @param {Object} opts Optional parameters
     * @param {Boolean} [active] 
     * @param {String} [currency] Specifies currency for the License price. Check data types to discover which currencies are supported. Read-only, set from License Template on creation
     * @param {Boolean} [hidden] If set to 'true', this License is not shown in NetLicensing Shop as purchased License. Set from License Template on creation, if not specified explicitly
     * @param {String} [name] Name for the Licensed item. Set from License Template on creation, if not specified explicitly.
     * @param {String} [number] Unique number (across all Products/Licensees of a Vendor) that identifies the License. Vendor can assign this number when creating a License or let NetLicensing generate one. Read-only after corresponding creation Transaction status is set to closed.
     * @param {String} [parentfeature] 
     * @param {Number} [price] Price for the License. If > 0, it must always be accompanied by the currency specification. Read-only, set from License Template on creation
     * @param {String} [quantity] Mandatory for 'Pay-per-Use' License Model.
     * @param {Date} [startDate] For 'TIMEVOLUME' License type
     * @param {String} [timeVolume] Mandatory for 'TIMEVOLUME' License Type.
     * @param {String} [timeVolumePeriod] For 'TIMEVOLUME' License Type.
     * @param {String} [usedQuantity] Mandatory for 'Pay-per-Use' License Model.
     * @param {module:api/LicenseApi~updateLicenseCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Netlicensing}
     */
    updateLicense(licenseNumber, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'licenseNumber' is set
      if (licenseNumber === undefined || licenseNumber === null) {
        throw new Error("Missing the required parameter 'licenseNumber' when calling updateLicense");
      }

      let pathParams = {
        'licenseNumber': licenseNumber
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
        'active': opts['active'],
        'currency': opts['currency'],
        'hidden': opts['hidden'],
        'name': opts['name'],
        'number': opts['number'],
        'parentfeature': opts['parentfeature'],
        'price': opts['price'],
        'quantity': opts['quantity'],
        'startDate': opts['startDate'],
        'timeVolume': opts['timeVolume'],
        'timeVolumePeriod': opts['timeVolumePeriod'],
        'usedQuantity': opts['usedQuantity']
      };

      let authNames = ['basicAuth'];
      let contentTypes = ['application/x-www-form-urlencoded'];
      let accepts = ['application/json', 'application/xml'];
      let returnType = Netlicensing;
      return this.apiClient.callApi(
        '/license/{licenseNumber}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
