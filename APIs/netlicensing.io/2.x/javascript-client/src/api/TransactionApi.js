/**
 * Labs64 NetLicensing RESTful API Test Center
 * The Labs64 <a href='https://netlicensing.io/wiki/restful-api' target='_blank'>NetLicensing RESTful API</a> gives you access to NetLicensingâ€™s core features.<br/><br/><strong>Authentication</strong><br/>You authenticate to the NetLicensing API by providing your account credentials or simply use our demo account - <code>demo:demo</code><br/><br/>Find out more about Labs64 NetLicensing at <a href='https://netlicensing.io' target='_blank'>netlicensing.io</a>
 *
 * The version of the OpenAPI document: 2.x
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import Netlicensing from '../model/Netlicensing';

/**
* Transaction service.
* @module api/TransactionApi
* @version 2.x
*/
export default class TransactionApi {

    /**
    * Constructs a new TransactionApi. 
    * @alias module:api/TransactionApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the createTransaction operation.
     * @callback module:api/TransactionApi~createTransactionCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Netlicensing} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create Transaction
     * Creates a new Transaction
     * @param {Boolean} active Always 'true' for Transactions
     * @param {module:model/String} source AUTO Transaction for internal use only
     * @param {module:model/String} status 
     * @param {Object} opts Optional parameters
     * @param {Date} [dateClosed] 
     * @param {Date} [dateCreated] 
     * @param {String} [licenseeNumber] 
     * @param {String} [number] Unique number (across all Products of a Vendor) that identifies the Transaction
     * @param {String} [paymentMethod] 
     * @param {module:api/TransactionApi~createTransactionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Netlicensing}
     */
    createTransaction(active, source, status, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'active' is set
      if (active === undefined || active === null) {
        throw new Error("Missing the required parameter 'active' when calling createTransaction");
      }
      // verify the required parameter 'source' is set
      if (source === undefined || source === null) {
        throw new Error("Missing the required parameter 'source' when calling createTransaction");
      }
      // verify the required parameter 'status' is set
      if (status === undefined || status === null) {
        throw new Error("Missing the required parameter 'status' when calling createTransaction");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
        'active': active,
        'dateClosed': opts['dateClosed'],
        'dateCreated': opts['dateCreated'],
        'licenseeNumber': opts['licenseeNumber'],
        'number': opts['number'],
        'paymentMethod': opts['paymentMethod'],
        'source': source,
        'status': status
      };

      let authNames = ['basicAuth'];
      let contentTypes = ['application/x-www-form-urlencoded'];
      let accepts = ['application/json', 'application/xml'];
      let returnType = Netlicensing;
      return this.apiClient.callApi(
        '/transaction', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getTransaction operation.
     * @callback module:api/TransactionApi~getTransactionCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Netlicensing} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Transaction 
     * Return a Transaction by 'transactionNumber'
     * @param {String} transactionNumber Unique number (across all Products of a Vendor) that identifies the Transaction
     * @param {module:api/TransactionApi~getTransactionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Netlicensing}
     */
    getTransaction(transactionNumber, callback) {
      let postBody = null;
      // verify the required parameter 'transactionNumber' is set
      if (transactionNumber === undefined || transactionNumber === null) {
        throw new Error("Missing the required parameter 'transactionNumber' when calling getTransaction");
      }

      let pathParams = {
        'transactionNumber': transactionNumber
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth'];
      let contentTypes = [];
      let accepts = ['application/json', 'application/xml'];
      let returnType = Netlicensing;
      return this.apiClient.callApi(
        '/transaction/{transactionNumber}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listTransactions operation.
     * @callback module:api/TransactionApi~listTransactionsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Netlicensing>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List Transactions
     * Return a list of all Transactions for the current Vendor
     * @param {module:api/TransactionApi~listTransactionsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Netlicensing>}
     */
    listTransactions(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth'];
      let contentTypes = [];
      let accepts = ['application/json', 'application/xml'];
      let returnType = [Netlicensing];
      return this.apiClient.callApi(
        '/transaction', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateTransaction operation.
     * @callback module:api/TransactionApi~updateTransactionCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Netlicensing} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update Transaction
     * Sets the provided properties to a Transaction. Return an updated Transaction
     * @param {String} transactionNumber Unique number (across all Products of a Vendor) that identifies the Transaction
     * @param {Object} opts Optional parameters
     * @param {Boolean} [active] Always 'true' for Transactions
     * @param {Date} [dateClosed] 
     * @param {Date} [dateCreated] 
     * @param {String} [number] Unique number (across all Products of a Vendor) that identifies the Transaction
     * @param {String} [paymentMethod] 
     * @param {module:model/String} [source] AUTO Transaction for internal use only
     * @param {module:model/String} [status] 
     * @param {module:api/TransactionApi~updateTransactionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Netlicensing}
     */
    updateTransaction(transactionNumber, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'transactionNumber' is set
      if (transactionNumber === undefined || transactionNumber === null) {
        throw new Error("Missing the required parameter 'transactionNumber' when calling updateTransaction");
      }

      let pathParams = {
        'transactionNumber': transactionNumber
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
        'active': opts['active'],
        'dateClosed': opts['dateClosed'],
        'dateCreated': opts['dateCreated'],
        'number': opts['number'],
        'paymentMethod': opts['paymentMethod'],
        'source': opts['source'],
        'status': opts['status']
      };

      let authNames = ['basicAuth'];
      let contentTypes = ['application/x-www-form-urlencoded'];
      let accepts = ['application/json', 'application/xml'];
      let returnType = Netlicensing;
      return this.apiClient.callApi(
        '/transaction/{transactionNumber}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
