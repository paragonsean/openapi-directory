/**
 * Labs64 NetLicensing RESTful API Test Center
 * The Labs64 <a href='https://netlicensing.io/wiki/restful-api' target='_blank'>NetLicensing RESTful API</a> gives you access to NetLicensingâ€™s core features.<br/><br/><strong>Authentication</strong><br/>You authenticate to the NetLicensing API by providing your account credentials or simply use our demo account - <code>demo:demo</code><br/><br/>Find out more about Labs64 NetLicensing at <a href='https://netlicensing.io' target='_blank'>netlicensing.io</a>
 *
 * The version of the OpenAPI document: 2.x
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The ProductModule model module.
 * @module model/ProductModule
 * @version 2.x
 */
class ProductModule {
    /**
     * Constructs a new <code>ProductModule</code>.
     * @alias module:model/ProductModule
     */
    constructor() { 
        
        ProductModule.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>ProductModule</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ProductModule} obj Optional instance to populate.
     * @return {module:model/ProductModule} The populated <code>ProductModule</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ProductModule();

            if (data.hasOwnProperty('active')) {
                obj['active'] = ApiClient.convertToType(data['active'], 'Boolean');
            }
            if (data.hasOwnProperty('licensingInfo')) {
                obj['licensingInfo'] = ApiClient.convertToType(data['licensingInfo'], 'String');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('number')) {
                obj['number'] = ApiClient.convertToType(data['number'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ProductModule</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ProductModule</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['licensingInfo'] && !(typeof data['licensingInfo'] === 'string' || data['licensingInfo'] instanceof String)) {
            throw new Error("Expected the field `licensingInfo` to be a primitive type in the JSON string but got " + data['licensingInfo']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // ensure the json data is a string
        if (data['number'] && !(typeof data['number'] === 'string' || data['number'] instanceof String)) {
            throw new Error("Expected the field `number` to be a primitive type in the JSON string but got " + data['number']);
        }

        return true;
    }


}



/**
 * If set to 'false', the Product Module is disabled. Licensees can not obtain any new Licenses for this Product Module.
 * @member {Boolean} active
 */
ProductModule.prototype['active'] = undefined;

/**
 * Licensing model applied to this Product Module. Defines what License Templates can be configured for the Product Module and how Licenses for this Product Module are processed during validation.
 * @member {String} licensingInfo
 */
ProductModule.prototype['licensingInfo'] = undefined;

/**
 * Product Module name that is visible to the end customers in NetLicensing Shop.
 * @member {String} name
 */
ProductModule.prototype['name'] = undefined;

/**
 * Unique number (across all Product of a Vendor) that identifies the Product Module. Vendor can assign this number when creating a Product Module or let NetLicensing generate one. Read-only after creation of the first Licensee for the Product.
 * @member {String} number
 */
ProductModule.prototype['number'] = undefined;






export default ProductModule;

