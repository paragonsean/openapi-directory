/**
 * Labs64 NetLicensing RESTful API Test Center
 * The Labs64 <a href='https://netlicensing.io/wiki/restful-api' target='_blank'>NetLicensing RESTful API</a> gives you access to NetLicensingâ€™s core features.<br/><br/><strong>Authentication</strong><br/>You authenticate to the NetLicensing API by providing your account credentials or simply use our demo account - <code>demo:demo</code><br/><br/>Find out more about Labs64 NetLicensing at <a href='https://netlicensing.io' target='_blank'>netlicensing.io</a>
 *
 * The version of the OpenAPI document: 2.x
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The LicenseTemplate model module.
 * @module model/LicenseTemplate
 * @version 2.x
 */
class LicenseTemplate {
    /**
     * Constructs a new <code>LicenseTemplate</code>.
     * @alias module:model/LicenseTemplate
     */
    constructor() { 
        
        LicenseTemplate.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>LicenseTemplate</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/LicenseTemplate} obj Optional instance to populate.
     * @return {module:model/LicenseTemplate} The populated <code>LicenseTemplate</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new LicenseTemplate();

            if (data.hasOwnProperty('active')) {
                obj['active'] = ApiClient.convertToType(data['active'], 'Boolean');
            }
            if (data.hasOwnProperty('automatic')) {
                obj['automatic'] = ApiClient.convertToType(data['automatic'], 'Boolean');
            }
            if (data.hasOwnProperty('currency')) {
                obj['currency'] = ApiClient.convertToType(data['currency'], 'String');
            }
            if (data.hasOwnProperty('hidden')) {
                obj['hidden'] = ApiClient.convertToType(data['hidden'], 'Boolean');
            }
            if (data.hasOwnProperty('hiddenLicenses')) {
                obj['hiddenLicenses'] = ApiClient.convertToType(data['hiddenLicenses'], 'Boolean');
            }
            if (data.hasOwnProperty('licenseType')) {
                obj['licenseType'] = ApiClient.convertToType(data['licenseType'], 'String');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('number')) {
                obj['number'] = ApiClient.convertToType(data['number'], 'String');
            }
            if (data.hasOwnProperty('price')) {
                obj['price'] = ApiClient.convertToType(data['price'], 'Number');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>LicenseTemplate</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>LicenseTemplate</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['currency'] && !(typeof data['currency'] === 'string' || data['currency'] instanceof String)) {
            throw new Error("Expected the field `currency` to be a primitive type in the JSON string but got " + data['currency']);
        }
        // ensure the json data is a string
        if (data['licenseType'] && !(typeof data['licenseType'] === 'string' || data['licenseType'] instanceof String)) {
            throw new Error("Expected the field `licenseType` to be a primitive type in the JSON string but got " + data['licenseType']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // ensure the json data is a string
        if (data['number'] && !(typeof data['number'] === 'string' || data['number'] instanceof String)) {
            throw new Error("Expected the field `number` to be a primitive type in the JSON string but got " + data['number']);
        }

        return true;
    }


}



/**
 * If set to 'false', the License Template is disabled. Licensee can not obtain any new Licenses off this License Template.
 * @member {Boolean} active
 */
LicenseTemplate.prototype['active'] = undefined;

/**
 * If set to 'true', every new Licensee automatically gets one License out of this License Template on creation. Automatic Licenses must have their price set to 0.
 * @member {Boolean} automatic
 */
LicenseTemplate.prototype['automatic'] = undefined;

/**
 * Specifies currency for the License price. Check data types to discover which currencies are supported.
 * @member {String} currency
 */
LicenseTemplate.prototype['currency'] = undefined;

/**
 * If set to 'true', this License Template is not shown in NetLicensing Shop as offered for purchase.
 * @member {Boolean} hidden
 */
LicenseTemplate.prototype['hidden'] = undefined;

/**
 * If set to 'true', Licenses from this License Template are not visible to the end customer, but participate in validation.
 * @member {Boolean} hiddenLicenses
 */
LicenseTemplate.prototype['hiddenLicenses'] = undefined;

/**
 * Type of Licenses created from this License Template
 * @member {module:model/LicenseTemplate.LicenseTypeEnum} licenseType
 */
LicenseTemplate.prototype['licenseType'] = undefined;

/**
 * Name for the Licensed item.
 * @member {String} name
 */
LicenseTemplate.prototype['name'] = undefined;

/**
 * Unique number (across all Product of a Vendor) that identifies the License Template. Vendor can assign this number when creating a License Template or let NetLicensing generate one. Read-only after creation of the first License from this License Template.
 * @member {String} number
 */
LicenseTemplate.prototype['number'] = undefined;

/**
 * 'price' for the License. If >0, it must always be accompanied by the currency specification.
 * @member {Number} price
 */
LicenseTemplate.prototype['price'] = undefined;





/**
 * Allowed values for the <code>licenseType</code> property.
 * @enum {String}
 * @readonly
 */
LicenseTemplate['LicenseTypeEnum'] = {

    /**
     * value: "FEATURE"
     * @const
     */
    "FEATURE": "FEATURE",

    /**
     * value: "TIMEVOLUME"
     * @const
     */
    "TIMEVOLUME": "TIMEVOLUME"
};



export default LicenseTemplate;

