# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class Transaction(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, active: str=None, number: str=None, source: str=None, status: str=None):
        """Transaction - a model defined in OpenAPI

        :param active: The active of this Transaction.
        :param number: The number of this Transaction.
        :param source: The source of this Transaction.
        :param status: The status of this Transaction.
        """
        self.openapi_types = {
            'active': str,
            'number': str,
            'source': str,
            'status': str
        }

        self.attribute_map = {
            'active': 'active',
            'number': 'number',
            'source': 'source',
            'status': 'status'
        }

        self._active = active
        self._number = number
        self._source = source
        self._status = status

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Transaction':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Transaction of this Transaction.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def active(self):
        """Gets the active of this Transaction.

        Always true for the Transactions

        :return: The active of this Transaction.
        :rtype: str
        """
        return self._active

    @active.setter
    def active(self, active):
        """Sets the active of this Transaction.

        Always true for the Transactions

        :param active: The active of this Transaction.
        :type active: str
        """

        self._active = active

    @property
    def number(self):
        """Gets the number of this Transaction.

        Unique number (across all Products of a Vendor) that identifies the Transaction. This number is always generated by NetLicensing.

        :return: The number of this Transaction.
        :rtype: str
        """
        return self._number

    @number.setter
    def number(self, number):
        """Sets the number of this Transaction.

        Unique number (across all Products of a Vendor) that identifies the Transaction. This number is always generated by NetLicensing.

        :param number: The number of this Transaction.
        :type number: str
        """

        self._number = number

    @property
    def source(self):
        """Gets the source of this Transaction.


        :return: The source of this Transaction.
        :rtype: str
        """
        return self._source

    @source.setter
    def source(self, source):
        """Sets the source of this Transaction.


        :param source: The source of this Transaction.
        :type source: str
        """
        allowed_values = ["SHOP"]  # noqa: E501
        if source not in allowed_values:
            raise ValueError(
                "Invalid value for `source` ({0}), must be one of {1}"
                .format(source, allowed_values)
            )

        self._source = source

    @property
    def status(self):
        """Gets the status of this Transaction.


        :return: The status of this Transaction.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this Transaction.


        :param status: The status of this Transaction.
        :type status: str
        """
        allowed_values = ["CANCELLED", "CLOSED", "PENDING"]  # noqa: E501
        if status not in allowed_values:
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"
                .format(status, allowed_values)
            )

        self._status = status
