# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class License(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, active: bool=None, currency: str=None, hidden: bool=None, name: str=None, number: str=None, price: float=None):
        """License - a model defined in OpenAPI

        :param active: The active of this License.
        :param currency: The currency of this License.
        :param hidden: The hidden of this License.
        :param name: The name of this License.
        :param number: The number of this License.
        :param price: The price of this License.
        """
        self.openapi_types = {
            'active': bool,
            'currency': str,
            'hidden': bool,
            'name': str,
            'number': str,
            'price': float
        }

        self.attribute_map = {
            'active': 'active',
            'currency': 'currency',
            'hidden': 'hidden',
            'name': 'name',
            'number': 'number',
            'price': 'price'
        }

        self._active = active
        self._currency = currency
        self._hidden = hidden
        self._name = name
        self._number = number
        self._price = price

    @classmethod
    def from_dict(cls, dikt: dict) -> 'License':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The License of this License.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def active(self):
        """Gets the active of this License.

        If set to 'false', the License is disabled. License can be re-enabled, but as long as it is disabled, the License is excluded from the validation process.

        :return: The active of this License.
        :rtype: bool
        """
        return self._active

    @active.setter
    def active(self, active):
        """Sets the active of this License.

        If set to 'false', the License is disabled. License can be re-enabled, but as long as it is disabled, the License is excluded from the validation process.

        :param active: The active of this License.
        :type active: bool
        """

        self._active = active

    @property
    def currency(self):
        """Gets the currency of this License.

        Specifies currency for the License price. Check data types to discover which currencies are supported. Read-only, set from License Template on creation.

        :return: The currency of this License.
        :rtype: str
        """
        return self._currency

    @currency.setter
    def currency(self, currency):
        """Sets the currency of this License.

        Specifies currency for the License price. Check data types to discover which currencies are supported. Read-only, set from License Template on creation.

        :param currency: The currency of this License.
        :type currency: str
        """

        self._currency = currency

    @property
    def hidden(self):
        """Gets the hidden of this License.

        If set to 'true', this License is not shown in NetLicensing Shop as purchased License. Set from License Template on creation, if not specified explicitly.

        :return: The hidden of this License.
        :rtype: bool
        """
        return self._hidden

    @hidden.setter
    def hidden(self, hidden):
        """Sets the hidden of this License.

        If set to 'true', this License is not shown in NetLicensing Shop as purchased License. Set from License Template on creation, if not specified explicitly.

        :param hidden: The hidden of this License.
        :type hidden: bool
        """

        self._hidden = hidden

    @property
    def name(self):
        """Gets the name of this License.

        Name for the Licensed item. Set from License Template on creation, if not specified explicitly.

        :return: The name of this License.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this License.

        Name for the Licensed item. Set from License Template on creation, if not specified explicitly.

        :param name: The name of this License.
        :type name: str
        """

        self._name = name

    @property
    def number(self):
        """Gets the number of this License.

        Unique number (across all Products/Licensees of a Vendor) that identifies the License. Vendor can assign this number when creating a License or let NetLicensing generate one. Read-only after corresponding creation Transaction status is set to closed.

        :return: The number of this License.
        :rtype: str
        """
        return self._number

    @number.setter
    def number(self, number):
        """Sets the number of this License.

        Unique number (across all Products/Licensees of a Vendor) that identifies the License. Vendor can assign this number when creating a License or let NetLicensing generate one. Read-only after corresponding creation Transaction status is set to closed.

        :param number: The number of this License.
        :type number: str
        """

        self._number = number

    @property
    def price(self):
        """Gets the price of this License.

        'price' for the License. If >0, it must always be accompanied by the currency specification. Read-only, set from License Template on creation.

        :return: The price of this License.
        :rtype: float
        """
        return self._price

    @price.setter
    def price(self, price):
        """Sets the price of this License.

        'price' for the License. If >0, it must always be accompanied by the currency specification. Read-only, set from License Template on creation.

        :param price: The price of this License.
        :type price: float
        """

        self._price = price
