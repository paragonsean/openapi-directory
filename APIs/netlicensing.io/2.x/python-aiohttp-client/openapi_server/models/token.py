# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class Token(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, active: bool=None, expiration_time: datetime=None, license_number: str=None, number: str=None, shop_url: str=None, token_type: str=None, vendor_number: str=None):
        """Token - a model defined in OpenAPI

        :param active: The active of this Token.
        :param expiration_time: The expiration_time of this Token.
        :param license_number: The license_number of this Token.
        :param number: The number of this Token.
        :param shop_url: The shop_url of this Token.
        :param token_type: The token_type of this Token.
        :param vendor_number: The vendor_number of this Token.
        """
        self.openapi_types = {
            'active': bool,
            'expiration_time': datetime,
            'license_number': str,
            'number': str,
            'shop_url': str,
            'token_type': str,
            'vendor_number': str
        }

        self.attribute_map = {
            'active': 'active',
            'expiration_time': 'expirationTime',
            'license_number': 'licenseNumber',
            'number': 'number',
            'shop_url': 'shopURL',
            'token_type': 'tokenType',
            'vendor_number': 'vendorNumber'
        }

        self._active = active
        self._expiration_time = expiration_time
        self._license_number = license_number
        self._number = number
        self._shop_url = shop_url
        self._token_type = token_type
        self._vendor_number = vendor_number

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Token':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Token of this Token.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def active(self):
        """Gets the active of this Token.


        :return: The active of this Token.
        :rtype: bool
        """
        return self._active

    @active.setter
    def active(self, active):
        """Sets the active of this Token.


        :param active: The active of this Token.
        :type active: bool
        """

        self._active = active

    @property
    def expiration_time(self):
        """Gets the expiration_time of this Token.


        :return: The expiration_time of this Token.
        :rtype: datetime
        """
        return self._expiration_time

    @expiration_time.setter
    def expiration_time(self, expiration_time):
        """Sets the expiration_time of this Token.


        :param expiration_time: The expiration_time of this Token.
        :type expiration_time: datetime
        """

        self._expiration_time = expiration_time

    @property
    def license_number(self):
        """Gets the license_number of this Token.


        :return: The license_number of this Token.
        :rtype: str
        """
        return self._license_number

    @license_number.setter
    def license_number(self, license_number):
        """Sets the license_number of this Token.


        :param license_number: The license_number of this Token.
        :type license_number: str
        """

        self._license_number = license_number

    @property
    def number(self):
        """Gets the number of this Token.


        :return: The number of this Token.
        :rtype: str
        """
        return self._number

    @number.setter
    def number(self, number):
        """Sets the number of this Token.


        :param number: The number of this Token.
        :type number: str
        """

        self._number = number

    @property
    def shop_url(self):
        """Gets the shop_url of this Token.


        :return: The shop_url of this Token.
        :rtype: str
        """
        return self._shop_url

    @shop_url.setter
    def shop_url(self, shop_url):
        """Sets the shop_url of this Token.


        :param shop_url: The shop_url of this Token.
        :type shop_url: str
        """

        self._shop_url = shop_url

    @property
    def token_type(self):
        """Gets the token_type of this Token.


        :return: The token_type of this Token.
        :rtype: str
        """
        return self._token_type

    @token_type.setter
    def token_type(self, token_type):
        """Sets the token_type of this Token.


        :param token_type: The token_type of this Token.
        :type token_type: str
        """

        self._token_type = token_type

    @property
    def vendor_number(self):
        """Gets the vendor_number of this Token.


        :return: The vendor_number of this Token.
        :rtype: str
        """
        return self._vendor_number

    @vendor_number.setter
    def vendor_number(self, vendor_number):
        """Sets the vendor_number of this Token.


        :param vendor_number: The vendor_number of this Token.
        :type vendor_number: str
        """

        self._vendor_number = vendor_number
