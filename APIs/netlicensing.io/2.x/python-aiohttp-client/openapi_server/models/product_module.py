# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ProductModule(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, active: bool=None, licensing_info: str=None, name: str=None, number: str=None):
        """ProductModule - a model defined in OpenAPI

        :param active: The active of this ProductModule.
        :param licensing_info: The licensing_info of this ProductModule.
        :param name: The name of this ProductModule.
        :param number: The number of this ProductModule.
        """
        self.openapi_types = {
            'active': bool,
            'licensing_info': str,
            'name': str,
            'number': str
        }

        self.attribute_map = {
            'active': 'active',
            'licensing_info': 'licensingInfo',
            'name': 'name',
            'number': 'number'
        }

        self._active = active
        self._licensing_info = licensing_info
        self._name = name
        self._number = number

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ProductModule':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ProductModule of this ProductModule.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def active(self):
        """Gets the active of this ProductModule.

        If set to 'false', the Product Module is disabled. Licensees can not obtain any new Licenses for this Product Module.

        :return: The active of this ProductModule.
        :rtype: bool
        """
        return self._active

    @active.setter
    def active(self, active):
        """Sets the active of this ProductModule.

        If set to 'false', the Product Module is disabled. Licensees can not obtain any new Licenses for this Product Module.

        :param active: The active of this ProductModule.
        :type active: bool
        """

        self._active = active

    @property
    def licensing_info(self):
        """Gets the licensing_info of this ProductModule.

        Licensing model applied to this Product Module. Defines what License Templates can be configured for the Product Module and how Licenses for this Product Module are processed during validation.

        :return: The licensing_info of this ProductModule.
        :rtype: str
        """
        return self._licensing_info

    @licensing_info.setter
    def licensing_info(self, licensing_info):
        """Sets the licensing_info of this ProductModule.

        Licensing model applied to this Product Module. Defines what License Templates can be configured for the Product Module and how Licenses for this Product Module are processed during validation.

        :param licensing_info: The licensing_info of this ProductModule.
        :type licensing_info: str
        """

        self._licensing_info = licensing_info

    @property
    def name(self):
        """Gets the name of this ProductModule.

        Product Module name that is visible to the end customers in NetLicensing Shop.

        :return: The name of this ProductModule.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ProductModule.

        Product Module name that is visible to the end customers in NetLicensing Shop.

        :param name: The name of this ProductModule.
        :type name: str
        """

        self._name = name

    @property
    def number(self):
        """Gets the number of this ProductModule.

        Unique number (across all Product of a Vendor) that identifies the Product Module. Vendor can assign this number when creating a Product Module or let NetLicensing generate one. Read-only after creation of the first Licensee for the Product.

        :return: The number of this ProductModule.
        :rtype: str
        """
        return self._number

    @number.setter
    def number(self, number):
        """Sets the number of this ProductModule.

        Unique number (across all Product of a Vendor) that identifies the Product Module. Vendor can assign this number when creating a Product Module or let NetLicensing generate one. Read-only after creation of the first Licensee for the Product.

        :param number: The number of this ProductModule.
        :type number: str
        """

        self._number = number
