# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class Product(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, active: bool=None, licensee_auto_create: bool=None, name: str=None, number: str=None, version: str=None):
        """Product - a model defined in OpenAPI

        :param active: The active of this Product.
        :param licensee_auto_create: The licensee_auto_create of this Product.
        :param name: The name of this Product.
        :param number: The number of this Product.
        :param version: The version of this Product.
        """
        self.openapi_types = {
            'active': bool,
            'licensee_auto_create': bool,
            'name': str,
            'number': str,
            'version': str
        }

        self.attribute_map = {
            'active': 'active',
            'licensee_auto_create': 'licenseeAutoCreate',
            'name': 'name',
            'number': 'number',
            'version': 'version'
        }

        self._active = active
        self._licensee_auto_create = licensee_auto_create
        self._name = name
        self._number = number
        self._version = version

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Product':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Product of this Product.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def active(self):
        """Gets the active of this Product.

        If set to 'false', the Product is disabled. No new Licensees can be registered for the Product, existing Licensees can not obtain new Licenses

        :return: The active of this Product.
        :rtype: bool
        """
        return self._active

    @active.setter
    def active(self, active):
        """Sets the active of this Product.

        If set to 'false', the Product is disabled. No new Licensees can be registered for the Product, existing Licensees can not obtain new Licenses

        :param active: The active of this Product.
        :type active: bool
        """

        self._active = active

    @property
    def licensee_auto_create(self):
        """Gets the licensee_auto_create of this Product.

        If set to 'true', non-existing Licensees will be created at first validation attempt.

        :return: The licensee_auto_create of this Product.
        :rtype: bool
        """
        return self._licensee_auto_create

    @licensee_auto_create.setter
    def licensee_auto_create(self, licensee_auto_create):
        """Sets the licensee_auto_create of this Product.

        If set to 'true', non-existing Licensees will be created at first validation attempt.

        :param licensee_auto_create: The licensee_auto_create of this Product.
        :type licensee_auto_create: bool
        """

        self._licensee_auto_create = licensee_auto_create

    @property
    def name(self):
        """Gets the name of this Product.

        Product name. Together with the version identifies the Product for the end customer

        :return: The name of this Product.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Product.

        Product name. Together with the version identifies the Product for the end customer

        :param name: The name of this Product.
        :type name: str
        """

        self._name = name

    @property
    def number(self):
        """Gets the number of this Product.

        Unique number that identifies the Product. Vendor can assign this number when creating a Product or let NetLicensing generate one. Read-only after creation of the first Licensee for the Product.

        :return: The number of this Product.
        :rtype: str
        """
        return self._number

    @number.setter
    def number(self, number):
        """Sets the number of this Product.

        Unique number that identifies the Product. Vendor can assign this number when creating a Product or let NetLicensing generate one. Read-only after creation of the first Licensee for the Product.

        :param number: The number of this Product.
        :type number: str
        """

        self._number = number

    @property
    def version(self):
        """Gets the version of this Product.

        Product version. Convenience parameter, additional to the Product name.

        :return: The version of this Product.
        :rtype: str
        """
        return self._version

    @version.setter
    def version(self, version):
        """Sets the version of this Product.

        Product version. Convenience parameter, additional to the Product name.

        :param version: The version of this Product.
        :type version: str
        """

        self._version = version
