# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class LicenseTemplate(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, active: bool=None, automatic: bool=None, currency: str=None, hidden: bool=None, hidden_licenses: bool=None, license_type: str=None, name: str=None, number: str=None, price: float=None):
        """LicenseTemplate - a model defined in OpenAPI

        :param active: The active of this LicenseTemplate.
        :param automatic: The automatic of this LicenseTemplate.
        :param currency: The currency of this LicenseTemplate.
        :param hidden: The hidden of this LicenseTemplate.
        :param hidden_licenses: The hidden_licenses of this LicenseTemplate.
        :param license_type: The license_type of this LicenseTemplate.
        :param name: The name of this LicenseTemplate.
        :param number: The number of this LicenseTemplate.
        :param price: The price of this LicenseTemplate.
        """
        self.openapi_types = {
            'active': bool,
            'automatic': bool,
            'currency': str,
            'hidden': bool,
            'hidden_licenses': bool,
            'license_type': str,
            'name': str,
            'number': str,
            'price': float
        }

        self.attribute_map = {
            'active': 'active',
            'automatic': 'automatic',
            'currency': 'currency',
            'hidden': 'hidden',
            'hidden_licenses': 'hiddenLicenses',
            'license_type': 'licenseType',
            'name': 'name',
            'number': 'number',
            'price': 'price'
        }

        self._active = active
        self._automatic = automatic
        self._currency = currency
        self._hidden = hidden
        self._hidden_licenses = hidden_licenses
        self._license_type = license_type
        self._name = name
        self._number = number
        self._price = price

    @classmethod
    def from_dict(cls, dikt: dict) -> 'LicenseTemplate':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The LicenseTemplate of this LicenseTemplate.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def active(self):
        """Gets the active of this LicenseTemplate.

        If set to 'false', the License Template is disabled. Licensee can not obtain any new Licenses off this License Template.

        :return: The active of this LicenseTemplate.
        :rtype: bool
        """
        return self._active

    @active.setter
    def active(self, active):
        """Sets the active of this LicenseTemplate.

        If set to 'false', the License Template is disabled. Licensee can not obtain any new Licenses off this License Template.

        :param active: The active of this LicenseTemplate.
        :type active: bool
        """

        self._active = active

    @property
    def automatic(self):
        """Gets the automatic of this LicenseTemplate.

        If set to 'true', every new Licensee automatically gets one License out of this License Template on creation. Automatic Licenses must have their price set to 0.

        :return: The automatic of this LicenseTemplate.
        :rtype: bool
        """
        return self._automatic

    @automatic.setter
    def automatic(self, automatic):
        """Sets the automatic of this LicenseTemplate.

        If set to 'true', every new Licensee automatically gets one License out of this License Template on creation. Automatic Licenses must have their price set to 0.

        :param automatic: The automatic of this LicenseTemplate.
        :type automatic: bool
        """

        self._automatic = automatic

    @property
    def currency(self):
        """Gets the currency of this LicenseTemplate.

        Specifies currency for the License price. Check data types to discover which currencies are supported.

        :return: The currency of this LicenseTemplate.
        :rtype: str
        """
        return self._currency

    @currency.setter
    def currency(self, currency):
        """Sets the currency of this LicenseTemplate.

        Specifies currency for the License price. Check data types to discover which currencies are supported.

        :param currency: The currency of this LicenseTemplate.
        :type currency: str
        """

        self._currency = currency

    @property
    def hidden(self):
        """Gets the hidden of this LicenseTemplate.

        If set to 'true', this License Template is not shown in NetLicensing Shop as offered for purchase.

        :return: The hidden of this LicenseTemplate.
        :rtype: bool
        """
        return self._hidden

    @hidden.setter
    def hidden(self, hidden):
        """Sets the hidden of this LicenseTemplate.

        If set to 'true', this License Template is not shown in NetLicensing Shop as offered for purchase.

        :param hidden: The hidden of this LicenseTemplate.
        :type hidden: bool
        """

        self._hidden = hidden

    @property
    def hidden_licenses(self):
        """Gets the hidden_licenses of this LicenseTemplate.

        If set to 'true', Licenses from this License Template are not visible to the end customer, but participate in validation.

        :return: The hidden_licenses of this LicenseTemplate.
        :rtype: bool
        """
        return self._hidden_licenses

    @hidden_licenses.setter
    def hidden_licenses(self, hidden_licenses):
        """Sets the hidden_licenses of this LicenseTemplate.

        If set to 'true', Licenses from this License Template are not visible to the end customer, but participate in validation.

        :param hidden_licenses: The hidden_licenses of this LicenseTemplate.
        :type hidden_licenses: bool
        """

        self._hidden_licenses = hidden_licenses

    @property
    def license_type(self):
        """Gets the license_type of this LicenseTemplate.

        Type of Licenses created from this License Template

        :return: The license_type of this LicenseTemplate.
        :rtype: str
        """
        return self._license_type

    @license_type.setter
    def license_type(self, license_type):
        """Sets the license_type of this LicenseTemplate.

        Type of Licenses created from this License Template

        :param license_type: The license_type of this LicenseTemplate.
        :type license_type: str
        """
        allowed_values = ["FEATURE", "TIMEVOLUME"]  # noqa: E501
        if license_type not in allowed_values:
            raise ValueError(
                "Invalid value for `license_type` ({0}), must be one of {1}"
                .format(license_type, allowed_values)
            )

        self._license_type = license_type

    @property
    def name(self):
        """Gets the name of this LicenseTemplate.

        Name for the Licensed item.

        :return: The name of this LicenseTemplate.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this LicenseTemplate.

        Name for the Licensed item.

        :param name: The name of this LicenseTemplate.
        :type name: str
        """

        self._name = name

    @property
    def number(self):
        """Gets the number of this LicenseTemplate.

        Unique number (across all Product of a Vendor) that identifies the License Template. Vendor can assign this number when creating a License Template or let NetLicensing generate one. Read-only after creation of the first License from this License Template.

        :return: The number of this LicenseTemplate.
        :rtype: str
        """
        return self._number

    @number.setter
    def number(self, number):
        """Sets the number of this LicenseTemplate.

        Unique number (across all Product of a Vendor) that identifies the License Template. Vendor can assign this number when creating a License Template or let NetLicensing generate one. Read-only after creation of the first License from this License Template.

        :param number: The number of this LicenseTemplate.
        :type number: str
        """

        self._number = number

    @property
    def price(self):
        """Gets the price of this LicenseTemplate.

        'price' for the License. If >0, it must always be accompanied by the currency specification.

        :return: The price of this LicenseTemplate.
        :rtype: float
        """
        return self._price

    @price.setter
    def price(self, price):
        """Sets the price of this LicenseTemplate.

        'price' for the License. If >0, it must always be accompanied by the currency specification.

        :param price: The price of this LicenseTemplate.
        :type price: float
        """

        self._price = price
