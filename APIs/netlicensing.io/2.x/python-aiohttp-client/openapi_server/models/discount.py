# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class Discount(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, amount_percent: str=None, currency: str=None, total_price: float=None):
        """Discount - a model defined in OpenAPI

        :param amount_percent: The amount_percent of this Discount.
        :param currency: The currency of this Discount.
        :param total_price: The total_price of this Discount.
        """
        self.openapi_types = {
            'amount_percent': str,
            'currency': str,
            'total_price': float
        }

        self.attribute_map = {
            'amount_percent': 'amountPercent',
            'currency': 'currency',
            'total_price': 'totalPrice'
        }

        self._amount_percent = amount_percent
        self._currency = currency
        self._total_price = total_price

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Discount':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The discount of this Discount.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def amount_percent(self):
        """Gets the amount_percent of this Discount.


        :return: The amount_percent of this Discount.
        :rtype: str
        """
        return self._amount_percent

    @amount_percent.setter
    def amount_percent(self, amount_percent):
        """Sets the amount_percent of this Discount.


        :param amount_percent: The amount_percent of this Discount.
        :type amount_percent: str
        """

        self._amount_percent = amount_percent

    @property
    def currency(self):
        """Gets the currency of this Discount.


        :return: The currency of this Discount.
        :rtype: str
        """
        return self._currency

    @currency.setter
    def currency(self, currency):
        """Sets the currency of this Discount.


        :param currency: The currency of this Discount.
        :type currency: str
        """

        self._currency = currency

    @property
    def total_price(self):
        """Gets the total_price of this Discount.


        :return: The total_price of this Discount.
        :rtype: float
        """
        return self._total_price

    @total_price.setter
    def total_price(self, total_price):
        """Sets the total_price of this Discount.


        :param total_price: The total_price of this Discount.
        :type total_price: float
        """

        self._total_price = total_price
