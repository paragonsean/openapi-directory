/**
 * LinQR
 * This is LinQR QR Code API documentation. This API allows you to generate custom, visually attractive QR Codes. The cloud infrastructure guarantees high availability and autoscalability of the service. You can generate hundreds of thousands of images this way and use them however you like.  We realize that your API use case may require custom solutions, and perhaps we lack functionality that is very important to you. In that case feel free to write an email to our support and tell us about it. We have repeatedly added new functions of our service directly after the requests of our users.  **General remarks:**  - maximum request size is fixed at 32MB.  - request timeout is fixed at 180 seconds.
 *
 * The version of the OpenAPI document: 2.0
 * Contact: support@linqr.app
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import ECLevel from './ECLevel';

/**
 * The Size model module.
 * @module model/Size
 * @version 2.0
 */
class Size {
    /**
     * Constructs a new <code>Size</code>.
     * @alias module:model/Size
     */
    constructor() { 
        
        Size.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
        obj['quiet_zone'] = 4;
        obj['width'] = 200;
    }

    /**
     * Constructs a <code>Size</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Size} obj Optional instance to populate.
     * @return {module:model/Size} The populated <code>Size</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Size();

            if (data.hasOwnProperty('error_correction')) {
                obj['error_correction'] = ApiClient.convertToType(data['error_correction'], ECLevel);
            }
            if (data.hasOwnProperty('quiet_zone')) {
                obj['quiet_zone'] = ApiClient.convertToType(data['quiet_zone'], 'Number');
            }
            if (data.hasOwnProperty('width')) {
                obj['width'] = ApiClient.convertToType(data['width'], 'Number');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Size</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Size</code>.
     */
    static validateJSON(data) {

        return true;
    }


}



/**
 * Error correction level for generated QR Code. Correction mechanism allows to restore some encoded data if it is partially unreadable (e.g. physically damaged). Literals correspond to amount of data (QR Code area) which can be restored: * `L`: approx. 7% * `M`: approx. 15% * `Q`: approx. 25% * `H`: approx. 30%  Higher correction level causes in bigger (more data modules) resulting QR Code. **Note:** If image is embedded in the QR Code, `H` correction level is chosen automatically and overrides user input.  For more information please refer to: <a href=\"https://www.qrcode.com/en/about/error_correction.html\" rel=\"noopener noreferrer\" target=\"_blank\" >QRCode.com</a>
 * @member {module:model/ECLevel} error_correction
 */
Size.prototype['error_correction'] = undefined;

/**
 * Default size of margin with background color around the generated QR Code. This length is expressed as number of modules of the Code. Recommended value is 4, but most readers allow you to read the code with smaller or zero margin.  For more information please refer to: <a href=\"https://www.qrcode.com/en/howto/code.html\" rel=\"noopener noreferrer\" target=\"_blank\" >QRCode.com</a>.
 * @member {Number} quiet_zone
 * @default 4
 */
Size.prototype['quiet_zone'] = 4;

/**
 * Width (and height, as the QR Codes are squares) in pixels of the generated image. If the requested value is `float` it will be casted to nearest `int`.
 * @member {Number} width
 * @default 200
 */
Size.prototype['width'] = 200;






export default Size;

