/**
 * LinQR
 * This is LinQR QR Code API documentation. This API allows you to generate custom, visually attractive QR Codes. The cloud infrastructure guarantees high availability and autoscalability of the service. You can generate hundreds of thousands of images this way and use them however you like.  We realize that your API use case may require custom solutions, and perhaps we lack functionality that is very important to you. In that case feel free to write an email to our support and tell us about it. We have repeatedly added new functions of our service directly after the requests of our users.  **General remarks:**  - maximum request size is fixed at 32MB.  - request timeout is fixed at 180 seconds.
 *
 * The version of the OpenAPI document: 2.0
 * Contact: support@linqr.app
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import AutoQRCode from '../model/AutoQRCode';
import AutoQRCodeMultipartBody from '../model/AutoQRCodeMultipartBody';
import ContactQRCode from '../model/ContactQRCode';
import ContactQRCodeMultipartBody from '../model/ContactQRCodeMultipartBody';
import CryptoPaymentQRCode from '../model/CryptoPaymentQRCode';
import CryptoPaymentQRCodeMultipartBody from '../model/CryptoPaymentQRCodeMultipartBody';
import EmailQRCode from '../model/EmailQRCode';
import EmailQRCodeMultipartBody from '../model/EmailQRCodeMultipartBody';
import GenericError from '../model/GenericError';
import GeolocationQRCode from '../model/GeolocationQRCode';
import GeolocationQRCodeMultipartBody from '../model/GeolocationQRCodeMultipartBody';
import HTTPValidationError from '../model/HTTPValidationError';
import PhoneQRCode from '../model/PhoneQRCode';
import PhoneQRCodeMultipartBody from '../model/PhoneQRCodeMultipartBody';
import SMSQRCode from '../model/SMSQRCode';
import SMSQRCodeMultipartBody from '../model/SMSQRCodeMultipartBody';
import TextQRCode from '../model/TextQRCode';
import TextQRCodeMultipartBody from '../model/TextQRCodeMultipartBody';
import WiFiQRCode from '../model/WiFiQRCode';
import WiFiQRCodeMultipartBody from '../model/WiFiQRCodeMultipartBody';

/**
* SingleQRCode service.
* @module api/SingleQRCodeApi
* @version 2.0
*/
export default class SingleQRCodeApi {

    /**
    * Constructs a new SingleQRCodeApi. 
    * @alias module:api/SingleQRCodeApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the dispatcherQrcodeContactPost operation.
     * @callback module:api/SingleQRCodeApi~dispatcherQrcodeContactPostCallback
     * @param {String} error Error message, if any.
     * @param {File} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Contact QR Code
     * This endpoint allows you to create a QR Code that allows user to quickly add contact information to the phone book. The code contains an appropriately encoded electronic business card. After scanning, the device prompts to save the contact in the phone book.
     * @param {Object} opts Optional parameters
     * @param {module:model/ContactQRCode} [contactQRCode] 
     * @param {module:api/SingleQRCodeApi~dispatcherQrcodeContactPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link File}
     */
    dispatcherQrcodeContactPost(opts, callback) {
      opts = opts || {};
      let postBody = opts['contactQRCode'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Byvalue', 'RapidAPI'];
      let contentTypes = ['application/json', 'multipart/form-data'];
      let accepts = ['application/pdf', 'application/postscript', 'image/jpeg', 'image/png', 'image/svg+xml', 'image/webp', 'application/json', 'text/plain'];
      let returnType = File;
      return this.apiClient.callApi(
        '/qrcode/contact', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the dispatcherQrcodeCryptoPost operation.
     * @callback module:api/SingleQRCodeApi~dispatcherQrcodeCryptoPostCallback
     * @param {String} error Error message, if any.
     * @param {File} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Cryptocurrency payment QR Code
     * This endpoint allows you to create a QR Code that allows user to make a quick cryptocurrency transfer. The code contains appropriately encoded data for the payment. After scanning the code, the cryptocurrency wallet application asks user to perform the transfer without rewriting all necessary data.
     * @param {Object} opts Optional parameters
     * @param {module:model/CryptoPaymentQRCode} [cryptoPaymentQRCode] 
     * @param {module:api/SingleQRCodeApi~dispatcherQrcodeCryptoPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link File}
     */
    dispatcherQrcodeCryptoPost(opts, callback) {
      opts = opts || {};
      let postBody = opts['cryptoPaymentQRCode'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Byvalue', 'RapidAPI'];
      let contentTypes = ['application/json', 'multipart/form-data'];
      let accepts = ['application/pdf', 'application/postscript', 'image/jpeg', 'image/png', 'image/svg+xml', 'image/webp', 'application/json', 'text/plain'];
      let returnType = File;
      return this.apiClient.callApi(
        '/qrcode/crypto', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the dispatcherQrcodeEmailPost operation.
     * @callback module:api/SingleQRCodeApi~dispatcherQrcodeEmailPostCallback
     * @param {String} error Error message, if any.
     * @param {File} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Email QR Code
     * This endpoint allows the creation of a QR Code allowing the user to quickly send an email. The code contains an appropriately encoded message template. After scanning, the device starts the e-mail client with pre-filled specified fields.
     * @param {Object} opts Optional parameters
     * @param {module:model/EmailQRCode} [emailQRCode] 
     * @param {module:api/SingleQRCodeApi~dispatcherQrcodeEmailPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link File}
     */
    dispatcherQrcodeEmailPost(opts, callback) {
      opts = opts || {};
      let postBody = opts['emailQRCode'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Byvalue', 'RapidAPI'];
      let contentTypes = ['application/json', 'multipart/form-data'];
      let accepts = ['application/pdf', 'application/postscript', 'image/jpeg', 'image/png', 'image/svg+xml', 'image/webp', 'application/json', 'text/plain'];
      let returnType = File;
      return this.apiClient.callApi(
        '/qrcode/email', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the dispatcherQrcodeGeoPost operation.
     * @callback module:api/SingleQRCodeApi~dispatcherQrcodeGeoPostCallback
     * @param {String} error Error message, if any.
     * @param {File} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Geolocation QR Code
     * This endpoint allows you to create a QR Code that allows to share location with the user. The code contains appropriately encoded geographic coordinates. After scanning the code, device maps application is invoked, pointing to the selected location (address).
     * @param {Object} opts Optional parameters
     * @param {module:model/GeolocationQRCode} [geolocationQRCode] 
     * @param {module:api/SingleQRCodeApi~dispatcherQrcodeGeoPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link File}
     */
    dispatcherQrcodeGeoPost(opts, callback) {
      opts = opts || {};
      let postBody = opts['geolocationQRCode'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Byvalue', 'RapidAPI'];
      let contentTypes = ['application/json', 'multipart/form-data'];
      let accepts = ['application/pdf', 'application/postscript', 'image/jpeg', 'image/png', 'image/svg+xml', 'image/webp', 'application/json', 'text/plain'];
      let returnType = File;
      return this.apiClient.callApi(
        '/qrcode/geo', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the dispatcherQrcodePhonePost operation.
     * @callback module:api/SingleQRCodeApi~dispatcherQrcodePhonePostCallback
     * @param {String} error Error message, if any.
     * @param {File} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Telephone QR Code
     * This endpoint allows you to create a QR Code that allows user to make quick telephone call. The code contains appropriately encoded telephone number. After scanning the code, device dialer is invoked with prefilled phone number. To make a call, the user only needs to press the green phone key.
     * @param {Object} opts Optional parameters
     * @param {module:model/PhoneQRCode} [phoneQRCode] 
     * @param {module:api/SingleQRCodeApi~dispatcherQrcodePhonePostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link File}
     */
    dispatcherQrcodePhonePost(opts, callback) {
      opts = opts || {};
      let postBody = opts['phoneQRCode'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Byvalue', 'RapidAPI'];
      let contentTypes = ['application/json', 'multipart/form-data'];
      let accepts = ['application/pdf', 'application/postscript', 'image/jpeg', 'image/png', 'image/svg+xml', 'image/webp', 'application/json', 'text/plain'];
      let returnType = File;
      return this.apiClient.callApi(
        '/qrcode/phone', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the dispatcherQrcodePost operation.
     * @callback module:api/SingleQRCodeApi~dispatcherQrcodePostCallback
     * @param {String} error Error message, if any.
     * @param {File} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Arbitrary data type QR Code
     * This endpoint aggregates the functionality of all other endpoints in the group. The data type in the `data` field is recognized automatically and the data is encoded in an appropriate way.
     * @param {Object} opts Optional parameters
     * @param {module:model/AutoQRCode} [autoQRCode] 
     * @param {module:api/SingleQRCodeApi~dispatcherQrcodePostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link File}
     */
    dispatcherQrcodePost(opts, callback) {
      opts = opts || {};
      let postBody = opts['autoQRCode'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Byvalue', 'RapidAPI'];
      let contentTypes = ['application/json', 'multipart/form-data'];
      let accepts = ['application/pdf', 'application/postscript', 'image/jpeg', 'image/png', 'image/svg+xml', 'image/webp', 'application/json', 'text/plain'];
      let returnType = File;
      return this.apiClient.callApi(
        '/qrcode', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the dispatcherQrcodeSmsPost operation.
     * @callback module:api/SingleQRCodeApi~dispatcherQrcodeSmsPostCallback
     * @param {String} error Error message, if any.
     * @param {File} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * SMS QR Code
     * This endpoint allows you to create a QR Code that allows user to quickly send SMS. The code contains appropriately encoded recipient number and message template. After scanning the code, device message application is invoked with prefilled phone number and text, ready to be sent. To send a SMS, the user only needs to press *Send* button.
     * @param {Object} opts Optional parameters
     * @param {module:model/SMSQRCode} [sMSQRCode] 
     * @param {module:api/SingleQRCodeApi~dispatcherQrcodeSmsPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link File}
     */
    dispatcherQrcodeSmsPost(opts, callback) {
      opts = opts || {};
      let postBody = opts['sMSQRCode'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Byvalue', 'RapidAPI'];
      let contentTypes = ['application/json', 'multipart/form-data'];
      let accepts = ['application/pdf', 'application/postscript', 'image/jpeg', 'image/png', 'image/svg+xml', 'image/webp', 'application/json', 'text/plain'];
      let returnType = File;
      return this.apiClient.callApi(
        '/qrcode/sms', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the dispatcherQrcodeTextPost operation.
     * @callback module:api/SingleQRCodeApi~dispatcherQrcodeTextPostCallback
     * @param {String} error Error message, if any.
     * @param {File} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Text QR Code
     * This endpoint allows you to create a QR Code containing any text, in particular, an URL that may redirect the user to the website. After QR code is scanned, website will be displayed to the user.
     * @param {Object} opts Optional parameters
     * @param {module:model/TextQRCode} [textQRCode] 
     * @param {module:api/SingleQRCodeApi~dispatcherQrcodeTextPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link File}
     */
    dispatcherQrcodeTextPost(opts, callback) {
      opts = opts || {};
      let postBody = opts['textQRCode'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Byvalue', 'RapidAPI'];
      let contentTypes = ['application/json', 'multipart/form-data'];
      let accepts = ['application/pdf', 'application/postscript', 'image/jpeg', 'image/png', 'image/svg+xml', 'image/webp', 'application/json', 'text/plain'];
      let returnType = File;
      return this.apiClient.callApi(
        '/qrcode/text', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the dispatcherQrcodeWifiPost operation.
     * @callback module:api/SingleQRCodeApi~dispatcherQrcodeWifiPostCallback
     * @param {String} error Error message, if any.
     * @param {File} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * WiFi QR Code
     * This endpoint allows you to create a QR Code that allows user to quickly connect to a WiFi network. The code contains properly encoded network credentials. After scanning, the device can automatically connect to the network without having to enter the password manually.
     * @param {Object} opts Optional parameters
     * @param {module:model/WiFiQRCode} [wiFiQRCode] 
     * @param {module:api/SingleQRCodeApi~dispatcherQrcodeWifiPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link File}
     */
    dispatcherQrcodeWifiPost(opts, callback) {
      opts = opts || {};
      let postBody = opts['wiFiQRCode'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Byvalue', 'RapidAPI'];
      let contentTypes = ['application/json', 'multipart/form-data'];
      let accepts = ['application/pdf', 'application/postscript', 'image/jpeg', 'image/png', 'image/svg+xml', 'image/webp', 'application/json', 'text/plain'];
      let returnType = File;
      return this.apiClient.callApi(
        '/qrcode/wifi', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
