/**
 * LinQR
 * This is LinQR QR Code API documentation. This API allows you to generate custom, visually attractive QR Codes. The cloud infrastructure guarantees high availability and autoscalability of the service. You can generate hundreds of thousands of images this way and use them however you like.  We realize that your API use case may require custom solutions, and perhaps we lack functionality that is very important to you. In that case feel free to write an email to our support and tell us about it. We have repeatedly added new functions of our service directly after the requests of our users.  **General remarks:**  - maximum request size is fixed at 32MB.  - request timeout is fixed at 180 seconds.
 *
 * The version of the OpenAPI document: 2.0
 * Contact: support@linqr.app
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import GenericError from '../model/GenericError';
import HTTPValidationError from '../model/HTTPValidationError';
import ImageMetadata from '../model/ImageMetadata';

/**
* ImageManagement service.
* @module api/ImageManagementApi
* @version 2.0
*/
export default class ImageManagementApi {

    /**
    * Constructs a new ImageManagementApi. 
    * @alias module:api/ImageManagementApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the imageDeleteImagesIdDelete operation.
     * @callback module:api/ImageManagementApi~imageDeleteImagesIdDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete image
     * This endpoint allows you to delete images hosted in the LinQR storage.
     * @param {String} id 
     * @param {module:api/ImageManagementApi~imageDeleteImagesIdDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    imageDeleteImagesIdDelete(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling imageDeleteImagesIdDelete");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['RapidAPI'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/plain'];
      let returnType = null;
      return this.apiClient.callApi(
        '/images/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the imageListAllImagesGet operation.
     * @callback module:api/ImageManagementApi~imageListAllImagesGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/ImageMetadata>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List all images
     * This endpoint allows you to list images hosted in the LinQR storage. If there are no images hosted, an empty array is returned.
     * @param {module:api/ImageManagementApi~imageListAllImagesGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/ImageMetadata>}
     */
    imageListAllImagesGet(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['RapidAPI'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/plain'];
      let returnType = [ImageMetadata];
      return this.apiClient.callApi(
        '/images', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the imageListImagesIdGet operation.
     * @callback module:api/ImageManagementApi~imageListImagesIdGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ImageMetadata} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List image
     * This endpoint allows you to list single image hosted in the LinQR storage.
     * @param {String} id 
     * @param {module:api/ImageManagementApi~imageListImagesIdGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ImageMetadata}
     */
    imageListImagesIdGet(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling imageListImagesIdGet");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['RapidAPI'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/plain'];
      let returnType = ImageMetadata;
      return this.apiClient.callApi(
        '/images/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the imageUploadImagesPost operation.
     * @callback module:api/ImageManagementApi~imageUploadImagesPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ImageMetadata} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Upload image
     * This endpoint allows you to upload images to LinQR storage. In the response, metadata of the submitted image is sent, including the identifier used by other endpoints from the `Image management` group for image identification.
     * @param {File} image Binary file to be uploaded into LinQR storage. Maximum single file size is 1MiB (1,048,576 bytes).
     * @param {module:api/ImageManagementApi~imageUploadImagesPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ImageMetadata}
     */
    imageUploadImagesPost(image, callback) {
      let postBody = null;
      // verify the required parameter 'image' is set
      if (image === undefined || image === null) {
        throw new Error("Missing the required parameter 'image' when calling imageUploadImagesPost");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
        'image': image
      };

      let authNames = ['RapidAPI'];
      let contentTypes = ['multipart/form-data'];
      let accepts = ['application/json', 'text/plain'];
      let returnType = ImageMetadata;
      return this.apiClient.callApi(
        '/images', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
