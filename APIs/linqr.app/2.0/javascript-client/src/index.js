/**
 * LinQR
 * This is LinQR QR Code API documentation. This API allows you to generate custom, visually attractive QR Codes. The cloud infrastructure guarantees high availability and autoscalability of the service. You can generate hundreds of thousands of images this way and use them however you like.  We realize that your API use case may require custom solutions, and perhaps we lack functionality that is very important to you. In that case feel free to write an email to our support and tell us about it. We have repeatedly added new functions of our service directly after the requests of our users.  **General remarks:**  - maximum request size is fixed at 32MB.  - request timeout is fixed at 180 seconds.
 *
 * The version of the OpenAPI document: 2.0
 * Contact: support@linqr.app
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from './ApiClient';
import AutoData from './model/AutoData';
import AutoQRCode from './model/AutoQRCode';
import AutoQRCodeBatch from './model/AutoQRCodeBatch';
import AutoQRCodeMetadata from './model/AutoQRCodeMetadata';
import BackgroundStyle from './model/BackgroundStyle';
import BatchFormat from './model/BatchFormat';
import BatchOutputFile from './model/BatchOutputFile';
import Bcc from './model/Bcc';
import Cc from './model/Cc';
import CellPhone from './model/CellPhone';
import Color from './model/Color';
import ContactData from './model/ContactData';
import ContactQRCode from './model/ContactQRCode';
import ContactQRCodeMetadata from './model/ContactQRCodeMetadata';
import CryptoPaymentData from './model/CryptoPaymentData';
import CryptoPaymentQRCode from './model/CryptoPaymentQRCode';
import CryptoPaymentQRCodeMetadata from './model/CryptoPaymentQRCodeMetadata';
import Cryptocurrency from './model/Cryptocurrency';
import ECLevel from './model/ECLevel';
import Email from './model/Email';
import EmailData from './model/EmailData';
import EmailQRCode from './model/EmailQRCode';
import EmailQRCodeMetadata from './model/EmailQRCodeMetadata';
import EmbeddedImage from './model/EmbeddedImage';
import EmbeddedImageMultipart from './model/EmbeddedImageMultipart';
import Fax from './model/Fax';
import Format from './model/Format';
import GenericError from './model/GenericError';
import GeolocationData from './model/GeolocationData';
import GeolocationQRCode from './model/GeolocationQRCode';
import GeolocationQRCodeMetadata from './model/GeolocationQRCodeMetadata';
import GeolocationUriFormat from './model/GeolocationUriFormat';
import Gradient from './model/Gradient';
import GradientStop from './model/GradientStop';
import HTTPValidationError from './model/HTTPValidationError';
import HomePhone from './model/HomePhone';
import Icon from './model/Icon';
import Icons from './model/Icons';
import ImageMetadata from './model/ImageMetadata';
import ImageMultipartBody from './model/ImageMultipartBody';
import InnerEyeShapes from './model/InnerEyeShapes';
import InnerEyeStyle from './model/InnerEyeStyle';
import LinearGradient from './model/LinearGradient';
import LocationInner from './model/LocationInner';
import MeCardData from './model/MeCardData';
import ModuleShapes from './model/ModuleShapes';
import ModuleStyle from './model/ModuleStyle';
import OuterEyeShapes from './model/OuterEyeShapes';
import OuterEyeStyle from './model/OuterEyeStyle';
import OutputFile from './model/OutputFile';
import Phone from './model/Phone';
import PhoneData from './model/PhoneData';
import PhoneQRCode from './model/PhoneQRCode';
import PhoneQRCodeMetadata from './model/PhoneQRCodeMetadata';
import Photo from './model/Photo';
import RadialGradient from './model/RadialGradient';
import SMSData from './model/SMSData';
import SMSQRCode from './model/SMSQRCode';
import SMSQRCodeMetadata from './model/SMSQRCodeMetadata';
import Size from './model/Size';
import SizeMultipart from './model/SizeMultipart';
import Style from './model/Style';
import TextQRCode from './model/TextQRCode';
import TextQRCodeMetadata from './model/TextQRCodeMetadata';
import Title from './model/Title';
import To from './model/To';
import To1 from './model/To1';
import URI from './model/URI';
import Url from './model/Url';
import VCardData from './model/VCardData';
import ValidationError from './model/ValidationError';
import Videophone from './model/Videophone';
import WiFiData from './model/WiFiData';
import WiFiQRCode from './model/WiFiQRCode';
import WiFiQRCodeMetadata from './model/WiFiQRCodeMetadata';
import WiFiSecurity from './model/WiFiSecurity';
import WorkPhone from './model/WorkPhone';
import ImageManagementApi from './api/ImageManagementApi';
import MultipleQRCodesApi from './api/MultipleQRCodesApi';
import SingleQRCodeApi from './api/SingleQRCodeApi';


/**
* This is LinQR QR Code API documentation. This API allows you to generate custom, visually attractive QR Codes. The cloud infrastructure guarantees high availability and autoscalability of the service. You can generate hundreds of thousands of images this way and use them however you like.  We realize that your API use case may require custom solutions, and perhaps we lack functionality that is very important to you. In that case feel free to write an email to our support and tell us about it. We have repeatedly added new functions of our service directly after the requests of our users.  **General remarks:**  - maximum request size is fixed at 32MB.  - request timeout is fixed at 180 seconds..<br>
* The <code>index</code> module provides access to constructors for all the classes which comprise the public API.
* <p>
* An AMD (recommended!) or CommonJS application will generally do something equivalent to the following:
* <pre>
* var LinQr = require('index'); // See note below*.
* var xxxSvc = new LinQr.XxxApi(); // Allocate the API class we're going to use.
* var yyyModel = new LinQr.Yyy(); // Construct a model instance.
* yyyModel.someProperty = 'someValue';
* ...
* var zzz = xxxSvc.doSomething(yyyModel); // Invoke the service.
* ...
* </pre>
* <em>*NOTE: For a top-level AMD script, use require(['index'], function(){...})
* and put the application logic within the callback function.</em>
* </p>
* <p>
* A non-AMD browser application (discouraged) might do something like this:
* <pre>
* var xxxSvc = new LinQr.XxxApi(); // Allocate the API class we're going to use.
* var yyy = new LinQr.Yyy(); // Construct a model instance.
* yyyModel.someProperty = 'someValue';
* ...
* var zzz = xxxSvc.doSomething(yyyModel); // Invoke the service.
* ...
* </pre>
* </p>
* @module index
* @version 2.0
*/
export {
    /**
     * The ApiClient constructor.
     * @property {module:ApiClient}
     */
    ApiClient,

    /**
     * The AutoData model constructor.
     * @property {module:model/AutoData}
     */
    AutoData,

    /**
     * The AutoQRCode model constructor.
     * @property {module:model/AutoQRCode}
     */
    AutoQRCode,

    /**
     * The AutoQRCodeBatch model constructor.
     * @property {module:model/AutoQRCodeBatch}
     */
    AutoQRCodeBatch,

    /**
     * The AutoQRCodeMetadata model constructor.
     * @property {module:model/AutoQRCodeMetadata}
     */
    AutoQRCodeMetadata,

    /**
     * The BackgroundStyle model constructor.
     * @property {module:model/BackgroundStyle}
     */
    BackgroundStyle,

    /**
     * The BatchFormat model constructor.
     * @property {module:model/BatchFormat}
     */
    BatchFormat,

    /**
     * The BatchOutputFile model constructor.
     * @property {module:model/BatchOutputFile}
     */
    BatchOutputFile,

    /**
     * The Bcc model constructor.
     * @property {module:model/Bcc}
     */
    Bcc,

    /**
     * The Cc model constructor.
     * @property {module:model/Cc}
     */
    Cc,

    /**
     * The CellPhone model constructor.
     * @property {module:model/CellPhone}
     */
    CellPhone,

    /**
     * The Color model constructor.
     * @property {module:model/Color}
     */
    Color,

    /**
     * The ContactData model constructor.
     * @property {module:model/ContactData}
     */
    ContactData,

    /**
     * The ContactQRCode model constructor.
     * @property {module:model/ContactQRCode}
     */
    ContactQRCode,

    /**
     * The ContactQRCodeMetadata model constructor.
     * @property {module:model/ContactQRCodeMetadata}
     */
    ContactQRCodeMetadata,

    /**
     * The CryptoPaymentData model constructor.
     * @property {module:model/CryptoPaymentData}
     */
    CryptoPaymentData,

    /**
     * The CryptoPaymentQRCode model constructor.
     * @property {module:model/CryptoPaymentQRCode}
     */
    CryptoPaymentQRCode,

    /**
     * The CryptoPaymentQRCodeMetadata model constructor.
     * @property {module:model/CryptoPaymentQRCodeMetadata}
     */
    CryptoPaymentQRCodeMetadata,

    /**
     * The Cryptocurrency model constructor.
     * @property {module:model/Cryptocurrency}
     */
    Cryptocurrency,

    /**
     * The ECLevel model constructor.
     * @property {module:model/ECLevel}
     */
    ECLevel,

    /**
     * The Email model constructor.
     * @property {module:model/Email}
     */
    Email,

    /**
     * The EmailData model constructor.
     * @property {module:model/EmailData}
     */
    EmailData,

    /**
     * The EmailQRCode model constructor.
     * @property {module:model/EmailQRCode}
     */
    EmailQRCode,

    /**
     * The EmailQRCodeMetadata model constructor.
     * @property {module:model/EmailQRCodeMetadata}
     */
    EmailQRCodeMetadata,

    /**
     * The EmbeddedImage model constructor.
     * @property {module:model/EmbeddedImage}
     */
    EmbeddedImage,

    /**
     * The EmbeddedImageMultipart model constructor.
     * @property {module:model/EmbeddedImageMultipart}
     */
    EmbeddedImageMultipart,

    /**
     * The Fax model constructor.
     * @property {module:model/Fax}
     */
    Fax,

    /**
     * The Format model constructor.
     * @property {module:model/Format}
     */
    Format,

    /**
     * The GenericError model constructor.
     * @property {module:model/GenericError}
     */
    GenericError,

    /**
     * The GeolocationData model constructor.
     * @property {module:model/GeolocationData}
     */
    GeolocationData,

    /**
     * The GeolocationQRCode model constructor.
     * @property {module:model/GeolocationQRCode}
     */
    GeolocationQRCode,

    /**
     * The GeolocationQRCodeMetadata model constructor.
     * @property {module:model/GeolocationQRCodeMetadata}
     */
    GeolocationQRCodeMetadata,

    /**
     * The GeolocationUriFormat model constructor.
     * @property {module:model/GeolocationUriFormat}
     */
    GeolocationUriFormat,

    /**
     * The Gradient model constructor.
     * @property {module:model/Gradient}
     */
    Gradient,

    /**
     * The GradientStop model constructor.
     * @property {module:model/GradientStop}
     */
    GradientStop,

    /**
     * The HTTPValidationError model constructor.
     * @property {module:model/HTTPValidationError}
     */
    HTTPValidationError,

    /**
     * The HomePhone model constructor.
     * @property {module:model/HomePhone}
     */
    HomePhone,

    /**
     * The Icon model constructor.
     * @property {module:model/Icon}
     */
    Icon,

    /**
     * The Icons model constructor.
     * @property {module:model/Icons}
     */
    Icons,

    /**
     * The ImageMetadata model constructor.
     * @property {module:model/ImageMetadata}
     */
    ImageMetadata,

    /**
     * The ImageMultipartBody model constructor.
     * @property {module:model/ImageMultipartBody}
     */
    ImageMultipartBody,

    /**
     * The InnerEyeShapes model constructor.
     * @property {module:model/InnerEyeShapes}
     */
    InnerEyeShapes,

    /**
     * The InnerEyeStyle model constructor.
     * @property {module:model/InnerEyeStyle}
     */
    InnerEyeStyle,

    /**
     * The LinearGradient model constructor.
     * @property {module:model/LinearGradient}
     */
    LinearGradient,

    /**
     * The LocationInner model constructor.
     * @property {module:model/LocationInner}
     */
    LocationInner,

    /**
     * The MeCardData model constructor.
     * @property {module:model/MeCardData}
     */
    MeCardData,

    /**
     * The ModuleShapes model constructor.
     * @property {module:model/ModuleShapes}
     */
    ModuleShapes,

    /**
     * The ModuleStyle model constructor.
     * @property {module:model/ModuleStyle}
     */
    ModuleStyle,

    /**
     * The OuterEyeShapes model constructor.
     * @property {module:model/OuterEyeShapes}
     */
    OuterEyeShapes,

    /**
     * The OuterEyeStyle model constructor.
     * @property {module:model/OuterEyeStyle}
     */
    OuterEyeStyle,

    /**
     * The OutputFile model constructor.
     * @property {module:model/OutputFile}
     */
    OutputFile,

    /**
     * The Phone model constructor.
     * @property {module:model/Phone}
     */
    Phone,

    /**
     * The PhoneData model constructor.
     * @property {module:model/PhoneData}
     */
    PhoneData,

    /**
     * The PhoneQRCode model constructor.
     * @property {module:model/PhoneQRCode}
     */
    PhoneQRCode,

    /**
     * The PhoneQRCodeMetadata model constructor.
     * @property {module:model/PhoneQRCodeMetadata}
     */
    PhoneQRCodeMetadata,

    /**
     * The Photo model constructor.
     * @property {module:model/Photo}
     */
    Photo,

    /**
     * The RadialGradient model constructor.
     * @property {module:model/RadialGradient}
     */
    RadialGradient,

    /**
     * The SMSData model constructor.
     * @property {module:model/SMSData}
     */
    SMSData,

    /**
     * The SMSQRCode model constructor.
     * @property {module:model/SMSQRCode}
     */
    SMSQRCode,

    /**
     * The SMSQRCodeMetadata model constructor.
     * @property {module:model/SMSQRCodeMetadata}
     */
    SMSQRCodeMetadata,

    /**
     * The Size model constructor.
     * @property {module:model/Size}
     */
    Size,

    /**
     * The SizeMultipart model constructor.
     * @property {module:model/SizeMultipart}
     */
    SizeMultipart,

    /**
     * The Style model constructor.
     * @property {module:model/Style}
     */
    Style,

    /**
     * The TextQRCode model constructor.
     * @property {module:model/TextQRCode}
     */
    TextQRCode,

    /**
     * The TextQRCodeMetadata model constructor.
     * @property {module:model/TextQRCodeMetadata}
     */
    TextQRCodeMetadata,

    /**
     * The Title model constructor.
     * @property {module:model/Title}
     */
    Title,

    /**
     * The To model constructor.
     * @property {module:model/To}
     */
    To,

    /**
     * The To1 model constructor.
     * @property {module:model/To1}
     */
    To1,

    /**
     * The URI model constructor.
     * @property {module:model/URI}
     */
    URI,

    /**
     * The Url model constructor.
     * @property {module:model/Url}
     */
    Url,

    /**
     * The VCardData model constructor.
     * @property {module:model/VCardData}
     */
    VCardData,

    /**
     * The ValidationError model constructor.
     * @property {module:model/ValidationError}
     */
    ValidationError,

    /**
     * The Videophone model constructor.
     * @property {module:model/Videophone}
     */
    Videophone,

    /**
     * The WiFiData model constructor.
     * @property {module:model/WiFiData}
     */
    WiFiData,

    /**
     * The WiFiQRCode model constructor.
     * @property {module:model/WiFiQRCode}
     */
    WiFiQRCode,

    /**
     * The WiFiQRCodeMetadata model constructor.
     * @property {module:model/WiFiQRCodeMetadata}
     */
    WiFiQRCodeMetadata,

    /**
     * The WiFiSecurity model constructor.
     * @property {module:model/WiFiSecurity}
     */
    WiFiSecurity,

    /**
     * The WorkPhone model constructor.
     * @property {module:model/WorkPhone}
     */
    WorkPhone,

    /**
    * The ImageManagementApi service constructor.
    * @property {module:api/ImageManagementApi}
    */
    ImageManagementApi,

    /**
    * The MultipleQRCodesApi service constructor.
    * @property {module:api/MultipleQRCodesApi}
    */
    MultipleQRCodesApi,

    /**
    * The SingleQRCodeApi service constructor.
    * @property {module:api/SingleQRCodeApi}
    */
    SingleQRCodeApi
};
