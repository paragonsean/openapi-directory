/**
 * LinQR
 * This is LinQR QR Code API documentation. This API allows you to generate custom, visually attractive QR Codes. The cloud infrastructure guarantees high availability and autoscalability of the service. You can generate hundreds of thousands of images this way and use them however you like.  We realize that your API use case may require custom solutions, and perhaps we lack functionality that is very important to you. In that case feel free to write an email to our support and tell us about it. We have repeatedly added new functions of our service directly after the requests of our users.  **General remarks:**  - maximum request size is fixed at 32MB.  - request timeout is fixed at 180 seconds.
 *
 * The version of the OpenAPI document: 2.0
 * Contact: support@linqr.app
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.LinQr);
  }
}(this, function(expect, LinQr) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new LinQr.SingleQRCodeApi();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('SingleQRCodeApi', function() {
    describe('dispatcherQrcodeContactPost', function() {
      it('should call dispatcherQrcodeContactPost successfully', function(done) {
        //uncomment below and update the code to test dispatcherQrcodeContactPost
        //instance.dispatcherQrcodeContactPost(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('dispatcherQrcodeCryptoPost', function() {
      it('should call dispatcherQrcodeCryptoPost successfully', function(done) {
        //uncomment below and update the code to test dispatcherQrcodeCryptoPost
        //instance.dispatcherQrcodeCryptoPost(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('dispatcherQrcodeEmailPost', function() {
      it('should call dispatcherQrcodeEmailPost successfully', function(done) {
        //uncomment below and update the code to test dispatcherQrcodeEmailPost
        //instance.dispatcherQrcodeEmailPost(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('dispatcherQrcodeGeoPost', function() {
      it('should call dispatcherQrcodeGeoPost successfully', function(done) {
        //uncomment below and update the code to test dispatcherQrcodeGeoPost
        //instance.dispatcherQrcodeGeoPost(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('dispatcherQrcodePhonePost', function() {
      it('should call dispatcherQrcodePhonePost successfully', function(done) {
        //uncomment below and update the code to test dispatcherQrcodePhonePost
        //instance.dispatcherQrcodePhonePost(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('dispatcherQrcodePost', function() {
      it('should call dispatcherQrcodePost successfully', function(done) {
        //uncomment below and update the code to test dispatcherQrcodePost
        //instance.dispatcherQrcodePost(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('dispatcherQrcodeSmsPost', function() {
      it('should call dispatcherQrcodeSmsPost successfully', function(done) {
        //uncomment below and update the code to test dispatcherQrcodeSmsPost
        //instance.dispatcherQrcodeSmsPost(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('dispatcherQrcodeTextPost', function() {
      it('should call dispatcherQrcodeTextPost successfully', function(done) {
        //uncomment below and update the code to test dispatcherQrcodeTextPost
        //instance.dispatcherQrcodeTextPost(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('dispatcherQrcodeWifiPost', function() {
      it('should call dispatcherQrcodeWifiPost successfully', function(done) {
        //uncomment below and update the code to test dispatcherQrcodeWifiPost
        //instance.dispatcherQrcodeWifiPost(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
  });

}));
