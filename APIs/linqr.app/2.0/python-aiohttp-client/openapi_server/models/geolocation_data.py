# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.geolocation_uri_format import GeolocationUriFormat
from openapi_server import util


class GeolocationData(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, format: GeolocationUriFormat=None, latitude: float=None, longitude: float=None):
        """GeolocationData - a model defined in OpenAPI

        :param format: The format of this GeolocationData.
        :param latitude: The latitude of this GeolocationData.
        :param longitude: The longitude of this GeolocationData.
        """
        self.openapi_types = {
            'format': GeolocationUriFormat,
            'latitude': float,
            'longitude': float
        }

        self.attribute_map = {
            'format': 'format',
            'latitude': 'latitude',
            'longitude': 'longitude'
        }

        self._format = format
        self._latitude = latitude
        self._longitude = longitude

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GeolocationData':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The GeolocationData of this GeolocationData.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def format(self):
        """Gets the format of this GeolocationData.

        URI format.  - `rfc5870` data encoded according to <a href=\"https://datatracker.ietf.org/doc/html/rfc5870\" rel=\"noopener noreferrer\" target=\"_blank\" >RFC5870 standard</a>  - `google` data encoded according to <a href=\"https://developers.google.com/maps/documentation/urls/android-intents\" rel=\"noopener noreferrer\" target=\"_blank\" >Google Maps standard</a>

        :return: The format of this GeolocationData.
        :rtype: GeolocationUriFormat
        """
        return self._format

    @format.setter
    def format(self, format):
        """Sets the format of this GeolocationData.

        URI format.  - `rfc5870` data encoded according to <a href=\"https://datatracker.ietf.org/doc/html/rfc5870\" rel=\"noopener noreferrer\" target=\"_blank\" >RFC5870 standard</a>  - `google` data encoded according to <a href=\"https://developers.google.com/maps/documentation/urls/android-intents\" rel=\"noopener noreferrer\" target=\"_blank\" >Google Maps standard</a>

        :param format: The format of this GeolocationData.
        :type format: GeolocationUriFormat
        """

        self._format = format

    @property
    def latitude(self):
        """Gets the latitude of this GeolocationData.

        Location latitude.

        :return: The latitude of this GeolocationData.
        :rtype: float
        """
        return self._latitude

    @latitude.setter
    def latitude(self, latitude):
        """Sets the latitude of this GeolocationData.

        Location latitude.

        :param latitude: The latitude of this GeolocationData.
        :type latitude: float
        """
        if latitude is None:
            raise ValueError("Invalid value for `latitude`, must not be `None`")
        if latitude is not None and latitude > 90:
            raise ValueError("Invalid value for `latitude`, must be a value less than or equal to `90`")
        if latitude is not None and latitude < -90:
            raise ValueError("Invalid value for `latitude`, must be a value greater than or equal to `-90`")

        self._latitude = latitude

    @property
    def longitude(self):
        """Gets the longitude of this GeolocationData.

        Location longitude.

        :return: The longitude of this GeolocationData.
        :rtype: float
        """
        return self._longitude

    @longitude.setter
    def longitude(self, longitude):
        """Sets the longitude of this GeolocationData.

        Location longitude.

        :param longitude: The longitude of this GeolocationData.
        :type longitude: float
        """
        if longitude is None:
            raise ValueError("Invalid value for `longitude`, must not be `None`")
        if longitude is not None and longitude > 180:
            raise ValueError("Invalid value for `longitude`, must be a value less than or equal to `180`")
        if longitude is not None and longitude < -180:
            raise ValueError("Invalid value for `longitude`, must be a value greater than or equal to `-180`")

        self._longitude = longitude
