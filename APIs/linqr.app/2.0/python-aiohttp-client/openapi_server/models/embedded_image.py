# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class EmbeddedImage(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, modules: bool=True, uri: str=None):
        """EmbeddedImage - a model defined in OpenAPI

        :param modules: The modules of this EmbeddedImage.
        :param uri: The uri of this EmbeddedImage.
        """
        self.openapi_types = {
            'modules': bool,
            'uri': str
        }

        self.attribute_map = {
            'modules': 'modules',
            'uri': 'uri'
        }

        self._modules = modules
        self._uri = uri

    @classmethod
    def from_dict(cls, dikt: dict) -> 'EmbeddedImage':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The EmbeddedImage of this EmbeddedImage.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def modules(self):
        """Gets the modules of this EmbeddedImage.

        This property determines whether the QR Code modules located under the image area are visible or not. It can be useful for cleaning the background of a partially transparent or non-square image.

        :return: The modules of this EmbeddedImage.
        :rtype: bool
        """
        return self._modules

    @modules.setter
    def modules(self, modules):
        """Sets the modules of this EmbeddedImage.

        This property determines whether the QR Code modules located under the image area are visible or not. It can be useful for cleaning the background of a partially transparent or non-square image.

        :param modules: The modules of this EmbeddedImage.
        :type modules: bool
        """

        self._modules = modules

    @property
    def uri(self):
        """Gets the uri of this EmbeddedImage.


        :return: The uri of this EmbeddedImage.
        :rtype: str
        """
        return self._uri

    @uri.setter
    def uri(self, uri):
        """Sets the uri of this EmbeddedImage.


        :param uri: The uri of this EmbeddedImage.
        :type uri: str
        """
        if uri is None:
            raise ValueError("Invalid value for `uri`, must not be `None`")

        self._uri = uri
