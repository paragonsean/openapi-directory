# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class GradientStop(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, color: str=None, offset: int=None):
        """GradientStop - a model defined in OpenAPI

        :param color: The color of this GradientStop.
        :param offset: The offset of this GradientStop.
        """
        self.openapi_types = {
            'color': str,
            'offset': int
        }

        self.attribute_map = {
            'color': 'color',
            'offset': 'offset'
        }

        self._color = color
        self._offset = offset

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GradientStop':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The GradientStop of this GradientStop.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def color(self):
        """Gets the color of this GradientStop.

        Stop's color.

        :return: The color of this GradientStop.
        :rtype: str
        """
        return self._color

    @color.setter
    def color(self, color):
        """Sets the color of this GradientStop.

        Stop's color.

        :param color: The color of this GradientStop.
        :type color: str
        """
        if color is None:
            raise ValueError("Invalid value for `color`, must not be `None`")

        self._color = color

    @property
    def offset(self):
        """Gets the offset of this GradientStop.

        Stop's offset.

        :return: The offset of this GradientStop.
        :rtype: int
        """
        return self._offset

    @offset.setter
    def offset(self, offset):
        """Sets the offset of this GradientStop.

        Stop's offset.

        :param offset: The offset of this GradientStop.
        :type offset: int
        """
        if offset is None:
            raise ValueError("Invalid value for `offset`, must not be `None`")
        if offset is not None and offset > 100:
            raise ValueError("Invalid value for `offset`, must be a value less than or equal to `100`")
        if offset is not None and offset < 0:
            raise ValueError("Invalid value for `offset`, must be a value greater than or equal to `0`")

        self._offset = offset
