# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
import re
from openapi_server import util


class PhoneData(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, phone: str=None):
        """PhoneData - a model defined in OpenAPI

        :param phone: The phone of this PhoneData.
        """
        self.openapi_types = {
            'phone': str
        }

        self.attribute_map = {
            'phone': 'phone'
        }

        self._phone = phone

    @classmethod
    def from_dict(cls, dikt: dict) -> 'PhoneData':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The PhoneData of this PhoneData.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def phone(self):
        """Gets the phone of this PhoneData.

        Telephone number.

        :return: The phone of this PhoneData.
        :rtype: str
        """
        return self._phone

    @phone.setter
    def phone(self, phone):
        """Sets the phone of this PhoneData.

        Telephone number.

        :param phone: The phone of this PhoneData.
        :type phone: str
        """
        if phone is None:
            raise ValueError("Invalid value for `phone`, must not be `None`")
        if phone is not None and not re.search(r'^[+]*[(]{0,1}[0-9]{1,4}[)]{0,1}[-\s\.\/0-9]*$', phone):
            raise ValueError("Invalid value for `phone`, must be a follow pattern or equal to `/^[+]*[(]{0,1}[0-9]{1,4}[)]{0,1}[-\s\.\/0-9]*$/`")

        self._phone = phone
