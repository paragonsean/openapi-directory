# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ImageMetadata(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, created: datetime=None, id: str=None, size: int=None, source: str=None):
        """ImageMetadata - a model defined in OpenAPI

        :param created: The created of this ImageMetadata.
        :param id: The id of this ImageMetadata.
        :param size: The size of this ImageMetadata.
        :param source: The source of this ImageMetadata.
        """
        self.openapi_types = {
            'created': datetime,
            'id': str,
            'size': int,
            'source': str
        }

        self.attribute_map = {
            'created': 'created',
            'id': 'id',
            'size': 'size',
            'source': 'source'
        }

        self._created = created
        self._id = id
        self._size = size
        self._source = source

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ImageMetadata':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ImageMetadata of this ImageMetadata.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def created(self):
        """Gets the created of this ImageMetadata.

        The creation time of the image.

        :return: The created of this ImageMetadata.
        :rtype: datetime
        """
        return self._created

    @created.setter
    def created(self, created):
        """Sets the created of this ImageMetadata.

        The creation time of the image.

        :param created: The created of this ImageMetadata.
        :type created: datetime
        """
        if created is None:
            raise ValueError("Invalid value for `created`, must not be `None`")

        self._created = created

    @property
    def id(self):
        """Gets the id of this ImageMetadata.

        Image identifier.

        :return: The id of this ImageMetadata.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this ImageMetadata.

        Image identifier.

        :param id: The id of this ImageMetadata.
        :type id: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")

        self._id = id

    @property
    def size(self):
        """Gets the size of this ImageMetadata.

        Size of the source file in bytes

        :return: The size of this ImageMetadata.
        :rtype: int
        """
        return self._size

    @size.setter
    def size(self, size):
        """Sets the size of this ImageMetadata.

        Size of the source file in bytes

        :param size: The size of this ImageMetadata.
        :type size: int
        """
        if size is None:
            raise ValueError("Invalid value for `size`, must not be `None`")

        self._size = size

    @property
    def source(self):
        """Gets the source of this ImageMetadata.

        Source file name.

        :return: The source of this ImageMetadata.
        :rtype: str
        """
        return self._source

    @source.setter
    def source(self, source):
        """Sets the source of this ImageMetadata.

        Source file name.

        :param source: The source of this ImageMetadata.
        :type source: str
        """
        if source is None:
            raise ValueError("Invalid value for `source`, must not be `None`")

        self._source = source
