# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.bcc import Bcc
from openapi_server.models.cc import Cc
from openapi_server.models.cell_phone import CellPhone
from openapi_server.models.contact_data import ContactData
from openapi_server.models.crypto_payment_data import CryptoPaymentData
from openapi_server.models.cryptocurrency import Cryptocurrency
from openapi_server.models.email import Email
from openapi_server.models.email_data import EmailData
from openapi_server.models.fax import Fax
from openapi_server.models.geolocation_data import GeolocationData
from openapi_server.models.geolocation_uri_format import GeolocationUriFormat
from openapi_server.models.home_phone import HomePhone
from openapi_server.models.phone_data import PhoneData
from openapi_server.models.photo import Photo
from openapi_server.models.sms_data import SMSData
from openapi_server.models.title import Title
from openapi_server.models.to1 import To1
from openapi_server.models.url import Url
from openapi_server.models.videophone import Videophone
from openapi_server.models.wi_fi_data import WiFiData
from openapi_server.models.wi_fi_security import WiFiSecurity
from openapi_server.models.work_phone import WorkPhone
import re
from openapi_server import util


class AutoData(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, hidden: bool=False, password: str=None, security: WiFiSecurity=None, ssid: str=None, bcc: Bcc=None, body: str=None, cc: Cc=None, subject: str=None, to: To1=None, birthday: date=None, cell_phone: CellPhone=None, city: str=None, country: str=None, display_name: str=None, email: Email=None, encoding: str='mecard', fax: Fax=None, first_name: str=None, home_phone: HomePhone=None, last_name: str=None, latitude: float=None, longitude: float=None, memo: str=None, nickname: str=None, organization: str=None, phone: str=None, photo: Photo=None, po_box: str=None, region: str=None, revision: date=None, source: str=None, street: str=None, title: Title=None, url: Url=None, videophone: Videophone=None, work_phone: WorkPhone=None, zip_code: str=None, house_number: str=None, prefecture: str=None, reading: str=None, room_number: str=None, address: str=None, amount: float=None, currency: Cryptocurrency=None, label: str=None, message: str=None, format: GeolocationUriFormat=None):
        """AutoData - a model defined in OpenAPI

        :param hidden: The hidden of this AutoData.
        :param password: The password of this AutoData.
        :param security: The security of this AutoData.
        :param ssid: The ssid of this AutoData.
        :param bcc: The bcc of this AutoData.
        :param body: The body of this AutoData.
        :param cc: The cc of this AutoData.
        :param subject: The subject of this AutoData.
        :param to: The to of this AutoData.
        :param birthday: The birthday of this AutoData.
        :param cell_phone: The cell_phone of this AutoData.
        :param city: The city of this AutoData.
        :param country: The country of this AutoData.
        :param display_name: The display_name of this AutoData.
        :param email: The email of this AutoData.
        :param encoding: The encoding of this AutoData.
        :param fax: The fax of this AutoData.
        :param first_name: The first_name of this AutoData.
        :param home_phone: The home_phone of this AutoData.
        :param last_name: The last_name of this AutoData.
        :param latitude: The latitude of this AutoData.
        :param longitude: The longitude of this AutoData.
        :param memo: The memo of this AutoData.
        :param nickname: The nickname of this AutoData.
        :param organization: The organization of this AutoData.
        :param phone: The phone of this AutoData.
        :param photo: The photo of this AutoData.
        :param po_box: The po_box of this AutoData.
        :param region: The region of this AutoData.
        :param revision: The revision of this AutoData.
        :param source: The source of this AutoData.
        :param street: The street of this AutoData.
        :param title: The title of this AutoData.
        :param url: The url of this AutoData.
        :param videophone: The videophone of this AutoData.
        :param work_phone: The work_phone of this AutoData.
        :param zip_code: The zip_code of this AutoData.
        :param house_number: The house_number of this AutoData.
        :param prefecture: The prefecture of this AutoData.
        :param reading: The reading of this AutoData.
        :param room_number: The room_number of this AutoData.
        :param address: The address of this AutoData.
        :param amount: The amount of this AutoData.
        :param currency: The currency of this AutoData.
        :param label: The label of this AutoData.
        :param message: The message of this AutoData.
        :param format: The format of this AutoData.
        """
        self.openapi_types = {
            'hidden': bool,
            'password': str,
            'security': WiFiSecurity,
            'ssid': str,
            'bcc': Bcc,
            'body': str,
            'cc': Cc,
            'subject': str,
            'to': To1,
            'birthday': date,
            'cell_phone': CellPhone,
            'city': str,
            'country': str,
            'display_name': str,
            'email': Email,
            'encoding': str,
            'fax': Fax,
            'first_name': str,
            'home_phone': HomePhone,
            'last_name': str,
            'latitude': float,
            'longitude': float,
            'memo': str,
            'nickname': str,
            'organization': str,
            'phone': str,
            'photo': Photo,
            'po_box': str,
            'region': str,
            'revision': date,
            'source': str,
            'street': str,
            'title': Title,
            'url': Url,
            'videophone': Videophone,
            'work_phone': WorkPhone,
            'zip_code': str,
            'house_number': str,
            'prefecture': str,
            'reading': str,
            'room_number': str,
            'address': str,
            'amount': float,
            'currency': Cryptocurrency,
            'label': str,
            'message': str,
            'format': GeolocationUriFormat
        }

        self.attribute_map = {
            'hidden': 'hidden',
            'password': 'password',
            'security': 'security',
            'ssid': 'ssid',
            'bcc': 'bcc',
            'body': 'body',
            'cc': 'cc',
            'subject': 'subject',
            'to': 'to',
            'birthday': 'birthday',
            'cell_phone': 'cell_phone',
            'city': 'city',
            'country': 'country',
            'display_name': 'display_name',
            'email': 'email',
            'encoding': 'encoding',
            'fax': 'fax',
            'first_name': 'first_name',
            'home_phone': 'home_phone',
            'last_name': 'last_name',
            'latitude': 'latitude',
            'longitude': 'longitude',
            'memo': 'memo',
            'nickname': 'nickname',
            'organization': 'organization',
            'phone': 'phone',
            'photo': 'photo',
            'po_box': 'po_box',
            'region': 'region',
            'revision': 'revision',
            'source': 'source',
            'street': 'street',
            'title': 'title',
            'url': 'url',
            'videophone': 'videophone',
            'work_phone': 'work_phone',
            'zip_code': 'zip_code',
            'house_number': 'house_number',
            'prefecture': 'prefecture',
            'reading': 'reading',
            'room_number': 'room_number',
            'address': 'address',
            'amount': 'amount',
            'currency': 'currency',
            'label': 'label',
            'message': 'message',
            'format': 'format'
        }

        self._hidden = hidden
        self._password = password
        self._security = security
        self._ssid = ssid
        self._bcc = bcc
        self._body = body
        self._cc = cc
        self._subject = subject
        self._to = to
        self._birthday = birthday
        self._cell_phone = cell_phone
        self._city = city
        self._country = country
        self._display_name = display_name
        self._email = email
        self._encoding = encoding
        self._fax = fax
        self._first_name = first_name
        self._home_phone = home_phone
        self._last_name = last_name
        self._latitude = latitude
        self._longitude = longitude
        self._memo = memo
        self._nickname = nickname
        self._organization = organization
        self._phone = phone
        self._photo = photo
        self._po_box = po_box
        self._region = region
        self._revision = revision
        self._source = source
        self._street = street
        self._title = title
        self._url = url
        self._videophone = videophone
        self._work_phone = work_phone
        self._zip_code = zip_code
        self._house_number = house_number
        self._prefecture = prefecture
        self._reading = reading
        self._room_number = room_number
        self._address = address
        self._amount = amount
        self._currency = currency
        self._label = label
        self._message = message
        self._format = format

    @classmethod
    def from_dict(cls, dikt: dict) -> 'AutoData':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The AutoData of this AutoData.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def hidden(self):
        """Gets the hidden of this AutoData.

        Hidden network. Set to `true` if the SSID broadcasting is disabled (network is hidden).

        :return: The hidden of this AutoData.
        :rtype: bool
        """
        return self._hidden

    @hidden.setter
    def hidden(self, hidden):
        """Sets the hidden of this AutoData.

        Hidden network. Set to `true` if the SSID broadcasting is disabled (network is hidden).

        :param hidden: The hidden of this AutoData.
        :type hidden: bool
        """

        self._hidden = hidden

    @property
    def password(self):
        """Gets the password of this AutoData.

        Network password. The value is not required for the public network.

        :return: The password of this AutoData.
        :rtype: str
        """
        return self._password

    @password.setter
    def password(self, password):
        """Sets the password of this AutoData.

        Network password. The value is not required for the public network.

        :param password: The password of this AutoData.
        :type password: str
        """

        self._password = password

    @property
    def security(self):
        """Gets the security of this AutoData.

        Network authentication type. Value `nopass` is used to set explicitly no access password (public network) and is an equivalent for left the password unset. In that case, the value may be also omitted.

        :return: The security of this AutoData.
        :rtype: WiFiSecurity
        """
        return self._security

    @security.setter
    def security(self, security):
        """Sets the security of this AutoData.

        Network authentication type. Value `nopass` is used to set explicitly no access password (public network) and is an equivalent for left the password unset. In that case, the value may be also omitted.

        :param security: The security of this AutoData.
        :type security: WiFiSecurity
        """

        self._security = security

    @property
    def ssid(self):
        """Gets the ssid of this AutoData.

        Network SSID (name).

        :return: The ssid of this AutoData.
        :rtype: str
        """
        return self._ssid

    @ssid.setter
    def ssid(self, ssid):
        """Sets the ssid of this AutoData.

        Network SSID (name).

        :param ssid: The ssid of this AutoData.
        :type ssid: str
        """
        if ssid is None:
            raise ValueError("Invalid value for `ssid`, must not be `None`")

        self._ssid = ssid

    @property
    def bcc(self):
        """Gets the bcc of this AutoData.


        :return: The bcc of this AutoData.
        :rtype: Bcc
        """
        return self._bcc

    @bcc.setter
    def bcc(self, bcc):
        """Sets the bcc of this AutoData.


        :param bcc: The bcc of this AutoData.
        :type bcc: Bcc
        """

        self._bcc = bcc

    @property
    def body(self):
        """Gets the body of this AutoData.

        The message body.

        :return: The body of this AutoData.
        :rtype: str
        """
        return self._body

    @body.setter
    def body(self, body):
        """Sets the body of this AutoData.

        The message body.

        :param body: The body of this AutoData.
        :type body: str
        """

        self._body = body

    @property
    def cc(self):
        """Gets the cc of this AutoData.


        :return: The cc of this AutoData.
        :rtype: Cc
        """
        return self._cc

    @cc.setter
    def cc(self, cc):
        """Sets the cc of this AutoData.


        :param cc: The cc of this AutoData.
        :type cc: Cc
        """

        self._cc = cc

    @property
    def subject(self):
        """Gets the subject of this AutoData.

        The message subject.

        :return: The subject of this AutoData.
        :rtype: str
        """
        return self._subject

    @subject.setter
    def subject(self, subject):
        """Sets the subject of this AutoData.

        The message subject.

        :param subject: The subject of this AutoData.
        :type subject: str
        """

        self._subject = subject

    @property
    def to(self):
        """Gets the to of this AutoData.


        :return: The to of this AutoData.
        :rtype: To1
        """
        return self._to

    @to.setter
    def to(self, to):
        """Sets the to of this AutoData.


        :param to: The to of this AutoData.
        :type to: To1
        """
        if to is None:
            raise ValueError("Invalid value for `to`, must not be `None`")

        self._to = to

    @property
    def birthday(self):
        """Gets the birthday of this AutoData.

        Birthday.

        :return: The birthday of this AutoData.
        :rtype: date
        """
        return self._birthday

    @birthday.setter
    def birthday(self, birthday):
        """Sets the birthday of this AutoData.

        Birthday.

        :param birthday: The birthday of this AutoData.
        :type birthday: date
        """

        self._birthday = birthday

    @property
    def cell_phone(self):
        """Gets the cell_phone of this AutoData.


        :return: The cell_phone of this AutoData.
        :rtype: CellPhone
        """
        return self._cell_phone

    @cell_phone.setter
    def cell_phone(self, cell_phone):
        """Sets the cell_phone of this AutoData.


        :param cell_phone: The cell_phone of this AutoData.
        :type cell_phone: CellPhone
        """

        self._cell_phone = cell_phone

    @property
    def city(self):
        """Gets the city of this AutoData.

        Address information: City.

        :return: The city of this AutoData.
        :rtype: str
        """
        return self._city

    @city.setter
    def city(self, city):
        """Sets the city of this AutoData.

        Address information: City.

        :param city: The city of this AutoData.
        :type city: str
        """

        self._city = city

    @property
    def country(self):
        """Gets the country of this AutoData.

        Address information: Country.

        :return: The country of this AutoData.
        :rtype: str
        """
        return self._country

    @country.setter
    def country(self, country):
        """Sets the country of this AutoData.

        Address information: Country.

        :param country: The country of this AutoData.
        :type country: str
        """

        self._country = country

    @property
    def display_name(self):
        """Gets the display_name of this AutoData.

        Common name. By default, equals to concatenated `first_name` and `last_name`.

        :return: The display_name of this AutoData.
        :rtype: str
        """
        return self._display_name

    @display_name.setter
    def display_name(self, display_name):
        """Sets the display_name of this AutoData.

        Common name. By default, equals to concatenated `first_name` and `last_name`.

        :param display_name: The display_name of this AutoData.
        :type display_name: str
        """

        self._display_name = display_name

    @property
    def email(self):
        """Gets the email of this AutoData.


        :return: The email of this AutoData.
        :rtype: Email
        """
        return self._email

    @email.setter
    def email(self, email):
        """Sets the email of this AutoData.


        :param email: The email of this AutoData.
        :type email: Email
        """

        self._email = email

    @property
    def encoding(self):
        """Gets the encoding of this AutoData.

        `mecard` encoding. Data format created especially for saving contact details in the QR Code by Japanese company NTT DoCoMo. The resultant QR code is more compact than its `vcard` equivalent, but it can contain only limited number of data fields.  For more information please refer to: <a href=\"https://en.wikipedia.org/wiki/MeCard_(QR_code)\" rel=\"noopener noreferrer\" target=\"_blank\" >en.wikipedia.org</a>.

        :return: The encoding of this AutoData.
        :rtype: str
        """
        return self._encoding

    @encoding.setter
    def encoding(self, encoding):
        """Sets the encoding of this AutoData.

        `mecard` encoding. Data format created especially for saving contact details in the QR Code by Japanese company NTT DoCoMo. The resultant QR code is more compact than its `vcard` equivalent, but it can contain only limited number of data fields.  For more information please refer to: <a href=\"https://en.wikipedia.org/wiki/MeCard_(QR_code)\" rel=\"noopener noreferrer\" target=\"_blank\" >en.wikipedia.org</a>.

        :param encoding: The encoding of this AutoData.
        :type encoding: str
        """
        allowed_values = ["mecard"]  # noqa: E501
        if encoding not in allowed_values:
            raise ValueError(
                "Invalid value for `encoding` ({0}), must be one of {1}"
                .format(encoding, allowed_values)
            )

        self._encoding = encoding

    @property
    def fax(self):
        """Gets the fax of this AutoData.


        :return: The fax of this AutoData.
        :rtype: Fax
        """
        return self._fax

    @fax.setter
    def fax(self, fax):
        """Sets the fax of this AutoData.


        :param fax: The fax of this AutoData.
        :type fax: Fax
        """

        self._fax = fax

    @property
    def first_name(self):
        """Gets the first_name of this AutoData.

        First name.

        :return: The first_name of this AutoData.
        :rtype: str
        """
        return self._first_name

    @first_name.setter
    def first_name(self, first_name):
        """Sets the first_name of this AutoData.

        First name.

        :param first_name: The first_name of this AutoData.
        :type first_name: str
        """

        self._first_name = first_name

    @property
    def home_phone(self):
        """Gets the home_phone of this AutoData.


        :return: The home_phone of this AutoData.
        :rtype: HomePhone
        """
        return self._home_phone

    @home_phone.setter
    def home_phone(self, home_phone):
        """Sets the home_phone of this AutoData.


        :param home_phone: The home_phone of this AutoData.
        :type home_phone: HomePhone
        """

        self._home_phone = home_phone

    @property
    def last_name(self):
        """Gets the last_name of this AutoData.

        Last name.

        :return: The last_name of this AutoData.
        :rtype: str
        """
        return self._last_name

    @last_name.setter
    def last_name(self, last_name):
        """Sets the last_name of this AutoData.

        Last name.

        :param last_name: The last_name of this AutoData.
        :type last_name: str
        """
        if last_name is None:
            raise ValueError("Invalid value for `last_name`, must not be `None`")

        self._last_name = last_name

    @property
    def latitude(self):
        """Gets the latitude of this AutoData.

        Location latitude.

        :return: The latitude of this AutoData.
        :rtype: float
        """
        return self._latitude

    @latitude.setter
    def latitude(self, latitude):
        """Sets the latitude of this AutoData.

        Location latitude.

        :param latitude: The latitude of this AutoData.
        :type latitude: float
        """
        if latitude is None:
            raise ValueError("Invalid value for `latitude`, must not be `None`")
        if latitude is not None and latitude > 90:
            raise ValueError("Invalid value for `latitude`, must be a value less than or equal to `90`")
        if latitude is not None and latitude < -90:
            raise ValueError("Invalid value for `latitude`, must be a value greater than or equal to `-90`")

        self._latitude = latitude

    @property
    def longitude(self):
        """Gets the longitude of this AutoData.

        Location longitude.

        :return: The longitude of this AutoData.
        :rtype: float
        """
        return self._longitude

    @longitude.setter
    def longitude(self, longitude):
        """Sets the longitude of this AutoData.

        Location longitude.

        :param longitude: The longitude of this AutoData.
        :type longitude: float
        """
        if longitude is None:
            raise ValueError("Invalid value for `longitude`, must not be `None`")
        if longitude is not None and longitude > 180:
            raise ValueError("Invalid value for `longitude`, must be a value less than or equal to `180`")
        if longitude is not None and longitude < -180:
            raise ValueError("Invalid value for `longitude`, must be a value greater than or equal to `-180`")

        self._longitude = longitude

    @property
    def memo(self):
        """Gets the memo of this AutoData.

        Short notice.

        :return: The memo of this AutoData.
        :rtype: str
        """
        return self._memo

    @memo.setter
    def memo(self, memo):
        """Sets the memo of this AutoData.

        Short notice.

        :param memo: The memo of this AutoData.
        :type memo: str
        """

        self._memo = memo

    @property
    def nickname(self):
        """Gets the nickname of this AutoData.

        Nickname.

        :return: The nickname of this AutoData.
        :rtype: str
        """
        return self._nickname

    @nickname.setter
    def nickname(self, nickname):
        """Sets the nickname of this AutoData.

        Nickname.

        :param nickname: The nickname of this AutoData.
        :type nickname: str
        """

        self._nickname = nickname

    @property
    def organization(self):
        """Gets the organization of this AutoData.

        Organization/company name

        :return: The organization of this AutoData.
        :rtype: str
        """
        return self._organization

    @organization.setter
    def organization(self, organization):
        """Sets the organization of this AutoData.

        Organization/company name

        :param organization: The organization of this AutoData.
        :type organization: str
        """

        self._organization = organization

    @property
    def phone(self):
        """Gets the phone of this AutoData.

        Telephone number.

        :return: The phone of this AutoData.
        :rtype: str
        """
        return self._phone

    @phone.setter
    def phone(self, phone):
        """Sets the phone of this AutoData.

        Telephone number.

        :param phone: The phone of this AutoData.
        :type phone: str
        """
        if phone is None:
            raise ValueError("Invalid value for `phone`, must not be `None`")
        if phone is not None and not re.search(r'^[+]*[(]{0,1}[0-9]{1,4}[)]{0,1}[-\s\.\/0-9]*$', phone):
            raise ValueError("Invalid value for `phone`, must be a follow pattern or equal to `/^[+]*[(]{0,1}[0-9]{1,4}[)]{0,1}[-\s\.\/0-9]*$/`")

        self._phone = phone

    @property
    def photo(self):
        """Gets the photo of this AutoData.


        :return: The photo of this AutoData.
        :rtype: Photo
        """
        return self._photo

    @photo.setter
    def photo(self, photo):
        """Sets the photo of this AutoData.


        :param photo: The photo of this AutoData.
        :type photo: Photo
        """

        self._photo = photo

    @property
    def po_box(self):
        """Gets the po_box of this AutoData.

        Address information: Post Office Box.

        :return: The po_box of this AutoData.
        :rtype: str
        """
        return self._po_box

    @po_box.setter
    def po_box(self, po_box):
        """Sets the po_box of this AutoData.

        Address information: Post Office Box.

        :param po_box: The po_box of this AutoData.
        :type po_box: str
        """

        self._po_box = po_box

    @property
    def region(self):
        """Gets the region of this AutoData.

        Address information: Region.

        :return: The region of this AutoData.
        :rtype: str
        """
        return self._region

    @region.setter
    def region(self, region):
        """Sets the region of this AutoData.

        Address information: Region.

        :param region: The region of this AutoData.
        :type region: str
        """

        self._region = region

    @property
    def revision(self):
        """Gets the revision of this AutoData.

        vCard revision/last modification date.

        :return: The revision of this AutoData.
        :rtype: date
        """
        return self._revision

    @revision.setter
    def revision(self, revision):
        """Sets the revision of this AutoData.

        vCard revision/last modification date.

        :param revision: The revision of this AutoData.
        :type revision: date
        """

        self._revision = revision

    @property
    def source(self):
        """Gets the source of this AutoData.

        URL pointing to vCard file itself.

        :return: The source of this AutoData.
        :rtype: str
        """
        return self._source

    @source.setter
    def source(self, source):
        """Sets the source of this AutoData.

        URL pointing to vCard file itself.

        :param source: The source of this AutoData.
        :type source: str
        """
        if source is not None and len(source) > 2083:
            raise ValueError("Invalid value for `source`, length must be less than or equal to `2083`")
        if source is not None and len(source) < 1:
            raise ValueError("Invalid value for `source`, length must be greater than or equal to `1`")

        self._source = source

    @property
    def street(self):
        """Gets the street of this AutoData.

        Address information: Street.

        :return: The street of this AutoData.
        :rtype: str
        """
        return self._street

    @street.setter
    def street(self, street):
        """Sets the street of this AutoData.

        Address information: Street.

        :param street: The street of this AutoData.
        :type street: str
        """

        self._street = street

    @property
    def title(self):
        """Gets the title of this AutoData.


        :return: The title of this AutoData.
        :rtype: Title
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this AutoData.


        :param title: The title of this AutoData.
        :type title: Title
        """

        self._title = title

    @property
    def url(self):
        """Gets the url of this AutoData.


        :return: The url of this AutoData.
        :rtype: Url
        """
        return self._url

    @url.setter
    def url(self, url):
        """Sets the url of this AutoData.


        :param url: The url of this AutoData.
        :type url: Url
        """

        self._url = url

    @property
    def videophone(self):
        """Gets the videophone of this AutoData.


        :return: The videophone of this AutoData.
        :rtype: Videophone
        """
        return self._videophone

    @videophone.setter
    def videophone(self, videophone):
        """Sets the videophone of this AutoData.


        :param videophone: The videophone of this AutoData.
        :type videophone: Videophone
        """

        self._videophone = videophone

    @property
    def work_phone(self):
        """Gets the work_phone of this AutoData.


        :return: The work_phone of this AutoData.
        :rtype: WorkPhone
        """
        return self._work_phone

    @work_phone.setter
    def work_phone(self, work_phone):
        """Sets the work_phone of this AutoData.


        :param work_phone: The work_phone of this AutoData.
        :type work_phone: WorkPhone
        """

        self._work_phone = work_phone

    @property
    def zip_code(self):
        """Gets the zip_code of this AutoData.

        Address information: ZIP code.

        :return: The zip_code of this AutoData.
        :rtype: str
        """
        return self._zip_code

    @zip_code.setter
    def zip_code(self, zip_code):
        """Sets the zip_code of this AutoData.

        Address information: ZIP code.

        :param zip_code: The zip_code of this AutoData.
        :type zip_code: str
        """

        self._zip_code = zip_code

    @property
    def house_number(self):
        """Gets the house_number of this AutoData.

        Address information: House number.

        :return: The house_number of this AutoData.
        :rtype: str
        """
        return self._house_number

    @house_number.setter
    def house_number(self, house_number):
        """Sets the house_number of this AutoData.

        Address information: House number.

        :param house_number: The house_number of this AutoData.
        :type house_number: str
        """

        self._house_number = house_number

    @property
    def prefecture(self):
        """Gets the prefecture of this AutoData.

        Address information: Prefecture.

        :return: The prefecture of this AutoData.
        :rtype: str
        """
        return self._prefecture

    @prefecture.setter
    def prefecture(self, prefecture):
        """Sets the prefecture of this AutoData.

        Address information: Prefecture.

        :param prefecture: The prefecture of this AutoData.
        :type prefecture: str
        """

        self._prefecture = prefecture

    @property
    def reading(self):
        """Gets the reading of this AutoData.

        Kana name.

        :return: The reading of this AutoData.
        :rtype: str
        """
        return self._reading

    @reading.setter
    def reading(self, reading):
        """Sets the reading of this AutoData.

        Kana name.

        :param reading: The reading of this AutoData.
        :type reading: str
        """

        self._reading = reading

    @property
    def room_number(self):
        """Gets the room_number of this AutoData.

        Address information: Room number.

        :return: The room_number of this AutoData.
        :rtype: str
        """
        return self._room_number

    @room_number.setter
    def room_number(self, room_number):
        """Sets the room_number of this AutoData.

        Address information: Room number.

        :param room_number: The room_number of this AutoData.
        :type room_number: str
        """

        self._room_number = room_number

    @property
    def address(self):
        """Gets the address of this AutoData.

        Wallet address.

        :return: The address of this AutoData.
        :rtype: str
        """
        return self._address

    @address.setter
    def address(self, address):
        """Sets the address of this AutoData.

        Wallet address.

        :param address: The address of this AutoData.
        :type address: str
        """
        if address is None:
            raise ValueError("Invalid value for `address`, must not be `None`")

        self._address = address

    @property
    def amount(self):
        """Gets the amount of this AutoData.

        Decimal value of payment amount.

        :return: The amount of this AutoData.
        :rtype: float
        """
        return self._amount

    @amount.setter
    def amount(self, amount):
        """Sets the amount of this AutoData.

        Decimal value of payment amount.

        :param amount: The amount of this AutoData.
        :type amount: float
        """
        if amount is not None and amount <= 0:
            raise ValueError("Invalid value for `amount`, must be a value greater than `0`")

        self._amount = amount

    @property
    def currency(self):
        """Gets the currency of this AutoData.

        Payment currency.

        :return: The currency of this AutoData.
        :rtype: Cryptocurrency
        """
        return self._currency

    @currency.setter
    def currency(self, currency):
        """Sets the currency of this AutoData.

        Payment currency.

        :param currency: The currency of this AutoData.
        :type currency: Cryptocurrency
        """
        if currency is None:
            raise ValueError("Invalid value for `currency`, must not be `None`")

        self._currency = currency

    @property
    def label(self):
        """Gets the label of this AutoData.

        Label for the wallet address (e.g. name of receiver).

        :return: The label of this AutoData.
        :rtype: str
        """
        return self._label

    @label.setter
    def label(self, label):
        """Sets the label of this AutoData.

        Label for the wallet address (e.g. name of receiver).

        :param label: The label of this AutoData.
        :type label: str
        """

        self._label = label

    @property
    def message(self):
        """Gets the message of this AutoData.

        Message template.

        :return: The message of this AutoData.
        :rtype: str
        """
        return self._message

    @message.setter
    def message(self, message):
        """Sets the message of this AutoData.

        Message template.

        :param message: The message of this AutoData.
        :type message: str
        """

        self._message = message

    @property
    def format(self):
        """Gets the format of this AutoData.

        URI format.  - `rfc5870` data encoded according to <a href=\"https://datatracker.ietf.org/doc/html/rfc5870\" rel=\"noopener noreferrer\" target=\"_blank\" >RFC5870 standard</a>  - `google` data encoded according to <a href=\"https://developers.google.com/maps/documentation/urls/android-intents\" rel=\"noopener noreferrer\" target=\"_blank\" >Google Maps standard</a>

        :return: The format of this AutoData.
        :rtype: GeolocationUriFormat
        """
        return self._format

    @format.setter
    def format(self, format):
        """Sets the format of this AutoData.

        URI format.  - `rfc5870` data encoded according to <a href=\"https://datatracker.ietf.org/doc/html/rfc5870\" rel=\"noopener noreferrer\" target=\"_blank\" >RFC5870 standard</a>  - `google` data encoded according to <a href=\"https://developers.google.com/maps/documentation/urls/android-intents\" rel=\"noopener noreferrer\" target=\"_blank\" >Google Maps standard</a>

        :param format: The format of this AutoData.
        :type format: GeolocationUriFormat
        """

        self._format = format
