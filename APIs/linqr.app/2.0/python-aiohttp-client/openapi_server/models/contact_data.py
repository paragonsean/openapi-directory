# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.cell_phone import CellPhone
from openapi_server.models.email import Email
from openapi_server.models.fax import Fax
from openapi_server.models.home_phone import HomePhone
from openapi_server.models.me_card_data import MeCardData
from openapi_server.models.phone import Phone
from openapi_server.models.photo import Photo
from openapi_server.models.title import Title
from openapi_server.models.url import Url
from openapi_server.models.v_card_data import VCardData
from openapi_server.models.videophone import Videophone
from openapi_server.models.work_phone import WorkPhone
from openapi_server import util


class ContactData(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, birthday: date=None, cell_phone: CellPhone=None, city: str=None, country: str=None, display_name: str=None, email: Email=None, encoding: str='mecard', fax: Fax=None, first_name: str=None, home_phone: HomePhone=None, last_name: str=None, latitude: float=None, longitude: float=None, memo: str=None, nickname: str=None, organization: str=None, phone: Phone=None, photo: Photo=None, po_box: str=None, region: str=None, revision: date=None, source: str=None, street: str=None, title: Title=None, url: Url=None, videophone: Videophone=None, work_phone: WorkPhone=None, zip_code: str=None, house_number: str=None, prefecture: str=None, reading: str=None, room_number: str=None):
        """ContactData - a model defined in OpenAPI

        :param birthday: The birthday of this ContactData.
        :param cell_phone: The cell_phone of this ContactData.
        :param city: The city of this ContactData.
        :param country: The country of this ContactData.
        :param display_name: The display_name of this ContactData.
        :param email: The email of this ContactData.
        :param encoding: The encoding of this ContactData.
        :param fax: The fax of this ContactData.
        :param first_name: The first_name of this ContactData.
        :param home_phone: The home_phone of this ContactData.
        :param last_name: The last_name of this ContactData.
        :param latitude: The latitude of this ContactData.
        :param longitude: The longitude of this ContactData.
        :param memo: The memo of this ContactData.
        :param nickname: The nickname of this ContactData.
        :param organization: The organization of this ContactData.
        :param phone: The phone of this ContactData.
        :param photo: The photo of this ContactData.
        :param po_box: The po_box of this ContactData.
        :param region: The region of this ContactData.
        :param revision: The revision of this ContactData.
        :param source: The source of this ContactData.
        :param street: The street of this ContactData.
        :param title: The title of this ContactData.
        :param url: The url of this ContactData.
        :param videophone: The videophone of this ContactData.
        :param work_phone: The work_phone of this ContactData.
        :param zip_code: The zip_code of this ContactData.
        :param house_number: The house_number of this ContactData.
        :param prefecture: The prefecture of this ContactData.
        :param reading: The reading of this ContactData.
        :param room_number: The room_number of this ContactData.
        """
        self.openapi_types = {
            'birthday': date,
            'cell_phone': CellPhone,
            'city': str,
            'country': str,
            'display_name': str,
            'email': Email,
            'encoding': str,
            'fax': Fax,
            'first_name': str,
            'home_phone': HomePhone,
            'last_name': str,
            'latitude': float,
            'longitude': float,
            'memo': str,
            'nickname': str,
            'organization': str,
            'phone': Phone,
            'photo': Photo,
            'po_box': str,
            'region': str,
            'revision': date,
            'source': str,
            'street': str,
            'title': Title,
            'url': Url,
            'videophone': Videophone,
            'work_phone': WorkPhone,
            'zip_code': str,
            'house_number': str,
            'prefecture': str,
            'reading': str,
            'room_number': str
        }

        self.attribute_map = {
            'birthday': 'birthday',
            'cell_phone': 'cell_phone',
            'city': 'city',
            'country': 'country',
            'display_name': 'display_name',
            'email': 'email',
            'encoding': 'encoding',
            'fax': 'fax',
            'first_name': 'first_name',
            'home_phone': 'home_phone',
            'last_name': 'last_name',
            'latitude': 'latitude',
            'longitude': 'longitude',
            'memo': 'memo',
            'nickname': 'nickname',
            'organization': 'organization',
            'phone': 'phone',
            'photo': 'photo',
            'po_box': 'po_box',
            'region': 'region',
            'revision': 'revision',
            'source': 'source',
            'street': 'street',
            'title': 'title',
            'url': 'url',
            'videophone': 'videophone',
            'work_phone': 'work_phone',
            'zip_code': 'zip_code',
            'house_number': 'house_number',
            'prefecture': 'prefecture',
            'reading': 'reading',
            'room_number': 'room_number'
        }

        self._birthday = birthday
        self._cell_phone = cell_phone
        self._city = city
        self._country = country
        self._display_name = display_name
        self._email = email
        self._encoding = encoding
        self._fax = fax
        self._first_name = first_name
        self._home_phone = home_phone
        self._last_name = last_name
        self._latitude = latitude
        self._longitude = longitude
        self._memo = memo
        self._nickname = nickname
        self._organization = organization
        self._phone = phone
        self._photo = photo
        self._po_box = po_box
        self._region = region
        self._revision = revision
        self._source = source
        self._street = street
        self._title = title
        self._url = url
        self._videophone = videophone
        self._work_phone = work_phone
        self._zip_code = zip_code
        self._house_number = house_number
        self._prefecture = prefecture
        self._reading = reading
        self._room_number = room_number

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ContactData':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ContactData of this ContactData.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def birthday(self):
        """Gets the birthday of this ContactData.

        Birthday.

        :return: The birthday of this ContactData.
        :rtype: date
        """
        return self._birthday

    @birthday.setter
    def birthday(self, birthday):
        """Sets the birthday of this ContactData.

        Birthday.

        :param birthday: The birthday of this ContactData.
        :type birthday: date
        """

        self._birthday = birthday

    @property
    def cell_phone(self):
        """Gets the cell_phone of this ContactData.


        :return: The cell_phone of this ContactData.
        :rtype: CellPhone
        """
        return self._cell_phone

    @cell_phone.setter
    def cell_phone(self, cell_phone):
        """Sets the cell_phone of this ContactData.


        :param cell_phone: The cell_phone of this ContactData.
        :type cell_phone: CellPhone
        """

        self._cell_phone = cell_phone

    @property
    def city(self):
        """Gets the city of this ContactData.

        Address information: City.

        :return: The city of this ContactData.
        :rtype: str
        """
        return self._city

    @city.setter
    def city(self, city):
        """Sets the city of this ContactData.

        Address information: City.

        :param city: The city of this ContactData.
        :type city: str
        """

        self._city = city

    @property
    def country(self):
        """Gets the country of this ContactData.

        Address information: Country.

        :return: The country of this ContactData.
        :rtype: str
        """
        return self._country

    @country.setter
    def country(self, country):
        """Sets the country of this ContactData.

        Address information: Country.

        :param country: The country of this ContactData.
        :type country: str
        """

        self._country = country

    @property
    def display_name(self):
        """Gets the display_name of this ContactData.

        Common name. By default, equals to concatenated `first_name` and `last_name`.

        :return: The display_name of this ContactData.
        :rtype: str
        """
        return self._display_name

    @display_name.setter
    def display_name(self, display_name):
        """Sets the display_name of this ContactData.

        Common name. By default, equals to concatenated `first_name` and `last_name`.

        :param display_name: The display_name of this ContactData.
        :type display_name: str
        """

        self._display_name = display_name

    @property
    def email(self):
        """Gets the email of this ContactData.


        :return: The email of this ContactData.
        :rtype: Email
        """
        return self._email

    @email.setter
    def email(self, email):
        """Sets the email of this ContactData.


        :param email: The email of this ContactData.
        :type email: Email
        """

        self._email = email

    @property
    def encoding(self):
        """Gets the encoding of this ContactData.

        `mecard` encoding. Data format created especially for saving contact details in the QR Code by Japanese company NTT DoCoMo. The resultant QR code is more compact than its `vcard` equivalent, but it can contain only limited number of data fields.  For more information please refer to: <a href=\"https://en.wikipedia.org/wiki/MeCard_(QR_code)\" rel=\"noopener noreferrer\" target=\"_blank\" >en.wikipedia.org</a>.

        :return: The encoding of this ContactData.
        :rtype: str
        """
        return self._encoding

    @encoding.setter
    def encoding(self, encoding):
        """Sets the encoding of this ContactData.

        `mecard` encoding. Data format created especially for saving contact details in the QR Code by Japanese company NTT DoCoMo. The resultant QR code is more compact than its `vcard` equivalent, but it can contain only limited number of data fields.  For more information please refer to: <a href=\"https://en.wikipedia.org/wiki/MeCard_(QR_code)\" rel=\"noopener noreferrer\" target=\"_blank\" >en.wikipedia.org</a>.

        :param encoding: The encoding of this ContactData.
        :type encoding: str
        """
        allowed_values = ["mecard"]  # noqa: E501
        if encoding not in allowed_values:
            raise ValueError(
                "Invalid value for `encoding` ({0}), must be one of {1}"
                .format(encoding, allowed_values)
            )

        self._encoding = encoding

    @property
    def fax(self):
        """Gets the fax of this ContactData.


        :return: The fax of this ContactData.
        :rtype: Fax
        """
        return self._fax

    @fax.setter
    def fax(self, fax):
        """Sets the fax of this ContactData.


        :param fax: The fax of this ContactData.
        :type fax: Fax
        """

        self._fax = fax

    @property
    def first_name(self):
        """Gets the first_name of this ContactData.

        First name.

        :return: The first_name of this ContactData.
        :rtype: str
        """
        return self._first_name

    @first_name.setter
    def first_name(self, first_name):
        """Sets the first_name of this ContactData.

        First name.

        :param first_name: The first_name of this ContactData.
        :type first_name: str
        """

        self._first_name = first_name

    @property
    def home_phone(self):
        """Gets the home_phone of this ContactData.


        :return: The home_phone of this ContactData.
        :rtype: HomePhone
        """
        return self._home_phone

    @home_phone.setter
    def home_phone(self, home_phone):
        """Sets the home_phone of this ContactData.


        :param home_phone: The home_phone of this ContactData.
        :type home_phone: HomePhone
        """

        self._home_phone = home_phone

    @property
    def last_name(self):
        """Gets the last_name of this ContactData.

        Last name.

        :return: The last_name of this ContactData.
        :rtype: str
        """
        return self._last_name

    @last_name.setter
    def last_name(self, last_name):
        """Sets the last_name of this ContactData.

        Last name.

        :param last_name: The last_name of this ContactData.
        :type last_name: str
        """
        if last_name is None:
            raise ValueError("Invalid value for `last_name`, must not be `None`")

        self._last_name = last_name

    @property
    def latitude(self):
        """Gets the latitude of this ContactData.

        Location latitude.

        :return: The latitude of this ContactData.
        :rtype: float
        """
        return self._latitude

    @latitude.setter
    def latitude(self, latitude):
        """Sets the latitude of this ContactData.

        Location latitude.

        :param latitude: The latitude of this ContactData.
        :type latitude: float
        """
        if latitude is not None and latitude > 90:
            raise ValueError("Invalid value for `latitude`, must be a value less than or equal to `90`")
        if latitude is not None and latitude < -90:
            raise ValueError("Invalid value for `latitude`, must be a value greater than or equal to `-90`")

        self._latitude = latitude

    @property
    def longitude(self):
        """Gets the longitude of this ContactData.

        Location longitude.

        :return: The longitude of this ContactData.
        :rtype: float
        """
        return self._longitude

    @longitude.setter
    def longitude(self, longitude):
        """Sets the longitude of this ContactData.

        Location longitude.

        :param longitude: The longitude of this ContactData.
        :type longitude: float
        """
        if longitude is not None and longitude > 180:
            raise ValueError("Invalid value for `longitude`, must be a value less than or equal to `180`")
        if longitude is not None and longitude < -180:
            raise ValueError("Invalid value for `longitude`, must be a value greater than or equal to `-180`")

        self._longitude = longitude

    @property
    def memo(self):
        """Gets the memo of this ContactData.

        Short notice.

        :return: The memo of this ContactData.
        :rtype: str
        """
        return self._memo

    @memo.setter
    def memo(self, memo):
        """Sets the memo of this ContactData.

        Short notice.

        :param memo: The memo of this ContactData.
        :type memo: str
        """

        self._memo = memo

    @property
    def nickname(self):
        """Gets the nickname of this ContactData.

        Nickname.

        :return: The nickname of this ContactData.
        :rtype: str
        """
        return self._nickname

    @nickname.setter
    def nickname(self, nickname):
        """Sets the nickname of this ContactData.

        Nickname.

        :param nickname: The nickname of this ContactData.
        :type nickname: str
        """

        self._nickname = nickname

    @property
    def organization(self):
        """Gets the organization of this ContactData.

        Organization/company name

        :return: The organization of this ContactData.
        :rtype: str
        """
        return self._organization

    @organization.setter
    def organization(self, organization):
        """Sets the organization of this ContactData.

        Organization/company name

        :param organization: The organization of this ContactData.
        :type organization: str
        """

        self._organization = organization

    @property
    def phone(self):
        """Gets the phone of this ContactData.


        :return: The phone of this ContactData.
        :rtype: Phone
        """
        return self._phone

    @phone.setter
    def phone(self, phone):
        """Sets the phone of this ContactData.


        :param phone: The phone of this ContactData.
        :type phone: Phone
        """

        self._phone = phone

    @property
    def photo(self):
        """Gets the photo of this ContactData.


        :return: The photo of this ContactData.
        :rtype: Photo
        """
        return self._photo

    @photo.setter
    def photo(self, photo):
        """Sets the photo of this ContactData.


        :param photo: The photo of this ContactData.
        :type photo: Photo
        """

        self._photo = photo

    @property
    def po_box(self):
        """Gets the po_box of this ContactData.

        Address information: Post Office Box.

        :return: The po_box of this ContactData.
        :rtype: str
        """
        return self._po_box

    @po_box.setter
    def po_box(self, po_box):
        """Sets the po_box of this ContactData.

        Address information: Post Office Box.

        :param po_box: The po_box of this ContactData.
        :type po_box: str
        """

        self._po_box = po_box

    @property
    def region(self):
        """Gets the region of this ContactData.

        Address information: Region.

        :return: The region of this ContactData.
        :rtype: str
        """
        return self._region

    @region.setter
    def region(self, region):
        """Sets the region of this ContactData.

        Address information: Region.

        :param region: The region of this ContactData.
        :type region: str
        """

        self._region = region

    @property
    def revision(self):
        """Gets the revision of this ContactData.

        vCard revision/last modification date.

        :return: The revision of this ContactData.
        :rtype: date
        """
        return self._revision

    @revision.setter
    def revision(self, revision):
        """Sets the revision of this ContactData.

        vCard revision/last modification date.

        :param revision: The revision of this ContactData.
        :type revision: date
        """

        self._revision = revision

    @property
    def source(self):
        """Gets the source of this ContactData.

        URL pointing to vCard file itself.

        :return: The source of this ContactData.
        :rtype: str
        """
        return self._source

    @source.setter
    def source(self, source):
        """Sets the source of this ContactData.

        URL pointing to vCard file itself.

        :param source: The source of this ContactData.
        :type source: str
        """
        if source is not None and len(source) > 2083:
            raise ValueError("Invalid value for `source`, length must be less than or equal to `2083`")
        if source is not None and len(source) < 1:
            raise ValueError("Invalid value for `source`, length must be greater than or equal to `1`")

        self._source = source

    @property
    def street(self):
        """Gets the street of this ContactData.

        Address information: Street.

        :return: The street of this ContactData.
        :rtype: str
        """
        return self._street

    @street.setter
    def street(self, street):
        """Sets the street of this ContactData.

        Address information: Street.

        :param street: The street of this ContactData.
        :type street: str
        """

        self._street = street

    @property
    def title(self):
        """Gets the title of this ContactData.


        :return: The title of this ContactData.
        :rtype: Title
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this ContactData.


        :param title: The title of this ContactData.
        :type title: Title
        """

        self._title = title

    @property
    def url(self):
        """Gets the url of this ContactData.


        :return: The url of this ContactData.
        :rtype: Url
        """
        return self._url

    @url.setter
    def url(self, url):
        """Sets the url of this ContactData.


        :param url: The url of this ContactData.
        :type url: Url
        """

        self._url = url

    @property
    def videophone(self):
        """Gets the videophone of this ContactData.


        :return: The videophone of this ContactData.
        :rtype: Videophone
        """
        return self._videophone

    @videophone.setter
    def videophone(self, videophone):
        """Sets the videophone of this ContactData.


        :param videophone: The videophone of this ContactData.
        :type videophone: Videophone
        """

        self._videophone = videophone

    @property
    def work_phone(self):
        """Gets the work_phone of this ContactData.


        :return: The work_phone of this ContactData.
        :rtype: WorkPhone
        """
        return self._work_phone

    @work_phone.setter
    def work_phone(self, work_phone):
        """Sets the work_phone of this ContactData.


        :param work_phone: The work_phone of this ContactData.
        :type work_phone: WorkPhone
        """

        self._work_phone = work_phone

    @property
    def zip_code(self):
        """Gets the zip_code of this ContactData.

        Address information: ZIP code.

        :return: The zip_code of this ContactData.
        :rtype: str
        """
        return self._zip_code

    @zip_code.setter
    def zip_code(self, zip_code):
        """Sets the zip_code of this ContactData.

        Address information: ZIP code.

        :param zip_code: The zip_code of this ContactData.
        :type zip_code: str
        """

        self._zip_code = zip_code

    @property
    def house_number(self):
        """Gets the house_number of this ContactData.

        Address information: House number.

        :return: The house_number of this ContactData.
        :rtype: str
        """
        return self._house_number

    @house_number.setter
    def house_number(self, house_number):
        """Sets the house_number of this ContactData.

        Address information: House number.

        :param house_number: The house_number of this ContactData.
        :type house_number: str
        """

        self._house_number = house_number

    @property
    def prefecture(self):
        """Gets the prefecture of this ContactData.

        Address information: Prefecture.

        :return: The prefecture of this ContactData.
        :rtype: str
        """
        return self._prefecture

    @prefecture.setter
    def prefecture(self, prefecture):
        """Sets the prefecture of this ContactData.

        Address information: Prefecture.

        :param prefecture: The prefecture of this ContactData.
        :type prefecture: str
        """

        self._prefecture = prefecture

    @property
    def reading(self):
        """Gets the reading of this ContactData.

        Kana name.

        :return: The reading of this ContactData.
        :rtype: str
        """
        return self._reading

    @reading.setter
    def reading(self, reading):
        """Sets the reading of this ContactData.

        Kana name.

        :param reading: The reading of this ContactData.
        :type reading: str
        """

        self._reading = reading

    @property
    def room_number(self):
        """Gets the room_number of this ContactData.

        Address information: Room number.

        :return: The room_number of this ContactData.
        :rtype: str
        """
        return self._room_number

    @room_number.setter
    def room_number(self, room_number):
        """Sets the room_number of this ContactData.

        Address information: Room number.

        :param room_number: The room_number of this ContactData.
        :type room_number: str
        """

        self._room_number = room_number
