# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.email import Email
from openapi_server.models.phone import Phone
from openapi_server.models.url import Url
from openapi_server.models.videophone import Videophone
from openapi_server import util


class MeCardData(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, birthday: date=None, city: str=None, country: str=None, email: Email=None, encoding: str='mecard', first_name: str=None, house_number: str=None, last_name: str=None, memo: str=None, nickname: str=None, phone: Phone=None, po_box: str=None, prefecture: str=None, reading: str=None, room_number: str=None, url: Url=None, videophone: Videophone=None, zip_code: str=None):
        """MeCardData - a model defined in OpenAPI

        :param birthday: The birthday of this MeCardData.
        :param city: The city of this MeCardData.
        :param country: The country of this MeCardData.
        :param email: The email of this MeCardData.
        :param encoding: The encoding of this MeCardData.
        :param first_name: The first_name of this MeCardData.
        :param house_number: The house_number of this MeCardData.
        :param last_name: The last_name of this MeCardData.
        :param memo: The memo of this MeCardData.
        :param nickname: The nickname of this MeCardData.
        :param phone: The phone of this MeCardData.
        :param po_box: The po_box of this MeCardData.
        :param prefecture: The prefecture of this MeCardData.
        :param reading: The reading of this MeCardData.
        :param room_number: The room_number of this MeCardData.
        :param url: The url of this MeCardData.
        :param videophone: The videophone of this MeCardData.
        :param zip_code: The zip_code of this MeCardData.
        """
        self.openapi_types = {
            'birthday': date,
            'city': str,
            'country': str,
            'email': Email,
            'encoding': str,
            'first_name': str,
            'house_number': str,
            'last_name': str,
            'memo': str,
            'nickname': str,
            'phone': Phone,
            'po_box': str,
            'prefecture': str,
            'reading': str,
            'room_number': str,
            'url': Url,
            'videophone': Videophone,
            'zip_code': str
        }

        self.attribute_map = {
            'birthday': 'birthday',
            'city': 'city',
            'country': 'country',
            'email': 'email',
            'encoding': 'encoding',
            'first_name': 'first_name',
            'house_number': 'house_number',
            'last_name': 'last_name',
            'memo': 'memo',
            'nickname': 'nickname',
            'phone': 'phone',
            'po_box': 'po_box',
            'prefecture': 'prefecture',
            'reading': 'reading',
            'room_number': 'room_number',
            'url': 'url',
            'videophone': 'videophone',
            'zip_code': 'zip_code'
        }

        self._birthday = birthday
        self._city = city
        self._country = country
        self._email = email
        self._encoding = encoding
        self._first_name = first_name
        self._house_number = house_number
        self._last_name = last_name
        self._memo = memo
        self._nickname = nickname
        self._phone = phone
        self._po_box = po_box
        self._prefecture = prefecture
        self._reading = reading
        self._room_number = room_number
        self._url = url
        self._videophone = videophone
        self._zip_code = zip_code

    @classmethod
    def from_dict(cls, dikt: dict) -> 'MeCardData':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The MeCardData of this MeCardData.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def birthday(self):
        """Gets the birthday of this MeCardData.

        Birthday.

        :return: The birthday of this MeCardData.
        :rtype: date
        """
        return self._birthday

    @birthday.setter
    def birthday(self, birthday):
        """Sets the birthday of this MeCardData.

        Birthday.

        :param birthday: The birthday of this MeCardData.
        :type birthday: date
        """

        self._birthday = birthday

    @property
    def city(self):
        """Gets the city of this MeCardData.

        Address information: City.

        :return: The city of this MeCardData.
        :rtype: str
        """
        return self._city

    @city.setter
    def city(self, city):
        """Sets the city of this MeCardData.

        Address information: City.

        :param city: The city of this MeCardData.
        :type city: str
        """

        self._city = city

    @property
    def country(self):
        """Gets the country of this MeCardData.

        Address information: Country.

        :return: The country of this MeCardData.
        :rtype: str
        """
        return self._country

    @country.setter
    def country(self, country):
        """Sets the country of this MeCardData.

        Address information: Country.

        :param country: The country of this MeCardData.
        :type country: str
        """

        self._country = country

    @property
    def email(self):
        """Gets the email of this MeCardData.


        :return: The email of this MeCardData.
        :rtype: Email
        """
        return self._email

    @email.setter
    def email(self, email):
        """Sets the email of this MeCardData.


        :param email: The email of this MeCardData.
        :type email: Email
        """

        self._email = email

    @property
    def encoding(self):
        """Gets the encoding of this MeCardData.

        `mecard` encoding. Data format created especially for saving contact details in the QR Code by Japanese company NTT DoCoMo. The resultant QR code is more compact than its `vcard` equivalent, but it can contain only limited number of data fields.  For more information please refer to: <a href=\"https://en.wikipedia.org/wiki/MeCard_(QR_code)\" rel=\"noopener noreferrer\" target=\"_blank\" >en.wikipedia.org</a>.

        :return: The encoding of this MeCardData.
        :rtype: str
        """
        return self._encoding

    @encoding.setter
    def encoding(self, encoding):
        """Sets the encoding of this MeCardData.

        `mecard` encoding. Data format created especially for saving contact details in the QR Code by Japanese company NTT DoCoMo. The resultant QR code is more compact than its `vcard` equivalent, but it can contain only limited number of data fields.  For more information please refer to: <a href=\"https://en.wikipedia.org/wiki/MeCard_(QR_code)\" rel=\"noopener noreferrer\" target=\"_blank\" >en.wikipedia.org</a>.

        :param encoding: The encoding of this MeCardData.
        :type encoding: str
        """
        allowed_values = ["mecard"]  # noqa: E501
        if encoding not in allowed_values:
            raise ValueError(
                "Invalid value for `encoding` ({0}), must be one of {1}"
                .format(encoding, allowed_values)
            )

        self._encoding = encoding

    @property
    def first_name(self):
        """Gets the first_name of this MeCardData.

        First name.

        :return: The first_name of this MeCardData.
        :rtype: str
        """
        return self._first_name

    @first_name.setter
    def first_name(self, first_name):
        """Sets the first_name of this MeCardData.

        First name.

        :param first_name: The first_name of this MeCardData.
        :type first_name: str
        """

        self._first_name = first_name

    @property
    def house_number(self):
        """Gets the house_number of this MeCardData.

        Address information: House number.

        :return: The house_number of this MeCardData.
        :rtype: str
        """
        return self._house_number

    @house_number.setter
    def house_number(self, house_number):
        """Sets the house_number of this MeCardData.

        Address information: House number.

        :param house_number: The house_number of this MeCardData.
        :type house_number: str
        """

        self._house_number = house_number

    @property
    def last_name(self):
        """Gets the last_name of this MeCardData.

        Last name.

        :return: The last_name of this MeCardData.
        :rtype: str
        """
        return self._last_name

    @last_name.setter
    def last_name(self, last_name):
        """Sets the last_name of this MeCardData.

        Last name.

        :param last_name: The last_name of this MeCardData.
        :type last_name: str
        """
        if last_name is None:
            raise ValueError("Invalid value for `last_name`, must not be `None`")

        self._last_name = last_name

    @property
    def memo(self):
        """Gets the memo of this MeCardData.

        Short notice.

        :return: The memo of this MeCardData.
        :rtype: str
        """
        return self._memo

    @memo.setter
    def memo(self, memo):
        """Sets the memo of this MeCardData.

        Short notice.

        :param memo: The memo of this MeCardData.
        :type memo: str
        """

        self._memo = memo

    @property
    def nickname(self):
        """Gets the nickname of this MeCardData.

        Nickname.

        :return: The nickname of this MeCardData.
        :rtype: str
        """
        return self._nickname

    @nickname.setter
    def nickname(self, nickname):
        """Sets the nickname of this MeCardData.

        Nickname.

        :param nickname: The nickname of this MeCardData.
        :type nickname: str
        """

        self._nickname = nickname

    @property
    def phone(self):
        """Gets the phone of this MeCardData.


        :return: The phone of this MeCardData.
        :rtype: Phone
        """
        return self._phone

    @phone.setter
    def phone(self, phone):
        """Sets the phone of this MeCardData.


        :param phone: The phone of this MeCardData.
        :type phone: Phone
        """

        self._phone = phone

    @property
    def po_box(self):
        """Gets the po_box of this MeCardData.

        Address information: Post Office Box.

        :return: The po_box of this MeCardData.
        :rtype: str
        """
        return self._po_box

    @po_box.setter
    def po_box(self, po_box):
        """Sets the po_box of this MeCardData.

        Address information: Post Office Box.

        :param po_box: The po_box of this MeCardData.
        :type po_box: str
        """

        self._po_box = po_box

    @property
    def prefecture(self):
        """Gets the prefecture of this MeCardData.

        Address information: Prefecture.

        :return: The prefecture of this MeCardData.
        :rtype: str
        """
        return self._prefecture

    @prefecture.setter
    def prefecture(self, prefecture):
        """Sets the prefecture of this MeCardData.

        Address information: Prefecture.

        :param prefecture: The prefecture of this MeCardData.
        :type prefecture: str
        """

        self._prefecture = prefecture

    @property
    def reading(self):
        """Gets the reading of this MeCardData.

        Kana name.

        :return: The reading of this MeCardData.
        :rtype: str
        """
        return self._reading

    @reading.setter
    def reading(self, reading):
        """Sets the reading of this MeCardData.

        Kana name.

        :param reading: The reading of this MeCardData.
        :type reading: str
        """

        self._reading = reading

    @property
    def room_number(self):
        """Gets the room_number of this MeCardData.

        Address information: Room number.

        :return: The room_number of this MeCardData.
        :rtype: str
        """
        return self._room_number

    @room_number.setter
    def room_number(self, room_number):
        """Sets the room_number of this MeCardData.

        Address information: Room number.

        :param room_number: The room_number of this MeCardData.
        :type room_number: str
        """

        self._room_number = room_number

    @property
    def url(self):
        """Gets the url of this MeCardData.


        :return: The url of this MeCardData.
        :rtype: Url
        """
        return self._url

    @url.setter
    def url(self, url):
        """Sets the url of this MeCardData.


        :param url: The url of this MeCardData.
        :type url: Url
        """

        self._url = url

    @property
    def videophone(self):
        """Gets the videophone of this MeCardData.


        :return: The videophone of this MeCardData.
        :rtype: Videophone
        """
        return self._videophone

    @videophone.setter
    def videophone(self, videophone):
        """Sets the videophone of this MeCardData.


        :param videophone: The videophone of this MeCardData.
        :type videophone: Videophone
        """

        self._videophone = videophone

    @property
    def zip_code(self):
        """Gets the zip_code of this MeCardData.

        Address information: ZIP code.

        :return: The zip_code of this MeCardData.
        :rtype: str
        """
        return self._zip_code

    @zip_code.setter
    def zip_code(self, zip_code):
        """Sets the zip_code of this MeCardData.

        Address information: ZIP code.

        :param zip_code: The zip_code of this MeCardData.
        :type zip_code: str
        """

        self._zip_code = zip_code
