# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.bcc import Bcc
from openapi_server.models.cc import Cc
from openapi_server.models.to import To
from openapi_server import util


class EmailData(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, bcc: Bcc=None, body: str=None, cc: Cc=None, subject: str=None, to: To=None):
        """EmailData - a model defined in OpenAPI

        :param bcc: The bcc of this EmailData.
        :param body: The body of this EmailData.
        :param cc: The cc of this EmailData.
        :param subject: The subject of this EmailData.
        :param to: The to of this EmailData.
        """
        self.openapi_types = {
            'bcc': Bcc,
            'body': str,
            'cc': Cc,
            'subject': str,
            'to': To
        }

        self.attribute_map = {
            'bcc': 'bcc',
            'body': 'body',
            'cc': 'cc',
            'subject': 'subject',
            'to': 'to'
        }

        self._bcc = bcc
        self._body = body
        self._cc = cc
        self._subject = subject
        self._to = to

    @classmethod
    def from_dict(cls, dikt: dict) -> 'EmailData':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The EmailData of this EmailData.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def bcc(self):
        """Gets the bcc of this EmailData.


        :return: The bcc of this EmailData.
        :rtype: Bcc
        """
        return self._bcc

    @bcc.setter
    def bcc(self, bcc):
        """Sets the bcc of this EmailData.


        :param bcc: The bcc of this EmailData.
        :type bcc: Bcc
        """

        self._bcc = bcc

    @property
    def body(self):
        """Gets the body of this EmailData.

        The message body.

        :return: The body of this EmailData.
        :rtype: str
        """
        return self._body

    @body.setter
    def body(self, body):
        """Sets the body of this EmailData.

        The message body.

        :param body: The body of this EmailData.
        :type body: str
        """

        self._body = body

    @property
    def cc(self):
        """Gets the cc of this EmailData.


        :return: The cc of this EmailData.
        :rtype: Cc
        """
        return self._cc

    @cc.setter
    def cc(self, cc):
        """Sets the cc of this EmailData.


        :param cc: The cc of this EmailData.
        :type cc: Cc
        """

        self._cc = cc

    @property
    def subject(self):
        """Gets the subject of this EmailData.

        The message subject.

        :return: The subject of this EmailData.
        :rtype: str
        """
        return self._subject

    @subject.setter
    def subject(self, subject):
        """Sets the subject of this EmailData.

        The message subject.

        :param subject: The subject of this EmailData.
        :type subject: str
        """

        self._subject = subject

    @property
    def to(self):
        """Gets the to of this EmailData.


        :return: The to of this EmailData.
        :rtype: To
        """
        return self._to

    @to.setter
    def to(self, to):
        """Sets the to of this EmailData.


        :param to: The to of this EmailData.
        :type to: To
        """
        if to is None:
            raise ValueError("Invalid value for `to`, must not be `None`")

        self._to = to
