# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.wi_fi_security import WiFiSecurity
from openapi_server import util


class WiFiData(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, hidden: bool=False, password: str=None, security: WiFiSecurity=None, ssid: str=None):
        """WiFiData - a model defined in OpenAPI

        :param hidden: The hidden of this WiFiData.
        :param password: The password of this WiFiData.
        :param security: The security of this WiFiData.
        :param ssid: The ssid of this WiFiData.
        """
        self.openapi_types = {
            'hidden': bool,
            'password': str,
            'security': WiFiSecurity,
            'ssid': str
        }

        self.attribute_map = {
            'hidden': 'hidden',
            'password': 'password',
            'security': 'security',
            'ssid': 'ssid'
        }

        self._hidden = hidden
        self._password = password
        self._security = security
        self._ssid = ssid

    @classmethod
    def from_dict(cls, dikt: dict) -> 'WiFiData':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The WiFiData of this WiFiData.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def hidden(self):
        """Gets the hidden of this WiFiData.

        Hidden network. Set to `true` if the SSID broadcasting is disabled (network is hidden).

        :return: The hidden of this WiFiData.
        :rtype: bool
        """
        return self._hidden

    @hidden.setter
    def hidden(self, hidden):
        """Sets the hidden of this WiFiData.

        Hidden network. Set to `true` if the SSID broadcasting is disabled (network is hidden).

        :param hidden: The hidden of this WiFiData.
        :type hidden: bool
        """

        self._hidden = hidden

    @property
    def password(self):
        """Gets the password of this WiFiData.

        Network password. The value is not required for the public network.

        :return: The password of this WiFiData.
        :rtype: str
        """
        return self._password

    @password.setter
    def password(self, password):
        """Sets the password of this WiFiData.

        Network password. The value is not required for the public network.

        :param password: The password of this WiFiData.
        :type password: str
        """

        self._password = password

    @property
    def security(self):
        """Gets the security of this WiFiData.

        Network authentication type. Value `nopass` is used to set explicitly no access password (public network) and is an equivalent for left the password unset. In that case, the value may be also omitted.

        :return: The security of this WiFiData.
        :rtype: WiFiSecurity
        """
        return self._security

    @security.setter
    def security(self, security):
        """Sets the security of this WiFiData.

        Network authentication type. Value `nopass` is used to set explicitly no access password (public network) and is an equivalent for left the password unset. In that case, the value may be also omitted.

        :param security: The security of this WiFiData.
        :type security: WiFiSecurity
        """

        self._security = security

    @property
    def ssid(self):
        """Gets the ssid of this WiFiData.

        Network SSID (name).

        :return: The ssid of this WiFiData.
        :rtype: str
        """
        return self._ssid

    @ssid.setter
    def ssid(self, ssid):
        """Sets the ssid of this WiFiData.

        Network SSID (name).

        :param ssid: The ssid of this WiFiData.
        :type ssid: str
        """
        if ssid is None:
            raise ValueError("Invalid value for `ssid`, must not be `None`")

        self._ssid = ssid
