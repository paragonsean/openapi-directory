# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.format import Format
import re
from openapi_server import util


class OutputFile(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, filename: str='qrcode', format: Format=None):
        """OutputFile - a model defined in OpenAPI

        :param filename: The filename of this OutputFile.
        :param format: The format of this OutputFile.
        """
        self.openapi_types = {
            'filename': str,
            'format': Format
        }

        self.attribute_map = {
            'filename': 'filename',
            'format': 'format'
        }

        self._filename = filename
        self._format = format

    @classmethod
    def from_dict(cls, dikt: dict) -> 'OutputFile':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The OutputFile of this OutputFile.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def filename(self):
        """Gets the filename of this OutputFile.

        Output filename.

        :return: The filename of this OutputFile.
        :rtype: str
        """
        return self._filename

    @filename.setter
    def filename(self, filename):
        """Sets the filename of this OutputFile.

        Output filename.

        :param filename: The filename of this OutputFile.
        :type filename: str
        """
        if filename is not None and not re.search(r'^[\w.@() -]{1,255}$', filename):
            raise ValueError("Invalid value for `filename`, must be a follow pattern or equal to `/^[\w.@() -]{1,255}$/`")

        self._filename = filename

    @property
    def format(self):
        """Gets the format of this OutputFile.

        Output file format.

        :return: The format of this OutputFile.
        :rtype: Format
        """
        return self._format

    @format.setter
    def format(self, format):
        """Sets the format of this OutputFile.

        Output file format.

        :param format: The format of this OutputFile.
        :type format: Format
        """

        self._format = format
