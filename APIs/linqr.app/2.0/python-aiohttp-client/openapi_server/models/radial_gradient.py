# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.gradient_stop import GradientStop
from openapi_server import util


class RadialGradient(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, stops: List[GradientStop]=[{"color":"black","offset":0},{"color":"black","offset":100}], type: str='radial'):
        """RadialGradient - a model defined in OpenAPI

        :param stops: The stops of this RadialGradient.
        :param type: The type of this RadialGradient.
        """
        self.openapi_types = {
            'stops': List[GradientStop],
            'type': str
        }

        self.attribute_map = {
            'stops': 'stops',
            'type': 'type'
        }

        self._stops = stops
        self._type = type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'RadialGradient':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The RadialGradient of this RadialGradient.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def stops(self):
        """Gets the stops of this RadialGradient.

        Gradient is created by specifying a list of (at least two) points called a `stop`. Each of them specifies a `offset` (in percent) along gradient fill and the `color` that the fill get at the given point.

        :return: The stops of this RadialGradient.
        :rtype: List[GradientStop]
        """
        return self._stops

    @stops.setter
    def stops(self, stops):
        """Sets the stops of this RadialGradient.

        Gradient is created by specifying a list of (at least two) points called a `stop`. Each of them specifies a `offset` (in percent) along gradient fill and the `color` that the fill get at the given point.

        :param stops: The stops of this RadialGradient.
        :type stops: List[GradientStop]
        """
        if stops is not None and len(stops) < 2:
            raise ValueError("Invalid value for `stops`, number of items must be greater than or equal to `2`")

        self._stops = stops

    @property
    def type(self):
        """Gets the type of this RadialGradient.


        :return: The type of this RadialGradient.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this RadialGradient.


        :param type: The type of this RadialGradient.
        :type type: str
        """
        allowed_values = ["radial"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"
                .format(type, allowed_values)
            )

        self._type = type
