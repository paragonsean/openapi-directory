# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.gradient import Gradient
from openapi_server.models.gradient_stop import GradientStop
from openapi_server import util


class Color(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, angle: int=0, stops: List[GradientStop]=[{color=black, offset=0}, {color=black, offset=100}], type: str='radial'):
        """Color - a model defined in OpenAPI

        :param angle: The angle of this Color.
        :param stops: The stops of this Color.
        :param type: The type of this Color.
        """
        self.openapi_types = {
            'angle': int,
            'stops': List[GradientStop],
            'type': str
        }

        self.attribute_map = {
            'angle': 'angle',
            'stops': 'stops',
            'type': 'type'
        }

        self._angle = angle
        self._stops = stops
        self._type = type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Color':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Color of this Color.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def angle(self):
        """Gets the angle of this Color.

        Gradient angle (direction) in degrees. By default, horizontal gradient is applied. To reverse color direction use value of 180. Vertical gradients are indicated by values of 90 and 270. You can choose any angle value within the given range.

        :return: The angle of this Color.
        :rtype: int
        """
        return self._angle

    @angle.setter
    def angle(self, angle):
        """Sets the angle of this Color.

        Gradient angle (direction) in degrees. By default, horizontal gradient is applied. To reverse color direction use value of 180. Vertical gradients are indicated by values of 90 and 270. You can choose any angle value within the given range.

        :param angle: The angle of this Color.
        :type angle: int
        """
        if angle is not None and angle > 360:
            raise ValueError("Invalid value for `angle`, must be a value less than or equal to `360`")
        if angle is not None and angle < 0:
            raise ValueError("Invalid value for `angle`, must be a value greater than or equal to `0`")

        self._angle = angle

    @property
    def stops(self):
        """Gets the stops of this Color.

        Gradient is created by specifying a list of (at least two) points called a `stop`. Each of them specifies a `offset` (in percent) along gradient fill and the `color` that the fill get at the given point.

        :return: The stops of this Color.
        :rtype: List[GradientStop]
        """
        return self._stops

    @stops.setter
    def stops(self, stops):
        """Sets the stops of this Color.

        Gradient is created by specifying a list of (at least two) points called a `stop`. Each of them specifies a `offset` (in percent) along gradient fill and the `color` that the fill get at the given point.

        :param stops: The stops of this Color.
        :type stops: List[GradientStop]
        """
        if stops is not None and len(stops) < 2:
            raise ValueError("Invalid value for `stops`, number of items must be greater than or equal to `2`")

        self._stops = stops

    @property
    def type(self):
        """Gets the type of this Color.


        :return: The type of this Color.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this Color.


        :param type: The type of this Color.
        :type type: str
        """
        allowed_values = ["radial"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"
                .format(type, allowed_values)
            )

        self._type = type
