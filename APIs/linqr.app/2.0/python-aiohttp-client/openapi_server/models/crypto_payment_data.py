# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.cryptocurrency import Cryptocurrency
from openapi_server import util


class CryptoPaymentData(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, address: str=None, amount: float=None, currency: Cryptocurrency=None, label: str=None, message: str=None):
        """CryptoPaymentData - a model defined in OpenAPI

        :param address: The address of this CryptoPaymentData.
        :param amount: The amount of this CryptoPaymentData.
        :param currency: The currency of this CryptoPaymentData.
        :param label: The label of this CryptoPaymentData.
        :param message: The message of this CryptoPaymentData.
        """
        self.openapi_types = {
            'address': str,
            'amount': float,
            'currency': Cryptocurrency,
            'label': str,
            'message': str
        }

        self.attribute_map = {
            'address': 'address',
            'amount': 'amount',
            'currency': 'currency',
            'label': 'label',
            'message': 'message'
        }

        self._address = address
        self._amount = amount
        self._currency = currency
        self._label = label
        self._message = message

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CryptoPaymentData':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CryptoPaymentData of this CryptoPaymentData.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def address(self):
        """Gets the address of this CryptoPaymentData.

        Wallet address.

        :return: The address of this CryptoPaymentData.
        :rtype: str
        """
        return self._address

    @address.setter
    def address(self, address):
        """Sets the address of this CryptoPaymentData.

        Wallet address.

        :param address: The address of this CryptoPaymentData.
        :type address: str
        """
        if address is None:
            raise ValueError("Invalid value for `address`, must not be `None`")

        self._address = address

    @property
    def amount(self):
        """Gets the amount of this CryptoPaymentData.

        Decimal value of payment amount.

        :return: The amount of this CryptoPaymentData.
        :rtype: float
        """
        return self._amount

    @amount.setter
    def amount(self, amount):
        """Sets the amount of this CryptoPaymentData.

        Decimal value of payment amount.

        :param amount: The amount of this CryptoPaymentData.
        :type amount: float
        """
        if amount is not None and amount <= 0:
            raise ValueError("Invalid value for `amount`, must be a value greater than `0`")

        self._amount = amount

    @property
    def currency(self):
        """Gets the currency of this CryptoPaymentData.

        Payment currency.

        :return: The currency of this CryptoPaymentData.
        :rtype: Cryptocurrency
        """
        return self._currency

    @currency.setter
    def currency(self, currency):
        """Sets the currency of this CryptoPaymentData.

        Payment currency.

        :param currency: The currency of this CryptoPaymentData.
        :type currency: Cryptocurrency
        """
        if currency is None:
            raise ValueError("Invalid value for `currency`, must not be `None`")

        self._currency = currency

    @property
    def label(self):
        """Gets the label of this CryptoPaymentData.

        Label for the wallet address (e.g. name of receiver).

        :return: The label of this CryptoPaymentData.
        :rtype: str
        """
        return self._label

    @label.setter
    def label(self, label):
        """Sets the label of this CryptoPaymentData.

        Label for the wallet address (e.g. name of receiver).

        :param label: The label of this CryptoPaymentData.
        :type label: str
        """

        self._label = label

    @property
    def message(self):
        """Gets the message of this CryptoPaymentData.

        Message that describes the transfer.

        :return: The message of this CryptoPaymentData.
        :rtype: str
        """
        return self._message

    @message.setter
    def message(self, message):
        """Sets the message of this CryptoPaymentData.

        Message that describes the transfer.

        :param message: The message of this CryptoPaymentData.
        :type message: str
        """

        self._message = message
