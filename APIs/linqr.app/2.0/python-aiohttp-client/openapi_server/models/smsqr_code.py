# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.embedded_image import EmbeddedImage
from openapi_server.models.output_file import OutputFile
from openapi_server.models.sms_data import SMSData
from openapi_server.models.size import Size
from openapi_server.models.style import Style
from openapi_server import util


class SMSQRCode(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, data: SMSData=None, image: EmbeddedImage=None, output: OutputFile=None, size: Size=None, style: Style=None):
        """SMSQRCode - a model defined in OpenAPI

        :param data: The data of this SMSQRCode.
        :param image: The image of this SMSQRCode.
        :param output: The output of this SMSQRCode.
        :param size: The size of this SMSQRCode.
        :param style: The style of this SMSQRCode.
        """
        self.openapi_types = {
            'data': SMSData,
            'image': EmbeddedImage,
            'output': OutputFile,
            'size': Size,
            'style': Style
        }

        self.attribute_map = {
            'data': 'data',
            'image': 'image',
            'output': 'output',
            'size': 'size',
            'style': 'style'
        }

        self._data = data
        self._image = image
        self._output = output
        self._size = size
        self._style = style

    @classmethod
    def from_dict(cls, dikt: dict) -> 'SMSQRCode':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The SMSQRCode of this SMSQRCode.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def data(self):
        """Gets the data of this SMSQRCode.

        `data` property allows you to specify SMS template.

        :return: The data of this SMSQRCode.
        :rtype: SMSData
        """
        return self._data

    @data.setter
    def data(self, data):
        """Sets the data of this SMSQRCode.

        `data` property allows you to specify SMS template.

        :param data: The data of this SMSQRCode.
        :type data: SMSData
        """
        if data is None:
            raise ValueError("Invalid value for `data`, must not be `None`")

        self._data = data

    @property
    def image(self):
        """Gets the image of this SMSQRCode.

        `image` property allows you to set parameters of a custom image (e.g. your company logo, icon etc.) placed in the center of the generated QR Code.

        :return: The image of this SMSQRCode.
        :rtype: EmbeddedImage
        """
        return self._image

    @image.setter
    def image(self, image):
        """Sets the image of this SMSQRCode.

        `image` property allows you to set parameters of a custom image (e.g. your company logo, icon etc.) placed in the center of the generated QR Code.

        :param image: The image of this SMSQRCode.
        :type image: EmbeddedImage
        """

        self._image = image

    @property
    def output(self):
        """Gets the output of this SMSQRCode.

        `output` property allows you to specify the name and extension (type) of the file returned by the API

        :return: The output of this SMSQRCode.
        :rtype: OutputFile
        """
        return self._output

    @output.setter
    def output(self, output):
        """Sets the output of this SMSQRCode.

        `output` property allows you to specify the name and extension (type) of the file returned by the API

        :param output: The output of this SMSQRCode.
        :type output: OutputFile
        """

        self._output = output

    @property
    def size(self):
        """Gets the size of this SMSQRCode.

        `size` property allows you to set the values that define the sizes of the generated QR Code.

        :return: The size of this SMSQRCode.
        :rtype: Size
        """
        return self._size

    @size.setter
    def size(self, size):
        """Sets the size of this SMSQRCode.

        `size` property allows you to set the values that define the sizes of the generated QR Code.

        :param size: The size of this SMSQRCode.
        :type size: Size
        """

        self._size = size

    @property
    def style(self):
        """Gets the style of this SMSQRCode.

        `style` property allows you to select the appearance parameters of the modules and eyes of the generated QR Code.  All color specifications can be defined via: * CSS3 name: `Black`, `azure`, ... * hex value: `0x000`, `#FFFFFF`, `7fffd4`, ... * RGB/RGBA strings: `rgb(255, 255, 255)`, `rgba(255, 255, 255, 0.5)`, ... * HSL strings: `hsl(270, 60%, 70%)`, `hsl(270, 60%, 70%, .5)`, ...  Color values can be obtained from any online color picker like <a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Colors/Color_picker_tool\" rel=\"noopener noreferrer\" target=\"_blank\" >developer.mozilla.org</a>.

        :return: The style of this SMSQRCode.
        :rtype: Style
        """
        return self._style

    @style.setter
    def style(self, style):
        """Sets the style of this SMSQRCode.

        `style` property allows you to select the appearance parameters of the modules and eyes of the generated QR Code.  All color specifications can be defined via: * CSS3 name: `Black`, `azure`, ... * hex value: `0x000`, `#FFFFFF`, `7fffd4`, ... * RGB/RGBA strings: `rgb(255, 255, 255)`, `rgba(255, 255, 255, 0.5)`, ... * HSL strings: `hsl(270, 60%, 70%)`, `hsl(270, 60%, 70%, .5)`, ...  Color values can be obtained from any online color picker like <a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Colors/Color_picker_tool\" rel=\"noopener noreferrer\" target=\"_blank\" >developer.mozilla.org</a>.

        :param style: The style of this SMSQRCode.
        :type style: Style
        """

        self._style = style
