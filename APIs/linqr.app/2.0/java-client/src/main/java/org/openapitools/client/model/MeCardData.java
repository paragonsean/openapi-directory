/*
 * LinQR
 * This is LinQR QR Code API documentation. This API allows you to generate custom, visually attractive QR Codes. The cloud infrastructure guarantees high availability and autoscalability of the service. You can generate hundreds of thousands of images this way and use them however you like.  We realize that your API use case may require custom solutions, and perhaps we lack functionality that is very important to you. In that case feel free to write an email to our support and tell us about it. We have repeatedly added new functions of our service directly after the requests of our users.  **General remarks:**  - maximum request size is fixed at 32MB.  - request timeout is fixed at 180 seconds.
 *
 * The version of the OpenAPI document: 2.0
 * Contact: support@linqr.app
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.LocalDate;
import java.util.Arrays;
import org.openapitools.client.model.Email;
import org.openapitools.client.model.Phone;
import org.openapitools.client.model.Url;
import org.openapitools.client.model.Videophone;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * MeCardData
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:01:56.961414-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class MeCardData {
  public static final String SERIALIZED_NAME_BIRTHDAY = "birthday";
  @SerializedName(SERIALIZED_NAME_BIRTHDAY)
  private LocalDate birthday;

  public static final String SERIALIZED_NAME_CITY = "city";
  @SerializedName(SERIALIZED_NAME_CITY)
  private String city;

  public static final String SERIALIZED_NAME_COUNTRY = "country";
  @SerializedName(SERIALIZED_NAME_COUNTRY)
  private String country;

  public static final String SERIALIZED_NAME_EMAIL = "email";
  @SerializedName(SERIALIZED_NAME_EMAIL)
  private Email email;

  /**
   * &#x60;mecard&#x60; encoding. Data format created especially for saving contact details in the QR Code by Japanese company NTT DoCoMo. The resultant QR code is more compact than its &#x60;vcard&#x60; equivalent, but it can contain only limited number of data fields.  For more information please refer to: &lt;a href&#x3D;\&quot;https://en.wikipedia.org/wiki/MeCard_(QR_code)\&quot; rel&#x3D;\&quot;noopener noreferrer\&quot; target&#x3D;\&quot;_blank\&quot; &gt;en.wikipedia.org&lt;/a&gt;.
   */
  @JsonAdapter(EncodingEnum.Adapter.class)
  public enum EncodingEnum {
    MECARD("mecard");

    private String value;

    EncodingEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static EncodingEnum fromValue(String value) {
      for (EncodingEnum b : EncodingEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<EncodingEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final EncodingEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public EncodingEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return EncodingEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      EncodingEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_ENCODING = "encoding";
  @SerializedName(SERIALIZED_NAME_ENCODING)
  private EncodingEnum encoding = EncodingEnum.MECARD;

  public static final String SERIALIZED_NAME_FIRST_NAME = "first_name";
  @SerializedName(SERIALIZED_NAME_FIRST_NAME)
  private String firstName;

  public static final String SERIALIZED_NAME_HOUSE_NUMBER = "house_number";
  @SerializedName(SERIALIZED_NAME_HOUSE_NUMBER)
  private String houseNumber;

  public static final String SERIALIZED_NAME_LAST_NAME = "last_name";
  @SerializedName(SERIALIZED_NAME_LAST_NAME)
  private String lastName;

  public static final String SERIALIZED_NAME_MEMO = "memo";
  @SerializedName(SERIALIZED_NAME_MEMO)
  private String memo;

  public static final String SERIALIZED_NAME_NICKNAME = "nickname";
  @SerializedName(SERIALIZED_NAME_NICKNAME)
  private String nickname;

  public static final String SERIALIZED_NAME_PHONE = "phone";
  @SerializedName(SERIALIZED_NAME_PHONE)
  private Phone phone;

  public static final String SERIALIZED_NAME_PO_BOX = "po_box";
  @SerializedName(SERIALIZED_NAME_PO_BOX)
  private String poBox;

  public static final String SERIALIZED_NAME_PREFECTURE = "prefecture";
  @SerializedName(SERIALIZED_NAME_PREFECTURE)
  private String prefecture;

  public static final String SERIALIZED_NAME_READING = "reading";
  @SerializedName(SERIALIZED_NAME_READING)
  private String reading;

  public static final String SERIALIZED_NAME_ROOM_NUMBER = "room_number";
  @SerializedName(SERIALIZED_NAME_ROOM_NUMBER)
  private String roomNumber;

  public static final String SERIALIZED_NAME_URL = "url";
  @SerializedName(SERIALIZED_NAME_URL)
  private Url url;

  public static final String SERIALIZED_NAME_VIDEOPHONE = "videophone";
  @SerializedName(SERIALIZED_NAME_VIDEOPHONE)
  private Videophone videophone;

  public static final String SERIALIZED_NAME_ZIP_CODE = "zip_code";
  @SerializedName(SERIALIZED_NAME_ZIP_CODE)
  private String zipCode;

  public MeCardData() {
  }

  public MeCardData birthday(LocalDate birthday) {
    this.birthday = birthday;
    return this;
  }

  /**
   * Birthday.
   * @return birthday
   */
  @javax.annotation.Nullable
  public LocalDate getBirthday() {
    return birthday;
  }

  public void setBirthday(LocalDate birthday) {
    this.birthday = birthday;
  }


  public MeCardData city(String city) {
    this.city = city;
    return this;
  }

  /**
   * Address information: City.
   * @return city
   */
  @javax.annotation.Nullable
  public String getCity() {
    return city;
  }

  public void setCity(String city) {
    this.city = city;
  }


  public MeCardData country(String country) {
    this.country = country;
    return this;
  }

  /**
   * Address information: Country.
   * @return country
   */
  @javax.annotation.Nullable
  public String getCountry() {
    return country;
  }

  public void setCountry(String country) {
    this.country = country;
  }


  public MeCardData email(Email email) {
    this.email = email;
    return this;
  }

  /**
   * Get email
   * @return email
   */
  @javax.annotation.Nullable
  public Email getEmail() {
    return email;
  }

  public void setEmail(Email email) {
    this.email = email;
  }


  public MeCardData encoding(EncodingEnum encoding) {
    this.encoding = encoding;
    return this;
  }

  /**
   * &#x60;mecard&#x60; encoding. Data format created especially for saving contact details in the QR Code by Japanese company NTT DoCoMo. The resultant QR code is more compact than its &#x60;vcard&#x60; equivalent, but it can contain only limited number of data fields.  For more information please refer to: &lt;a href&#x3D;\&quot;https://en.wikipedia.org/wiki/MeCard_(QR_code)\&quot; rel&#x3D;\&quot;noopener noreferrer\&quot; target&#x3D;\&quot;_blank\&quot; &gt;en.wikipedia.org&lt;/a&gt;.
   * @return encoding
   */
  @javax.annotation.Nullable
  public EncodingEnum getEncoding() {
    return encoding;
  }

  public void setEncoding(EncodingEnum encoding) {
    this.encoding = encoding;
  }


  public MeCardData firstName(String firstName) {
    this.firstName = firstName;
    return this;
  }

  /**
   * First name.
   * @return firstName
   */
  @javax.annotation.Nullable
  public String getFirstName() {
    return firstName;
  }

  public void setFirstName(String firstName) {
    this.firstName = firstName;
  }


  public MeCardData houseNumber(String houseNumber) {
    this.houseNumber = houseNumber;
    return this;
  }

  /**
   * Address information: House number.
   * @return houseNumber
   */
  @javax.annotation.Nullable
  public String getHouseNumber() {
    return houseNumber;
  }

  public void setHouseNumber(String houseNumber) {
    this.houseNumber = houseNumber;
  }


  public MeCardData lastName(String lastName) {
    this.lastName = lastName;
    return this;
  }

  /**
   * Last name.
   * @return lastName
   */
  @javax.annotation.Nonnull
  public String getLastName() {
    return lastName;
  }

  public void setLastName(String lastName) {
    this.lastName = lastName;
  }


  public MeCardData memo(String memo) {
    this.memo = memo;
    return this;
  }

  /**
   * Short notice.
   * @return memo
   */
  @javax.annotation.Nullable
  public String getMemo() {
    return memo;
  }

  public void setMemo(String memo) {
    this.memo = memo;
  }


  public MeCardData nickname(String nickname) {
    this.nickname = nickname;
    return this;
  }

  /**
   * Nickname.
   * @return nickname
   */
  @javax.annotation.Nullable
  public String getNickname() {
    return nickname;
  }

  public void setNickname(String nickname) {
    this.nickname = nickname;
  }


  public MeCardData phone(Phone phone) {
    this.phone = phone;
    return this;
  }

  /**
   * Get phone
   * @return phone
   */
  @javax.annotation.Nullable
  public Phone getPhone() {
    return phone;
  }

  public void setPhone(Phone phone) {
    this.phone = phone;
  }


  public MeCardData poBox(String poBox) {
    this.poBox = poBox;
    return this;
  }

  /**
   * Address information: Post Office Box.
   * @return poBox
   */
  @javax.annotation.Nullable
  public String getPoBox() {
    return poBox;
  }

  public void setPoBox(String poBox) {
    this.poBox = poBox;
  }


  public MeCardData prefecture(String prefecture) {
    this.prefecture = prefecture;
    return this;
  }

  /**
   * Address information: Prefecture.
   * @return prefecture
   */
  @javax.annotation.Nullable
  public String getPrefecture() {
    return prefecture;
  }

  public void setPrefecture(String prefecture) {
    this.prefecture = prefecture;
  }


  public MeCardData reading(String reading) {
    this.reading = reading;
    return this;
  }

  /**
   * Kana name.
   * @return reading
   */
  @javax.annotation.Nullable
  public String getReading() {
    return reading;
  }

  public void setReading(String reading) {
    this.reading = reading;
  }


  public MeCardData roomNumber(String roomNumber) {
    this.roomNumber = roomNumber;
    return this;
  }

  /**
   * Address information: Room number.
   * @return roomNumber
   */
  @javax.annotation.Nullable
  public String getRoomNumber() {
    return roomNumber;
  }

  public void setRoomNumber(String roomNumber) {
    this.roomNumber = roomNumber;
  }


  public MeCardData url(Url url) {
    this.url = url;
    return this;
  }

  /**
   * Get url
   * @return url
   */
  @javax.annotation.Nullable
  public Url getUrl() {
    return url;
  }

  public void setUrl(Url url) {
    this.url = url;
  }


  public MeCardData videophone(Videophone videophone) {
    this.videophone = videophone;
    return this;
  }

  /**
   * Get videophone
   * @return videophone
   */
  @javax.annotation.Nullable
  public Videophone getVideophone() {
    return videophone;
  }

  public void setVideophone(Videophone videophone) {
    this.videophone = videophone;
  }


  public MeCardData zipCode(String zipCode) {
    this.zipCode = zipCode;
    return this;
  }

  /**
   * Address information: ZIP code.
   * @return zipCode
   */
  @javax.annotation.Nullable
  public String getZipCode() {
    return zipCode;
  }

  public void setZipCode(String zipCode) {
    this.zipCode = zipCode;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    MeCardData meCardData = (MeCardData) o;
    return Objects.equals(this.birthday, meCardData.birthday) &&
        Objects.equals(this.city, meCardData.city) &&
        Objects.equals(this.country, meCardData.country) &&
        Objects.equals(this.email, meCardData.email) &&
        Objects.equals(this.encoding, meCardData.encoding) &&
        Objects.equals(this.firstName, meCardData.firstName) &&
        Objects.equals(this.houseNumber, meCardData.houseNumber) &&
        Objects.equals(this.lastName, meCardData.lastName) &&
        Objects.equals(this.memo, meCardData.memo) &&
        Objects.equals(this.nickname, meCardData.nickname) &&
        Objects.equals(this.phone, meCardData.phone) &&
        Objects.equals(this.poBox, meCardData.poBox) &&
        Objects.equals(this.prefecture, meCardData.prefecture) &&
        Objects.equals(this.reading, meCardData.reading) &&
        Objects.equals(this.roomNumber, meCardData.roomNumber) &&
        Objects.equals(this.url, meCardData.url) &&
        Objects.equals(this.videophone, meCardData.videophone) &&
        Objects.equals(this.zipCode, meCardData.zipCode);
  }

  @Override
  public int hashCode() {
    return Objects.hash(birthday, city, country, email, encoding, firstName, houseNumber, lastName, memo, nickname, phone, poBox, prefecture, reading, roomNumber, url, videophone, zipCode);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class MeCardData {\n");
    sb.append("    birthday: ").append(toIndentedString(birthday)).append("\n");
    sb.append("    city: ").append(toIndentedString(city)).append("\n");
    sb.append("    country: ").append(toIndentedString(country)).append("\n");
    sb.append("    email: ").append(toIndentedString(email)).append("\n");
    sb.append("    encoding: ").append(toIndentedString(encoding)).append("\n");
    sb.append("    firstName: ").append(toIndentedString(firstName)).append("\n");
    sb.append("    houseNumber: ").append(toIndentedString(houseNumber)).append("\n");
    sb.append("    lastName: ").append(toIndentedString(lastName)).append("\n");
    sb.append("    memo: ").append(toIndentedString(memo)).append("\n");
    sb.append("    nickname: ").append(toIndentedString(nickname)).append("\n");
    sb.append("    phone: ").append(toIndentedString(phone)).append("\n");
    sb.append("    poBox: ").append(toIndentedString(poBox)).append("\n");
    sb.append("    prefecture: ").append(toIndentedString(prefecture)).append("\n");
    sb.append("    reading: ").append(toIndentedString(reading)).append("\n");
    sb.append("    roomNumber: ").append(toIndentedString(roomNumber)).append("\n");
    sb.append("    url: ").append(toIndentedString(url)).append("\n");
    sb.append("    videophone: ").append(toIndentedString(videophone)).append("\n");
    sb.append("    zipCode: ").append(toIndentedString(zipCode)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("birthday");
    openapiFields.add("city");
    openapiFields.add("country");
    openapiFields.add("email");
    openapiFields.add("encoding");
    openapiFields.add("first_name");
    openapiFields.add("house_number");
    openapiFields.add("last_name");
    openapiFields.add("memo");
    openapiFields.add("nickname");
    openapiFields.add("phone");
    openapiFields.add("po_box");
    openapiFields.add("prefecture");
    openapiFields.add("reading");
    openapiFields.add("room_number");
    openapiFields.add("url");
    openapiFields.add("videophone");
    openapiFields.add("zip_code");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("last_name");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to MeCardData
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!MeCardData.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in MeCardData is not found in the empty JSON string", MeCardData.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!MeCardData.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `MeCardData` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : MeCardData.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("city") != null && !jsonObj.get("city").isJsonNull()) && !jsonObj.get("city").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `city` to be a primitive type in the JSON string but got `%s`", jsonObj.get("city").toString()));
      }
      if ((jsonObj.get("country") != null && !jsonObj.get("country").isJsonNull()) && !jsonObj.get("country").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `country` to be a primitive type in the JSON string but got `%s`", jsonObj.get("country").toString()));
      }
      // validate the optional field `email`
      if (jsonObj.get("email") != null && !jsonObj.get("email").isJsonNull()) {
        Email.validateJsonElement(jsonObj.get("email"));
      }
      if ((jsonObj.get("encoding") != null && !jsonObj.get("encoding").isJsonNull()) && !jsonObj.get("encoding").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `encoding` to be a primitive type in the JSON string but got `%s`", jsonObj.get("encoding").toString()));
      }
      // validate the optional field `encoding`
      if (jsonObj.get("encoding") != null && !jsonObj.get("encoding").isJsonNull()) {
        EncodingEnum.validateJsonElement(jsonObj.get("encoding"));
      }
      if ((jsonObj.get("first_name") != null && !jsonObj.get("first_name").isJsonNull()) && !jsonObj.get("first_name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `first_name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("first_name").toString()));
      }
      if ((jsonObj.get("house_number") != null && !jsonObj.get("house_number").isJsonNull()) && !jsonObj.get("house_number").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `house_number` to be a primitive type in the JSON string but got `%s`", jsonObj.get("house_number").toString()));
      }
      if (!jsonObj.get("last_name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `last_name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("last_name").toString()));
      }
      if ((jsonObj.get("memo") != null && !jsonObj.get("memo").isJsonNull()) && !jsonObj.get("memo").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `memo` to be a primitive type in the JSON string but got `%s`", jsonObj.get("memo").toString()));
      }
      if ((jsonObj.get("nickname") != null && !jsonObj.get("nickname").isJsonNull()) && !jsonObj.get("nickname").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `nickname` to be a primitive type in the JSON string but got `%s`", jsonObj.get("nickname").toString()));
      }
      // validate the optional field `phone`
      if (jsonObj.get("phone") != null && !jsonObj.get("phone").isJsonNull()) {
        Phone.validateJsonElement(jsonObj.get("phone"));
      }
      if ((jsonObj.get("po_box") != null && !jsonObj.get("po_box").isJsonNull()) && !jsonObj.get("po_box").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `po_box` to be a primitive type in the JSON string but got `%s`", jsonObj.get("po_box").toString()));
      }
      if ((jsonObj.get("prefecture") != null && !jsonObj.get("prefecture").isJsonNull()) && !jsonObj.get("prefecture").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `prefecture` to be a primitive type in the JSON string but got `%s`", jsonObj.get("prefecture").toString()));
      }
      if ((jsonObj.get("reading") != null && !jsonObj.get("reading").isJsonNull()) && !jsonObj.get("reading").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `reading` to be a primitive type in the JSON string but got `%s`", jsonObj.get("reading").toString()));
      }
      if ((jsonObj.get("room_number") != null && !jsonObj.get("room_number").isJsonNull()) && !jsonObj.get("room_number").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `room_number` to be a primitive type in the JSON string but got `%s`", jsonObj.get("room_number").toString()));
      }
      // validate the optional field `url`
      if (jsonObj.get("url") != null && !jsonObj.get("url").isJsonNull()) {
        Url.validateJsonElement(jsonObj.get("url"));
      }
      // validate the optional field `videophone`
      if (jsonObj.get("videophone") != null && !jsonObj.get("videophone").isJsonNull()) {
        Videophone.validateJsonElement(jsonObj.get("videophone"));
      }
      if ((jsonObj.get("zip_code") != null && !jsonObj.get("zip_code").isJsonNull()) && !jsonObj.get("zip_code").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `zip_code` to be a primitive type in the JSON string but got `%s`", jsonObj.get("zip_code").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!MeCardData.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'MeCardData' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<MeCardData> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(MeCardData.class));

       return (TypeAdapter<T>) new TypeAdapter<MeCardData>() {
           @Override
           public void write(JsonWriter out, MeCardData value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public MeCardData read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of MeCardData given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of MeCardData
   * @throws IOException if the JSON string is invalid with respect to MeCardData
   */
  public static MeCardData fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, MeCardData.class);
  }

  /**
   * Convert an instance of MeCardData to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

