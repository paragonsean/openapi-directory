/*
 * LinQR
 * This is LinQR QR Code API documentation. This API allows you to generate custom, visually attractive QR Codes. The cloud infrastructure guarantees high availability and autoscalability of the service. You can generate hundreds of thousands of images this way and use them however you like.  We realize that your API use case may require custom solutions, and perhaps we lack functionality that is very important to you. In that case feel free to write an email to our support and tell us about it. We have repeatedly added new functions of our service directly after the requests of our users.  **General remarks:**  - maximum request size is fixed at 32MB.  - request timeout is fixed at 180 seconds.
 *
 * The version of the OpenAPI document: 2.0
 * Contact: support@linqr.app
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import java.net.URI;
import java.util.List;



import java.io.IOException;
import java.lang.reflect.Type;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.util.ArrayList;
import java.util.Collections;
import java.util.HashSet;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapter;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.JsonPrimitive;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonSerializationContext;
import com.google.gson.JsonSerializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonArray;
import com.google.gson.JsonParseException;

import org.openapitools.client.JSON;

@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:01:56.961414-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Url extends AbstractOpenApiSchema {
    private static final Logger log = Logger.getLogger(Url.class.getName());

    public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
        @SuppressWarnings("unchecked")
        @Override
        public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
            if (!Url.class.isAssignableFrom(type.getRawType())) {
                return null; // this class only serializes 'Url' and its subtypes
            }
            final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
            final TypeAdapter<URI> adapterURI = gson.getDelegateAdapter(this, TypeToken.get(URI.class));

            final Type typeInstanceListURI = new TypeToken<List<URI>>(){}.getType();
            final TypeAdapter<List<URI>> adapterListURI = (TypeAdapter<List<URI>>) gson.getDelegateAdapter(this, TypeToken.get(typeInstanceListURI));

            return (TypeAdapter<T>) new TypeAdapter<Url>() {
                @Override
                public void write(JsonWriter out, Url value) throws IOException {
                    if (value == null || value.getActualInstance() == null) {
                        elementAdapter.write(out, null);
                        return;
                    }

                    // check if the actual instance is of the type `URI`
                    if (value.getActualInstance() instanceof URI) {
                        JsonElement element = adapterURI.toJsonTree((URI)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    // check if the actual instance is of the type `List<URI>`
                    if (value.getActualInstance() instanceof List<?>) {
                        List<?> list = (List<?>) value.getActualInstance();
                        if (list.get(0) instanceof URI) {
                            JsonArray array = adapterListURI.toJsonTree((List<URI>)value.getActualInstance()).getAsJsonArray();
                            elementAdapter.write(out, array);
                            return;
                        }
                    }
                    throw new IOException("Failed to serialize as the type doesn't match anyOf schemas: List<URI>, URI");
                }

                @Override
                public Url read(JsonReader in) throws IOException {
                    Object deserialized = null;
                    JsonElement jsonElement = elementAdapter.read(in);

                    ArrayList<String> errorMessages = new ArrayList<>();
                    TypeAdapter actualAdapter = elementAdapter;

                    // deserialize URI
                    try {
                        // validate the JSON object to see if any exception is thrown
                        URI.validateJsonElement(jsonElement);
                        actualAdapter = adapterURI;
                        Url ret = new Url();
                        ret.setActualInstance(actualAdapter.fromJsonTree(jsonElement));
                        return ret;
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for URI failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'URI'", e);
                    }
                    // deserialize List<URI>
                    try {
                        // validate the JSON object to see if any exception is thrown
                        if (!jsonElement.isJsonArray()) {
                            throw new IllegalArgumentException(String.format("Expected json element to be a array type in the JSON string but got `%s`", jsonElement.toString()));
                        }

                        JsonArray array = jsonElement.getAsJsonArray();
                        // validate array items
                        for(JsonElement element : array) {
                            URI.validateJsonElement(element);
                        }
                        actualAdapter = adapterListURI;
                        Url ret = new Url();
                        ret.setActualInstance(actualAdapter.fromJsonTree(jsonElement));
                        return ret;
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for List<URI> failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'List<URI>'", e);
                    }

                    throw new IOException(String.format("Failed deserialization for Url: no class matches result, expected at least 1. Detailed failure message for anyOf schemas: %s. JSON: %s", errorMessages, jsonElement.toString()));
                }
            }.nullSafe();
        }
    }

    // store a list of schema names defined in anyOf
    public static final Map<String, Class<?>> schemas = new HashMap<String, Class<?>>();

    public Url() {
        super("anyOf", Boolean.FALSE);
    }

    public Url(Object o) {
        super("anyOf", Boolean.FALSE);
        setActualInstance(o);
    }

    static {
        schemas.put("URI", URI.class);
        schemas.put("List<URI>", List.class);
    }

    @Override
    public Map<String, Class<?>> getSchemas() {
        return Url.schemas;
    }

    /**
     * Set the instance that matches the anyOf child schema, check
     * the instance parameter is valid against the anyOf child schemas:
     * List<URI>, URI
     *
     * It could be an instance of the 'anyOf' schemas.
     */
    @Override
    public void setActualInstance(Object instance) {
        if (instance instanceof URI) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof List<?>) {
            List<?> list = (List<?>) instance;
            if (list.get(0) instanceof URI) {
                super.setActualInstance(instance);
                return;
            }
        }

        throw new RuntimeException("Invalid instance type. Must be List<URI>, URI");
    }

    /**
     * Get the actual instance, which can be the following:
     * List<URI>, URI
     *
     * @return The actual instance (List<URI>, URI)
     */
    @SuppressWarnings("unchecked")
    @Override
    public Object getActualInstance() {
        return super.getActualInstance();
    }

    /**
     * Get the actual instance of `URI`. If the actual instance is not `URI`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `URI`
     * @throws ClassCastException if the instance is not `URI`
     */
    public URI getURI() throws ClassCastException {
        return (URI)super.getActualInstance();
    }
    /**
     * Get the actual instance of `List<URI>`. If the actual instance is not `List<URI>`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `List<URI>`
     * @throws ClassCastException if the instance is not `List<URI>`
     */
    public List<URI> getListURI() throws ClassCastException {
        return (List<URI>)super.getActualInstance();
    }

    /**
     * Validates the JSON Element and throws an exception if issues found
     *
     * @param jsonElement JSON Element
     * @throws IOException if the JSON Element is invalid with respect to Url
     */
    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
        // validate anyOf schemas one by one
        ArrayList<String> errorMessages = new ArrayList<>();
        // validate the json string with URI
        try {
            URI.validateJsonElement(jsonElement);
            return;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for URI failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        // validate the json string with List<URI>
        try {
            if (!jsonElement.isJsonArray()) {
                throw new IllegalArgumentException(String.format("Expected json element to be a array type in the JSON string but got `%s`", jsonElement.toString()));
            }
            JsonArray array = jsonElement.getAsJsonArray();
            // validate array items
            for(JsonElement element : array) {
                URI.validateJsonElement(element);
            }
            return;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for List<URI> failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        throw new IOException(String.format("The JSON string is invalid for Url with anyOf schemas: List<URI>, URI. no class match the result, expected at least 1. Detailed failure message for anyOf schemas: %s. JSON: %s", errorMessages, jsonElement.toString()));
    }

    /**
     * Create an instance of Url given an JSON string
     *
     * @param jsonString JSON string
     * @return An instance of Url
     * @throws IOException if the JSON string is invalid with respect to Url
     */
    public static Url fromJson(String jsonString) throws IOException {
        return JSON.getGson().fromJson(jsonString, Url.class);
    }

    /**
     * Convert an instance of Url to an JSON string
     *
     * @return JSON string
     */
    public String toJson() {
        return JSON.getGson().toJson(this);
    }
}

