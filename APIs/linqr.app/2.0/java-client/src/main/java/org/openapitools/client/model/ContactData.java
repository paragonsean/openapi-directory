/*
 * LinQR
 * This is LinQR QR Code API documentation. This API allows you to generate custom, visually attractive QR Codes. The cloud infrastructure guarantees high availability and autoscalability of the service. You can generate hundreds of thousands of images this way and use them however you like.  We realize that your API use case may require custom solutions, and perhaps we lack functionality that is very important to you. In that case feel free to write an email to our support and tell us about it. We have repeatedly added new functions of our service directly after the requests of our users.  **General remarks:**  - maximum request size is fixed at 32MB.  - request timeout is fixed at 180 seconds.
 *
 * The version of the OpenAPI document: 2.0
 * Contact: support@linqr.app
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.math.BigDecimal;
import java.net.URI;
import java.time.LocalDate;
import java.util.Arrays;
import org.openapitools.client.model.CellPhone;
import org.openapitools.client.model.Email;
import org.openapitools.client.model.Fax;
import org.openapitools.client.model.HomePhone;
import org.openapitools.client.model.MeCardData;
import org.openapitools.client.model.Phone;
import org.openapitools.client.model.Photo;
import org.openapitools.client.model.Title;
import org.openapitools.client.model.Url;
import org.openapitools.client.model.VCardData;
import org.openapitools.client.model.Videophone;
import org.openapitools.client.model.WorkPhone;



import java.io.IOException;
import java.lang.reflect.Type;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.util.ArrayList;
import java.util.Collections;
import java.util.HashSet;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapter;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.JsonPrimitive;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonSerializationContext;
import com.google.gson.JsonSerializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonArray;
import com.google.gson.JsonParseException;

import org.openapitools.client.JSON;

@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:01:56.961414-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ContactData extends AbstractOpenApiSchema {
    private static final Logger log = Logger.getLogger(ContactData.class.getName());

    public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
        @SuppressWarnings("unchecked")
        @Override
        public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
            if (!ContactData.class.isAssignableFrom(type.getRawType())) {
                return null; // this class only serializes 'ContactData' and its subtypes
            }
            final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
            final TypeAdapter<VCardData> adapterVCardData = gson.getDelegateAdapter(this, TypeToken.get(VCardData.class));
            final TypeAdapter<MeCardData> adapterMeCardData = gson.getDelegateAdapter(this, TypeToken.get(MeCardData.class));

            return (TypeAdapter<T>) new TypeAdapter<ContactData>() {
                @Override
                public void write(JsonWriter out, ContactData value) throws IOException {
                    if (value == null || value.getActualInstance() == null) {
                        elementAdapter.write(out, null);
                        return;
                    }

                    // check if the actual instance is of the type `VCardData`
                    if (value.getActualInstance() instanceof VCardData) {
                        JsonElement element = adapterVCardData.toJsonTree((VCardData)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    // check if the actual instance is of the type `MeCardData`
                    if (value.getActualInstance() instanceof MeCardData) {
                        JsonElement element = adapterMeCardData.toJsonTree((MeCardData)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    throw new IOException("Failed to serialize as the type doesn't match anyOf schemas: MeCardData, VCardData");
                }

                @Override
                public ContactData read(JsonReader in) throws IOException {
                    Object deserialized = null;
                    JsonElement jsonElement = elementAdapter.read(in);

                    ArrayList<String> errorMessages = new ArrayList<>();
                    TypeAdapter actualAdapter = elementAdapter;

                    // deserialize VCardData
                    try {
                        // validate the JSON object to see if any exception is thrown
                        VCardData.validateJsonElement(jsonElement);
                        actualAdapter = adapterVCardData;
                        ContactData ret = new ContactData();
                        ret.setActualInstance(actualAdapter.fromJsonTree(jsonElement));
                        return ret;
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for VCardData failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'VCardData'", e);
                    }
                    // deserialize MeCardData
                    try {
                        // validate the JSON object to see if any exception is thrown
                        MeCardData.validateJsonElement(jsonElement);
                        actualAdapter = adapterMeCardData;
                        ContactData ret = new ContactData();
                        ret.setActualInstance(actualAdapter.fromJsonTree(jsonElement));
                        return ret;
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for MeCardData failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'MeCardData'", e);
                    }

                    throw new IOException(String.format("Failed deserialization for ContactData: no class matches result, expected at least 1. Detailed failure message for anyOf schemas: %s. JSON: %s", errorMessages, jsonElement.toString()));
                }
            }.nullSafe();
        }
    }

    // store a list of schema names defined in anyOf
    public static final Map<String, Class<?>> schemas = new HashMap<String, Class<?>>();

    public ContactData() {
        super("anyOf", Boolean.FALSE);
    }

    public ContactData(Object o) {
        super("anyOf", Boolean.FALSE);
        setActualInstance(o);
    }

    static {
        schemas.put("VCardData", VCardData.class);
        schemas.put("MeCardData", MeCardData.class);
    }

    @Override
    public Map<String, Class<?>> getSchemas() {
        return ContactData.schemas;
    }

    /**
     * Set the instance that matches the anyOf child schema, check
     * the instance parameter is valid against the anyOf child schemas:
     * MeCardData, VCardData
     *
     * It could be an instance of the 'anyOf' schemas.
     */
    @Override
    public void setActualInstance(Object instance) {
        if (instance instanceof VCardData) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof MeCardData) {
            super.setActualInstance(instance);
            return;
        }

        throw new RuntimeException("Invalid instance type. Must be MeCardData, VCardData");
    }

    /**
     * Get the actual instance, which can be the following:
     * MeCardData, VCardData
     *
     * @return The actual instance (MeCardData, VCardData)
     */
    @SuppressWarnings("unchecked")
    @Override
    public Object getActualInstance() {
        return super.getActualInstance();
    }

    /**
     * Get the actual instance of `VCardData`. If the actual instance is not `VCardData`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `VCardData`
     * @throws ClassCastException if the instance is not `VCardData`
     */
    public VCardData getVCardData() throws ClassCastException {
        return (VCardData)super.getActualInstance();
    }
    /**
     * Get the actual instance of `MeCardData`. If the actual instance is not `MeCardData`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `MeCardData`
     * @throws ClassCastException if the instance is not `MeCardData`
     */
    public MeCardData getMeCardData() throws ClassCastException {
        return (MeCardData)super.getActualInstance();
    }

    /**
     * Validates the JSON Element and throws an exception if issues found
     *
     * @param jsonElement JSON Element
     * @throws IOException if the JSON Element is invalid with respect to ContactData
     */
    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
        // validate anyOf schemas one by one
        ArrayList<String> errorMessages = new ArrayList<>();
        // validate the json string with VCardData
        try {
            VCardData.validateJsonElement(jsonElement);
            return;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for VCardData failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        // validate the json string with MeCardData
        try {
            MeCardData.validateJsonElement(jsonElement);
            return;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for MeCardData failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        throw new IOException(String.format("The JSON string is invalid for ContactData with anyOf schemas: MeCardData, VCardData. no class match the result, expected at least 1. Detailed failure message for anyOf schemas: %s. JSON: %s", errorMessages, jsonElement.toString()));
    }

    /**
     * Create an instance of ContactData given an JSON string
     *
     * @param jsonString JSON string
     * @return An instance of ContactData
     * @throws IOException if the JSON string is invalid with respect to ContactData
     */
    public static ContactData fromJson(String jsonString) throws IOException {
        return JSON.getGson().fromJson(jsonString, ContactData.class);
    }

    /**
     * Convert an instance of ContactData to an JSON string
     *
     * @return JSON string
     */
    public String toJson() {
        return JSON.getGson().toJson(this);
    }
}

