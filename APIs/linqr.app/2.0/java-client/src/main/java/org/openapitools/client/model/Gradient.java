/*
 * LinQR
 * This is LinQR QR Code API documentation. This API allows you to generate custom, visually attractive QR Codes. The cloud infrastructure guarantees high availability and autoscalability of the service. You can generate hundreds of thousands of images this way and use them however you like.  We realize that your API use case may require custom solutions, and perhaps we lack functionality that is very important to you. In that case feel free to write an email to our support and tell us about it. We have repeatedly added new functions of our service directly after the requests of our users.  **General remarks:**  - maximum request size is fixed at 32MB.  - request timeout is fixed at 180 seconds.
 *
 * The version of the OpenAPI document: 2.0
 * Contact: support@linqr.app
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.GradientStop;
import org.openapitools.client.model.LinearGradient;
import org.openapitools.client.model.RadialGradient;



import java.io.IOException;
import java.lang.reflect.Type;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.util.ArrayList;
import java.util.Collections;
import java.util.HashSet;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapter;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.JsonPrimitive;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonSerializationContext;
import com.google.gson.JsonSerializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonArray;
import com.google.gson.JsonParseException;

import org.openapitools.client.JSON;

@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:01:56.961414-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Gradient extends AbstractOpenApiSchema {
    private static final Logger log = Logger.getLogger(Gradient.class.getName());

    public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
        @SuppressWarnings("unchecked")
        @Override
        public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
            if (!Gradient.class.isAssignableFrom(type.getRawType())) {
                return null; // this class only serializes 'Gradient' and its subtypes
            }
            final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
            final TypeAdapter<LinearGradient> adapterLinearGradient = gson.getDelegateAdapter(this, TypeToken.get(LinearGradient.class));
            final TypeAdapter<RadialGradient> adapterRadialGradient = gson.getDelegateAdapter(this, TypeToken.get(RadialGradient.class));

            return (TypeAdapter<T>) new TypeAdapter<Gradient>() {
                @Override
                public void write(JsonWriter out, Gradient value) throws IOException {
                    if (value == null || value.getActualInstance() == null) {
                        elementAdapter.write(out, null);
                        return;
                    }

                    // check if the actual instance is of the type `LinearGradient`
                    if (value.getActualInstance() instanceof LinearGradient) {
                        JsonElement element = adapterLinearGradient.toJsonTree((LinearGradient)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    // check if the actual instance is of the type `RadialGradient`
                    if (value.getActualInstance() instanceof RadialGradient) {
                        JsonElement element = adapterRadialGradient.toJsonTree((RadialGradient)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    throw new IOException("Failed to serialize as the type doesn't match anyOf schemas: LinearGradient, RadialGradient");
                }

                @Override
                public Gradient read(JsonReader in) throws IOException {
                    Object deserialized = null;
                    JsonElement jsonElement = elementAdapter.read(in);

                    ArrayList<String> errorMessages = new ArrayList<>();
                    TypeAdapter actualAdapter = elementAdapter;

                    // deserialize LinearGradient
                    try {
                        // validate the JSON object to see if any exception is thrown
                        LinearGradient.validateJsonElement(jsonElement);
                        actualAdapter = adapterLinearGradient;
                        Gradient ret = new Gradient();
                        ret.setActualInstance(actualAdapter.fromJsonTree(jsonElement));
                        return ret;
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for LinearGradient failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'LinearGradient'", e);
                    }
                    // deserialize RadialGradient
                    try {
                        // validate the JSON object to see if any exception is thrown
                        RadialGradient.validateJsonElement(jsonElement);
                        actualAdapter = adapterRadialGradient;
                        Gradient ret = new Gradient();
                        ret.setActualInstance(actualAdapter.fromJsonTree(jsonElement));
                        return ret;
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for RadialGradient failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'RadialGradient'", e);
                    }

                    throw new IOException(String.format("Failed deserialization for Gradient: no class matches result, expected at least 1. Detailed failure message for anyOf schemas: %s. JSON: %s", errorMessages, jsonElement.toString()));
                }
            }.nullSafe();
        }
    }

    // store a list of schema names defined in anyOf
    public static final Map<String, Class<?>> schemas = new HashMap<String, Class<?>>();

    public Gradient() {
        super("anyOf", Boolean.FALSE);
    }

    public Gradient(Object o) {
        super("anyOf", Boolean.FALSE);
        setActualInstance(o);
    }

    static {
        schemas.put("LinearGradient", LinearGradient.class);
        schemas.put("RadialGradient", RadialGradient.class);
    }

    @Override
    public Map<String, Class<?>> getSchemas() {
        return Gradient.schemas;
    }

    /**
     * Set the instance that matches the anyOf child schema, check
     * the instance parameter is valid against the anyOf child schemas:
     * LinearGradient, RadialGradient
     *
     * It could be an instance of the 'anyOf' schemas.
     */
    @Override
    public void setActualInstance(Object instance) {
        if (instance instanceof LinearGradient) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof RadialGradient) {
            super.setActualInstance(instance);
            return;
        }

        throw new RuntimeException("Invalid instance type. Must be LinearGradient, RadialGradient");
    }

    /**
     * Get the actual instance, which can be the following:
     * LinearGradient, RadialGradient
     *
     * @return The actual instance (LinearGradient, RadialGradient)
     */
    @SuppressWarnings("unchecked")
    @Override
    public Object getActualInstance() {
        return super.getActualInstance();
    }

    /**
     * Get the actual instance of `LinearGradient`. If the actual instance is not `LinearGradient`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `LinearGradient`
     * @throws ClassCastException if the instance is not `LinearGradient`
     */
    public LinearGradient getLinearGradient() throws ClassCastException {
        return (LinearGradient)super.getActualInstance();
    }
    /**
     * Get the actual instance of `RadialGradient`. If the actual instance is not `RadialGradient`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `RadialGradient`
     * @throws ClassCastException if the instance is not `RadialGradient`
     */
    public RadialGradient getRadialGradient() throws ClassCastException {
        return (RadialGradient)super.getActualInstance();
    }

    /**
     * Validates the JSON Element and throws an exception if issues found
     *
     * @param jsonElement JSON Element
     * @throws IOException if the JSON Element is invalid with respect to Gradient
     */
    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
        // validate anyOf schemas one by one
        ArrayList<String> errorMessages = new ArrayList<>();
        // validate the json string with LinearGradient
        try {
            LinearGradient.validateJsonElement(jsonElement);
            return;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for LinearGradient failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        // validate the json string with RadialGradient
        try {
            RadialGradient.validateJsonElement(jsonElement);
            return;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for RadialGradient failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        throw new IOException(String.format("The JSON string is invalid for Gradient with anyOf schemas: LinearGradient, RadialGradient. no class match the result, expected at least 1. Detailed failure message for anyOf schemas: %s. JSON: %s", errorMessages, jsonElement.toString()));
    }

    /**
     * Create an instance of Gradient given an JSON string
     *
     * @param jsonString JSON string
     * @return An instance of Gradient
     * @throws IOException if the JSON string is invalid with respect to Gradient
     */
    public static Gradient fromJson(String jsonString) throws IOException {
        return JSON.getGson().fromJson(jsonString, Gradient.class);
    }

    /**
     * Convert an instance of Gradient to an JSON string
     *
     * @return JSON string
     */
    public String toJson() {
        return JSON.getGson().toJson(this);
    }
}

