/*
 * LinQR
 * This is LinQR QR Code API documentation. This API allows you to generate custom, visually attractive QR Codes. The cloud infrastructure guarantees high availability and autoscalability of the service. You can generate hundreds of thousands of images this way and use them however you like.  We realize that your API use case may require custom solutions, and perhaps we lack functionality that is very important to you. In that case feel free to write an email to our support and tell us about it. We have repeatedly added new functions of our service directly after the requests of our users.  **General remarks:**  - maximum request size is fixed at 32MB.  - request timeout is fixed at 180 seconds.
 *
 * The version of the OpenAPI document: 2.0
 * Contact: support@linqr.app
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.BackgroundStyle;
import org.openapitools.client.model.InnerEyeStyle;
import org.openapitools.client.model.ModuleStyle;
import org.openapitools.client.model.OuterEyeStyle;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Style
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:01:56.961414-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Style {
  public static final String SERIALIZED_NAME_BACKGROUND = "background";
  @SerializedName(SERIALIZED_NAME_BACKGROUND)
  private BackgroundStyle background = {};

  public static final String SERIALIZED_NAME_INNER_EYE = "inner_eye";
  @SerializedName(SERIALIZED_NAME_INNER_EYE)
  private InnerEyeStyle innerEye = {"shape":"default"};

  public static final String SERIALIZED_NAME_MODULE = "module";
  @SerializedName(SERIALIZED_NAME_MODULE)
  private ModuleStyle module = {"color":"black","shape":"default"};

  public static final String SERIALIZED_NAME_OUTER_EYE = "outer_eye";
  @SerializedName(SERIALIZED_NAME_OUTER_EYE)
  private OuterEyeStyle outerEye = {"shape":"default"};

  public Style() {
  }

  public Style background(BackgroundStyle background) {
    this.background = background;
    return this;
  }

  /**
   * &#x60;background&#x60; property allows you to select color of the background of the generated QR Code.
   * @return background
   */
  @javax.annotation.Nullable
  public BackgroundStyle getBackground() {
    return background;
  }

  public void setBackground(BackgroundStyle background) {
    this.background = background;
  }


  public Style innerEye(InnerEyeStyle innerEye) {
    this.innerEye = innerEye;
    return this;
  }

  /**
   * &#x60;inner_eye&#x60; property allows you to select shape and color of the inner eyes of the generated QR Code.
   * @return innerEye
   */
  @javax.annotation.Nullable
  public InnerEyeStyle getInnerEye() {
    return innerEye;
  }

  public void setInnerEye(InnerEyeStyle innerEye) {
    this.innerEye = innerEye;
  }


  public Style module(ModuleStyle module) {
    this.module = module;
    return this;
  }

  /**
   * &#x60;module&#x60; property allows you to select shape and color of the modules of the generated QR Code.
   * @return module
   */
  @javax.annotation.Nullable
  public ModuleStyle getModule() {
    return module;
  }

  public void setModule(ModuleStyle module) {
    this.module = module;
  }


  public Style outerEye(OuterEyeStyle outerEye) {
    this.outerEye = outerEye;
    return this;
  }

  /**
   * &#x60;outer_eye&#x60; property allows you to select shape and color of the outer eyes of the generated QR Code.
   * @return outerEye
   */
  @javax.annotation.Nullable
  public OuterEyeStyle getOuterEye() {
    return outerEye;
  }

  public void setOuterEye(OuterEyeStyle outerEye) {
    this.outerEye = outerEye;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Style style = (Style) o;
    return Objects.equals(this.background, style.background) &&
        Objects.equals(this.innerEye, style.innerEye) &&
        Objects.equals(this.module, style.module) &&
        Objects.equals(this.outerEye, style.outerEye);
  }

  @Override
  public int hashCode() {
    return Objects.hash(background, innerEye, module, outerEye);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Style {\n");
    sb.append("    background: ").append(toIndentedString(background)).append("\n");
    sb.append("    innerEye: ").append(toIndentedString(innerEye)).append("\n");
    sb.append("    module: ").append(toIndentedString(module)).append("\n");
    sb.append("    outerEye: ").append(toIndentedString(outerEye)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("background");
    openapiFields.add("inner_eye");
    openapiFields.add("module");
    openapiFields.add("outer_eye");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Style
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Style.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Style is not found in the empty JSON string", Style.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Style.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Style` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `background`
      if (jsonObj.get("background") != null && !jsonObj.get("background").isJsonNull()) {
        BackgroundStyle.validateJsonElement(jsonObj.get("background"));
      }
      // validate the optional field `inner_eye`
      if (jsonObj.get("inner_eye") != null && !jsonObj.get("inner_eye").isJsonNull()) {
        InnerEyeStyle.validateJsonElement(jsonObj.get("inner_eye"));
      }
      // validate the optional field `module`
      if (jsonObj.get("module") != null && !jsonObj.get("module").isJsonNull()) {
        ModuleStyle.validateJsonElement(jsonObj.get("module"));
      }
      // validate the optional field `outer_eye`
      if (jsonObj.get("outer_eye") != null && !jsonObj.get("outer_eye").isJsonNull()) {
        OuterEyeStyle.validateJsonElement(jsonObj.get("outer_eye"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Style.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Style' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Style> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Style.class));

       return (TypeAdapter<T>) new TypeAdapter<Style>() {
           @Override
           public void write(JsonWriter out, Style value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Style read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Style given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Style
   * @throws IOException if the JSON string is invalid with respect to Style
   */
  public static Style fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Style.class);
  }

  /**
   * Convert an instance of Style to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

