/**
 * LinQR
 * This is LinQR QR Code API documentation. This API allows you to generate custom, visually attractive QR Codes. The cloud infrastructure guarantees high availability and autoscalability of the service. You can generate hundreds of thousands of images this way and use them however you like.  We realize that your API use case may require custom solutions, and perhaps we lack functionality that is very important to you. In that case feel free to write an email to our support and tell us about it. We have repeatedly added new functions of our service directly after the requests of our users.  **General remarks:**  - maximum request size is fixed at 32MB.  - request timeout is fixed at 180 seconds.
 *
 * The version of the OpenAPI document: 2.0
 * Contact: support@linqr.app
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIContactData.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIContactData::OAIContactData(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIContactData::OAIContactData() {
    this->initializeModel();
}

OAIContactData::~OAIContactData() {}

void OAIContactData::initializeModel() {

    m_birthday_isSet = false;
    m_birthday_isValid = false;

    m_cell_phone_isSet = false;
    m_cell_phone_isValid = false;

    m_city_isSet = false;
    m_city_isValid = false;

    m_country_isSet = false;
    m_country_isValid = false;

    m_display_name_isSet = false;
    m_display_name_isValid = false;

    m_email_isSet = false;
    m_email_isValid = false;

    m_encoding_isSet = false;
    m_encoding_isValid = false;

    m_fax_isSet = false;
    m_fax_isValid = false;

    m_first_name_isSet = false;
    m_first_name_isValid = false;

    m_home_phone_isSet = false;
    m_home_phone_isValid = false;

    m_last_name_isSet = false;
    m_last_name_isValid = false;

    m_latitude_isSet = false;
    m_latitude_isValid = false;

    m_longitude_isSet = false;
    m_longitude_isValid = false;

    m_memo_isSet = false;
    m_memo_isValid = false;

    m_nickname_isSet = false;
    m_nickname_isValid = false;

    m_organization_isSet = false;
    m_organization_isValid = false;

    m_phone_isSet = false;
    m_phone_isValid = false;

    m_photo_isSet = false;
    m_photo_isValid = false;

    m_po_box_isSet = false;
    m_po_box_isValid = false;

    m_region_isSet = false;
    m_region_isValid = false;

    m_revision_isSet = false;
    m_revision_isValid = false;

    m_source_isSet = false;
    m_source_isValid = false;

    m_street_isSet = false;
    m_street_isValid = false;

    m_title_isSet = false;
    m_title_isValid = false;

    m_url_isSet = false;
    m_url_isValid = false;

    m_videophone_isSet = false;
    m_videophone_isValid = false;

    m_work_phone_isSet = false;
    m_work_phone_isValid = false;

    m_zip_code_isSet = false;
    m_zip_code_isValid = false;

    m_house_number_isSet = false;
    m_house_number_isValid = false;

    m_prefecture_isSet = false;
    m_prefecture_isValid = false;

    m_reading_isSet = false;
    m_reading_isValid = false;

    m_room_number_isSet = false;
    m_room_number_isValid = false;
}

void OAIContactData::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIContactData::fromJsonObject(QJsonObject json) {

    m_birthday_isValid = ::OpenAPI::fromJsonValue(m_birthday, json[QString("birthday")]);
    m_birthday_isSet = !json[QString("birthday")].isNull() && m_birthday_isValid;

    m_cell_phone_isValid = ::OpenAPI::fromJsonValue(m_cell_phone, json[QString("cell_phone")]);
    m_cell_phone_isSet = !json[QString("cell_phone")].isNull() && m_cell_phone_isValid;

    m_city_isValid = ::OpenAPI::fromJsonValue(m_city, json[QString("city")]);
    m_city_isSet = !json[QString("city")].isNull() && m_city_isValid;

    m_country_isValid = ::OpenAPI::fromJsonValue(m_country, json[QString("country")]);
    m_country_isSet = !json[QString("country")].isNull() && m_country_isValid;

    m_display_name_isValid = ::OpenAPI::fromJsonValue(m_display_name, json[QString("display_name")]);
    m_display_name_isSet = !json[QString("display_name")].isNull() && m_display_name_isValid;

    m_email_isValid = ::OpenAPI::fromJsonValue(m_email, json[QString("email")]);
    m_email_isSet = !json[QString("email")].isNull() && m_email_isValid;

    m_encoding_isValid = ::OpenAPI::fromJsonValue(m_encoding, json[QString("encoding")]);
    m_encoding_isSet = !json[QString("encoding")].isNull() && m_encoding_isValid;

    m_fax_isValid = ::OpenAPI::fromJsonValue(m_fax, json[QString("fax")]);
    m_fax_isSet = !json[QString("fax")].isNull() && m_fax_isValid;

    m_first_name_isValid = ::OpenAPI::fromJsonValue(m_first_name, json[QString("first_name")]);
    m_first_name_isSet = !json[QString("first_name")].isNull() && m_first_name_isValid;

    m_home_phone_isValid = ::OpenAPI::fromJsonValue(m_home_phone, json[QString("home_phone")]);
    m_home_phone_isSet = !json[QString("home_phone")].isNull() && m_home_phone_isValid;

    m_last_name_isValid = ::OpenAPI::fromJsonValue(m_last_name, json[QString("last_name")]);
    m_last_name_isSet = !json[QString("last_name")].isNull() && m_last_name_isValid;

    m_latitude_isValid = ::OpenAPI::fromJsonValue(m_latitude, json[QString("latitude")]);
    m_latitude_isSet = !json[QString("latitude")].isNull() && m_latitude_isValid;

    m_longitude_isValid = ::OpenAPI::fromJsonValue(m_longitude, json[QString("longitude")]);
    m_longitude_isSet = !json[QString("longitude")].isNull() && m_longitude_isValid;

    m_memo_isValid = ::OpenAPI::fromJsonValue(m_memo, json[QString("memo")]);
    m_memo_isSet = !json[QString("memo")].isNull() && m_memo_isValid;

    m_nickname_isValid = ::OpenAPI::fromJsonValue(m_nickname, json[QString("nickname")]);
    m_nickname_isSet = !json[QString("nickname")].isNull() && m_nickname_isValid;

    m_organization_isValid = ::OpenAPI::fromJsonValue(m_organization, json[QString("organization")]);
    m_organization_isSet = !json[QString("organization")].isNull() && m_organization_isValid;

    m_phone_isValid = ::OpenAPI::fromJsonValue(m_phone, json[QString("phone")]);
    m_phone_isSet = !json[QString("phone")].isNull() && m_phone_isValid;

    m_photo_isValid = ::OpenAPI::fromJsonValue(m_photo, json[QString("photo")]);
    m_photo_isSet = !json[QString("photo")].isNull() && m_photo_isValid;

    m_po_box_isValid = ::OpenAPI::fromJsonValue(m_po_box, json[QString("po_box")]);
    m_po_box_isSet = !json[QString("po_box")].isNull() && m_po_box_isValid;

    m_region_isValid = ::OpenAPI::fromJsonValue(m_region, json[QString("region")]);
    m_region_isSet = !json[QString("region")].isNull() && m_region_isValid;

    m_revision_isValid = ::OpenAPI::fromJsonValue(m_revision, json[QString("revision")]);
    m_revision_isSet = !json[QString("revision")].isNull() && m_revision_isValid;

    m_source_isValid = ::OpenAPI::fromJsonValue(m_source, json[QString("source")]);
    m_source_isSet = !json[QString("source")].isNull() && m_source_isValid;

    m_street_isValid = ::OpenAPI::fromJsonValue(m_street, json[QString("street")]);
    m_street_isSet = !json[QString("street")].isNull() && m_street_isValid;

    m_title_isValid = ::OpenAPI::fromJsonValue(m_title, json[QString("title")]);
    m_title_isSet = !json[QString("title")].isNull() && m_title_isValid;

    m_url_isValid = ::OpenAPI::fromJsonValue(m_url, json[QString("url")]);
    m_url_isSet = !json[QString("url")].isNull() && m_url_isValid;

    m_videophone_isValid = ::OpenAPI::fromJsonValue(m_videophone, json[QString("videophone")]);
    m_videophone_isSet = !json[QString("videophone")].isNull() && m_videophone_isValid;

    m_work_phone_isValid = ::OpenAPI::fromJsonValue(m_work_phone, json[QString("work_phone")]);
    m_work_phone_isSet = !json[QString("work_phone")].isNull() && m_work_phone_isValid;

    m_zip_code_isValid = ::OpenAPI::fromJsonValue(m_zip_code, json[QString("zip_code")]);
    m_zip_code_isSet = !json[QString("zip_code")].isNull() && m_zip_code_isValid;

    m_house_number_isValid = ::OpenAPI::fromJsonValue(m_house_number, json[QString("house_number")]);
    m_house_number_isSet = !json[QString("house_number")].isNull() && m_house_number_isValid;

    m_prefecture_isValid = ::OpenAPI::fromJsonValue(m_prefecture, json[QString("prefecture")]);
    m_prefecture_isSet = !json[QString("prefecture")].isNull() && m_prefecture_isValid;

    m_reading_isValid = ::OpenAPI::fromJsonValue(m_reading, json[QString("reading")]);
    m_reading_isSet = !json[QString("reading")].isNull() && m_reading_isValid;

    m_room_number_isValid = ::OpenAPI::fromJsonValue(m_room_number, json[QString("room_number")]);
    m_room_number_isSet = !json[QString("room_number")].isNull() && m_room_number_isValid;
}

QString OAIContactData::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIContactData::asJsonObject() const {
    QJsonObject obj;
    if (m_birthday_isSet) {
        obj.insert(QString("birthday"), ::OpenAPI::toJsonValue(m_birthday));
    }
    if (m_cell_phone.isSet()) {
        obj.insert(QString("cell_phone"), ::OpenAPI::toJsonValue(m_cell_phone));
    }
    if (m_city_isSet) {
        obj.insert(QString("city"), ::OpenAPI::toJsonValue(m_city));
    }
    if (m_country_isSet) {
        obj.insert(QString("country"), ::OpenAPI::toJsonValue(m_country));
    }
    if (m_display_name_isSet) {
        obj.insert(QString("display_name"), ::OpenAPI::toJsonValue(m_display_name));
    }
    if (m_email.isSet()) {
        obj.insert(QString("email"), ::OpenAPI::toJsonValue(m_email));
    }
    if (m_encoding_isSet) {
        obj.insert(QString("encoding"), ::OpenAPI::toJsonValue(m_encoding));
    }
    if (m_fax.isSet()) {
        obj.insert(QString("fax"), ::OpenAPI::toJsonValue(m_fax));
    }
    if (m_first_name_isSet) {
        obj.insert(QString("first_name"), ::OpenAPI::toJsonValue(m_first_name));
    }
    if (m_home_phone.isSet()) {
        obj.insert(QString("home_phone"), ::OpenAPI::toJsonValue(m_home_phone));
    }
    if (m_last_name_isSet) {
        obj.insert(QString("last_name"), ::OpenAPI::toJsonValue(m_last_name));
    }
    if (m_latitude_isSet) {
        obj.insert(QString("latitude"), ::OpenAPI::toJsonValue(m_latitude));
    }
    if (m_longitude_isSet) {
        obj.insert(QString("longitude"), ::OpenAPI::toJsonValue(m_longitude));
    }
    if (m_memo_isSet) {
        obj.insert(QString("memo"), ::OpenAPI::toJsonValue(m_memo));
    }
    if (m_nickname_isSet) {
        obj.insert(QString("nickname"), ::OpenAPI::toJsonValue(m_nickname));
    }
    if (m_organization_isSet) {
        obj.insert(QString("organization"), ::OpenAPI::toJsonValue(m_organization));
    }
    if (m_phone.isSet()) {
        obj.insert(QString("phone"), ::OpenAPI::toJsonValue(m_phone));
    }
    if (m_photo.isSet()) {
        obj.insert(QString("photo"), ::OpenAPI::toJsonValue(m_photo));
    }
    if (m_po_box_isSet) {
        obj.insert(QString("po_box"), ::OpenAPI::toJsonValue(m_po_box));
    }
    if (m_region_isSet) {
        obj.insert(QString("region"), ::OpenAPI::toJsonValue(m_region));
    }
    if (m_revision_isSet) {
        obj.insert(QString("revision"), ::OpenAPI::toJsonValue(m_revision));
    }
    if (m_source_isSet) {
        obj.insert(QString("source"), ::OpenAPI::toJsonValue(m_source));
    }
    if (m_street_isSet) {
        obj.insert(QString("street"), ::OpenAPI::toJsonValue(m_street));
    }
    if (m_title.isSet()) {
        obj.insert(QString("title"), ::OpenAPI::toJsonValue(m_title));
    }
    if (m_url.isSet()) {
        obj.insert(QString("url"), ::OpenAPI::toJsonValue(m_url));
    }
    if (m_videophone.isSet()) {
        obj.insert(QString("videophone"), ::OpenAPI::toJsonValue(m_videophone));
    }
    if (m_work_phone.isSet()) {
        obj.insert(QString("work_phone"), ::OpenAPI::toJsonValue(m_work_phone));
    }
    if (m_zip_code_isSet) {
        obj.insert(QString("zip_code"), ::OpenAPI::toJsonValue(m_zip_code));
    }
    if (m_house_number_isSet) {
        obj.insert(QString("house_number"), ::OpenAPI::toJsonValue(m_house_number));
    }
    if (m_prefecture_isSet) {
        obj.insert(QString("prefecture"), ::OpenAPI::toJsonValue(m_prefecture));
    }
    if (m_reading_isSet) {
        obj.insert(QString("reading"), ::OpenAPI::toJsonValue(m_reading));
    }
    if (m_room_number_isSet) {
        obj.insert(QString("room_number"), ::OpenAPI::toJsonValue(m_room_number));
    }
    return obj;
}

QDate OAIContactData::getBirthday() const {
    return m_birthday;
}
void OAIContactData::setBirthday(const QDate &birthday) {
    m_birthday = birthday;
    m_birthday_isSet = true;
}

bool OAIContactData::is_birthday_Set() const{
    return m_birthday_isSet;
}

bool OAIContactData::is_birthday_Valid() const{
    return m_birthday_isValid;
}

OAICell_Phone OAIContactData::getCellPhone() const {
    return m_cell_phone;
}
void OAIContactData::setCellPhone(const OAICell_Phone &cell_phone) {
    m_cell_phone = cell_phone;
    m_cell_phone_isSet = true;
}

bool OAIContactData::is_cell_phone_Set() const{
    return m_cell_phone_isSet;
}

bool OAIContactData::is_cell_phone_Valid() const{
    return m_cell_phone_isValid;
}

QString OAIContactData::getCity() const {
    return m_city;
}
void OAIContactData::setCity(const QString &city) {
    m_city = city;
    m_city_isSet = true;
}

bool OAIContactData::is_city_Set() const{
    return m_city_isSet;
}

bool OAIContactData::is_city_Valid() const{
    return m_city_isValid;
}

QString OAIContactData::getCountry() const {
    return m_country;
}
void OAIContactData::setCountry(const QString &country) {
    m_country = country;
    m_country_isSet = true;
}

bool OAIContactData::is_country_Set() const{
    return m_country_isSet;
}

bool OAIContactData::is_country_Valid() const{
    return m_country_isValid;
}

QString OAIContactData::getDisplayName() const {
    return m_display_name;
}
void OAIContactData::setDisplayName(const QString &display_name) {
    m_display_name = display_name;
    m_display_name_isSet = true;
}

bool OAIContactData::is_display_name_Set() const{
    return m_display_name_isSet;
}

bool OAIContactData::is_display_name_Valid() const{
    return m_display_name_isValid;
}

OAIEmail OAIContactData::getEmail() const {
    return m_email;
}
void OAIContactData::setEmail(const OAIEmail &email) {
    m_email = email;
    m_email_isSet = true;
}

bool OAIContactData::is_email_Set() const{
    return m_email_isSet;
}

bool OAIContactData::is_email_Valid() const{
    return m_email_isValid;
}

QString OAIContactData::getEncoding() const {
    return m_encoding;
}
void OAIContactData::setEncoding(const QString &encoding) {
    m_encoding = encoding;
    m_encoding_isSet = true;
}

bool OAIContactData::is_encoding_Set() const{
    return m_encoding_isSet;
}

bool OAIContactData::is_encoding_Valid() const{
    return m_encoding_isValid;
}

OAIFax OAIContactData::getFax() const {
    return m_fax;
}
void OAIContactData::setFax(const OAIFax &fax) {
    m_fax = fax;
    m_fax_isSet = true;
}

bool OAIContactData::is_fax_Set() const{
    return m_fax_isSet;
}

bool OAIContactData::is_fax_Valid() const{
    return m_fax_isValid;
}

QString OAIContactData::getFirstName() const {
    return m_first_name;
}
void OAIContactData::setFirstName(const QString &first_name) {
    m_first_name = first_name;
    m_first_name_isSet = true;
}

bool OAIContactData::is_first_name_Set() const{
    return m_first_name_isSet;
}

bool OAIContactData::is_first_name_Valid() const{
    return m_first_name_isValid;
}

OAIHome_Phone OAIContactData::getHomePhone() const {
    return m_home_phone;
}
void OAIContactData::setHomePhone(const OAIHome_Phone &home_phone) {
    m_home_phone = home_phone;
    m_home_phone_isSet = true;
}

bool OAIContactData::is_home_phone_Set() const{
    return m_home_phone_isSet;
}

bool OAIContactData::is_home_phone_Valid() const{
    return m_home_phone_isValid;
}

QString OAIContactData::getLastName() const {
    return m_last_name;
}
void OAIContactData::setLastName(const QString &last_name) {
    m_last_name = last_name;
    m_last_name_isSet = true;
}

bool OAIContactData::is_last_name_Set() const{
    return m_last_name_isSet;
}

bool OAIContactData::is_last_name_Valid() const{
    return m_last_name_isValid;
}

double OAIContactData::getLatitude() const {
    return m_latitude;
}
void OAIContactData::setLatitude(const double &latitude) {
    m_latitude = latitude;
    m_latitude_isSet = true;
}

bool OAIContactData::is_latitude_Set() const{
    return m_latitude_isSet;
}

bool OAIContactData::is_latitude_Valid() const{
    return m_latitude_isValid;
}

double OAIContactData::getLongitude() const {
    return m_longitude;
}
void OAIContactData::setLongitude(const double &longitude) {
    m_longitude = longitude;
    m_longitude_isSet = true;
}

bool OAIContactData::is_longitude_Set() const{
    return m_longitude_isSet;
}

bool OAIContactData::is_longitude_Valid() const{
    return m_longitude_isValid;
}

QString OAIContactData::getMemo() const {
    return m_memo;
}
void OAIContactData::setMemo(const QString &memo) {
    m_memo = memo;
    m_memo_isSet = true;
}

bool OAIContactData::is_memo_Set() const{
    return m_memo_isSet;
}

bool OAIContactData::is_memo_Valid() const{
    return m_memo_isValid;
}

QString OAIContactData::getNickname() const {
    return m_nickname;
}
void OAIContactData::setNickname(const QString &nickname) {
    m_nickname = nickname;
    m_nickname_isSet = true;
}

bool OAIContactData::is_nickname_Set() const{
    return m_nickname_isSet;
}

bool OAIContactData::is_nickname_Valid() const{
    return m_nickname_isValid;
}

QString OAIContactData::getOrganization() const {
    return m_organization;
}
void OAIContactData::setOrganization(const QString &organization) {
    m_organization = organization;
    m_organization_isSet = true;
}

bool OAIContactData::is_organization_Set() const{
    return m_organization_isSet;
}

bool OAIContactData::is_organization_Valid() const{
    return m_organization_isValid;
}

OAIPhone OAIContactData::getPhone() const {
    return m_phone;
}
void OAIContactData::setPhone(const OAIPhone &phone) {
    m_phone = phone;
    m_phone_isSet = true;
}

bool OAIContactData::is_phone_Set() const{
    return m_phone_isSet;
}

bool OAIContactData::is_phone_Valid() const{
    return m_phone_isValid;
}

OAIPhoto OAIContactData::getPhoto() const {
    return m_photo;
}
void OAIContactData::setPhoto(const OAIPhoto &photo) {
    m_photo = photo;
    m_photo_isSet = true;
}

bool OAIContactData::is_photo_Set() const{
    return m_photo_isSet;
}

bool OAIContactData::is_photo_Valid() const{
    return m_photo_isValid;
}

QString OAIContactData::getPoBox() const {
    return m_po_box;
}
void OAIContactData::setPoBox(const QString &po_box) {
    m_po_box = po_box;
    m_po_box_isSet = true;
}

bool OAIContactData::is_po_box_Set() const{
    return m_po_box_isSet;
}

bool OAIContactData::is_po_box_Valid() const{
    return m_po_box_isValid;
}

QString OAIContactData::getRegion() const {
    return m_region;
}
void OAIContactData::setRegion(const QString &region) {
    m_region = region;
    m_region_isSet = true;
}

bool OAIContactData::is_region_Set() const{
    return m_region_isSet;
}

bool OAIContactData::is_region_Valid() const{
    return m_region_isValid;
}

QDate OAIContactData::getRevision() const {
    return m_revision;
}
void OAIContactData::setRevision(const QDate &revision) {
    m_revision = revision;
    m_revision_isSet = true;
}

bool OAIContactData::is_revision_Set() const{
    return m_revision_isSet;
}

bool OAIContactData::is_revision_Valid() const{
    return m_revision_isValid;
}

QString OAIContactData::getSource() const {
    return m_source;
}
void OAIContactData::setSource(const QString &source) {
    m_source = source;
    m_source_isSet = true;
}

bool OAIContactData::is_source_Set() const{
    return m_source_isSet;
}

bool OAIContactData::is_source_Valid() const{
    return m_source_isValid;
}

QString OAIContactData::getStreet() const {
    return m_street;
}
void OAIContactData::setStreet(const QString &street) {
    m_street = street;
    m_street_isSet = true;
}

bool OAIContactData::is_street_Set() const{
    return m_street_isSet;
}

bool OAIContactData::is_street_Valid() const{
    return m_street_isValid;
}

OAITitle OAIContactData::getTitle() const {
    return m_title;
}
void OAIContactData::setTitle(const OAITitle &title) {
    m_title = title;
    m_title_isSet = true;
}

bool OAIContactData::is_title_Set() const{
    return m_title_isSet;
}

bool OAIContactData::is_title_Valid() const{
    return m_title_isValid;
}

OAIUrl OAIContactData::getUrl() const {
    return m_url;
}
void OAIContactData::setUrl(const OAIUrl &url) {
    m_url = url;
    m_url_isSet = true;
}

bool OAIContactData::is_url_Set() const{
    return m_url_isSet;
}

bool OAIContactData::is_url_Valid() const{
    return m_url_isValid;
}

OAIVideophone OAIContactData::getVideophone() const {
    return m_videophone;
}
void OAIContactData::setVideophone(const OAIVideophone &videophone) {
    m_videophone = videophone;
    m_videophone_isSet = true;
}

bool OAIContactData::is_videophone_Set() const{
    return m_videophone_isSet;
}

bool OAIContactData::is_videophone_Valid() const{
    return m_videophone_isValid;
}

OAIWork_Phone OAIContactData::getWorkPhone() const {
    return m_work_phone;
}
void OAIContactData::setWorkPhone(const OAIWork_Phone &work_phone) {
    m_work_phone = work_phone;
    m_work_phone_isSet = true;
}

bool OAIContactData::is_work_phone_Set() const{
    return m_work_phone_isSet;
}

bool OAIContactData::is_work_phone_Valid() const{
    return m_work_phone_isValid;
}

QString OAIContactData::getZipCode() const {
    return m_zip_code;
}
void OAIContactData::setZipCode(const QString &zip_code) {
    m_zip_code = zip_code;
    m_zip_code_isSet = true;
}

bool OAIContactData::is_zip_code_Set() const{
    return m_zip_code_isSet;
}

bool OAIContactData::is_zip_code_Valid() const{
    return m_zip_code_isValid;
}

QString OAIContactData::getHouseNumber() const {
    return m_house_number;
}
void OAIContactData::setHouseNumber(const QString &house_number) {
    m_house_number = house_number;
    m_house_number_isSet = true;
}

bool OAIContactData::is_house_number_Set() const{
    return m_house_number_isSet;
}

bool OAIContactData::is_house_number_Valid() const{
    return m_house_number_isValid;
}

QString OAIContactData::getPrefecture() const {
    return m_prefecture;
}
void OAIContactData::setPrefecture(const QString &prefecture) {
    m_prefecture = prefecture;
    m_prefecture_isSet = true;
}

bool OAIContactData::is_prefecture_Set() const{
    return m_prefecture_isSet;
}

bool OAIContactData::is_prefecture_Valid() const{
    return m_prefecture_isValid;
}

QString OAIContactData::getReading() const {
    return m_reading;
}
void OAIContactData::setReading(const QString &reading) {
    m_reading = reading;
    m_reading_isSet = true;
}

bool OAIContactData::is_reading_Set() const{
    return m_reading_isSet;
}

bool OAIContactData::is_reading_Valid() const{
    return m_reading_isValid;
}

QString OAIContactData::getRoomNumber() const {
    return m_room_number;
}
void OAIContactData::setRoomNumber(const QString &room_number) {
    m_room_number = room_number;
    m_room_number_isSet = true;
}

bool OAIContactData::is_room_number_Set() const{
    return m_room_number_isSet;
}

bool OAIContactData::is_room_number_Valid() const{
    return m_room_number_isValid;
}

bool OAIContactData::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_birthday_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_cell_phone.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_city_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_country_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_display_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_email.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_encoding_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_fax.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_first_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_home_phone.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_latitude_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_longitude_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_memo_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_nickname_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_organization_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_phone.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_photo.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_po_box_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_region_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_revision_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_source_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_street_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_title.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_url.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_videophone.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_work_phone.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_zip_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_house_number_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_prefecture_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_reading_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_room_number_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIContactData::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_last_name_isValid && true;
}

} // namespace OpenAPI
