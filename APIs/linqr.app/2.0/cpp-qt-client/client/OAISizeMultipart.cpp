/**
 * LinQR
 * This is LinQR QR Code API documentation. This API allows you to generate custom, visually attractive QR Codes. The cloud infrastructure guarantees high availability and autoscalability of the service. You can generate hundreds of thousands of images this way and use them however you like.  We realize that your API use case may require custom solutions, and perhaps we lack functionality that is very important to you. In that case feel free to write an email to our support and tell us about it. We have repeatedly added new functions of our service directly after the requests of our users.  **General remarks:**  - maximum request size is fixed at 32MB.  - request timeout is fixed at 180 seconds.
 *
 * The version of the OpenAPI document: 2.0
 * Contact: support@linqr.app
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISizeMultipart.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISizeMultipart::OAISizeMultipart(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISizeMultipart::OAISizeMultipart() {
    this->initializeModel();
}

OAISizeMultipart::~OAISizeMultipart() {}

void OAISizeMultipart::initializeModel() {

    m_quiet_zone_isSet = false;
    m_quiet_zone_isValid = false;

    m_width_isSet = false;
    m_width_isValid = false;
}

void OAISizeMultipart::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISizeMultipart::fromJsonObject(QJsonObject json) {

    m_quiet_zone_isValid = ::OpenAPI::fromJsonValue(m_quiet_zone, json[QString("quiet_zone")]);
    m_quiet_zone_isSet = !json[QString("quiet_zone")].isNull() && m_quiet_zone_isValid;

    m_width_isValid = ::OpenAPI::fromJsonValue(m_width, json[QString("width")]);
    m_width_isSet = !json[QString("width")].isNull() && m_width_isValid;
}

QString OAISizeMultipart::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISizeMultipart::asJsonObject() const {
    QJsonObject obj;
    if (m_quiet_zone_isSet) {
        obj.insert(QString("quiet_zone"), ::OpenAPI::toJsonValue(m_quiet_zone));
    }
    if (m_width_isSet) {
        obj.insert(QString("width"), ::OpenAPI::toJsonValue(m_width));
    }
    return obj;
}

qint32 OAISizeMultipart::getQuietZone() const {
    return m_quiet_zone;
}
void OAISizeMultipart::setQuietZone(const qint32 &quiet_zone) {
    m_quiet_zone = quiet_zone;
    m_quiet_zone_isSet = true;
}

bool OAISizeMultipart::is_quiet_zone_Set() const{
    return m_quiet_zone_isSet;
}

bool OAISizeMultipart::is_quiet_zone_Valid() const{
    return m_quiet_zone_isValid;
}

qint32 OAISizeMultipart::getWidth() const {
    return m_width;
}
void OAISizeMultipart::setWidth(const qint32 &width) {
    m_width = width;
    m_width_isSet = true;
}

bool OAISizeMultipart::is_width_Set() const{
    return m_width_isSet;
}

bool OAISizeMultipart::is_width_Valid() const{
    return m_width_isValid;
}

bool OAISizeMultipart::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_quiet_zone_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_width_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISizeMultipart::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
