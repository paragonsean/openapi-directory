/**
 * LinQR
 * This is LinQR QR Code API documentation. This API allows you to generate custom, visually attractive QR Codes. The cloud infrastructure guarantees high availability and autoscalability of the service. You can generate hundreds of thousands of images this way and use them however you like.  We realize that your API use case may require custom solutions, and perhaps we lack functionality that is very important to you. In that case feel free to write an email to our support and tell us about it. We have repeatedly added new functions of our service directly after the requests of our users.  **General remarks:**  - maximum request size is fixed at 32MB.  - request timeout is fixed at 180 seconds.
 *
 * The version of the OpenAPI document: 2.0
 * Contact: support@linqr.app
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIInnerEyeShapes.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIInnerEyeShapes::OAIInnerEyeShapes(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIInnerEyeShapes::OAIInnerEyeShapes() {
    this->initializeModel();
}

OAIInnerEyeShapes::~OAIInnerEyeShapes() {}

void OAIInnerEyeShapes::initializeModel() {

    m_value_isSet = false;
    m_value_isValid = false;
    m_value = eOAIInnerEyeShapes::INVALID_VALUE_OPENAPI_GENERATED;
}

void OAIInnerEyeShapes::fromJson(QString jsonString) {
    
    if ( jsonString.compare("circle", Qt::CaseInsensitive) == 0) {
        m_value = eOAIInnerEyeShapes::CIRCLE;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("cushion", Qt::CaseInsensitive) == 0) {
        m_value = eOAIInnerEyeShapes::CUSHION;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("default", Qt::CaseInsensitive) == 0) {
        m_value = eOAIInnerEyeShapes::DEFAULT;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("diamond", Qt::CaseInsensitive) == 0) {
        m_value = eOAIInnerEyeShapes::DIAMOND;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("dots", Qt::CaseInsensitive) == 0) {
        m_value = eOAIInnerEyeShapes::DOTS;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("heavyround", Qt::CaseInsensitive) == 0) {
        m_value = eOAIInnerEyeShapes::HEAVYROUND;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("horizontal_lines", Qt::CaseInsensitive) == 0) {
        m_value = eOAIInnerEyeShapes::HORIZONTAL_LINES;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("leaf", Qt::CaseInsensitive) == 0) {
        m_value = eOAIInnerEyeShapes::LEAF;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("left_eye", Qt::CaseInsensitive) == 0) {
        m_value = eOAIInnerEyeShapes::LEFT_EYE;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("lightround", Qt::CaseInsensitive) == 0) {
        m_value = eOAIInnerEyeShapes::LIGHTROUND;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("right_eye", Qt::CaseInsensitive) == 0) {
        m_value = eOAIInnerEyeShapes::RIGHT_EYE;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("shield", Qt::CaseInsensitive) == 0) {
        m_value = eOAIInnerEyeShapes::SHIELD;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("sieve", Qt::CaseInsensitive) == 0) {
        m_value = eOAIInnerEyeShapes::SIEVE;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("star", Qt::CaseInsensitive) == 0) {
        m_value = eOAIInnerEyeShapes::STAR;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("vertical_lines", Qt::CaseInsensitive) == 0) {
        m_value = eOAIInnerEyeShapes::VERTICAL_LINES;
        m_value_isSet = m_value_isValid = true;
    }
}

void OAIInnerEyeShapes::fromJsonValue(QJsonValue json) {
fromJson(json.toString());
}

QString OAIInnerEyeShapes::asJson() const {
    
    QString val;
    switch (m_value){
        case eOAIInnerEyeShapes::CIRCLE:
            val = "circle";
            break;
        case eOAIInnerEyeShapes::CUSHION:
            val = "cushion";
            break;
        case eOAIInnerEyeShapes::DEFAULT:
            val = "default";
            break;
        case eOAIInnerEyeShapes::DIAMOND:
            val = "diamond";
            break;
        case eOAIInnerEyeShapes::DOTS:
            val = "dots";
            break;
        case eOAIInnerEyeShapes::HEAVYROUND:
            val = "heavyround";
            break;
        case eOAIInnerEyeShapes::HORIZONTAL_LINES:
            val = "horizontal_lines";
            break;
        case eOAIInnerEyeShapes::LEAF:
            val = "leaf";
            break;
        case eOAIInnerEyeShapes::LEFT_EYE:
            val = "left_eye";
            break;
        case eOAIInnerEyeShapes::LIGHTROUND:
            val = "lightround";
            break;
        case eOAIInnerEyeShapes::RIGHT_EYE:
            val = "right_eye";
            break;
        case eOAIInnerEyeShapes::SHIELD:
            val = "shield";
            break;
        case eOAIInnerEyeShapes::SIEVE:
            val = "sieve";
            break;
        case eOAIInnerEyeShapes::STAR:
            val = "star";
            break;
        case eOAIInnerEyeShapes::VERTICAL_LINES:
            val = "vertical_lines";
            break;
        default:
            break;
    }
    return val;
}

QJsonValue OAIInnerEyeShapes::asJsonValue() const {
    
    return QJsonValue(asJson());
}


OAIInnerEyeShapes::eOAIInnerEyeShapes OAIInnerEyeShapes::getValue() const {
    return m_value;
}

void OAIInnerEyeShapes::setValue(const OAIInnerEyeShapes::eOAIInnerEyeShapes& value){
    m_value = value;
    m_value_isSet = true;
}
bool OAIInnerEyeShapes::isSet() const {
    
    return m_value_isSet;
}

bool OAIInnerEyeShapes::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_value_isValid;
}

} // namespace OpenAPI
