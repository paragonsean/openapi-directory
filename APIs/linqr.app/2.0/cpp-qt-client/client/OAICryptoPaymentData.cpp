/**
 * LinQR
 * This is LinQR QR Code API documentation. This API allows you to generate custom, visually attractive QR Codes. The cloud infrastructure guarantees high availability and autoscalability of the service. You can generate hundreds of thousands of images this way and use them however you like.  We realize that your API use case may require custom solutions, and perhaps we lack functionality that is very important to you. In that case feel free to write an email to our support and tell us about it. We have repeatedly added new functions of our service directly after the requests of our users.  **General remarks:**  - maximum request size is fixed at 32MB.  - request timeout is fixed at 180 seconds.
 *
 * The version of the OpenAPI document: 2.0
 * Contact: support@linqr.app
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICryptoPaymentData.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICryptoPaymentData::OAICryptoPaymentData(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICryptoPaymentData::OAICryptoPaymentData() {
    this->initializeModel();
}

OAICryptoPaymentData::~OAICryptoPaymentData() {}

void OAICryptoPaymentData::initializeModel() {

    m_address_isSet = false;
    m_address_isValid = false;

    m_amount_isSet = false;
    m_amount_isValid = false;

    m_currency_isSet = false;
    m_currency_isValid = false;

    m_label_isSet = false;
    m_label_isValid = false;

    m_message_isSet = false;
    m_message_isValid = false;
}

void OAICryptoPaymentData::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICryptoPaymentData::fromJsonObject(QJsonObject json) {

    m_address_isValid = ::OpenAPI::fromJsonValue(m_address, json[QString("address")]);
    m_address_isSet = !json[QString("address")].isNull() && m_address_isValid;

    m_amount_isValid = ::OpenAPI::fromJsonValue(m_amount, json[QString("amount")]);
    m_amount_isSet = !json[QString("amount")].isNull() && m_amount_isValid;

    m_currency_isValid = ::OpenAPI::fromJsonValue(m_currency, json[QString("currency")]);
    m_currency_isSet = !json[QString("currency")].isNull() && m_currency_isValid;

    m_label_isValid = ::OpenAPI::fromJsonValue(m_label, json[QString("label")]);
    m_label_isSet = !json[QString("label")].isNull() && m_label_isValid;

    m_message_isValid = ::OpenAPI::fromJsonValue(m_message, json[QString("message")]);
    m_message_isSet = !json[QString("message")].isNull() && m_message_isValid;
}

QString OAICryptoPaymentData::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICryptoPaymentData::asJsonObject() const {
    QJsonObject obj;
    if (m_address_isSet) {
        obj.insert(QString("address"), ::OpenAPI::toJsonValue(m_address));
    }
    if (m_amount_isSet) {
        obj.insert(QString("amount"), ::OpenAPI::toJsonValue(m_amount));
    }
    if (m_currency.isSet()) {
        obj.insert(QString("currency"), ::OpenAPI::toJsonValue(m_currency));
    }
    if (m_label_isSet) {
        obj.insert(QString("label"), ::OpenAPI::toJsonValue(m_label));
    }
    if (m_message_isSet) {
        obj.insert(QString("message"), ::OpenAPI::toJsonValue(m_message));
    }
    return obj;
}

QString OAICryptoPaymentData::getAddress() const {
    return m_address;
}
void OAICryptoPaymentData::setAddress(const QString &address) {
    m_address = address;
    m_address_isSet = true;
}

bool OAICryptoPaymentData::is_address_Set() const{
    return m_address_isSet;
}

bool OAICryptoPaymentData::is_address_Valid() const{
    return m_address_isValid;
}

double OAICryptoPaymentData::getAmount() const {
    return m_amount;
}
void OAICryptoPaymentData::setAmount(const double &amount) {
    m_amount = amount;
    m_amount_isSet = true;
}

bool OAICryptoPaymentData::is_amount_Set() const{
    return m_amount_isSet;
}

bool OAICryptoPaymentData::is_amount_Valid() const{
    return m_amount_isValid;
}

OAICryptocurrency OAICryptoPaymentData::getCurrency() const {
    return m_currency;
}
void OAICryptoPaymentData::setCurrency(const OAICryptocurrency &currency) {
    m_currency = currency;
    m_currency_isSet = true;
}

bool OAICryptoPaymentData::is_currency_Set() const{
    return m_currency_isSet;
}

bool OAICryptoPaymentData::is_currency_Valid() const{
    return m_currency_isValid;
}

QString OAICryptoPaymentData::getLabel() const {
    return m_label;
}
void OAICryptoPaymentData::setLabel(const QString &label) {
    m_label = label;
    m_label_isSet = true;
}

bool OAICryptoPaymentData::is_label_Set() const{
    return m_label_isSet;
}

bool OAICryptoPaymentData::is_label_Valid() const{
    return m_label_isValid;
}

QString OAICryptoPaymentData::getMessage() const {
    return m_message;
}
void OAICryptoPaymentData::setMessage(const QString &message) {
    m_message = message;
    m_message_isSet = true;
}

bool OAICryptoPaymentData::is_message_Set() const{
    return m_message_isSet;
}

bool OAICryptoPaymentData::is_message_Valid() const{
    return m_message_isValid;
}

bool OAICryptoPaymentData::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_address_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_amount_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_currency.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_label_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_message_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICryptoPaymentData::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_address_isValid && m_currency_isValid && true;
}

} // namespace OpenAPI
