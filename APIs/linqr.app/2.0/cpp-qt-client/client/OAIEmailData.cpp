/**
 * LinQR
 * This is LinQR QR Code API documentation. This API allows you to generate custom, visually attractive QR Codes. The cloud infrastructure guarantees high availability and autoscalability of the service. You can generate hundreds of thousands of images this way and use them however you like.  We realize that your API use case may require custom solutions, and perhaps we lack functionality that is very important to you. In that case feel free to write an email to our support and tell us about it. We have repeatedly added new functions of our service directly after the requests of our users.  **General remarks:**  - maximum request size is fixed at 32MB.  - request timeout is fixed at 180 seconds.
 *
 * The version of the OpenAPI document: 2.0
 * Contact: support@linqr.app
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIEmailData.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIEmailData::OAIEmailData(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIEmailData::OAIEmailData() {
    this->initializeModel();
}

OAIEmailData::~OAIEmailData() {}

void OAIEmailData::initializeModel() {

    m_bcc_isSet = false;
    m_bcc_isValid = false;

    m_body_isSet = false;
    m_body_isValid = false;

    m_cc_isSet = false;
    m_cc_isValid = false;

    m_subject_isSet = false;
    m_subject_isValid = false;

    m_to_isSet = false;
    m_to_isValid = false;
}

void OAIEmailData::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIEmailData::fromJsonObject(QJsonObject json) {

    m_bcc_isValid = ::OpenAPI::fromJsonValue(m_bcc, json[QString("bcc")]);
    m_bcc_isSet = !json[QString("bcc")].isNull() && m_bcc_isValid;

    m_body_isValid = ::OpenAPI::fromJsonValue(m_body, json[QString("body")]);
    m_body_isSet = !json[QString("body")].isNull() && m_body_isValid;

    m_cc_isValid = ::OpenAPI::fromJsonValue(m_cc, json[QString("cc")]);
    m_cc_isSet = !json[QString("cc")].isNull() && m_cc_isValid;

    m_subject_isValid = ::OpenAPI::fromJsonValue(m_subject, json[QString("subject")]);
    m_subject_isSet = !json[QString("subject")].isNull() && m_subject_isValid;

    m_to_isValid = ::OpenAPI::fromJsonValue(m_to, json[QString("to")]);
    m_to_isSet = !json[QString("to")].isNull() && m_to_isValid;
}

QString OAIEmailData::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIEmailData::asJsonObject() const {
    QJsonObject obj;
    if (m_bcc.isSet()) {
        obj.insert(QString("bcc"), ::OpenAPI::toJsonValue(m_bcc));
    }
    if (m_body_isSet) {
        obj.insert(QString("body"), ::OpenAPI::toJsonValue(m_body));
    }
    if (m_cc.isSet()) {
        obj.insert(QString("cc"), ::OpenAPI::toJsonValue(m_cc));
    }
    if (m_subject_isSet) {
        obj.insert(QString("subject"), ::OpenAPI::toJsonValue(m_subject));
    }
    if (m_to.isSet()) {
        obj.insert(QString("to"), ::OpenAPI::toJsonValue(m_to));
    }
    return obj;
}

OAIBcc OAIEmailData::getBcc() const {
    return m_bcc;
}
void OAIEmailData::setBcc(const OAIBcc &bcc) {
    m_bcc = bcc;
    m_bcc_isSet = true;
}

bool OAIEmailData::is_bcc_Set() const{
    return m_bcc_isSet;
}

bool OAIEmailData::is_bcc_Valid() const{
    return m_bcc_isValid;
}

QString OAIEmailData::getBody() const {
    return m_body;
}
void OAIEmailData::setBody(const QString &body) {
    m_body = body;
    m_body_isSet = true;
}

bool OAIEmailData::is_body_Set() const{
    return m_body_isSet;
}

bool OAIEmailData::is_body_Valid() const{
    return m_body_isValid;
}

OAICc OAIEmailData::getCc() const {
    return m_cc;
}
void OAIEmailData::setCc(const OAICc &cc) {
    m_cc = cc;
    m_cc_isSet = true;
}

bool OAIEmailData::is_cc_Set() const{
    return m_cc_isSet;
}

bool OAIEmailData::is_cc_Valid() const{
    return m_cc_isValid;
}

QString OAIEmailData::getSubject() const {
    return m_subject;
}
void OAIEmailData::setSubject(const QString &subject) {
    m_subject = subject;
    m_subject_isSet = true;
}

bool OAIEmailData::is_subject_Set() const{
    return m_subject_isSet;
}

bool OAIEmailData::is_subject_Valid() const{
    return m_subject_isValid;
}

OAITo OAIEmailData::getTo() const {
    return m_to;
}
void OAIEmailData::setTo(const OAITo &to) {
    m_to = to;
    m_to_isSet = true;
}

bool OAIEmailData::is_to_Set() const{
    return m_to_isSet;
}

bool OAIEmailData::is_to_Valid() const{
    return m_to_isValid;
}

bool OAIEmailData::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_bcc.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_body_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_cc.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_subject_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_to.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIEmailData::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_to_isValid && true;
}

} // namespace OpenAPI
