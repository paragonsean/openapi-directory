/**
 * LinQR
 * This is LinQR QR Code API documentation. This API allows you to generate custom, visually attractive QR Codes. The cloud infrastructure guarantees high availability and autoscalability of the service. You can generate hundreds of thousands of images this way and use them however you like.  We realize that your API use case may require custom solutions, and perhaps we lack functionality that is very important to you. In that case feel free to write an email to our support and tell us about it. We have repeatedly added new functions of our service directly after the requests of our users.  **General remarks:**  - maximum request size is fixed at 32MB.  - request timeout is fixed at 180 seconds.
 *
 * The version of the OpenAPI document: 2.0
 * Contact: support@linqr.app
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIColor.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIColor::OAIColor(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIColor::OAIColor() {
    this->initializeModel();
}

OAIColor::~OAIColor() {}

void OAIColor::initializeModel() {

    m_angle_isSet = false;
    m_angle_isValid = false;

    m_stops_isSet = false;
    m_stops_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;
}

void OAIColor::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIColor::fromJsonObject(QJsonObject json) {

    m_angle_isValid = ::OpenAPI::fromJsonValue(m_angle, json[QString("angle")]);
    m_angle_isSet = !json[QString("angle")].isNull() && m_angle_isValid;

    m_stops_isValid = ::OpenAPI::fromJsonValue(m_stops, json[QString("stops")]);
    m_stops_isSet = !json[QString("stops")].isNull() && m_stops_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;
}

QString OAIColor::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIColor::asJsonObject() const {
    QJsonObject obj;
    if (m_angle_isSet) {
        obj.insert(QString("angle"), ::OpenAPI::toJsonValue(m_angle));
    }
    if (m_stops.size() > 0) {
        obj.insert(QString("stops"), ::OpenAPI::toJsonValue(m_stops));
    }
    if (m_type_isSet) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    return obj;
}

qint32 OAIColor::getAngle() const {
    return m_angle;
}
void OAIColor::setAngle(const qint32 &angle) {
    m_angle = angle;
    m_angle_isSet = true;
}

bool OAIColor::is_angle_Set() const{
    return m_angle_isSet;
}

bool OAIColor::is_angle_Valid() const{
    return m_angle_isValid;
}

QList<OAIGradientStop> OAIColor::getStops() const {
    return m_stops;
}
void OAIColor::setStops(const QList<OAIGradientStop> &stops) {
    m_stops = stops;
    m_stops_isSet = true;
}

bool OAIColor::is_stops_Set() const{
    return m_stops_isSet;
}

bool OAIColor::is_stops_Valid() const{
    return m_stops_isValid;
}

QString OAIColor::getType() const {
    return m_type;
}
void OAIColor::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIColor::is_type_Set() const{
    return m_type_isSet;
}

bool OAIColor::is_type_Valid() const{
    return m_type_isValid;
}

bool OAIColor::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_angle_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_stops.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIColor::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
