/**
 * LinQR
 * This is LinQR QR Code API documentation. This API allows you to generate custom, visually attractive QR Codes. The cloud infrastructure guarantees high availability and autoscalability of the service. You can generate hundreds of thousands of images this way and use them however you like.  We realize that your API use case may require custom solutions, and perhaps we lack functionality that is very important to you. In that case feel free to write an email to our support and tell us about it. We have repeatedly added new functions of our service directly after the requests of our users.  **General remarks:**  - maximum request size is fixed at 32MB.  - request timeout is fixed at 180 seconds.
 *
 * The version of the OpenAPI document: 2.0
 * Contact: support@linqr.app
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIMeCardData.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIMeCardData::OAIMeCardData(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIMeCardData::OAIMeCardData() {
    this->initializeModel();
}

OAIMeCardData::~OAIMeCardData() {}

void OAIMeCardData::initializeModel() {

    m_birthday_isSet = false;
    m_birthday_isValid = false;

    m_city_isSet = false;
    m_city_isValid = false;

    m_country_isSet = false;
    m_country_isValid = false;

    m_email_isSet = false;
    m_email_isValid = false;

    m_encoding_isSet = false;
    m_encoding_isValid = false;

    m_first_name_isSet = false;
    m_first_name_isValid = false;

    m_house_number_isSet = false;
    m_house_number_isValid = false;

    m_last_name_isSet = false;
    m_last_name_isValid = false;

    m_memo_isSet = false;
    m_memo_isValid = false;

    m_nickname_isSet = false;
    m_nickname_isValid = false;

    m_phone_isSet = false;
    m_phone_isValid = false;

    m_po_box_isSet = false;
    m_po_box_isValid = false;

    m_prefecture_isSet = false;
    m_prefecture_isValid = false;

    m_reading_isSet = false;
    m_reading_isValid = false;

    m_room_number_isSet = false;
    m_room_number_isValid = false;

    m_url_isSet = false;
    m_url_isValid = false;

    m_videophone_isSet = false;
    m_videophone_isValid = false;

    m_zip_code_isSet = false;
    m_zip_code_isValid = false;
}

void OAIMeCardData::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIMeCardData::fromJsonObject(QJsonObject json) {

    m_birthday_isValid = ::OpenAPI::fromJsonValue(m_birthday, json[QString("birthday")]);
    m_birthday_isSet = !json[QString("birthday")].isNull() && m_birthday_isValid;

    m_city_isValid = ::OpenAPI::fromJsonValue(m_city, json[QString("city")]);
    m_city_isSet = !json[QString("city")].isNull() && m_city_isValid;

    m_country_isValid = ::OpenAPI::fromJsonValue(m_country, json[QString("country")]);
    m_country_isSet = !json[QString("country")].isNull() && m_country_isValid;

    m_email_isValid = ::OpenAPI::fromJsonValue(m_email, json[QString("email")]);
    m_email_isSet = !json[QString("email")].isNull() && m_email_isValid;

    m_encoding_isValid = ::OpenAPI::fromJsonValue(m_encoding, json[QString("encoding")]);
    m_encoding_isSet = !json[QString("encoding")].isNull() && m_encoding_isValid;

    m_first_name_isValid = ::OpenAPI::fromJsonValue(m_first_name, json[QString("first_name")]);
    m_first_name_isSet = !json[QString("first_name")].isNull() && m_first_name_isValid;

    m_house_number_isValid = ::OpenAPI::fromJsonValue(m_house_number, json[QString("house_number")]);
    m_house_number_isSet = !json[QString("house_number")].isNull() && m_house_number_isValid;

    m_last_name_isValid = ::OpenAPI::fromJsonValue(m_last_name, json[QString("last_name")]);
    m_last_name_isSet = !json[QString("last_name")].isNull() && m_last_name_isValid;

    m_memo_isValid = ::OpenAPI::fromJsonValue(m_memo, json[QString("memo")]);
    m_memo_isSet = !json[QString("memo")].isNull() && m_memo_isValid;

    m_nickname_isValid = ::OpenAPI::fromJsonValue(m_nickname, json[QString("nickname")]);
    m_nickname_isSet = !json[QString("nickname")].isNull() && m_nickname_isValid;

    m_phone_isValid = ::OpenAPI::fromJsonValue(m_phone, json[QString("phone")]);
    m_phone_isSet = !json[QString("phone")].isNull() && m_phone_isValid;

    m_po_box_isValid = ::OpenAPI::fromJsonValue(m_po_box, json[QString("po_box")]);
    m_po_box_isSet = !json[QString("po_box")].isNull() && m_po_box_isValid;

    m_prefecture_isValid = ::OpenAPI::fromJsonValue(m_prefecture, json[QString("prefecture")]);
    m_prefecture_isSet = !json[QString("prefecture")].isNull() && m_prefecture_isValid;

    m_reading_isValid = ::OpenAPI::fromJsonValue(m_reading, json[QString("reading")]);
    m_reading_isSet = !json[QString("reading")].isNull() && m_reading_isValid;

    m_room_number_isValid = ::OpenAPI::fromJsonValue(m_room_number, json[QString("room_number")]);
    m_room_number_isSet = !json[QString("room_number")].isNull() && m_room_number_isValid;

    m_url_isValid = ::OpenAPI::fromJsonValue(m_url, json[QString("url")]);
    m_url_isSet = !json[QString("url")].isNull() && m_url_isValid;

    m_videophone_isValid = ::OpenAPI::fromJsonValue(m_videophone, json[QString("videophone")]);
    m_videophone_isSet = !json[QString("videophone")].isNull() && m_videophone_isValid;

    m_zip_code_isValid = ::OpenAPI::fromJsonValue(m_zip_code, json[QString("zip_code")]);
    m_zip_code_isSet = !json[QString("zip_code")].isNull() && m_zip_code_isValid;
}

QString OAIMeCardData::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIMeCardData::asJsonObject() const {
    QJsonObject obj;
    if (m_birthday_isSet) {
        obj.insert(QString("birthday"), ::OpenAPI::toJsonValue(m_birthday));
    }
    if (m_city_isSet) {
        obj.insert(QString("city"), ::OpenAPI::toJsonValue(m_city));
    }
    if (m_country_isSet) {
        obj.insert(QString("country"), ::OpenAPI::toJsonValue(m_country));
    }
    if (m_email.isSet()) {
        obj.insert(QString("email"), ::OpenAPI::toJsonValue(m_email));
    }
    if (m_encoding_isSet) {
        obj.insert(QString("encoding"), ::OpenAPI::toJsonValue(m_encoding));
    }
    if (m_first_name_isSet) {
        obj.insert(QString("first_name"), ::OpenAPI::toJsonValue(m_first_name));
    }
    if (m_house_number_isSet) {
        obj.insert(QString("house_number"), ::OpenAPI::toJsonValue(m_house_number));
    }
    if (m_last_name_isSet) {
        obj.insert(QString("last_name"), ::OpenAPI::toJsonValue(m_last_name));
    }
    if (m_memo_isSet) {
        obj.insert(QString("memo"), ::OpenAPI::toJsonValue(m_memo));
    }
    if (m_nickname_isSet) {
        obj.insert(QString("nickname"), ::OpenAPI::toJsonValue(m_nickname));
    }
    if (m_phone.isSet()) {
        obj.insert(QString("phone"), ::OpenAPI::toJsonValue(m_phone));
    }
    if (m_po_box_isSet) {
        obj.insert(QString("po_box"), ::OpenAPI::toJsonValue(m_po_box));
    }
    if (m_prefecture_isSet) {
        obj.insert(QString("prefecture"), ::OpenAPI::toJsonValue(m_prefecture));
    }
    if (m_reading_isSet) {
        obj.insert(QString("reading"), ::OpenAPI::toJsonValue(m_reading));
    }
    if (m_room_number_isSet) {
        obj.insert(QString("room_number"), ::OpenAPI::toJsonValue(m_room_number));
    }
    if (m_url.isSet()) {
        obj.insert(QString("url"), ::OpenAPI::toJsonValue(m_url));
    }
    if (m_videophone.isSet()) {
        obj.insert(QString("videophone"), ::OpenAPI::toJsonValue(m_videophone));
    }
    if (m_zip_code_isSet) {
        obj.insert(QString("zip_code"), ::OpenAPI::toJsonValue(m_zip_code));
    }
    return obj;
}

QDate OAIMeCardData::getBirthday() const {
    return m_birthday;
}
void OAIMeCardData::setBirthday(const QDate &birthday) {
    m_birthday = birthday;
    m_birthday_isSet = true;
}

bool OAIMeCardData::is_birthday_Set() const{
    return m_birthday_isSet;
}

bool OAIMeCardData::is_birthday_Valid() const{
    return m_birthday_isValid;
}

QString OAIMeCardData::getCity() const {
    return m_city;
}
void OAIMeCardData::setCity(const QString &city) {
    m_city = city;
    m_city_isSet = true;
}

bool OAIMeCardData::is_city_Set() const{
    return m_city_isSet;
}

bool OAIMeCardData::is_city_Valid() const{
    return m_city_isValid;
}

QString OAIMeCardData::getCountry() const {
    return m_country;
}
void OAIMeCardData::setCountry(const QString &country) {
    m_country = country;
    m_country_isSet = true;
}

bool OAIMeCardData::is_country_Set() const{
    return m_country_isSet;
}

bool OAIMeCardData::is_country_Valid() const{
    return m_country_isValid;
}

OAIEmail OAIMeCardData::getEmail() const {
    return m_email;
}
void OAIMeCardData::setEmail(const OAIEmail &email) {
    m_email = email;
    m_email_isSet = true;
}

bool OAIMeCardData::is_email_Set() const{
    return m_email_isSet;
}

bool OAIMeCardData::is_email_Valid() const{
    return m_email_isValid;
}

QString OAIMeCardData::getEncoding() const {
    return m_encoding;
}
void OAIMeCardData::setEncoding(const QString &encoding) {
    m_encoding = encoding;
    m_encoding_isSet = true;
}

bool OAIMeCardData::is_encoding_Set() const{
    return m_encoding_isSet;
}

bool OAIMeCardData::is_encoding_Valid() const{
    return m_encoding_isValid;
}

QString OAIMeCardData::getFirstName() const {
    return m_first_name;
}
void OAIMeCardData::setFirstName(const QString &first_name) {
    m_first_name = first_name;
    m_first_name_isSet = true;
}

bool OAIMeCardData::is_first_name_Set() const{
    return m_first_name_isSet;
}

bool OAIMeCardData::is_first_name_Valid() const{
    return m_first_name_isValid;
}

QString OAIMeCardData::getHouseNumber() const {
    return m_house_number;
}
void OAIMeCardData::setHouseNumber(const QString &house_number) {
    m_house_number = house_number;
    m_house_number_isSet = true;
}

bool OAIMeCardData::is_house_number_Set() const{
    return m_house_number_isSet;
}

bool OAIMeCardData::is_house_number_Valid() const{
    return m_house_number_isValid;
}

QString OAIMeCardData::getLastName() const {
    return m_last_name;
}
void OAIMeCardData::setLastName(const QString &last_name) {
    m_last_name = last_name;
    m_last_name_isSet = true;
}

bool OAIMeCardData::is_last_name_Set() const{
    return m_last_name_isSet;
}

bool OAIMeCardData::is_last_name_Valid() const{
    return m_last_name_isValid;
}

QString OAIMeCardData::getMemo() const {
    return m_memo;
}
void OAIMeCardData::setMemo(const QString &memo) {
    m_memo = memo;
    m_memo_isSet = true;
}

bool OAIMeCardData::is_memo_Set() const{
    return m_memo_isSet;
}

bool OAIMeCardData::is_memo_Valid() const{
    return m_memo_isValid;
}

QString OAIMeCardData::getNickname() const {
    return m_nickname;
}
void OAIMeCardData::setNickname(const QString &nickname) {
    m_nickname = nickname;
    m_nickname_isSet = true;
}

bool OAIMeCardData::is_nickname_Set() const{
    return m_nickname_isSet;
}

bool OAIMeCardData::is_nickname_Valid() const{
    return m_nickname_isValid;
}

OAIPhone OAIMeCardData::getPhone() const {
    return m_phone;
}
void OAIMeCardData::setPhone(const OAIPhone &phone) {
    m_phone = phone;
    m_phone_isSet = true;
}

bool OAIMeCardData::is_phone_Set() const{
    return m_phone_isSet;
}

bool OAIMeCardData::is_phone_Valid() const{
    return m_phone_isValid;
}

QString OAIMeCardData::getPoBox() const {
    return m_po_box;
}
void OAIMeCardData::setPoBox(const QString &po_box) {
    m_po_box = po_box;
    m_po_box_isSet = true;
}

bool OAIMeCardData::is_po_box_Set() const{
    return m_po_box_isSet;
}

bool OAIMeCardData::is_po_box_Valid() const{
    return m_po_box_isValid;
}

QString OAIMeCardData::getPrefecture() const {
    return m_prefecture;
}
void OAIMeCardData::setPrefecture(const QString &prefecture) {
    m_prefecture = prefecture;
    m_prefecture_isSet = true;
}

bool OAIMeCardData::is_prefecture_Set() const{
    return m_prefecture_isSet;
}

bool OAIMeCardData::is_prefecture_Valid() const{
    return m_prefecture_isValid;
}

QString OAIMeCardData::getReading() const {
    return m_reading;
}
void OAIMeCardData::setReading(const QString &reading) {
    m_reading = reading;
    m_reading_isSet = true;
}

bool OAIMeCardData::is_reading_Set() const{
    return m_reading_isSet;
}

bool OAIMeCardData::is_reading_Valid() const{
    return m_reading_isValid;
}

QString OAIMeCardData::getRoomNumber() const {
    return m_room_number;
}
void OAIMeCardData::setRoomNumber(const QString &room_number) {
    m_room_number = room_number;
    m_room_number_isSet = true;
}

bool OAIMeCardData::is_room_number_Set() const{
    return m_room_number_isSet;
}

bool OAIMeCardData::is_room_number_Valid() const{
    return m_room_number_isValid;
}

OAIUrl OAIMeCardData::getUrl() const {
    return m_url;
}
void OAIMeCardData::setUrl(const OAIUrl &url) {
    m_url = url;
    m_url_isSet = true;
}

bool OAIMeCardData::is_url_Set() const{
    return m_url_isSet;
}

bool OAIMeCardData::is_url_Valid() const{
    return m_url_isValid;
}

OAIVideophone OAIMeCardData::getVideophone() const {
    return m_videophone;
}
void OAIMeCardData::setVideophone(const OAIVideophone &videophone) {
    m_videophone = videophone;
    m_videophone_isSet = true;
}

bool OAIMeCardData::is_videophone_Set() const{
    return m_videophone_isSet;
}

bool OAIMeCardData::is_videophone_Valid() const{
    return m_videophone_isValid;
}

QString OAIMeCardData::getZipCode() const {
    return m_zip_code;
}
void OAIMeCardData::setZipCode(const QString &zip_code) {
    m_zip_code = zip_code;
    m_zip_code_isSet = true;
}

bool OAIMeCardData::is_zip_code_Set() const{
    return m_zip_code_isSet;
}

bool OAIMeCardData::is_zip_code_Valid() const{
    return m_zip_code_isValid;
}

bool OAIMeCardData::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_birthday_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_city_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_country_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_email.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_encoding_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_first_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_house_number_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_memo_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_nickname_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_phone.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_po_box_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_prefecture_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_reading_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_room_number_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_url.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_videophone.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_zip_code_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIMeCardData::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_last_name_isValid && true;
}

} // namespace OpenAPI
