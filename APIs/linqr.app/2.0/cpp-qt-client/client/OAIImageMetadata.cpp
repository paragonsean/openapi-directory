/**
 * LinQR
 * This is LinQR QR Code API documentation. This API allows you to generate custom, visually attractive QR Codes. The cloud infrastructure guarantees high availability and autoscalability of the service. You can generate hundreds of thousands of images this way and use them however you like.  We realize that your API use case may require custom solutions, and perhaps we lack functionality that is very important to you. In that case feel free to write an email to our support and tell us about it. We have repeatedly added new functions of our service directly after the requests of our users.  **General remarks:**  - maximum request size is fixed at 32MB.  - request timeout is fixed at 180 seconds.
 *
 * The version of the OpenAPI document: 2.0
 * Contact: support@linqr.app
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIImageMetadata.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIImageMetadata::OAIImageMetadata(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIImageMetadata::OAIImageMetadata() {
    this->initializeModel();
}

OAIImageMetadata::~OAIImageMetadata() {}

void OAIImageMetadata::initializeModel() {

    m_created_isSet = false;
    m_created_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_size_isSet = false;
    m_size_isValid = false;

    m_source_isSet = false;
    m_source_isValid = false;
}

void OAIImageMetadata::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIImageMetadata::fromJsonObject(QJsonObject json) {

    m_created_isValid = ::OpenAPI::fromJsonValue(m_created, json[QString("created")]);
    m_created_isSet = !json[QString("created")].isNull() && m_created_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_size_isValid = ::OpenAPI::fromJsonValue(m_size, json[QString("size")]);
    m_size_isSet = !json[QString("size")].isNull() && m_size_isValid;

    m_source_isValid = ::OpenAPI::fromJsonValue(m_source, json[QString("source")]);
    m_source_isSet = !json[QString("source")].isNull() && m_source_isValid;
}

QString OAIImageMetadata::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIImageMetadata::asJsonObject() const {
    QJsonObject obj;
    if (m_created_isSet) {
        obj.insert(QString("created"), ::OpenAPI::toJsonValue(m_created));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_size_isSet) {
        obj.insert(QString("size"), ::OpenAPI::toJsonValue(m_size));
    }
    if (m_source_isSet) {
        obj.insert(QString("source"), ::OpenAPI::toJsonValue(m_source));
    }
    return obj;
}

QDateTime OAIImageMetadata::getCreated() const {
    return m_created;
}
void OAIImageMetadata::setCreated(const QDateTime &created) {
    m_created = created;
    m_created_isSet = true;
}

bool OAIImageMetadata::is_created_Set() const{
    return m_created_isSet;
}

bool OAIImageMetadata::is_created_Valid() const{
    return m_created_isValid;
}

QString OAIImageMetadata::getId() const {
    return m_id;
}
void OAIImageMetadata::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIImageMetadata::is_id_Set() const{
    return m_id_isSet;
}

bool OAIImageMetadata::is_id_Valid() const{
    return m_id_isValid;
}

qint32 OAIImageMetadata::getSize() const {
    return m_size;
}
void OAIImageMetadata::setSize(const qint32 &size) {
    m_size = size;
    m_size_isSet = true;
}

bool OAIImageMetadata::is_size_Set() const{
    return m_size_isSet;
}

bool OAIImageMetadata::is_size_Valid() const{
    return m_size_isValid;
}

QString OAIImageMetadata::getSource() const {
    return m_source;
}
void OAIImageMetadata::setSource(const QString &source) {
    m_source = source;
    m_source_isSet = true;
}

bool OAIImageMetadata::is_source_Set() const{
    return m_source_isSet;
}

bool OAIImageMetadata::is_source_Valid() const{
    return m_source_isValid;
}

bool OAIImageMetadata::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_created_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_size_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_source_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIImageMetadata::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_created_isValid && m_id_isValid && m_size_isValid && m_source_isValid && true;
}

} // namespace OpenAPI
