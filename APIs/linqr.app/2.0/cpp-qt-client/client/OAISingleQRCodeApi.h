/**
 * LinQR
 * This is LinQR QR Code API documentation. This API allows you to generate custom, visually attractive QR Codes. The cloud infrastructure guarantees high availability and autoscalability of the service. You can generate hundreds of thousands of images this way and use them however you like.  We realize that your API use case may require custom solutions, and perhaps we lack functionality that is very important to you. In that case feel free to write an email to our support and tell us about it. We have repeatedly added new functions of our service directly after the requests of our users.  **General remarks:**  - maximum request size is fixed at 32MB.  - request timeout is fixed at 180 seconds.
 *
 * The version of the OpenAPI document: 2.0
 * Contact: support@linqr.app
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAISingleQRCodeApi_H
#define OAI_OAISingleQRCodeApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIAutoQRCode.h"
#include "OAIAutoQRCodeMultipartBody.h"
#include "OAIContactQRCode.h"
#include "OAIContactQRCodeMultipartBody.h"
#include "OAICryptoPaymentQRCode.h"
#include "OAICryptoPaymentQRCodeMultipartBody.h"
#include "OAIEmailQRCode.h"
#include "OAIEmailQRCodeMultipartBody.h"
#include "OAIGenericError.h"
#include "OAIGeolocationQRCode.h"
#include "OAIGeolocationQRCodeMultipartBody.h"
#include "OAIHTTPValidationError.h"
#include "OAIHttpFileElement.h"
#include "OAIPhoneQRCode.h"
#include "OAIPhoneQRCodeMultipartBody.h"
#include "OAISMSQRCode.h"
#include "OAISMSQRCodeMultipartBody.h"
#include "OAITextQRCode.h"
#include "OAITextQRCodeMultipartBody.h"
#include "OAIWiFiQRCode.h"
#include "OAIWiFiQRCodeMultipartBody.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAISingleQRCodeApi : public QObject {
    Q_OBJECT

public:
    OAISingleQRCodeApi(const int timeOut = 0);
    ~OAISingleQRCodeApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  oai_contact_qr_code OAIContactQRCode [optional]
    */
    virtual void dispatcherQrcodeContactPost(const ::OpenAPI::OptionalParam<OAIContactQRCode> &oai_contact_qr_code = ::OpenAPI::OptionalParam<OAIContactQRCode>());

    /**
    * @param[in]  oai_crypto_payment_qr_code OAICryptoPaymentQRCode [optional]
    */
    virtual void dispatcherQrcodeCryptoPost(const ::OpenAPI::OptionalParam<OAICryptoPaymentQRCode> &oai_crypto_payment_qr_code = ::OpenAPI::OptionalParam<OAICryptoPaymentQRCode>());

    /**
    * @param[in]  oai_email_qr_code OAIEmailQRCode [optional]
    */
    virtual void dispatcherQrcodeEmailPost(const ::OpenAPI::OptionalParam<OAIEmailQRCode> &oai_email_qr_code = ::OpenAPI::OptionalParam<OAIEmailQRCode>());

    /**
    * @param[in]  oai_geolocation_qr_code OAIGeolocationQRCode [optional]
    */
    virtual void dispatcherQrcodeGeoPost(const ::OpenAPI::OptionalParam<OAIGeolocationQRCode> &oai_geolocation_qr_code = ::OpenAPI::OptionalParam<OAIGeolocationQRCode>());

    /**
    * @param[in]  oai_phone_qr_code OAIPhoneQRCode [optional]
    */
    virtual void dispatcherQrcodePhonePost(const ::OpenAPI::OptionalParam<OAIPhoneQRCode> &oai_phone_qr_code = ::OpenAPI::OptionalParam<OAIPhoneQRCode>());

    /**
    * @param[in]  oai_auto_qr_code OAIAutoQRCode [optional]
    */
    virtual void dispatcherQrcodePost(const ::OpenAPI::OptionalParam<OAIAutoQRCode> &oai_auto_qr_code = ::OpenAPI::OptionalParam<OAIAutoQRCode>());

    /**
    * @param[in]  oaismsqr_code OAISMSQRCode [optional]
    */
    virtual void dispatcherQrcodeSmsPost(const ::OpenAPI::OptionalParam<OAISMSQRCode> &oaismsqr_code = ::OpenAPI::OptionalParam<OAISMSQRCode>());

    /**
    * @param[in]  oai_text_qr_code OAITextQRCode [optional]
    */
    virtual void dispatcherQrcodeTextPost(const ::OpenAPI::OptionalParam<OAITextQRCode> &oai_text_qr_code = ::OpenAPI::OptionalParam<OAITextQRCode>());

    /**
    * @param[in]  oaiwi_fi_qr_code OAIWiFiQRCode [optional]
    */
    virtual void dispatcherQrcodeWifiPost(const ::OpenAPI::OptionalParam<OAIWiFiQRCode> &oaiwi_fi_qr_code = ::OpenAPI::OptionalParam<OAIWiFiQRCode>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void dispatcherQrcodeContactPostCallback(OAIHttpRequestWorker *worker);
    void dispatcherQrcodeCryptoPostCallback(OAIHttpRequestWorker *worker);
    void dispatcherQrcodeEmailPostCallback(OAIHttpRequestWorker *worker);
    void dispatcherQrcodeGeoPostCallback(OAIHttpRequestWorker *worker);
    void dispatcherQrcodePhonePostCallback(OAIHttpRequestWorker *worker);
    void dispatcherQrcodePostCallback(OAIHttpRequestWorker *worker);
    void dispatcherQrcodeSmsPostCallback(OAIHttpRequestWorker *worker);
    void dispatcherQrcodeTextPostCallback(OAIHttpRequestWorker *worker);
    void dispatcherQrcodeWifiPostCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void dispatcherQrcodeContactPostSignal(OAIHttpFileElement summary);
    void dispatcherQrcodeCryptoPostSignal(OAIHttpFileElement summary);
    void dispatcherQrcodeEmailPostSignal(OAIHttpFileElement summary);
    void dispatcherQrcodeGeoPostSignal(OAIHttpFileElement summary);
    void dispatcherQrcodePhonePostSignal(OAIHttpFileElement summary);
    void dispatcherQrcodePostSignal(OAIHttpFileElement summary);
    void dispatcherQrcodeSmsPostSignal(OAIHttpFileElement summary);
    void dispatcherQrcodeTextPostSignal(OAIHttpFileElement summary);
    void dispatcherQrcodeWifiPostSignal(OAIHttpFileElement summary);


    void dispatcherQrcodeContactPostSignalFull(OAIHttpRequestWorker *worker, OAIHttpFileElement summary);
    void dispatcherQrcodeCryptoPostSignalFull(OAIHttpRequestWorker *worker, OAIHttpFileElement summary);
    void dispatcherQrcodeEmailPostSignalFull(OAIHttpRequestWorker *worker, OAIHttpFileElement summary);
    void dispatcherQrcodeGeoPostSignalFull(OAIHttpRequestWorker *worker, OAIHttpFileElement summary);
    void dispatcherQrcodePhonePostSignalFull(OAIHttpRequestWorker *worker, OAIHttpFileElement summary);
    void dispatcherQrcodePostSignalFull(OAIHttpRequestWorker *worker, OAIHttpFileElement summary);
    void dispatcherQrcodeSmsPostSignalFull(OAIHttpRequestWorker *worker, OAIHttpFileElement summary);
    void dispatcherQrcodeTextPostSignalFull(OAIHttpRequestWorker *worker, OAIHttpFileElement summary);
    void dispatcherQrcodeWifiPostSignalFull(OAIHttpRequestWorker *worker, OAIHttpFileElement summary);

    Q_DECL_DEPRECATED_X("Use dispatcherQrcodeContactPostSignalError() instead")
    void dispatcherQrcodeContactPostSignalE(OAIHttpFileElement summary, QNetworkReply::NetworkError error_type, QString error_str);
    void dispatcherQrcodeContactPostSignalError(OAIHttpFileElement summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dispatcherQrcodeCryptoPostSignalError() instead")
    void dispatcherQrcodeCryptoPostSignalE(OAIHttpFileElement summary, QNetworkReply::NetworkError error_type, QString error_str);
    void dispatcherQrcodeCryptoPostSignalError(OAIHttpFileElement summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dispatcherQrcodeEmailPostSignalError() instead")
    void dispatcherQrcodeEmailPostSignalE(OAIHttpFileElement summary, QNetworkReply::NetworkError error_type, QString error_str);
    void dispatcherQrcodeEmailPostSignalError(OAIHttpFileElement summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dispatcherQrcodeGeoPostSignalError() instead")
    void dispatcherQrcodeGeoPostSignalE(OAIHttpFileElement summary, QNetworkReply::NetworkError error_type, QString error_str);
    void dispatcherQrcodeGeoPostSignalError(OAIHttpFileElement summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dispatcherQrcodePhonePostSignalError() instead")
    void dispatcherQrcodePhonePostSignalE(OAIHttpFileElement summary, QNetworkReply::NetworkError error_type, QString error_str);
    void dispatcherQrcodePhonePostSignalError(OAIHttpFileElement summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dispatcherQrcodePostSignalError() instead")
    void dispatcherQrcodePostSignalE(OAIHttpFileElement summary, QNetworkReply::NetworkError error_type, QString error_str);
    void dispatcherQrcodePostSignalError(OAIHttpFileElement summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dispatcherQrcodeSmsPostSignalError() instead")
    void dispatcherQrcodeSmsPostSignalE(OAIHttpFileElement summary, QNetworkReply::NetworkError error_type, QString error_str);
    void dispatcherQrcodeSmsPostSignalError(OAIHttpFileElement summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dispatcherQrcodeTextPostSignalError() instead")
    void dispatcherQrcodeTextPostSignalE(OAIHttpFileElement summary, QNetworkReply::NetworkError error_type, QString error_str);
    void dispatcherQrcodeTextPostSignalError(OAIHttpFileElement summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dispatcherQrcodeWifiPostSignalError() instead")
    void dispatcherQrcodeWifiPostSignalE(OAIHttpFileElement summary, QNetworkReply::NetworkError error_type, QString error_str);
    void dispatcherQrcodeWifiPostSignalError(OAIHttpFileElement summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use dispatcherQrcodeContactPostSignalErrorFull() instead")
    void dispatcherQrcodeContactPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void dispatcherQrcodeContactPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dispatcherQrcodeCryptoPostSignalErrorFull() instead")
    void dispatcherQrcodeCryptoPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void dispatcherQrcodeCryptoPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dispatcherQrcodeEmailPostSignalErrorFull() instead")
    void dispatcherQrcodeEmailPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void dispatcherQrcodeEmailPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dispatcherQrcodeGeoPostSignalErrorFull() instead")
    void dispatcherQrcodeGeoPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void dispatcherQrcodeGeoPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dispatcherQrcodePhonePostSignalErrorFull() instead")
    void dispatcherQrcodePhonePostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void dispatcherQrcodePhonePostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dispatcherQrcodePostSignalErrorFull() instead")
    void dispatcherQrcodePostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void dispatcherQrcodePostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dispatcherQrcodeSmsPostSignalErrorFull() instead")
    void dispatcherQrcodeSmsPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void dispatcherQrcodeSmsPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dispatcherQrcodeTextPostSignalErrorFull() instead")
    void dispatcherQrcodeTextPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void dispatcherQrcodeTextPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dispatcherQrcodeWifiPostSignalErrorFull() instead")
    void dispatcherQrcodeWifiPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void dispatcherQrcodeWifiPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
