/**
 * LinQR
 * This is LinQR QR Code API documentation. This API allows you to generate custom, visually attractive QR Codes. The cloud infrastructure guarantees high availability and autoscalability of the service. You can generate hundreds of thousands of images this way and use them however you like.  We realize that your API use case may require custom solutions, and perhaps we lack functionality that is very important to you. In that case feel free to write an email to our support and tell us about it. We have repeatedly added new functions of our service directly after the requests of our users.  **General remarks:**  - maximum request size is fixed at 32MB.  - request timeout is fixed at 180 seconds.
 *
 * The version of the OpenAPI document: 2.0
 * Contact: support@linqr.app
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAutoData.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAutoData::OAIAutoData(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAutoData::OAIAutoData() {
    this->initializeModel();
}

OAIAutoData::~OAIAutoData() {}

void OAIAutoData::initializeModel() {

    m_hidden_isSet = false;
    m_hidden_isValid = false;

    m_password_isSet = false;
    m_password_isValid = false;

    m_security_isSet = false;
    m_security_isValid = false;

    m_ssid_isSet = false;
    m_ssid_isValid = false;

    m_bcc_isSet = false;
    m_bcc_isValid = false;

    m_body_isSet = false;
    m_body_isValid = false;

    m_cc_isSet = false;
    m_cc_isValid = false;

    m_subject_isSet = false;
    m_subject_isValid = false;

    m_to_isSet = false;
    m_to_isValid = false;

    m_birthday_isSet = false;
    m_birthday_isValid = false;

    m_cell_phone_isSet = false;
    m_cell_phone_isValid = false;

    m_city_isSet = false;
    m_city_isValid = false;

    m_country_isSet = false;
    m_country_isValid = false;

    m_display_name_isSet = false;
    m_display_name_isValid = false;

    m_email_isSet = false;
    m_email_isValid = false;

    m_encoding_isSet = false;
    m_encoding_isValid = false;

    m_fax_isSet = false;
    m_fax_isValid = false;

    m_first_name_isSet = false;
    m_first_name_isValid = false;

    m_home_phone_isSet = false;
    m_home_phone_isValid = false;

    m_last_name_isSet = false;
    m_last_name_isValid = false;

    m_latitude_isSet = false;
    m_latitude_isValid = false;

    m_longitude_isSet = false;
    m_longitude_isValid = false;

    m_memo_isSet = false;
    m_memo_isValid = false;

    m_nickname_isSet = false;
    m_nickname_isValid = false;

    m_organization_isSet = false;
    m_organization_isValid = false;

    m_phone_isSet = false;
    m_phone_isValid = false;

    m_photo_isSet = false;
    m_photo_isValid = false;

    m_po_box_isSet = false;
    m_po_box_isValid = false;

    m_region_isSet = false;
    m_region_isValid = false;

    m_revision_isSet = false;
    m_revision_isValid = false;

    m_source_isSet = false;
    m_source_isValid = false;

    m_street_isSet = false;
    m_street_isValid = false;

    m_title_isSet = false;
    m_title_isValid = false;

    m_url_isSet = false;
    m_url_isValid = false;

    m_videophone_isSet = false;
    m_videophone_isValid = false;

    m_work_phone_isSet = false;
    m_work_phone_isValid = false;

    m_zip_code_isSet = false;
    m_zip_code_isValid = false;

    m_house_number_isSet = false;
    m_house_number_isValid = false;

    m_prefecture_isSet = false;
    m_prefecture_isValid = false;

    m_reading_isSet = false;
    m_reading_isValid = false;

    m_room_number_isSet = false;
    m_room_number_isValid = false;

    m_address_isSet = false;
    m_address_isValid = false;

    m_amount_isSet = false;
    m_amount_isValid = false;

    m_currency_isSet = false;
    m_currency_isValid = false;

    m_label_isSet = false;
    m_label_isValid = false;

    m_message_isSet = false;
    m_message_isValid = false;

    m_format_isSet = false;
    m_format_isValid = false;
}

void OAIAutoData::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAutoData::fromJsonObject(QJsonObject json) {

    m_hidden_isValid = ::OpenAPI::fromJsonValue(m_hidden, json[QString("hidden")]);
    m_hidden_isSet = !json[QString("hidden")].isNull() && m_hidden_isValid;

    m_password_isValid = ::OpenAPI::fromJsonValue(m_password, json[QString("password")]);
    m_password_isSet = !json[QString("password")].isNull() && m_password_isValid;

    m_security_isValid = ::OpenAPI::fromJsonValue(m_security, json[QString("security")]);
    m_security_isSet = !json[QString("security")].isNull() && m_security_isValid;

    m_ssid_isValid = ::OpenAPI::fromJsonValue(m_ssid, json[QString("ssid")]);
    m_ssid_isSet = !json[QString("ssid")].isNull() && m_ssid_isValid;

    m_bcc_isValid = ::OpenAPI::fromJsonValue(m_bcc, json[QString("bcc")]);
    m_bcc_isSet = !json[QString("bcc")].isNull() && m_bcc_isValid;

    m_body_isValid = ::OpenAPI::fromJsonValue(m_body, json[QString("body")]);
    m_body_isSet = !json[QString("body")].isNull() && m_body_isValid;

    m_cc_isValid = ::OpenAPI::fromJsonValue(m_cc, json[QString("cc")]);
    m_cc_isSet = !json[QString("cc")].isNull() && m_cc_isValid;

    m_subject_isValid = ::OpenAPI::fromJsonValue(m_subject, json[QString("subject")]);
    m_subject_isSet = !json[QString("subject")].isNull() && m_subject_isValid;

    m_to_isValid = ::OpenAPI::fromJsonValue(m_to, json[QString("to")]);
    m_to_isSet = !json[QString("to")].isNull() && m_to_isValid;

    m_birthday_isValid = ::OpenAPI::fromJsonValue(m_birthday, json[QString("birthday")]);
    m_birthday_isSet = !json[QString("birthday")].isNull() && m_birthday_isValid;

    m_cell_phone_isValid = ::OpenAPI::fromJsonValue(m_cell_phone, json[QString("cell_phone")]);
    m_cell_phone_isSet = !json[QString("cell_phone")].isNull() && m_cell_phone_isValid;

    m_city_isValid = ::OpenAPI::fromJsonValue(m_city, json[QString("city")]);
    m_city_isSet = !json[QString("city")].isNull() && m_city_isValid;

    m_country_isValid = ::OpenAPI::fromJsonValue(m_country, json[QString("country")]);
    m_country_isSet = !json[QString("country")].isNull() && m_country_isValid;

    m_display_name_isValid = ::OpenAPI::fromJsonValue(m_display_name, json[QString("display_name")]);
    m_display_name_isSet = !json[QString("display_name")].isNull() && m_display_name_isValid;

    m_email_isValid = ::OpenAPI::fromJsonValue(m_email, json[QString("email")]);
    m_email_isSet = !json[QString("email")].isNull() && m_email_isValid;

    m_encoding_isValid = ::OpenAPI::fromJsonValue(m_encoding, json[QString("encoding")]);
    m_encoding_isSet = !json[QString("encoding")].isNull() && m_encoding_isValid;

    m_fax_isValid = ::OpenAPI::fromJsonValue(m_fax, json[QString("fax")]);
    m_fax_isSet = !json[QString("fax")].isNull() && m_fax_isValid;

    m_first_name_isValid = ::OpenAPI::fromJsonValue(m_first_name, json[QString("first_name")]);
    m_first_name_isSet = !json[QString("first_name")].isNull() && m_first_name_isValid;

    m_home_phone_isValid = ::OpenAPI::fromJsonValue(m_home_phone, json[QString("home_phone")]);
    m_home_phone_isSet = !json[QString("home_phone")].isNull() && m_home_phone_isValid;

    m_last_name_isValid = ::OpenAPI::fromJsonValue(m_last_name, json[QString("last_name")]);
    m_last_name_isSet = !json[QString("last_name")].isNull() && m_last_name_isValid;

    m_latitude_isValid = ::OpenAPI::fromJsonValue(m_latitude, json[QString("latitude")]);
    m_latitude_isSet = !json[QString("latitude")].isNull() && m_latitude_isValid;

    m_longitude_isValid = ::OpenAPI::fromJsonValue(m_longitude, json[QString("longitude")]);
    m_longitude_isSet = !json[QString("longitude")].isNull() && m_longitude_isValid;

    m_memo_isValid = ::OpenAPI::fromJsonValue(m_memo, json[QString("memo")]);
    m_memo_isSet = !json[QString("memo")].isNull() && m_memo_isValid;

    m_nickname_isValid = ::OpenAPI::fromJsonValue(m_nickname, json[QString("nickname")]);
    m_nickname_isSet = !json[QString("nickname")].isNull() && m_nickname_isValid;

    m_organization_isValid = ::OpenAPI::fromJsonValue(m_organization, json[QString("organization")]);
    m_organization_isSet = !json[QString("organization")].isNull() && m_organization_isValid;

    m_phone_isValid = ::OpenAPI::fromJsonValue(m_phone, json[QString("phone")]);
    m_phone_isSet = !json[QString("phone")].isNull() && m_phone_isValid;

    m_photo_isValid = ::OpenAPI::fromJsonValue(m_photo, json[QString("photo")]);
    m_photo_isSet = !json[QString("photo")].isNull() && m_photo_isValid;

    m_po_box_isValid = ::OpenAPI::fromJsonValue(m_po_box, json[QString("po_box")]);
    m_po_box_isSet = !json[QString("po_box")].isNull() && m_po_box_isValid;

    m_region_isValid = ::OpenAPI::fromJsonValue(m_region, json[QString("region")]);
    m_region_isSet = !json[QString("region")].isNull() && m_region_isValid;

    m_revision_isValid = ::OpenAPI::fromJsonValue(m_revision, json[QString("revision")]);
    m_revision_isSet = !json[QString("revision")].isNull() && m_revision_isValid;

    m_source_isValid = ::OpenAPI::fromJsonValue(m_source, json[QString("source")]);
    m_source_isSet = !json[QString("source")].isNull() && m_source_isValid;

    m_street_isValid = ::OpenAPI::fromJsonValue(m_street, json[QString("street")]);
    m_street_isSet = !json[QString("street")].isNull() && m_street_isValid;

    m_title_isValid = ::OpenAPI::fromJsonValue(m_title, json[QString("title")]);
    m_title_isSet = !json[QString("title")].isNull() && m_title_isValid;

    m_url_isValid = ::OpenAPI::fromJsonValue(m_url, json[QString("url")]);
    m_url_isSet = !json[QString("url")].isNull() && m_url_isValid;

    m_videophone_isValid = ::OpenAPI::fromJsonValue(m_videophone, json[QString("videophone")]);
    m_videophone_isSet = !json[QString("videophone")].isNull() && m_videophone_isValid;

    m_work_phone_isValid = ::OpenAPI::fromJsonValue(m_work_phone, json[QString("work_phone")]);
    m_work_phone_isSet = !json[QString("work_phone")].isNull() && m_work_phone_isValid;

    m_zip_code_isValid = ::OpenAPI::fromJsonValue(m_zip_code, json[QString("zip_code")]);
    m_zip_code_isSet = !json[QString("zip_code")].isNull() && m_zip_code_isValid;

    m_house_number_isValid = ::OpenAPI::fromJsonValue(m_house_number, json[QString("house_number")]);
    m_house_number_isSet = !json[QString("house_number")].isNull() && m_house_number_isValid;

    m_prefecture_isValid = ::OpenAPI::fromJsonValue(m_prefecture, json[QString("prefecture")]);
    m_prefecture_isSet = !json[QString("prefecture")].isNull() && m_prefecture_isValid;

    m_reading_isValid = ::OpenAPI::fromJsonValue(m_reading, json[QString("reading")]);
    m_reading_isSet = !json[QString("reading")].isNull() && m_reading_isValid;

    m_room_number_isValid = ::OpenAPI::fromJsonValue(m_room_number, json[QString("room_number")]);
    m_room_number_isSet = !json[QString("room_number")].isNull() && m_room_number_isValid;

    m_address_isValid = ::OpenAPI::fromJsonValue(m_address, json[QString("address")]);
    m_address_isSet = !json[QString("address")].isNull() && m_address_isValid;

    m_amount_isValid = ::OpenAPI::fromJsonValue(m_amount, json[QString("amount")]);
    m_amount_isSet = !json[QString("amount")].isNull() && m_amount_isValid;

    m_currency_isValid = ::OpenAPI::fromJsonValue(m_currency, json[QString("currency")]);
    m_currency_isSet = !json[QString("currency")].isNull() && m_currency_isValid;

    m_label_isValid = ::OpenAPI::fromJsonValue(m_label, json[QString("label")]);
    m_label_isSet = !json[QString("label")].isNull() && m_label_isValid;

    m_message_isValid = ::OpenAPI::fromJsonValue(m_message, json[QString("message")]);
    m_message_isSet = !json[QString("message")].isNull() && m_message_isValid;

    m_format_isValid = ::OpenAPI::fromJsonValue(m_format, json[QString("format")]);
    m_format_isSet = !json[QString("format")].isNull() && m_format_isValid;
}

QString OAIAutoData::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAutoData::asJsonObject() const {
    QJsonObject obj;
    if (m_hidden_isSet) {
        obj.insert(QString("hidden"), ::OpenAPI::toJsonValue(m_hidden));
    }
    if (m_password_isSet) {
        obj.insert(QString("password"), ::OpenAPI::toJsonValue(m_password));
    }
    if (m_security.isSet()) {
        obj.insert(QString("security"), ::OpenAPI::toJsonValue(m_security));
    }
    if (m_ssid_isSet) {
        obj.insert(QString("ssid"), ::OpenAPI::toJsonValue(m_ssid));
    }
    if (m_bcc.isSet()) {
        obj.insert(QString("bcc"), ::OpenAPI::toJsonValue(m_bcc));
    }
    if (m_body_isSet) {
        obj.insert(QString("body"), ::OpenAPI::toJsonValue(m_body));
    }
    if (m_cc.isSet()) {
        obj.insert(QString("cc"), ::OpenAPI::toJsonValue(m_cc));
    }
    if (m_subject_isSet) {
        obj.insert(QString("subject"), ::OpenAPI::toJsonValue(m_subject));
    }
    if (m_to.isSet()) {
        obj.insert(QString("to"), ::OpenAPI::toJsonValue(m_to));
    }
    if (m_birthday_isSet) {
        obj.insert(QString("birthday"), ::OpenAPI::toJsonValue(m_birthday));
    }
    if (m_cell_phone.isSet()) {
        obj.insert(QString("cell_phone"), ::OpenAPI::toJsonValue(m_cell_phone));
    }
    if (m_city_isSet) {
        obj.insert(QString("city"), ::OpenAPI::toJsonValue(m_city));
    }
    if (m_country_isSet) {
        obj.insert(QString("country"), ::OpenAPI::toJsonValue(m_country));
    }
    if (m_display_name_isSet) {
        obj.insert(QString("display_name"), ::OpenAPI::toJsonValue(m_display_name));
    }
    if (m_email.isSet()) {
        obj.insert(QString("email"), ::OpenAPI::toJsonValue(m_email));
    }
    if (m_encoding_isSet) {
        obj.insert(QString("encoding"), ::OpenAPI::toJsonValue(m_encoding));
    }
    if (m_fax.isSet()) {
        obj.insert(QString("fax"), ::OpenAPI::toJsonValue(m_fax));
    }
    if (m_first_name_isSet) {
        obj.insert(QString("first_name"), ::OpenAPI::toJsonValue(m_first_name));
    }
    if (m_home_phone.isSet()) {
        obj.insert(QString("home_phone"), ::OpenAPI::toJsonValue(m_home_phone));
    }
    if (m_last_name_isSet) {
        obj.insert(QString("last_name"), ::OpenAPI::toJsonValue(m_last_name));
    }
    if (m_latitude_isSet) {
        obj.insert(QString("latitude"), ::OpenAPI::toJsonValue(m_latitude));
    }
    if (m_longitude_isSet) {
        obj.insert(QString("longitude"), ::OpenAPI::toJsonValue(m_longitude));
    }
    if (m_memo_isSet) {
        obj.insert(QString("memo"), ::OpenAPI::toJsonValue(m_memo));
    }
    if (m_nickname_isSet) {
        obj.insert(QString("nickname"), ::OpenAPI::toJsonValue(m_nickname));
    }
    if (m_organization_isSet) {
        obj.insert(QString("organization"), ::OpenAPI::toJsonValue(m_organization));
    }
    if (m_phone_isSet) {
        obj.insert(QString("phone"), ::OpenAPI::toJsonValue(m_phone));
    }
    if (m_photo.isSet()) {
        obj.insert(QString("photo"), ::OpenAPI::toJsonValue(m_photo));
    }
    if (m_po_box_isSet) {
        obj.insert(QString("po_box"), ::OpenAPI::toJsonValue(m_po_box));
    }
    if (m_region_isSet) {
        obj.insert(QString("region"), ::OpenAPI::toJsonValue(m_region));
    }
    if (m_revision_isSet) {
        obj.insert(QString("revision"), ::OpenAPI::toJsonValue(m_revision));
    }
    if (m_source_isSet) {
        obj.insert(QString("source"), ::OpenAPI::toJsonValue(m_source));
    }
    if (m_street_isSet) {
        obj.insert(QString("street"), ::OpenAPI::toJsonValue(m_street));
    }
    if (m_title.isSet()) {
        obj.insert(QString("title"), ::OpenAPI::toJsonValue(m_title));
    }
    if (m_url.isSet()) {
        obj.insert(QString("url"), ::OpenAPI::toJsonValue(m_url));
    }
    if (m_videophone.isSet()) {
        obj.insert(QString("videophone"), ::OpenAPI::toJsonValue(m_videophone));
    }
    if (m_work_phone.isSet()) {
        obj.insert(QString("work_phone"), ::OpenAPI::toJsonValue(m_work_phone));
    }
    if (m_zip_code_isSet) {
        obj.insert(QString("zip_code"), ::OpenAPI::toJsonValue(m_zip_code));
    }
    if (m_house_number_isSet) {
        obj.insert(QString("house_number"), ::OpenAPI::toJsonValue(m_house_number));
    }
    if (m_prefecture_isSet) {
        obj.insert(QString("prefecture"), ::OpenAPI::toJsonValue(m_prefecture));
    }
    if (m_reading_isSet) {
        obj.insert(QString("reading"), ::OpenAPI::toJsonValue(m_reading));
    }
    if (m_room_number_isSet) {
        obj.insert(QString("room_number"), ::OpenAPI::toJsonValue(m_room_number));
    }
    if (m_address_isSet) {
        obj.insert(QString("address"), ::OpenAPI::toJsonValue(m_address));
    }
    if (m_amount_isSet) {
        obj.insert(QString("amount"), ::OpenAPI::toJsonValue(m_amount));
    }
    if (m_currency.isSet()) {
        obj.insert(QString("currency"), ::OpenAPI::toJsonValue(m_currency));
    }
    if (m_label_isSet) {
        obj.insert(QString("label"), ::OpenAPI::toJsonValue(m_label));
    }
    if (m_message_isSet) {
        obj.insert(QString("message"), ::OpenAPI::toJsonValue(m_message));
    }
    if (m_format.isSet()) {
        obj.insert(QString("format"), ::OpenAPI::toJsonValue(m_format));
    }
    return obj;
}

bool OAIAutoData::isHidden() const {
    return m_hidden;
}
void OAIAutoData::setHidden(const bool &hidden) {
    m_hidden = hidden;
    m_hidden_isSet = true;
}

bool OAIAutoData::is_hidden_Set() const{
    return m_hidden_isSet;
}

bool OAIAutoData::is_hidden_Valid() const{
    return m_hidden_isValid;
}

QString OAIAutoData::getPassword() const {
    return m_password;
}
void OAIAutoData::setPassword(const QString &password) {
    m_password = password;
    m_password_isSet = true;
}

bool OAIAutoData::is_password_Set() const{
    return m_password_isSet;
}

bool OAIAutoData::is_password_Valid() const{
    return m_password_isValid;
}

OAIWiFiSecurity OAIAutoData::getSecurity() const {
    return m_security;
}
void OAIAutoData::setSecurity(const OAIWiFiSecurity &security) {
    m_security = security;
    m_security_isSet = true;
}

bool OAIAutoData::is_security_Set() const{
    return m_security_isSet;
}

bool OAIAutoData::is_security_Valid() const{
    return m_security_isValid;
}

QString OAIAutoData::getSsid() const {
    return m_ssid;
}
void OAIAutoData::setSsid(const QString &ssid) {
    m_ssid = ssid;
    m_ssid_isSet = true;
}

bool OAIAutoData::is_ssid_Set() const{
    return m_ssid_isSet;
}

bool OAIAutoData::is_ssid_Valid() const{
    return m_ssid_isValid;
}

OAIBcc OAIAutoData::getBcc() const {
    return m_bcc;
}
void OAIAutoData::setBcc(const OAIBcc &bcc) {
    m_bcc = bcc;
    m_bcc_isSet = true;
}

bool OAIAutoData::is_bcc_Set() const{
    return m_bcc_isSet;
}

bool OAIAutoData::is_bcc_Valid() const{
    return m_bcc_isValid;
}

QString OAIAutoData::getBody() const {
    return m_body;
}
void OAIAutoData::setBody(const QString &body) {
    m_body = body;
    m_body_isSet = true;
}

bool OAIAutoData::is_body_Set() const{
    return m_body_isSet;
}

bool OAIAutoData::is_body_Valid() const{
    return m_body_isValid;
}

OAICc OAIAutoData::getCc() const {
    return m_cc;
}
void OAIAutoData::setCc(const OAICc &cc) {
    m_cc = cc;
    m_cc_isSet = true;
}

bool OAIAutoData::is_cc_Set() const{
    return m_cc_isSet;
}

bool OAIAutoData::is_cc_Valid() const{
    return m_cc_isValid;
}

QString OAIAutoData::getSubject() const {
    return m_subject;
}
void OAIAutoData::setSubject(const QString &subject) {
    m_subject = subject;
    m_subject_isSet = true;
}

bool OAIAutoData::is_subject_Set() const{
    return m_subject_isSet;
}

bool OAIAutoData::is_subject_Valid() const{
    return m_subject_isValid;
}

OAITo_1 OAIAutoData::getTo() const {
    return m_to;
}
void OAIAutoData::setTo(const OAITo_1 &to) {
    m_to = to;
    m_to_isSet = true;
}

bool OAIAutoData::is_to_Set() const{
    return m_to_isSet;
}

bool OAIAutoData::is_to_Valid() const{
    return m_to_isValid;
}

QDate OAIAutoData::getBirthday() const {
    return m_birthday;
}
void OAIAutoData::setBirthday(const QDate &birthday) {
    m_birthday = birthday;
    m_birthday_isSet = true;
}

bool OAIAutoData::is_birthday_Set() const{
    return m_birthday_isSet;
}

bool OAIAutoData::is_birthday_Valid() const{
    return m_birthday_isValid;
}

OAICell_Phone OAIAutoData::getCellPhone() const {
    return m_cell_phone;
}
void OAIAutoData::setCellPhone(const OAICell_Phone &cell_phone) {
    m_cell_phone = cell_phone;
    m_cell_phone_isSet = true;
}

bool OAIAutoData::is_cell_phone_Set() const{
    return m_cell_phone_isSet;
}

bool OAIAutoData::is_cell_phone_Valid() const{
    return m_cell_phone_isValid;
}

QString OAIAutoData::getCity() const {
    return m_city;
}
void OAIAutoData::setCity(const QString &city) {
    m_city = city;
    m_city_isSet = true;
}

bool OAIAutoData::is_city_Set() const{
    return m_city_isSet;
}

bool OAIAutoData::is_city_Valid() const{
    return m_city_isValid;
}

QString OAIAutoData::getCountry() const {
    return m_country;
}
void OAIAutoData::setCountry(const QString &country) {
    m_country = country;
    m_country_isSet = true;
}

bool OAIAutoData::is_country_Set() const{
    return m_country_isSet;
}

bool OAIAutoData::is_country_Valid() const{
    return m_country_isValid;
}

QString OAIAutoData::getDisplayName() const {
    return m_display_name;
}
void OAIAutoData::setDisplayName(const QString &display_name) {
    m_display_name = display_name;
    m_display_name_isSet = true;
}

bool OAIAutoData::is_display_name_Set() const{
    return m_display_name_isSet;
}

bool OAIAutoData::is_display_name_Valid() const{
    return m_display_name_isValid;
}

OAIEmail OAIAutoData::getEmail() const {
    return m_email;
}
void OAIAutoData::setEmail(const OAIEmail &email) {
    m_email = email;
    m_email_isSet = true;
}

bool OAIAutoData::is_email_Set() const{
    return m_email_isSet;
}

bool OAIAutoData::is_email_Valid() const{
    return m_email_isValid;
}

QString OAIAutoData::getEncoding() const {
    return m_encoding;
}
void OAIAutoData::setEncoding(const QString &encoding) {
    m_encoding = encoding;
    m_encoding_isSet = true;
}

bool OAIAutoData::is_encoding_Set() const{
    return m_encoding_isSet;
}

bool OAIAutoData::is_encoding_Valid() const{
    return m_encoding_isValid;
}

OAIFax OAIAutoData::getFax() const {
    return m_fax;
}
void OAIAutoData::setFax(const OAIFax &fax) {
    m_fax = fax;
    m_fax_isSet = true;
}

bool OAIAutoData::is_fax_Set() const{
    return m_fax_isSet;
}

bool OAIAutoData::is_fax_Valid() const{
    return m_fax_isValid;
}

QString OAIAutoData::getFirstName() const {
    return m_first_name;
}
void OAIAutoData::setFirstName(const QString &first_name) {
    m_first_name = first_name;
    m_first_name_isSet = true;
}

bool OAIAutoData::is_first_name_Set() const{
    return m_first_name_isSet;
}

bool OAIAutoData::is_first_name_Valid() const{
    return m_first_name_isValid;
}

OAIHome_Phone OAIAutoData::getHomePhone() const {
    return m_home_phone;
}
void OAIAutoData::setHomePhone(const OAIHome_Phone &home_phone) {
    m_home_phone = home_phone;
    m_home_phone_isSet = true;
}

bool OAIAutoData::is_home_phone_Set() const{
    return m_home_phone_isSet;
}

bool OAIAutoData::is_home_phone_Valid() const{
    return m_home_phone_isValid;
}

QString OAIAutoData::getLastName() const {
    return m_last_name;
}
void OAIAutoData::setLastName(const QString &last_name) {
    m_last_name = last_name;
    m_last_name_isSet = true;
}

bool OAIAutoData::is_last_name_Set() const{
    return m_last_name_isSet;
}

bool OAIAutoData::is_last_name_Valid() const{
    return m_last_name_isValid;
}

double OAIAutoData::getLatitude() const {
    return m_latitude;
}
void OAIAutoData::setLatitude(const double &latitude) {
    m_latitude = latitude;
    m_latitude_isSet = true;
}

bool OAIAutoData::is_latitude_Set() const{
    return m_latitude_isSet;
}

bool OAIAutoData::is_latitude_Valid() const{
    return m_latitude_isValid;
}

double OAIAutoData::getLongitude() const {
    return m_longitude;
}
void OAIAutoData::setLongitude(const double &longitude) {
    m_longitude = longitude;
    m_longitude_isSet = true;
}

bool OAIAutoData::is_longitude_Set() const{
    return m_longitude_isSet;
}

bool OAIAutoData::is_longitude_Valid() const{
    return m_longitude_isValid;
}

QString OAIAutoData::getMemo() const {
    return m_memo;
}
void OAIAutoData::setMemo(const QString &memo) {
    m_memo = memo;
    m_memo_isSet = true;
}

bool OAIAutoData::is_memo_Set() const{
    return m_memo_isSet;
}

bool OAIAutoData::is_memo_Valid() const{
    return m_memo_isValid;
}

QString OAIAutoData::getNickname() const {
    return m_nickname;
}
void OAIAutoData::setNickname(const QString &nickname) {
    m_nickname = nickname;
    m_nickname_isSet = true;
}

bool OAIAutoData::is_nickname_Set() const{
    return m_nickname_isSet;
}

bool OAIAutoData::is_nickname_Valid() const{
    return m_nickname_isValid;
}

QString OAIAutoData::getOrganization() const {
    return m_organization;
}
void OAIAutoData::setOrganization(const QString &organization) {
    m_organization = organization;
    m_organization_isSet = true;
}

bool OAIAutoData::is_organization_Set() const{
    return m_organization_isSet;
}

bool OAIAutoData::is_organization_Valid() const{
    return m_organization_isValid;
}

QString OAIAutoData::getPhone() const {
    return m_phone;
}
void OAIAutoData::setPhone(const QString &phone) {
    m_phone = phone;
    m_phone_isSet = true;
}

bool OAIAutoData::is_phone_Set() const{
    return m_phone_isSet;
}

bool OAIAutoData::is_phone_Valid() const{
    return m_phone_isValid;
}

OAIPhoto OAIAutoData::getPhoto() const {
    return m_photo;
}
void OAIAutoData::setPhoto(const OAIPhoto &photo) {
    m_photo = photo;
    m_photo_isSet = true;
}

bool OAIAutoData::is_photo_Set() const{
    return m_photo_isSet;
}

bool OAIAutoData::is_photo_Valid() const{
    return m_photo_isValid;
}

QString OAIAutoData::getPoBox() const {
    return m_po_box;
}
void OAIAutoData::setPoBox(const QString &po_box) {
    m_po_box = po_box;
    m_po_box_isSet = true;
}

bool OAIAutoData::is_po_box_Set() const{
    return m_po_box_isSet;
}

bool OAIAutoData::is_po_box_Valid() const{
    return m_po_box_isValid;
}

QString OAIAutoData::getRegion() const {
    return m_region;
}
void OAIAutoData::setRegion(const QString &region) {
    m_region = region;
    m_region_isSet = true;
}

bool OAIAutoData::is_region_Set() const{
    return m_region_isSet;
}

bool OAIAutoData::is_region_Valid() const{
    return m_region_isValid;
}

QDate OAIAutoData::getRevision() const {
    return m_revision;
}
void OAIAutoData::setRevision(const QDate &revision) {
    m_revision = revision;
    m_revision_isSet = true;
}

bool OAIAutoData::is_revision_Set() const{
    return m_revision_isSet;
}

bool OAIAutoData::is_revision_Valid() const{
    return m_revision_isValid;
}

QString OAIAutoData::getSource() const {
    return m_source;
}
void OAIAutoData::setSource(const QString &source) {
    m_source = source;
    m_source_isSet = true;
}

bool OAIAutoData::is_source_Set() const{
    return m_source_isSet;
}

bool OAIAutoData::is_source_Valid() const{
    return m_source_isValid;
}

QString OAIAutoData::getStreet() const {
    return m_street;
}
void OAIAutoData::setStreet(const QString &street) {
    m_street = street;
    m_street_isSet = true;
}

bool OAIAutoData::is_street_Set() const{
    return m_street_isSet;
}

bool OAIAutoData::is_street_Valid() const{
    return m_street_isValid;
}

OAITitle OAIAutoData::getTitle() const {
    return m_title;
}
void OAIAutoData::setTitle(const OAITitle &title) {
    m_title = title;
    m_title_isSet = true;
}

bool OAIAutoData::is_title_Set() const{
    return m_title_isSet;
}

bool OAIAutoData::is_title_Valid() const{
    return m_title_isValid;
}

OAIUrl OAIAutoData::getUrl() const {
    return m_url;
}
void OAIAutoData::setUrl(const OAIUrl &url) {
    m_url = url;
    m_url_isSet = true;
}

bool OAIAutoData::is_url_Set() const{
    return m_url_isSet;
}

bool OAIAutoData::is_url_Valid() const{
    return m_url_isValid;
}

OAIVideophone OAIAutoData::getVideophone() const {
    return m_videophone;
}
void OAIAutoData::setVideophone(const OAIVideophone &videophone) {
    m_videophone = videophone;
    m_videophone_isSet = true;
}

bool OAIAutoData::is_videophone_Set() const{
    return m_videophone_isSet;
}

bool OAIAutoData::is_videophone_Valid() const{
    return m_videophone_isValid;
}

OAIWork_Phone OAIAutoData::getWorkPhone() const {
    return m_work_phone;
}
void OAIAutoData::setWorkPhone(const OAIWork_Phone &work_phone) {
    m_work_phone = work_phone;
    m_work_phone_isSet = true;
}

bool OAIAutoData::is_work_phone_Set() const{
    return m_work_phone_isSet;
}

bool OAIAutoData::is_work_phone_Valid() const{
    return m_work_phone_isValid;
}

QString OAIAutoData::getZipCode() const {
    return m_zip_code;
}
void OAIAutoData::setZipCode(const QString &zip_code) {
    m_zip_code = zip_code;
    m_zip_code_isSet = true;
}

bool OAIAutoData::is_zip_code_Set() const{
    return m_zip_code_isSet;
}

bool OAIAutoData::is_zip_code_Valid() const{
    return m_zip_code_isValid;
}

QString OAIAutoData::getHouseNumber() const {
    return m_house_number;
}
void OAIAutoData::setHouseNumber(const QString &house_number) {
    m_house_number = house_number;
    m_house_number_isSet = true;
}

bool OAIAutoData::is_house_number_Set() const{
    return m_house_number_isSet;
}

bool OAIAutoData::is_house_number_Valid() const{
    return m_house_number_isValid;
}

QString OAIAutoData::getPrefecture() const {
    return m_prefecture;
}
void OAIAutoData::setPrefecture(const QString &prefecture) {
    m_prefecture = prefecture;
    m_prefecture_isSet = true;
}

bool OAIAutoData::is_prefecture_Set() const{
    return m_prefecture_isSet;
}

bool OAIAutoData::is_prefecture_Valid() const{
    return m_prefecture_isValid;
}

QString OAIAutoData::getReading() const {
    return m_reading;
}
void OAIAutoData::setReading(const QString &reading) {
    m_reading = reading;
    m_reading_isSet = true;
}

bool OAIAutoData::is_reading_Set() const{
    return m_reading_isSet;
}

bool OAIAutoData::is_reading_Valid() const{
    return m_reading_isValid;
}

QString OAIAutoData::getRoomNumber() const {
    return m_room_number;
}
void OAIAutoData::setRoomNumber(const QString &room_number) {
    m_room_number = room_number;
    m_room_number_isSet = true;
}

bool OAIAutoData::is_room_number_Set() const{
    return m_room_number_isSet;
}

bool OAIAutoData::is_room_number_Valid() const{
    return m_room_number_isValid;
}

QString OAIAutoData::getAddress() const {
    return m_address;
}
void OAIAutoData::setAddress(const QString &address) {
    m_address = address;
    m_address_isSet = true;
}

bool OAIAutoData::is_address_Set() const{
    return m_address_isSet;
}

bool OAIAutoData::is_address_Valid() const{
    return m_address_isValid;
}

double OAIAutoData::getAmount() const {
    return m_amount;
}
void OAIAutoData::setAmount(const double &amount) {
    m_amount = amount;
    m_amount_isSet = true;
}

bool OAIAutoData::is_amount_Set() const{
    return m_amount_isSet;
}

bool OAIAutoData::is_amount_Valid() const{
    return m_amount_isValid;
}

OAICryptocurrency OAIAutoData::getCurrency() const {
    return m_currency;
}
void OAIAutoData::setCurrency(const OAICryptocurrency &currency) {
    m_currency = currency;
    m_currency_isSet = true;
}

bool OAIAutoData::is_currency_Set() const{
    return m_currency_isSet;
}

bool OAIAutoData::is_currency_Valid() const{
    return m_currency_isValid;
}

QString OAIAutoData::getLabel() const {
    return m_label;
}
void OAIAutoData::setLabel(const QString &label) {
    m_label = label;
    m_label_isSet = true;
}

bool OAIAutoData::is_label_Set() const{
    return m_label_isSet;
}

bool OAIAutoData::is_label_Valid() const{
    return m_label_isValid;
}

QString OAIAutoData::getMessage() const {
    return m_message;
}
void OAIAutoData::setMessage(const QString &message) {
    m_message = message;
    m_message_isSet = true;
}

bool OAIAutoData::is_message_Set() const{
    return m_message_isSet;
}

bool OAIAutoData::is_message_Valid() const{
    return m_message_isValid;
}

OAIGeolocationUriFormat OAIAutoData::getFormat() const {
    return m_format;
}
void OAIAutoData::setFormat(const OAIGeolocationUriFormat &format) {
    m_format = format;
    m_format_isSet = true;
}

bool OAIAutoData::is_format_Set() const{
    return m_format_isSet;
}

bool OAIAutoData::is_format_Valid() const{
    return m_format_isValid;
}

bool OAIAutoData::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_hidden_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_password_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_security.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_ssid_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_bcc.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_body_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_cc.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_subject_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_to.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_birthday_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_cell_phone.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_city_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_country_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_display_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_email.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_encoding_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_fax.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_first_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_home_phone.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_latitude_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_longitude_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_memo_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_nickname_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_organization_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_phone_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_photo.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_po_box_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_region_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_revision_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_source_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_street_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_title.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_url.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_videophone.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_work_phone.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_zip_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_house_number_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_prefecture_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_reading_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_room_number_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_address_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_amount_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_currency.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_label_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_message_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_format.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAutoData::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_ssid_isValid && m_to_isValid && m_last_name_isValid && m_latitude_isValid && m_longitude_isValid && m_phone_isValid && m_address_isValid && m_currency_isValid && true;
}

} // namespace OpenAPI
