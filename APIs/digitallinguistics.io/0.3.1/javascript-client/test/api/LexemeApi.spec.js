/**
 * DLx
 * The Digital Linguistics (DLx) REST API
 *
 * The version of the OpenAPI document: 0.3.1
 * Contact: dhieber@umail.ucsb.edu
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.Dlx);
  }
}(this, function(expect, Dlx) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new Dlx.LexemeApi();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('LexemeApi', function() {
    describe('addLexeme', function() {
      it('should call addLexeme successfully', function(done) {
        //uncomment below and update the code to test addLexeme
        //instance.addLexeme(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('addLexemeByLanguage_0', function() {
      it('should call addLexemeByLanguage_0 successfully', function(done) {
        //uncomment below and update the code to test addLexemeByLanguage_0
        //instance.addLexemeByLanguage_0(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteLexeme', function() {
      it('should call deleteLexeme successfully', function(done) {
        //uncomment below and update the code to test deleteLexeme
        //instance.deleteLexeme(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteLexemeByLanguage_0', function() {
      it('should call deleteLexemeByLanguage_0 successfully', function(done) {
        //uncomment below and update the code to test deleteLexemeByLanguage_0
        //instance.deleteLexemeByLanguage_0(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getLexeme', function() {
      it('should call getLexeme successfully', function(done) {
        //uncomment below and update the code to test getLexeme
        //instance.getLexeme(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getLexemeByLanguage_0', function() {
      it('should call getLexemeByLanguage_0 successfully', function(done) {
        //uncomment below and update the code to test getLexemeByLanguage_0
        //instance.getLexemeByLanguage_0(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getLexemes', function() {
      it('should call getLexemes successfully', function(done) {
        //uncomment below and update the code to test getLexemes
        //instance.getLexemes(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getLexemesByLanguage_0', function() {
      it('should call getLexemesByLanguage_0 successfully', function(done) {
        //uncomment below and update the code to test getLexemesByLanguage_0
        //instance.getLexemesByLanguage_0(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('updateLexeme', function() {
      it('should call updateLexeme successfully', function(done) {
        //uncomment below and update the code to test updateLexeme
        //instance.updateLexeme(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('updateLexemeByLanguage', function() {
      it('should call updateLexemeByLanguage successfully', function(done) {
        //uncomment below and update the code to test updateLexemeByLanguage
        //instance.updateLexemeByLanguage(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('upsertLexeme', function() {
      it('should call upsertLexeme successfully', function(done) {
        //uncomment below and update the code to test upsertLexeme
        //instance.upsertLexeme(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('upsertLexemeByLanguage_0', function() {
      it('should call upsertLexemeByLanguage_0 successfully', function(done) {
        //uncomment below and update the code to test upsertLexemeByLanguage_0
        //instance.upsertLexemeByLanguage_0(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
  });

}));
