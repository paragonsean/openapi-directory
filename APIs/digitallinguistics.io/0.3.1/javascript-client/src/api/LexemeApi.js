/**
 * DLx
 * The Digital Linguistics (DLx) REST API
 *
 * The version of the OpenAPI document: 0.3.1
 * Contact: dhieber@umail.ucsb.edu
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";

/**
* Lexeme service.
* @module api/LexemeApi
* @version 0.3.1
*/
export default class LexemeApi {

    /**
    * Constructs a new LexemeApi. 
    * @alias module:api/LexemeApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the addLexeme operation.
     * @callback module:api/LexemeApi~addLexemeCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Add a new Lexeme
     * Add a new Lexeme. A `languageID` must be provided either as a query parameter, or as an attribute on the Lexeme body.
     * @param {Object} opts Optional parameters
     * @param {String} [languageID] The ID of the Language to perform the operation on
     * @param {module:api/LexemeApi~addLexemeCallback} callback The callback function, accepting three arguments: error, data, response
     */
    addLexeme(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'languageID': opts['languageID']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Authorization'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/lexemes', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the addLexemeByLanguage_0 operation.
     * @callback module:api/LexemeApi~addLexemeByLanguage_0Callback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Add a new Lexeme to a Language
     * @param {String} languageID The ID of the Language to perform the operation on
     * @param {module:api/LexemeApi~addLexemeByLanguage_0Callback} callback The callback function, accepting three arguments: error, data, response
     */
    addLexemeByLanguage_0(languageID, callback) {
      let postBody = null;
      // verify the required parameter 'languageID' is set
      if (languageID === undefined || languageID === null) {
        throw new Error("Missing the required parameter 'languageID' when calling addLexemeByLanguage_0");
      }

      let pathParams = {
        'languageID': languageID
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Authorization'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/languages/{languageID}/lexemes', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteLexeme operation.
     * @callback module:api/LexemeApi~deleteLexemeCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a Lexeme by ID
     * @param {String} lexemeID The ID of the Lexeme to perform the operation on
     * @param {Object} opts Optional parameters
     * @param {String} [ifMatch] The `If-Match` header is used with PUT and DELETE requests to check whether you have the most up-to-date version of the resource before updating or deleting it. The value of the `If-Match` header is the ETag (`_etag`) property of the resource. It is recommended that your application use this header whenever possible to avoid data conflicts.
     * @param {module:api/LexemeApi~deleteLexemeCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteLexeme(lexemeID, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'lexemeID' is set
      if (lexemeID === undefined || lexemeID === null) {
        throw new Error("Missing the required parameter 'lexemeID' when calling deleteLexeme");
      }

      let pathParams = {
        'lexemeID': lexemeID
      };
      let queryParams = {
      };
      let headerParams = {
        'ifMatch': opts['ifMatch']
      };
      let formParams = {
      };

      let authNames = ['Authorization'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/lexemes/{lexemeID}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteLexemeByLanguage_0 operation.
     * @callback module:api/LexemeApi~deleteLexemeByLanguage_0Callback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a Lexeme by ID
     * @param {String} languageID The ID of the Language to perform the operation on
     * @param {String} lexemeID The ID of the Lexeme to perform the operation on
     * @param {Object} opts Optional parameters
     * @param {String} [ifMatch] The `If-Match` header is used with PUT and DELETE requests to check whether you have the most up-to-date version of the resource before updating or deleting it. The value of the `If-Match` header is the ETag (`_etag`) property of the resource. It is recommended that your application use this header whenever possible to avoid data conflicts.
     * @param {module:api/LexemeApi~deleteLexemeByLanguage_0Callback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteLexemeByLanguage_0(languageID, lexemeID, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'languageID' is set
      if (languageID === undefined || languageID === null) {
        throw new Error("Missing the required parameter 'languageID' when calling deleteLexemeByLanguage_0");
      }
      // verify the required parameter 'lexemeID' is set
      if (lexemeID === undefined || lexemeID === null) {
        throw new Error("Missing the required parameter 'lexemeID' when calling deleteLexemeByLanguage_0");
      }

      let pathParams = {
        'languageID': languageID,
        'lexemeID': lexemeID
      };
      let queryParams = {
      };
      let headerParams = {
        'ifMatch': opts['ifMatch']
      };
      let formParams = {
      };

      let authNames = ['Authorization'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/languages/{languageID}/lexemes/{lexemeID}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getLexeme operation.
     * @callback module:api/LexemeApi~getLexemeCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a Lexeme by ID
     * @param {String} lexemeID The ID of the Lexeme to perform the operation on
     * @param {Object} opts Optional parameters
     * @param {Boolean} [deleted = false)] Setting the `deleted` option to `true` will return results that have been marked for deletion, but not yet deleted from the database. Otherwise requests for a resource marked for deletion will return a 410 error.
     * @param {String} [ifNoneMatch] If `If-None-Match` header is used with GET requests to check whether you already have the most up-to-date version of the resource, and therefore do not need the resource sent again. The value of the `If-None-Match` header is the ETag (`_etag`) property of the resource. It is recommended that your application use this header whenever possible to reduce bandwidth.
     * @param {module:api/LexemeApi~getLexemeCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getLexeme(lexemeID, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'lexemeID' is set
      if (lexemeID === undefined || lexemeID === null) {
        throw new Error("Missing the required parameter 'lexemeID' when calling getLexeme");
      }

      let pathParams = {
        'lexemeID': lexemeID
      };
      let queryParams = {
        'deleted': opts['deleted']
      };
      let headerParams = {
        'ifNoneMatch': opts['ifNoneMatch']
      };
      let formParams = {
      };

      let authNames = ['Authorization'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/lexemes/{lexemeID}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getLexemeByLanguage_0 operation.
     * @callback module:api/LexemeApi~getLexemeByLanguage_0Callback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a Lexeme by ID
     * @param {String} languageID The ID of the Language to perform the operation on
     * @param {String} lexemeID The ID of the Lexeme to perform the operation on
     * @param {Object} opts Optional parameters
     * @param {Boolean} [deleted = false)] Setting the `deleted` option to `true` will return results that have been marked for deletion, but not yet deleted from the database. Otherwise requests for a resource marked for deletion will return a 410 error.
     * @param {String} [ifNoneMatch] If `If-None-Match` header is used with GET requests to check whether you already have the most up-to-date version of the resource, and therefore do not need the resource sent again. The value of the `If-None-Match` header is the ETag (`_etag`) property of the resource. It is recommended that your application use this header whenever possible to reduce bandwidth.
     * @param {module:api/LexemeApi~getLexemeByLanguage_0Callback} callback The callback function, accepting three arguments: error, data, response
     */
    getLexemeByLanguage_0(languageID, lexemeID, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'languageID' is set
      if (languageID === undefined || languageID === null) {
        throw new Error("Missing the required parameter 'languageID' when calling getLexemeByLanguage_0");
      }
      // verify the required parameter 'lexemeID' is set
      if (lexemeID === undefined || lexemeID === null) {
        throw new Error("Missing the required parameter 'lexemeID' when calling getLexemeByLanguage_0");
      }

      let pathParams = {
        'languageID': languageID,
        'lexemeID': lexemeID
      };
      let queryParams = {
        'deleted': opts['deleted']
      };
      let headerParams = {
        'ifNoneMatch': opts['ifNoneMatch']
      };
      let formParams = {
      };

      let authNames = ['Authorization'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/languages/{languageID}/lexemes/{lexemeID}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getLexemes operation.
     * @callback module:api/LexemeApi~getLexemesCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get all Lexemes
     * Retrieve all Lexemes that the authenticated user has permission to access. Include a `languageID` query parameter to limit results to Lexemes from a particular Language.
     * @param {Object} opts Optional parameters
     * @param {String} [continuation] The `dlx-continuation` header is used to send a continuation token with the request, when retrieving the next page of results.
     * @param {Boolean} [deleted = false)] Setting the `deleted` option to `true` will return results that have been marked for deletion, but not yet deleted from the database. Otherwise requests for a resource marked for deletion will return a 410 error.
     * @param {String} [ifModifiedSince] The `If-Modified-Since` header is used to retrieve only results modified since a given time. The value of this header must be a valid date string.
     * @param {String} [languageID] The ID of the Language to perform the operation on
     * @param {String} [maxItemCount] The `dlx-max-item-count` header is used to limit the number of results to a certain amount at a time (by default all results will be returned). If there are more results to be returned, a continuation token will also be sent in the `dlx-continuation` header.
     * @param {String} [_public = 'false')] Set this parameter to `true` to include all publicly-accessible resources, not just those that the user is listed as an Owner, Contributor, or Viewer for.
     * @param {module:api/LexemeApi~getLexemesCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getLexemes(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'deleted': opts['deleted'],
        'languageID': opts['languageID'],
        'public': opts['_public']
      };
      let headerParams = {
        'continuation': opts['continuation'],
        'ifModifiedSince': opts['ifModifiedSince'],
        'maxItemCount': opts['maxItemCount']
      };
      let formParams = {
      };

      let authNames = ['Authorization'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/lexemes', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getLexemesByLanguage_0 operation.
     * @callback module:api/LexemeApi~getLexemesByLanguage_0Callback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get all Lexemes for a Language
     * @param {String} languageID The ID of the Language to perform the operation on
     * @param {Object} opts Optional parameters
     * @param {String} [continuation] The `dlx-continuation` header is used to send a continuation token with the request, when retrieving the next page of results.
     * @param {Boolean} [deleted = false)] Setting the `deleted` option to `true` will return results that have been marked for deletion, but not yet deleted from the database. Otherwise requests for a resource marked for deletion will return a 410 error.
     * @param {String} [ifModifiedSince] The `If-Modified-Since` header is used to retrieve only results modified since a given time. The value of this header must be a valid date string.
     * @param {String} [maxItemCount] The `dlx-max-item-count` header is used to limit the number of results to a certain amount at a time (by default all results will be returned). If there are more results to be returned, a continuation token will also be sent in the `dlx-continuation` header.
     * @param {String} [_public = 'false')] Set this parameter to `true` to include all publicly-accessible resources, not just those that the user is listed as an Owner, Contributor, or Viewer for.
     * @param {module:api/LexemeApi~getLexemesByLanguage_0Callback} callback The callback function, accepting three arguments: error, data, response
     */
    getLexemesByLanguage_0(languageID, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'languageID' is set
      if (languageID === undefined || languageID === null) {
        throw new Error("Missing the required parameter 'languageID' when calling getLexemesByLanguage_0");
      }

      let pathParams = {
        'languageID': languageID
      };
      let queryParams = {
        'deleted': opts['deleted'],
        'public': opts['_public']
      };
      let headerParams = {
        'continuation': opts['continuation'],
        'ifModifiedSince': opts['ifModifiedSince'],
        'maxItemCount': opts['maxItemCount']
      };
      let formParams = {
      };

      let authNames = ['Authorization'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/languages/{languageID}/lexemes', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateLexeme operation.
     * @callback module:api/LexemeApi~updateLexemeCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Perform a partial update on a Lexeme
     * Perform a partial update on a Lexeme.
     * @param {String} lexemeID The ID of the Lexeme to perform the operation on
     * @param {Object} opts Optional parameters
     * @param {String} [ifMatch] The `If-Match` header is used with PUT and DELETE requests to check whether you have the most up-to-date version of the resource before updating or deleting it. The value of the `If-Match` header is the ETag (`_etag`) property of the resource. It is recommended that your application use this header whenever possible to avoid data conflicts.
     * @param {module:api/LexemeApi~updateLexemeCallback} callback The callback function, accepting three arguments: error, data, response
     */
    updateLexeme(lexemeID, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'lexemeID' is set
      if (lexemeID === undefined || lexemeID === null) {
        throw new Error("Missing the required parameter 'lexemeID' when calling updateLexeme");
      }

      let pathParams = {
        'lexemeID': lexemeID
      };
      let queryParams = {
      };
      let headerParams = {
        'ifMatch': opts['ifMatch']
      };
      let formParams = {
      };

      let authNames = ['Authorization'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/lexemes/{lexemeID}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateLexemeByLanguage operation.
     * @callback module:api/LexemeApi~updateLexemeByLanguageCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Perform a partial update on a Lexeme
     * @param {String} languageID The ID of the Language to perform the operation on
     * @param {String} lexemeID The ID of the Lexeme to perform the operation on
     * @param {Object} opts Optional parameters
     * @param {String} [ifMatch] The `If-Match` header is used with PUT and DELETE requests to check whether you have the most up-to-date version of the resource before updating or deleting it. The value of the `If-Match` header is the ETag (`_etag`) property of the resource. It is recommended that your application use this header whenever possible to avoid data conflicts.
     * @param {module:api/LexemeApi~updateLexemeByLanguageCallback} callback The callback function, accepting three arguments: error, data, response
     */
    updateLexemeByLanguage(languageID, lexemeID, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'languageID' is set
      if (languageID === undefined || languageID === null) {
        throw new Error("Missing the required parameter 'languageID' when calling updateLexemeByLanguage");
      }
      // verify the required parameter 'lexemeID' is set
      if (lexemeID === undefined || lexemeID === null) {
        throw new Error("Missing the required parameter 'lexemeID' when calling updateLexemeByLanguage");
      }

      let pathParams = {
        'languageID': languageID,
        'lexemeID': lexemeID
      };
      let queryParams = {
      };
      let headerParams = {
        'ifMatch': opts['ifMatch']
      };
      let formParams = {
      };

      let authNames = ['Authorization'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/languages/{languageID}/lexemes/{lexemeID}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the upsertLexeme operation.
     * @callback module:api/LexemeApi~upsertLexemeCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Upsert (add or replace) a Lexeme
     * Upsert (add or replace) a Lexeme. A `languageID` must be provided either as a query parameter, or as an attribute on the Lexeme body.
     * @param {Object} opts Optional parameters
     * @param {String} [ifMatch] The `If-Match` header is used with PUT and DELETE requests to check whether you have the most up-to-date version of the resource before updating or deleting it. The value of the `If-Match` header is the ETag (`_etag`) property of the resource. It is recommended that your application use this header whenever possible to avoid data conflicts.
     * @param {String} [languageID] The ID of the Language to perform the operation on
     * @param {module:api/LexemeApi~upsertLexemeCallback} callback The callback function, accepting three arguments: error, data, response
     */
    upsertLexeme(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'languageID': opts['languageID']
      };
      let headerParams = {
        'ifMatch': opts['ifMatch']
      };
      let formParams = {
      };

      let authNames = ['Authorization'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/lexemes', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the upsertLexemeByLanguage_0 operation.
     * @callback module:api/LexemeApi~upsertLexemeByLanguage_0Callback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Upsert (add or replace) a Lexeme
     * @param {String} languageID The ID of the Language to perform the operation on
     * @param {Object} opts Optional parameters
     * @param {String} [ifMatch] The `If-Match` header is used with PUT and DELETE requests to check whether you have the most up-to-date version of the resource before updating or deleting it. The value of the `If-Match` header is the ETag (`_etag`) property of the resource. It is recommended that your application use this header whenever possible to avoid data conflicts.
     * @param {module:api/LexemeApi~upsertLexemeByLanguage_0Callback} callback The callback function, accepting three arguments: error, data, response
     */
    upsertLexemeByLanguage_0(languageID, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'languageID' is set
      if (languageID === undefined || languageID === null) {
        throw new Error("Missing the required parameter 'languageID' when calling upsertLexemeByLanguage_0");
      }

      let pathParams = {
        'languageID': languageID
      };
      let queryParams = {
      };
      let headerParams = {
        'ifMatch': opts['ifMatch']
      };
      let formParams = {
      };

      let authNames = ['Authorization'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/languages/{languageID}/lexemes', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
