/**
 * DLx
 * The Digital Linguistics (DLx) REST API
 *
 * The version of the OpenAPI document: 0.3.1
 * Contact: dhieber@umail.ucsb.edu
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAILanguageApi_H
#define OAI_OAILanguageApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIObject.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAILanguageApi : public QObject {
    Q_OBJECT

public:
    OAILanguageApi(const int timeOut = 0);
    ~OAILanguageApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  body OAIObject [required]
    */
    virtual void addLanguage(const OAIObject &body);

    /**
    * @param[in]  language_id QString [required]
    */
    virtual void addLexemeByLanguage(const QString &language_id);

    /**
    * @param[in]  language_id QString [required]
    * @param[in]  if_match QString [optional]
    */
    virtual void deleteLanguage(const QString &language_id, const ::OpenAPI::OptionalParam<QString> &if_match = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  language_id QString [required]
    * @param[in]  lexeme_id QString [required]
    * @param[in]  if_match QString [optional]
    */
    virtual void deleteLexemeByLanguage(const QString &language_id, const QString &lexeme_id, const ::OpenAPI::OptionalParam<QString> &if_match = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  language_id QString [required]
    * @param[in]  deleted bool [optional]
    * @param[in]  if_none_match QString [optional]
    */
    virtual void getLanguage(const QString &language_id, const ::OpenAPI::OptionalParam<bool> &deleted = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &if_none_match = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  continuation QString [optional]
    * @param[in]  deleted bool [optional]
    * @param[in]  if_modified_since QString [optional]
    * @param[in]  max_item_count QString [optional]
    * @param[in]  r_public QString [optional]
    */
    virtual void getLanguages(const ::OpenAPI::OptionalParam<QString> &continuation = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &deleted = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &if_modified_since = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &max_item_count = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &r_public = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  language_id QString [required]
    * @param[in]  lexeme_id QString [required]
    * @param[in]  deleted bool [optional]
    * @param[in]  if_none_match QString [optional]
    */
    virtual void getLexemeByLanguage(const QString &language_id, const QString &lexeme_id, const ::OpenAPI::OptionalParam<bool> &deleted = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &if_none_match = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  language_id QString [required]
    * @param[in]  continuation QString [optional]
    * @param[in]  deleted bool [optional]
    * @param[in]  if_modified_since QString [optional]
    * @param[in]  max_item_count QString [optional]
    * @param[in]  r_public QString [optional]
    */
    virtual void getLexemesByLanguage(const QString &language_id, const ::OpenAPI::OptionalParam<QString> &continuation = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &deleted = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &if_modified_since = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &max_item_count = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &r_public = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  language_id QString [required]
    * @param[in]  body OAIObject [required]
    * @param[in]  if_match QString [optional]
    */
    virtual void updateLanguage(const QString &language_id, const OAIObject &body, const ::OpenAPI::OptionalParam<QString> &if_match = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  body OAIObject [required]
    * @param[in]  if_match QString [optional]
    */
    virtual void upsertLanguage(const OAIObject &body, const ::OpenAPI::OptionalParam<QString> &if_match = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  language_id QString [required]
    * @param[in]  if_match QString [optional]
    */
    virtual void upsertLexemeByLanguage(const QString &language_id, const ::OpenAPI::OptionalParam<QString> &if_match = ::OpenAPI::OptionalParam<QString>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void addLanguageCallback(OAIHttpRequestWorker *worker);
    void addLexemeByLanguageCallback(OAIHttpRequestWorker *worker);
    void deleteLanguageCallback(OAIHttpRequestWorker *worker);
    void deleteLexemeByLanguageCallback(OAIHttpRequestWorker *worker);
    void getLanguageCallback(OAIHttpRequestWorker *worker);
    void getLanguagesCallback(OAIHttpRequestWorker *worker);
    void getLexemeByLanguageCallback(OAIHttpRequestWorker *worker);
    void getLexemesByLanguageCallback(OAIHttpRequestWorker *worker);
    void updateLanguageCallback(OAIHttpRequestWorker *worker);
    void upsertLanguageCallback(OAIHttpRequestWorker *worker);
    void upsertLexemeByLanguageCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void addLanguageSignal();
    void addLexemeByLanguageSignal();
    void deleteLanguageSignal();
    void deleteLexemeByLanguageSignal();
    void getLanguageSignal();
    void getLanguagesSignal();
    void getLexemeByLanguageSignal();
    void getLexemesByLanguageSignal();
    void updateLanguageSignal();
    void upsertLanguageSignal();
    void upsertLexemeByLanguageSignal();


    void addLanguageSignalFull(OAIHttpRequestWorker *worker);
    void addLexemeByLanguageSignalFull(OAIHttpRequestWorker *worker);
    void deleteLanguageSignalFull(OAIHttpRequestWorker *worker);
    void deleteLexemeByLanguageSignalFull(OAIHttpRequestWorker *worker);
    void getLanguageSignalFull(OAIHttpRequestWorker *worker);
    void getLanguagesSignalFull(OAIHttpRequestWorker *worker);
    void getLexemeByLanguageSignalFull(OAIHttpRequestWorker *worker);
    void getLexemesByLanguageSignalFull(OAIHttpRequestWorker *worker);
    void updateLanguageSignalFull(OAIHttpRequestWorker *worker);
    void upsertLanguageSignalFull(OAIHttpRequestWorker *worker);
    void upsertLexemeByLanguageSignalFull(OAIHttpRequestWorker *worker);

    Q_DECL_DEPRECATED_X("Use addLanguageSignalError() instead")
    void addLanguageSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void addLanguageSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use addLexemeByLanguageSignalError() instead")
    void addLexemeByLanguageSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void addLexemeByLanguageSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteLanguageSignalError() instead")
    void deleteLanguageSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void deleteLanguageSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteLexemeByLanguageSignalError() instead")
    void deleteLexemeByLanguageSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void deleteLexemeByLanguageSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getLanguageSignalError() instead")
    void getLanguageSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void getLanguageSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getLanguagesSignalError() instead")
    void getLanguagesSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void getLanguagesSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getLexemeByLanguageSignalError() instead")
    void getLexemeByLanguageSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void getLexemeByLanguageSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getLexemesByLanguageSignalError() instead")
    void getLexemesByLanguageSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void getLexemesByLanguageSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateLanguageSignalError() instead")
    void updateLanguageSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void updateLanguageSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use upsertLanguageSignalError() instead")
    void upsertLanguageSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void upsertLanguageSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use upsertLexemeByLanguageSignalError() instead")
    void upsertLexemeByLanguageSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void upsertLexemeByLanguageSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use addLanguageSignalErrorFull() instead")
    void addLanguageSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void addLanguageSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use addLexemeByLanguageSignalErrorFull() instead")
    void addLexemeByLanguageSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void addLexemeByLanguageSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteLanguageSignalErrorFull() instead")
    void deleteLanguageSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteLanguageSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteLexemeByLanguageSignalErrorFull() instead")
    void deleteLexemeByLanguageSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteLexemeByLanguageSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getLanguageSignalErrorFull() instead")
    void getLanguageSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getLanguageSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getLanguagesSignalErrorFull() instead")
    void getLanguagesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getLanguagesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getLexemeByLanguageSignalErrorFull() instead")
    void getLexemeByLanguageSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getLexemeByLanguageSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getLexemesByLanguageSignalErrorFull() instead")
    void getLexemesByLanguageSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getLexemesByLanguageSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateLanguageSignalErrorFull() instead")
    void updateLanguageSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateLanguageSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use upsertLanguageSignalErrorFull() instead")
    void upsertLanguageSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void upsertLanguageSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use upsertLexemeByLanguageSignalErrorFull() instead")
    void upsertLexemeByLanguageSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void upsertLexemeByLanguageSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
