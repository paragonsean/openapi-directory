/**
 * DLx
 * The Digital Linguistics (DLx) REST API
 *
 * The version of the OpenAPI document: 0.3.1
 * Contact: dhieber@umail.ucsb.edu
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAILexemeApi.h"
#include "OAIServerConfiguration.h"
#include <QJsonArray>
#include <QJsonDocument>

namespace OpenAPI {

OAILexemeApi::OAILexemeApi(const int timeOut)
    : _timeOut(timeOut),
      _manager(nullptr),
      _isResponseCompressionEnabled(false),
      _isRequestCompressionEnabled(false) {
    initializeServerConfigs();
}

OAILexemeApi::~OAILexemeApi() {
}

void OAILexemeApi::initializeServerConfigs() {
    //Default server
    QList<OAIServerConfiguration> defaultConf = QList<OAIServerConfiguration>();
    //varying endpoint server
    defaultConf.append(OAIServerConfiguration(
    QUrl("https://api.digitallinguistics.io/v0"),
    "No description provided",
    QMap<QString, OAIServerVariable>()));
    _serverConfigs.insert("addLexeme", defaultConf);
    _serverIndices.insert("addLexeme", 0);
    _serverConfigs.insert("addLexemeByLanguage", defaultConf);
    _serverIndices.insert("addLexemeByLanguage", 0);
    _serverConfigs.insert("deleteLexeme", defaultConf);
    _serverIndices.insert("deleteLexeme", 0);
    _serverConfigs.insert("deleteLexemeByLanguage", defaultConf);
    _serverIndices.insert("deleteLexemeByLanguage", 0);
    _serverConfigs.insert("getLexeme", defaultConf);
    _serverIndices.insert("getLexeme", 0);
    _serverConfigs.insert("getLexemeByLanguage", defaultConf);
    _serverIndices.insert("getLexemeByLanguage", 0);
    _serverConfigs.insert("getLexemes", defaultConf);
    _serverIndices.insert("getLexemes", 0);
    _serverConfigs.insert("getLexemesByLanguage", defaultConf);
    _serverIndices.insert("getLexemesByLanguage", 0);
    _serverConfigs.insert("updateLexeme", defaultConf);
    _serverIndices.insert("updateLexeme", 0);
    _serverConfigs.insert("updateLexemeByLanguage", defaultConf);
    _serverIndices.insert("updateLexemeByLanguage", 0);
    _serverConfigs.insert("upsertLexeme", defaultConf);
    _serverIndices.insert("upsertLexeme", 0);
    _serverConfigs.insert("upsertLexemeByLanguage", defaultConf);
    _serverIndices.insert("upsertLexemeByLanguage", 0);
}

/**
* returns 0 on success and -1, -2 or -3 on failure.
* -1 when the variable does not exist and -2 if the value is not defined in the enum and -3 if the operation or server index is not found
*/
int OAILexemeApi::setDefaultServerValue(int serverIndex, const QString &operation, const QString &variable, const QString &value) {
    auto it = _serverConfigs.find(operation);
    if (it != _serverConfigs.end() && serverIndex < it.value().size()) {
      return _serverConfigs[operation][serverIndex].setDefaultValue(variable,value);
    }
    return -3;
}
void OAILexemeApi::setServerIndex(const QString &operation, int serverIndex) {
    if (_serverIndices.contains(operation) && serverIndex < _serverConfigs.find(operation).value().size()) {
        _serverIndices[operation] = serverIndex;
    }
}

void OAILexemeApi::setApiKey(const QString &apiKeyName, const QString &apiKey) {
    _apiKeys.insert(apiKeyName, apiKey);
}

void OAILexemeApi::setBearerToken(const QString &token) {
    _bearerToken = token;
}

void OAILexemeApi::setUsername(const QString &username) {
    _username = username;
}

void OAILexemeApi::setPassword(const QString &password) {
    _password = password;
}


void OAILexemeApi::setTimeOut(const int timeOut) {
    _timeOut = timeOut;
}

void OAILexemeApi::setWorkingDirectory(const QString &path) {
    _workingDirectory = path;
}

void OAILexemeApi::setNetworkAccessManager(QNetworkAccessManager* manager) {
    _manager = manager;
}

/**
    * Appends a new ServerConfiguration to the config map for a specific operation.
    * @param operation The id to the target operation.
    * @param url A string that contains the URL of the server
    * @param description A String that describes the server
    * @param variables A map between a variable name and its value. The value is used for substitution in the server's URL template.
    * returns the index of the new server config on success and -1 if the operation is not found
    */
int OAILexemeApi::addServerConfiguration(const QString &operation, const QUrl &url, const QString &description, const QMap<QString, OAIServerVariable> &variables) {
    if (_serverConfigs.contains(operation)) {
        _serverConfigs[operation].append(OAIServerConfiguration(
                    url,
                    description,
                    variables));
        return _serverConfigs[operation].size()-1;
    } else {
        return -1;
    }
}

/**
    * Appends a new ServerConfiguration to the config map for a all operations and sets the index to that server.
    * @param url A string that contains the URL of the server
    * @param description A String that describes the server
    * @param variables A map between a variable name and its value. The value is used for substitution in the server's URL template.
    */
void OAILexemeApi::setNewServerForAllOperations(const QUrl &url, const QString &description, const QMap<QString, OAIServerVariable> &variables) {
    for (auto keyIt = _serverIndices.keyBegin(); keyIt != _serverIndices.keyEnd(); keyIt++) {
        setServerIndex(*keyIt, addServerConfiguration(*keyIt, url, description, variables));
    }
}

/**
    * Appends a new ServerConfiguration to the config map for an operations and sets the index to that server.
    * @param URL A string that contains the URL of the server
    * @param description A String that describes the server
    * @param variables A map between a variable name and its value. The value is used for substitution in the server's URL template.
    */
void OAILexemeApi::setNewServer(const QString &operation, const QUrl &url, const QString &description, const QMap<QString, OAIServerVariable> &variables) {
    setServerIndex(operation, addServerConfiguration(operation, url, description, variables));
}

void OAILexemeApi::addHeaders(const QString &key, const QString &value) {
    _defaultHeaders.insert(key, value);
}

void OAILexemeApi::enableRequestCompression() {
    _isRequestCompressionEnabled = true;
}

void OAILexemeApi::enableResponseCompression() {
    _isResponseCompressionEnabled = true;
}

void OAILexemeApi::abortRequests() {
    Q_EMIT abortRequestsSignal();
}

QString OAILexemeApi::getParamStylePrefix(const QString &style) {
    if (style == "matrix") {
        return ";";
    } else if (style == "label") {
        return ".";
    } else if (style == "form") {
        return "&";
    } else if (style == "simple") {
        return "";
    } else if (style == "spaceDelimited") {
        return "&";
    } else if (style == "pipeDelimited") {
        return "&";
    } else {
        return "none";
    }
}

QString OAILexemeApi::getParamStyleSuffix(const QString &style) {
    if (style == "matrix") {
        return "=";
    } else if (style == "label") {
        return "";
    } else if (style == "form") {
        return "=";
    } else if (style == "simple") {
        return "";
    } else if (style == "spaceDelimited") {
        return "=";
    } else if (style == "pipeDelimited") {
        return "=";
    } else {
        return "none";
    }
}

QString OAILexemeApi::getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode) {

    if (style == "matrix") {
        return (isExplode) ? ";" + name + "=" : ",";

    } else if (style == "label") {
        return (isExplode) ? "." : ",";

    } else if (style == "form") {
        return (isExplode) ? "&" + name + "=" : ",";

    } else if (style == "simple") {
        return ",";
    } else if (style == "spaceDelimited") {
        return (isExplode) ? "&" + name + "=" : " ";

    } else if (style == "pipeDelimited") {
        return (isExplode) ? "&" + name + "=" : "|";

    } else if (style == "deepObject") {
        return (isExplode) ? "&" : "none";

    } else {
        return "none";
    }
}

void OAILexemeApi::addLexeme(const ::OpenAPI::OptionalParam<QString> &language_id) {
    QString fullPath = QString(_serverConfigs["addLexeme"][_serverIndices.value("addLexeme")].URL()+"/lexemes");
    
    if (_apiKeys.contains("Authorization")) {
        addHeaders("Authorization",_apiKeys.find("Authorization").value());
    }
    
    QString queryPrefix, querySuffix, queryDelimiter, queryStyle;
    if (language_id.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "languageID", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("languageID")).append(querySuffix).append(QUrl::toPercentEncoding(language_id.stringValue()));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "POST");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAILexemeApi::addLexemeCallback);
    connect(this, &OAILexemeApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAILexemeApi::addLexemeCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT addLexemeSignal();
        Q_EMIT addLexemeSignalFull(worker);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT addLexemeSignalE(error_type, error_str);
        Q_EMIT addLexemeSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT addLexemeSignalError(error_type, error_str);
        Q_EMIT addLexemeSignalErrorFull(worker, error_type, error_str);
    }
}

void OAILexemeApi::addLexemeByLanguage(const QString &language_id) {
    QString fullPath = QString(_serverConfigs["addLexemeByLanguage"][_serverIndices.value("addLexemeByLanguage")].URL()+"/languages/{languageID}/lexemes");
    
    if (_apiKeys.contains("Authorization")) {
        addHeaders("Authorization",_apiKeys.find("Authorization").value());
    }
    
    
    {
        QString language_idPathParam("{");
        language_idPathParam.append("languageID").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "languageID", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"languageID"+pathSuffix : pathPrefix;
        fullPath.replace(language_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(language_id)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "POST");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAILexemeApi::addLexemeByLanguageCallback);
    connect(this, &OAILexemeApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAILexemeApi::addLexemeByLanguageCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT addLexemeByLanguageSignal();
        Q_EMIT addLexemeByLanguageSignalFull(worker);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT addLexemeByLanguageSignalE(error_type, error_str);
        Q_EMIT addLexemeByLanguageSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT addLexemeByLanguageSignalError(error_type, error_str);
        Q_EMIT addLexemeByLanguageSignalErrorFull(worker, error_type, error_str);
    }
}

void OAILexemeApi::deleteLexeme(const QString &lexeme_id, const ::OpenAPI::OptionalParam<QString> &if_match) {
    QString fullPath = QString(_serverConfigs["deleteLexeme"][_serverIndices.value("deleteLexeme")].URL()+"/lexemes/{lexemeID}");
    
    if (_apiKeys.contains("Authorization")) {
        addHeaders("Authorization",_apiKeys.find("Authorization").value());
    }
    
    
    {
        QString lexeme_idPathParam("{");
        lexeme_idPathParam.append("lexemeID").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "lexemeID", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"lexemeID"+pathSuffix : pathPrefix;
        fullPath.replace(lexeme_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(lexeme_id)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "DELETE");


    if (if_match.hasValue())
    {
        if (!::OpenAPI::toStringValue(if_match.value()).isEmpty()) {
            input.headers.insert("ifMatch", ::OpenAPI::toStringValue(if_match.value()));
        }
        }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAILexemeApi::deleteLexemeCallback);
    connect(this, &OAILexemeApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAILexemeApi::deleteLexemeCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT deleteLexemeSignal();
        Q_EMIT deleteLexemeSignalFull(worker);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT deleteLexemeSignalE(error_type, error_str);
        Q_EMIT deleteLexemeSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT deleteLexemeSignalError(error_type, error_str);
        Q_EMIT deleteLexemeSignalErrorFull(worker, error_type, error_str);
    }
}

void OAILexemeApi::deleteLexemeByLanguage(const QString &language_id, const QString &lexeme_id, const ::OpenAPI::OptionalParam<QString> &if_match) {
    QString fullPath = QString(_serverConfigs["deleteLexemeByLanguage"][_serverIndices.value("deleteLexemeByLanguage")].URL()+"/languages/{languageID}/lexemes/{lexemeID}");
    
    if (_apiKeys.contains("Authorization")) {
        addHeaders("Authorization",_apiKeys.find("Authorization").value());
    }
    
    
    {
        QString language_idPathParam("{");
        language_idPathParam.append("languageID").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "languageID", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"languageID"+pathSuffix : pathPrefix;
        fullPath.replace(language_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(language_id)));
    }
    
    {
        QString lexeme_idPathParam("{");
        lexeme_idPathParam.append("lexemeID").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "lexemeID", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"lexemeID"+pathSuffix : pathPrefix;
        fullPath.replace(lexeme_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(lexeme_id)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "DELETE");


    if (if_match.hasValue())
    {
        if (!::OpenAPI::toStringValue(if_match.value()).isEmpty()) {
            input.headers.insert("ifMatch", ::OpenAPI::toStringValue(if_match.value()));
        }
        }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAILexemeApi::deleteLexemeByLanguageCallback);
    connect(this, &OAILexemeApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAILexemeApi::deleteLexemeByLanguageCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT deleteLexemeByLanguageSignal();
        Q_EMIT deleteLexemeByLanguageSignalFull(worker);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT deleteLexemeByLanguageSignalE(error_type, error_str);
        Q_EMIT deleteLexemeByLanguageSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT deleteLexemeByLanguageSignalError(error_type, error_str);
        Q_EMIT deleteLexemeByLanguageSignalErrorFull(worker, error_type, error_str);
    }
}

void OAILexemeApi::getLexeme(const QString &lexeme_id, const ::OpenAPI::OptionalParam<bool> &deleted, const ::OpenAPI::OptionalParam<QString> &if_none_match) {
    QString fullPath = QString(_serverConfigs["getLexeme"][_serverIndices.value("getLexeme")].URL()+"/lexemes/{lexemeID}");
    
    if (_apiKeys.contains("Authorization")) {
        addHeaders("Authorization",_apiKeys.find("Authorization").value());
    }
    
    
    {
        QString lexeme_idPathParam("{");
        lexeme_idPathParam.append("lexemeID").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "lexemeID", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"lexemeID"+pathSuffix : pathPrefix;
        fullPath.replace(lexeme_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(lexeme_id)));
    }
    QString queryPrefix, querySuffix, queryDelimiter, queryStyle;
    if (deleted.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "deleted", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("deleted")).append(querySuffix).append(QUrl::toPercentEncoding(deleted.stringValue()));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    if (if_none_match.hasValue())
    {
        if (!::OpenAPI::toStringValue(if_none_match.value()).isEmpty()) {
            input.headers.insert("ifNoneMatch", ::OpenAPI::toStringValue(if_none_match.value()));
        }
        }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAILexemeApi::getLexemeCallback);
    connect(this, &OAILexemeApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAILexemeApi::getLexemeCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT getLexemeSignal();
        Q_EMIT getLexemeSignalFull(worker);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT getLexemeSignalE(error_type, error_str);
        Q_EMIT getLexemeSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT getLexemeSignalError(error_type, error_str);
        Q_EMIT getLexemeSignalErrorFull(worker, error_type, error_str);
    }
}

void OAILexemeApi::getLexemeByLanguage(const QString &language_id, const QString &lexeme_id, const ::OpenAPI::OptionalParam<bool> &deleted, const ::OpenAPI::OptionalParam<QString> &if_none_match) {
    QString fullPath = QString(_serverConfigs["getLexemeByLanguage"][_serverIndices.value("getLexemeByLanguage")].URL()+"/languages/{languageID}/lexemes/{lexemeID}");
    
    if (_apiKeys.contains("Authorization")) {
        addHeaders("Authorization",_apiKeys.find("Authorization").value());
    }
    
    
    {
        QString language_idPathParam("{");
        language_idPathParam.append("languageID").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "languageID", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"languageID"+pathSuffix : pathPrefix;
        fullPath.replace(language_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(language_id)));
    }
    
    {
        QString lexeme_idPathParam("{");
        lexeme_idPathParam.append("lexemeID").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "lexemeID", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"lexemeID"+pathSuffix : pathPrefix;
        fullPath.replace(lexeme_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(lexeme_id)));
    }
    QString queryPrefix, querySuffix, queryDelimiter, queryStyle;
    if (deleted.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "deleted", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("deleted")).append(querySuffix).append(QUrl::toPercentEncoding(deleted.stringValue()));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    if (if_none_match.hasValue())
    {
        if (!::OpenAPI::toStringValue(if_none_match.value()).isEmpty()) {
            input.headers.insert("ifNoneMatch", ::OpenAPI::toStringValue(if_none_match.value()));
        }
        }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAILexemeApi::getLexemeByLanguageCallback);
    connect(this, &OAILexemeApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAILexemeApi::getLexemeByLanguageCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT getLexemeByLanguageSignal();
        Q_EMIT getLexemeByLanguageSignalFull(worker);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT getLexemeByLanguageSignalE(error_type, error_str);
        Q_EMIT getLexemeByLanguageSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT getLexemeByLanguageSignalError(error_type, error_str);
        Q_EMIT getLexemeByLanguageSignalErrorFull(worker, error_type, error_str);
    }
}

void OAILexemeApi::getLexemes(const ::OpenAPI::OptionalParam<QString> &continuation, const ::OpenAPI::OptionalParam<bool> &deleted, const ::OpenAPI::OptionalParam<QString> &if_modified_since, const ::OpenAPI::OptionalParam<QString> &language_id, const ::OpenAPI::OptionalParam<QString> &max_item_count, const ::OpenAPI::OptionalParam<QString> &r_public) {
    QString fullPath = QString(_serverConfigs["getLexemes"][_serverIndices.value("getLexemes")].URL()+"/lexemes");
    
    if (_apiKeys.contains("Authorization")) {
        addHeaders("Authorization",_apiKeys.find("Authorization").value());
    }
    
    QString queryPrefix, querySuffix, queryDelimiter, queryStyle;
    if (deleted.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "deleted", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("deleted")).append(querySuffix).append(QUrl::toPercentEncoding(deleted.stringValue()));
    }
    if (language_id.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "languageID", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("languageID")).append(querySuffix).append(QUrl::toPercentEncoding(language_id.stringValue()));
    }
    if (r_public.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "public", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("public")).append(querySuffix).append(QUrl::toPercentEncoding(r_public.stringValue()));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    if (continuation.hasValue())
    {
        if (!::OpenAPI::toStringValue(continuation.value()).isEmpty()) {
            input.headers.insert("continuation", ::OpenAPI::toStringValue(continuation.value()));
        }
        }
    if (if_modified_since.hasValue())
    {
        if (!::OpenAPI::toStringValue(if_modified_since.value()).isEmpty()) {
            input.headers.insert("ifModifiedSince", ::OpenAPI::toStringValue(if_modified_since.value()));
        }
        }
    if (max_item_count.hasValue())
    {
        if (!::OpenAPI::toStringValue(max_item_count.value()).isEmpty()) {
            input.headers.insert("maxItemCount", ::OpenAPI::toStringValue(max_item_count.value()));
        }
        }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAILexemeApi::getLexemesCallback);
    connect(this, &OAILexemeApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAILexemeApi::getLexemesCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT getLexemesSignal();
        Q_EMIT getLexemesSignalFull(worker);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT getLexemesSignalE(error_type, error_str);
        Q_EMIT getLexemesSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT getLexemesSignalError(error_type, error_str);
        Q_EMIT getLexemesSignalErrorFull(worker, error_type, error_str);
    }
}

void OAILexemeApi::getLexemesByLanguage(const QString &language_id, const ::OpenAPI::OptionalParam<QString> &continuation, const ::OpenAPI::OptionalParam<bool> &deleted, const ::OpenAPI::OptionalParam<QString> &if_modified_since, const ::OpenAPI::OptionalParam<QString> &max_item_count, const ::OpenAPI::OptionalParam<QString> &r_public) {
    QString fullPath = QString(_serverConfigs["getLexemesByLanguage"][_serverIndices.value("getLexemesByLanguage")].URL()+"/languages/{languageID}/lexemes");
    
    if (_apiKeys.contains("Authorization")) {
        addHeaders("Authorization",_apiKeys.find("Authorization").value());
    }
    
    
    {
        QString language_idPathParam("{");
        language_idPathParam.append("languageID").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "languageID", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"languageID"+pathSuffix : pathPrefix;
        fullPath.replace(language_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(language_id)));
    }
    QString queryPrefix, querySuffix, queryDelimiter, queryStyle;
    if (deleted.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "deleted", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("deleted")).append(querySuffix).append(QUrl::toPercentEncoding(deleted.stringValue()));
    }
    if (r_public.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "public", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("public")).append(querySuffix).append(QUrl::toPercentEncoding(r_public.stringValue()));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    if (continuation.hasValue())
    {
        if (!::OpenAPI::toStringValue(continuation.value()).isEmpty()) {
            input.headers.insert("continuation", ::OpenAPI::toStringValue(continuation.value()));
        }
        }
    if (if_modified_since.hasValue())
    {
        if (!::OpenAPI::toStringValue(if_modified_since.value()).isEmpty()) {
            input.headers.insert("ifModifiedSince", ::OpenAPI::toStringValue(if_modified_since.value()));
        }
        }
    if (max_item_count.hasValue())
    {
        if (!::OpenAPI::toStringValue(max_item_count.value()).isEmpty()) {
            input.headers.insert("maxItemCount", ::OpenAPI::toStringValue(max_item_count.value()));
        }
        }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAILexemeApi::getLexemesByLanguageCallback);
    connect(this, &OAILexemeApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAILexemeApi::getLexemesByLanguageCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT getLexemesByLanguageSignal();
        Q_EMIT getLexemesByLanguageSignalFull(worker);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT getLexemesByLanguageSignalE(error_type, error_str);
        Q_EMIT getLexemesByLanguageSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT getLexemesByLanguageSignalError(error_type, error_str);
        Q_EMIT getLexemesByLanguageSignalErrorFull(worker, error_type, error_str);
    }
}

void OAILexemeApi::updateLexeme(const QString &lexeme_id, const ::OpenAPI::OptionalParam<QString> &if_match) {
    QString fullPath = QString(_serverConfigs["updateLexeme"][_serverIndices.value("updateLexeme")].URL()+"/lexemes/{lexemeID}");
    
    if (_apiKeys.contains("Authorization")) {
        addHeaders("Authorization",_apiKeys.find("Authorization").value());
    }
    
    
    {
        QString lexeme_idPathParam("{");
        lexeme_idPathParam.append("lexemeID").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "lexemeID", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"lexemeID"+pathSuffix : pathPrefix;
        fullPath.replace(lexeme_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(lexeme_id)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "PATCH");


    if (if_match.hasValue())
    {
        if (!::OpenAPI::toStringValue(if_match.value()).isEmpty()) {
            input.headers.insert("ifMatch", ::OpenAPI::toStringValue(if_match.value()));
        }
        }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAILexemeApi::updateLexemeCallback);
    connect(this, &OAILexemeApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAILexemeApi::updateLexemeCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT updateLexemeSignal();
        Q_EMIT updateLexemeSignalFull(worker);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT updateLexemeSignalE(error_type, error_str);
        Q_EMIT updateLexemeSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT updateLexemeSignalError(error_type, error_str);
        Q_EMIT updateLexemeSignalErrorFull(worker, error_type, error_str);
    }
}

void OAILexemeApi::updateLexemeByLanguage(const QString &language_id, const QString &lexeme_id, const ::OpenAPI::OptionalParam<QString> &if_match) {
    QString fullPath = QString(_serverConfigs["updateLexemeByLanguage"][_serverIndices.value("updateLexemeByLanguage")].URL()+"/languages/{languageID}/lexemes/{lexemeID}");
    
    if (_apiKeys.contains("Authorization")) {
        addHeaders("Authorization",_apiKeys.find("Authorization").value());
    }
    
    
    {
        QString language_idPathParam("{");
        language_idPathParam.append("languageID").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "languageID", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"languageID"+pathSuffix : pathPrefix;
        fullPath.replace(language_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(language_id)));
    }
    
    {
        QString lexeme_idPathParam("{");
        lexeme_idPathParam.append("lexemeID").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "lexemeID", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"lexemeID"+pathSuffix : pathPrefix;
        fullPath.replace(lexeme_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(lexeme_id)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "PATCH");


    if (if_match.hasValue())
    {
        if (!::OpenAPI::toStringValue(if_match.value()).isEmpty()) {
            input.headers.insert("ifMatch", ::OpenAPI::toStringValue(if_match.value()));
        }
        }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAILexemeApi::updateLexemeByLanguageCallback);
    connect(this, &OAILexemeApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAILexemeApi::updateLexemeByLanguageCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT updateLexemeByLanguageSignal();
        Q_EMIT updateLexemeByLanguageSignalFull(worker);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT updateLexemeByLanguageSignalE(error_type, error_str);
        Q_EMIT updateLexemeByLanguageSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT updateLexemeByLanguageSignalError(error_type, error_str);
        Q_EMIT updateLexemeByLanguageSignalErrorFull(worker, error_type, error_str);
    }
}

void OAILexemeApi::upsertLexeme(const ::OpenAPI::OptionalParam<QString> &if_match, const ::OpenAPI::OptionalParam<QString> &language_id) {
    QString fullPath = QString(_serverConfigs["upsertLexeme"][_serverIndices.value("upsertLexeme")].URL()+"/lexemes");
    
    if (_apiKeys.contains("Authorization")) {
        addHeaders("Authorization",_apiKeys.find("Authorization").value());
    }
    
    QString queryPrefix, querySuffix, queryDelimiter, queryStyle;
    if (language_id.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "languageID", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("languageID")).append(querySuffix).append(QUrl::toPercentEncoding(language_id.stringValue()));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "PUT");


    if (if_match.hasValue())
    {
        if (!::OpenAPI::toStringValue(if_match.value()).isEmpty()) {
            input.headers.insert("ifMatch", ::OpenAPI::toStringValue(if_match.value()));
        }
        }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAILexemeApi::upsertLexemeCallback);
    connect(this, &OAILexemeApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAILexemeApi::upsertLexemeCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT upsertLexemeSignal();
        Q_EMIT upsertLexemeSignalFull(worker);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT upsertLexemeSignalE(error_type, error_str);
        Q_EMIT upsertLexemeSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT upsertLexemeSignalError(error_type, error_str);
        Q_EMIT upsertLexemeSignalErrorFull(worker, error_type, error_str);
    }
}

void OAILexemeApi::upsertLexemeByLanguage(const QString &language_id, const ::OpenAPI::OptionalParam<QString> &if_match) {
    QString fullPath = QString(_serverConfigs["upsertLexemeByLanguage"][_serverIndices.value("upsertLexemeByLanguage")].URL()+"/languages/{languageID}/lexemes");
    
    if (_apiKeys.contains("Authorization")) {
        addHeaders("Authorization",_apiKeys.find("Authorization").value());
    }
    
    
    {
        QString language_idPathParam("{");
        language_idPathParam.append("languageID").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "languageID", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"languageID"+pathSuffix : pathPrefix;
        fullPath.replace(language_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(language_id)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "PUT");


    if (if_match.hasValue())
    {
        if (!::OpenAPI::toStringValue(if_match.value()).isEmpty()) {
            input.headers.insert("ifMatch", ::OpenAPI::toStringValue(if_match.value()));
        }
        }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAILexemeApi::upsertLexemeByLanguageCallback);
    connect(this, &OAILexemeApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAILexemeApi::upsertLexemeByLanguageCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT upsertLexemeByLanguageSignal();
        Q_EMIT upsertLexemeByLanguageSignalFull(worker);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT upsertLexemeByLanguageSignalE(error_type, error_str);
        Q_EMIT upsertLexemeByLanguageSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT upsertLexemeByLanguageSignalError(error_type, error_str);
        Q_EMIT upsertLexemeByLanguageSignalErrorFull(worker, error_type, error_str);
    }
}

void OAILexemeApi::tokenAvailable(){

    oauthToken token;
    switch (_OauthMethod) {
    case 1: //implicit flow
        token = _implicitFlow.getToken(_latestScope.join(" "));
        if(token.isValid()){
            _latestInput.headers.insert("Authorization", "Bearer " + token.getToken());
            _latestWorker->execute(&_latestInput);
        }else{
            _implicitFlow.removeToken(_latestScope.join(" "));
            qDebug() << "Could not retrieve a valid token";
        }
        break;
    case 2: //authorization flow
        token = _authFlow.getToken(_latestScope.join(" "));
        if(token.isValid()){
            _latestInput.headers.insert("Authorization", "Bearer " + token.getToken());
            _latestWorker->execute(&_latestInput);
        }else{
            _authFlow.removeToken(_latestScope.join(" "));
            qDebug() << "Could not retrieve a valid token";
        }
        break;
    case 3: //client credentials flow
        token = _credentialFlow.getToken(_latestScope.join(" "));
        if(token.isValid()){
            _latestInput.headers.insert("Authorization", "Bearer " + token.getToken());
            _latestWorker->execute(&_latestInput);
        }else{
            _credentialFlow.removeToken(_latestScope.join(" "));
            qDebug() << "Could not retrieve a valid token";
        }
        break;
    case 4: //resource owner password flow
        token = _passwordFlow.getToken(_latestScope.join(" "));
        if(token.isValid()){
            _latestInput.headers.insert("Authorization", "Bearer " + token.getToken());
            _latestWorker->execute(&_latestInput);
        }else{
            _credentialFlow.removeToken(_latestScope.join(" "));
            qDebug() << "Could not retrieve a valid token";
        }
        break;
    default:
        qDebug() << "No Oauth method set!";
        break;
    }
}
} // namespace OpenAPI
