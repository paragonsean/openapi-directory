/**
 * DLx
 * The Digital Linguistics (DLx) REST API
 *
 * The version of the OpenAPI document: 0.3.1
 * Contact: dhieber@umail.ucsb.edu
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAILexemeApi_H
#define OAI_OAILexemeApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAILexemeApi : public QObject {
    Q_OBJECT

public:
    OAILexemeApi(const int timeOut = 0);
    ~OAILexemeApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  language_id QString [optional]
    */
    virtual void addLexeme(const ::OpenAPI::OptionalParam<QString> &language_id = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  language_id QString [required]
    */
    virtual void addLexemeByLanguage(const QString &language_id);

    /**
    * @param[in]  lexeme_id QString [required]
    * @param[in]  if_match QString [optional]
    */
    virtual void deleteLexeme(const QString &lexeme_id, const ::OpenAPI::OptionalParam<QString> &if_match = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  language_id QString [required]
    * @param[in]  lexeme_id QString [required]
    * @param[in]  if_match QString [optional]
    */
    virtual void deleteLexemeByLanguage(const QString &language_id, const QString &lexeme_id, const ::OpenAPI::OptionalParam<QString> &if_match = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  lexeme_id QString [required]
    * @param[in]  deleted bool [optional]
    * @param[in]  if_none_match QString [optional]
    */
    virtual void getLexeme(const QString &lexeme_id, const ::OpenAPI::OptionalParam<bool> &deleted = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &if_none_match = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  language_id QString [required]
    * @param[in]  lexeme_id QString [required]
    * @param[in]  deleted bool [optional]
    * @param[in]  if_none_match QString [optional]
    */
    virtual void getLexemeByLanguage(const QString &language_id, const QString &lexeme_id, const ::OpenAPI::OptionalParam<bool> &deleted = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &if_none_match = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  continuation QString [optional]
    * @param[in]  deleted bool [optional]
    * @param[in]  if_modified_since QString [optional]
    * @param[in]  language_id QString [optional]
    * @param[in]  max_item_count QString [optional]
    * @param[in]  r_public QString [optional]
    */
    virtual void getLexemes(const ::OpenAPI::OptionalParam<QString> &continuation = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &deleted = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &if_modified_since = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &language_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &max_item_count = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &r_public = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  language_id QString [required]
    * @param[in]  continuation QString [optional]
    * @param[in]  deleted bool [optional]
    * @param[in]  if_modified_since QString [optional]
    * @param[in]  max_item_count QString [optional]
    * @param[in]  r_public QString [optional]
    */
    virtual void getLexemesByLanguage(const QString &language_id, const ::OpenAPI::OptionalParam<QString> &continuation = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &deleted = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &if_modified_since = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &max_item_count = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &r_public = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  lexeme_id QString [required]
    * @param[in]  if_match QString [optional]
    */
    virtual void updateLexeme(const QString &lexeme_id, const ::OpenAPI::OptionalParam<QString> &if_match = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  language_id QString [required]
    * @param[in]  lexeme_id QString [required]
    * @param[in]  if_match QString [optional]
    */
    virtual void updateLexemeByLanguage(const QString &language_id, const QString &lexeme_id, const ::OpenAPI::OptionalParam<QString> &if_match = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  if_match QString [optional]
    * @param[in]  language_id QString [optional]
    */
    virtual void upsertLexeme(const ::OpenAPI::OptionalParam<QString> &if_match = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &language_id = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  language_id QString [required]
    * @param[in]  if_match QString [optional]
    */
    virtual void upsertLexemeByLanguage(const QString &language_id, const ::OpenAPI::OptionalParam<QString> &if_match = ::OpenAPI::OptionalParam<QString>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void addLexemeCallback(OAIHttpRequestWorker *worker);
    void addLexemeByLanguageCallback(OAIHttpRequestWorker *worker);
    void deleteLexemeCallback(OAIHttpRequestWorker *worker);
    void deleteLexemeByLanguageCallback(OAIHttpRequestWorker *worker);
    void getLexemeCallback(OAIHttpRequestWorker *worker);
    void getLexemeByLanguageCallback(OAIHttpRequestWorker *worker);
    void getLexemesCallback(OAIHttpRequestWorker *worker);
    void getLexemesByLanguageCallback(OAIHttpRequestWorker *worker);
    void updateLexemeCallback(OAIHttpRequestWorker *worker);
    void updateLexemeByLanguageCallback(OAIHttpRequestWorker *worker);
    void upsertLexemeCallback(OAIHttpRequestWorker *worker);
    void upsertLexemeByLanguageCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void addLexemeSignal();
    void addLexemeByLanguageSignal();
    void deleteLexemeSignal();
    void deleteLexemeByLanguageSignal();
    void getLexemeSignal();
    void getLexemeByLanguageSignal();
    void getLexemesSignal();
    void getLexemesByLanguageSignal();
    void updateLexemeSignal();
    void updateLexemeByLanguageSignal();
    void upsertLexemeSignal();
    void upsertLexemeByLanguageSignal();


    void addLexemeSignalFull(OAIHttpRequestWorker *worker);
    void addLexemeByLanguageSignalFull(OAIHttpRequestWorker *worker);
    void deleteLexemeSignalFull(OAIHttpRequestWorker *worker);
    void deleteLexemeByLanguageSignalFull(OAIHttpRequestWorker *worker);
    void getLexemeSignalFull(OAIHttpRequestWorker *worker);
    void getLexemeByLanguageSignalFull(OAIHttpRequestWorker *worker);
    void getLexemesSignalFull(OAIHttpRequestWorker *worker);
    void getLexemesByLanguageSignalFull(OAIHttpRequestWorker *worker);
    void updateLexemeSignalFull(OAIHttpRequestWorker *worker);
    void updateLexemeByLanguageSignalFull(OAIHttpRequestWorker *worker);
    void upsertLexemeSignalFull(OAIHttpRequestWorker *worker);
    void upsertLexemeByLanguageSignalFull(OAIHttpRequestWorker *worker);

    Q_DECL_DEPRECATED_X("Use addLexemeSignalError() instead")
    void addLexemeSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void addLexemeSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use addLexemeByLanguageSignalError() instead")
    void addLexemeByLanguageSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void addLexemeByLanguageSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteLexemeSignalError() instead")
    void deleteLexemeSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void deleteLexemeSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteLexemeByLanguageSignalError() instead")
    void deleteLexemeByLanguageSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void deleteLexemeByLanguageSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getLexemeSignalError() instead")
    void getLexemeSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void getLexemeSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getLexemeByLanguageSignalError() instead")
    void getLexemeByLanguageSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void getLexemeByLanguageSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getLexemesSignalError() instead")
    void getLexemesSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void getLexemesSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getLexemesByLanguageSignalError() instead")
    void getLexemesByLanguageSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void getLexemesByLanguageSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateLexemeSignalError() instead")
    void updateLexemeSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void updateLexemeSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateLexemeByLanguageSignalError() instead")
    void updateLexemeByLanguageSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void updateLexemeByLanguageSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use upsertLexemeSignalError() instead")
    void upsertLexemeSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void upsertLexemeSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use upsertLexemeByLanguageSignalError() instead")
    void upsertLexemeByLanguageSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void upsertLexemeByLanguageSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use addLexemeSignalErrorFull() instead")
    void addLexemeSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void addLexemeSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use addLexemeByLanguageSignalErrorFull() instead")
    void addLexemeByLanguageSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void addLexemeByLanguageSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteLexemeSignalErrorFull() instead")
    void deleteLexemeSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteLexemeSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteLexemeByLanguageSignalErrorFull() instead")
    void deleteLexemeByLanguageSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteLexemeByLanguageSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getLexemeSignalErrorFull() instead")
    void getLexemeSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getLexemeSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getLexemeByLanguageSignalErrorFull() instead")
    void getLexemeByLanguageSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getLexemeByLanguageSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getLexemesSignalErrorFull() instead")
    void getLexemesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getLexemesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getLexemesByLanguageSignalErrorFull() instead")
    void getLexemesByLanguageSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getLexemesByLanguageSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateLexemeSignalErrorFull() instead")
    void updateLexemeSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateLexemeSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateLexemeByLanguageSignalErrorFull() instead")
    void updateLexemeByLanguageSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateLexemeByLanguageSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use upsertLexemeSignalErrorFull() instead")
    void upsertLexemeSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void upsertLexemeSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use upsertLexemeByLanguageSignalErrorFull() instead")
    void upsertLexemeByLanguageSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void upsertLexemeByLanguageSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
