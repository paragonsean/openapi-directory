/*
 * DLx
 * The Digital Linguistics (DLx) REST API
 *
 * The version of the OpenAPI document: 0.3.1
 * Contact: dhieber@umail.ucsb.edu
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for LanguageApi
 */
@Disabled
public class LanguageApiTest {

    private final LanguageApi api = new LanguageApi();

    /**
     * Add a new Language
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void addLanguageTest() throws ApiException {
        Object body = null;
        api.addLanguage(body);
        // TODO: test validations
    }

    /**
     * Add a new Lexeme to a Language
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void addLexemeByLanguageTest() throws ApiException {
        String languageID = null;
        api.addLexemeByLanguage(languageID);
        // TODO: test validations
    }

    /**
     * Delete a Language by ID
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteLanguageTest() throws ApiException {
        String languageID = null;
        String ifMatch = null;
        api.deleteLanguage(languageID, ifMatch);
        // TODO: test validations
    }

    /**
     * Delete a Lexeme by ID
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteLexemeByLanguageTest() throws ApiException {
        String languageID = null;
        String lexemeID = null;
        String ifMatch = null;
        api.deleteLexemeByLanguage(languageID, lexemeID, ifMatch);
        // TODO: test validations
    }

    /**
     * Retrieve a Language by ID
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getLanguageTest() throws ApiException {
        String languageID = null;
        Boolean deleted = null;
        String ifNoneMatch = null;
        api.getLanguage(languageID, deleted, ifNoneMatch);
        // TODO: test validations
    }

    /**
     * Get all Languages
     *
     * Retrieves all the Languages that the authenticated user or client has permission to access.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getLanguagesTest() throws ApiException {
        String continuation = null;
        Boolean deleted = null;
        String ifModifiedSince = null;
        String maxItemCount = null;
        String _public = null;
        api.getLanguages(continuation, deleted, ifModifiedSince, maxItemCount, _public);
        // TODO: test validations
    }

    /**
     * Get a Lexeme by ID
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getLexemeByLanguageTest() throws ApiException {
        String languageID = null;
        String lexemeID = null;
        Boolean deleted = null;
        String ifNoneMatch = null;
        api.getLexemeByLanguage(languageID, lexemeID, deleted, ifNoneMatch);
        // TODO: test validations
    }

    /**
     * Get all Lexemes for a Language
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getLexemesByLanguageTest() throws ApiException {
        String languageID = null;
        String continuation = null;
        Boolean deleted = null;
        String ifModifiedSince = null;
        String maxItemCount = null;
        String _public = null;
        api.getLexemesByLanguage(languageID, continuation, deleted, ifModifiedSince, maxItemCount, _public);
        // TODO: test validations
    }

    /**
     * Perform a partial update on a Language
     *
     * Performs a partial update the Language whose ID is specified in the URL. If the Language object has an &#x60;id&#x60; property, is ignored in favor of the ID in the URL.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateLanguageTest() throws ApiException {
        String languageID = null;
        Object body = null;
        String ifMatch = null;
        api.updateLanguage(languageID, body, ifMatch);
        // TODO: test validations
    }

    /**
     * Upsert (create or replace) a Language
     *
     * Creates a Language if it does not yet exist (i.e. if the resource does not have an &#x60;id&#x60; property yet), or replaces the existing Language resource if it does. Note that this replaces the *entire* Language. It is not a partial update.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void upsertLanguageTest() throws ApiException {
        Object body = null;
        String ifMatch = null;
        api.upsertLanguage(body, ifMatch);
        // TODO: test validations
    }

    /**
     * Upsert (add or replace) a Lexeme
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void upsertLexemeByLanguageTest() throws ApiException {
        String languageID = null;
        String ifMatch = null;
        api.upsertLexemeByLanguage(languageID, ifMatch);
        // TODO: test validations
    }

}
