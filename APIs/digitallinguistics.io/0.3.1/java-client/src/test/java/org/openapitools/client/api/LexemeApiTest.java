/*
 * DLx
 * The Digital Linguistics (DLx) REST API
 *
 * The version of the OpenAPI document: 0.3.1
 * Contact: dhieber@umail.ucsb.edu
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for LexemeApi
 */
@Disabled
public class LexemeApiTest {

    private final LexemeApi api = new LexemeApi();

    /**
     * Add a new Lexeme
     *
     * Add a new Lexeme. A &#x60;languageID&#x60; must be provided either as a query parameter, or as an attribute on the Lexeme body.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void addLexemeTest() throws ApiException {
        String languageID = null;
        api.addLexeme(languageID);
        // TODO: test validations
    }

    /**
     * Add a new Lexeme to a Language
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void addLexemeByLanguage_0Test() throws ApiException {
        String languageID = null;
        api.addLexemeByLanguage_0(languageID);
        // TODO: test validations
    }

    /**
     * Delete a Lexeme by ID
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteLexemeTest() throws ApiException {
        String lexemeID = null;
        String ifMatch = null;
        api.deleteLexeme(lexemeID, ifMatch);
        // TODO: test validations
    }

    /**
     * Delete a Lexeme by ID
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteLexemeByLanguage_0Test() throws ApiException {
        String languageID = null;
        String lexemeID = null;
        String ifMatch = null;
        api.deleteLexemeByLanguage_0(languageID, lexemeID, ifMatch);
        // TODO: test validations
    }

    /**
     * Get a Lexeme by ID
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getLexemeTest() throws ApiException {
        String lexemeID = null;
        Boolean deleted = null;
        String ifNoneMatch = null;
        api.getLexeme(lexemeID, deleted, ifNoneMatch);
        // TODO: test validations
    }

    /**
     * Get a Lexeme by ID
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getLexemeByLanguage_0Test() throws ApiException {
        String languageID = null;
        String lexemeID = null;
        Boolean deleted = null;
        String ifNoneMatch = null;
        api.getLexemeByLanguage_0(languageID, lexemeID, deleted, ifNoneMatch);
        // TODO: test validations
    }

    /**
     * Get all Lexemes
     *
     * Retrieve all Lexemes that the authenticated user has permission to access. Include a &#x60;languageID&#x60; query parameter to limit results to Lexemes from a particular Language.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getLexemesTest() throws ApiException {
        String continuation = null;
        Boolean deleted = null;
        String ifModifiedSince = null;
        String languageID = null;
        String maxItemCount = null;
        String _public = null;
        api.getLexemes(continuation, deleted, ifModifiedSince, languageID, maxItemCount, _public);
        // TODO: test validations
    }

    /**
     * Get all Lexemes for a Language
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getLexemesByLanguage_0Test() throws ApiException {
        String languageID = null;
        String continuation = null;
        Boolean deleted = null;
        String ifModifiedSince = null;
        String maxItemCount = null;
        String _public = null;
        api.getLexemesByLanguage_0(languageID, continuation, deleted, ifModifiedSince, maxItemCount, _public);
        // TODO: test validations
    }

    /**
     * Perform a partial update on a Lexeme
     *
     * Perform a partial update on a Lexeme.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateLexemeTest() throws ApiException {
        String lexemeID = null;
        String ifMatch = null;
        api.updateLexeme(lexemeID, ifMatch);
        // TODO: test validations
    }

    /**
     * Perform a partial update on a Lexeme
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateLexemeByLanguageTest() throws ApiException {
        String languageID = null;
        String lexemeID = null;
        String ifMatch = null;
        api.updateLexemeByLanguage(languageID, lexemeID, ifMatch);
        // TODO: test validations
    }

    /**
     * Upsert (add or replace) a Lexeme
     *
     * Upsert (add or replace) a Lexeme. A &#x60;languageID&#x60; must be provided either as a query parameter, or as an attribute on the Lexeme body.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void upsertLexemeTest() throws ApiException {
        String ifMatch = null;
        String languageID = null;
        api.upsertLexeme(ifMatch, languageID);
        // TODO: test validations
    }

    /**
     * Upsert (add or replace) a Lexeme
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void upsertLexemeByLanguage_0Test() throws ApiException {
        String languageID = null;
        String ifMatch = null;
        api.upsertLexemeByLanguage_0(languageID, ifMatch);
        // TODO: test validations
    }

}
