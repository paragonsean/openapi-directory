/*
 * DLx
 * The Digital Linguistics (DLx) REST API
 *
 * The version of the OpenAPI document: 0.3.1
 * Contact: dhieber@umail.ucsb.edu
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;



import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class LanguageApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public LanguageApi() {
        this(Configuration.getDefaultApiClient());
    }

    public LanguageApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for addLanguage
     * @param body A database resource to upsert (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> 201: The resource was created successfully. </td><td>  * Last-Modified - The time that the item was last modified <br>  </td></tr>
     </table>
     */
    public okhttp3.Call addLanguageCall(Object body, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/languages";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call addLanguageValidateBeforeCall(Object body, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling addLanguage(Async)");
        }

        return addLanguageCall(body, _callback);

    }

    /**
     * Add a new Language
     * 
     * @param body A database resource to upsert (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> 201: The resource was created successfully. </td><td>  * Last-Modified - The time that the item was last modified <br>  </td></tr>
     </table>
     */
    public void addLanguage(Object body) throws ApiException {
        addLanguageWithHttpInfo(body);
    }

    /**
     * Add a new Language
     * 
     * @param body A database resource to upsert (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> 201: The resource was created successfully. </td><td>  * Last-Modified - The time that the item was last modified <br>  </td></tr>
     </table>
     */
    public ApiResponse<Void> addLanguageWithHttpInfo(Object body) throws ApiException {
        okhttp3.Call localVarCall = addLanguageValidateBeforeCall(body, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Add a new Language (asynchronously)
     * 
     * @param body A database resource to upsert (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> 201: The resource was created successfully. </td><td>  * Last-Modified - The time that the item was last modified <br>  </td></tr>
     </table>
     */
    public okhttp3.Call addLanguageAsync(Object body, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = addLanguageValidateBeforeCall(body, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for addLexemeByLanguage
     * @param languageID The ID of the Language to perform the operation on (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> 201: The resource was created successfully. </td><td>  * Last-Modified - The time that the item was last modified <br>  </td></tr>
     </table>
     */
    public okhttp3.Call addLexemeByLanguageCall(String languageID, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/languages/{languageID}/lexemes"
            .replace("{" + "languageID" + "}", localVarApiClient.escapeString(languageID.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call addLexemeByLanguageValidateBeforeCall(String languageID, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'languageID' is set
        if (languageID == null) {
            throw new ApiException("Missing the required parameter 'languageID' when calling addLexemeByLanguage(Async)");
        }

        return addLexemeByLanguageCall(languageID, _callback);

    }

    /**
     * Add a new Lexeme to a Language
     * 
     * @param languageID The ID of the Language to perform the operation on (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> 201: The resource was created successfully. </td><td>  * Last-Modified - The time that the item was last modified <br>  </td></tr>
     </table>
     */
    public void addLexemeByLanguage(String languageID) throws ApiException {
        addLexemeByLanguageWithHttpInfo(languageID);
    }

    /**
     * Add a new Lexeme to a Language
     * 
     * @param languageID The ID of the Language to perform the operation on (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> 201: The resource was created successfully. </td><td>  * Last-Modified - The time that the item was last modified <br>  </td></tr>
     </table>
     */
    public ApiResponse<Void> addLexemeByLanguageWithHttpInfo(String languageID) throws ApiException {
        okhttp3.Call localVarCall = addLexemeByLanguageValidateBeforeCall(languageID, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Add a new Lexeme to a Language (asynchronously)
     * 
     * @param languageID The ID of the Language to perform the operation on (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> 201: The resource was created successfully. </td><td>  * Last-Modified - The time that the item was last modified <br>  </td></tr>
     </table>
     */
    public okhttp3.Call addLexemeByLanguageAsync(String languageID, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = addLexemeByLanguageValidateBeforeCall(languageID, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteLanguage
     * @param languageID The ID of the Language to perform the operation on (required)
     * @param ifMatch The &#x60;If-Match&#x60; header is used with PUT and DELETE requests to check whether you have the most up-to-date version of the resource before updating or deleting it. The value of the &#x60;If-Match&#x60; header is the ETag (&#x60;_etag&#x60;) property of the resource. It is recommended that your application use this header whenever possible to avoid data conflicts. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> 204: Delete operation successful. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteLanguageCall(String languageID, String ifMatch, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/languages/{languageID}"
            .replace("{" + "languageID" + "}", localVarApiClient.escapeString(languageID.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (ifMatch != null) {
            localVarHeaderParams.put("ifMatch", localVarApiClient.parameterToString(ifMatch));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteLanguageValidateBeforeCall(String languageID, String ifMatch, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'languageID' is set
        if (languageID == null) {
            throw new ApiException("Missing the required parameter 'languageID' when calling deleteLanguage(Async)");
        }

        return deleteLanguageCall(languageID, ifMatch, _callback);

    }

    /**
     * Delete a Language by ID
     * 
     * @param languageID The ID of the Language to perform the operation on (required)
     * @param ifMatch The &#x60;If-Match&#x60; header is used with PUT and DELETE requests to check whether you have the most up-to-date version of the resource before updating or deleting it. The value of the &#x60;If-Match&#x60; header is the ETag (&#x60;_etag&#x60;) property of the resource. It is recommended that your application use this header whenever possible to avoid data conflicts. (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> 204: Delete operation successful. </td><td>  -  </td></tr>
     </table>
     */
    public void deleteLanguage(String languageID, String ifMatch) throws ApiException {
        deleteLanguageWithHttpInfo(languageID, ifMatch);
    }

    /**
     * Delete a Language by ID
     * 
     * @param languageID The ID of the Language to perform the operation on (required)
     * @param ifMatch The &#x60;If-Match&#x60; header is used with PUT and DELETE requests to check whether you have the most up-to-date version of the resource before updating or deleting it. The value of the &#x60;If-Match&#x60; header is the ETag (&#x60;_etag&#x60;) property of the resource. It is recommended that your application use this header whenever possible to avoid data conflicts. (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> 204: Delete operation successful. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> deleteLanguageWithHttpInfo(String languageID, String ifMatch) throws ApiException {
        okhttp3.Call localVarCall = deleteLanguageValidateBeforeCall(languageID, ifMatch, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Delete a Language by ID (asynchronously)
     * 
     * @param languageID The ID of the Language to perform the operation on (required)
     * @param ifMatch The &#x60;If-Match&#x60; header is used with PUT and DELETE requests to check whether you have the most up-to-date version of the resource before updating or deleting it. The value of the &#x60;If-Match&#x60; header is the ETag (&#x60;_etag&#x60;) property of the resource. It is recommended that your application use this header whenever possible to avoid data conflicts. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> 204: Delete operation successful. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteLanguageAsync(String languageID, String ifMatch, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteLanguageValidateBeforeCall(languageID, ifMatch, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteLexemeByLanguage
     * @param languageID The ID of the Language to perform the operation on (required)
     * @param lexemeID The ID of the Lexeme to perform the operation on (required)
     * @param ifMatch The &#x60;If-Match&#x60; header is used with PUT and DELETE requests to check whether you have the most up-to-date version of the resource before updating or deleting it. The value of the &#x60;If-Match&#x60; header is the ETag (&#x60;_etag&#x60;) property of the resource. It is recommended that your application use this header whenever possible to avoid data conflicts. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> 204: Delete operation successful. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteLexemeByLanguageCall(String languageID, String lexemeID, String ifMatch, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/languages/{languageID}/lexemes/{lexemeID}"
            .replace("{" + "languageID" + "}", localVarApiClient.escapeString(languageID.toString()))
            .replace("{" + "lexemeID" + "}", localVarApiClient.escapeString(lexemeID.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (ifMatch != null) {
            localVarHeaderParams.put("ifMatch", localVarApiClient.parameterToString(ifMatch));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteLexemeByLanguageValidateBeforeCall(String languageID, String lexemeID, String ifMatch, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'languageID' is set
        if (languageID == null) {
            throw new ApiException("Missing the required parameter 'languageID' when calling deleteLexemeByLanguage(Async)");
        }

        // verify the required parameter 'lexemeID' is set
        if (lexemeID == null) {
            throw new ApiException("Missing the required parameter 'lexemeID' when calling deleteLexemeByLanguage(Async)");
        }

        return deleteLexemeByLanguageCall(languageID, lexemeID, ifMatch, _callback);

    }

    /**
     * Delete a Lexeme by ID
     * 
     * @param languageID The ID of the Language to perform the operation on (required)
     * @param lexemeID The ID of the Lexeme to perform the operation on (required)
     * @param ifMatch The &#x60;If-Match&#x60; header is used with PUT and DELETE requests to check whether you have the most up-to-date version of the resource before updating or deleting it. The value of the &#x60;If-Match&#x60; header is the ETag (&#x60;_etag&#x60;) property of the resource. It is recommended that your application use this header whenever possible to avoid data conflicts. (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> 204: Delete operation successful. </td><td>  -  </td></tr>
     </table>
     */
    public void deleteLexemeByLanguage(String languageID, String lexemeID, String ifMatch) throws ApiException {
        deleteLexemeByLanguageWithHttpInfo(languageID, lexemeID, ifMatch);
    }

    /**
     * Delete a Lexeme by ID
     * 
     * @param languageID The ID of the Language to perform the operation on (required)
     * @param lexemeID The ID of the Lexeme to perform the operation on (required)
     * @param ifMatch The &#x60;If-Match&#x60; header is used with PUT and DELETE requests to check whether you have the most up-to-date version of the resource before updating or deleting it. The value of the &#x60;If-Match&#x60; header is the ETag (&#x60;_etag&#x60;) property of the resource. It is recommended that your application use this header whenever possible to avoid data conflicts. (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> 204: Delete operation successful. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> deleteLexemeByLanguageWithHttpInfo(String languageID, String lexemeID, String ifMatch) throws ApiException {
        okhttp3.Call localVarCall = deleteLexemeByLanguageValidateBeforeCall(languageID, lexemeID, ifMatch, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Delete a Lexeme by ID (asynchronously)
     * 
     * @param languageID The ID of the Language to perform the operation on (required)
     * @param lexemeID The ID of the Lexeme to perform the operation on (required)
     * @param ifMatch The &#x60;If-Match&#x60; header is used with PUT and DELETE requests to check whether you have the most up-to-date version of the resource before updating or deleting it. The value of the &#x60;If-Match&#x60; header is the ETag (&#x60;_etag&#x60;) property of the resource. It is recommended that your application use this header whenever possible to avoid data conflicts. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> 204: Delete operation successful. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteLexemeByLanguageAsync(String languageID, String lexemeID, String ifMatch, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteLexemeByLanguageValidateBeforeCall(languageID, lexemeID, ifMatch, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for getLanguage
     * @param languageID The ID of the Language to perform the operation on (required)
     * @param deleted Setting the &#x60;deleted&#x60; option to &#x60;true&#x60; will return results that have been marked for deletion, but not yet deleted from the database. Otherwise requests for a resource marked for deletion will return a 410 error. (optional, default to false)
     * @param ifNoneMatch If &#x60;If-None-Match&#x60; header is used with GET requests to check whether you already have the most up-to-date version of the resource, and therefore do not need the resource sent again. The value of the &#x60;If-None-Match&#x60; header is the ETag (&#x60;_etag&#x60;) property of the resource. It is recommended that your application use this header whenever possible to reduce bandwidth. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200: Operation successful. </td><td>  * dlx-continuation - A continuation token for retrieving more results <br>  * dlx-item-count - The number of items returned in the response <br>  * Last-Modified - The time that the item was last modified <br>  </td></tr>
        <tr><td> 304 </td><td> 304: Not modified. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getLanguageCall(String languageID, Boolean deleted, String ifNoneMatch, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/languages/{languageID}"
            .replace("{" + "languageID" + "}", localVarApiClient.escapeString(languageID.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (deleted != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("deleted", deleted));
        }

        if (ifNoneMatch != null) {
            localVarHeaderParams.put("ifNoneMatch", localVarApiClient.parameterToString(ifNoneMatch));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getLanguageValidateBeforeCall(String languageID, Boolean deleted, String ifNoneMatch, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'languageID' is set
        if (languageID == null) {
            throw new ApiException("Missing the required parameter 'languageID' when calling getLanguage(Async)");
        }

        return getLanguageCall(languageID, deleted, ifNoneMatch, _callback);

    }

    /**
     * Retrieve a Language by ID
     * 
     * @param languageID The ID of the Language to perform the operation on (required)
     * @param deleted Setting the &#x60;deleted&#x60; option to &#x60;true&#x60; will return results that have been marked for deletion, but not yet deleted from the database. Otherwise requests for a resource marked for deletion will return a 410 error. (optional, default to false)
     * @param ifNoneMatch If &#x60;If-None-Match&#x60; header is used with GET requests to check whether you already have the most up-to-date version of the resource, and therefore do not need the resource sent again. The value of the &#x60;If-None-Match&#x60; header is the ETag (&#x60;_etag&#x60;) property of the resource. It is recommended that your application use this header whenever possible to reduce bandwidth. (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200: Operation successful. </td><td>  * dlx-continuation - A continuation token for retrieving more results <br>  * dlx-item-count - The number of items returned in the response <br>  * Last-Modified - The time that the item was last modified <br>  </td></tr>
        <tr><td> 304 </td><td> 304: Not modified. </td><td>  -  </td></tr>
     </table>
     */
    public void getLanguage(String languageID, Boolean deleted, String ifNoneMatch) throws ApiException {
        getLanguageWithHttpInfo(languageID, deleted, ifNoneMatch);
    }

    /**
     * Retrieve a Language by ID
     * 
     * @param languageID The ID of the Language to perform the operation on (required)
     * @param deleted Setting the &#x60;deleted&#x60; option to &#x60;true&#x60; will return results that have been marked for deletion, but not yet deleted from the database. Otherwise requests for a resource marked for deletion will return a 410 error. (optional, default to false)
     * @param ifNoneMatch If &#x60;If-None-Match&#x60; header is used with GET requests to check whether you already have the most up-to-date version of the resource, and therefore do not need the resource sent again. The value of the &#x60;If-None-Match&#x60; header is the ETag (&#x60;_etag&#x60;) property of the resource. It is recommended that your application use this header whenever possible to reduce bandwidth. (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200: Operation successful. </td><td>  * dlx-continuation - A continuation token for retrieving more results <br>  * dlx-item-count - The number of items returned in the response <br>  * Last-Modified - The time that the item was last modified <br>  </td></tr>
        <tr><td> 304 </td><td> 304: Not modified. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> getLanguageWithHttpInfo(String languageID, Boolean deleted, String ifNoneMatch) throws ApiException {
        okhttp3.Call localVarCall = getLanguageValidateBeforeCall(languageID, deleted, ifNoneMatch, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Retrieve a Language by ID (asynchronously)
     * 
     * @param languageID The ID of the Language to perform the operation on (required)
     * @param deleted Setting the &#x60;deleted&#x60; option to &#x60;true&#x60; will return results that have been marked for deletion, but not yet deleted from the database. Otherwise requests for a resource marked for deletion will return a 410 error. (optional, default to false)
     * @param ifNoneMatch If &#x60;If-None-Match&#x60; header is used with GET requests to check whether you already have the most up-to-date version of the resource, and therefore do not need the resource sent again. The value of the &#x60;If-None-Match&#x60; header is the ETag (&#x60;_etag&#x60;) property of the resource. It is recommended that your application use this header whenever possible to reduce bandwidth. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200: Operation successful. </td><td>  * dlx-continuation - A continuation token for retrieving more results <br>  * dlx-item-count - The number of items returned in the response <br>  * Last-Modified - The time that the item was last modified <br>  </td></tr>
        <tr><td> 304 </td><td> 304: Not modified. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getLanguageAsync(String languageID, Boolean deleted, String ifNoneMatch, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = getLanguageValidateBeforeCall(languageID, deleted, ifNoneMatch, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for getLanguages
     * @param continuation The &#x60;dlx-continuation&#x60; header is used to send a continuation token with the request, when retrieving the next page of results. (optional)
     * @param deleted Setting the &#x60;deleted&#x60; option to &#x60;true&#x60; will return results that have been marked for deletion, but not yet deleted from the database. Otherwise requests for a resource marked for deletion will return a 410 error. (optional, default to false)
     * @param ifModifiedSince The &#x60;If-Modified-Since&#x60; header is used to retrieve only results modified since a given time. The value of this header must be a valid date string. (optional)
     * @param maxItemCount The &#x60;dlx-max-item-count&#x60; header is used to limit the number of results to a certain amount at a time (by default all results will be returned). If there are more results to be returned, a continuation token will also be sent in the &#x60;dlx-continuation&#x60; header. (optional)
     * @param _public Set this parameter to &#x60;true&#x60; to include all publicly-accessible resources, not just those that the user is listed as an Owner, Contributor, or Viewer for. (optional, default to false)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200: Operation successful. </td><td>  * dlx-continuation - A continuation token for retrieving more results <br>  * dlx-item-count - The number of items returned in the response <br>  * Last-Modified - The time that the item was last modified <br>  </td></tr>
     </table>
     */
    public okhttp3.Call getLanguagesCall(String continuation, Boolean deleted, String ifModifiedSince, String maxItemCount, String _public, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/languages";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (deleted != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("deleted", deleted));
        }

        if (_public != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("public", _public));
        }

        if (continuation != null) {
            localVarHeaderParams.put("continuation", localVarApiClient.parameterToString(continuation));
        }

        if (ifModifiedSince != null) {
            localVarHeaderParams.put("ifModifiedSince", localVarApiClient.parameterToString(ifModifiedSince));
        }

        if (maxItemCount != null) {
            localVarHeaderParams.put("maxItemCount", localVarApiClient.parameterToString(maxItemCount));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getLanguagesValidateBeforeCall(String continuation, Boolean deleted, String ifModifiedSince, String maxItemCount, String _public, final ApiCallback _callback) throws ApiException {
        return getLanguagesCall(continuation, deleted, ifModifiedSince, maxItemCount, _public, _callback);

    }

    /**
     * Get all Languages
     * Retrieves all the Languages that the authenticated user or client has permission to access.
     * @param continuation The &#x60;dlx-continuation&#x60; header is used to send a continuation token with the request, when retrieving the next page of results. (optional)
     * @param deleted Setting the &#x60;deleted&#x60; option to &#x60;true&#x60; will return results that have been marked for deletion, but not yet deleted from the database. Otherwise requests for a resource marked for deletion will return a 410 error. (optional, default to false)
     * @param ifModifiedSince The &#x60;If-Modified-Since&#x60; header is used to retrieve only results modified since a given time. The value of this header must be a valid date string. (optional)
     * @param maxItemCount The &#x60;dlx-max-item-count&#x60; header is used to limit the number of results to a certain amount at a time (by default all results will be returned). If there are more results to be returned, a continuation token will also be sent in the &#x60;dlx-continuation&#x60; header. (optional)
     * @param _public Set this parameter to &#x60;true&#x60; to include all publicly-accessible resources, not just those that the user is listed as an Owner, Contributor, or Viewer for. (optional, default to false)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200: Operation successful. </td><td>  * dlx-continuation - A continuation token for retrieving more results <br>  * dlx-item-count - The number of items returned in the response <br>  * Last-Modified - The time that the item was last modified <br>  </td></tr>
     </table>
     */
    public void getLanguages(String continuation, Boolean deleted, String ifModifiedSince, String maxItemCount, String _public) throws ApiException {
        getLanguagesWithHttpInfo(continuation, deleted, ifModifiedSince, maxItemCount, _public);
    }

    /**
     * Get all Languages
     * Retrieves all the Languages that the authenticated user or client has permission to access.
     * @param continuation The &#x60;dlx-continuation&#x60; header is used to send a continuation token with the request, when retrieving the next page of results. (optional)
     * @param deleted Setting the &#x60;deleted&#x60; option to &#x60;true&#x60; will return results that have been marked for deletion, but not yet deleted from the database. Otherwise requests for a resource marked for deletion will return a 410 error. (optional, default to false)
     * @param ifModifiedSince The &#x60;If-Modified-Since&#x60; header is used to retrieve only results modified since a given time. The value of this header must be a valid date string. (optional)
     * @param maxItemCount The &#x60;dlx-max-item-count&#x60; header is used to limit the number of results to a certain amount at a time (by default all results will be returned). If there are more results to be returned, a continuation token will also be sent in the &#x60;dlx-continuation&#x60; header. (optional)
     * @param _public Set this parameter to &#x60;true&#x60; to include all publicly-accessible resources, not just those that the user is listed as an Owner, Contributor, or Viewer for. (optional, default to false)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200: Operation successful. </td><td>  * dlx-continuation - A continuation token for retrieving more results <br>  * dlx-item-count - The number of items returned in the response <br>  * Last-Modified - The time that the item was last modified <br>  </td></tr>
     </table>
     */
    public ApiResponse<Void> getLanguagesWithHttpInfo(String continuation, Boolean deleted, String ifModifiedSince, String maxItemCount, String _public) throws ApiException {
        okhttp3.Call localVarCall = getLanguagesValidateBeforeCall(continuation, deleted, ifModifiedSince, maxItemCount, _public, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Get all Languages (asynchronously)
     * Retrieves all the Languages that the authenticated user or client has permission to access.
     * @param continuation The &#x60;dlx-continuation&#x60; header is used to send a continuation token with the request, when retrieving the next page of results. (optional)
     * @param deleted Setting the &#x60;deleted&#x60; option to &#x60;true&#x60; will return results that have been marked for deletion, but not yet deleted from the database. Otherwise requests for a resource marked for deletion will return a 410 error. (optional, default to false)
     * @param ifModifiedSince The &#x60;If-Modified-Since&#x60; header is used to retrieve only results modified since a given time. The value of this header must be a valid date string. (optional)
     * @param maxItemCount The &#x60;dlx-max-item-count&#x60; header is used to limit the number of results to a certain amount at a time (by default all results will be returned). If there are more results to be returned, a continuation token will also be sent in the &#x60;dlx-continuation&#x60; header. (optional)
     * @param _public Set this parameter to &#x60;true&#x60; to include all publicly-accessible resources, not just those that the user is listed as an Owner, Contributor, or Viewer for. (optional, default to false)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200: Operation successful. </td><td>  * dlx-continuation - A continuation token for retrieving more results <br>  * dlx-item-count - The number of items returned in the response <br>  * Last-Modified - The time that the item was last modified <br>  </td></tr>
     </table>
     */
    public okhttp3.Call getLanguagesAsync(String continuation, Boolean deleted, String ifModifiedSince, String maxItemCount, String _public, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = getLanguagesValidateBeforeCall(continuation, deleted, ifModifiedSince, maxItemCount, _public, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for getLexemeByLanguage
     * @param languageID The ID of the Language to perform the operation on (required)
     * @param lexemeID The ID of the Lexeme to perform the operation on (required)
     * @param deleted Setting the &#x60;deleted&#x60; option to &#x60;true&#x60; will return results that have been marked for deletion, but not yet deleted from the database. Otherwise requests for a resource marked for deletion will return a 410 error. (optional, default to false)
     * @param ifNoneMatch If &#x60;If-None-Match&#x60; header is used with GET requests to check whether you already have the most up-to-date version of the resource, and therefore do not need the resource sent again. The value of the &#x60;If-None-Match&#x60; header is the ETag (&#x60;_etag&#x60;) property of the resource. It is recommended that your application use this header whenever possible to reduce bandwidth. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200: Operation successful. </td><td>  * dlx-continuation - A continuation token for retrieving more results <br>  * dlx-item-count - The number of items returned in the response <br>  * Last-Modified - The time that the item was last modified <br>  </td></tr>
        <tr><td> 304 </td><td> 304: Not modified. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getLexemeByLanguageCall(String languageID, String lexemeID, Boolean deleted, String ifNoneMatch, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/languages/{languageID}/lexemes/{lexemeID}"
            .replace("{" + "languageID" + "}", localVarApiClient.escapeString(languageID.toString()))
            .replace("{" + "lexemeID" + "}", localVarApiClient.escapeString(lexemeID.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (deleted != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("deleted", deleted));
        }

        if (ifNoneMatch != null) {
            localVarHeaderParams.put("ifNoneMatch", localVarApiClient.parameterToString(ifNoneMatch));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getLexemeByLanguageValidateBeforeCall(String languageID, String lexemeID, Boolean deleted, String ifNoneMatch, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'languageID' is set
        if (languageID == null) {
            throw new ApiException("Missing the required parameter 'languageID' when calling getLexemeByLanguage(Async)");
        }

        // verify the required parameter 'lexemeID' is set
        if (lexemeID == null) {
            throw new ApiException("Missing the required parameter 'lexemeID' when calling getLexemeByLanguage(Async)");
        }

        return getLexemeByLanguageCall(languageID, lexemeID, deleted, ifNoneMatch, _callback);

    }

    /**
     * Get a Lexeme by ID
     * 
     * @param languageID The ID of the Language to perform the operation on (required)
     * @param lexemeID The ID of the Lexeme to perform the operation on (required)
     * @param deleted Setting the &#x60;deleted&#x60; option to &#x60;true&#x60; will return results that have been marked for deletion, but not yet deleted from the database. Otherwise requests for a resource marked for deletion will return a 410 error. (optional, default to false)
     * @param ifNoneMatch If &#x60;If-None-Match&#x60; header is used with GET requests to check whether you already have the most up-to-date version of the resource, and therefore do not need the resource sent again. The value of the &#x60;If-None-Match&#x60; header is the ETag (&#x60;_etag&#x60;) property of the resource. It is recommended that your application use this header whenever possible to reduce bandwidth. (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200: Operation successful. </td><td>  * dlx-continuation - A continuation token for retrieving more results <br>  * dlx-item-count - The number of items returned in the response <br>  * Last-Modified - The time that the item was last modified <br>  </td></tr>
        <tr><td> 304 </td><td> 304: Not modified. </td><td>  -  </td></tr>
     </table>
     */
    public void getLexemeByLanguage(String languageID, String lexemeID, Boolean deleted, String ifNoneMatch) throws ApiException {
        getLexemeByLanguageWithHttpInfo(languageID, lexemeID, deleted, ifNoneMatch);
    }

    /**
     * Get a Lexeme by ID
     * 
     * @param languageID The ID of the Language to perform the operation on (required)
     * @param lexemeID The ID of the Lexeme to perform the operation on (required)
     * @param deleted Setting the &#x60;deleted&#x60; option to &#x60;true&#x60; will return results that have been marked for deletion, but not yet deleted from the database. Otherwise requests for a resource marked for deletion will return a 410 error. (optional, default to false)
     * @param ifNoneMatch If &#x60;If-None-Match&#x60; header is used with GET requests to check whether you already have the most up-to-date version of the resource, and therefore do not need the resource sent again. The value of the &#x60;If-None-Match&#x60; header is the ETag (&#x60;_etag&#x60;) property of the resource. It is recommended that your application use this header whenever possible to reduce bandwidth. (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200: Operation successful. </td><td>  * dlx-continuation - A continuation token for retrieving more results <br>  * dlx-item-count - The number of items returned in the response <br>  * Last-Modified - The time that the item was last modified <br>  </td></tr>
        <tr><td> 304 </td><td> 304: Not modified. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> getLexemeByLanguageWithHttpInfo(String languageID, String lexemeID, Boolean deleted, String ifNoneMatch) throws ApiException {
        okhttp3.Call localVarCall = getLexemeByLanguageValidateBeforeCall(languageID, lexemeID, deleted, ifNoneMatch, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Get a Lexeme by ID (asynchronously)
     * 
     * @param languageID The ID of the Language to perform the operation on (required)
     * @param lexemeID The ID of the Lexeme to perform the operation on (required)
     * @param deleted Setting the &#x60;deleted&#x60; option to &#x60;true&#x60; will return results that have been marked for deletion, but not yet deleted from the database. Otherwise requests for a resource marked for deletion will return a 410 error. (optional, default to false)
     * @param ifNoneMatch If &#x60;If-None-Match&#x60; header is used with GET requests to check whether you already have the most up-to-date version of the resource, and therefore do not need the resource sent again. The value of the &#x60;If-None-Match&#x60; header is the ETag (&#x60;_etag&#x60;) property of the resource. It is recommended that your application use this header whenever possible to reduce bandwidth. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200: Operation successful. </td><td>  * dlx-continuation - A continuation token for retrieving more results <br>  * dlx-item-count - The number of items returned in the response <br>  * Last-Modified - The time that the item was last modified <br>  </td></tr>
        <tr><td> 304 </td><td> 304: Not modified. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getLexemeByLanguageAsync(String languageID, String lexemeID, Boolean deleted, String ifNoneMatch, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = getLexemeByLanguageValidateBeforeCall(languageID, lexemeID, deleted, ifNoneMatch, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for getLexemesByLanguage
     * @param languageID The ID of the Language to perform the operation on (required)
     * @param continuation The &#x60;dlx-continuation&#x60; header is used to send a continuation token with the request, when retrieving the next page of results. (optional)
     * @param deleted Setting the &#x60;deleted&#x60; option to &#x60;true&#x60; will return results that have been marked for deletion, but not yet deleted from the database. Otherwise requests for a resource marked for deletion will return a 410 error. (optional, default to false)
     * @param ifModifiedSince The &#x60;If-Modified-Since&#x60; header is used to retrieve only results modified since a given time. The value of this header must be a valid date string. (optional)
     * @param maxItemCount The &#x60;dlx-max-item-count&#x60; header is used to limit the number of results to a certain amount at a time (by default all results will be returned). If there are more results to be returned, a continuation token will also be sent in the &#x60;dlx-continuation&#x60; header. (optional)
     * @param _public Set this parameter to &#x60;true&#x60; to include all publicly-accessible resources, not just those that the user is listed as an Owner, Contributor, or Viewer for. (optional, default to false)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200: Operation successful. </td><td>  * dlx-continuation - A continuation token for retrieving more results <br>  * dlx-item-count - The number of items returned in the response <br>  * Last-Modified - The time that the item was last modified <br>  </td></tr>
     </table>
     */
    public okhttp3.Call getLexemesByLanguageCall(String languageID, String continuation, Boolean deleted, String ifModifiedSince, String maxItemCount, String _public, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/languages/{languageID}/lexemes"
            .replace("{" + "languageID" + "}", localVarApiClient.escapeString(languageID.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (deleted != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("deleted", deleted));
        }

        if (_public != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("public", _public));
        }

        if (continuation != null) {
            localVarHeaderParams.put("continuation", localVarApiClient.parameterToString(continuation));
        }

        if (ifModifiedSince != null) {
            localVarHeaderParams.put("ifModifiedSince", localVarApiClient.parameterToString(ifModifiedSince));
        }

        if (maxItemCount != null) {
            localVarHeaderParams.put("maxItemCount", localVarApiClient.parameterToString(maxItemCount));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getLexemesByLanguageValidateBeforeCall(String languageID, String continuation, Boolean deleted, String ifModifiedSince, String maxItemCount, String _public, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'languageID' is set
        if (languageID == null) {
            throw new ApiException("Missing the required parameter 'languageID' when calling getLexemesByLanguage(Async)");
        }

        return getLexemesByLanguageCall(languageID, continuation, deleted, ifModifiedSince, maxItemCount, _public, _callback);

    }

    /**
     * Get all Lexemes for a Language
     * 
     * @param languageID The ID of the Language to perform the operation on (required)
     * @param continuation The &#x60;dlx-continuation&#x60; header is used to send a continuation token with the request, when retrieving the next page of results. (optional)
     * @param deleted Setting the &#x60;deleted&#x60; option to &#x60;true&#x60; will return results that have been marked for deletion, but not yet deleted from the database. Otherwise requests for a resource marked for deletion will return a 410 error. (optional, default to false)
     * @param ifModifiedSince The &#x60;If-Modified-Since&#x60; header is used to retrieve only results modified since a given time. The value of this header must be a valid date string. (optional)
     * @param maxItemCount The &#x60;dlx-max-item-count&#x60; header is used to limit the number of results to a certain amount at a time (by default all results will be returned). If there are more results to be returned, a continuation token will also be sent in the &#x60;dlx-continuation&#x60; header. (optional)
     * @param _public Set this parameter to &#x60;true&#x60; to include all publicly-accessible resources, not just those that the user is listed as an Owner, Contributor, or Viewer for. (optional, default to false)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200: Operation successful. </td><td>  * dlx-continuation - A continuation token for retrieving more results <br>  * dlx-item-count - The number of items returned in the response <br>  * Last-Modified - The time that the item was last modified <br>  </td></tr>
     </table>
     */
    public void getLexemesByLanguage(String languageID, String continuation, Boolean deleted, String ifModifiedSince, String maxItemCount, String _public) throws ApiException {
        getLexemesByLanguageWithHttpInfo(languageID, continuation, deleted, ifModifiedSince, maxItemCount, _public);
    }

    /**
     * Get all Lexemes for a Language
     * 
     * @param languageID The ID of the Language to perform the operation on (required)
     * @param continuation The &#x60;dlx-continuation&#x60; header is used to send a continuation token with the request, when retrieving the next page of results. (optional)
     * @param deleted Setting the &#x60;deleted&#x60; option to &#x60;true&#x60; will return results that have been marked for deletion, but not yet deleted from the database. Otherwise requests for a resource marked for deletion will return a 410 error. (optional, default to false)
     * @param ifModifiedSince The &#x60;If-Modified-Since&#x60; header is used to retrieve only results modified since a given time. The value of this header must be a valid date string. (optional)
     * @param maxItemCount The &#x60;dlx-max-item-count&#x60; header is used to limit the number of results to a certain amount at a time (by default all results will be returned). If there are more results to be returned, a continuation token will also be sent in the &#x60;dlx-continuation&#x60; header. (optional)
     * @param _public Set this parameter to &#x60;true&#x60; to include all publicly-accessible resources, not just those that the user is listed as an Owner, Contributor, or Viewer for. (optional, default to false)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200: Operation successful. </td><td>  * dlx-continuation - A continuation token for retrieving more results <br>  * dlx-item-count - The number of items returned in the response <br>  * Last-Modified - The time that the item was last modified <br>  </td></tr>
     </table>
     */
    public ApiResponse<Void> getLexemesByLanguageWithHttpInfo(String languageID, String continuation, Boolean deleted, String ifModifiedSince, String maxItemCount, String _public) throws ApiException {
        okhttp3.Call localVarCall = getLexemesByLanguageValidateBeforeCall(languageID, continuation, deleted, ifModifiedSince, maxItemCount, _public, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Get all Lexemes for a Language (asynchronously)
     * 
     * @param languageID The ID of the Language to perform the operation on (required)
     * @param continuation The &#x60;dlx-continuation&#x60; header is used to send a continuation token with the request, when retrieving the next page of results. (optional)
     * @param deleted Setting the &#x60;deleted&#x60; option to &#x60;true&#x60; will return results that have been marked for deletion, but not yet deleted from the database. Otherwise requests for a resource marked for deletion will return a 410 error. (optional, default to false)
     * @param ifModifiedSince The &#x60;If-Modified-Since&#x60; header is used to retrieve only results modified since a given time. The value of this header must be a valid date string. (optional)
     * @param maxItemCount The &#x60;dlx-max-item-count&#x60; header is used to limit the number of results to a certain amount at a time (by default all results will be returned). If there are more results to be returned, a continuation token will also be sent in the &#x60;dlx-continuation&#x60; header. (optional)
     * @param _public Set this parameter to &#x60;true&#x60; to include all publicly-accessible resources, not just those that the user is listed as an Owner, Contributor, or Viewer for. (optional, default to false)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200: Operation successful. </td><td>  * dlx-continuation - A continuation token for retrieving more results <br>  * dlx-item-count - The number of items returned in the response <br>  * Last-Modified - The time that the item was last modified <br>  </td></tr>
     </table>
     */
    public okhttp3.Call getLexemesByLanguageAsync(String languageID, String continuation, Boolean deleted, String ifModifiedSince, String maxItemCount, String _public, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = getLexemesByLanguageValidateBeforeCall(languageID, continuation, deleted, ifModifiedSince, maxItemCount, _public, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateLanguage
     * @param languageID The ID of the Language to perform the operation on (required)
     * @param body A database resource to upsert (required)
     * @param ifMatch The &#x60;If-Match&#x60; header is used with PUT and DELETE requests to check whether you have the most up-to-date version of the resource before updating or deleting it. The value of the &#x60;If-Match&#x60; header is the ETag (&#x60;_etag&#x60;) property of the resource. It is recommended that your application use this header whenever possible to avoid data conflicts. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200: Update successful. </td><td>  * Last-Modified - The time that the item was last modified <br>  </td></tr>
     </table>
     */
    public okhttp3.Call updateLanguageCall(String languageID, Object body, String ifMatch, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/languages/{languageID}"
            .replace("{" + "languageID" + "}", localVarApiClient.escapeString(languageID.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (ifMatch != null) {
            localVarHeaderParams.put("ifMatch", localVarApiClient.parameterToString(ifMatch));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateLanguageValidateBeforeCall(String languageID, Object body, String ifMatch, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'languageID' is set
        if (languageID == null) {
            throw new ApiException("Missing the required parameter 'languageID' when calling updateLanguage(Async)");
        }

        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling updateLanguage(Async)");
        }

        return updateLanguageCall(languageID, body, ifMatch, _callback);

    }

    /**
     * Perform a partial update on a Language
     * Performs a partial update the Language whose ID is specified in the URL. If the Language object has an &#x60;id&#x60; property, is ignored in favor of the ID in the URL.
     * @param languageID The ID of the Language to perform the operation on (required)
     * @param body A database resource to upsert (required)
     * @param ifMatch The &#x60;If-Match&#x60; header is used with PUT and DELETE requests to check whether you have the most up-to-date version of the resource before updating or deleting it. The value of the &#x60;If-Match&#x60; header is the ETag (&#x60;_etag&#x60;) property of the resource. It is recommended that your application use this header whenever possible to avoid data conflicts. (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200: Update successful. </td><td>  * Last-Modified - The time that the item was last modified <br>  </td></tr>
     </table>
     */
    public void updateLanguage(String languageID, Object body, String ifMatch) throws ApiException {
        updateLanguageWithHttpInfo(languageID, body, ifMatch);
    }

    /**
     * Perform a partial update on a Language
     * Performs a partial update the Language whose ID is specified in the URL. If the Language object has an &#x60;id&#x60; property, is ignored in favor of the ID in the URL.
     * @param languageID The ID of the Language to perform the operation on (required)
     * @param body A database resource to upsert (required)
     * @param ifMatch The &#x60;If-Match&#x60; header is used with PUT and DELETE requests to check whether you have the most up-to-date version of the resource before updating or deleting it. The value of the &#x60;If-Match&#x60; header is the ETag (&#x60;_etag&#x60;) property of the resource. It is recommended that your application use this header whenever possible to avoid data conflicts. (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200: Update successful. </td><td>  * Last-Modified - The time that the item was last modified <br>  </td></tr>
     </table>
     */
    public ApiResponse<Void> updateLanguageWithHttpInfo(String languageID, Object body, String ifMatch) throws ApiException {
        okhttp3.Call localVarCall = updateLanguageValidateBeforeCall(languageID, body, ifMatch, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Perform a partial update on a Language (asynchronously)
     * Performs a partial update the Language whose ID is specified in the URL. If the Language object has an &#x60;id&#x60; property, is ignored in favor of the ID in the URL.
     * @param languageID The ID of the Language to perform the operation on (required)
     * @param body A database resource to upsert (required)
     * @param ifMatch The &#x60;If-Match&#x60; header is used with PUT and DELETE requests to check whether you have the most up-to-date version of the resource before updating or deleting it. The value of the &#x60;If-Match&#x60; header is the ETag (&#x60;_etag&#x60;) property of the resource. It is recommended that your application use this header whenever possible to avoid data conflicts. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200: Update successful. </td><td>  * Last-Modified - The time that the item was last modified <br>  </td></tr>
     </table>
     */
    public okhttp3.Call updateLanguageAsync(String languageID, Object body, String ifMatch, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateLanguageValidateBeforeCall(languageID, body, ifMatch, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for upsertLanguage
     * @param body A database resource to upsert (required)
     * @param ifMatch The &#x60;If-Match&#x60; header is used with PUT and DELETE requests to check whether you have the most up-to-date version of the resource before updating or deleting it. The value of the &#x60;If-Match&#x60; header is the ETag (&#x60;_etag&#x60;) property of the resource. It is recommended that your application use this header whenever possible to avoid data conflicts. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> 201: Upsert successful. </td><td>  * Last-Modified - The time that the item was last modified <br>  </td></tr>
     </table>
     */
    public okhttp3.Call upsertLanguageCall(Object body, String ifMatch, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/languages";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (ifMatch != null) {
            localVarHeaderParams.put("ifMatch", localVarApiClient.parameterToString(ifMatch));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call upsertLanguageValidateBeforeCall(Object body, String ifMatch, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling upsertLanguage(Async)");
        }

        return upsertLanguageCall(body, ifMatch, _callback);

    }

    /**
     * Upsert (create or replace) a Language
     * Creates a Language if it does not yet exist (i.e. if the resource does not have an &#x60;id&#x60; property yet), or replaces the existing Language resource if it does. Note that this replaces the *entire* Language. It is not a partial update.
     * @param body A database resource to upsert (required)
     * @param ifMatch The &#x60;If-Match&#x60; header is used with PUT and DELETE requests to check whether you have the most up-to-date version of the resource before updating or deleting it. The value of the &#x60;If-Match&#x60; header is the ETag (&#x60;_etag&#x60;) property of the resource. It is recommended that your application use this header whenever possible to avoid data conflicts. (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> 201: Upsert successful. </td><td>  * Last-Modified - The time that the item was last modified <br>  </td></tr>
     </table>
     */
    public void upsertLanguage(Object body, String ifMatch) throws ApiException {
        upsertLanguageWithHttpInfo(body, ifMatch);
    }

    /**
     * Upsert (create or replace) a Language
     * Creates a Language if it does not yet exist (i.e. if the resource does not have an &#x60;id&#x60; property yet), or replaces the existing Language resource if it does. Note that this replaces the *entire* Language. It is not a partial update.
     * @param body A database resource to upsert (required)
     * @param ifMatch The &#x60;If-Match&#x60; header is used with PUT and DELETE requests to check whether you have the most up-to-date version of the resource before updating or deleting it. The value of the &#x60;If-Match&#x60; header is the ETag (&#x60;_etag&#x60;) property of the resource. It is recommended that your application use this header whenever possible to avoid data conflicts. (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> 201: Upsert successful. </td><td>  * Last-Modified - The time that the item was last modified <br>  </td></tr>
     </table>
     */
    public ApiResponse<Void> upsertLanguageWithHttpInfo(Object body, String ifMatch) throws ApiException {
        okhttp3.Call localVarCall = upsertLanguageValidateBeforeCall(body, ifMatch, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Upsert (create or replace) a Language (asynchronously)
     * Creates a Language if it does not yet exist (i.e. if the resource does not have an &#x60;id&#x60; property yet), or replaces the existing Language resource if it does. Note that this replaces the *entire* Language. It is not a partial update.
     * @param body A database resource to upsert (required)
     * @param ifMatch The &#x60;If-Match&#x60; header is used with PUT and DELETE requests to check whether you have the most up-to-date version of the resource before updating or deleting it. The value of the &#x60;If-Match&#x60; header is the ETag (&#x60;_etag&#x60;) property of the resource. It is recommended that your application use this header whenever possible to avoid data conflicts. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> 201: Upsert successful. </td><td>  * Last-Modified - The time that the item was last modified <br>  </td></tr>
     </table>
     */
    public okhttp3.Call upsertLanguageAsync(Object body, String ifMatch, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = upsertLanguageValidateBeforeCall(body, ifMatch, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for upsertLexemeByLanguage
     * @param languageID The ID of the Language to perform the operation on (required)
     * @param ifMatch The &#x60;If-Match&#x60; header is used with PUT and DELETE requests to check whether you have the most up-to-date version of the resource before updating or deleting it. The value of the &#x60;If-Match&#x60; header is the ETag (&#x60;_etag&#x60;) property of the resource. It is recommended that your application use this header whenever possible to avoid data conflicts. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> 201: Upsert successful. </td><td>  * Last-Modified - The time that the item was last modified <br>  </td></tr>
     </table>
     */
    public okhttp3.Call upsertLexemeByLanguageCall(String languageID, String ifMatch, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/languages/{languageID}/lexemes"
            .replace("{" + "languageID" + "}", localVarApiClient.escapeString(languageID.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (ifMatch != null) {
            localVarHeaderParams.put("ifMatch", localVarApiClient.parameterToString(ifMatch));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call upsertLexemeByLanguageValidateBeforeCall(String languageID, String ifMatch, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'languageID' is set
        if (languageID == null) {
            throw new ApiException("Missing the required parameter 'languageID' when calling upsertLexemeByLanguage(Async)");
        }

        return upsertLexemeByLanguageCall(languageID, ifMatch, _callback);

    }

    /**
     * Upsert (add or replace) a Lexeme
     * 
     * @param languageID The ID of the Language to perform the operation on (required)
     * @param ifMatch The &#x60;If-Match&#x60; header is used with PUT and DELETE requests to check whether you have the most up-to-date version of the resource before updating or deleting it. The value of the &#x60;If-Match&#x60; header is the ETag (&#x60;_etag&#x60;) property of the resource. It is recommended that your application use this header whenever possible to avoid data conflicts. (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> 201: Upsert successful. </td><td>  * Last-Modified - The time that the item was last modified <br>  </td></tr>
     </table>
     */
    public void upsertLexemeByLanguage(String languageID, String ifMatch) throws ApiException {
        upsertLexemeByLanguageWithHttpInfo(languageID, ifMatch);
    }

    /**
     * Upsert (add or replace) a Lexeme
     * 
     * @param languageID The ID of the Language to perform the operation on (required)
     * @param ifMatch The &#x60;If-Match&#x60; header is used with PUT and DELETE requests to check whether you have the most up-to-date version of the resource before updating or deleting it. The value of the &#x60;If-Match&#x60; header is the ETag (&#x60;_etag&#x60;) property of the resource. It is recommended that your application use this header whenever possible to avoid data conflicts. (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> 201: Upsert successful. </td><td>  * Last-Modified - The time that the item was last modified <br>  </td></tr>
     </table>
     */
    public ApiResponse<Void> upsertLexemeByLanguageWithHttpInfo(String languageID, String ifMatch) throws ApiException {
        okhttp3.Call localVarCall = upsertLexemeByLanguageValidateBeforeCall(languageID, ifMatch, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Upsert (add or replace) a Lexeme (asynchronously)
     * 
     * @param languageID The ID of the Language to perform the operation on (required)
     * @param ifMatch The &#x60;If-Match&#x60; header is used with PUT and DELETE requests to check whether you have the most up-to-date version of the resource before updating or deleting it. The value of the &#x60;If-Match&#x60; header is the ETag (&#x60;_etag&#x60;) property of the resource. It is recommended that your application use this header whenever possible to avoid data conflicts. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> 201: Upsert successful. </td><td>  * Last-Modified - The time that the item was last modified <br>  </td></tr>
     </table>
     */
    public okhttp3.Call upsertLexemeByLanguageAsync(String languageID, String ifMatch, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = upsertLexemeByLanguageValidateBeforeCall(languageID, ifMatch, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
}
