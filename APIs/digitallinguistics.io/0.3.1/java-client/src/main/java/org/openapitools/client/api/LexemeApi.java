/*
 * DLx
 * The Digital Linguistics (DLx) REST API
 *
 * The version of the OpenAPI document: 0.3.1
 * Contact: dhieber@umail.ucsb.edu
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;



import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class LexemeApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public LexemeApi() {
        this(Configuration.getDefaultApiClient());
    }

    public LexemeApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for addLexeme
     * @param languageID The ID of the Language to perform the operation on (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> 201: The resource was created successfully. </td><td>  * Last-Modified - The time that the item was last modified <br>  </td></tr>
     </table>
     */
    public okhttp3.Call addLexemeCall(String languageID, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/lexemes";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (languageID != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("languageID", languageID));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call addLexemeValidateBeforeCall(String languageID, final ApiCallback _callback) throws ApiException {
        return addLexemeCall(languageID, _callback);

    }

    /**
     * Add a new Lexeme
     * Add a new Lexeme. A &#x60;languageID&#x60; must be provided either as a query parameter, or as an attribute on the Lexeme body.
     * @param languageID The ID of the Language to perform the operation on (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> 201: The resource was created successfully. </td><td>  * Last-Modified - The time that the item was last modified <br>  </td></tr>
     </table>
     */
    public void addLexeme(String languageID) throws ApiException {
        addLexemeWithHttpInfo(languageID);
    }

    /**
     * Add a new Lexeme
     * Add a new Lexeme. A &#x60;languageID&#x60; must be provided either as a query parameter, or as an attribute on the Lexeme body.
     * @param languageID The ID of the Language to perform the operation on (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> 201: The resource was created successfully. </td><td>  * Last-Modified - The time that the item was last modified <br>  </td></tr>
     </table>
     */
    public ApiResponse<Void> addLexemeWithHttpInfo(String languageID) throws ApiException {
        okhttp3.Call localVarCall = addLexemeValidateBeforeCall(languageID, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Add a new Lexeme (asynchronously)
     * Add a new Lexeme. A &#x60;languageID&#x60; must be provided either as a query parameter, or as an attribute on the Lexeme body.
     * @param languageID The ID of the Language to perform the operation on (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> 201: The resource was created successfully. </td><td>  * Last-Modified - The time that the item was last modified <br>  </td></tr>
     </table>
     */
    public okhttp3.Call addLexemeAsync(String languageID, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = addLexemeValidateBeforeCall(languageID, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for addLexemeByLanguage_0
     * @param languageID The ID of the Language to perform the operation on (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> 201: The resource was created successfully. </td><td>  * Last-Modified - The time that the item was last modified <br>  </td></tr>
     </table>
     */
    public okhttp3.Call addLexemeByLanguage_0Call(String languageID, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/languages/{languageID}/lexemes"
            .replace("{" + "languageID" + "}", localVarApiClient.escapeString(languageID.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call addLexemeByLanguage_0ValidateBeforeCall(String languageID, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'languageID' is set
        if (languageID == null) {
            throw new ApiException("Missing the required parameter 'languageID' when calling addLexemeByLanguage_0(Async)");
        }

        return addLexemeByLanguage_0Call(languageID, _callback);

    }

    /**
     * Add a new Lexeme to a Language
     * 
     * @param languageID The ID of the Language to perform the operation on (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> 201: The resource was created successfully. </td><td>  * Last-Modified - The time that the item was last modified <br>  </td></tr>
     </table>
     */
    public void addLexemeByLanguage_0(String languageID) throws ApiException {
        addLexemeByLanguage_0WithHttpInfo(languageID);
    }

    /**
     * Add a new Lexeme to a Language
     * 
     * @param languageID The ID of the Language to perform the operation on (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> 201: The resource was created successfully. </td><td>  * Last-Modified - The time that the item was last modified <br>  </td></tr>
     </table>
     */
    public ApiResponse<Void> addLexemeByLanguage_0WithHttpInfo(String languageID) throws ApiException {
        okhttp3.Call localVarCall = addLexemeByLanguage_0ValidateBeforeCall(languageID, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Add a new Lexeme to a Language (asynchronously)
     * 
     * @param languageID The ID of the Language to perform the operation on (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> 201: The resource was created successfully. </td><td>  * Last-Modified - The time that the item was last modified <br>  </td></tr>
     </table>
     */
    public okhttp3.Call addLexemeByLanguage_0Async(String languageID, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = addLexemeByLanguage_0ValidateBeforeCall(languageID, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteLexeme
     * @param lexemeID The ID of the Lexeme to perform the operation on (required)
     * @param ifMatch The &#x60;If-Match&#x60; header is used with PUT and DELETE requests to check whether you have the most up-to-date version of the resource before updating or deleting it. The value of the &#x60;If-Match&#x60; header is the ETag (&#x60;_etag&#x60;) property of the resource. It is recommended that your application use this header whenever possible to avoid data conflicts. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> 204: Delete operation successful. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteLexemeCall(String lexemeID, String ifMatch, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/lexemes/{lexemeID}"
            .replace("{" + "lexemeID" + "}", localVarApiClient.escapeString(lexemeID.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (ifMatch != null) {
            localVarHeaderParams.put("ifMatch", localVarApiClient.parameterToString(ifMatch));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteLexemeValidateBeforeCall(String lexemeID, String ifMatch, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'lexemeID' is set
        if (lexemeID == null) {
            throw new ApiException("Missing the required parameter 'lexemeID' when calling deleteLexeme(Async)");
        }

        return deleteLexemeCall(lexemeID, ifMatch, _callback);

    }

    /**
     * Delete a Lexeme by ID
     * 
     * @param lexemeID The ID of the Lexeme to perform the operation on (required)
     * @param ifMatch The &#x60;If-Match&#x60; header is used with PUT and DELETE requests to check whether you have the most up-to-date version of the resource before updating or deleting it. The value of the &#x60;If-Match&#x60; header is the ETag (&#x60;_etag&#x60;) property of the resource. It is recommended that your application use this header whenever possible to avoid data conflicts. (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> 204: Delete operation successful. </td><td>  -  </td></tr>
     </table>
     */
    public void deleteLexeme(String lexemeID, String ifMatch) throws ApiException {
        deleteLexemeWithHttpInfo(lexemeID, ifMatch);
    }

    /**
     * Delete a Lexeme by ID
     * 
     * @param lexemeID The ID of the Lexeme to perform the operation on (required)
     * @param ifMatch The &#x60;If-Match&#x60; header is used with PUT and DELETE requests to check whether you have the most up-to-date version of the resource before updating or deleting it. The value of the &#x60;If-Match&#x60; header is the ETag (&#x60;_etag&#x60;) property of the resource. It is recommended that your application use this header whenever possible to avoid data conflicts. (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> 204: Delete operation successful. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> deleteLexemeWithHttpInfo(String lexemeID, String ifMatch) throws ApiException {
        okhttp3.Call localVarCall = deleteLexemeValidateBeforeCall(lexemeID, ifMatch, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Delete a Lexeme by ID (asynchronously)
     * 
     * @param lexemeID The ID of the Lexeme to perform the operation on (required)
     * @param ifMatch The &#x60;If-Match&#x60; header is used with PUT and DELETE requests to check whether you have the most up-to-date version of the resource before updating or deleting it. The value of the &#x60;If-Match&#x60; header is the ETag (&#x60;_etag&#x60;) property of the resource. It is recommended that your application use this header whenever possible to avoid data conflicts. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> 204: Delete operation successful. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteLexemeAsync(String lexemeID, String ifMatch, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteLexemeValidateBeforeCall(lexemeID, ifMatch, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteLexemeByLanguage_0
     * @param languageID The ID of the Language to perform the operation on (required)
     * @param lexemeID The ID of the Lexeme to perform the operation on (required)
     * @param ifMatch The &#x60;If-Match&#x60; header is used with PUT and DELETE requests to check whether you have the most up-to-date version of the resource before updating or deleting it. The value of the &#x60;If-Match&#x60; header is the ETag (&#x60;_etag&#x60;) property of the resource. It is recommended that your application use this header whenever possible to avoid data conflicts. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> 204: Delete operation successful. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteLexemeByLanguage_0Call(String languageID, String lexemeID, String ifMatch, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/languages/{languageID}/lexemes/{lexemeID}"
            .replace("{" + "languageID" + "}", localVarApiClient.escapeString(languageID.toString()))
            .replace("{" + "lexemeID" + "}", localVarApiClient.escapeString(lexemeID.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (ifMatch != null) {
            localVarHeaderParams.put("ifMatch", localVarApiClient.parameterToString(ifMatch));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteLexemeByLanguage_0ValidateBeforeCall(String languageID, String lexemeID, String ifMatch, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'languageID' is set
        if (languageID == null) {
            throw new ApiException("Missing the required parameter 'languageID' when calling deleteLexemeByLanguage_0(Async)");
        }

        // verify the required parameter 'lexemeID' is set
        if (lexemeID == null) {
            throw new ApiException("Missing the required parameter 'lexemeID' when calling deleteLexemeByLanguage_0(Async)");
        }

        return deleteLexemeByLanguage_0Call(languageID, lexemeID, ifMatch, _callback);

    }

    /**
     * Delete a Lexeme by ID
     * 
     * @param languageID The ID of the Language to perform the operation on (required)
     * @param lexemeID The ID of the Lexeme to perform the operation on (required)
     * @param ifMatch The &#x60;If-Match&#x60; header is used with PUT and DELETE requests to check whether you have the most up-to-date version of the resource before updating or deleting it. The value of the &#x60;If-Match&#x60; header is the ETag (&#x60;_etag&#x60;) property of the resource. It is recommended that your application use this header whenever possible to avoid data conflicts. (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> 204: Delete operation successful. </td><td>  -  </td></tr>
     </table>
     */
    public void deleteLexemeByLanguage_0(String languageID, String lexemeID, String ifMatch) throws ApiException {
        deleteLexemeByLanguage_0WithHttpInfo(languageID, lexemeID, ifMatch);
    }

    /**
     * Delete a Lexeme by ID
     * 
     * @param languageID The ID of the Language to perform the operation on (required)
     * @param lexemeID The ID of the Lexeme to perform the operation on (required)
     * @param ifMatch The &#x60;If-Match&#x60; header is used with PUT and DELETE requests to check whether you have the most up-to-date version of the resource before updating or deleting it. The value of the &#x60;If-Match&#x60; header is the ETag (&#x60;_etag&#x60;) property of the resource. It is recommended that your application use this header whenever possible to avoid data conflicts. (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> 204: Delete operation successful. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> deleteLexemeByLanguage_0WithHttpInfo(String languageID, String lexemeID, String ifMatch) throws ApiException {
        okhttp3.Call localVarCall = deleteLexemeByLanguage_0ValidateBeforeCall(languageID, lexemeID, ifMatch, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Delete a Lexeme by ID (asynchronously)
     * 
     * @param languageID The ID of the Language to perform the operation on (required)
     * @param lexemeID The ID of the Lexeme to perform the operation on (required)
     * @param ifMatch The &#x60;If-Match&#x60; header is used with PUT and DELETE requests to check whether you have the most up-to-date version of the resource before updating or deleting it. The value of the &#x60;If-Match&#x60; header is the ETag (&#x60;_etag&#x60;) property of the resource. It is recommended that your application use this header whenever possible to avoid data conflicts. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> 204: Delete operation successful. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteLexemeByLanguage_0Async(String languageID, String lexemeID, String ifMatch, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteLexemeByLanguage_0ValidateBeforeCall(languageID, lexemeID, ifMatch, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for getLexeme
     * @param lexemeID The ID of the Lexeme to perform the operation on (required)
     * @param deleted Setting the &#x60;deleted&#x60; option to &#x60;true&#x60; will return results that have been marked for deletion, but not yet deleted from the database. Otherwise requests for a resource marked for deletion will return a 410 error. (optional, default to false)
     * @param ifNoneMatch If &#x60;If-None-Match&#x60; header is used with GET requests to check whether you already have the most up-to-date version of the resource, and therefore do not need the resource sent again. The value of the &#x60;If-None-Match&#x60; header is the ETag (&#x60;_etag&#x60;) property of the resource. It is recommended that your application use this header whenever possible to reduce bandwidth. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200: Operation successful. </td><td>  * dlx-continuation - A continuation token for retrieving more results <br>  * dlx-item-count - The number of items returned in the response <br>  * Last-Modified - The time that the item was last modified <br>  </td></tr>
        <tr><td> 304 </td><td> 304: Not modified. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getLexemeCall(String lexemeID, Boolean deleted, String ifNoneMatch, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/lexemes/{lexemeID}"
            .replace("{" + "lexemeID" + "}", localVarApiClient.escapeString(lexemeID.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (deleted != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("deleted", deleted));
        }

        if (ifNoneMatch != null) {
            localVarHeaderParams.put("ifNoneMatch", localVarApiClient.parameterToString(ifNoneMatch));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getLexemeValidateBeforeCall(String lexemeID, Boolean deleted, String ifNoneMatch, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'lexemeID' is set
        if (lexemeID == null) {
            throw new ApiException("Missing the required parameter 'lexemeID' when calling getLexeme(Async)");
        }

        return getLexemeCall(lexemeID, deleted, ifNoneMatch, _callback);

    }

    /**
     * Get a Lexeme by ID
     * 
     * @param lexemeID The ID of the Lexeme to perform the operation on (required)
     * @param deleted Setting the &#x60;deleted&#x60; option to &#x60;true&#x60; will return results that have been marked for deletion, but not yet deleted from the database. Otherwise requests for a resource marked for deletion will return a 410 error. (optional, default to false)
     * @param ifNoneMatch If &#x60;If-None-Match&#x60; header is used with GET requests to check whether you already have the most up-to-date version of the resource, and therefore do not need the resource sent again. The value of the &#x60;If-None-Match&#x60; header is the ETag (&#x60;_etag&#x60;) property of the resource. It is recommended that your application use this header whenever possible to reduce bandwidth. (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200: Operation successful. </td><td>  * dlx-continuation - A continuation token for retrieving more results <br>  * dlx-item-count - The number of items returned in the response <br>  * Last-Modified - The time that the item was last modified <br>  </td></tr>
        <tr><td> 304 </td><td> 304: Not modified. </td><td>  -  </td></tr>
     </table>
     */
    public void getLexeme(String lexemeID, Boolean deleted, String ifNoneMatch) throws ApiException {
        getLexemeWithHttpInfo(lexemeID, deleted, ifNoneMatch);
    }

    /**
     * Get a Lexeme by ID
     * 
     * @param lexemeID The ID of the Lexeme to perform the operation on (required)
     * @param deleted Setting the &#x60;deleted&#x60; option to &#x60;true&#x60; will return results that have been marked for deletion, but not yet deleted from the database. Otherwise requests for a resource marked for deletion will return a 410 error. (optional, default to false)
     * @param ifNoneMatch If &#x60;If-None-Match&#x60; header is used with GET requests to check whether you already have the most up-to-date version of the resource, and therefore do not need the resource sent again. The value of the &#x60;If-None-Match&#x60; header is the ETag (&#x60;_etag&#x60;) property of the resource. It is recommended that your application use this header whenever possible to reduce bandwidth. (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200: Operation successful. </td><td>  * dlx-continuation - A continuation token for retrieving more results <br>  * dlx-item-count - The number of items returned in the response <br>  * Last-Modified - The time that the item was last modified <br>  </td></tr>
        <tr><td> 304 </td><td> 304: Not modified. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> getLexemeWithHttpInfo(String lexemeID, Boolean deleted, String ifNoneMatch) throws ApiException {
        okhttp3.Call localVarCall = getLexemeValidateBeforeCall(lexemeID, deleted, ifNoneMatch, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Get a Lexeme by ID (asynchronously)
     * 
     * @param lexemeID The ID of the Lexeme to perform the operation on (required)
     * @param deleted Setting the &#x60;deleted&#x60; option to &#x60;true&#x60; will return results that have been marked for deletion, but not yet deleted from the database. Otherwise requests for a resource marked for deletion will return a 410 error. (optional, default to false)
     * @param ifNoneMatch If &#x60;If-None-Match&#x60; header is used with GET requests to check whether you already have the most up-to-date version of the resource, and therefore do not need the resource sent again. The value of the &#x60;If-None-Match&#x60; header is the ETag (&#x60;_etag&#x60;) property of the resource. It is recommended that your application use this header whenever possible to reduce bandwidth. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200: Operation successful. </td><td>  * dlx-continuation - A continuation token for retrieving more results <br>  * dlx-item-count - The number of items returned in the response <br>  * Last-Modified - The time that the item was last modified <br>  </td></tr>
        <tr><td> 304 </td><td> 304: Not modified. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getLexemeAsync(String lexemeID, Boolean deleted, String ifNoneMatch, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = getLexemeValidateBeforeCall(lexemeID, deleted, ifNoneMatch, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for getLexemeByLanguage_0
     * @param languageID The ID of the Language to perform the operation on (required)
     * @param lexemeID The ID of the Lexeme to perform the operation on (required)
     * @param deleted Setting the &#x60;deleted&#x60; option to &#x60;true&#x60; will return results that have been marked for deletion, but not yet deleted from the database. Otherwise requests for a resource marked for deletion will return a 410 error. (optional, default to false)
     * @param ifNoneMatch If &#x60;If-None-Match&#x60; header is used with GET requests to check whether you already have the most up-to-date version of the resource, and therefore do not need the resource sent again. The value of the &#x60;If-None-Match&#x60; header is the ETag (&#x60;_etag&#x60;) property of the resource. It is recommended that your application use this header whenever possible to reduce bandwidth. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200: Operation successful. </td><td>  * dlx-continuation - A continuation token for retrieving more results <br>  * dlx-item-count - The number of items returned in the response <br>  * Last-Modified - The time that the item was last modified <br>  </td></tr>
        <tr><td> 304 </td><td> 304: Not modified. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getLexemeByLanguage_0Call(String languageID, String lexemeID, Boolean deleted, String ifNoneMatch, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/languages/{languageID}/lexemes/{lexemeID}"
            .replace("{" + "languageID" + "}", localVarApiClient.escapeString(languageID.toString()))
            .replace("{" + "lexemeID" + "}", localVarApiClient.escapeString(lexemeID.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (deleted != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("deleted", deleted));
        }

        if (ifNoneMatch != null) {
            localVarHeaderParams.put("ifNoneMatch", localVarApiClient.parameterToString(ifNoneMatch));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getLexemeByLanguage_0ValidateBeforeCall(String languageID, String lexemeID, Boolean deleted, String ifNoneMatch, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'languageID' is set
        if (languageID == null) {
            throw new ApiException("Missing the required parameter 'languageID' when calling getLexemeByLanguage_0(Async)");
        }

        // verify the required parameter 'lexemeID' is set
        if (lexemeID == null) {
            throw new ApiException("Missing the required parameter 'lexemeID' when calling getLexemeByLanguage_0(Async)");
        }

        return getLexemeByLanguage_0Call(languageID, lexemeID, deleted, ifNoneMatch, _callback);

    }

    /**
     * Get a Lexeme by ID
     * 
     * @param languageID The ID of the Language to perform the operation on (required)
     * @param lexemeID The ID of the Lexeme to perform the operation on (required)
     * @param deleted Setting the &#x60;deleted&#x60; option to &#x60;true&#x60; will return results that have been marked for deletion, but not yet deleted from the database. Otherwise requests for a resource marked for deletion will return a 410 error. (optional, default to false)
     * @param ifNoneMatch If &#x60;If-None-Match&#x60; header is used with GET requests to check whether you already have the most up-to-date version of the resource, and therefore do not need the resource sent again. The value of the &#x60;If-None-Match&#x60; header is the ETag (&#x60;_etag&#x60;) property of the resource. It is recommended that your application use this header whenever possible to reduce bandwidth. (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200: Operation successful. </td><td>  * dlx-continuation - A continuation token for retrieving more results <br>  * dlx-item-count - The number of items returned in the response <br>  * Last-Modified - The time that the item was last modified <br>  </td></tr>
        <tr><td> 304 </td><td> 304: Not modified. </td><td>  -  </td></tr>
     </table>
     */
    public void getLexemeByLanguage_0(String languageID, String lexemeID, Boolean deleted, String ifNoneMatch) throws ApiException {
        getLexemeByLanguage_0WithHttpInfo(languageID, lexemeID, deleted, ifNoneMatch);
    }

    /**
     * Get a Lexeme by ID
     * 
     * @param languageID The ID of the Language to perform the operation on (required)
     * @param lexemeID The ID of the Lexeme to perform the operation on (required)
     * @param deleted Setting the &#x60;deleted&#x60; option to &#x60;true&#x60; will return results that have been marked for deletion, but not yet deleted from the database. Otherwise requests for a resource marked for deletion will return a 410 error. (optional, default to false)
     * @param ifNoneMatch If &#x60;If-None-Match&#x60; header is used with GET requests to check whether you already have the most up-to-date version of the resource, and therefore do not need the resource sent again. The value of the &#x60;If-None-Match&#x60; header is the ETag (&#x60;_etag&#x60;) property of the resource. It is recommended that your application use this header whenever possible to reduce bandwidth. (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200: Operation successful. </td><td>  * dlx-continuation - A continuation token for retrieving more results <br>  * dlx-item-count - The number of items returned in the response <br>  * Last-Modified - The time that the item was last modified <br>  </td></tr>
        <tr><td> 304 </td><td> 304: Not modified. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> getLexemeByLanguage_0WithHttpInfo(String languageID, String lexemeID, Boolean deleted, String ifNoneMatch) throws ApiException {
        okhttp3.Call localVarCall = getLexemeByLanguage_0ValidateBeforeCall(languageID, lexemeID, deleted, ifNoneMatch, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Get a Lexeme by ID (asynchronously)
     * 
     * @param languageID The ID of the Language to perform the operation on (required)
     * @param lexemeID The ID of the Lexeme to perform the operation on (required)
     * @param deleted Setting the &#x60;deleted&#x60; option to &#x60;true&#x60; will return results that have been marked for deletion, but not yet deleted from the database. Otherwise requests for a resource marked for deletion will return a 410 error. (optional, default to false)
     * @param ifNoneMatch If &#x60;If-None-Match&#x60; header is used with GET requests to check whether you already have the most up-to-date version of the resource, and therefore do not need the resource sent again. The value of the &#x60;If-None-Match&#x60; header is the ETag (&#x60;_etag&#x60;) property of the resource. It is recommended that your application use this header whenever possible to reduce bandwidth. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200: Operation successful. </td><td>  * dlx-continuation - A continuation token for retrieving more results <br>  * dlx-item-count - The number of items returned in the response <br>  * Last-Modified - The time that the item was last modified <br>  </td></tr>
        <tr><td> 304 </td><td> 304: Not modified. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getLexemeByLanguage_0Async(String languageID, String lexemeID, Boolean deleted, String ifNoneMatch, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = getLexemeByLanguage_0ValidateBeforeCall(languageID, lexemeID, deleted, ifNoneMatch, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for getLexemes
     * @param continuation The &#x60;dlx-continuation&#x60; header is used to send a continuation token with the request, when retrieving the next page of results. (optional)
     * @param deleted Setting the &#x60;deleted&#x60; option to &#x60;true&#x60; will return results that have been marked for deletion, but not yet deleted from the database. Otherwise requests for a resource marked for deletion will return a 410 error. (optional, default to false)
     * @param ifModifiedSince The &#x60;If-Modified-Since&#x60; header is used to retrieve only results modified since a given time. The value of this header must be a valid date string. (optional)
     * @param languageID The ID of the Language to perform the operation on (optional)
     * @param maxItemCount The &#x60;dlx-max-item-count&#x60; header is used to limit the number of results to a certain amount at a time (by default all results will be returned). If there are more results to be returned, a continuation token will also be sent in the &#x60;dlx-continuation&#x60; header. (optional)
     * @param _public Set this parameter to &#x60;true&#x60; to include all publicly-accessible resources, not just those that the user is listed as an Owner, Contributor, or Viewer for. (optional, default to false)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200: Operation successful. </td><td>  * dlx-continuation - A continuation token for retrieving more results <br>  * dlx-item-count - The number of items returned in the response <br>  * Last-Modified - The time that the item was last modified <br>  </td></tr>
     </table>
     */
    public okhttp3.Call getLexemesCall(String continuation, Boolean deleted, String ifModifiedSince, String languageID, String maxItemCount, String _public, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/lexemes";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (deleted != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("deleted", deleted));
        }

        if (languageID != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("languageID", languageID));
        }

        if (_public != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("public", _public));
        }

        if (continuation != null) {
            localVarHeaderParams.put("continuation", localVarApiClient.parameterToString(continuation));
        }

        if (ifModifiedSince != null) {
            localVarHeaderParams.put("ifModifiedSince", localVarApiClient.parameterToString(ifModifiedSince));
        }

        if (maxItemCount != null) {
            localVarHeaderParams.put("maxItemCount", localVarApiClient.parameterToString(maxItemCount));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getLexemesValidateBeforeCall(String continuation, Boolean deleted, String ifModifiedSince, String languageID, String maxItemCount, String _public, final ApiCallback _callback) throws ApiException {
        return getLexemesCall(continuation, deleted, ifModifiedSince, languageID, maxItemCount, _public, _callback);

    }

    /**
     * Get all Lexemes
     * Retrieve all Lexemes that the authenticated user has permission to access. Include a &#x60;languageID&#x60; query parameter to limit results to Lexemes from a particular Language.
     * @param continuation The &#x60;dlx-continuation&#x60; header is used to send a continuation token with the request, when retrieving the next page of results. (optional)
     * @param deleted Setting the &#x60;deleted&#x60; option to &#x60;true&#x60; will return results that have been marked for deletion, but not yet deleted from the database. Otherwise requests for a resource marked for deletion will return a 410 error. (optional, default to false)
     * @param ifModifiedSince The &#x60;If-Modified-Since&#x60; header is used to retrieve only results modified since a given time. The value of this header must be a valid date string. (optional)
     * @param languageID The ID of the Language to perform the operation on (optional)
     * @param maxItemCount The &#x60;dlx-max-item-count&#x60; header is used to limit the number of results to a certain amount at a time (by default all results will be returned). If there are more results to be returned, a continuation token will also be sent in the &#x60;dlx-continuation&#x60; header. (optional)
     * @param _public Set this parameter to &#x60;true&#x60; to include all publicly-accessible resources, not just those that the user is listed as an Owner, Contributor, or Viewer for. (optional, default to false)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200: Operation successful. </td><td>  * dlx-continuation - A continuation token for retrieving more results <br>  * dlx-item-count - The number of items returned in the response <br>  * Last-Modified - The time that the item was last modified <br>  </td></tr>
     </table>
     */
    public void getLexemes(String continuation, Boolean deleted, String ifModifiedSince, String languageID, String maxItemCount, String _public) throws ApiException {
        getLexemesWithHttpInfo(continuation, deleted, ifModifiedSince, languageID, maxItemCount, _public);
    }

    /**
     * Get all Lexemes
     * Retrieve all Lexemes that the authenticated user has permission to access. Include a &#x60;languageID&#x60; query parameter to limit results to Lexemes from a particular Language.
     * @param continuation The &#x60;dlx-continuation&#x60; header is used to send a continuation token with the request, when retrieving the next page of results. (optional)
     * @param deleted Setting the &#x60;deleted&#x60; option to &#x60;true&#x60; will return results that have been marked for deletion, but not yet deleted from the database. Otherwise requests for a resource marked for deletion will return a 410 error. (optional, default to false)
     * @param ifModifiedSince The &#x60;If-Modified-Since&#x60; header is used to retrieve only results modified since a given time. The value of this header must be a valid date string. (optional)
     * @param languageID The ID of the Language to perform the operation on (optional)
     * @param maxItemCount The &#x60;dlx-max-item-count&#x60; header is used to limit the number of results to a certain amount at a time (by default all results will be returned). If there are more results to be returned, a continuation token will also be sent in the &#x60;dlx-continuation&#x60; header. (optional)
     * @param _public Set this parameter to &#x60;true&#x60; to include all publicly-accessible resources, not just those that the user is listed as an Owner, Contributor, or Viewer for. (optional, default to false)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200: Operation successful. </td><td>  * dlx-continuation - A continuation token for retrieving more results <br>  * dlx-item-count - The number of items returned in the response <br>  * Last-Modified - The time that the item was last modified <br>  </td></tr>
     </table>
     */
    public ApiResponse<Void> getLexemesWithHttpInfo(String continuation, Boolean deleted, String ifModifiedSince, String languageID, String maxItemCount, String _public) throws ApiException {
        okhttp3.Call localVarCall = getLexemesValidateBeforeCall(continuation, deleted, ifModifiedSince, languageID, maxItemCount, _public, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Get all Lexemes (asynchronously)
     * Retrieve all Lexemes that the authenticated user has permission to access. Include a &#x60;languageID&#x60; query parameter to limit results to Lexemes from a particular Language.
     * @param continuation The &#x60;dlx-continuation&#x60; header is used to send a continuation token with the request, when retrieving the next page of results. (optional)
     * @param deleted Setting the &#x60;deleted&#x60; option to &#x60;true&#x60; will return results that have been marked for deletion, but not yet deleted from the database. Otherwise requests for a resource marked for deletion will return a 410 error. (optional, default to false)
     * @param ifModifiedSince The &#x60;If-Modified-Since&#x60; header is used to retrieve only results modified since a given time. The value of this header must be a valid date string. (optional)
     * @param languageID The ID of the Language to perform the operation on (optional)
     * @param maxItemCount The &#x60;dlx-max-item-count&#x60; header is used to limit the number of results to a certain amount at a time (by default all results will be returned). If there are more results to be returned, a continuation token will also be sent in the &#x60;dlx-continuation&#x60; header. (optional)
     * @param _public Set this parameter to &#x60;true&#x60; to include all publicly-accessible resources, not just those that the user is listed as an Owner, Contributor, or Viewer for. (optional, default to false)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200: Operation successful. </td><td>  * dlx-continuation - A continuation token for retrieving more results <br>  * dlx-item-count - The number of items returned in the response <br>  * Last-Modified - The time that the item was last modified <br>  </td></tr>
     </table>
     */
    public okhttp3.Call getLexemesAsync(String continuation, Boolean deleted, String ifModifiedSince, String languageID, String maxItemCount, String _public, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = getLexemesValidateBeforeCall(continuation, deleted, ifModifiedSince, languageID, maxItemCount, _public, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for getLexemesByLanguage_0
     * @param languageID The ID of the Language to perform the operation on (required)
     * @param continuation The &#x60;dlx-continuation&#x60; header is used to send a continuation token with the request, when retrieving the next page of results. (optional)
     * @param deleted Setting the &#x60;deleted&#x60; option to &#x60;true&#x60; will return results that have been marked for deletion, but not yet deleted from the database. Otherwise requests for a resource marked for deletion will return a 410 error. (optional, default to false)
     * @param ifModifiedSince The &#x60;If-Modified-Since&#x60; header is used to retrieve only results modified since a given time. The value of this header must be a valid date string. (optional)
     * @param maxItemCount The &#x60;dlx-max-item-count&#x60; header is used to limit the number of results to a certain amount at a time (by default all results will be returned). If there are more results to be returned, a continuation token will also be sent in the &#x60;dlx-continuation&#x60; header. (optional)
     * @param _public Set this parameter to &#x60;true&#x60; to include all publicly-accessible resources, not just those that the user is listed as an Owner, Contributor, or Viewer for. (optional, default to false)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200: Operation successful. </td><td>  * dlx-continuation - A continuation token for retrieving more results <br>  * dlx-item-count - The number of items returned in the response <br>  * Last-Modified - The time that the item was last modified <br>  </td></tr>
     </table>
     */
    public okhttp3.Call getLexemesByLanguage_0Call(String languageID, String continuation, Boolean deleted, String ifModifiedSince, String maxItemCount, String _public, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/languages/{languageID}/lexemes"
            .replace("{" + "languageID" + "}", localVarApiClient.escapeString(languageID.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (deleted != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("deleted", deleted));
        }

        if (_public != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("public", _public));
        }

        if (continuation != null) {
            localVarHeaderParams.put("continuation", localVarApiClient.parameterToString(continuation));
        }

        if (ifModifiedSince != null) {
            localVarHeaderParams.put("ifModifiedSince", localVarApiClient.parameterToString(ifModifiedSince));
        }

        if (maxItemCount != null) {
            localVarHeaderParams.put("maxItemCount", localVarApiClient.parameterToString(maxItemCount));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getLexemesByLanguage_0ValidateBeforeCall(String languageID, String continuation, Boolean deleted, String ifModifiedSince, String maxItemCount, String _public, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'languageID' is set
        if (languageID == null) {
            throw new ApiException("Missing the required parameter 'languageID' when calling getLexemesByLanguage_0(Async)");
        }

        return getLexemesByLanguage_0Call(languageID, continuation, deleted, ifModifiedSince, maxItemCount, _public, _callback);

    }

    /**
     * Get all Lexemes for a Language
     * 
     * @param languageID The ID of the Language to perform the operation on (required)
     * @param continuation The &#x60;dlx-continuation&#x60; header is used to send a continuation token with the request, when retrieving the next page of results. (optional)
     * @param deleted Setting the &#x60;deleted&#x60; option to &#x60;true&#x60; will return results that have been marked for deletion, but not yet deleted from the database. Otherwise requests for a resource marked for deletion will return a 410 error. (optional, default to false)
     * @param ifModifiedSince The &#x60;If-Modified-Since&#x60; header is used to retrieve only results modified since a given time. The value of this header must be a valid date string. (optional)
     * @param maxItemCount The &#x60;dlx-max-item-count&#x60; header is used to limit the number of results to a certain amount at a time (by default all results will be returned). If there are more results to be returned, a continuation token will also be sent in the &#x60;dlx-continuation&#x60; header. (optional)
     * @param _public Set this parameter to &#x60;true&#x60; to include all publicly-accessible resources, not just those that the user is listed as an Owner, Contributor, or Viewer for. (optional, default to false)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200: Operation successful. </td><td>  * dlx-continuation - A continuation token for retrieving more results <br>  * dlx-item-count - The number of items returned in the response <br>  * Last-Modified - The time that the item was last modified <br>  </td></tr>
     </table>
     */
    public void getLexemesByLanguage_0(String languageID, String continuation, Boolean deleted, String ifModifiedSince, String maxItemCount, String _public) throws ApiException {
        getLexemesByLanguage_0WithHttpInfo(languageID, continuation, deleted, ifModifiedSince, maxItemCount, _public);
    }

    /**
     * Get all Lexemes for a Language
     * 
     * @param languageID The ID of the Language to perform the operation on (required)
     * @param continuation The &#x60;dlx-continuation&#x60; header is used to send a continuation token with the request, when retrieving the next page of results. (optional)
     * @param deleted Setting the &#x60;deleted&#x60; option to &#x60;true&#x60; will return results that have been marked for deletion, but not yet deleted from the database. Otherwise requests for a resource marked for deletion will return a 410 error. (optional, default to false)
     * @param ifModifiedSince The &#x60;If-Modified-Since&#x60; header is used to retrieve only results modified since a given time. The value of this header must be a valid date string. (optional)
     * @param maxItemCount The &#x60;dlx-max-item-count&#x60; header is used to limit the number of results to a certain amount at a time (by default all results will be returned). If there are more results to be returned, a continuation token will also be sent in the &#x60;dlx-continuation&#x60; header. (optional)
     * @param _public Set this parameter to &#x60;true&#x60; to include all publicly-accessible resources, not just those that the user is listed as an Owner, Contributor, or Viewer for. (optional, default to false)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200: Operation successful. </td><td>  * dlx-continuation - A continuation token for retrieving more results <br>  * dlx-item-count - The number of items returned in the response <br>  * Last-Modified - The time that the item was last modified <br>  </td></tr>
     </table>
     */
    public ApiResponse<Void> getLexemesByLanguage_0WithHttpInfo(String languageID, String continuation, Boolean deleted, String ifModifiedSince, String maxItemCount, String _public) throws ApiException {
        okhttp3.Call localVarCall = getLexemesByLanguage_0ValidateBeforeCall(languageID, continuation, deleted, ifModifiedSince, maxItemCount, _public, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Get all Lexemes for a Language (asynchronously)
     * 
     * @param languageID The ID of the Language to perform the operation on (required)
     * @param continuation The &#x60;dlx-continuation&#x60; header is used to send a continuation token with the request, when retrieving the next page of results. (optional)
     * @param deleted Setting the &#x60;deleted&#x60; option to &#x60;true&#x60; will return results that have been marked for deletion, but not yet deleted from the database. Otherwise requests for a resource marked for deletion will return a 410 error. (optional, default to false)
     * @param ifModifiedSince The &#x60;If-Modified-Since&#x60; header is used to retrieve only results modified since a given time. The value of this header must be a valid date string. (optional)
     * @param maxItemCount The &#x60;dlx-max-item-count&#x60; header is used to limit the number of results to a certain amount at a time (by default all results will be returned). If there are more results to be returned, a continuation token will also be sent in the &#x60;dlx-continuation&#x60; header. (optional)
     * @param _public Set this parameter to &#x60;true&#x60; to include all publicly-accessible resources, not just those that the user is listed as an Owner, Contributor, or Viewer for. (optional, default to false)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200: Operation successful. </td><td>  * dlx-continuation - A continuation token for retrieving more results <br>  * dlx-item-count - The number of items returned in the response <br>  * Last-Modified - The time that the item was last modified <br>  </td></tr>
     </table>
     */
    public okhttp3.Call getLexemesByLanguage_0Async(String languageID, String continuation, Boolean deleted, String ifModifiedSince, String maxItemCount, String _public, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = getLexemesByLanguage_0ValidateBeforeCall(languageID, continuation, deleted, ifModifiedSince, maxItemCount, _public, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateLexeme
     * @param lexemeID The ID of the Lexeme to perform the operation on (required)
     * @param ifMatch The &#x60;If-Match&#x60; header is used with PUT and DELETE requests to check whether you have the most up-to-date version of the resource before updating or deleting it. The value of the &#x60;If-Match&#x60; header is the ETag (&#x60;_etag&#x60;) property of the resource. It is recommended that your application use this header whenever possible to avoid data conflicts. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200: Update successful. </td><td>  * Last-Modified - The time that the item was last modified <br>  </td></tr>
     </table>
     */
    public okhttp3.Call updateLexemeCall(String lexemeID, String ifMatch, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/lexemes/{lexemeID}"
            .replace("{" + "lexemeID" + "}", localVarApiClient.escapeString(lexemeID.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (ifMatch != null) {
            localVarHeaderParams.put("ifMatch", localVarApiClient.parameterToString(ifMatch));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateLexemeValidateBeforeCall(String lexemeID, String ifMatch, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'lexemeID' is set
        if (lexemeID == null) {
            throw new ApiException("Missing the required parameter 'lexemeID' when calling updateLexeme(Async)");
        }

        return updateLexemeCall(lexemeID, ifMatch, _callback);

    }

    /**
     * Perform a partial update on a Lexeme
     * Perform a partial update on a Lexeme.
     * @param lexemeID The ID of the Lexeme to perform the operation on (required)
     * @param ifMatch The &#x60;If-Match&#x60; header is used with PUT and DELETE requests to check whether you have the most up-to-date version of the resource before updating or deleting it. The value of the &#x60;If-Match&#x60; header is the ETag (&#x60;_etag&#x60;) property of the resource. It is recommended that your application use this header whenever possible to avoid data conflicts. (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200: Update successful. </td><td>  * Last-Modified - The time that the item was last modified <br>  </td></tr>
     </table>
     */
    public void updateLexeme(String lexemeID, String ifMatch) throws ApiException {
        updateLexemeWithHttpInfo(lexemeID, ifMatch);
    }

    /**
     * Perform a partial update on a Lexeme
     * Perform a partial update on a Lexeme.
     * @param lexemeID The ID of the Lexeme to perform the operation on (required)
     * @param ifMatch The &#x60;If-Match&#x60; header is used with PUT and DELETE requests to check whether you have the most up-to-date version of the resource before updating or deleting it. The value of the &#x60;If-Match&#x60; header is the ETag (&#x60;_etag&#x60;) property of the resource. It is recommended that your application use this header whenever possible to avoid data conflicts. (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200: Update successful. </td><td>  * Last-Modified - The time that the item was last modified <br>  </td></tr>
     </table>
     */
    public ApiResponse<Void> updateLexemeWithHttpInfo(String lexemeID, String ifMatch) throws ApiException {
        okhttp3.Call localVarCall = updateLexemeValidateBeforeCall(lexemeID, ifMatch, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Perform a partial update on a Lexeme (asynchronously)
     * Perform a partial update on a Lexeme.
     * @param lexemeID The ID of the Lexeme to perform the operation on (required)
     * @param ifMatch The &#x60;If-Match&#x60; header is used with PUT and DELETE requests to check whether you have the most up-to-date version of the resource before updating or deleting it. The value of the &#x60;If-Match&#x60; header is the ETag (&#x60;_etag&#x60;) property of the resource. It is recommended that your application use this header whenever possible to avoid data conflicts. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200: Update successful. </td><td>  * Last-Modified - The time that the item was last modified <br>  </td></tr>
     </table>
     */
    public okhttp3.Call updateLexemeAsync(String lexemeID, String ifMatch, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateLexemeValidateBeforeCall(lexemeID, ifMatch, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateLexemeByLanguage
     * @param languageID The ID of the Language to perform the operation on (required)
     * @param lexemeID The ID of the Lexeme to perform the operation on (required)
     * @param ifMatch The &#x60;If-Match&#x60; header is used with PUT and DELETE requests to check whether you have the most up-to-date version of the resource before updating or deleting it. The value of the &#x60;If-Match&#x60; header is the ETag (&#x60;_etag&#x60;) property of the resource. It is recommended that your application use this header whenever possible to avoid data conflicts. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200: Update successful. </td><td>  * Last-Modified - The time that the item was last modified <br>  </td></tr>
     </table>
     */
    public okhttp3.Call updateLexemeByLanguageCall(String languageID, String lexemeID, String ifMatch, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/languages/{languageID}/lexemes/{lexemeID}"
            .replace("{" + "languageID" + "}", localVarApiClient.escapeString(languageID.toString()))
            .replace("{" + "lexemeID" + "}", localVarApiClient.escapeString(lexemeID.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (ifMatch != null) {
            localVarHeaderParams.put("ifMatch", localVarApiClient.parameterToString(ifMatch));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateLexemeByLanguageValidateBeforeCall(String languageID, String lexemeID, String ifMatch, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'languageID' is set
        if (languageID == null) {
            throw new ApiException("Missing the required parameter 'languageID' when calling updateLexemeByLanguage(Async)");
        }

        // verify the required parameter 'lexemeID' is set
        if (lexemeID == null) {
            throw new ApiException("Missing the required parameter 'lexemeID' when calling updateLexemeByLanguage(Async)");
        }

        return updateLexemeByLanguageCall(languageID, lexemeID, ifMatch, _callback);

    }

    /**
     * Perform a partial update on a Lexeme
     * 
     * @param languageID The ID of the Language to perform the operation on (required)
     * @param lexemeID The ID of the Lexeme to perform the operation on (required)
     * @param ifMatch The &#x60;If-Match&#x60; header is used with PUT and DELETE requests to check whether you have the most up-to-date version of the resource before updating or deleting it. The value of the &#x60;If-Match&#x60; header is the ETag (&#x60;_etag&#x60;) property of the resource. It is recommended that your application use this header whenever possible to avoid data conflicts. (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200: Update successful. </td><td>  * Last-Modified - The time that the item was last modified <br>  </td></tr>
     </table>
     */
    public void updateLexemeByLanguage(String languageID, String lexemeID, String ifMatch) throws ApiException {
        updateLexemeByLanguageWithHttpInfo(languageID, lexemeID, ifMatch);
    }

    /**
     * Perform a partial update on a Lexeme
     * 
     * @param languageID The ID of the Language to perform the operation on (required)
     * @param lexemeID The ID of the Lexeme to perform the operation on (required)
     * @param ifMatch The &#x60;If-Match&#x60; header is used with PUT and DELETE requests to check whether you have the most up-to-date version of the resource before updating or deleting it. The value of the &#x60;If-Match&#x60; header is the ETag (&#x60;_etag&#x60;) property of the resource. It is recommended that your application use this header whenever possible to avoid data conflicts. (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200: Update successful. </td><td>  * Last-Modified - The time that the item was last modified <br>  </td></tr>
     </table>
     */
    public ApiResponse<Void> updateLexemeByLanguageWithHttpInfo(String languageID, String lexemeID, String ifMatch) throws ApiException {
        okhttp3.Call localVarCall = updateLexemeByLanguageValidateBeforeCall(languageID, lexemeID, ifMatch, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Perform a partial update on a Lexeme (asynchronously)
     * 
     * @param languageID The ID of the Language to perform the operation on (required)
     * @param lexemeID The ID of the Lexeme to perform the operation on (required)
     * @param ifMatch The &#x60;If-Match&#x60; header is used with PUT and DELETE requests to check whether you have the most up-to-date version of the resource before updating or deleting it. The value of the &#x60;If-Match&#x60; header is the ETag (&#x60;_etag&#x60;) property of the resource. It is recommended that your application use this header whenever possible to avoid data conflicts. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200: Update successful. </td><td>  * Last-Modified - The time that the item was last modified <br>  </td></tr>
     </table>
     */
    public okhttp3.Call updateLexemeByLanguageAsync(String languageID, String lexemeID, String ifMatch, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateLexemeByLanguageValidateBeforeCall(languageID, lexemeID, ifMatch, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for upsertLexeme
     * @param ifMatch The &#x60;If-Match&#x60; header is used with PUT and DELETE requests to check whether you have the most up-to-date version of the resource before updating or deleting it. The value of the &#x60;If-Match&#x60; header is the ETag (&#x60;_etag&#x60;) property of the resource. It is recommended that your application use this header whenever possible to avoid data conflicts. (optional)
     * @param languageID The ID of the Language to perform the operation on (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> 201: Upsert successful. </td><td>  * Last-Modified - The time that the item was last modified <br>  </td></tr>
     </table>
     */
    public okhttp3.Call upsertLexemeCall(String ifMatch, String languageID, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/lexemes";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (languageID != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("languageID", languageID));
        }

        if (ifMatch != null) {
            localVarHeaderParams.put("ifMatch", localVarApiClient.parameterToString(ifMatch));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call upsertLexemeValidateBeforeCall(String ifMatch, String languageID, final ApiCallback _callback) throws ApiException {
        return upsertLexemeCall(ifMatch, languageID, _callback);

    }

    /**
     * Upsert (add or replace) a Lexeme
     * Upsert (add or replace) a Lexeme. A &#x60;languageID&#x60; must be provided either as a query parameter, or as an attribute on the Lexeme body.
     * @param ifMatch The &#x60;If-Match&#x60; header is used with PUT and DELETE requests to check whether you have the most up-to-date version of the resource before updating or deleting it. The value of the &#x60;If-Match&#x60; header is the ETag (&#x60;_etag&#x60;) property of the resource. It is recommended that your application use this header whenever possible to avoid data conflicts. (optional)
     * @param languageID The ID of the Language to perform the operation on (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> 201: Upsert successful. </td><td>  * Last-Modified - The time that the item was last modified <br>  </td></tr>
     </table>
     */
    public void upsertLexeme(String ifMatch, String languageID) throws ApiException {
        upsertLexemeWithHttpInfo(ifMatch, languageID);
    }

    /**
     * Upsert (add or replace) a Lexeme
     * Upsert (add or replace) a Lexeme. A &#x60;languageID&#x60; must be provided either as a query parameter, or as an attribute on the Lexeme body.
     * @param ifMatch The &#x60;If-Match&#x60; header is used with PUT and DELETE requests to check whether you have the most up-to-date version of the resource before updating or deleting it. The value of the &#x60;If-Match&#x60; header is the ETag (&#x60;_etag&#x60;) property of the resource. It is recommended that your application use this header whenever possible to avoid data conflicts. (optional)
     * @param languageID The ID of the Language to perform the operation on (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> 201: Upsert successful. </td><td>  * Last-Modified - The time that the item was last modified <br>  </td></tr>
     </table>
     */
    public ApiResponse<Void> upsertLexemeWithHttpInfo(String ifMatch, String languageID) throws ApiException {
        okhttp3.Call localVarCall = upsertLexemeValidateBeforeCall(ifMatch, languageID, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Upsert (add or replace) a Lexeme (asynchronously)
     * Upsert (add or replace) a Lexeme. A &#x60;languageID&#x60; must be provided either as a query parameter, or as an attribute on the Lexeme body.
     * @param ifMatch The &#x60;If-Match&#x60; header is used with PUT and DELETE requests to check whether you have the most up-to-date version of the resource before updating or deleting it. The value of the &#x60;If-Match&#x60; header is the ETag (&#x60;_etag&#x60;) property of the resource. It is recommended that your application use this header whenever possible to avoid data conflicts. (optional)
     * @param languageID The ID of the Language to perform the operation on (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> 201: Upsert successful. </td><td>  * Last-Modified - The time that the item was last modified <br>  </td></tr>
     </table>
     */
    public okhttp3.Call upsertLexemeAsync(String ifMatch, String languageID, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = upsertLexemeValidateBeforeCall(ifMatch, languageID, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for upsertLexemeByLanguage_0
     * @param languageID The ID of the Language to perform the operation on (required)
     * @param ifMatch The &#x60;If-Match&#x60; header is used with PUT and DELETE requests to check whether you have the most up-to-date version of the resource before updating or deleting it. The value of the &#x60;If-Match&#x60; header is the ETag (&#x60;_etag&#x60;) property of the resource. It is recommended that your application use this header whenever possible to avoid data conflicts. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> 201: Upsert successful. </td><td>  * Last-Modified - The time that the item was last modified <br>  </td></tr>
     </table>
     */
    public okhttp3.Call upsertLexemeByLanguage_0Call(String languageID, String ifMatch, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/languages/{languageID}/lexemes"
            .replace("{" + "languageID" + "}", localVarApiClient.escapeString(languageID.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (ifMatch != null) {
            localVarHeaderParams.put("ifMatch", localVarApiClient.parameterToString(ifMatch));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call upsertLexemeByLanguage_0ValidateBeforeCall(String languageID, String ifMatch, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'languageID' is set
        if (languageID == null) {
            throw new ApiException("Missing the required parameter 'languageID' when calling upsertLexemeByLanguage_0(Async)");
        }

        return upsertLexemeByLanguage_0Call(languageID, ifMatch, _callback);

    }

    /**
     * Upsert (add or replace) a Lexeme
     * 
     * @param languageID The ID of the Language to perform the operation on (required)
     * @param ifMatch The &#x60;If-Match&#x60; header is used with PUT and DELETE requests to check whether you have the most up-to-date version of the resource before updating or deleting it. The value of the &#x60;If-Match&#x60; header is the ETag (&#x60;_etag&#x60;) property of the resource. It is recommended that your application use this header whenever possible to avoid data conflicts. (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> 201: Upsert successful. </td><td>  * Last-Modified - The time that the item was last modified <br>  </td></tr>
     </table>
     */
    public void upsertLexemeByLanguage_0(String languageID, String ifMatch) throws ApiException {
        upsertLexemeByLanguage_0WithHttpInfo(languageID, ifMatch);
    }

    /**
     * Upsert (add or replace) a Lexeme
     * 
     * @param languageID The ID of the Language to perform the operation on (required)
     * @param ifMatch The &#x60;If-Match&#x60; header is used with PUT and DELETE requests to check whether you have the most up-to-date version of the resource before updating or deleting it. The value of the &#x60;If-Match&#x60; header is the ETag (&#x60;_etag&#x60;) property of the resource. It is recommended that your application use this header whenever possible to avoid data conflicts. (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> 201: Upsert successful. </td><td>  * Last-Modified - The time that the item was last modified <br>  </td></tr>
     </table>
     */
    public ApiResponse<Void> upsertLexemeByLanguage_0WithHttpInfo(String languageID, String ifMatch) throws ApiException {
        okhttp3.Call localVarCall = upsertLexemeByLanguage_0ValidateBeforeCall(languageID, ifMatch, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Upsert (add or replace) a Lexeme (asynchronously)
     * 
     * @param languageID The ID of the Language to perform the operation on (required)
     * @param ifMatch The &#x60;If-Match&#x60; header is used with PUT and DELETE requests to check whether you have the most up-to-date version of the resource before updating or deleting it. The value of the &#x60;If-Match&#x60; header is the ETag (&#x60;_etag&#x60;) property of the resource. It is recommended that your application use this header whenever possible to avoid data conflicts. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> 201: Upsert successful. </td><td>  * Last-Modified - The time that the item was last modified <br>  </td></tr>
     </table>
     */
    public okhttp3.Call upsertLexemeByLanguage_0Async(String languageID, String ifMatch, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = upsertLexemeByLanguage_0ValidateBeforeCall(languageID, ifMatch, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
}
