# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class Recipient(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, client_id: str=None, device_id: str=None, device_token: str=None, registration_token: str=None, transport_type: str=None):
        """Recipient - a model defined in OpenAPI

        :param client_id: The client_id of this Recipient.
        :param device_id: The device_id of this Recipient.
        :param device_token: The device_token of this Recipient.
        :param registration_token: The registration_token of this Recipient.
        :param transport_type: The transport_type of this Recipient.
        """
        self.openapi_types = {
            'client_id': str,
            'device_id': str,
            'device_token': str,
            'registration_token': str,
            'transport_type': str
        }

        self.attribute_map = {
            'client_id': 'clientId',
            'device_id': 'deviceId',
            'device_token': 'deviceToken',
            'registration_token': 'registrationToken',
            'transport_type': 'transportType'
        }

        self._client_id = client_id
        self._device_id = device_id
        self._device_token = device_token
        self._registration_token = registration_token
        self._transport_type = transport_type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Recipient':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Recipient of this Recipient.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def client_id(self):
        """Gets the client_id of this Recipient.

        Client ID of recipient

        :return: The client_id of this Recipient.
        :rtype: str
        """
        return self._client_id

    @client_id.setter
    def client_id(self, client_id):
        """Sets the client_id of this Recipient.

        Client ID of recipient

        :param client_id: The client_id of this Recipient.
        :type client_id: str
        """

        self._client_id = client_id

    @property
    def device_id(self):
        """Gets the device_id of this Recipient.

        Client ID of recipient

        :return: The device_id of this Recipient.
        :rtype: str
        """
        return self._device_id

    @device_id.setter
    def device_id(self, device_id):
        """Sets the device_id of this Recipient.

        Client ID of recipient

        :param device_id: The device_id of this Recipient.
        :type device_id: str
        """

        self._device_id = device_id

    @property
    def device_token(self):
        """Gets the device_token of this Recipient.

        when using APNs, specifies the required device token.

        :return: The device_token of this Recipient.
        :rtype: str
        """
        return self._device_token

    @device_token.setter
    def device_token(self, device_token):
        """Sets the device_token of this Recipient.

        when using APNs, specifies the required device token.

        :param device_token: The device_token of this Recipient.
        :type device_token: str
        """

        self._device_token = device_token

    @property
    def registration_token(self):
        """Gets the registration_token of this Recipient.

        when using GCM or FCM, specifies the required registration token.

        :return: The registration_token of this Recipient.
        :rtype: str
        """
        return self._registration_token

    @registration_token.setter
    def registration_token(self, registration_token):
        """Sets the registration_token of this Recipient.

        when using GCM or FCM, specifies the required registration token.

        :param registration_token: The registration_token of this Recipient.
        :type registration_token: str
        """

        self._registration_token = registration_token

    @property
    def transport_type(self):
        """Gets the transport_type of this Recipient.

        Defines which push platform is being used.

        :return: The transport_type of this Recipient.
        :rtype: str
        """
        return self._transport_type

    @transport_type.setter
    def transport_type(self, transport_type):
        """Sets the transport_type of this Recipient.

        Defines which push platform is being used.

        :param transport_type: The transport_type of this Recipient.
        :type transport_type: str
        """
        allowed_values = ["apns", "fcm", "gcm"]  # noqa: E501
        if transport_type not in allowed_values:
            raise ValueError(
                "Invalid value for `transport_type` ({0}), must be one of {1}"
                .format(transport_type, allowed_values)
            )

        self._transport_type = transport_type
