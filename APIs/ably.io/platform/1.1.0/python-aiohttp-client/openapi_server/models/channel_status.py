# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.occupancy import Occupancy
from openapi_server import util


class ChannelStatus(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, is_active: bool=None, occupancy: Occupancy=None):
        """ChannelStatus - a model defined in OpenAPI

        :param is_active: The is_active of this ChannelStatus.
        :param occupancy: The occupancy of this ChannelStatus.
        """
        self.openapi_types = {
            'is_active': bool,
            'occupancy': Occupancy
        }

        self.attribute_map = {
            'is_active': 'isActive',
            'occupancy': 'occupancy'
        }

        self._is_active = is_active
        self._occupancy = occupancy

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ChannelStatus':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ChannelStatus of this ChannelStatus.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def is_active(self):
        """Gets the is_active of this ChannelStatus.

        A required boolean value indicating whether the channel that is the subject of the event is active. For events indicating regional activity of a channel this indicates activity in that region, not global activity.

        :return: The is_active of this ChannelStatus.
        :rtype: bool
        """
        return self._is_active

    @is_active.setter
    def is_active(self, is_active):
        """Sets the is_active of this ChannelStatus.

        A required boolean value indicating whether the channel that is the subject of the event is active. For events indicating regional activity of a channel this indicates activity in that region, not global activity.

        :param is_active: The is_active of this ChannelStatus.
        :type is_active: bool
        """
        if is_active is None:
            raise ValueError("Invalid value for `is_active`, must not be `None`")

        self._is_active = is_active

    @property
    def occupancy(self):
        """Gets the occupancy of this ChannelStatus.


        :return: The occupancy of this ChannelStatus.
        :rtype: Occupancy
        """
        return self._occupancy

    @occupancy.setter
    def occupancy(self, occupancy):
        """Sets the occupancy of this ChannelStatus.


        :param occupancy: The occupancy of this ChannelStatus.
        :type occupancy: Occupancy
        """

        self._occupancy = occupancy
