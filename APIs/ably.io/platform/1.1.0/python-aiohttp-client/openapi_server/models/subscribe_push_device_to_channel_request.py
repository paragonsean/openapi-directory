# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.subscribe_push_device_to_channel_request_one_of import SubscribePushDeviceToChannelRequestOneOf
from openapi_server.models.subscribe_push_device_to_channel_request_one_of1 import SubscribePushDeviceToChannelRequestOneOf1
from openapi_server import util


class SubscribePushDeviceToChannelRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, channel: str=None, device_id: str=None, client_id: str=None):
        """SubscribePushDeviceToChannelRequest - a model defined in OpenAPI

        :param channel: The channel of this SubscribePushDeviceToChannelRequest.
        :param device_id: The device_id of this SubscribePushDeviceToChannelRequest.
        :param client_id: The client_id of this SubscribePushDeviceToChannelRequest.
        """
        self.openapi_types = {
            'channel': str,
            'device_id': str,
            'client_id': str
        }

        self.attribute_map = {
            'channel': 'channel',
            'device_id': 'deviceId',
            'client_id': 'clientId'
        }

        self._channel = channel
        self._device_id = device_id
        self._client_id = client_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'SubscribePushDeviceToChannelRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The subscribePushDeviceToChannel_request of this SubscribePushDeviceToChannelRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def channel(self):
        """Gets the channel of this SubscribePushDeviceToChannelRequest.

        Channel name.

        :return: The channel of this SubscribePushDeviceToChannelRequest.
        :rtype: str
        """
        return self._channel

    @channel.setter
    def channel(self, channel):
        """Sets the channel of this SubscribePushDeviceToChannelRequest.

        Channel name.

        :param channel: The channel of this SubscribePushDeviceToChannelRequest.
        :type channel: str
        """

        self._channel = channel

    @property
    def device_id(self):
        """Gets the device_id of this SubscribePushDeviceToChannelRequest.

        Must be set when clientId is empty, cannot be used with clientId.

        :return: The device_id of this SubscribePushDeviceToChannelRequest.
        :rtype: str
        """
        return self._device_id

    @device_id.setter
    def device_id(self, device_id):
        """Sets the device_id of this SubscribePushDeviceToChannelRequest.

        Must be set when clientId is empty, cannot be used with clientId.

        :param device_id: The device_id of this SubscribePushDeviceToChannelRequest.
        :type device_id: str
        """

        self._device_id = device_id

    @property
    def client_id(self):
        """Gets the client_id of this SubscribePushDeviceToChannelRequest.

        Must be set when deviceId is empty, cannot be used with deviceId.

        :return: The client_id of this SubscribePushDeviceToChannelRequest.
        :rtype: str
        """
        return self._client_id

    @client_id.setter
    def client_id(self, client_id):
        """Sets the client_id of this SubscribePushDeviceToChannelRequest.

        Must be set when deviceId is empty, cannot be used with deviceId.

        :param client_id: The client_id of this SubscribePushDeviceToChannelRequest.
        :type client_id: str
        """

        self._client_id = client_id
