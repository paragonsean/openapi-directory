# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.extras import Extras
from openapi_server import util


class Message(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, client_id: str=None, connection_id: str=None, data: str=None, encoding: str=None, extras: Extras=None, id: str=None, name: str=None, timestamp: int=None):
        """Message - a model defined in OpenAPI

        :param client_id: The client_id of this Message.
        :param connection_id: The connection_id of this Message.
        :param data: The data of this Message.
        :param encoding: The encoding of this Message.
        :param extras: The extras of this Message.
        :param id: The id of this Message.
        :param name: The name of this Message.
        :param timestamp: The timestamp of this Message.
        """
        self.openapi_types = {
            'client_id': str,
            'connection_id': str,
            'data': str,
            'encoding': str,
            'extras': Extras,
            'id': str,
            'name': str,
            'timestamp': int
        }

        self.attribute_map = {
            'client_id': 'clientId',
            'connection_id': 'connectionId',
            'data': 'data',
            'encoding': 'encoding',
            'extras': 'extras',
            'id': 'id',
            'name': 'name',
            'timestamp': 'timestamp'
        }

        self._client_id = client_id
        self._connection_id = connection_id
        self._data = data
        self._encoding = encoding
        self._extras = extras
        self._id = id
        self._name = name
        self._timestamp = timestamp

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Message':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Message of this Message.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def client_id(self):
        """Gets the client_id of this Message.

        The [client ID](https://www.ably.io/documentation/core-features/authentication#identified-clients) of the publisher of this message.

        :return: The client_id of this Message.
        :rtype: str
        """
        return self._client_id

    @client_id.setter
    def client_id(self, client_id):
        """Sets the client_id of this Message.

        The [client ID](https://www.ably.io/documentation/core-features/authentication#identified-clients) of the publisher of this message.

        :param client_id: The client_id of this Message.
        :type client_id: str
        """

        self._client_id = client_id

    @property
    def connection_id(self):
        """Gets the connection_id of this Message.

        The connection ID of the publisher of this message.

        :return: The connection_id of this Message.
        :rtype: str
        """
        return self._connection_id

    @connection_id.setter
    def connection_id(self, connection_id):
        """Sets the connection_id of this Message.

        The connection ID of the publisher of this message.

        :param connection_id: The connection_id of this Message.
        :type connection_id: str
        """

        self._connection_id = connection_id

    @property
    def data(self):
        """Gets the data of this Message.

        The string encoded payload, with the encoding specified below.

        :return: The data of this Message.
        :rtype: str
        """
        return self._data

    @data.setter
    def data(self, data):
        """Sets the data of this Message.

        The string encoded payload, with the encoding specified below.

        :param data: The data of this Message.
        :type data: str
        """

        self._data = data

    @property
    def encoding(self):
        """Gets the encoding of this Message.

        This will typically be empty as all messages received from Ably are automatically decoded client-side using this value. However, if the message encoding cannot be processed, this attribute will contain the remaining transformations not applied to the data payload.

        :return: The encoding of this Message.
        :rtype: str
        """
        return self._encoding

    @encoding.setter
    def encoding(self, encoding):
        """Sets the encoding of this Message.

        This will typically be empty as all messages received from Ably are automatically decoded client-side using this value. However, if the message encoding cannot be processed, this attribute will contain the remaining transformations not applied to the data payload.

        :param encoding: The encoding of this Message.
        :type encoding: str
        """

        self._encoding = encoding

    @property
    def extras(self):
        """Gets the extras of this Message.


        :return: The extras of this Message.
        :rtype: Extras
        """
        return self._extras

    @extras.setter
    def extras(self, extras):
        """Sets the extras of this Message.


        :param extras: The extras of this Message.
        :type extras: Extras
        """

        self._extras = extras

    @property
    def id(self):
        """Gets the id of this Message.

        A Unique ID that can be specified by the publisher for [idempotent publishing](https://www.ably.io/documentation/rest/messages#idempotent).

        :return: The id of this Message.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Message.

        A Unique ID that can be specified by the publisher for [idempotent publishing](https://www.ably.io/documentation/rest/messages#idempotent).

        :param id: The id of this Message.
        :type id: str
        """

        self._id = id

    @property
    def name(self):
        """Gets the name of this Message.

        The event name, if provided.

        :return: The name of this Message.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Message.

        The event name, if provided.

        :param name: The name of this Message.
        :type name: str
        """

        self._name = name

    @property
    def timestamp(self):
        """Gets the timestamp of this Message.

        Timestamp when the message was received by the Ably, as milliseconds since the epoch.

        :return: The timestamp of this Message.
        :rtype: int
        """
        return self._timestamp

    @timestamp.setter
    def timestamp(self, timestamp):
        """Sets the timestamp of this Message.

        Timestamp when the message was received by the Ably, as milliseconds since the epoch.

        :param timestamp: The timestamp of this Message.
        :type timestamp: int
        """

        self._timestamp = timestamp
