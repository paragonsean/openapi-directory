# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.recipient import Recipient
from openapi_server import util


class DeviceDetails(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, client_id: str=None, device_secret: str=None, form_factor: str=None, id: str=None, metadata: object=None, platform: str=None, push_recipient: Recipient=None, push_state: str=None):
        """DeviceDetails - a model defined in OpenAPI

        :param client_id: The client_id of this DeviceDetails.
        :param device_secret: The device_secret of this DeviceDetails.
        :param form_factor: The form_factor of this DeviceDetails.
        :param id: The id of this DeviceDetails.
        :param metadata: The metadata of this DeviceDetails.
        :param platform: The platform of this DeviceDetails.
        :param push_recipient: The push_recipient of this DeviceDetails.
        :param push_state: The push_state of this DeviceDetails.
        """
        self.openapi_types = {
            'client_id': str,
            'device_secret': str,
            'form_factor': str,
            'id': str,
            'metadata': object,
            'platform': str,
            'push_recipient': Recipient,
            'push_state': str
        }

        self.attribute_map = {
            'client_id': 'clientId',
            'device_secret': 'deviceSecret',
            'form_factor': 'formFactor',
            'id': 'id',
            'metadata': 'metadata',
            'platform': 'platform',
            'push_recipient': 'push.recipient',
            'push_state': 'push.state'
        }

        self._client_id = client_id
        self._device_secret = device_secret
        self._form_factor = form_factor
        self._id = id
        self._metadata = metadata
        self._platform = platform
        self._push_recipient = push_recipient
        self._push_state = push_state

    @classmethod
    def from_dict(cls, dikt: dict) -> 'DeviceDetails':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The DeviceDetails of this DeviceDetails.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def client_id(self):
        """Gets the client_id of this DeviceDetails.

        Optional trusted client identifier for the device.

        :return: The client_id of this DeviceDetails.
        :rtype: str
        """
        return self._client_id

    @client_id.setter
    def client_id(self, client_id):
        """Sets the client_id of this DeviceDetails.

        Optional trusted client identifier for the device.

        :param client_id: The client_id of this DeviceDetails.
        :type client_id: str
        """

        self._client_id = client_id

    @property
    def device_secret(self):
        """Gets the device_secret of this DeviceDetails.

        Secret value for the device.

        :return: The device_secret of this DeviceDetails.
        :rtype: str
        """
        return self._device_secret

    @device_secret.setter
    def device_secret(self, device_secret):
        """Sets the device_secret of this DeviceDetails.

        Secret value for the device.

        :param device_secret: The device_secret of this DeviceDetails.
        :type device_secret: str
        """

        self._device_secret = device_secret

    @property
    def form_factor(self):
        """Gets the form_factor of this DeviceDetails.

        Form factor of the push device.

        :return: The form_factor of this DeviceDetails.
        :rtype: str
        """
        return self._form_factor

    @form_factor.setter
    def form_factor(self, form_factor):
        """Sets the form_factor of this DeviceDetails.

        Form factor of the push device.

        :param form_factor: The form_factor of this DeviceDetails.
        :type form_factor: str
        """
        allowed_values = ["phone", "tablet", "desktop", "tv", "watch", "car", "embedded"]  # noqa: E501
        if form_factor not in allowed_values:
            raise ValueError(
                "Invalid value for `form_factor` ({0}), must be one of {1}"
                .format(form_factor, allowed_values)
            )

        self._form_factor = form_factor

    @property
    def id(self):
        """Gets the id of this DeviceDetails.

        Unique identifier for the device generated by the device itself.

        :return: The id of this DeviceDetails.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this DeviceDetails.

        Unique identifier for the device generated by the device itself.

        :param id: The id of this DeviceDetails.
        :type id: str
        """

        self._id = id

    @property
    def metadata(self):
        """Gets the metadata of this DeviceDetails.

        Optional metadata object for this device. The metadata for a device may only be set by clients with push-admin privileges and will be used more extensively in the future with smart notifications.

        :return: The metadata of this DeviceDetails.
        :rtype: object
        """
        return self._metadata

    @metadata.setter
    def metadata(self, metadata):
        """Sets the metadata of this DeviceDetails.

        Optional metadata object for this device. The metadata for a device may only be set by clients with push-admin privileges and will be used more extensively in the future with smart notifications.

        :param metadata: The metadata of this DeviceDetails.
        :type metadata: object
        """

        self._metadata = metadata

    @property
    def platform(self):
        """Gets the platform of this DeviceDetails.

        Platform of the push device.

        :return: The platform of this DeviceDetails.
        :rtype: str
        """
        return self._platform

    @platform.setter
    def platform(self, platform):
        """Sets the platform of this DeviceDetails.

        Platform of the push device.

        :param platform: The platform of this DeviceDetails.
        :type platform: str
        """
        allowed_values = ["ios", "android"]  # noqa: E501
        if platform not in allowed_values:
            raise ValueError(
                "Invalid value for `platform` ({0}), must be one of {1}"
                .format(platform, allowed_values)
            )

        self._platform = platform

    @property
    def push_recipient(self):
        """Gets the push_recipient of this DeviceDetails.


        :return: The push_recipient of this DeviceDetails.
        :rtype: Recipient
        """
        return self._push_recipient

    @push_recipient.setter
    def push_recipient(self, push_recipient):
        """Sets the push_recipient of this DeviceDetails.


        :param push_recipient: The push_recipient of this DeviceDetails.
        :type push_recipient: Recipient
        """

        self._push_recipient = push_recipient

    @property
    def push_state(self):
        """Gets the push_state of this DeviceDetails.

        the current state of the push device.

        :return: The push_state of this DeviceDetails.
        :rtype: str
        """
        return self._push_state

    @push_state.setter
    def push_state(self, push_state):
        """Sets the push_state of this DeviceDetails.

        the current state of the push device.

        :param push_state: The push_state of this DeviceDetails.
        :type push_state: str
        """
        allowed_values = ["Active", "Failing", "Failed"]  # noqa: E501
        if push_state not in allowed_values:
            raise ValueError(
                "Invalid value for `push_state` ({0}), must be one of {1}"
                .format(push_state, allowed_values)
            )

        self._push_state = push_state
