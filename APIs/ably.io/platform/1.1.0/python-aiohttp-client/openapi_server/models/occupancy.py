# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class Occupancy(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, presence_connections: int=None, presence_members: int=None, presence_subscribers: int=None, publishers: int=None, subscribers: int=None):
        """Occupancy - a model defined in OpenAPI

        :param presence_connections: The presence_connections of this Occupancy.
        :param presence_members: The presence_members of this Occupancy.
        :param presence_subscribers: The presence_subscribers of this Occupancy.
        :param publishers: The publishers of this Occupancy.
        :param subscribers: The subscribers of this Occupancy.
        """
        self.openapi_types = {
            'presence_connections': int,
            'presence_members': int,
            'presence_subscribers': int,
            'publishers': int,
            'subscribers': int
        }

        self.attribute_map = {
            'presence_connections': 'presenceConnections',
            'presence_members': 'presenceMembers',
            'presence_subscribers': 'presenceSubscribers',
            'publishers': 'publishers',
            'subscribers': 'subscribers'
        }

        self._presence_connections = presence_connections
        self._presence_members = presence_members
        self._presence_subscribers = presence_subscribers
        self._publishers = publishers
        self._subscribers = subscribers

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Occupancy':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Occupancy of this Occupancy.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def presence_connections(self):
        """Gets the presence_connections of this Occupancy.

        The number of connections that are authorised to enter members into the presence channel.

        :return: The presence_connections of this Occupancy.
        :rtype: int
        """
        return self._presence_connections

    @presence_connections.setter
    def presence_connections(self, presence_connections):
        """Sets the presence_connections of this Occupancy.

        The number of connections that are authorised to enter members into the presence channel.

        :param presence_connections: The presence_connections of this Occupancy.
        :type presence_connections: int
        """

        self._presence_connections = presence_connections

    @property
    def presence_members(self):
        """Gets the presence_members of this Occupancy.

        The number of members currently entered into the presence channel.

        :return: The presence_members of this Occupancy.
        :rtype: int
        """
        return self._presence_members

    @presence_members.setter
    def presence_members(self, presence_members):
        """Sets the presence_members of this Occupancy.

        The number of members currently entered into the presence channel.

        :param presence_members: The presence_members of this Occupancy.
        :type presence_members: int
        """

        self._presence_members = presence_members

    @property
    def presence_subscribers(self):
        """Gets the presence_subscribers of this Occupancy.

        The number of connections that are authorised to subscribe to presence messages.

        :return: The presence_subscribers of this Occupancy.
        :rtype: int
        """
        return self._presence_subscribers

    @presence_subscribers.setter
    def presence_subscribers(self, presence_subscribers):
        """Sets the presence_subscribers of this Occupancy.

        The number of connections that are authorised to subscribe to presence messages.

        :param presence_subscribers: The presence_subscribers of this Occupancy.
        :type presence_subscribers: int
        """

        self._presence_subscribers = presence_subscribers

    @property
    def publishers(self):
        """Gets the publishers of this Occupancy.

        The number of connections attached to the channel that are authorised to publish.

        :return: The publishers of this Occupancy.
        :rtype: int
        """
        return self._publishers

    @publishers.setter
    def publishers(self, publishers):
        """Sets the publishers of this Occupancy.

        The number of connections attached to the channel that are authorised to publish.

        :param publishers: The publishers of this Occupancy.
        :type publishers: int
        """

        self._publishers = publishers

    @property
    def subscribers(self):
        """Gets the subscribers of this Occupancy.

        The number of connections attached that are authorised to subscribe to messages.

        :return: The subscribers of this Occupancy.
        :rtype: int
        """
        return self._subscribers

    @subscribers.setter
    def subscribers(self, subscribers):
        """Sets the subscribers of this Occupancy.

        The number of connections attached that are authorised to subscribe to messages.

        :param subscribers: The subscribers of this Occupancy.
        :type subscribers: int
        """

        self._subscribers = subscribers
