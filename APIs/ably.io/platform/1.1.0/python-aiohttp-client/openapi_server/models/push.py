# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.notification import Notification
from openapi_server.models.push_apns import PushApns
from openapi_server.models.push_fcm import PushFcm
from openapi_server.models.push_web import PushWeb
from openapi_server import util


class Push(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, apns: PushApns=None, data: str=None, fcm: PushFcm=None, notification: Notification=None, web: PushWeb=None):
        """Push - a model defined in OpenAPI

        :param apns: The apns of this Push.
        :param data: The data of this Push.
        :param fcm: The fcm of this Push.
        :param notification: The notification of this Push.
        :param web: The web of this Push.
        """
        self.openapi_types = {
            'apns': PushApns,
            'data': str,
            'fcm': PushFcm,
            'notification': Notification,
            'web': PushWeb
        }

        self.attribute_map = {
            'apns': 'apns',
            'data': 'data',
            'fcm': 'fcm',
            'notification': 'notification',
            'web': 'web'
        }

        self._apns = apns
        self._data = data
        self._fcm = fcm
        self._notification = notification
        self._web = web

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Push':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Push of this Push.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def apns(self):
        """Gets the apns of this Push.


        :return: The apns of this Push.
        :rtype: PushApns
        """
        return self._apns

    @apns.setter
    def apns(self, apns):
        """Sets the apns of this Push.


        :param apns: The apns of this Push.
        :type apns: PushApns
        """

        self._apns = apns

    @property
    def data(self):
        """Gets the data of this Push.

        Arbitrary [key-value string-to-string payload](https://www.ably.io/documentation/general/push/publish#channel-broadcast-example).

        :return: The data of this Push.
        :rtype: str
        """
        return self._data

    @data.setter
    def data(self, data):
        """Sets the data of this Push.

        Arbitrary [key-value string-to-string payload](https://www.ably.io/documentation/general/push/publish#channel-broadcast-example).

        :param data: The data of this Push.
        :type data: str
        """

        self._data = data

    @property
    def fcm(self):
        """Gets the fcm of this Push.


        :return: The fcm of this Push.
        :rtype: PushFcm
        """
        return self._fcm

    @fcm.setter
    def fcm(self, fcm):
        """Sets the fcm of this Push.


        :param fcm: The fcm of this Push.
        :type fcm: PushFcm
        """

        self._fcm = fcm

    @property
    def notification(self):
        """Gets the notification of this Push.


        :return: The notification of this Push.
        :rtype: Notification
        """
        return self._notification

    @notification.setter
    def notification(self, notification):
        """Sets the notification of this Push.


        :param notification: The notification of this Push.
        :type notification: Notification
        """

        self._notification = notification

    @property
    def web(self):
        """Gets the web of this Push.


        :return: The web of this Push.
        :rtype: PushWeb
        """
        return self._web

    @web.setter
    def web(self, web):
        """Sets the web of this Push.


        :param web: The web of this Push.
        :type web: PushWeb
        """

        self._web = web
