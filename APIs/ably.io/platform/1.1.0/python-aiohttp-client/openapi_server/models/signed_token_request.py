# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class SignedTokenRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, capability: object=None, client_id: str=None, key_name: str=None, nonce: str=None, timestamp: int=None, mac: str=None):
        """SignedTokenRequest - a model defined in OpenAPI

        :param capability: The capability of this SignedTokenRequest.
        :param client_id: The client_id of this SignedTokenRequest.
        :param key_name: The key_name of this SignedTokenRequest.
        :param nonce: The nonce of this SignedTokenRequest.
        :param timestamp: The timestamp of this SignedTokenRequest.
        :param mac: The mac of this SignedTokenRequest.
        """
        self.openapi_types = {
            'capability': object,
            'client_id': str,
            'key_name': str,
            'nonce': str,
            'timestamp': int,
            'mac': str
        }

        self.attribute_map = {
            'capability': 'capability',
            'client_id': 'clientId',
            'key_name': 'keyName',
            'nonce': 'nonce',
            'timestamp': 'timestamp',
            'mac': 'mac'
        }

        self._capability = capability
        self._client_id = client_id
        self._key_name = key_name
        self._nonce = nonce
        self._timestamp = timestamp
        self._mac = mac

    @classmethod
    def from_dict(cls, dikt: dict) -> 'SignedTokenRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The SignedTokenRequest of this SignedTokenRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def capability(self):
        """Gets the capability of this SignedTokenRequest.

        The [capabilities](https://www.ably.io/documentation/core-features/authentication#capabilities-explained) (i.e. a set of channel names/namespaces and, for each, a set of operations) which should be a subset of the set of capabilities associated with the key specified in keyName.

        :return: The capability of this SignedTokenRequest.
        :rtype: object
        """
        return self._capability

    @capability.setter
    def capability(self, capability):
        """Sets the capability of this SignedTokenRequest.

        The [capabilities](https://www.ably.io/documentation/core-features/authentication#capabilities-explained) (i.e. a set of channel names/namespaces and, for each, a set of operations) which should be a subset of the set of capabilities associated with the key specified in keyName.

        :param capability: The capability of this SignedTokenRequest.
        :type capability: object
        """
        if capability is None:
            raise ValueError("Invalid value for `capability`, must not be `None`")

        self._capability = capability

    @property
    def client_id(self):
        """Gets the client_id of this SignedTokenRequest.

        The [client ID](https://www.ably.io/documentation/core-features/authentication#identified-clients) to be assosciated with the token. Can be set to * to allow for any client ID to be used.

        :return: The client_id of this SignedTokenRequest.
        :rtype: str
        """
        return self._client_id

    @client_id.setter
    def client_id(self, client_id):
        """Sets the client_id of this SignedTokenRequest.

        The [client ID](https://www.ably.io/documentation/core-features/authentication#identified-clients) to be assosciated with the token. Can be set to * to allow for any client ID to be used.

        :param client_id: The client_id of this SignedTokenRequest.
        :type client_id: str
        """

        self._client_id = client_id

    @property
    def key_name(self):
        """Gets the key_name of this SignedTokenRequest.

        Name of the key used for the TokenRequest. The keyName comprises of the app ID and key ID on an API Key.

        :return: The key_name of this SignedTokenRequest.
        :rtype: str
        """
        return self._key_name

    @key_name.setter
    def key_name(self, key_name):
        """Sets the key_name of this SignedTokenRequest.

        Name of the key used for the TokenRequest. The keyName comprises of the app ID and key ID on an API Key.

        :param key_name: The key_name of this SignedTokenRequest.
        :type key_name: str
        """
        if key_name is None:
            raise ValueError("Invalid value for `key_name`, must not be `None`")

        self._key_name = key_name

    @property
    def nonce(self):
        """Gets the nonce of this SignedTokenRequest.

        An unquoted, un-escaped random string of at least 16 characters. Used to ensure the Ably TokenRequest cannot be reused.

        :return: The nonce of this SignedTokenRequest.
        :rtype: str
        """
        return self._nonce

    @nonce.setter
    def nonce(self, nonce):
        """Sets the nonce of this SignedTokenRequest.

        An unquoted, un-escaped random string of at least 16 characters. Used to ensure the Ably TokenRequest cannot be reused.

        :param nonce: The nonce of this SignedTokenRequest.
        :type nonce: str
        """
        if nonce is None:
            raise ValueError("Invalid value for `nonce`, must not be `None`")

        self._nonce = nonce

    @property
    def timestamp(self):
        """Gets the timestamp of this SignedTokenRequest.

        Time of creation of the Ably TokenRequest.

        :return: The timestamp of this SignedTokenRequest.
        :rtype: int
        """
        return self._timestamp

    @timestamp.setter
    def timestamp(self, timestamp):
        """Sets the timestamp of this SignedTokenRequest.

        Time of creation of the Ably TokenRequest.

        :param timestamp: The timestamp of this SignedTokenRequest.
        :type timestamp: int
        """
        if timestamp is None:
            raise ValueError("Invalid value for `timestamp`, must not be `None`")

        self._timestamp = timestamp

    @property
    def mac(self):
        """Gets the mac of this SignedTokenRequest.

        A signature, generated as an HMAC of each of the above components, using the key secret value.

        :return: The mac of this SignedTokenRequest.
        :rtype: str
        """
        return self._mac

    @mac.setter
    def mac(self, mac):
        """Sets the mac of this SignedTokenRequest.

        A signature, generated as an HMAC of each of the above components, using the key secret value.

        :param mac: The mac of this SignedTokenRequest.
        :type mac: str
        """
        if mac is None:
            raise ValueError("Invalid value for `mac`, must not be `None`")

        self._mac = mac
