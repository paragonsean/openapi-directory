# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.channel_status import ChannelStatus
from openapi_server import util


class ChannelDetails(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, channel_id: str=None, is_global_master: bool=None, region: str=None, status: ChannelStatus=None):
        """ChannelDetails - a model defined in OpenAPI

        :param channel_id: The channel_id of this ChannelDetails.
        :param is_global_master: The is_global_master of this ChannelDetails.
        :param region: The region of this ChannelDetails.
        :param status: The status of this ChannelDetails.
        """
        self.openapi_types = {
            'channel_id': str,
            'is_global_master': bool,
            'region': str,
            'status': ChannelStatus
        }

        self.attribute_map = {
            'channel_id': 'channelId',
            'is_global_master': 'isGlobalMaster',
            'region': 'region',
            'status': 'status'
        }

        self._channel_id = channel_id
        self._is_global_master = is_global_master
        self._region = region
        self._status = status

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ChannelDetails':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ChannelDetails of this ChannelDetails.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def channel_id(self):
        """Gets the channel_id of this ChannelDetails.

        The required name of the channel including any qualifier, if any.

        :return: The channel_id of this ChannelDetails.
        :rtype: str
        """
        return self._channel_id

    @channel_id.setter
    def channel_id(self, channel_id):
        """Sets the channel_id of this ChannelDetails.

        The required name of the channel including any qualifier, if any.

        :param channel_id: The channel_id of this ChannelDetails.
        :type channel_id: str
        """
        if channel_id is None:
            raise ValueError("Invalid value for `channel_id`, must not be `None`")

        self._channel_id = channel_id

    @property
    def is_global_master(self):
        """Gets the is_global_master of this ChannelDetails.

        In events relating to the activity of a channel in a specific region, this optionally identifies whether or not that region is responsible for global coordination of the channel.

        :return: The is_global_master of this ChannelDetails.
        :rtype: bool
        """
        return self._is_global_master

    @is_global_master.setter
    def is_global_master(self, is_global_master):
        """Sets the is_global_master of this ChannelDetails.

        In events relating to the activity of a channel in a specific region, this optionally identifies whether or not that region is responsible for global coordination of the channel.

        :param is_global_master: The is_global_master of this ChannelDetails.
        :type is_global_master: bool
        """

        self._is_global_master = is_global_master

    @property
    def region(self):
        """Gets the region of this ChannelDetails.

        In events relating to the activity of a channel in a specific region, this optionally identifies the region.

        :return: The region of this ChannelDetails.
        :rtype: str
        """
        return self._region

    @region.setter
    def region(self, region):
        """Sets the region of this ChannelDetails.

        In events relating to the activity of a channel in a specific region, this optionally identifies the region.

        :param region: The region of this ChannelDetails.
        :type region: str
        """

        self._region = region

    @property
    def status(self):
        """Gets the status of this ChannelDetails.


        :return: The status of this ChannelDetails.
        :rtype: ChannelStatus
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this ChannelDetails.


        :param status: The status of this ChannelDetails.
        :type status: ChannelStatus
        """

        self._status = status
