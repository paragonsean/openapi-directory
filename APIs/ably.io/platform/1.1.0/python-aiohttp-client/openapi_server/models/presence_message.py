# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.extras import Extras
from openapi_server import util


class PresenceMessage(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, action: str=None, client_id: str=None, connection_id: str=None, data: str=None, encoding: str=None, extras: Extras=None, id: str=None, timestamp: int=None):
        """PresenceMessage - a model defined in OpenAPI

        :param action: The action of this PresenceMessage.
        :param client_id: The client_id of this PresenceMessage.
        :param connection_id: The connection_id of this PresenceMessage.
        :param data: The data of this PresenceMessage.
        :param encoding: The encoding of this PresenceMessage.
        :param extras: The extras of this PresenceMessage.
        :param id: The id of this PresenceMessage.
        :param timestamp: The timestamp of this PresenceMessage.
        """
        self.openapi_types = {
            'action': str,
            'client_id': str,
            'connection_id': str,
            'data': str,
            'encoding': str,
            'extras': Extras,
            'id': str,
            'timestamp': int
        }

        self.attribute_map = {
            'action': 'action',
            'client_id': 'clientId',
            'connection_id': 'connectionId',
            'data': 'data',
            'encoding': 'encoding',
            'extras': 'extras',
            'id': 'id',
            'timestamp': 'timestamp'
        }

        self._action = action
        self._client_id = client_id
        self._connection_id = connection_id
        self._data = data
        self._encoding = encoding
        self._extras = extras
        self._id = id
        self._timestamp = timestamp

    @classmethod
    def from_dict(cls, dikt: dict) -> 'PresenceMessage':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The PresenceMessage of this PresenceMessage.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def action(self):
        """Gets the action of this PresenceMessage.

        The event signified by a PresenceMessage.

        :return: The action of this PresenceMessage.
        :rtype: str
        """
        return self._action

    @action.setter
    def action(self, action):
        """Sets the action of this PresenceMessage.

        The event signified by a PresenceMessage.

        :param action: The action of this PresenceMessage.
        :type action: str
        """
        allowed_values = ["ABSENT", "PRESENT", "ENTER", "LEAVE", "UPDATE"]  # noqa: E501
        if action not in allowed_values:
            raise ValueError(
                "Invalid value for `action` ({0}), must be one of {1}"
                .format(action, allowed_values)
            )

        self._action = action

    @property
    def client_id(self):
        """Gets the client_id of this PresenceMessage.

        The client ID of the publisher of this presence update.

        :return: The client_id of this PresenceMessage.
        :rtype: str
        """
        return self._client_id

    @client_id.setter
    def client_id(self, client_id):
        """Sets the client_id of this PresenceMessage.

        The client ID of the publisher of this presence update.

        :param client_id: The client_id of this PresenceMessage.
        :type client_id: str
        """

        self._client_id = client_id

    @property
    def connection_id(self):
        """Gets the connection_id of this PresenceMessage.

        The connection ID of the publisher of this presence update.

        :return: The connection_id of this PresenceMessage.
        :rtype: str
        """
        return self._connection_id

    @connection_id.setter
    def connection_id(self, connection_id):
        """Sets the connection_id of this PresenceMessage.

        The connection ID of the publisher of this presence update.

        :param connection_id: The connection_id of this PresenceMessage.
        :type connection_id: str
        """

        self._connection_id = connection_id

    @property
    def data(self):
        """Gets the data of this PresenceMessage.

        The presence update payload, if provided.

        :return: The data of this PresenceMessage.
        :rtype: str
        """
        return self._data

    @data.setter
    def data(self, data):
        """Sets the data of this PresenceMessage.

        The presence update payload, if provided.

        :param data: The data of this PresenceMessage.
        :type data: str
        """

        self._data = data

    @property
    def encoding(self):
        """Gets the encoding of this PresenceMessage.

        This will typically be empty as all presence updates received from Ably are automatically decoded client-side using this value. However, if the message encoding cannot be processed, this attribute will contain the remaining transformations not applied to the data payload.

        :return: The encoding of this PresenceMessage.
        :rtype: str
        """
        return self._encoding

    @encoding.setter
    def encoding(self, encoding):
        """Sets the encoding of this PresenceMessage.

        This will typically be empty as all presence updates received from Ably are automatically decoded client-side using this value. However, if the message encoding cannot be processed, this attribute will contain the remaining transformations not applied to the data payload.

        :param encoding: The encoding of this PresenceMessage.
        :type encoding: str
        """

        self._encoding = encoding

    @property
    def extras(self):
        """Gets the extras of this PresenceMessage.


        :return: The extras of this PresenceMessage.
        :rtype: Extras
        """
        return self._extras

    @extras.setter
    def extras(self, extras):
        """Sets the extras of this PresenceMessage.


        :param extras: The extras of this PresenceMessage.
        :type extras: Extras
        """

        self._extras = extras

    @property
    def id(self):
        """Gets the id of this PresenceMessage.

        Unique ID assigned by Ably to this presence update.

        :return: The id of this PresenceMessage.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this PresenceMessage.

        Unique ID assigned by Ably to this presence update.

        :param id: The id of this PresenceMessage.
        :type id: str
        """

        self._id = id

    @property
    def timestamp(self):
        """Gets the timestamp of this PresenceMessage.

        Timestamp when the presence update was received by Ably, as milliseconds since the epoch.

        :return: The timestamp of this PresenceMessage.
        :rtype: int
        """
        return self._timestamp

    @timestamp.setter
    def timestamp(self, timestamp):
        """Sets the timestamp of this PresenceMessage.

        Timestamp when the presence update was received by Ably, as milliseconds since the epoch.

        :param timestamp: The timestamp of this PresenceMessage.
        :type timestamp: int
        """

        self._timestamp = timestamp
