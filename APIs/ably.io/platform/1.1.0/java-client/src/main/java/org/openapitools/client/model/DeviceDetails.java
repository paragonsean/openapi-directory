/*
 * Platform API
 * The [REST API specification](https://www.ably.io/documentation/rest-api) for Ably.
 *
 * The version of the OpenAPI document: 1.1.0
 * Contact: support@ably.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.Recipient;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * DeviceDetails
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:40:34.591513-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class DeviceDetails {
  public static final String SERIALIZED_NAME_CLIENT_ID = "clientId";
  @SerializedName(SERIALIZED_NAME_CLIENT_ID)
  private String clientId;

  public static final String SERIALIZED_NAME_DEVICE_SECRET = "deviceSecret";
  @SerializedName(SERIALIZED_NAME_DEVICE_SECRET)
  private String deviceSecret;

  /**
   * Form factor of the push device.
   */
  @JsonAdapter(FormFactorEnum.Adapter.class)
  public enum FormFactorEnum {
    PHONE("phone"),
    
    TABLET("tablet"),
    
    DESKTOP("desktop"),
    
    TV("tv"),
    
    WATCH("watch"),
    
    CAR("car"),
    
    EMBEDDED("embedded");

    private String value;

    FormFactorEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static FormFactorEnum fromValue(String value) {
      for (FormFactorEnum b : FormFactorEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<FormFactorEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final FormFactorEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public FormFactorEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return FormFactorEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      FormFactorEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_FORM_FACTOR = "formFactor";
  @SerializedName(SERIALIZED_NAME_FORM_FACTOR)
  private FormFactorEnum formFactor;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_METADATA = "metadata";
  @SerializedName(SERIALIZED_NAME_METADATA)
  private Object metadata;

  /**
   * Platform of the push device.
   */
  @JsonAdapter(PlatformEnum.Adapter.class)
  public enum PlatformEnum {
    IOS("ios"),
    
    ANDROID("android");

    private String value;

    PlatformEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static PlatformEnum fromValue(String value) {
      for (PlatformEnum b : PlatformEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<PlatformEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final PlatformEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public PlatformEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return PlatformEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      PlatformEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_PLATFORM = "platform";
  @SerializedName(SERIALIZED_NAME_PLATFORM)
  private PlatformEnum platform;

  public static final String SERIALIZED_NAME_PUSH_RECIPIENT = "push.recipient";
  @SerializedName(SERIALIZED_NAME_PUSH_RECIPIENT)
  private Recipient pushRecipient;

  /**
   * the current state of the push device.
   */
  @JsonAdapter(PushStateEnum.Adapter.class)
  public enum PushStateEnum {
    ACTIVE("Active"),
    
    FAILING("Failing"),
    
    FAILED("Failed");

    private String value;

    PushStateEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static PushStateEnum fromValue(String value) {
      for (PushStateEnum b : PushStateEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<PushStateEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final PushStateEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public PushStateEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return PushStateEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      PushStateEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_PUSH_STATE = "push.state";
  @SerializedName(SERIALIZED_NAME_PUSH_STATE)
  private PushStateEnum pushState;

  public DeviceDetails() {
  }

  public DeviceDetails(
     PushStateEnum pushState
  ) {
    this();
    this.pushState = pushState;
  }

  public DeviceDetails clientId(String clientId) {
    this.clientId = clientId;
    return this;
  }

  /**
   * Optional trusted client identifier for the device.
   * @return clientId
   */
  @javax.annotation.Nullable
  public String getClientId() {
    return clientId;
  }

  public void setClientId(String clientId) {
    this.clientId = clientId;
  }


  public DeviceDetails deviceSecret(String deviceSecret) {
    this.deviceSecret = deviceSecret;
    return this;
  }

  /**
   * Secret value for the device.
   * @return deviceSecret
   */
  @javax.annotation.Nullable
  public String getDeviceSecret() {
    return deviceSecret;
  }

  public void setDeviceSecret(String deviceSecret) {
    this.deviceSecret = deviceSecret;
  }


  public DeviceDetails formFactor(FormFactorEnum formFactor) {
    this.formFactor = formFactor;
    return this;
  }

  /**
   * Form factor of the push device.
   * @return formFactor
   */
  @javax.annotation.Nullable
  public FormFactorEnum getFormFactor() {
    return formFactor;
  }

  public void setFormFactor(FormFactorEnum formFactor) {
    this.formFactor = formFactor;
  }


  public DeviceDetails id(String id) {
    this.id = id;
    return this;
  }

  /**
   * Unique identifier for the device generated by the device itself.
   * @return id
   */
  @javax.annotation.Nullable
  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }


  public DeviceDetails metadata(Object metadata) {
    this.metadata = metadata;
    return this;
  }

  /**
   * Optional metadata object for this device. The metadata for a device may only be set by clients with push-admin privileges and will be used more extensively in the future with smart notifications.
   * @return metadata
   */
  @javax.annotation.Nullable
  public Object getMetadata() {
    return metadata;
  }

  public void setMetadata(Object metadata) {
    this.metadata = metadata;
  }


  public DeviceDetails platform(PlatformEnum platform) {
    this.platform = platform;
    return this;
  }

  /**
   * Platform of the push device.
   * @return platform
   */
  @javax.annotation.Nullable
  public PlatformEnum getPlatform() {
    return platform;
  }

  public void setPlatform(PlatformEnum platform) {
    this.platform = platform;
  }


  public DeviceDetails pushRecipient(Recipient pushRecipient) {
    this.pushRecipient = pushRecipient;
    return this;
  }

  /**
   * Get pushRecipient
   * @return pushRecipient
   */
  @javax.annotation.Nullable
  public Recipient getPushRecipient() {
    return pushRecipient;
  }

  public void setPushRecipient(Recipient pushRecipient) {
    this.pushRecipient = pushRecipient;
  }


  /**
   * the current state of the push device.
   * @return pushState
   */
  @javax.annotation.Nullable
  public PushStateEnum getPushState() {
    return pushState;
  }




  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DeviceDetails deviceDetails = (DeviceDetails) o;
    return Objects.equals(this.clientId, deviceDetails.clientId) &&
        Objects.equals(this.deviceSecret, deviceDetails.deviceSecret) &&
        Objects.equals(this.formFactor, deviceDetails.formFactor) &&
        Objects.equals(this.id, deviceDetails.id) &&
        Objects.equals(this.metadata, deviceDetails.metadata) &&
        Objects.equals(this.platform, deviceDetails.platform) &&
        Objects.equals(this.pushRecipient, deviceDetails.pushRecipient) &&
        Objects.equals(this.pushState, deviceDetails.pushState);
  }

  @Override
  public int hashCode() {
    return Objects.hash(clientId, deviceSecret, formFactor, id, metadata, platform, pushRecipient, pushState);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DeviceDetails {\n");
    sb.append("    clientId: ").append(toIndentedString(clientId)).append("\n");
    sb.append("    deviceSecret: ").append(toIndentedString(deviceSecret)).append("\n");
    sb.append("    formFactor: ").append(toIndentedString(formFactor)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    metadata: ").append(toIndentedString(metadata)).append("\n");
    sb.append("    platform: ").append(toIndentedString(platform)).append("\n");
    sb.append("    pushRecipient: ").append(toIndentedString(pushRecipient)).append("\n");
    sb.append("    pushState: ").append(toIndentedString(pushState)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("clientId");
    openapiFields.add("deviceSecret");
    openapiFields.add("formFactor");
    openapiFields.add("id");
    openapiFields.add("metadata");
    openapiFields.add("platform");
    openapiFields.add("push.recipient");
    openapiFields.add("push.state");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to DeviceDetails
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!DeviceDetails.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in DeviceDetails is not found in the empty JSON string", DeviceDetails.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!DeviceDetails.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `DeviceDetails` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("clientId") != null && !jsonObj.get("clientId").isJsonNull()) && !jsonObj.get("clientId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `clientId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("clientId").toString()));
      }
      if ((jsonObj.get("deviceSecret") != null && !jsonObj.get("deviceSecret").isJsonNull()) && !jsonObj.get("deviceSecret").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `deviceSecret` to be a primitive type in the JSON string but got `%s`", jsonObj.get("deviceSecret").toString()));
      }
      if ((jsonObj.get("formFactor") != null && !jsonObj.get("formFactor").isJsonNull()) && !jsonObj.get("formFactor").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `formFactor` to be a primitive type in the JSON string but got `%s`", jsonObj.get("formFactor").toString()));
      }
      // validate the optional field `formFactor`
      if (jsonObj.get("formFactor") != null && !jsonObj.get("formFactor").isJsonNull()) {
        FormFactorEnum.validateJsonElement(jsonObj.get("formFactor"));
      }
      if ((jsonObj.get("id") != null && !jsonObj.get("id").isJsonNull()) && !jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      if ((jsonObj.get("platform") != null && !jsonObj.get("platform").isJsonNull()) && !jsonObj.get("platform").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `platform` to be a primitive type in the JSON string but got `%s`", jsonObj.get("platform").toString()));
      }
      // validate the optional field `platform`
      if (jsonObj.get("platform") != null && !jsonObj.get("platform").isJsonNull()) {
        PlatformEnum.validateJsonElement(jsonObj.get("platform"));
      }
      // validate the optional field `push.recipient`
      if (jsonObj.get("push.recipient") != null && !jsonObj.get("push.recipient").isJsonNull()) {
        Recipient.validateJsonElement(jsonObj.get("push.recipient"));
      }
      if ((jsonObj.get("push.state") != null && !jsonObj.get("push.state").isJsonNull()) && !jsonObj.get("push.state").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `push.state` to be a primitive type in the JSON string but got `%s`", jsonObj.get("push.state").toString()));
      }
      // validate the optional field `push.state`
      if (jsonObj.get("push.state") != null && !jsonObj.get("push.state").isJsonNull()) {
        PushStateEnum.validateJsonElement(jsonObj.get("push.state"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!DeviceDetails.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'DeviceDetails' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<DeviceDetails> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(DeviceDetails.class));

       return (TypeAdapter<T>) new TypeAdapter<DeviceDetails>() {
           @Override
           public void write(JsonWriter out, DeviceDetails value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public DeviceDetails read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of DeviceDetails given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of DeviceDetails
   * @throws IOException if the JSON string is invalid with respect to DeviceDetails
   */
  public static DeviceDetails fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, DeviceDetails.class);
  }

  /**
   * Convert an instance of DeviceDetails to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

