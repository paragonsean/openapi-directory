/*
 * Platform API
 * The [REST API specification](https://www.ably.io/documentation/rest-api) for Ably.
 *
 * The version of the OpenAPI document: 1.1.0
 * Contact: support@ably.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.DeviceDetails;
import org.openapitools.client.model.Error;
import org.openapitools.client.model.PublishPushNotificationToDevicesRequest;
import org.openapitools.client.model.SubscribePushDeviceToChannelRequest;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class PushApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public PushApi() {
        this(Configuration.getDefaultApiClient());
    }

    public PushApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for deletePushDeviceDetails
     * @param xAblyVersion The version of the API you wish to use. (optional)
     * @param format The response format you would like (optional)
     * @param channel Filter to restrict to subscriptions associated with that channel. (optional)
     * @param deviceId Must be set when clientId is empty, cannot be used with clientId. (optional)
     * @param clientId Must be set when deviceId is empty, cannot be used with deviceId. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 2XX </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  * x-ably-errorcode -  <br>  * x-ably-errormessage -  <br>  * x-ably-serverid -  <br>  </td></tr>
     </table>
     */
    public okhttp3.Call deletePushDeviceDetailsCall(String xAblyVersion, String format, String channel, String deviceId, String clientId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/push/channelSubscriptions";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (format != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("format", format));
        }

        if (channel != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("channel", channel));
        }

        if (deviceId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("deviceId", deviceId));
        }

        if (clientId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("clientId", clientId));
        }

        if (xAblyVersion != null) {
            localVarHeaderParams.put("X-Ably-Version", localVarApiClient.parameterToString(xAblyVersion));
        }

        final String[] localVarAccepts = {
            "application/json",
            "application/x-msgpack",
            "text/html"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth", "bearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deletePushDeviceDetailsValidateBeforeCall(String xAblyVersion, String format, String channel, String deviceId, String clientId, final ApiCallback _callback) throws ApiException {
        return deletePushDeviceDetailsCall(xAblyVersion, format, channel, deviceId, clientId, _callback);

    }

    /**
     * Delete a registered device&#39;s update token
     * Delete a device details object.
     * @param xAblyVersion The version of the API you wish to use. (optional)
     * @param format The response format you would like (optional)
     * @param channel Filter to restrict to subscriptions associated with that channel. (optional)
     * @param deviceId Must be set when clientId is empty, cannot be used with clientId. (optional)
     * @param clientId Must be set when deviceId is empty, cannot be used with deviceId. (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 2XX </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  * x-ably-errorcode -  <br>  * x-ably-errormessage -  <br>  * x-ably-serverid -  <br>  </td></tr>
     </table>
     */
    public void deletePushDeviceDetails(String xAblyVersion, String format, String channel, String deviceId, String clientId) throws ApiException {
        deletePushDeviceDetailsWithHttpInfo(xAblyVersion, format, channel, deviceId, clientId);
    }

    /**
     * Delete a registered device&#39;s update token
     * Delete a device details object.
     * @param xAblyVersion The version of the API you wish to use. (optional)
     * @param format The response format you would like (optional)
     * @param channel Filter to restrict to subscriptions associated with that channel. (optional)
     * @param deviceId Must be set when clientId is empty, cannot be used with clientId. (optional)
     * @param clientId Must be set when deviceId is empty, cannot be used with deviceId. (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 2XX </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  * x-ably-errorcode -  <br>  * x-ably-errormessage -  <br>  * x-ably-serverid -  <br>  </td></tr>
     </table>
     */
    public ApiResponse<Void> deletePushDeviceDetailsWithHttpInfo(String xAblyVersion, String format, String channel, String deviceId, String clientId) throws ApiException {
        okhttp3.Call localVarCall = deletePushDeviceDetailsValidateBeforeCall(xAblyVersion, format, channel, deviceId, clientId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Delete a registered device&#39;s update token (asynchronously)
     * Delete a device details object.
     * @param xAblyVersion The version of the API you wish to use. (optional)
     * @param format The response format you would like (optional)
     * @param channel Filter to restrict to subscriptions associated with that channel. (optional)
     * @param deviceId Must be set when clientId is empty, cannot be used with clientId. (optional)
     * @param clientId Must be set when deviceId is empty, cannot be used with deviceId. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 2XX </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  * x-ably-errorcode -  <br>  * x-ably-errormessage -  <br>  * x-ably-serverid -  <br>  </td></tr>
     </table>
     */
    public okhttp3.Call deletePushDeviceDetailsAsync(String xAblyVersion, String format, String channel, String deviceId, String clientId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deletePushDeviceDetailsValidateBeforeCall(xAblyVersion, format, channel, deviceId, clientId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for getChannelsWithPushSubscribers
     * @param xAblyVersion The version of the API you wish to use. (optional)
     * @param format The response format you would like (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 2XX </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  * x-ably-errorcode -  <br>  * x-ably-errormessage -  <br>  * x-ably-serverid -  <br>  </td></tr>
     </table>
     */
    public okhttp3.Call getChannelsWithPushSubscribersCall(String xAblyVersion, String format, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/push/channels";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (format != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("format", format));
        }

        if (xAblyVersion != null) {
            localVarHeaderParams.put("X-Ably-Version", localVarApiClient.parameterToString(xAblyVersion));
        }

        final String[] localVarAccepts = {
            "application/json",
            "application/x-msgpack",
            "text/html"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth", "bearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getChannelsWithPushSubscribersValidateBeforeCall(String xAblyVersion, String format, final ApiCallback _callback) throws ApiException {
        return getChannelsWithPushSubscribersCall(xAblyVersion, format, _callback);

    }

    /**
     * List all channels with at least one subscribed device
     * Returns a paginated response of channel names.
     * @param xAblyVersion The version of the API you wish to use. (optional)
     * @param format The response format you would like (optional)
     * @return List&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 2XX </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  * x-ably-errorcode -  <br>  * x-ably-errormessage -  <br>  * x-ably-serverid -  <br>  </td></tr>
     </table>
     */
    public List<String> getChannelsWithPushSubscribers(String xAblyVersion, String format) throws ApiException {
        ApiResponse<List<String>> localVarResp = getChannelsWithPushSubscribersWithHttpInfo(xAblyVersion, format);
        return localVarResp.getData();
    }

    /**
     * List all channels with at least one subscribed device
     * Returns a paginated response of channel names.
     * @param xAblyVersion The version of the API you wish to use. (optional)
     * @param format The response format you would like (optional)
     * @return ApiResponse&lt;List&lt;String&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 2XX </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  * x-ably-errorcode -  <br>  * x-ably-errormessage -  <br>  * x-ably-serverid -  <br>  </td></tr>
     </table>
     */
    public ApiResponse<List<String>> getChannelsWithPushSubscribersWithHttpInfo(String xAblyVersion, String format) throws ApiException {
        okhttp3.Call localVarCall = getChannelsWithPushSubscribersValidateBeforeCall(xAblyVersion, format, null);
        Type localVarReturnType = new TypeToken<List<String>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List all channels with at least one subscribed device (asynchronously)
     * Returns a paginated response of channel names.
     * @param xAblyVersion The version of the API you wish to use. (optional)
     * @param format The response format you would like (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 2XX </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  * x-ably-errorcode -  <br>  * x-ably-errormessage -  <br>  * x-ably-serverid -  <br>  </td></tr>
     </table>
     */
    public okhttp3.Call getChannelsWithPushSubscribersAsync(String xAblyVersion, String format, final ApiCallback<List<String>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getChannelsWithPushSubscribersValidateBeforeCall(xAblyVersion, format, _callback);
        Type localVarReturnType = new TypeToken<List<String>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getPushDeviceDetails
     * @param deviceId Device&#39;s ID. (required)
     * @param xAblyVersion The version of the API you wish to use. (optional)
     * @param format The response format you would like (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 2XX </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  * x-ably-errorcode -  <br>  * x-ably-errormessage -  <br>  * x-ably-serverid -  <br>  </td></tr>
     </table>
     */
    public okhttp3.Call getPushDeviceDetailsCall(String deviceId, String xAblyVersion, String format, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/push/deviceRegistrations/{device_id}"
            .replace("{" + "device_id" + "}", localVarApiClient.escapeString(deviceId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (format != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("format", format));
        }

        if (xAblyVersion != null) {
            localVarHeaderParams.put("X-Ably-Version", localVarApiClient.parameterToString(xAblyVersion));
        }

        final String[] localVarAccepts = {
            "application/json",
            "application/x-msgpack",
            "text/html"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth", "bearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getPushDeviceDetailsValidateBeforeCall(String deviceId, String xAblyVersion, String format, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'deviceId' is set
        if (deviceId == null) {
            throw new ApiException("Missing the required parameter 'deviceId' when calling getPushDeviceDetails(Async)");
        }

        return getPushDeviceDetailsCall(deviceId, xAblyVersion, format, _callback);

    }

    /**
     * Get a device registration
     * Get the full details of a device.
     * @param deviceId Device&#39;s ID. (required)
     * @param xAblyVersion The version of the API you wish to use. (optional)
     * @param format The response format you would like (optional)
     * @return DeviceDetails
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 2XX </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  * x-ably-errorcode -  <br>  * x-ably-errormessage -  <br>  * x-ably-serverid -  <br>  </td></tr>
     </table>
     */
    public DeviceDetails getPushDeviceDetails(String deviceId, String xAblyVersion, String format) throws ApiException {
        ApiResponse<DeviceDetails> localVarResp = getPushDeviceDetailsWithHttpInfo(deviceId, xAblyVersion, format);
        return localVarResp.getData();
    }

    /**
     * Get a device registration
     * Get the full details of a device.
     * @param deviceId Device&#39;s ID. (required)
     * @param xAblyVersion The version of the API you wish to use. (optional)
     * @param format The response format you would like (optional)
     * @return ApiResponse&lt;DeviceDetails&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 2XX </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  * x-ably-errorcode -  <br>  * x-ably-errormessage -  <br>  * x-ably-serverid -  <br>  </td></tr>
     </table>
     */
    public ApiResponse<DeviceDetails> getPushDeviceDetailsWithHttpInfo(String deviceId, String xAblyVersion, String format) throws ApiException {
        okhttp3.Call localVarCall = getPushDeviceDetailsValidateBeforeCall(deviceId, xAblyVersion, format, null);
        Type localVarReturnType = new TypeToken<DeviceDetails>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get a device registration (asynchronously)
     * Get the full details of a device.
     * @param deviceId Device&#39;s ID. (required)
     * @param xAblyVersion The version of the API you wish to use. (optional)
     * @param format The response format you would like (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 2XX </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  * x-ably-errorcode -  <br>  * x-ably-errormessage -  <br>  * x-ably-serverid -  <br>  </td></tr>
     </table>
     */
    public okhttp3.Call getPushDeviceDetailsAsync(String deviceId, String xAblyVersion, String format, final ApiCallback<DeviceDetails> _callback) throws ApiException {

        okhttp3.Call localVarCall = getPushDeviceDetailsValidateBeforeCall(deviceId, xAblyVersion, format, _callback);
        Type localVarReturnType = new TypeToken<DeviceDetails>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getPushSubscriptionsOnChannels
     * @param xAblyVersion The version of the API you wish to use. (optional)
     * @param format The response format you would like (optional)
     * @param channel Filter to restrict to subscriptions associated with that channel. (optional)
     * @param deviceId Optional filter to restrict to devices associated with that deviceId. Cannot be used with clientId. (optional)
     * @param clientId Optional filter to restrict to devices associated with that clientId. Cannot be used with deviceId. (optional)
     * @param limit The maximum number of records to return. (optional, default to 100)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 2XX </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  * x-ably-errorcode -  <br>  * x-ably-errormessage -  <br>  * x-ably-serverid -  <br>  </td></tr>
     </table>
     */
    public okhttp3.Call getPushSubscriptionsOnChannelsCall(String xAblyVersion, String format, String channel, String deviceId, String clientId, Integer limit, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/push/channelSubscriptions";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (format != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("format", format));
        }

        if (channel != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("channel", channel));
        }

        if (deviceId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("deviceId", deviceId));
        }

        if (clientId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("clientId", clientId));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (xAblyVersion != null) {
            localVarHeaderParams.put("X-Ably-Version", localVarApiClient.parameterToString(xAblyVersion));
        }

        final String[] localVarAccepts = {
            "application/json",
            "application/x-msgpack",
            "text/html"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth", "bearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getPushSubscriptionsOnChannelsValidateBeforeCall(String xAblyVersion, String format, String channel, String deviceId, String clientId, Integer limit, final ApiCallback _callback) throws ApiException {
        return getPushSubscriptionsOnChannelsCall(xAblyVersion, format, channel, deviceId, clientId, limit, _callback);

    }

    /**
     * List channel subscriptions
     * Get a list of push notification subscriptions to channels.
     * @param xAblyVersion The version of the API you wish to use. (optional)
     * @param format The response format you would like (optional)
     * @param channel Filter to restrict to subscriptions associated with that channel. (optional)
     * @param deviceId Optional filter to restrict to devices associated with that deviceId. Cannot be used with clientId. (optional)
     * @param clientId Optional filter to restrict to devices associated with that clientId. Cannot be used with deviceId. (optional)
     * @param limit The maximum number of records to return. (optional, default to 100)
     * @return DeviceDetails
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 2XX </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  * x-ably-errorcode -  <br>  * x-ably-errormessage -  <br>  * x-ably-serverid -  <br>  </td></tr>
     </table>
     */
    public DeviceDetails getPushSubscriptionsOnChannels(String xAblyVersion, String format, String channel, String deviceId, String clientId, Integer limit) throws ApiException {
        ApiResponse<DeviceDetails> localVarResp = getPushSubscriptionsOnChannelsWithHttpInfo(xAblyVersion, format, channel, deviceId, clientId, limit);
        return localVarResp.getData();
    }

    /**
     * List channel subscriptions
     * Get a list of push notification subscriptions to channels.
     * @param xAblyVersion The version of the API you wish to use. (optional)
     * @param format The response format you would like (optional)
     * @param channel Filter to restrict to subscriptions associated with that channel. (optional)
     * @param deviceId Optional filter to restrict to devices associated with that deviceId. Cannot be used with clientId. (optional)
     * @param clientId Optional filter to restrict to devices associated with that clientId. Cannot be used with deviceId. (optional)
     * @param limit The maximum number of records to return. (optional, default to 100)
     * @return ApiResponse&lt;DeviceDetails&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 2XX </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  * x-ably-errorcode -  <br>  * x-ably-errormessage -  <br>  * x-ably-serverid -  <br>  </td></tr>
     </table>
     */
    public ApiResponse<DeviceDetails> getPushSubscriptionsOnChannelsWithHttpInfo(String xAblyVersion, String format, String channel, String deviceId, String clientId, Integer limit) throws ApiException {
        okhttp3.Call localVarCall = getPushSubscriptionsOnChannelsValidateBeforeCall(xAblyVersion, format, channel, deviceId, clientId, limit, null);
        Type localVarReturnType = new TypeToken<DeviceDetails>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List channel subscriptions (asynchronously)
     * Get a list of push notification subscriptions to channels.
     * @param xAblyVersion The version of the API you wish to use. (optional)
     * @param format The response format you would like (optional)
     * @param channel Filter to restrict to subscriptions associated with that channel. (optional)
     * @param deviceId Optional filter to restrict to devices associated with that deviceId. Cannot be used with clientId. (optional)
     * @param clientId Optional filter to restrict to devices associated with that clientId. Cannot be used with deviceId. (optional)
     * @param limit The maximum number of records to return. (optional, default to 100)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 2XX </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  * x-ably-errorcode -  <br>  * x-ably-errormessage -  <br>  * x-ably-serverid -  <br>  </td></tr>
     </table>
     */
    public okhttp3.Call getPushSubscriptionsOnChannelsAsync(String xAblyVersion, String format, String channel, String deviceId, String clientId, Integer limit, final ApiCallback<DeviceDetails> _callback) throws ApiException {

        okhttp3.Call localVarCall = getPushSubscriptionsOnChannelsValidateBeforeCall(xAblyVersion, format, channel, deviceId, clientId, limit, _callback);
        Type localVarReturnType = new TypeToken<DeviceDetails>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getRegisteredPushDevices
     * @param xAblyVersion The version of the API you wish to use. (optional)
     * @param format The response format you would like (optional)
     * @param deviceId Optional filter to restrict to devices associated with that deviceId. (optional)
     * @param clientId Optional filter to restrict to devices associated with that clientId. (optional)
     * @param limit The maximum number of records to return. (optional, default to 100)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 2XX </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  * x-ably-errorcode -  <br>  * x-ably-errormessage -  <br>  * x-ably-serverid -  <br>  </td></tr>
     </table>
     */
    public okhttp3.Call getRegisteredPushDevicesCall(String xAblyVersion, String format, String deviceId, String clientId, Integer limit, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/push/deviceRegistrations";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (format != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("format", format));
        }

        if (deviceId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("deviceId", deviceId));
        }

        if (clientId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("clientId", clientId));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (xAblyVersion != null) {
            localVarHeaderParams.put("X-Ably-Version", localVarApiClient.parameterToString(xAblyVersion));
        }

        final String[] localVarAccepts = {
            "application/json",
            "application/x-msgpack",
            "text/html"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth", "bearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getRegisteredPushDevicesValidateBeforeCall(String xAblyVersion, String format, String deviceId, String clientId, Integer limit, final ApiCallback _callback) throws ApiException {
        return getRegisteredPushDevicesCall(xAblyVersion, format, deviceId, clientId, limit, _callback);

    }

    /**
     * List devices registered for receiving push notifications
     * List of device details of devices registed for push notifications.
     * @param xAblyVersion The version of the API you wish to use. (optional)
     * @param format The response format you would like (optional)
     * @param deviceId Optional filter to restrict to devices associated with that deviceId. (optional)
     * @param clientId Optional filter to restrict to devices associated with that clientId. (optional)
     * @param limit The maximum number of records to return. (optional, default to 100)
     * @return DeviceDetails
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 2XX </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  * x-ably-errorcode -  <br>  * x-ably-errormessage -  <br>  * x-ably-serverid -  <br>  </td></tr>
     </table>
     */
    public DeviceDetails getRegisteredPushDevices(String xAblyVersion, String format, String deviceId, String clientId, Integer limit) throws ApiException {
        ApiResponse<DeviceDetails> localVarResp = getRegisteredPushDevicesWithHttpInfo(xAblyVersion, format, deviceId, clientId, limit);
        return localVarResp.getData();
    }

    /**
     * List devices registered for receiving push notifications
     * List of device details of devices registed for push notifications.
     * @param xAblyVersion The version of the API you wish to use. (optional)
     * @param format The response format you would like (optional)
     * @param deviceId Optional filter to restrict to devices associated with that deviceId. (optional)
     * @param clientId Optional filter to restrict to devices associated with that clientId. (optional)
     * @param limit The maximum number of records to return. (optional, default to 100)
     * @return ApiResponse&lt;DeviceDetails&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 2XX </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  * x-ably-errorcode -  <br>  * x-ably-errormessage -  <br>  * x-ably-serverid -  <br>  </td></tr>
     </table>
     */
    public ApiResponse<DeviceDetails> getRegisteredPushDevicesWithHttpInfo(String xAblyVersion, String format, String deviceId, String clientId, Integer limit) throws ApiException {
        okhttp3.Call localVarCall = getRegisteredPushDevicesValidateBeforeCall(xAblyVersion, format, deviceId, clientId, limit, null);
        Type localVarReturnType = new TypeToken<DeviceDetails>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List devices registered for receiving push notifications (asynchronously)
     * List of device details of devices registed for push notifications.
     * @param xAblyVersion The version of the API you wish to use. (optional)
     * @param format The response format you would like (optional)
     * @param deviceId Optional filter to restrict to devices associated with that deviceId. (optional)
     * @param clientId Optional filter to restrict to devices associated with that clientId. (optional)
     * @param limit The maximum number of records to return. (optional, default to 100)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 2XX </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  * x-ably-errorcode -  <br>  * x-ably-errormessage -  <br>  * x-ably-serverid -  <br>  </td></tr>
     </table>
     */
    public okhttp3.Call getRegisteredPushDevicesAsync(String xAblyVersion, String format, String deviceId, String clientId, Integer limit, final ApiCallback<DeviceDetails> _callback) throws ApiException {

        okhttp3.Call localVarCall = getRegisteredPushDevicesValidateBeforeCall(xAblyVersion, format, deviceId, clientId, limit, _callback);
        Type localVarReturnType = new TypeToken<DeviceDetails>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for patchPushDeviceDetails
     * @param deviceId Device&#39;s ID. (required)
     * @param xAblyVersion The version of the API you wish to use. (optional)
     * @param format The response format you would like (optional)
     * @param deviceDetails  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 2XX </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  * x-ably-errorcode -  <br>  * x-ably-errormessage -  <br>  * x-ably-serverid -  <br>  </td></tr>
     </table>
     */
    public okhttp3.Call patchPushDeviceDetailsCall(String deviceId, String xAblyVersion, String format, DeviceDetails deviceDetails, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = deviceDetails;

        // create path and map variables
        String localVarPath = "/push/deviceRegistrations/{device_id}"
            .replace("{" + "device_id" + "}", localVarApiClient.escapeString(deviceId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (format != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("format", format));
        }

        if (xAblyVersion != null) {
            localVarHeaderParams.put("X-Ably-Version", localVarApiClient.parameterToString(xAblyVersion));
        }

        final String[] localVarAccepts = {
            "application/json",
            "application/x-msgpack",
            "text/html"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json",
            "application/x-msgpack",
            "application/x-www-form-urlencoded"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth", "bearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call patchPushDeviceDetailsValidateBeforeCall(String deviceId, String xAblyVersion, String format, DeviceDetails deviceDetails, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'deviceId' is set
        if (deviceId == null) {
            throw new ApiException("Missing the required parameter 'deviceId' when calling patchPushDeviceDetails(Async)");
        }

        return patchPushDeviceDetailsCall(deviceId, xAblyVersion, format, deviceDetails, _callback);

    }

    /**
     * Update a device registration
     * Specific attributes of an existing registration can be updated. Only clientId, metadata and push.recipient are mutable.
     * @param deviceId Device&#39;s ID. (required)
     * @param xAblyVersion The version of the API you wish to use. (optional)
     * @param format The response format you would like (optional)
     * @param deviceDetails  (optional)
     * @return DeviceDetails
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 2XX </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  * x-ably-errorcode -  <br>  * x-ably-errormessage -  <br>  * x-ably-serverid -  <br>  </td></tr>
     </table>
     */
    public DeviceDetails patchPushDeviceDetails(String deviceId, String xAblyVersion, String format, DeviceDetails deviceDetails) throws ApiException {
        ApiResponse<DeviceDetails> localVarResp = patchPushDeviceDetailsWithHttpInfo(deviceId, xAblyVersion, format, deviceDetails);
        return localVarResp.getData();
    }

    /**
     * Update a device registration
     * Specific attributes of an existing registration can be updated. Only clientId, metadata and push.recipient are mutable.
     * @param deviceId Device&#39;s ID. (required)
     * @param xAblyVersion The version of the API you wish to use. (optional)
     * @param format The response format you would like (optional)
     * @param deviceDetails  (optional)
     * @return ApiResponse&lt;DeviceDetails&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 2XX </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  * x-ably-errorcode -  <br>  * x-ably-errormessage -  <br>  * x-ably-serverid -  <br>  </td></tr>
     </table>
     */
    public ApiResponse<DeviceDetails> patchPushDeviceDetailsWithHttpInfo(String deviceId, String xAblyVersion, String format, DeviceDetails deviceDetails) throws ApiException {
        okhttp3.Call localVarCall = patchPushDeviceDetailsValidateBeforeCall(deviceId, xAblyVersion, format, deviceDetails, null);
        Type localVarReturnType = new TypeToken<DeviceDetails>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update a device registration (asynchronously)
     * Specific attributes of an existing registration can be updated. Only clientId, metadata and push.recipient are mutable.
     * @param deviceId Device&#39;s ID. (required)
     * @param xAblyVersion The version of the API you wish to use. (optional)
     * @param format The response format you would like (optional)
     * @param deviceDetails  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 2XX </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  * x-ably-errorcode -  <br>  * x-ably-errormessage -  <br>  * x-ably-serverid -  <br>  </td></tr>
     </table>
     */
    public okhttp3.Call patchPushDeviceDetailsAsync(String deviceId, String xAblyVersion, String format, DeviceDetails deviceDetails, final ApiCallback<DeviceDetails> _callback) throws ApiException {

        okhttp3.Call localVarCall = patchPushDeviceDetailsValidateBeforeCall(deviceId, xAblyVersion, format, deviceDetails, _callback);
        Type localVarReturnType = new TypeToken<DeviceDetails>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for publishPushNotificationToDevices
     * @param xAblyVersion The version of the API you wish to use. (optional)
     * @param format The response format you would like (optional)
     * @param publishPushNotificationToDevicesRequest  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 2XX </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  * x-ably-errorcode -  <br>  * x-ably-errormessage -  <br>  * x-ably-serverid -  <br>  </td></tr>
     </table>
     */
    public okhttp3.Call publishPushNotificationToDevicesCall(String xAblyVersion, String format, PublishPushNotificationToDevicesRequest publishPushNotificationToDevicesRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = publishPushNotificationToDevicesRequest;

        // create path and map variables
        String localVarPath = "/push/publish";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (format != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("format", format));
        }

        if (xAblyVersion != null) {
            localVarHeaderParams.put("X-Ably-Version", localVarApiClient.parameterToString(xAblyVersion));
        }

        final String[] localVarAccepts = {
            "application/json",
            "application/x-msgpack",
            "text/html"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json",
            "application/x-msgpack",
            "application/x-www-form-urlencoded"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth", "bearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call publishPushNotificationToDevicesValidateBeforeCall(String xAblyVersion, String format, PublishPushNotificationToDevicesRequest publishPushNotificationToDevicesRequest, final ApiCallback _callback) throws ApiException {
        return publishPushNotificationToDevicesCall(xAblyVersion, format, publishPushNotificationToDevicesRequest, _callback);

    }

    /**
     * Publish a push notification to device(s)
     * A convenience endpoint to deliver a push notification payload to a single device or set of devices identified by their client identifier.
     * @param xAblyVersion The version of the API you wish to use. (optional)
     * @param format The response format you would like (optional)
     * @param publishPushNotificationToDevicesRequest  (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 2XX </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  * x-ably-errorcode -  <br>  * x-ably-errormessage -  <br>  * x-ably-serverid -  <br>  </td></tr>
     </table>
     */
    public void publishPushNotificationToDevices(String xAblyVersion, String format, PublishPushNotificationToDevicesRequest publishPushNotificationToDevicesRequest) throws ApiException {
        publishPushNotificationToDevicesWithHttpInfo(xAblyVersion, format, publishPushNotificationToDevicesRequest);
    }

    /**
     * Publish a push notification to device(s)
     * A convenience endpoint to deliver a push notification payload to a single device or set of devices identified by their client identifier.
     * @param xAblyVersion The version of the API you wish to use. (optional)
     * @param format The response format you would like (optional)
     * @param publishPushNotificationToDevicesRequest  (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 2XX </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  * x-ably-errorcode -  <br>  * x-ably-errormessage -  <br>  * x-ably-serverid -  <br>  </td></tr>
     </table>
     */
    public ApiResponse<Void> publishPushNotificationToDevicesWithHttpInfo(String xAblyVersion, String format, PublishPushNotificationToDevicesRequest publishPushNotificationToDevicesRequest) throws ApiException {
        okhttp3.Call localVarCall = publishPushNotificationToDevicesValidateBeforeCall(xAblyVersion, format, publishPushNotificationToDevicesRequest, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Publish a push notification to device(s) (asynchronously)
     * A convenience endpoint to deliver a push notification payload to a single device or set of devices identified by their client identifier.
     * @param xAblyVersion The version of the API you wish to use. (optional)
     * @param format The response format you would like (optional)
     * @param publishPushNotificationToDevicesRequest  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 2XX </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  * x-ably-errorcode -  <br>  * x-ably-errormessage -  <br>  * x-ably-serverid -  <br>  </td></tr>
     </table>
     */
    public okhttp3.Call publishPushNotificationToDevicesAsync(String xAblyVersion, String format, PublishPushNotificationToDevicesRequest publishPushNotificationToDevicesRequest, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = publishPushNotificationToDevicesValidateBeforeCall(xAblyVersion, format, publishPushNotificationToDevicesRequest, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for putPushDeviceDetails
     * @param deviceId Device&#39;s ID. (required)
     * @param xAblyVersion The version of the API you wish to use. (optional)
     * @param format The response format you would like (optional)
     * @param deviceDetails  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 2XX </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  * x-ably-errorcode -  <br>  * x-ably-errormessage -  <br>  * x-ably-serverid -  <br>  </td></tr>
     </table>
     */
    public okhttp3.Call putPushDeviceDetailsCall(String deviceId, String xAblyVersion, String format, DeviceDetails deviceDetails, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = deviceDetails;

        // create path and map variables
        String localVarPath = "/push/deviceRegistrations/{device_id}"
            .replace("{" + "device_id" + "}", localVarApiClient.escapeString(deviceId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (format != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("format", format));
        }

        if (xAblyVersion != null) {
            localVarHeaderParams.put("X-Ably-Version", localVarApiClient.parameterToString(xAblyVersion));
        }

        final String[] localVarAccepts = {
            "application/json",
            "application/x-msgpack",
            "text/html"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json",
            "application/x-msgpack",
            "application/x-www-form-urlencoded"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth", "bearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call putPushDeviceDetailsValidateBeforeCall(String deviceId, String xAblyVersion, String format, DeviceDetails deviceDetails, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'deviceId' is set
        if (deviceId == null) {
            throw new ApiException("Missing the required parameter 'deviceId' when calling putPushDeviceDetails(Async)");
        }

        return putPushDeviceDetailsCall(deviceId, xAblyVersion, format, deviceDetails, _callback);

    }

    /**
     * Update a device registration
     * Device registrations can be upserted (the existing registration is replaced entirely) with a PUT operation. Only clientId, metadata and push.recipient are mutable.
     * @param deviceId Device&#39;s ID. (required)
     * @param xAblyVersion The version of the API you wish to use. (optional)
     * @param format The response format you would like (optional)
     * @param deviceDetails  (optional)
     * @return DeviceDetails
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 2XX </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  * x-ably-errorcode -  <br>  * x-ably-errormessage -  <br>  * x-ably-serverid -  <br>  </td></tr>
     </table>
     */
    public DeviceDetails putPushDeviceDetails(String deviceId, String xAblyVersion, String format, DeviceDetails deviceDetails) throws ApiException {
        ApiResponse<DeviceDetails> localVarResp = putPushDeviceDetailsWithHttpInfo(deviceId, xAblyVersion, format, deviceDetails);
        return localVarResp.getData();
    }

    /**
     * Update a device registration
     * Device registrations can be upserted (the existing registration is replaced entirely) with a PUT operation. Only clientId, metadata and push.recipient are mutable.
     * @param deviceId Device&#39;s ID. (required)
     * @param xAblyVersion The version of the API you wish to use. (optional)
     * @param format The response format you would like (optional)
     * @param deviceDetails  (optional)
     * @return ApiResponse&lt;DeviceDetails&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 2XX </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  * x-ably-errorcode -  <br>  * x-ably-errormessage -  <br>  * x-ably-serverid -  <br>  </td></tr>
     </table>
     */
    public ApiResponse<DeviceDetails> putPushDeviceDetailsWithHttpInfo(String deviceId, String xAblyVersion, String format, DeviceDetails deviceDetails) throws ApiException {
        okhttp3.Call localVarCall = putPushDeviceDetailsValidateBeforeCall(deviceId, xAblyVersion, format, deviceDetails, null);
        Type localVarReturnType = new TypeToken<DeviceDetails>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update a device registration (asynchronously)
     * Device registrations can be upserted (the existing registration is replaced entirely) with a PUT operation. Only clientId, metadata and push.recipient are mutable.
     * @param deviceId Device&#39;s ID. (required)
     * @param xAblyVersion The version of the API you wish to use. (optional)
     * @param format The response format you would like (optional)
     * @param deviceDetails  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 2XX </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  * x-ably-errorcode -  <br>  * x-ably-errormessage -  <br>  * x-ably-serverid -  <br>  </td></tr>
     </table>
     */
    public okhttp3.Call putPushDeviceDetailsAsync(String deviceId, String xAblyVersion, String format, DeviceDetails deviceDetails, final ApiCallback<DeviceDetails> _callback) throws ApiException {

        okhttp3.Call localVarCall = putPushDeviceDetailsValidateBeforeCall(deviceId, xAblyVersion, format, deviceDetails, _callback);
        Type localVarReturnType = new TypeToken<DeviceDetails>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for registerPushDevice
     * @param xAblyVersion The version of the API you wish to use. (optional)
     * @param format The response format you would like (optional)
     * @param deviceDetails  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 2XX </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  * x-ably-errorcode -  <br>  * x-ably-errormessage -  <br>  * x-ably-serverid -  <br>  </td></tr>
     </table>
     */
    public okhttp3.Call registerPushDeviceCall(String xAblyVersion, String format, DeviceDetails deviceDetails, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = deviceDetails;

        // create path and map variables
        String localVarPath = "/push/deviceRegistrations";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (format != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("format", format));
        }

        if (xAblyVersion != null) {
            localVarHeaderParams.put("X-Ably-Version", localVarApiClient.parameterToString(xAblyVersion));
        }

        final String[] localVarAccepts = {
            "application/json",
            "application/x-msgpack",
            "text/html"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json",
            "application/x-msgpack"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth", "bearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call registerPushDeviceValidateBeforeCall(String xAblyVersion, String format, DeviceDetails deviceDetails, final ApiCallback _callback) throws ApiException {
        return registerPushDeviceCall(xAblyVersion, format, deviceDetails, _callback);

    }

    /**
     * Register a device for receiving push notifications
     * Register a device’s details, including the information necessary to deliver push notifications to it. Requires \&quot;push-admin\&quot; capability.
     * @param xAblyVersion The version of the API you wish to use. (optional)
     * @param format The response format you would like (optional)
     * @param deviceDetails  (optional)
     * @return DeviceDetails
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 2XX </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  * x-ably-errorcode -  <br>  * x-ably-errormessage -  <br>  * x-ably-serverid -  <br>  </td></tr>
     </table>
     */
    public DeviceDetails registerPushDevice(String xAblyVersion, String format, DeviceDetails deviceDetails) throws ApiException {
        ApiResponse<DeviceDetails> localVarResp = registerPushDeviceWithHttpInfo(xAblyVersion, format, deviceDetails);
        return localVarResp.getData();
    }

    /**
     * Register a device for receiving push notifications
     * Register a device’s details, including the information necessary to deliver push notifications to it. Requires \&quot;push-admin\&quot; capability.
     * @param xAblyVersion The version of the API you wish to use. (optional)
     * @param format The response format you would like (optional)
     * @param deviceDetails  (optional)
     * @return ApiResponse&lt;DeviceDetails&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 2XX </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  * x-ably-errorcode -  <br>  * x-ably-errormessage -  <br>  * x-ably-serverid -  <br>  </td></tr>
     </table>
     */
    public ApiResponse<DeviceDetails> registerPushDeviceWithHttpInfo(String xAblyVersion, String format, DeviceDetails deviceDetails) throws ApiException {
        okhttp3.Call localVarCall = registerPushDeviceValidateBeforeCall(xAblyVersion, format, deviceDetails, null);
        Type localVarReturnType = new TypeToken<DeviceDetails>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Register a device for receiving push notifications (asynchronously)
     * Register a device’s details, including the information necessary to deliver push notifications to it. Requires \&quot;push-admin\&quot; capability.
     * @param xAblyVersion The version of the API you wish to use. (optional)
     * @param format The response format you would like (optional)
     * @param deviceDetails  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 2XX </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  * x-ably-errorcode -  <br>  * x-ably-errormessage -  <br>  * x-ably-serverid -  <br>  </td></tr>
     </table>
     */
    public okhttp3.Call registerPushDeviceAsync(String xAblyVersion, String format, DeviceDetails deviceDetails, final ApiCallback<DeviceDetails> _callback) throws ApiException {

        okhttp3.Call localVarCall = registerPushDeviceValidateBeforeCall(xAblyVersion, format, deviceDetails, _callback);
        Type localVarReturnType = new TypeToken<DeviceDetails>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for subscribePushDeviceToChannel
     * @param xAblyVersion The version of the API you wish to use. (optional)
     * @param format The response format you would like (optional)
     * @param subscribePushDeviceToChannelRequest  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 2XX </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  * x-ably-errorcode -  <br>  * x-ably-errormessage -  <br>  * x-ably-serverid -  <br>  </td></tr>
     </table>
     */
    public okhttp3.Call subscribePushDeviceToChannelCall(String xAblyVersion, String format, SubscribePushDeviceToChannelRequest subscribePushDeviceToChannelRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = subscribePushDeviceToChannelRequest;

        // create path and map variables
        String localVarPath = "/push/channelSubscriptions";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (format != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("format", format));
        }

        if (xAblyVersion != null) {
            localVarHeaderParams.put("X-Ably-Version", localVarApiClient.parameterToString(xAblyVersion));
        }

        final String[] localVarAccepts = {
            "application/json",
            "application/x-msgpack",
            "text/html"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json",
            "application/x-msgpack",
            "application/x-www-form-urlencoded"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth", "bearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call subscribePushDeviceToChannelValidateBeforeCall(String xAblyVersion, String format, SubscribePushDeviceToChannelRequest subscribePushDeviceToChannelRequest, final ApiCallback _callback) throws ApiException {
        return subscribePushDeviceToChannelCall(xAblyVersion, format, subscribePushDeviceToChannelRequest, _callback);

    }

    /**
     * Subscribe a device to a channel
     * Subscribe either a single device or all devices associated with a client ID to receive push notifications from messages sent to a channel.
     * @param xAblyVersion The version of the API you wish to use. (optional)
     * @param format The response format you would like (optional)
     * @param subscribePushDeviceToChannelRequest  (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 2XX </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  * x-ably-errorcode -  <br>  * x-ably-errormessage -  <br>  * x-ably-serverid -  <br>  </td></tr>
     </table>
     */
    public void subscribePushDeviceToChannel(String xAblyVersion, String format, SubscribePushDeviceToChannelRequest subscribePushDeviceToChannelRequest) throws ApiException {
        subscribePushDeviceToChannelWithHttpInfo(xAblyVersion, format, subscribePushDeviceToChannelRequest);
    }

    /**
     * Subscribe a device to a channel
     * Subscribe either a single device or all devices associated with a client ID to receive push notifications from messages sent to a channel.
     * @param xAblyVersion The version of the API you wish to use. (optional)
     * @param format The response format you would like (optional)
     * @param subscribePushDeviceToChannelRequest  (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 2XX </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  * x-ably-errorcode -  <br>  * x-ably-errormessage -  <br>  * x-ably-serverid -  <br>  </td></tr>
     </table>
     */
    public ApiResponse<Void> subscribePushDeviceToChannelWithHttpInfo(String xAblyVersion, String format, SubscribePushDeviceToChannelRequest subscribePushDeviceToChannelRequest) throws ApiException {
        okhttp3.Call localVarCall = subscribePushDeviceToChannelValidateBeforeCall(xAblyVersion, format, subscribePushDeviceToChannelRequest, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Subscribe a device to a channel (asynchronously)
     * Subscribe either a single device or all devices associated with a client ID to receive push notifications from messages sent to a channel.
     * @param xAblyVersion The version of the API you wish to use. (optional)
     * @param format The response format you would like (optional)
     * @param subscribePushDeviceToChannelRequest  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 2XX </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  * x-ably-errorcode -  <br>  * x-ably-errormessage -  <br>  * x-ably-serverid -  <br>  </td></tr>
     </table>
     */
    public okhttp3.Call subscribePushDeviceToChannelAsync(String xAblyVersion, String format, SubscribePushDeviceToChannelRequest subscribePushDeviceToChannelRequest, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = subscribePushDeviceToChannelValidateBeforeCall(xAblyVersion, format, subscribePushDeviceToChannelRequest, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for unregisterAllPushDevices
     * @param xAblyVersion The version of the API you wish to use. (optional)
     * @param format The response format you would like (optional)
     * @param deviceId Optional filter to restrict to devices associated with that deviceId. Cannot be used with clientId. (optional)
     * @param clientId Optional filter to restrict to devices associated with that clientId. Cannot be used with deviceId. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 2XX </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  * x-ably-errorcode -  <br>  * x-ably-errormessage -  <br>  * x-ably-serverid -  <br>  </td></tr>
     </table>
     */
    public okhttp3.Call unregisterAllPushDevicesCall(String xAblyVersion, String format, String deviceId, String clientId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/push/deviceRegistrations";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (format != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("format", format));
        }

        if (deviceId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("deviceId", deviceId));
        }

        if (clientId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("clientId", clientId));
        }

        if (xAblyVersion != null) {
            localVarHeaderParams.put("X-Ably-Version", localVarApiClient.parameterToString(xAblyVersion));
        }

        final String[] localVarAccepts = {
            "application/json",
            "application/x-msgpack",
            "text/html"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth", "bearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call unregisterAllPushDevicesValidateBeforeCall(String xAblyVersion, String format, String deviceId, String clientId, final ApiCallback _callback) throws ApiException {
        return unregisterAllPushDevicesCall(xAblyVersion, format, deviceId, clientId, _callback);

    }

    /**
     * Unregister matching devices for push notifications
     * Unregisters devices. All their subscriptions for receiving push notifications through channels will also be deleted.
     * @param xAblyVersion The version of the API you wish to use. (optional)
     * @param format The response format you would like (optional)
     * @param deviceId Optional filter to restrict to devices associated with that deviceId. Cannot be used with clientId. (optional)
     * @param clientId Optional filter to restrict to devices associated with that clientId. Cannot be used with deviceId. (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 2XX </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  * x-ably-errorcode -  <br>  * x-ably-errormessage -  <br>  * x-ably-serverid -  <br>  </td></tr>
     </table>
     */
    public void unregisterAllPushDevices(String xAblyVersion, String format, String deviceId, String clientId) throws ApiException {
        unregisterAllPushDevicesWithHttpInfo(xAblyVersion, format, deviceId, clientId);
    }

    /**
     * Unregister matching devices for push notifications
     * Unregisters devices. All their subscriptions for receiving push notifications through channels will also be deleted.
     * @param xAblyVersion The version of the API you wish to use. (optional)
     * @param format The response format you would like (optional)
     * @param deviceId Optional filter to restrict to devices associated with that deviceId. Cannot be used with clientId. (optional)
     * @param clientId Optional filter to restrict to devices associated with that clientId. Cannot be used with deviceId. (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 2XX </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  * x-ably-errorcode -  <br>  * x-ably-errormessage -  <br>  * x-ably-serverid -  <br>  </td></tr>
     </table>
     */
    public ApiResponse<Void> unregisterAllPushDevicesWithHttpInfo(String xAblyVersion, String format, String deviceId, String clientId) throws ApiException {
        okhttp3.Call localVarCall = unregisterAllPushDevicesValidateBeforeCall(xAblyVersion, format, deviceId, clientId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Unregister matching devices for push notifications (asynchronously)
     * Unregisters devices. All their subscriptions for receiving push notifications through channels will also be deleted.
     * @param xAblyVersion The version of the API you wish to use. (optional)
     * @param format The response format you would like (optional)
     * @param deviceId Optional filter to restrict to devices associated with that deviceId. Cannot be used with clientId. (optional)
     * @param clientId Optional filter to restrict to devices associated with that clientId. Cannot be used with deviceId. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 2XX </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  * x-ably-errorcode -  <br>  * x-ably-errormessage -  <br>  * x-ably-serverid -  <br>  </td></tr>
     </table>
     */
    public okhttp3.Call unregisterAllPushDevicesAsync(String xAblyVersion, String format, String deviceId, String clientId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = unregisterAllPushDevicesValidateBeforeCall(xAblyVersion, format, deviceId, clientId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for unregisterPushDevice
     * @param deviceId Device&#39;s ID. (required)
     * @param xAblyVersion The version of the API you wish to use. (optional)
     * @param format The response format you would like (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 2XX </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  * x-ably-errorcode -  <br>  * x-ably-errormessage -  <br>  * x-ably-serverid -  <br>  </td></tr>
     </table>
     */
    public okhttp3.Call unregisterPushDeviceCall(String deviceId, String xAblyVersion, String format, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/push/deviceRegistrations/{device_id}"
            .replace("{" + "device_id" + "}", localVarApiClient.escapeString(deviceId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (format != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("format", format));
        }

        if (xAblyVersion != null) {
            localVarHeaderParams.put("X-Ably-Version", localVarApiClient.parameterToString(xAblyVersion));
        }

        final String[] localVarAccepts = {
            "application/json",
            "application/x-msgpack",
            "text/html"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth", "bearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call unregisterPushDeviceValidateBeforeCall(String deviceId, String xAblyVersion, String format, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'deviceId' is set
        if (deviceId == null) {
            throw new ApiException("Missing the required parameter 'deviceId' when calling unregisterPushDevice(Async)");
        }

        return unregisterPushDeviceCall(deviceId, xAblyVersion, format, _callback);

    }

    /**
     * Unregister a single device for push notifications
     * Unregisters a single device by its device ID. All its subscriptions for receiving push notifications through channels will also be deleted.
     * @param deviceId Device&#39;s ID. (required)
     * @param xAblyVersion The version of the API you wish to use. (optional)
     * @param format The response format you would like (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 2XX </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  * x-ably-errorcode -  <br>  * x-ably-errormessage -  <br>  * x-ably-serverid -  <br>  </td></tr>
     </table>
     */
    public void unregisterPushDevice(String deviceId, String xAblyVersion, String format) throws ApiException {
        unregisterPushDeviceWithHttpInfo(deviceId, xAblyVersion, format);
    }

    /**
     * Unregister a single device for push notifications
     * Unregisters a single device by its device ID. All its subscriptions for receiving push notifications through channels will also be deleted.
     * @param deviceId Device&#39;s ID. (required)
     * @param xAblyVersion The version of the API you wish to use. (optional)
     * @param format The response format you would like (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 2XX </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  * x-ably-errorcode -  <br>  * x-ably-errormessage -  <br>  * x-ably-serverid -  <br>  </td></tr>
     </table>
     */
    public ApiResponse<Void> unregisterPushDeviceWithHttpInfo(String deviceId, String xAblyVersion, String format) throws ApiException {
        okhttp3.Call localVarCall = unregisterPushDeviceValidateBeforeCall(deviceId, xAblyVersion, format, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Unregister a single device for push notifications (asynchronously)
     * Unregisters a single device by its device ID. All its subscriptions for receiving push notifications through channels will also be deleted.
     * @param deviceId Device&#39;s ID. (required)
     * @param xAblyVersion The version of the API you wish to use. (optional)
     * @param format The response format you would like (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 2XX </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  * x-ably-errorcode -  <br>  * x-ably-errormessage -  <br>  * x-ably-serverid -  <br>  </td></tr>
     </table>
     */
    public okhttp3.Call unregisterPushDeviceAsync(String deviceId, String xAblyVersion, String format, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = unregisterPushDeviceValidateBeforeCall(deviceId, xAblyVersion, format, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for updatePushDeviceDetails
     * @param deviceId Device&#39;s ID. (required)
     * @param xAblyVersion The version of the API you wish to use. (optional)
     * @param format The response format you would like (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 2XX </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  * x-ably-errorcode -  <br>  * x-ably-errormessage -  <br>  * x-ably-serverid -  <br>  </td></tr>
     </table>
     */
    public okhttp3.Call updatePushDeviceDetailsCall(String deviceId, String xAblyVersion, String format, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/push/deviceRegistrations/{device_id}/resetUpdateToken"
            .replace("{" + "device_id" + "}", localVarApiClient.escapeString(deviceId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (format != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("format", format));
        }

        if (xAblyVersion != null) {
            localVarHeaderParams.put("X-Ably-Version", localVarApiClient.parameterToString(xAblyVersion));
        }

        final String[] localVarAccepts = {
            "application/json",
            "application/x-msgpack",
            "text/html"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth", "bearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updatePushDeviceDetailsValidateBeforeCall(String deviceId, String xAblyVersion, String format, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'deviceId' is set
        if (deviceId == null) {
            throw new ApiException("Missing the required parameter 'deviceId' when calling updatePushDeviceDetails(Async)");
        }

        return updatePushDeviceDetailsCall(deviceId, xAblyVersion, format, _callback);

    }

    /**
     * Reset a registered device&#39;s update token
     * Gets an updated device details object.
     * @param deviceId Device&#39;s ID. (required)
     * @param xAblyVersion The version of the API you wish to use. (optional)
     * @param format The response format you would like (optional)
     * @return DeviceDetails
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 2XX </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  * x-ably-errorcode -  <br>  * x-ably-errormessage -  <br>  * x-ably-serverid -  <br>  </td></tr>
     </table>
     */
    public DeviceDetails updatePushDeviceDetails(String deviceId, String xAblyVersion, String format) throws ApiException {
        ApiResponse<DeviceDetails> localVarResp = updatePushDeviceDetailsWithHttpInfo(deviceId, xAblyVersion, format);
        return localVarResp.getData();
    }

    /**
     * Reset a registered device&#39;s update token
     * Gets an updated device details object.
     * @param deviceId Device&#39;s ID. (required)
     * @param xAblyVersion The version of the API you wish to use. (optional)
     * @param format The response format you would like (optional)
     * @return ApiResponse&lt;DeviceDetails&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 2XX </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  * x-ably-errorcode -  <br>  * x-ably-errormessage -  <br>  * x-ably-serverid -  <br>  </td></tr>
     </table>
     */
    public ApiResponse<DeviceDetails> updatePushDeviceDetailsWithHttpInfo(String deviceId, String xAblyVersion, String format) throws ApiException {
        okhttp3.Call localVarCall = updatePushDeviceDetailsValidateBeforeCall(deviceId, xAblyVersion, format, null);
        Type localVarReturnType = new TypeToken<DeviceDetails>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Reset a registered device&#39;s update token (asynchronously)
     * Gets an updated device details object.
     * @param deviceId Device&#39;s ID. (required)
     * @param xAblyVersion The version of the API you wish to use. (optional)
     * @param format The response format you would like (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 2XX </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  * x-ably-errorcode -  <br>  * x-ably-errormessage -  <br>  * x-ably-serverid -  <br>  </td></tr>
     </table>
     */
    public okhttp3.Call updatePushDeviceDetailsAsync(String deviceId, String xAblyVersion, String format, final ApiCallback<DeviceDetails> _callback) throws ApiException {

        okhttp3.Call localVarCall = updatePushDeviceDetailsValidateBeforeCall(deviceId, xAblyVersion, format, _callback);
        Type localVarReturnType = new TypeToken<DeviceDetails>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
