/*
 * Platform API
 * The [REST API specification](https://www.ably.io/documentation/rest-api) for Ably.
 *
 * The version of the OpenAPI document: 1.1.0
 * Contact: support@ably.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Push recipient details for a device.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:40:34.591513-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Recipient {
  public static final String SERIALIZED_NAME_CLIENT_ID = "clientId";
  @SerializedName(SERIALIZED_NAME_CLIENT_ID)
  private String clientId;

  public static final String SERIALIZED_NAME_DEVICE_ID = "deviceId";
  @SerializedName(SERIALIZED_NAME_DEVICE_ID)
  private String deviceId;

  public static final String SERIALIZED_NAME_DEVICE_TOKEN = "deviceToken";
  @SerializedName(SERIALIZED_NAME_DEVICE_TOKEN)
  private String deviceToken;

  public static final String SERIALIZED_NAME_REGISTRATION_TOKEN = "registrationToken";
  @SerializedName(SERIALIZED_NAME_REGISTRATION_TOKEN)
  private String registrationToken;

  /**
   * Defines which push platform is being used.
   */
  @JsonAdapter(TransportTypeEnum.Adapter.class)
  public enum TransportTypeEnum {
    APNS("apns"),
    
    FCM("fcm"),
    
    GCM("gcm");

    private String value;

    TransportTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static TransportTypeEnum fromValue(String value) {
      for (TransportTypeEnum b : TransportTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<TransportTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final TransportTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public TransportTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return TransportTypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      TransportTypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_TRANSPORT_TYPE = "transportType";
  @SerializedName(SERIALIZED_NAME_TRANSPORT_TYPE)
  private TransportTypeEnum transportType;

  public Recipient() {
  }

  public Recipient clientId(String clientId) {
    this.clientId = clientId;
    return this;
  }

  /**
   * Client ID of recipient
   * @return clientId
   */
  @javax.annotation.Nullable
  public String getClientId() {
    return clientId;
  }

  public void setClientId(String clientId) {
    this.clientId = clientId;
  }


  public Recipient deviceId(String deviceId) {
    this.deviceId = deviceId;
    return this;
  }

  /**
   * Client ID of recipient
   * @return deviceId
   */
  @javax.annotation.Nullable
  public String getDeviceId() {
    return deviceId;
  }

  public void setDeviceId(String deviceId) {
    this.deviceId = deviceId;
  }


  public Recipient deviceToken(String deviceToken) {
    this.deviceToken = deviceToken;
    return this;
  }

  /**
   * when using APNs, specifies the required device token.
   * @return deviceToken
   */
  @javax.annotation.Nullable
  public String getDeviceToken() {
    return deviceToken;
  }

  public void setDeviceToken(String deviceToken) {
    this.deviceToken = deviceToken;
  }


  public Recipient registrationToken(String registrationToken) {
    this.registrationToken = registrationToken;
    return this;
  }

  /**
   * when using GCM or FCM, specifies the required registration token.
   * @return registrationToken
   */
  @javax.annotation.Nullable
  public String getRegistrationToken() {
    return registrationToken;
  }

  public void setRegistrationToken(String registrationToken) {
    this.registrationToken = registrationToken;
  }


  public Recipient transportType(TransportTypeEnum transportType) {
    this.transportType = transportType;
    return this;
  }

  /**
   * Defines which push platform is being used.
   * @return transportType
   */
  @javax.annotation.Nullable
  public TransportTypeEnum getTransportType() {
    return transportType;
  }

  public void setTransportType(TransportTypeEnum transportType) {
    this.transportType = transportType;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Recipient recipient = (Recipient) o;
    return Objects.equals(this.clientId, recipient.clientId) &&
        Objects.equals(this.deviceId, recipient.deviceId) &&
        Objects.equals(this.deviceToken, recipient.deviceToken) &&
        Objects.equals(this.registrationToken, recipient.registrationToken) &&
        Objects.equals(this.transportType, recipient.transportType);
  }

  @Override
  public int hashCode() {
    return Objects.hash(clientId, deviceId, deviceToken, registrationToken, transportType);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Recipient {\n");
    sb.append("    clientId: ").append(toIndentedString(clientId)).append("\n");
    sb.append("    deviceId: ").append(toIndentedString(deviceId)).append("\n");
    sb.append("    deviceToken: ").append(toIndentedString(deviceToken)).append("\n");
    sb.append("    registrationToken: ").append(toIndentedString(registrationToken)).append("\n");
    sb.append("    transportType: ").append(toIndentedString(transportType)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("clientId");
    openapiFields.add("deviceId");
    openapiFields.add("deviceToken");
    openapiFields.add("registrationToken");
    openapiFields.add("transportType");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Recipient
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Recipient.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Recipient is not found in the empty JSON string", Recipient.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Recipient.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Recipient` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("clientId") != null && !jsonObj.get("clientId").isJsonNull()) && !jsonObj.get("clientId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `clientId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("clientId").toString()));
      }
      if ((jsonObj.get("deviceId") != null && !jsonObj.get("deviceId").isJsonNull()) && !jsonObj.get("deviceId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `deviceId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("deviceId").toString()));
      }
      if ((jsonObj.get("deviceToken") != null && !jsonObj.get("deviceToken").isJsonNull()) && !jsonObj.get("deviceToken").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `deviceToken` to be a primitive type in the JSON string but got `%s`", jsonObj.get("deviceToken").toString()));
      }
      if ((jsonObj.get("registrationToken") != null && !jsonObj.get("registrationToken").isJsonNull()) && !jsonObj.get("registrationToken").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `registrationToken` to be a primitive type in the JSON string but got `%s`", jsonObj.get("registrationToken").toString()));
      }
      if ((jsonObj.get("transportType") != null && !jsonObj.get("transportType").isJsonNull()) && !jsonObj.get("transportType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `transportType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("transportType").toString()));
      }
      // validate the optional field `transportType`
      if (jsonObj.get("transportType") != null && !jsonObj.get("transportType").isJsonNull()) {
        TransportTypeEnum.validateJsonElement(jsonObj.get("transportType"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Recipient.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Recipient' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Recipient> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Recipient.class));

       return (TypeAdapter<T>) new TypeAdapter<Recipient>() {
           @Override
           public void write(JsonWriter out, Recipient value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Recipient read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Recipient given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Recipient
   * @throws IOException if the JSON string is invalid with respect to Recipient
   */
  public static Recipient fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Recipient.class);
  }

  /**
   * Convert an instance of Recipient to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

