/*
 * Platform API
 * The [REST API specification](https://www.ably.io/documentation/rest-api) for Ably.
 *
 * The version of the OpenAPI document: 1.1.0
 * Contact: support@ably.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.ChannelDetails;
import org.openapitools.client.model.Error;
import org.openapitools.client.model.GetMetadataOfAllChannels2XXResponse;
import org.openapitools.client.model.PresenceMessage;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class StatusApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public StatusApi() {
        this(Configuration.getDefaultApiClient());
    }

    public StatusApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for getMetadataOfAllChannels
     * @param xAblyVersion The version of the API you wish to use. (optional)
     * @param format The response format you would like (optional)
     * @param limit  (optional, default to 100)
     * @param prefix Optionally limits the query to only those channels whose name starts with the given prefix (optional)
     * @param by optionally specifies whether to return just channel names (by&#x3D;id) or ChannelDetails (by&#x3D;value) (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 2XX </td><td> OK </td><td>  * link -  <br>  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  * x-ably-errorcode -  <br>  * x-ably-errormessage -  <br>  * x-ably-serverid -  <br>  </td></tr>
     </table>
     */
    public okhttp3.Call getMetadataOfAllChannelsCall(String xAblyVersion, String format, Integer limit, String prefix, String by, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/channels";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (format != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("format", format));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (prefix != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("prefix", prefix));
        }

        if (by != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("by", by));
        }

        if (xAblyVersion != null) {
            localVarHeaderParams.put("X-Ably-Version", localVarApiClient.parameterToString(xAblyVersion));
        }

        final String[] localVarAccepts = {
            "application/json",
            "application/x-msgpack",
            "text/html"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth", "bearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getMetadataOfAllChannelsValidateBeforeCall(String xAblyVersion, String format, Integer limit, String prefix, String by, final ApiCallback _callback) throws ApiException {
        return getMetadataOfAllChannelsCall(xAblyVersion, format, limit, prefix, by, _callback);

    }

    /**
     * Enumerate all active channels of the application
     * Enumerate all active channels of the application
     * @param xAblyVersion The version of the API you wish to use. (optional)
     * @param format The response format you would like (optional)
     * @param limit  (optional, default to 100)
     * @param prefix Optionally limits the query to only those channels whose name starts with the given prefix (optional)
     * @param by optionally specifies whether to return just channel names (by&#x3D;id) or ChannelDetails (by&#x3D;value) (optional)
     * @return GetMetadataOfAllChannels2XXResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 2XX </td><td> OK </td><td>  * link -  <br>  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  * x-ably-errorcode -  <br>  * x-ably-errormessage -  <br>  * x-ably-serverid -  <br>  </td></tr>
     </table>
     */
    public GetMetadataOfAllChannels2XXResponse getMetadataOfAllChannels(String xAblyVersion, String format, Integer limit, String prefix, String by) throws ApiException {
        ApiResponse<GetMetadataOfAllChannels2XXResponse> localVarResp = getMetadataOfAllChannelsWithHttpInfo(xAblyVersion, format, limit, prefix, by);
        return localVarResp.getData();
    }

    /**
     * Enumerate all active channels of the application
     * Enumerate all active channels of the application
     * @param xAblyVersion The version of the API you wish to use. (optional)
     * @param format The response format you would like (optional)
     * @param limit  (optional, default to 100)
     * @param prefix Optionally limits the query to only those channels whose name starts with the given prefix (optional)
     * @param by optionally specifies whether to return just channel names (by&#x3D;id) or ChannelDetails (by&#x3D;value) (optional)
     * @return ApiResponse&lt;GetMetadataOfAllChannels2XXResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 2XX </td><td> OK </td><td>  * link -  <br>  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  * x-ably-errorcode -  <br>  * x-ably-errormessage -  <br>  * x-ably-serverid -  <br>  </td></tr>
     </table>
     */
    public ApiResponse<GetMetadataOfAllChannels2XXResponse> getMetadataOfAllChannelsWithHttpInfo(String xAblyVersion, String format, Integer limit, String prefix, String by) throws ApiException {
        okhttp3.Call localVarCall = getMetadataOfAllChannelsValidateBeforeCall(xAblyVersion, format, limit, prefix, by, null);
        Type localVarReturnType = new TypeToken<GetMetadataOfAllChannels2XXResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Enumerate all active channels of the application (asynchronously)
     * Enumerate all active channels of the application
     * @param xAblyVersion The version of the API you wish to use. (optional)
     * @param format The response format you would like (optional)
     * @param limit  (optional, default to 100)
     * @param prefix Optionally limits the query to only those channels whose name starts with the given prefix (optional)
     * @param by optionally specifies whether to return just channel names (by&#x3D;id) or ChannelDetails (by&#x3D;value) (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 2XX </td><td> OK </td><td>  * link -  <br>  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  * x-ably-errorcode -  <br>  * x-ably-errormessage -  <br>  * x-ably-serverid -  <br>  </td></tr>
     </table>
     */
    public okhttp3.Call getMetadataOfAllChannelsAsync(String xAblyVersion, String format, Integer limit, String prefix, String by, final ApiCallback<GetMetadataOfAllChannels2XXResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getMetadataOfAllChannelsValidateBeforeCall(xAblyVersion, format, limit, prefix, by, _callback);
        Type localVarReturnType = new TypeToken<GetMetadataOfAllChannels2XXResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getMetadataOfChannel
     * @param channelId The [Channel&#39;s ID](https://www.ably.io/documentation/rest/channels). (required)
     * @param xAblyVersion The version of the API you wish to use. (optional)
     * @param format The response format you would like (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  * x-ably-serverid -  <br>  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  * x-ably-errorcode -  <br>  * x-ably-errormessage -  <br>  * x-ably-serverid -  <br>  </td></tr>
     </table>
     */
    public okhttp3.Call getMetadataOfChannelCall(String channelId, String xAblyVersion, String format, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/channels/{channel_id}"
            .replace("{" + "channel_id" + "}", localVarApiClient.escapeString(channelId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (format != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("format", format));
        }

        if (xAblyVersion != null) {
            localVarHeaderParams.put("X-Ably-Version", localVarApiClient.parameterToString(xAblyVersion));
        }

        final String[] localVarAccepts = {
            "application/json",
            "application/x-msgpack",
            "text/html"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth", "bearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getMetadataOfChannelValidateBeforeCall(String channelId, String xAblyVersion, String format, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'channelId' is set
        if (channelId == null) {
            throw new ApiException("Missing the required parameter 'channelId' when calling getMetadataOfChannel(Async)");
        }

        return getMetadataOfChannelCall(channelId, xAblyVersion, format, _callback);

    }

    /**
     * Get metadata of a channel
     * Get metadata of a channel
     * @param channelId The [Channel&#39;s ID](https://www.ably.io/documentation/rest/channels). (required)
     * @param xAblyVersion The version of the API you wish to use. (optional)
     * @param format The response format you would like (optional)
     * @return ChannelDetails
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  * x-ably-serverid -  <br>  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  * x-ably-errorcode -  <br>  * x-ably-errormessage -  <br>  * x-ably-serverid -  <br>  </td></tr>
     </table>
     */
    public ChannelDetails getMetadataOfChannel(String channelId, String xAblyVersion, String format) throws ApiException {
        ApiResponse<ChannelDetails> localVarResp = getMetadataOfChannelWithHttpInfo(channelId, xAblyVersion, format);
        return localVarResp.getData();
    }

    /**
     * Get metadata of a channel
     * Get metadata of a channel
     * @param channelId The [Channel&#39;s ID](https://www.ably.io/documentation/rest/channels). (required)
     * @param xAblyVersion The version of the API you wish to use. (optional)
     * @param format The response format you would like (optional)
     * @return ApiResponse&lt;ChannelDetails&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  * x-ably-serverid -  <br>  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  * x-ably-errorcode -  <br>  * x-ably-errormessage -  <br>  * x-ably-serverid -  <br>  </td></tr>
     </table>
     */
    public ApiResponse<ChannelDetails> getMetadataOfChannelWithHttpInfo(String channelId, String xAblyVersion, String format) throws ApiException {
        okhttp3.Call localVarCall = getMetadataOfChannelValidateBeforeCall(channelId, xAblyVersion, format, null);
        Type localVarReturnType = new TypeToken<ChannelDetails>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get metadata of a channel (asynchronously)
     * Get metadata of a channel
     * @param channelId The [Channel&#39;s ID](https://www.ably.io/documentation/rest/channels). (required)
     * @param xAblyVersion The version of the API you wish to use. (optional)
     * @param format The response format you would like (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  * x-ably-serverid -  <br>  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  * x-ably-errorcode -  <br>  * x-ably-errormessage -  <br>  * x-ably-serverid -  <br>  </td></tr>
     </table>
     */
    public okhttp3.Call getMetadataOfChannelAsync(String channelId, String xAblyVersion, String format, final ApiCallback<ChannelDetails> _callback) throws ApiException {

        okhttp3.Call localVarCall = getMetadataOfChannelValidateBeforeCall(channelId, xAblyVersion, format, _callback);
        Type localVarReturnType = new TypeToken<ChannelDetails>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getPresenceOfChannel
     * @param channelId The [Channel&#39;s ID](https://www.ably.io/documentation/rest/channels). (required)
     * @param xAblyVersion The version of the API you wish to use. (optional)
     * @param format The response format you would like (optional)
     * @param clientId  (optional)
     * @param connectionId  (optional)
     * @param limit  (optional, default to 100)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  * link -  <br>  * x-ably-serverid -  <br>  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  * x-ably-errorcode -  <br>  * x-ably-errormessage -  <br>  * x-ably-serverid -  <br>  </td></tr>
     </table>
     */
    public okhttp3.Call getPresenceOfChannelCall(String channelId, String xAblyVersion, String format, String clientId, String connectionId, Integer limit, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/channels/{channel_id}/presence"
            .replace("{" + "channel_id" + "}", localVarApiClient.escapeString(channelId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (format != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("format", format));
        }

        if (clientId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("clientId", clientId));
        }

        if (connectionId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("connectionId", connectionId));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (xAblyVersion != null) {
            localVarHeaderParams.put("X-Ably-Version", localVarApiClient.parameterToString(xAblyVersion));
        }

        final String[] localVarAccepts = {
            "application/json",
            "application/x-msgpack",
            "text/html"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth", "bearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getPresenceOfChannelValidateBeforeCall(String channelId, String xAblyVersion, String format, String clientId, String connectionId, Integer limit, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'channelId' is set
        if (channelId == null) {
            throw new ApiException("Missing the required parameter 'channelId' when calling getPresenceOfChannel(Async)");
        }

        return getPresenceOfChannelCall(channelId, xAblyVersion, format, clientId, connectionId, limit, _callback);

    }

    /**
     * Get presence of a channel
     * Get presence on a channel
     * @param channelId The [Channel&#39;s ID](https://www.ably.io/documentation/rest/channels). (required)
     * @param xAblyVersion The version of the API you wish to use. (optional)
     * @param format The response format you would like (optional)
     * @param clientId  (optional)
     * @param connectionId  (optional)
     * @param limit  (optional, default to 100)
     * @return List&lt;PresenceMessage&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  * link -  <br>  * x-ably-serverid -  <br>  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  * x-ably-errorcode -  <br>  * x-ably-errormessage -  <br>  * x-ably-serverid -  <br>  </td></tr>
     </table>
     */
    public List<PresenceMessage> getPresenceOfChannel(String channelId, String xAblyVersion, String format, String clientId, String connectionId, Integer limit) throws ApiException {
        ApiResponse<List<PresenceMessage>> localVarResp = getPresenceOfChannelWithHttpInfo(channelId, xAblyVersion, format, clientId, connectionId, limit);
        return localVarResp.getData();
    }

    /**
     * Get presence of a channel
     * Get presence on a channel
     * @param channelId The [Channel&#39;s ID](https://www.ably.io/documentation/rest/channels). (required)
     * @param xAblyVersion The version of the API you wish to use. (optional)
     * @param format The response format you would like (optional)
     * @param clientId  (optional)
     * @param connectionId  (optional)
     * @param limit  (optional, default to 100)
     * @return ApiResponse&lt;List&lt;PresenceMessage&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  * link -  <br>  * x-ably-serverid -  <br>  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  * x-ably-errorcode -  <br>  * x-ably-errormessage -  <br>  * x-ably-serverid -  <br>  </td></tr>
     </table>
     */
    public ApiResponse<List<PresenceMessage>> getPresenceOfChannelWithHttpInfo(String channelId, String xAblyVersion, String format, String clientId, String connectionId, Integer limit) throws ApiException {
        okhttp3.Call localVarCall = getPresenceOfChannelValidateBeforeCall(channelId, xAblyVersion, format, clientId, connectionId, limit, null);
        Type localVarReturnType = new TypeToken<List<PresenceMessage>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get presence of a channel (asynchronously)
     * Get presence on a channel
     * @param channelId The [Channel&#39;s ID](https://www.ably.io/documentation/rest/channels). (required)
     * @param xAblyVersion The version of the API you wish to use. (optional)
     * @param format The response format you would like (optional)
     * @param clientId  (optional)
     * @param connectionId  (optional)
     * @param limit  (optional, default to 100)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  * link -  <br>  * x-ably-serverid -  <br>  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  * x-ably-errorcode -  <br>  * x-ably-errormessage -  <br>  * x-ably-serverid -  <br>  </td></tr>
     </table>
     */
    public okhttp3.Call getPresenceOfChannelAsync(String channelId, String xAblyVersion, String format, String clientId, String connectionId, Integer limit, final ApiCallback<List<PresenceMessage>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getPresenceOfChannelValidateBeforeCall(channelId, xAblyVersion, format, clientId, connectionId, limit, _callback);
        Type localVarReturnType = new TypeToken<List<PresenceMessage>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
