/**
 * Platform API
 * The [REST API specification](https://www.ably.io/documentation/rest-api) for Ably.
 *
 * The version of the OpenAPI document: 1.1.0
 * Contact: support@ably.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIMessage.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIMessage::OAIMessage(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIMessage::OAIMessage() {
    this->initializeModel();
}

OAIMessage::~OAIMessage() {}

void OAIMessage::initializeModel() {

    m_client_id_isSet = false;
    m_client_id_isValid = false;

    m_connection_id_isSet = false;
    m_connection_id_isValid = false;

    m_data_isSet = false;
    m_data_isValid = false;

    m_encoding_isSet = false;
    m_encoding_isValid = false;

    m_extras_isSet = false;
    m_extras_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_timestamp_isSet = false;
    m_timestamp_isValid = false;
}

void OAIMessage::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIMessage::fromJsonObject(QJsonObject json) {

    m_client_id_isValid = ::OpenAPI::fromJsonValue(m_client_id, json[QString("clientId")]);
    m_client_id_isSet = !json[QString("clientId")].isNull() && m_client_id_isValid;

    m_connection_id_isValid = ::OpenAPI::fromJsonValue(m_connection_id, json[QString("connectionId")]);
    m_connection_id_isSet = !json[QString("connectionId")].isNull() && m_connection_id_isValid;

    m_data_isValid = ::OpenAPI::fromJsonValue(m_data, json[QString("data")]);
    m_data_isSet = !json[QString("data")].isNull() && m_data_isValid;

    m_encoding_isValid = ::OpenAPI::fromJsonValue(m_encoding, json[QString("encoding")]);
    m_encoding_isSet = !json[QString("encoding")].isNull() && m_encoding_isValid;

    m_extras_isValid = ::OpenAPI::fromJsonValue(m_extras, json[QString("extras")]);
    m_extras_isSet = !json[QString("extras")].isNull() && m_extras_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_timestamp_isValid = ::OpenAPI::fromJsonValue(m_timestamp, json[QString("timestamp")]);
    m_timestamp_isSet = !json[QString("timestamp")].isNull() && m_timestamp_isValid;
}

QString OAIMessage::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIMessage::asJsonObject() const {
    QJsonObject obj;
    if (m_client_id_isSet) {
        obj.insert(QString("clientId"), ::OpenAPI::toJsonValue(m_client_id));
    }
    if (m_connection_id_isSet) {
        obj.insert(QString("connectionId"), ::OpenAPI::toJsonValue(m_connection_id));
    }
    if (m_data_isSet) {
        obj.insert(QString("data"), ::OpenAPI::toJsonValue(m_data));
    }
    if (m_encoding_isSet) {
        obj.insert(QString("encoding"), ::OpenAPI::toJsonValue(m_encoding));
    }
    if (m_extras.isSet()) {
        obj.insert(QString("extras"), ::OpenAPI::toJsonValue(m_extras));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_timestamp_isSet) {
        obj.insert(QString("timestamp"), ::OpenAPI::toJsonValue(m_timestamp));
    }
    return obj;
}

QString OAIMessage::getClientId() const {
    return m_client_id;
}
void OAIMessage::setClientId(const QString &client_id) {
    m_client_id = client_id;
    m_client_id_isSet = true;
}

bool OAIMessage::is_client_id_Set() const{
    return m_client_id_isSet;
}

bool OAIMessage::is_client_id_Valid() const{
    return m_client_id_isValid;
}

QString OAIMessage::getConnectionId() const {
    return m_connection_id;
}
void OAIMessage::setConnectionId(const QString &connection_id) {
    m_connection_id = connection_id;
    m_connection_id_isSet = true;
}

bool OAIMessage::is_connection_id_Set() const{
    return m_connection_id_isSet;
}

bool OAIMessage::is_connection_id_Valid() const{
    return m_connection_id_isValid;
}

QString OAIMessage::getData() const {
    return m_data;
}
void OAIMessage::setData(const QString &data) {
    m_data = data;
    m_data_isSet = true;
}

bool OAIMessage::is_data_Set() const{
    return m_data_isSet;
}

bool OAIMessage::is_data_Valid() const{
    return m_data_isValid;
}

QString OAIMessage::getEncoding() const {
    return m_encoding;
}
void OAIMessage::setEncoding(const QString &encoding) {
    m_encoding = encoding;
    m_encoding_isSet = true;
}

bool OAIMessage::is_encoding_Set() const{
    return m_encoding_isSet;
}

bool OAIMessage::is_encoding_Valid() const{
    return m_encoding_isValid;
}

OAIExtras OAIMessage::getExtras() const {
    return m_extras;
}
void OAIMessage::setExtras(const OAIExtras &extras) {
    m_extras = extras;
    m_extras_isSet = true;
}

bool OAIMessage::is_extras_Set() const{
    return m_extras_isSet;
}

bool OAIMessage::is_extras_Valid() const{
    return m_extras_isValid;
}

QString OAIMessage::getId() const {
    return m_id;
}
void OAIMessage::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIMessage::is_id_Set() const{
    return m_id_isSet;
}

bool OAIMessage::is_id_Valid() const{
    return m_id_isValid;
}

QString OAIMessage::getName() const {
    return m_name;
}
void OAIMessage::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIMessage::is_name_Set() const{
    return m_name_isSet;
}

bool OAIMessage::is_name_Valid() const{
    return m_name_isValid;
}

qint64 OAIMessage::getTimestamp() const {
    return m_timestamp;
}
void OAIMessage::setTimestamp(const qint64 &timestamp) {
    m_timestamp = timestamp;
    m_timestamp_isSet = true;
}

bool OAIMessage::is_timestamp_Set() const{
    return m_timestamp_isSet;
}

bool OAIMessage::is_timestamp_Valid() const{
    return m_timestamp_isValid;
}

bool OAIMessage::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_client_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_connection_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_data_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_encoding_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_extras.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_timestamp_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIMessage::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
