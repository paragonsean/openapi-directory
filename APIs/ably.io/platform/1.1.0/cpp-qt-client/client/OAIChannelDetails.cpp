/**
 * Platform API
 * The [REST API specification](https://www.ably.io/documentation/rest-api) for Ably.
 *
 * The version of the OpenAPI document: 1.1.0
 * Contact: support@ably.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIChannelDetails.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIChannelDetails::OAIChannelDetails(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIChannelDetails::OAIChannelDetails() {
    this->initializeModel();
}

OAIChannelDetails::~OAIChannelDetails() {}

void OAIChannelDetails::initializeModel() {

    m_channel_id_isSet = false;
    m_channel_id_isValid = false;

    m_is_global_master_isSet = false;
    m_is_global_master_isValid = false;

    m_region_isSet = false;
    m_region_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;
}

void OAIChannelDetails::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIChannelDetails::fromJsonObject(QJsonObject json) {

    m_channel_id_isValid = ::OpenAPI::fromJsonValue(m_channel_id, json[QString("channelId")]);
    m_channel_id_isSet = !json[QString("channelId")].isNull() && m_channel_id_isValid;

    m_is_global_master_isValid = ::OpenAPI::fromJsonValue(m_is_global_master, json[QString("isGlobalMaster")]);
    m_is_global_master_isSet = !json[QString("isGlobalMaster")].isNull() && m_is_global_master_isValid;

    m_region_isValid = ::OpenAPI::fromJsonValue(m_region, json[QString("region")]);
    m_region_isSet = !json[QString("region")].isNull() && m_region_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("status")]);
    m_status_isSet = !json[QString("status")].isNull() && m_status_isValid;
}

QString OAIChannelDetails::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIChannelDetails::asJsonObject() const {
    QJsonObject obj;
    if (m_channel_id_isSet) {
        obj.insert(QString("channelId"), ::OpenAPI::toJsonValue(m_channel_id));
    }
    if (m_is_global_master_isSet) {
        obj.insert(QString("isGlobalMaster"), ::OpenAPI::toJsonValue(m_is_global_master));
    }
    if (m_region_isSet) {
        obj.insert(QString("region"), ::OpenAPI::toJsonValue(m_region));
    }
    if (m_status.isSet()) {
        obj.insert(QString("status"), ::OpenAPI::toJsonValue(m_status));
    }
    return obj;
}

QString OAIChannelDetails::getChannelId() const {
    return m_channel_id;
}
void OAIChannelDetails::setChannelId(const QString &channel_id) {
    m_channel_id = channel_id;
    m_channel_id_isSet = true;
}

bool OAIChannelDetails::is_channel_id_Set() const{
    return m_channel_id_isSet;
}

bool OAIChannelDetails::is_channel_id_Valid() const{
    return m_channel_id_isValid;
}

bool OAIChannelDetails::isIsGlobalMaster() const {
    return m_is_global_master;
}
void OAIChannelDetails::setIsGlobalMaster(const bool &is_global_master) {
    m_is_global_master = is_global_master;
    m_is_global_master_isSet = true;
}

bool OAIChannelDetails::is_is_global_master_Set() const{
    return m_is_global_master_isSet;
}

bool OAIChannelDetails::is_is_global_master_Valid() const{
    return m_is_global_master_isValid;
}

QString OAIChannelDetails::getRegion() const {
    return m_region;
}
void OAIChannelDetails::setRegion(const QString &region) {
    m_region = region;
    m_region_isSet = true;
}

bool OAIChannelDetails::is_region_Set() const{
    return m_region_isSet;
}

bool OAIChannelDetails::is_region_Valid() const{
    return m_region_isValid;
}

OAIChannelStatus OAIChannelDetails::getStatus() const {
    return m_status;
}
void OAIChannelDetails::setStatus(const OAIChannelStatus &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAIChannelDetails::is_status_Set() const{
    return m_status_isSet;
}

bool OAIChannelDetails::is_status_Valid() const{
    return m_status_isValid;
}

bool OAIChannelDetails::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_channel_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_global_master_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_region_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIChannelDetails::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_channel_id_isValid && true;
}

} // namespace OpenAPI
