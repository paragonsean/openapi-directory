/**
 * Platform API
 * The [REST API specification](https://www.ably.io/documentation/rest-api) for Ably.
 *
 * The version of the OpenAPI document: 1.1.0
 * Contact: support@ably.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIOccupancy.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIOccupancy::OAIOccupancy(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIOccupancy::OAIOccupancy() {
    this->initializeModel();
}

OAIOccupancy::~OAIOccupancy() {}

void OAIOccupancy::initializeModel() {

    m_presence_connections_isSet = false;
    m_presence_connections_isValid = false;

    m_presence_members_isSet = false;
    m_presence_members_isValid = false;

    m_presence_subscribers_isSet = false;
    m_presence_subscribers_isValid = false;

    m_publishers_isSet = false;
    m_publishers_isValid = false;

    m_subscribers_isSet = false;
    m_subscribers_isValid = false;
}

void OAIOccupancy::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIOccupancy::fromJsonObject(QJsonObject json) {

    m_presence_connections_isValid = ::OpenAPI::fromJsonValue(m_presence_connections, json[QString("presenceConnections")]);
    m_presence_connections_isSet = !json[QString("presenceConnections")].isNull() && m_presence_connections_isValid;

    m_presence_members_isValid = ::OpenAPI::fromJsonValue(m_presence_members, json[QString("presenceMembers")]);
    m_presence_members_isSet = !json[QString("presenceMembers")].isNull() && m_presence_members_isValid;

    m_presence_subscribers_isValid = ::OpenAPI::fromJsonValue(m_presence_subscribers, json[QString("presenceSubscribers")]);
    m_presence_subscribers_isSet = !json[QString("presenceSubscribers")].isNull() && m_presence_subscribers_isValid;

    m_publishers_isValid = ::OpenAPI::fromJsonValue(m_publishers, json[QString("publishers")]);
    m_publishers_isSet = !json[QString("publishers")].isNull() && m_publishers_isValid;

    m_subscribers_isValid = ::OpenAPI::fromJsonValue(m_subscribers, json[QString("subscribers")]);
    m_subscribers_isSet = !json[QString("subscribers")].isNull() && m_subscribers_isValid;
}

QString OAIOccupancy::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIOccupancy::asJsonObject() const {
    QJsonObject obj;
    if (m_presence_connections_isSet) {
        obj.insert(QString("presenceConnections"), ::OpenAPI::toJsonValue(m_presence_connections));
    }
    if (m_presence_members_isSet) {
        obj.insert(QString("presenceMembers"), ::OpenAPI::toJsonValue(m_presence_members));
    }
    if (m_presence_subscribers_isSet) {
        obj.insert(QString("presenceSubscribers"), ::OpenAPI::toJsonValue(m_presence_subscribers));
    }
    if (m_publishers_isSet) {
        obj.insert(QString("publishers"), ::OpenAPI::toJsonValue(m_publishers));
    }
    if (m_subscribers_isSet) {
        obj.insert(QString("subscribers"), ::OpenAPI::toJsonValue(m_subscribers));
    }
    return obj;
}

qint32 OAIOccupancy::getPresenceConnections() const {
    return m_presence_connections;
}
void OAIOccupancy::setPresenceConnections(const qint32 &presence_connections) {
    m_presence_connections = presence_connections;
    m_presence_connections_isSet = true;
}

bool OAIOccupancy::is_presence_connections_Set() const{
    return m_presence_connections_isSet;
}

bool OAIOccupancy::is_presence_connections_Valid() const{
    return m_presence_connections_isValid;
}

qint32 OAIOccupancy::getPresenceMembers() const {
    return m_presence_members;
}
void OAIOccupancy::setPresenceMembers(const qint32 &presence_members) {
    m_presence_members = presence_members;
    m_presence_members_isSet = true;
}

bool OAIOccupancy::is_presence_members_Set() const{
    return m_presence_members_isSet;
}

bool OAIOccupancy::is_presence_members_Valid() const{
    return m_presence_members_isValid;
}

qint32 OAIOccupancy::getPresenceSubscribers() const {
    return m_presence_subscribers;
}
void OAIOccupancy::setPresenceSubscribers(const qint32 &presence_subscribers) {
    m_presence_subscribers = presence_subscribers;
    m_presence_subscribers_isSet = true;
}

bool OAIOccupancy::is_presence_subscribers_Set() const{
    return m_presence_subscribers_isSet;
}

bool OAIOccupancy::is_presence_subscribers_Valid() const{
    return m_presence_subscribers_isValid;
}

qint32 OAIOccupancy::getPublishers() const {
    return m_publishers;
}
void OAIOccupancy::setPublishers(const qint32 &publishers) {
    m_publishers = publishers;
    m_publishers_isSet = true;
}

bool OAIOccupancy::is_publishers_Set() const{
    return m_publishers_isSet;
}

bool OAIOccupancy::is_publishers_Valid() const{
    return m_publishers_isValid;
}

qint32 OAIOccupancy::getSubscribers() const {
    return m_subscribers;
}
void OAIOccupancy::setSubscribers(const qint32 &subscribers) {
    m_subscribers = subscribers;
    m_subscribers_isSet = true;
}

bool OAIOccupancy::is_subscribers_Set() const{
    return m_subscribers_isSet;
}

bool OAIOccupancy::is_subscribers_Valid() const{
    return m_subscribers_isValid;
}

bool OAIOccupancy::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_presence_connections_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_presence_members_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_presence_subscribers_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_publishers_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_subscribers_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIOccupancy::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
