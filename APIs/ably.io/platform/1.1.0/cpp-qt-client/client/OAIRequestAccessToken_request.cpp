/**
 * Platform API
 * The [REST API specification](https://www.ably.io/documentation/rest-api) for Ably.
 *
 * The version of the OpenAPI document: 1.1.0
 * Contact: support@ably.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIRequestAccessToken_request.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIRequestAccessToken_request::OAIRequestAccessToken_request(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIRequestAccessToken_request::OAIRequestAccessToken_request() {
    this->initializeModel();
}

OAIRequestAccessToken_request::~OAIRequestAccessToken_request() {}

void OAIRequestAccessToken_request::initializeModel() {

    m_capability_isSet = false;
    m_capability_isValid = false;

    m_client_id_isSet = false;
    m_client_id_isValid = false;

    m_key_name_isSet = false;
    m_key_name_isValid = false;

    m_nonce_isSet = false;
    m_nonce_isValid = false;

    m_timestamp_isSet = false;
    m_timestamp_isValid = false;

    m_mac_isSet = false;
    m_mac_isValid = false;
}

void OAIRequestAccessToken_request::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIRequestAccessToken_request::fromJsonObject(QJsonObject json) {

    m_capability_isValid = ::OpenAPI::fromJsonValue(m_capability, json[QString("capability")]);
    m_capability_isSet = !json[QString("capability")].isNull() && m_capability_isValid;

    m_client_id_isValid = ::OpenAPI::fromJsonValue(m_client_id, json[QString("clientId")]);
    m_client_id_isSet = !json[QString("clientId")].isNull() && m_client_id_isValid;

    m_key_name_isValid = ::OpenAPI::fromJsonValue(m_key_name, json[QString("keyName")]);
    m_key_name_isSet = !json[QString("keyName")].isNull() && m_key_name_isValid;

    m_nonce_isValid = ::OpenAPI::fromJsonValue(m_nonce, json[QString("nonce")]);
    m_nonce_isSet = !json[QString("nonce")].isNull() && m_nonce_isValid;

    m_timestamp_isValid = ::OpenAPI::fromJsonValue(m_timestamp, json[QString("timestamp")]);
    m_timestamp_isSet = !json[QString("timestamp")].isNull() && m_timestamp_isValid;

    m_mac_isValid = ::OpenAPI::fromJsonValue(m_mac, json[QString("mac")]);
    m_mac_isSet = !json[QString("mac")].isNull() && m_mac_isValid;
}

QString OAIRequestAccessToken_request::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIRequestAccessToken_request::asJsonObject() const {
    QJsonObject obj;
    if (m_capability_isSet) {
        obj.insert(QString("capability"), ::OpenAPI::toJsonValue(m_capability));
    }
    if (m_client_id_isSet) {
        obj.insert(QString("clientId"), ::OpenAPI::toJsonValue(m_client_id));
    }
    if (m_key_name_isSet) {
        obj.insert(QString("keyName"), ::OpenAPI::toJsonValue(m_key_name));
    }
    if (m_nonce_isSet) {
        obj.insert(QString("nonce"), ::OpenAPI::toJsonValue(m_nonce));
    }
    if (m_timestamp_isSet) {
        obj.insert(QString("timestamp"), ::OpenAPI::toJsonValue(m_timestamp));
    }
    if (m_mac_isSet) {
        obj.insert(QString("mac"), ::OpenAPI::toJsonValue(m_mac));
    }
    return obj;
}

OAIObject OAIRequestAccessToken_request::getCapability() const {
    return m_capability;
}
void OAIRequestAccessToken_request::setCapability(const OAIObject &capability) {
    m_capability = capability;
    m_capability_isSet = true;
}

bool OAIRequestAccessToken_request::is_capability_Set() const{
    return m_capability_isSet;
}

bool OAIRequestAccessToken_request::is_capability_Valid() const{
    return m_capability_isValid;
}

QString OAIRequestAccessToken_request::getClientId() const {
    return m_client_id;
}
void OAIRequestAccessToken_request::setClientId(const QString &client_id) {
    m_client_id = client_id;
    m_client_id_isSet = true;
}

bool OAIRequestAccessToken_request::is_client_id_Set() const{
    return m_client_id_isSet;
}

bool OAIRequestAccessToken_request::is_client_id_Valid() const{
    return m_client_id_isValid;
}

QString OAIRequestAccessToken_request::getKeyName() const {
    return m_key_name;
}
void OAIRequestAccessToken_request::setKeyName(const QString &key_name) {
    m_key_name = key_name;
    m_key_name_isSet = true;
}

bool OAIRequestAccessToken_request::is_key_name_Set() const{
    return m_key_name_isSet;
}

bool OAIRequestAccessToken_request::is_key_name_Valid() const{
    return m_key_name_isValid;
}

QString OAIRequestAccessToken_request::getNonce() const {
    return m_nonce;
}
void OAIRequestAccessToken_request::setNonce(const QString &nonce) {
    m_nonce = nonce;
    m_nonce_isSet = true;
}

bool OAIRequestAccessToken_request::is_nonce_Set() const{
    return m_nonce_isSet;
}

bool OAIRequestAccessToken_request::is_nonce_Valid() const{
    return m_nonce_isValid;
}

qint32 OAIRequestAccessToken_request::getTimestamp() const {
    return m_timestamp;
}
void OAIRequestAccessToken_request::setTimestamp(const qint32 &timestamp) {
    m_timestamp = timestamp;
    m_timestamp_isSet = true;
}

bool OAIRequestAccessToken_request::is_timestamp_Set() const{
    return m_timestamp_isSet;
}

bool OAIRequestAccessToken_request::is_timestamp_Valid() const{
    return m_timestamp_isValid;
}

QString OAIRequestAccessToken_request::getMac() const {
    return m_mac;
}
void OAIRequestAccessToken_request::setMac(const QString &mac) {
    m_mac = mac;
    m_mac_isSet = true;
}

bool OAIRequestAccessToken_request::is_mac_Set() const{
    return m_mac_isSet;
}

bool OAIRequestAccessToken_request::is_mac_Valid() const{
    return m_mac_isValid;
}

bool OAIRequestAccessToken_request::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_capability_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_client_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_key_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_nonce_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_timestamp_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_mac_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIRequestAccessToken_request::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_capability_isValid && m_key_name_isValid && m_nonce_isValid && m_timestamp_isValid && m_mac_isValid && true;
}

} // namespace OpenAPI
