/**
 * Platform API
 * The [REST API specification](https://www.ably.io/documentation/rest-api) for Ably.
 *
 * The version of the OpenAPI document: 1.1.0
 * Contact: support@ably.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIChannelStatus.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIChannelStatus::OAIChannelStatus(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIChannelStatus::OAIChannelStatus() {
    this->initializeModel();
}

OAIChannelStatus::~OAIChannelStatus() {}

void OAIChannelStatus::initializeModel() {

    m_is_active_isSet = false;
    m_is_active_isValid = false;

    m_occupancy_isSet = false;
    m_occupancy_isValid = false;
}

void OAIChannelStatus::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIChannelStatus::fromJsonObject(QJsonObject json) {

    m_is_active_isValid = ::OpenAPI::fromJsonValue(m_is_active, json[QString("isActive")]);
    m_is_active_isSet = !json[QString("isActive")].isNull() && m_is_active_isValid;

    m_occupancy_isValid = ::OpenAPI::fromJsonValue(m_occupancy, json[QString("occupancy")]);
    m_occupancy_isSet = !json[QString("occupancy")].isNull() && m_occupancy_isValid;
}

QString OAIChannelStatus::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIChannelStatus::asJsonObject() const {
    QJsonObject obj;
    if (m_is_active_isSet) {
        obj.insert(QString("isActive"), ::OpenAPI::toJsonValue(m_is_active));
    }
    if (m_occupancy.isSet()) {
        obj.insert(QString("occupancy"), ::OpenAPI::toJsonValue(m_occupancy));
    }
    return obj;
}

bool OAIChannelStatus::isIsActive() const {
    return m_is_active;
}
void OAIChannelStatus::setIsActive(const bool &is_active) {
    m_is_active = is_active;
    m_is_active_isSet = true;
}

bool OAIChannelStatus::is_is_active_Set() const{
    return m_is_active_isSet;
}

bool OAIChannelStatus::is_is_active_Valid() const{
    return m_is_active_isValid;
}

OAIOccupancy OAIChannelStatus::getOccupancy() const {
    return m_occupancy;
}
void OAIChannelStatus::setOccupancy(const OAIOccupancy &occupancy) {
    m_occupancy = occupancy;
    m_occupancy_isSet = true;
}

bool OAIChannelStatus::is_occupancy_Set() const{
    return m_occupancy_isSet;
}

bool OAIChannelStatus::is_occupancy_Valid() const{
    return m_occupancy_isValid;
}

bool OAIChannelStatus::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_is_active_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_occupancy.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIChannelStatus::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_is_active_isValid && true;
}

} // namespace OpenAPI
