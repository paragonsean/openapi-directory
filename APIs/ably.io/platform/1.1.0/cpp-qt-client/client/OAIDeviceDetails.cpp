/**
 * Platform API
 * The [REST API specification](https://www.ably.io/documentation/rest-api) for Ably.
 *
 * The version of the OpenAPI document: 1.1.0
 * Contact: support@ably.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDeviceDetails.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDeviceDetails::OAIDeviceDetails(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDeviceDetails::OAIDeviceDetails() {
    this->initializeModel();
}

OAIDeviceDetails::~OAIDeviceDetails() {}

void OAIDeviceDetails::initializeModel() {

    m_client_id_isSet = false;
    m_client_id_isValid = false;

    m_device_secret_isSet = false;
    m_device_secret_isValid = false;

    m_form_factor_isSet = false;
    m_form_factor_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_metadata_isSet = false;
    m_metadata_isValid = false;

    m_platform_isSet = false;
    m_platform_isValid = false;

    m_push_recipient_isSet = false;
    m_push_recipient_isValid = false;

    m_push_state_isSet = false;
    m_push_state_isValid = false;
}

void OAIDeviceDetails::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDeviceDetails::fromJsonObject(QJsonObject json) {

    m_client_id_isValid = ::OpenAPI::fromJsonValue(m_client_id, json[QString("clientId")]);
    m_client_id_isSet = !json[QString("clientId")].isNull() && m_client_id_isValid;

    m_device_secret_isValid = ::OpenAPI::fromJsonValue(m_device_secret, json[QString("deviceSecret")]);
    m_device_secret_isSet = !json[QString("deviceSecret")].isNull() && m_device_secret_isValid;

    m_form_factor_isValid = ::OpenAPI::fromJsonValue(m_form_factor, json[QString("formFactor")]);
    m_form_factor_isSet = !json[QString("formFactor")].isNull() && m_form_factor_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_metadata_isValid = ::OpenAPI::fromJsonValue(m_metadata, json[QString("metadata")]);
    m_metadata_isSet = !json[QString("metadata")].isNull() && m_metadata_isValid;

    m_platform_isValid = ::OpenAPI::fromJsonValue(m_platform, json[QString("platform")]);
    m_platform_isSet = !json[QString("platform")].isNull() && m_platform_isValid;

    m_push_recipient_isValid = ::OpenAPI::fromJsonValue(m_push_recipient, json[QString("push.recipient")]);
    m_push_recipient_isSet = !json[QString("push.recipient")].isNull() && m_push_recipient_isValid;

    m_push_state_isValid = ::OpenAPI::fromJsonValue(m_push_state, json[QString("push.state")]);
    m_push_state_isSet = !json[QString("push.state")].isNull() && m_push_state_isValid;
}

QString OAIDeviceDetails::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDeviceDetails::asJsonObject() const {
    QJsonObject obj;
    if (m_client_id_isSet) {
        obj.insert(QString("clientId"), ::OpenAPI::toJsonValue(m_client_id));
    }
    if (m_device_secret_isSet) {
        obj.insert(QString("deviceSecret"), ::OpenAPI::toJsonValue(m_device_secret));
    }
    if (m_form_factor_isSet) {
        obj.insert(QString("formFactor"), ::OpenAPI::toJsonValue(m_form_factor));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_metadata_isSet) {
        obj.insert(QString("metadata"), ::OpenAPI::toJsonValue(m_metadata));
    }
    if (m_platform_isSet) {
        obj.insert(QString("platform"), ::OpenAPI::toJsonValue(m_platform));
    }
    if (m_push_recipient.isSet()) {
        obj.insert(QString("push.recipient"), ::OpenAPI::toJsonValue(m_push_recipient));
    }
    if (m_push_state_isSet) {
        obj.insert(QString("push.state"), ::OpenAPI::toJsonValue(m_push_state));
    }
    return obj;
}

QString OAIDeviceDetails::getClientId() const {
    return m_client_id;
}
void OAIDeviceDetails::setClientId(const QString &client_id) {
    m_client_id = client_id;
    m_client_id_isSet = true;
}

bool OAIDeviceDetails::is_client_id_Set() const{
    return m_client_id_isSet;
}

bool OAIDeviceDetails::is_client_id_Valid() const{
    return m_client_id_isValid;
}

QString OAIDeviceDetails::getDeviceSecret() const {
    return m_device_secret;
}
void OAIDeviceDetails::setDeviceSecret(const QString &device_secret) {
    m_device_secret = device_secret;
    m_device_secret_isSet = true;
}

bool OAIDeviceDetails::is_device_secret_Set() const{
    return m_device_secret_isSet;
}

bool OAIDeviceDetails::is_device_secret_Valid() const{
    return m_device_secret_isValid;
}

QString OAIDeviceDetails::getFormFactor() const {
    return m_form_factor;
}
void OAIDeviceDetails::setFormFactor(const QString &form_factor) {
    m_form_factor = form_factor;
    m_form_factor_isSet = true;
}

bool OAIDeviceDetails::is_form_factor_Set() const{
    return m_form_factor_isSet;
}

bool OAIDeviceDetails::is_form_factor_Valid() const{
    return m_form_factor_isValid;
}

QString OAIDeviceDetails::getId() const {
    return m_id;
}
void OAIDeviceDetails::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIDeviceDetails::is_id_Set() const{
    return m_id_isSet;
}

bool OAIDeviceDetails::is_id_Valid() const{
    return m_id_isValid;
}

OAIObject OAIDeviceDetails::getMetadata() const {
    return m_metadata;
}
void OAIDeviceDetails::setMetadata(const OAIObject &metadata) {
    m_metadata = metadata;
    m_metadata_isSet = true;
}

bool OAIDeviceDetails::is_metadata_Set() const{
    return m_metadata_isSet;
}

bool OAIDeviceDetails::is_metadata_Valid() const{
    return m_metadata_isValid;
}

QString OAIDeviceDetails::getPlatform() const {
    return m_platform;
}
void OAIDeviceDetails::setPlatform(const QString &platform) {
    m_platform = platform;
    m_platform_isSet = true;
}

bool OAIDeviceDetails::is_platform_Set() const{
    return m_platform_isSet;
}

bool OAIDeviceDetails::is_platform_Valid() const{
    return m_platform_isValid;
}

OAIRecipient OAIDeviceDetails::getPushRecipient() const {
    return m_push_recipient;
}
void OAIDeviceDetails::setPushRecipient(const OAIRecipient &push_recipient) {
    m_push_recipient = push_recipient;
    m_push_recipient_isSet = true;
}

bool OAIDeviceDetails::is_push_recipient_Set() const{
    return m_push_recipient_isSet;
}

bool OAIDeviceDetails::is_push_recipient_Valid() const{
    return m_push_recipient_isValid;
}

QString OAIDeviceDetails::getPushState() const {
    return m_push_state;
}
void OAIDeviceDetails::setPushState(const QString &push_state) {
    m_push_state = push_state;
    m_push_state_isSet = true;
}

bool OAIDeviceDetails::is_push_state_Set() const{
    return m_push_state_isSet;
}

bool OAIDeviceDetails::is_push_state_Valid() const{
    return m_push_state_isValid;
}

bool OAIDeviceDetails::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_client_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_device_secret_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_form_factor_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_metadata_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_platform_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_push_recipient.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_push_state_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDeviceDetails::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
