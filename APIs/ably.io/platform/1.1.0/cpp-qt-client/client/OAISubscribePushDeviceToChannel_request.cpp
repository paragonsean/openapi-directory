/**
 * Platform API
 * The [REST API specification](https://www.ably.io/documentation/rest-api) for Ably.
 *
 * The version of the OpenAPI document: 1.1.0
 * Contact: support@ably.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISubscribePushDeviceToChannel_request.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISubscribePushDeviceToChannel_request::OAISubscribePushDeviceToChannel_request(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISubscribePushDeviceToChannel_request::OAISubscribePushDeviceToChannel_request() {
    this->initializeModel();
}

OAISubscribePushDeviceToChannel_request::~OAISubscribePushDeviceToChannel_request() {}

void OAISubscribePushDeviceToChannel_request::initializeModel() {

    m_channel_isSet = false;
    m_channel_isValid = false;

    m_device_id_isSet = false;
    m_device_id_isValid = false;

    m_client_id_isSet = false;
    m_client_id_isValid = false;
}

void OAISubscribePushDeviceToChannel_request::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISubscribePushDeviceToChannel_request::fromJsonObject(QJsonObject json) {

    m_channel_isValid = ::OpenAPI::fromJsonValue(m_channel, json[QString("channel")]);
    m_channel_isSet = !json[QString("channel")].isNull() && m_channel_isValid;

    m_device_id_isValid = ::OpenAPI::fromJsonValue(m_device_id, json[QString("deviceId")]);
    m_device_id_isSet = !json[QString("deviceId")].isNull() && m_device_id_isValid;

    m_client_id_isValid = ::OpenAPI::fromJsonValue(m_client_id, json[QString("clientId")]);
    m_client_id_isSet = !json[QString("clientId")].isNull() && m_client_id_isValid;
}

QString OAISubscribePushDeviceToChannel_request::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISubscribePushDeviceToChannel_request::asJsonObject() const {
    QJsonObject obj;
    if (m_channel_isSet) {
        obj.insert(QString("channel"), ::OpenAPI::toJsonValue(m_channel));
    }
    if (m_device_id_isSet) {
        obj.insert(QString("deviceId"), ::OpenAPI::toJsonValue(m_device_id));
    }
    if (m_client_id_isSet) {
        obj.insert(QString("clientId"), ::OpenAPI::toJsonValue(m_client_id));
    }
    return obj;
}

QString OAISubscribePushDeviceToChannel_request::getChannel() const {
    return m_channel;
}
void OAISubscribePushDeviceToChannel_request::setChannel(const QString &channel) {
    m_channel = channel;
    m_channel_isSet = true;
}

bool OAISubscribePushDeviceToChannel_request::is_channel_Set() const{
    return m_channel_isSet;
}

bool OAISubscribePushDeviceToChannel_request::is_channel_Valid() const{
    return m_channel_isValid;
}

QString OAISubscribePushDeviceToChannel_request::getDeviceId() const {
    return m_device_id;
}
void OAISubscribePushDeviceToChannel_request::setDeviceId(const QString &device_id) {
    m_device_id = device_id;
    m_device_id_isSet = true;
}

bool OAISubscribePushDeviceToChannel_request::is_device_id_Set() const{
    return m_device_id_isSet;
}

bool OAISubscribePushDeviceToChannel_request::is_device_id_Valid() const{
    return m_device_id_isValid;
}

QString OAISubscribePushDeviceToChannel_request::getClientId() const {
    return m_client_id;
}
void OAISubscribePushDeviceToChannel_request::setClientId(const QString &client_id) {
    m_client_id = client_id;
    m_client_id_isSet = true;
}

bool OAISubscribePushDeviceToChannel_request::is_client_id_Set() const{
    return m_client_id_isSet;
}

bool OAISubscribePushDeviceToChannel_request::is_client_id_Valid() const{
    return m_client_id_isValid;
}

bool OAISubscribePushDeviceToChannel_request::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_channel_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_device_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_client_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISubscribePushDeviceToChannel_request::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
