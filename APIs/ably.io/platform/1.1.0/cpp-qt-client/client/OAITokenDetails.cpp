/**
 * Platform API
 * The [REST API specification](https://www.ably.io/documentation/rest-api) for Ably.
 *
 * The version of the OpenAPI document: 1.1.0
 * Contact: support@ably.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAITokenDetails.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAITokenDetails::OAITokenDetails(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAITokenDetails::OAITokenDetails() {
    this->initializeModel();
}

OAITokenDetails::~OAITokenDetails() {}

void OAITokenDetails::initializeModel() {

    m_capability_isSet = false;
    m_capability_isValid = false;

    m_expires_isSet = false;
    m_expires_isValid = false;

    m_issued_isSet = false;
    m_issued_isValid = false;

    m_key_name_isSet = false;
    m_key_name_isValid = false;

    m_token_isSet = false;
    m_token_isValid = false;
}

void OAITokenDetails::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAITokenDetails::fromJsonObject(QJsonObject json) {

    m_capability_isValid = ::OpenAPI::fromJsonValue(m_capability, json[QString("capability")]);
    m_capability_isSet = !json[QString("capability")].isNull() && m_capability_isValid;

    m_expires_isValid = ::OpenAPI::fromJsonValue(m_expires, json[QString("expires")]);
    m_expires_isSet = !json[QString("expires")].isNull() && m_expires_isValid;

    m_issued_isValid = ::OpenAPI::fromJsonValue(m_issued, json[QString("issued")]);
    m_issued_isSet = !json[QString("issued")].isNull() && m_issued_isValid;

    m_key_name_isValid = ::OpenAPI::fromJsonValue(m_key_name, json[QString("keyName")]);
    m_key_name_isSet = !json[QString("keyName")].isNull() && m_key_name_isValid;

    m_token_isValid = ::OpenAPI::fromJsonValue(m_token, json[QString("token")]);
    m_token_isSet = !json[QString("token")].isNull() && m_token_isValid;
}

QString OAITokenDetails::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAITokenDetails::asJsonObject() const {
    QJsonObject obj;
    if (m_capability_isSet) {
        obj.insert(QString("capability"), ::OpenAPI::toJsonValue(m_capability));
    }
    if (m_expires_isSet) {
        obj.insert(QString("expires"), ::OpenAPI::toJsonValue(m_expires));
    }
    if (m_issued_isSet) {
        obj.insert(QString("issued"), ::OpenAPI::toJsonValue(m_issued));
    }
    if (m_key_name_isSet) {
        obj.insert(QString("keyName"), ::OpenAPI::toJsonValue(m_key_name));
    }
    if (m_token_isSet) {
        obj.insert(QString("token"), ::OpenAPI::toJsonValue(m_token));
    }
    return obj;
}

QString OAITokenDetails::getCapability() const {
    return m_capability;
}
void OAITokenDetails::setCapability(const QString &capability) {
    m_capability = capability;
    m_capability_isSet = true;
}

bool OAITokenDetails::is_capability_Set() const{
    return m_capability_isSet;
}

bool OAITokenDetails::is_capability_Valid() const{
    return m_capability_isValid;
}

qint32 OAITokenDetails::getExpires() const {
    return m_expires;
}
void OAITokenDetails::setExpires(const qint32 &expires) {
    m_expires = expires;
    m_expires_isSet = true;
}

bool OAITokenDetails::is_expires_Set() const{
    return m_expires_isSet;
}

bool OAITokenDetails::is_expires_Valid() const{
    return m_expires_isValid;
}

qint32 OAITokenDetails::getIssued() const {
    return m_issued;
}
void OAITokenDetails::setIssued(const qint32 &issued) {
    m_issued = issued;
    m_issued_isSet = true;
}

bool OAITokenDetails::is_issued_Set() const{
    return m_issued_isSet;
}

bool OAITokenDetails::is_issued_Valid() const{
    return m_issued_isValid;
}

QString OAITokenDetails::getKeyName() const {
    return m_key_name;
}
void OAITokenDetails::setKeyName(const QString &key_name) {
    m_key_name = key_name;
    m_key_name_isSet = true;
}

bool OAITokenDetails::is_key_name_Set() const{
    return m_key_name_isSet;
}

bool OAITokenDetails::is_key_name_Valid() const{
    return m_key_name_isValid;
}

QString OAITokenDetails::getToken() const {
    return m_token;
}
void OAITokenDetails::setToken(const QString &token) {
    m_token = token;
    m_token_isSet = true;
}

bool OAITokenDetails::is_token_Set() const{
    return m_token_isSet;
}

bool OAITokenDetails::is_token_Valid() const{
    return m_token_isValid;
}

bool OAITokenDetails::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_capability_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_expires_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_issued_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_key_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_token_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAITokenDetails::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
