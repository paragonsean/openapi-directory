/**
 * Platform API
 * The [REST API specification](https://www.ably.io/documentation/rest-api) for Ably.
 *
 * The version of the OpenAPI document: 1.1.0
 * Contact: support@ably.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIRecipient.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIRecipient::OAIRecipient(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIRecipient::OAIRecipient() {
    this->initializeModel();
}

OAIRecipient::~OAIRecipient() {}

void OAIRecipient::initializeModel() {

    m_client_id_isSet = false;
    m_client_id_isValid = false;

    m_device_id_isSet = false;
    m_device_id_isValid = false;

    m_device_token_isSet = false;
    m_device_token_isValid = false;

    m_registration_token_isSet = false;
    m_registration_token_isValid = false;

    m_transport_type_isSet = false;
    m_transport_type_isValid = false;
}

void OAIRecipient::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIRecipient::fromJsonObject(QJsonObject json) {

    m_client_id_isValid = ::OpenAPI::fromJsonValue(m_client_id, json[QString("clientId")]);
    m_client_id_isSet = !json[QString("clientId")].isNull() && m_client_id_isValid;

    m_device_id_isValid = ::OpenAPI::fromJsonValue(m_device_id, json[QString("deviceId")]);
    m_device_id_isSet = !json[QString("deviceId")].isNull() && m_device_id_isValid;

    m_device_token_isValid = ::OpenAPI::fromJsonValue(m_device_token, json[QString("deviceToken")]);
    m_device_token_isSet = !json[QString("deviceToken")].isNull() && m_device_token_isValid;

    m_registration_token_isValid = ::OpenAPI::fromJsonValue(m_registration_token, json[QString("registrationToken")]);
    m_registration_token_isSet = !json[QString("registrationToken")].isNull() && m_registration_token_isValid;

    m_transport_type_isValid = ::OpenAPI::fromJsonValue(m_transport_type, json[QString("transportType")]);
    m_transport_type_isSet = !json[QString("transportType")].isNull() && m_transport_type_isValid;
}

QString OAIRecipient::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIRecipient::asJsonObject() const {
    QJsonObject obj;
    if (m_client_id_isSet) {
        obj.insert(QString("clientId"), ::OpenAPI::toJsonValue(m_client_id));
    }
    if (m_device_id_isSet) {
        obj.insert(QString("deviceId"), ::OpenAPI::toJsonValue(m_device_id));
    }
    if (m_device_token_isSet) {
        obj.insert(QString("deviceToken"), ::OpenAPI::toJsonValue(m_device_token));
    }
    if (m_registration_token_isSet) {
        obj.insert(QString("registrationToken"), ::OpenAPI::toJsonValue(m_registration_token));
    }
    if (m_transport_type_isSet) {
        obj.insert(QString("transportType"), ::OpenAPI::toJsonValue(m_transport_type));
    }
    return obj;
}

QString OAIRecipient::getClientId() const {
    return m_client_id;
}
void OAIRecipient::setClientId(const QString &client_id) {
    m_client_id = client_id;
    m_client_id_isSet = true;
}

bool OAIRecipient::is_client_id_Set() const{
    return m_client_id_isSet;
}

bool OAIRecipient::is_client_id_Valid() const{
    return m_client_id_isValid;
}

QString OAIRecipient::getDeviceId() const {
    return m_device_id;
}
void OAIRecipient::setDeviceId(const QString &device_id) {
    m_device_id = device_id;
    m_device_id_isSet = true;
}

bool OAIRecipient::is_device_id_Set() const{
    return m_device_id_isSet;
}

bool OAIRecipient::is_device_id_Valid() const{
    return m_device_id_isValid;
}

QString OAIRecipient::getDeviceToken() const {
    return m_device_token;
}
void OAIRecipient::setDeviceToken(const QString &device_token) {
    m_device_token = device_token;
    m_device_token_isSet = true;
}

bool OAIRecipient::is_device_token_Set() const{
    return m_device_token_isSet;
}

bool OAIRecipient::is_device_token_Valid() const{
    return m_device_token_isValid;
}

QString OAIRecipient::getRegistrationToken() const {
    return m_registration_token;
}
void OAIRecipient::setRegistrationToken(const QString &registration_token) {
    m_registration_token = registration_token;
    m_registration_token_isSet = true;
}

bool OAIRecipient::is_registration_token_Set() const{
    return m_registration_token_isSet;
}

bool OAIRecipient::is_registration_token_Valid() const{
    return m_registration_token_isValid;
}

QString OAIRecipient::getTransportType() const {
    return m_transport_type;
}
void OAIRecipient::setTransportType(const QString &transport_type) {
    m_transport_type = transport_type;
    m_transport_type_isSet = true;
}

bool OAIRecipient::is_transport_type_Set() const{
    return m_transport_type_isSet;
}

bool OAIRecipient::is_transport_type_Valid() const{
    return m_transport_type_isValid;
}

bool OAIRecipient::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_client_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_device_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_device_token_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_registration_token_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_transport_type_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIRecipient::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
