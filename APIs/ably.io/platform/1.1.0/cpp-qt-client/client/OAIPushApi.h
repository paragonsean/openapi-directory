/**
 * Platform API
 * The [REST API specification](https://www.ably.io/documentation/rest-api) for Ably.
 *
 * The version of the OpenAPI document: 1.1.0
 * Contact: support@ably.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIPushApi_H
#define OAI_OAIPushApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIDeviceDetails.h"
#include "OAIError.h"
#include "OAIPublishPushNotificationToDevices_request.h"
#include "OAISubscribePushDeviceToChannel_request.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIPushApi : public QObject {
    Q_OBJECT

public:
    OAIPushApi(const int timeOut = 0);
    ~OAIPushApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  x_ably_version QString [optional]
    * @param[in]  format QString [optional]
    * @param[in]  channel QString [optional]
    * @param[in]  device_id QString [optional]
    * @param[in]  client_id QString [optional]
    */
    virtual void deletePushDeviceDetails(const ::OpenAPI::OptionalParam<QString> &x_ably_version = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &format = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &channel = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &device_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &client_id = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  x_ably_version QString [optional]
    * @param[in]  format QString [optional]
    */
    virtual void getChannelsWithPushSubscribers(const ::OpenAPI::OptionalParam<QString> &x_ably_version = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &format = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  device_id QString [required]
    * @param[in]  x_ably_version QString [optional]
    * @param[in]  format QString [optional]
    */
    virtual void getPushDeviceDetails(const QString &device_id, const ::OpenAPI::OptionalParam<QString> &x_ably_version = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &format = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  x_ably_version QString [optional]
    * @param[in]  format QString [optional]
    * @param[in]  channel QString [optional]
    * @param[in]  device_id QString [optional]
    * @param[in]  client_id QString [optional]
    * @param[in]  limit qint32 [optional]
    */
    virtual void getPushSubscriptionsOnChannels(const ::OpenAPI::OptionalParam<QString> &x_ably_version = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &format = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &channel = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &device_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &client_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &limit = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  x_ably_version QString [optional]
    * @param[in]  format QString [optional]
    * @param[in]  device_id QString [optional]
    * @param[in]  client_id QString [optional]
    * @param[in]  limit qint32 [optional]
    */
    virtual void getRegisteredPushDevices(const ::OpenAPI::OptionalParam<QString> &x_ably_version = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &format = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &device_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &client_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &limit = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  device_id QString [required]
    * @param[in]  x_ably_version QString [optional]
    * @param[in]  format QString [optional]
    * @param[in]  oai_device_details OAIDeviceDetails [optional]
    */
    virtual void patchPushDeviceDetails(const QString &device_id, const ::OpenAPI::OptionalParam<QString> &x_ably_version = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &format = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIDeviceDetails> &oai_device_details = ::OpenAPI::OptionalParam<OAIDeviceDetails>());

    /**
    * @param[in]  x_ably_version QString [optional]
    * @param[in]  format QString [optional]
    * @param[in]  oai_publish_push_notification_to_devices_request OAIPublishPushNotificationToDevices_request [optional]
    */
    virtual void publishPushNotificationToDevices(const ::OpenAPI::OptionalParam<QString> &x_ably_version = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &format = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIPublishPushNotificationToDevices_request> &oai_publish_push_notification_to_devices_request = ::OpenAPI::OptionalParam<OAIPublishPushNotificationToDevices_request>());

    /**
    * @param[in]  device_id QString [required]
    * @param[in]  x_ably_version QString [optional]
    * @param[in]  format QString [optional]
    * @param[in]  oai_device_details OAIDeviceDetails [optional]
    */
    virtual void putPushDeviceDetails(const QString &device_id, const ::OpenAPI::OptionalParam<QString> &x_ably_version = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &format = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIDeviceDetails> &oai_device_details = ::OpenAPI::OptionalParam<OAIDeviceDetails>());

    /**
    * @param[in]  x_ably_version QString [optional]
    * @param[in]  format QString [optional]
    * @param[in]  oai_device_details OAIDeviceDetails [optional]
    */
    virtual void registerPushDevice(const ::OpenAPI::OptionalParam<QString> &x_ably_version = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &format = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIDeviceDetails> &oai_device_details = ::OpenAPI::OptionalParam<OAIDeviceDetails>());

    /**
    * @param[in]  x_ably_version QString [optional]
    * @param[in]  format QString [optional]
    * @param[in]  oai_subscribe_push_device_to_channel_request OAISubscribePushDeviceToChannel_request [optional]
    */
    virtual void subscribePushDeviceToChannel(const ::OpenAPI::OptionalParam<QString> &x_ably_version = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &format = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAISubscribePushDeviceToChannel_request> &oai_subscribe_push_device_to_channel_request = ::OpenAPI::OptionalParam<OAISubscribePushDeviceToChannel_request>());

    /**
    * @param[in]  x_ably_version QString [optional]
    * @param[in]  format QString [optional]
    * @param[in]  device_id QString [optional]
    * @param[in]  client_id QString [optional]
    */
    virtual void unregisterAllPushDevices(const ::OpenAPI::OptionalParam<QString> &x_ably_version = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &format = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &device_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &client_id = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  device_id QString [required]
    * @param[in]  x_ably_version QString [optional]
    * @param[in]  format QString [optional]
    */
    virtual void unregisterPushDevice(const QString &device_id, const ::OpenAPI::OptionalParam<QString> &x_ably_version = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &format = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  device_id QString [required]
    * @param[in]  x_ably_version QString [optional]
    * @param[in]  format QString [optional]
    */
    virtual void updatePushDeviceDetails(const QString &device_id, const ::OpenAPI::OptionalParam<QString> &x_ably_version = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &format = ::OpenAPI::OptionalParam<QString>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void deletePushDeviceDetailsCallback(OAIHttpRequestWorker *worker);
    void getChannelsWithPushSubscribersCallback(OAIHttpRequestWorker *worker);
    void getPushDeviceDetailsCallback(OAIHttpRequestWorker *worker);
    void getPushSubscriptionsOnChannelsCallback(OAIHttpRequestWorker *worker);
    void getRegisteredPushDevicesCallback(OAIHttpRequestWorker *worker);
    void patchPushDeviceDetailsCallback(OAIHttpRequestWorker *worker);
    void publishPushNotificationToDevicesCallback(OAIHttpRequestWorker *worker);
    void putPushDeviceDetailsCallback(OAIHttpRequestWorker *worker);
    void registerPushDeviceCallback(OAIHttpRequestWorker *worker);
    void subscribePushDeviceToChannelCallback(OAIHttpRequestWorker *worker);
    void unregisterAllPushDevicesCallback(OAIHttpRequestWorker *worker);
    void unregisterPushDeviceCallback(OAIHttpRequestWorker *worker);
    void updatePushDeviceDetailsCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void deletePushDeviceDetailsSignal();
    void getChannelsWithPushSubscribersSignal(QList<QString> summary);
    void getPushDeviceDetailsSignal(OAIDeviceDetails summary);
    void getPushSubscriptionsOnChannelsSignal(OAIDeviceDetails summary);
    void getRegisteredPushDevicesSignal(OAIDeviceDetails summary);
    void patchPushDeviceDetailsSignal(OAIDeviceDetails summary);
    void publishPushNotificationToDevicesSignal();
    void putPushDeviceDetailsSignal(OAIDeviceDetails summary);
    void registerPushDeviceSignal(OAIDeviceDetails summary);
    void subscribePushDeviceToChannelSignal();
    void unregisterAllPushDevicesSignal();
    void unregisterPushDeviceSignal();
    void updatePushDeviceDetailsSignal(OAIDeviceDetails summary);


    void deletePushDeviceDetailsSignalFull(OAIHttpRequestWorker *worker);
    void getChannelsWithPushSubscribersSignalFull(OAIHttpRequestWorker *worker, QList<QString> summary);
    void getPushDeviceDetailsSignalFull(OAIHttpRequestWorker *worker, OAIDeviceDetails summary);
    void getPushSubscriptionsOnChannelsSignalFull(OAIHttpRequestWorker *worker, OAIDeviceDetails summary);
    void getRegisteredPushDevicesSignalFull(OAIHttpRequestWorker *worker, OAIDeviceDetails summary);
    void patchPushDeviceDetailsSignalFull(OAIHttpRequestWorker *worker, OAIDeviceDetails summary);
    void publishPushNotificationToDevicesSignalFull(OAIHttpRequestWorker *worker);
    void putPushDeviceDetailsSignalFull(OAIHttpRequestWorker *worker, OAIDeviceDetails summary);
    void registerPushDeviceSignalFull(OAIHttpRequestWorker *worker, OAIDeviceDetails summary);
    void subscribePushDeviceToChannelSignalFull(OAIHttpRequestWorker *worker);
    void unregisterAllPushDevicesSignalFull(OAIHttpRequestWorker *worker);
    void unregisterPushDeviceSignalFull(OAIHttpRequestWorker *worker);
    void updatePushDeviceDetailsSignalFull(OAIHttpRequestWorker *worker, OAIDeviceDetails summary);

    Q_DECL_DEPRECATED_X("Use deletePushDeviceDetailsSignalError() instead")
    void deletePushDeviceDetailsSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void deletePushDeviceDetailsSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getChannelsWithPushSubscribersSignalError() instead")
    void getChannelsWithPushSubscribersSignalE(QList<QString> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getChannelsWithPushSubscribersSignalError(QList<QString> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getPushDeviceDetailsSignalError() instead")
    void getPushDeviceDetailsSignalE(OAIDeviceDetails summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getPushDeviceDetailsSignalError(OAIDeviceDetails summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getPushSubscriptionsOnChannelsSignalError() instead")
    void getPushSubscriptionsOnChannelsSignalE(OAIDeviceDetails summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getPushSubscriptionsOnChannelsSignalError(OAIDeviceDetails summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getRegisteredPushDevicesSignalError() instead")
    void getRegisteredPushDevicesSignalE(OAIDeviceDetails summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getRegisteredPushDevicesSignalError(OAIDeviceDetails summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use patchPushDeviceDetailsSignalError() instead")
    void patchPushDeviceDetailsSignalE(OAIDeviceDetails summary, QNetworkReply::NetworkError error_type, QString error_str);
    void patchPushDeviceDetailsSignalError(OAIDeviceDetails summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use publishPushNotificationToDevicesSignalError() instead")
    void publishPushNotificationToDevicesSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void publishPushNotificationToDevicesSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use putPushDeviceDetailsSignalError() instead")
    void putPushDeviceDetailsSignalE(OAIDeviceDetails summary, QNetworkReply::NetworkError error_type, QString error_str);
    void putPushDeviceDetailsSignalError(OAIDeviceDetails summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use registerPushDeviceSignalError() instead")
    void registerPushDeviceSignalE(OAIDeviceDetails summary, QNetworkReply::NetworkError error_type, QString error_str);
    void registerPushDeviceSignalError(OAIDeviceDetails summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use subscribePushDeviceToChannelSignalError() instead")
    void subscribePushDeviceToChannelSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void subscribePushDeviceToChannelSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use unregisterAllPushDevicesSignalError() instead")
    void unregisterAllPushDevicesSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void unregisterAllPushDevicesSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use unregisterPushDeviceSignalError() instead")
    void unregisterPushDeviceSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void unregisterPushDeviceSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updatePushDeviceDetailsSignalError() instead")
    void updatePushDeviceDetailsSignalE(OAIDeviceDetails summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updatePushDeviceDetailsSignalError(OAIDeviceDetails summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use deletePushDeviceDetailsSignalErrorFull() instead")
    void deletePushDeviceDetailsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deletePushDeviceDetailsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getChannelsWithPushSubscribersSignalErrorFull() instead")
    void getChannelsWithPushSubscribersSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getChannelsWithPushSubscribersSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getPushDeviceDetailsSignalErrorFull() instead")
    void getPushDeviceDetailsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getPushDeviceDetailsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getPushSubscriptionsOnChannelsSignalErrorFull() instead")
    void getPushSubscriptionsOnChannelsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getPushSubscriptionsOnChannelsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getRegisteredPushDevicesSignalErrorFull() instead")
    void getRegisteredPushDevicesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getRegisteredPushDevicesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use patchPushDeviceDetailsSignalErrorFull() instead")
    void patchPushDeviceDetailsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void patchPushDeviceDetailsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use publishPushNotificationToDevicesSignalErrorFull() instead")
    void publishPushNotificationToDevicesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void publishPushNotificationToDevicesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use putPushDeviceDetailsSignalErrorFull() instead")
    void putPushDeviceDetailsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void putPushDeviceDetailsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use registerPushDeviceSignalErrorFull() instead")
    void registerPushDeviceSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void registerPushDeviceSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use subscribePushDeviceToChannelSignalErrorFull() instead")
    void subscribePushDeviceToChannelSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void subscribePushDeviceToChannelSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use unregisterAllPushDevicesSignalErrorFull() instead")
    void unregisterAllPushDevicesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void unregisterAllPushDevicesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use unregisterPushDeviceSignalErrorFull() instead")
    void unregisterPushDeviceSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void unregisterPushDeviceSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updatePushDeviceDetailsSignalErrorFull() instead")
    void updatePushDeviceDetailsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updatePushDeviceDetailsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
