/**
 * Platform API
 * The [REST API specification](https://www.ably.io/documentation/rest-api) for Ably.
 *
 * The version of the OpenAPI document: 1.1.0
 * Contact: support@ably.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The Recipient model module.
 * @module model/Recipient
 * @version 1.1.0
 */
class Recipient {
    /**
     * Constructs a new <code>Recipient</code>.
     * Push recipient details for a device.
     * @alias module:model/Recipient
     */
    constructor() { 
        
        Recipient.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>Recipient</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Recipient} obj Optional instance to populate.
     * @return {module:model/Recipient} The populated <code>Recipient</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Recipient();

            if (data.hasOwnProperty('clientId')) {
                obj['clientId'] = ApiClient.convertToType(data['clientId'], 'String');
            }
            if (data.hasOwnProperty('deviceId')) {
                obj['deviceId'] = ApiClient.convertToType(data['deviceId'], 'String');
            }
            if (data.hasOwnProperty('deviceToken')) {
                obj['deviceToken'] = ApiClient.convertToType(data['deviceToken'], 'String');
            }
            if (data.hasOwnProperty('registrationToken')) {
                obj['registrationToken'] = ApiClient.convertToType(data['registrationToken'], 'String');
            }
            if (data.hasOwnProperty('transportType')) {
                obj['transportType'] = ApiClient.convertToType(data['transportType'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Recipient</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Recipient</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['clientId'] && !(typeof data['clientId'] === 'string' || data['clientId'] instanceof String)) {
            throw new Error("Expected the field `clientId` to be a primitive type in the JSON string but got " + data['clientId']);
        }
        // ensure the json data is a string
        if (data['deviceId'] && !(typeof data['deviceId'] === 'string' || data['deviceId'] instanceof String)) {
            throw new Error("Expected the field `deviceId` to be a primitive type in the JSON string but got " + data['deviceId']);
        }
        // ensure the json data is a string
        if (data['deviceToken'] && !(typeof data['deviceToken'] === 'string' || data['deviceToken'] instanceof String)) {
            throw new Error("Expected the field `deviceToken` to be a primitive type in the JSON string but got " + data['deviceToken']);
        }
        // ensure the json data is a string
        if (data['registrationToken'] && !(typeof data['registrationToken'] === 'string' || data['registrationToken'] instanceof String)) {
            throw new Error("Expected the field `registrationToken` to be a primitive type in the JSON string but got " + data['registrationToken']);
        }
        // ensure the json data is a string
        if (data['transportType'] && !(typeof data['transportType'] === 'string' || data['transportType'] instanceof String)) {
            throw new Error("Expected the field `transportType` to be a primitive type in the JSON string but got " + data['transportType']);
        }

        return true;
    }


}



/**
 * Client ID of recipient
 * @member {String} clientId
 */
Recipient.prototype['clientId'] = undefined;

/**
 * Client ID of recipient
 * @member {String} deviceId
 */
Recipient.prototype['deviceId'] = undefined;

/**
 * when using APNs, specifies the required device token.
 * @member {String} deviceToken
 */
Recipient.prototype['deviceToken'] = undefined;

/**
 * when using GCM or FCM, specifies the required registration token.
 * @member {String} registrationToken
 */
Recipient.prototype['registrationToken'] = undefined;

/**
 * Defines which push platform is being used.
 * @member {module:model/Recipient.TransportTypeEnum} transportType
 */
Recipient.prototype['transportType'] = undefined;





/**
 * Allowed values for the <code>transportType</code> property.
 * @enum {String}
 * @readonly
 */
Recipient['TransportTypeEnum'] = {

    /**
     * value: "apns"
     * @const
     */
    "apns": "apns",

    /**
     * value: "fcm"
     * @const
     */
    "fcm": "fcm",

    /**
     * value: "gcm"
     * @const
     */
    "gcm": "gcm"
};



export default Recipient;

