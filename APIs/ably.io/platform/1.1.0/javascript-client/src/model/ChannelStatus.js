/**
 * Platform API
 * The [REST API specification](https://www.ably.io/documentation/rest-api) for Ably.
 *
 * The version of the OpenAPI document: 1.1.0
 * Contact: support@ably.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Occupancy from './Occupancy';

/**
 * The ChannelStatus model module.
 * @module model/ChannelStatus
 * @version 1.1.0
 */
class ChannelStatus {
    /**
     * Constructs a new <code>ChannelStatus</code>.
     * A ChannelStatus instance.
     * @alias module:model/ChannelStatus
     * @param isActive {Boolean} A required boolean value indicating whether the channel that is the subject of the event is active. For events indicating regional activity of a channel this indicates activity in that region, not global activity.
     */
    constructor(isActive) { 
        
        ChannelStatus.initialize(this, isActive);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, isActive) { 
        obj['isActive'] = isActive;
    }

    /**
     * Constructs a <code>ChannelStatus</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ChannelStatus} obj Optional instance to populate.
     * @return {module:model/ChannelStatus} The populated <code>ChannelStatus</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ChannelStatus();

            if (data.hasOwnProperty('isActive')) {
                obj['isActive'] = ApiClient.convertToType(data['isActive'], 'Boolean');
            }
            if (data.hasOwnProperty('occupancy')) {
                obj['occupancy'] = Occupancy.constructFromObject(data['occupancy']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ChannelStatus</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ChannelStatus</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of ChannelStatus.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // validate the optional field `occupancy`
        if (data['occupancy']) { // data not null
          Occupancy.validateJSON(data['occupancy']);
        }

        return true;
    }


}

ChannelStatus.RequiredProperties = ["isActive"];

/**
 * A required boolean value indicating whether the channel that is the subject of the event is active. For events indicating regional activity of a channel this indicates activity in that region, not global activity.
 * @member {Boolean} isActive
 */
ChannelStatus.prototype['isActive'] = undefined;

/**
 * @member {module:model/Occupancy} occupancy
 */
ChannelStatus.prototype['occupancy'] = undefined;






export default ChannelStatus;

