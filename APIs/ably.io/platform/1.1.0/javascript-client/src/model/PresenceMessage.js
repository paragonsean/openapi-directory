/**
 * Platform API
 * The [REST API specification](https://www.ably.io/documentation/rest-api) for Ably.
 *
 * The version of the OpenAPI document: 1.1.0
 * Contact: support@ably.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Extras from './Extras';

/**
 * The PresenceMessage model module.
 * @module model/PresenceMessage
 * @version 1.1.0
 */
class PresenceMessage {
    /**
     * Constructs a new <code>PresenceMessage</code>.
     * @alias module:model/PresenceMessage
     */
    constructor() { 
        
        PresenceMessage.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>PresenceMessage</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/PresenceMessage} obj Optional instance to populate.
     * @return {module:model/PresenceMessage} The populated <code>PresenceMessage</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new PresenceMessage();

            if (data.hasOwnProperty('action')) {
                obj['action'] = ApiClient.convertToType(data['action'], 'String');
            }
            if (data.hasOwnProperty('clientId')) {
                obj['clientId'] = ApiClient.convertToType(data['clientId'], 'String');
            }
            if (data.hasOwnProperty('connectionId')) {
                obj['connectionId'] = ApiClient.convertToType(data['connectionId'], 'String');
            }
            if (data.hasOwnProperty('data')) {
                obj['data'] = ApiClient.convertToType(data['data'], 'String');
            }
            if (data.hasOwnProperty('encoding')) {
                obj['encoding'] = ApiClient.convertToType(data['encoding'], 'String');
            }
            if (data.hasOwnProperty('extras')) {
                obj['extras'] = Extras.constructFromObject(data['extras']);
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('timestamp')) {
                obj['timestamp'] = ApiClient.convertToType(data['timestamp'], 'Number');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>PresenceMessage</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>PresenceMessage</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['action'] && !(typeof data['action'] === 'string' || data['action'] instanceof String)) {
            throw new Error("Expected the field `action` to be a primitive type in the JSON string but got " + data['action']);
        }
        // ensure the json data is a string
        if (data['clientId'] && !(typeof data['clientId'] === 'string' || data['clientId'] instanceof String)) {
            throw new Error("Expected the field `clientId` to be a primitive type in the JSON string but got " + data['clientId']);
        }
        // ensure the json data is a string
        if (data['connectionId'] && !(typeof data['connectionId'] === 'string' || data['connectionId'] instanceof String)) {
            throw new Error("Expected the field `connectionId` to be a primitive type in the JSON string but got " + data['connectionId']);
        }
        // ensure the json data is a string
        if (data['data'] && !(typeof data['data'] === 'string' || data['data'] instanceof String)) {
            throw new Error("Expected the field `data` to be a primitive type in the JSON string but got " + data['data']);
        }
        // ensure the json data is a string
        if (data['encoding'] && !(typeof data['encoding'] === 'string' || data['encoding'] instanceof String)) {
            throw new Error("Expected the field `encoding` to be a primitive type in the JSON string but got " + data['encoding']);
        }
        // validate the optional field `extras`
        if (data['extras']) { // data not null
          Extras.validateJSON(data['extras']);
        }
        // ensure the json data is a string
        if (data['id'] && !(typeof data['id'] === 'string' || data['id'] instanceof String)) {
            throw new Error("Expected the field `id` to be a primitive type in the JSON string but got " + data['id']);
        }

        return true;
    }


}



/**
 * The event signified by a PresenceMessage.
 * @member {module:model/PresenceMessage.ActionEnum} action
 */
PresenceMessage.prototype['action'] = undefined;

/**
 * The client ID of the publisher of this presence update.
 * @member {String} clientId
 */
PresenceMessage.prototype['clientId'] = undefined;

/**
 * The connection ID of the publisher of this presence update.
 * @member {String} connectionId
 */
PresenceMessage.prototype['connectionId'] = undefined;

/**
 * The presence update payload, if provided.
 * @member {String} data
 */
PresenceMessage.prototype['data'] = undefined;

/**
 * This will typically be empty as all presence updates received from Ably are automatically decoded client-side using this value. However, if the message encoding cannot be processed, this attribute will contain the remaining transformations not applied to the data payload.
 * @member {String} encoding
 */
PresenceMessage.prototype['encoding'] = undefined;

/**
 * @member {module:model/Extras} extras
 */
PresenceMessage.prototype['extras'] = undefined;

/**
 * Unique ID assigned by Ably to this presence update.
 * @member {String} id
 */
PresenceMessage.prototype['id'] = undefined;

/**
 * Timestamp when the presence update was received by Ably, as milliseconds since the epoch.
 * @member {Number} timestamp
 */
PresenceMessage.prototype['timestamp'] = undefined;





/**
 * Allowed values for the <code>action</code> property.
 * @enum {String}
 * @readonly
 */
PresenceMessage['ActionEnum'] = {

    /**
     * value: "ABSENT"
     * @const
     */
    "ABSENT": "ABSENT",

    /**
     * value: "PRESENT"
     * @const
     */
    "PRESENT": "PRESENT",

    /**
     * value: "ENTER"
     * @const
     */
    "ENTER": "ENTER",

    /**
     * value: "LEAVE"
     * @const
     */
    "LEAVE": "LEAVE",

    /**
     * value: "UPDATE"
     * @const
     */
    "UPDATE": "UPDATE"
};



export default PresenceMessage;

