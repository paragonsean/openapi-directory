/**
 * Platform API
 * The [REST API specification](https://www.ably.io/documentation/rest-api) for Ably.
 *
 * The version of the OpenAPI document: 1.1.0
 * Contact: support@ably.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Recipient from './Recipient';

/**
 * The DeviceDetails model module.
 * @module model/DeviceDetails
 * @version 1.1.0
 */
class DeviceDetails {
    /**
     * Constructs a new <code>DeviceDetails</code>.
     * @alias module:model/DeviceDetails
     */
    constructor() { 
        
        DeviceDetails.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>DeviceDetails</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/DeviceDetails} obj Optional instance to populate.
     * @return {module:model/DeviceDetails} The populated <code>DeviceDetails</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new DeviceDetails();

            if (data.hasOwnProperty('clientId')) {
                obj['clientId'] = ApiClient.convertToType(data['clientId'], 'String');
            }
            if (data.hasOwnProperty('deviceSecret')) {
                obj['deviceSecret'] = ApiClient.convertToType(data['deviceSecret'], 'String');
            }
            if (data.hasOwnProperty('formFactor')) {
                obj['formFactor'] = ApiClient.convertToType(data['formFactor'], 'String');
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('metadata')) {
                obj['metadata'] = ApiClient.convertToType(data['metadata'], Object);
            }
            if (data.hasOwnProperty('platform')) {
                obj['platform'] = ApiClient.convertToType(data['platform'], 'String');
            }
            if (data.hasOwnProperty('push.recipient')) {
                obj['push.recipient'] = Recipient.constructFromObject(data['push.recipient']);
            }
            if (data.hasOwnProperty('push.state')) {
                obj['push.state'] = ApiClient.convertToType(data['push.state'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>DeviceDetails</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>DeviceDetails</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['clientId'] && !(typeof data['clientId'] === 'string' || data['clientId'] instanceof String)) {
            throw new Error("Expected the field `clientId` to be a primitive type in the JSON string but got " + data['clientId']);
        }
        // ensure the json data is a string
        if (data['deviceSecret'] && !(typeof data['deviceSecret'] === 'string' || data['deviceSecret'] instanceof String)) {
            throw new Error("Expected the field `deviceSecret` to be a primitive type in the JSON string but got " + data['deviceSecret']);
        }
        // ensure the json data is a string
        if (data['formFactor'] && !(typeof data['formFactor'] === 'string' || data['formFactor'] instanceof String)) {
            throw new Error("Expected the field `formFactor` to be a primitive type in the JSON string but got " + data['formFactor']);
        }
        // ensure the json data is a string
        if (data['id'] && !(typeof data['id'] === 'string' || data['id'] instanceof String)) {
            throw new Error("Expected the field `id` to be a primitive type in the JSON string but got " + data['id']);
        }
        // ensure the json data is a string
        if (data['platform'] && !(typeof data['platform'] === 'string' || data['platform'] instanceof String)) {
            throw new Error("Expected the field `platform` to be a primitive type in the JSON string but got " + data['platform']);
        }
        // validate the optional field `push.recipient`
        if (data['push.recipient']) { // data not null
          Recipient.validateJSON(data['push.recipient']);
        }
        // ensure the json data is a string
        if (data['push.state'] && !(typeof data['push.state'] === 'string' || data['push.state'] instanceof String)) {
            throw new Error("Expected the field `push.state` to be a primitive type in the JSON string but got " + data['push.state']);
        }

        return true;
    }


}



/**
 * Optional trusted client identifier for the device.
 * @member {String} clientId
 */
DeviceDetails.prototype['clientId'] = undefined;

/**
 * Secret value for the device.
 * @member {String} deviceSecret
 */
DeviceDetails.prototype['deviceSecret'] = undefined;

/**
 * Form factor of the push device.
 * @member {module:model/DeviceDetails.FormFactorEnum} formFactor
 */
DeviceDetails.prototype['formFactor'] = undefined;

/**
 * Unique identifier for the device generated by the device itself.
 * @member {String} id
 */
DeviceDetails.prototype['id'] = undefined;

/**
 * Optional metadata object for this device. The metadata for a device may only be set by clients with push-admin privileges and will be used more extensively in the future with smart notifications.
 * @member {Object} metadata
 */
DeviceDetails.prototype['metadata'] = undefined;

/**
 * Platform of the push device.
 * @member {module:model/DeviceDetails.PlatformEnum} platform
 */
DeviceDetails.prototype['platform'] = undefined;

/**
 * @member {module:model/Recipient} push.recipient
 */
DeviceDetails.prototype['push.recipient'] = undefined;

/**
 * the current state of the push device.
 * @member {module:model/DeviceDetails.PushStateEnum} push.state
 */
DeviceDetails.prototype['push.state'] = undefined;





/**
 * Allowed values for the <code>formFactor</code> property.
 * @enum {String}
 * @readonly
 */
DeviceDetails['FormFactorEnum'] = {

    /**
     * value: "phone"
     * @const
     */
    "phone": "phone",

    /**
     * value: "tablet"
     * @const
     */
    "tablet": "tablet",

    /**
     * value: "desktop"
     * @const
     */
    "desktop": "desktop",

    /**
     * value: "tv"
     * @const
     */
    "tv": "tv",

    /**
     * value: "watch"
     * @const
     */
    "watch": "watch",

    /**
     * value: "car"
     * @const
     */
    "car": "car",

    /**
     * value: "embedded"
     * @const
     */
    "embedded": "embedded"
};


/**
 * Allowed values for the <code>platform</code> property.
 * @enum {String}
 * @readonly
 */
DeviceDetails['PlatformEnum'] = {

    /**
     * value: "ios"
     * @const
     */
    "ios": "ios",

    /**
     * value: "android"
     * @const
     */
    "android": "android"
};


/**
 * Allowed values for the <code>push.state</code> property.
 * @enum {String}
 * @readonly
 */
DeviceDetails['PushStateEnum'] = {

    /**
     * value: "Active"
     * @const
     */
    "Active": "Active",

    /**
     * value: "Failing"
     * @const
     */
    "Failing": "Failing",

    /**
     * value: "Failed"
     * @const
     */
    "Failed": "Failed"
};



export default DeviceDetails;

