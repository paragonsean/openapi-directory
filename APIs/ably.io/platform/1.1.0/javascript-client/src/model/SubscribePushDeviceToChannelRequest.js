/**
 * Platform API
 * The [REST API specification](https://www.ably.io/documentation/rest-api) for Ably.
 *
 * The version of the OpenAPI document: 1.1.0
 * Contact: support@ably.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import SubscribePushDeviceToChannelRequestOneOf from './SubscribePushDeviceToChannelRequestOneOf';
import SubscribePushDeviceToChannelRequestOneOf1 from './SubscribePushDeviceToChannelRequestOneOf1';

/**
 * The SubscribePushDeviceToChannelRequest model module.
 * @module model/SubscribePushDeviceToChannelRequest
 * @version 1.1.0
 */
class SubscribePushDeviceToChannelRequest {
    /**
     * Constructs a new <code>SubscribePushDeviceToChannelRequest</code>.
     * @alias module:model/SubscribePushDeviceToChannelRequest
     * @param {(module:model/SubscribePushDeviceToChannelRequestOneOf|module:model/SubscribePushDeviceToChannelRequestOneOf1)} instance The actual instance to initialize SubscribePushDeviceToChannelRequest.
     */
    constructor(instance = null) {
        if (instance === null) {
            this.actualInstance = null;
            return;
        }
        var match = 0;
        var errorMessages = [];
        try {
            if (typeof instance === "SubscribePushDeviceToChannelRequestOneOf") {
                this.actualInstance = instance;
            } else {
                // plain JS object
                // validate the object
                SubscribePushDeviceToChannelRequestOneOf.validateJSON(instance); // throw an exception if no match
                // create SubscribePushDeviceToChannelRequestOneOf from JS object
                this.actualInstance = SubscribePushDeviceToChannelRequestOneOf.constructFromObject(instance);
            }
            match++;
        } catch(err) {
            // json data failed to deserialize into SubscribePushDeviceToChannelRequestOneOf
            errorMessages.push("Failed to construct SubscribePushDeviceToChannelRequestOneOf: " + err)
        }

        try {
            if (typeof instance === "SubscribePushDeviceToChannelRequestOneOf1") {
                this.actualInstance = instance;
            } else {
                // plain JS object
                // validate the object
                SubscribePushDeviceToChannelRequestOneOf1.validateJSON(instance); // throw an exception if no match
                // create SubscribePushDeviceToChannelRequestOneOf1 from JS object
                this.actualInstance = SubscribePushDeviceToChannelRequestOneOf1.constructFromObject(instance);
            }
            match++;
        } catch(err) {
            // json data failed to deserialize into SubscribePushDeviceToChannelRequestOneOf1
            errorMessages.push("Failed to construct SubscribePushDeviceToChannelRequestOneOf1: " + err)
        }

        if (match > 1) {
            throw new Error("Multiple matches found constructing `SubscribePushDeviceToChannelRequest` with oneOf schemas SubscribePushDeviceToChannelRequestOneOf, SubscribePushDeviceToChannelRequestOneOf1. Input: " + JSON.stringify(instance));
        } else if (match === 0) {
            this.actualInstance = null; // clear the actual instance in case there are multiple matches
            throw new Error("No match found constructing `SubscribePushDeviceToChannelRequest` with oneOf schemas SubscribePushDeviceToChannelRequestOneOf, SubscribePushDeviceToChannelRequestOneOf1. Details: " +
                            errorMessages.join(", "));
        } else { // only 1 match
            // the input is valid
        }
    }

    /**
     * Constructs a <code>SubscribePushDeviceToChannelRequest</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/SubscribePushDeviceToChannelRequest} obj Optional instance to populate.
     * @return {module:model/SubscribePushDeviceToChannelRequest} The populated <code>SubscribePushDeviceToChannelRequest</code> instance.
     */
    static constructFromObject(data, obj) {
        return new SubscribePushDeviceToChannelRequest(data);
    }

    /**
     * Gets the actual instance, which can be <code>SubscribePushDeviceToChannelRequestOneOf</code>, <code>SubscribePushDeviceToChannelRequestOneOf1</code>.
     * @return {(module:model/SubscribePushDeviceToChannelRequestOneOf|module:model/SubscribePushDeviceToChannelRequestOneOf1)} The actual instance.
     */
    getActualInstance() {
        return this.actualInstance;
    }

    /**
     * Sets the actual instance, which can be <code>SubscribePushDeviceToChannelRequestOneOf</code>, <code>SubscribePushDeviceToChannelRequestOneOf1</code>.
     * @param {(module:model/SubscribePushDeviceToChannelRequestOneOf|module:model/SubscribePushDeviceToChannelRequestOneOf1)} obj The actual instance.
     */
    setActualInstance(obj) {
       this.actualInstance = SubscribePushDeviceToChannelRequest.constructFromObject(obj).getActualInstance();
    }

    /**
     * Returns the JSON representation of the actual instance.
     * @return {string}
     */
    toJSON = function(){
        return this.getActualInstance();
    }

    /**
     * Create an instance of SubscribePushDeviceToChannelRequest from a JSON string.
     * @param {string} json_string JSON string.
     * @return {module:model/SubscribePushDeviceToChannelRequest} An instance of SubscribePushDeviceToChannelRequest.
     */
    static fromJSON = function(json_string){
        return SubscribePushDeviceToChannelRequest.constructFromObject(JSON.parse(json_string));
    }
}

/**
 * Channel name.
 * @member {String} channel
 */
SubscribePushDeviceToChannelRequest.prototype['channel'] = undefined;

/**
 * Must be set when clientId is empty, cannot be used with clientId.
 * @member {String} deviceId
 */
SubscribePushDeviceToChannelRequest.prototype['deviceId'] = undefined;

/**
 * Must be set when deviceId is empty, cannot be used with deviceId.
 * @member {String} clientId
 */
SubscribePushDeviceToChannelRequest.prototype['clientId'] = undefined;


SubscribePushDeviceToChannelRequest.OneOf = ["SubscribePushDeviceToChannelRequestOneOf", "SubscribePushDeviceToChannelRequestOneOf1"];

export default SubscribePushDeviceToChannelRequest;

