/**
 * Platform API
 * The [REST API specification](https://www.ably.io/documentation/rest-api) for Ably.
 *
 * The version of the OpenAPI document: 1.1.0
 * Contact: support@ably.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The TokenRequest model module.
 * @module model/TokenRequest
 * @version 1.1.0
 */
class TokenRequest {
    /**
     * Constructs a new <code>TokenRequest</code>.
     * @alias module:model/TokenRequest
     * @param capability {Object} The [capabilities](https://www.ably.io/documentation/core-features/authentication#capabilities-explained) (i.e. a set of channel names/namespaces and, for each, a set of operations) which should be a subset of the set of capabilities associated with the key specified in keyName.
     * @param keyName {String} Name of the key used for the TokenRequest. The keyName comprises of the app ID and key ID on an API Key.
     * @param nonce {String} An unquoted, un-escaped random string of at least 16 characters. Used to ensure the Ably TokenRequest cannot be reused.
     * @param timestamp {Number} Time of creation of the Ably TokenRequest.
     */
    constructor(capability, keyName, nonce, timestamp) { 
        
        TokenRequest.initialize(this, capability, keyName, nonce, timestamp);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, capability, keyName, nonce, timestamp) { 
        obj['capability'] = capability;
        obj['keyName'] = keyName;
        obj['nonce'] = nonce;
        obj['timestamp'] = timestamp;
    }

    /**
     * Constructs a <code>TokenRequest</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/TokenRequest} obj Optional instance to populate.
     * @return {module:model/TokenRequest} The populated <code>TokenRequest</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new TokenRequest();

            if (data.hasOwnProperty('capability')) {
                obj['capability'] = ApiClient.convertToType(data['capability'], Object);
            }
            if (data.hasOwnProperty('clientId')) {
                obj['clientId'] = ApiClient.convertToType(data['clientId'], 'String');
            }
            if (data.hasOwnProperty('keyName')) {
                obj['keyName'] = ApiClient.convertToType(data['keyName'], 'String');
            }
            if (data.hasOwnProperty('nonce')) {
                obj['nonce'] = ApiClient.convertToType(data['nonce'], 'String');
            }
            if (data.hasOwnProperty('timestamp')) {
                obj['timestamp'] = ApiClient.convertToType(data['timestamp'], 'Number');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>TokenRequest</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>TokenRequest</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of TokenRequest.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['clientId'] && !(typeof data['clientId'] === 'string' || data['clientId'] instanceof String)) {
            throw new Error("Expected the field `clientId` to be a primitive type in the JSON string but got " + data['clientId']);
        }
        // ensure the json data is a string
        if (data['keyName'] && !(typeof data['keyName'] === 'string' || data['keyName'] instanceof String)) {
            throw new Error("Expected the field `keyName` to be a primitive type in the JSON string but got " + data['keyName']);
        }
        // ensure the json data is a string
        if (data['nonce'] && !(typeof data['nonce'] === 'string' || data['nonce'] instanceof String)) {
            throw new Error("Expected the field `nonce` to be a primitive type in the JSON string but got " + data['nonce']);
        }

        return true;
    }


}

TokenRequest.RequiredProperties = ["capability", "keyName", "nonce", "timestamp"];

/**
 * The [capabilities](https://www.ably.io/documentation/core-features/authentication#capabilities-explained) (i.e. a set of channel names/namespaces and, for each, a set of operations) which should be a subset of the set of capabilities associated with the key specified in keyName.
 * @member {Object} capability
 */
TokenRequest.prototype['capability'] = undefined;

/**
 * The [client ID](https://www.ably.io/documentation/core-features/authentication#identified-clients) to be assosciated with the token. Can be set to * to allow for any client ID to be used.
 * @member {String} clientId
 */
TokenRequest.prototype['clientId'] = undefined;

/**
 * Name of the key used for the TokenRequest. The keyName comprises of the app ID and key ID on an API Key.
 * @member {String} keyName
 */
TokenRequest.prototype['keyName'] = undefined;

/**
 * An unquoted, un-escaped random string of at least 16 characters. Used to ensure the Ably TokenRequest cannot be reused.
 * @member {String} nonce
 */
TokenRequest.prototype['nonce'] = undefined;

/**
 * Time of creation of the Ably TokenRequest.
 * @member {Number} timestamp
 */
TokenRequest.prototype['timestamp'] = undefined;






export default TokenRequest;

