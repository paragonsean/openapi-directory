/**
 * Platform API
 * The [REST API specification](https://www.ably.io/documentation/rest-api) for Ably.
 *
 * The version of the OpenAPI document: 1.1.0
 * Contact: support@ably.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import DeviceDetails from '../model/DeviceDetails';
import Error from '../model/Error';
import PublishPushNotificationToDevicesRequest from '../model/PublishPushNotificationToDevicesRequest';
import SubscribePushDeviceToChannelRequest from '../model/SubscribePushDeviceToChannelRequest';

/**
* Push service.
* @module api/PushApi
* @version 1.1.0
*/
export default class PushApi {

    /**
    * Constructs a new PushApi. 
    * @alias module:api/PushApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the deletePushDeviceDetails operation.
     * @callback module:api/PushApi~deletePushDeviceDetailsCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a registered device's update token
     * Delete a device details object.
     * @param {Object} opts Optional parameters
     * @param {String} [xAblyVersion] The version of the API you wish to use.
     * @param {module:model/String} [format] The response format you would like
     * @param {String} [channel] Filter to restrict to subscriptions associated with that channel.
     * @param {String} [deviceId] Must be set when clientId is empty, cannot be used with clientId.
     * @param {String} [clientId] Must be set when deviceId is empty, cannot be used with deviceId.
     * @param {module:api/PushApi~deletePushDeviceDetailsCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deletePushDeviceDetails(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'format': opts['format'],
        'channel': opts['channel'],
        'deviceId': opts['deviceId'],
        'clientId': opts['clientId']
      };
      let headerParams = {
        'X-Ably-Version': opts['xAblyVersion']
      };
      let formParams = {
      };

      let authNames = ['basicAuth', 'bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json', 'application/x-msgpack', 'text/html'];
      let returnType = null;
      return this.apiClient.callApi(
        '/push/channelSubscriptions', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getChannelsWithPushSubscribers operation.
     * @callback module:api/PushApi~getChannelsWithPushSubscribersCallback
     * @param {String} error Error message, if any.
     * @param {Array.<String>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List all channels with at least one subscribed device
     * Returns a paginated response of channel names.
     * @param {Object} opts Optional parameters
     * @param {String} [xAblyVersion] The version of the API you wish to use.
     * @param {module:model/String} [format] The response format you would like
     * @param {module:api/PushApi~getChannelsWithPushSubscribersCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<String>}
     */
    getChannelsWithPushSubscribers(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'format': opts['format']
      };
      let headerParams = {
        'X-Ably-Version': opts['xAblyVersion']
      };
      let formParams = {
      };

      let authNames = ['basicAuth', 'bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json', 'application/x-msgpack', 'text/html'];
      let returnType = ['String'];
      return this.apiClient.callApi(
        '/push/channels', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getPushDeviceDetails operation.
     * @callback module:api/PushApi~getPushDeviceDetailsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DeviceDetails} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a device registration
     * Get the full details of a device.
     * @param {String} deviceId Device's ID.
     * @param {Object} opts Optional parameters
     * @param {String} [xAblyVersion] The version of the API you wish to use.
     * @param {module:model/String} [format] The response format you would like
     * @param {module:api/PushApi~getPushDeviceDetailsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DeviceDetails}
     */
    getPushDeviceDetails(deviceId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'deviceId' is set
      if (deviceId === undefined || deviceId === null) {
        throw new Error("Missing the required parameter 'deviceId' when calling getPushDeviceDetails");
      }

      let pathParams = {
        'device_id': deviceId
      };
      let queryParams = {
        'format': opts['format']
      };
      let headerParams = {
        'X-Ably-Version': opts['xAblyVersion']
      };
      let formParams = {
      };

      let authNames = ['basicAuth', 'bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json', 'application/x-msgpack', 'text/html'];
      let returnType = DeviceDetails;
      return this.apiClient.callApi(
        '/push/deviceRegistrations/{device_id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getPushSubscriptionsOnChannels operation.
     * @callback module:api/PushApi~getPushSubscriptionsOnChannelsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DeviceDetails} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List channel subscriptions
     * Get a list of push notification subscriptions to channels.
     * @param {Object} opts Optional parameters
     * @param {String} [xAblyVersion] The version of the API you wish to use.
     * @param {module:model/String} [format] The response format you would like
     * @param {String} [channel] Filter to restrict to subscriptions associated with that channel.
     * @param {String} [deviceId] Optional filter to restrict to devices associated with that deviceId. Cannot be used with clientId.
     * @param {String} [clientId] Optional filter to restrict to devices associated with that clientId. Cannot be used with deviceId.
     * @param {Number} [limit = 100)] The maximum number of records to return.
     * @param {module:api/PushApi~getPushSubscriptionsOnChannelsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DeviceDetails}
     */
    getPushSubscriptionsOnChannels(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'format': opts['format'],
        'channel': opts['channel'],
        'deviceId': opts['deviceId'],
        'clientId': opts['clientId'],
        'limit': opts['limit']
      };
      let headerParams = {
        'X-Ably-Version': opts['xAblyVersion']
      };
      let formParams = {
      };

      let authNames = ['basicAuth', 'bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json', 'application/x-msgpack', 'text/html'];
      let returnType = DeviceDetails;
      return this.apiClient.callApi(
        '/push/channelSubscriptions', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getRegisteredPushDevices operation.
     * @callback module:api/PushApi~getRegisteredPushDevicesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DeviceDetails} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List devices registered for receiving push notifications
     * List of device details of devices registed for push notifications.
     * @param {Object} opts Optional parameters
     * @param {String} [xAblyVersion] The version of the API you wish to use.
     * @param {module:model/String} [format] The response format you would like
     * @param {String} [deviceId] Optional filter to restrict to devices associated with that deviceId.
     * @param {String} [clientId] Optional filter to restrict to devices associated with that clientId.
     * @param {Number} [limit = 100)] The maximum number of records to return.
     * @param {module:api/PushApi~getRegisteredPushDevicesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DeviceDetails}
     */
    getRegisteredPushDevices(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'format': opts['format'],
        'deviceId': opts['deviceId'],
        'clientId': opts['clientId'],
        'limit': opts['limit']
      };
      let headerParams = {
        'X-Ably-Version': opts['xAblyVersion']
      };
      let formParams = {
      };

      let authNames = ['basicAuth', 'bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json', 'application/x-msgpack', 'text/html'];
      let returnType = DeviceDetails;
      return this.apiClient.callApi(
        '/push/deviceRegistrations', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the patchPushDeviceDetails operation.
     * @callback module:api/PushApi~patchPushDeviceDetailsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DeviceDetails} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update a device registration
     * Specific attributes of an existing registration can be updated. Only clientId, metadata and push.recipient are mutable.
     * @param {String} deviceId Device's ID.
     * @param {Object} opts Optional parameters
     * @param {String} [xAblyVersion] The version of the API you wish to use.
     * @param {module:model/String} [format] The response format you would like
     * @param {module:model/DeviceDetails} [deviceDetails] 
     * @param {module:api/PushApi~patchPushDeviceDetailsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DeviceDetails}
     */
    patchPushDeviceDetails(deviceId, opts, callback) {
      opts = opts || {};
      let postBody = opts['deviceDetails'];
      // verify the required parameter 'deviceId' is set
      if (deviceId === undefined || deviceId === null) {
        throw new Error("Missing the required parameter 'deviceId' when calling patchPushDeviceDetails");
      }

      let pathParams = {
        'device_id': deviceId
      };
      let queryParams = {
        'format': opts['format']
      };
      let headerParams = {
        'X-Ably-Version': opts['xAblyVersion']
      };
      let formParams = {
      };

      let authNames = ['basicAuth', 'bearerAuth'];
      let contentTypes = ['application/json', 'application/x-msgpack', 'application/x-www-form-urlencoded'];
      let accepts = ['application/json', 'application/x-msgpack', 'text/html'];
      let returnType = DeviceDetails;
      return this.apiClient.callApi(
        '/push/deviceRegistrations/{device_id}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the publishPushNotificationToDevices operation.
     * @callback module:api/PushApi~publishPushNotificationToDevicesCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Publish a push notification to device(s)
     * A convenience endpoint to deliver a push notification payload to a single device or set of devices identified by their client identifier.
     * @param {Object} opts Optional parameters
     * @param {String} [xAblyVersion] The version of the API you wish to use.
     * @param {module:model/String} [format] The response format you would like
     * @param {module:model/PublishPushNotificationToDevicesRequest} [publishPushNotificationToDevicesRequest] 
     * @param {module:api/PushApi~publishPushNotificationToDevicesCallback} callback The callback function, accepting three arguments: error, data, response
     */
    publishPushNotificationToDevices(opts, callback) {
      opts = opts || {};
      let postBody = opts['publishPushNotificationToDevicesRequest'];

      let pathParams = {
      };
      let queryParams = {
        'format': opts['format']
      };
      let headerParams = {
        'X-Ably-Version': opts['xAblyVersion']
      };
      let formParams = {
      };

      let authNames = ['basicAuth', 'bearerAuth'];
      let contentTypes = ['application/json', 'application/x-msgpack', 'application/x-www-form-urlencoded'];
      let accepts = ['application/json', 'application/x-msgpack', 'text/html'];
      let returnType = null;
      return this.apiClient.callApi(
        '/push/publish', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the putPushDeviceDetails operation.
     * @callback module:api/PushApi~putPushDeviceDetailsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DeviceDetails} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update a device registration
     * Device registrations can be upserted (the existing registration is replaced entirely) with a PUT operation. Only clientId, metadata and push.recipient are mutable.
     * @param {String} deviceId Device's ID.
     * @param {Object} opts Optional parameters
     * @param {String} [xAblyVersion] The version of the API you wish to use.
     * @param {module:model/String} [format] The response format you would like
     * @param {module:model/DeviceDetails} [deviceDetails] 
     * @param {module:api/PushApi~putPushDeviceDetailsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DeviceDetails}
     */
    putPushDeviceDetails(deviceId, opts, callback) {
      opts = opts || {};
      let postBody = opts['deviceDetails'];
      // verify the required parameter 'deviceId' is set
      if (deviceId === undefined || deviceId === null) {
        throw new Error("Missing the required parameter 'deviceId' when calling putPushDeviceDetails");
      }

      let pathParams = {
        'device_id': deviceId
      };
      let queryParams = {
        'format': opts['format']
      };
      let headerParams = {
        'X-Ably-Version': opts['xAblyVersion']
      };
      let formParams = {
      };

      let authNames = ['basicAuth', 'bearerAuth'];
      let contentTypes = ['application/json', 'application/x-msgpack', 'application/x-www-form-urlencoded'];
      let accepts = ['application/json', 'application/x-msgpack', 'text/html'];
      let returnType = DeviceDetails;
      return this.apiClient.callApi(
        '/push/deviceRegistrations/{device_id}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the registerPushDevice operation.
     * @callback module:api/PushApi~registerPushDeviceCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DeviceDetails} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Register a device for receiving push notifications
     * Register a device’s details, including the information necessary to deliver push notifications to it. Requires \"push-admin\" capability.
     * @param {Object} opts Optional parameters
     * @param {String} [xAblyVersion] The version of the API you wish to use.
     * @param {module:model/String} [format] The response format you would like
     * @param {module:model/DeviceDetails} [deviceDetails] 
     * @param {module:api/PushApi~registerPushDeviceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DeviceDetails}
     */
    registerPushDevice(opts, callback) {
      opts = opts || {};
      let postBody = opts['deviceDetails'];

      let pathParams = {
      };
      let queryParams = {
        'format': opts['format']
      };
      let headerParams = {
        'X-Ably-Version': opts['xAblyVersion']
      };
      let formParams = {
      };

      let authNames = ['basicAuth', 'bearerAuth'];
      let contentTypes = ['application/json', 'application/x-msgpack'];
      let accepts = ['application/json', 'application/x-msgpack', 'text/html'];
      let returnType = DeviceDetails;
      return this.apiClient.callApi(
        '/push/deviceRegistrations', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the subscribePushDeviceToChannel operation.
     * @callback module:api/PushApi~subscribePushDeviceToChannelCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Subscribe a device to a channel
     * Subscribe either a single device or all devices associated with a client ID to receive push notifications from messages sent to a channel.
     * @param {Object} opts Optional parameters
     * @param {String} [xAblyVersion] The version of the API you wish to use.
     * @param {module:model/String} [format] The response format you would like
     * @param {module:model/SubscribePushDeviceToChannelRequest} [subscribePushDeviceToChannelRequest] 
     * @param {module:api/PushApi~subscribePushDeviceToChannelCallback} callback The callback function, accepting three arguments: error, data, response
     */
    subscribePushDeviceToChannel(opts, callback) {
      opts = opts || {};
      let postBody = opts['subscribePushDeviceToChannelRequest'];

      let pathParams = {
      };
      let queryParams = {
        'format': opts['format']
      };
      let headerParams = {
        'X-Ably-Version': opts['xAblyVersion']
      };
      let formParams = {
      };

      let authNames = ['basicAuth', 'bearerAuth'];
      let contentTypes = ['application/json', 'application/x-msgpack', 'application/x-www-form-urlencoded'];
      let accepts = ['application/json', 'application/x-msgpack', 'text/html'];
      let returnType = null;
      return this.apiClient.callApi(
        '/push/channelSubscriptions', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the unregisterAllPushDevices operation.
     * @callback module:api/PushApi~unregisterAllPushDevicesCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Unregister matching devices for push notifications
     * Unregisters devices. All their subscriptions for receiving push notifications through channels will also be deleted.
     * @param {Object} opts Optional parameters
     * @param {String} [xAblyVersion] The version of the API you wish to use.
     * @param {module:model/String} [format] The response format you would like
     * @param {String} [deviceId] Optional filter to restrict to devices associated with that deviceId. Cannot be used with clientId.
     * @param {String} [clientId] Optional filter to restrict to devices associated with that clientId. Cannot be used with deviceId.
     * @param {module:api/PushApi~unregisterAllPushDevicesCallback} callback The callback function, accepting three arguments: error, data, response
     */
    unregisterAllPushDevices(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'format': opts['format'],
        'deviceId': opts['deviceId'],
        'clientId': opts['clientId']
      };
      let headerParams = {
        'X-Ably-Version': opts['xAblyVersion']
      };
      let formParams = {
      };

      let authNames = ['basicAuth', 'bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json', 'application/x-msgpack', 'text/html'];
      let returnType = null;
      return this.apiClient.callApi(
        '/push/deviceRegistrations', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the unregisterPushDevice operation.
     * @callback module:api/PushApi~unregisterPushDeviceCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Unregister a single device for push notifications
     * Unregisters a single device by its device ID. All its subscriptions for receiving push notifications through channels will also be deleted.
     * @param {String} deviceId Device's ID.
     * @param {Object} opts Optional parameters
     * @param {String} [xAblyVersion] The version of the API you wish to use.
     * @param {module:model/String} [format] The response format you would like
     * @param {module:api/PushApi~unregisterPushDeviceCallback} callback The callback function, accepting three arguments: error, data, response
     */
    unregisterPushDevice(deviceId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'deviceId' is set
      if (deviceId === undefined || deviceId === null) {
        throw new Error("Missing the required parameter 'deviceId' when calling unregisterPushDevice");
      }

      let pathParams = {
        'device_id': deviceId
      };
      let queryParams = {
        'format': opts['format']
      };
      let headerParams = {
        'X-Ably-Version': opts['xAblyVersion']
      };
      let formParams = {
      };

      let authNames = ['basicAuth', 'bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json', 'application/x-msgpack', 'text/html'];
      let returnType = null;
      return this.apiClient.callApi(
        '/push/deviceRegistrations/{device_id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updatePushDeviceDetails operation.
     * @callback module:api/PushApi~updatePushDeviceDetailsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DeviceDetails} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Reset a registered device's update token
     * Gets an updated device details object.
     * @param {String} deviceId Device's ID.
     * @param {Object} opts Optional parameters
     * @param {String} [xAblyVersion] The version of the API you wish to use.
     * @param {module:model/String} [format] The response format you would like
     * @param {module:api/PushApi~updatePushDeviceDetailsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DeviceDetails}
     */
    updatePushDeviceDetails(deviceId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'deviceId' is set
      if (deviceId === undefined || deviceId === null) {
        throw new Error("Missing the required parameter 'deviceId' when calling updatePushDeviceDetails");
      }

      let pathParams = {
        'device_id': deviceId
      };
      let queryParams = {
        'format': opts['format']
      };
      let headerParams = {
        'X-Ably-Version': opts['xAblyVersion']
      };
      let formParams = {
      };

      let authNames = ['basicAuth', 'bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json', 'application/x-msgpack', 'text/html'];
      let returnType = DeviceDetails;
      return this.apiClient.callApi(
        '/push/deviceRegistrations/{device_id}/resetUpdateToken', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
