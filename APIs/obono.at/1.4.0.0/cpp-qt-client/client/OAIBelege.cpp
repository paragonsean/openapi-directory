/**
 * obono RKSV API
 * Provides a RESTful API for interacting with virtual cash registers and creating receipts that are conform with the Registrierkassensicherheitsverordnung (RKSV).  You may find our [automatically generated clients](./clients) for various programming languages and environments helpful... 
 *
 * The version of the OpenAPI document: 1.4.0.0
 * Contact: info@obono.at
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIBelege.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIBelege::OAIBelege(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIBelege::OAIBelege() {
    this->initializeModel();
}

OAIBelege::~OAIBelege() {}

void OAIBelege::initializeModel() {

    m_belege_isSet = false;
    m_belege_isValid = false;

    m_belege_gruppe_isSet = false;
    m_belege_gruppe_isValid = false;
}

void OAIBelege::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIBelege::fromJsonObject(QJsonObject json) {

    m_belege_isValid = ::OpenAPI::fromJsonValue(m_belege, json[QString("Belege")]);
    m_belege_isSet = !json[QString("Belege")].isNull() && m_belege_isValid;

    m_belege_gruppe_isValid = ::OpenAPI::fromJsonValue(m_belege_gruppe, json[QString("Belege-Gruppe")]);
    m_belege_gruppe_isSet = !json[QString("Belege-Gruppe")].isNull() && m_belege_gruppe_isValid;
}

QString OAIBelege::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIBelege::asJsonObject() const {
    QJsonObject obj;
    if (m_belege.size() > 0) {
        obj.insert(QString("Belege"), ::OpenAPI::toJsonValue(m_belege));
    }
    if (m_belege_gruppe.size() > 0) {
        obj.insert(QString("Belege-Gruppe"), ::OpenAPI::toJsonValue(m_belege_gruppe));
    }
    return obj;
}

QList<OAIBeleg> OAIBelege::getBelege() const {
    return m_belege;
}
void OAIBelege::setBelege(const QList<OAIBeleg> &belege) {
    m_belege = belege;
    m_belege_isSet = true;
}

bool OAIBelege::is_belege_Set() const{
    return m_belege_isSet;
}

bool OAIBelege::is_belege_Valid() const{
    return m_belege_isValid;
}

QList<OAIExportformat_Belege_Gruppe_inner> OAIBelege::getBelegeGruppe() const {
    return m_belege_gruppe;
}
void OAIBelege::setBelegeGruppe(const QList<OAIExportformat_Belege_Gruppe_inner> &belege_gruppe) {
    m_belege_gruppe = belege_gruppe;
    m_belege_gruppe_isSet = true;
}

bool OAIBelege::is_belege_gruppe_Set() const{
    return m_belege_gruppe_isSet;
}

bool OAIBelege::is_belege_gruppe_Valid() const{
    return m_belege_gruppe_isValid;
}

bool OAIBelege::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_belege.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_belege_gruppe.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIBelege::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
