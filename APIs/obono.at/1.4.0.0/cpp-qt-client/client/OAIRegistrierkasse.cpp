/**
 * obono RKSV API
 * Provides a RESTful API for interacting with virtual cash registers and creating receipts that are conform with the Registrierkassensicherheitsverordnung (RKSV).  You may find our [automatically generated clients](./clients) for various programming languages and environments helpful... 
 *
 * The version of the OpenAPI document: 1.4.0.0
 * Contact: info@obono.at
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIRegistrierkasse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIRegistrierkasse::OAIRegistrierkasse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIRegistrierkasse::OAIRegistrierkasse() {
    this->initializeModel();
}

OAIRegistrierkasse::~OAIRegistrierkasse() {}

void OAIRegistrierkasse::initializeModel() {

    m_benutzerschluessel_isSet = false;
    m_benutzerschluessel_isValid = false;

    m_kassen_id_isSet = false;
    m_kassen_id_isValid = false;

    m_signaturerstellungseinheit_uuid_isSet = false;
    m_signaturerstellungseinheit_uuid_isValid = false;

    m__href_isSet = false;
    m__href_isValid = false;

    m__uuid_isSet = false;
    m__uuid_isValid = false;
}

void OAIRegistrierkasse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIRegistrierkasse::fromJsonObject(QJsonObject json) {

    m_benutzerschluessel_isValid = ::OpenAPI::fromJsonValue(m_benutzerschluessel, json[QString("Benutzerschluessel")]);
    m_benutzerschluessel_isSet = !json[QString("Benutzerschluessel")].isNull() && m_benutzerschluessel_isValid;

    m_kassen_id_isValid = ::OpenAPI::fromJsonValue(m_kassen_id, json[QString("Kassen-ID")]);
    m_kassen_id_isSet = !json[QString("Kassen-ID")].isNull() && m_kassen_id_isValid;

    m_signaturerstellungseinheit_uuid_isValid = ::OpenAPI::fromJsonValue(m_signaturerstellungseinheit_uuid, json[QString("Signaturerstellungseinheit-UUID")]);
    m_signaturerstellungseinheit_uuid_isSet = !json[QString("Signaturerstellungseinheit-UUID")].isNull() && m_signaturerstellungseinheit_uuid_isValid;

    m__href_isValid = ::OpenAPI::fromJsonValue(m__href, json[QString("_href")]);
    m__href_isSet = !json[QString("_href")].isNull() && m__href_isValid;

    m__uuid_isValid = ::OpenAPI::fromJsonValue(m__uuid, json[QString("_uuid")]);
    m__uuid_isSet = !json[QString("_uuid")].isNull() && m__uuid_isValid;
}

QString OAIRegistrierkasse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIRegistrierkasse::asJsonObject() const {
    QJsonObject obj;
    if (m_benutzerschluessel_isSet) {
        obj.insert(QString("Benutzerschluessel"), ::OpenAPI::toJsonValue(m_benutzerschluessel));
    }
    if (m_kassen_id_isSet) {
        obj.insert(QString("Kassen-ID"), ::OpenAPI::toJsonValue(m_kassen_id));
    }
    if (m_signaturerstellungseinheit_uuid_isSet) {
        obj.insert(QString("Signaturerstellungseinheit-UUID"), ::OpenAPI::toJsonValue(m_signaturerstellungseinheit_uuid));
    }
    if (m__href_isSet) {
        obj.insert(QString("_href"), ::OpenAPI::toJsonValue(m__href));
    }
    if (m__uuid_isSet) {
        obj.insert(QString("_uuid"), ::OpenAPI::toJsonValue(m__uuid));
    }
    return obj;
}

QString OAIRegistrierkasse::getBenutzerschluessel() const {
    return m_benutzerschluessel;
}
void OAIRegistrierkasse::setBenutzerschluessel(const QString &benutzerschluessel) {
    m_benutzerschluessel = benutzerschluessel;
    m_benutzerschluessel_isSet = true;
}

bool OAIRegistrierkasse::is_benutzerschluessel_Set() const{
    return m_benutzerschluessel_isSet;
}

bool OAIRegistrierkasse::is_benutzerschluessel_Valid() const{
    return m_benutzerschluessel_isValid;
}

QString OAIRegistrierkasse::getKassenId() const {
    return m_kassen_id;
}
void OAIRegistrierkasse::setKassenId(const QString &kassen_id) {
    m_kassen_id = kassen_id;
    m_kassen_id_isSet = true;
}

bool OAIRegistrierkasse::is_kassen_id_Set() const{
    return m_kassen_id_isSet;
}

bool OAIRegistrierkasse::is_kassen_id_Valid() const{
    return m_kassen_id_isValid;
}

QString OAIRegistrierkasse::getSignaturerstellungseinheitUuid() const {
    return m_signaturerstellungseinheit_uuid;
}
void OAIRegistrierkasse::setSignaturerstellungseinheitUuid(const QString &signaturerstellungseinheit_uuid) {
    m_signaturerstellungseinheit_uuid = signaturerstellungseinheit_uuid;
    m_signaturerstellungseinheit_uuid_isSet = true;
}

bool OAIRegistrierkasse::is_signaturerstellungseinheit_uuid_Set() const{
    return m_signaturerstellungseinheit_uuid_isSet;
}

bool OAIRegistrierkasse::is_signaturerstellungseinheit_uuid_Valid() const{
    return m_signaturerstellungseinheit_uuid_isValid;
}

QString OAIRegistrierkasse::getHref() const {
    return m__href;
}
void OAIRegistrierkasse::setHref(const QString &_href) {
    m__href = _href;
    m__href_isSet = true;
}

bool OAIRegistrierkasse::is__href_Set() const{
    return m__href_isSet;
}

bool OAIRegistrierkasse::is__href_Valid() const{
    return m__href_isValid;
}

QString OAIRegistrierkasse::getUuid() const {
    return m__uuid;
}
void OAIRegistrierkasse::setUuid(const QString &_uuid) {
    m__uuid = _uuid;
    m__uuid_isSet = true;
}

bool OAIRegistrierkasse::is__uuid_Set() const{
    return m__uuid_isSet;
}

bool OAIRegistrierkasse::is__uuid_Valid() const{
    return m__uuid_isValid;
}

bool OAIRegistrierkasse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_benutzerschluessel_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_kassen_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_signaturerstellungseinheit_uuid_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m__href_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m__uuid_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIRegistrierkasse::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
