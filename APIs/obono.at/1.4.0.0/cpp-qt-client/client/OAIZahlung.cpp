/**
 * obono RKSV API
 * Provides a RESTful API for interacting with virtual cash registers and creating receipts that are conform with the Registrierkassensicherheitsverordnung (RKSV).  You may find our [automatically generated clients](./clients) for various programming languages and environments helpful... 
 *
 * The version of the OpenAPI document: 1.4.0.0
 * Contact: info@obono.at
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIZahlung.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIZahlung::OAIZahlung(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIZahlung::OAIZahlung() {
    this->initializeModel();
}

OAIZahlung::~OAIZahlung() {}

void OAIZahlung::initializeModel() {

    m_betrag_isSet = false;
    m_betrag_isValid = false;

    m_bezeichnung_isSet = false;
    m_bezeichnung_isValid = false;

    m_referenz_isSet = false;
    m_referenz_isValid = false;
}

void OAIZahlung::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIZahlung::fromJsonObject(QJsonObject json) {

    m_betrag_isValid = ::OpenAPI::fromJsonValue(m_betrag, json[QString("Betrag")]);
    m_betrag_isSet = !json[QString("Betrag")].isNull() && m_betrag_isValid;

    m_bezeichnung_isValid = ::OpenAPI::fromJsonValue(m_bezeichnung, json[QString("Bezeichnung")]);
    m_bezeichnung_isSet = !json[QString("Bezeichnung")].isNull() && m_bezeichnung_isValid;

    m_referenz_isValid = ::OpenAPI::fromJsonValue(m_referenz, json[QString("Referenz")]);
    m_referenz_isSet = !json[QString("Referenz")].isNull() && m_referenz_isValid;
}

QString OAIZahlung::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIZahlung::asJsonObject() const {
    QJsonObject obj;
    if (m_betrag_isSet) {
        obj.insert(QString("Betrag"), ::OpenAPI::toJsonValue(m_betrag));
    }
    if (m_bezeichnung_isSet) {
        obj.insert(QString("Bezeichnung"), ::OpenAPI::toJsonValue(m_bezeichnung));
    }
    if (m_referenz_isSet) {
        obj.insert(QString("Referenz"), ::OpenAPI::toJsonValue(m_referenz));
    }
    return obj;
}

qint32 OAIZahlung::getBetrag() const {
    return m_betrag;
}
void OAIZahlung::setBetrag(const qint32 &betrag) {
    m_betrag = betrag;
    m_betrag_isSet = true;
}

bool OAIZahlung::is_betrag_Set() const{
    return m_betrag_isSet;
}

bool OAIZahlung::is_betrag_Valid() const{
    return m_betrag_isValid;
}

QString OAIZahlung::getBezeichnung() const {
    return m_bezeichnung;
}
void OAIZahlung::setBezeichnung(const QString &bezeichnung) {
    m_bezeichnung = bezeichnung;
    m_bezeichnung_isSet = true;
}

bool OAIZahlung::is_bezeichnung_Set() const{
    return m_bezeichnung_isSet;
}

bool OAIZahlung::is_bezeichnung_Valid() const{
    return m_bezeichnung_isValid;
}

QString OAIZahlung::getReferenz() const {
    return m_referenz;
}
void OAIZahlung::setReferenz(const QString &referenz) {
    m_referenz = referenz;
    m_referenz_isSet = true;
}

bool OAIZahlung::is_referenz_Set() const{
    return m_referenz_isSet;
}

bool OAIZahlung::is_referenz_Valid() const{
    return m_referenz_isValid;
}

bool OAIZahlung::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_betrag_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_bezeichnung_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_referenz_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIZahlung::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_betrag_isValid && m_bezeichnung_isValid && true;
}

} // namespace OpenAPI
