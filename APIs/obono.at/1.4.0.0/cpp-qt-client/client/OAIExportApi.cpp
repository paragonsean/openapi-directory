/**
 * obono RKSV API
 * Provides a RESTful API for interacting with virtual cash registers and creating receipts that are conform with the Registrierkassensicherheitsverordnung (RKSV).  You may find our [automatically generated clients](./clients) for various programming languages and environments helpful... 
 *
 * The version of the OpenAPI document: 1.4.0.0
 * Contact: info@obono.at
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIExportApi.h"
#include "OAIServerConfiguration.h"
#include <QJsonArray>
#include <QJsonDocument>

namespace OpenAPI {

OAIExportApi::OAIExportApi(const int timeOut)
    : _timeOut(timeOut),
      _manager(nullptr),
      _isResponseCompressionEnabled(false),
      _isRequestCompressionEnabled(false) {
    initializeServerConfigs();
}

OAIExportApi::~OAIExportApi() {
}

void OAIExportApi::initializeServerConfigs() {
    //Default server
    QList<OAIServerConfiguration> defaultConf = QList<OAIServerConfiguration>();
    //varying endpoint server
    defaultConf.append(OAIServerConfiguration(
    QUrl("/api/v1"),
    "No description provided",
    QMap<QString, OAIServerVariable>()));
    _serverConfigs.insert("exportCsvRegistrierkassenRegistrierkasseUuidBelegeGet", defaultConf);
    _serverIndices.insert("exportCsvRegistrierkassenRegistrierkasseUuidBelegeGet", 0);
    _serverConfigs.insert("exportDep131RegistrierkassenRegistrierkasseUuidBelegeGet", defaultConf);
    _serverIndices.insert("exportDep131RegistrierkassenRegistrierkasseUuidBelegeGet", 0);
    _serverConfigs.insert("exportDep7RegistrierkassenRegistrierkasseUuidBelegeGet", defaultConf);
    _serverIndices.insert("exportDep7RegistrierkassenRegistrierkasseUuidBelegeGet", 0);
    _serverConfigs.insert("exportGobdRegistrierkassenRegistrierkasseUuidGet", defaultConf);
    _serverIndices.insert("exportGobdRegistrierkassenRegistrierkasseUuidGet", 0);
    _serverConfigs.insert("exportHtmlBelegeBelegUuidGet", defaultConf);
    _serverIndices.insert("exportHtmlBelegeBelegUuidGet", 0);
    _serverConfigs.insert("exportPdfBelegeBelegUuidGet", defaultConf);
    _serverIndices.insert("exportPdfBelegeBelegUuidGet", 0);
    _serverConfigs.insert("exportQrBelegeBelegUuidGet", defaultConf);
    _serverIndices.insert("exportQrBelegeBelegUuidGet", 0);
    _serverConfigs.insert("exportThermalPrintBelegeBelegUuidGet", defaultConf);
    _serverIndices.insert("exportThermalPrintBelegeBelegUuidGet", 0);
    _serverConfigs.insert("exportXlsRegistrierkassenRegistrierkasseUuidBelegeGet", defaultConf);
    _serverIndices.insert("exportXlsRegistrierkassenRegistrierkasseUuidBelegeGet", 0);
}

/**
* returns 0 on success and -1, -2 or -3 on failure.
* -1 when the variable does not exist and -2 if the value is not defined in the enum and -3 if the operation or server index is not found
*/
int OAIExportApi::setDefaultServerValue(int serverIndex, const QString &operation, const QString &variable, const QString &value) {
    auto it = _serverConfigs.find(operation);
    if (it != _serverConfigs.end() && serverIndex < it.value().size()) {
      return _serverConfigs[operation][serverIndex].setDefaultValue(variable,value);
    }
    return -3;
}
void OAIExportApi::setServerIndex(const QString &operation, int serverIndex) {
    if (_serverIndices.contains(operation) && serverIndex < _serverConfigs.find(operation).value().size()) {
        _serverIndices[operation] = serverIndex;
    }
}

void OAIExportApi::setApiKey(const QString &apiKeyName, const QString &apiKey) {
    _apiKeys.insert(apiKeyName, apiKey);
}

void OAIExportApi::setBearerToken(const QString &token) {
    _bearerToken = token;
}

void OAIExportApi::setUsername(const QString &username) {
    _username = username;
}

void OAIExportApi::setPassword(const QString &password) {
    _password = password;
}


void OAIExportApi::setTimeOut(const int timeOut) {
    _timeOut = timeOut;
}

void OAIExportApi::setWorkingDirectory(const QString &path) {
    _workingDirectory = path;
}

void OAIExportApi::setNetworkAccessManager(QNetworkAccessManager* manager) {
    _manager = manager;
}

/**
    * Appends a new ServerConfiguration to the config map for a specific operation.
    * @param operation The id to the target operation.
    * @param url A string that contains the URL of the server
    * @param description A String that describes the server
    * @param variables A map between a variable name and its value. The value is used for substitution in the server's URL template.
    * returns the index of the new server config on success and -1 if the operation is not found
    */
int OAIExportApi::addServerConfiguration(const QString &operation, const QUrl &url, const QString &description, const QMap<QString, OAIServerVariable> &variables) {
    if (_serverConfigs.contains(operation)) {
        _serverConfigs[operation].append(OAIServerConfiguration(
                    url,
                    description,
                    variables));
        return _serverConfigs[operation].size()-1;
    } else {
        return -1;
    }
}

/**
    * Appends a new ServerConfiguration to the config map for a all operations and sets the index to that server.
    * @param url A string that contains the URL of the server
    * @param description A String that describes the server
    * @param variables A map between a variable name and its value. The value is used for substitution in the server's URL template.
    */
void OAIExportApi::setNewServerForAllOperations(const QUrl &url, const QString &description, const QMap<QString, OAIServerVariable> &variables) {
    for (auto keyIt = _serverIndices.keyBegin(); keyIt != _serverIndices.keyEnd(); keyIt++) {
        setServerIndex(*keyIt, addServerConfiguration(*keyIt, url, description, variables));
    }
}

/**
    * Appends a new ServerConfiguration to the config map for an operations and sets the index to that server.
    * @param URL A string that contains the URL of the server
    * @param description A String that describes the server
    * @param variables A map between a variable name and its value. The value is used for substitution in the server's URL template.
    */
void OAIExportApi::setNewServer(const QString &operation, const QUrl &url, const QString &description, const QMap<QString, OAIServerVariable> &variables) {
    setServerIndex(operation, addServerConfiguration(operation, url, description, variables));
}

void OAIExportApi::addHeaders(const QString &key, const QString &value) {
    _defaultHeaders.insert(key, value);
}

void OAIExportApi::enableRequestCompression() {
    _isRequestCompressionEnabled = true;
}

void OAIExportApi::enableResponseCompression() {
    _isResponseCompressionEnabled = true;
}

void OAIExportApi::abortRequests() {
    Q_EMIT abortRequestsSignal();
}

QString OAIExportApi::getParamStylePrefix(const QString &style) {
    if (style == "matrix") {
        return ";";
    } else if (style == "label") {
        return ".";
    } else if (style == "form") {
        return "&";
    } else if (style == "simple") {
        return "";
    } else if (style == "spaceDelimited") {
        return "&";
    } else if (style == "pipeDelimited") {
        return "&";
    } else {
        return "none";
    }
}

QString OAIExportApi::getParamStyleSuffix(const QString &style) {
    if (style == "matrix") {
        return "=";
    } else if (style == "label") {
        return "";
    } else if (style == "form") {
        return "=";
    } else if (style == "simple") {
        return "";
    } else if (style == "spaceDelimited") {
        return "=";
    } else if (style == "pipeDelimited") {
        return "=";
    } else {
        return "none";
    }
}

QString OAIExportApi::getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode) {

    if (style == "matrix") {
        return (isExplode) ? ";" + name + "=" : ",";

    } else if (style == "label") {
        return (isExplode) ? "." : ",";

    } else if (style == "form") {
        return (isExplode) ? "&" + name + "=" : ",";

    } else if (style == "simple") {
        return ",";
    } else if (style == "spaceDelimited") {
        return (isExplode) ? "&" + name + "=" : " ";

    } else if (style == "pipeDelimited") {
        return (isExplode) ? "&" + name + "=" : "|";

    } else if (style == "deepObject") {
        return (isExplode) ? "&" : "none";

    } else {
        return "none";
    }
}

void OAIExportApi::exportCsvRegistrierkassenRegistrierkasseUuidBelegeGet(const QString &registrierkasse_uuid, const ::OpenAPI::OptionalParam<QString> &before, const ::OpenAPI::OptionalParam<QString> &after, const ::OpenAPI::OptionalParam<bool> &posten) {
    QString fullPath = QString(_serverConfigs["exportCsvRegistrierkassenRegistrierkasseUuidBelegeGet"][_serverIndices.value("exportCsvRegistrierkassenRegistrierkasseUuidBelegeGet")].URL()+"/export/csv/registrierkassen/{registrierkasseUuid}/belege");
    
    if (_apiKeys.contains("jwt")) {
        addHeaders("jwt",_apiKeys.find("jwt").value());
    }
    
    
    {
        QString registrierkasse_uuidPathParam("{");
        registrierkasse_uuidPathParam.append("registrierkasseUuid").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "registrierkasseUuid", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"registrierkasseUuid"+pathSuffix : pathPrefix;
        fullPath.replace(registrierkasse_uuidPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(registrierkasse_uuid)));
    }
    QString queryPrefix, querySuffix, queryDelimiter, queryStyle;
    if (before.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "before", true);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("before")).append(querySuffix).append(QUrl::toPercentEncoding(before.stringValue()));
    }
    if (after.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "after", true);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("after")).append(querySuffix).append(QUrl::toPercentEncoding(after.stringValue()));
    }
    if (posten.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "posten", true);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("posten")).append(querySuffix).append(QUrl::toPercentEncoding(posten.stringValue()));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIExportApi::exportCsvRegistrierkassenRegistrierkasseUuidBelegeGetCallback);
    connect(this, &OAIExportApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIExportApi::exportCsvRegistrierkassenRegistrierkasseUuidBelegeGetCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT exportCsvRegistrierkassenRegistrierkasseUuidBelegeGetSignal();
        Q_EMIT exportCsvRegistrierkassenRegistrierkasseUuidBelegeGetSignalFull(worker);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT exportCsvRegistrierkassenRegistrierkasseUuidBelegeGetSignalE(error_type, error_str);
        Q_EMIT exportCsvRegistrierkassenRegistrierkasseUuidBelegeGetSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT exportCsvRegistrierkassenRegistrierkasseUuidBelegeGetSignalError(error_type, error_str);
        Q_EMIT exportCsvRegistrierkassenRegistrierkasseUuidBelegeGetSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIExportApi::exportDep131RegistrierkassenRegistrierkasseUuidBelegeGet(const QString &registrierkasse_uuid, const ::OpenAPI::OptionalParam<QString> &before, const ::OpenAPI::OptionalParam<QString> &after) {
    QString fullPath = QString(_serverConfigs["exportDep131RegistrierkassenRegistrierkasseUuidBelegeGet"][_serverIndices.value("exportDep131RegistrierkassenRegistrierkasseUuidBelegeGet")].URL()+"/export/dep131/registrierkassen/{registrierkasseUuid}/belege");
    
    if (_apiKeys.contains("jwt")) {
        addHeaders("jwt",_apiKeys.find("jwt").value());
    }
    
    
    {
        QString registrierkasse_uuidPathParam("{");
        registrierkasse_uuidPathParam.append("registrierkasseUuid").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "registrierkasseUuid", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"registrierkasseUuid"+pathSuffix : pathPrefix;
        fullPath.replace(registrierkasse_uuidPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(registrierkasse_uuid)));
    }
    QString queryPrefix, querySuffix, queryDelimiter, queryStyle;
    if (before.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "before", true);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("before")).append(querySuffix).append(QUrl::toPercentEncoding(before.stringValue()));
    }
    if (after.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "after", true);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("after")).append(querySuffix).append(QUrl::toPercentEncoding(after.stringValue()));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIExportApi::exportDep131RegistrierkassenRegistrierkasseUuidBelegeGetCallback);
    connect(this, &OAIExportApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIExportApi::exportDep131RegistrierkassenRegistrierkasseUuidBelegeGetCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT exportDep131RegistrierkassenRegistrierkasseUuidBelegeGetSignal();
        Q_EMIT exportDep131RegistrierkassenRegistrierkasseUuidBelegeGetSignalFull(worker);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT exportDep131RegistrierkassenRegistrierkasseUuidBelegeGetSignalE(error_type, error_str);
        Q_EMIT exportDep131RegistrierkassenRegistrierkasseUuidBelegeGetSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT exportDep131RegistrierkassenRegistrierkasseUuidBelegeGetSignalError(error_type, error_str);
        Q_EMIT exportDep131RegistrierkassenRegistrierkasseUuidBelegeGetSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIExportApi::exportDep7RegistrierkassenRegistrierkasseUuidBelegeGet(const QString &registrierkasse_uuid, const ::OpenAPI::OptionalParam<QString> &before, const ::OpenAPI::OptionalParam<QString> &after) {
    QString fullPath = QString(_serverConfigs["exportDep7RegistrierkassenRegistrierkasseUuidBelegeGet"][_serverIndices.value("exportDep7RegistrierkassenRegistrierkasseUuidBelegeGet")].URL()+"/export/dep7/registrierkassen/{registrierkasseUuid}/belege");
    
    if (_apiKeys.contains("jwt")) {
        addHeaders("jwt",_apiKeys.find("jwt").value());
    }
    
    
    {
        QString registrierkasse_uuidPathParam("{");
        registrierkasse_uuidPathParam.append("registrierkasseUuid").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "registrierkasseUuid", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"registrierkasseUuid"+pathSuffix : pathPrefix;
        fullPath.replace(registrierkasse_uuidPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(registrierkasse_uuid)));
    }
    QString queryPrefix, querySuffix, queryDelimiter, queryStyle;
    if (before.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "before", true);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("before")).append(querySuffix).append(QUrl::toPercentEncoding(before.stringValue()));
    }
    if (after.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "after", true);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("after")).append(querySuffix).append(QUrl::toPercentEncoding(after.stringValue()));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIExportApi::exportDep7RegistrierkassenRegistrierkasseUuidBelegeGetCallback);
    connect(this, &OAIExportApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIExportApi::exportDep7RegistrierkassenRegistrierkasseUuidBelegeGetCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT exportDep7RegistrierkassenRegistrierkasseUuidBelegeGetSignal();
        Q_EMIT exportDep7RegistrierkassenRegistrierkasseUuidBelegeGetSignalFull(worker);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT exportDep7RegistrierkassenRegistrierkasseUuidBelegeGetSignalE(error_type, error_str);
        Q_EMIT exportDep7RegistrierkassenRegistrierkasseUuidBelegeGetSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT exportDep7RegistrierkassenRegistrierkasseUuidBelegeGetSignalError(error_type, error_str);
        Q_EMIT exportDep7RegistrierkassenRegistrierkasseUuidBelegeGetSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIExportApi::exportGobdRegistrierkassenRegistrierkasseUuidGet(const QString &registrierkasse_uuid, const ::OpenAPI::OptionalParam<QString> &before, const ::OpenAPI::OptionalParam<QString> &after) {
    QString fullPath = QString(_serverConfigs["exportGobdRegistrierkassenRegistrierkasseUuidGet"][_serverIndices.value("exportGobdRegistrierkassenRegistrierkasseUuidGet")].URL()+"/export/gobd/registrierkassen/{registrierkasseUuid}");
    
    if (_apiKeys.contains("jwt")) {
        addHeaders("jwt",_apiKeys.find("jwt").value());
    }
    
    
    {
        QString registrierkasse_uuidPathParam("{");
        registrierkasse_uuidPathParam.append("registrierkasseUuid").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "registrierkasseUuid", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"registrierkasseUuid"+pathSuffix : pathPrefix;
        fullPath.replace(registrierkasse_uuidPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(registrierkasse_uuid)));
    }
    QString queryPrefix, querySuffix, queryDelimiter, queryStyle;
    if (before.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "before", true);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("before")).append(querySuffix).append(QUrl::toPercentEncoding(before.stringValue()));
    }
    if (after.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "after", true);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("after")).append(querySuffix).append(QUrl::toPercentEncoding(after.stringValue()));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIExportApi::exportGobdRegistrierkassenRegistrierkasseUuidGetCallback);
    connect(this, &OAIExportApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIExportApi::exportGobdRegistrierkassenRegistrierkasseUuidGetCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT exportGobdRegistrierkassenRegistrierkasseUuidGetSignal();
        Q_EMIT exportGobdRegistrierkassenRegistrierkasseUuidGetSignalFull(worker);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT exportGobdRegistrierkassenRegistrierkasseUuidGetSignalE(error_type, error_str);
        Q_EMIT exportGobdRegistrierkassenRegistrierkasseUuidGetSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT exportGobdRegistrierkassenRegistrierkasseUuidGetSignalError(error_type, error_str);
        Q_EMIT exportGobdRegistrierkassenRegistrierkasseUuidGetSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIExportApi::exportHtmlBelegeBelegUuidGet(const QString &beleg_uuid) {
    QString fullPath = QString(_serverConfigs["exportHtmlBelegeBelegUuidGet"][_serverIndices.value("exportHtmlBelegeBelegUuidGet")].URL()+"/export/html/belege/{belegUuid}");
    
    
    {
        QString beleg_uuidPathParam("{");
        beleg_uuidPathParam.append("belegUuid").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "belegUuid", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"belegUuid"+pathSuffix : pathPrefix;
        fullPath.replace(beleg_uuidPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(beleg_uuid)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIExportApi::exportHtmlBelegeBelegUuidGetCallback);
    connect(this, &OAIExportApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIExportApi::exportHtmlBelegeBelegUuidGetCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT exportHtmlBelegeBelegUuidGetSignal();
        Q_EMIT exportHtmlBelegeBelegUuidGetSignalFull(worker);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT exportHtmlBelegeBelegUuidGetSignalE(error_type, error_str);
        Q_EMIT exportHtmlBelegeBelegUuidGetSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT exportHtmlBelegeBelegUuidGetSignalError(error_type, error_str);
        Q_EMIT exportHtmlBelegeBelegUuidGetSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIExportApi::exportPdfBelegeBelegUuidGet(const QString &beleg_uuid) {
    QString fullPath = QString(_serverConfigs["exportPdfBelegeBelegUuidGet"][_serverIndices.value("exportPdfBelegeBelegUuidGet")].URL()+"/export/pdf/belege/{belegUuid}");
    
    
    {
        QString beleg_uuidPathParam("{");
        beleg_uuidPathParam.append("belegUuid").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "belegUuid", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"belegUuid"+pathSuffix : pathPrefix;
        fullPath.replace(beleg_uuidPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(beleg_uuid)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIExportApi::exportPdfBelegeBelegUuidGetCallback);
    connect(this, &OAIExportApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIExportApi::exportPdfBelegeBelegUuidGetCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT exportPdfBelegeBelegUuidGetSignal();
        Q_EMIT exportPdfBelegeBelegUuidGetSignalFull(worker);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT exportPdfBelegeBelegUuidGetSignalE(error_type, error_str);
        Q_EMIT exportPdfBelegeBelegUuidGetSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT exportPdfBelegeBelegUuidGetSignalError(error_type, error_str);
        Q_EMIT exportPdfBelegeBelegUuidGetSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIExportApi::exportQrBelegeBelegUuidGet(const QString &beleg_uuid) {
    QString fullPath = QString(_serverConfigs["exportQrBelegeBelegUuidGet"][_serverIndices.value("exportQrBelegeBelegUuidGet")].URL()+"/export/qr/belege/{belegUuid}");
    
    
    {
        QString beleg_uuidPathParam("{");
        beleg_uuidPathParam.append("belegUuid").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "belegUuid", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"belegUuid"+pathSuffix : pathPrefix;
        fullPath.replace(beleg_uuidPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(beleg_uuid)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIExportApi::exportQrBelegeBelegUuidGetCallback);
    connect(this, &OAIExportApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIExportApi::exportQrBelegeBelegUuidGetCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT exportQrBelegeBelegUuidGetSignal();
        Q_EMIT exportQrBelegeBelegUuidGetSignalFull(worker);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT exportQrBelegeBelegUuidGetSignalE(error_type, error_str);
        Q_EMIT exportQrBelegeBelegUuidGetSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT exportQrBelegeBelegUuidGetSignalError(error_type, error_str);
        Q_EMIT exportQrBelegeBelegUuidGetSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIExportApi::exportThermalPrintBelegeBelegUuidGet(const QString &beleg_uuid, const ::OpenAPI::OptionalParam<bool> &qr, const ::OpenAPI::OptionalParam<qint32> &width, const ::OpenAPI::OptionalParam<QString> &dialect, const ::OpenAPI::OptionalParam<QString> &encoding) {
    QString fullPath = QString(_serverConfigs["exportThermalPrintBelegeBelegUuidGet"][_serverIndices.value("exportThermalPrintBelegeBelegUuidGet")].URL()+"/export/thermal-print/belege/{belegUuid}");
    
    
    {
        QString beleg_uuidPathParam("{");
        beleg_uuidPathParam.append("belegUuid").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "belegUuid", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"belegUuid"+pathSuffix : pathPrefix;
        fullPath.replace(beleg_uuidPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(beleg_uuid)));
    }
    QString queryPrefix, querySuffix, queryDelimiter, queryStyle;
    if (qr.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "qr", true);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("qr")).append(querySuffix).append(QUrl::toPercentEncoding(qr.stringValue()));
    }
    if (width.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "width", true);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("width")).append(querySuffix).append(QUrl::toPercentEncoding(width.stringValue()));
    }
    if (dialect.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "dialect", true);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("dialect")).append(querySuffix).append(QUrl::toPercentEncoding(dialect.stringValue()));
    }
    if (encoding.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "encoding", true);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("encoding")).append(querySuffix).append(QUrl::toPercentEncoding(encoding.stringValue()));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIExportApi::exportThermalPrintBelegeBelegUuidGetCallback);
    connect(this, &OAIExportApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIExportApi::exportThermalPrintBelegeBelegUuidGetCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT exportThermalPrintBelegeBelegUuidGetSignal();
        Q_EMIT exportThermalPrintBelegeBelegUuidGetSignalFull(worker);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT exportThermalPrintBelegeBelegUuidGetSignalE(error_type, error_str);
        Q_EMIT exportThermalPrintBelegeBelegUuidGetSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT exportThermalPrintBelegeBelegUuidGetSignalError(error_type, error_str);
        Q_EMIT exportThermalPrintBelegeBelegUuidGetSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIExportApi::exportXlsRegistrierkassenRegistrierkasseUuidBelegeGet(const QString &registrierkasse_uuid, const ::OpenAPI::OptionalParam<QString> &before, const ::OpenAPI::OptionalParam<QString> &after) {
    QString fullPath = QString(_serverConfigs["exportXlsRegistrierkassenRegistrierkasseUuidBelegeGet"][_serverIndices.value("exportXlsRegistrierkassenRegistrierkasseUuidBelegeGet")].URL()+"/export/xls/registrierkassen/{registrierkasseUuid}/belege");
    
    if (_apiKeys.contains("jwt")) {
        addHeaders("jwt",_apiKeys.find("jwt").value());
    }
    
    
    {
        QString registrierkasse_uuidPathParam("{");
        registrierkasse_uuidPathParam.append("registrierkasseUuid").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "registrierkasseUuid", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"registrierkasseUuid"+pathSuffix : pathPrefix;
        fullPath.replace(registrierkasse_uuidPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(registrierkasse_uuid)));
    }
    QString queryPrefix, querySuffix, queryDelimiter, queryStyle;
    if (before.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "before", true);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("before")).append(querySuffix).append(QUrl::toPercentEncoding(before.stringValue()));
    }
    if (after.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "after", true);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("after")).append(querySuffix).append(QUrl::toPercentEncoding(after.stringValue()));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIExportApi::exportXlsRegistrierkassenRegistrierkasseUuidBelegeGetCallback);
    connect(this, &OAIExportApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIExportApi::exportXlsRegistrierkassenRegistrierkasseUuidBelegeGetCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT exportXlsRegistrierkassenRegistrierkasseUuidBelegeGetSignal();
        Q_EMIT exportXlsRegistrierkassenRegistrierkasseUuidBelegeGetSignalFull(worker);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT exportXlsRegistrierkassenRegistrierkasseUuidBelegeGetSignalE(error_type, error_str);
        Q_EMIT exportXlsRegistrierkassenRegistrierkasseUuidBelegeGetSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT exportXlsRegistrierkassenRegistrierkasseUuidBelegeGetSignalError(error_type, error_str);
        Q_EMIT exportXlsRegistrierkassenRegistrierkasseUuidBelegeGetSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIExportApi::tokenAvailable(){

    oauthToken token;
    switch (_OauthMethod) {
    case 1: //implicit flow
        token = _implicitFlow.getToken(_latestScope.join(" "));
        if(token.isValid()){
            _latestInput.headers.insert("Authorization", "Bearer " + token.getToken());
            _latestWorker->execute(&_latestInput);
        }else{
            _implicitFlow.removeToken(_latestScope.join(" "));
            qDebug() << "Could not retrieve a valid token";
        }
        break;
    case 2: //authorization flow
        token = _authFlow.getToken(_latestScope.join(" "));
        if(token.isValid()){
            _latestInput.headers.insert("Authorization", "Bearer " + token.getToken());
            _latestWorker->execute(&_latestInput);
        }else{
            _authFlow.removeToken(_latestScope.join(" "));
            qDebug() << "Could not retrieve a valid token";
        }
        break;
    case 3: //client credentials flow
        token = _credentialFlow.getToken(_latestScope.join(" "));
        if(token.isValid()){
            _latestInput.headers.insert("Authorization", "Bearer " + token.getToken());
            _latestWorker->execute(&_latestInput);
        }else{
            _credentialFlow.removeToken(_latestScope.join(" "));
            qDebug() << "Could not retrieve a valid token";
        }
        break;
    case 4: //resource owner password flow
        token = _passwordFlow.getToken(_latestScope.join(" "));
        if(token.isValid()){
            _latestInput.headers.insert("Authorization", "Bearer " + token.getToken());
            _latestWorker->execute(&_latestInput);
        }else{
            _credentialFlow.removeToken(_latestScope.join(" "));
            qDebug() << "Could not retrieve a valid token";
        }
        break;
    default:
        qDebug() << "No Oauth method set!";
        break;
    }
}
} // namespace OpenAPI
