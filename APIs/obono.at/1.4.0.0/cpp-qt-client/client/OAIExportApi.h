/**
 * obono RKSV API
 * Provides a RESTful API for interacting with virtual cash registers and creating receipts that are conform with the Registrierkassensicherheitsverordnung (RKSV).  You may find our [automatically generated clients](./clients) for various programming languages and environments helpful... 
 *
 * The version of the OpenAPI document: 1.4.0.0
 * Contact: info@obono.at
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIExportApi_H
#define OAI_OAIExportApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIExportApi : public QObject {
    Q_OBJECT

public:
    OAIExportApi(const int timeOut = 0);
    ~OAIExportApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  registrierkasse_uuid QString [required]
    * @param[in]  before QString [optional]
    * @param[in]  after QString [optional]
    * @param[in]  posten bool [optional]
    */
    virtual void exportCsvRegistrierkassenRegistrierkasseUuidBelegeGet(const QString &registrierkasse_uuid, const ::OpenAPI::OptionalParam<QString> &before = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &after = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &posten = ::OpenAPI::OptionalParam<bool>());

    /**
    * @param[in]  registrierkasse_uuid QString [required]
    * @param[in]  before QString [optional]
    * @param[in]  after QString [optional]
    */
    virtual void exportDep131RegistrierkassenRegistrierkasseUuidBelegeGet(const QString &registrierkasse_uuid, const ::OpenAPI::OptionalParam<QString> &before = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &after = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  registrierkasse_uuid QString [required]
    * @param[in]  before QString [optional]
    * @param[in]  after QString [optional]
    */
    virtual void exportDep7RegistrierkassenRegistrierkasseUuidBelegeGet(const QString &registrierkasse_uuid, const ::OpenAPI::OptionalParam<QString> &before = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &after = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  registrierkasse_uuid QString [required]
    * @param[in]  before QString [optional]
    * @param[in]  after QString [optional]
    */
    virtual void exportGobdRegistrierkassenRegistrierkasseUuidGet(const QString &registrierkasse_uuid, const ::OpenAPI::OptionalParam<QString> &before = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &after = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  beleg_uuid QString [required]
    */
    virtual void exportHtmlBelegeBelegUuidGet(const QString &beleg_uuid);

    /**
    * @param[in]  beleg_uuid QString [required]
    */
    virtual void exportPdfBelegeBelegUuidGet(const QString &beleg_uuid);

    /**
    * @param[in]  beleg_uuid QString [required]
    */
    virtual void exportQrBelegeBelegUuidGet(const QString &beleg_uuid);

    /**
    * @param[in]  beleg_uuid QString [required]
    * @param[in]  qr bool [optional]
    * @param[in]  width qint32 [optional]
    * @param[in]  dialect QString [optional]
    * @param[in]  encoding QString [optional]
    */
    virtual void exportThermalPrintBelegeBelegUuidGet(const QString &beleg_uuid, const ::OpenAPI::OptionalParam<bool> &qr = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<qint32> &width = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &dialect = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &encoding = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  registrierkasse_uuid QString [required]
    * @param[in]  before QString [optional]
    * @param[in]  after QString [optional]
    */
    virtual void exportXlsRegistrierkassenRegistrierkasseUuidBelegeGet(const QString &registrierkasse_uuid, const ::OpenAPI::OptionalParam<QString> &before = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &after = ::OpenAPI::OptionalParam<QString>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void exportCsvRegistrierkassenRegistrierkasseUuidBelegeGetCallback(OAIHttpRequestWorker *worker);
    void exportDep131RegistrierkassenRegistrierkasseUuidBelegeGetCallback(OAIHttpRequestWorker *worker);
    void exportDep7RegistrierkassenRegistrierkasseUuidBelegeGetCallback(OAIHttpRequestWorker *worker);
    void exportGobdRegistrierkassenRegistrierkasseUuidGetCallback(OAIHttpRequestWorker *worker);
    void exportHtmlBelegeBelegUuidGetCallback(OAIHttpRequestWorker *worker);
    void exportPdfBelegeBelegUuidGetCallback(OAIHttpRequestWorker *worker);
    void exportQrBelegeBelegUuidGetCallback(OAIHttpRequestWorker *worker);
    void exportThermalPrintBelegeBelegUuidGetCallback(OAIHttpRequestWorker *worker);
    void exportXlsRegistrierkassenRegistrierkasseUuidBelegeGetCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void exportCsvRegistrierkassenRegistrierkasseUuidBelegeGetSignal();
    void exportDep131RegistrierkassenRegistrierkasseUuidBelegeGetSignal();
    void exportDep7RegistrierkassenRegistrierkasseUuidBelegeGetSignal();
    void exportGobdRegistrierkassenRegistrierkasseUuidGetSignal();
    void exportHtmlBelegeBelegUuidGetSignal();
    void exportPdfBelegeBelegUuidGetSignal();
    void exportQrBelegeBelegUuidGetSignal();
    void exportThermalPrintBelegeBelegUuidGetSignal();
    void exportXlsRegistrierkassenRegistrierkasseUuidBelegeGetSignal();


    void exportCsvRegistrierkassenRegistrierkasseUuidBelegeGetSignalFull(OAIHttpRequestWorker *worker);
    void exportDep131RegistrierkassenRegistrierkasseUuidBelegeGetSignalFull(OAIHttpRequestWorker *worker);
    void exportDep7RegistrierkassenRegistrierkasseUuidBelegeGetSignalFull(OAIHttpRequestWorker *worker);
    void exportGobdRegistrierkassenRegistrierkasseUuidGetSignalFull(OAIHttpRequestWorker *worker);
    void exportHtmlBelegeBelegUuidGetSignalFull(OAIHttpRequestWorker *worker);
    void exportPdfBelegeBelegUuidGetSignalFull(OAIHttpRequestWorker *worker);
    void exportQrBelegeBelegUuidGetSignalFull(OAIHttpRequestWorker *worker);
    void exportThermalPrintBelegeBelegUuidGetSignalFull(OAIHttpRequestWorker *worker);
    void exportXlsRegistrierkassenRegistrierkasseUuidBelegeGetSignalFull(OAIHttpRequestWorker *worker);

    Q_DECL_DEPRECATED_X("Use exportCsvRegistrierkassenRegistrierkasseUuidBelegeGetSignalError() instead")
    void exportCsvRegistrierkassenRegistrierkasseUuidBelegeGetSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void exportCsvRegistrierkassenRegistrierkasseUuidBelegeGetSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use exportDep131RegistrierkassenRegistrierkasseUuidBelegeGetSignalError() instead")
    void exportDep131RegistrierkassenRegistrierkasseUuidBelegeGetSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void exportDep131RegistrierkassenRegistrierkasseUuidBelegeGetSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use exportDep7RegistrierkassenRegistrierkasseUuidBelegeGetSignalError() instead")
    void exportDep7RegistrierkassenRegistrierkasseUuidBelegeGetSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void exportDep7RegistrierkassenRegistrierkasseUuidBelegeGetSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use exportGobdRegistrierkassenRegistrierkasseUuidGetSignalError() instead")
    void exportGobdRegistrierkassenRegistrierkasseUuidGetSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void exportGobdRegistrierkassenRegistrierkasseUuidGetSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use exportHtmlBelegeBelegUuidGetSignalError() instead")
    void exportHtmlBelegeBelegUuidGetSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void exportHtmlBelegeBelegUuidGetSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use exportPdfBelegeBelegUuidGetSignalError() instead")
    void exportPdfBelegeBelegUuidGetSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void exportPdfBelegeBelegUuidGetSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use exportQrBelegeBelegUuidGetSignalError() instead")
    void exportQrBelegeBelegUuidGetSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void exportQrBelegeBelegUuidGetSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use exportThermalPrintBelegeBelegUuidGetSignalError() instead")
    void exportThermalPrintBelegeBelegUuidGetSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void exportThermalPrintBelegeBelegUuidGetSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use exportXlsRegistrierkassenRegistrierkasseUuidBelegeGetSignalError() instead")
    void exportXlsRegistrierkassenRegistrierkasseUuidBelegeGetSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void exportXlsRegistrierkassenRegistrierkasseUuidBelegeGetSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use exportCsvRegistrierkassenRegistrierkasseUuidBelegeGetSignalErrorFull() instead")
    void exportCsvRegistrierkassenRegistrierkasseUuidBelegeGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void exportCsvRegistrierkassenRegistrierkasseUuidBelegeGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use exportDep131RegistrierkassenRegistrierkasseUuidBelegeGetSignalErrorFull() instead")
    void exportDep131RegistrierkassenRegistrierkasseUuidBelegeGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void exportDep131RegistrierkassenRegistrierkasseUuidBelegeGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use exportDep7RegistrierkassenRegistrierkasseUuidBelegeGetSignalErrorFull() instead")
    void exportDep7RegistrierkassenRegistrierkasseUuidBelegeGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void exportDep7RegistrierkassenRegistrierkasseUuidBelegeGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use exportGobdRegistrierkassenRegistrierkasseUuidGetSignalErrorFull() instead")
    void exportGobdRegistrierkassenRegistrierkasseUuidGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void exportGobdRegistrierkassenRegistrierkasseUuidGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use exportHtmlBelegeBelegUuidGetSignalErrorFull() instead")
    void exportHtmlBelegeBelegUuidGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void exportHtmlBelegeBelegUuidGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use exportPdfBelegeBelegUuidGetSignalErrorFull() instead")
    void exportPdfBelegeBelegUuidGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void exportPdfBelegeBelegUuidGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use exportQrBelegeBelegUuidGetSignalErrorFull() instead")
    void exportQrBelegeBelegUuidGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void exportQrBelegeBelegUuidGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use exportThermalPrintBelegeBelegUuidGetSignalErrorFull() instead")
    void exportThermalPrintBelegeBelegUuidGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void exportThermalPrintBelegeBelegUuidGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use exportXlsRegistrierkassenRegistrierkasseUuidBelegeGetSignalErrorFull() instead")
    void exportXlsRegistrierkassenRegistrierkasseUuidBelegeGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void exportXlsRegistrierkassenRegistrierkasseUuidBelegeGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
