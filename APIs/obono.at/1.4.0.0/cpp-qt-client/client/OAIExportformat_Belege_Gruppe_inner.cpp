/**
 * obono RKSV API
 * Provides a RESTful API for interacting with virtual cash registers and creating receipts that are conform with the Registrierkassensicherheitsverordnung (RKSV).  You may find our [automatically generated clients](./clients) for various programming languages and environments helpful... 
 *
 * The version of the OpenAPI document: 1.4.0.0
 * Contact: info@obono.at
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIExportformat_Belege_Gruppe_inner.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIExportformat_Belege_Gruppe_inner::OAIExportformat_Belege_Gruppe_inner(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIExportformat_Belege_Gruppe_inner::OAIExportformat_Belege_Gruppe_inner() {
    this->initializeModel();
}

OAIExportformat_Belege_Gruppe_inner::~OAIExportformat_Belege_Gruppe_inner() {}

void OAIExportformat_Belege_Gruppe_inner::initializeModel() {

    m_belege_kompakt_isSet = false;
    m_belege_kompakt_isValid = false;

    m_signaturzertifikat_isSet = false;
    m_signaturzertifikat_isValid = false;

    m_zertifizierungsstellen_isSet = false;
    m_zertifizierungsstellen_isValid = false;
}

void OAIExportformat_Belege_Gruppe_inner::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIExportformat_Belege_Gruppe_inner::fromJsonObject(QJsonObject json) {

    m_belege_kompakt_isValid = ::OpenAPI::fromJsonValue(m_belege_kompakt, json[QString("Belege-kompakt")]);
    m_belege_kompakt_isSet = !json[QString("Belege-kompakt")].isNull() && m_belege_kompakt_isValid;

    m_signaturzertifikat_isValid = ::OpenAPI::fromJsonValue(m_signaturzertifikat, json[QString("Signaturzertifikat")]);
    m_signaturzertifikat_isSet = !json[QString("Signaturzertifikat")].isNull() && m_signaturzertifikat_isValid;

    m_zertifizierungsstellen_isValid = ::OpenAPI::fromJsonValue(m_zertifizierungsstellen, json[QString("Zertifizierungsstellen")]);
    m_zertifizierungsstellen_isSet = !json[QString("Zertifizierungsstellen")].isNull() && m_zertifizierungsstellen_isValid;
}

QString OAIExportformat_Belege_Gruppe_inner::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIExportformat_Belege_Gruppe_inner::asJsonObject() const {
    QJsonObject obj;
    if (m_belege_kompakt.size() > 0) {
        obj.insert(QString("Belege-kompakt"), ::OpenAPI::toJsonValue(m_belege_kompakt));
    }
    if (m_signaturzertifikat_isSet) {
        obj.insert(QString("Signaturzertifikat"), ::OpenAPI::toJsonValue(m_signaturzertifikat));
    }
    if (m_zertifizierungsstellen.size() > 0) {
        obj.insert(QString("Zertifizierungsstellen"), ::OpenAPI::toJsonValue(m_zertifizierungsstellen));
    }
    return obj;
}

QList<QString> OAIExportformat_Belege_Gruppe_inner::getBelegeKompakt() const {
    return m_belege_kompakt;
}
void OAIExportformat_Belege_Gruppe_inner::setBelegeKompakt(const QList<QString> &belege_kompakt) {
    m_belege_kompakt = belege_kompakt;
    m_belege_kompakt_isSet = true;
}

bool OAIExportformat_Belege_Gruppe_inner::is_belege_kompakt_Set() const{
    return m_belege_kompakt_isSet;
}

bool OAIExportformat_Belege_Gruppe_inner::is_belege_kompakt_Valid() const{
    return m_belege_kompakt_isValid;
}

QString OAIExportformat_Belege_Gruppe_inner::getSignaturzertifikat() const {
    return m_signaturzertifikat;
}
void OAIExportformat_Belege_Gruppe_inner::setSignaturzertifikat(const QString &signaturzertifikat) {
    m_signaturzertifikat = signaturzertifikat;
    m_signaturzertifikat_isSet = true;
}

bool OAIExportformat_Belege_Gruppe_inner::is_signaturzertifikat_Set() const{
    return m_signaturzertifikat_isSet;
}

bool OAIExportformat_Belege_Gruppe_inner::is_signaturzertifikat_Valid() const{
    return m_signaturzertifikat_isValid;
}

QList<QString> OAIExportformat_Belege_Gruppe_inner::getZertifizierungsstellen() const {
    return m_zertifizierungsstellen;
}
void OAIExportformat_Belege_Gruppe_inner::setZertifizierungsstellen(const QList<QString> &zertifizierungsstellen) {
    m_zertifizierungsstellen = zertifizierungsstellen;
    m_zertifizierungsstellen_isSet = true;
}

bool OAIExportformat_Belege_Gruppe_inner::is_zertifizierungsstellen_Set() const{
    return m_zertifizierungsstellen_isSet;
}

bool OAIExportformat_Belege_Gruppe_inner::is_zertifizierungsstellen_Valid() const{
    return m_zertifizierungsstellen_isValid;
}

bool OAIExportformat_Belege_Gruppe_inner::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_belege_kompakt.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_signaturzertifikat_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_zertifizierungsstellen.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIExportformat_Belege_Gruppe_inner::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_belege_kompakt_isValid && m_signaturzertifikat_isValid && m_zertifizierungsstellen_isValid && true;
}

} // namespace OpenAPI
