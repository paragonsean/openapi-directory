/**
 * obono RKSV API
 * Provides a RESTful API for interacting with virtual cash registers and creating receipts that are conform with the Registrierkassensicherheitsverordnung (RKSV).  You may find our [automatically generated clients](./clients) for various programming languages and environments helpful... 
 *
 * The version of the OpenAPI document: 1.4.0.0
 * Contact: info@obono.at
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIMonatsbeleg.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIMonatsbeleg::OAIMonatsbeleg(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIMonatsbeleg::OAIMonatsbeleg() {
    this->initializeModel();
}

OAIMonatsbeleg::~OAIMonatsbeleg() {}

void OAIMonatsbeleg::initializeModel() {

    m_beleg_uuid_isSet = false;
    m_beleg_uuid_isValid = false;

    m_fon_geprueft_datum_uhrzeit_isSet = false;
    m_fon_geprueft_datum_uhrzeit_isValid = false;

    m_fon_geprueft_erfolgreich_isSet = false;
    m_fon_geprueft_erfolgreich_isValid = false;

    m_jahr_isSet = false;
    m_jahr_isValid = false;

    m_monat_isSet = false;
    m_monat_isValid = false;
}

void OAIMonatsbeleg::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIMonatsbeleg::fromJsonObject(QJsonObject json) {

    m_beleg_uuid_isValid = ::OpenAPI::fromJsonValue(m_beleg_uuid, json[QString("Beleg-UUID")]);
    m_beleg_uuid_isSet = !json[QString("Beleg-UUID")].isNull() && m_beleg_uuid_isValid;

    m_fon_geprueft_datum_uhrzeit_isValid = ::OpenAPI::fromJsonValue(m_fon_geprueft_datum_uhrzeit, json[QString("FON-Geprueft-Datum-Uhrzeit")]);
    m_fon_geprueft_datum_uhrzeit_isSet = !json[QString("FON-Geprueft-Datum-Uhrzeit")].isNull() && m_fon_geprueft_datum_uhrzeit_isValid;

    m_fon_geprueft_erfolgreich_isValid = ::OpenAPI::fromJsonValue(m_fon_geprueft_erfolgreich, json[QString("FON-Geprueft-Erfolgreich")]);
    m_fon_geprueft_erfolgreich_isSet = !json[QString("FON-Geprueft-Erfolgreich")].isNull() && m_fon_geprueft_erfolgreich_isValid;

    m_jahr_isValid = ::OpenAPI::fromJsonValue(m_jahr, json[QString("Jahr")]);
    m_jahr_isSet = !json[QString("Jahr")].isNull() && m_jahr_isValid;

    m_monat_isValid = ::OpenAPI::fromJsonValue(m_monat, json[QString("Monat")]);
    m_monat_isSet = !json[QString("Monat")].isNull() && m_monat_isValid;
}

QString OAIMonatsbeleg::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIMonatsbeleg::asJsonObject() const {
    QJsonObject obj;
    if (m_beleg_uuid_isSet) {
        obj.insert(QString("Beleg-UUID"), ::OpenAPI::toJsonValue(m_beleg_uuid));
    }
    if (m_fon_geprueft_datum_uhrzeit_isSet) {
        obj.insert(QString("FON-Geprueft-Datum-Uhrzeit"), ::OpenAPI::toJsonValue(m_fon_geprueft_datum_uhrzeit));
    }
    if (m_fon_geprueft_erfolgreich_isSet) {
        obj.insert(QString("FON-Geprueft-Erfolgreich"), ::OpenAPI::toJsonValue(m_fon_geprueft_erfolgreich));
    }
    if (m_jahr_isSet) {
        obj.insert(QString("Jahr"), ::OpenAPI::toJsonValue(m_jahr));
    }
    if (m_monat_isSet) {
        obj.insert(QString("Monat"), ::OpenAPI::toJsonValue(m_monat));
    }
    return obj;
}

QString OAIMonatsbeleg::getBelegUuid() const {
    return m_beleg_uuid;
}
void OAIMonatsbeleg::setBelegUuid(const QString &beleg_uuid) {
    m_beleg_uuid = beleg_uuid;
    m_beleg_uuid_isSet = true;
}

bool OAIMonatsbeleg::is_beleg_uuid_Set() const{
    return m_beleg_uuid_isSet;
}

bool OAIMonatsbeleg::is_beleg_uuid_Valid() const{
    return m_beleg_uuid_isValid;
}

QString OAIMonatsbeleg::getFonGeprueftDatumUhrzeit() const {
    return m_fon_geprueft_datum_uhrzeit;
}
void OAIMonatsbeleg::setFonGeprueftDatumUhrzeit(const QString &fon_geprueft_datum_uhrzeit) {
    m_fon_geprueft_datum_uhrzeit = fon_geprueft_datum_uhrzeit;
    m_fon_geprueft_datum_uhrzeit_isSet = true;
}

bool OAIMonatsbeleg::is_fon_geprueft_datum_uhrzeit_Set() const{
    return m_fon_geprueft_datum_uhrzeit_isSet;
}

bool OAIMonatsbeleg::is_fon_geprueft_datum_uhrzeit_Valid() const{
    return m_fon_geprueft_datum_uhrzeit_isValid;
}

bool OAIMonatsbeleg::isFonGeprueftErfolgreich() const {
    return m_fon_geprueft_erfolgreich;
}
void OAIMonatsbeleg::setFonGeprueftErfolgreich(const bool &fon_geprueft_erfolgreich) {
    m_fon_geprueft_erfolgreich = fon_geprueft_erfolgreich;
    m_fon_geprueft_erfolgreich_isSet = true;
}

bool OAIMonatsbeleg::is_fon_geprueft_erfolgreich_Set() const{
    return m_fon_geprueft_erfolgreich_isSet;
}

bool OAIMonatsbeleg::is_fon_geprueft_erfolgreich_Valid() const{
    return m_fon_geprueft_erfolgreich_isValid;
}

qint32 OAIMonatsbeleg::getJahr() const {
    return m_jahr;
}
void OAIMonatsbeleg::setJahr(const qint32 &jahr) {
    m_jahr = jahr;
    m_jahr_isSet = true;
}

bool OAIMonatsbeleg::is_jahr_Set() const{
    return m_jahr_isSet;
}

bool OAIMonatsbeleg::is_jahr_Valid() const{
    return m_jahr_isValid;
}

qint32 OAIMonatsbeleg::getMonat() const {
    return m_monat;
}
void OAIMonatsbeleg::setMonat(const qint32 &monat) {
    m_monat = monat;
    m_monat_isSet = true;
}

bool OAIMonatsbeleg::is_monat_Set() const{
    return m_monat_isSet;
}

bool OAIMonatsbeleg::is_monat_Valid() const{
    return m_monat_isValid;
}

bool OAIMonatsbeleg::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_beleg_uuid_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_fon_geprueft_datum_uhrzeit_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_fon_geprueft_erfolgreich_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_jahr_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_monat_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIMonatsbeleg::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
