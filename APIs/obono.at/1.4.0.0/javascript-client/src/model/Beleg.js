/**
 * obono RKSV API
 * Provides a RESTful API for interacting with virtual cash registers and creating receipts that are conform with the Registrierkassensicherheitsverordnung (RKSV).  You may find our [automatically generated clients](./clients) for various programming languages and environments helpful... 
 *
 * The version of the OpenAPI document: 1.4.0.0
 * Contact: info@obono.at
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import SignierteBelegdaten from './SignierteBelegdaten';

/**
 * The Beleg model module.
 * @module model/Beleg
 * @version 1.4.0.0
 */
class Beleg {
    /**
     * Constructs a new <code>Beleg</code>.
     * @alias module:model/Beleg
     */
    constructor() { 
        
        Beleg.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>Beleg</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Beleg} obj Optional instance to populate.
     * @return {module:model/Beleg} The populated <code>Beleg</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Beleg();

            if (data.hasOwnProperty('Beleg-Codes')) {
                obj['Beleg-Codes'] = ApiClient.convertToType(data['Beleg-Codes'], ['String']);
            }
            if (data.hasOwnProperty('Beleg-Typen')) {
                obj['Beleg-Typen'] = ApiClient.convertToType(data['Beleg-Typen'], ['String']);
            }
            if (data.hasOwnProperty('Belegdaten')) {
                obj['Belegdaten'] = SignierteBelegdaten.constructFromObject(data['Belegdaten']);
            }
            if (data.hasOwnProperty('JWS')) {
                obj['JWS'] = ApiClient.convertToType(data['JWS'], 'String');
            }
            if (data.hasOwnProperty('QR')) {
                obj['QR'] = ApiClient.convertToType(data['QR'], 'String');
            }
            if (data.hasOwnProperty('QR-Link')) {
                obj['QR-Link'] = ApiClient.convertToType(data['QR-Link'], 'String');
            }
            if (data.hasOwnProperty('Registrierkasse-UUID')) {
                obj['Registrierkasse-UUID'] = ApiClient.convertToType(data['Registrierkasse-UUID'], 'String');
            }
            if (data.hasOwnProperty('Signaturerstellungseinheit-UUID')) {
                obj['Signaturerstellungseinheit-UUID'] = ApiClient.convertToType(data['Signaturerstellungseinheit-UUID'], 'String');
            }
            if (data.hasOwnProperty('_href')) {
                obj['_href'] = ApiClient.convertToType(data['_href'], 'String');
            }
            if (data.hasOwnProperty('_uuid')) {
                obj['_uuid'] = ApiClient.convertToType(data['_uuid'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Beleg</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Beleg</code>.
     */
    static validateJSON(data) {
        // ensure the json data is an array
        if (!Array.isArray(data['Beleg-Codes'])) {
            throw new Error("Expected the field `Beleg-Codes` to be an array in the JSON data but got " + data['Beleg-Codes']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['Beleg-Typen'])) {
            throw new Error("Expected the field `Beleg-Typen` to be an array in the JSON data but got " + data['Beleg-Typen']);
        }
        // validate the optional field `Belegdaten`
        if (data['Belegdaten']) { // data not null
          SignierteBelegdaten.validateJSON(data['Belegdaten']);
        }
        // ensure the json data is a string
        if (data['JWS'] && !(typeof data['JWS'] === 'string' || data['JWS'] instanceof String)) {
            throw new Error("Expected the field `JWS` to be a primitive type in the JSON string but got " + data['JWS']);
        }
        // ensure the json data is a string
        if (data['QR'] && !(typeof data['QR'] === 'string' || data['QR'] instanceof String)) {
            throw new Error("Expected the field `QR` to be a primitive type in the JSON string but got " + data['QR']);
        }
        // ensure the json data is a string
        if (data['QR-Link'] && !(typeof data['QR-Link'] === 'string' || data['QR-Link'] instanceof String)) {
            throw new Error("Expected the field `QR-Link` to be a primitive type in the JSON string but got " + data['QR-Link']);
        }
        // ensure the json data is a string
        if (data['Registrierkasse-UUID'] && !(typeof data['Registrierkasse-UUID'] === 'string' || data['Registrierkasse-UUID'] instanceof String)) {
            throw new Error("Expected the field `Registrierkasse-UUID` to be a primitive type in the JSON string but got " + data['Registrierkasse-UUID']);
        }
        // ensure the json data is a string
        if (data['Signaturerstellungseinheit-UUID'] && !(typeof data['Signaturerstellungseinheit-UUID'] === 'string' || data['Signaturerstellungseinheit-UUID'] instanceof String)) {
            throw new Error("Expected the field `Signaturerstellungseinheit-UUID` to be a primitive type in the JSON string but got " + data['Signaturerstellungseinheit-UUID']);
        }
        // ensure the json data is a string
        if (data['_href'] && !(typeof data['_href'] === 'string' || data['_href'] instanceof String)) {
            throw new Error("Expected the field `_href` to be a primitive type in the JSON string but got " + data['_href']);
        }
        // ensure the json data is a string
        if (data['_uuid'] && !(typeof data['_uuid'] === 'string' || data['_uuid'] instanceof String)) {
            throw new Error("Expected the field `_uuid` to be a primitive type in the JSON string but got " + data['_uuid']);
        }

        return true;
    }


}



/**
 * @member {Array.<String>} Beleg-Codes
 */
Beleg.prototype['Beleg-Codes'] = undefined;

/**
 * @member {Array.<module:model/Beleg.BelegTypenEnum>} Beleg-Typen
 */
Beleg.prototype['Beleg-Typen'] = undefined;

/**
 * @member {module:model/SignierteBelegdaten} Belegdaten
 */
Beleg.prototype['Belegdaten'] = undefined;

/**
 * The signed `Beleg` as a JWS signature token.
 * @member {String} JWS
 */
Beleg.prototype['JWS'] = undefined;

/**
 * The portion of the `JWS` token to be used for generating QR codes.
 * @member {String} QR
 */
Beleg.prototype['QR'] = undefined;

/**
 * A hyperlink that retrieves the `QR` data.
 * @member {String} QR-Link
 */
Beleg.prototype['QR-Link'] = undefined;

/**
 * The `_uuid` of the `Registrierkasse` that has issued this `Beleg`.
 * @member {String} Registrierkasse-UUID
 */
Beleg.prototype['Registrierkasse-UUID'] = undefined;

/**
 * The `_uuid` of the `Signaturerstellungseinheit` that has signed this `Beleg`.
 * @member {String} Signaturerstellungseinheit-UUID
 */
Beleg.prototype['Signaturerstellungseinheit-UUID'] = undefined;

/**
 * URL of the particular `Beleg` instance.
 * @member {String} _href
 */
Beleg.prototype['_href'] = undefined;

/**
 * Unique ID of the particular `Beleg` instance.
 * @member {String} _uuid
 */
Beleg.prototype['_uuid'] = undefined;





/**
 * Allowed values for the <code>belegTypen</code> property.
 * @enum {String}
 * @readonly
 */
Beleg['BelegTypenEnum'] = {

    /**
     * value: "Belegkreisinitialisierung"
     * @const
     */
    "Belegkreisinitialisierung": "Belegkreisinitialisierung",

    /**
     * value: "Kassenbericht"
     * @const
     */
    "Kassenbericht": "Kassenbericht",

    /**
     * value: "Monatsabschluss"
     * @const
     */
    "Monatsabschluss": "Monatsabschluss",

    /**
     * value: "Startbeleg"
     * @const
     */
    "Startbeleg": "Startbeleg",

    /**
     * value: "Storno"
     * @const
     */
    "Storno": "Storno",

    /**
     * value: "Systembeleg"
     * @const
     */
    "Systembeleg": "Systembeleg",

    /**
     * value: "Training"
     * @const
     */
    "Training": "Training"
};



export default Beleg;

