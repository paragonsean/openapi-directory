/**
 * obono RKSV API
 * Provides a RESTful API for interacting with virtual cash registers and creating receipts that are conform with the Registrierkassensicherheitsverordnung (RKSV).  You may find our [automatically generated clients](./clients) for various programming languages and environments helpful... 
 *
 * The version of the OpenAPI document: 1.4.0.0
 * Contact: info@obono.at
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The Rabatt model module.
 * @module model/Rabatt
 * @version 1.4.0.0
 */
class Rabatt {
    /**
     * Constructs a new <code>Rabatt</code>.
     * @alias module:model/Rabatt
     * @param betragBrutto {Number} The amount in cents
     * @param betragNetto {Number} The amount in cents
     * @param bezeichnung {String} 
     */
    constructor(betragBrutto, betragNetto, bezeichnung) { 
        
        Rabatt.initialize(this, betragBrutto, betragNetto, bezeichnung);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, betragBrutto, betragNetto, bezeichnung) { 
        obj['Betrag-Brutto'] = betragBrutto;
        obj['Betrag-Netto'] = betragNetto;
        obj['Bezeichnung'] = bezeichnung;
    }

    /**
     * Constructs a <code>Rabatt</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Rabatt} obj Optional instance to populate.
     * @return {module:model/Rabatt} The populated <code>Rabatt</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Rabatt();

            if (data.hasOwnProperty('Betrag-Brutto')) {
                obj['Betrag-Brutto'] = ApiClient.convertToType(data['Betrag-Brutto'], 'Number');
            }
            if (data.hasOwnProperty('Betrag-Netto')) {
                obj['Betrag-Netto'] = ApiClient.convertToType(data['Betrag-Netto'], 'Number');
            }
            if (data.hasOwnProperty('Bezeichnung')) {
                obj['Bezeichnung'] = ApiClient.convertToType(data['Bezeichnung'], 'String');
            }
            if (data.hasOwnProperty('Satz')) {
                obj['Satz'] = ApiClient.convertToType(data['Satz'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Rabatt</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Rabatt</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of Rabatt.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['Bezeichnung'] && !(typeof data['Bezeichnung'] === 'string' || data['Bezeichnung'] instanceof String)) {
            throw new Error("Expected the field `Bezeichnung` to be a primitive type in the JSON string but got " + data['Bezeichnung']);
        }
        // ensure the json data is a string
        if (data['Satz'] && !(typeof data['Satz'] === 'string' || data['Satz'] instanceof String)) {
            throw new Error("Expected the field `Satz` to be a primitive type in the JSON string but got " + data['Satz']);
        }

        return true;
    }


}

Rabatt.RequiredProperties = ["Betrag-Brutto", "Betrag-Netto", "Bezeichnung"];

/**
 * The amount in cents
 * @member {Number} Betrag-Brutto
 */
Rabatt.prototype['Betrag-Brutto'] = undefined;

/**
 * The amount in cents
 * @member {Number} Betrag-Netto
 */
Rabatt.prototype['Betrag-Netto'] = undefined;

/**
 * @member {String} Bezeichnung
 */
Rabatt.prototype['Bezeichnung'] = undefined;

/**
 * @member {module:model/Rabatt.SatzEnum} Satz
 */
Rabatt.prototype['Satz'] = undefined;





/**
 * Allowed values for the <code>Satz</code> property.
 * @enum {String}
 * @readonly
 */
Rabatt['SatzEnum'] = {

    /**
     * value: "NORMAL"
     * @const
     */
    "NORMAL": "NORMAL",

    /**
     * value: "ERMAESSIGT1"
     * @const
     */
    "ERMAESSIGT1": "ERMAESSIGT1",

    /**
     * value: "ERMAESSIGT2"
     * @const
     */
    "ERMAESSIGT2": "ERMAESSIGT2",

    /**
     * value: "BESONDERS"
     * @const
     */
    "BESONDERS": "BESONDERS",

    /**
     * value: "NULL"
     * @const
     */
    "NULL": "NULL"
};



export default Rabatt;

