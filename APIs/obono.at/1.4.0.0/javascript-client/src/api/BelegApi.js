/**
 * obono RKSV API
 * Provides a RESTful API for interacting with virtual cash registers and creating receipts that are conform with the Registrierkassensicherheitsverordnung (RKSV).  You may find our [automatically generated clients](./clients) for various programming languages and environments helpful... 
 *
 * The version of the OpenAPI document: 1.4.0.0
 * Contact: info@obono.at
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import Abschlussbelegdaten from '../model/Abschlussbelegdaten';
import Beleg from '../model/Beleg';
import Belegdaten from '../model/Belegdaten';
import Belege from '../model/Belege';

/**
* Beleg service.
* @module api/BelegApi
* @version 1.4.0.0
*/
export default class BelegApi {

    /**
    * Constructs a new BelegApi. 
    * @alias module:api/BelegApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the addBeleg operation.
     * @callback module:api/BelegApi~addBelegCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Signs a receipt and stores it in the \"Datenerfassungsprotokoll\".
     * @param {String} registrierkasseUuid The `_uuid` of the `Registrierkasse` to use for signing data.
     * @param {String} belegUuid The `_uuid` of the `Beleg` to store.
     * @param {module:model/Belegdaten} belegdaten An object that contains all data for a particular `Beleg` and is formatted according to RKSV \"Signaturformat\".
     * @param {module:api/BelegApi~addBelegCallback} callback The callback function, accepting three arguments: error, data, response
     */
    addBeleg(registrierkasseUuid, belegUuid, belegdaten, callback) {
      let postBody = belegdaten;
      // verify the required parameter 'registrierkasseUuid' is set
      if (registrierkasseUuid === undefined || registrierkasseUuid === null) {
        throw new Error("Missing the required parameter 'registrierkasseUuid' when calling addBeleg");
      }
      // verify the required parameter 'belegUuid' is set
      if (belegUuid === undefined || belegUuid === null) {
        throw new Error("Missing the required parameter 'belegUuid' when calling addBeleg");
      }
      // verify the required parameter 'belegdaten' is set
      if (belegdaten === undefined || belegdaten === null) {
        throw new Error("Missing the required parameter 'belegdaten' when calling addBeleg");
      }

      let pathParams = {
        'registrierkasseUuid': registrierkasseUuid,
        'belegUuid': belegUuid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['jwt'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/registrierkassen/{registrierkasseUuid}/belege/{belegUuid}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the belegeBelegUuidGet operation.
     * @callback module:api/BelegApi~belegeBelegUuidGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Beleg} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieves a particular `Beleg` from the \"Datenerfassungsprotokoll\".
     * @param {String} belegUuid The `_uuid` of the `Beleg` to fetch.
     * @param {module:api/BelegApi~belegeBelegUuidGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Beleg}
     */
    belegeBelegUuidGet(belegUuid, callback) {
      let postBody = null;
      // verify the required parameter 'belegUuid' is set
      if (belegUuid === undefined || belegUuid === null) {
        throw new Error("Missing the required parameter 'belegUuid' when calling belegeBelegUuidGet");
      }

      let pathParams = {
        'belegUuid': belegUuid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Beleg;
      return this.apiClient.callApi(
        '/belege/{belegUuid}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createAbschluss operation.
     * @callback module:api/BelegApi~createAbschlussCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Generates an `Abschlussbeleg`.
     * @param {String} registrierkasseUuid The `_uuid` of the `Registrierkasse` to retrieve the `Beleg` collection.
     * @param {module:model/Abschlussbelegdaten} abschlussbelegdaten An object that contains all data for a particular `Abschlussbeleg`.
     * @param {module:api/BelegApi~createAbschlussCallback} callback The callback function, accepting three arguments: error, data, response
     */
    createAbschluss(registrierkasseUuid, abschlussbelegdaten, callback) {
      let postBody = abschlussbelegdaten;
      // verify the required parameter 'registrierkasseUuid' is set
      if (registrierkasseUuid === undefined || registrierkasseUuid === null) {
        throw new Error("Missing the required parameter 'registrierkasseUuid' when calling createAbschluss");
      }
      // verify the required parameter 'abschlussbelegdaten' is set
      if (abschlussbelegdaten === undefined || abschlussbelegdaten === null) {
        throw new Error("Missing the required parameter 'abschlussbelegdaten' when calling createAbschluss");
      }

      let pathParams = {
        'registrierkasseUuid': registrierkasseUuid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['jwt'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/registrierkassen/{registrierkasseUuid}/abschluss', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getBeleg operation.
     * @callback module:api/BelegApi~getBelegCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Beleg} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieves a particular `Beleg` from the \"Datenerfassungsprotokoll\".
     * @param {String} registrierkasseUuid The `_uuid` of the `Registrierkasse` that contains the requested `Beleg`.
     * @param {String} belegUuid The `_uuid` of the `Beleg` to fetch.
     * @param {module:api/BelegApi~getBelegCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Beleg}
     */
    getBeleg(registrierkasseUuid, belegUuid, callback) {
      let postBody = null;
      // verify the required parameter 'registrierkasseUuid' is set
      if (registrierkasseUuid === undefined || registrierkasseUuid === null) {
        throw new Error("Missing the required parameter 'registrierkasseUuid' when calling getBeleg");
      }
      // verify the required parameter 'belegUuid' is set
      if (belegUuid === undefined || belegUuid === null) {
        throw new Error("Missing the required parameter 'belegUuid' when calling getBeleg");
      }

      let pathParams = {
        'registrierkasseUuid': registrierkasseUuid,
        'belegUuid': belegUuid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['jwt'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Beleg;
      return this.apiClient.callApi(
        '/registrierkassen/{registrierkasseUuid}/belege/{belegUuid}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getBelege operation.
     * @callback module:api/BelegApi~getBelegeCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Belege} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieves the `Beleg` collection from the \"Datenerfassungsprotokoll\".
     * @param {String} registrierkasseUuid The `_uuid` of the `Registrierkasse` to retrieve the `Beleg` collection.
     * @param {module:model/String} format Determines the format of the `Beleg` collection.
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [order = 'asc')] Determines the sorting order.
     * @param {Number} [limit] Limits the number of returned results.
     * @param {Number} [offset = 0)] Skips the specified number of results from the result set.
     * @param {String} [before] Only return results that where saved before the specified date-time string (i.e., anything that `Date.parse()` can parse).
     * @param {String} [after] Only return results that where saved after the specified date-time string (i.e., anything that `Date.parse()` can parse).
     * @param {Number} [gte] Only return results that have at least a particular `Belegnummer`.
     * @param {Number} [lte] Only return results that have at most a particular `Belegnummer`.
     * @param {module:api/BelegApi~getBelegeCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Belege}
     */
    getBelege(registrierkasseUuid, format, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'registrierkasseUuid' is set
      if (registrierkasseUuid === undefined || registrierkasseUuid === null) {
        throw new Error("Missing the required parameter 'registrierkasseUuid' when calling getBelege");
      }
      // verify the required parameter 'format' is set
      if (format === undefined || format === null) {
        throw new Error("Missing the required parameter 'format' when calling getBelege");
      }

      let pathParams = {
        'registrierkasseUuid': registrierkasseUuid
      };
      let queryParams = {
        'format': format,
        'order': opts['order'],
        'limit': opts['limit'],
        'offset': opts['offset'],
        'before': opts['before'],
        'after': opts['after'],
        'gte': opts['gte'],
        'lte': opts['lte']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['jwt'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Belege;
      return this.apiClient.callApi(
        '/registrierkassen/{registrierkasseUuid}/belege', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
