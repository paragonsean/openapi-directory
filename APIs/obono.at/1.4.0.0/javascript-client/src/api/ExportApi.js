/**
 * obono RKSV API
 * Provides a RESTful API for interacting with virtual cash registers and creating receipts that are conform with the Registrierkassensicherheitsverordnung (RKSV).  You may find our [automatically generated clients](./clients) for various programming languages and environments helpful... 
 *
 * The version of the OpenAPI document: 1.4.0.0
 * Contact: info@obono.at
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";

/**
* Export service.
* @module api/ExportApi
* @version 1.4.0.0
*/
export default class ExportApi {

    /**
    * Constructs a new ExportApi. 
    * @alias module:api/ExportApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the exportCsvRegistrierkassenRegistrierkasseUuidBelegeGet operation.
     * @callback module:api/ExportApi~exportCsvRegistrierkassenRegistrierkasseUuidBelegeGetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} registrierkasseUuid The `_uuid` of the `Registrierkasse` to export.
     * @param {Object} opts Optional parameters
     * @param {String} [before] Only return results that were saved before the specified date-time string (i.e., anything that `Date.parse()` can parse).
     * @param {String} [after] Only return results that were saved after the specified date-time string (i.e., anything that `Date.parse()` can parse).
     * @param {Boolean} [posten] Export `Posten` instead of `Belegdaten`.
     * @param {module:api/ExportApi~exportCsvRegistrierkassenRegistrierkasseUuidBelegeGetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    exportCsvRegistrierkassenRegistrierkasseUuidBelegeGet(registrierkasseUuid, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'registrierkasseUuid' is set
      if (registrierkasseUuid === undefined || registrierkasseUuid === null) {
        throw new Error("Missing the required parameter 'registrierkasseUuid' when calling exportCsvRegistrierkassenRegistrierkasseUuidBelegeGet");
      }

      let pathParams = {
        'registrierkasseUuid': registrierkasseUuid
      };
      let queryParams = {
        'before': opts['before'],
        'after': opts['after'],
        'posten': opts['posten']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['jwt'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/export/csv/registrierkassen/{registrierkasseUuid}/belege', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the exportDep131RegistrierkassenRegistrierkasseUuidBelegeGet operation.
     * @callback module:api/ExportApi~exportDep131RegistrierkassenRegistrierkasseUuidBelegeGetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} registrierkasseUuid The `_uuid` of the `Registrierkasse` to export.
     * @param {Object} opts Optional parameters
     * @param {String} [before] Only return results that were saved before the specified date-time string (i.e., anything that `Date.parse()` can parse).
     * @param {String} [after] Only return results that were saved after the specified date-time string (i.e., anything that `Date.parse()` can parse).
     * @param {module:api/ExportApi~exportDep131RegistrierkassenRegistrierkasseUuidBelegeGetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    exportDep131RegistrierkassenRegistrierkasseUuidBelegeGet(registrierkasseUuid, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'registrierkasseUuid' is set
      if (registrierkasseUuid === undefined || registrierkasseUuid === null) {
        throw new Error("Missing the required parameter 'registrierkasseUuid' when calling exportDep131RegistrierkassenRegistrierkasseUuidBelegeGet");
      }

      let pathParams = {
        'registrierkasseUuid': registrierkasseUuid
      };
      let queryParams = {
        'before': opts['before'],
        'after': opts['after']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['jwt'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/export/dep131/registrierkassen/{registrierkasseUuid}/belege', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the exportDep7RegistrierkassenRegistrierkasseUuidBelegeGet operation.
     * @callback module:api/ExportApi~exportDep7RegistrierkassenRegistrierkasseUuidBelegeGetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} registrierkasseUuid The `_uuid` of the `Registrierkasse` to export.
     * @param {Object} opts Optional parameters
     * @param {String} [before] Only return results that were saved before the specified date-time string (i.e., anything that `Date.parse()` can parse).
     * @param {String} [after] Only return results that were saved after the specified date-time string (i.e., anything that `Date.parse()` can parse).
     * @param {module:api/ExportApi~exportDep7RegistrierkassenRegistrierkasseUuidBelegeGetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    exportDep7RegistrierkassenRegistrierkasseUuidBelegeGet(registrierkasseUuid, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'registrierkasseUuid' is set
      if (registrierkasseUuid === undefined || registrierkasseUuid === null) {
        throw new Error("Missing the required parameter 'registrierkasseUuid' when calling exportDep7RegistrierkassenRegistrierkasseUuidBelegeGet");
      }

      let pathParams = {
        'registrierkasseUuid': registrierkasseUuid
      };
      let queryParams = {
        'before': opts['before'],
        'after': opts['after']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['jwt'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/export/dep7/registrierkassen/{registrierkasseUuid}/belege', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the exportGobdRegistrierkassenRegistrierkasseUuidGet operation.
     * @callback module:api/ExportApi~exportGobdRegistrierkassenRegistrierkasseUuidGetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} registrierkasseUuid The `_uuid` of the `Registrierkasse` to export.
     * @param {Object} opts Optional parameters
     * @param {String} [before] Only return results that were saved before the specified date-time string (i.e., anything that `Date.parse()` can parse).
     * @param {String} [after] Only return results that were saved after the specified date-time string (i.e., anything that `Date.parse()` can parse).
     * @param {module:api/ExportApi~exportGobdRegistrierkassenRegistrierkasseUuidGetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    exportGobdRegistrierkassenRegistrierkasseUuidGet(registrierkasseUuid, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'registrierkasseUuid' is set
      if (registrierkasseUuid === undefined || registrierkasseUuid === null) {
        throw new Error("Missing the required parameter 'registrierkasseUuid' when calling exportGobdRegistrierkassenRegistrierkasseUuidGet");
      }

      let pathParams = {
        'registrierkasseUuid': registrierkasseUuid
      };
      let queryParams = {
        'before': opts['before'],
        'after': opts['after']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['jwt'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/export/gobd/registrierkassen/{registrierkasseUuid}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the exportHtmlBelegeBelegUuidGet operation.
     * @callback module:api/ExportApi~exportHtmlBelegeBelegUuidGetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} belegUuid The `_uuid` of a particular `Beleg` to export.
     * @param {module:api/ExportApi~exportHtmlBelegeBelegUuidGetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    exportHtmlBelegeBelegUuidGet(belegUuid, callback) {
      let postBody = null;
      // verify the required parameter 'belegUuid' is set
      if (belegUuid === undefined || belegUuid === null) {
        throw new Error("Missing the required parameter 'belegUuid' when calling exportHtmlBelegeBelegUuidGet");
      }

      let pathParams = {
        'belegUuid': belegUuid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/export/html/belege/{belegUuid}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the exportPdfBelegeBelegUuidGet operation.
     * @callback module:api/ExportApi~exportPdfBelegeBelegUuidGetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} belegUuid The `_uuid` of a particular `Beleg` to export.
     * @param {module:api/ExportApi~exportPdfBelegeBelegUuidGetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    exportPdfBelegeBelegUuidGet(belegUuid, callback) {
      let postBody = null;
      // verify the required parameter 'belegUuid' is set
      if (belegUuid === undefined || belegUuid === null) {
        throw new Error("Missing the required parameter 'belegUuid' when calling exportPdfBelegeBelegUuidGet");
      }

      let pathParams = {
        'belegUuid': belegUuid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/export/pdf/belege/{belegUuid}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the exportQrBelegeBelegUuidGet operation.
     * @callback module:api/ExportApi~exportQrBelegeBelegUuidGetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} belegUuid The `_uuid` of a particular `Beleg` to export.
     * @param {module:api/ExportApi~exportQrBelegeBelegUuidGetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    exportQrBelegeBelegUuidGet(belegUuid, callback) {
      let postBody = null;
      // verify the required parameter 'belegUuid' is set
      if (belegUuid === undefined || belegUuid === null) {
        throw new Error("Missing the required parameter 'belegUuid' when calling exportQrBelegeBelegUuidGet");
      }

      let pathParams = {
        'belegUuid': belegUuid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/export/qr/belege/{belegUuid}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the exportThermalPrintBelegeBelegUuidGet operation.
     * @callback module:api/ExportApi~exportThermalPrintBelegeBelegUuidGetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} belegUuid The `_uuid` of a particular `Beleg` to export.
     * @param {Object} opts Optional parameters
     * @param {Boolean} [qr = true)] Should the RKSV QR code should be rendered?
     * @param {Number} [width = 42)] Number of characters per line.
     * @param {module:model/String} [dialect = 'escpos')] The thermal printer dialect.
     * @param {module:model/String} [encoding = 'raw')] The encoding of the binary data.
     * @param {module:api/ExportApi~exportThermalPrintBelegeBelegUuidGetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    exportThermalPrintBelegeBelegUuidGet(belegUuid, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'belegUuid' is set
      if (belegUuid === undefined || belegUuid === null) {
        throw new Error("Missing the required parameter 'belegUuid' when calling exportThermalPrintBelegeBelegUuidGet");
      }

      let pathParams = {
        'belegUuid': belegUuid
      };
      let queryParams = {
        'qr': opts['qr'],
        'width': opts['width'],
        'dialect': opts['dialect'],
        'encoding': opts['encoding']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/export/thermal-print/belege/{belegUuid}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the exportXlsRegistrierkassenRegistrierkasseUuidBelegeGet operation.
     * @callback module:api/ExportApi~exportXlsRegistrierkassenRegistrierkasseUuidBelegeGetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} registrierkasseUuid The `_uuid` of the `Registrierkasse` to export.
     * @param {Object} opts Optional parameters
     * @param {String} [before] Only return results that were saved before the specified date-time string (i.e., anything that `Date.parse()` can parse).
     * @param {String} [after] Only return results that were saved after the specified date-time string (i.e., anything that `Date.parse()` can parse).
     * @param {module:api/ExportApi~exportXlsRegistrierkassenRegistrierkasseUuidBelegeGetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    exportXlsRegistrierkassenRegistrierkasseUuidBelegeGet(registrierkasseUuid, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'registrierkasseUuid' is set
      if (registrierkasseUuid === undefined || registrierkasseUuid === null) {
        throw new Error("Missing the required parameter 'registrierkasseUuid' when calling exportXlsRegistrierkassenRegistrierkasseUuidBelegeGet");
      }

      let pathParams = {
        'registrierkasseUuid': registrierkasseUuid
      };
      let queryParams = {
        'before': opts['before'],
        'after': opts['after']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['jwt'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/export/xls/registrierkassen/{registrierkasseUuid}/belege', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
