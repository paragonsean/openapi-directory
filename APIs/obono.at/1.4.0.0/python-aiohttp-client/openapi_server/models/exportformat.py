# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.exportformat_belege_gruppe_inner import ExportformatBelegeGruppeInner
from openapi_server import util


class Exportformat(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, belege_gruppe: List[ExportformatBelegeGruppeInner]=None):
        """Exportformat - a model defined in OpenAPI

        :param belege_gruppe: The belege_gruppe of this Exportformat.
        """
        self.openapi_types = {
            'belege_gruppe': List[ExportformatBelegeGruppeInner]
        }

        self.attribute_map = {
            'belege_gruppe': 'Belege-Gruppe'
        }

        self._belege_gruppe = belege_gruppe

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Exportformat':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Exportformat of this Exportformat.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def belege_gruppe(self):
        """Gets the belege_gruppe of this Exportformat.


        :return: The belege_gruppe of this Exportformat.
        :rtype: List[ExportformatBelegeGruppeInner]
        """
        return self._belege_gruppe

    @belege_gruppe.setter
    def belege_gruppe(self, belege_gruppe):
        """Sets the belege_gruppe of this Exportformat.


        :param belege_gruppe: The belege_gruppe of this Exportformat.
        :type belege_gruppe: List[ExportformatBelegeGruppeInner]
        """
        if belege_gruppe is not None and len(belege_gruppe) < 1:
            raise ValueError("Invalid value for `belege_gruppe`, number of items must be greater than or equal to `1`")

        self._belege_gruppe = belege_gruppe
