# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class Posten(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, bezeichnung: str=None, brutto_betrag: int=None, externer_beleg_belegkreis: str=None, externer_beleg_bezeichnung: str=None, externer_beleg_referenz: str=None, menge: int=None, netto_betrag: int=None, satz: str=None):
        """Posten - a model defined in OpenAPI

        :param bezeichnung: The bezeichnung of this Posten.
        :param brutto_betrag: The brutto_betrag of this Posten.
        :param externer_beleg_belegkreis: The externer_beleg_belegkreis of this Posten.
        :param externer_beleg_bezeichnung: The externer_beleg_bezeichnung of this Posten.
        :param externer_beleg_referenz: The externer_beleg_referenz of this Posten.
        :param menge: The menge of this Posten.
        :param netto_betrag: The netto_betrag of this Posten.
        :param satz: The satz of this Posten.
        """
        self.openapi_types = {
            'bezeichnung': str,
            'brutto_betrag': int,
            'externer_beleg_belegkreis': str,
            'externer_beleg_bezeichnung': str,
            'externer_beleg_referenz': str,
            'menge': int,
            'netto_betrag': int,
            'satz': str
        }

        self.attribute_map = {
            'bezeichnung': 'Bezeichnung',
            'brutto_betrag': 'BruttoBetrag',
            'externer_beleg_belegkreis': 'Externer-Beleg-Belegkreis',
            'externer_beleg_bezeichnung': 'Externer-Beleg-Bezeichnung',
            'externer_beleg_referenz': 'Externer-Beleg-Referenz',
            'menge': 'Menge',
            'netto_betrag': 'NettoBetrag',
            'satz': 'Satz'
        }

        self._bezeichnung = bezeichnung
        self._brutto_betrag = brutto_betrag
        self._externer_beleg_belegkreis = externer_beleg_belegkreis
        self._externer_beleg_bezeichnung = externer_beleg_bezeichnung
        self._externer_beleg_referenz = externer_beleg_referenz
        self._menge = menge
        self._netto_betrag = netto_betrag
        self._satz = satz

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Posten':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Posten of this Posten.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def bezeichnung(self):
        """Gets the bezeichnung of this Posten.


        :return: The bezeichnung of this Posten.
        :rtype: str
        """
        return self._bezeichnung

    @bezeichnung.setter
    def bezeichnung(self, bezeichnung):
        """Sets the bezeichnung of this Posten.


        :param bezeichnung: The bezeichnung of this Posten.
        :type bezeichnung: str
        """
        if bezeichnung is None:
            raise ValueError("Invalid value for `bezeichnung`, must not be `None`")

        self._bezeichnung = bezeichnung

    @property
    def brutto_betrag(self):
        """Gets the brutto_betrag of this Posten.

        The amount in cents

        :return: The brutto_betrag of this Posten.
        :rtype: int
        """
        return self._brutto_betrag

    @brutto_betrag.setter
    def brutto_betrag(self, brutto_betrag):
        """Sets the brutto_betrag of this Posten.

        The amount in cents

        :param brutto_betrag: The brutto_betrag of this Posten.
        :type brutto_betrag: int
        """
        if brutto_betrag is None:
            raise ValueError("Invalid value for `brutto_betrag`, must not be `None`")

        self._brutto_betrag = brutto_betrag

    @property
    def externer_beleg_belegkreis(self):
        """Gets the externer_beleg_belegkreis of this Posten.


        :return: The externer_beleg_belegkreis of this Posten.
        :rtype: str
        """
        return self._externer_beleg_belegkreis

    @externer_beleg_belegkreis.setter
    def externer_beleg_belegkreis(self, externer_beleg_belegkreis):
        """Sets the externer_beleg_belegkreis of this Posten.


        :param externer_beleg_belegkreis: The externer_beleg_belegkreis of this Posten.
        :type externer_beleg_belegkreis: str
        """

        self._externer_beleg_belegkreis = externer_beleg_belegkreis

    @property
    def externer_beleg_bezeichnung(self):
        """Gets the externer_beleg_bezeichnung of this Posten.


        :return: The externer_beleg_bezeichnung of this Posten.
        :rtype: str
        """
        return self._externer_beleg_bezeichnung

    @externer_beleg_bezeichnung.setter
    def externer_beleg_bezeichnung(self, externer_beleg_bezeichnung):
        """Sets the externer_beleg_bezeichnung of this Posten.


        :param externer_beleg_bezeichnung: The externer_beleg_bezeichnung of this Posten.
        :type externer_beleg_bezeichnung: str
        """

        self._externer_beleg_bezeichnung = externer_beleg_bezeichnung

    @property
    def externer_beleg_referenz(self):
        """Gets the externer_beleg_referenz of this Posten.


        :return: The externer_beleg_referenz of this Posten.
        :rtype: str
        """
        return self._externer_beleg_referenz

    @externer_beleg_referenz.setter
    def externer_beleg_referenz(self, externer_beleg_referenz):
        """Sets the externer_beleg_referenz of this Posten.


        :param externer_beleg_referenz: The externer_beleg_referenz of this Posten.
        :type externer_beleg_referenz: str
        """

        self._externer_beleg_referenz = externer_beleg_referenz

    @property
    def menge(self):
        """Gets the menge of this Posten.


        :return: The menge of this Posten.
        :rtype: int
        """
        return self._menge

    @menge.setter
    def menge(self, menge):
        """Sets the menge of this Posten.


        :param menge: The menge of this Posten.
        :type menge: int
        """
        if menge is None:
            raise ValueError("Invalid value for `menge`, must not be `None`")

        self._menge = menge

    @property
    def netto_betrag(self):
        """Gets the netto_betrag of this Posten.

        The amount in cents

        :return: The netto_betrag of this Posten.
        :rtype: int
        """
        return self._netto_betrag

    @netto_betrag.setter
    def netto_betrag(self, netto_betrag):
        """Sets the netto_betrag of this Posten.

        The amount in cents

        :param netto_betrag: The netto_betrag of this Posten.
        :type netto_betrag: int
        """
        if netto_betrag is None:
            raise ValueError("Invalid value for `netto_betrag`, must not be `None`")

        self._netto_betrag = netto_betrag

    @property
    def satz(self):
        """Gets the satz of this Posten.


        :return: The satz of this Posten.
        :rtype: str
        """
        return self._satz

    @satz.setter
    def satz(self, satz):
        """Sets the satz of this Posten.


        :param satz: The satz of this Posten.
        :type satz: str
        """
        allowed_values = ["NORMAL", "ERMAESSIGT1", "ERMAESSIGT2", "BESONDERS", "NULL"]  # noqa: E501
        if satz not in allowed_values:
            raise ValueError(
                "Invalid value for `satz` ({0}), must be one of {1}"
                .format(satz, allowed_values)
            )

        self._satz = satz
