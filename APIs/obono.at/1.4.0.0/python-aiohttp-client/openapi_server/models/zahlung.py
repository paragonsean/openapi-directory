# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class Zahlung(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, betrag: int=None, bezeichnung: str=None, referenz: str=None):
        """Zahlung - a model defined in OpenAPI

        :param betrag: The betrag of this Zahlung.
        :param bezeichnung: The bezeichnung of this Zahlung.
        :param referenz: The referenz of this Zahlung.
        """
        self.openapi_types = {
            'betrag': int,
            'bezeichnung': str,
            'referenz': str
        }

        self.attribute_map = {
            'betrag': 'Betrag',
            'bezeichnung': 'Bezeichnung',
            'referenz': 'Referenz'
        }

        self._betrag = betrag
        self._bezeichnung = bezeichnung
        self._referenz = referenz

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Zahlung':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Zahlung of this Zahlung.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def betrag(self):
        """Gets the betrag of this Zahlung.

        The amount in cents

        :return: The betrag of this Zahlung.
        :rtype: int
        """
        return self._betrag

    @betrag.setter
    def betrag(self, betrag):
        """Sets the betrag of this Zahlung.

        The amount in cents

        :param betrag: The betrag of this Zahlung.
        :type betrag: int
        """
        if betrag is None:
            raise ValueError("Invalid value for `betrag`, must not be `None`")

        self._betrag = betrag

    @property
    def bezeichnung(self):
        """Gets the bezeichnung of this Zahlung.


        :return: The bezeichnung of this Zahlung.
        :rtype: str
        """
        return self._bezeichnung

    @bezeichnung.setter
    def bezeichnung(self, bezeichnung):
        """Sets the bezeichnung of this Zahlung.


        :param bezeichnung: The bezeichnung of this Zahlung.
        :type bezeichnung: str
        """
        if bezeichnung is None:
            raise ValueError("Invalid value for `bezeichnung`, must not be `None`")

        self._bezeichnung = bezeichnung

    @property
    def referenz(self):
        """Gets the referenz of this Zahlung.


        :return: The referenz of this Zahlung.
        :rtype: str
        """
        return self._referenz

    @referenz.setter
    def referenz(self, referenz):
        """Sets the referenz of this Zahlung.


        :param referenz: The referenz of this Zahlung.
        :type referenz: str
        """

        self._referenz = referenz
