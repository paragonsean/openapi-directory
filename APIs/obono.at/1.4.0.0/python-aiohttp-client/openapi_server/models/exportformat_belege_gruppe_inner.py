# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ExportformatBelegeGruppeInner(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, belege_kompakt: List[str]=None, signaturzertifikat: str=None, zertifizierungsstellen: List[str]=None):
        """ExportformatBelegeGruppeInner - a model defined in OpenAPI

        :param belege_kompakt: The belege_kompakt of this ExportformatBelegeGruppeInner.
        :param signaturzertifikat: The signaturzertifikat of this ExportformatBelegeGruppeInner.
        :param zertifizierungsstellen: The zertifizierungsstellen of this ExportformatBelegeGruppeInner.
        """
        self.openapi_types = {
            'belege_kompakt': List[str],
            'signaturzertifikat': str,
            'zertifizierungsstellen': List[str]
        }

        self.attribute_map = {
            'belege_kompakt': 'Belege-kompakt',
            'signaturzertifikat': 'Signaturzertifikat',
            'zertifizierungsstellen': 'Zertifizierungsstellen'
        }

        self._belege_kompakt = belege_kompakt
        self._signaturzertifikat = signaturzertifikat
        self._zertifizierungsstellen = zertifizierungsstellen

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ExportformatBelegeGruppeInner':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Exportformat_Belege_Gruppe_inner of this ExportformatBelegeGruppeInner.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def belege_kompakt(self):
        """Gets the belege_kompakt of this ExportformatBelegeGruppeInner.


        :return: The belege_kompakt of this ExportformatBelegeGruppeInner.
        :rtype: List[str]
        """
        return self._belege_kompakt

    @belege_kompakt.setter
    def belege_kompakt(self, belege_kompakt):
        """Sets the belege_kompakt of this ExportformatBelegeGruppeInner.


        :param belege_kompakt: The belege_kompakt of this ExportformatBelegeGruppeInner.
        :type belege_kompakt: List[str]
        """
        if belege_kompakt is None:
            raise ValueError("Invalid value for `belege_kompakt`, must not be `None`")
        if belege_kompakt is not None and len(belege_kompakt) < 1:
            raise ValueError("Invalid value for `belege_kompakt`, number of items must be greater than or equal to `1`")

        self._belege_kompakt = belege_kompakt

    @property
    def signaturzertifikat(self):
        """Gets the signaturzertifikat of this ExportformatBelegeGruppeInner.


        :return: The signaturzertifikat of this ExportformatBelegeGruppeInner.
        :rtype: str
        """
        return self._signaturzertifikat

    @signaturzertifikat.setter
    def signaturzertifikat(self, signaturzertifikat):
        """Sets the signaturzertifikat of this ExportformatBelegeGruppeInner.


        :param signaturzertifikat: The signaturzertifikat of this ExportformatBelegeGruppeInner.
        :type signaturzertifikat: str
        """
        if signaturzertifikat is None:
            raise ValueError("Invalid value for `signaturzertifikat`, must not be `None`")

        self._signaturzertifikat = signaturzertifikat

    @property
    def zertifizierungsstellen(self):
        """Gets the zertifizierungsstellen of this ExportformatBelegeGruppeInner.


        :return: The zertifizierungsstellen of this ExportformatBelegeGruppeInner.
        :rtype: List[str]
        """
        return self._zertifizierungsstellen

    @zertifizierungsstellen.setter
    def zertifizierungsstellen(self, zertifizierungsstellen):
        """Sets the zertifizierungsstellen of this ExportformatBelegeGruppeInner.


        :param zertifizierungsstellen: The zertifizierungsstellen of this ExportformatBelegeGruppeInner.
        :type zertifizierungsstellen: List[str]
        """
        if zertifizierungsstellen is None:
            raise ValueError("Invalid value for `zertifizierungsstellen`, must not be `None`")
        if zertifizierungsstellen is not None and len(zertifizierungsstellen) < 1:
            raise ValueError("Invalid value for `zertifizierungsstellen`, number of items must be greater than or equal to `1`")

        self._zertifizierungsstellen = zertifizierungsstellen
