/*
 * obono RKSV API
 * Provides a RESTful API for interacting with virtual cash registers and creating receipts that are conform with the Registrierkassensicherheitsverordnung (RKSV).  You may find our [automatically generated clients](./clients) for various programming languages and environments helpful... 
 *
 * The version of the OpenAPI document: 1.4.0.0
 * Contact: info@obono.at
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.util.UUID;
import org.openapitools.client.model.SignierteBelegdaten;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Beleg
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:00:42.053838-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Beleg {
  public static final String SERIALIZED_NAME_BELEG_CODES = "Beleg-Codes";
  @SerializedName(SERIALIZED_NAME_BELEG_CODES)
  private List<String> belegCodes = new ArrayList<>();

  /**
   * Gets or Sets belegTypen
   */
  @JsonAdapter(BelegTypenEnum.Adapter.class)
  public enum BelegTypenEnum {
    BELEGKREISINITIALISIERUNG("Belegkreisinitialisierung"),
    
    KASSENBERICHT("Kassenbericht"),
    
    MONATSABSCHLUSS("Monatsabschluss"),
    
    STARTBELEG("Startbeleg"),
    
    STORNO("Storno"),
    
    SYSTEMBELEG("Systembeleg"),
    
    TRAINING("Training");

    private String value;

    BelegTypenEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static BelegTypenEnum fromValue(String value) {
      for (BelegTypenEnum b : BelegTypenEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<BelegTypenEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final BelegTypenEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public BelegTypenEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return BelegTypenEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      BelegTypenEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_BELEG_TYPEN = "Beleg-Typen";
  @SerializedName(SERIALIZED_NAME_BELEG_TYPEN)
  private List<BelegTypenEnum> belegTypen = new ArrayList<>();

  public static final String SERIALIZED_NAME_BELEGDATEN = "Belegdaten";
  @SerializedName(SERIALIZED_NAME_BELEGDATEN)
  private SignierteBelegdaten belegdaten;

  public static final String SERIALIZED_NAME_J_W_S = "JWS";
  @SerializedName(SERIALIZED_NAME_J_W_S)
  private String JWS;

  public static final String SERIALIZED_NAME_Q_R = "QR";
  @SerializedName(SERIALIZED_NAME_Q_R)
  private String QR;

  public static final String SERIALIZED_NAME_QR_LINK = "QR-Link";
  @SerializedName(SERIALIZED_NAME_QR_LINK)
  private String qrLink;

  public static final String SERIALIZED_NAME_REGISTRIERKASSE_U_U_I_D = "Registrierkasse-UUID";
  @SerializedName(SERIALIZED_NAME_REGISTRIERKASSE_U_U_I_D)
  private UUID registrierkasseUUID;

  public static final String SERIALIZED_NAME_SIGNATURERSTELLUNGSEINHEIT_U_U_I_D = "Signaturerstellungseinheit-UUID";
  @SerializedName(SERIALIZED_NAME_SIGNATURERSTELLUNGSEINHEIT_U_U_I_D)
  private UUID signaturerstellungseinheitUUID;

  public static final String SERIALIZED_NAME_HREF = "_href";
  @SerializedName(SERIALIZED_NAME_HREF)
  private String href;

  public static final String SERIALIZED_NAME_UUID = "_uuid";
  @SerializedName(SERIALIZED_NAME_UUID)
  private String uuid;

  public Beleg() {
  }

  public Beleg belegCodes(List<String> belegCodes) {
    this.belegCodes = belegCodes;
    return this;
  }

  public Beleg addBelegCodesItem(String belegCodesItem) {
    if (this.belegCodes == null) {
      this.belegCodes = new ArrayList<>();
    }
    this.belegCodes.add(belegCodesItem);
    return this;
  }

  /**
   * Get belegCodes
   * @return belegCodes
   */
  @javax.annotation.Nullable
  public List<String> getBelegCodes() {
    return belegCodes;
  }

  public void setBelegCodes(List<String> belegCodes) {
    this.belegCodes = belegCodes;
  }


  public Beleg belegTypen(List<BelegTypenEnum> belegTypen) {
    this.belegTypen = belegTypen;
    return this;
  }

  public Beleg addBelegTypenItem(BelegTypenEnum belegTypenItem) {
    if (this.belegTypen == null) {
      this.belegTypen = new ArrayList<>();
    }
    this.belegTypen.add(belegTypenItem);
    return this;
  }

  /**
   * Get belegTypen
   * @return belegTypen
   */
  @javax.annotation.Nullable
  public List<BelegTypenEnum> getBelegTypen() {
    return belegTypen;
  }

  public void setBelegTypen(List<BelegTypenEnum> belegTypen) {
    this.belegTypen = belegTypen;
  }


  public Beleg belegdaten(SignierteBelegdaten belegdaten) {
    this.belegdaten = belegdaten;
    return this;
  }

  /**
   * Get belegdaten
   * @return belegdaten
   */
  @javax.annotation.Nullable
  public SignierteBelegdaten getBelegdaten() {
    return belegdaten;
  }

  public void setBelegdaten(SignierteBelegdaten belegdaten) {
    this.belegdaten = belegdaten;
  }


  public Beleg JWS(String JWS) {
    this.JWS = JWS;
    return this;
  }

  /**
   * The signed &#x60;Beleg&#x60; as a JWS signature token.
   * @return JWS
   */
  @javax.annotation.Nullable
  public String getJWS() {
    return JWS;
  }

  public void setJWS(String JWS) {
    this.JWS = JWS;
  }


  public Beleg QR(String QR) {
    this.QR = QR;
    return this;
  }

  /**
   * The portion of the &#x60;JWS&#x60; token to be used for generating QR codes.
   * @return QR
   */
  @javax.annotation.Nullable
  public String getQR() {
    return QR;
  }

  public void setQR(String QR) {
    this.QR = QR;
  }


  public Beleg qrLink(String qrLink) {
    this.qrLink = qrLink;
    return this;
  }

  /**
   * A hyperlink that retrieves the &#x60;QR&#x60; data.
   * @return qrLink
   */
  @javax.annotation.Nullable
  public String getQrLink() {
    return qrLink;
  }

  public void setQrLink(String qrLink) {
    this.qrLink = qrLink;
  }


  public Beleg registrierkasseUUID(UUID registrierkasseUUID) {
    this.registrierkasseUUID = registrierkasseUUID;
    return this;
  }

  /**
   * The &#x60;_uuid&#x60; of the &#x60;Registrierkasse&#x60; that has issued this &#x60;Beleg&#x60;.
   * @return registrierkasseUUID
   */
  @javax.annotation.Nullable
  public UUID getRegistrierkasseUUID() {
    return registrierkasseUUID;
  }

  public void setRegistrierkasseUUID(UUID registrierkasseUUID) {
    this.registrierkasseUUID = registrierkasseUUID;
  }


  public Beleg signaturerstellungseinheitUUID(UUID signaturerstellungseinheitUUID) {
    this.signaturerstellungseinheitUUID = signaturerstellungseinheitUUID;
    return this;
  }

  /**
   * The &#x60;_uuid&#x60; of the &#x60;Signaturerstellungseinheit&#x60; that has signed this &#x60;Beleg&#x60;.
   * @return signaturerstellungseinheitUUID
   */
  @javax.annotation.Nullable
  public UUID getSignaturerstellungseinheitUUID() {
    return signaturerstellungseinheitUUID;
  }

  public void setSignaturerstellungseinheitUUID(UUID signaturerstellungseinheitUUID) {
    this.signaturerstellungseinheitUUID = signaturerstellungseinheitUUID;
  }


  public Beleg href(String href) {
    this.href = href;
    return this;
  }

  /**
   * URL of the particular &#x60;Beleg&#x60; instance.
   * @return href
   */
  @javax.annotation.Nullable
  public String getHref() {
    return href;
  }

  public void setHref(String href) {
    this.href = href;
  }


  public Beleg uuid(String uuid) {
    this.uuid = uuid;
    return this;
  }

  /**
   * Unique ID of the particular &#x60;Beleg&#x60; instance.
   * @return uuid
   */
  @javax.annotation.Nullable
  public String getUuid() {
    return uuid;
  }

  public void setUuid(String uuid) {
    this.uuid = uuid;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Beleg beleg = (Beleg) o;
    return Objects.equals(this.belegCodes, beleg.belegCodes) &&
        Objects.equals(this.belegTypen, beleg.belegTypen) &&
        Objects.equals(this.belegdaten, beleg.belegdaten) &&
        Objects.equals(this.JWS, beleg.JWS) &&
        Objects.equals(this.QR, beleg.QR) &&
        Objects.equals(this.qrLink, beleg.qrLink) &&
        Objects.equals(this.registrierkasseUUID, beleg.registrierkasseUUID) &&
        Objects.equals(this.signaturerstellungseinheitUUID, beleg.signaturerstellungseinheitUUID) &&
        Objects.equals(this.href, beleg.href) &&
        Objects.equals(this.uuid, beleg.uuid);
  }

  @Override
  public int hashCode() {
    return Objects.hash(belegCodes, belegTypen, belegdaten, JWS, QR, qrLink, registrierkasseUUID, signaturerstellungseinheitUUID, href, uuid);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Beleg {\n");
    sb.append("    belegCodes: ").append(toIndentedString(belegCodes)).append("\n");
    sb.append("    belegTypen: ").append(toIndentedString(belegTypen)).append("\n");
    sb.append("    belegdaten: ").append(toIndentedString(belegdaten)).append("\n");
    sb.append("    JWS: ").append(toIndentedString(JWS)).append("\n");
    sb.append("    QR: ").append(toIndentedString(QR)).append("\n");
    sb.append("    qrLink: ").append(toIndentedString(qrLink)).append("\n");
    sb.append("    registrierkasseUUID: ").append(toIndentedString(registrierkasseUUID)).append("\n");
    sb.append("    signaturerstellungseinheitUUID: ").append(toIndentedString(signaturerstellungseinheitUUID)).append("\n");
    sb.append("    href: ").append(toIndentedString(href)).append("\n");
    sb.append("    uuid: ").append(toIndentedString(uuid)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("Beleg-Codes");
    openapiFields.add("Beleg-Typen");
    openapiFields.add("Belegdaten");
    openapiFields.add("JWS");
    openapiFields.add("QR");
    openapiFields.add("QR-Link");
    openapiFields.add("Registrierkasse-UUID");
    openapiFields.add("Signaturerstellungseinheit-UUID");
    openapiFields.add("_href");
    openapiFields.add("_uuid");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Beleg
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Beleg.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Beleg is not found in the empty JSON string", Beleg.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Beleg.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Beleg` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // ensure the optional json data is an array if present
      if (jsonObj.get("Beleg-Codes") != null && !jsonObj.get("Beleg-Codes").isJsonNull() && !jsonObj.get("Beleg-Codes").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `Beleg-Codes` to be an array in the JSON string but got `%s`", jsonObj.get("Beleg-Codes").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("Beleg-Typen") != null && !jsonObj.get("Beleg-Typen").isJsonNull() && !jsonObj.get("Beleg-Typen").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `Beleg-Typen` to be an array in the JSON string but got `%s`", jsonObj.get("Beleg-Typen").toString()));
      }
      // validate the optional field `Belegdaten`
      if (jsonObj.get("Belegdaten") != null && !jsonObj.get("Belegdaten").isJsonNull()) {
        SignierteBelegdaten.validateJsonElement(jsonObj.get("Belegdaten"));
      }
      if ((jsonObj.get("JWS") != null && !jsonObj.get("JWS").isJsonNull()) && !jsonObj.get("JWS").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `JWS` to be a primitive type in the JSON string but got `%s`", jsonObj.get("JWS").toString()));
      }
      if ((jsonObj.get("QR") != null && !jsonObj.get("QR").isJsonNull()) && !jsonObj.get("QR").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `QR` to be a primitive type in the JSON string but got `%s`", jsonObj.get("QR").toString()));
      }
      if ((jsonObj.get("QR-Link") != null && !jsonObj.get("QR-Link").isJsonNull()) && !jsonObj.get("QR-Link").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `QR-Link` to be a primitive type in the JSON string but got `%s`", jsonObj.get("QR-Link").toString()));
      }
      if ((jsonObj.get("Registrierkasse-UUID") != null && !jsonObj.get("Registrierkasse-UUID").isJsonNull()) && !jsonObj.get("Registrierkasse-UUID").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Registrierkasse-UUID` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Registrierkasse-UUID").toString()));
      }
      if ((jsonObj.get("Signaturerstellungseinheit-UUID") != null && !jsonObj.get("Signaturerstellungseinheit-UUID").isJsonNull()) && !jsonObj.get("Signaturerstellungseinheit-UUID").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Signaturerstellungseinheit-UUID` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Signaturerstellungseinheit-UUID").toString()));
      }
      if ((jsonObj.get("_href") != null && !jsonObj.get("_href").isJsonNull()) && !jsonObj.get("_href").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `_href` to be a primitive type in the JSON string but got `%s`", jsonObj.get("_href").toString()));
      }
      if ((jsonObj.get("_uuid") != null && !jsonObj.get("_uuid").isJsonNull()) && !jsonObj.get("_uuid").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `_uuid` to be a primitive type in the JSON string but got `%s`", jsonObj.get("_uuid").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Beleg.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Beleg' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Beleg> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Beleg.class));

       return (TypeAdapter<T>) new TypeAdapter<Beleg>() {
           @Override
           public void write(JsonWriter out, Beleg value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Beleg read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Beleg given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Beleg
   * @throws IOException if the JSON string is invalid with respect to Beleg
   */
  public static Beleg fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Beleg.class);
  }

  /**
   * Convert an instance of Beleg to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

