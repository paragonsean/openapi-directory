/*
 * obono RKSV API
 * Provides a RESTful API for interacting with virtual cash registers and creating receipts that are conform with the Registrierkassensicherheitsverordnung (RKSV).  You may find our [automatically generated clients](./clients) for various programming languages and environments helpful... 
 *
 * The version of the OpenAPI document: 1.4.0.0
 * Contact: info@obono.at
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Posten
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:00:42.053838-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Posten {
  public static final String SERIALIZED_NAME_BEZEICHNUNG = "Bezeichnung";
  @SerializedName(SERIALIZED_NAME_BEZEICHNUNG)
  private String bezeichnung;

  public static final String SERIALIZED_NAME_BRUTTO_BETRAG = "BruttoBetrag";
  @SerializedName(SERIALIZED_NAME_BRUTTO_BETRAG)
  private Integer bruttoBetrag;

  public static final String SERIALIZED_NAME_EXTERNER_BELEG_BELEGKREIS = "Externer-Beleg-Belegkreis";
  @SerializedName(SERIALIZED_NAME_EXTERNER_BELEG_BELEGKREIS)
  private String externerBelegBelegkreis;

  public static final String SERIALIZED_NAME_EXTERNER_BELEG_BEZEICHNUNG = "Externer-Beleg-Bezeichnung";
  @SerializedName(SERIALIZED_NAME_EXTERNER_BELEG_BEZEICHNUNG)
  private String externerBelegBezeichnung;

  public static final String SERIALIZED_NAME_EXTERNER_BELEG_REFERENZ = "Externer-Beleg-Referenz";
  @SerializedName(SERIALIZED_NAME_EXTERNER_BELEG_REFERENZ)
  private String externerBelegReferenz;

  public static final String SERIALIZED_NAME_MENGE = "Menge";
  @SerializedName(SERIALIZED_NAME_MENGE)
  private Integer menge;

  public static final String SERIALIZED_NAME_NETTO_BETRAG = "NettoBetrag";
  @SerializedName(SERIALIZED_NAME_NETTO_BETRAG)
  private Integer nettoBetrag;

  /**
   * Gets or Sets satz
   */
  @JsonAdapter(SatzEnum.Adapter.class)
  public enum SatzEnum {
    NORMAL("NORMAL"),
    
    ERMAESSIGT1("ERMAESSIGT1"),
    
    ERMAESSIGT2("ERMAESSIGT2"),
    
    BESONDERS("BESONDERS"),
    
    NULL("NULL");

    private String value;

    SatzEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static SatzEnum fromValue(String value) {
      for (SatzEnum b : SatzEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<SatzEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final SatzEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public SatzEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return SatzEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      SatzEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_SATZ = "Satz";
  @SerializedName(SERIALIZED_NAME_SATZ)
  private SatzEnum satz;

  public Posten() {
  }

  public Posten bezeichnung(String bezeichnung) {
    this.bezeichnung = bezeichnung;
    return this;
  }

  /**
   * Get bezeichnung
   * @return bezeichnung
   */
  @javax.annotation.Nonnull
  public String getBezeichnung() {
    return bezeichnung;
  }

  public void setBezeichnung(String bezeichnung) {
    this.bezeichnung = bezeichnung;
  }


  public Posten bruttoBetrag(Integer bruttoBetrag) {
    this.bruttoBetrag = bruttoBetrag;
    return this;
  }

  /**
   * The amount in cents
   * @return bruttoBetrag
   */
  @javax.annotation.Nonnull
  public Integer getBruttoBetrag() {
    return bruttoBetrag;
  }

  public void setBruttoBetrag(Integer bruttoBetrag) {
    this.bruttoBetrag = bruttoBetrag;
  }


  public Posten externerBelegBelegkreis(String externerBelegBelegkreis) {
    this.externerBelegBelegkreis = externerBelegBelegkreis;
    return this;
  }

  /**
   * Get externerBelegBelegkreis
   * @return externerBelegBelegkreis
   */
  @javax.annotation.Nullable
  public String getExternerBelegBelegkreis() {
    return externerBelegBelegkreis;
  }

  public void setExternerBelegBelegkreis(String externerBelegBelegkreis) {
    this.externerBelegBelegkreis = externerBelegBelegkreis;
  }


  public Posten externerBelegBezeichnung(String externerBelegBezeichnung) {
    this.externerBelegBezeichnung = externerBelegBezeichnung;
    return this;
  }

  /**
   * Get externerBelegBezeichnung
   * @return externerBelegBezeichnung
   */
  @javax.annotation.Nullable
  public String getExternerBelegBezeichnung() {
    return externerBelegBezeichnung;
  }

  public void setExternerBelegBezeichnung(String externerBelegBezeichnung) {
    this.externerBelegBezeichnung = externerBelegBezeichnung;
  }


  public Posten externerBelegReferenz(String externerBelegReferenz) {
    this.externerBelegReferenz = externerBelegReferenz;
    return this;
  }

  /**
   * Get externerBelegReferenz
   * @return externerBelegReferenz
   */
  @javax.annotation.Nullable
  public String getExternerBelegReferenz() {
    return externerBelegReferenz;
  }

  public void setExternerBelegReferenz(String externerBelegReferenz) {
    this.externerBelegReferenz = externerBelegReferenz;
  }


  public Posten menge(Integer menge) {
    this.menge = menge;
    return this;
  }

  /**
   * Get menge
   * @return menge
   */
  @javax.annotation.Nonnull
  public Integer getMenge() {
    return menge;
  }

  public void setMenge(Integer menge) {
    this.menge = menge;
  }


  public Posten nettoBetrag(Integer nettoBetrag) {
    this.nettoBetrag = nettoBetrag;
    return this;
  }

  /**
   * The amount in cents
   * @return nettoBetrag
   */
  @javax.annotation.Nonnull
  public Integer getNettoBetrag() {
    return nettoBetrag;
  }

  public void setNettoBetrag(Integer nettoBetrag) {
    this.nettoBetrag = nettoBetrag;
  }


  public Posten satz(SatzEnum satz) {
    this.satz = satz;
    return this;
  }

  /**
   * Get satz
   * @return satz
   */
  @javax.annotation.Nonnull
  public SatzEnum getSatz() {
    return satz;
  }

  public void setSatz(SatzEnum satz) {
    this.satz = satz;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Posten posten = (Posten) o;
    return Objects.equals(this.bezeichnung, posten.bezeichnung) &&
        Objects.equals(this.bruttoBetrag, posten.bruttoBetrag) &&
        Objects.equals(this.externerBelegBelegkreis, posten.externerBelegBelegkreis) &&
        Objects.equals(this.externerBelegBezeichnung, posten.externerBelegBezeichnung) &&
        Objects.equals(this.externerBelegReferenz, posten.externerBelegReferenz) &&
        Objects.equals(this.menge, posten.menge) &&
        Objects.equals(this.nettoBetrag, posten.nettoBetrag) &&
        Objects.equals(this.satz, posten.satz);
  }

  @Override
  public int hashCode() {
    return Objects.hash(bezeichnung, bruttoBetrag, externerBelegBelegkreis, externerBelegBezeichnung, externerBelegReferenz, menge, nettoBetrag, satz);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Posten {\n");
    sb.append("    bezeichnung: ").append(toIndentedString(bezeichnung)).append("\n");
    sb.append("    bruttoBetrag: ").append(toIndentedString(bruttoBetrag)).append("\n");
    sb.append("    externerBelegBelegkreis: ").append(toIndentedString(externerBelegBelegkreis)).append("\n");
    sb.append("    externerBelegBezeichnung: ").append(toIndentedString(externerBelegBezeichnung)).append("\n");
    sb.append("    externerBelegReferenz: ").append(toIndentedString(externerBelegReferenz)).append("\n");
    sb.append("    menge: ").append(toIndentedString(menge)).append("\n");
    sb.append("    nettoBetrag: ").append(toIndentedString(nettoBetrag)).append("\n");
    sb.append("    satz: ").append(toIndentedString(satz)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("Bezeichnung");
    openapiFields.add("BruttoBetrag");
    openapiFields.add("Externer-Beleg-Belegkreis");
    openapiFields.add("Externer-Beleg-Bezeichnung");
    openapiFields.add("Externer-Beleg-Referenz");
    openapiFields.add("Menge");
    openapiFields.add("NettoBetrag");
    openapiFields.add("Satz");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("Bezeichnung");
    openapiRequiredFields.add("BruttoBetrag");
    openapiRequiredFields.add("Menge");
    openapiRequiredFields.add("NettoBetrag");
    openapiRequiredFields.add("Satz");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Posten
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Posten.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Posten is not found in the empty JSON string", Posten.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Posten.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Posten` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : Posten.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("Bezeichnung").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Bezeichnung` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Bezeichnung").toString()));
      }
      if ((jsonObj.get("Externer-Beleg-Belegkreis") != null && !jsonObj.get("Externer-Beleg-Belegkreis").isJsonNull()) && !jsonObj.get("Externer-Beleg-Belegkreis").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Externer-Beleg-Belegkreis` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Externer-Beleg-Belegkreis").toString()));
      }
      if ((jsonObj.get("Externer-Beleg-Bezeichnung") != null && !jsonObj.get("Externer-Beleg-Bezeichnung").isJsonNull()) && !jsonObj.get("Externer-Beleg-Bezeichnung").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Externer-Beleg-Bezeichnung` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Externer-Beleg-Bezeichnung").toString()));
      }
      if ((jsonObj.get("Externer-Beleg-Referenz") != null && !jsonObj.get("Externer-Beleg-Referenz").isJsonNull()) && !jsonObj.get("Externer-Beleg-Referenz").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Externer-Beleg-Referenz` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Externer-Beleg-Referenz").toString()));
      }
      if (!jsonObj.get("Satz").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Satz` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Satz").toString()));
      }
      // validate the required field `Satz`
      SatzEnum.validateJsonElement(jsonObj.get("Satz"));
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Posten.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Posten' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Posten> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Posten.class));

       return (TypeAdapter<T>) new TypeAdapter<Posten>() {
           @Override
           public void write(JsonWriter out, Posten value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Posten read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Posten given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Posten
   * @throws IOException if the JSON string is invalid with respect to Posten
   */
  public static Posten fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Posten.class);
  }

  /**
   * Convert an instance of Posten to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

