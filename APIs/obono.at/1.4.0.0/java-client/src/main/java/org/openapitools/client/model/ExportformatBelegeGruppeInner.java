/*
 * obono RKSV API
 * Provides a RESTful API for interacting with virtual cash registers and creating receipts that are conform with the Registrierkassensicherheitsverordnung (RKSV).  You may find our [automatically generated clients](./clients) for various programming languages and environments helpful... 
 *
 * The version of the OpenAPI document: 1.4.0.0
 * Contact: info@obono.at
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * ExportformatBelegeGruppeInner
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:00:42.053838-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ExportformatBelegeGruppeInner {
  public static final String SERIALIZED_NAME_BELEGE_KOMPAKT = "Belege-kompakt";
  @SerializedName(SERIALIZED_NAME_BELEGE_KOMPAKT)
  private List<String> belegeKompakt = new ArrayList<>();

  public static final String SERIALIZED_NAME_SIGNATURZERTIFIKAT = "Signaturzertifikat";
  @SerializedName(SERIALIZED_NAME_SIGNATURZERTIFIKAT)
  private String signaturzertifikat;

  public static final String SERIALIZED_NAME_ZERTIFIZIERUNGSSTELLEN = "Zertifizierungsstellen";
  @SerializedName(SERIALIZED_NAME_ZERTIFIZIERUNGSSTELLEN)
  private List<String> zertifizierungsstellen = new ArrayList<>();

  public ExportformatBelegeGruppeInner() {
  }

  public ExportformatBelegeGruppeInner belegeKompakt(List<String> belegeKompakt) {
    this.belegeKompakt = belegeKompakt;
    return this;
  }

  public ExportformatBelegeGruppeInner addBelegeKompaktItem(String belegeKompaktItem) {
    if (this.belegeKompakt == null) {
      this.belegeKompakt = new ArrayList<>();
    }
    this.belegeKompakt.add(belegeKompaktItem);
    return this;
  }

  /**
   * Get belegeKompakt
   * @return belegeKompakt
   */
  @javax.annotation.Nonnull
  public List<String> getBelegeKompakt() {
    return belegeKompakt;
  }

  public void setBelegeKompakt(List<String> belegeKompakt) {
    this.belegeKompakt = belegeKompakt;
  }


  public ExportformatBelegeGruppeInner signaturzertifikat(String signaturzertifikat) {
    this.signaturzertifikat = signaturzertifikat;
    return this;
  }

  /**
   * Get signaturzertifikat
   * @return signaturzertifikat
   */
  @javax.annotation.Nonnull
  public String getSignaturzertifikat() {
    return signaturzertifikat;
  }

  public void setSignaturzertifikat(String signaturzertifikat) {
    this.signaturzertifikat = signaturzertifikat;
  }


  public ExportformatBelegeGruppeInner zertifizierungsstellen(List<String> zertifizierungsstellen) {
    this.zertifizierungsstellen = zertifizierungsstellen;
    return this;
  }

  public ExportformatBelegeGruppeInner addZertifizierungsstellenItem(String zertifizierungsstellenItem) {
    if (this.zertifizierungsstellen == null) {
      this.zertifizierungsstellen = new ArrayList<>();
    }
    this.zertifizierungsstellen.add(zertifizierungsstellenItem);
    return this;
  }

  /**
   * Get zertifizierungsstellen
   * @return zertifizierungsstellen
   */
  @javax.annotation.Nonnull
  public List<String> getZertifizierungsstellen() {
    return zertifizierungsstellen;
  }

  public void setZertifizierungsstellen(List<String> zertifizierungsstellen) {
    this.zertifizierungsstellen = zertifizierungsstellen;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ExportformatBelegeGruppeInner exportformatBelegeGruppeInner = (ExportformatBelegeGruppeInner) o;
    return Objects.equals(this.belegeKompakt, exportformatBelegeGruppeInner.belegeKompakt) &&
        Objects.equals(this.signaturzertifikat, exportformatBelegeGruppeInner.signaturzertifikat) &&
        Objects.equals(this.zertifizierungsstellen, exportformatBelegeGruppeInner.zertifizierungsstellen);
  }

  @Override
  public int hashCode() {
    return Objects.hash(belegeKompakt, signaturzertifikat, zertifizierungsstellen);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ExportformatBelegeGruppeInner {\n");
    sb.append("    belegeKompakt: ").append(toIndentedString(belegeKompakt)).append("\n");
    sb.append("    signaturzertifikat: ").append(toIndentedString(signaturzertifikat)).append("\n");
    sb.append("    zertifizierungsstellen: ").append(toIndentedString(zertifizierungsstellen)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("Belege-kompakt");
    openapiFields.add("Signaturzertifikat");
    openapiFields.add("Zertifizierungsstellen");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("Belege-kompakt");
    openapiRequiredFields.add("Signaturzertifikat");
    openapiRequiredFields.add("Zertifizierungsstellen");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ExportformatBelegeGruppeInner
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ExportformatBelegeGruppeInner.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ExportformatBelegeGruppeInner is not found in the empty JSON string", ExportformatBelegeGruppeInner.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ExportformatBelegeGruppeInner.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ExportformatBelegeGruppeInner` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : ExportformatBelegeGruppeInner.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // ensure the required json array is present
      if (jsonObj.get("Belege-kompakt") == null) {
        throw new IllegalArgumentException("Expected the field `linkedContent` to be an array in the JSON string but got `null`");
      } else if (!jsonObj.get("Belege-kompakt").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `Belege-kompakt` to be an array in the JSON string but got `%s`", jsonObj.get("Belege-kompakt").toString()));
      }
      if (!jsonObj.get("Signaturzertifikat").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Signaturzertifikat` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Signaturzertifikat").toString()));
      }
      // ensure the required json array is present
      if (jsonObj.get("Zertifizierungsstellen") == null) {
        throw new IllegalArgumentException("Expected the field `linkedContent` to be an array in the JSON string but got `null`");
      } else if (!jsonObj.get("Zertifizierungsstellen").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `Zertifizierungsstellen` to be an array in the JSON string but got `%s`", jsonObj.get("Zertifizierungsstellen").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ExportformatBelegeGruppeInner.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ExportformatBelegeGruppeInner' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ExportformatBelegeGruppeInner> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ExportformatBelegeGruppeInner.class));

       return (TypeAdapter<T>) new TypeAdapter<ExportformatBelegeGruppeInner>() {
           @Override
           public void write(JsonWriter out, ExportformatBelegeGruppeInner value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ExportformatBelegeGruppeInner read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ExportformatBelegeGruppeInner given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ExportformatBelegeGruppeInner
   * @throws IOException if the JSON string is invalid with respect to ExportformatBelegeGruppeInner
   */
  public static ExportformatBelegeGruppeInner fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ExportformatBelegeGruppeInner.class);
  }

  /**
   * Convert an instance of ExportformatBelegeGruppeInner to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

