/*
 * obono RKSV API
 * Provides a RESTful API for interacting with virtual cash registers and creating receipts that are conform with the Registrierkassensicherheitsverordnung (RKSV).  You may find our [automatically generated clients](./clients) for various programming languages and environments helpful... 
 *
 * The version of the OpenAPI document: 1.4.0.0
 * Contact: info@obono.at
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.UUID;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Monatsbeleg
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:00:42.053838-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Monatsbeleg {
  public static final String SERIALIZED_NAME_BELEG_U_U_I_D = "Beleg-UUID";
  @SerializedName(SERIALIZED_NAME_BELEG_U_U_I_D)
  private UUID belegUUID;

  public static final String SERIALIZED_NAME_FO_N_GEPRUEFT_DATUM_UHRZEIT = "FON-Geprueft-Datum-Uhrzeit";
  @SerializedName(SERIALIZED_NAME_FO_N_GEPRUEFT_DATUM_UHRZEIT)
  private String foNGeprueftDatumUhrzeit;

  public static final String SERIALIZED_NAME_FO_N_GEPRUEFT_ERFOLGREICH = "FON-Geprueft-Erfolgreich";
  @SerializedName(SERIALIZED_NAME_FO_N_GEPRUEFT_ERFOLGREICH)
  private Boolean foNGeprueftErfolgreich;

  public static final String SERIALIZED_NAME_JAHR = "Jahr";
  @SerializedName(SERIALIZED_NAME_JAHR)
  private Integer jahr;

  public static final String SERIALIZED_NAME_MONAT = "Monat";
  @SerializedName(SERIALIZED_NAME_MONAT)
  private Integer monat;

  public Monatsbeleg() {
  }

  public Monatsbeleg belegUUID(UUID belegUUID) {
    this.belegUUID = belegUUID;
    return this;
  }

  /**
   * Get belegUUID
   * @return belegUUID
   */
  @javax.annotation.Nullable
  public UUID getBelegUUID() {
    return belegUUID;
  }

  public void setBelegUUID(UUID belegUUID) {
    this.belegUUID = belegUUID;
  }


  public Monatsbeleg foNGeprueftDatumUhrzeit(String foNGeprueftDatumUhrzeit) {
    this.foNGeprueftDatumUhrzeit = foNGeprueftDatumUhrzeit;
    return this;
  }

  /**
   * Get foNGeprueftDatumUhrzeit
   * @return foNGeprueftDatumUhrzeit
   */
  @javax.annotation.Nullable
  public String getFoNGeprueftDatumUhrzeit() {
    return foNGeprueftDatumUhrzeit;
  }

  public void setFoNGeprueftDatumUhrzeit(String foNGeprueftDatumUhrzeit) {
    this.foNGeprueftDatumUhrzeit = foNGeprueftDatumUhrzeit;
  }


  public Monatsbeleg foNGeprueftErfolgreich(Boolean foNGeprueftErfolgreich) {
    this.foNGeprueftErfolgreich = foNGeprueftErfolgreich;
    return this;
  }

  /**
   * Get foNGeprueftErfolgreich
   * @return foNGeprueftErfolgreich
   */
  @javax.annotation.Nullable
  public Boolean getFoNGeprueftErfolgreich() {
    return foNGeprueftErfolgreich;
  }

  public void setFoNGeprueftErfolgreich(Boolean foNGeprueftErfolgreich) {
    this.foNGeprueftErfolgreich = foNGeprueftErfolgreich;
  }


  public Monatsbeleg jahr(Integer jahr) {
    this.jahr = jahr;
    return this;
  }

  /**
   * Get jahr
   * @return jahr
   */
  @javax.annotation.Nullable
  public Integer getJahr() {
    return jahr;
  }

  public void setJahr(Integer jahr) {
    this.jahr = jahr;
  }


  public Monatsbeleg monat(Integer monat) {
    this.monat = monat;
    return this;
  }

  /**
   * Get monat
   * @return monat
   */
  @javax.annotation.Nullable
  public Integer getMonat() {
    return monat;
  }

  public void setMonat(Integer monat) {
    this.monat = monat;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Monatsbeleg monatsbeleg = (Monatsbeleg) o;
    return Objects.equals(this.belegUUID, monatsbeleg.belegUUID) &&
        Objects.equals(this.foNGeprueftDatumUhrzeit, monatsbeleg.foNGeprueftDatumUhrzeit) &&
        Objects.equals(this.foNGeprueftErfolgreich, monatsbeleg.foNGeprueftErfolgreich) &&
        Objects.equals(this.jahr, monatsbeleg.jahr) &&
        Objects.equals(this.monat, monatsbeleg.monat);
  }

  @Override
  public int hashCode() {
    return Objects.hash(belegUUID, foNGeprueftDatumUhrzeit, foNGeprueftErfolgreich, jahr, monat);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Monatsbeleg {\n");
    sb.append("    belegUUID: ").append(toIndentedString(belegUUID)).append("\n");
    sb.append("    foNGeprueftDatumUhrzeit: ").append(toIndentedString(foNGeprueftDatumUhrzeit)).append("\n");
    sb.append("    foNGeprueftErfolgreich: ").append(toIndentedString(foNGeprueftErfolgreich)).append("\n");
    sb.append("    jahr: ").append(toIndentedString(jahr)).append("\n");
    sb.append("    monat: ").append(toIndentedString(monat)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("Beleg-UUID");
    openapiFields.add("FON-Geprueft-Datum-Uhrzeit");
    openapiFields.add("FON-Geprueft-Erfolgreich");
    openapiFields.add("Jahr");
    openapiFields.add("Monat");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Monatsbeleg
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Monatsbeleg.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Monatsbeleg is not found in the empty JSON string", Monatsbeleg.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Monatsbeleg.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Monatsbeleg` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("Beleg-UUID") != null && !jsonObj.get("Beleg-UUID").isJsonNull()) && !jsonObj.get("Beleg-UUID").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Beleg-UUID` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Beleg-UUID").toString()));
      }
      if ((jsonObj.get("FON-Geprueft-Datum-Uhrzeit") != null && !jsonObj.get("FON-Geprueft-Datum-Uhrzeit").isJsonNull()) && !jsonObj.get("FON-Geprueft-Datum-Uhrzeit").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `FON-Geprueft-Datum-Uhrzeit` to be a primitive type in the JSON string but got `%s`", jsonObj.get("FON-Geprueft-Datum-Uhrzeit").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Monatsbeleg.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Monatsbeleg' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Monatsbeleg> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Monatsbeleg.class));

       return (TypeAdapter<T>) new TypeAdapter<Monatsbeleg>() {
           @Override
           public void write(JsonWriter out, Monatsbeleg value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Monatsbeleg read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Monatsbeleg given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Monatsbeleg
   * @throws IOException if the JSON string is invalid with respect to Monatsbeleg
   */
  public static Monatsbeleg fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Monatsbeleg.class);
  }

  /**
   * Convert an instance of Monatsbeleg to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

